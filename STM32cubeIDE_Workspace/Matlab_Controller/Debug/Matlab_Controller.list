
Matlab_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e58c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800e760  0800e760  0001e760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea80  0800ea80  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea80  0800ea80  0001ea80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea88  0800ea88  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea88  0800ea88  0001ea88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea8c  0800ea8c  0001ea8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800ea90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000525c  2000007c  0800eb0c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200052d8  0800eb0c  000252d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024c23  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044ef  00000000  00000000  00044ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  000491c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001638  00000000  00000000  0004a990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000053b0  00000000  00000000  0004bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0f4  00000000  00000000  00051378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de9b2  00000000  00000000  0006d46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014be1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c00  00000000  00000000  0014be74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e744 	.word	0x0800e744

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	0800e744 	.word	0x0800e744

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2iz>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d215      	bcs.n	8000b1e <__aeabi_d2iz+0x36>
 8000af2:	d511      	bpl.n	8000b18 <__aeabi_d2iz+0x30>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d912      	bls.n	8000b24 <__aeabi_d2iz+0x3c>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d105      	bne.n	8000b30 <__aeabi_d2iz+0x48>
 8000b24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	bf08      	it	eq
 8000b2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_d2uiz>:
 8000b38:	004a      	lsls	r2, r1, #1
 8000b3a:	d211      	bcs.n	8000b60 <__aeabi_d2uiz+0x28>
 8000b3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b40:	d211      	bcs.n	8000b66 <__aeabi_d2uiz+0x2e>
 8000b42:	d50d      	bpl.n	8000b60 <__aeabi_d2uiz+0x28>
 8000b44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b4c:	d40e      	bmi.n	8000b6c <__aeabi_d2uiz+0x34>
 8000b4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_d2uiz+0x3a>
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0000 	mov.w	r0, #0
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c2c:	f000 b96e 	b.w	8000f0c <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468c      	mov	ip, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f040 8083 	bne.w	8000d5e <__udivmoddi4+0x116>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4617      	mov	r7, r2
 8000c5c:	d947      	bls.n	8000cee <__udivmoddi4+0xa6>
 8000c5e:	fab2 f282 	clz	r2, r2
 8000c62:	b142      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c64:	f1c2 0020 	rsb	r0, r2, #32
 8000c68:	fa24 f000 	lsr.w	r0, r4, r0
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4097      	lsls	r7, r2
 8000c70:	ea40 0c01 	orr.w	ip, r0, r1
 8000c74:	4094      	lsls	r4, r2
 8000c76:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7a:	0c23      	lsrs	r3, r4, #16
 8000c7c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c80:	fa1f fe87 	uxth.w	lr, r7
 8000c84:	fb08 c116 	mls	r1, r8, r6, ip
 8000c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c90:	4299      	cmp	r1, r3
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x60>
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c9a:	f080 8119 	bcs.w	8000ed0 <__udivmoddi4+0x288>
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	f240 8116 	bls.w	8000ed0 <__udivmoddi4+0x288>
 8000ca4:	3e02      	subs	r6, #2
 8000ca6:	443b      	add	r3, r7
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cbc:	45a6      	cmp	lr, r4
 8000cbe:	d909      	bls.n	8000cd4 <__udivmoddi4+0x8c>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc6:	f080 8105 	bcs.w	8000ed4 <__udivmoddi4+0x28c>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f240 8102 	bls.w	8000ed4 <__udivmoddi4+0x28c>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	443c      	add	r4, r7
 8000cd4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd8:	eba4 040e 	sub.w	r4, r4, lr
 8000cdc:	2600      	movs	r6, #0
 8000cde:	b11d      	cbz	r5, 8000ce8 <__udivmoddi4+0xa0>
 8000ce0:	40d4      	lsrs	r4, r2
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xaa>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f282 	clz	r2, r2
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d150      	bne.n	8000d9c <__udivmoddi4+0x154>
 8000cfa:	1bcb      	subs	r3, r1, r7
 8000cfc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	2601      	movs	r6, #1
 8000d06:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0a:	0c21      	lsrs	r1, r4, #16
 8000d0c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d14:	fb08 f30c 	mul.w	r3, r8, ip
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0xe4>
 8000d1c:	1879      	adds	r1, r7, r1
 8000d1e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0xe2>
 8000d24:	428b      	cmp	r3, r1
 8000d26:	f200 80e9 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	1ac9      	subs	r1, r1, r3
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d34:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d38:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d3c:	fb08 f800 	mul.w	r8, r8, r0
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x10c>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x10a>
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	f200 80d9 	bhi.w	8000f04 <__udivmoddi4+0x2bc>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 0408 	sub.w	r4, r4, r8
 8000d58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d5c:	e7bf      	b.n	8000cde <__udivmoddi4+0x96>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0x12e>
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	f000 80b1 	beq.w	8000eca <__udivmoddi4+0x282>
 8000d68:	2600      	movs	r6, #0
 8000d6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6e:	4630      	mov	r0, r6
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f683 	clz	r6, r3
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	d14a      	bne.n	8000e14 <__udivmoddi4+0x1cc>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0x140>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80b8 	bhi.w	8000ef8 <__udivmoddi4+0x2b0>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	468c      	mov	ip, r1
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	d0a8      	beq.n	8000ce8 <__udivmoddi4+0xa0>
 8000d96:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d9a:	e7a5      	b.n	8000ce8 <__udivmoddi4+0xa0>
 8000d9c:	f1c2 0320 	rsb	r3, r2, #32
 8000da0:	fa20 f603 	lsr.w	r6, r0, r3
 8000da4:	4097      	lsls	r7, r2
 8000da6:	fa01 f002 	lsl.w	r0, r1, r2
 8000daa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dae:	40d9      	lsrs	r1, r3
 8000db0:	4330      	orrs	r0, r6
 8000db2:	0c03      	lsrs	r3, r0, #16
 8000db4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000db8:	fa1f f887 	uxth.w	r8, r7
 8000dbc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb06 f108 	mul.w	r1, r6, r8
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	fa04 f402 	lsl.w	r4, r4, r2
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x19c>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000dd6:	f080 808d 	bcs.w	8000ef4 <__udivmoddi4+0x2ac>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 808a 	bls.w	8000ef4 <__udivmoddi4+0x2ac>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b281      	uxth	r1, r0
 8000de8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb00 f308 	mul.w	r3, r0, r8
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x1c4>
 8000dfc:	1879      	adds	r1, r7, r1
 8000dfe:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e02:	d273      	bcs.n	8000eec <__udivmoddi4+0x2a4>
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d971      	bls.n	8000eec <__udivmoddi4+0x2a4>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4439      	add	r1, r7
 8000e0c:	1acb      	subs	r3, r1, r3
 8000e0e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e12:	e778      	b.n	8000d06 <__udivmoddi4+0xbe>
 8000e14:	f1c6 0c20 	rsb	ip, r6, #32
 8000e18:	fa03 f406 	lsl.w	r4, r3, r6
 8000e1c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e20:	431c      	orrs	r4, r3
 8000e22:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e26:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e2e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e32:	431f      	orrs	r7, r3
 8000e34:	0c3b      	lsrs	r3, r7, #16
 8000e36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3a:	fa1f f884 	uxth.w	r8, r4
 8000e3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e42:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e46:	fb09 fa08 	mul.w	sl, r9, r8
 8000e4a:	458a      	cmp	sl, r1
 8000e4c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e50:	fa00 f306 	lsl.w	r3, r0, r6
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x220>
 8000e56:	1861      	adds	r1, r4, r1
 8000e58:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e5c:	d248      	bcs.n	8000ef0 <__udivmoddi4+0x2a8>
 8000e5e:	458a      	cmp	sl, r1
 8000e60:	d946      	bls.n	8000ef0 <__udivmoddi4+0x2a8>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4421      	add	r1, r4
 8000e68:	eba1 010a 	sub.w	r1, r1, sl
 8000e6c:	b2bf      	uxth	r7, r7
 8000e6e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e72:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e76:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e7a:	fb00 f808 	mul.w	r8, r0, r8
 8000e7e:	45b8      	cmp	r8, r7
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x24a>
 8000e82:	19e7      	adds	r7, r4, r7
 8000e84:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e88:	d22e      	bcs.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e8a:	45b8      	cmp	r8, r7
 8000e8c:	d92c      	bls.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4427      	add	r7, r4
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	eba7 0708 	sub.w	r7, r7, r8
 8000e9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9e:	454f      	cmp	r7, r9
 8000ea0:	46c6      	mov	lr, r8
 8000ea2:	4649      	mov	r1, r9
 8000ea4:	d31a      	bcc.n	8000edc <__udivmoddi4+0x294>
 8000ea6:	d017      	beq.n	8000ed8 <__udivmoddi4+0x290>
 8000ea8:	b15d      	cbz	r5, 8000ec2 <__udivmoddi4+0x27a>
 8000eaa:	ebb3 020e 	subs.w	r2, r3, lr
 8000eae:	eb67 0701 	sbc.w	r7, r7, r1
 8000eb2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eb6:	40f2      	lsrs	r2, r6
 8000eb8:	ea4c 0202 	orr.w	r2, ip, r2
 8000ebc:	40f7      	lsrs	r7, r6
 8000ebe:	e9c5 2700 	strd	r2, r7, [r5]
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e70b      	b.n	8000ce8 <__udivmoddi4+0xa0>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e9      	b.n	8000ca8 <__udivmoddi4+0x60>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6fd      	b.n	8000cd4 <__udivmoddi4+0x8c>
 8000ed8:	4543      	cmp	r3, r8
 8000eda:	d2e5      	bcs.n	8000ea8 <__udivmoddi4+0x260>
 8000edc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7df      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e7d2      	b.n	8000e92 <__udivmoddi4+0x24a>
 8000eec:	4660      	mov	r0, ip
 8000eee:	e78d      	b.n	8000e0c <__udivmoddi4+0x1c4>
 8000ef0:	4681      	mov	r9, r0
 8000ef2:	e7b9      	b.n	8000e68 <__udivmoddi4+0x220>
 8000ef4:	4666      	mov	r6, ip
 8000ef6:	e775      	b.n	8000de4 <__udivmoddi4+0x19c>
 8000ef8:	4630      	mov	r0, r6
 8000efa:	e74a      	b.n	8000d92 <__udivmoddi4+0x14a>
 8000efc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f00:	4439      	add	r1, r7
 8000f02:	e713      	b.n	8000d2c <__udivmoddi4+0xe4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	443c      	add	r4, r7
 8000f08:	e724      	b.n	8000d54 <__udivmoddi4+0x10c>
 8000f0a:	bf00      	nop

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f16:	f004 f8dd 	bl	80050d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1a:	f000 f88b 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1e:	f000 fadf 	bl	80014e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f22:	f000 fabd 	bl	80014a0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000f26:	f000 f99b 	bl	8001260 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f2a:	f000 f8f1 	bl	8001110 <MX_TIM1_Init>
  MX_TIM5_Init();
 8000f2e:	f000 fa39 	bl	80013a4 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8000f32:	f000 fa8b 	bl	800144c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000f36:	f000 f9e7 	bl	8001308 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Initializing my libraries
  MAIN_DIFFDRIVE_Init();
 8000f3a:	f000 fb9b 	bl	8001674 <MAIN_DIFFDRIVE_Init>
  MAIN_DATASTREAM_Init();
 8000f3e:	f000 fb7d 	bl	800163c <MAIN_DATASTREAM_Init>
  MAIN_MAF_Init();
 8000f42:	f000 fc73 	bl	800182c <MAIN_MAF_Init>

  // Using the flag "wait_button" to start MCU with WIFI disabled
  // if blue button is pressed during reset. It's useful to avoid
  // battery leakage
  bool wait_for_button= false;
 8000f46:	2300      	movs	r3, #0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8000f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4e:	482e      	ldr	r0, [pc, #184]	; (8001008 <main+0xf8>)
 8000f50:	f004 ff5a 	bl	8005e08 <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d11a      	bne.n	8000f90 <main+0x80>
   	wait_for_button= true;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	71fb      	strb	r3, [r7, #7]
   	// Show pressed button
   	while( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8000f5e:	e006      	b.n	8000f6e <main+0x5e>
   		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f60:	2120      	movs	r1, #32
 8000f62:	482a      	ldr	r0, [pc, #168]	; (800100c <main+0xfc>)
 8000f64:	f004 ff81 	bl	8005e6a <HAL_GPIO_TogglePin>
   		HAL_Delay(50);
 8000f68:	2032      	movs	r0, #50	; 0x32
 8000f6a:	f004 f8f5 	bl	8005158 <HAL_Delay>
   	while( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8000f6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f72:	4825      	ldr	r0, [pc, #148]	; (8001008 <main+0xf8>)
 8000f74:	f004 ff48 	bl	8005e08 <HAL_GPIO_ReadPin>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f0      	beq.n	8000f60 <main+0x50>
   	}
   	// Turn on LED
   	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2120      	movs	r1, #32
 8000f82:	4822      	ldr	r0, [pc, #136]	; (800100c <main+0xfc>)
 8000f84:	f004 ff58 	bl	8005e38 <HAL_GPIO_WritePin>
   	// Debouncing released button
   	HAL_Delay(1000);
 8000f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f8c:	f004 f8e4 	bl	8005158 <HAL_Delay>
  }

  // Reset ESP-8266
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2101      	movs	r1, #1
 8000f94:	481c      	ldr	r0, [pc, #112]	; (8001008 <main+0xf8>)
 8000f96:	f004 ff4f 	bl	8005e38 <HAL_GPIO_WritePin>

  // Wait for blue button if this option is on
  if( wait_for_button )
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d008      	beq.n	8000fb2 <main+0xa2>
	  while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) )
 8000fa0:	bf00      	nop
 8000fa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa6:	4818      	ldr	r0, [pc, #96]	; (8001008 <main+0xf8>)
 8000fa8:	f004 ff2e 	bl	8005e08 <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f7      	bne.n	8000fa2 <main+0x92>
		  	  ;

  HAL_Delay(1000);
 8000fb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb6:	f004 f8cf 	bl	8005158 <HAL_Delay>

  // Start ESP
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4812      	ldr	r0, [pc, #72]	; (8001008 <main+0xf8>)
 8000fc0:	f004 ff3a 	bl	8005e38 <HAL_GPIO_WritePin>

  // Wait a bit for ESP initialization
  HAL_Delay(3000);
 8000fc4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fc8:	f004 f8c6 	bl	8005158 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fcc:	f007 feb6 	bl	8008d3c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DiffDriveTask */
  DiffDriveTaskHandle = osThreadNew(MoveDifferentialDrive, NULL, &DiffDriveTask_attributes);
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <main+0x100>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	480f      	ldr	r0, [pc, #60]	; (8001014 <main+0x104>)
 8000fd6:	f007 ff10 	bl	8008dfa <osThreadNew>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <main+0x108>)
 8000fde:	6013      	str	r3, [r2, #0]

  /* creation of TxTask */
  TxTaskHandle = osThreadNew(TxStream, NULL, &TxTask_attributes);
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <main+0x10c>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	480e      	ldr	r0, [pc, #56]	; (8001020 <main+0x110>)
 8000fe6:	f007 ff08 	bl	8008dfa <osThreadNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <main+0x114>)
 8000fee:	6013      	str	r3, [r2, #0]

  /* creation of RxTask */
  RxTaskHandle = osThreadNew(RxStream, NULL, &RxTask_attributes);
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <main+0x118>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <main+0x11c>)
 8000ff6:	f007 ff00 	bl	8008dfa <osThreadNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <main+0x120>)
 8000ffe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001000:	f007 fec0 	bl	8008d84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001004:	e7fe      	b.n	8001004 <main+0xf4>
 8001006:	bf00      	nop
 8001008:	40020800 	.word	0x40020800
 800100c:	40020000 	.word	0x40020000
 8001010:	0800e7c4 	.word	0x0800e7c4
 8001014:	080018b1 	.word	0x080018b1
 8001018:	200049cc 	.word	0x200049cc
 800101c:	0800e7e8 	.word	0x0800e7e8
 8001020:	08001a8d 	.word	0x08001a8d
 8001024:	20004abc 	.word	0x20004abc
 8001028:	0800e80c 	.word	0x0800e80c
 800102c:	08001e49 	.word	0x08001e49
 8001030:	20004d10 	.word	0x20004d10

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	; 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	2234      	movs	r2, #52	; 0x34
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f00b faba 	bl	800c5bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <SystemClock_Config+0xd4>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a29      	ldr	r2, [pc, #164]	; (8001108 <SystemClock_Config+0xd4>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <SystemClock_Config+0xd4>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <SystemClock_Config+0xd8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001080:	4a22      	ldr	r2, [pc, #136]	; (800110c <SystemClock_Config+0xd8>)
 8001082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <SystemClock_Config+0xd8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001094:	2302      	movs	r3, #2
 8001096:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001098:	2301      	movs	r3, #1
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109c:	2310      	movs	r3, #16
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a0:	2302      	movs	r3, #2
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010a8:	2310      	movs	r3, #16
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010b2:	2304      	movs	r3, #4
 80010b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4618      	mov	r0, r3
 80010c4:	f005 f9ea 	bl	800649c <HAL_RCC_OscConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010ce:	f001 f881 	bl	80021d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d2:	230f      	movs	r3, #15
 80010d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d6:	2302      	movs	r3, #2
 80010d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	2102      	movs	r1, #2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f004 fed6 	bl	8005ea0 <HAL_RCC_ClockConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010fa:	f001 f86b 	bl	80021d4 <Error_Handler>
  }
}
 80010fe:	bf00      	nop
 8001100:	3750      	adds	r7, #80	; 0x50
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b092      	sub	sp, #72	; 0x48
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001116:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
 8001130:	615a      	str	r2, [r3, #20]
 8001132:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2220      	movs	r2, #32
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f00b fa3e 	bl	800c5bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001140:	4b45      	ldr	r3, [pc, #276]	; (8001258 <MX_TIM1_Init+0x148>)
 8001142:	4a46      	ldr	r2, [pc, #280]	; (800125c <MX_TIM1_Init+0x14c>)
 8001144:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8001146:	4b44      	ldr	r3, [pc, #272]	; (8001258 <MX_TIM1_Init+0x148>)
 8001148:	2208      	movs	r2, #8
 800114a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b42      	ldr	r3, [pc, #264]	; (8001258 <MX_TIM1_Init+0x148>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8001152:	4b41      	ldr	r3, [pc, #260]	; (8001258 <MX_TIM1_Init+0x148>)
 8001154:	f242 7210 	movw	r2, #10000	; 0x2710
 8001158:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115a:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <MX_TIM1_Init+0x148>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001160:	4b3d      	ldr	r3, [pc, #244]	; (8001258 <MX_TIM1_Init+0x148>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001166:	4b3c      	ldr	r3, [pc, #240]	; (8001258 <MX_TIM1_Init+0x148>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800116c:	483a      	ldr	r0, [pc, #232]	; (8001258 <MX_TIM1_Init+0x148>)
 800116e:	f005 fd2f 	bl	8006bd0 <HAL_TIM_PWM_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001178:	f001 f82c 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001184:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001188:	4619      	mov	r1, r3
 800118a:	4833      	ldr	r0, [pc, #204]	; (8001258 <MX_TIM1_Init+0x148>)
 800118c:	f006 fdfa 	bl	8007d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001196:	f001 f81d 	bl	80021d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119a:	2360      	movs	r3, #96	; 0x60
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011a6:	2300      	movs	r3, #0
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	4826      	ldr	r0, [pc, #152]	; (8001258 <MX_TIM1_Init+0x148>)
 80011c0:	f006 f894 	bl	80072ec <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80011ca:	f001 f803 	bl	80021d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d2:	2204      	movs	r2, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4820      	ldr	r0, [pc, #128]	; (8001258 <MX_TIM1_Init+0x148>)
 80011d8:	f006 f888 	bl	80072ec <HAL_TIM_PWM_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80011e2:	f000 fff7 	bl	80021d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ea:	2208      	movs	r2, #8
 80011ec:	4619      	mov	r1, r3
 80011ee:	481a      	ldr	r0, [pc, #104]	; (8001258 <MX_TIM1_Init+0x148>)
 80011f0:	f006 f87c 	bl	80072ec <HAL_TIM_PWM_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80011fa:	f000 ffeb 	bl	80021d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	220c      	movs	r2, #12
 8001204:	4619      	mov	r1, r3
 8001206:	4814      	ldr	r0, [pc, #80]	; (8001258 <MX_TIM1_Init+0x148>)
 8001208:	f006 f870 	bl	80072ec <HAL_TIM_PWM_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001212:	f000 ffdf 	bl	80021d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800122a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4619      	mov	r1, r3
 8001238:	4807      	ldr	r0, [pc, #28]	; (8001258 <MX_TIM1_Init+0x148>)
 800123a:	f006 fe1f 	bl	8007e7c <HAL_TIMEx_ConfigBreakDeadTime>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001244:	f000 ffc6 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <MX_TIM1_Init+0x148>)
 800124a:	f001 f8bb 	bl	80023c4 <HAL_TIM_MspPostInit>

}
 800124e:	bf00      	nop
 8001250:	3748      	adds	r7, #72	; 0x48
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20004c5c 	.word	0x20004c5c
 800125c:	40010000 	.word	0x40010000

08001260 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	; 0x30
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2224      	movs	r2, #36	; 0x24
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f00b f9a4 	bl	800c5bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_TIM2_Init+0xa4>)
 800127e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001282:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_TIM2_Init+0xa4>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_TIM2_Init+0xa4>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001290:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_TIM2_Init+0xa4>)
 8001292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001296:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_TIM2_Init+0xa4>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_TIM2_Init+0xa4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ac:	2301      	movs	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80012b4:	230f      	movs	r3, #15
 80012b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012bc:	2301      	movs	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80012c4:	230f      	movs	r3, #15
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_TIM2_Init+0xa4>)
 80012d0:	f005 fda2 	bl	8006e18 <HAL_TIM_Encoder_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012da:	f000 ff7b 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <MX_TIM2_Init+0xa4>)
 80012ec:	f006 fd4a 	bl	8007d84 <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80012f6:	f000 ff6d 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3730      	adds	r7, #48	; 0x30
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20004d14 	.word	0x20004d14

08001308 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_TIM3_Init+0x94>)
 8001326:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <MX_TIM3_Init+0x98>)
 8001328:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_TIM3_Init+0x94>)
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM3_Init+0x94>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_TIM3_Init+0x94>)
 8001338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_TIM3_Init+0x94>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_TIM3_Init+0x94>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800134a:	4814      	ldr	r0, [pc, #80]	; (800139c <MX_TIM3_Init+0x94>)
 800134c:	f005 fb44 	bl	80069d8 <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001356:	f000 ff3d 	bl	80021d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_TIM3_Init+0x94>)
 8001368:	f006 f882 	bl	8007470 <HAL_TIM_ConfigClockSource>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001372:	f000 ff2f 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_TIM3_Init+0x94>)
 8001384:	f006 fcfe 	bl	8007d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800138e:	f000 ff21 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20004b74 	.word	0x20004b74
 80013a0:	40000400 	.word	0x40000400

080013a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	2224      	movs	r2, #36	; 0x24
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00b f902 	bl	800c5bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013c0:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_TIM5_Init+0xa0>)
 80013c2:	4a21      	ldr	r2, [pc, #132]	; (8001448 <MX_TIM5_Init+0xa4>)
 80013c4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_TIM5_Init+0xa0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_TIM5_Init+0xa0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_TIM5_Init+0xa0>)
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013d8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_TIM5_Init+0xa0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_TIM5_Init+0xa0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013e6:	2301      	movs	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ee:	2301      	movs	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80013f6:	230f      	movs	r3, #15
 80013f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013fe:	2301      	movs	r3, #1
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001406:	230f      	movs	r3, #15
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <MX_TIM5_Init+0xa0>)
 8001412:	f005 fd01 	bl	8006e18 <HAL_TIM_Encoder_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800141c:	f000 feda 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_TIM5_Init+0xa0>)
 800142e:	f006 fca9 	bl	8007d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001438:	f000 fecc 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3730      	adds	r7, #48	; 0x30
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20004ac0 	.word	0x20004ac0
 8001448:	40000c00 	.word	0x40000c00

0800144c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <MX_USART3_UART_Init+0x50>)
 8001454:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 8001458:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 800145c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USART3_UART_Init+0x4c>)
 8001484:	f006 fd6a 	bl	8007f5c <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800148e:	f000 fea1 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20004a48 	.word	0x20004a48
 800149c:	40004800 	.word	0x40004800

080014a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_DMA_Init+0x3c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <MX_DMA_Init+0x3c>)
 80014b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_DMA_Init+0x3c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2105      	movs	r1, #5
 80014c6:	200c      	movs	r0, #12
 80014c8:	f003 ff5d 	bl	8005386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80014cc:	200c      	movs	r0, #12
 80014ce:	f003 ff76 	bl	80053be <HAL_NVIC_EnableIRQ>

}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b4d      	ldr	r3, [pc, #308]	; (8001630 <MX_GPIO_Init+0x150>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a4c      	ldr	r2, [pc, #304]	; (8001630 <MX_GPIO_Init+0x150>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b4a      	ldr	r3, [pc, #296]	; (8001630 <MX_GPIO_Init+0x150>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b46      	ldr	r3, [pc, #280]	; (8001630 <MX_GPIO_Init+0x150>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a45      	ldr	r2, [pc, #276]	; (8001630 <MX_GPIO_Init+0x150>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b43      	ldr	r3, [pc, #268]	; (8001630 <MX_GPIO_Init+0x150>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b3f      	ldr	r3, [pc, #252]	; (8001630 <MX_GPIO_Init+0x150>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a3e      	ldr	r2, [pc, #248]	; (8001630 <MX_GPIO_Init+0x150>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <MX_GPIO_Init+0x150>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <MX_GPIO_Init+0x150>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a37      	ldr	r2, [pc, #220]	; (8001630 <MX_GPIO_Init+0x150>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b35      	ldr	r3, [pc, #212]	; (8001630 <MX_GPIO_Init+0x150>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2101      	movs	r1, #1
 800156a:	4832      	ldr	r0, [pc, #200]	; (8001634 <MX_GPIO_Init+0x154>)
 800156c:	f004 fc64 	bl	8005e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SUPPLY_ENABLE_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2130      	movs	r1, #48	; 0x30
 8001574:	4830      	ldr	r0, [pc, #192]	; (8001638 <MX_GPIO_Init+0x158>)
 8001576:	f004 fc5f 	bl	8005e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800157a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001580:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4828      	ldr	r0, [pc, #160]	; (8001634 <MX_GPIO_Init+0x154>)
 8001592:	f004 faa5 	bl	8005ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RESET_Pin */
  GPIO_InitStruct.Pin = WIFI_RESET_Pin;
 8001596:	2301      	movs	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RESET_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4821      	ldr	r0, [pc, #132]	; (8001634 <MX_GPIO_Init+0x154>)
 80015ae:	f004 fa97 	bl	8005ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015b2:	230c      	movs	r3, #12
 80015b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c2:	2307      	movs	r3, #7
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	481a      	ldr	r0, [pc, #104]	; (8001638 <MX_GPIO_Init+0x158>)
 80015ce:	f004 fa87 	bl	8005ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SUPPLY_ENABLE_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SUPPLY_ENABLE_Pin|LD2_Pin;
 80015d2:	2330      	movs	r3, #48	; 0x30
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <MX_GPIO_Init+0x158>)
 80015ea:	f004 fa79 	bl	8005ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INFRARED_SENSOR_Pin */
  GPIO_InitStruct.Pin = INFRARED_SENSOR_Pin;
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INFRARED_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <MX_GPIO_Init+0x154>)
 8001602:	f004 fa6d 	bl	8005ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001618:	2308      	movs	r3, #8
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_GPIO_Init+0x158>)
 8001624:	f004 fa5c 	bl	8005ae0 <HAL_GPIO_Init>

}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	; 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40023800 	.word	0x40023800
 8001634:	40020800 	.word	0x40020800
 8001638:	40020000 	.word	0x40020000

0800163c <MAIN_DATASTREAM_Init>:

/* USER CODE BEGIN 4 */

static void MAIN_DATASTREAM_Init(){
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0

	DATASTREAM_InitTypeDef DATASTREAM_InitStruct;

	DATASTREAM_InitStruct.DMA_Rx_Enable= true;
 8001642:	2301      	movs	r3, #1
 8001644:	723b      	strb	r3, [r7, #8]
	DATASTREAM_InitStruct.DMA_Rx_Stream_IRQn= DMA1_Stream1_IRQn;
 8001646:	230c      	movs	r3, #12
 8001648:	60fb      	str	r3, [r7, #12]
	DATASTREAM_InitStruct.huart= &huart3;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MAIN_DATASTREAM_Init+0x30>)
 800164c:	607b      	str	r3, [r7, #4]

	hstream.Init= DATASTREAM_InitStruct;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MAIN_DATASTREAM_Init+0x34>)
 8001650:	461c      	mov	r4, r3
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001658:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	DATASTREAM_Init(&hstream);
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MAIN_DATASTREAM_Init+0x34>)
 800165e:	f001 f85d 	bl	800271c <DATASTREAM_Init>

}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bd90      	pop	{r4, r7, pc}
 800166a:	bf00      	nop
 800166c:	20004a48 	.word	0x20004a48
 8001670:	20004c28 	.word	0x20004c28

08001674 <MAIN_DIFFDRIVE_Init>:


static void MAIN_DIFFDRIVE_Init(void){
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0

	uint16_t max_sample= 1200u;
 800167a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800167e:	84fb      	strh	r3, [r7, #38]	; 0x26

	hdiffdrive.Init.timing_htim= &htim3;
 8001680:	4b5a      	ldr	r3, [pc, #360]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 8001682:	4a5b      	ldr	r2, [pc, #364]	; (80017f0 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001684:	64da      	str	r2, [r3, #76]	; 0x4c
	hdiffdrive.Init.timing_time_step= TIME_STEP;
 8001686:	4b59      	ldr	r3, [pc, #356]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 8001688:	4a5a      	ldr	r2, [pc, #360]	; (80017f4 <MAIN_DIFFDRIVE_Init+0x180>)
 800168a:	651a      	str	r2, [r3, #80]	; 0x50

	hdiffdrive.Init.encoder_htim[left ]= &htim2;
 800168c:	4b57      	ldr	r3, [pc, #348]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 800168e:	4a5a      	ldr	r2, [pc, #360]	; (80017f8 <MAIN_DIFFDRIVE_Init+0x184>)
 8001690:	639a      	str	r2, [r3, #56]	; 0x38
	hdiffdrive.Init.encoder_htim[right]= &htim5;
 8001692:	4b56      	ldr	r3, [pc, #344]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 8001694:	4a59      	ldr	r2, [pc, #356]	; (80017fc <MAIN_DIFFDRIVE_Init+0x188>)
 8001696:	63da      	str	r2, [r3, #60]	; 0x3c
	hdiffdrive.Init.encoder_tim_channel[left ]= TIM_CHANNEL_1;
 8001698:	4b54      	ldr	r3, [pc, #336]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 800169a:	2200      	movs	r2, #0
 800169c:	641a      	str	r2, [r3, #64]	; 0x40
	hdiffdrive.Init.encoder_tim_channel[right]= TIM_CHANNEL_1;
 800169e:	4b53      	ldr	r3, [pc, #332]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44
	hdiffdrive.Init.encoder_tim_arr_resolution[left ]= 32;
 80016a4:	4b51      	ldr	r3, [pc, #324]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80016a6:	2220      	movs	r2, #32
 80016a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	hdiffdrive.Init.encoder_tim_arr_resolution[right]= 32;
 80016ac:	4b4f      	ldr	r3, [pc, #316]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80016ae:	2220      	movs	r2, #32
 80016b0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	hdiffdrive.Init.encoder_resolution[left ]= 1900; //1920; // Number of step each wheel revolution
 80016b4:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80016b6:	4a52      	ldr	r2, [pc, #328]	; (8001800 <MAIN_DIFFDRIVE_Init+0x18c>)
 80016b8:	665a      	str	r2, [r3, #100]	; 0x64
	hdiffdrive.Init.encoder_resolution[right]= 1900; //1920;
 80016ba:	4b4c      	ldr	r3, [pc, #304]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80016bc:	4a50      	ldr	r2, [pc, #320]	; (8001800 <MAIN_DIFFDRIVE_Init+0x18c>)
 80016be:	669a      	str	r2, [r3, #104]	; 0x68

	hdiffdrive.Init.motor_htim[left ][forward ]= &htim1;
 80016c0:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80016c2:	4a50      	ldr	r2, [pc, #320]	; (8001804 <MAIN_DIFFDRIVE_Init+0x190>)
 80016c4:	601a      	str	r2, [r3, #0]
	hdiffdrive.Init.motor_htim[left ][backward]= &htim1;
 80016c6:	4b49      	ldr	r3, [pc, #292]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80016c8:	4a4e      	ldr	r2, [pc, #312]	; (8001804 <MAIN_DIFFDRIVE_Init+0x190>)
 80016ca:	605a      	str	r2, [r3, #4]
	hdiffdrive.Init.motor_htim[right][forward ]= &htim1;
 80016cc:	4b47      	ldr	r3, [pc, #284]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80016ce:	4a4d      	ldr	r2, [pc, #308]	; (8001804 <MAIN_DIFFDRIVE_Init+0x190>)
 80016d0:	609a      	str	r2, [r3, #8]
	hdiffdrive.Init.motor_htim[right][backward]= &htim1;
 80016d2:	4b46      	ldr	r3, [pc, #280]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80016d4:	4a4b      	ldr	r2, [pc, #300]	; (8001804 <MAIN_DIFFDRIVE_Init+0x190>)
 80016d6:	60da      	str	r2, [r3, #12]

	hdiffdrive.Init.motor_pwm_channel[left ][forward ]= TIM_CHANNEL_1;
 80016d8:	4b44      	ldr	r3, [pc, #272]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
	hdiffdrive.Init.motor_pwm_channel[left ][backward]= TIM_CHANNEL_2;
 80016de:	4b43      	ldr	r3, [pc, #268]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80016e0:	2204      	movs	r2, #4
 80016e2:	615a      	str	r2, [r3, #20]
	hdiffdrive.Init.motor_pwm_channel[right][forward ]= TIM_CHANNEL_3;
 80016e4:	4b41      	ldr	r3, [pc, #260]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80016e6:	2208      	movs	r2, #8
 80016e8:	619a      	str	r2, [r3, #24]
	hdiffdrive.Init.motor_pwm_channel[right][backward]= TIM_CHANNEL_4;
 80016ea:	4b40      	ldr	r3, [pc, #256]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80016ec:	220c      	movs	r2, #12
 80016ee:	61da      	str	r2, [r3, #28]

	hdiffdrive.Init.motor_max_voltage[left ]= 	 MOTOR_MAX_VOLTAGE;
 80016f0:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80016f2:	4a45      	ldr	r2, [pc, #276]	; (8001808 <MAIN_DIFFDRIVE_Init+0x194>)
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28
	hdiffdrive.Init.motor_max_voltage[right]= 	 MOTOR_MAX_VOLTAGE;
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80016f8:	4a43      	ldr	r2, [pc, #268]	; (8001808 <MAIN_DIFFDRIVE_Init+0x194>)
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
	hdiffdrive.Init.motor_min_voltage[left ]= 	 MOTOR_MIN_VOLTAGE;
 80016fc:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	631a      	str	r2, [r3, #48]	; 0x30
	hdiffdrive.Init.motor_min_voltage[right]= 	 MOTOR_MIN_VOLTAGE;
 8001704:	4b39      	ldr	r3, [pc, #228]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	635a      	str	r2, [r3, #52]	; 0x34
	hdiffdrive.Init.motor_supply_voltage[left]=  SUPPLY_VOLTAGE;
 800170c:	4b37      	ldr	r3, [pc, #220]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 800170e:	4a3e      	ldr	r2, [pc, #248]	; (8001808 <MAIN_DIFFDRIVE_Init+0x194>)
 8001710:	621a      	str	r2, [r3, #32]
	hdiffdrive.Init.motor_supply_voltage[right]= SUPPLY_VOLTAGE;
 8001712:	4b36      	ldr	r3, [pc, #216]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 8001714:	4a3c      	ldr	r2, [pc, #240]	; (8001808 <MAIN_DIFFDRIVE_Init+0x194>)
 8001716:	625a      	str	r2, [r3, #36]	; 0x24

	hdiffdrive.Init.control_fdfrwrd_arma_AR[left ]= AR_L;
 8001718:	4a3c      	ldr	r2, [pc, #240]	; (800180c <MAIN_DIFFDRIVE_Init+0x198>)
 800171a:	f107 0318 	add.w	r3, r7, #24
 800171e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001720:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001724:	4a31      	ldr	r2, [pc, #196]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 8001726:	f107 0318 	add.w	r3, r7, #24
 800172a:	6793      	str	r3, [r2, #120]	; 0x78
	hdiffdrive.Init.control_fdfrwrd_arma_AR[right]= AR_R;
 800172c:	4a38      	ldr	r2, [pc, #224]	; (8001810 <MAIN_DIFFDRIVE_Init+0x19c>)
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	ca07      	ldmia	r2, {r0, r1, r2}
 8001734:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001738:	4a2c      	ldr	r2, [pc, #176]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	67d3      	str	r3, [r2, #124]	; 0x7c
	hdiffdrive.Init.control_fdfrwrd_arma_MA[left ]= MA_L;
 8001740:	4b34      	ldr	r3, [pc, #208]	; (8001814 <MAIN_DIFFDRIVE_Init+0x1a0>)
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	4a29      	ldr	r2, [pc, #164]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	hdiffdrive.Init.control_fdfrwrd_arma_MA[right]= MA_R;
 800174e:	4b32      	ldr	r3, [pc, #200]	; (8001818 <MAIN_DIFFDRIVE_Init+0x1a4>)
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4a26      	ldr	r2, [pc, #152]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[left ]= N_AR_L;
 800175a:	4b24      	ldr	r3, [pc, #144]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 800175c:	2203      	movs	r2, #3
 800175e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[right]= N_AR_R;
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 8001764:	2203      	movs	r2, #3
 8001766:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[left ]= N_MA_L;
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 800176c:	2201      	movs	r2, #1
 800176e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[right]= N_MA_R;
 8001772:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 8001774:	2201      	movs	r2, #1
 8001776:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	hdiffdrive.Init.control_fdfrwrd_arma_tau[left ]= TAU_L;
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 800177c:	2202      	movs	r2, #2
 800177e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	hdiffdrive.Init.control_fdfrwrd_arma_tau[right]= TAU_R;
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 8001784:	2202      	movs	r2, #2
 8001786:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	hdiffdrive.Init.control_pid_P[left ]= PID_P_L;
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 800178c:	4a23      	ldr	r2, [pc, #140]	; (800181c <MAIN_DIFFDRIVE_Init+0x1a8>)
 800178e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	hdiffdrive.Init.control_pid_P[right]= PID_P_R;
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 8001794:	4a21      	ldr	r2, [pc, #132]	; (800181c <MAIN_DIFFDRIVE_Init+0x1a8>)
 8001796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	hdiffdrive.Init.control_pid_I[left ]= PID_I_L;
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 800179c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80017a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	hdiffdrive.Init.control_pid_I[right]= PID_I_R;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80017a6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80017aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	hdiffdrive.Init.control_pid_D[left ]= PID_D_L;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	hdiffdrive.Init.control_pid_D[right]= PID_D_R;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	hdiffdrive.Init.history_max_sample= max_sample;
 80017c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017c4:	4a09      	ldr	r2, [pc, #36]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80017c6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

	// --- Mechanical parameters (from real model) --- //
	hdiffdrive.Init.mech_prmtr_l= WHEEL_DISTANCE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80017cc:	4a14      	ldr	r2, [pc, #80]	; (8001820 <MAIN_DIFFDRIVE_Init+0x1ac>)
 80017ce:	65da      	str	r2, [r3, #92]	; 0x5c
	hdiffdrive.Init.mech_prmtr_r= WHEEL_RADIUS;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80017d2:	4a14      	ldr	r2, [pc, #80]	; (8001824 <MAIN_DIFFDRIVE_Init+0x1b0>)
 80017d4:	659a      	str	r2, [r3, #88]	; 0x58
	hdiffdrive.Init.mech_prmtr_max_wheel_speed= WHEEL_MAX_SPEED;
 80017d6:	4b05      	ldr	r3, [pc, #20]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80017d8:	4a13      	ldr	r2, [pc, #76]	; (8001828 <MAIN_DIFFDRIVE_Init+0x1b4>)
 80017da:	661a      	str	r2, [r3, #96]	; 0x60

	// --- Initialize handle --- //
	DIFFDRIVE_Init(&hdiffdrive);
 80017dc:	4803      	ldr	r0, [pc, #12]	; (80017ec <MAIN_DIFFDRIVE_Init+0x178>)
 80017de:	f001 fa6b 	bl	8002cb8 <DIFFDRIVE_Init>

}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	; 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20004de0 	.word	0x20004de0
 80017f0:	20004b74 	.word	0x20004b74
 80017f4:	3c23d70a 	.word	0x3c23d70a
 80017f8:	20004d14 	.word	0x20004d14
 80017fc:	20004ac0 	.word	0x20004ac0
 8001800:	44ed8000 	.word	0x44ed8000
 8001804:	20004c5c 	.word	0x20004c5c
 8001808:	40f00000 	.word	0x40f00000
 800180c:	0800e780 	.word	0x0800e780
 8001810:	0800e78c 	.word	0x0800e78c
 8001814:	3a33ef47 	.word	0x3a33ef47
 8001818:	3a44cbb3 	.word	0x3a44cbb3
 800181c:	41c80000 	.word	0x41c80000
 8001820:	3d9eb852 	.word	0x3d9eb852
 8001824:	3d0d4fdf 	.word	0x3d0d4fdf
 8001828:	41200000 	.word	0x41200000

0800182c <MAIN_MAF_Init>:

// Moving Average Filter initialization --------------------------------------------- //
static void MAIN_MAF_Init(void){
 800182c:	b5b0      	push	{r4, r5, r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0

	int filtr_v_size=  2;
 8001832:	2302      	movs	r3, #2
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
	int filtr_om_size= 2;
 8001836:	2302      	movs	r3, #2
 8001838:	623b      	str	r3, [r7, #32]

	int filtr_infrared_size= 100;
 800183a:	2364      	movs	r3, #100	; 0x64
 800183c:	61fb      	str	r3, [r7, #28]

	// Null pointer to use a MAF without weights
	void* weights_buff= NULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]

	// Creating filters
	hfilter_v  =       MAF_Create(filtr_v_size,  weights_buff);
 8001842:	4c18      	ldr	r4, [pc, #96]	; (80018a4 <MAIN_MAF_Init+0x78>)
 8001844:	463b      	mov	r3, r7
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800184a:	4618      	mov	r0, r3
 800184c:	f003 f8e6 	bl	8004a1c <MAF_Create>
 8001850:	4625      	mov	r5, r4
 8001852:	463c      	mov	r4, r7
 8001854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001858:	e894 0003 	ldmia.w	r4, {r0, r1}
 800185c:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_om =       MAF_Create(filtr_om_size, weights_buff);
 8001860:	4c11      	ldr	r4, [pc, #68]	; (80018a8 <MAIN_MAF_Init+0x7c>)
 8001862:	463b      	mov	r3, r7
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	6a39      	ldr	r1, [r7, #32]
 8001868:	4618      	mov	r0, r3
 800186a:	f003 f8d7 	bl	8004a1c <MAF_Create>
 800186e:	4625      	mov	r5, r4
 8001870:	463c      	mov	r4, r7
 8001872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001876:	e894 0003 	ldmia.w	r4, {r0, r1}
 800187a:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_infrared = MAF_Create(filtr_infrared_size, weights_buff);
 800187e:	4c0b      	ldr	r4, [pc, #44]	; (80018ac <MAIN_MAF_Init+0x80>)
 8001880:	463b      	mov	r3, r7
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	69f9      	ldr	r1, [r7, #28]
 8001886:	4618      	mov	r0, r3
 8001888:	f003 f8c8 	bl	8004a1c <MAF_Create>
 800188c:	4625      	mov	r5, r4
 800188e:	463c      	mov	r4, r7
 8001890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001894:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001898:	e885 0003 	stmia.w	r5, {r0, r1}

}
 800189c:	bf00      	nop
 800189e:	3728      	adds	r7, #40	; 0x28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bdb0      	pop	{r4, r5, r7, pc}
 80018a4:	20004dc8 	.word	0x20004dc8
 80018a8:	20004c44 	.word	0x20004c44
 80018ac:	200049d0 	.word	0x200049d0

080018b0 <MoveDifferentialDrive>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MoveDifferentialDrive */
void MoveDifferentialDrive(void *argument)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08c      	sub	sp, #48	; 0x30
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	// Trajectory speeds (linear and angular speed)
	float v= 0, om= 0;
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
	// Trajectory speed limits (theoretically computed below)
	float v_max, om_max;

	// Extracting Max wheels speed (radiant each second)
	float wheel_speed[2];
	float wheel_speed_max= hdiffdrive.mech_prmtr.max_wheel_speed;
 80018c4:	4b68      	ldr	r3, [pc, #416]	; (8001a68 <MoveDifferentialDrive+0x1b8>)
 80018c6:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
	wheel_speed[left ]= wheel_speed_max;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	60fb      	str	r3, [r7, #12]
	wheel_speed[right]= wheel_speed_max;
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	613b      	str	r3, [r7, #16]

	// Delta_a_max computation (linear variation, is max when wheels rotate at max speed on same direction)
	DIFFDRIVE_WheelSpeed2TrajectorySpeed(&v_max, NULL, wheel_speed);
 80018d4:	f107 020c 	add.w	r2, r7, #12
 80018d8:	f107 0318 	add.w	r3, r7, #24
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 ff44 	bl	800476c <DIFFDRIVE_WheelSpeed2TrajectorySpeed>
	v_max *= 1; // Here you could modulate max value
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	61bb      	str	r3, [r7, #24]

	// Delta_th_max computation (angular variation, is max when wheel rotate at max speed on opposite direction)
	wheel_speed[left]= -wheel_speed_max;
 80018e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018ec:	eef1 7a67 	vneg.f32	s15, s15
 80018f0:	edc7 7a03 	vstr	s15, [r7, #12]
	DIFFDRIVE_WheelSpeed2TrajectorySpeed(NULL, &om_max, wheel_speed);
 80018f4:	f107 020c 	add.w	r2, r7, #12
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	2000      	movs	r0, #0
 8001900:	f002 ff34 	bl	800476c <DIFFDRIVE_WheelSpeed2TrajectorySpeed>
	om_max *= 1; // Here you could modulate max value
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	617b      	str	r3, [r7, #20]
	float IR_val;
	float IR_thres= 0.3;
#endif

	// Setting Global flag to indicate that Diff Drive is going to move
	diffDrive_stopped= false;
 8001908:	4b58      	ldr	r3, [pc, #352]	; (8001a6c <MoveDifferentialDrive+0x1bc>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]

	// Start control
	DIFFDRIVE_TrackingStart();
 800190e:	f003 f81b 	bl	8004948 <DIFFDRIVE_TrackingStart>

	/* Infinite loop */
	for(;;){

		// If movement is enabled
		if( diffDrive_enabled ){
 8001912:	4b57      	ldr	r3, [pc, #348]	; (8001a70 <MoveDifferentialDrive+0x1c0>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 808c 	beq.w	8001a36 <MoveDifferentialDrive+0x186>

			v=  linear;
 800191e:	4b55      	ldr	r3, [pc, #340]	; (8001a74 <MoveDifferentialDrive+0x1c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
			om= angular;
 8001924:	4b54      	ldr	r3, [pc, #336]	; (8001a78 <MoveDifferentialDrive+0x1c8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28

			// Enroll angular speed to a fixed range
			if(fabsf(om) > om_max)
 800192a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800192e:	eeb0 7ae7 	vabs.f32	s14, s15
 8001932:	edd7 7a05 	vldr	s15, [r7, #20]
 8001936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193e:	dd0d      	ble.n	800195c <MoveDifferentialDrive+0xac>
				// x/|x| == sign(x)
				om = om_max*om/fabsf(om);
 8001940:	ed97 7a05 	vldr	s14, [r7, #20]
 8001944:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001948:	ee67 6a27 	vmul.f32	s13, s14, s15
 800194c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001950:	eeb0 7ae7 	vabs.f32	s14, s15
 8001954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001958:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			// have just to find the max or min v value (min is -max) with the constraints of omega fixed and
			// wheel_speed between the fixed range:
			//
			// https://github.com/FloydPeppe/Programmazione_Sistemi_Embedded_Automazione/blob/master/Relazione/Relazione_Progetto.pdf
			//
			float l = hdiffdrive.mech_prmtr.l;
 800195c:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <MoveDifferentialDrive+0x1b8>)
 800195e:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8001962:	623b      	str	r3, [r7, #32]
			float r = hdiffdrive.mech_prmtr.r;
 8001964:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <MoveDifferentialDrive+0x1b8>)
 8001966:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800196a:	61fb      	str	r3, [r7, #28]
			if( om >= 0 )
 800196c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001970:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001978:	db10      	blt.n	800199c <MoveDifferentialDrive+0xec>
				v_max = r * wheel_speed_max - om * l;
 800197a:	ed97 7a07 	vldr	s14, [r7, #28]
 800197e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001982:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001986:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800198a:	edd7 7a08 	vldr	s15, [r7, #32]
 800198e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001996:	edc7 7a06 	vstr	s15, [r7, #24]
 800199a:	e00f      	b.n	80019bc <MoveDifferentialDrive+0x10c>
			else
				v_max = r * wheel_speed_max + om * l;
 800199c:	ed97 7a07 	vldr	s14, [r7, #28]
 80019a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80019ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80019b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b8:	edc7 7a06 	vstr	s15, [r7, #24]

			// Enroll linear speed to fixed range
			if(fabsf(v) > v_max)
 80019bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019c0:	eeb0 7ae7 	vabs.f32	s14, s15
 80019c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80019c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	dd0d      	ble.n	80019ee <MoveDifferentialDrive+0x13e>
				// x/|x| == sign(x)
				v = v_max*v/fabsf(v);
 80019d2:	ed97 7a06 	vldr	s14, [r7, #24]
 80019d6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019da:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019e2:	eeb0 7ae7 	vabs.f32	s14, s15
 80019e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

			// Update filters to smooth a bit input trajectory
			MAF_Update(&hfilter_v,  v);
 80019ee:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80019f2:	4822      	ldr	r0, [pc, #136]	; (8001a7c <MoveDifferentialDrive+0x1cc>)
 80019f4:	f003 f861 	bl	8004aba <MAF_Update>
			MAF_Update(&hfilter_om, om);
 80019f8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80019fc:	4820      	ldr	r0, [pc, #128]	; (8001a80 <MoveDifferentialDrive+0x1d0>)
 80019fe:	f003 f85c 	bl	8004aba <MAF_Update>

			// Get current values
			v=  __MAF_GET_VAL(&hfilter_v);
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <MoveDifferentialDrive+0x1cc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
			om= __MAF_GET_VAL(&hfilter_om);
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <MoveDifferentialDrive+0x1d0>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28

			// If diff drive has been previously stopped
			if( diffDrive_stopped ){
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <MoveDifferentialDrive+0x1bc>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <MoveDifferentialDrive+0x172>
				// Restart control
				DIFFDRIVE_TrackingResume();
 8001a18:	f002 ffa4 	bl	8004964 <DIFFDRIVE_TrackingResume>
				// Set flag to indicate that is going to move
				diffDrive_stopped= false;
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <MoveDifferentialDrive+0x1bc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
					v = 0;
			}
#endif

			// Timing the external transmitter periodically setting this flag
			allow_new_msg= true;
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MoveDifferentialDrive+0x1d4>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]

			// Make step control
			DIFFDRIVE_TrackingStep(v, om);
 8001a28:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8001a2c:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001a30:	f002 ffa4 	bl	800497c <DIFFDRIVE_TrackingStep>
 8001a34:	e76d      	b.n	8001912 <MoveDifferentialDrive+0x62>

		}
		// if movement is disabled and diffDrive is moving
		else if( !diffDrive_stopped ){
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <MoveDifferentialDrive+0x1bc>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f083 0301 	eor.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f43f af65 	beq.w	8001912 <MoveDifferentialDrive+0x62>
			// Suspend control (stop diff drive)
			DIFFDRIVE_TrackingSuspend();
 8001a48:	f002 ff92 	bl	8004970 <DIFFDRIVE_TrackingSuspend>

			// Reset filters
			MAF_Reset(&hfilter_v,  0);
 8001a4c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001a88 <MoveDifferentialDrive+0x1d8>
 8001a50:	480a      	ldr	r0, [pc, #40]	; (8001a7c <MoveDifferentialDrive+0x1cc>)
 8001a52:	f003 f80a 	bl	8004a6a <MAF_Reset>
			MAF_Reset(&hfilter_om, 0);
 8001a56:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001a88 <MoveDifferentialDrive+0x1d8>
 8001a5a:	4809      	ldr	r0, [pc, #36]	; (8001a80 <MoveDifferentialDrive+0x1d0>)
 8001a5c:	f003 f805 	bl	8004a6a <MAF_Reset>

			// Set global flag to indicate that diff drive is now stopped
			diffDrive_stopped= true;
 8001a60:	4b02      	ldr	r3, [pc, #8]	; (8001a6c <MoveDifferentialDrive+0x1bc>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
		if( diffDrive_enabled ){
 8001a66:	e754      	b.n	8001912 <MoveDifferentialDrive+0x62>
 8001a68:	20004de0 	.word	0x20004de0
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	200000a0 	.word	0x200000a0
 8001a74:	20000098 	.word	0x20000098
 8001a78:	2000009c 	.word	0x2000009c
 8001a7c:	20004dc8 	.word	0x20004dc8
 8001a80:	20004c44 	.word	0x20004c44
 8001a84:	200000a2 	.word	0x200000a2
 8001a88:	00000000 	.word	0x00000000

08001a8c <TxStream>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TxStream */
void TxStream(void *argument)
{
 8001a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a90:	b0e4      	sub	sp, #400	; 0x190
 8001a92:	af24      	add	r7, sp, #144	; 0x90
 8001a94:	6778      	str	r0, [r7, #116]	; 0x74
	for(;;)
	{

		// Blocking the external transmitter until a new message is allowed. DiffDrive task periodically set true
		// the below flag (the external transmitter must be set to wait until received data before to send new more)
		if( allow_new_msg ){
 8001a96:	4b60      	ldr	r3, [pc, #384]	; (8001c18 <TxStream+0x18c>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d028      	beq.n	8001af2 <TxStream+0x66>

			// Get current history sample
			DIFFDRIVE_HISTORY_Get_Sample(&state_measure,NULL);
 8001aa0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 fb36 	bl	8004118 <DIFFDRIVE_HISTORY_Get_Sample>

			// Send diffDrive current pose to serial connected to ESP WiFi module (this trigger the external transmitter
			// to send new data)
			DATASTREAM_Print(
							&hstream, float_csv, 3,
							state_measure.pose.x_a,
 8001aac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
			DATASTREAM_Print(
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fd11 	bl	80004d8 <__aeabi_f2d>
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	460d      	mov	r5, r1
							state_measure.pose.y_a,
 8001aba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
			DATASTREAM_Print(
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd0a 	bl	80004d8 <__aeabi_f2d>
 8001ac4:	4680      	mov	r8, r0
 8001ac6:	4689      	mov	r9, r1
							state_measure.pose.theta
 8001ac8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
			DATASTREAM_Print(
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fd03 	bl	80004d8 <__aeabi_f2d>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ada:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ade:	e9cd 4500 	strd	r4, r5, [sp]
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	484d      	ldr	r0, [pc, #308]	; (8001c1c <TxStream+0x190>)
 8001ae8:	f000 fec0 	bl	800286c <DATASTREAM_Print>
			);

			// Resetting the flag
			allow_new_msg= false;
 8001aec:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <TxStream+0x18c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
		}

		// If blue button is pressed
		if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8001af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af6:	484a      	ldr	r0, [pc, #296]	; (8001c20 <TxStream+0x194>)
 8001af8:	f004 f986 	bl	8005e08 <HAL_GPIO_ReadPin>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1c9      	bne.n	8001a96 <TxStream+0xa>
			// When I'm here, I use HAL_Delay(ms) and not osDelay(ms), because during Tx stream
			// I suspend other theads, so I don't need os timing. Moreover, osDelay sometimes hangs forever
			// without no reason, I guess 'cause other threads are suspended and scheduler try to wait for them.

			// Stop Rx stream
			RxStream_enabled= false;
 8001b02:	4b48      	ldr	r3, [pc, #288]	; (8001c24 <TxStream+0x198>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]

			// Wait until Rx is stream is stopped
			while( !RxStream_stopped )
 8001b08:	bf00      	nop
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <TxStream+0x19c>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f083 0301 	eor.w	r3, r3, #1
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f7      	bne.n	8001b0a <TxStream+0x7e>
				;

			// Stop Differential Drive motion
			diffDrive_enabled= false;
 8001b1a:	4b44      	ldr	r3, [pc, #272]	; (8001c2c <TxStream+0x1a0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]

			// Wait until diff drive is still
			while( !diffDrive_stopped )
 8001b20:	bf00      	nop
 8001b22:	4b43      	ldr	r3, [pc, #268]	; (8001c30 <TxStream+0x1a4>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f083 0301 	eor.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f7      	bne.n	8001b22 <TxStream+0x96>
				;

			// Suspend other threads while sending values
			osThreadSuspend(DiffDriveTaskHandle);
 8001b32:	4b40      	ldr	r3, [pc, #256]	; (8001c34 <TxStream+0x1a8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f007 f9f1 	bl	8008f1e <osThreadSuspend>
#ifdef OBSTACLE_AVOIDANCE
			osThreadSuspend(InfraredTaskHandle);
#endif
			osThreadSuspend(RxTaskHandle);
 8001b3c:	4b3e      	ldr	r3, [pc, #248]	; (8001c38 <TxStream+0x1ac>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f007 f9ec 	bl	8008f1e <osThreadSuspend>

			// Turn on LED
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001b46:	2201      	movs	r2, #1
 8001b48:	2120      	movs	r1, #32
 8001b4a:	483c      	ldr	r0, [pc, #240]	; (8001c3c <TxStream+0x1b0>)
 8001b4c:	f004 f974 	bl	8005e38 <HAL_GPIO_WritePin>

			// Reset ESP-8266
			HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2101      	movs	r1, #1
 8001b54:	4832      	ldr	r0, [pc, #200]	; (8001c20 <TxStream+0x194>)
 8001b56:	f004 f96f 	bl	8005e38 <HAL_GPIO_WritePin>

			osDelay(400);
 8001b5a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b5e:	f007 fa20 	bl	8008fa2 <osDelay>

			// Send values forever
			for(;;){

				// If blue button is pressed again
				if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8001b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b66:	482e      	ldr	r0, [pc, #184]	; (8001c20 <TxStream+0x194>)
 8001b68:	f004 f94e 	bl	8005e08 <HAL_GPIO_ReadPin>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f7      	bne.n	8001b62 <TxStream+0xd6>

					// Enable ESP-8266
					HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_SET);
 8001b72:	2201      	movs	r2, #1
 8001b74:	2101      	movs	r1, #1
 8001b76:	482a      	ldr	r0, [pc, #168]	; (8001c20 <TxStream+0x194>)
 8001b78:	f004 f95e 	bl	8005e38 <HAL_GPIO_WritePin>

					// Rapidly flash led to show MCU ready to send values
					for(int i=0; i<20; i++){
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001b82:	e00b      	b.n	8001b9c <TxStream+0x110>
						HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001b84:	2120      	movs	r1, #32
 8001b86:	482d      	ldr	r0, [pc, #180]	; (8001c3c <TxStream+0x1b0>)
 8001b88:	f004 f96f 	bl	8005e6a <HAL_GPIO_TogglePin>
						osDelay(50);
 8001b8c:	2032      	movs	r0, #50	; 0x32
 8001b8e:	f007 fa08 	bl	8008fa2 <osDelay>
					for(int i=0; i<20; i++){
 8001b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b96:	3301      	adds	r3, #1
 8001b98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ba0:	2b13      	cmp	r3, #19
 8001ba2:	ddef      	ble.n	8001b84 <TxStream+0xf8>
					}

					// Turn off LED
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2120      	movs	r1, #32
 8001ba8:	4824      	ldr	r0, [pc, #144]	; (8001c3c <TxStream+0x1b0>)
 8001baa:	f004 f945 	bl	8005e38 <HAL_GPIO_WritePin>

					// Wait for 10 received chars, receiver must send something before to start receiving
					char ch[10];
					HAL_UART_Receive(&huart3, (uint8_t*) ch, sizeof(ch), HAL_MAX_DELAY);
 8001bae:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb6:	220a      	movs	r2, #10
 8001bb8:	4821      	ldr	r0, [pc, #132]	; (8001c40 <TxStream+0x1b4>)
 8001bba:	f006 fabb 	bl	8008134 <HAL_UART_Receive>

					// Wait a bit
					osDelay(2000);
 8001bbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bc2:	f007 f9ee 	bl	8008fa2 <osDelay>

					// Histroy variable
					DIFFDRIVE_HISTORY_TypeDef tmphist= hdiffdrive.history;
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <TxStream+0x1b8>)
 8001bc8:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8001bcc:	f503 7510 	add.w	r5, r3, #576	; 0x240
 8001bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bd4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001bd8:	e884 0003 	stmia.w	r4, {r0, r1}

					// Number of saved samples
					int N_sample;
					if( tmphist.sample_cnt < tmphist.max_sample )
 8001bdc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001bde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d203      	bcs.n	8001bee <TxStream+0x162>
						N_sample=  tmphist.sample_cnt;
 8001be6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001be8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001bec:	e003      	b.n	8001bf6 <TxStream+0x16a>
					else
						N_sample=  tmphist.max_sample;
 8001bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bf2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

					// First values send is the actual number of samples
					DATASTREAM_Print(&hstream, int_csv, 1, N_sample);
 8001bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4807      	ldr	r0, [pc, #28]	; (8001c1c <TxStream+0x190>)
 8001c00:	f000 fe34 	bl	800286c <DATASTREAM_Print>
					// Bit of transfer delay
					osDelay(5);
 8001c04:	2005      	movs	r0, #5
 8001c06:	f007 f9cc 	bl	8008fa2 <osDelay>

					// Init History Get function
					DIFFDRIVE_HISTORY_Get_Init();
 8001c0a:	f002 fa5d 	bl	80040c8 <DIFFDRIVE_HISTORY_Get_Init>

					for(int k= 0; k < N_sample; k++){
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001c14:	e0fd      	b.n	8001e12 <TxStream+0x386>
 8001c16:	bf00      	nop
 8001c18:	200000a2 	.word	0x200000a2
 8001c1c:	20004c28 	.word	0x20004c28
 8001c20:	40020800 	.word	0x40020800
 8001c24:	20000001 	.word	0x20000001
 8001c28:	200000a1 	.word	0x200000a1
 8001c2c:	200000a0 	.word	0x200000a0
 8001c30:	20000000 	.word	0x20000000
 8001c34:	200049cc 	.word	0x200049cc
 8001c38:	20004d10 	.word	0x20004d10
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	20004a48 	.word	0x20004a48
 8001c44:	20004de0 	.word	0x20004de0

						// Get one state sample from history
						DIFFDRIVE_HISTORY_Get_Sample(&state_measure, &state_target);
 8001c48:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001c4c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f002 fa60 	bl	8004118 <DIFFDRIVE_HISTORY_Get_Sample>

						// Send values to serial connected to ESP WiFi module
						DATASTREAM_Print(
								&hstream, float_csv, 18,
								state_measure.input[left], state_measure.input[right],
 8001c58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
						DATASTREAM_Print(
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc3b 	bl	80004d8 <__aeabi_f2d>
 8001c62:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
								state_measure.input[left], state_measure.input[right],
 8001c66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
						DATASTREAM_Print(
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc34 	bl	80004d8 <__aeabi_f2d>
 8001c70:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
								state_target .input[left], state_target .input[right],
 8001c74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
						DATASTREAM_Print(
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc2d 	bl	80004d8 <__aeabi_f2d>
 8001c7e:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
								state_target .input[left], state_target .input[right],
 8001c82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
						DATASTREAM_Print(
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fc26 	bl	80004d8 <__aeabi_f2d>
 8001c8c:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
								state_measure.wheel[left], state_measure.wheel[right],
 8001c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
						DATASTREAM_Print(
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc1f 	bl	80004d8 <__aeabi_f2d>
 8001c9a:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
								state_measure.wheel[left], state_measure.wheel[right],
 8001c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
						DATASTREAM_Print(
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fc18 	bl	80004d8 <__aeabi_f2d>
 8001ca8:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
								state_target .wheel[left], state_target .wheel[right],
 8001cac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
						DATASTREAM_Print(
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fc11 	bl	80004d8 <__aeabi_f2d>
 8001cb6:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
								state_target .wheel[left], state_target .wheel[right],
 8001cba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
						DATASTREAM_Print(
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fc0a 	bl	80004d8 <__aeabi_f2d>
 8001cc4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
								state_measure.pose.x_a,    state_measure.pose.y_a,
 8001cc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
						DATASTREAM_Print(
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc03 	bl	80004d8 <__aeabi_f2d>
 8001cd2:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
								state_measure.pose.x_a,    state_measure.pose.y_a,
 8001cd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
						DATASTREAM_Print(
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fbfc 	bl	80004d8 <__aeabi_f2d>
 8001ce0:	e9c7 0108 	strd	r0, r1, [r7, #32]
								state_measure.pose.theta,  state_measure.pose.v,
 8001ce4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
						DATASTREAM_Print(
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fbf5 	bl	80004d8 <__aeabi_f2d>
 8001cee:	e9c7 0106 	strd	r0, r1, [r7, #24]
								state_measure.pose.theta,  state_measure.pose.v,
 8001cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
						DATASTREAM_Print(
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fbee 	bl	80004d8 <__aeabi_f2d>
 8001cfc:	e9c7 0104 	strd	r0, r1, [r7, #16]
								state_measure.pose.om,
 8001d00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
						DATASTREAM_Print(
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fbe7 	bl	80004d8 <__aeabi_f2d>
 8001d0a:	e9c7 0102 	strd	r0, r1, [r7, #8]
                                state_target .pose.x_a,    state_target.pose.y_a,
 8001d0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
						DATASTREAM_Print(
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fbe0 	bl	80004d8 <__aeabi_f2d>
 8001d18:	e9c7 0100 	strd	r0, r1, [r7]
                                state_target .pose.x_a,    state_target.pose.y_a,
 8001d1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
						DATASTREAM_Print(
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fbd9 	bl	80004d8 <__aeabi_f2d>
 8001d26:	4682      	mov	sl, r0
 8001d28:	468b      	mov	fp, r1
								state_target .pose.theta,  state_target.pose.v,
 8001d2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
						DATASTREAM_Print(
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fbd2 	bl	80004d8 <__aeabi_f2d>
 8001d34:	4680      	mov	r8, r0
 8001d36:	4689      	mov	r9, r1
								state_target .pose.theta,  state_target.pose.v,
 8001d38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
						DATASTREAM_Print(
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fbcb 	bl	80004d8 <__aeabi_f2d>
 8001d42:	4604      	mov	r4, r0
 8001d44:	460d      	mov	r5, r1
								state_target .pose.om
 8001d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
						DATASTREAM_Print(
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fbc4 	bl	80004d8 <__aeabi_f2d>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8001d58:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 8001d5c:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 8001d60:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
 8001d64:	ed97 7b00 	vldr	d7, [r7]
 8001d68:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8001d6c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001d70:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8001d74:	ed97 7b04 	vldr	d7, [r7, #16]
 8001d78:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8001d7c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001d80:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8001d84:	ed97 7b08 	vldr	d7, [r7, #32]
 8001d88:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001d8c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001d90:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001d94:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001d98:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001d9c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001da0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001da4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001da8:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001dac:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001db0:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001db4:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001db8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001dbc:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8001dc0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001dc4:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8001dc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001dcc:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8001dd0:	ed8d 7b00 	vstr	d7, [sp]
 8001dd4:	2212      	movs	r2, #18
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	4817      	ldr	r0, [pc, #92]	; (8001e38 <TxStream+0x3ac>)
 8001dda:	f000 fd47 	bl	800286c <DATASTREAM_Print>
						);
						// Bit of transfer delay
						osDelay(5);
 8001dde:	2005      	movs	r0, #5
 8001de0:	f007 f8df 	bl	8008fa2 <osDelay>
						// Toggling led to show data transfer operation
						if( !(k%50) )
 8001de4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <TxStream+0x3b0>)
 8001dea:	fb83 1302 	smull	r1, r3, r3, r2
 8001dee:	1119      	asrs	r1, r3, #4
 8001df0:	17d3      	asrs	r3, r2, #31
 8001df2:	1acb      	subs	r3, r1, r3
 8001df4:	2132      	movs	r1, #50	; 0x32
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d103      	bne.n	8001e08 <TxStream+0x37c>
							HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001e00:	2120      	movs	r1, #32
 8001e02:	480f      	ldr	r0, [pc, #60]	; (8001e40 <TxStream+0x3b4>)
 8001e04:	f004 f831 	bl	8005e6a <HAL_GPIO_TogglePin>
					for(int k= 0; k < N_sample; k++){
 8001e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001e12:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	f6ff af14 	blt.w	8001c48 <TxStream+0x1bc>
					}

					// Turn off LED
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2120      	movs	r1, #32
 8001e24:	4806      	ldr	r0, [pc, #24]	; (8001e40 <TxStream+0x3b4>)
 8001e26:	f004 f807 	bl	8005e38 <HAL_GPIO_WritePin>

					// Reset ESP-8266
					HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <TxStream+0x3b8>)
 8001e30:	f004 f802 	bl	8005e38 <HAL_GPIO_WritePin>
				if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8001e34:	e695      	b.n	8001b62 <TxStream+0xd6>
 8001e36:	bf00      	nop
 8001e38:	20004c28 	.word	0x20004c28
 8001e3c:	51eb851f 	.word	0x51eb851f
 8001e40:	40020000 	.word	0x40020000
 8001e44:	40020800 	.word	0x40020800

08001e48 <RxStream>:

//#define STOP_WHEN_ZERO_ENTRY_

/* USER CODE END Header_RxStream */
void RxStream(void *argument)
{
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4a:	b0f3      	sub	sp, #460	; 0x1cc
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN RxStream */
	/* Infinite loop */

	// Debug array
	uint32_t running_time[100]={0};
 8001e52:	f107 0308 	add.w	r3, r7, #8
 8001e56:	4618      	mov	r0, r3
 8001e58:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2100      	movs	r1, #0
 8001e60:	f00a fbac 	bl	800c5bc <memset>
	int k_= 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

	// Communication timeout of milliseconds (set osWaitForever for no timeout)
	uint32_t timeout_time= 2000; //osWaitForever;
 8001e6a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e6e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	char curr_str[]=   "value"; //"gravity";
#else
#ifdef BINARY_PACKET

	// Float values expected to extract
	uint8_t n_values= 2;
 8001e72:	2302      	movs	r3, #2
 8001e74:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3

	// Repetition of the packet
	uint8_t packet_repeat= 2;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2

	// Actual number of float received (n_values+1 because one float is an "inf" to show where the packet start)
	uint8_t n_float= (n_values+1)*packet_repeat;
 8001e7e:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8001e82:	3301      	adds	r3, #1
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	f897 21b2 	ldrb.w	r2, [r7, #434]	; 0x1b2
 8001e8a:	fb12 f303 	smulbb	r3, r2, r3
 8001e8e:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1

	// Number of byte
	uint8_t n_byte= n_float*sizeof(float);
 8001e92:	f897 31b1 	ldrb.w	r3, [r7, #433]	; 0x1b1
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	f887 31b0 	strb.w	r3, [r7, #432]	; 0x1b0

	// Data buffer in byte
	uint8_t data[n_byte];
 8001e9c:	f897 41b0 	ldrb.w	r4, [r7, #432]	; 0x1b0
 8001ea0:	4623      	mov	r3, r4
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001ea8:	b2e0      	uxtb	r0, r4
 8001eaa:	f04f 0100 	mov.w	r1, #0
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	00cb      	lsls	r3, r1, #3
 8001eb8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ebc:	00c2      	lsls	r2, r0, #3
 8001ebe:	b2e0      	uxtb	r0, r4
 8001ec0:	f04f 0100 	mov.w	r1, #0
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	00cb      	lsls	r3, r1, #3
 8001ece:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ed2:	00c2      	lsls	r2, r0, #3
 8001ed4:	4623      	mov	r3, r4
 8001ed6:	3307      	adds	r3, #7
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	ebad 0d03 	sub.w	sp, sp, r3
 8001ee0:	466b      	mov	r3, sp
 8001ee2:	3300      	adds	r3, #0
 8001ee4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
#endif /* CSV_PACKET    */
#endif /* JSON_PACKET   */
#endif /* BINARY_PACKET */

	// Keep LED on to show that data transfer is down
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2120      	movs	r1, #32
 8001eec:	48a6      	ldr	r0, [pc, #664]	; (8002188 <RxStream+0x340>)
 8001eee:	f003 ffa3 	bl	8005e38 <HAL_GPIO_WritePin>

	// Start DMA Rx (Rx_flag will be connected with the flag inside datastream handle struct)
	DATASTREAM_ReceiveDMA(&hstream, data, sizeof(data));
 8001ef2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001ef6:	4622      	mov	r2, r4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	48a4      	ldr	r0, [pc, #656]	; (800218c <RxStream+0x344>)
 8001efc:	f000 fc64 	bl	80027c8 <DATASTREAM_ReceiveDMA>

	// Wait for a received input
	while( !__DATASTREAM_RX_DMA_CPLT(&hstream) )
 8001f00:	e000      	b.n	8001f04 <RxStream+0xbc>
		__NOP();
 8001f02:	bf00      	nop
	while( !__DATASTREAM_RX_DMA_CPLT(&hstream) )
 8001f04:	4ba1      	ldr	r3, [pc, #644]	; (800218c <RxStream+0x344>)
 8001f06:	7e1b      	ldrb	r3, [r3, #24]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	f083 0301 	eor.w	r3, r3, #1
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f6      	bne.n	8001f02 <RxStream+0xba>

	// LED off to show that data transfer is up
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2120      	movs	r1, #32
 8001f18:	489b      	ldr	r0, [pc, #620]	; (8002188 <RxStream+0x340>)
 8001f1a:	f003 ff8d 	bl	8005e38 <HAL_GPIO_WritePin>

	// Setting Global flag to enable Diff Drive
	diffDrive_enabled= true;
 8001f1e:	4b9c      	ldr	r3, [pc, #624]	; (8002190 <RxStream+0x348>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]

	// Measure time
	uint32_t tic= osKernelGetTickCount();
 8001f24:	f006 ff54 	bl	8008dd0 <osKernelGetTickCount>
 8001f28:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
	uint32_t toc;

	for(;;){

		// If data is received
		if( __DATASTREAM_RX_DMA_CPLT(&hstream) ){
 8001f2c:	4b97      	ldr	r3, [pc, #604]	; (800218c <RxStream+0x344>)
 8001f2e:	7e1b      	ldrb	r3, [r3, #24]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80c4 	beq.w	80020c0 <RxStream+0x278>
 8001f38:	466b      	mov	r3, sp
 8001f3a:	461e      	mov	r6, r3

			// Debug time
			if( k_ < sizeof(running_time)/sizeof(*running_time) )
 8001f3c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001f40:	2b63      	cmp	r3, #99	; 0x63
 8001f42:	d80e      	bhi.n	8001f62 <RxStream+0x11a>
				running_time[k_++]= osKernelGetTickCount()-tic;
 8001f44:	f006 ff44 	bl	8008dd0 <osKernelGetTickCount>
 8001f48:	4601      	mov	r1, r0
 8001f4a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f54:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001f58:	1a89      	subs	r1, r1, r2
 8001f5a:	f107 0208 	add.w	r2, r7, #8
 8001f5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#ifdef BINARY_PACKET

			uint8_t tmp_data[n_byte];
 8001f62:	f897 51b0 	ldrb.w	r5, [r7, #432]	; 0x1b0
 8001f66:	462b      	mov	r3, r5
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f6e:	b2e8      	uxtb	r0, r5
 8001f70:	f04f 0100 	mov.w	r1, #0
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	00cb      	lsls	r3, r1, #3
 8001f7e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f82:	00c2      	lsls	r2, r0, #3
 8001f84:	b2e8      	uxtb	r0, r5
 8001f86:	f04f 0100 	mov.w	r1, #0
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	00cb      	lsls	r3, r1, #3
 8001f94:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f98:	00c2      	lsls	r2, r0, #3
 8001f9a:	462b      	mov	r3, r5
 8001f9c:	3307      	adds	r3, #7
 8001f9e:	08db      	lsrs	r3, r3, #3
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	ebad 0d03 	sub.w	sp, sp, r3
 8001fa6:	466b      	mov	r3, sp
 8001fa8:	3300      	adds	r3, #0
 8001faa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
			float curr_val;
			// FLip array of byte data (I guess Matlab send with different endiannes)
			for( int i=0; i<n_byte; i++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fb4:	e013      	b.n	8001fde <RxStream+0x196>
				tmp_data[n_byte-1-i]= data[i];
 8001fb6:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 8001fba:	1e5a      	subs	r2, r3, #1
 8001fbc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8001fc6:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8001fca:	440a      	add	r2, r1
 8001fcc:	7811      	ldrb	r1, [r2, #0]
 8001fce:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8001fd2:	54d1      	strb	r1, [r2, r3]
			for( int i=0; i<n_byte; i++)
 8001fd4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fde:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 8001fe2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	dbe5      	blt.n	8001fb6 <RxStream+0x16e>

			// Find the index where the "inf" values is, the packet start from there
			int idx_start=0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			while( idx_start < n_byte && !isinf(curr_val= *((float*)(tmp_data+idx_start++))) )
 8001ff0:	bf00      	nop
 8001ff2:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 8001ff6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	da1d      	bge.n	800203a <RxStream+0x1f2>
 8001ffe:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002002:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002006:	1c59      	adds	r1, r3, #1
 8002008:	f8c7 11c4 	str.w	r1, [r7, #452]	; 0x1c4
 800200c:	4413      	add	r3, r2
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002014:	edd7 7a67 	vldr	s15, [r7, #412]	; 0x19c
 8002018:	eef0 7ae7 	vabs.f32	s15, s15
 800201c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002194 <RxStream+0x34c>
 8002020:	eef4 7a47 	vcmp.f32	s15, s14
 8002024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002028:	bfd4      	ite	le
 800202a:	2301      	movle	r3, #1
 800202c:	2300      	movgt	r3, #0
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f083 0301 	eor.w	r3, r3, #1
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0db      	beq.n	8001ff2 <RxStream+0x1aa>
				;

			// If the data, read from the found index, contain n float values
			// If the data, read from the found index, contain 2 float
			if( --idx_start < n_byte-sizeof(float)*n_values ){
 800203a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800203e:	3b01      	subs	r3, #1
 8002040:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002044:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8002048:	f897 11b0 	ldrb.w	r1, [r7, #432]	; 0x1b0
 800204c:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	1acb      	subs	r3, r1, r3
 8002054:	429a      	cmp	r2, r3
 8002056:	d218      	bcs.n	800208a <RxStream+0x242>
				// First value I send is the last I receive (from Matlab Transmitter I send first linear and then angular
				// here I receive first angular and then linear)
				angular= *((float*)(tmp_data+idx_start+(n_values-1)*sizeof(float)));
 8002058:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800205c:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8002060:	3b01      	subs	r3, #1
 8002062:	0099      	lsls	r1, r3, #2
 8002064:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002068:	440b      	add	r3, r1
 800206a:	4413      	add	r3, r2
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a4a      	ldr	r2, [pc, #296]	; (8002198 <RxStream+0x350>)
 8002070:	6013      	str	r3, [r2, #0]
				linear=  *((float*)(tmp_data+idx_start+(n_values-0)*sizeof(float)));
 8002072:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002076:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800207a:	0099      	lsls	r1, r3, #2
 800207c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002080:	440b      	add	r3, r1
 8002082:	4413      	add	r3, r2
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a45      	ldr	r2, [pc, #276]	; (800219c <RxStream+0x354>)
 8002088:	6013      	str	r3, [r2, #0]

			// Try resetting
			//DATASTREAM_ReceiveDMA_Reset(&hstream);

			// Ready for receive new messages
			DATASTREAM_ReceiveDMA(&hstream, data, sizeof(data));
 800208a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800208e:	4622      	mov	r2, r4
 8002090:	4619      	mov	r1, r3
 8002092:	483e      	ldr	r0, [pc, #248]	; (800218c <RxStream+0x344>)
 8002094:	f000 fb98 	bl	80027c8 <DATASTREAM_ReceiveDMA>

			// Get current time
			tic= osKernelGetTickCount();
 8002098:	f006 fe9a 	bl	8008dd0 <osKernelGetTickCount>
 800209c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
 80020a0:	46b5      	mov	sp, r6
		}


		// Stopping Rx if flag is at reset value
		while( !RxStream_enabled ){
 80020a2:	e00d      	b.n	80020c0 <RxStream+0x278>
			if( !RxStream_stopped ){
 80020a4:	4b3e      	ldr	r3, [pc, #248]	; (80021a0 <RxStream+0x358>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f083 0301 	eor.w	r3, r3, #1
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <RxStream+0x278>
				DATASTREAM_ReceiveDMA_Reset(&hstream);
 80020b4:	4835      	ldr	r0, [pc, #212]	; (800218c <RxStream+0x344>)
 80020b6:	f000 fbb3 	bl	8002820 <DATASTREAM_ReceiveDMA_Reset>
				RxStream_stopped= true;
 80020ba:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <RxStream+0x358>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
		while( !RxStream_enabled ){
 80020c0:	4b38      	ldr	r3, [pc, #224]	; (80021a4 <RxStream+0x35c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f083 0301 	eor.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1e9      	bne.n	80020a4 <RxStream+0x25c>
			}
		}

		// If data aren't received for a fixed period of time
		if( (toc= osKernelGetTickCount()-tic) > timeout_time ){
 80020d0:	f006 fe7e 	bl	8008dd0 <osKernelGetTickCount>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80020e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80020e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80020e8:	429a      	cmp	r2, r3
 80020ea:	f67f af1f 	bls.w	8001f2c <RxStream+0xe4>

			// Stop Differential Drive motion
			diffDrive_enabled= false;
 80020ee:	4b28      	ldr	r3, [pc, #160]	; (8002190 <RxStream+0x348>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]

			// Wait until diff drive is still
			while( !diffDrive_stopped )
 80020f4:	bf00      	nop
 80020f6:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <RxStream+0x360>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f083 0301 	eor.w	r3, r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f7      	bne.n	80020f6 <RxStream+0x2ae>
				;

			// Turn on LED to show that connection is down
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002106:	2201      	movs	r2, #1
 8002108:	2120      	movs	r1, #32
 800210a:	481f      	ldr	r0, [pc, #124]	; (8002188 <RxStream+0x340>)
 800210c:	f003 fe94 	bl	8005e38 <HAL_GPIO_WritePin>

			// Try resetting uart Rx and DMA interrupt
			DATASTREAM_ReceiveDMA_Reset(&hstream);
 8002110:	481e      	ldr	r0, [pc, #120]	; (800218c <RxStream+0x344>)
 8002112:	f000 fb85 	bl	8002820 <DATASTREAM_ReceiveDMA_Reset>

			// Try to start a new DMA receiving request
			DATASTREAM_ReceiveDMA(&hstream, data, sizeof(data));
 8002116:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800211a:	4622      	mov	r2, r4
 800211c:	4619      	mov	r1, r3
 800211e:	481b      	ldr	r0, [pc, #108]	; (800218c <RxStream+0x344>)
 8002120:	f000 fb52 	bl	80027c8 <DATASTREAM_ReceiveDMA>

			// Wait for input
			while( !__DATASTREAM_RX_DMA_CPLT(&hstream) ){
 8002124:	e019      	b.n	800215a <RxStream+0x312>

				// While receiving is disabled keep loop here before to reset
				while( !RxStream_enabled )
					RxStream_stopped= true;
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <RxStream+0x358>)
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
				while( !RxStream_enabled )
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <RxStream+0x35c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f083 0301 	eor.w	r3, r3, #1
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f4      	bne.n	8002126 <RxStream+0x2de>

				// If more time elapses, without received data, reset system
				if( (osKernelGetTickCount()-tic) > 3*timeout_time ){
 800213c:	f006 fe48 	bl	8008dd0 <osKernelGetTickCount>
 8002140:	4602      	mov	r2, r0
 8002142:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002146:	1ad1      	subs	r1, r2, r3
 8002148:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	4299      	cmp	r1, r3
 8002154:	d901      	bls.n	800215a <RxStream+0x312>
					// Reset MCU
					HAL_NVIC_SystemReset();
 8002156:	f003 f94e 	bl	80053f6 <HAL_NVIC_SystemReset>
			while( !__DATASTREAM_RX_DMA_CPLT(&hstream) ){
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <RxStream+0x344>)
 800215c:	7e1b      	ldrb	r3, [r3, #24]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f083 0301 	eor.w	r3, r3, #1
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1e0      	bne.n	800212c <RxStream+0x2e4>
				}
			}

			// Turn on LED to show that connection is up
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	2120      	movs	r1, #32
 800216e:	4806      	ldr	r0, [pc, #24]	; (8002188 <RxStream+0x340>)
 8002170:	f003 fe62 	bl	8005e38 <HAL_GPIO_WritePin>

			// Resume other threads
			osThreadResume(DiffDriveTaskHandle);
 8002174:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <RxStream+0x364>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f006 fef1 	bl	8008f60 <osThreadResume>
#ifdef OBSTACLE_AVOIDANCE
			osThreadResume(InfraredTaskHandle);
#endif
			// Enable diffDrive
			diffDrive_enabled= true;
 800217e:	4b04      	ldr	r3, [pc, #16]	; (8002190 <RxStream+0x348>)
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
		if( __DATASTREAM_RX_DMA_CPLT(&hstream) ){
 8002184:	e6d2      	b.n	8001f2c <RxStream+0xe4>
 8002186:	bf00      	nop
 8002188:	40020000 	.word	0x40020000
 800218c:	20004c28 	.word	0x20004c28
 8002190:	200000a0 	.word	0x200000a0
 8002194:	7f7fffff 	.word	0x7f7fffff
 8002198:	2000009c 	.word	0x2000009c
 800219c:	20000098 	.word	0x20000098
 80021a0:	200000a1 	.word	0x200000a1
 80021a4:	20000001 	.word	0x20000001
 80021a8:	20000000 	.word	0x20000000
 80021ac:	200049cc 	.word	0x200049cc

080021b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021c2:	f002 ffa9 	bl	8005118 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40001000 	.word	0x40001000

080021d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d8:	b672      	cpsid	i
}
 80021da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021dc:	e7fe      	b.n	80021dc <Error_Handler+0x8>
	...

080021e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_MspInit+0x54>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	4a11      	ldr	r2, [pc, #68]	; (8002234 <HAL_MspInit+0x54>)
 80021f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f4:	6453      	str	r3, [r2, #68]	; 0x44
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <HAL_MspInit+0x54>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_MspInit+0x54>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <HAL_MspInit+0x54>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_MspInit+0x54>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	210f      	movs	r1, #15
 8002222:	f06f 0001 	mvn.w	r0, #1
 8002226:	f003 f8ae 	bl	8005386 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800

08002238 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <HAL_TIM_PWM_MspInit+0x3c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d10d      	bne.n	8002266 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_TIM_PWM_MspInit+0x40>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a09      	ldr	r2, [pc, #36]	; (8002278 <HAL_TIM_PWM_MspInit+0x40>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <HAL_TIM_PWM_MspInit+0x40>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40010000 	.word	0x40010000
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	; 0x30
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229c:	d12d      	bne.n	80022fa <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	4b30      	ldr	r3, [pc, #192]	; (8002364 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a2f      	ldr	r2, [pc, #188]	; (8002364 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	4b29      	ldr	r3, [pc, #164]	; (8002364 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a28      	ldr	r2, [pc, #160]	; (8002364 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b26      	ldr	r3, [pc, #152]	; (8002364 <HAL_TIM_Encoder_MspInit+0xe8>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 80022d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022e8:	2301      	movs	r3, #1
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	4619      	mov	r1, r3
 80022f2:	481d      	ldr	r0, [pc, #116]	; (8002368 <HAL_TIM_Encoder_MspInit+0xec>)
 80022f4:	f003 fbf4 	bl	8005ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80022f8:	e030      	b.n	800235c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a1b      	ldr	r2, [pc, #108]	; (800236c <HAL_TIM_Encoder_MspInit+0xf0>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d12b      	bne.n	800235c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002304:	2300      	movs	r3, #0
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_TIM_Encoder_MspInit+0xe8>)
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	4a15      	ldr	r2, [pc, #84]	; (8002364 <HAL_TIM_Encoder_MspInit+0xe8>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	6413      	str	r3, [r2, #64]	; 0x40
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	4a0e      	ldr	r2, [pc, #56]	; (8002364 <HAL_TIM_Encoder_MspInit+0xe8>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6313      	str	r3, [r2, #48]	; 0x30
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_RIGHT_B_Pin|ENCODER_RIGHT_A_Pin;
 800233c:	2303      	movs	r3, #3
 800233e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800234c:	2302      	movs	r3, #2
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002350:	f107 031c 	add.w	r3, r7, #28
 8002354:	4619      	mov	r1, r3
 8002356:	4806      	ldr	r0, [pc, #24]	; (8002370 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002358:	f003 fbc2 	bl	8005ae0 <HAL_GPIO_Init>
}
 800235c:	bf00      	nop
 800235e:	3730      	adds	r7, #48	; 0x30
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40023800 	.word	0x40023800
 8002368:	40020400 	.word	0x40020400
 800236c:	40000c00 	.word	0x40000c00
 8002370:	40020000 	.word	0x40020000

08002374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0e      	ldr	r2, [pc, #56]	; (80023bc <HAL_TIM_Base_MspInit+0x48>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d115      	bne.n	80023b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <HAL_TIM_Base_MspInit+0x4c>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	4a0c      	ldr	r2, [pc, #48]	; (80023c0 <HAL_TIM_Base_MspInit+0x4c>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	6413      	str	r3, [r2, #64]	; 0x40
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_TIM_Base_MspInit+0x4c>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2105      	movs	r1, #5
 80023a6:	201d      	movs	r0, #29
 80023a8:	f002 ffed 	bl	8005386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023ac:	201d      	movs	r0, #29
 80023ae:	f003 f806 	bl	80053be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40000400 	.word	0x40000400
 80023c0:	40023800 	.word	0x40023800

080023c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a12      	ldr	r2, [pc, #72]	; (800242c <HAL_TIM_MspPostInit+0x68>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d11e      	bne.n	8002424 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_TIM_MspPostInit+0x6c>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a10      	ldr	r2, [pc, #64]	; (8002430 <HAL_TIM_MspPostInit+0x6c>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <HAL_TIM_MspPostInit+0x6c>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_FORWARD_Pin|LEFT_MOTOR_BACKWARD_Pin|RIGHT_MOTOR_FORWARD_Pin|RIGHT_MOTOR_BACKWARD_Pin;
 8002402:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002406:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002414:	2301      	movs	r3, #1
 8002416:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002418:	f107 030c 	add.w	r3, r7, #12
 800241c:	4619      	mov	r1, r3
 800241e:	4805      	ldr	r0, [pc, #20]	; (8002434 <HAL_TIM_MspPostInit+0x70>)
 8002420:	f003 fb5e 	bl	8005ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002424:	bf00      	nop
 8002426:	3720      	adds	r7, #32
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40010000 	.word	0x40010000
 8002430:	40023800 	.word	0x40023800
 8002434:	40020000 	.word	0x40020000

08002438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a40      	ldr	r2, [pc, #256]	; (8002558 <HAL_UART_MspInit+0x120>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d179      	bne.n	800254e <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	4b3f      	ldr	r3, [pc, #252]	; (800255c <HAL_UART_MspInit+0x124>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	4a3e      	ldr	r2, [pc, #248]	; (800255c <HAL_UART_MspInit+0x124>)
 8002464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002468:	6413      	str	r3, [r2, #64]	; 0x40
 800246a:	4b3c      	ldr	r3, [pc, #240]	; (800255c <HAL_UART_MspInit+0x124>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b38      	ldr	r3, [pc, #224]	; (800255c <HAL_UART_MspInit+0x124>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a37      	ldr	r2, [pc, #220]	; (800255c <HAL_UART_MspInit+0x124>)
 8002480:	f043 0304 	orr.w	r3, r3, #4
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b35      	ldr	r3, [pc, #212]	; (800255c <HAL_UART_MspInit+0x124>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	4b31      	ldr	r3, [pc, #196]	; (800255c <HAL_UART_MspInit+0x124>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a30      	ldr	r2, [pc, #192]	; (800255c <HAL_UART_MspInit+0x124>)
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b2e      	ldr	r3, [pc, #184]	; (800255c <HAL_UART_MspInit+0x124>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024ae:	2320      	movs	r3, #32
 80024b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ba:	2303      	movs	r3, #3
 80024bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024be:	2307      	movs	r3, #7
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	4619      	mov	r1, r3
 80024c8:	4825      	ldr	r0, [pc, #148]	; (8002560 <HAL_UART_MspInit+0x128>)
 80024ca:	f003 fb09 	bl	8005ae0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024dc:	2303      	movs	r3, #3
 80024de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024e0:	2307      	movs	r3, #7
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4619      	mov	r1, r3
 80024ea:	481e      	ldr	r0, [pc, #120]	; (8002564 <HAL_UART_MspInit+0x12c>)
 80024ec:	f003 faf8 	bl	8005ae0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80024f0:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <HAL_UART_MspInit+0x130>)
 80024f2:	4a1e      	ldr	r2, [pc, #120]	; (800256c <HAL_UART_MspInit+0x134>)
 80024f4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <HAL_UART_MspInit+0x130>)
 80024f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024fc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024fe:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <HAL_UART_MspInit+0x130>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <HAL_UART_MspInit+0x130>)
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800250a:	4b17      	ldr	r3, [pc, #92]	; (8002568 <HAL_UART_MspInit+0x130>)
 800250c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002510:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <HAL_UART_MspInit+0x130>)
 8002514:	2200      	movs	r2, #0
 8002516:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002518:	4b13      	ldr	r3, [pc, #76]	; (8002568 <HAL_UART_MspInit+0x130>)
 800251a:	2200      	movs	r2, #0
 800251c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_UART_MspInit+0x130>)
 8002520:	2200      	movs	r2, #0
 8002522:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002524:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_UART_MspInit+0x130>)
 8002526:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800252a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800252c:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <HAL_UART_MspInit+0x130>)
 800252e:	2200      	movs	r2, #0
 8002530:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002532:	480d      	ldr	r0, [pc, #52]	; (8002568 <HAL_UART_MspInit+0x130>)
 8002534:	f002 ff64 	bl	8005400 <HAL_DMA_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800253e:	f7ff fe49 	bl	80021d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a08      	ldr	r2, [pc, #32]	; (8002568 <HAL_UART_MspInit+0x130>)
 8002546:	639a      	str	r2, [r3, #56]	; 0x38
 8002548:	4a07      	ldr	r2, [pc, #28]	; (8002568 <HAL_UART_MspInit+0x130>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800254e:	bf00      	nop
 8002550:	3728      	adds	r7, #40	; 0x28
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40004800 	.word	0x40004800
 800255c:	40023800 	.word	0x40023800
 8002560:	40020800 	.word	0x40020800
 8002564:	40020400 	.word	0x40020400
 8002568:	200049e8 	.word	0x200049e8
 800256c:	40026028 	.word	0x40026028

08002570 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08c      	sub	sp, #48	; 0x30
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002580:	2200      	movs	r2, #0
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	2036      	movs	r0, #54	; 0x36
 8002586:	f002 fefe 	bl	8005386 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800258a:	2036      	movs	r0, #54	; 0x36
 800258c:	f002 ff17 	bl	80053be <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <HAL_InitTick+0xa4>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	4a1e      	ldr	r2, [pc, #120]	; (8002614 <HAL_InitTick+0xa4>)
 800259a:	f043 0310 	orr.w	r3, r3, #16
 800259e:	6413      	str	r3, [r2, #64]	; 0x40
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_InitTick+0xa4>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025ac:	f107 0210 	add.w	r2, r7, #16
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f003 fd8c 	bl	80060d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80025bc:	f003 fd62 	bl	8006084 <HAL_RCC_GetPCLK1Freq>
 80025c0:	4603      	mov	r3, r0
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c8:	4a13      	ldr	r2, [pc, #76]	; (8002618 <HAL_InitTick+0xa8>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	0c9b      	lsrs	r3, r3, #18
 80025d0:	3b01      	subs	r3, #1
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_InitTick+0xac>)
 80025d6:	4a12      	ldr	r2, [pc, #72]	; (8002620 <HAL_InitTick+0xb0>)
 80025d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <HAL_InitTick+0xac>)
 80025dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <HAL_InitTick+0xac>)
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <HAL_InitTick+0xac>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_InitTick+0xac>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80025f4:	4809      	ldr	r0, [pc, #36]	; (800261c <HAL_InitTick+0xac>)
 80025f6:	f004 f9ef 	bl	80069d8 <HAL_TIM_Base_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d104      	bne.n	800260a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002600:	4806      	ldr	r0, [pc, #24]	; (800261c <HAL_InitTick+0xac>)
 8002602:	f004 fa45 	bl	8006a90 <HAL_TIM_Base_Start_IT>
 8002606:	4603      	mov	r3, r0
 8002608:	e000      	b.n	800260c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	3730      	adds	r7, #48	; 0x30
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	431bde83 	.word	0x431bde83
 800261c:	20005038 	.word	0x20005038
 8002620:	40001000 	.word	0x40001000

08002624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <NMI_Handler+0x4>

0800262a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262e:	e7fe      	b.n	800262e <HardFault_Handler+0x4>

08002630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <MemManage_Handler+0x4>

08002636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800263a:	e7fe      	b.n	800263a <BusFault_Handler+0x4>

0800263c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <UsageFault_Handler+0x4>

08002642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <DMA1_Stream1_IRQHandler+0x10>)
 8002656:	f002 ffd9 	bl	800560c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200049e8 	.word	0x200049e8

08002664 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <TIM3_IRQHandler+0x10>)
 800266a:	f004 fd17 	bl	800709c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20004b74 	.word	0x20004b74

08002678 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <TIM6_DAC_IRQHandler+0x10>)
 800267e:	f004 fd0d 	bl	800709c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20005038 	.word	0x20005038

0800268c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002694:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <_sbrk+0x5c>)
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <_sbrk+0x60>)
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <_sbrk+0x64>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <_sbrk+0x64>)
 80026aa:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <_sbrk+0x68>)
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <_sbrk+0x64>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d207      	bcs.n	80026cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026bc:	f009 ff46 	bl	800c54c <__errno>
 80026c0:	4603      	mov	r3, r0
 80026c2:	220c      	movs	r2, #12
 80026c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ca:	e009      	b.n	80026e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026cc:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026d2:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	4a05      	ldr	r2, [pc, #20]	; (80026f0 <_sbrk+0x64>)
 80026dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026de:	68fb      	ldr	r3, [r7, #12]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20020000 	.word	0x20020000
 80026ec:	00000400 	.word	0x00000400
 80026f0:	200000a4 	.word	0x200000a4
 80026f4:	200052d8 	.word	0x200052d8

080026f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <SystemInit+0x20>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	4a05      	ldr	r2, [pc, #20]	; (8002718 <SystemInit+0x20>)
 8002704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <DATASTREAM_Init>:


/* ----------------- Functions definition --------------------- */

// Setting up streaming
DATASTREAM_StatusTypeDef DATASTREAM_Init(DATASTREAM_HandleTypeDef* hstream){
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

	// Check if it's possible to initialize a new stream
	if( glbl_idx < MAX_STREAMS ){
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <DATASTREAM_Init+0x9c>)
 8002726:	f993 3000 	ldrsb.w	r3, [r3]
 800272a:	2b03      	cmp	r3, #3
 800272c:	dc2e      	bgt.n	800278c <DATASTREAM_Init+0x70>

		// Realloc array of handles pointers
		hdatastream= (DATASTREAM_HandleTypeDef**)realloc(hdatastream, glbl_idx*sizeof(DATASTREAM_HandleTypeDef*));
 800272e:	4b23      	ldr	r3, [pc, #140]	; (80027bc <DATASTREAM_Init+0xa0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a21      	ldr	r2, [pc, #132]	; (80027b8 <DATASTREAM_Init+0x9c>)
 8002734:	f992 2000 	ldrsb.w	r2, [r2]
 8002738:	0092      	lsls	r2, r2, #2
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f009 ffff 	bl	800c740 <realloc>
 8002742:	4603      	mov	r3, r0
 8002744:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <DATASTREAM_Init+0xa0>)
 8002746:	6013      	str	r3, [r2, #0]

		// Connect current handle with input handle using pointers
		hdatastream[glbl_idx]= hstream;
 8002748:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <DATASTREAM_Init+0xa0>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <DATASTREAM_Init+0x9c>)
 800274e:	f993 3000 	ldrsb.w	r3, [r3]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	601a      	str	r2, [r3, #0]
	else
		// Return failure
		return DATASTREAM_ERROR;

	// Assign handle id and increment global index
	hstream->id= glbl_idx++;
 800275a:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <DATASTREAM_Init+0x9c>)
 800275c:	f993 2000 	ldrsb.w	r2, [r3]
 8002760:	b2d3      	uxtb	r3, r2
 8002762:	3301      	adds	r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	b259      	sxtb	r1, r3
 8002768:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <DATASTREAM_Init+0x9c>)
 800276a:	7019      	strb	r1, [r3, #0]
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	765a      	strb	r2, [r3, #25]

	// Local UART handle
	hstream->huart=              hstream->Init.huart;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	60da      	str	r2, [r3, #12]
	// DMA Enable
	hstream->DMA_Rx_Enable=      hstream->Init.DMA_Rx_Enable;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	791a      	ldrb	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	741a      	strb	r2, [r3, #16]

	if( hstream->DMA_Rx_Enable ){
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7c1b      	ldrb	r3, [r3, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00d      	beq.n	80027a6 <DATASTREAM_Init+0x8a>
 800278a:	e001      	b.n	8002790 <DATASTREAM_Init+0x74>
		return DATASTREAM_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e00f      	b.n	80027b0 <DATASTREAM_Init+0x94>
		// DMA Interrupt Request "id"
		hstream->DMA_Rx_Stream_IRQn= hstream->Init.DMA_Rx_Stream_IRQn;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	615a      	str	r2, [r3, #20]
		// Assign Rx callback
		hstream->huart->RxCpltCallback= DATASTREAM_RxCpltCallback;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4a08      	ldr	r2, [pc, #32]	; (80027c0 <DATASTREAM_Init+0xa4>)
 800279e:	651a      	str	r2, [r3, #80]	; 0x50
		// Assign default true value to flag
		hstream->RxCpltFlag= true;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	761a      	strb	r2, [r3, #24]
	}

	// Assign Error callback
	hstream->huart->ErrorCallback=  DATASTREAM_ErrorCallback;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	4a06      	ldr	r2, [pc, #24]	; (80027c4 <DATASTREAM_Init+0xa8>)
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54

	// Return success
	return DATASTREAM_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	200000a8 	.word	0x200000a8
 80027bc:	200050ec 	.word	0x200050ec
 80027c0:	080029e9 	.word	0x080029e9
 80027c4:	08002a49 	.word	0x08002a49

080027c8 <DATASTREAM_ReceiveDMA>:
	free(hdatastream);
}


// Receive Data in DMA mode, setting a flag when data is received
DATASTREAM_StatusTypeDef DATASTREAM_ReceiveDMA(DATASTREAM_HandleTypeDef* hstream, uint8_t *data, uint32_t data_size){
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]

	// If flag is false it means that a previous DMA receive is still hanging. Also
	// if DMA is not enabled return error
	if( !hstream->RxCpltFlag || !hstream->DMA_Rx_Enable )
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	7e1b      	ldrb	r3, [r3, #24]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f083 0301 	eor.w	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d106      	bne.n	80027f2 <DATASTREAM_ReceiveDMA+0x2a>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	7c1b      	ldrb	r3, [r3, #16]
 80027e8:	f083 0301 	eor.w	r3, r3, #1
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <DATASTREAM_ReceiveDMA+0x2e>
		return DATASTREAM_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e010      	b.n	8002818 <DATASTREAM_ReceiveDMA+0x50>

	// Assign false to Rx complete flag
	hstream->RxCpltFlag= false;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	761a      	strb	r2, [r3, #24]

	// Start DMA receiving (if HAL error occurred return failure)
	if( HAL_UART_Receive_DMA(hstream->huart, data, data_size) != HAL_OK )
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	b292      	uxth	r2, r2
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	4618      	mov	r0, r3
 8002808:	f005 fd36 	bl	8008278 <HAL_UART_Receive_DMA>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <DATASTREAM_ReceiveDMA+0x4e>
		return DATASTREAM_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <DATASTREAM_ReceiveDMA+0x50>

	// Return success
	return DATASTREAM_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <DATASTREAM_ReceiveDMA_Reset>:


// Function to reset Rx with DMA communication
DATASTREAM_StatusTypeDef DATASTREAM_ReceiveDMA_Reset(DATASTREAM_HandleTypeDef* hstream){
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

	// If DMA is not enabled return error
	if( !hstream->DMA_Rx_Enable )
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	7c1b      	ldrb	r3, [r3, #16]
 800282c:	f083 0301 	eor.w	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <DATASTREAM_ReceiveDMA_Reset+0x1a>
		return DATASTREAM_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e014      	b.n	8002864 <DATASTREAM_ReceiveDMA_Reset+0x44>

	// Assign default true to flag
	hstream->RxCpltFlag= true;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	761a      	strb	r2, [r3, #24]

	// Try resetting uart Rx and DMA interrupt
	HAL_NVIC_DisableIRQ(hstream->DMA_Rx_Stream_IRQn);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	b25b      	sxtb	r3, r3
 8002846:	4618      	mov	r0, r3
 8002848:	f002 fdc7 	bl	80053da <HAL_NVIC_DisableIRQ>
	HAL_NVIC_EnableIRQ(hstream->DMA_Rx_Stream_IRQn);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	b25b      	sxtb	r3, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f002 fdb3 	bl	80053be <HAL_NVIC_EnableIRQ>

	// Set Uart Rx Ready
	hstream->huart->RxState= HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	return DATASTREAM_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <DATASTREAM_Print>:


// Do send values into serial, using a Variadic function. This version is for freeRTOS that doesn't support
// printf and sprintf
void DATASTREAM_Print(DATASTREAM_HandleTypeDef* hstream, DATASTREAM_PrintMode mode, int vargn, ...){
 800286c:	b40c      	push	{r2, r3}
 800286e:	b580      	push	{r7, lr}
 8002870:	b094      	sub	sp, #80	; 0x50
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	460b      	mov	r3, r1
 8002878:	70fb      	strb	r3, [r7, #3]

	// Initializing variadic arguments, using "stdarg.h" macros
	va_list vargp;
	va_start( vargp, vargn );
 800287a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800287e:	63bb      	str	r3, [r7, #56]	; 0x38

	// Timeout of ms
	uint32_t timeout= 1;
 8002880:	2301      	movs	r3, #1
 8002882:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(mode){
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	2b03      	cmp	r3, #3
 8002888:	f200 80a6 	bhi.w	80029d8 <DATASTREAM_Print+0x16c>
 800288c:	a201      	add	r2, pc, #4	; (adr r2, 8002894 <DATASTREAM_Print+0x28>)
 800288e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002892:	bf00      	nop
 8002894:	0800294b 	.word	0x0800294b
 8002898:	080028a5 	.word	0x080028a5
 800289c:	080029d9 	.word	0x080029d9
 80028a0:	080029d9 	.word	0x080029d9
		// ------------ Streaming values in csv format --------------------
		// (Using this mode I send N values separated by comma character,
		//  each stream is ended with a newline)
		case float_csv:

			for(int i=0; i<vargn; i++){
 80028a4:	2300      	movs	r3, #0
 80028a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028a8:	e03e      	b.n	8002928 <DATASTREAM_Print+0xbc>
				char data_buff[15];
				// Init buffer
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80028ae:	e008      	b.n	80028c2 <DATASTREAM_Print+0x56>
					data_buff[k]= '\0';
 80028b0:	f107 0220 	add.w	r2, r7, #32
 80028b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b6:	4413      	add	r3, r2
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 80028bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028be:	3301      	adds	r3, #1
 80028c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80028c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c4:	2b0e      	cmp	r3, #14
 80028c6:	d9f3      	bls.n	80028b0 <DATASTREAM_Print+0x44>

				// Float to Array!
				ftoa((float)va_arg(vargp, double), data_buff, 7);
 80028c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ca:	3307      	adds	r3, #7
 80028cc:	f023 0307 	bic.w	r3, r3, #7
 80028d0:	f103 0208 	add.w	r2, r3, #8
 80028d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	4610      	mov	r0, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	f7fe f94b 	bl	8000b78 <__aeabi_d2f>
 80028e2:	4602      	mov	r2, r0
 80028e4:	f107 0320 	add.w	r3, r7, #32
 80028e8:	2107      	movs	r1, #7
 80028ea:	4618      	mov	r0, r3
 80028ec:	ee00 2a10 	vmov	s0, r2
 80028f0:	f000 f942 	bl	8002b78 <ftoa>
				// Polling TX
				HAL_UART_Transmit(hstream->huart, (uint8_t *)data_buff, sizeof(data_buff), timeout);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68d8      	ldr	r0, [r3, #12]
 80028f8:	f107 0120 	add.w	r1, r7, #32
 80028fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028fe:	220f      	movs	r2, #15
 8002900:	f005 fb86 	bl	8008010 <HAL_UART_Transmit>
				// Omit last comma
				if( i != vargn-1)
 8002904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002906:	3b01      	subs	r3, #1
 8002908:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800290a:	429a      	cmp	r2, r3
 800290c:	d009      	beq.n	8002922 <DATASTREAM_Print+0xb6>
					HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){','}), sizeof(uint8_t), timeout);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68d8      	ldr	r0, [r3, #12]
 8002912:	232c      	movs	r3, #44	; 0x2c
 8002914:	773b      	strb	r3, [r7, #28]
 8002916:	f107 011c 	add.w	r1, r7, #28
 800291a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800291c:	2201      	movs	r2, #1
 800291e:	f005 fb77 	bl	8008010 <HAL_UART_Transmit>
			for(int i=0; i<vargn; i++){
 8002922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002924:	3301      	adds	r3, #1
 8002926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002928:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800292a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800292c:	429a      	cmp	r2, r3
 800292e:	dbbc      	blt.n	80028aa <DATASTREAM_Print+0x3e>
			}
			// Adding a newline
			HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){'\n'}), 1, HAL_MAX_DELAY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68d8      	ldr	r0, [r3, #12]
 8002934:	230a      	movs	r3, #10
 8002936:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800293a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800293e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002942:	2201      	movs	r2, #1
 8002944:	f005 fb64 	bl	8008010 <HAL_UART_Transmit>

			break;
 8002948:	e047      	b.n	80029da <DATASTREAM_Print+0x16e>

		case int_csv:

			for(int i=0; i<vargn; i++){
 800294a:	2300      	movs	r3, #0
 800294c:	647b      	str	r3, [r7, #68]	; 0x44
 800294e:	e032      	b.n	80029b6 <DATASTREAM_Print+0x14a>
				char data_buff[15];
				// Init buffer
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 8002950:	2300      	movs	r3, #0
 8002952:	643b      	str	r3, [r7, #64]	; 0x40
 8002954:	e008      	b.n	8002968 <DATASTREAM_Print+0xfc>
					data_buff[k]= '\0';
 8002956:	f107 020c 	add.w	r2, r7, #12
 800295a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800295c:	4413      	add	r3, r2
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 8002962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002964:	3301      	adds	r3, #1
 8002966:	643b      	str	r3, [r7, #64]	; 0x40
 8002968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800296a:	2b0e      	cmp	r3, #14
 800296c:	d9f3      	bls.n	8002956 <DATASTREAM_Print+0xea>

				// Float to Array!
				itostr(va_arg(vargp, int), data_buff, 0);
 800296e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002970:	1d1a      	adds	r2, r3, #4
 8002972:	63ba      	str	r2, [r7, #56]	; 0x38
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f107 010c 	add.w	r1, r7, #12
 800297a:	2200      	movs	r2, #0
 800297c:	4618      	mov	r0, r3
 800297e:	f000 f89d 	bl	8002abc <itostr>
				// Polling TX
				HAL_UART_Transmit(hstream->huart, (uint8_t *)data_buff, sizeof(data_buff), timeout);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68d8      	ldr	r0, [r3, #12]
 8002986:	f107 010c 	add.w	r1, r7, #12
 800298a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298c:	220f      	movs	r2, #15
 800298e:	f005 fb3f 	bl	8008010 <HAL_UART_Transmit>
				// Omit last comma
				if( i != vargn-1)
 8002992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002994:	3b01      	subs	r3, #1
 8002996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002998:	429a      	cmp	r2, r3
 800299a:	d009      	beq.n	80029b0 <DATASTREAM_Print+0x144>
					HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){','}), sizeof(uint8_t), timeout);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68d8      	ldr	r0, [r3, #12]
 80029a0:	232c      	movs	r3, #44	; 0x2c
 80029a2:	723b      	strb	r3, [r7, #8]
 80029a4:	f107 0108 	add.w	r1, r7, #8
 80029a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029aa:	2201      	movs	r2, #1
 80029ac:	f005 fb30 	bl	8008010 <HAL_UART_Transmit>
			for(int i=0; i<vargn; i++){
 80029b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b2:	3301      	adds	r3, #1
 80029b4:	647b      	str	r3, [r7, #68]	; 0x44
 80029b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ba:	429a      	cmp	r2, r3
 80029bc:	dbc8      	blt.n	8002950 <DATASTREAM_Print+0xe4>
			}
			// Adding a newline
			HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){'\n'}), 1, HAL_MAX_DELAY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68d8      	ldr	r0, [r3, #12]
 80029c2:	230a      	movs	r3, #10
 80029c4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80029c8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80029cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029d0:	2201      	movs	r2, #1
 80029d2:	f005 fb1d 	bl	8008010 <HAL_UART_Transmit>

			break;
 80029d6:	e000      	b.n	80029da <DATASTREAM_Print+0x16e>

		case int_binary:
			break;

		default:
			break;
 80029d8:	bf00      	nop
	}

	// DeInit variables arguments
	va_end( vargp );

}
 80029da:	bf00      	nop
 80029dc:	3750      	adds	r7, #80	; 0x50
 80029de:	46bd      	mov	sp, r7
 80029e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029e4:	b002      	add	sp, #8
 80029e6:	4770      	bx	lr

080029e8 <DATASTREAM_RxCpltCallback>:


// --- Rx Callback --- //

void DATASTREAM_RxCpltCallback(UART_HandleTypeDef *huart){
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

	// Checking which stream caused the callback, then assign true value to Rx complete flag
	for(int i=0; i<glbl_idx; i++)
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e015      	b.n	8002a22 <DATASTREAM_RxCpltCallback+0x3a>
		if(hdatastream[i]->huart == huart){
 80029f6:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <DATASTREAM_RxCpltCallback+0x58>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d108      	bne.n	8002a1c <DATASTREAM_RxCpltCallback+0x34>
			hdatastream[i]->RxCpltFlag= true;
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <DATASTREAM_RxCpltCallback+0x58>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2201      	movs	r2, #1
 8002a18:	761a      	strb	r2, [r3, #24]
			break;
 8002a1a:	e00a      	b.n	8002a32 <DATASTREAM_RxCpltCallback+0x4a>
	for(int i=0; i<glbl_idx; i++)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <DATASTREAM_RxCpltCallback+0x5c>)
 8002a24:	f993 3000 	ldrsb.w	r3, [r3]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	dbe2      	blt.n	80029f6 <DATASTREAM_RxCpltCallback+0xe>
		}

}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	200050ec 	.word	0x200050ec
 8002a44:	200000a8 	.word	0x200000a8

08002a48 <DATASTREAM_ErrorCallback>:


// --- Error callback --- //

void DATASTREAM_ErrorCallback(UART_HandleTypeDef *huart){
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	__NOP();
 8002a50:	bf00      	nop
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <reverse>:
 */

#include <my_lib/datastream_utils.h>


void reverse(char* str, int len){
 8002a5e:	b480      	push	{r7}
 8002a60:	b087      	sub	sp, #28
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8002a72:	e018      	b.n	8002aa6 <reverse+0x48>
        temp = str[i];
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	441a      	add	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	440b      	add	r3, r1
 8002a8a:	7812      	ldrb	r2, [r2, #0]
 8002a8c:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]
        i++;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	617b      	str	r3, [r7, #20]
        j--;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	dbe2      	blt.n	8002a74 <reverse+0x16>
    }
}
 8002aae:	bf00      	nop
 8002ab0:	bf00      	nop
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <itostr>:

int itostr(int x, char str[], int d){
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
    int i = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
    int neg= 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]

    if( x<0 ){
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	da23      	bge.n	8002b1e <itostr+0x62>
    	x= -x;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	425b      	negs	r3, r3
 8002ada:	60fb      	str	r3, [r7, #12]
    	neg= 1;
 8002adc:	2301      	movs	r3, #1
 8002ade:	613b      	str	r3, [r7, #16]
    }

    while( x ) {
 8002ae0:	e01d      	b.n	8002b1e <itostr+0x62>
        str[i++] = (x%10) + '0';
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <itostr+0xb4>)
 8002ae6:	fb83 1302 	smull	r1, r3, r3, r2
 8002aea:	1099      	asrs	r1, r3, #2
 8002aec:	17d3      	asrs	r3, r2, #31
 8002aee:	1ac9      	subs	r1, r1, r3
 8002af0:	460b      	mov	r3, r1
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	1ad1      	subs	r1, r2, r3
 8002afa:	b2ca      	uxtb	r2, r1
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	1c59      	adds	r1, r3, #1
 8002b00:	6179      	str	r1, [r7, #20]
 8002b02:	4619      	mov	r1, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	440b      	add	r3, r1
 8002b08:	3230      	adds	r2, #48	; 0x30
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	701a      	strb	r2, [r3, #0]
        x = x/10;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <itostr+0xb4>)
 8002b12:	fb82 1203 	smull	r1, r2, r2, r3
 8002b16:	1092      	asrs	r2, r2, #2
 8002b18:	17db      	asrs	r3, r3, #31
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	60fb      	str	r3, [r7, #12]
    while( x ) {
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1de      	bne.n	8002ae2 <itostr+0x26>
    }

    while (i < d)
 8002b24:	e007      	b.n	8002b36 <itostr+0x7a>
        str[i++] = '0';
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	617a      	str	r2, [r7, #20]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4413      	add	r3, r2
 8002b32:	2230      	movs	r2, #48	; 0x30
 8002b34:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	dbf3      	blt.n	8002b26 <itostr+0x6a>

    if(neg)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <itostr+0x98>
    	str[i++]= '-';
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	617a      	str	r2, [r7, #20]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	4413      	add	r3, r2
 8002b50:	222d      	movs	r2, #45	; 0x2d
 8002b52:	701a      	strb	r2, [r3, #0]

    reverse(str, i);
 8002b54:	6979      	ldr	r1, [r7, #20]
 8002b56:	68b8      	ldr	r0, [r7, #8]
 8002b58:	f7ff ff81 	bl	8002a5e <reverse>

    str[i] = '\0';
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	4413      	add	r3, r2
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]

    return i;
 8002b66:	697b      	ldr	r3, [r7, #20]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	66666667 	.word	0x66666667
 8002b74:	00000000 	.word	0x00000000

08002b78 <ftoa>:

void ftoa(float n, char* res, int afterpoint){
 8002b78:	b5b0      	push	{r4, r5, r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b82:	60b8      	str	r0, [r7, #8]
 8002b84:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8002b86:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b8e:	ee17 3a90 	vmov	r3, s15
 8002b92:	617b      	str	r3, [r7, #20]
    float fpart;

    int i;

    if( n < 0 )
 8002b94:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba0:	d50d      	bpl.n	8002bbe <ftoa+0x46>
    	// Extract floating part
    	fpart = -(n - (float)ipart);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	ee07 3a90 	vmov	s15, r3
 8002ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bac:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb4:	eef1 7a67 	vneg.f32	s15, s15
 8002bb8:	edc7 7a07 	vstr	s15, [r7, #28]
 8002bbc:	e00a      	b.n	8002bd4 <ftoa+0x5c>
    else
    	// Extract floating part
    	fpart = n - (float)ipart;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	ee07 3a90 	vmov	s15, r3
 8002bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd0:	edc7 7a07 	vstr	s15, [r7, #28]

    // convert integer part to string when ipart is 0
    if( n < 1 && n > 0){
 8002bd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be4:	d50c      	bpl.n	8002c00 <ftoa+0x88>
 8002be6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf2:	dd05      	ble.n	8002c00 <ftoa+0x88>
    	res[0]= '0';
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2230      	movs	r2, #48	; 0x30
 8002bf8:	701a      	strb	r2, [r3, #0]
    	i= 1;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61bb      	str	r3, [r7, #24]
 8002bfe:	e01f      	b.n	8002c40 <ftoa+0xc8>
    }
    else
    if( n < 0 && n > -1){
 8002c00:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0c:	d512      	bpl.n	8002c34 <ftoa+0xbc>
 8002c0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1e:	dd09      	ble.n	8002c34 <ftoa+0xbc>
    	res[0]= '-';
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	222d      	movs	r2, #45	; 0x2d
 8002c24:	701a      	strb	r2, [r3, #0]
    	res[1]= '0';
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	2230      	movs	r2, #48	; 0x30
 8002c2c:	701a      	strb	r2, [r3, #0]
    	i= 2;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	e005      	b.n	8002c40 <ftoa+0xc8>
    }
    else
    	// convert integer part to string
    	i = itostr(ipart, res, 0);
 8002c34:	2200      	movs	r2, #0
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	6978      	ldr	r0, [r7, #20]
 8002c3a:	f7ff ff3f 	bl	8002abc <itostr>
 8002c3e:	61b8      	str	r0, [r7, #24]

    // check for display option after point
    if (afterpoint != 0) {
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d030      	beq.n	8002ca8 <ftoa+0x130>
        res[i] = '.';
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	222e      	movs	r2, #46	; 0x2e
 8002c4e:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 8002c50:	69f8      	ldr	r0, [r7, #28]
 8002c52:	f7fd fc41 	bl	80004d8 <__aeabi_f2d>
 8002c56:	4604      	mov	r4, r0
 8002c58:	460d      	mov	r5, r1
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fd fc2a 	bl	80004b4 <__aeabi_i2d>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	ec43 2b11 	vmov	d1, r2, r3
 8002c68:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8002cb0 <ftoa+0x138>
 8002c6c:	f009 fe60 	bl	800c930 <pow>
 8002c70:	ec53 2b10 	vmov	r2, r3, d0
 8002c74:	4620      	mov	r0, r4
 8002c76:	4629      	mov	r1, r5
 8002c78:	f7fd fc86 	bl	8000588 <__aeabi_dmul>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f7fd ff78 	bl	8000b78 <__aeabi_d2f>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	61fb      	str	r3, [r7, #28]
        itostr((int)fpart, res + i + 1, afterpoint);
 8002c8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	3301      	adds	r3, #1
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	ee17 0a90 	vmov	r0, s15
 8002ca4:	f7ff ff0a 	bl	8002abc <itostr>
    }
}
 8002ca8:	bf00      	nop
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb0:	00000000 	.word	0x00000000
 8002cb4:	40240000 	.word	0x40240000

08002cb8 <DIFFDRIVE_Init>:
#endif

/* Functions Implementation */

// Initialization
void DIFFDRIVE_Init(DIFFDRIVE_HandleTypeDef* init_hdiffdrv){
 8002cb8:	b5b0      	push	{r4, r5, r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

	// Initializing global handle
	hdiffdrv= init_hdiffdrv;
 8002cc0:	4a83      	ldr	r2, [pc, #524]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6013      	str	r3, [r2, #0]

	// Assigning control struct
	DIFFDRIVE_CONTROL_TypeDef *hctrl= hdiffdrv->control;
 8002cc6:	4b82      	ldr	r3, [pc, #520]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002cce:	623b      	str	r3, [r7, #32]

	// Initializing handle structure values from Init field
	hdiffdrv->timing.htim=       		   hdiffdrv->Init.timing_htim;
 8002cd0:	4b7f      	ldr	r3, [pc, #508]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b7e      	ldr	r3, [pc, #504]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002cda:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hdiffdrv->timing.time_step=   		   hdiffdrv->Init.timing_time_step;
 8002cde:	4b7c      	ldr	r3, [pc, #496]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4b7b      	ldr	r3, [pc, #492]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ce8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	hdiffdrv->mech_prmtr.r=     		   hdiffdrv->Init.mech_prmtr_r;
 8002cec:	4b78      	ldr	r3, [pc, #480]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b77      	ldr	r3, [pc, #476]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002cf6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	hdiffdrv->mech_prmtr.l=    			   hdiffdrv->Init.mech_prmtr_l;
 8002cfa:	4b75      	ldr	r3, [pc, #468]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4b74      	ldr	r3, [pc, #464]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d04:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	hdiffdrv->mech_prmtr.max_wheel_speed=  hdiffdrv->Init.mech_prmtr_max_wheel_speed;
 8002d08:	4b71      	ldr	r3, [pc, #452]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b70      	ldr	r3, [pc, #448]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002d12:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d1c:	e273      	b.n	8003206 <DIFFDRIVE_Init+0x54e>

		// Initializing feedforward Control handle structure values from Init field
		hctrl[side].fdfrwrd.Init.arma_n_ar=  hdiffdrv->Init.control_fdfrwrd_arma_n_ar[side];
 8002d1e:	4b6c      	ldr	r3, [pc, #432]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002d20:	6819      	ldr	r1, [r3, #0]
 8002d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d26:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002d2a:	2068      	movs	r0, #104	; 0x68
 8002d2c:	fb00 f202 	mul.w	r2, r0, r2
 8002d30:	6a38      	ldr	r0, [r7, #32]
 8002d32:	4402      	add	r2, r0
 8002d34:	3334      	adds	r3, #52	; 0x34
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	440b      	add	r3, r1
 8002d3a:	889b      	ldrh	r3, [r3, #4]
 8002d3c:	8013      	strh	r3, [r2, #0]
		hctrl[side].fdfrwrd.Init.arma_n_ma=  hdiffdrv->Init.control_fdfrwrd_arma_n_ma[side];
 8002d3e:	4b64      	ldr	r3, [pc, #400]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d4a:	2068      	movs	r0, #104	; 0x68
 8002d4c:	fb00 f303 	mul.w	r3, r0, r3
 8002d50:	6a38      	ldr	r0, [r7, #32]
 8002d52:	4403      	add	r3, r0
 8002d54:	3138      	adds	r1, #56	; 0x38
 8002d56:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002d5a:	805a      	strh	r2, [r3, #2]
		hctrl[side].fdfrwrd.Init.arma_AR=    hdiffdrv->Init.control_fdfrwrd_arma_AR[side];
 8002d5c:	4b5c      	ldr	r3, [pc, #368]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d68:	2068      	movs	r0, #104	; 0x68
 8002d6a:	fb00 f303 	mul.w	r3, r0, r3
 8002d6e:	6a38      	ldr	r0, [r7, #32]
 8002d70:	4403      	add	r3, r0
 8002d72:	311e      	adds	r1, #30
 8002d74:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002d78:	609a      	str	r2, [r3, #8]
		hctrl[side].fdfrwrd.Init.arma_MA=    hdiffdrv->Init.control_fdfrwrd_arma_MA[side];
 8002d7a:	4b55      	ldr	r3, [pc, #340]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d86:	2068      	movs	r0, #104	; 0x68
 8002d88:	fb00 f303 	mul.w	r3, r0, r3
 8002d8c:	6a38      	ldr	r0, [r7, #32]
 8002d8e:	4403      	add	r3, r0
 8002d90:	3120      	adds	r1, #32
 8002d92:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002d96:	60da      	str	r2, [r3, #12]
		hctrl[side].fdfrwrd.Init.arma_tau=   hdiffdrv->Init.control_fdfrwrd_arma_tau[side];
 8002d98:	4b4d      	ldr	r3, [pc, #308]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002d9a:	6819      	ldr	r1, [r3, #0]
 8002d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002da0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002da4:	2068      	movs	r0, #104	; 0x68
 8002da6:	fb00 f202 	mul.w	r2, r0, r2
 8002daa:	6a38      	ldr	r0, [r7, #32]
 8002dac:	4402      	add	r2, r0
 8002dae:	3338      	adds	r3, #56	; 0x38
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	440b      	add	r3, r1
 8002db4:	889b      	ldrh	r3, [r3, #4]
 8002db6:	8093      	strh	r3, [r2, #4]

		// Init feedforward struct
		FEEDFORWARD_Init(&hctrl[side].fdfrwrd);
 8002db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dbc:	2268      	movs	r2, #104	; 0x68
 8002dbe:	fb02 f303 	mul.w	r3, r2, r3
 8002dc2:	6a3a      	ldr	r2, [r7, #32]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f001 ff02 	bl	8004bd0 <FEEDFORWARD_Init>

		// Initializing pid Control handle structure values from Init field
		hctrl[side].pid.Init.P=  hdiffdrv->Init.control_pid_P[side];
 8002dcc:	4b40      	ldr	r3, [pc, #256]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dd8:	2068      	movs	r0, #104	; 0x68
 8002dda:	fb00 f303 	mul.w	r3, r0, r3
 8002dde:	6a38      	ldr	r0, [r7, #32]
 8002de0:	4403      	add	r3, r0
 8002de2:	3222      	adds	r2, #34	; 0x22
 8002de4:	0092      	lsls	r2, r2, #2
 8002de6:	440a      	add	r2, r1
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	635a      	str	r2, [r3, #52]	; 0x34
		hctrl[side].pid.Init.I=  hdiffdrv->Init.control_pid_I[side];
 8002dec:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002dee:	6819      	ldr	r1, [r3, #0]
 8002df0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002df8:	2068      	movs	r0, #104	; 0x68
 8002dfa:	fb00 f303 	mul.w	r3, r0, r3
 8002dfe:	6a38      	ldr	r0, [r7, #32]
 8002e00:	4403      	add	r3, r0
 8002e02:	3224      	adds	r2, #36	; 0x24
 8002e04:	0092      	lsls	r2, r2, #2
 8002e06:	440a      	add	r2, r1
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	639a      	str	r2, [r3, #56]	; 0x38
		hctrl[side].pid.Init.D=  hdiffdrv->Init.control_pid_D[side];
 8002e0c:	4b30      	ldr	r3, [pc, #192]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002e0e:	6819      	ldr	r1, [r3, #0]
 8002e10:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e18:	2068      	movs	r0, #104	; 0x68
 8002e1a:	fb00 f303 	mul.w	r3, r0, r3
 8002e1e:	6a38      	ldr	r0, [r7, #32]
 8002e20:	4403      	add	r3, r0
 8002e22:	3226      	adds	r2, #38	; 0x26
 8002e24:	0092      	lsls	r2, r2, #2
 8002e26:	440a      	add	r2, r1
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	63da      	str	r2, [r3, #60]	; 0x3c
		hctrl[side].pid.Init.Ts= hdiffdrv->timing.time_step;
 8002e2c:	4b28      	ldr	r3, [pc, #160]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e34:	2168      	movs	r1, #104	; 0x68
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	6a39      	ldr	r1, [r7, #32]
 8002e3c:	440b      	add	r3, r1
 8002e3e:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40

		// Init feedforward struct
		PID_Init(&hctrl[side].pid);
 8002e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e48:	2268      	movs	r2, #104	; 0x68
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
 8002e4e:	6a3a      	ldr	r2, [r7, #32]
 8002e50:	4413      	add	r3, r2
 8002e52:	3334      	adds	r3, #52	; 0x34
 8002e54:	4618      	mov	r0, r3
 8002e56:	f002 f862 	bl	8004f1e <PID_Init>

		// Motors
		hdiffdrv->motor[side].supply_voltage= hdiffdrv->Init.motor_supply_voltage[side];
 8002e5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002e62:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e6a:	3208      	adds	r2, #8
 8002e6c:	0092      	lsls	r2, r2, #2
 8002e6e:	4402      	add	r2, r0
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	202c      	movs	r0, #44	; 0x2c
 8002e74:	fb00 f303 	mul.w	r3, r0, r3
 8002e78:	440b      	add	r3, r1
 8002e7a:	33c0      	adds	r3, #192	; 0xc0
 8002e7c:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].max_voltage=    hdiffdrv->Init.motor_max_voltage[side];
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002e88:	6819      	ldr	r1, [r3, #0]
 8002e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e8e:	320a      	adds	r2, #10
 8002e90:	0092      	lsls	r2, r2, #2
 8002e92:	4402      	add	r2, r0
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	202c      	movs	r0, #44	; 0x2c
 8002e98:	fb00 f303 	mul.w	r3, r0, r3
 8002e9c:	440b      	add	r3, r1
 8002e9e:	33c4      	adds	r3, #196	; 0xc4
 8002ea0:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].min_voltage=    hdiffdrv->Init.motor_min_voltage[side];
 8002ea2:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <DIFFDRIVE_Init+0x218>)
 8002eac:	6819      	ldr	r1, [r3, #0]
 8002eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eb2:	320c      	adds	r2, #12
 8002eb4:	0092      	lsls	r2, r2, #2
 8002eb6:	4402      	add	r2, r0
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	202c      	movs	r0, #44	; 0x2c
 8002ebc:	fb00 f303 	mul.w	r3, r0, r3
 8002ec0:	440b      	add	r3, r1
 8002ec2:	33c8      	adds	r3, #200	; 0xc8
 8002ec4:	601a      	str	r2, [r3, #0]

		// Starting Motor Timer
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002ecc:	e05c      	b.n	8002f88 <DIFFDRIVE_Init+0x2d0>
 8002ece:	bf00      	nop
 8002ed0:	20005280 	.word	0x20005280
			hdiffdrv->motor[side].htim[dir]= hdiffdrv->Init.motor_htim[side][dir];
 8002ed4:	4bab      	ldr	r3, [pc, #684]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 8002edc:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002ee0:	4aa8      	ldr	r2, [pc, #672]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8002ee2:	6811      	ldr	r1, [r2, #0]
 8002ee4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002ee8:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8002eec:	006d      	lsls	r5, r5, #1
 8002eee:	4428      	add	r0, r5
 8002ef0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	4423      	add	r3, r4
 8002f00:	332c      	adds	r3, #44	; 0x2c
 8002f02:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

			hdiffdrv->motor[side].pwm_channel[dir]= hdiffdrv->Init.motor_pwm_channel[side][dir];
 8002f06:	4b9f      	ldr	r3, [pc, #636]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 8002f0e:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002f12:	4a9c      	ldr	r2, [pc, #624]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8002f14:	6811      	ldr	r1, [r2, #0]
 8002f16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002f1a:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8002f1e:	006d      	lsls	r5, r5, #1
 8002f20:	4428      	add	r0, r5
 8002f22:	3004      	adds	r0, #4
 8002f24:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	4423      	add	r3, r4
 8002f34:	332e      	adds	r3, #46	; 0x2e
 8002f36:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
			HAL_TIM_PWM_Start(hdiffdrv->motor[side].htim[dir], hdiffdrv->motor[side].pwm_channel[dir]);
 8002f3a:	4b92      	ldr	r3, [pc, #584]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8002f3c:	6819      	ldr	r1, [r3, #0]
 8002f3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002f42:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	4413      	add	r3, r2
 8002f50:	4403      	add	r3, r0
 8002f52:	332c      	adds	r3, #44	; 0x2c
 8002f54:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8002f58:	4b8a      	ldr	r3, [pc, #552]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8002f5a:	6819      	ldr	r1, [r3, #0]
 8002f5c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002f60:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4413      	add	r3, r2
 8002f6e:	4403      	add	r3, r0
 8002f70:	332e      	adds	r3, #46	; 0x2e
 8002f72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f76:	4619      	mov	r1, r3
 8002f78:	4620      	mov	r0, r4
 8002f7a:	f003 fe85 	bl	8006c88 <HAL_TIM_PWM_Start>
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 8002f7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f82:	3301      	adds	r3, #1
 8002f84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002f88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d9a1      	bls.n	8002ed4 <DIFFDRIVE_Init+0x21c>
		}

	    // Computing duty beat ranges
		float supply_volt= hdiffdrv->motor[side].supply_voltage;
 8002f90:	4b7c      	ldr	r3, [pc, #496]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	33c0      	adds	r3, #192	; 0xc0
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	617b      	str	r3, [r7, #20]
		float min_volt=	   hdiffdrv->motor[side].min_voltage;
 8002fa6:	4b77      	ldr	r3, [pc, #476]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	33c8      	adds	r3, #200	; 0xc8
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	613b      	str	r3, [r7, #16]
		float max_volt=    hdiffdrv->motor[side].max_voltage;
 8002fbc:	4b71      	ldr	r3, [pc, #452]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fc4:	212c      	movs	r1, #44	; 0x2c
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	33c4      	adds	r3, #196	; 0xc4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	60fb      	str	r3, [r7, #12]

		// Forward or backward are the same in this case, I use timers with the same parameters
		hdiffdrv->motor[side].duty_beat_min= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*min_volt/supply_volt;
 8002fd2:	4b6c      	ldr	r3, [pc, #432]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	33b0      	adds	r3, #176	; 0xb0
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ff2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ff6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002ffa:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003002:	4b60      	ldr	r3, [pc, #384]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800300a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800300e:	ee17 0a90 	vmov	r0, s15
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	33cc      	adds	r3, #204	; 0xcc
 800301c:	6018      	str	r0, [r3, #0]
		hdiffdrv->motor[side].duty_beat_max= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*max_volt/supply_volt;
 800301e:	4b59      	ldr	r3, [pc, #356]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003026:	212c      	movs	r1, #44	; 0x2c
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	4413      	add	r3, r2
 800302e:	33b0      	adds	r3, #176	; 0xb0
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800303e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003042:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003046:	ed97 7a05 	vldr	s14, [r7, #20]
 800304a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800304e:	4b4d      	ldr	r3, [pc, #308]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800305a:	ee17 0a90 	vmov	r0, s15
 800305e:	212c      	movs	r1, #44	; 0x2c
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	33d0      	adds	r3, #208	; 0xd0
 8003068:	6018      	str	r0, [r3, #0]

		// Encoder Sensors
		hdiffdrv->encoder[side].htim=               hdiffdrv->Init.encoder_htim[side];
 800306a:	4b46      	ldr	r3, [pc, #280]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003072:	4a44      	ldr	r2, [pc, #272]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8003074:	6810      	ldr	r0, [r2, #0]
 8003076:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800307a:	310e      	adds	r1, #14
 800307c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003080:	4613      	mov	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4403      	add	r3, r0
 800308a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800308e:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].tim_channel=        hdiffdrv->Init.encoder_tim_channel[side];
 8003090:	4b3c      	ldr	r3, [pc, #240]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003098:	4a3a      	ldr	r2, [pc, #232]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 800309a:	6810      	ldr	r0, [r2, #0]
 800309c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030a0:	3110      	adds	r1, #16
 80030a2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4403      	add	r3, r0
 80030b0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80030b4:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].resolution=         hdiffdrv->Init.encoder_resolution[side];
 80030b6:	4b33      	ldr	r3, [pc, #204]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 80030b8:	6819      	ldr	r1, [r3, #0]
 80030ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030be:	4a31      	ldr	r2, [pc, #196]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 80030c0:	6810      	ldr	r0, [r2, #0]
 80030c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030c6:	3318      	adds	r3, #24
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	3304      	adds	r3, #4
 80030ce:	6819      	ldr	r1, [r3, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4403      	add	r3, r0
 80030da:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80030de:	6019      	str	r1, [r3, #0]

		// AutoReloadRegister bit resolution
		hdiffdrv->encoder[side].tim_arr_resolution= hdiffdrv->Init.encoder_tim_arr_resolution[side];
 80030e0:	4b28      	ldr	r3, [pc, #160]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030e8:	4a26      	ldr	r2, [pc, #152]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 80030ea:	6811      	ldr	r1, [r2, #0]
 80030ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030f0:	4403      	add	r3, r0
 80030f2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003104:	4602      	mov	r2, r0
 8003106:	701a      	strb	r2, [r3, #0]

		// Setting up encoders' timers
		__HAL_TIM_SET_PRESCALER(hdiffdrv->encoder[side].htim, 0);
 8003108:	4b1e      	ldr	r3, [pc, #120]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 800310a:	6819      	ldr	r1, [r3, #0]
 800310c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	440b      	add	r3, r1
 800311a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2200      	movs	r2, #0
 8003124:	629a      	str	r2, [r3, #40]	; 0x28

		// Set max autoreload value
		if( hdiffdrv->encoder[side].tim_arr_resolution == 32 )
 8003126:	4b17      	ldr	r3, [pc, #92]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8003128:	6819      	ldr	r1, [r3, #0]
 800312a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b20      	cmp	r3, #32
 8003140:	d122      	bne.n	8003188 <DIFFDRIVE_Init+0x4d0>
			// 32 bit case
			__HAL_TIM_SET_AUTORELOAD(hdiffdrv->encoder[side].htim,0xffffffffu);
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8003144:	6819      	ldr	r1, [r3, #0]
 8003146:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800314a:	4613      	mov	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4413      	add	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	440b      	add	r3, r1
 8003154:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003160:	62da      	str	r2, [r3, #44]	; 0x2c
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <DIFFDRIVE_Init+0x4cc>)
 8003164:	6819      	ldr	r1, [r3, #0]
 8003166:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800317e:	60da      	str	r2, [r3, #12]
 8003180:	e021      	b.n	80031c6 <DIFFDRIVE_Init+0x50e>
 8003182:	bf00      	nop
 8003184:	20005280 	.word	0x20005280
		else
			// Default 16 bit case
			__HAL_TIM_SET_AUTORELOAD(hdiffdrv->encoder[side].htim,0xffffu);
 8003188:	4bb9      	ldr	r3, [pc, #740]	; (8003470 <DIFFDRIVE_Init+0x7b8>)
 800318a:	6819      	ldr	r1, [r3, #0]
 800318c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	440b      	add	r3, r1
 800319a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80031a8:	4bb1      	ldr	r3, [pc, #708]	; (8003470 <DIFFDRIVE_Init+0x7b8>)
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80031b0:	4613      	mov	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	440b      	add	r3, r1
 80031ba:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031c4:	60da      	str	r2, [r3, #12]

		// Starting Encoder Sensors
		HAL_TIM_Encoder_Start(hdiffdrv->encoder[side].htim, hdiffdrv->encoder[side].tim_channel);
 80031c6:	4baa      	ldr	r3, [pc, #680]	; (8003470 <DIFFDRIVE_Init+0x7b8>)
 80031c8:	6819      	ldr	r1, [r3, #0]
 80031ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80031ce:	4613      	mov	r3, r2
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	4413      	add	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	440b      	add	r3, r1
 80031d8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	4ba4      	ldr	r3, [pc, #656]	; (8003470 <DIFFDRIVE_Init+0x7b8>)
 80031e0:	6819      	ldr	r1, [r3, #0]
 80031e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	440b      	add	r3, r1
 80031f0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4619      	mov	r1, r3
 80031f8:	f003 fec2 	bl	8006f80 <HAL_TIM_Encoder_Start>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80031fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003200:	3301      	adds	r3, #1
 8003202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800320a:	2b01      	cmp	r3, #1
 800320c:	f67f ad87 	bls.w	8002d1e <DIFFDRIVE_Init+0x66>

	}

	// Initialize pose
	hdiffdrv->state.pose.x_a   =  0;
 8003210:	4b97      	ldr	r3, [pc, #604]	; (8003470 <DIFFDRIVE_Init+0x7b8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	hdiffdrv->state.pose.y_a   =  0;
 800321c:	4b94      	ldr	r3, [pc, #592]	; (8003470 <DIFFDRIVE_Init+0x7b8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	hdiffdrv->state.pose.theta =  0;
 8003228:	4b91      	ldr	r3, [pc, #580]	; (8003470 <DIFFDRIVE_Init+0x7b8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	// Allocating history' arrays
	hdiffdrv->history.max_sample= hdiffdrv->Init.history_max_sample;
 8003234:	4b8e      	ldr	r3, [pc, #568]	; (8003470 <DIFFDRIVE_Init+0x7b8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800323c:	4b8c      	ldr	r3, [pc, #560]	; (8003470 <DIFFDRIVE_Init+0x7b8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248

	// Allocate all variables with zeros (calloc)
	hdiffdrv->history.state_target=  (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 8003244:	4b8a      	ldr	r3, [pc, #552]	; (8003470 <DIFFDRIVE_Init+0x7b8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 800324c:	4a88      	ldr	r2, [pc, #544]	; (8003470 <DIFFDRIVE_Init+0x7b8>)
 800324e:	6814      	ldr	r4, [r2, #0]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	4618      	mov	r0, r3
 8003254:	f009 f972 	bl	800c53c <calloc>
 8003258:	4603      	mov	r3, r0
 800325a:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
	hdiffdrv->history.state_measure= (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 800325e:	4b84      	ldr	r3, [pc, #528]	; (8003470 <DIFFDRIVE_Init+0x7b8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8003266:	4a82      	ldr	r2, [pc, #520]	; (8003470 <DIFFDRIVE_Init+0x7b8>)
 8003268:	6814      	ldr	r4, [r2, #0]
 800326a:	212c      	movs	r1, #44	; 0x2c
 800326c:	4618      	mov	r0, r3
 800326e:	f009 f965 	bl	800c53c <calloc>
 8003272:	4603      	mov	r3, r0
 8003274:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254

	// Initializing time index
	hdiffdrv->history.index= 0;
 8003278:	4b7d      	ldr	r3, [pc, #500]	; (8003470 <DIFFDRIVE_Init+0x7b8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2200      	movs	r2, #0
 800327e:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	hdiffdrv->history.sample_cnt= 0;
 8003282:	4b7b      	ldr	r3, [pc, #492]	; (8003470 <DIFFDRIVE_Init+0x7b8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2200      	movs	r2, #0
 8003288:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244


	/* Computing prescaler ad autoreload period to obtain an update event with frequency 1/timing.time_step Hertz */

	DIFFDRIVE_TIMING_TypeDef* timing= &(hdiffdrv->timing);
 800328c:	4b78      	ldr	r3, [pc, #480]	; (8003470 <DIFFDRIVE_Init+0x7b8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	33a4      	adds	r3, #164	; 0xa4
 8003292:	61fb      	str	r3, [r7, #28]

	uint16_t prescaler=  __MYLIB_GET_TIMER_CLK(timing->htim)*10/1e6 - 1;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a76      	ldr	r2, [pc, #472]	; (8003474 <DIFFDRIVE_Init+0x7bc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d017      	beq.n	80032d0 <DIFFDRIVE_Init+0x618>
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a74      	ldr	r2, [pc, #464]	; (8003478 <DIFFDRIVE_Init+0x7c0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d011      	beq.n	80032d0 <DIFFDRIVE_Init+0x618>
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a72      	ldr	r2, [pc, #456]	; (800347c <DIFFDRIVE_Init+0x7c4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00b      	beq.n	80032d0 <DIFFDRIVE_Init+0x618>
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a70      	ldr	r2, [pc, #448]	; (8003480 <DIFFDRIVE_Init+0x7c8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d005      	beq.n	80032d0 <DIFFDRIVE_Init+0x618>
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a6e      	ldr	r2, [pc, #440]	; (8003484 <DIFFDRIVE_Init+0x7cc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d11b      	bne.n	8003308 <DIFFDRIVE_Init+0x650>
 80032d0:	4b6d      	ldr	r3, [pc, #436]	; (8003488 <DIFFDRIVE_Init+0x7d0>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <DIFFDRIVE_Init+0x63a>
 80032dc:	f002 fee6 	bl	80060ac <HAL_RCC_GetPCLK2Freq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd f8d2 	bl	8000494 <__aeabi_ui2d>
 80032f0:	e025      	b.n	800333e <DIFFDRIVE_Init+0x686>
 80032f2:	f002 fedb 	bl	80060ac <HAL_RCC_GetPCLK2Freq>
 80032f6:	4602      	mov	r2, r0
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd f8c7 	bl	8000494 <__aeabi_ui2d>
 8003306:	e01a      	b.n	800333e <DIFFDRIVE_Init+0x686>
 8003308:	4b5f      	ldr	r3, [pc, #380]	; (8003488 <DIFFDRIVE_Init+0x7d0>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <DIFFDRIVE_Init+0x672>
 8003314:	f002 feb6 	bl	8006084 <HAL_RCC_GetPCLK1Freq>
 8003318:	4602      	mov	r2, r0
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd f8b6 	bl	8000494 <__aeabi_ui2d>
 8003328:	e009      	b.n	800333e <DIFFDRIVE_Init+0x686>
 800332a:	f002 feab 	bl	8006084 <HAL_RCC_GetPCLK1Freq>
 800332e:	4602      	mov	r2, r0
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f8ab 	bl	8000494 <__aeabi_ui2d>
 800333e:	a34a      	add	r3, pc, #296	; (adr r3, 8003468 <DIFFDRIVE_Init+0x7b0>)
 8003340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003344:	f7fd fa4a 	bl	80007dc <__aeabi_ddiv>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	4b4d      	ldr	r3, [pc, #308]	; (800348c <DIFFDRIVE_Init+0x7d4>)
 8003356:	f7fc ff5f 	bl	8000218 <__aeabi_dsub>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4610      	mov	r0, r2
 8003360:	4619      	mov	r1, r3
 8003362:	f7fd fbe9 	bl	8000b38 <__aeabi_d2uiz>
 8003366:	4603      	mov	r3, r0
 8003368:	837b      	strh	r3, [r7, #26]
	// Guessing is a 16bit autoreload timer to avoid troubles
	uint16_t autoreload= __MYLIB_GET_TIMER_CLK(timing->htim)/( (prescaler+1)*1/timing->time_step ) - 1;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a40      	ldr	r2, [pc, #256]	; (8003474 <DIFFDRIVE_Init+0x7bc>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d017      	beq.n	80033a6 <DIFFDRIVE_Init+0x6ee>
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a3e      	ldr	r2, [pc, #248]	; (8003478 <DIFFDRIVE_Init+0x7c0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d011      	beq.n	80033a6 <DIFFDRIVE_Init+0x6ee>
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a3c      	ldr	r2, [pc, #240]	; (800347c <DIFFDRIVE_Init+0x7c4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00b      	beq.n	80033a6 <DIFFDRIVE_Init+0x6ee>
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a3a      	ldr	r2, [pc, #232]	; (8003480 <DIFFDRIVE_Init+0x7c8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d005      	beq.n	80033a6 <DIFFDRIVE_Init+0x6ee>
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a38      	ldr	r2, [pc, #224]	; (8003484 <DIFFDRIVE_Init+0x7cc>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d115      	bne.n	80033d2 <DIFFDRIVE_Init+0x71a>
 80033a6:	4b38      	ldr	r3, [pc, #224]	; (8003488 <DIFFDRIVE_Init+0x7d0>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <DIFFDRIVE_Init+0x708>
 80033b2:	f002 fe7b 	bl	80060ac <HAL_RCC_GetPCLK2Freq>
 80033b6:	ee07 0a90 	vmov	s15, r0
 80033ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033be:	e01d      	b.n	80033fc <DIFFDRIVE_Init+0x744>
 80033c0:	f002 fe74 	bl	80060ac <HAL_RCC_GetPCLK2Freq>
 80033c4:	4603      	mov	r3, r0
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d0:	e014      	b.n	80033fc <DIFFDRIVE_Init+0x744>
 80033d2:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <DIFFDRIVE_Init+0x7d0>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <DIFFDRIVE_Init+0x734>
 80033de:	f002 fe51 	bl	8006084 <HAL_RCC_GetPCLK1Freq>
 80033e2:	ee07 0a90 	vmov	s15, r0
 80033e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ea:	e007      	b.n	80033fc <DIFFDRIVE_Init+0x744>
 80033ec:	f002 fe4a 	bl	8006084 <HAL_RCC_GetPCLK1Freq>
 80033f0:	4603      	mov	r3, r0
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	ee07 3a90 	vmov	s15, r3
 80033f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fc:	8b7b      	ldrh	r3, [r7, #26]
 80033fe:	3301      	adds	r3, #1
 8003400:	ee07 3a10 	vmov	s14, r3
 8003404:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	ed93 7a01 	vldr	s14, [r3, #4]
 800340e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003412:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003416:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800341a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800341e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003422:	ee17 3a90 	vmov	r3, s15
 8003426:	833b      	strh	r3, [r7, #24]

	// Set counter with computed prescaler and autoreload period
	__HAL_TIM_SET_PRESCALER(timing->htim, prescaler);
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	8b7a      	ldrh	r2, [r7, #26]
 8003430:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(timing->htim, autoreload);
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	8b3a      	ldrh	r2, [r7, #24]
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	8b3a      	ldrh	r2, [r7, #24]
 8003442:	60da      	str	r2, [r3, #12]

	// Assigning callback for timing purpose
	timing->htim->PeriodElapsedCallback= DIFFDRIVE_TIMING_PeriodElapsedCallback;
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a11      	ldr	r2, [pc, #68]	; (8003490 <DIFFDRIVE_Init+0x7d8>)
 800344a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifdef DIFFDRIVE_RTOS_V_
	  /* Creation of diffDrive_semaphore */
	  timing->semaphore_id = osSemaphoreNew(1, 1, &diffDrive_semaphore_attributes);
 800344e:	4a11      	ldr	r2, [pc, #68]	; (8003494 <DIFFDRIVE_Init+0x7dc>)
 8003450:	2101      	movs	r1, #1
 8003452:	2001      	movs	r0, #1
 8003454:	f005 fdc0 	bl	8008fd8 <osSemaphoreNew>
 8003458:	4602      	mov	r2, r0
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	609a      	str	r2, [r3, #8]
#else
	// Reset timing flag
	timing->flag= false;
#endif

}
 800345e:	bf00      	nop
 8003460:	3728      	adds	r7, #40	; 0x28
 8003462:	46bd      	mov	sp, r7
 8003464:	bdb0      	pop	{r4, r5, r7, pc}
 8003466:	bf00      	nop
 8003468:	00000000 	.word	0x00000000
 800346c:	412e8480 	.word	0x412e8480
 8003470:	20005280 	.word	0x20005280
 8003474:	40010000 	.word	0x40010000
 8003478:	40010400 	.word	0x40010400
 800347c:	40014000 	.word	0x40014000
 8003480:	40014400 	.word	0x40014400
 8003484:	40014800 	.word	0x40014800
 8003488:	40023800 	.word	0x40023800
 800348c:	3ff00000 	.word	0x3ff00000
 8003490:	080049f9 	.word	0x080049f9
 8003494:	0800e848 	.word	0x0800e848

08003498 <DIFFDRIVE_MOTOR_Stop>:
	osSemaphoreDelete(hdiffdrv->timing.semaphore_id);
#endif
}


void DIFFDRIVE_MOTOR_Stop(){
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0

	// Set motors to 0 volt
	DIFFDRIVE_MOTOR_SetPWMs((float[2]){0,0});
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	607b      	str	r3, [r7, #4]
 80034aa:	463b      	mov	r3, r7
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 f805 	bl	80034bc <DIFFDRIVE_MOTOR_SetPWMs>

}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <DIFFDRIVE_MOTOR_SetPWMs>:


void DIFFDRIVE_MOTOR_SetPWMs(float* input){
 80034bc:	b480      	push	{r7}
 80034be:	b089      	sub	sp, #36	; 0x24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_MOTOR_TypeDef *tmp_mtr= hdiffdrv->motor;
 80034c4:	4bb4      	ldr	r3, [pc, #720]	; (8003798 <DIFFDRIVE_MOTOR_SetPWMs+0x2dc>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	33b0      	adds	r3, #176	; 0xb0
 80034ca:	61bb      	str	r3, [r7, #24]
	float tmp_input[2];
	float supply_volt;

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80034cc:	2300      	movs	r3, #0
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	e0c8      	b.n	8003664 <DIFFDRIVE_MOTOR_SetPWMs+0x1a8>

		tmp_input[side]= input[side];
 80034d2:	7ffb      	ldrb	r3, [r7, #31]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	441a      	add	r2, r3
 80034da:	7ffb      	ldrb	r3, [r7, #31]
 80034dc:	6812      	ldr	r2, [r2, #0]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	f107 0120 	add.w	r1, r7, #32
 80034e4:	440b      	add	r3, r1
 80034e6:	3b14      	subs	r3, #20
 80034e8:	601a      	str	r2, [r3, #0]

		supply_volt= tmp_mtr[side].supply_voltage;
 80034ea:	7ffb      	ldrb	r3, [r7, #31]
 80034ec:	222c      	movs	r2, #44	; 0x2c
 80034ee:	fb02 f303 	mul.w	r3, r2, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4413      	add	r3, r2
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	617b      	str	r3, [r7, #20]

		if(tmp_input[side] > 0){
 80034fa:	7ffb      	ldrb	r3, [r7, #31]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	f107 0220 	add.w	r2, r7, #32
 8003502:	4413      	add	r3, r2
 8003504:	3b14      	subs	r3, #20
 8003506:	edd3 7a00 	vldr	s15, [r3]
 800350a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800350e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003512:	dd09      	ble.n	8003528 <DIFFDRIVE_MOTOR_SetPWMs+0x6c>
			// Set direction
			tmp_mtr[side].direction= forward;
 8003514:	7ffb      	ldrb	r3, [r7, #31]
 8003516:	222c      	movs	r2, #44	; 0x2c
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4413      	add	r3, r2
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003526:	e027      	b.n	8003578 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
		}
		else
		if(tmp_input[side] < 0){
 8003528:	7ffb      	ldrb	r3, [r7, #31]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	f107 0220 	add.w	r2, r7, #32
 8003530:	4413      	add	r3, r2
 8003532:	3b14      	subs	r3, #20
 8003534:	edd3 7a00 	vldr	s15, [r3]
 8003538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	d51a      	bpl.n	8003578 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
			// Set direction
			tmp_mtr[side].direction= backward;
 8003542:	7ffb      	ldrb	r3, [r7, #31]
 8003544:	222c      	movs	r2, #44	; 0x2c
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4413      	add	r3, r2
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			// Abs of input
			tmp_input[side]= -tmp_input[side];
 8003554:	7ffb      	ldrb	r3, [r7, #31]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	f107 0220 	add.w	r2, r7, #32
 800355c:	4413      	add	r3, r2
 800355e:	3b14      	subs	r3, #20
 8003560:	edd3 7a00 	vldr	s15, [r3]
 8003564:	7ffb      	ldrb	r3, [r7, #31]
 8003566:	eef1 7a67 	vneg.f32	s15, s15
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	f107 0220 	add.w	r2, r7, #32
 8003570:	4413      	add	r3, r2
 8003572:	3b14      	subs	r3, #20
 8003574:	edc3 7a00 	vstr	s15, [r3]
		}

		// Duty beat proportional to input voltage plus a minimum duty beat (so, if input is near zero
		// duty beat is near its minimum. DC motors need to reach a tension threshold before moving)
		// Also: forward or backward are the same in this case, I use timers with the same parameters
		tmp_mtr[side].duty_beat  = __HAL_TIM_GET_AUTORELOAD(tmp_mtr[side].htim[forward])*tmp_input[side]/supply_volt;
 8003578:	7ffb      	ldrb	r3, [r7, #31]
 800357a:	222c      	movs	r2, #44	; 0x2c
 800357c:	fb02 f303 	mul.w	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4413      	add	r3, r2
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003592:	7ffb      	ldrb	r3, [r7, #31]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	f107 0220 	add.w	r2, r7, #32
 800359a:	4413      	add	r3, r2
 800359c:	3b14      	subs	r3, #20
 800359e:	edd3 7a00 	vldr	s15, [r3]
 80035a2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80035a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80035aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ae:	7ffb      	ldrb	r3, [r7, #31]
 80035b0:	222c      	movs	r2, #44	; 0x2c
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4413      	add	r3, r2
 80035ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035be:	ee17 2a90 	vmov	r2, s15
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24
		tmp_mtr[side].duty_beat += tmp_mtr[side].duty_beat_min;
 80035c4:	7ffb      	ldrb	r3, [r7, #31]
 80035c6:	222c      	movs	r2, #44	; 0x2c
 80035c8:	fb02 f303 	mul.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4413      	add	r3, r2
 80035d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035d2:	7ffb      	ldrb	r3, [r7, #31]
 80035d4:	222c      	movs	r2, #44	; 0x2c
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4413      	add	r3, r2
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	7ffb      	ldrb	r3, [r7, #31]
 80035e2:	202c      	movs	r0, #44	; 0x2c
 80035e4:	fb00 f303 	mul.w	r3, r0, r3
 80035e8:	69b8      	ldr	r0, [r7, #24]
 80035ea:	4403      	add	r3, r0
 80035ec:	440a      	add	r2, r1
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24

		// Upper Saturation of duty cycle
		if( tmp_mtr[side].duty_beat > tmp_mtr[side].duty_beat_max )
 80035f0:	7ffb      	ldrb	r3, [r7, #31]
 80035f2:	222c      	movs	r2, #44	; 0x2c
 80035f4:	fb02 f303 	mul.w	r3, r2, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4413      	add	r3, r2
 80035fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035fe:	7ffb      	ldrb	r3, [r7, #31]
 8003600:	212c      	movs	r1, #44	; 0x2c
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	69b9      	ldr	r1, [r7, #24]
 8003608:	440b      	add	r3, r1
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	429a      	cmp	r2, r3
 800360e:	d90e      	bls.n	800362e <DIFFDRIVE_MOTOR_SetPWMs+0x172>
			tmp_mtr[side].duty_beat= tmp_mtr[side].duty_beat_max;
 8003610:	7ffb      	ldrb	r3, [r7, #31]
 8003612:	222c      	movs	r2, #44	; 0x2c
 8003614:	fb02 f303 	mul.w	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	441a      	add	r2, r3
 800361c:	7ffb      	ldrb	r3, [r7, #31]
 800361e:	212c      	movs	r1, #44	; 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	69b9      	ldr	r1, [r7, #24]
 8003626:	440b      	add	r3, r1
 8003628:	6a12      	ldr	r2, [r2, #32]
 800362a:	625a      	str	r2, [r3, #36]	; 0x24
 800362c:	e017      	b.n	800365e <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
		else
		// Lower Saturation of duty cycle. If reach lower bound, set to zero to be sure to stop motors
		if( tmp_mtr[side].duty_beat == tmp_mtr[side].duty_beat_min )
 800362e:	7ffb      	ldrb	r3, [r7, #31]
 8003630:	222c      	movs	r2, #44	; 0x2c
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4413      	add	r3, r2
 800363a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800363c:	7ffb      	ldrb	r3, [r7, #31]
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	69b9      	ldr	r1, [r7, #24]
 8003646:	440b      	add	r3, r1
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	429a      	cmp	r2, r3
 800364c:	d107      	bne.n	800365e <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
			tmp_mtr[side].duty_beat= 0;
 800364e:	7ffb      	ldrb	r3, [r7, #31]
 8003650:	222c      	movs	r2, #44	; 0x2c
 8003652:	fb02 f303 	mul.w	r3, r2, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4413      	add	r3, r2
 800365a:	2200      	movs	r2, #0
 800365c:	625a      	str	r2, [r3, #36]	; 0x24
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800365e:	7ffb      	ldrb	r3, [r7, #31]
 8003660:	3301      	adds	r3, #1
 8003662:	77fb      	strb	r3, [r7, #31]
 8003664:	7ffb      	ldrb	r3, [r7, #31]
 8003666:	2b01      	cmp	r3, #1
 8003668:	f67f af33 	bls.w	80034d2 <DIFFDRIVE_MOTOR_SetPWMs+0x16>
	}

	// Set PWM signal
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800366c:	2300      	movs	r3, #0
 800366e:	77bb      	strb	r3, [r7, #30]
 8003670:	e14f      	b.n	8003912 <DIFFDRIVE_MOTOR_SetPWMs+0x456>

		// Set opposite direction (!direction) pin to 0
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[!(tmp_mtr[side].direction)],
 8003672:	7fbb      	ldrb	r3, [r7, #30]
 8003674:	222c      	movs	r2, #44	; 0x2c
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4413      	add	r3, r2
 800367e:	7fba      	ldrb	r2, [r7, #30]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f202 	mul.w	r2, r1, r2
 8003686:	69b9      	ldr	r1, [r7, #24]
 8003688:	440a      	add	r2, r1
 800368a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800368e:	2a00      	cmp	r2, #0
 8003690:	bf0c      	ite	eq
 8003692:	2201      	moveq	r2, #1
 8003694:	2200      	movne	r2, #0
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	3202      	adds	r2, #2
 800369a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d118      	bne.n	80036d4 <DIFFDRIVE_MOTOR_SetPWMs+0x218>
 80036a2:	7fbb      	ldrb	r3, [r7, #30]
 80036a4:	222c      	movs	r2, #44	; 0x2c
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4413      	add	r3, r2
 80036ae:	7fba      	ldrb	r2, [r7, #30]
 80036b0:	212c      	movs	r1, #44	; 0x2c
 80036b2:	fb01 f202 	mul.w	r2, r1, r2
 80036b6:	69b9      	ldr	r1, [r7, #24]
 80036b8:	440a      	add	r2, r1
 80036ba:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80036be:	2a00      	cmp	r2, #0
 80036c0:	bf0c      	ite	eq
 80036c2:	2201      	moveq	r2, #1
 80036c4:	2200      	movne	r2, #0
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2200      	movs	r2, #0
 80036d0:	635a      	str	r2, [r3, #52]	; 0x34
 80036d2:	e07b      	b.n	80037cc <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 80036d4:	7fbb      	ldrb	r3, [r7, #30]
 80036d6:	222c      	movs	r2, #44	; 0x2c
 80036d8:	fb02 f303 	mul.w	r3, r2, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4413      	add	r3, r2
 80036e0:	7fba      	ldrb	r2, [r7, #30]
 80036e2:	212c      	movs	r1, #44	; 0x2c
 80036e4:	fb01 f202 	mul.w	r2, r1, r2
 80036e8:	69b9      	ldr	r1, [r7, #24]
 80036ea:	440a      	add	r2, r1
 80036ec:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80036f0:	2a00      	cmp	r2, #0
 80036f2:	bf0c      	ite	eq
 80036f4:	2201      	moveq	r2, #1
 80036f6:	2200      	movne	r2, #0
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	3202      	adds	r2, #2
 80036fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003700:	2b04      	cmp	r3, #4
 8003702:	d118      	bne.n	8003736 <DIFFDRIVE_MOTOR_SetPWMs+0x27a>
 8003704:	7fbb      	ldrb	r3, [r7, #30]
 8003706:	222c      	movs	r2, #44	; 0x2c
 8003708:	fb02 f303 	mul.w	r3, r2, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4413      	add	r3, r2
 8003710:	7fba      	ldrb	r2, [r7, #30]
 8003712:	212c      	movs	r1, #44	; 0x2c
 8003714:	fb01 f202 	mul.w	r2, r1, r2
 8003718:	69b9      	ldr	r1, [r7, #24]
 800371a:	440a      	add	r2, r1
 800371c:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003720:	2a00      	cmp	r2, #0
 8003722:	bf0c      	ite	eq
 8003724:	2201      	moveq	r2, #1
 8003726:	2200      	movne	r2, #0
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	2300      	movs	r3, #0
 8003732:	6393      	str	r3, [r2, #56]	; 0x38
 8003734:	e04a      	b.n	80037cc <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003736:	7fbb      	ldrb	r3, [r7, #30]
 8003738:	222c      	movs	r2, #44	; 0x2c
 800373a:	fb02 f303 	mul.w	r3, r2, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4413      	add	r3, r2
 8003742:	7fba      	ldrb	r2, [r7, #30]
 8003744:	212c      	movs	r1, #44	; 0x2c
 8003746:	fb01 f202 	mul.w	r2, r1, r2
 800374a:	69b9      	ldr	r1, [r7, #24]
 800374c:	440a      	add	r2, r1
 800374e:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003752:	2a00      	cmp	r2, #0
 8003754:	bf0c      	ite	eq
 8003756:	2201      	moveq	r2, #1
 8003758:	2200      	movne	r2, #0
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	3202      	adds	r2, #2
 800375e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003762:	2b08      	cmp	r3, #8
 8003764:	d11a      	bne.n	800379c <DIFFDRIVE_MOTOR_SetPWMs+0x2e0>
 8003766:	7fbb      	ldrb	r3, [r7, #30]
 8003768:	222c      	movs	r2, #44	; 0x2c
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4413      	add	r3, r2
 8003772:	7fba      	ldrb	r2, [r7, #30]
 8003774:	212c      	movs	r1, #44	; 0x2c
 8003776:	fb01 f202 	mul.w	r2, r1, r2
 800377a:	69b9      	ldr	r1, [r7, #24]
 800377c:	440a      	add	r2, r1
 800377e:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003782:	2a00      	cmp	r2, #0
 8003784:	bf0c      	ite	eq
 8003786:	2201      	moveq	r2, #1
 8003788:	2200      	movne	r2, #0
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	2300      	movs	r3, #0
 8003794:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003796:	e019      	b.n	80037cc <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003798:	20005280 	.word	0x20005280
 800379c:	7fbb      	ldrb	r3, [r7, #30]
 800379e:	222c      	movs	r2, #44	; 0x2c
 80037a0:	fb02 f303 	mul.w	r3, r2, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4413      	add	r3, r2
 80037a8:	7fba      	ldrb	r2, [r7, #30]
 80037aa:	212c      	movs	r1, #44	; 0x2c
 80037ac:	fb01 f202 	mul.w	r2, r1, r2
 80037b0:	69b9      	ldr	r1, [r7, #24]
 80037b2:	440a      	add	r2, r1
 80037b4:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80037b8:	2a00      	cmp	r2, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2201      	moveq	r2, #1
 80037be:	2200      	movne	r2, #0
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	2300      	movs	r3, #0
 80037ca:	6413      	str	r3, [r2, #64]	; 0x40
							  tmp_mtr[side].pwm_channel[!(tmp_mtr[side].direction)],
							  0  );

		// Set direction pin with the current duty cycle on PWM signal
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[(tmp_mtr[side].direction)],
 80037cc:	7fbb      	ldrb	r3, [r7, #30]
 80037ce:	222c      	movs	r2, #44	; 0x2c
 80037d0:	fb02 f303 	mul.w	r3, r2, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4413      	add	r3, r2
 80037d8:	7fba      	ldrb	r2, [r7, #30]
 80037da:	212c      	movs	r1, #44	; 0x2c
 80037dc:	fb01 f202 	mul.w	r2, r1, r2
 80037e0:	69b9      	ldr	r1, [r7, #24]
 80037e2:	440a      	add	r2, r1
 80037e4:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80037e8:	3202      	adds	r2, #2
 80037ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d119      	bne.n	8003826 <DIFFDRIVE_MOTOR_SetPWMs+0x36a>
 80037f2:	7fbb      	ldrb	r3, [r7, #30]
 80037f4:	222c      	movs	r2, #44	; 0x2c
 80037f6:	fb02 f303 	mul.w	r3, r2, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	441a      	add	r2, r3
 80037fe:	7fbb      	ldrb	r3, [r7, #30]
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	69b9      	ldr	r1, [r7, #24]
 8003808:	440b      	add	r3, r1
 800380a:	7fb9      	ldrb	r1, [r7, #30]
 800380c:	202c      	movs	r0, #44	; 0x2c
 800380e:	fb00 f101 	mul.w	r1, r0, r1
 8003812:	69b8      	ldr	r0, [r7, #24]
 8003814:	4401      	add	r1, r0
 8003816:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 800381a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003822:	635a      	str	r2, [r3, #52]	; 0x34
 8003824:	e072      	b.n	800390c <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8003826:	7fbb      	ldrb	r3, [r7, #30]
 8003828:	222c      	movs	r2, #44	; 0x2c
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4413      	add	r3, r2
 8003832:	7fba      	ldrb	r2, [r7, #30]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f202 	mul.w	r2, r1, r2
 800383a:	69b9      	ldr	r1, [r7, #24]
 800383c:	440a      	add	r2, r1
 800383e:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003842:	3202      	adds	r2, #2
 8003844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003848:	2b04      	cmp	r3, #4
 800384a:	d119      	bne.n	8003880 <DIFFDRIVE_MOTOR_SetPWMs+0x3c4>
 800384c:	7fbb      	ldrb	r3, [r7, #30]
 800384e:	222c      	movs	r2, #44	; 0x2c
 8003850:	fb02 f303 	mul.w	r3, r2, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4413      	add	r3, r2
 8003858:	7fba      	ldrb	r2, [r7, #30]
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	fb01 f202 	mul.w	r2, r1, r2
 8003860:	69b9      	ldr	r1, [r7, #24]
 8003862:	440a      	add	r2, r1
 8003864:	7fb9      	ldrb	r1, [r7, #30]
 8003866:	202c      	movs	r0, #44	; 0x2c
 8003868:	fb00 f101 	mul.w	r1, r0, r1
 800386c:	69b8      	ldr	r0, [r7, #24]
 800386e:	4401      	add	r1, r0
 8003870:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8003874:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	6393      	str	r3, [r2, #56]	; 0x38
 800387e:	e045      	b.n	800390c <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8003880:	7fbb      	ldrb	r3, [r7, #30]
 8003882:	222c      	movs	r2, #44	; 0x2c
 8003884:	fb02 f303 	mul.w	r3, r2, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4413      	add	r3, r2
 800388c:	7fba      	ldrb	r2, [r7, #30]
 800388e:	212c      	movs	r1, #44	; 0x2c
 8003890:	fb01 f202 	mul.w	r2, r1, r2
 8003894:	69b9      	ldr	r1, [r7, #24]
 8003896:	440a      	add	r2, r1
 8003898:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800389c:	3202      	adds	r2, #2
 800389e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d119      	bne.n	80038da <DIFFDRIVE_MOTOR_SetPWMs+0x41e>
 80038a6:	7fbb      	ldrb	r3, [r7, #30]
 80038a8:	222c      	movs	r2, #44	; 0x2c
 80038aa:	fb02 f303 	mul.w	r3, r2, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4413      	add	r3, r2
 80038b2:	7fba      	ldrb	r2, [r7, #30]
 80038b4:	212c      	movs	r1, #44	; 0x2c
 80038b6:	fb01 f202 	mul.w	r2, r1, r2
 80038ba:	69b9      	ldr	r1, [r7, #24]
 80038bc:	440a      	add	r2, r1
 80038be:	7fb9      	ldrb	r1, [r7, #30]
 80038c0:	202c      	movs	r0, #44	; 0x2c
 80038c2:	fb00 f101 	mul.w	r1, r0, r1
 80038c6:	69b8      	ldr	r0, [r7, #24]
 80038c8:	4401      	add	r1, r0
 80038ca:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 80038ce:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80038d8:	e018      	b.n	800390c <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 80038da:	7fbb      	ldrb	r3, [r7, #30]
 80038dc:	222c      	movs	r2, #44	; 0x2c
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4413      	add	r3, r2
 80038e6:	7fba      	ldrb	r2, [r7, #30]
 80038e8:	212c      	movs	r1, #44	; 0x2c
 80038ea:	fb01 f202 	mul.w	r2, r1, r2
 80038ee:	69b9      	ldr	r1, [r7, #24]
 80038f0:	440a      	add	r2, r1
 80038f2:	7fb9      	ldrb	r1, [r7, #30]
 80038f4:	202c      	movs	r0, #44	; 0x2c
 80038f6:	fb00 f101 	mul.w	r1, r0, r1
 80038fa:	69b8      	ldr	r0, [r7, #24]
 80038fc:	4401      	add	r1, r0
 80038fe:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8003902:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	6413      	str	r3, [r2, #64]	; 0x40
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800390c:	7fbb      	ldrb	r3, [r7, #30]
 800390e:	3301      	adds	r3, #1
 8003910:	77bb      	strb	r3, [r7, #30]
 8003912:	7fbb      	ldrb	r3, [r7, #30]
 8003914:	2b01      	cmp	r3, #1
 8003916:	f67f aeac 	bls.w	8003672 <DIFFDRIVE_MOTOR_SetPWMs+0x1b6>
							  tmp_mtr[side].pwm_channel[(tmp_mtr[side].direction)],
							  tmp_mtr[side].duty_beat  );

		}

}
 800391a:	bf00      	nop
 800391c:	bf00      	nop
 800391e:	3724      	adds	r7, #36	; 0x24
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <DIFFDRIVE_ENCODER_CaptureMeasure>:


DIFFDRIVE_StatusTypeDef DIFFDRIVE_ENCODER_CaptureMeasure(void){
 8003928:	b5b0      	push	{r4, r5, r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens=  hdiffdrv->encoder;
 800392e:	4b84      	ldr	r3, [pc, #528]	; (8003b40 <DIFFDRIVE_ENCODER_CaptureMeasure+0x218>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003936:	613b      	str	r3, [r7, #16]
	int32_t tmp_32, counter_max_32;
	int16_t tmp_16, counter_max_16;

	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003938:	2300      	movs	r3, #0
 800393a:	75fb      	strb	r3, [r7, #23]
 800393c:	e0f3      	b.n	8003b26 <DIFFDRIVE_ENCODER_CaptureMeasure+0x1fe>
		// 32 bit timer
		if( tmpsens[side].tim_arr_resolution == 32 ){
 800393e:	7dfa      	ldrb	r2, [r7, #23]
 8003940:	4613      	mov	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4413      	add	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	461a      	mov	r2, r3
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	7a1b      	ldrb	r3, [r3, #8]
 8003950:	2b20      	cmp	r3, #32
 8003952:	d170      	bne.n	8003a36 <DIFFDRIVE_ENCODER_CaptureMeasure+0x10e>
			// Counter max int32 bit value, minus a secure threshold of one encoder_resolution, i.e. one full wheel revolution
			counter_max_32= 0x7fffffff-tmpsens[side].resolution;
 8003954:	7dfa      	ldrb	r2, [r7, #23]
 8003956:	4613      	mov	r3, r2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4413      	add	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	461a      	mov	r2, r3
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4413      	add	r3, r2
 8003964:	edd3 7a03 	vldr	s15, [r3, #12]
 8003968:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8003b44 <DIFFDRIVE_ENCODER_CaptureMeasure+0x21c>
 800396c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003974:	ee17 3a90 	vmov	r3, s15
 8003978:	60bb      	str	r3, [r7, #8]

			// Saving previous value
			tmpsens[side].previous_value= tmpsens[side].current_value;
 800397a:	7dfa      	ldrb	r2, [r7, #23]
 800397c:	4613      	mov	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4413      	add	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	461a      	mov	r2, r3
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1899      	adds	r1, r3, r2
 800398a:	7dfa      	ldrb	r2, [r7, #23]
 800398c:	4613      	mov	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4413      	add	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	461a      	mov	r2, r3
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4413      	add	r3, r2
 800399a:	690a      	ldr	r2, [r1, #16]
 800399c:	615a      	str	r2, [r3, #20]

			// Updating value. The counter connected to sensor are 32 bit unsigned integer so I cast in
			// 32 bit integer (signed) to have positive and negative values.
			tmp_32= (int32_t)__HAL_TIM_GET_COUNTER(tmpsens[side].htim);
 800399e:	7dfa      	ldrb	r2, [r7, #23]
 80039a0:	4613      	mov	r3, r2
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4413      	add	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	461a      	mov	r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4413      	add	r3, r2
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	607b      	str	r3, [r7, #4]

			// If counter reached threshold value return an exception
			if( tmp_32 <= -(int32_t)counter_max_32 || tmp_32 >= (int32_t)counter_max_32  )
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	425b      	negs	r3, r3
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	dd03      	ble.n	80039c8 <DIFFDRIVE_ENCODER_CaptureMeasure+0xa0>
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	db01      	blt.n	80039cc <DIFFDRIVE_ENCODER_CaptureMeasure+0xa4>
				return DIFFDRIVE_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0b1      	b.n	8003b30 <DIFFDRIVE_ENCODER_CaptureMeasure+0x208>

			// Else convert integer in radiant
			tmpsens[side].current_value = (float)tmp_32*(2*M_PI)/tmpsens[side].resolution;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039d6:	ee17 0a90 	vmov	r0, s15
 80039da:	f7fc fd7d 	bl	80004d8 <__aeabi_f2d>
 80039de:	a356      	add	r3, pc, #344	; (adr r3, 8003b38 <DIFFDRIVE_ENCODER_CaptureMeasure+0x210>)
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	f7fc fdd0 	bl	8000588 <__aeabi_dmul>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4614      	mov	r4, r2
 80039ee:	461d      	mov	r5, r3
 80039f0:	7dfa      	ldrb	r2, [r7, #23]
 80039f2:	4613      	mov	r3, r2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4413      	add	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	461a      	mov	r2, r3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4413      	add	r3, r2
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fc fd68 	bl	80004d8 <__aeabi_f2d>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	4629      	mov	r1, r5
 8003a10:	f7fc fee4 	bl	80007dc <__aeabi_ddiv>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	7dfa      	ldrb	r2, [r7, #23]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	461a      	mov	r2, r3
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	189c      	adds	r4, r3, r2
 8003a2c:	f7fd f8a4 	bl	8000b78 <__aeabi_d2f>
 8003a30:	4603      	mov	r3, r0
 8003a32:	6123      	str	r3, [r4, #16]
 8003a34:	e074      	b.n	8003b20 <DIFFDRIVE_ENCODER_CaptureMeasure+0x1f8>
		}
		// 16 bit timer
		else{
			// Counter max int16 bit value, minus a secure threshold of one encoder_resolution, i.e. one full wheel revolution
			counter_max_16= 0x7fff-tmpsens[side].resolution;
 8003a36:	7dfa      	ldrb	r2, [r7, #23]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	4413      	add	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	461a      	mov	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4413      	add	r3, r2
 8003a46:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a4a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003b48 <DIFFDRIVE_ENCODER_CaptureMeasure+0x220>
 8003a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a56:	ee17 3a90 	vmov	r3, s15
 8003a5a:	81fb      	strh	r3, [r7, #14]

			// Saving previous value
			tmpsens[side].previous_value= tmpsens[side].current_value;
 8003a5c:	7dfa      	ldrb	r2, [r7, #23]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	4413      	add	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	461a      	mov	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1899      	adds	r1, r3, r2
 8003a6c:	7dfa      	ldrb	r2, [r7, #23]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	461a      	mov	r2, r3
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	690a      	ldr	r2, [r1, #16]
 8003a7e:	615a      	str	r2, [r3, #20]

			// Updating value. The counter connected to sensor are 16 bit unsigned integer so I cast in
			// 16 bit integer (signed) to have positive and negative values.
			tmp_16= (int16_t)__HAL_TIM_GET_COUNTER(tmpsens[side].htim);
 8003a80:	7dfa      	ldrb	r2, [r7, #23]
 8003a82:	4613      	mov	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	4413      	add	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4413      	add	r3, r2
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	81bb      	strh	r3, [r7, #12]

			// If counter reached threshold value return an exception
			if( tmp_16 <= -(int16_t)counter_max_16 || tmp_16 >= (int16_t)counter_max_16  )
 8003a98:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003a9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003aa0:	425b      	negs	r3, r3
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	dd05      	ble.n	8003ab2 <DIFFDRIVE_ENCODER_CaptureMeasure+0x18a>
 8003aa6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003aaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	db01      	blt.n	8003ab6 <DIFFDRIVE_ENCODER_CaptureMeasure+0x18e>
				return DIFFDRIVE_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e03c      	b.n	8003b30 <DIFFDRIVE_ENCODER_CaptureMeasure+0x208>

			// Else convert integer in radiant
			tmpsens[side].current_value = (float)tmp_16*(2*M_PI)/tmpsens[side].resolution;
 8003ab6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ac2:	ee17 0a90 	vmov	r0, s15
 8003ac6:	f7fc fd07 	bl	80004d8 <__aeabi_f2d>
 8003aca:	a31b      	add	r3, pc, #108	; (adr r3, 8003b38 <DIFFDRIVE_ENCODER_CaptureMeasure+0x210>)
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f7fc fd5a 	bl	8000588 <__aeabi_dmul>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4614      	mov	r4, r2
 8003ada:	461d      	mov	r5, r3
 8003adc:	7dfa      	ldrb	r2, [r7, #23]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4413      	add	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4413      	add	r3, r2
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fc fcf2 	bl	80004d8 <__aeabi_f2d>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4620      	mov	r0, r4
 8003afa:	4629      	mov	r1, r5
 8003afc:	f7fc fe6e 	bl	80007dc <__aeabi_ddiv>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	7dfa      	ldrb	r2, [r7, #23]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	4413      	add	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	461a      	mov	r2, r3
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	189c      	adds	r4, r3, r2
 8003b18:	f7fd f82e 	bl	8000b78 <__aeabi_d2f>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	6123      	str	r3, [r4, #16]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	3301      	adds	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	f67f af08 	bls.w	800393e <DIFFDRIVE_ENCODER_CaptureMeasure+0x16>
		}
	}

	return DIFFDRIVE_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bdb0      	pop	{r4, r5, r7, pc}
 8003b38:	54442d18 	.word	0x54442d18
 8003b3c:	401921fb 	.word	0x401921fb
 8003b40:	20005280 	.word	0x20005280
 8003b44:	4f000000 	.word	0x4f000000
 8003b48:	46fffe00 	.word	0x46fffe00

08003b4c <DIFFDRIVE_ENCODER_Reset>:


void DIFFDRIVE_ENCODER_Reset(void){
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens= hdiffdrv->encoder;
 8003b52:	4b16      	ldr	r3, [pc, #88]	; (8003bac <DIFFDRIVE_ENCODER_Reset+0x60>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003b5a:	603b      	str	r3, [r7, #0]

	// Reset Wheel encoders
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	71fb      	strb	r3, [r7, #7]
 8003b60:	e019      	b.n	8003b96 <DIFFDRIVE_ENCODER_Reset+0x4a>
		__HAL_TIM_SET_COUNTER(tmpsens[side].htim,0);
 8003b62:	79fa      	ldrb	r2, [r7, #7]
 8003b64:	4613      	mov	r3, r2
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	4413      	add	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	4413      	add	r3, r2
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2200      	movs	r2, #0
 8003b78:	625a      	str	r2, [r3, #36]	; 0x24
		tmpsens[side].current_value= 0;
 8003b7a:	79fa      	ldrb	r2, [r7, #7]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	4413      	add	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	461a      	mov	r2, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	611a      	str	r2, [r3, #16]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	3301      	adds	r3, #1
 8003b94:	71fb      	strb	r3, [r7, #7]
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d9e2      	bls.n	8003b62 <DIFFDRIVE_ENCODER_Reset+0x16>
	}

}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20005280 	.word	0x20005280

08003bb0 <DIFFDRIVE_HISTORY_Start>:


void DIFFDRIVE_HISTORY_Start(void){
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0

	// Enable history saving and reset time_index counter
	hdiffdrv->history.sample_cnt= 0;
 8003bb4:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <DIFFDRIVE_HISTORY_Start+0x24>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	hdiffdrv->history.Enabled= true;
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <DIFFDRIVE_HISTORY_Start+0x24>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20005280 	.word	0x20005280

08003bd8 <DIFFDRIVE_HISTORY_Resume>:


void DIFFDRIVE_HISTORY_Resume(void){
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0

	// Enable history again
	hdiffdrv->history.Enabled= true;
 8003bdc:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <DIFFDRIVE_HISTORY_Resume+0x18>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

}
 8003be6:	bf00      	nop
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	20005280 	.word	0x20005280

08003bf4 <DIFFDRIVE_HISTORY_Suspend>:
	hdiffdrv->history.Enabled= false;

}


void DIFFDRIVE_HISTORY_Suspend(void){
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0

	// Disable history saving
	hdiffdrv->history.Enabled= false;
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <DIFFDRIVE_HISTORY_Suspend+0x18>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240

}
 8003c02:	bf00      	nop
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	20005280 	.word	0x20005280

08003c10 <DIFFDRIVE_HISTORY_Update>:


/* ---- Saving only a fixed number of samples in a circular buffer, if history is enabled  ------------------- */
void DIFFDRIVE_HISTORY_Update(float v_target, float om_target){
 8003c10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c14:	b094      	sub	sp, #80	; 0x50
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	ed87 0a01 	vstr	s0, [r7, #4]
 8003c1c:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_HISTORY_TypeDef* tmphist  = &(hdiffdrv->history);
 8003c20:	4b62      	ldr	r3, [pc, #392]	; (8003dac <DIFFDRIVE_HISTORY_Update+0x19c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8003c28:	647b      	str	r3, [r7, #68]	; 0x44
	DIFFDRIVE_CONTROL_TypeDef* tmpctrl  =   hdiffdrv->control;
 8003c2a:	4b60      	ldr	r3, [pc, #384]	; (8003dac <DIFFDRIVE_HISTORY_Update+0x19c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003c32:	643b      	str	r3, [r7, #64]	; 0x40
	DIFFDRIVE_STATE_TypeDef    tmpstate =   hdiffdrv->state;
 8003c34:	4b5d      	ldr	r3, [pc, #372]	; (8003dac <DIFFDRIVE_HISTORY_Update+0x19c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f107 0408 	add.w	r4, r7, #8
 8003c3c:	f503 7502 	add.w	r5, r3, #520	; 0x208
 8003c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	float theta;

	// Sample time
	float Ts= hdiffdrv->timing.time_step;
 8003c50:	4b56      	ldr	r3, [pc, #344]	; (8003dac <DIFFDRIVE_HISTORY_Update+0x19c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c58:	63fb      	str	r3, [r7, #60]	; 0x3c


	// Current index (using operator % to enroll k between 0 and max_sample; sample_cnt, instead, is unbounded)
	uint32_t k_curr= tmphist->sample_cnt%tmphist->max_sample;
 8003c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c60:	6892      	ldr	r2, [r2, #8]
 8003c62:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c66:	fb02 f201 	mul.w	r2, r2, r1
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	63bb      	str	r3, [r7, #56]	; 0x38

	// Update index
	tmphist->index= k_curr;
 8003c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c72:	60da      	str	r2, [r3, #12]

	// Previous index
	uint32_t k_prev;
	if( tmphist->sample_cnt != 0 )
 8003c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <DIFFDRIVE_HISTORY_Update+0x82>
		k_prev= (tmphist->sample_cnt-1)%tmphist->max_sample;
 8003c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c84:	6892      	ldr	r2, [r2, #8]
 8003c86:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c8a:	fb02 f201 	mul.w	r2, r2, r1
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	64fb      	str	r3, [r7, #76]	; 0x4c

	// Update history if is enabled
	if( tmphist->Enabled ){
 8003c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8210 	beq.w	80040bc <DIFFDRIVE_HISTORY_Update+0x4ac>

		/* ------ Target history ------ */

		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003ca2:	e09a      	b.n	8003dda <DIFFDRIVE_HISTORY_Update+0x1ca>

			// Target input, without PID contribute and saturation limits
			tmphist->state_target[k_curr].input[side]= hdiffdrv->control[side].fdfrwrd.current_input;
 8003ca4:	4b41      	ldr	r3, [pc, #260]	; (8003dac <DIFFDRIVE_HISTORY_Update+0x19c>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8003cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cae:	6919      	ldr	r1, [r3, #16]
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb2:	242c      	movs	r4, #44	; 0x2c
 8003cb4:	fb04 f303 	mul.w	r3, r4, r3
 8003cb8:	4419      	add	r1, r3
 8003cba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003cbe:	2468      	movs	r4, #104	; 0x68
 8003cc0:	fb04 f202 	mul.w	r2, r4, r2
 8003cc4:	4402      	add	r2, r0
 8003cc6:	f502 72b0 	add.w	r2, r2, #352	; 0x160
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	3308      	adds	r3, #8
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	601a      	str	r2, [r3, #0]

			// Target wheel values
			tmphist->state_target[k_curr].wheel[side]= __FEEDFORWARD_GET_CURRENT_TARGET(&(tmpctrl[side].fdfrwrd));
 8003cd6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003cda:	2268      	movs	r2, #104	; 0x68
 8003cdc:	fb02 f303 	mul.w	r3, r2, r3
 8003ce0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ce2:	441a      	add	r2, r3
 8003ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce6:	6919      	ldr	r1, [r3, #16]
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	202c      	movs	r0, #44	; 0x2c
 8003cec:	fb00 f303 	mul.w	r3, r0, r3
 8003cf0:	4419      	add	r1, r3
 8003cf2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003cf6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	3304      	adds	r3, #4
 8003d00:	601a      	str	r2, [r3, #0]
			if( tmphist->sample_cnt != 0 ){
 8003d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d052      	beq.n	8003db0 <DIFFDRIVE_HISTORY_Update+0x1a0>
				// This is the law: wheel(k)= wheel(k-1) + wheel_speed(k-1)*Ts, because is a discrete time Dynamic System
				tmphist->state_target[k_prev].wheel_speed[side]=  ( tmphist->state_target[k_curr].wheel[side]
 8003d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	212c      	movs	r1, #44	; 0x2c
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	441a      	add	r2, r3
 8003d18:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	3304      	adds	r3, #4
 8003d24:	ed93 7a00 	vldr	s14, [r3]
												                   -tmphist->state_target[k_prev].wheel[side])*Ts;
 8003d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d2e:	212c      	movs	r1, #44	; 0x2c
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	441a      	add	r2, r3
 8003d36:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	3304      	adds	r3, #4
 8003d42:	edd3 7a00 	vldr	s15, [r3]
 8003d46:	ee37 7a67 	vsub.f32	s14, s14, s15
				tmphist->state_target[k_prev].wheel_speed[side]=  ( tmphist->state_target[k_curr].wheel[side]
 8003d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d50:	212c      	movs	r1, #44	; 0x2c
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	441a      	add	r2, r3
 8003d58:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
												                   -tmphist->state_target[k_prev].wheel[side])*Ts;
 8003d5c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003d60:	ee67 7a27 	vmul.f32	s15, s14, s15
				tmphist->state_target[k_prev].wheel_speed[side]=  ( tmphist->state_target[k_curr].wheel[side]
 8003d64:	3306      	adds	r3, #6
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	edc3 7a00 	vstr	s15, [r3]
				// To have continuity I set also the current variable at same value. Next step it will be update
				tmphist->state_target[k_curr].wheel_speed[side]= tmphist->state_target[k_prev].wheel_speed[side];
 8003d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d76:	212c      	movs	r1, #44	; 0x2c
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	18d0      	adds	r0, r2, r3
 8003d7e:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8003d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d84:	6919      	ldr	r1, [r3, #16]
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	242c      	movs	r4, #44	; 0x2c
 8003d8a:	fb04 f303 	mul.w	r3, r4, r3
 8003d8e:	4419      	add	r1, r3
 8003d90:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003d94:	3206      	adds	r2, #6
 8003d96:	0092      	lsls	r2, r2, #2
 8003d98:	4402      	add	r2, r0
 8003d9a:	3204      	adds	r2, #4
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	3306      	adds	r3, #6
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	3304      	adds	r3, #4
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	e012      	b.n	8003dd0 <DIFFDRIVE_HISTORY_Update+0x1c0>
 8003daa:	bf00      	nop
 8003dac:	20005280 	.word	0x20005280
			}
			else
				tmphist->state_target[k_curr].wheel_speed[side]= 0;
 8003db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	212c      	movs	r1, #44	; 0x2c
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	441a      	add	r2, r3
 8003dbe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003dc2:	3306      	adds	r3, #6
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3304      	adds	r3, #4
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003dd0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8003dda:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	f67f af60 	bls.w	8003ca4 <DIFFDRIVE_HISTORY_Update+0x94>
		}

		// Compute current target pose
		if( tmphist->sample_cnt != 0 ){
 8003de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80c2 	beq.w	8003f72 <DIFFDRIVE_HISTORY_Update+0x362>
			theta= tmphist->state_target[k_prev].pose.theta;
 8003dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df4:	212c      	movs	r1, #44	; 0x2c
 8003df6:	fb01 f303 	mul.w	r3, r1, r3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	637b      	str	r3, [r7, #52]	; 0x34
			tmphist->state_target[k_curr].pose.x_a   =  tmphist->state_target[k_prev].pose.x_a   + v_target*Ts*cos(theta);
 8003e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e06:	212c      	movs	r1, #44	; 0x2c
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fc fb61 	bl	80004d8 <__aeabi_f2d>
 8003e16:	4604      	mov	r4, r0
 8003e18:	460d      	mov	r5, r1
 8003e1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e1e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e26:	ee17 0a90 	vmov	r0, s15
 8003e2a:	f7fc fb55 	bl	80004d8 <__aeabi_f2d>
 8003e2e:	4680      	mov	r8, r0
 8003e30:	4689      	mov	r9, r1
 8003e32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e34:	f7fc fb50 	bl	80004d8 <__aeabi_f2d>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	ec43 2b10 	vmov	d0, r2, r3
 8003e40:	f008 fcd2 	bl	800c7e8 <cos>
 8003e44:	ec53 2b10 	vmov	r2, r3, d0
 8003e48:	4640      	mov	r0, r8
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	f7fc fb9c 	bl	8000588 <__aeabi_dmul>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4620      	mov	r0, r4
 8003e56:	4629      	mov	r1, r5
 8003e58:	f7fc f9e0 	bl	800021c <__adddf3>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4610      	mov	r0, r2
 8003e62:	4619      	mov	r1, r3
 8003e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6a:	242c      	movs	r4, #44	; 0x2c
 8003e6c:	fb04 f303 	mul.w	r3, r4, r3
 8003e70:	18d4      	adds	r4, r2, r3
 8003e72:	f7fc fe81 	bl	8000b78 <__aeabi_d2f>
 8003e76:	4603      	mov	r3, r0
 8003e78:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k_curr].pose.y_a   =  tmphist->state_target[k_prev].pose.y_a   + v_target*Ts*sin(theta);
 8003e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e80:	212c      	movs	r1, #44	; 0x2c
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fc fb24 	bl	80004d8 <__aeabi_f2d>
 8003e90:	4604      	mov	r4, r0
 8003e92:	460d      	mov	r5, r1
 8003e94:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e98:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea0:	ee17 0a90 	vmov	r0, s15
 8003ea4:	f7fc fb18 	bl	80004d8 <__aeabi_f2d>
 8003ea8:	4680      	mov	r8, r0
 8003eaa:	4689      	mov	r9, r1
 8003eac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003eae:	f7fc fb13 	bl	80004d8 <__aeabi_f2d>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	ec43 2b10 	vmov	d0, r2, r3
 8003eba:	f008 fce5 	bl	800c888 <sin>
 8003ebe:	ec53 2b10 	vmov	r2, r3, d0
 8003ec2:	4640      	mov	r0, r8
 8003ec4:	4649      	mov	r1, r9
 8003ec6:	f7fc fb5f 	bl	8000588 <__aeabi_dmul>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4620      	mov	r0, r4
 8003ed0:	4629      	mov	r1, r5
 8003ed2:	f7fc f9a3 	bl	800021c <__adddf3>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	242c      	movs	r4, #44	; 0x2c
 8003ee6:	fb04 f303 	mul.w	r3, r4, r3
 8003eea:	18d4      	adds	r4, r2, r3
 8003eec:	f7fc fe44 	bl	8000b78 <__aeabi_d2f>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k_curr].pose.theta =  tmphist->state_target[k_prev].pose.theta + om_target*Ts;
 8003ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efa:	212c      	movs	r1, #44	; 0x2c
 8003efc:	fb01 f303 	mul.w	r3, r1, r3
 8003f00:	4413      	add	r3, r2
 8003f02:	ed93 7a02 	vldr	s14, [r3, #8]
 8003f06:	edd7 6a00 	vldr	s13, [r7]
 8003f0a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	212c      	movs	r1, #44	; 0x2c
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f24:	edc3 7a02 	vstr	s15, [r3, #8]
			// The law is: pose(k)= pose(k-1) + TrajSpeed(k-1)*Ts, because is a discrete time Dynamic System
			// so here I update previous speed
			tmphist->state_target[k_prev].pose.v= v_target;
 8003f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2e:	212c      	movs	r1, #44	; 0x2c
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	60da      	str	r2, [r3, #12]
			tmphist->state_target[k_prev].pose.om= om_target;
 8003f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f40:	212c      	movs	r1, #44	; 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	611a      	str	r2, [r3, #16]
			// To have continuity I set also the current variable at same value. Next step it will be update
			tmphist->state_target[k_curr].pose.v= v_target;
 8003f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f52:	212c      	movs	r1, #44	; 0x2c
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	4413      	add	r3, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	60da      	str	r2, [r3, #12]
			tmphist->state_target[k_curr].pose.om= om_target;
 8003f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f64:	212c      	movs	r1, #44	; 0x2c
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	611a      	str	r2, [r3, #16]
 8003f70:	e065      	b.n	800403e <DIFFDRIVE_HISTORY_Update+0x42e>
		}else{
			theta= 0;
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	637b      	str	r3, [r7, #52]	; 0x34
			tmphist->state_target[k_curr].pose.x_a   =  v_target*Ts*cos(theta);
 8003f78:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f7c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f84:	ee17 0a90 	vmov	r0, s15
 8003f88:	f7fc faa6 	bl	80004d8 <__aeabi_f2d>
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	460d      	mov	r5, r1
 8003f90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f92:	f7fc faa1 	bl	80004d8 <__aeabi_f2d>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	ec43 2b10 	vmov	d0, r2, r3
 8003f9e:	f008 fc23 	bl	800c7e8 <cos>
 8003fa2:	ec53 2b10 	vmov	r2, r3, d0
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	4629      	mov	r1, r5
 8003faa:	f7fc faed 	bl	8000588 <__aeabi_dmul>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	242c      	movs	r4, #44	; 0x2c
 8003fbe:	fb04 f303 	mul.w	r3, r4, r3
 8003fc2:	18d4      	adds	r4, r2, r3
 8003fc4:	f7fc fdd8 	bl	8000b78 <__aeabi_d2f>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k_curr].pose.y_a   =  v_target*Ts*sin(theta);
 8003fcc:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fd0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd8:	ee17 0a90 	vmov	r0, s15
 8003fdc:	f7fc fa7c 	bl	80004d8 <__aeabi_f2d>
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	460d      	mov	r5, r1
 8003fe4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003fe6:	f7fc fa77 	bl	80004d8 <__aeabi_f2d>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	ec43 2b10 	vmov	d0, r2, r3
 8003ff2:	f008 fc49 	bl	800c888 <sin>
 8003ff6:	ec53 2b10 	vmov	r2, r3, d0
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	f7fc fac3 	bl	8000588 <__aeabi_dmul>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4610      	mov	r0, r2
 8004008:	4619      	mov	r1, r3
 800400a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004010:	242c      	movs	r4, #44	; 0x2c
 8004012:	fb04 f303 	mul.w	r3, r4, r3
 8004016:	18d4      	adds	r4, r2, r3
 8004018:	f7fc fdae 	bl	8000b78 <__aeabi_d2f>
 800401c:	4603      	mov	r3, r0
 800401e:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k_curr].pose.theta =  om_target*Ts;
 8004020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	212c      	movs	r1, #44	; 0x2c
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	4413      	add	r3, r2
 800402e:	ed97 7a00 	vldr	s14, [r7]
 8004032:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403a:	edc3 7a02 	vstr	s15, [r3, #8]
		}

		/* ------ State history ------ */

		// State measure, extracted from state register
		tmphist->state_measure[k_curr]= tmpstate;
 800403e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	212c      	movs	r1, #44	; 0x2c
 8004046:	fb01 f303 	mul.w	r3, r1, r3
 800404a:	4413      	add	r3, r2
 800404c:	461d      	mov	r5, r3
 800404e:	f107 0408 	add.w	r4, r7, #8
 8004052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800405a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800405e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		// Assigning PREVIOUS speed, because the law is:
		// wheel(k)= wheel(k-1) + wheel_speed(k-1)*Ts, because is a discrete time Dynamic System
		if( tmphist->sample_cnt != 0 ){
 8004062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d023      	beq.n	80040b2 <DIFFDRIVE_HISTORY_Update+0x4a2>
			tmphist->state_measure[k_prev].wheel_speed[left ]= tmpstate.wheel_speed[left ];
 800406a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004070:	212c      	movs	r1, #44	; 0x2c
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	4413      	add	r3, r2
 8004078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407a:	61da      	str	r2, [r3, #28]
			tmphist->state_measure[k_prev].wheel_speed[right]= tmpstate.wheel_speed[right];
 800407c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004082:	212c      	movs	r1, #44	; 0x2c
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800408c:	621a      	str	r2, [r3, #32]
			// Same for trajectory speed
			tmphist->state_measure[k_prev].pose.v=  tmpstate.pose.v;
 800408e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004090:	695a      	ldr	r2, [r3, #20]
 8004092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004094:	212c      	movs	r1, #44	; 0x2c
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	4413      	add	r3, r2
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	60da      	str	r2, [r3, #12]
			tmphist->state_measure[k_prev].pose.om= tmpstate.pose.om;
 80040a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a2:	695a      	ldr	r2, [r3, #20]
 80040a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a6:	212c      	movs	r1, #44	; 0x2c
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	611a      	str	r2, [r3, #16]

		}

		/* Increment sample counter */
		tmphist->sample_cnt++;
 80040b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ba:	605a      	str	r2, [r3, #4]
	}
}
 80040bc:	bf00      	nop
 80040be:	3750      	adds	r7, #80	; 0x50
 80040c0:	46bd      	mov	sp, r7
 80040c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040c6:	bf00      	nop

080040c8 <DIFFDRIVE_HISTORY_Get_Init>:


/* ---- Init time index to properly read the history circular buffer ----- */
void DIFFDRIVE_HISTORY_Get_Init(void){
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0

	// Disabling history recording
	DIFFDRIVE_HISTORY_Suspend();
 80040ce:	f7ff fd91 	bl	8003bf4 <DIFFDRIVE_HISTORY_Suspend>

	DIFFDRIVE_HISTORY_TypeDef* tmphist= &(hdiffdrv->history);
 80040d2:	4b10      	ldr	r3, [pc, #64]	; (8004114 <DIFFDRIVE_HISTORY_Get_Init+0x4c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80040da:	607b      	str	r3, [r7, #4]

	// Initialize current time index to start read from oldest saved values
	if( tmphist->sample_cnt >= tmphist->max_sample )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d30e      	bcc.n	8004106 <DIFFDRIVE_HISTORY_Get_Init+0x3e>
		tmphist->index= (tmphist->sample_cnt-tmphist->max_sample)%tmphist->max_sample;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6892      	ldr	r2, [r2, #8]
 80040f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80040fa:	fb02 f201 	mul.w	r2, r2, r1
 80040fe:	1a9a      	subs	r2, r3, r2
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]
	else
		tmphist->index= 0;
}
 8004104:	e002      	b.n	800410c <DIFFDRIVE_HISTORY_Get_Init+0x44>
		tmphist->index= 0;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	60da      	str	r2, [r3, #12]
}
 800410c:	bf00      	nop
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20005280 	.word	0x20005280

08004118 <DIFFDRIVE_HISTORY_Get_Sample>:


/* --- Read state sample from History --- */
void DIFFDRIVE_HISTORY_Get_Sample(DIFFDRIVE_STATE_TypeDef* state_measure, DIFFDRIVE_STATE_TypeDef* state_target){
 8004118:	b4b0      	push	{r4, r5, r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]

	DIFFDRIVE_HISTORY_TypeDef* tmphist= &(hdiffdrv->history);
 8004122:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <DIFFDRIVE_HISTORY_Get_Sample+0xb4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800412a:	60fb      	str	r3, [r7, #12]

	if( state_measure != NULL )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d012      	beq.n	8004158 <DIFFDRIVE_HISTORY_Get_Sample+0x40>
		*state_measure= tmphist->state_measure[tmphist->index];
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	212c      	movs	r1, #44	; 0x2c
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	4413      	add	r3, r2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	4614      	mov	r4, r2
 8004146:	461d      	mov	r5, r3
 8004148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800414a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800414c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800414e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004150:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004154:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if( state_target != NULL )
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d012      	beq.n	8004184 <DIFFDRIVE_HISTORY_Get_Sample+0x6c>
		*state_target = tmphist->state_target[tmphist->index];
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	212c      	movs	r1, #44	; 0x2c
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	4413      	add	r3, r2
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	4614      	mov	r4, r2
 8004172:	461d      	mov	r5, r3
 8004174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800417c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004180:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// If history is disabled (it means that I read history after the movement happened) update index.
	// Otherwise just read current sample.
	if( !(tmphist->Enabled) ){
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	f083 0301 	eor.w	r3, r3, #1
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d017      	beq.n	80041c2 <DIFFDRIVE_HISTORY_Get_Sample+0xaa>
 		// Update index for next step reading
		if( tmphist->sample_cnt >= tmphist->max_sample )
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	429a      	cmp	r2, r3
 800419c:	d30c      	bcc.n	80041b8 <DIFFDRIVE_HISTORY_Get_Sample+0xa0>
			tmphist->index= (tmphist->index+1)%tmphist->max_sample;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	3301      	adds	r3, #1
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	6892      	ldr	r2, [r2, #8]
 80041a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80041ac:	fb02 f201 	mul.w	r2, r2, r1
 80041b0:	1a9a      	subs	r2, r3, r2
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	60da      	str	r2, [r3, #12]
		else
			tmphist->index++;
	}
}
 80041b6:	e004      	b.n	80041c2 <DIFFDRIVE_HISTORY_Get_Sample+0xaa>
			tmphist->index++;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	60da      	str	r2, [r3, #12]
}
 80041c2:	bf00      	nop
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bcb0      	pop	{r4, r5, r7}
 80041ca:	4770      	bx	lr
 80041cc:	20005280 	.word	0x20005280

080041d0 <DIFFDRIVE_CONTROL_Start>:


void DIFFDRIVE_CONTROL_Start(void){
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0

	// Reset Encoders
	DIFFDRIVE_ENCODER_Reset();
 80041d4:	f7ff fcba 	bl	8003b4c <DIFFDRIVE_ENCODER_Reset>

	// Reset Control
	DIFFDRIVE_CONTROL_Reset();
 80041d8:	f000 f81a 	bl	8004210 <DIFFDRIVE_CONTROL_Reset>

	// Starting and enabling history
	DIFFDRIVE_HISTORY_Start();
 80041dc:	f7ff fce8 	bl	8003bb0 <DIFFDRIVE_HISTORY_Start>

	// Start control timing
	DIFFDRIVE_TIMING_Start();
 80041e0:	f000 f8b4 	bl	800434c <DIFFDRIVE_TIMING_Start>

}
 80041e4:	bf00      	nop
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <DIFFDRIVE_CONTROL_Resume>:

void DIFFDRIVE_CONTROL_Resume(void){
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0

	// Reset Control
	DIFFDRIVE_CONTROL_Reset();
 80041ec:	f000 f810 	bl	8004210 <DIFFDRIVE_CONTROL_Reset>

	// Enabling again history
	DIFFDRIVE_HISTORY_Resume();
 80041f0:	f7ff fcf2 	bl	8003bd8 <DIFFDRIVE_HISTORY_Resume>

	// Restart control timing
	DIFFDRIVE_TIMING_Start();
 80041f4:	f000 f8aa 	bl	800434c <DIFFDRIVE_TIMING_Start>

}
 80041f8:	bf00      	nop
 80041fa:	bd80      	pop	{r7, pc}

080041fc <DIFFDRIVE_CONTROL_Suspend>:
	// Set motor to 0 volt
	DIFFDRIVE_MOTOR_Stop();

}

void DIFFDRIVE_CONTROL_Suspend(void){
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0

	// Disabling history
	DIFFDRIVE_HISTORY_Suspend();
 8004200:	f7ff fcf8 	bl	8003bf4 <DIFFDRIVE_HISTORY_Suspend>

	// Stop timing, control finished
	DIFFDRIVE_TIMING_Stop();
 8004204:	f000 f8bc 	bl	8004380 <DIFFDRIVE_TIMING_Stop>

	// Set motor to 0 volt
	DIFFDRIVE_MOTOR_Stop();
 8004208:	f7ff f946 	bl	8003498 <DIFFDRIVE_MOTOR_Stop>

}
 800420c:	bf00      	nop
 800420e:	bd80      	pop	{r7, pc}

08004210 <DIFFDRIVE_CONTROL_Reset>:


void DIFFDRIVE_CONTROL_Reset(void){
 8004210:	b590      	push	{r4, r7, lr}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0

	DIFFDRIVE_CONTROL_TypeDef* hctrl=    hdiffdrv->control;
 8004216:	4b4c      	ldr	r3, [pc, #304]	; (8004348 <DIFFDRIVE_CONTROL_Reset+0x138>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800421e:	613b      	str	r3, [r7, #16]
	DIFFDRIVE_HISTORY_TypeDef* tmphist= &hdiffdrv->history;
 8004220:	4b49      	ldr	r3, [pc, #292]	; (8004348 <DIFFDRIVE_CONTROL_Reset+0x138>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004228:	60fb      	str	r3, [r7, #12]

	// Capture current wheel measure
	DIFFDRIVE_ENCODER_CaptureMeasure();
 800422a:	f7ff fb7d 	bl	8003928 <DIFFDRIVE_ENCODER_CaptureMeasure>

	// Update diffDrive state (input is {0,0} because at restart i guess input voltage is zero)
	DIFFDRIVE_STATE_Update((float[2]){0,0});
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	607b      	str	r3, [r7, #4]
 800423a:	463b      	mov	r3, r7
 800423c:	4618      	mov	r0, r3
 800423e:	f000 f8e5 	bl	800440c <DIFFDRIVE_STATE_Update>

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004242:	2300      	movs	r3, #0
 8004244:	75fb      	strb	r3, [r7, #23]
 8004246:	e021      	b.n	800428c <DIFFDRIVE_CONTROL_Reset+0x7c>

		// Reset feed-forward buffer with initial values the same with measured ones
		FEEDFORWARD_Reset(&hctrl[side].fdfrwrd, hdiffdrv->state.wheel[side]);
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	2268      	movs	r2, #104	; 0x68
 800424c:	fb02 f303 	mul.w	r3, r2, r3
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4413      	add	r3, r2
 8004254:	4619      	mov	r1, r3
 8004256:	4b3c      	ldr	r3, [pc, #240]	; (8004348 <DIFFDRIVE_CONTROL_Reset+0x138>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	3386      	adds	r3, #134	; 0x86
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	3304      	adds	r3, #4
 8004264:	edd3 7a00 	vldr	s15, [r3]
 8004268:	eeb0 0a67 	vmov.f32	s0, s15
 800426c:	4608      	mov	r0, r1
 800426e:	f000 fd1b 	bl	8004ca8 <FEEDFORWARD_Reset>
		// Reset PID
		PID_Reset(&hctrl[side].pid);
 8004272:	7dfb      	ldrb	r3, [r7, #23]
 8004274:	2268      	movs	r2, #104	; 0x68
 8004276:	fb02 f303 	mul.w	r3, r2, r3
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4413      	add	r3, r2
 800427e:	3334      	adds	r3, #52	; 0x34
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fe7a 	bl	8004f7a <PID_Reset>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004286:	7dfb      	ldrb	r3, [r7, #23]
 8004288:	3301      	adds	r3, #1
 800428a:	75fb      	strb	r3, [r7, #23]
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d9da      	bls.n	8004248 <DIFFDRIVE_CONTROL_Reset+0x38>
	}

	// If a reset occurred let converge pose target and pose measure. Because it's like that control start again
	// from a new initial point.
	uint32_t k_curr= tmphist->index;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	60bb      	str	r3, [r7, #8]
	for(DIFFDRIVE_Wheel_Enum side=left; side <= right; side++)
 8004298:	2300      	movs	r3, #0
 800429a:	75bb      	strb	r3, [r7, #22]
 800429c:	e01c      	b.n	80042d8 <DIFFDRIVE_CONTROL_Reset+0xc8>
		tmphist->state_target[k_curr].wheel[side]= tmphist->state_measure[k_curr].wheel[side];
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	212c      	movs	r1, #44	; 0x2c
 80042a6:	fb01 f303 	mul.w	r3, r1, r3
 80042aa:	18d0      	adds	r0, r2, r3
 80042ac:	7dba      	ldrb	r2, [r7, #22]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6919      	ldr	r1, [r3, #16]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	242c      	movs	r4, #44	; 0x2c
 80042b6:	fb04 f303 	mul.w	r3, r4, r3
 80042ba:	4419      	add	r1, r3
 80042bc:	7dbb      	ldrb	r3, [r7, #22]
 80042be:	3204      	adds	r2, #4
 80042c0:	0092      	lsls	r2, r2, #2
 80042c2:	4402      	add	r2, r0
 80042c4:	3204      	adds	r2, #4
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	3304      	adds	r3, #4
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	3304      	adds	r3, #4
 80042d0:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side <= right; side++)
 80042d2:	7dbb      	ldrb	r3, [r7, #22]
 80042d4:	3301      	adds	r3, #1
 80042d6:	75bb      	strb	r3, [r7, #22]
 80042d8:	7dbb      	ldrb	r3, [r7, #22]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d9df      	bls.n	800429e <DIFFDRIVE_CONTROL_Reset+0x8e>
	tmphist->state_target[k_curr].pose.theta= tmphist->state_measure[k_curr].pose.theta;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	695a      	ldr	r2, [r3, #20]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	212c      	movs	r1, #44	; 0x2c
 80042e6:	fb01 f303 	mul.w	r3, r1, r3
 80042ea:	441a      	add	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6919      	ldr	r1, [r3, #16]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	202c      	movs	r0, #44	; 0x2c
 80042f4:	fb00 f303 	mul.w	r3, r0, r3
 80042f8:	440b      	add	r3, r1
 80042fa:	6892      	ldr	r2, [r2, #8]
 80042fc:	609a      	str	r2, [r3, #8]
	tmphist->state_target[k_curr].pose.x_a=   tmphist->state_measure[k_curr].pose.x_a;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	695a      	ldr	r2, [r3, #20]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	212c      	movs	r1, #44	; 0x2c
 8004306:	fb01 f303 	mul.w	r3, r1, r3
 800430a:	441a      	add	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6919      	ldr	r1, [r3, #16]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	202c      	movs	r0, #44	; 0x2c
 8004314:	fb00 f303 	mul.w	r3, r0, r3
 8004318:	440b      	add	r3, r1
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	601a      	str	r2, [r3, #0]
	tmphist->state_target[k_curr].pose.y_a=   tmphist->state_measure[k_curr].pose.y_a;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	212c      	movs	r1, #44	; 0x2c
 8004326:	fb01 f303 	mul.w	r3, r1, r3
 800432a:	441a      	add	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6919      	ldr	r1, [r3, #16]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	202c      	movs	r0, #44	; 0x2c
 8004334:	fb00 f303 	mul.w	r3, r0, r3
 8004338:	440b      	add	r3, r1
 800433a:	6852      	ldr	r2, [r2, #4]
 800433c:	605a      	str	r2, [r3, #4]

}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	bd90      	pop	{r4, r7, pc}
 8004346:	bf00      	nop
 8004348:	20005280 	.word	0x20005280

0800434c <DIFFDRIVE_TIMING_Start>:


void DIFFDRIVE_TIMING_Start(void){
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0

#ifdef DIFFDRIVE_RTOS_V_
	// At starting take the only one available token
	osStatus_t stat= osSemaphoreAcquire(hdiffdrv->timing.semaphore_id, 0);
 8004352:	4b0a      	ldr	r3, [pc, #40]	; (800437c <DIFFDRIVE_TIMING_Start+0x30>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800435a:	2100      	movs	r1, #0
 800435c:	4618      	mov	r0, r3
 800435e:	f004 fec5 	bl	80090ec <osSemaphoreAcquire>
 8004362:	6078      	str	r0, [r7, #4]
	(void)stat;
#endif
	// Starting timer in interrupt mode for control law timing
	HAL_TIM_Base_Start_IT(hdiffdrv->timing.htim);
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <DIFFDRIVE_TIMING_Start+0x30>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800436c:	4618      	mov	r0, r3
 800436e:	f002 fb8f 	bl	8006a90 <HAL_TIM_Base_Start_IT>

}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20005280 	.word	0x20005280

08004380 <DIFFDRIVE_TIMING_Stop>:


void DIFFDRIVE_TIMING_Stop(void){
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0

	// Stop timer in interrupt mode
	HAL_TIM_Base_Stop_IT(hdiffdrv->timing.htim);
 8004384:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <DIFFDRIVE_TIMING_Stop+0x24>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800438c:	4618      	mov	r0, r3
 800438e:	f002 fbef 	bl	8006b70 <HAL_TIM_Base_Stop_IT>

#ifdef DIFFDRIVE_RTOS_V_
	// Try to release a token when timing is being stopped (if the token was already released, by callback, it doesn't mind)
	osSemaphoreRelease(hdiffdrv->timing.semaphore_id);
 8004392:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <DIFFDRIVE_TIMING_Stop+0x24>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800439a:	4618      	mov	r0, r3
 800439c:	f004 fef8 	bl	8009190 <osSemaphoreRelease>
#endif

}
 80043a0:	bf00      	nop
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20005280 	.word	0x20005280

080043a8 <DIFFDRIVE_TIMING_Wait>:
#ifdef DIFFDRIVE_DEBUG_TIMING_
	// Variable used to check system timing
	uint32_t tic=0, toc[100], i_=0;
#endif

void DIFFDRIVE_TIMING_Wait(void){
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0

#ifdef DIFFDRIVE_RTOS_V_

	// Wait for an available token (TIMING_Callback function will release the only token when invoked by ISR)
	osStatus_t stat= osSemaphoreAcquire(hdiffdrv->timing.semaphore_id, osWaitForever);
 80043ae:	4b13      	ldr	r3, [pc, #76]	; (80043fc <DIFFDRIVE_TIMING_Wait+0x54>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043ba:	4618      	mov	r0, r3
 80043bc:	f004 fe96 	bl	80090ec <osSemaphoreAcquire>
 80043c0:	6078      	str	r0, [r7, #4]
	(void)stat;

#ifdef DIFFDRIVE_DEBUG_TIMING_

			// Check if control timing is really working
			if( i_ < sizeof(toc)/sizeof(uint32_t) )
 80043c2:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <DIFFDRIVE_TIMING_Wait+0x58>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b63      	cmp	r3, #99	; 0x63
 80043c8:	d80a      	bhi.n	80043e0 <DIFFDRIVE_TIMING_Wait+0x38>
				toc[i_]= osKernelGetTickCount()-tic;
 80043ca:	f004 fd01 	bl	8008dd0 <osKernelGetTickCount>
 80043ce:	4601      	mov	r1, r0
 80043d0:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <DIFFDRIVE_TIMING_Wait+0x5c>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <DIFFDRIVE_TIMING_Wait+0x58>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	1a8a      	subs	r2, r1, r2
 80043da:	490b      	ldr	r1, [pc, #44]	; (8004408 <DIFFDRIVE_TIMING_Wait+0x60>)
 80043dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			i_++;
 80043e0:	4b07      	ldr	r3, [pc, #28]	; (8004400 <DIFFDRIVE_TIMING_Wait+0x58>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	4a06      	ldr	r2, [pc, #24]	; (8004400 <DIFFDRIVE_TIMING_Wait+0x58>)
 80043e8:	6013      	str	r3, [r2, #0]

			tic= osKernelGetTickCount();
 80043ea:	f004 fcf1 	bl	8008dd0 <osKernelGetTickCount>
 80043ee:	4603      	mov	r3, r0
 80043f0:	4a04      	ldr	r2, [pc, #16]	; (8004404 <DIFFDRIVE_TIMING_Wait+0x5c>)
 80043f2:	6013      	str	r3, [r2, #0]
			tic=  HAL_GetTick();

#endif /* DIFFDRIVE_DEBUG_TIMING_ */
#endif /* DIFFDRIVE_RTOS_V */

}
 80043f4:	bf00      	nop
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20005280 	.word	0x20005280
 8004400:	200000b0 	.word	0x200000b0
 8004404:	200000ac 	.word	0x200000ac
 8004408:	200050f0 	.word	0x200050f0

0800440c <DIFFDRIVE_STATE_Update>:


void DIFFDRIVE_STATE_Update(float* input){
 800440c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004410:	b08a      	sub	sp, #40	; 0x28
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_STATE_TypeDef* tmpstate= &(hdiffdrv->state);
 8004416:	4ba4      	ldr	r3, [pc, #656]	; (80046a8 <DIFFDRIVE_STATE_Update+0x29c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800441e:	623b      	str	r3, [r7, #32]

	float min_volt;
	float max_volt;

	// Sample time
	float Ts= hdiffdrv->timing.time_step;
 8004420:	4ba1      	ldr	r3, [pc, #644]	; (80046a8 <DIFFDRIVE_STATE_Update+0x29c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004428:	61fb      	str	r3, [r7, #28]

	// Updating state
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 800442a:	2300      	movs	r3, #0
 800442c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004430:	e0ad      	b.n	800458e <DIFFDRIVE_STATE_Update+0x182>
		tmpstate->wheel[side]=        hdiffdrv->encoder[side].current_value;
 8004432:	4b9d      	ldr	r3, [pc, #628]	; (80046a8 <DIFFDRIVE_STATE_Update+0x29c>)
 8004434:	6819      	ldr	r1, [r3, #0]
 8004436:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800443a:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 800443e:	4613      	mov	r3, r2
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	4413      	add	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	440b      	add	r3, r1
 8004448:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	6a39      	ldr	r1, [r7, #32]
 8004450:	1d03      	adds	r3, r0, #4
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	3304      	adds	r3, #4
 8004458:	601a      	str	r2, [r3, #0]
		tmpstate->wheel_speed[side]= (hdiffdrv->encoder[side].current_value-hdiffdrv->encoder[side].previous_value)/Ts;
 800445a:	4b93      	ldr	r3, [pc, #588]	; (80046a8 <DIFFDRIVE_STATE_Update+0x29c>)
 800445c:	6819      	ldr	r1, [r3, #0]
 800445e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004462:	4613      	mov	r3, r2
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	4413      	add	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	440b      	add	r3, r1
 800446c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004470:	ed93 7a00 	vldr	s14, [r3]
 8004474:	4b8c      	ldr	r3, [pc, #560]	; (80046a8 <DIFFDRIVE_STATE_Update+0x29c>)
 8004476:	6819      	ldr	r1, [r3, #0]
 8004478:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800447c:	4613      	mov	r3, r2
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	4413      	add	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	440b      	add	r3, r1
 8004486:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800448a:	edd3 7a00 	vldr	s15, [r3]
 800448e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004496:	ed97 7a07 	vldr	s14, [r7, #28]
 800449a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800449e:	6a3a      	ldr	r2, [r7, #32]
 80044a0:	3306      	adds	r3, #6
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	3304      	adds	r3, #4
 80044a8:	edc3 7a00 	vstr	s15, [r3]

		min_volt= hdiffdrv->motor[side].min_voltage;
 80044ac:	4b7e      	ldr	r3, [pc, #504]	; (80046a8 <DIFFDRIVE_STATE_Update+0x29c>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044b4:	212c      	movs	r1, #44	; 0x2c
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	4413      	add	r3, r2
 80044bc:	33c8      	adds	r3, #200	; 0xc8
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	617b      	str	r3, [r7, #20]
		max_volt= hdiffdrv->motor[side].max_voltage;
 80044c2:	4b79      	ldr	r3, [pc, #484]	; (80046a8 <DIFFDRIVE_STATE_Update+0x29c>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044ca:	212c      	movs	r1, #44	; 0x2c
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	33c4      	adds	r3, #196	; 0xc4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	613b      	str	r3, [r7, #16]

		// Input Saturation limits, for "measured" tension-------------------------
		if( input[side] > (max_volt-min_volt))
 80044d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	4413      	add	r3, r2
 80044e2:	ed93 7a00 	vldr	s14, [r3]
 80044e6:	edd7 6a04 	vldr	s13, [r7, #16]
 80044ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80044ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80044f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fa:	dd0f      	ble.n	800451c <DIFFDRIVE_STATE_Update+0x110>
			tmpstate->input[side]= max_volt-min_volt;
 80044fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004500:	ed97 7a04 	vldr	s14, [r7, #16]
 8004504:	edd7 7a05 	vldr	s15, [r7, #20]
 8004508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800450c:	6a3a      	ldr	r2, [r7, #32]
 800450e:	3308      	adds	r3, #8
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	3304      	adds	r3, #4
 8004516:	edc3 7a00 	vstr	s15, [r3]
 800451a:	e033      	b.n	8004584 <DIFFDRIVE_STATE_Update+0x178>
		else
		if( input[side] < -(max_volt-min_volt))
 800451c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	4413      	add	r3, r2
 8004526:	ed93 7a00 	vldr	s14, [r3]
 800452a:	edd7 6a04 	vldr	s13, [r7, #16]
 800452e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004532:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004536:	eef1 7a67 	vneg.f32	s15, s15
 800453a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800453e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004542:	d511      	bpl.n	8004568 <DIFFDRIVE_STATE_Update+0x15c>
			tmpstate->input[side]= -(max_volt-min_volt);
 8004544:	ed97 7a04 	vldr	s14, [r7, #16]
 8004548:	edd7 7a05 	vldr	s15, [r7, #20]
 800454c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004554:	eef1 7a67 	vneg.f32	s15, s15
 8004558:	6a3a      	ldr	r2, [r7, #32]
 800455a:	3308      	adds	r3, #8
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	3304      	adds	r3, #4
 8004562:	edc3 7a00 	vstr	s15, [r3]
 8004566:	e00d      	b.n	8004584 <DIFFDRIVE_STATE_Update+0x178>
		else
			tmpstate->input[side]= input[side];
 8004568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	441a      	add	r2, r3
 8004572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	6a39      	ldr	r1, [r7, #32]
 800457a:	3308      	adds	r3, #8
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	3304      	adds	r3, #4
 8004582:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 8004584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004588:	3301      	adds	r3, #1
 800458a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800458e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004592:	2b01      	cmp	r3, #1
 8004594:	f67f af4d 	bls.w	8004432 <DIFFDRIVE_STATE_Update+0x26>
		// ------------------------------------------------------------------------
	}

	// Compute and update current pose an speed
	DIFFDRIVE_WheelSpeed2TrajectorySpeed(&v, &om,  tmpstate->wheel_speed);
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	f103 021c 	add.w	r2, r3, #28
 800459e:	f107 0108 	add.w	r1, r7, #8
 80045a2:	f107 030c 	add.w	r3, r7, #12
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 f8e0 	bl	800476c <DIFFDRIVE_WheelSpeed2TrajectorySpeed>

	theta= tmpstate->pose.theta;
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	61bb      	str	r3, [r7, #24]
	tmpstate->pose.x_a   +=  v*Ts*cos(theta);
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fb ff8e 	bl	80004d8 <__aeabi_f2d>
 80045bc:	4604      	mov	r4, r0
 80045be:	460d      	mov	r5, r1
 80045c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80045c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80045c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045cc:	ee17 0a90 	vmov	r0, s15
 80045d0:	f7fb ff82 	bl	80004d8 <__aeabi_f2d>
 80045d4:	4680      	mov	r8, r0
 80045d6:	4689      	mov	r9, r1
 80045d8:	69b8      	ldr	r0, [r7, #24]
 80045da:	f7fb ff7d 	bl	80004d8 <__aeabi_f2d>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	ec43 2b10 	vmov	d0, r2, r3
 80045e6:	f008 f8ff 	bl	800c7e8 <cos>
 80045ea:	ec53 2b10 	vmov	r2, r3, d0
 80045ee:	4640      	mov	r0, r8
 80045f0:	4649      	mov	r1, r9
 80045f2:	f7fb ffc9 	bl	8000588 <__aeabi_dmul>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	4620      	mov	r0, r4
 80045fc:	4629      	mov	r1, r5
 80045fe:	f7fb fe0d 	bl	800021c <__adddf3>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4610      	mov	r0, r2
 8004608:	4619      	mov	r1, r3
 800460a:	f7fc fab5 	bl	8000b78 <__aeabi_d2f>
 800460e:	4602      	mov	r2, r0
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	601a      	str	r2, [r3, #0]
	tmpstate->pose.y_a   +=  v*Ts*sin(theta);
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4618      	mov	r0, r3
 800461a:	f7fb ff5d 	bl	80004d8 <__aeabi_f2d>
 800461e:	4604      	mov	r4, r0
 8004620:	460d      	mov	r5, r1
 8004622:	ed97 7a03 	vldr	s14, [r7, #12]
 8004626:	edd7 7a07 	vldr	s15, [r7, #28]
 800462a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462e:	ee17 0a90 	vmov	r0, s15
 8004632:	f7fb ff51 	bl	80004d8 <__aeabi_f2d>
 8004636:	4680      	mov	r8, r0
 8004638:	4689      	mov	r9, r1
 800463a:	69b8      	ldr	r0, [r7, #24]
 800463c:	f7fb ff4c 	bl	80004d8 <__aeabi_f2d>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	ec43 2b10 	vmov	d0, r2, r3
 8004648:	f008 f91e 	bl	800c888 <sin>
 800464c:	ec53 2b10 	vmov	r2, r3, d0
 8004650:	4640      	mov	r0, r8
 8004652:	4649      	mov	r1, r9
 8004654:	f7fb ff98 	bl	8000588 <__aeabi_dmul>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4620      	mov	r0, r4
 800465e:	4629      	mov	r1, r5
 8004660:	f7fb fddc 	bl	800021c <__adddf3>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4610      	mov	r0, r2
 800466a:	4619      	mov	r1, r3
 800466c:	f7fc fa84 	bl	8000b78 <__aeabi_d2f>
 8004670:	4602      	mov	r2, r0
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	605a      	str	r2, [r3, #4]
	tmpstate->pose.theta +=  om*Ts;
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	ed93 7a02 	vldr	s14, [r3, #8]
 800467c:	edd7 6a02 	vldr	s13, [r7, #8]
 8004680:	edd7 7a07 	vldr	s15, [r7, #28]
 8004684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	edc3 7a02 	vstr	s15, [r3, #8]
	tmpstate->pose.v=  v;
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	60da      	str	r2, [r3, #12]
	tmpstate->pose.om= om;
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	611a      	str	r2, [r3, #16]
}
 800469e:	bf00      	nop
 80046a0:	3728      	adds	r7, #40	; 0x28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80046a8:	20005280 	.word	0x20005280

080046ac <DIFFDRIVE_TrajectorySpeed2WheelAngle>:


void DIFFDRIVE_TrajectorySpeed2WheelAngle(float* wheel, float v, float om){
 80046ac:	b480      	push	{r7}
 80046ae:	b089      	sub	sp, #36	; 0x24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80046b8:	edc7 0a01 	vstr	s1, [r7, #4]

	// Sample time
	float Ts= hdiffdrv->timing.time_step;
 80046bc:	4b2a      	ldr	r3, [pc, #168]	; (8004768 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xbc>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046c4:	61fb      	str	r3, [r7, #28]

	float r= hdiffdrv->mech_prmtr.r;
 80046c6:	4b28      	ldr	r3, [pc, #160]	; (8004768 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xbc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 80046ce:	61bb      	str	r3, [r7, #24]
	float l= hdiffdrv->mech_prmtr.l;
 80046d0:	4b25      	ldr	r3, [pc, #148]	; (8004768 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xbc>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 80046d8:	617b      	str	r3, [r7, #20]

	// Wheel target computation (it's affect input var "wheel" because is a pointer.
	// Also note the "+=" symbol and not "=")
	if( wheel != NULL){
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d03d      	beq.n	800475c <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xb0>
		wheel[left ] +=  (v/r - l*om/r)*Ts;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	ed93 7a00 	vldr	s14, [r3]
 80046e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80046ee:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80046f2:	ed97 6a05 	vldr	s12, [r7, #20]
 80046f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80046fa:	ee66 5a27 	vmul.f32	s11, s12, s15
 80046fe:	ed97 6a06 	vldr	s12, [r7, #24]
 8004702:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004706:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800470a:	edd7 7a07 	vldr	s15, [r7, #28]
 800470e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	edc3 7a00 	vstr	s15, [r3]
		wheel[right] +=  (v/r + l*om/r)*Ts;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3304      	adds	r3, #4
 8004720:	ed93 7a00 	vldr	s14, [r3]
 8004724:	ed97 6a02 	vldr	s12, [r7, #8]
 8004728:	edd7 7a06 	vldr	s15, [r7, #24]
 800472c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004730:	ed97 6a05 	vldr	s12, [r7, #20]
 8004734:	edd7 7a01 	vldr	s15, [r7, #4]
 8004738:	ee66 5a27 	vmul.f32	s11, s12, s15
 800473c:	ed97 6a06 	vldr	s12, [r7, #24]
 8004740:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004744:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004748:	edd7 7a07 	vldr	s15, [r7, #28]
 800474c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3304      	adds	r3, #4
 8004754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004758:	edc3 7a00 	vstr	s15, [r3]
	}

}
 800475c:	bf00      	nop
 800475e:	3724      	adds	r7, #36	; 0x24
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	20005280 	.word	0x20005280

0800476c <DIFFDRIVE_WheelSpeed2TrajectorySpeed>:

void DIFFDRIVE_WheelSpeed2TrajectorySpeed(float* v_p, float* om_p, float* wheel_speed){
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]

	float r= hdiffdrv->mech_prmtr.r;
 8004778:	4b1f      	ldr	r3, [pc, #124]	; (80047f8 <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x8c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8004780:	617b      	str	r3, [r7, #20]
	float l= hdiffdrv->mech_prmtr.l;
 8004782:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x8c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 800478a:	613b      	str	r3, [r7, #16]

	// Trajectory Variations computation (it's affect input vars v_p and om_p because are pointers)
	if( v_p != NULL)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d013      	beq.n	80047ba <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x4e>
		*v_p= (wheel_speed[right] + wheel_speed[left])*r/2;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3304      	adds	r3, #4
 8004796:	ed93 7a00 	vldr	s14, [r3]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	edd3 7a00 	vldr	s15, [r3]
 80047a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80047a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80047b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	edc3 7a00 	vstr	s15, [r3]

	if( om_p != NULL )
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d015      	beq.n	80047ec <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x80>
		*om_p= (wheel_speed[right] - wheel_speed[left])*r/(2*l);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3304      	adds	r3, #4
 80047c4:	ed93 7a00 	vldr	s14, [r3]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	edd3 7a00 	vldr	s15, [r3]
 80047ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80047d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80047da:	edd7 7a04 	vldr	s15, [r7, #16]
 80047de:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80047e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	edc3 7a00 	vstr	s15, [r3]

}
 80047ec:	bf00      	nop
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	20005280 	.word	0x20005280

080047fc <DIFFDRIVE_CONTROL_WheelStep>:


void DIFFDRIVE_CONTROL_WheelStep(float* newest_target){
 80047fc:	b590      	push	{r4, r7, lr}
 80047fe:	b08b      	sub	sp, #44	; 0x2c
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_CONTROL_TypeDef* hctrl=  hdiffdrv->control;
 8004804:	4b4f      	ldr	r3, [pc, #316]	; (8004944 <DIFFDRIVE_CONTROL_WheelStep+0x148>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800480c:	623b      	str	r3, [r7, #32]
	float curr_target[2], curr_measure, input[2];

	/* Do control wheels */

	// Waiting for step control enabling
	DIFFDRIVE_TIMING_Wait();
 800480e:	f7ff fdcb 	bl	80043a8 <DIFFDRIVE_TIMING_Wait>

	// Then get wheel step measure If counters are not near overflow (look at CaptureMeasure function)
	if( (status= DIFFDRIVE_ENCODER_CaptureMeasure()) == DIFFDRIVE_ERROR ){
 8004812:	f7ff f889 	bl	8003928 <DIFFDRIVE_ENCODER_CaptureMeasure>
 8004816:	4603      	mov	r3, r0
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	7ffb      	ldrb	r3, [r7, #31]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d10a      	bne.n	8004836 <DIFFDRIVE_CONTROL_WheelStep+0x3a>
		// If exception, reset control
		DIFFDRIVE_CONTROL_Reset();
 8004820:	f7ff fcf6 	bl	8004210 <DIFFDRIVE_CONTROL_Reset>
		// Reset target temporary variable
		newest_target[left ]= 0;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
		newest_target[right]= 0;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
	}

	// Compute input
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004836:	2300      	movs	r3, #0
 8004838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800483c:	e06f      	b.n	800491e <DIFFDRIVE_CONTROL_WheelStep+0x122>

		// Computing input using inversion control
		input[side]  = FEEDFORWARD_InversionControl(&(hctrl[side].fdfrwrd), newest_target[side]);
 800483e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004842:	2268      	movs	r2, #104	; 0x68
 8004844:	fb02 f303 	mul.w	r3, r2, r3
 8004848:	6a3a      	ldr	r2, [r7, #32]
 800484a:	4413      	add	r3, r2
 800484c:	4619      	mov	r1, r3
 800484e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	4413      	add	r3, r2
 8004858:	edd3 7a00 	vldr	s15, [r3]
 800485c:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8004860:	eeb0 0a67 	vmov.f32	s0, s15
 8004864:	4608      	mov	r0, r1
 8004866:	f000 fa78 	bl	8004d5a <FEEDFORWARD_InversionControl>
 800486a:	eef0 7a40 	vmov.f32	s15, s0
 800486e:	00a3      	lsls	r3, r4, #2
 8004870:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004874:	4413      	add	r3, r2
 8004876:	3b20      	subs	r3, #32
 8004878:	edc3 7a00 	vstr	s15, [r3]

		// Wheel angle read from sensor
		curr_measure= __DIFFDRIVE_ENCODER_GET_CURRENT_VALUE(hdiffdrv,side);
 800487c:	4b31      	ldr	r3, [pc, #196]	; (8004944 <DIFFDRIVE_CONTROL_WheelStep+0x148>)
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004884:	4613      	mov	r3, r2
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	4413      	add	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	440b      	add	r3, r1
 800488e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	61bb      	str	r3, [r7, #24]

		// Current target value saved in the feed-forward controller struct (you must call before the
		// Inversion Control function and then to extract this value. Look at feed-forward library to
		// better understand why)
		curr_target[side]= __FEEDFORWARD_GET_CURRENT_TARGET(&(hctrl[side].fdfrwrd));
 8004896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800489a:	2268      	movs	r2, #104	; 0x68
 800489c:	fb02 f303 	mul.w	r3, r2, r3
 80048a0:	6a3a      	ldr	r2, [r7, #32]
 80048a2:	441a      	add	r2, r3
 80048a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80048b0:	440b      	add	r3, r1
 80048b2:	3b18      	subs	r3, #24
 80048b4:	601a      	str	r2, [r3, #0]

		// Computing PID input
		input[side] += PID_Control(&(hctrl[side].pid), curr_target[side], curr_measure);
 80048b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048ba:	2268      	movs	r2, #104	; 0x68
 80048bc:	fb02 f303 	mul.w	r3, r2, r3
 80048c0:	6a3a      	ldr	r2, [r7, #32]
 80048c2:	4413      	add	r3, r2
 80048c4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80048c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80048d2:	440b      	add	r3, r1
 80048d4:	3b18      	subs	r3, #24
 80048d6:	edd3 7a00 	vldr	s15, [r3]
 80048da:	edd7 0a06 	vldr	s1, [r7, #24]
 80048de:	eeb0 0a67 	vmov.f32	s0, s15
 80048e2:	4610      	mov	r0, r2
 80048e4:	f000 fb67 	bl	8004fb6 <PID_Control>
 80048e8:	eeb0 7a40 	vmov.f32	s14, s0
 80048ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80048f6:	4413      	add	r3, r2
 80048f8:	3b20      	subs	r3, #32
 80048fa:	edd3 7a00 	vldr	s15, [r3]
 80048fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800490c:	4413      	add	r3, r2
 800490e:	3b20      	subs	r3, #32
 8004910:	edc3 7a00 	vstr	s15, [r3]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004918:	3301      	adds	r3, #1
 800491a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800491e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004922:	2b01      	cmp	r3, #1
 8004924:	d98b      	bls.n	800483e <DIFFDRIVE_CONTROL_WheelStep+0x42>

	}

	// Set new PWMs signals
	DIFFDRIVE_MOTOR_SetPWMs(input);
 8004926:	f107 0308 	add.w	r3, r7, #8
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe fdc6 	bl	80034bc <DIFFDRIVE_MOTOR_SetPWMs>

	// Update differential drive state structure
	DIFFDRIVE_STATE_Update(input);
 8004930:	f107 0308 	add.w	r3, r7, #8
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fd69 	bl	800440c <DIFFDRIVE_STATE_Update>

}
 800493a:	bf00      	nop
 800493c:	372c      	adds	r7, #44	; 0x2c
 800493e:	46bd      	mov	sp, r7
 8004940:	bd90      	pop	{r4, r7, pc}
 8004942:	bf00      	nop
 8004944:	20005280 	.word	0x20005280

08004948 <DIFFDRIVE_TrackingStart>:

void DIFFDRIVE_TrackingStart(void){
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0

	// Start control
	DIFFDRIVE_CONTROL_Start();
 800494c:	f7ff fc40 	bl	80041d0 <DIFFDRIVE_CONTROL_Start>

	// First step wheels control (starts with zeros, robot still)
	DIFFDRIVE_TrackingStep(0,0);
 8004950:	eddf 0a03 	vldr	s1, [pc, #12]	; 8004960 <DIFFDRIVE_TrackingStart+0x18>
 8004954:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8004960 <DIFFDRIVE_TrackingStart+0x18>
 8004958:	f000 f810 	bl	800497c <DIFFDRIVE_TrackingStep>

}
 800495c:	bf00      	nop
 800495e:	bd80      	pop	{r7, pc}
 8004960:	00000000 	.word	0x00000000

08004964 <DIFFDRIVE_TrackingResume>:

void DIFFDRIVE_TrackingResume(void){
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0

	// Resume control
	DIFFDRIVE_CONTROL_Resume();
 8004968:	f7ff fc3e 	bl	80041e8 <DIFFDRIVE_CONTROL_Resume>

}
 800496c:	bf00      	nop
 800496e:	bd80      	pop	{r7, pc}

08004970 <DIFFDRIVE_TrackingSuspend>:
	// Stop control
	DIFFDRIVE_CONTROL_Stop();

}

void DIFFDRIVE_TrackingSuspend(void){
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0

	// Suspend control
	DIFFDRIVE_CONTROL_Suspend();
 8004974:	f7ff fc42 	bl	80041fc <DIFFDRIVE_CONTROL_Suspend>

}
 8004978:	bf00      	nop
 800497a:	bd80      	pop	{r7, pc}

0800497c <DIFFDRIVE_TrackingStep>:

void DIFFDRIVE_TrackingStep(float v, float om){
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	ed87 0a01 	vstr	s0, [r7, #4]
 8004986:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_CONTROL_TypeDef* tmpctrl= hdiffdrv->control;
 800498a:	4b1a      	ldr	r3, [pc, #104]	; (80049f4 <DIFFDRIVE_TrackingStep+0x78>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004992:	613b      	str	r3, [r7, #16]
	float newest_target[2];

	// Extracting previous target
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8004994:	2300      	movs	r3, #0
 8004996:	75fb      	strb	r3, [r7, #23]
 8004998:	e010      	b.n	80049bc <DIFFDRIVE_TrackingStep+0x40>
		newest_target[side]= __FEEDFORWARD_GET_NEWEST_TARGET(&tmpctrl[side].fdfrwrd);
 800499a:	7dfb      	ldrb	r3, [r7, #23]
 800499c:	2268      	movs	r2, #104	; 0x68
 800499e:	fb02 f303 	mul.w	r3, r2, r3
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	441a      	add	r2, r3
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
 80049a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	f107 0118 	add.w	r1, r7, #24
 80049b0:	440b      	add	r3, r1
 80049b2:	3b10      	subs	r3, #16
 80049b4:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
 80049b8:	3301      	adds	r3, #1
 80049ba:	75fb      	strb	r3, [r7, #23]
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d9eb      	bls.n	800499a <DIFFDRIVE_TrackingStep+0x1e>

	// Computing newest target
	DIFFDRIVE_TrajectorySpeed2WheelAngle(newest_target, v, om);
 80049c2:	f107 0308 	add.w	r3, r7, #8
 80049c6:	edd7 0a00 	vldr	s1, [r7]
 80049ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff fe6c 	bl	80046ac <DIFFDRIVE_TrajectorySpeed2WheelAngle>

	// Make a wheel step motion
	DIFFDRIVE_CONTROL_WheelStep(newest_target);
 80049d4:	f107 0308 	add.w	r3, r7, #8
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff ff0f 	bl	80047fc <DIFFDRIVE_CONTROL_WheelStep>

	// Updating History
	DIFFDRIVE_HISTORY_Update(v, om);
 80049de:	edd7 0a00 	vldr	s1, [r7]
 80049e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80049e6:	f7ff f913 	bl	8003c10 <DIFFDRIVE_HISTORY_Update>

}
 80049ea:	bf00      	nop
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20005280 	.word	0x20005280

080049f8 <DIFFDRIVE_TIMING_PeriodElapsedCallback>:
	DIFFDRIVE_MOTOR_Stop();

}


void DIFFDRIVE_TIMING_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

#ifdef DIFFDRIVE_RTOS_V_
	// Release the token
	osSemaphoreRelease(hdiffdrv->timing.semaphore_id);
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <DIFFDRIVE_TIMING_PeriodElapsedCallback+0x20>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f004 fbc1 	bl	8009190 <osSemaphoreRelease>
#else
	// Enabling timing flag
	hdiffdrv->timing.flag= true;
#endif

}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20005280 	.word	0x20005280

08004a1c <MAF_Create>:
#include <stdlib.h>

// Moving Average Filter Methods --------------------------------------------------------------------- //

// MAF Create
MAF_HandleTypeDef MAF_Create(const int buffsize, float *weights){
 8004a1c:	b5b0      	push	{r4, r5, r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
	MAF_HandleTypeDef tmp;

	tmp.buffsize = buffsize;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	613b      	str	r3, [r7, #16]
	tmp.buffer = (float*)calloc(buffsize,sizeof(float));
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2104      	movs	r1, #4
 8004a30:	4618      	mov	r0, r3
 8004a32:	f007 fd83 	bl	800c53c <calloc>
 8004a36:	4603      	mov	r3, r0
 8004a38:	623b      	str	r3, [r7, #32]
	tmp.sum = 0;
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
	tmp.avg = 0;
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	61bb      	str	r3, [r7, #24]
	tmp.idx = 0;
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
	tmp.weights= weights;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24

	return tmp;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	461d      	mov	r5, r3
 8004a52:	f107 0410 	add.w	r4, r7, #16
 8004a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a5e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	3728      	adds	r7, #40	; 0x28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bdb0      	pop	{r4, r5, r7, pc}

08004a6a <MAF_Reset>:

void MAF_Reset(MAF_HandleTypeDef* filter, float init_val){
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	ed87 0a00 	vstr	s0, [r7]

	filter->sum = init_val;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	605a      	str	r2, [r3, #4]
	filter->avg = init_val;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	609a      	str	r2, [r3, #8]
	filter->idx = 0;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	60da      	str	r2, [r3, #12]

	for(int i=0; i < filter->buffsize; i++)
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e009      	b.n	8004aa2 <MAF_Reset+0x38>
		filter->buffer[i]= init_val;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	601a      	str	r2, [r3, #0]
	for(int i=0; i < filter->buffsize; i++)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	dbf0      	blt.n	8004a8e <MAF_Reset+0x24>
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <MAF_Update>:

// Maf update. Arithmetic or Weighted. If latter the weights array are ordered from oldest to newest
void MAF_Update(MAF_HandleTypeDef* filter, const float data){
 8004aba:	b480      	push	{r7}
 8004abc:	b087      	sub	sp, #28
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	ed87 0a00 	vstr	s0, [r7]

	// Weighted
	if(filter->weights != NULL){
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d03e      	beq.n	8004b4c <MAF_Update+0x92>
		// Store current measure
		filter->buffer[filter->idx] = data;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	601a      	str	r2, [r3, #0]

		// Sum variable
		float sum_tmp = 0;
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
		// Index variable to scan the circular buffer
		int idx_tmp;

		// Computing average from oldest to newest (from 1 to size+1), in circular buffer
		// the oldest are the next value from the current
		for(int i=1; i<filter->buffsize+1; i++){
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	e027      	b.n	8004b3a <MAF_Update+0x80>
			// Current buffer index in the for loop (the mod '%' serve for the circular index)
			idx_tmp = (filter->idx+i)%(filter->buffsize);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4413      	add	r3, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	fb93 f1f2 	sdiv	r1, r3, r2
 8004afa:	fb02 f201 	mul.w	r2, r2, r1
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
			// Current sum
			sum_tmp += (filter->buffer[idx_tmp])*(filter->weights[i-1]) 	;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691a      	ldr	r2, [r3, #16]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	ed93 7a00 	vldr	s14, [r3]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	695a      	ldr	r2, [r3, #20]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	edd3 7a00 	vldr	s15, [r3]
 8004b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b28:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b30:	edc7 7a05 	vstr	s15, [r7, #20]
		for(int i=1; i<filter->buffsize+1; i++){
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	3301      	adds	r3, #1
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	ddd2      	ble.n	8004aea <MAF_Update+0x30>
		}
		filter->avg = sum_tmp;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	609a      	str	r2, [r3, #8]
 8004b4a:	e02f      	b.n	8004bac <MAF_Update+0xf2>
	}
	// Arithmetic
	else{
		// Remove oldest value from circular buffer
		filter->sum -= filter->buffer[filter->idx];
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	edd3 7a00 	vldr	s15, [r3]
 8004b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	edc3 7a01 	vstr	s15, [r3, #4]

		// Add current measure
		filter->sum += data;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b72:	edd7 7a00 	vldr	s15, [r7]
 8004b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	edc3 7a01 	vstr	s15, [r3, #4]

		// Calculate Average
		filter->avg = (float)filter->sum/filter->buffsize;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	edd3 6a01 	vldr	s13, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	edc3 7a02 	vstr	s15, [r3, #8]

		// Store current measure
		filter->buffer[filter->idx] = data;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	601a      	str	r2, [r3, #0]
	}

	// Increase index (the mod '%' serve for the circular buffer)
	filter->idx = (filter->idx+1)%(filter->buffsize);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	fb93 f1f2 	sdiv	r1, r3, r2
 8004bba:	fb02 f201 	mul.w	r2, r2, r1
 8004bbe:	1a9a      	subs	r2, r3, r2
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60da      	str	r2, [r3, #12]

}
 8004bc4:	bf00      	nop
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <FEEDFORWARD_Init>:

#include <stdlib.h>
#include "my_lib/feedforward_controller.h"


void FEEDFORWARD_Init(FEEDFORWARD_HandleTypeDef* hctrl){
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

	// Initializing handle structure values from Init field
	hctrl->arma.n_ar=  hctrl->Init.arma_n_ar;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	881a      	ldrh	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	821a      	strh	r2, [r3, #16]
	hctrl->arma.n_ma=  hctrl->Init.arma_n_ma;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	885a      	ldrh	r2, [r3, #2]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	825a      	strh	r2, [r3, #18]
	hctrl->arma.tau=   hctrl->Init.arma_tau;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	889a      	ldrh	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	829a      	strh	r2, [r3, #20]

	hctrl->arma.AR= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	8a1b      	ldrh	r3, [r3, #16]
 8004bf4:	2104      	movs	r1, #4
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f007 fca0 	bl	800c53c <calloc>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	461a      	mov	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	619a      	str	r2, [r3, #24]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	e00e      	b.n	8004c28 <FEEDFORWARD_Init+0x58>
		hctrl->arma.AR[i]= hctrl->Init.arma_AR[i];
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	441a      	add	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6999      	ldr	r1, [r3, #24]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3301      	adds	r3, #1
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8a1b      	ldrh	r3, [r3, #16]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4293      	cmp	r3, r2
 8004c32:	dbea      	blt.n	8004c0a <FEEDFORWARD_Init+0x3a>

	hctrl->arma.MA= (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8a5b      	ldrh	r3, [r3, #18]
 8004c38:	2104      	movs	r1, #4
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f007 fc7e 	bl	800c53c <calloc>
 8004c40:	4603      	mov	r3, r0
 8004c42:	461a      	mov	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	61da      	str	r2, [r3, #28]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	e00e      	b.n	8004c6c <FEEDFORWARD_Init+0x9c>
		hctrl->arma.MA[i]= hctrl->Init.arma_MA[i];
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	441a      	add	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69d9      	ldr	r1, [r3, #28]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	8a5b      	ldrh	r3, [r3, #18]
 8004c70:	461a      	mov	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4293      	cmp	r3, r2
 8004c76:	dbea      	blt.n	8004c4e <FEEDFORWARD_Init+0x7e>

	// Allocating history' arrays
	hctrl->target_buffer= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	8a1b      	ldrh	r3, [r3, #16]
 8004c7c:	2104      	movs	r1, #4
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f007 fc5c 	bl	800c53c <calloc>
 8004c84:	4603      	mov	r3, r0
 8004c86:	461a      	mov	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24
	hctrl->input_buffer=  (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	8a5b      	ldrh	r3, [r3, #18]
 8004c90:	2104      	movs	r1, #4
 8004c92:	4618      	mov	r0, r3
 8004c94:	f007 fc52 	bl	800c53c <calloc>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	621a      	str	r2, [r3, #32]

}
 8004ca0:	bf00      	nop
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <FEEDFORWARD_Reset>:
	free(hctrl->target_buffer);
	free(hctrl->input_buffer);

}

void FEEDFORWARD_Reset(FEEDFORWARD_HandleTypeDef* hctrl, float target_init){
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	ed87 0a00 	vstr	s0, [r7]

	// Reset feed-forward target buffer, with all all initial conditon
	FEEDFORWARD_BufferInit(hctrl, target_init);
 8004cb4:	ed97 0a00 	vldr	s0, [r7]
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f804 	bl	8004cc6 <FEEDFORWARD_BufferInit>

}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <FEEDFORWARD_BufferInit>:

void FEEDFORWARD_BufferInit(FEEDFORWARD_HandleTypeDef* hctrl, float target_init){
 8004cc6:	b490      	push	{r4, r7}
 8004cc8:	b08a      	sub	sp, #40	; 0x28
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	ed87 0a00 	vstr	s0, [r7]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f107 040c 	add.w	r4, r7, #12
 8004cd8:	3310      	adds	r3, #16
 8004cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint16_t n_ar= arma.n_ar;
 8004ce0:	89bb      	ldrh	r3, [r7, #12]
 8004ce2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t n_ma= arma.n_ma;
 8004ce4:	89fb      	ldrh	r3, [r7, #14]
 8004ce6:	843b      	strh	r3, [r7, #32]
	uint16_t  tau= arma.tau;
 8004ce8:	8a3b      	ldrh	r3, [r7, #16]
 8004cea:	83fb      	strh	r3, [r7, #30]

	// Complete first values with the same initial value
	for(int i= 0; i < n_ar; i++)
 8004cec:	2300      	movs	r3, #0
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf0:	e009      	b.n	8004d06 <FEEDFORWARD_BufferInit+0x40>
		hctrl->target_buffer[i]= target_init;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	601a      	str	r2, [r3, #0]
	for(int i= 0; i < n_ar; i++)
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	3301      	adds	r3, #1
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
 8004d06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	dbf1      	blt.n	8004cf2 <FEEDFORWARD_BufferInit+0x2c>

	// Set current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[n_ar-1-tau];
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d14:	1e59      	subs	r1, r3, #1
 8004d16:	8bfb      	ldrh	r3, [r7, #30]
 8004d18:	1acb      	subs	r3, r1, r3
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[n_ma-1];
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1a      	ldr	r2, [r3, #32]
 8004d28:	8c3b      	ldrh	r3, [r7, #32]
 8004d2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d3e:	89bb      	ldrh	r3, [r7, #12]
 8004d40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d44:	3b01      	subs	r3, #1
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d50:	bf00      	nop
 8004d52:	3728      	adds	r7, #40	; 0x28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc90      	pop	{r4, r7}
 8004d58:	4770      	bx	lr

08004d5a <FEEDFORWARD_InversionControl>:


float FEEDFORWARD_InversionControl(FEEDFORWARD_HandleTypeDef* hctrl, float newest_target){
 8004d5a:	b590      	push	{r4, r7, lr}
 8004d5c:	b08f      	sub	sp, #60	; 0x3c
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	ed87 0a00 	vstr	s0, [r7]

	float input= 0;
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	637b      	str	r3, [r7, #52]	; 0x34
	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f107 040c 	add.w	r4, r7, #12
 8004d72:	3310      	adds	r3, #16
 8004d74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int oldest_ar_sample= 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
	int newest_ar_sample= arma.n_ar-1;  // Last minus one because
 8004d7e:	89bb      	ldrh	r3, [r7, #12]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24
								    	//
	int oldest_ma_sample= 0;			//
 8004d84:	2300      	movs	r3, #0
 8004d86:	623b      	str	r3, [r7, #32]
	int newest_ma_sample= arma.n_ma-1;  // C arrays start from 0
 8004d88:	89fb      	ldrh	r3, [r7, #14]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	61fb      	str	r3, [r7, #28]

	// Assigning the newest target value
	hctrl->target_buffer[newest_ar_sample]= newest_target;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	601a      	str	r2, [r3, #0]

	// Compute feed-forward input (inversion control)
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8004da0:	e019      	b.n	8004dd6 <FEEDFORWARD_InversionControl+0x7c>
		input += arma.AR[newest_ar_sample-i]*hctrl->target_buffer[i];
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	1acb      	subs	r3, r1, r3
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	ed93 7a00 	vldr	s14, [r3]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	edd3 7a00 	vldr	s15, [r3]
 8004dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dcc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8004dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	dde1      	ble.n	8004da2 <FEEDFORWARD_InversionControl+0x48>
	// I know inputs until the newest_ma_sample-1
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de2:	e01b      	b.n	8004e1c <FEEDFORWARD_InversionControl+0xc2>
		input += -arma.MA[newest_ma_sample-j]*hctrl->input_buffer[j];
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	69f9      	ldr	r1, [r7, #28]
 8004de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dea:	1acb      	subs	r3, r1, r3
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	edd3 7a00 	vldr	s15, [r3]
 8004df4:	eeb1 7a67 	vneg.f32	s14, s15
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1a      	ldr	r2, [r3, #32]
 8004dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	edd3 7a00 	vldr	s15, [r3]
 8004e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e12:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	3301      	adds	r3, #1
 8004e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e1c:	69fa      	ldr	r2, [r7, #28]
 8004e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e20:	429a      	cmp	r2, r3
 8004e22:	dcdf      	bgt.n	8004de4 <FEEDFORWARD_InversionControl+0x8a>
	// Last input is computed here
	input /= arma.MA[0];
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	ed93 7a00 	vldr	s14, [r3]
 8004e2a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8004e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e32:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Saving newest input
	hctrl->input_buffer[newest_ma_sample]= input;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1a      	ldr	r2, [r3, #32]
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e42:	601a      	str	r2, [r3, #0]

	// Updating Buffer for next step
	FEEDFORWARD_BufferUpdate(hctrl);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f808 	bl	8004e5a <FEEDFORWARD_BufferUpdate>

	return input;
 8004e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4c:	ee07 3a90 	vmov	s15, r3
}
 8004e50:	eeb0 0a67 	vmov.f32	s0, s15
 8004e54:	373c      	adds	r7, #60	; 0x3c
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd90      	pop	{r4, r7, pc}

08004e5a <FEEDFORWARD_BufferUpdate>:


void FEEDFORWARD_BufferUpdate(FEEDFORWARD_HandleTypeDef* hctrl){
 8004e5a:	b490      	push	{r4, r7}
 8004e5c:	b088      	sub	sp, #32
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f107 0408 	add.w	r4, r7, #8
 8004e68:	3310      	adds	r3, #16
 8004e6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Updating current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[arma.n_ar-1-arma.tau];
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e74:	893b      	ldrh	r3, [r7, #8]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	89b9      	ldrh	r1, [r7, #12]
 8004e7a:	1a5b      	subs	r3, r3, r1
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[arma.n_ma-1];
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1a      	ldr	r2, [r3, #32]
 8004e8a:	897b      	ldrh	r3, [r7, #10]
 8004e8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e90:	3b01      	subs	r3, #1
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ea0:	893b      	ldrh	r3, [r7, #8]
 8004ea2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	631a      	str	r2, [r3, #48]	; 0x30

	// Then slide buffers ( look, loops go from idx=0 to idx=n-2 )
	for(int i=0; i < arma.n_ar-1; i++)
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	e00f      	b.n	8004ed8 <FEEDFORWARD_BufferUpdate+0x7e>
		hctrl->target_buffer[i]= hctrl->target_buffer[i+1];
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ar-1; i++)
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	61fb      	str	r3, [r7, #28]
 8004ed8:	893b      	ldrh	r3, [r7, #8]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	dbea      	blt.n	8004eb8 <FEEDFORWARD_BufferUpdate+0x5e>
	for(int i=0; i < arma.n_ma-1; i++)
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	e00f      	b.n	8004f08 <FEEDFORWARD_BufferUpdate+0xae>
		hctrl->input_buffer[i]= hctrl->input_buffer[i+1];
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1a      	ldr	r2, [r3, #32]
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	441a      	add	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a19      	ldr	r1, [r3, #32]
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ma-1; i++)
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	3301      	adds	r3, #1
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	897b      	ldrh	r3, [r7, #10]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	dbea      	blt.n	8004ee8 <FEEDFORWARD_BufferUpdate+0x8e>

}
 8004f12:	bf00      	nop
 8004f14:	bf00      	nop
 8004f16:	3720      	adds	r7, #32
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bc90      	pop	{r4, r7}
 8004f1c:	4770      	bx	lr

08004f1e <PID_Init>:
 */

#include "my_lib/pid_controller.h"


void PID_Init(PID_HandleTypeDef* hpid){
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]

	// Init parameters
	hpid->P=  hpid->Init.P;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	611a      	str	r2, [r3, #16]
	hpid->I=  hpid->Init.I;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	615a      	str	r2, [r3, #20]
	hpid->D=  hpid->Init.D;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	619a      	str	r2, [r3, #24]
	hpid->Ts= hpid->Init.Ts;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	631a      	str	r2, [r3, #48]	; 0x30

	// Init Input contributes variables
	hpid->u_I= 0;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24
	hpid->u_P= 0;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	61da      	str	r2, [r3, #28]

	// Init Previous variables
	hpid->u_prev= 0;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <PID_Reset>:



// Reset input buffer and the contributes variables
void PID_Reset(PID_HandleTypeDef* hpid){
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]

	hpid->u_I= 0;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	625a      	str	r2, [r3, #36]	; 0x24
	hpid->u_P= 0;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	61da      	str	r2, [r3, #28]

	hpid->u_prev= 0;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	62da      	str	r2, [r3, #44]	; 0x2c



}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <PID_Control>:

float PID_Control(PID_HandleTypeDef* hpid, float target, float measure){
 8004fb6:	b480      	push	{r7}
 8004fb8:	b089      	sub	sp, #36	; 0x24
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	ed87 0a02 	vstr	s0, [r7, #8]
 8004fc2:	edc7 0a01 	vstr	s1, [r7, #4]

	float e_prev,e_curr, Ts, u;

	// Time step
	Ts= hpid->Ts;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	61fb      	str	r3, [r7, #28]

	// Following error
	e_curr= target-measure;
 8004fcc:	ed97 7a02 	vldr	s14, [r7, #8]
 8004fd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fd8:	edc7 7a06 	vstr	s15, [r7, #24]
	e_prev= hpid->e_prev;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	617b      	str	r3, [r7, #20]

	// Proportional
	hpid->u_P= hpid->P*e_curr;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	ed93 7a04 	vldr	s14, [r3, #16]
 8004fe8:	edd7 7a06 	vldr	s15, [r7, #24]
 8004fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	edc3 7a07 	vstr	s15, [r3, #28]

	// Integral
	hpid->u_I += hpid->I*e_prev*Ts;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	ed93 7a08 	vldr	s14, [r3, #32]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	edd3 6a05 	vldr	s13, [r3, #20]
 8005002:	edd7 7a05 	vldr	s15, [r7, #20]
 8005006:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800500a:	edd7 7a07 	vldr	s15, [r7, #28]
 800500e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	edc3 7a08 	vstr	s15, [r3, #32]

	// Derivative
	hpid->u_D = hpid->D*(e_curr-e_prev)/Ts;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	ed93 7a06 	vldr	s14, [r3, #24]
 8005022:	edd7 6a06 	vldr	s13, [r7, #24]
 8005026:	edd7 7a05 	vldr	s15, [r7, #20]
 800502a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800502e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005032:	ed97 7a07 	vldr	s14, [r7, #28]
 8005036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Input
	u= hpid->u_P + hpid->u_I + hpid->u_D;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	ed93 7a07 	vldr	s14, [r3, #28]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	edd3 7a08 	vldr	s15, [r3, #32]
 800504c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800505a:	edc7 7a04 	vstr	s15, [r7, #16]

	// Updating struct
	hpid->u_prev= u;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= e_curr;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	62da      	str	r2, [r3, #44]	; 0x2c

	return u;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	ee07 3a90 	vmov	s15, r3

}
 8005070:	eeb0 0a67 	vmov.f32	s0, s15
 8005074:	3724      	adds	r7, #36	; 0x24
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005084:	480d      	ldr	r0, [pc, #52]	; (80050bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005086:	490e      	ldr	r1, [pc, #56]	; (80050c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005088:	4a0e      	ldr	r2, [pc, #56]	; (80050c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800508a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800508c:	e002      	b.n	8005094 <LoopCopyDataInit>

0800508e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800508e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005092:	3304      	adds	r3, #4

08005094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005098:	d3f9      	bcc.n	800508e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800509a:	4a0b      	ldr	r2, [pc, #44]	; (80050c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800509c:	4c0b      	ldr	r4, [pc, #44]	; (80050cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800509e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050a0:	e001      	b.n	80050a6 <LoopFillZerobss>

080050a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050a4:	3204      	adds	r2, #4

080050a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050a8:	d3fb      	bcc.n	80050a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80050aa:	f7fd fb25 	bl	80026f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050ae:	f007 fa53 	bl	800c558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050b2:	f7fb ff2d 	bl	8000f10 <main>
  bx  lr    
 80050b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80050b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80050bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80050c4:	0800ea90 	.word	0x0800ea90
  ldr r2, =_sbss
 80050c8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80050cc:	200052d8 	.word	0x200052d8

080050d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050d0:	e7fe      	b.n	80050d0 <ADC_IRQHandler>
	...

080050d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050d8:	4b0e      	ldr	r3, [pc, #56]	; (8005114 <HAL_Init+0x40>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a0d      	ldr	r2, [pc, #52]	; (8005114 <HAL_Init+0x40>)
 80050de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80050e4:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <HAL_Init+0x40>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a0a      	ldr	r2, [pc, #40]	; (8005114 <HAL_Init+0x40>)
 80050ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050f0:	4b08      	ldr	r3, [pc, #32]	; (8005114 <HAL_Init+0x40>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a07      	ldr	r2, [pc, #28]	; (8005114 <HAL_Init+0x40>)
 80050f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050fc:	2003      	movs	r0, #3
 80050fe:	f000 f937 	bl	8005370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005102:	2000      	movs	r0, #0
 8005104:	f7fd fa34 	bl	8002570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005108:	f7fd f86a 	bl	80021e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	40023c00 	.word	0x40023c00

08005118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800511c:	4b06      	ldr	r3, [pc, #24]	; (8005138 <HAL_IncTick+0x20>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <HAL_IncTick+0x24>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4413      	add	r3, r2
 8005128:	4a04      	ldr	r2, [pc, #16]	; (800513c <HAL_IncTick+0x24>)
 800512a:	6013      	str	r3, [r2, #0]
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	2000000c 	.word	0x2000000c
 800513c:	20005284 	.word	0x20005284

08005140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  return uwTick;
 8005144:	4b03      	ldr	r3, [pc, #12]	; (8005154 <HAL_GetTick+0x14>)
 8005146:	681b      	ldr	r3, [r3, #0]
}
 8005148:	4618      	mov	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20005284 	.word	0x20005284

08005158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005160:	f7ff ffee 	bl	8005140 <HAL_GetTick>
 8005164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005170:	d005      	beq.n	800517e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <HAL_Delay+0x44>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800517e:	bf00      	nop
 8005180:	f7ff ffde 	bl	8005140 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	429a      	cmp	r2, r3
 800518e:	d8f7      	bhi.n	8005180 <HAL_Delay+0x28>
  {
  }
}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	2000000c 	.word	0x2000000c

080051a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <__NVIC_SetPriorityGrouping+0x44>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051bc:	4013      	ands	r3, r2
 80051be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051d2:	4a04      	ldr	r2, [pc, #16]	; (80051e4 <__NVIC_SetPriorityGrouping+0x44>)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	60d3      	str	r3, [r2, #12]
}
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	e000ed00 	.word	0xe000ed00

080051e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051ec:	4b04      	ldr	r3, [pc, #16]	; (8005200 <__NVIC_GetPriorityGrouping+0x18>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	0a1b      	lsrs	r3, r3, #8
 80051f2:	f003 0307 	and.w	r3, r3, #7
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	e000ed00 	.word	0xe000ed00

08005204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800520e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005212:	2b00      	cmp	r3, #0
 8005214:	db0b      	blt.n	800522e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	f003 021f 	and.w	r2, r3, #31
 800521c:	4907      	ldr	r1, [pc, #28]	; (800523c <__NVIC_EnableIRQ+0x38>)
 800521e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	2001      	movs	r0, #1
 8005226:	fa00 f202 	lsl.w	r2, r0, r2
 800522a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	e000e100 	.word	0xe000e100

08005240 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800524a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800524e:	2b00      	cmp	r3, #0
 8005250:	db12      	blt.n	8005278 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	f003 021f 	and.w	r2, r3, #31
 8005258:	490a      	ldr	r1, [pc, #40]	; (8005284 <__NVIC_DisableIRQ+0x44>)
 800525a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	2001      	movs	r0, #1
 8005262:	fa00 f202 	lsl.w	r2, r0, r2
 8005266:	3320      	adds	r3, #32
 8005268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800526c:	f3bf 8f4f 	dsb	sy
}
 8005270:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005272:	f3bf 8f6f 	isb	sy
}
 8005276:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	e000e100 	.word	0xe000e100

08005288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	6039      	str	r1, [r7, #0]
 8005292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005298:	2b00      	cmp	r3, #0
 800529a:	db0a      	blt.n	80052b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	490c      	ldr	r1, [pc, #48]	; (80052d4 <__NVIC_SetPriority+0x4c>)
 80052a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a6:	0112      	lsls	r2, r2, #4
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	440b      	add	r3, r1
 80052ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052b0:	e00a      	b.n	80052c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	4908      	ldr	r1, [pc, #32]	; (80052d8 <__NVIC_SetPriority+0x50>)
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	3b04      	subs	r3, #4
 80052c0:	0112      	lsls	r2, r2, #4
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	440b      	add	r3, r1
 80052c6:	761a      	strb	r2, [r3, #24]
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	e000e100 	.word	0xe000e100
 80052d8:	e000ed00 	.word	0xe000ed00

080052dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052dc:	b480      	push	{r7}
 80052de:	b089      	sub	sp, #36	; 0x24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f1c3 0307 	rsb	r3, r3, #7
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	bf28      	it	cs
 80052fa:	2304      	movcs	r3, #4
 80052fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	3304      	adds	r3, #4
 8005302:	2b06      	cmp	r3, #6
 8005304:	d902      	bls.n	800530c <NVIC_EncodePriority+0x30>
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	3b03      	subs	r3, #3
 800530a:	e000      	b.n	800530e <NVIC_EncodePriority+0x32>
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	43da      	mvns	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	401a      	ands	r2, r3
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005324:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	fa01 f303 	lsl.w	r3, r1, r3
 800532e:	43d9      	mvns	r1, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005334:	4313      	orrs	r3, r2
         );
}
 8005336:	4618      	mov	r0, r3
 8005338:	3724      	adds	r7, #36	; 0x24
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005348:	f3bf 8f4f 	dsb	sy
}
 800534c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800534e:	4b06      	ldr	r3, [pc, #24]	; (8005368 <__NVIC_SystemReset+0x24>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005356:	4904      	ldr	r1, [pc, #16]	; (8005368 <__NVIC_SystemReset+0x24>)
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <__NVIC_SystemReset+0x28>)
 800535a:	4313      	orrs	r3, r2
 800535c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800535e:	f3bf 8f4f 	dsb	sy
}
 8005362:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005364:	bf00      	nop
 8005366:	e7fd      	b.n	8005364 <__NVIC_SystemReset+0x20>
 8005368:	e000ed00 	.word	0xe000ed00
 800536c:	05fa0004 	.word	0x05fa0004

08005370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff ff11 	bl	80051a0 <__NVIC_SetPriorityGrouping>
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005386:	b580      	push	{r7, lr}
 8005388:	b086      	sub	sp, #24
 800538a:	af00      	add	r7, sp, #0
 800538c:	4603      	mov	r3, r0
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005394:	2300      	movs	r3, #0
 8005396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005398:	f7ff ff26 	bl	80051e8 <__NVIC_GetPriorityGrouping>
 800539c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	6978      	ldr	r0, [r7, #20]
 80053a4:	f7ff ff9a 	bl	80052dc <NVIC_EncodePriority>
 80053a8:	4602      	mov	r2, r0
 80053aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053ae:	4611      	mov	r1, r2
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff ff69 	bl	8005288 <__NVIC_SetPriority>
}
 80053b6:	bf00      	nop
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b082      	sub	sp, #8
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	4603      	mov	r3, r0
 80053c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff ff19 	bl	8005204 <__NVIC_EnableIRQ>
}
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	4603      	mov	r3, r0
 80053e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80053e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff ff29 	bl	8005240 <__NVIC_DisableIRQ>
}
 80053ee:	bf00      	nop
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80053fa:	f7ff ffa3 	bl	8005344 <__NVIC_SystemReset>
	...

08005400 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800540c:	f7ff fe98 	bl	8005140 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e099      	b.n	8005550 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0201 	bic.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800543c:	e00f      	b.n	800545e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800543e:	f7ff fe7f 	bl	8005140 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b05      	cmp	r3, #5
 800544a:	d908      	bls.n	800545e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2203      	movs	r2, #3
 8005456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e078      	b.n	8005550 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e8      	bne.n	800543e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4b38      	ldr	r3, [pc, #224]	; (8005558 <HAL_DMA_Init+0x158>)
 8005478:	4013      	ands	r3, r2
 800547a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800548a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005496:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d107      	bne.n	80054c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	4313      	orrs	r3, r2
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f023 0307 	bic.w	r3, r3, #7
 80054de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d117      	bne.n	8005522 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00e      	beq.n	8005522 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fa6f 	bl	80059e8 <DMA_CheckFifoParam>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2240      	movs	r2, #64	; 0x40
 8005514:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800551e:	2301      	movs	r3, #1
 8005520:	e016      	b.n	8005550 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fa26 	bl	800597c <DMA_CalcBaseAndBitshift>
 8005530:	4603      	mov	r3, r0
 8005532:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005538:	223f      	movs	r2, #63	; 0x3f
 800553a:	409a      	lsls	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	f010803f 	.word	0xf010803f

0800555c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005572:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_DMA_Start_IT+0x26>
 800557e:	2302      	movs	r3, #2
 8005580:	e040      	b.n	8005604 <HAL_DMA_Start_IT+0xa8>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b01      	cmp	r3, #1
 8005594:	d12f      	bne.n	80055f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2202      	movs	r2, #2
 800559a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f9b8 	bl	8005920 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b4:	223f      	movs	r2, #63	; 0x3f
 80055b6:	409a      	lsls	r2, r3
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0216 	orr.w	r2, r2, #22
 80055ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d007      	beq.n	80055e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0208 	orr.w	r2, r2, #8
 80055e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	e005      	b.n	8005602 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80055fe:	2302      	movs	r3, #2
 8005600:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005602:	7dfb      	ldrb	r3, [r7, #23]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005618:	4b92      	ldr	r3, [pc, #584]	; (8005864 <HAL_DMA_IRQHandler+0x258>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a92      	ldr	r2, [pc, #584]	; (8005868 <HAL_DMA_IRQHandler+0x25c>)
 800561e:	fba2 2303 	umull	r2, r3, r2, r3
 8005622:	0a9b      	lsrs	r3, r3, #10
 8005624:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005636:	2208      	movs	r2, #8
 8005638:	409a      	lsls	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4013      	ands	r3, r2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d01a      	beq.n	8005678 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b00      	cmp	r3, #0
 800564e:	d013      	beq.n	8005678 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0204 	bic.w	r2, r2, #4
 800565e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005664:	2208      	movs	r2, #8
 8005666:	409a      	lsls	r2, r3
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005670:	f043 0201 	orr.w	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800567c:	2201      	movs	r2, #1
 800567e:	409a      	lsls	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4013      	ands	r3, r2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d012      	beq.n	80056ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569a:	2201      	movs	r2, #1
 800569c:	409a      	lsls	r2, r3
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a6:	f043 0202 	orr.w	r2, r3, #2
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b2:	2204      	movs	r2, #4
 80056b4:	409a      	lsls	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d012      	beq.n	80056e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00b      	beq.n	80056e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d0:	2204      	movs	r2, #4
 80056d2:	409a      	lsls	r2, r3
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056dc:	f043 0204 	orr.w	r2, r3, #4
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e8:	2210      	movs	r2, #16
 80056ea:	409a      	lsls	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d043      	beq.n	800577c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d03c      	beq.n	800577c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005706:	2210      	movs	r2, #16
 8005708:	409a      	lsls	r2, r3
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d018      	beq.n	800574e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d108      	bne.n	800573c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	d024      	beq.n	800577c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	4798      	blx	r3
 800573a:	e01f      	b.n	800577c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01b      	beq.n	800577c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	4798      	blx	r3
 800574c:	e016      	b.n	800577c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d107      	bne.n	800576c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0208 	bic.w	r2, r2, #8
 800576a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005780:	2220      	movs	r2, #32
 8005782:	409a      	lsls	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4013      	ands	r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 808e 	beq.w	80058aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0310 	and.w	r3, r3, #16
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8086 	beq.w	80058aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a2:	2220      	movs	r2, #32
 80057a4:	409a      	lsls	r2, r3
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b05      	cmp	r3, #5
 80057b4:	d136      	bne.n	8005824 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0216 	bic.w	r2, r2, #22
 80057c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695a      	ldr	r2, [r3, #20]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d103      	bne.n	80057e6 <HAL_DMA_IRQHandler+0x1da>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d007      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0208 	bic.w	r2, r2, #8
 80057f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fa:	223f      	movs	r2, #63	; 0x3f
 80057fc:	409a      	lsls	r2, r3
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005816:	2b00      	cmp	r3, #0
 8005818:	d07d      	beq.n	8005916 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
        }
        return;
 8005822:	e078      	b.n	8005916 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01c      	beq.n	800586c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d108      	bne.n	8005852 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005844:	2b00      	cmp	r3, #0
 8005846:	d030      	beq.n	80058aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	4798      	blx	r3
 8005850:	e02b      	b.n	80058aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d027      	beq.n	80058aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	4798      	blx	r3
 8005862:	e022      	b.n	80058aa <HAL_DMA_IRQHandler+0x29e>
 8005864:	20000004 	.word	0x20000004
 8005868:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10f      	bne.n	800589a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0210 	bic.w	r2, r2, #16
 8005888:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d032      	beq.n	8005918 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d022      	beq.n	8005904 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2205      	movs	r2, #5
 80058c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0201 	bic.w	r2, r2, #1
 80058d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	3301      	adds	r3, #1
 80058da:	60bb      	str	r3, [r7, #8]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d307      	bcc.n	80058f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1f2      	bne.n	80058d6 <HAL_DMA_IRQHandler+0x2ca>
 80058f0:	e000      	b.n	80058f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80058f2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	4798      	blx	r3
 8005914:	e000      	b.n	8005918 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005916:	bf00      	nop
    }
  }
}
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop

08005920 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800593c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d108      	bne.n	8005960 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800595e:	e007      	b.n	8005970 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	60da      	str	r2, [r3, #12]
}
 8005970:	bf00      	nop
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	b2db      	uxtb	r3, r3
 800598a:	3b10      	subs	r3, #16
 800598c:	4a14      	ldr	r2, [pc, #80]	; (80059e0 <DMA_CalcBaseAndBitshift+0x64>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	091b      	lsrs	r3, r3, #4
 8005994:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005996:	4a13      	ldr	r2, [pc, #76]	; (80059e4 <DMA_CalcBaseAndBitshift+0x68>)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d909      	bls.n	80059be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80059b2:	f023 0303 	bic.w	r3, r3, #3
 80059b6:	1d1a      	adds	r2, r3, #4
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	659a      	str	r2, [r3, #88]	; 0x58
 80059bc:	e007      	b.n	80059ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	aaaaaaab 	.word	0xaaaaaaab
 80059e4:	0800e858 	.word	0x0800e858

080059e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d11f      	bne.n	8005a42 <DMA_CheckFifoParam+0x5a>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d856      	bhi.n	8005ab6 <DMA_CheckFifoParam+0xce>
 8005a08:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <DMA_CheckFifoParam+0x28>)
 8005a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0e:	bf00      	nop
 8005a10:	08005a21 	.word	0x08005a21
 8005a14:	08005a33 	.word	0x08005a33
 8005a18:	08005a21 	.word	0x08005a21
 8005a1c:	08005ab7 	.word	0x08005ab7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d046      	beq.n	8005aba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a30:	e043      	b.n	8005aba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a3a:	d140      	bne.n	8005abe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a40:	e03d      	b.n	8005abe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a4a:	d121      	bne.n	8005a90 <DMA_CheckFifoParam+0xa8>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d837      	bhi.n	8005ac2 <DMA_CheckFifoParam+0xda>
 8005a52:	a201      	add	r2, pc, #4	; (adr r2, 8005a58 <DMA_CheckFifoParam+0x70>)
 8005a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a58:	08005a69 	.word	0x08005a69
 8005a5c:	08005a6f 	.word	0x08005a6f
 8005a60:	08005a69 	.word	0x08005a69
 8005a64:	08005a81 	.word	0x08005a81
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a6c:	e030      	b.n	8005ad0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d025      	beq.n	8005ac6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a7e:	e022      	b.n	8005ac6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a88:	d11f      	bne.n	8005aca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a8e:	e01c      	b.n	8005aca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d903      	bls.n	8005a9e <DMA_CheckFifoParam+0xb6>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d003      	beq.n	8005aa4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a9c:	e018      	b.n	8005ad0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa2:	e015      	b.n	8005ad0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00e      	beq.n	8005ace <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ab4:	e00b      	b.n	8005ace <DMA_CheckFifoParam+0xe6>
      break;
 8005ab6:	bf00      	nop
 8005ab8:	e00a      	b.n	8005ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8005aba:	bf00      	nop
 8005abc:	e008      	b.n	8005ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8005abe:	bf00      	nop
 8005ac0:	e006      	b.n	8005ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8005ac2:	bf00      	nop
 8005ac4:	e004      	b.n	8005ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8005ac6:	bf00      	nop
 8005ac8:	e002      	b.n	8005ad0 <DMA_CheckFifoParam+0xe8>
      break;   
 8005aca:	bf00      	nop
 8005acc:	e000      	b.n	8005ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8005ace:	bf00      	nop
    }
  } 
  
  return status; 
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop

08005ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b089      	sub	sp, #36	; 0x24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	e165      	b.n	8005dc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005afc:	2201      	movs	r2, #1
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	f040 8154 	bne.w	8005dc2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d005      	beq.n	8005b32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d130      	bne.n	8005b94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43db      	mvns	r3, r3
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	4013      	ands	r3, r2
 8005b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	fa02 f303 	lsl.w	r3, r2, r3
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b68:	2201      	movs	r2, #1
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	43db      	mvns	r3, r3
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	4013      	ands	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	091b      	lsrs	r3, r3, #4
 8005b7e:	f003 0201 	and.w	r2, r3, #1
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f003 0303 	and.w	r3, r3, #3
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d017      	beq.n	8005bd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	2203      	movs	r2, #3
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f003 0303 	and.w	r3, r3, #3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d123      	bne.n	8005c24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	08da      	lsrs	r2, r3, #3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3208      	adds	r2, #8
 8005be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	220f      	movs	r2, #15
 8005bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	08da      	lsrs	r2, r3, #3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3208      	adds	r2, #8
 8005c1e:	69b9      	ldr	r1, [r7, #24]
 8005c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	2203      	movs	r2, #3
 8005c30:	fa02 f303 	lsl.w	r3, r2, r3
 8005c34:	43db      	mvns	r3, r3
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f003 0203 	and.w	r2, r3, #3
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 80ae 	beq.w	8005dc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	4b5d      	ldr	r3, [pc, #372]	; (8005de0 <HAL_GPIO_Init+0x300>)
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6e:	4a5c      	ldr	r2, [pc, #368]	; (8005de0 <HAL_GPIO_Init+0x300>)
 8005c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c74:	6453      	str	r3, [r2, #68]	; 0x44
 8005c76:	4b5a      	ldr	r3, [pc, #360]	; (8005de0 <HAL_GPIO_Init+0x300>)
 8005c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c82:	4a58      	ldr	r2, [pc, #352]	; (8005de4 <HAL_GPIO_Init+0x304>)
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	089b      	lsrs	r3, r3, #2
 8005c88:	3302      	adds	r3, #2
 8005c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	220f      	movs	r2, #15
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a4f      	ldr	r2, [pc, #316]	; (8005de8 <HAL_GPIO_Init+0x308>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d025      	beq.n	8005cfa <HAL_GPIO_Init+0x21a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a4e      	ldr	r2, [pc, #312]	; (8005dec <HAL_GPIO_Init+0x30c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01f      	beq.n	8005cf6 <HAL_GPIO_Init+0x216>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a4d      	ldr	r2, [pc, #308]	; (8005df0 <HAL_GPIO_Init+0x310>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d019      	beq.n	8005cf2 <HAL_GPIO_Init+0x212>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a4c      	ldr	r2, [pc, #304]	; (8005df4 <HAL_GPIO_Init+0x314>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d013      	beq.n	8005cee <HAL_GPIO_Init+0x20e>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a4b      	ldr	r2, [pc, #300]	; (8005df8 <HAL_GPIO_Init+0x318>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00d      	beq.n	8005cea <HAL_GPIO_Init+0x20a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a4a      	ldr	r2, [pc, #296]	; (8005dfc <HAL_GPIO_Init+0x31c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d007      	beq.n	8005ce6 <HAL_GPIO_Init+0x206>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a49      	ldr	r2, [pc, #292]	; (8005e00 <HAL_GPIO_Init+0x320>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d101      	bne.n	8005ce2 <HAL_GPIO_Init+0x202>
 8005cde:	2306      	movs	r3, #6
 8005ce0:	e00c      	b.n	8005cfc <HAL_GPIO_Init+0x21c>
 8005ce2:	2307      	movs	r3, #7
 8005ce4:	e00a      	b.n	8005cfc <HAL_GPIO_Init+0x21c>
 8005ce6:	2305      	movs	r3, #5
 8005ce8:	e008      	b.n	8005cfc <HAL_GPIO_Init+0x21c>
 8005cea:	2304      	movs	r3, #4
 8005cec:	e006      	b.n	8005cfc <HAL_GPIO_Init+0x21c>
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e004      	b.n	8005cfc <HAL_GPIO_Init+0x21c>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e002      	b.n	8005cfc <HAL_GPIO_Init+0x21c>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <HAL_GPIO_Init+0x21c>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	69fa      	ldr	r2, [r7, #28]
 8005cfe:	f002 0203 	and.w	r2, r2, #3
 8005d02:	0092      	lsls	r2, r2, #2
 8005d04:	4093      	lsls	r3, r2
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d0c:	4935      	ldr	r1, [pc, #212]	; (8005de4 <HAL_GPIO_Init+0x304>)
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	089b      	lsrs	r3, r3, #2
 8005d12:	3302      	adds	r3, #2
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d1a:	4b3a      	ldr	r3, [pc, #232]	; (8005e04 <HAL_GPIO_Init+0x324>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	43db      	mvns	r3, r3
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	4013      	ands	r3, r2
 8005d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d3e:	4a31      	ldr	r2, [pc, #196]	; (8005e04 <HAL_GPIO_Init+0x324>)
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005d44:	4b2f      	ldr	r3, [pc, #188]	; (8005e04 <HAL_GPIO_Init+0x324>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	4013      	ands	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d68:	4a26      	ldr	r2, [pc, #152]	; (8005e04 <HAL_GPIO_Init+0x324>)
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d6e:	4b25      	ldr	r3, [pc, #148]	; (8005e04 <HAL_GPIO_Init+0x324>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	43db      	mvns	r3, r3
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d92:	4a1c      	ldr	r2, [pc, #112]	; (8005e04 <HAL_GPIO_Init+0x324>)
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d98:	4b1a      	ldr	r3, [pc, #104]	; (8005e04 <HAL_GPIO_Init+0x324>)
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	43db      	mvns	r3, r3
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	4013      	ands	r3, r2
 8005da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005dbc:	4a11      	ldr	r2, [pc, #68]	; (8005e04 <HAL_GPIO_Init+0x324>)
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	2b0f      	cmp	r3, #15
 8005dcc:	f67f ae96 	bls.w	8005afc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005dd0:	bf00      	nop
 8005dd2:	bf00      	nop
 8005dd4:	3724      	adds	r7, #36	; 0x24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40023800 	.word	0x40023800
 8005de4:	40013800 	.word	0x40013800
 8005de8:	40020000 	.word	0x40020000
 8005dec:	40020400 	.word	0x40020400
 8005df0:	40020800 	.word	0x40020800
 8005df4:	40020c00 	.word	0x40020c00
 8005df8:	40021000 	.word	0x40021000
 8005dfc:	40021400 	.word	0x40021400
 8005e00:	40021800 	.word	0x40021800
 8005e04:	40013c00 	.word	0x40013c00

08005e08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691a      	ldr	r2, [r3, #16]
 8005e18:	887b      	ldrh	r3, [r7, #2]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e20:	2301      	movs	r3, #1
 8005e22:	73fb      	strb	r3, [r7, #15]
 8005e24:	e001      	b.n	8005e2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e26:	2300      	movs	r3, #0
 8005e28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	807b      	strh	r3, [r7, #2]
 8005e44:	4613      	mov	r3, r2
 8005e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e48:	787b      	ldrb	r3, [r7, #1]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e4e:	887a      	ldrh	r2, [r7, #2]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e54:	e003      	b.n	8005e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e56:	887b      	ldrh	r3, [r7, #2]
 8005e58:	041a      	lsls	r2, r3, #16
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	619a      	str	r2, [r3, #24]
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	460b      	mov	r3, r1
 8005e74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e7c:	887a      	ldrh	r2, [r7, #2]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4013      	ands	r3, r2
 8005e82:	041a      	lsls	r2, r3, #16
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	43d9      	mvns	r1, r3
 8005e88:	887b      	ldrh	r3, [r7, #2]
 8005e8a:	400b      	ands	r3, r1
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	619a      	str	r2, [r3, #24]
}
 8005e92:	bf00      	nop
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
	...

08005ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e0cc      	b.n	800604e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005eb4:	4b68      	ldr	r3, [pc, #416]	; (8006058 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 030f 	and.w	r3, r3, #15
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d90c      	bls.n	8005edc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ec2:	4b65      	ldr	r3, [pc, #404]	; (8006058 <HAL_RCC_ClockConfig+0x1b8>)
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eca:	4b63      	ldr	r3, [pc, #396]	; (8006058 <HAL_RCC_ClockConfig+0x1b8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d001      	beq.n	8005edc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e0b8      	b.n	800604e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d020      	beq.n	8005f2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d005      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ef4:	4b59      	ldr	r3, [pc, #356]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	4a58      	ldr	r2, [pc, #352]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005efe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f0c:	4b53      	ldr	r3, [pc, #332]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	4a52      	ldr	r2, [pc, #328]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f18:	4b50      	ldr	r3, [pc, #320]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	494d      	ldr	r1, [pc, #308]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d044      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d107      	bne.n	8005f4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f3e:	4b47      	ldr	r3, [pc, #284]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d119      	bne.n	8005f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e07f      	b.n	800604e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d003      	beq.n	8005f5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d107      	bne.n	8005f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f5e:	4b3f      	ldr	r3, [pc, #252]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d109      	bne.n	8005f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e06f      	b.n	800604e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f6e:	4b3b      	ldr	r3, [pc, #236]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e067      	b.n	800604e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f7e:	4b37      	ldr	r3, [pc, #220]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f023 0203 	bic.w	r2, r3, #3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	4934      	ldr	r1, [pc, #208]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f90:	f7ff f8d6 	bl	8005140 <HAL_GetTick>
 8005f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f96:	e00a      	b.n	8005fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f98:	f7ff f8d2 	bl	8005140 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e04f      	b.n	800604e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fae:	4b2b      	ldr	r3, [pc, #172]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 020c 	and.w	r2, r3, #12
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d1eb      	bne.n	8005f98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fc0:	4b25      	ldr	r3, [pc, #148]	; (8006058 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 030f 	and.w	r3, r3, #15
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d20c      	bcs.n	8005fe8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fce:	4b22      	ldr	r3, [pc, #136]	; (8006058 <HAL_RCC_ClockConfig+0x1b8>)
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	b2d2      	uxtb	r2, r2
 8005fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd6:	4b20      	ldr	r3, [pc, #128]	; (8006058 <HAL_RCC_ClockConfig+0x1b8>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d001      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e032      	b.n	800604e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d008      	beq.n	8006006 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ff4:	4b19      	ldr	r3, [pc, #100]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	4916      	ldr	r1, [pc, #88]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8006002:	4313      	orrs	r3, r2
 8006004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0308 	and.w	r3, r3, #8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d009      	beq.n	8006026 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006012:	4b12      	ldr	r3, [pc, #72]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	490e      	ldr	r1, [pc, #56]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8006022:	4313      	orrs	r3, r2
 8006024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006026:	f000 f887 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 800602a:	4602      	mov	r2, r0
 800602c:	4b0b      	ldr	r3, [pc, #44]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	091b      	lsrs	r3, r3, #4
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	490a      	ldr	r1, [pc, #40]	; (8006060 <HAL_RCC_ClockConfig+0x1c0>)
 8006038:	5ccb      	ldrb	r3, [r1, r3]
 800603a:	fa22 f303 	lsr.w	r3, r2, r3
 800603e:	4a09      	ldr	r2, [pc, #36]	; (8006064 <HAL_RCC_ClockConfig+0x1c4>)
 8006040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006042:	4b09      	ldr	r3, [pc, #36]	; (8006068 <HAL_RCC_ClockConfig+0x1c8>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f7fc fa92 	bl	8002570 <HAL_InitTick>

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	40023c00 	.word	0x40023c00
 800605c:	40023800 	.word	0x40023800
 8006060:	0800e830 	.word	0x0800e830
 8006064:	20000004 	.word	0x20000004
 8006068:	20000008 	.word	0x20000008

0800606c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006070:	4b03      	ldr	r3, [pc, #12]	; (8006080 <HAL_RCC_GetHCLKFreq+0x14>)
 8006072:	681b      	ldr	r3, [r3, #0]
}
 8006074:	4618      	mov	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20000004 	.word	0x20000004

08006084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006088:	f7ff fff0 	bl	800606c <HAL_RCC_GetHCLKFreq>
 800608c:	4602      	mov	r2, r0
 800608e:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	0a9b      	lsrs	r3, r3, #10
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	4903      	ldr	r1, [pc, #12]	; (80060a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800609a:	5ccb      	ldrb	r3, [r1, r3]
 800609c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	40023800 	.word	0x40023800
 80060a8:	0800e840 	.word	0x0800e840

080060ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060b0:	f7ff ffdc 	bl	800606c <HAL_RCC_GetHCLKFreq>
 80060b4:	4602      	mov	r2, r0
 80060b6:	4b05      	ldr	r3, [pc, #20]	; (80060cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	0b5b      	lsrs	r3, r3, #13
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	4903      	ldr	r1, [pc, #12]	; (80060d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060c2:	5ccb      	ldrb	r3, [r1, r3]
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40023800 	.word	0x40023800
 80060d0:	0800e840 	.word	0x0800e840

080060d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	220f      	movs	r2, #15
 80060e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80060e4:	4b12      	ldr	r3, [pc, #72]	; (8006130 <HAL_RCC_GetClockConfig+0x5c>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 0203 	and.w	r2, r3, #3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80060f0:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <HAL_RCC_GetClockConfig+0x5c>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80060fc:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <HAL_RCC_GetClockConfig+0x5c>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006108:	4b09      	ldr	r3, [pc, #36]	; (8006130 <HAL_RCC_GetClockConfig+0x5c>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	08db      	lsrs	r3, r3, #3
 800610e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006116:	4b07      	ldr	r3, [pc, #28]	; (8006134 <HAL_RCC_GetClockConfig+0x60>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 020f 	and.w	r2, r3, #15
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	601a      	str	r2, [r3, #0]
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	40023800 	.word	0x40023800
 8006134:	40023c00 	.word	0x40023c00

08006138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800613c:	b088      	sub	sp, #32
 800613e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8006148:	2300      	movs	r3, #0
 800614a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006154:	4bce      	ldr	r3, [pc, #824]	; (8006490 <HAL_RCC_GetSysClockFreq+0x358>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f003 030c 	and.w	r3, r3, #12
 800615c:	2b0c      	cmp	r3, #12
 800615e:	f200 818d 	bhi.w	800647c <HAL_RCC_GetSysClockFreq+0x344>
 8006162:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <HAL_RCC_GetSysClockFreq+0x30>)
 8006164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006168:	0800619d 	.word	0x0800619d
 800616c:	0800647d 	.word	0x0800647d
 8006170:	0800647d 	.word	0x0800647d
 8006174:	0800647d 	.word	0x0800647d
 8006178:	080061a3 	.word	0x080061a3
 800617c:	0800647d 	.word	0x0800647d
 8006180:	0800647d 	.word	0x0800647d
 8006184:	0800647d 	.word	0x0800647d
 8006188:	080061a9 	.word	0x080061a9
 800618c:	0800647d 	.word	0x0800647d
 8006190:	0800647d 	.word	0x0800647d
 8006194:	0800647d 	.word	0x0800647d
 8006198:	0800631d 	.word	0x0800631d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800619c:	4bbd      	ldr	r3, [pc, #756]	; (8006494 <HAL_RCC_GetSysClockFreq+0x35c>)
 800619e:	61bb      	str	r3, [r7, #24]
       break;
 80061a0:	e16f      	b.n	8006482 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061a2:	4bbd      	ldr	r3, [pc, #756]	; (8006498 <HAL_RCC_GetSysClockFreq+0x360>)
 80061a4:	61bb      	str	r3, [r7, #24]
      break;
 80061a6:	e16c      	b.n	8006482 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061a8:	4bb9      	ldr	r3, [pc, #740]	; (8006490 <HAL_RCC_GetSysClockFreq+0x358>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061b0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061b2:	4bb7      	ldr	r3, [pc, #732]	; (8006490 <HAL_RCC_GetSysClockFreq+0x358>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d053      	beq.n	8006266 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061be:	4bb4      	ldr	r3, [pc, #720]	; (8006490 <HAL_RCC_GetSysClockFreq+0x358>)
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	099b      	lsrs	r3, r3, #6
 80061c4:	461a      	mov	r2, r3
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061ce:	f04f 0100 	mov.w	r1, #0
 80061d2:	ea02 0400 	and.w	r4, r2, r0
 80061d6:	603c      	str	r4, [r7, #0]
 80061d8:	400b      	ands	r3, r1
 80061da:	607b      	str	r3, [r7, #4]
 80061dc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061e0:	4620      	mov	r0, r4
 80061e2:	4629      	mov	r1, r5
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	f04f 0300 	mov.w	r3, #0
 80061ec:	014b      	lsls	r3, r1, #5
 80061ee:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061f2:	0142      	lsls	r2, r0, #5
 80061f4:	4610      	mov	r0, r2
 80061f6:	4619      	mov	r1, r3
 80061f8:	4623      	mov	r3, r4
 80061fa:	1ac0      	subs	r0, r0, r3
 80061fc:	462b      	mov	r3, r5
 80061fe:	eb61 0103 	sbc.w	r1, r1, r3
 8006202:	f04f 0200 	mov.w	r2, #0
 8006206:	f04f 0300 	mov.w	r3, #0
 800620a:	018b      	lsls	r3, r1, #6
 800620c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006210:	0182      	lsls	r2, r0, #6
 8006212:	1a12      	subs	r2, r2, r0
 8006214:	eb63 0301 	sbc.w	r3, r3, r1
 8006218:	f04f 0000 	mov.w	r0, #0
 800621c:	f04f 0100 	mov.w	r1, #0
 8006220:	00d9      	lsls	r1, r3, #3
 8006222:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006226:	00d0      	lsls	r0, r2, #3
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4621      	mov	r1, r4
 800622e:	1852      	adds	r2, r2, r1
 8006230:	4629      	mov	r1, r5
 8006232:	eb43 0101 	adc.w	r1, r3, r1
 8006236:	460b      	mov	r3, r1
 8006238:	f04f 0000 	mov.w	r0, #0
 800623c:	f04f 0100 	mov.w	r1, #0
 8006240:	0259      	lsls	r1, r3, #9
 8006242:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006246:	0250      	lsls	r0, r2, #9
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	4610      	mov	r0, r2
 800624e:	4619      	mov	r1, r3
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	461a      	mov	r2, r3
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	f7fa fcde 	bl	8000c18 <__aeabi_uldivmod>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4613      	mov	r3, r2
 8006262:	61fb      	str	r3, [r7, #28]
 8006264:	e04c      	b.n	8006300 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006266:	4b8a      	ldr	r3, [pc, #552]	; (8006490 <HAL_RCC_GetSysClockFreq+0x358>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	099b      	lsrs	r3, r3, #6
 800626c:	461a      	mov	r2, r3
 800626e:	f04f 0300 	mov.w	r3, #0
 8006272:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006276:	f04f 0100 	mov.w	r1, #0
 800627a:	ea02 0a00 	and.w	sl, r2, r0
 800627e:	ea03 0b01 	and.w	fp, r3, r1
 8006282:	4650      	mov	r0, sl
 8006284:	4659      	mov	r1, fp
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	014b      	lsls	r3, r1, #5
 8006290:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006294:	0142      	lsls	r2, r0, #5
 8006296:	4610      	mov	r0, r2
 8006298:	4619      	mov	r1, r3
 800629a:	ebb0 000a 	subs.w	r0, r0, sl
 800629e:	eb61 010b 	sbc.w	r1, r1, fp
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	f04f 0300 	mov.w	r3, #0
 80062aa:	018b      	lsls	r3, r1, #6
 80062ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80062b0:	0182      	lsls	r2, r0, #6
 80062b2:	1a12      	subs	r2, r2, r0
 80062b4:	eb63 0301 	sbc.w	r3, r3, r1
 80062b8:	f04f 0000 	mov.w	r0, #0
 80062bc:	f04f 0100 	mov.w	r1, #0
 80062c0:	00d9      	lsls	r1, r3, #3
 80062c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062c6:	00d0      	lsls	r0, r2, #3
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	eb12 020a 	adds.w	r2, r2, sl
 80062d0:	eb43 030b 	adc.w	r3, r3, fp
 80062d4:	f04f 0000 	mov.w	r0, #0
 80062d8:	f04f 0100 	mov.w	r1, #0
 80062dc:	0299      	lsls	r1, r3, #10
 80062de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80062e2:	0290      	lsls	r0, r2, #10
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4610      	mov	r0, r2
 80062ea:	4619      	mov	r1, r3
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	461a      	mov	r2, r3
 80062f0:	f04f 0300 	mov.w	r3, #0
 80062f4:	f7fa fc90 	bl	8000c18 <__aeabi_uldivmod>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4613      	mov	r3, r2
 80062fe:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006300:	4b63      	ldr	r3, [pc, #396]	; (8006490 <HAL_RCC_GetSysClockFreq+0x358>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	0c1b      	lsrs	r3, r3, #16
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	3301      	adds	r3, #1
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8006310:	69fa      	ldr	r2, [r7, #28]
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	fbb2 f3f3 	udiv	r3, r2, r3
 8006318:	61bb      	str	r3, [r7, #24]
      break;
 800631a:	e0b2      	b.n	8006482 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800631c:	4b5c      	ldr	r3, [pc, #368]	; (8006490 <HAL_RCC_GetSysClockFreq+0x358>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006324:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006326:	4b5a      	ldr	r3, [pc, #360]	; (8006490 <HAL_RCC_GetSysClockFreq+0x358>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d04d      	beq.n	80063ce <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006332:	4b57      	ldr	r3, [pc, #348]	; (8006490 <HAL_RCC_GetSysClockFreq+0x358>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	099b      	lsrs	r3, r3, #6
 8006338:	461a      	mov	r2, r3
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006342:	f04f 0100 	mov.w	r1, #0
 8006346:	ea02 0800 	and.w	r8, r2, r0
 800634a:	ea03 0901 	and.w	r9, r3, r1
 800634e:	4640      	mov	r0, r8
 8006350:	4649      	mov	r1, r9
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	f04f 0300 	mov.w	r3, #0
 800635a:	014b      	lsls	r3, r1, #5
 800635c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006360:	0142      	lsls	r2, r0, #5
 8006362:	4610      	mov	r0, r2
 8006364:	4619      	mov	r1, r3
 8006366:	ebb0 0008 	subs.w	r0, r0, r8
 800636a:	eb61 0109 	sbc.w	r1, r1, r9
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	f04f 0300 	mov.w	r3, #0
 8006376:	018b      	lsls	r3, r1, #6
 8006378:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800637c:	0182      	lsls	r2, r0, #6
 800637e:	1a12      	subs	r2, r2, r0
 8006380:	eb63 0301 	sbc.w	r3, r3, r1
 8006384:	f04f 0000 	mov.w	r0, #0
 8006388:	f04f 0100 	mov.w	r1, #0
 800638c:	00d9      	lsls	r1, r3, #3
 800638e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006392:	00d0      	lsls	r0, r2, #3
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	eb12 0208 	adds.w	r2, r2, r8
 800639c:	eb43 0309 	adc.w	r3, r3, r9
 80063a0:	f04f 0000 	mov.w	r0, #0
 80063a4:	f04f 0100 	mov.w	r1, #0
 80063a8:	0259      	lsls	r1, r3, #9
 80063aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80063ae:	0250      	lsls	r0, r2, #9
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4610      	mov	r0, r2
 80063b6:	4619      	mov	r1, r3
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	461a      	mov	r2, r3
 80063bc:	f04f 0300 	mov.w	r3, #0
 80063c0:	f7fa fc2a 	bl	8000c18 <__aeabi_uldivmod>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4613      	mov	r3, r2
 80063ca:	61fb      	str	r3, [r7, #28]
 80063cc:	e04a      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063ce:	4b30      	ldr	r3, [pc, #192]	; (8006490 <HAL_RCC_GetSysClockFreq+0x358>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	099b      	lsrs	r3, r3, #6
 80063d4:	461a      	mov	r2, r3
 80063d6:	f04f 0300 	mov.w	r3, #0
 80063da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80063de:	f04f 0100 	mov.w	r1, #0
 80063e2:	ea02 0400 	and.w	r4, r2, r0
 80063e6:	ea03 0501 	and.w	r5, r3, r1
 80063ea:	4620      	mov	r0, r4
 80063ec:	4629      	mov	r1, r5
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	014b      	lsls	r3, r1, #5
 80063f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80063fc:	0142      	lsls	r2, r0, #5
 80063fe:	4610      	mov	r0, r2
 8006400:	4619      	mov	r1, r3
 8006402:	1b00      	subs	r0, r0, r4
 8006404:	eb61 0105 	sbc.w	r1, r1, r5
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	018b      	lsls	r3, r1, #6
 8006412:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006416:	0182      	lsls	r2, r0, #6
 8006418:	1a12      	subs	r2, r2, r0
 800641a:	eb63 0301 	sbc.w	r3, r3, r1
 800641e:	f04f 0000 	mov.w	r0, #0
 8006422:	f04f 0100 	mov.w	r1, #0
 8006426:	00d9      	lsls	r1, r3, #3
 8006428:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800642c:	00d0      	lsls	r0, r2, #3
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	1912      	adds	r2, r2, r4
 8006434:	eb45 0303 	adc.w	r3, r5, r3
 8006438:	f04f 0000 	mov.w	r0, #0
 800643c:	f04f 0100 	mov.w	r1, #0
 8006440:	0299      	lsls	r1, r3, #10
 8006442:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006446:	0290      	lsls	r0, r2, #10
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4610      	mov	r0, r2
 800644e:	4619      	mov	r1, r3
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	461a      	mov	r2, r3
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	f7fa fbde 	bl	8000c18 <__aeabi_uldivmod>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4613      	mov	r3, r2
 8006462:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006464:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <HAL_RCC_GetSysClockFreq+0x358>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	0f1b      	lsrs	r3, r3, #28
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8006470:	69fa      	ldr	r2, [r7, #28]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	fbb2 f3f3 	udiv	r3, r2, r3
 8006478:	61bb      	str	r3, [r7, #24]
      break;
 800647a:	e002      	b.n	8006482 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800647c:	4b05      	ldr	r3, [pc, #20]	; (8006494 <HAL_RCC_GetSysClockFreq+0x35c>)
 800647e:	61bb      	str	r3, [r7, #24]
      break;
 8006480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006482:	69bb      	ldr	r3, [r7, #24]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3720      	adds	r7, #32
 8006488:	46bd      	mov	sp, r7
 800648a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800648e:	bf00      	nop
 8006490:	40023800 	.word	0x40023800
 8006494:	00f42400 	.word	0x00f42400
 8006498:	007a1200 	.word	0x007a1200

0800649c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e28d      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 8083 	beq.w	80065c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80064bc:	4b94      	ldr	r3, [pc, #592]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 030c 	and.w	r3, r3, #12
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d019      	beq.n	80064fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80064c8:	4b91      	ldr	r3, [pc, #580]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d106      	bne.n	80064e2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80064d4:	4b8e      	ldr	r3, [pc, #568]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064e0:	d00c      	beq.n	80064fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064e2:	4b8b      	ldr	r3, [pc, #556]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80064ea:	2b0c      	cmp	r3, #12
 80064ec:	d112      	bne.n	8006514 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064ee:	4b88      	ldr	r3, [pc, #544]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064fa:	d10b      	bne.n	8006514 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064fc:	4b84      	ldr	r3, [pc, #528]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d05b      	beq.n	80065c0 <HAL_RCC_OscConfig+0x124>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d157      	bne.n	80065c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e25a      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800651c:	d106      	bne.n	800652c <HAL_RCC_OscConfig+0x90>
 800651e:	4b7c      	ldr	r3, [pc, #496]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a7b      	ldr	r2, [pc, #492]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 8006524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	e01d      	b.n	8006568 <HAL_RCC_OscConfig+0xcc>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006534:	d10c      	bne.n	8006550 <HAL_RCC_OscConfig+0xb4>
 8006536:	4b76      	ldr	r3, [pc, #472]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a75      	ldr	r2, [pc, #468]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 800653c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	4b73      	ldr	r3, [pc, #460]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a72      	ldr	r2, [pc, #456]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 8006548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	e00b      	b.n	8006568 <HAL_RCC_OscConfig+0xcc>
 8006550:	4b6f      	ldr	r3, [pc, #444]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a6e      	ldr	r2, [pc, #440]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 8006556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800655a:	6013      	str	r3, [r2, #0]
 800655c:	4b6c      	ldr	r3, [pc, #432]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a6b      	ldr	r2, [pc, #428]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 8006562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d013      	beq.n	8006598 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006570:	f7fe fde6 	bl	8005140 <HAL_GetTick>
 8006574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006578:	f7fe fde2 	bl	8005140 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b64      	cmp	r3, #100	; 0x64
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e21f      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800658a:	4b61      	ldr	r3, [pc, #388]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0f0      	beq.n	8006578 <HAL_RCC_OscConfig+0xdc>
 8006596:	e014      	b.n	80065c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006598:	f7fe fdd2 	bl	8005140 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065a0:	f7fe fdce 	bl	8005140 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b64      	cmp	r3, #100	; 0x64
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e20b      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065b2:	4b57      	ldr	r3, [pc, #348]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1f0      	bne.n	80065a0 <HAL_RCC_OscConfig+0x104>
 80065be:	e000      	b.n	80065c2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d06f      	beq.n	80066ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80065ce:	4b50      	ldr	r3, [pc, #320]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 030c 	and.w	r3, r3, #12
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d017      	beq.n	800660a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80065da:	4b4d      	ldr	r3, [pc, #308]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	d105      	bne.n	80065f2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80065e6:	4b4a      	ldr	r3, [pc, #296]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00b      	beq.n	800660a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065f2:	4b47      	ldr	r3, [pc, #284]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80065fa:	2b0c      	cmp	r3, #12
 80065fc:	d11c      	bne.n	8006638 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065fe:	4b44      	ldr	r3, [pc, #272]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d116      	bne.n	8006638 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800660a:	4b41      	ldr	r3, [pc, #260]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <HAL_RCC_OscConfig+0x186>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d001      	beq.n	8006622 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e1d3      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006622:	4b3b      	ldr	r3, [pc, #236]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	4937      	ldr	r1, [pc, #220]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 8006632:	4313      	orrs	r3, r2
 8006634:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006636:	e03a      	b.n	80066ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d020      	beq.n	8006682 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006640:	4b34      	ldr	r3, [pc, #208]	; (8006714 <HAL_RCC_OscConfig+0x278>)
 8006642:	2201      	movs	r2, #1
 8006644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006646:	f7fe fd7b 	bl	8005140 <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800664c:	e008      	b.n	8006660 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800664e:	f7fe fd77 	bl	8005140 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e1b4      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006660:	4b2b      	ldr	r3, [pc, #172]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0f0      	beq.n	800664e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800666c:	4b28      	ldr	r3, [pc, #160]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	4925      	ldr	r1, [pc, #148]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 800667c:	4313      	orrs	r3, r2
 800667e:	600b      	str	r3, [r1, #0]
 8006680:	e015      	b.n	80066ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006682:	4b24      	ldr	r3, [pc, #144]	; (8006714 <HAL_RCC_OscConfig+0x278>)
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006688:	f7fe fd5a 	bl	8005140 <HAL_GetTick>
 800668c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800668e:	e008      	b.n	80066a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006690:	f7fe fd56 	bl	8005140 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e193      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066a2:	4b1b      	ldr	r3, [pc, #108]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f0      	bne.n	8006690 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0308 	and.w	r3, r3, #8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d036      	beq.n	8006728 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d016      	beq.n	80066f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066c2:	4b15      	ldr	r3, [pc, #84]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 80066c4:	2201      	movs	r2, #1
 80066c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c8:	f7fe fd3a 	bl	8005140 <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066d0:	f7fe fd36 	bl	8005140 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e173      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066e2:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <HAL_RCC_OscConfig+0x274>)
 80066e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0f0      	beq.n	80066d0 <HAL_RCC_OscConfig+0x234>
 80066ee:	e01b      	b.n	8006728 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066f0:	4b09      	ldr	r3, [pc, #36]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f6:	f7fe fd23 	bl	8005140 <HAL_GetTick>
 80066fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066fc:	e00e      	b.n	800671c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066fe:	f7fe fd1f 	bl	8005140 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d907      	bls.n	800671c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e15c      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
 8006710:	40023800 	.word	0x40023800
 8006714:	42470000 	.word	0x42470000
 8006718:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800671c:	4b8a      	ldr	r3, [pc, #552]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 800671e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1ea      	bne.n	80066fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 8097 	beq.w	8006864 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006736:	2300      	movs	r3, #0
 8006738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800673a:	4b83      	ldr	r3, [pc, #524]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10f      	bne.n	8006766 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006746:	2300      	movs	r3, #0
 8006748:	60bb      	str	r3, [r7, #8]
 800674a:	4b7f      	ldr	r3, [pc, #508]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 800674c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674e:	4a7e      	ldr	r2, [pc, #504]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 8006750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006754:	6413      	str	r3, [r2, #64]	; 0x40
 8006756:	4b7c      	ldr	r3, [pc, #496]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800675e:	60bb      	str	r3, [r7, #8]
 8006760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006762:	2301      	movs	r3, #1
 8006764:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006766:	4b79      	ldr	r3, [pc, #484]	; (800694c <HAL_RCC_OscConfig+0x4b0>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676e:	2b00      	cmp	r3, #0
 8006770:	d118      	bne.n	80067a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006772:	4b76      	ldr	r3, [pc, #472]	; (800694c <HAL_RCC_OscConfig+0x4b0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a75      	ldr	r2, [pc, #468]	; (800694c <HAL_RCC_OscConfig+0x4b0>)
 8006778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800677c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800677e:	f7fe fcdf 	bl	8005140 <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006786:	f7fe fcdb 	bl	8005140 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e118      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006798:	4b6c      	ldr	r3, [pc, #432]	; (800694c <HAL_RCC_OscConfig+0x4b0>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0f0      	beq.n	8006786 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d106      	bne.n	80067ba <HAL_RCC_OscConfig+0x31e>
 80067ac:	4b66      	ldr	r3, [pc, #408]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 80067ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b0:	4a65      	ldr	r2, [pc, #404]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 80067b2:	f043 0301 	orr.w	r3, r3, #1
 80067b6:	6713      	str	r3, [r2, #112]	; 0x70
 80067b8:	e01c      	b.n	80067f4 <HAL_RCC_OscConfig+0x358>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	2b05      	cmp	r3, #5
 80067c0:	d10c      	bne.n	80067dc <HAL_RCC_OscConfig+0x340>
 80067c2:	4b61      	ldr	r3, [pc, #388]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 80067c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c6:	4a60      	ldr	r2, [pc, #384]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 80067c8:	f043 0304 	orr.w	r3, r3, #4
 80067cc:	6713      	str	r3, [r2, #112]	; 0x70
 80067ce:	4b5e      	ldr	r3, [pc, #376]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 80067d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d2:	4a5d      	ldr	r2, [pc, #372]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 80067d4:	f043 0301 	orr.w	r3, r3, #1
 80067d8:	6713      	str	r3, [r2, #112]	; 0x70
 80067da:	e00b      	b.n	80067f4 <HAL_RCC_OscConfig+0x358>
 80067dc:	4b5a      	ldr	r3, [pc, #360]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 80067de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e0:	4a59      	ldr	r2, [pc, #356]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 80067e2:	f023 0301 	bic.w	r3, r3, #1
 80067e6:	6713      	str	r3, [r2, #112]	; 0x70
 80067e8:	4b57      	ldr	r3, [pc, #348]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 80067ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ec:	4a56      	ldr	r2, [pc, #344]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 80067ee:	f023 0304 	bic.w	r3, r3, #4
 80067f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d015      	beq.n	8006828 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067fc:	f7fe fca0 	bl	8005140 <HAL_GetTick>
 8006800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006802:	e00a      	b.n	800681a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006804:	f7fe fc9c 	bl	8005140 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006812:	4293      	cmp	r3, r2
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e0d7      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800681a:	4b4b      	ldr	r3, [pc, #300]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 800681c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0ee      	beq.n	8006804 <HAL_RCC_OscConfig+0x368>
 8006826:	e014      	b.n	8006852 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006828:	f7fe fc8a 	bl	8005140 <HAL_GetTick>
 800682c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800682e:	e00a      	b.n	8006846 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006830:	f7fe fc86 	bl	8005140 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	f241 3288 	movw	r2, #5000	; 0x1388
 800683e:	4293      	cmp	r3, r2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e0c1      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006846:	4b40      	ldr	r3, [pc, #256]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 8006848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1ee      	bne.n	8006830 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006852:	7dfb      	ldrb	r3, [r7, #23]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d105      	bne.n	8006864 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006858:	4b3b      	ldr	r3, [pc, #236]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 800685a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685c:	4a3a      	ldr	r2, [pc, #232]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 800685e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006862:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 80ad 	beq.w	80069c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800686e:	4b36      	ldr	r3, [pc, #216]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 030c 	and.w	r3, r3, #12
 8006876:	2b08      	cmp	r3, #8
 8006878:	d060      	beq.n	800693c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	2b02      	cmp	r3, #2
 8006880:	d145      	bne.n	800690e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006882:	4b33      	ldr	r3, [pc, #204]	; (8006950 <HAL_RCC_OscConfig+0x4b4>)
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006888:	f7fe fc5a 	bl	8005140 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006890:	f7fe fc56 	bl	8005140 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e093      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068a2:	4b29      	ldr	r3, [pc, #164]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1f0      	bne.n	8006890 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	69da      	ldr	r2, [r3, #28]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	431a      	orrs	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	019b      	lsls	r3, r3, #6
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	085b      	lsrs	r3, r3, #1
 80068c6:	3b01      	subs	r3, #1
 80068c8:	041b      	lsls	r3, r3, #16
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d0:	061b      	lsls	r3, r3, #24
 80068d2:	431a      	orrs	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d8:	071b      	lsls	r3, r3, #28
 80068da:	491b      	ldr	r1, [pc, #108]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068e0:	4b1b      	ldr	r3, [pc, #108]	; (8006950 <HAL_RCC_OscConfig+0x4b4>)
 80068e2:	2201      	movs	r2, #1
 80068e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e6:	f7fe fc2b 	bl	8005140 <HAL_GetTick>
 80068ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ec:	e008      	b.n	8006900 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068ee:	f7fe fc27 	bl	8005140 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d901      	bls.n	8006900 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e064      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006900:	4b11      	ldr	r3, [pc, #68]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d0f0      	beq.n	80068ee <HAL_RCC_OscConfig+0x452>
 800690c:	e05c      	b.n	80069c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800690e:	4b10      	ldr	r3, [pc, #64]	; (8006950 <HAL_RCC_OscConfig+0x4b4>)
 8006910:	2200      	movs	r2, #0
 8006912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006914:	f7fe fc14 	bl	8005140 <HAL_GetTick>
 8006918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800691a:	e008      	b.n	800692e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800691c:	f7fe fc10 	bl	8005140 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b02      	cmp	r3, #2
 8006928:	d901      	bls.n	800692e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e04d      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800692e:	4b06      	ldr	r3, [pc, #24]	; (8006948 <HAL_RCC_OscConfig+0x4ac>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1f0      	bne.n	800691c <HAL_RCC_OscConfig+0x480>
 800693a:	e045      	b.n	80069c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d107      	bne.n	8006954 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e040      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
 8006948:	40023800 	.word	0x40023800
 800694c:	40007000 	.word	0x40007000
 8006950:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006954:	4b1f      	ldr	r3, [pc, #124]	; (80069d4 <HAL_RCC_OscConfig+0x538>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d030      	beq.n	80069c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800696c:	429a      	cmp	r2, r3
 800696e:	d129      	bne.n	80069c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800697a:	429a      	cmp	r2, r3
 800697c:	d122      	bne.n	80069c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006984:	4013      	ands	r3, r2
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800698a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800698c:	4293      	cmp	r3, r2
 800698e:	d119      	bne.n	80069c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699a:	085b      	lsrs	r3, r3, #1
 800699c:	3b01      	subs	r3, #1
 800699e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d10f      	bne.n	80069c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d107      	bne.n	80069c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d001      	beq.n	80069c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e000      	b.n	80069ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	40023800 	.word	0x40023800

080069d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e04c      	b.n	8006a84 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d111      	bne.n	8006a1a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f001 f968 	bl	8007cd4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d102      	bne.n	8006a12 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a1f      	ldr	r2, [pc, #124]	; (8006a8c <HAL_TIM_Base_Init+0xb4>)
 8006a10:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	f000 fe41 	bl	80076b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	08002375 	.word	0x08002375

08006a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d001      	beq.n	8006aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e04e      	b.n	8006b46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a23      	ldr	r2, [pc, #140]	; (8006b54 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d022      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x80>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad2:	d01d      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x80>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a1f      	ldr	r2, [pc, #124]	; (8006b58 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d018      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x80>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a1e      	ldr	r2, [pc, #120]	; (8006b5c <HAL_TIM_Base_Start_IT+0xcc>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d013      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x80>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a1c      	ldr	r2, [pc, #112]	; (8006b60 <HAL_TIM_Base_Start_IT+0xd0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00e      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x80>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1b      	ldr	r2, [pc, #108]	; (8006b64 <HAL_TIM_Base_Start_IT+0xd4>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d009      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x80>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a19      	ldr	r2, [pc, #100]	; (8006b68 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d004      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x80>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a18      	ldr	r2, [pc, #96]	; (8006b6c <HAL_TIM_Base_Start_IT+0xdc>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d111      	bne.n	8006b34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b06      	cmp	r3, #6
 8006b20:	d010      	beq.n	8006b44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f042 0201 	orr.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b32:	e007      	b.n	8006b44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f042 0201 	orr.w	r2, r2, #1
 8006b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	40010000 	.word	0x40010000
 8006b58:	40000400 	.word	0x40000400
 8006b5c:	40000800 	.word	0x40000800
 8006b60:	40000c00 	.word	0x40000c00
 8006b64:	40010400 	.word	0x40010400
 8006b68:	40014000 	.word	0x40014000
 8006b6c:	40001800 	.word	0x40001800

08006b70 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0201 	bic.w	r2, r2, #1
 8006b86:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6a1a      	ldr	r2, [r3, #32]
 8006b8e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b92:	4013      	ands	r3, r2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10f      	bne.n	8006bb8 <HAL_TIM_Base_Stop_IT+0x48>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6a1a      	ldr	r2, [r3, #32]
 8006b9e:	f240 4344 	movw	r3, #1092	; 0x444
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d107      	bne.n	8006bb8 <HAL_TIM_Base_Stop_IT+0x48>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
	...

08006bd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e04c      	b.n	8006c7c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d111      	bne.n	8006c12 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 f86c 	bl	8007cd4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d102      	bne.n	8006c0a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a1f      	ldr	r2, [pc, #124]	; (8006c84 <HAL_TIM_PWM_Init+0xb4>)
 8006c08:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2202      	movs	r2, #2
 8006c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3304      	adds	r3, #4
 8006c22:	4619      	mov	r1, r3
 8006c24:	4610      	mov	r0, r2
 8006c26:	f000 fd45 	bl	80076b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	08002239 	.word	0x08002239

08006c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d109      	bne.n	8006cac <HAL_TIM_PWM_Start+0x24>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	bf14      	ite	ne
 8006ca4:	2301      	movne	r3, #1
 8006ca6:	2300      	moveq	r3, #0
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	e022      	b.n	8006cf2 <HAL_TIM_PWM_Start+0x6a>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d109      	bne.n	8006cc6 <HAL_TIM_PWM_Start+0x3e>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	bf14      	ite	ne
 8006cbe:	2301      	movne	r3, #1
 8006cc0:	2300      	moveq	r3, #0
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	e015      	b.n	8006cf2 <HAL_TIM_PWM_Start+0x6a>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d109      	bne.n	8006ce0 <HAL_TIM_PWM_Start+0x58>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	bf14      	ite	ne
 8006cd8:	2301      	movne	r3, #1
 8006cda:	2300      	moveq	r3, #0
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	e008      	b.n	8006cf2 <HAL_TIM_PWM_Start+0x6a>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	bf14      	ite	ne
 8006cec:	2301      	movne	r3, #1
 8006cee:	2300      	moveq	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e07c      	b.n	8006df4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d104      	bne.n	8006d0a <HAL_TIM_PWM_Start+0x82>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d08:	e013      	b.n	8006d32 <HAL_TIM_PWM_Start+0xaa>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d104      	bne.n	8006d1a <HAL_TIM_PWM_Start+0x92>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d18:	e00b      	b.n	8006d32 <HAL_TIM_PWM_Start+0xaa>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d104      	bne.n	8006d2a <HAL_TIM_PWM_Start+0xa2>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d28:	e003      	b.n	8006d32 <HAL_TIM_PWM_Start+0xaa>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2201      	movs	r2, #1
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 ffa4 	bl	8007c88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a2d      	ldr	r2, [pc, #180]	; (8006dfc <HAL_TIM_PWM_Start+0x174>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d004      	beq.n	8006d54 <HAL_TIM_PWM_Start+0xcc>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a2c      	ldr	r2, [pc, #176]	; (8006e00 <HAL_TIM_PWM_Start+0x178>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d101      	bne.n	8006d58 <HAL_TIM_PWM_Start+0xd0>
 8006d54:	2301      	movs	r3, #1
 8006d56:	e000      	b.n	8006d5a <HAL_TIM_PWM_Start+0xd2>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d007      	beq.n	8006d6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a22      	ldr	r2, [pc, #136]	; (8006dfc <HAL_TIM_PWM_Start+0x174>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d022      	beq.n	8006dbe <HAL_TIM_PWM_Start+0x136>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d80:	d01d      	beq.n	8006dbe <HAL_TIM_PWM_Start+0x136>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a1f      	ldr	r2, [pc, #124]	; (8006e04 <HAL_TIM_PWM_Start+0x17c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d018      	beq.n	8006dbe <HAL_TIM_PWM_Start+0x136>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a1d      	ldr	r2, [pc, #116]	; (8006e08 <HAL_TIM_PWM_Start+0x180>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d013      	beq.n	8006dbe <HAL_TIM_PWM_Start+0x136>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a1c      	ldr	r2, [pc, #112]	; (8006e0c <HAL_TIM_PWM_Start+0x184>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d00e      	beq.n	8006dbe <HAL_TIM_PWM_Start+0x136>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a16      	ldr	r2, [pc, #88]	; (8006e00 <HAL_TIM_PWM_Start+0x178>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d009      	beq.n	8006dbe <HAL_TIM_PWM_Start+0x136>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a18      	ldr	r2, [pc, #96]	; (8006e10 <HAL_TIM_PWM_Start+0x188>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d004      	beq.n	8006dbe <HAL_TIM_PWM_Start+0x136>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a16      	ldr	r2, [pc, #88]	; (8006e14 <HAL_TIM_PWM_Start+0x18c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d111      	bne.n	8006de2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f003 0307 	and.w	r3, r3, #7
 8006dc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2b06      	cmp	r3, #6
 8006dce:	d010      	beq.n	8006df2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de0:	e007      	b.n	8006df2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f042 0201 	orr.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	40010000 	.word	0x40010000
 8006e00:	40010400 	.word	0x40010400
 8006e04:	40000400 	.word	0x40000400
 8006e08:	40000800 	.word	0x40000800
 8006e0c:	40000c00 	.word	0x40000c00
 8006e10:	40014000 	.word	0x40014000
 8006e14:	40001800 	.word	0x40001800

08006e18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e0a2      	b.n	8006f72 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d111      	bne.n	8006e5c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 ff47 	bl	8007cd4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d102      	bne.n	8006e54 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a4a      	ldr	r2, [pc, #296]	; (8006f7c <HAL_TIM_Encoder_Init+0x164>)
 8006e52:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6812      	ldr	r2, [r2, #0]
 8006e6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e72:	f023 0307 	bic.w	r3, r3, #7
 8006e76:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	4619      	mov	r1, r3
 8006e82:	4610      	mov	r0, r2
 8006e84:	f000 fc16 	bl	80076b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eb0:	f023 0303 	bic.w	r3, r3, #3
 8006eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006ece:	f023 030c 	bic.w	r3, r3, #12
 8006ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68da      	ldr	r2, [r3, #12]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	021b      	lsls	r3, r3, #8
 8006eea:	4313      	orrs	r3, r2
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	011a      	lsls	r2, r3, #4
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	031b      	lsls	r3, r3, #12
 8006efe:	4313      	orrs	r3, r2
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006f0c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006f14:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	4313      	orrs	r3, r2
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	0800227d 	.word	0x0800227d

08006f80 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f90:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f98:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fa0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fa8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d110      	bne.n	8006fd2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d102      	bne.n	8006fbc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fb6:	7b7b      	ldrb	r3, [r7, #13]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d001      	beq.n	8006fc0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e069      	b.n	8007094 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fd0:	e031      	b.n	8007036 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d110      	bne.n	8006ffa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d102      	bne.n	8006fe4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fde:	7b3b      	ldrb	r3, [r7, #12]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d001      	beq.n	8006fe8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e055      	b.n	8007094 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ff8:	e01d      	b.n	8007036 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d108      	bne.n	8007012 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d105      	bne.n	8007012 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007006:	7b7b      	ldrb	r3, [r7, #13]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d102      	bne.n	8007012 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800700c:	7b3b      	ldrb	r3, [r7, #12]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d001      	beq.n	8007016 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e03e      	b.n	8007094 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2202      	movs	r2, #2
 800701a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2202      	movs	r2, #2
 800702a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2202      	movs	r2, #2
 8007032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <HAL_TIM_Encoder_Start+0xc4>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b04      	cmp	r3, #4
 8007040:	d008      	beq.n	8007054 <HAL_TIM_Encoder_Start+0xd4>
 8007042:	e00f      	b.n	8007064 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2201      	movs	r2, #1
 800704a:	2100      	movs	r1, #0
 800704c:	4618      	mov	r0, r3
 800704e:	f000 fe1b 	bl	8007c88 <TIM_CCxChannelCmd>
      break;
 8007052:	e016      	b.n	8007082 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2201      	movs	r2, #1
 800705a:	2104      	movs	r1, #4
 800705c:	4618      	mov	r0, r3
 800705e:	f000 fe13 	bl	8007c88 <TIM_CCxChannelCmd>
      break;
 8007062:	e00e      	b.n	8007082 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2201      	movs	r2, #1
 800706a:	2100      	movs	r1, #0
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fe0b 	bl	8007c88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2201      	movs	r2, #1
 8007078:	2104      	movs	r1, #4
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fe04 	bl	8007c88 <TIM_CCxChannelCmd>
      break;
 8007080:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f042 0201 	orr.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d128      	bne.n	8007104 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d121      	bne.n	8007104 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f06f 0202 	mvn.w	r2, #2
 80070c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d005      	beq.n	80070ea <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	4798      	blx	r3
 80070e8:	e009      	b.n	80070fe <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	f003 0304 	and.w	r3, r3, #4
 800710e:	2b04      	cmp	r3, #4
 8007110:	d128      	bne.n	8007164 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b04      	cmp	r3, #4
 800711e:	d121      	bne.n	8007164 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f06f 0204 	mvn.w	r2, #4
 8007128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2202      	movs	r2, #2
 800712e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800713a:	2b00      	cmp	r3, #0
 800713c:	d005      	beq.n	800714a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	4798      	blx	r3
 8007148:	e009      	b.n	800715e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b08      	cmp	r3, #8
 8007170:	d128      	bne.n	80071c4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f003 0308 	and.w	r3, r3, #8
 800717c:	2b08      	cmp	r3, #8
 800717e:	d121      	bne.n	80071c4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f06f 0208 	mvn.w	r2, #8
 8007188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2204      	movs	r2, #4
 800718e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	4798      	blx	r3
 80071a8:	e009      	b.n	80071be <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	f003 0310 	and.w	r3, r3, #16
 80071ce:	2b10      	cmp	r3, #16
 80071d0:	d128      	bne.n	8007224 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	f003 0310 	and.w	r3, r3, #16
 80071dc:	2b10      	cmp	r3, #16
 80071de:	d121      	bne.n	8007224 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f06f 0210 	mvn.w	r2, #16
 80071e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2208      	movs	r2, #8
 80071ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d005      	beq.n	800720a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	4798      	blx	r3
 8007208:	e009      	b.n	800721e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b01      	cmp	r3, #1
 8007230:	d110      	bne.n	8007254 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b01      	cmp	r3, #1
 800723e:	d109      	bne.n	8007254 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0201 	mvn.w	r2, #1
 8007248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800725e:	2b80      	cmp	r3, #128	; 0x80
 8007260:	d110      	bne.n	8007284 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726c:	2b80      	cmp	r3, #128	; 0x80
 800726e:	d109      	bne.n	8007284 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728e:	2b40      	cmp	r3, #64	; 0x40
 8007290:	d110      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729c:	2b40      	cmp	r3, #64	; 0x40
 800729e:	d109      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	f003 0320 	and.w	r3, r3, #32
 80072be:	2b20      	cmp	r3, #32
 80072c0:	d110      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b20      	cmp	r3, #32
 80072ce:	d109      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0220 	mvn.w	r2, #32
 80072d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072e4:	bf00      	nop
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007302:	2b01      	cmp	r3, #1
 8007304:	d101      	bne.n	800730a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007306:	2302      	movs	r3, #2
 8007308:	e0ae      	b.n	8007468 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b0c      	cmp	r3, #12
 8007316:	f200 809f 	bhi.w	8007458 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007355 	.word	0x08007355
 8007324:	08007459 	.word	0x08007459
 8007328:	08007459 	.word	0x08007459
 800732c:	08007459 	.word	0x08007459
 8007330:	08007395 	.word	0x08007395
 8007334:	08007459 	.word	0x08007459
 8007338:	08007459 	.word	0x08007459
 800733c:	08007459 	.word	0x08007459
 8007340:	080073d7 	.word	0x080073d7
 8007344:	08007459 	.word	0x08007459
 8007348:	08007459 	.word	0x08007459
 800734c:	08007459 	.word	0x08007459
 8007350:	08007417 	.word	0x08007417
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fa4a 	bl	80077f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f042 0208 	orr.w	r2, r2, #8
 800736e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699a      	ldr	r2, [r3, #24]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0204 	bic.w	r2, r2, #4
 800737e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6999      	ldr	r1, [r3, #24]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	691a      	ldr	r2, [r3, #16]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	619a      	str	r2, [r3, #24]
      break;
 8007392:	e064      	b.n	800745e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fa9a 	bl	80078d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699a      	ldr	r2, [r3, #24]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	699a      	ldr	r2, [r3, #24]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6999      	ldr	r1, [r3, #24]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	021a      	lsls	r2, r3, #8
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	619a      	str	r2, [r3, #24]
      break;
 80073d4:	e043      	b.n	800745e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 faef 	bl	80079c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69da      	ldr	r2, [r3, #28]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f042 0208 	orr.w	r2, r2, #8
 80073f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69da      	ldr	r2, [r3, #28]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 0204 	bic.w	r2, r2, #4
 8007400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69d9      	ldr	r1, [r3, #28]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	61da      	str	r2, [r3, #28]
      break;
 8007414:	e023      	b.n	800745e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68b9      	ldr	r1, [r7, #8]
 800741c:	4618      	mov	r0, r3
 800741e:	f000 fb43 	bl	8007aa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69da      	ldr	r2, [r3, #28]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	69da      	ldr	r2, [r3, #28]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69d9      	ldr	r1, [r3, #28]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	021a      	lsls	r2, r3, #8
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	61da      	str	r2, [r3, #28]
      break;
 8007456:	e002      	b.n	800745e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	75fb      	strb	r3, [r7, #23]
      break;
 800745c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007466:	7dfb      	ldrb	r3, [r7, #23]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007484:	2b01      	cmp	r3, #1
 8007486:	d101      	bne.n	800748c <HAL_TIM_ConfigClockSource+0x1c>
 8007488:	2302      	movs	r3, #2
 800748a:	e0b4      	b.n	80075f6 <HAL_TIM_ConfigClockSource+0x186>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80074aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074c4:	d03e      	beq.n	8007544 <HAL_TIM_ConfigClockSource+0xd4>
 80074c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ca:	f200 8087 	bhi.w	80075dc <HAL_TIM_ConfigClockSource+0x16c>
 80074ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d2:	f000 8086 	beq.w	80075e2 <HAL_TIM_ConfigClockSource+0x172>
 80074d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074da:	d87f      	bhi.n	80075dc <HAL_TIM_ConfigClockSource+0x16c>
 80074dc:	2b70      	cmp	r3, #112	; 0x70
 80074de:	d01a      	beq.n	8007516 <HAL_TIM_ConfigClockSource+0xa6>
 80074e0:	2b70      	cmp	r3, #112	; 0x70
 80074e2:	d87b      	bhi.n	80075dc <HAL_TIM_ConfigClockSource+0x16c>
 80074e4:	2b60      	cmp	r3, #96	; 0x60
 80074e6:	d050      	beq.n	800758a <HAL_TIM_ConfigClockSource+0x11a>
 80074e8:	2b60      	cmp	r3, #96	; 0x60
 80074ea:	d877      	bhi.n	80075dc <HAL_TIM_ConfigClockSource+0x16c>
 80074ec:	2b50      	cmp	r3, #80	; 0x50
 80074ee:	d03c      	beq.n	800756a <HAL_TIM_ConfigClockSource+0xfa>
 80074f0:	2b50      	cmp	r3, #80	; 0x50
 80074f2:	d873      	bhi.n	80075dc <HAL_TIM_ConfigClockSource+0x16c>
 80074f4:	2b40      	cmp	r3, #64	; 0x40
 80074f6:	d058      	beq.n	80075aa <HAL_TIM_ConfigClockSource+0x13a>
 80074f8:	2b40      	cmp	r3, #64	; 0x40
 80074fa:	d86f      	bhi.n	80075dc <HAL_TIM_ConfigClockSource+0x16c>
 80074fc:	2b30      	cmp	r3, #48	; 0x30
 80074fe:	d064      	beq.n	80075ca <HAL_TIM_ConfigClockSource+0x15a>
 8007500:	2b30      	cmp	r3, #48	; 0x30
 8007502:	d86b      	bhi.n	80075dc <HAL_TIM_ConfigClockSource+0x16c>
 8007504:	2b20      	cmp	r3, #32
 8007506:	d060      	beq.n	80075ca <HAL_TIM_ConfigClockSource+0x15a>
 8007508:	2b20      	cmp	r3, #32
 800750a:	d867      	bhi.n	80075dc <HAL_TIM_ConfigClockSource+0x16c>
 800750c:	2b00      	cmp	r3, #0
 800750e:	d05c      	beq.n	80075ca <HAL_TIM_ConfigClockSource+0x15a>
 8007510:	2b10      	cmp	r3, #16
 8007512:	d05a      	beq.n	80075ca <HAL_TIM_ConfigClockSource+0x15a>
 8007514:	e062      	b.n	80075dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	6899      	ldr	r1, [r3, #8]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	f000 fb8f 	bl	8007c48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	609a      	str	r2, [r3, #8]
      break;
 8007542:	e04f      	b.n	80075e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6818      	ldr	r0, [r3, #0]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	6899      	ldr	r1, [r3, #8]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f000 fb78 	bl	8007c48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007566:	609a      	str	r2, [r3, #8]
      break;
 8007568:	e03c      	b.n	80075e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	6859      	ldr	r1, [r3, #4]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	461a      	mov	r2, r3
 8007578:	f000 faec 	bl	8007b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2150      	movs	r1, #80	; 0x50
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fb45 	bl	8007c12 <TIM_ITRx_SetConfig>
      break;
 8007588:	e02c      	b.n	80075e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6818      	ldr	r0, [r3, #0]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	6859      	ldr	r1, [r3, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	461a      	mov	r2, r3
 8007598:	f000 fb0b 	bl	8007bb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2160      	movs	r1, #96	; 0x60
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fb35 	bl	8007c12 <TIM_ITRx_SetConfig>
      break;
 80075a8:	e01c      	b.n	80075e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6818      	ldr	r0, [r3, #0]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	6859      	ldr	r1, [r3, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	461a      	mov	r2, r3
 80075b8:	f000 facc 	bl	8007b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2140      	movs	r1, #64	; 0x40
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 fb25 	bl	8007c12 <TIM_ITRx_SetConfig>
      break;
 80075c8:	e00c      	b.n	80075e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4619      	mov	r1, r3
 80075d4:	4610      	mov	r0, r2
 80075d6:	f000 fb1c 	bl	8007c12 <TIM_ITRx_SetConfig>
      break;
 80075da:	e003      	b.n	80075e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	73fb      	strb	r3, [r7, #15]
      break;
 80075e0:	e000      	b.n	80075e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80075fe:	b480      	push	{r7}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800761a:	bf00      	nop
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800762e:	bf00      	nop
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007642:	bf00      	nop
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007656:	bf00      	nop
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
	...

080076b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a40      	ldr	r2, [pc, #256]	; (80077c8 <TIM_Base_SetConfig+0x114>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d013      	beq.n	80076f4 <TIM_Base_SetConfig+0x40>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d2:	d00f      	beq.n	80076f4 <TIM_Base_SetConfig+0x40>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a3d      	ldr	r2, [pc, #244]	; (80077cc <TIM_Base_SetConfig+0x118>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d00b      	beq.n	80076f4 <TIM_Base_SetConfig+0x40>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a3c      	ldr	r2, [pc, #240]	; (80077d0 <TIM_Base_SetConfig+0x11c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d007      	beq.n	80076f4 <TIM_Base_SetConfig+0x40>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a3b      	ldr	r2, [pc, #236]	; (80077d4 <TIM_Base_SetConfig+0x120>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d003      	beq.n	80076f4 <TIM_Base_SetConfig+0x40>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a3a      	ldr	r2, [pc, #232]	; (80077d8 <TIM_Base_SetConfig+0x124>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d108      	bne.n	8007706 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a2f      	ldr	r2, [pc, #188]	; (80077c8 <TIM_Base_SetConfig+0x114>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d02b      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007714:	d027      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a2c      	ldr	r2, [pc, #176]	; (80077cc <TIM_Base_SetConfig+0x118>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d023      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a2b      	ldr	r2, [pc, #172]	; (80077d0 <TIM_Base_SetConfig+0x11c>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d01f      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a2a      	ldr	r2, [pc, #168]	; (80077d4 <TIM_Base_SetConfig+0x120>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d01b      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a29      	ldr	r2, [pc, #164]	; (80077d8 <TIM_Base_SetConfig+0x124>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d017      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a28      	ldr	r2, [pc, #160]	; (80077dc <TIM_Base_SetConfig+0x128>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d013      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a27      	ldr	r2, [pc, #156]	; (80077e0 <TIM_Base_SetConfig+0x12c>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00f      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a26      	ldr	r2, [pc, #152]	; (80077e4 <TIM_Base_SetConfig+0x130>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d00b      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a25      	ldr	r2, [pc, #148]	; (80077e8 <TIM_Base_SetConfig+0x134>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d007      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a24      	ldr	r2, [pc, #144]	; (80077ec <TIM_Base_SetConfig+0x138>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d003      	beq.n	8007766 <TIM_Base_SetConfig+0xb2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a23      	ldr	r2, [pc, #140]	; (80077f0 <TIM_Base_SetConfig+0x13c>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d108      	bne.n	8007778 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800776c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	4313      	orrs	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a0a      	ldr	r2, [pc, #40]	; (80077c8 <TIM_Base_SetConfig+0x114>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d003      	beq.n	80077ac <TIM_Base_SetConfig+0xf8>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a0c      	ldr	r2, [pc, #48]	; (80077d8 <TIM_Base_SetConfig+0x124>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d103      	bne.n	80077b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	691a      	ldr	r2, [r3, #16]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	615a      	str	r2, [r3, #20]
}
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	40010000 	.word	0x40010000
 80077cc:	40000400 	.word	0x40000400
 80077d0:	40000800 	.word	0x40000800
 80077d4:	40000c00 	.word	0x40000c00
 80077d8:	40010400 	.word	0x40010400
 80077dc:	40014000 	.word	0x40014000
 80077e0:	40014400 	.word	0x40014400
 80077e4:	40014800 	.word	0x40014800
 80077e8:	40001800 	.word	0x40001800
 80077ec:	40001c00 	.word	0x40001c00
 80077f0:	40002000 	.word	0x40002000

080077f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	f023 0201 	bic.w	r2, r3, #1
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f023 0303 	bic.w	r3, r3, #3
 800782a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	4313      	orrs	r3, r2
 8007834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f023 0302 	bic.w	r3, r3, #2
 800783c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	4313      	orrs	r3, r2
 8007846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a20      	ldr	r2, [pc, #128]	; (80078cc <TIM_OC1_SetConfig+0xd8>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d003      	beq.n	8007858 <TIM_OC1_SetConfig+0x64>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a1f      	ldr	r2, [pc, #124]	; (80078d0 <TIM_OC1_SetConfig+0xdc>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d10c      	bne.n	8007872 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	f023 0308 	bic.w	r3, r3, #8
 800785e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	4313      	orrs	r3, r2
 8007868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f023 0304 	bic.w	r3, r3, #4
 8007870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a15      	ldr	r2, [pc, #84]	; (80078cc <TIM_OC1_SetConfig+0xd8>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d003      	beq.n	8007882 <TIM_OC1_SetConfig+0x8e>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a14      	ldr	r2, [pc, #80]	; (80078d0 <TIM_OC1_SetConfig+0xdc>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d111      	bne.n	80078a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	4313      	orrs	r3, r2
 800789a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	621a      	str	r2, [r3, #32]
}
 80078c0:	bf00      	nop
 80078c2:	371c      	adds	r7, #28
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	40010000 	.word	0x40010000
 80078d0:	40010400 	.word	0x40010400

080078d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	f023 0210 	bic.w	r2, r3, #16
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800790a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	021b      	lsls	r3, r3, #8
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	4313      	orrs	r3, r2
 8007916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f023 0320 	bic.w	r3, r3, #32
 800791e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	011b      	lsls	r3, r3, #4
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	4313      	orrs	r3, r2
 800792a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a22      	ldr	r2, [pc, #136]	; (80079b8 <TIM_OC2_SetConfig+0xe4>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d003      	beq.n	800793c <TIM_OC2_SetConfig+0x68>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a21      	ldr	r2, [pc, #132]	; (80079bc <TIM_OC2_SetConfig+0xe8>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d10d      	bne.n	8007958 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	011b      	lsls	r3, r3, #4
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	4313      	orrs	r3, r2
 800794e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007956:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a17      	ldr	r2, [pc, #92]	; (80079b8 <TIM_OC2_SetConfig+0xe4>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_OC2_SetConfig+0x94>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a16      	ldr	r2, [pc, #88]	; (80079bc <TIM_OC2_SetConfig+0xe8>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d113      	bne.n	8007990 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800796e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007976:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	4313      	orrs	r3, r2
 8007982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	4313      	orrs	r3, r2
 800798e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	621a      	str	r2, [r3, #32]
}
 80079aa:	bf00      	nop
 80079ac:	371c      	adds	r7, #28
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	40010000 	.word	0x40010000
 80079bc:	40010400 	.word	0x40010400

080079c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f023 0303 	bic.w	r3, r3, #3
 80079f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a21      	ldr	r2, [pc, #132]	; (8007aa0 <TIM_OC3_SetConfig+0xe0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d003      	beq.n	8007a26 <TIM_OC3_SetConfig+0x66>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a20      	ldr	r2, [pc, #128]	; (8007aa4 <TIM_OC3_SetConfig+0xe4>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d10d      	bne.n	8007a42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a16      	ldr	r2, [pc, #88]	; (8007aa0 <TIM_OC3_SetConfig+0xe0>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d003      	beq.n	8007a52 <TIM_OC3_SetConfig+0x92>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a15      	ldr	r2, [pc, #84]	; (8007aa4 <TIM_OC3_SetConfig+0xe4>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d113      	bne.n	8007a7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	011b      	lsls	r3, r3, #4
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	011b      	lsls	r3, r3, #4
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	621a      	str	r2, [r3, #32]
}
 8007a94:	bf00      	nop
 8007a96:	371c      	adds	r7, #28
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	40010000 	.word	0x40010000
 8007aa4:	40010400 	.word	0x40010400

08007aa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	021b      	lsls	r3, r3, #8
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	031b      	lsls	r3, r3, #12
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a12      	ldr	r2, [pc, #72]	; (8007b4c <TIM_OC4_SetConfig+0xa4>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d003      	beq.n	8007b10 <TIM_OC4_SetConfig+0x68>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a11      	ldr	r2, [pc, #68]	; (8007b50 <TIM_OC4_SetConfig+0xa8>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d109      	bne.n	8007b24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	019b      	lsls	r3, r3, #6
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	621a      	str	r2, [r3, #32]
}
 8007b3e:	bf00      	nop
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	40010000 	.word	0x40010000
 8007b50:	40010400 	.word	0x40010400

08007b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	f023 0201 	bic.w	r2, r3, #1
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	011b      	lsls	r3, r3, #4
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f023 030a 	bic.w	r3, r3, #10
 8007b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	621a      	str	r2, [r3, #32]
}
 8007ba6:	bf00      	nop
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b087      	sub	sp, #28
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	60f8      	str	r0, [r7, #12]
 8007bba:	60b9      	str	r1, [r7, #8]
 8007bbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f023 0210 	bic.w	r2, r3, #16
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	031b      	lsls	r3, r3, #12
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	011b      	lsls	r3, r3, #4
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	621a      	str	r2, [r3, #32]
}
 8007c06:	bf00      	nop
 8007c08:	371c      	adds	r7, #28
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b085      	sub	sp, #20
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	f043 0307 	orr.w	r3, r3, #7
 8007c34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	609a      	str	r2, [r3, #8]
}
 8007c3c:	bf00      	nop
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
 8007c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	021a      	lsls	r2, r3, #8
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	609a      	str	r2, [r3, #8]
}
 8007c7c:	bf00      	nop
 8007c7e:	371c      	adds	r7, #28
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	f003 031f 	and.w	r3, r3, #31
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6a1a      	ldr	r2, [r3, #32]
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	43db      	mvns	r3, r3
 8007caa:	401a      	ands	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a1a      	ldr	r2, [r3, #32]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f003 031f 	and.w	r3, r3, #31
 8007cba:	6879      	ldr	r1, [r7, #4]
 8007cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	621a      	str	r2, [r3, #32]
}
 8007cc6:	bf00      	nop
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
	...

08007cd4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a1c      	ldr	r2, [pc, #112]	; (8007d50 <TIM_ResetCallback+0x7c>)
 8007ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a1b      	ldr	r2, [pc, #108]	; (8007d54 <TIM_ResetCallback+0x80>)
 8007ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a1a      	ldr	r2, [pc, #104]	; (8007d58 <TIM_ResetCallback+0x84>)
 8007cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a19      	ldr	r2, [pc, #100]	; (8007d5c <TIM_ResetCallback+0x88>)
 8007cf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a18      	ldr	r2, [pc, #96]	; (8007d60 <TIM_ResetCallback+0x8c>)
 8007d00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a17      	ldr	r2, [pc, #92]	; (8007d64 <TIM_ResetCallback+0x90>)
 8007d08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a16      	ldr	r2, [pc, #88]	; (8007d68 <TIM_ResetCallback+0x94>)
 8007d10:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a15      	ldr	r2, [pc, #84]	; (8007d6c <TIM_ResetCallback+0x98>)
 8007d18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a14      	ldr	r2, [pc, #80]	; (8007d70 <TIM_ResetCallback+0x9c>)
 8007d20:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a13      	ldr	r2, [pc, #76]	; (8007d74 <TIM_ResetCallback+0xa0>)
 8007d28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a12      	ldr	r2, [pc, #72]	; (8007d78 <TIM_ResetCallback+0xa4>)
 8007d30:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a11      	ldr	r2, [pc, #68]	; (8007d7c <TIM_ResetCallback+0xa8>)
 8007d38:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a10      	ldr	r2, [pc, #64]	; (8007d80 <TIM_ResetCallback+0xac>)
 8007d40:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	080021b1 	.word	0x080021b1
 8007d54:	080075ff 	.word	0x080075ff
 8007d58:	08007677 	.word	0x08007677
 8007d5c:	0800768b 	.word	0x0800768b
 8007d60:	08007627 	.word	0x08007627
 8007d64:	0800763b 	.word	0x0800763b
 8007d68:	08007613 	.word	0x08007613
 8007d6c:	0800764f 	.word	0x0800764f
 8007d70:	08007663 	.word	0x08007663
 8007d74:	0800769f 	.word	0x0800769f
 8007d78:	08007f21 	.word	0x08007f21
 8007d7c:	08007f35 	.word	0x08007f35
 8007d80:	08007f49 	.word	0x08007f49

08007d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d101      	bne.n	8007d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	e05a      	b.n	8007e52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2202      	movs	r2, #2
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a21      	ldr	r2, [pc, #132]	; (8007e60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d022      	beq.n	8007e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de8:	d01d      	beq.n	8007e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a1d      	ldr	r2, [pc, #116]	; (8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d018      	beq.n	8007e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a1b      	ldr	r2, [pc, #108]	; (8007e68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d013      	beq.n	8007e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a1a      	ldr	r2, [pc, #104]	; (8007e6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d00e      	beq.n	8007e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a18      	ldr	r2, [pc, #96]	; (8007e70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d009      	beq.n	8007e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a17      	ldr	r2, [pc, #92]	; (8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d004      	beq.n	8007e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a15      	ldr	r2, [pc, #84]	; (8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d10c      	bne.n	8007e40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	40010000 	.word	0x40010000
 8007e64:	40000400 	.word	0x40000400
 8007e68:	40000800 	.word	0x40000800
 8007e6c:	40000c00 	.word	0x40000c00
 8007e70:	40010400 	.word	0x40010400
 8007e74:	40014000 	.word	0x40014000
 8007e78:	40001800 	.word	0x40001800

08007e7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e03d      	b.n	8007f14 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e04a      	b.n	8008004 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d111      	bne.n	8007f9e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fa04 	bl	8008390 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d102      	bne.n	8007f96 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a1e      	ldr	r2, [pc, #120]	; (800800c <HAL_UART_Init+0xb0>)
 8007f94:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2224      	movs	r2, #36	; 0x24
 8007fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fb4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fcb4 	bl	8008924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	691a      	ldr	r2, [r3, #16]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	695a      	ldr	r2, [r3, #20]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fda:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	08002439 	.word	0x08002439

08008010 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08a      	sub	sp, #40	; 0x28
 8008014:	af02      	add	r7, sp, #8
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	603b      	str	r3, [r7, #0]
 800801c:	4613      	mov	r3, r2
 800801e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b20      	cmp	r3, #32
 800802e:	d17c      	bne.n	800812a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <HAL_UART_Transmit+0x2c>
 8008036:	88fb      	ldrh	r3, [r7, #6]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e075      	b.n	800812c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008046:	2b01      	cmp	r3, #1
 8008048:	d101      	bne.n	800804e <HAL_UART_Transmit+0x3e>
 800804a:	2302      	movs	r3, #2
 800804c:	e06e      	b.n	800812c <HAL_UART_Transmit+0x11c>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2221      	movs	r2, #33	; 0x21
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008064:	f7fd f86c 	bl	8005140 <HAL_GetTick>
 8008068:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	88fa      	ldrh	r2, [r7, #6]
 800806e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	88fa      	ldrh	r2, [r7, #6]
 8008074:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800807e:	d108      	bne.n	8008092 <HAL_UART_Transmit+0x82>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d104      	bne.n	8008092 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008088:	2300      	movs	r3, #0
 800808a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	61bb      	str	r3, [r7, #24]
 8008090:	e003      	b.n	800809a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008096:	2300      	movs	r3, #0
 8008098:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80080a2:	e02a      	b.n	80080fa <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2200      	movs	r2, #0
 80080ac:	2180      	movs	r1, #128	; 0x80
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 faa3 	bl	80085fa <UART_WaitOnFlagUntilTimeout>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e036      	b.n	800812c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10b      	bne.n	80080dc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	461a      	mov	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080d2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	3302      	adds	r3, #2
 80080d8:	61bb      	str	r3, [r7, #24]
 80080da:	e007      	b.n	80080ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	781a      	ldrb	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	3301      	adds	r3, #1
 80080ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080fe:	b29b      	uxth	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1cf      	bne.n	80080a4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2200      	movs	r2, #0
 800810c:	2140      	movs	r1, #64	; 0x40
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 fa73 	bl	80085fa <UART_WaitOnFlagUntilTimeout>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e006      	b.n	800812c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2220      	movs	r2, #32
 8008122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	e000      	b.n	800812c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800812a:	2302      	movs	r3, #2
  }
}
 800812c:	4618      	mov	r0, r3
 800812e:	3720      	adds	r7, #32
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08a      	sub	sp, #40	; 0x28
 8008138:	af02      	add	r7, sp, #8
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	4613      	mov	r3, r2
 8008142:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b20      	cmp	r3, #32
 8008152:	f040 808c 	bne.w	800826e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <HAL_UART_Receive+0x2e>
 800815c:	88fb      	ldrh	r3, [r7, #6]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e084      	b.n	8008270 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800816c:	2b01      	cmp	r3, #1
 800816e:	d101      	bne.n	8008174 <HAL_UART_Receive+0x40>
 8008170:	2302      	movs	r3, #2
 8008172:	e07d      	b.n	8008270 <HAL_UART_Receive+0x13c>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2222      	movs	r2, #34	; 0x22
 8008186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008190:	f7fc ffd6 	bl	8005140 <HAL_GetTick>
 8008194:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	88fa      	ldrh	r2, [r7, #6]
 800819a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	88fa      	ldrh	r2, [r7, #6]
 80081a0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081aa:	d108      	bne.n	80081be <HAL_UART_Receive+0x8a>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d104      	bne.n	80081be <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80081b4:	2300      	movs	r3, #0
 80081b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	61bb      	str	r3, [r7, #24]
 80081bc:	e003      	b.n	80081c6 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80081ce:	e043      	b.n	8008258 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	2200      	movs	r2, #0
 80081d8:	2120      	movs	r1, #32
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 fa0d 	bl	80085fa <UART_WaitOnFlagUntilTimeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e042      	b.n	8008270 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10c      	bne.n	800820a <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	3302      	adds	r3, #2
 8008206:	61bb      	str	r3, [r7, #24]
 8008208:	e01f      	b.n	800824a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008212:	d007      	beq.n	8008224 <HAL_UART_Receive+0xf0>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10a      	bne.n	8008232 <HAL_UART_Receive+0xfe>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d106      	bne.n	8008232 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	b2da      	uxtb	r2, r3
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	701a      	strb	r2, [r3, #0]
 8008230:	e008      	b.n	8008244 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	b2db      	uxtb	r3, r3
 800823a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800823e:	b2da      	uxtb	r2, r3
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	3301      	adds	r3, #1
 8008248:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800824e:	b29b      	uxth	r3, r3
 8008250:	3b01      	subs	r3, #1
 8008252:	b29a      	uxth	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800825c:	b29b      	uxth	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1b6      	bne.n	80081d0 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2220      	movs	r2, #32
 8008266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	e000      	b.n	8008270 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800826e:	2302      	movs	r3, #2
  }
}
 8008270:	4618      	mov	r0, r3
 8008272:	3720      	adds	r7, #32
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	4613      	mov	r3, r2
 8008284:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b20      	cmp	r3, #32
 8008290:	d11d      	bne.n	80082ce <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <HAL_UART_Receive_DMA+0x26>
 8008298:	88fb      	ldrh	r3, [r7, #6]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e016      	b.n	80082d0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d101      	bne.n	80082b0 <HAL_UART_Receive_DMA+0x38>
 80082ac:	2302      	movs	r3, #2
 80082ae:	e00f      	b.n	80082d0 <HAL_UART_Receive_DMA+0x58>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80082be:	88fb      	ldrh	r3, [r7, #6]
 80082c0:	461a      	mov	r2, r3
 80082c2:	68b9      	ldr	r1, [r7, #8]
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 fa07 	bl	80086d8 <UART_Start_Receive_DMA>
 80082ca:	4603      	mov	r3, r0
 80082cc:	e000      	b.n	80082d0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80082ce:	2302      	movs	r3, #2
  }
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a10      	ldr	r2, [pc, #64]	; (80083dc <UART_InitCallbacksToDefault+0x4c>)
 800839c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a0f      	ldr	r2, [pc, #60]	; (80083e0 <UART_InitCallbacksToDefault+0x50>)
 80083a2:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a0f      	ldr	r2, [pc, #60]	; (80083e4 <UART_InitCallbacksToDefault+0x54>)
 80083a8:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a0e      	ldr	r2, [pc, #56]	; (80083e8 <UART_InitCallbacksToDefault+0x58>)
 80083ae:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a0e      	ldr	r2, [pc, #56]	; (80083ec <UART_InitCallbacksToDefault+0x5c>)
 80083b4:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a0d      	ldr	r2, [pc, #52]	; (80083f0 <UART_InitCallbacksToDefault+0x60>)
 80083ba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a0d      	ldr	r2, [pc, #52]	; (80083f4 <UART_InitCallbacksToDefault+0x64>)
 80083c0:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a0c      	ldr	r2, [pc, #48]	; (80083f8 <UART_InitCallbacksToDefault+0x68>)
 80083c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a0c      	ldr	r2, [pc, #48]	; (80083fc <UART_InitCallbacksToDefault+0x6c>)
 80083cc:	669a      	str	r2, [r3, #104]	; 0x68

}
 80083ce:	bf00      	nop
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	080082ed 	.word	0x080082ed
 80083e0:	080082d9 	.word	0x080082d9
 80083e4:	08008315 	.word	0x08008315
 80083e8:	08008301 	.word	0x08008301
 80083ec:	08008329 	.word	0x08008329
 80083f0:	0800833d 	.word	0x0800833d
 80083f4:	08008351 	.word	0x08008351
 80083f8:	08008365 	.word	0x08008365
 80083fc:	08008379 	.word	0x08008379

08008400 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b09c      	sub	sp, #112	; 0x70
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008418:	2b00      	cmp	r3, #0
 800841a:	d172      	bne.n	8008502 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800841c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800841e:	2200      	movs	r2, #0
 8008420:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	330c      	adds	r3, #12
 8008428:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008438:	66bb      	str	r3, [r7, #104]	; 0x68
 800843a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	330c      	adds	r3, #12
 8008440:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008442:	65ba      	str	r2, [r7, #88]	; 0x58
 8008444:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008448:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e5      	bne.n	8008422 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3314      	adds	r3, #20
 800845c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008468:	f023 0301 	bic.w	r3, r3, #1
 800846c:	667b      	str	r3, [r7, #100]	; 0x64
 800846e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3314      	adds	r3, #20
 8008474:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008476:	647a      	str	r2, [r7, #68]	; 0x44
 8008478:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800847c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e5      	bne.n	8008456 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800848a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3314      	adds	r3, #20
 8008490:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	623b      	str	r3, [r7, #32]
   return(result);
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084a0:	663b      	str	r3, [r7, #96]	; 0x60
 80084a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3314      	adds	r3, #20
 80084a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084aa:	633a      	str	r2, [r7, #48]	; 0x30
 80084ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e5      	bne.n	800848a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084c0:	2220      	movs	r2, #32
 80084c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d119      	bne.n	8008502 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	330c      	adds	r3, #12
 80084d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	e853 3f00 	ldrex	r3, [r3]
 80084dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f023 0310 	bic.w	r3, r3, #16
 80084e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	330c      	adds	r3, #12
 80084ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084ee:	61fa      	str	r2, [r7, #28]
 80084f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f2:	69b9      	ldr	r1, [r7, #24]
 80084f4:	69fa      	ldr	r2, [r7, #28]
 80084f6:	e841 2300 	strex	r3, r2, [r1]
 80084fa:	617b      	str	r3, [r7, #20]
   return(result);
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1e5      	bne.n	80084ce <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008506:	2b01      	cmp	r3, #1
 8008508:	d107      	bne.n	800851a <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800850a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800850c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800850e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008510:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008512:	4611      	mov	r1, r2
 8008514:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008516:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008518:	e003      	b.n	8008522 <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 800851a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800851c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800851e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008520:	4798      	blx	r3
}
 8008522:	bf00      	nop
 8008524:	3770      	adds	r7, #112	; 0x70
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008536:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853c:	2b01      	cmp	r3, #1
 800853e:	d109      	bne.n	8008554 <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008548:	0852      	lsrs	r2, r2, #1
 800854a:	b292      	uxth	r2, r2
 800854c:	4611      	mov	r1, r2
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008552:	e003      	b.n	800855c <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	4798      	blx	r3
}
 800855c:	bf00      	nop
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800856c:	2300      	movs	r3, #0
 800856e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008574:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008580:	2b80      	cmp	r3, #128	; 0x80
 8008582:	bf0c      	ite	eq
 8008584:	2301      	moveq	r3, #1
 8008586:	2300      	movne	r3, #0
 8008588:	b2db      	uxtb	r3, r3
 800858a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b21      	cmp	r3, #33	; 0x21
 8008596:	d108      	bne.n	80085aa <UART_DMAError+0x46>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d005      	beq.n	80085aa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2200      	movs	r2, #0
 80085a2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80085a4:	68b8      	ldr	r0, [r7, #8]
 80085a6:	f000 f931 	bl	800880c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b4:	2b40      	cmp	r3, #64	; 0x40
 80085b6:	bf0c      	ite	eq
 80085b8:	2301      	moveq	r3, #1
 80085ba:	2300      	movne	r3, #0
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b22      	cmp	r3, #34	; 0x22
 80085ca:	d108      	bne.n	80085de <UART_DMAError+0x7a>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d005      	beq.n	80085de <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2200      	movs	r2, #0
 80085d6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80085d8:	68b8      	ldr	r0, [r7, #8]
 80085da:	f000 f93f 	bl	800885c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e2:	f043 0210 	orr.w	r2, r3, #16
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ee:	68b8      	ldr	r0, [r7, #8]
 80085f0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085f2:	bf00      	nop
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b090      	sub	sp, #64	; 0x40
 80085fe:	af00      	add	r7, sp, #0
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	603b      	str	r3, [r7, #0]
 8008606:	4613      	mov	r3, r2
 8008608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800860a:	e050      	b.n	80086ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800860c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800860e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008612:	d04c      	beq.n	80086ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008616:	2b00      	cmp	r3, #0
 8008618:	d007      	beq.n	800862a <UART_WaitOnFlagUntilTimeout+0x30>
 800861a:	f7fc fd91 	bl	8005140 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008626:	429a      	cmp	r2, r3
 8008628:	d241      	bcs.n	80086ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	330c      	adds	r3, #12
 8008630:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	e853 3f00 	ldrex	r3, [r3]
 8008638:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	330c      	adds	r3, #12
 8008648:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800864a:	637a      	str	r2, [r7, #52]	; 0x34
 800864c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e5      	bne.n	800862a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3314      	adds	r3, #20
 8008664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	613b      	str	r3, [r7, #16]
   return(result);
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	f023 0301 	bic.w	r3, r3, #1
 8008674:	63bb      	str	r3, [r7, #56]	; 0x38
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3314      	adds	r3, #20
 800867c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800867e:	623a      	str	r2, [r7, #32]
 8008680:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008682:	69f9      	ldr	r1, [r7, #28]
 8008684:	6a3a      	ldr	r2, [r7, #32]
 8008686:	e841 2300 	strex	r3, r2, [r1]
 800868a:	61bb      	str	r3, [r7, #24]
   return(result);
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1e5      	bne.n	800865e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2220      	movs	r2, #32
 8008696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2220      	movs	r2, #32
 800869e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e00f      	b.n	80086ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	4013      	ands	r3, r2
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	bf0c      	ite	eq
 80086be:	2301      	moveq	r3, #1
 80086c0:	2300      	movne	r3, #0
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	461a      	mov	r2, r3
 80086c6:	79fb      	ldrb	r3, [r7, #7]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d09f      	beq.n	800860c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3740      	adds	r7, #64	; 0x40
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b098      	sub	sp, #96	; 0x60
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	4613      	mov	r3, r2
 80086e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	88fa      	ldrh	r2, [r7, #6]
 80086f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2222      	movs	r2, #34	; 0x22
 80086fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008704:	4a3e      	ldr	r2, [pc, #248]	; (8008800 <UART_Start_Receive_DMA+0x128>)
 8008706:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870c:	4a3d      	ldr	r2, [pc, #244]	; (8008804 <UART_Start_Receive_DMA+0x12c>)
 800870e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008714:	4a3c      	ldr	r2, [pc, #240]	; (8008808 <UART_Start_Receive_DMA+0x130>)
 8008716:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871c:	2200      	movs	r2, #0
 800871e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008720:	f107 0308 	add.w	r3, r7, #8
 8008724:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3304      	adds	r3, #4
 8008730:	4619      	mov	r1, r3
 8008732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	88fb      	ldrh	r3, [r7, #6]
 8008738:	f7fc ff10 	bl	800555c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800873c:	2300      	movs	r3, #0
 800873e:	613b      	str	r3, [r7, #16]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	613b      	str	r3, [r7, #16]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	613b      	str	r3, [r7, #16]
 8008750:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	330c      	adds	r3, #12
 8008760:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800876a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800876c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008770:	65bb      	str	r3, [r7, #88]	; 0x58
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	330c      	adds	r3, #12
 8008778:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800877a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800877c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008780:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e5      	bne.n	800875a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3314      	adds	r3, #20
 8008794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800879e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a0:	f043 0301 	orr.w	r3, r3, #1
 80087a4:	657b      	str	r3, [r7, #84]	; 0x54
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3314      	adds	r3, #20
 80087ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087ae:	63ba      	str	r2, [r7, #56]	; 0x38
 80087b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1e5      	bne.n	800878e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3314      	adds	r3, #20
 80087c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	e853 3f00 	ldrex	r3, [r3]
 80087d0:	617b      	str	r3, [r7, #20]
   return(result);
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087d8:	653b      	str	r3, [r7, #80]	; 0x50
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3314      	adds	r3, #20
 80087e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80087e2:	627a      	str	r2, [r7, #36]	; 0x24
 80087e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e6:	6a39      	ldr	r1, [r7, #32]
 80087e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ea:	e841 2300 	strex	r3, r2, [r1]
 80087ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1e5      	bne.n	80087c2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3760      	adds	r7, #96	; 0x60
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	08008401 	.word	0x08008401
 8008804:	0800852b 	.word	0x0800852b
 8008808:	08008565 	.word	0x08008565

0800880c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800880c:	b480      	push	{r7}
 800880e:	b089      	sub	sp, #36	; 0x24
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	330c      	adds	r3, #12
 800881a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	60bb      	str	r3, [r7, #8]
   return(result);
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800882a:	61fb      	str	r3, [r7, #28]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	330c      	adds	r3, #12
 8008832:	69fa      	ldr	r2, [r7, #28]
 8008834:	61ba      	str	r2, [r7, #24]
 8008836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008838:	6979      	ldr	r1, [r7, #20]
 800883a:	69ba      	ldr	r2, [r7, #24]
 800883c:	e841 2300 	strex	r3, r2, [r1]
 8008840:	613b      	str	r3, [r7, #16]
   return(result);
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e5      	bne.n	8008814 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2220      	movs	r2, #32
 800884c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008850:	bf00      	nop
 8008852:	3724      	adds	r7, #36	; 0x24
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800885c:	b480      	push	{r7}
 800885e:	b095      	sub	sp, #84	; 0x54
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	330c      	adds	r3, #12
 800886a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886e:	e853 3f00 	ldrex	r3, [r3]
 8008872:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008876:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800887a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	330c      	adds	r3, #12
 8008882:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008884:	643a      	str	r2, [r7, #64]	; 0x40
 8008886:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008888:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800888a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800888c:	e841 2300 	strex	r3, r2, [r1]
 8008890:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1e5      	bne.n	8008864 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3314      	adds	r3, #20
 800889e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	e853 3f00 	ldrex	r3, [r3]
 80088a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	f023 0301 	bic.w	r3, r3, #1
 80088ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3314      	adds	r3, #20
 80088b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088c0:	e841 2300 	strex	r3, r2, [r1]
 80088c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1e5      	bne.n	8008898 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d119      	bne.n	8008908 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	330c      	adds	r3, #12
 80088da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	e853 3f00 	ldrex	r3, [r3]
 80088e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	f023 0310 	bic.w	r3, r3, #16
 80088ea:	647b      	str	r3, [r7, #68]	; 0x44
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	330c      	adds	r3, #12
 80088f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088f4:	61ba      	str	r2, [r7, #24]
 80088f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f8:	6979      	ldr	r1, [r7, #20]
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	e841 2300 	strex	r3, r2, [r1]
 8008900:	613b      	str	r3, [r7, #16]
   return(result);
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1e5      	bne.n	80088d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2220      	movs	r2, #32
 800890c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008916:	bf00      	nop
 8008918:	3754      	adds	r7, #84	; 0x54
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
	...

08008924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	b09f      	sub	sp, #124	; 0x7c
 800892a:	af00      	add	r7, sp, #0
 800892c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800892e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800893a:	68d9      	ldr	r1, [r3, #12]
 800893c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	ea40 0301 	orr.w	r3, r0, r1
 8008944:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008948:	689a      	ldr	r2, [r3, #8]
 800894a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	431a      	orrs	r2, r3
 8008950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	431a      	orrs	r2, r3
 8008956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008958:	69db      	ldr	r3, [r3, #28]
 800895a:	4313      	orrs	r3, r2
 800895c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800895e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008968:	f021 010c 	bic.w	r1, r1, #12
 800896c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008972:	430b      	orrs	r3, r1
 8008974:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008982:	6999      	ldr	r1, [r3, #24]
 8008984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	ea40 0301 	orr.w	r3, r0, r1
 800898c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800898e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	4bc5      	ldr	r3, [pc, #788]	; (8008ca8 <UART_SetConfig+0x384>)
 8008994:	429a      	cmp	r2, r3
 8008996:	d004      	beq.n	80089a2 <UART_SetConfig+0x7e>
 8008998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	4bc3      	ldr	r3, [pc, #780]	; (8008cac <UART_SetConfig+0x388>)
 800899e:	429a      	cmp	r2, r3
 80089a0:	d103      	bne.n	80089aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80089a2:	f7fd fb83 	bl	80060ac <HAL_RCC_GetPCLK2Freq>
 80089a6:	6778      	str	r0, [r7, #116]	; 0x74
 80089a8:	e002      	b.n	80089b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80089aa:	f7fd fb6b 	bl	8006084 <HAL_RCC_GetPCLK1Freq>
 80089ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089b8:	f040 80b6 	bne.w	8008b28 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089be:	461c      	mov	r4, r3
 80089c0:	f04f 0500 	mov.w	r5, #0
 80089c4:	4622      	mov	r2, r4
 80089c6:	462b      	mov	r3, r5
 80089c8:	1891      	adds	r1, r2, r2
 80089ca:	6439      	str	r1, [r7, #64]	; 0x40
 80089cc:	415b      	adcs	r3, r3
 80089ce:	647b      	str	r3, [r7, #68]	; 0x44
 80089d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80089d4:	1912      	adds	r2, r2, r4
 80089d6:	eb45 0303 	adc.w	r3, r5, r3
 80089da:	f04f 0000 	mov.w	r0, #0
 80089de:	f04f 0100 	mov.w	r1, #0
 80089e2:	00d9      	lsls	r1, r3, #3
 80089e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089e8:	00d0      	lsls	r0, r2, #3
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	1911      	adds	r1, r2, r4
 80089f0:	6639      	str	r1, [r7, #96]	; 0x60
 80089f2:	416b      	adcs	r3, r5
 80089f4:	667b      	str	r3, [r7, #100]	; 0x64
 80089f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	461a      	mov	r2, r3
 80089fc:	f04f 0300 	mov.w	r3, #0
 8008a00:	1891      	adds	r1, r2, r2
 8008a02:	63b9      	str	r1, [r7, #56]	; 0x38
 8008a04:	415b      	adcs	r3, r3
 8008a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008a0c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008a10:	f7f8 f902 	bl	8000c18 <__aeabi_uldivmod>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	4ba5      	ldr	r3, [pc, #660]	; (8008cb0 <UART_SetConfig+0x38c>)
 8008a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8008a1e:	095b      	lsrs	r3, r3, #5
 8008a20:	011e      	lsls	r6, r3, #4
 8008a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a24:	461c      	mov	r4, r3
 8008a26:	f04f 0500 	mov.w	r5, #0
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	462b      	mov	r3, r5
 8008a2e:	1891      	adds	r1, r2, r2
 8008a30:	6339      	str	r1, [r7, #48]	; 0x30
 8008a32:	415b      	adcs	r3, r3
 8008a34:	637b      	str	r3, [r7, #52]	; 0x34
 8008a36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008a3a:	1912      	adds	r2, r2, r4
 8008a3c:	eb45 0303 	adc.w	r3, r5, r3
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	f04f 0100 	mov.w	r1, #0
 8008a48:	00d9      	lsls	r1, r3, #3
 8008a4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a4e:	00d0      	lsls	r0, r2, #3
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	1911      	adds	r1, r2, r4
 8008a56:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a58:	416b      	adcs	r3, r5
 8008a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	461a      	mov	r2, r3
 8008a62:	f04f 0300 	mov.w	r3, #0
 8008a66:	1891      	adds	r1, r2, r2
 8008a68:	62b9      	str	r1, [r7, #40]	; 0x28
 8008a6a:	415b      	adcs	r3, r3
 8008a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a72:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008a76:	f7f8 f8cf 	bl	8000c18 <__aeabi_uldivmod>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	4b8c      	ldr	r3, [pc, #560]	; (8008cb0 <UART_SetConfig+0x38c>)
 8008a80:	fba3 1302 	umull	r1, r3, r3, r2
 8008a84:	095b      	lsrs	r3, r3, #5
 8008a86:	2164      	movs	r1, #100	; 0x64
 8008a88:	fb01 f303 	mul.w	r3, r1, r3
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	00db      	lsls	r3, r3, #3
 8008a90:	3332      	adds	r3, #50	; 0x32
 8008a92:	4a87      	ldr	r2, [pc, #540]	; (8008cb0 <UART_SetConfig+0x38c>)
 8008a94:	fba2 2303 	umull	r2, r3, r2, r3
 8008a98:	095b      	lsrs	r3, r3, #5
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008aa0:	441e      	add	r6, r3
 8008aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f04f 0100 	mov.w	r1, #0
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	1894      	adds	r4, r2, r2
 8008ab0:	623c      	str	r4, [r7, #32]
 8008ab2:	415b      	adcs	r3, r3
 8008ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ab6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008aba:	1812      	adds	r2, r2, r0
 8008abc:	eb41 0303 	adc.w	r3, r1, r3
 8008ac0:	f04f 0400 	mov.w	r4, #0
 8008ac4:	f04f 0500 	mov.w	r5, #0
 8008ac8:	00dd      	lsls	r5, r3, #3
 8008aca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ace:	00d4      	lsls	r4, r2, #3
 8008ad0:	4622      	mov	r2, r4
 8008ad2:	462b      	mov	r3, r5
 8008ad4:	1814      	adds	r4, r2, r0
 8008ad6:	653c      	str	r4, [r7, #80]	; 0x50
 8008ad8:	414b      	adcs	r3, r1
 8008ada:	657b      	str	r3, [r7, #84]	; 0x54
 8008adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	f04f 0300 	mov.w	r3, #0
 8008ae6:	1891      	adds	r1, r2, r2
 8008ae8:	61b9      	str	r1, [r7, #24]
 8008aea:	415b      	adcs	r3, r3
 8008aec:	61fb      	str	r3, [r7, #28]
 8008aee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008af2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008af6:	f7f8 f88f 	bl	8000c18 <__aeabi_uldivmod>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4b6c      	ldr	r3, [pc, #432]	; (8008cb0 <UART_SetConfig+0x38c>)
 8008b00:	fba3 1302 	umull	r1, r3, r3, r2
 8008b04:	095b      	lsrs	r3, r3, #5
 8008b06:	2164      	movs	r1, #100	; 0x64
 8008b08:	fb01 f303 	mul.w	r3, r1, r3
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	3332      	adds	r3, #50	; 0x32
 8008b12:	4a67      	ldr	r2, [pc, #412]	; (8008cb0 <UART_SetConfig+0x38c>)
 8008b14:	fba2 2303 	umull	r2, r3, r2, r3
 8008b18:	095b      	lsrs	r3, r3, #5
 8008b1a:	f003 0207 	and.w	r2, r3, #7
 8008b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4432      	add	r2, r6
 8008b24:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b26:	e0b9      	b.n	8008c9c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b2a:	461c      	mov	r4, r3
 8008b2c:	f04f 0500 	mov.w	r5, #0
 8008b30:	4622      	mov	r2, r4
 8008b32:	462b      	mov	r3, r5
 8008b34:	1891      	adds	r1, r2, r2
 8008b36:	6139      	str	r1, [r7, #16]
 8008b38:	415b      	adcs	r3, r3
 8008b3a:	617b      	str	r3, [r7, #20]
 8008b3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b40:	1912      	adds	r2, r2, r4
 8008b42:	eb45 0303 	adc.w	r3, r5, r3
 8008b46:	f04f 0000 	mov.w	r0, #0
 8008b4a:	f04f 0100 	mov.w	r1, #0
 8008b4e:	00d9      	lsls	r1, r3, #3
 8008b50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b54:	00d0      	lsls	r0, r2, #3
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	eb12 0804 	adds.w	r8, r2, r4
 8008b5e:	eb43 0905 	adc.w	r9, r3, r5
 8008b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f04f 0100 	mov.w	r1, #0
 8008b6c:	f04f 0200 	mov.w	r2, #0
 8008b70:	f04f 0300 	mov.w	r3, #0
 8008b74:	008b      	lsls	r3, r1, #2
 8008b76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b7a:	0082      	lsls	r2, r0, #2
 8008b7c:	4640      	mov	r0, r8
 8008b7e:	4649      	mov	r1, r9
 8008b80:	f7f8 f84a 	bl	8000c18 <__aeabi_uldivmod>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4b49      	ldr	r3, [pc, #292]	; (8008cb0 <UART_SetConfig+0x38c>)
 8008b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8008b8e:	095b      	lsrs	r3, r3, #5
 8008b90:	011e      	lsls	r6, r3, #4
 8008b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b94:	4618      	mov	r0, r3
 8008b96:	f04f 0100 	mov.w	r1, #0
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	1894      	adds	r4, r2, r2
 8008ba0:	60bc      	str	r4, [r7, #8]
 8008ba2:	415b      	adcs	r3, r3
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008baa:	1812      	adds	r2, r2, r0
 8008bac:	eb41 0303 	adc.w	r3, r1, r3
 8008bb0:	f04f 0400 	mov.w	r4, #0
 8008bb4:	f04f 0500 	mov.w	r5, #0
 8008bb8:	00dd      	lsls	r5, r3, #3
 8008bba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008bbe:	00d4      	lsls	r4, r2, #3
 8008bc0:	4622      	mov	r2, r4
 8008bc2:	462b      	mov	r3, r5
 8008bc4:	1814      	adds	r4, r2, r0
 8008bc6:	64bc      	str	r4, [r7, #72]	; 0x48
 8008bc8:	414b      	adcs	r3, r1
 8008bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f04f 0100 	mov.w	r1, #0
 8008bd6:	f04f 0200 	mov.w	r2, #0
 8008bda:	f04f 0300 	mov.w	r3, #0
 8008bde:	008b      	lsls	r3, r1, #2
 8008be0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008be4:	0082      	lsls	r2, r0, #2
 8008be6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008bea:	f7f8 f815 	bl	8000c18 <__aeabi_uldivmod>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	4b2f      	ldr	r3, [pc, #188]	; (8008cb0 <UART_SetConfig+0x38c>)
 8008bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8008bf8:	095b      	lsrs	r3, r3, #5
 8008bfa:	2164      	movs	r1, #100	; 0x64
 8008bfc:	fb01 f303 	mul.w	r3, r1, r3
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	011b      	lsls	r3, r3, #4
 8008c04:	3332      	adds	r3, #50	; 0x32
 8008c06:	4a2a      	ldr	r2, [pc, #168]	; (8008cb0 <UART_SetConfig+0x38c>)
 8008c08:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0c:	095b      	lsrs	r3, r3, #5
 8008c0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c12:	441e      	add	r6, r3
 8008c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c16:	4618      	mov	r0, r3
 8008c18:	f04f 0100 	mov.w	r1, #0
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	1894      	adds	r4, r2, r2
 8008c22:	603c      	str	r4, [r7, #0]
 8008c24:	415b      	adcs	r3, r3
 8008c26:	607b      	str	r3, [r7, #4]
 8008c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c2c:	1812      	adds	r2, r2, r0
 8008c2e:	eb41 0303 	adc.w	r3, r1, r3
 8008c32:	f04f 0400 	mov.w	r4, #0
 8008c36:	f04f 0500 	mov.w	r5, #0
 8008c3a:	00dd      	lsls	r5, r3, #3
 8008c3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c40:	00d4      	lsls	r4, r2, #3
 8008c42:	4622      	mov	r2, r4
 8008c44:	462b      	mov	r3, r5
 8008c46:	eb12 0a00 	adds.w	sl, r2, r0
 8008c4a:	eb43 0b01 	adc.w	fp, r3, r1
 8008c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f04f 0100 	mov.w	r1, #0
 8008c58:	f04f 0200 	mov.w	r2, #0
 8008c5c:	f04f 0300 	mov.w	r3, #0
 8008c60:	008b      	lsls	r3, r1, #2
 8008c62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c66:	0082      	lsls	r2, r0, #2
 8008c68:	4650      	mov	r0, sl
 8008c6a:	4659      	mov	r1, fp
 8008c6c:	f7f7 ffd4 	bl	8000c18 <__aeabi_uldivmod>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	4b0e      	ldr	r3, [pc, #56]	; (8008cb0 <UART_SetConfig+0x38c>)
 8008c76:	fba3 1302 	umull	r1, r3, r3, r2
 8008c7a:	095b      	lsrs	r3, r3, #5
 8008c7c:	2164      	movs	r1, #100	; 0x64
 8008c7e:	fb01 f303 	mul.w	r3, r1, r3
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	011b      	lsls	r3, r3, #4
 8008c86:	3332      	adds	r3, #50	; 0x32
 8008c88:	4a09      	ldr	r2, [pc, #36]	; (8008cb0 <UART_SetConfig+0x38c>)
 8008c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c8e:	095b      	lsrs	r3, r3, #5
 8008c90:	f003 020f 	and.w	r2, r3, #15
 8008c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4432      	add	r2, r6
 8008c9a:	609a      	str	r2, [r3, #8]
}
 8008c9c:	bf00      	nop
 8008c9e:	377c      	adds	r7, #124	; 0x7c
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca6:	bf00      	nop
 8008ca8:	40011000 	.word	0x40011000
 8008cac:	40011400 	.word	0x40011400
 8008cb0:	51eb851f 	.word	0x51eb851f

08008cb4 <__NVIC_SetPriority>:
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	db0a      	blt.n	8008cde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	490c      	ldr	r1, [pc, #48]	; (8008d00 <__NVIC_SetPriority+0x4c>)
 8008cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cd2:	0112      	lsls	r2, r2, #4
 8008cd4:	b2d2      	uxtb	r2, r2
 8008cd6:	440b      	add	r3, r1
 8008cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008cdc:	e00a      	b.n	8008cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	4908      	ldr	r1, [pc, #32]	; (8008d04 <__NVIC_SetPriority+0x50>)
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	f003 030f 	and.w	r3, r3, #15
 8008cea:	3b04      	subs	r3, #4
 8008cec:	0112      	lsls	r2, r2, #4
 8008cee:	b2d2      	uxtb	r2, r2
 8008cf0:	440b      	add	r3, r1
 8008cf2:	761a      	strb	r2, [r3, #24]
}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	e000e100 	.word	0xe000e100
 8008d04:	e000ed00 	.word	0xe000ed00

08008d08 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008d0c:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <SysTick_Handler+0x1c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008d10:	f002 faae 	bl	800b270 <xTaskGetSchedulerState>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d001      	beq.n	8008d1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008d1a:	f003 f995 	bl	800c048 <xPortSysTickHandler>
  }
}
 8008d1e:	bf00      	nop
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	e000e010 	.word	0xe000e010

08008d28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	f06f 0004 	mvn.w	r0, #4
 8008d32:	f7ff ffbf 	bl	8008cb4 <__NVIC_SetPriority>
#endif
}
 8008d36:	bf00      	nop
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d42:	f3ef 8305 	mrs	r3, IPSR
 8008d46:	603b      	str	r3, [r7, #0]
  return(result);
 8008d48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008d4e:	f06f 0305 	mvn.w	r3, #5
 8008d52:	607b      	str	r3, [r7, #4]
 8008d54:	e00c      	b.n	8008d70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008d56:	4b0a      	ldr	r3, [pc, #40]	; (8008d80 <osKernelInitialize+0x44>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d105      	bne.n	8008d6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008d5e:	4b08      	ldr	r3, [pc, #32]	; (8008d80 <osKernelInitialize+0x44>)
 8008d60:	2201      	movs	r2, #1
 8008d62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	607b      	str	r3, [r7, #4]
 8008d68:	e002      	b.n	8008d70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d70:	687b      	ldr	r3, [r7, #4]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	200000b4 	.word	0x200000b4

08008d84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d8a:	f3ef 8305 	mrs	r3, IPSR
 8008d8e:	603b      	str	r3, [r7, #0]
  return(result);
 8008d90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008d96:	f06f 0305 	mvn.w	r3, #5
 8008d9a:	607b      	str	r3, [r7, #4]
 8008d9c:	e010      	b.n	8008dc0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008d9e:	4b0b      	ldr	r3, [pc, #44]	; (8008dcc <osKernelStart+0x48>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d109      	bne.n	8008dba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008da6:	f7ff ffbf 	bl	8008d28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008daa:	4b08      	ldr	r3, [pc, #32]	; (8008dcc <osKernelStart+0x48>)
 8008dac:	2202      	movs	r2, #2
 8008dae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008db0:	f001 fe04 	bl	800a9bc <vTaskStartScheduler>
      stat = osOK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	607b      	str	r3, [r7, #4]
 8008db8:	e002      	b.n	8008dc0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008dc0:	687b      	ldr	r3, [r7, #4]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	200000b4 	.word	0x200000b4

08008dd0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dd6:	f3ef 8305 	mrs	r3, IPSR
 8008dda:	603b      	str	r3, [r7, #0]
  return(result);
 8008ddc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008de2:	f001 ff0d 	bl	800ac00 <xTaskGetTickCountFromISR>
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	e002      	b.n	8008df0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008dea:	f001 fef9 	bl	800abe0 <xTaskGetTickCount>
 8008dee:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008df0:	687b      	ldr	r3, [r7, #4]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b08e      	sub	sp, #56	; 0x38
 8008dfe:	af04      	add	r7, sp, #16
 8008e00:	60f8      	str	r0, [r7, #12]
 8008e02:	60b9      	str	r1, [r7, #8]
 8008e04:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e0a:	f3ef 8305 	mrs	r3, IPSR
 8008e0e:	617b      	str	r3, [r7, #20]
  return(result);
 8008e10:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d17e      	bne.n	8008f14 <osThreadNew+0x11a>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d07b      	beq.n	8008f14 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008e1c:	2380      	movs	r3, #128	; 0x80
 8008e1e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008e20:	2318      	movs	r3, #24
 8008e22:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008e24:	2300      	movs	r3, #0
 8008e26:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e2c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d045      	beq.n	8008ec0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <osThreadNew+0x48>
        name = attr->name;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d002      	beq.n	8008e50 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d008      	beq.n	8008e68 <osThreadNew+0x6e>
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	2b38      	cmp	r3, #56	; 0x38
 8008e5a:	d805      	bhi.n	8008e68 <osThreadNew+0x6e>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <osThreadNew+0x72>
        return (NULL);
 8008e68:	2300      	movs	r3, #0
 8008e6a:	e054      	b.n	8008f16 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	695b      	ldr	r3, [r3, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d003      	beq.n	8008e7c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	089b      	lsrs	r3, r3, #2
 8008e7a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00e      	beq.n	8008ea2 <osThreadNew+0xa8>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	2b5b      	cmp	r3, #91	; 0x5b
 8008e8a:	d90a      	bls.n	8008ea2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d006      	beq.n	8008ea2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d002      	beq.n	8008ea2 <osThreadNew+0xa8>
        mem = 1;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	61bb      	str	r3, [r7, #24]
 8008ea0:	e010      	b.n	8008ec4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10c      	bne.n	8008ec4 <osThreadNew+0xca>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d108      	bne.n	8008ec4 <osThreadNew+0xca>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d104      	bne.n	8008ec4 <osThreadNew+0xca>
          mem = 0;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	61bb      	str	r3, [r7, #24]
 8008ebe:	e001      	b.n	8008ec4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d110      	bne.n	8008eec <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ed2:	9202      	str	r2, [sp, #8]
 8008ed4:	9301      	str	r3, [sp, #4]
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	6a3a      	ldr	r2, [r7, #32]
 8008ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f001 fa8f 	bl	800a404 <xTaskCreateStatic>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	613b      	str	r3, [r7, #16]
 8008eea:	e013      	b.n	8008f14 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d110      	bne.n	8008f14 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	f107 0310 	add.w	r3, r7, #16
 8008efa:	9301      	str	r3, [sp, #4]
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f001 fada 	bl	800a4be <xTaskCreate>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d001      	beq.n	8008f14 <osThreadNew+0x11a>
            hTask = NULL;
 8008f10:	2300      	movs	r3, #0
 8008f12:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008f14:	693b      	ldr	r3, [r7, #16]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3728      	adds	r7, #40	; 0x28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b086      	sub	sp, #24
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f2a:	f3ef 8305 	mrs	r3, IPSR
 8008f2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f30:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <osThreadSuspend+0x20>
    stat = osErrorISR;
 8008f36:	f06f 0305 	mvn.w	r3, #5
 8008f3a:	617b      	str	r3, [r7, #20]
 8008f3c:	e00b      	b.n	8008f56 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d103      	bne.n	8008f4c <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8008f44:	f06f 0303 	mvn.w	r3, #3
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	e004      	b.n	8008f56 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8008f50:	6938      	ldr	r0, [r7, #16]
 8008f52:	f001 fc2d 	bl	800a7b0 <vTaskSuspend>
  }

  return (stat);
 8008f56:	697b      	ldr	r3, [r7, #20]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f6c:	f3ef 8305 	mrs	r3, IPSR
 8008f70:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f72:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d003      	beq.n	8008f80 <osThreadResume+0x20>
    stat = osErrorISR;
 8008f78:	f06f 0305 	mvn.w	r3, #5
 8008f7c:	617b      	str	r3, [r7, #20]
 8008f7e:	e00b      	b.n	8008f98 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d103      	bne.n	8008f8e <osThreadResume+0x2e>
    stat = osErrorParameter;
 8008f86:	f06f 0303 	mvn.w	r3, #3
 8008f8a:	617b      	str	r3, [r7, #20]
 8008f8c:	e004      	b.n	8008f98 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8008f92:	6938      	ldr	r0, [r7, #16]
 8008f94:	f001 fcb4 	bl	800a900 <vTaskResume>
  }

  return (stat);
 8008f98:	697b      	ldr	r3, [r7, #20]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3718      	adds	r7, #24
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008faa:	f3ef 8305 	mrs	r3, IPSR
 8008fae:	60bb      	str	r3, [r7, #8]
  return(result);
 8008fb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d003      	beq.n	8008fbe <osDelay+0x1c>
    stat = osErrorISR;
 8008fb6:	f06f 0305 	mvn.w	r3, #5
 8008fba:	60fb      	str	r3, [r7, #12]
 8008fbc:	e007      	b.n	8008fce <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <osDelay+0x2c>
      vTaskDelay(ticks);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f001 fbbd 	bl	800a748 <vTaskDelay>
    }
  }

  return (stat);
 8008fce:	68fb      	ldr	r3, [r7, #12]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08a      	sub	sp, #40	; 0x28
 8008fdc:	af02      	add	r7, sp, #8
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fe8:	f3ef 8305 	mrs	r3, IPSR
 8008fec:	613b      	str	r3, [r7, #16]
  return(result);
 8008fee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d175      	bne.n	80090e0 <osSemaphoreNew+0x108>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d072      	beq.n	80090e0 <osSemaphoreNew+0x108>
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d86e      	bhi.n	80090e0 <osSemaphoreNew+0x108>
    mem = -1;
 8009002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009006:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d015      	beq.n	800903a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d006      	beq.n	8009024 <osSemaphoreNew+0x4c>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	2b4f      	cmp	r3, #79	; 0x4f
 800901c:	d902      	bls.n	8009024 <osSemaphoreNew+0x4c>
        mem = 1;
 800901e:	2301      	movs	r3, #1
 8009020:	61bb      	str	r3, [r7, #24]
 8009022:	e00c      	b.n	800903e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d108      	bne.n	800903e <osSemaphoreNew+0x66>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d104      	bne.n	800903e <osSemaphoreNew+0x66>
          mem = 0;
 8009034:	2300      	movs	r3, #0
 8009036:	61bb      	str	r3, [r7, #24]
 8009038:	e001      	b.n	800903e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009044:	d04c      	beq.n	80090e0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d128      	bne.n	800909e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d10a      	bne.n	8009068 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	2203      	movs	r2, #3
 8009058:	9200      	str	r2, [sp, #0]
 800905a:	2200      	movs	r2, #0
 800905c:	2100      	movs	r1, #0
 800905e:	2001      	movs	r0, #1
 8009060:	f000 fa2a 	bl	80094b8 <xQueueGenericCreateStatic>
 8009064:	61f8      	str	r0, [r7, #28]
 8009066:	e005      	b.n	8009074 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009068:	2203      	movs	r2, #3
 800906a:	2100      	movs	r1, #0
 800906c:	2001      	movs	r0, #1
 800906e:	f000 fa9b 	bl	80095a8 <xQueueGenericCreate>
 8009072:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d022      	beq.n	80090c0 <osSemaphoreNew+0xe8>
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d01f      	beq.n	80090c0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009080:	2300      	movs	r3, #0
 8009082:	2200      	movs	r2, #0
 8009084:	2100      	movs	r1, #0
 8009086:	69f8      	ldr	r0, [r7, #28]
 8009088:	f000 fb56 	bl	8009738 <xQueueGenericSend>
 800908c:	4603      	mov	r3, r0
 800908e:	2b01      	cmp	r3, #1
 8009090:	d016      	beq.n	80090c0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009092:	69f8      	ldr	r0, [r7, #28]
 8009094:	f000 ffe2 	bl	800a05c <vQueueDelete>
            hSemaphore = NULL;
 8009098:	2300      	movs	r3, #0
 800909a:	61fb      	str	r3, [r7, #28]
 800909c:	e010      	b.n	80090c0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d108      	bne.n	80090b6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	461a      	mov	r2, r3
 80090aa:	68b9      	ldr	r1, [r7, #8]
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 fad8 	bl	8009662 <xQueueCreateCountingSemaphoreStatic>
 80090b2:	61f8      	str	r0, [r7, #28]
 80090b4:	e004      	b.n	80090c0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80090b6:	68b9      	ldr	r1, [r7, #8]
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f000 fb09 	bl	80096d0 <xQueueCreateCountingSemaphore>
 80090be:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00c      	beq.n	80090e0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <osSemaphoreNew+0xfc>
          name = attr->name;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	617b      	str	r3, [r7, #20]
 80090d2:	e001      	b.n	80090d8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80090d4:	2300      	movs	r3, #0
 80090d6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80090d8:	6979      	ldr	r1, [r7, #20]
 80090da:	69f8      	ldr	r0, [r7, #28]
 80090dc:	f001 f90a 	bl	800a2f4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80090e0:	69fb      	ldr	r3, [r7, #28]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3720      	adds	r7, #32
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
	...

080090ec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d103      	bne.n	800910c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009104:	f06f 0303 	mvn.w	r3, #3
 8009108:	617b      	str	r3, [r7, #20]
 800910a:	e039      	b.n	8009180 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800910c:	f3ef 8305 	mrs	r3, IPSR
 8009110:	60fb      	str	r3, [r7, #12]
  return(result);
 8009112:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009114:	2b00      	cmp	r3, #0
 8009116:	d022      	beq.n	800915e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d003      	beq.n	8009126 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800911e:	f06f 0303 	mvn.w	r3, #3
 8009122:	617b      	str	r3, [r7, #20]
 8009124:	e02c      	b.n	8009180 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009126:	2300      	movs	r3, #0
 8009128:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800912a:	f107 0308 	add.w	r3, r7, #8
 800912e:	461a      	mov	r2, r3
 8009130:	2100      	movs	r1, #0
 8009132:	6938      	ldr	r0, [r7, #16]
 8009134:	f000 ff12 	bl	8009f5c <xQueueReceiveFromISR>
 8009138:	4603      	mov	r3, r0
 800913a:	2b01      	cmp	r3, #1
 800913c:	d003      	beq.n	8009146 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800913e:	f06f 0302 	mvn.w	r3, #2
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	e01c      	b.n	8009180 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d019      	beq.n	8009180 <osSemaphoreAcquire+0x94>
 800914c:	4b0f      	ldr	r3, [pc, #60]	; (800918c <osSemaphoreAcquire+0xa0>)
 800914e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	e010      	b.n	8009180 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6938      	ldr	r0, [r7, #16]
 8009162:	f000 fdef 	bl	8009d44 <xQueueSemaphoreTake>
 8009166:	4603      	mov	r3, r0
 8009168:	2b01      	cmp	r3, #1
 800916a:	d009      	beq.n	8009180 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d003      	beq.n	800917a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009172:	f06f 0301 	mvn.w	r3, #1
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	e002      	b.n	8009180 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800917a:	f06f 0302 	mvn.w	r3, #2
 800917e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009180:	697b      	ldr	r3, [r7, #20]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	e000ed04 	.word	0xe000ed04

08009190 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800919c:	2300      	movs	r3, #0
 800919e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d103      	bne.n	80091ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80091a6:	f06f 0303 	mvn.w	r3, #3
 80091aa:	617b      	str	r3, [r7, #20]
 80091ac:	e02c      	b.n	8009208 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091ae:	f3ef 8305 	mrs	r3, IPSR
 80091b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80091b4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d01a      	beq.n	80091f0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80091ba:	2300      	movs	r3, #0
 80091bc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80091be:	f107 0308 	add.w	r3, r7, #8
 80091c2:	4619      	mov	r1, r3
 80091c4:	6938      	ldr	r0, [r7, #16]
 80091c6:	f000 fc50 	bl	8009a6a <xQueueGiveFromISR>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d003      	beq.n	80091d8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80091d0:	f06f 0302 	mvn.w	r3, #2
 80091d4:	617b      	str	r3, [r7, #20]
 80091d6:	e017      	b.n	8009208 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d014      	beq.n	8009208 <osSemaphoreRelease+0x78>
 80091de:	4b0d      	ldr	r3, [pc, #52]	; (8009214 <osSemaphoreRelease+0x84>)
 80091e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091e4:	601a      	str	r2, [r3, #0]
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	e00b      	b.n	8009208 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80091f0:	2300      	movs	r3, #0
 80091f2:	2200      	movs	r2, #0
 80091f4:	2100      	movs	r1, #0
 80091f6:	6938      	ldr	r0, [r7, #16]
 80091f8:	f000 fa9e 	bl	8009738 <xQueueGenericSend>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d002      	beq.n	8009208 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009202:	f06f 0302 	mvn.w	r3, #2
 8009206:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009208:	697b      	ldr	r3, [r7, #20]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3718      	adds	r7, #24
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	e000ed04 	.word	0xe000ed04

08009218 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	4a07      	ldr	r2, [pc, #28]	; (8009244 <vApplicationGetIdleTaskMemory+0x2c>)
 8009228:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	4a06      	ldr	r2, [pc, #24]	; (8009248 <vApplicationGetIdleTaskMemory+0x30>)
 800922e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2280      	movs	r2, #128	; 0x80
 8009234:	601a      	str	r2, [r3, #0]
}
 8009236:	bf00      	nop
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	200000b8 	.word	0x200000b8
 8009248:	20000114 	.word	0x20000114

0800924c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4a07      	ldr	r2, [pc, #28]	; (8009278 <vApplicationGetTimerTaskMemory+0x2c>)
 800925c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	4a06      	ldr	r2, [pc, #24]	; (800927c <vApplicationGetTimerTaskMemory+0x30>)
 8009262:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f44f 7280 	mov.w	r2, #256	; 0x100
 800926a:	601a      	str	r2, [r3, #0]
}
 800926c:	bf00      	nop
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	20000314 	.word	0x20000314
 800927c:	20000370 	.word	0x20000370

08009280 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f103 0208 	add.w	r2, r3, #8
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009298:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f103 0208 	add.w	r2, r3, #8
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f103 0208 	add.w	r2, r3, #8
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80092ce:	bf00      	nop
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092da:	b480      	push	{r7}
 80092dc:	b085      	sub	sp, #20
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	601a      	str	r2, [r3, #0]
}
 8009316:	bf00      	nop
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009322:	b480      	push	{r7}
 8009324:	b085      	sub	sp, #20
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009338:	d103      	bne.n	8009342 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	60fb      	str	r3, [r7, #12]
 8009340:	e00c      	b.n	800935c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	3308      	adds	r3, #8
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	e002      	b.n	8009350 <vListInsert+0x2e>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	60fb      	str	r3, [r7, #12]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	429a      	cmp	r2, r3
 800935a:	d2f6      	bcs.n	800934a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	683a      	ldr	r2, [r7, #0]
 800936a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	683a      	ldr	r2, [r7, #0]
 8009376:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	1c5a      	adds	r2, r3, #1
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	601a      	str	r2, [r3, #0]
}
 8009388:	bf00      	nop
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	6892      	ldr	r2, [r2, #8]
 80093aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	6852      	ldr	r2, [r2, #4]
 80093b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d103      	bne.n	80093c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689a      	ldr	r2, [r3, #8]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	1e5a      	subs	r2, r3, #1
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10a      	bne.n	8009412 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800940e:	bf00      	nop
 8009410:	e7fe      	b.n	8009410 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009412:	f002 fd87 	bl	800bf24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800941e:	68f9      	ldr	r1, [r7, #12]
 8009420:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009422:	fb01 f303 	mul.w	r3, r1, r3
 8009426:	441a      	add	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009442:	3b01      	subs	r3, #1
 8009444:	68f9      	ldr	r1, [r7, #12]
 8009446:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009448:	fb01 f303 	mul.w	r3, r1, r3
 800944c:	441a      	add	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	22ff      	movs	r2, #255	; 0xff
 8009456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	22ff      	movs	r2, #255	; 0xff
 800945e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d114      	bne.n	8009492 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d01a      	beq.n	80094a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3310      	adds	r3, #16
 8009474:	4618      	mov	r0, r3
 8009476:	f001 fd3d 	bl	800aef4 <xTaskRemoveFromEventList>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d012      	beq.n	80094a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009480:	4b0c      	ldr	r3, [pc, #48]	; (80094b4 <xQueueGenericReset+0xcc>)
 8009482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	e009      	b.n	80094a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	3310      	adds	r3, #16
 8009496:	4618      	mov	r0, r3
 8009498:	f7ff fef2 	bl	8009280 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	3324      	adds	r3, #36	; 0x24
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7ff feed 	bl	8009280 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80094a6:	f002 fd6d 	bl	800bf84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80094aa:	2301      	movs	r3, #1
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	e000ed04 	.word	0xe000ed04

080094b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b08e      	sub	sp, #56	; 0x38
 80094bc:	af02      	add	r7, sp, #8
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
 80094c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10a      	bne.n	80094e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094de:	bf00      	nop
 80094e0:	e7fe      	b.n	80094e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10a      	bne.n	80094fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80094e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094fa:	bf00      	nop
 80094fc:	e7fe      	b.n	80094fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d002      	beq.n	800950a <xQueueGenericCreateStatic+0x52>
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <xQueueGenericCreateStatic+0x56>
 800950a:	2301      	movs	r3, #1
 800950c:	e000      	b.n	8009510 <xQueueGenericCreateStatic+0x58>
 800950e:	2300      	movs	r3, #0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10a      	bne.n	800952a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	623b      	str	r3, [r7, #32]
}
 8009526:	bf00      	nop
 8009528:	e7fe      	b.n	8009528 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d102      	bne.n	8009536 <xQueueGenericCreateStatic+0x7e>
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <xQueueGenericCreateStatic+0x82>
 8009536:	2301      	movs	r3, #1
 8009538:	e000      	b.n	800953c <xQueueGenericCreateStatic+0x84>
 800953a:	2300      	movs	r3, #0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10a      	bne.n	8009556 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	61fb      	str	r3, [r7, #28]
}
 8009552:	bf00      	nop
 8009554:	e7fe      	b.n	8009554 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009556:	2350      	movs	r3, #80	; 0x50
 8009558:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2b50      	cmp	r3, #80	; 0x50
 800955e:	d00a      	beq.n	8009576 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	61bb      	str	r3, [r7, #24]
}
 8009572:	bf00      	nop
 8009574:	e7fe      	b.n	8009574 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009576:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800957c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00d      	beq.n	800959e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009584:	2201      	movs	r2, #1
 8009586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800958a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800958e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	4613      	mov	r3, r2
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	68b9      	ldr	r1, [r7, #8]
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f000 f83f 	bl	800961c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800959e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3730      	adds	r7, #48	; 0x30
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b08a      	sub	sp, #40	; 0x28
 80095ac:	af02      	add	r7, sp, #8
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	4613      	mov	r3, r2
 80095b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10a      	bne.n	80095d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	613b      	str	r3, [r7, #16]
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	fb02 f303 	mul.w	r3, r2, r3
 80095da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	3350      	adds	r3, #80	; 0x50
 80095e0:	4618      	mov	r0, r3
 80095e2:	f002 fdc1 	bl	800c168 <pvPortMalloc>
 80095e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d011      	beq.n	8009612 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	3350      	adds	r3, #80	; 0x50
 80095f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009600:	79fa      	ldrb	r2, [r7, #7]
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	4613      	mov	r3, r2
 8009608:	697a      	ldr	r2, [r7, #20]
 800960a:	68b9      	ldr	r1, [r7, #8]
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 f805 	bl	800961c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009612:	69bb      	ldr	r3, [r7, #24]
	}
 8009614:	4618      	mov	r0, r3
 8009616:	3720      	adds	r7, #32
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
 8009628:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d103      	bne.n	8009638 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	69ba      	ldr	r2, [r7, #24]
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	e002      	b.n	800963e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800964a:	2101      	movs	r1, #1
 800964c:	69b8      	ldr	r0, [r7, #24]
 800964e:	f7ff fecb 	bl	80093e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	78fa      	ldrb	r2, [r7, #3]
 8009656:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800965a:	bf00      	nop
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009662:	b580      	push	{r7, lr}
 8009664:	b08a      	sub	sp, #40	; 0x28
 8009666:	af02      	add	r7, sp, #8
 8009668:	60f8      	str	r0, [r7, #12]
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10a      	bne.n	800968a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	61bb      	str	r3, [r7, #24]
}
 8009686:	bf00      	nop
 8009688:	e7fe      	b.n	8009688 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	429a      	cmp	r2, r3
 8009690:	d90a      	bls.n	80096a8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	617b      	str	r3, [r7, #20]
}
 80096a4:	bf00      	nop
 80096a6:	e7fe      	b.n	80096a6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80096a8:	2302      	movs	r3, #2
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	2100      	movs	r1, #0
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f7ff ff00 	bl	80094b8 <xQueueGenericCreateStatic>
 80096b8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80096c6:	69fb      	ldr	r3, [r7, #28]
	}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3720      	adds	r7, #32
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	613b      	str	r3, [r7, #16]
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d90a      	bls.n	8009714 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	60fb      	str	r3, [r7, #12]
}
 8009710:	bf00      	nop
 8009712:	e7fe      	b.n	8009712 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009714:	2202      	movs	r2, #2
 8009716:	2100      	movs	r1, #0
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7ff ff45 	bl	80095a8 <xQueueGenericCreate>
 800971e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d002      	beq.n	800972c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800972c:	697b      	ldr	r3, [r7, #20]
	}
 800972e:	4618      	mov	r0, r3
 8009730:	3718      	adds	r7, #24
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08e      	sub	sp, #56	; 0x38
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
 8009744:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009746:	2300      	movs	r3, #0
 8009748:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10a      	bne.n	800976a <xQueueGenericSend+0x32>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009766:	bf00      	nop
 8009768:	e7fe      	b.n	8009768 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d103      	bne.n	8009778 <xQueueGenericSend+0x40>
 8009770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <xQueueGenericSend+0x44>
 8009778:	2301      	movs	r3, #1
 800977a:	e000      	b.n	800977e <xQueueGenericSend+0x46>
 800977c:	2300      	movs	r3, #0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10a      	bne.n	8009798 <xQueueGenericSend+0x60>
	__asm volatile
 8009782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009786:	f383 8811 	msr	BASEPRI, r3
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009794:	bf00      	nop
 8009796:	e7fe      	b.n	8009796 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	2b02      	cmp	r3, #2
 800979c:	d103      	bne.n	80097a6 <xQueueGenericSend+0x6e>
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d101      	bne.n	80097aa <xQueueGenericSend+0x72>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e000      	b.n	80097ac <xQueueGenericSend+0x74>
 80097aa:	2300      	movs	r3, #0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10a      	bne.n	80097c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	623b      	str	r3, [r7, #32]
}
 80097c2:	bf00      	nop
 80097c4:	e7fe      	b.n	80097c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097c6:	f001 fd53 	bl	800b270 <xTaskGetSchedulerState>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d102      	bne.n	80097d6 <xQueueGenericSend+0x9e>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d101      	bne.n	80097da <xQueueGenericSend+0xa2>
 80097d6:	2301      	movs	r3, #1
 80097d8:	e000      	b.n	80097dc <xQueueGenericSend+0xa4>
 80097da:	2300      	movs	r3, #0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10a      	bne.n	80097f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	61fb      	str	r3, [r7, #28]
}
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097f6:	f002 fb95 	bl	800bf24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009802:	429a      	cmp	r2, r3
 8009804:	d302      	bcc.n	800980c <xQueueGenericSend+0xd4>
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	2b02      	cmp	r3, #2
 800980a:	d129      	bne.n	8009860 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	68b9      	ldr	r1, [r7, #8]
 8009810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009812:	f000 fc5e 	bl	800a0d2 <prvCopyDataToQueue>
 8009816:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981c:	2b00      	cmp	r3, #0
 800981e:	d010      	beq.n	8009842 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009822:	3324      	adds	r3, #36	; 0x24
 8009824:	4618      	mov	r0, r3
 8009826:	f001 fb65 	bl	800aef4 <xTaskRemoveFromEventList>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d013      	beq.n	8009858 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009830:	4b3f      	ldr	r3, [pc, #252]	; (8009930 <xQueueGenericSend+0x1f8>)
 8009832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009836:	601a      	str	r2, [r3, #0]
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	e00a      	b.n	8009858 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009844:	2b00      	cmp	r3, #0
 8009846:	d007      	beq.n	8009858 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009848:	4b39      	ldr	r3, [pc, #228]	; (8009930 <xQueueGenericSend+0x1f8>)
 800984a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009858:	f002 fb94 	bl	800bf84 <vPortExitCritical>
				return pdPASS;
 800985c:	2301      	movs	r3, #1
 800985e:	e063      	b.n	8009928 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d103      	bne.n	800986e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009866:	f002 fb8d 	bl	800bf84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800986a:	2300      	movs	r3, #0
 800986c:	e05c      	b.n	8009928 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800986e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009870:	2b00      	cmp	r3, #0
 8009872:	d106      	bne.n	8009882 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009874:	f107 0314 	add.w	r3, r7, #20
 8009878:	4618      	mov	r0, r3
 800987a:	f001 fb9f 	bl	800afbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800987e:	2301      	movs	r3, #1
 8009880:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009882:	f002 fb7f 	bl	800bf84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009886:	f001 f8ff 	bl	800aa88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800988a:	f002 fb4b 	bl	800bf24 <vPortEnterCritical>
 800988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009894:	b25b      	sxtb	r3, r3
 8009896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800989a:	d103      	bne.n	80098a4 <xQueueGenericSend+0x16c>
 800989c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098aa:	b25b      	sxtb	r3, r3
 80098ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098b0:	d103      	bne.n	80098ba <xQueueGenericSend+0x182>
 80098b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098ba:	f002 fb63 	bl	800bf84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098be:	1d3a      	adds	r2, r7, #4
 80098c0:	f107 0314 	add.w	r3, r7, #20
 80098c4:	4611      	mov	r1, r2
 80098c6:	4618      	mov	r0, r3
 80098c8:	f001 fb8e 	bl	800afe8 <xTaskCheckForTimeOut>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d124      	bne.n	800991c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80098d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098d4:	f000 fcf5 	bl	800a2c2 <prvIsQueueFull>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d018      	beq.n	8009910 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80098de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e0:	3310      	adds	r3, #16
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	4611      	mov	r1, r2
 80098e6:	4618      	mov	r0, r3
 80098e8:	f001 fab4 	bl	800ae54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80098ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098ee:	f000 fc80 	bl	800a1f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80098f2:	f001 f8d7 	bl	800aaa4 <xTaskResumeAll>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f47f af7c 	bne.w	80097f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80098fe:	4b0c      	ldr	r3, [pc, #48]	; (8009930 <xQueueGenericSend+0x1f8>)
 8009900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009904:	601a      	str	r2, [r3, #0]
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	e772      	b.n	80097f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009912:	f000 fc6e 	bl	800a1f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009916:	f001 f8c5 	bl	800aaa4 <xTaskResumeAll>
 800991a:	e76c      	b.n	80097f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800991c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800991e:	f000 fc68 	bl	800a1f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009922:	f001 f8bf 	bl	800aaa4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009926:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009928:	4618      	mov	r0, r3
 800992a:	3738      	adds	r7, #56	; 0x38
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	e000ed04 	.word	0xe000ed04

08009934 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b090      	sub	sp, #64	; 0x40
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10a      	bne.n	8009962 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800994c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800995e:	bf00      	nop
 8009960:	e7fe      	b.n	8009960 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d103      	bne.n	8009970 <xQueueGenericSendFromISR+0x3c>
 8009968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <xQueueGenericSendFromISR+0x40>
 8009970:	2301      	movs	r3, #1
 8009972:	e000      	b.n	8009976 <xQueueGenericSendFromISR+0x42>
 8009974:	2300      	movs	r3, #0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10a      	bne.n	8009990 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800998c:	bf00      	nop
 800998e:	e7fe      	b.n	800998e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	2b02      	cmp	r3, #2
 8009994:	d103      	bne.n	800999e <xQueueGenericSendFromISR+0x6a>
 8009996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800999a:	2b01      	cmp	r3, #1
 800999c:	d101      	bne.n	80099a2 <xQueueGenericSendFromISR+0x6e>
 800999e:	2301      	movs	r3, #1
 80099a0:	e000      	b.n	80099a4 <xQueueGenericSendFromISR+0x70>
 80099a2:	2300      	movs	r3, #0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10a      	bne.n	80099be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80099a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ac:	f383 8811 	msr	BASEPRI, r3
 80099b0:	f3bf 8f6f 	isb	sy
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	623b      	str	r3, [r7, #32]
}
 80099ba:	bf00      	nop
 80099bc:	e7fe      	b.n	80099bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099be:	f002 fb93 	bl	800c0e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80099c2:	f3ef 8211 	mrs	r2, BASEPRI
 80099c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	61fa      	str	r2, [r7, #28]
 80099d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80099da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d302      	bcc.n	80099f0 <xQueueGenericSendFromISR+0xbc>
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d12f      	bne.n	8009a50 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a00:	683a      	ldr	r2, [r7, #0]
 8009a02:	68b9      	ldr	r1, [r7, #8]
 8009a04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a06:	f000 fb64 	bl	800a0d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a12:	d112      	bne.n	8009a3a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d016      	beq.n	8009a4a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1e:	3324      	adds	r3, #36	; 0x24
 8009a20:	4618      	mov	r0, r3
 8009a22:	f001 fa67 	bl	800aef4 <xTaskRemoveFromEventList>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00e      	beq.n	8009a4a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00b      	beq.n	8009a4a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	601a      	str	r2, [r3, #0]
 8009a38:	e007      	b.n	8009a4a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a3e:	3301      	adds	r3, #1
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	b25a      	sxtb	r2, r3
 8009a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009a4e:	e001      	b.n	8009a54 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a50:	2300      	movs	r3, #0
 8009a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a56:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009a5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3740      	adds	r7, #64	; 0x40
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b08e      	sub	sp, #56	; 0x38
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10a      	bne.n	8009a94 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	623b      	str	r3, [r7, #32]
}
 8009a90:	bf00      	nop
 8009a92:	e7fe      	b.n	8009a92 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00a      	beq.n	8009ab2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	61fb      	str	r3, [r7, #28]
}
 8009aae:	bf00      	nop
 8009ab0:	e7fe      	b.n	8009ab0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d103      	bne.n	8009ac2 <xQueueGiveFromISR+0x58>
 8009aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d101      	bne.n	8009ac6 <xQueueGiveFromISR+0x5c>
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e000      	b.n	8009ac8 <xQueueGiveFromISR+0x5e>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10a      	bne.n	8009ae2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	61bb      	str	r3, [r7, #24]
}
 8009ade:	bf00      	nop
 8009ae0:	e7fe      	b.n	8009ae0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ae2:	f002 fb01 	bl	800c0e8 <vPortValidateInterruptPriority>
	__asm volatile
 8009ae6:	f3ef 8211 	mrs	r2, BASEPRI
 8009aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	617a      	str	r2, [r7, #20]
 8009afc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009afe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b06:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d22b      	bcs.n	8009b6a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b22:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b2c:	d112      	bne.n	8009b54 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d016      	beq.n	8009b64 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b38:	3324      	adds	r3, #36	; 0x24
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f001 f9da 	bl	800aef4 <xTaskRemoveFromEventList>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00e      	beq.n	8009b64 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00b      	beq.n	8009b64 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	601a      	str	r2, [r3, #0]
 8009b52:	e007      	b.n	8009b64 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b58:	3301      	adds	r3, #1
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	b25a      	sxtb	r2, r3
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009b64:	2301      	movs	r3, #1
 8009b66:	637b      	str	r3, [r7, #52]	; 0x34
 8009b68:	e001      	b.n	8009b6e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8009b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b70:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f383 8811 	msr	BASEPRI, r3
}
 8009b78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3738      	adds	r7, #56	; 0x38
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08c      	sub	sp, #48	; 0x30
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b90:	2300      	movs	r3, #0
 8009b92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10a      	bne.n	8009bb4 <xQueueReceive+0x30>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	623b      	str	r3, [r7, #32]
}
 8009bb0:	bf00      	nop
 8009bb2:	e7fe      	b.n	8009bb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d103      	bne.n	8009bc2 <xQueueReceive+0x3e>
 8009bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d101      	bne.n	8009bc6 <xQueueReceive+0x42>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e000      	b.n	8009bc8 <xQueueReceive+0x44>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10a      	bne.n	8009be2 <xQueueReceive+0x5e>
	__asm volatile
 8009bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd0:	f383 8811 	msr	BASEPRI, r3
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	61fb      	str	r3, [r7, #28]
}
 8009bde:	bf00      	nop
 8009be0:	e7fe      	b.n	8009be0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009be2:	f001 fb45 	bl	800b270 <xTaskGetSchedulerState>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d102      	bne.n	8009bf2 <xQueueReceive+0x6e>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d101      	bne.n	8009bf6 <xQueueReceive+0x72>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e000      	b.n	8009bf8 <xQueueReceive+0x74>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10a      	bne.n	8009c12 <xQueueReceive+0x8e>
	__asm volatile
 8009bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c00:	f383 8811 	msr	BASEPRI, r3
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	61bb      	str	r3, [r7, #24]
}
 8009c0e:	bf00      	nop
 8009c10:	e7fe      	b.n	8009c10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c12:	f002 f987 	bl	800bf24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d01f      	beq.n	8009c62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c22:	68b9      	ldr	r1, [r7, #8]
 8009c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c26:	f000 fabe 	bl	800a1a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	1e5a      	subs	r2, r3, #1
 8009c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00f      	beq.n	8009c5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3c:	3310      	adds	r3, #16
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f001 f958 	bl	800aef4 <xTaskRemoveFromEventList>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d007      	beq.n	8009c5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c4a:	4b3d      	ldr	r3, [pc, #244]	; (8009d40 <xQueueReceive+0x1bc>)
 8009c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c50:	601a      	str	r2, [r3, #0]
 8009c52:	f3bf 8f4f 	dsb	sy
 8009c56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c5a:	f002 f993 	bl	800bf84 <vPortExitCritical>
				return pdPASS;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e069      	b.n	8009d36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d103      	bne.n	8009c70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c68:	f002 f98c 	bl	800bf84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	e062      	b.n	8009d36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d106      	bne.n	8009c84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c76:	f107 0310 	add.w	r3, r7, #16
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f001 f99e 	bl	800afbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c80:	2301      	movs	r3, #1
 8009c82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c84:	f002 f97e 	bl	800bf84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c88:	f000 fefe 	bl	800aa88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c8c:	f002 f94a 	bl	800bf24 <vPortEnterCritical>
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c96:	b25b      	sxtb	r3, r3
 8009c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c9c:	d103      	bne.n	8009ca6 <xQueueReceive+0x122>
 8009c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cac:	b25b      	sxtb	r3, r3
 8009cae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cb2:	d103      	bne.n	8009cbc <xQueueReceive+0x138>
 8009cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cbc:	f002 f962 	bl	800bf84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cc0:	1d3a      	adds	r2, r7, #4
 8009cc2:	f107 0310 	add.w	r3, r7, #16
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f001 f98d 	bl	800afe8 <xTaskCheckForTimeOut>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d123      	bne.n	8009d1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cd6:	f000 fade 	bl	800a296 <prvIsQueueEmpty>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d017      	beq.n	8009d10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce2:	3324      	adds	r3, #36	; 0x24
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f001 f8b3 	bl	800ae54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cf0:	f000 fa7f 	bl	800a1f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009cf4:	f000 fed6 	bl	800aaa4 <xTaskResumeAll>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d189      	bne.n	8009c12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009cfe:	4b10      	ldr	r3, [pc, #64]	; (8009d40 <xQueueReceive+0x1bc>)
 8009d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d04:	601a      	str	r2, [r3, #0]
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	e780      	b.n	8009c12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d12:	f000 fa6e 	bl	800a1f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d16:	f000 fec5 	bl	800aaa4 <xTaskResumeAll>
 8009d1a:	e77a      	b.n	8009c12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d1e:	f000 fa68 	bl	800a1f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d22:	f000 febf 	bl	800aaa4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d28:	f000 fab5 	bl	800a296 <prvIsQueueEmpty>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f43f af6f 	beq.w	8009c12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3730      	adds	r7, #48	; 0x30
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	e000ed04 	.word	0xe000ed04

08009d44 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b08e      	sub	sp, #56	; 0x38
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009d56:	2300      	movs	r3, #0
 8009d58:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d10a      	bne.n	8009d76 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	623b      	str	r3, [r7, #32]
}
 8009d72:	bf00      	nop
 8009d74:	e7fe      	b.n	8009d74 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00a      	beq.n	8009d94 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	61fb      	str	r3, [r7, #28]
}
 8009d90:	bf00      	nop
 8009d92:	e7fe      	b.n	8009d92 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d94:	f001 fa6c 	bl	800b270 <xTaskGetSchedulerState>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d102      	bne.n	8009da4 <xQueueSemaphoreTake+0x60>
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d101      	bne.n	8009da8 <xQueueSemaphoreTake+0x64>
 8009da4:	2301      	movs	r3, #1
 8009da6:	e000      	b.n	8009daa <xQueueSemaphoreTake+0x66>
 8009da8:	2300      	movs	r3, #0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10a      	bne.n	8009dc4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	61bb      	str	r3, [r7, #24]
}
 8009dc0:	bf00      	nop
 8009dc2:	e7fe      	b.n	8009dc2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dc4:	f002 f8ae 	bl	800bf24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dcc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d024      	beq.n	8009e1e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd6:	1e5a      	subs	r2, r3, #1
 8009dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dda:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d104      	bne.n	8009dee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009de4:	f001 fbba 	bl	800b55c <pvTaskIncrementMutexHeldCount>
 8009de8:	4602      	mov	r2, r0
 8009dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00f      	beq.n	8009e16 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df8:	3310      	adds	r3, #16
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f001 f87a 	bl	800aef4 <xTaskRemoveFromEventList>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d007      	beq.n	8009e16 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009e06:	4b54      	ldr	r3, [pc, #336]	; (8009f58 <xQueueSemaphoreTake+0x214>)
 8009e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e0c:	601a      	str	r2, [r3, #0]
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009e16:	f002 f8b5 	bl	800bf84 <vPortExitCritical>
				return pdPASS;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e097      	b.n	8009f4e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d111      	bne.n	8009e48 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	617b      	str	r3, [r7, #20]
}
 8009e3c:	bf00      	nop
 8009e3e:	e7fe      	b.n	8009e3e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009e40:	f002 f8a0 	bl	800bf84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009e44:	2300      	movs	r3, #0
 8009e46:	e082      	b.n	8009f4e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d106      	bne.n	8009e5c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e4e:	f107 030c 	add.w	r3, r7, #12
 8009e52:	4618      	mov	r0, r3
 8009e54:	f001 f8b2 	bl	800afbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e5c:	f002 f892 	bl	800bf84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e60:	f000 fe12 	bl	800aa88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e64:	f002 f85e 	bl	800bf24 <vPortEnterCritical>
 8009e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e6e:	b25b      	sxtb	r3, r3
 8009e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e74:	d103      	bne.n	8009e7e <xQueueSemaphoreTake+0x13a>
 8009e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e84:	b25b      	sxtb	r3, r3
 8009e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e8a:	d103      	bne.n	8009e94 <xQueueSemaphoreTake+0x150>
 8009e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e94:	f002 f876 	bl	800bf84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e98:	463a      	mov	r2, r7
 8009e9a:	f107 030c 	add.w	r3, r7, #12
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f001 f8a1 	bl	800afe8 <xTaskCheckForTimeOut>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d132      	bne.n	8009f12 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009eac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eae:	f000 f9f2 	bl	800a296 <prvIsQueueEmpty>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d026      	beq.n	8009f06 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d109      	bne.n	8009ed4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009ec0:	f002 f830 	bl	800bf24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f001 f9ef 	bl	800b2ac <xTaskPriorityInherit>
 8009ece:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009ed0:	f002 f858 	bl	800bf84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed6:	3324      	adds	r3, #36	; 0x24
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	4611      	mov	r1, r2
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 ffb9 	bl	800ae54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009ee2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ee4:	f000 f985 	bl	800a1f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ee8:	f000 fddc 	bl	800aaa4 <xTaskResumeAll>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f47f af68 	bne.w	8009dc4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009ef4:	4b18      	ldr	r3, [pc, #96]	; (8009f58 <xQueueSemaphoreTake+0x214>)
 8009ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	e75e      	b.n	8009dc4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009f06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f08:	f000 f973 	bl	800a1f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f0c:	f000 fdca 	bl	800aaa4 <xTaskResumeAll>
 8009f10:	e758      	b.n	8009dc4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009f12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f14:	f000 f96d 	bl	800a1f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f18:	f000 fdc4 	bl	800aaa4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f1e:	f000 f9ba 	bl	800a296 <prvIsQueueEmpty>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f43f af4d 	beq.w	8009dc4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00d      	beq.n	8009f4c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009f30:	f001 fff8 	bl	800bf24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009f34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f36:	f000 f8b4 	bl	800a0a2 <prvGetDisinheritPriorityAfterTimeout>
 8009f3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f42:	4618      	mov	r0, r3
 8009f44:	f001 fa88 	bl	800b458 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009f48:	f002 f81c 	bl	800bf84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3738      	adds	r7, #56	; 0x38
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	e000ed04 	.word	0xe000ed04

08009f5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08e      	sub	sp, #56	; 0x38
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10a      	bne.n	8009f88 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f76:	f383 8811 	msr	BASEPRI, r3
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	623b      	str	r3, [r7, #32]
}
 8009f84:	bf00      	nop
 8009f86:	e7fe      	b.n	8009f86 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d103      	bne.n	8009f96 <xQueueReceiveFromISR+0x3a>
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <xQueueReceiveFromISR+0x3e>
 8009f96:	2301      	movs	r3, #1
 8009f98:	e000      	b.n	8009f9c <xQueueReceiveFromISR+0x40>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10a      	bne.n	8009fb6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	61fb      	str	r3, [r7, #28]
}
 8009fb2:	bf00      	nop
 8009fb4:	e7fe      	b.n	8009fb4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fb6:	f002 f897 	bl	800c0e8 <vPortValidateInterruptPriority>
	__asm volatile
 8009fba:	f3ef 8211 	mrs	r2, BASEPRI
 8009fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	61ba      	str	r2, [r7, #24]
 8009fd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009fd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d02f      	beq.n	800a042 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009fec:	68b9      	ldr	r1, [r7, #8]
 8009fee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ff0:	f000 f8d9 	bl	800a1a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff6:	1e5a      	subs	r2, r3, #1
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009ffc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a004:	d112      	bne.n	800a02c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d016      	beq.n	800a03c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a010:	3310      	adds	r3, #16
 800a012:	4618      	mov	r0, r3
 800a014:	f000 ff6e 	bl	800aef4 <xTaskRemoveFromEventList>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00e      	beq.n	800a03c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00b      	beq.n	800a03c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	601a      	str	r2, [r3, #0]
 800a02a:	e007      	b.n	800a03c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a02c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a030:	3301      	adds	r3, #1
 800a032:	b2db      	uxtb	r3, r3
 800a034:	b25a      	sxtb	r2, r3
 800a036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a03c:	2301      	movs	r3, #1
 800a03e:	637b      	str	r3, [r7, #52]	; 0x34
 800a040:	e001      	b.n	800a046 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a042:	2300      	movs	r3, #0
 800a044:	637b      	str	r3, [r7, #52]	; 0x34
 800a046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a048:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	f383 8811 	msr	BASEPRI, r3
}
 800a050:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a054:	4618      	mov	r0, r3
 800a056:	3738      	adds	r7, #56	; 0x38
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d10a      	bne.n	800a084 <vQueueDelete+0x28>
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	60bb      	str	r3, [r7, #8]
}
 800a080:	bf00      	nop
 800a082:	e7fe      	b.n	800a082 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f000 f95f 	bl	800a348 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a090:	2b00      	cmp	r3, #0
 800a092:	d102      	bne.n	800a09a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f002 f933 	bl	800c300 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a09a:	bf00      	nop
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a0a2:	b480      	push	{r7}
 800a0a4:	b085      	sub	sp, #20
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d006      	beq.n	800a0c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a0bc:	60fb      	str	r3, [r7, #12]
 800a0be:	e001      	b.n	800a0c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
	}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b086      	sub	sp, #24
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	60b9      	str	r1, [r7, #8]
 800a0dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d10d      	bne.n	800a10c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d14d      	bne.n	800a194 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f001 f93d 	bl	800b37c <xTaskPriorityDisinherit>
 800a102:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	609a      	str	r2, [r3, #8]
 800a10a:	e043      	b.n	800a194 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d119      	bne.n	800a146 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6858      	ldr	r0, [r3, #4]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11a:	461a      	mov	r2, r3
 800a11c:	68b9      	ldr	r1, [r7, #8]
 800a11e:	f002 fa3f 	bl	800c5a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12a:	441a      	add	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	685a      	ldr	r2, [r3, #4]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d32b      	bcc.n	800a194 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	605a      	str	r2, [r3, #4]
 800a144:	e026      	b.n	800a194 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	68d8      	ldr	r0, [r3, #12]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14e:	461a      	mov	r2, r3
 800a150:	68b9      	ldr	r1, [r7, #8]
 800a152:	f002 fa25 	bl	800c5a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	68da      	ldr	r2, [r3, #12]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15e:	425b      	negs	r3, r3
 800a160:	441a      	add	r2, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	68da      	ldr	r2, [r3, #12]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d207      	bcs.n	800a182 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	689a      	ldr	r2, [r3, #8]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17a:	425b      	negs	r3, r3
 800a17c:	441a      	add	r2, r3
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b02      	cmp	r3, #2
 800a186:	d105      	bne.n	800a194 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d002      	beq.n	800a194 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	3b01      	subs	r3, #1
 800a192:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	1c5a      	adds	r2, r3, #1
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a19c:	697b      	ldr	r3, [r7, #20]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3718      	adds	r7, #24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b082      	sub	sp, #8
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d018      	beq.n	800a1ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	68da      	ldr	r2, [r3, #12]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c0:	441a      	add	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68da      	ldr	r2, [r3, #12]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d303      	bcc.n	800a1da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	68d9      	ldr	r1, [r3, #12]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	6838      	ldr	r0, [r7, #0]
 800a1e6:	f002 f9db 	bl	800c5a0 <memcpy>
	}
}
 800a1ea:	bf00      	nop
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a1fa:	f001 fe93 	bl	800bf24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a204:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a206:	e011      	b.n	800a22c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d012      	beq.n	800a236 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3324      	adds	r3, #36	; 0x24
 800a214:	4618      	mov	r0, r3
 800a216:	f000 fe6d 	bl	800aef4 <xTaskRemoveFromEventList>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d001      	beq.n	800a224 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a220:	f000 ff44 	bl	800b0ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a224:	7bfb      	ldrb	r3, [r7, #15]
 800a226:	3b01      	subs	r3, #1
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a22c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a230:	2b00      	cmp	r3, #0
 800a232:	dce9      	bgt.n	800a208 <prvUnlockQueue+0x16>
 800a234:	e000      	b.n	800a238 <prvUnlockQueue+0x46>
					break;
 800a236:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	22ff      	movs	r2, #255	; 0xff
 800a23c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a240:	f001 fea0 	bl	800bf84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a244:	f001 fe6e 	bl	800bf24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a24e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a250:	e011      	b.n	800a276 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d012      	beq.n	800a280 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3310      	adds	r3, #16
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 fe48 	bl	800aef4 <xTaskRemoveFromEventList>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d001      	beq.n	800a26e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a26a:	f000 ff1f 	bl	800b0ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a26e:	7bbb      	ldrb	r3, [r7, #14]
 800a270:	3b01      	subs	r3, #1
 800a272:	b2db      	uxtb	r3, r3
 800a274:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a276:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	dce9      	bgt.n	800a252 <prvUnlockQueue+0x60>
 800a27e:	e000      	b.n	800a282 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a280:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	22ff      	movs	r2, #255	; 0xff
 800a286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a28a:	f001 fe7b 	bl	800bf84 <vPortExitCritical>
}
 800a28e:	bf00      	nop
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b084      	sub	sp, #16
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a29e:	f001 fe41 	bl	800bf24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d102      	bne.n	800a2b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	60fb      	str	r3, [r7, #12]
 800a2ae:	e001      	b.n	800a2b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2b4:	f001 fe66 	bl	800bf84 <vPortExitCritical>

	return xReturn;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b084      	sub	sp, #16
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2ca:	f001 fe2b 	bl	800bf24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d102      	bne.n	800a2e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	60fb      	str	r3, [r7, #12]
 800a2de:	e001      	b.n	800a2e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2e4:	f001 fe4e 	bl	800bf84 <vPortExitCritical>

	return xReturn;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
	...

0800a2f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2fe:	2300      	movs	r3, #0
 800a300:	60fb      	str	r3, [r7, #12]
 800a302:	e014      	b.n	800a32e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a304:	4a0f      	ldr	r2, [pc, #60]	; (800a344 <vQueueAddToRegistry+0x50>)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d10b      	bne.n	800a328 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a310:	490c      	ldr	r1, [pc, #48]	; (800a344 <vQueueAddToRegistry+0x50>)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a31a:	4a0a      	ldr	r2, [pc, #40]	; (800a344 <vQueueAddToRegistry+0x50>)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	00db      	lsls	r3, r3, #3
 800a320:	4413      	add	r3, r2
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a326:	e006      	b.n	800a336 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	3301      	adds	r3, #1
 800a32c:	60fb      	str	r3, [r7, #12]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2b07      	cmp	r3, #7
 800a332:	d9e7      	bls.n	800a304 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a334:	bf00      	nop
 800a336:	bf00      	nop
 800a338:	3714      	adds	r7, #20
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	20005288 	.word	0x20005288

0800a348 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a350:	2300      	movs	r3, #0
 800a352:	60fb      	str	r3, [r7, #12]
 800a354:	e016      	b.n	800a384 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a356:	4a10      	ldr	r2, [pc, #64]	; (800a398 <vQueueUnregisterQueue+0x50>)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	00db      	lsls	r3, r3, #3
 800a35c:	4413      	add	r3, r2
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	429a      	cmp	r2, r3
 800a364:	d10b      	bne.n	800a37e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a366:	4a0c      	ldr	r2, [pc, #48]	; (800a398 <vQueueUnregisterQueue+0x50>)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2100      	movs	r1, #0
 800a36c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a370:	4a09      	ldr	r2, [pc, #36]	; (800a398 <vQueueUnregisterQueue+0x50>)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	00db      	lsls	r3, r3, #3
 800a376:	4413      	add	r3, r2
 800a378:	2200      	movs	r2, #0
 800a37a:	605a      	str	r2, [r3, #4]
				break;
 800a37c:	e006      	b.n	800a38c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3301      	adds	r3, #1
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b07      	cmp	r3, #7
 800a388:	d9e5      	bls.n	800a356 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a38a:	bf00      	nop
 800a38c:	bf00      	nop
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr
 800a398:	20005288 	.word	0x20005288

0800a39c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a3ac:	f001 fdba 	bl	800bf24 <vPortEnterCritical>
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3b6:	b25b      	sxtb	r3, r3
 800a3b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3bc:	d103      	bne.n	800a3c6 <vQueueWaitForMessageRestricted+0x2a>
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3cc:	b25b      	sxtb	r3, r3
 800a3ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3d2:	d103      	bne.n	800a3dc <vQueueWaitForMessageRestricted+0x40>
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3dc:	f001 fdd2 	bl	800bf84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d106      	bne.n	800a3f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	3324      	adds	r3, #36	; 0x24
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	68b9      	ldr	r1, [r7, #8]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f000 fd53 	bl	800ae9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a3f6:	6978      	ldr	r0, [r7, #20]
 800a3f8:	f7ff fefb 	bl	800a1f2 <prvUnlockQueue>
	}
 800a3fc:	bf00      	nop
 800a3fe:	3718      	adds	r7, #24
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08e      	sub	sp, #56	; 0x38
 800a408:	af04      	add	r7, sp, #16
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
 800a410:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10a      	bne.n	800a42e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	623b      	str	r3, [r7, #32]
}
 800a42a:	bf00      	nop
 800a42c:	e7fe      	b.n	800a42c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <xTaskCreateStatic+0x46>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	61fb      	str	r3, [r7, #28]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a44a:	235c      	movs	r3, #92	; 0x5c
 800a44c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	2b5c      	cmp	r3, #92	; 0x5c
 800a452:	d00a      	beq.n	800a46a <xTaskCreateStatic+0x66>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	61bb      	str	r3, [r7, #24]
}
 800a466:	bf00      	nop
 800a468:	e7fe      	b.n	800a468 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a46a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d01e      	beq.n	800a4b0 <xTaskCreateStatic+0xac>
 800a472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a474:	2b00      	cmp	r3, #0
 800a476:	d01b      	beq.n	800a4b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a480:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a484:	2202      	movs	r2, #2
 800a486:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a48a:	2300      	movs	r3, #0
 800a48c:	9303      	str	r3, [sp, #12]
 800a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a490:	9302      	str	r3, [sp, #8]
 800a492:	f107 0314 	add.w	r3, r7, #20
 800a496:	9301      	str	r3, [sp, #4]
 800a498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	68b9      	ldr	r1, [r7, #8]
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f000 f850 	bl	800a548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4aa:	f000 f8dd 	bl	800a668 <prvAddNewTaskToReadyList>
 800a4ae:	e001      	b.n	800a4b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4b4:	697b      	ldr	r3, [r7, #20]
	}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3728      	adds	r7, #40	; 0x28
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b08c      	sub	sp, #48	; 0x30
 800a4c2:	af04      	add	r7, sp, #16
 800a4c4:	60f8      	str	r0, [r7, #12]
 800a4c6:	60b9      	str	r1, [r7, #8]
 800a4c8:	603b      	str	r3, [r7, #0]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a4ce:	88fb      	ldrh	r3, [r7, #6]
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f001 fe48 	bl	800c168 <pvPortMalloc>
 800a4d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00e      	beq.n	800a4fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a4e0:	205c      	movs	r0, #92	; 0x5c
 800a4e2:	f001 fe41 	bl	800c168 <pvPortMalloc>
 800a4e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	697a      	ldr	r2, [r7, #20]
 800a4f2:	631a      	str	r2, [r3, #48]	; 0x30
 800a4f4:	e005      	b.n	800a502 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a4f6:	6978      	ldr	r0, [r7, #20]
 800a4f8:	f001 ff02 	bl	800c300 <vPortFree>
 800a4fc:	e001      	b.n	800a502 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a4fe:	2300      	movs	r3, #0
 800a500:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d017      	beq.n	800a538 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a510:	88fa      	ldrh	r2, [r7, #6]
 800a512:	2300      	movs	r3, #0
 800a514:	9303      	str	r3, [sp, #12]
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	9302      	str	r3, [sp, #8]
 800a51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51c:	9301      	str	r3, [sp, #4]
 800a51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	68b9      	ldr	r1, [r7, #8]
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 f80e 	bl	800a548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a52c:	69f8      	ldr	r0, [r7, #28]
 800a52e:	f000 f89b 	bl	800a668 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a532:	2301      	movs	r3, #1
 800a534:	61bb      	str	r3, [r7, #24]
 800a536:	e002      	b.n	800a53e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a53c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a53e:	69bb      	ldr	r3, [r7, #24]
	}
 800a540:	4618      	mov	r0, r3
 800a542:	3720      	adds	r7, #32
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b088      	sub	sp, #32
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
 800a554:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	461a      	mov	r2, r3
 800a560:	21a5      	movs	r1, #165	; 0xa5
 800a562:	f002 f82b 	bl	800c5bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a570:	3b01      	subs	r3, #1
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	4413      	add	r3, r2
 800a576:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	f023 0307 	bic.w	r3, r3, #7
 800a57e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	f003 0307 	and.w	r3, r3, #7
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00a      	beq.n	800a5a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	617b      	str	r3, [r7, #20]
}
 800a59c:	bf00      	nop
 800a59e:	e7fe      	b.n	800a59e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d01f      	beq.n	800a5e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	61fb      	str	r3, [r7, #28]
 800a5aa:	e012      	b.n	800a5d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	7819      	ldrb	r1, [r3, #0]
 800a5b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	3334      	adds	r3, #52	; 0x34
 800a5bc:	460a      	mov	r2, r1
 800a5be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d006      	beq.n	800a5da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	61fb      	str	r3, [r7, #28]
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	2b0f      	cmp	r3, #15
 800a5d6:	d9e9      	bls.n	800a5ac <prvInitialiseNewTask+0x64>
 800a5d8:	e000      	b.n	800a5dc <prvInitialiseNewTask+0x94>
			{
				break;
 800a5da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5e4:	e003      	b.n	800a5ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f0:	2b37      	cmp	r3, #55	; 0x37
 800a5f2:	d901      	bls.n	800a5f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a5f4:	2337      	movs	r3, #55	; 0x37
 800a5f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a602:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a606:	2200      	movs	r2, #0
 800a608:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60c:	3304      	adds	r3, #4
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe fe56 	bl	80092c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a616:	3318      	adds	r3, #24
 800a618:	4618      	mov	r0, r3
 800a61a:	f7fe fe51 	bl	80092c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a622:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a626:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a632:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	2200      	movs	r2, #0
 800a638:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	68f9      	ldr	r1, [r7, #12]
 800a646:	69b8      	ldr	r0, [r7, #24]
 800a648:	f001 fb3e 	bl	800bcc8 <pxPortInitialiseStack>
 800a64c:	4602      	mov	r2, r0
 800a64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a650:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a654:	2b00      	cmp	r3, #0
 800a656:	d002      	beq.n	800a65e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a65c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a65e:	bf00      	nop
 800a660:	3720      	adds	r7, #32
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
	...

0800a668 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a670:	f001 fc58 	bl	800bf24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a674:	4b2d      	ldr	r3, [pc, #180]	; (800a72c <prvAddNewTaskToReadyList+0xc4>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	3301      	adds	r3, #1
 800a67a:	4a2c      	ldr	r2, [pc, #176]	; (800a72c <prvAddNewTaskToReadyList+0xc4>)
 800a67c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a67e:	4b2c      	ldr	r3, [pc, #176]	; (800a730 <prvAddNewTaskToReadyList+0xc8>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d109      	bne.n	800a69a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a686:	4a2a      	ldr	r2, [pc, #168]	; (800a730 <prvAddNewTaskToReadyList+0xc8>)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a68c:	4b27      	ldr	r3, [pc, #156]	; (800a72c <prvAddNewTaskToReadyList+0xc4>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d110      	bne.n	800a6b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a694:	f000 fd2e 	bl	800b0f4 <prvInitialiseTaskLists>
 800a698:	e00d      	b.n	800a6b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a69a:	4b26      	ldr	r3, [pc, #152]	; (800a734 <prvAddNewTaskToReadyList+0xcc>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d109      	bne.n	800a6b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6a2:	4b23      	ldr	r3, [pc, #140]	; (800a730 <prvAddNewTaskToReadyList+0xc8>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d802      	bhi.n	800a6b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a6b0:	4a1f      	ldr	r2, [pc, #124]	; (800a730 <prvAddNewTaskToReadyList+0xc8>)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a6b6:	4b20      	ldr	r3, [pc, #128]	; (800a738 <prvAddNewTaskToReadyList+0xd0>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	4a1e      	ldr	r2, [pc, #120]	; (800a738 <prvAddNewTaskToReadyList+0xd0>)
 800a6be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a6c0:	4b1d      	ldr	r3, [pc, #116]	; (800a738 <prvAddNewTaskToReadyList+0xd0>)
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6cc:	4b1b      	ldr	r3, [pc, #108]	; (800a73c <prvAddNewTaskToReadyList+0xd4>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d903      	bls.n	800a6dc <prvAddNewTaskToReadyList+0x74>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d8:	4a18      	ldr	r2, [pc, #96]	; (800a73c <prvAddNewTaskToReadyList+0xd4>)
 800a6da:	6013      	str	r3, [r2, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	4413      	add	r3, r2
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	4a15      	ldr	r2, [pc, #84]	; (800a740 <prvAddNewTaskToReadyList+0xd8>)
 800a6ea:	441a      	add	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	3304      	adds	r3, #4
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	4610      	mov	r0, r2
 800a6f4:	f7fe fdf1 	bl	80092da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a6f8:	f001 fc44 	bl	800bf84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a6fc:	4b0d      	ldr	r3, [pc, #52]	; (800a734 <prvAddNewTaskToReadyList+0xcc>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00e      	beq.n	800a722 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a704:	4b0a      	ldr	r3, [pc, #40]	; (800a730 <prvAddNewTaskToReadyList+0xc8>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70e:	429a      	cmp	r2, r3
 800a710:	d207      	bcs.n	800a722 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a712:	4b0c      	ldr	r3, [pc, #48]	; (800a744 <prvAddNewTaskToReadyList+0xdc>)
 800a714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a718:	601a      	str	r2, [r3, #0]
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a722:	bf00      	nop
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	20000c44 	.word	0x20000c44
 800a730:	20000770 	.word	0x20000770
 800a734:	20000c50 	.word	0x20000c50
 800a738:	20000c60 	.word	0x20000c60
 800a73c:	20000c4c 	.word	0x20000c4c
 800a740:	20000774 	.word	0x20000774
 800a744:	e000ed04 	.word	0xe000ed04

0800a748 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a750:	2300      	movs	r3, #0
 800a752:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d017      	beq.n	800a78a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a75a:	4b13      	ldr	r3, [pc, #76]	; (800a7a8 <vTaskDelay+0x60>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00a      	beq.n	800a778 <vTaskDelay+0x30>
	__asm volatile
 800a762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a766:	f383 8811 	msr	BASEPRI, r3
 800a76a:	f3bf 8f6f 	isb	sy
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	60bb      	str	r3, [r7, #8]
}
 800a774:	bf00      	nop
 800a776:	e7fe      	b.n	800a776 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a778:	f000 f986 	bl	800aa88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a77c:	2100      	movs	r1, #0
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 ff00 	bl	800b584 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a784:	f000 f98e 	bl	800aaa4 <xTaskResumeAll>
 800a788:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d107      	bne.n	800a7a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a790:	4b06      	ldr	r3, [pc, #24]	; (800a7ac <vTaskDelay+0x64>)
 800a792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7a0:	bf00      	nop
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	20000c6c 	.word	0x20000c6c
 800a7ac:	e000ed04 	.word	0xe000ed04

0800a7b0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a7b8:	f001 fbb4 	bl	800bf24 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d102      	bne.n	800a7c8 <vTaskSuspend+0x18>
 800a7c2:	4b30      	ldr	r3, [pc, #192]	; (800a884 <vTaskSuspend+0xd4>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	e000      	b.n	800a7ca <vTaskSuspend+0x1a>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fe fddf 	bl	8009394 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d004      	beq.n	800a7e8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3318      	adds	r3, #24
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fe fdd6 	bl	8009394 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	3304      	adds	r3, #4
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	4826      	ldr	r0, [pc, #152]	; (800a888 <vTaskSuspend+0xd8>)
 800a7f0:	f7fe fd73 	bl	80092da <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d103      	bne.n	800a808 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2200      	movs	r2, #0
 800a804:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a808:	f001 fbbc 	bl	800bf84 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a80c:	4b1f      	ldr	r3, [pc, #124]	; (800a88c <vTaskSuspend+0xdc>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d005      	beq.n	800a820 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a814:	f001 fb86 	bl	800bf24 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a818:	f000 fd0a 	bl	800b230 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a81c:	f001 fbb2 	bl	800bf84 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a820:	4b18      	ldr	r3, [pc, #96]	; (800a884 <vTaskSuspend+0xd4>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	429a      	cmp	r2, r3
 800a828:	d127      	bne.n	800a87a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800a82a:	4b18      	ldr	r3, [pc, #96]	; (800a88c <vTaskSuspend+0xdc>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d017      	beq.n	800a862 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a832:	4b17      	ldr	r3, [pc, #92]	; (800a890 <vTaskSuspend+0xe0>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00a      	beq.n	800a850 <vTaskSuspend+0xa0>
	__asm volatile
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	60bb      	str	r3, [r7, #8]
}
 800a84c:	bf00      	nop
 800a84e:	e7fe      	b.n	800a84e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800a850:	4b10      	ldr	r3, [pc, #64]	; (800a894 <vTaskSuspend+0xe4>)
 800a852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a856:	601a      	str	r2, [r3, #0]
 800a858:	f3bf 8f4f 	dsb	sy
 800a85c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a860:	e00b      	b.n	800a87a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a862:	4b09      	ldr	r3, [pc, #36]	; (800a888 <vTaskSuspend+0xd8>)
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	4b0c      	ldr	r3, [pc, #48]	; (800a898 <vTaskSuspend+0xe8>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d103      	bne.n	800a876 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800a86e:	4b05      	ldr	r3, [pc, #20]	; (800a884 <vTaskSuspend+0xd4>)
 800a870:	2200      	movs	r2, #0
 800a872:	601a      	str	r2, [r3, #0]
	}
 800a874:	e001      	b.n	800a87a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800a876:	f000 fa8f 	bl	800ad98 <vTaskSwitchContext>
	}
 800a87a:	bf00      	nop
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	20000770 	.word	0x20000770
 800a888:	20000c30 	.word	0x20000c30
 800a88c:	20000c50 	.word	0x20000c50
 800a890:	20000c6c 	.word	0x20000c6c
 800a894:	e000ed04 	.word	0xe000ed04
 800a898:	20000c44 	.word	0x20000c44

0800a89c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a89c:	b480      	push	{r7}
 800a89e:	b087      	sub	sp, #28
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d10a      	bne.n	800a8c8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800a8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b6:	f383 8811 	msr	BASEPRI, r3
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	60fb      	str	r3, [r7, #12]
}
 800a8c4:	bf00      	nop
 800a8c6:	e7fe      	b.n	800a8c6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	4a0a      	ldr	r2, [pc, #40]	; (800a8f8 <prvTaskIsTaskSuspended+0x5c>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d10a      	bne.n	800a8e8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d6:	4a09      	ldr	r2, [pc, #36]	; (800a8fc <prvTaskIsTaskSuspended+0x60>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d005      	beq.n	800a8e8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d101      	bne.n	800a8e8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a8e8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	371c      	adds	r7, #28
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	20000c30 	.word	0x20000c30
 800a8fc:	20000c04 	.word	0x20000c04

0800a900 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10a      	bne.n	800a928 <vTaskResume+0x28>
	__asm volatile
 800a912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	60bb      	str	r3, [r7, #8]
}
 800a924:	bf00      	nop
 800a926:	e7fe      	b.n	800a926 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a928:	4b20      	ldr	r3, [pc, #128]	; (800a9ac <vTaskResume+0xac>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d038      	beq.n	800a9a4 <vTaskResume+0xa4>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d035      	beq.n	800a9a4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800a938:	f001 faf4 	bl	800bf24 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f7ff ffad 	bl	800a89c <prvTaskIsTaskSuspended>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d02b      	beq.n	800a9a0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	3304      	adds	r3, #4
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7fe fd21 	bl	8009394 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a956:	4b16      	ldr	r3, [pc, #88]	; (800a9b0 <vTaskResume+0xb0>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d903      	bls.n	800a966 <vTaskResume+0x66>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a962:	4a13      	ldr	r2, [pc, #76]	; (800a9b0 <vTaskResume+0xb0>)
 800a964:	6013      	str	r3, [r2, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a96a:	4613      	mov	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4413      	add	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4a10      	ldr	r2, [pc, #64]	; (800a9b4 <vTaskResume+0xb4>)
 800a974:	441a      	add	r2, r3
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	3304      	adds	r3, #4
 800a97a:	4619      	mov	r1, r3
 800a97c:	4610      	mov	r0, r2
 800a97e:	f7fe fcac 	bl	80092da <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a986:	4b09      	ldr	r3, [pc, #36]	; (800a9ac <vTaskResume+0xac>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d307      	bcc.n	800a9a0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a990:	4b09      	ldr	r3, [pc, #36]	; (800a9b8 <vTaskResume+0xb8>)
 800a992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a996:	601a      	str	r2, [r3, #0]
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a9a0:	f001 faf0 	bl	800bf84 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9a4:	bf00      	nop
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	20000770 	.word	0x20000770
 800a9b0:	20000c4c 	.word	0x20000c4c
 800a9b4:	20000774 	.word	0x20000774
 800a9b8:	e000ed04 	.word	0xe000ed04

0800a9bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b08a      	sub	sp, #40	; 0x28
 800a9c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a9ca:	463a      	mov	r2, r7
 800a9cc:	1d39      	adds	r1, r7, #4
 800a9ce:	f107 0308 	add.w	r3, r7, #8
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fe fc20 	bl	8009218 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	9202      	str	r2, [sp, #8]
 800a9e0:	9301      	str	r3, [sp, #4]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	9300      	str	r3, [sp, #0]
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	460a      	mov	r2, r1
 800a9ea:	4921      	ldr	r1, [pc, #132]	; (800aa70 <vTaskStartScheduler+0xb4>)
 800a9ec:	4821      	ldr	r0, [pc, #132]	; (800aa74 <vTaskStartScheduler+0xb8>)
 800a9ee:	f7ff fd09 	bl	800a404 <xTaskCreateStatic>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	4a20      	ldr	r2, [pc, #128]	; (800aa78 <vTaskStartScheduler+0xbc>)
 800a9f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a9f8:	4b1f      	ldr	r3, [pc, #124]	; (800aa78 <vTaskStartScheduler+0xbc>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d002      	beq.n	800aa06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa00:	2301      	movs	r3, #1
 800aa02:	617b      	str	r3, [r7, #20]
 800aa04:	e001      	b.n	800aa0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa06:	2300      	movs	r3, #0
 800aa08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d102      	bne.n	800aa16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aa10:	f000 fe0c 	bl	800b62c <xTimerCreateTimerTask>
 800aa14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d116      	bne.n	800aa4a <vTaskStartScheduler+0x8e>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	613b      	str	r3, [r7, #16]
}
 800aa2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa30:	4b12      	ldr	r3, [pc, #72]	; (800aa7c <vTaskStartScheduler+0xc0>)
 800aa32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa38:	4b11      	ldr	r3, [pc, #68]	; (800aa80 <vTaskStartScheduler+0xc4>)
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa3e:	4b11      	ldr	r3, [pc, #68]	; (800aa84 <vTaskStartScheduler+0xc8>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa44:	f001 f9cc 	bl	800bde0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa48:	e00e      	b.n	800aa68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa50:	d10a      	bne.n	800aa68 <vTaskStartScheduler+0xac>
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	60fb      	str	r3, [r7, #12]
}
 800aa64:	bf00      	nop
 800aa66:	e7fe      	b.n	800aa66 <vTaskStartScheduler+0xaa>
}
 800aa68:	bf00      	nop
 800aa6a:	3718      	adds	r7, #24
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	0800e7ac 	.word	0x0800e7ac
 800aa74:	0800b0c5 	.word	0x0800b0c5
 800aa78:	20000c68 	.word	0x20000c68
 800aa7c:	20000c64 	.word	0x20000c64
 800aa80:	20000c50 	.word	0x20000c50
 800aa84:	20000c48 	.word	0x20000c48

0800aa88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa88:	b480      	push	{r7}
 800aa8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aa8c:	4b04      	ldr	r3, [pc, #16]	; (800aaa0 <vTaskSuspendAll+0x18>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3301      	adds	r3, #1
 800aa92:	4a03      	ldr	r2, [pc, #12]	; (800aaa0 <vTaskSuspendAll+0x18>)
 800aa94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aa96:	bf00      	nop
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	20000c6c 	.word	0x20000c6c

0800aaa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aaae:	2300      	movs	r3, #0
 800aab0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aab2:	4b42      	ldr	r3, [pc, #264]	; (800abbc <xTaskResumeAll+0x118>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10a      	bne.n	800aad0 <xTaskResumeAll+0x2c>
	__asm volatile
 800aaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	603b      	str	r3, [r7, #0]
}
 800aacc:	bf00      	nop
 800aace:	e7fe      	b.n	800aace <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aad0:	f001 fa28 	bl	800bf24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aad4:	4b39      	ldr	r3, [pc, #228]	; (800abbc <xTaskResumeAll+0x118>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3b01      	subs	r3, #1
 800aada:	4a38      	ldr	r2, [pc, #224]	; (800abbc <xTaskResumeAll+0x118>)
 800aadc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aade:	4b37      	ldr	r3, [pc, #220]	; (800abbc <xTaskResumeAll+0x118>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d162      	bne.n	800abac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aae6:	4b36      	ldr	r3, [pc, #216]	; (800abc0 <xTaskResumeAll+0x11c>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d05e      	beq.n	800abac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aaee:	e02f      	b.n	800ab50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaf0:	4b34      	ldr	r3, [pc, #208]	; (800abc4 <xTaskResumeAll+0x120>)
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	3318      	adds	r3, #24
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fe fc49 	bl	8009394 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3304      	adds	r3, #4
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fe fc44 	bl	8009394 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab10:	4b2d      	ldr	r3, [pc, #180]	; (800abc8 <xTaskResumeAll+0x124>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d903      	bls.n	800ab20 <xTaskResumeAll+0x7c>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1c:	4a2a      	ldr	r2, [pc, #168]	; (800abc8 <xTaskResumeAll+0x124>)
 800ab1e:	6013      	str	r3, [r2, #0]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab24:	4613      	mov	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4413      	add	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4a27      	ldr	r2, [pc, #156]	; (800abcc <xTaskResumeAll+0x128>)
 800ab2e:	441a      	add	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	3304      	adds	r3, #4
 800ab34:	4619      	mov	r1, r3
 800ab36:	4610      	mov	r0, r2
 800ab38:	f7fe fbcf 	bl	80092da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab40:	4b23      	ldr	r3, [pc, #140]	; (800abd0 <xTaskResumeAll+0x12c>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d302      	bcc.n	800ab50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ab4a:	4b22      	ldr	r3, [pc, #136]	; (800abd4 <xTaskResumeAll+0x130>)
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab50:	4b1c      	ldr	r3, [pc, #112]	; (800abc4 <xTaskResumeAll+0x120>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1cb      	bne.n	800aaf0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d001      	beq.n	800ab62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab5e:	f000 fb67 	bl	800b230 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ab62:	4b1d      	ldr	r3, [pc, #116]	; (800abd8 <xTaskResumeAll+0x134>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d010      	beq.n	800ab90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab6e:	f000 f859 	bl	800ac24 <xTaskIncrementTick>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d002      	beq.n	800ab7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ab78:	4b16      	ldr	r3, [pc, #88]	; (800abd4 <xTaskResumeAll+0x130>)
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3b01      	subs	r3, #1
 800ab82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1f1      	bne.n	800ab6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ab8a:	4b13      	ldr	r3, [pc, #76]	; (800abd8 <xTaskResumeAll+0x134>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab90:	4b10      	ldr	r3, [pc, #64]	; (800abd4 <xTaskResumeAll+0x130>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d009      	beq.n	800abac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab9c:	4b0f      	ldr	r3, [pc, #60]	; (800abdc <xTaskResumeAll+0x138>)
 800ab9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abac:	f001 f9ea 	bl	800bf84 <vPortExitCritical>

	return xAlreadyYielded;
 800abb0:	68bb      	ldr	r3, [r7, #8]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	20000c6c 	.word	0x20000c6c
 800abc0:	20000c44 	.word	0x20000c44
 800abc4:	20000c04 	.word	0x20000c04
 800abc8:	20000c4c 	.word	0x20000c4c
 800abcc:	20000774 	.word	0x20000774
 800abd0:	20000770 	.word	0x20000770
 800abd4:	20000c58 	.word	0x20000c58
 800abd8:	20000c54 	.word	0x20000c54
 800abdc:	e000ed04 	.word	0xe000ed04

0800abe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800abe6:	4b05      	ldr	r3, [pc, #20]	; (800abfc <xTaskGetTickCount+0x1c>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800abec:	687b      	ldr	r3, [r7, #4]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	370c      	adds	r7, #12
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	20000c48 	.word	0x20000c48

0800ac00 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac06:	f001 fa6f 	bl	800c0e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ac0e:	4b04      	ldr	r3, [pc, #16]	; (800ac20 <xTaskGetTickCountFromISR+0x20>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac14:	683b      	ldr	r3, [r7, #0]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	20000c48 	.word	0x20000c48

0800ac24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac2e:	4b4f      	ldr	r3, [pc, #316]	; (800ad6c <xTaskIncrementTick+0x148>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	f040 808f 	bne.w	800ad56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac38:	4b4d      	ldr	r3, [pc, #308]	; (800ad70 <xTaskIncrementTick+0x14c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac40:	4a4b      	ldr	r2, [pc, #300]	; (800ad70 <xTaskIncrementTick+0x14c>)
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d120      	bne.n	800ac8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac4c:	4b49      	ldr	r3, [pc, #292]	; (800ad74 <xTaskIncrementTick+0x150>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00a      	beq.n	800ac6c <xTaskIncrementTick+0x48>
	__asm volatile
 800ac56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5a:	f383 8811 	msr	BASEPRI, r3
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	603b      	str	r3, [r7, #0]
}
 800ac68:	bf00      	nop
 800ac6a:	e7fe      	b.n	800ac6a <xTaskIncrementTick+0x46>
 800ac6c:	4b41      	ldr	r3, [pc, #260]	; (800ad74 <xTaskIncrementTick+0x150>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	60fb      	str	r3, [r7, #12]
 800ac72:	4b41      	ldr	r3, [pc, #260]	; (800ad78 <xTaskIncrementTick+0x154>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a3f      	ldr	r2, [pc, #252]	; (800ad74 <xTaskIncrementTick+0x150>)
 800ac78:	6013      	str	r3, [r2, #0]
 800ac7a:	4a3f      	ldr	r2, [pc, #252]	; (800ad78 <xTaskIncrementTick+0x154>)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6013      	str	r3, [r2, #0]
 800ac80:	4b3e      	ldr	r3, [pc, #248]	; (800ad7c <xTaskIncrementTick+0x158>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	3301      	adds	r3, #1
 800ac86:	4a3d      	ldr	r2, [pc, #244]	; (800ad7c <xTaskIncrementTick+0x158>)
 800ac88:	6013      	str	r3, [r2, #0]
 800ac8a:	f000 fad1 	bl	800b230 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac8e:	4b3c      	ldr	r3, [pc, #240]	; (800ad80 <xTaskIncrementTick+0x15c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	693a      	ldr	r2, [r7, #16]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d349      	bcc.n	800ad2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac98:	4b36      	ldr	r3, [pc, #216]	; (800ad74 <xTaskIncrementTick+0x150>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d104      	bne.n	800acac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aca2:	4b37      	ldr	r3, [pc, #220]	; (800ad80 <xTaskIncrementTick+0x15c>)
 800aca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aca8:	601a      	str	r2, [r3, #0]
					break;
 800acaa:	e03f      	b.n	800ad2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acac:	4b31      	ldr	r3, [pc, #196]	; (800ad74 <xTaskIncrementTick+0x150>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800acbc:	693a      	ldr	r2, [r7, #16]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d203      	bcs.n	800accc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800acc4:	4a2e      	ldr	r2, [pc, #184]	; (800ad80 <xTaskIncrementTick+0x15c>)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800acca:	e02f      	b.n	800ad2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	3304      	adds	r3, #4
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fe fb5f 	bl	8009394 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d004      	beq.n	800ace8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	3318      	adds	r3, #24
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fe fb56 	bl	8009394 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acec:	4b25      	ldr	r3, [pc, #148]	; (800ad84 <xTaskIncrementTick+0x160>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d903      	bls.n	800acfc <xTaskIncrementTick+0xd8>
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf8:	4a22      	ldr	r2, [pc, #136]	; (800ad84 <xTaskIncrementTick+0x160>)
 800acfa:	6013      	str	r3, [r2, #0]
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad00:	4613      	mov	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4413      	add	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4a1f      	ldr	r2, [pc, #124]	; (800ad88 <xTaskIncrementTick+0x164>)
 800ad0a:	441a      	add	r2, r3
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	3304      	adds	r3, #4
 800ad10:	4619      	mov	r1, r3
 800ad12:	4610      	mov	r0, r2
 800ad14:	f7fe fae1 	bl	80092da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad1c:	4b1b      	ldr	r3, [pc, #108]	; (800ad8c <xTaskIncrementTick+0x168>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d3b8      	bcc.n	800ac98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ad26:	2301      	movs	r3, #1
 800ad28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad2a:	e7b5      	b.n	800ac98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad2c:	4b17      	ldr	r3, [pc, #92]	; (800ad8c <xTaskIncrementTick+0x168>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad32:	4915      	ldr	r1, [pc, #84]	; (800ad88 <xTaskIncrementTick+0x164>)
 800ad34:	4613      	mov	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	440b      	add	r3, r1
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d901      	bls.n	800ad48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ad44:	2301      	movs	r3, #1
 800ad46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ad48:	4b11      	ldr	r3, [pc, #68]	; (800ad90 <xTaskIncrementTick+0x16c>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d007      	beq.n	800ad60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ad50:	2301      	movs	r3, #1
 800ad52:	617b      	str	r3, [r7, #20]
 800ad54:	e004      	b.n	800ad60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ad56:	4b0f      	ldr	r3, [pc, #60]	; (800ad94 <xTaskIncrementTick+0x170>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	4a0d      	ldr	r2, [pc, #52]	; (800ad94 <xTaskIncrementTick+0x170>)
 800ad5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ad60:	697b      	ldr	r3, [r7, #20]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3718      	adds	r7, #24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20000c6c 	.word	0x20000c6c
 800ad70:	20000c48 	.word	0x20000c48
 800ad74:	20000bfc 	.word	0x20000bfc
 800ad78:	20000c00 	.word	0x20000c00
 800ad7c:	20000c5c 	.word	0x20000c5c
 800ad80:	20000c64 	.word	0x20000c64
 800ad84:	20000c4c 	.word	0x20000c4c
 800ad88:	20000774 	.word	0x20000774
 800ad8c:	20000770 	.word	0x20000770
 800ad90:	20000c58 	.word	0x20000c58
 800ad94:	20000c54 	.word	0x20000c54

0800ad98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad9e:	4b28      	ldr	r3, [pc, #160]	; (800ae40 <vTaskSwitchContext+0xa8>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d003      	beq.n	800adae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ada6:	4b27      	ldr	r3, [pc, #156]	; (800ae44 <vTaskSwitchContext+0xac>)
 800ada8:	2201      	movs	r2, #1
 800adaa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800adac:	e041      	b.n	800ae32 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800adae:	4b25      	ldr	r3, [pc, #148]	; (800ae44 <vTaskSwitchContext+0xac>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adb4:	4b24      	ldr	r3, [pc, #144]	; (800ae48 <vTaskSwitchContext+0xb0>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	60fb      	str	r3, [r7, #12]
 800adba:	e010      	b.n	800adde <vTaskSwitchContext+0x46>
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d10a      	bne.n	800add8 <vTaskSwitchContext+0x40>
	__asm volatile
 800adc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc6:	f383 8811 	msr	BASEPRI, r3
 800adca:	f3bf 8f6f 	isb	sy
 800adce:	f3bf 8f4f 	dsb	sy
 800add2:	607b      	str	r3, [r7, #4]
}
 800add4:	bf00      	nop
 800add6:	e7fe      	b.n	800add6 <vTaskSwitchContext+0x3e>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	3b01      	subs	r3, #1
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	491b      	ldr	r1, [pc, #108]	; (800ae4c <vTaskSwitchContext+0xb4>)
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	4613      	mov	r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4413      	add	r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	440b      	add	r3, r1
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d0e4      	beq.n	800adbc <vTaskSwitchContext+0x24>
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	4613      	mov	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	4a13      	ldr	r2, [pc, #76]	; (800ae4c <vTaskSwitchContext+0xb4>)
 800adfe:	4413      	add	r3, r2
 800ae00:	60bb      	str	r3, [r7, #8]
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	685a      	ldr	r2, [r3, #4]
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	605a      	str	r2, [r3, #4]
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	685a      	ldr	r2, [r3, #4]
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	3308      	adds	r3, #8
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d104      	bne.n	800ae22 <vTaskSwitchContext+0x8a>
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	685a      	ldr	r2, [r3, #4]
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	605a      	str	r2, [r3, #4]
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	4a09      	ldr	r2, [pc, #36]	; (800ae50 <vTaskSwitchContext+0xb8>)
 800ae2a:	6013      	str	r3, [r2, #0]
 800ae2c:	4a06      	ldr	r2, [pc, #24]	; (800ae48 <vTaskSwitchContext+0xb0>)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6013      	str	r3, [r2, #0]
}
 800ae32:	bf00      	nop
 800ae34:	3714      	adds	r7, #20
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	20000c6c 	.word	0x20000c6c
 800ae44:	20000c58 	.word	0x20000c58
 800ae48:	20000c4c 	.word	0x20000c4c
 800ae4c:	20000774 	.word	0x20000774
 800ae50:	20000770 	.word	0x20000770

0800ae54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10a      	bne.n	800ae7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ae64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	60fb      	str	r3, [r7, #12]
}
 800ae76:	bf00      	nop
 800ae78:	e7fe      	b.n	800ae78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae7a:	4b07      	ldr	r3, [pc, #28]	; (800ae98 <vTaskPlaceOnEventList+0x44>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	3318      	adds	r3, #24
 800ae80:	4619      	mov	r1, r3
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f7fe fa4d 	bl	8009322 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae88:	2101      	movs	r1, #1
 800ae8a:	6838      	ldr	r0, [r7, #0]
 800ae8c:	f000 fb7a 	bl	800b584 <prvAddCurrentTaskToDelayedList>
}
 800ae90:	bf00      	nop
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	20000770 	.word	0x20000770

0800ae9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10a      	bne.n	800aec4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	617b      	str	r3, [r7, #20]
}
 800aec0:	bf00      	nop
 800aec2:	e7fe      	b.n	800aec2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aec4:	4b0a      	ldr	r3, [pc, #40]	; (800aef0 <vTaskPlaceOnEventListRestricted+0x54>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	3318      	adds	r3, #24
 800aeca:	4619      	mov	r1, r3
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f7fe fa04 	bl	80092da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800aed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aedc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aede:	6879      	ldr	r1, [r7, #4]
 800aee0:	68b8      	ldr	r0, [r7, #8]
 800aee2:	f000 fb4f 	bl	800b584 <prvAddCurrentTaskToDelayedList>
	}
 800aee6:	bf00      	nop
 800aee8:	3718      	adds	r7, #24
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	20000770 	.word	0x20000770

0800aef4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d10a      	bne.n	800af20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800af0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0e:	f383 8811 	msr	BASEPRI, r3
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	60fb      	str	r3, [r7, #12]
}
 800af1c:	bf00      	nop
 800af1e:	e7fe      	b.n	800af1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	3318      	adds	r3, #24
 800af24:	4618      	mov	r0, r3
 800af26:	f7fe fa35 	bl	8009394 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af2a:	4b1e      	ldr	r3, [pc, #120]	; (800afa4 <xTaskRemoveFromEventList+0xb0>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d11d      	bne.n	800af6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	3304      	adds	r3, #4
 800af36:	4618      	mov	r0, r3
 800af38:	f7fe fa2c 	bl	8009394 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af40:	4b19      	ldr	r3, [pc, #100]	; (800afa8 <xTaskRemoveFromEventList+0xb4>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	429a      	cmp	r2, r3
 800af46:	d903      	bls.n	800af50 <xTaskRemoveFromEventList+0x5c>
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4c:	4a16      	ldr	r2, [pc, #88]	; (800afa8 <xTaskRemoveFromEventList+0xb4>)
 800af4e:	6013      	str	r3, [r2, #0]
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af54:	4613      	mov	r3, r2
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	4413      	add	r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	4a13      	ldr	r2, [pc, #76]	; (800afac <xTaskRemoveFromEventList+0xb8>)
 800af5e:	441a      	add	r2, r3
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	3304      	adds	r3, #4
 800af64:	4619      	mov	r1, r3
 800af66:	4610      	mov	r0, r2
 800af68:	f7fe f9b7 	bl	80092da <vListInsertEnd>
 800af6c:	e005      	b.n	800af7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	3318      	adds	r3, #24
 800af72:	4619      	mov	r1, r3
 800af74:	480e      	ldr	r0, [pc, #56]	; (800afb0 <xTaskRemoveFromEventList+0xbc>)
 800af76:	f7fe f9b0 	bl	80092da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af7e:	4b0d      	ldr	r3, [pc, #52]	; (800afb4 <xTaskRemoveFromEventList+0xc0>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af84:	429a      	cmp	r2, r3
 800af86:	d905      	bls.n	800af94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af88:	2301      	movs	r3, #1
 800af8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af8c:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <xTaskRemoveFromEventList+0xc4>)
 800af8e:	2201      	movs	r2, #1
 800af90:	601a      	str	r2, [r3, #0]
 800af92:	e001      	b.n	800af98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800af94:	2300      	movs	r3, #0
 800af96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800af98:	697b      	ldr	r3, [r7, #20]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3718      	adds	r7, #24
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	20000c6c 	.word	0x20000c6c
 800afa8:	20000c4c 	.word	0x20000c4c
 800afac:	20000774 	.word	0x20000774
 800afb0:	20000c04 	.word	0x20000c04
 800afb4:	20000770 	.word	0x20000770
 800afb8:	20000c58 	.word	0x20000c58

0800afbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800afc4:	4b06      	ldr	r3, [pc, #24]	; (800afe0 <vTaskInternalSetTimeOutState+0x24>)
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800afcc:	4b05      	ldr	r3, [pc, #20]	; (800afe4 <vTaskInternalSetTimeOutState+0x28>)
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	605a      	str	r2, [r3, #4]
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	20000c5c 	.word	0x20000c5c
 800afe4:	20000c48 	.word	0x20000c48

0800afe8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b088      	sub	sp, #32
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10a      	bne.n	800b00e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affc:	f383 8811 	msr	BASEPRI, r3
 800b000:	f3bf 8f6f 	isb	sy
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	613b      	str	r3, [r7, #16]
}
 800b00a:	bf00      	nop
 800b00c:	e7fe      	b.n	800b00c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10a      	bne.n	800b02a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	60fb      	str	r3, [r7, #12]
}
 800b026:	bf00      	nop
 800b028:	e7fe      	b.n	800b028 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b02a:	f000 ff7b 	bl	800bf24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b02e:	4b1d      	ldr	r3, [pc, #116]	; (800b0a4 <xTaskCheckForTimeOut+0xbc>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	69ba      	ldr	r2, [r7, #24]
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b046:	d102      	bne.n	800b04e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b048:	2300      	movs	r3, #0
 800b04a:	61fb      	str	r3, [r7, #28]
 800b04c:	e023      	b.n	800b096 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	4b15      	ldr	r3, [pc, #84]	; (800b0a8 <xTaskCheckForTimeOut+0xc0>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	429a      	cmp	r2, r3
 800b058:	d007      	beq.n	800b06a <xTaskCheckForTimeOut+0x82>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	69ba      	ldr	r2, [r7, #24]
 800b060:	429a      	cmp	r2, r3
 800b062:	d302      	bcc.n	800b06a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b064:	2301      	movs	r3, #1
 800b066:	61fb      	str	r3, [r7, #28]
 800b068:	e015      	b.n	800b096 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	429a      	cmp	r2, r3
 800b072:	d20b      	bcs.n	800b08c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	1ad2      	subs	r2, r2, r3
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f7ff ff9b 	bl	800afbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b086:	2300      	movs	r3, #0
 800b088:	61fb      	str	r3, [r7, #28]
 800b08a:	e004      	b.n	800b096 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	2200      	movs	r2, #0
 800b090:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b092:	2301      	movs	r3, #1
 800b094:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b096:	f000 ff75 	bl	800bf84 <vPortExitCritical>

	return xReturn;
 800b09a:	69fb      	ldr	r3, [r7, #28]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3720      	adds	r7, #32
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	20000c48 	.word	0x20000c48
 800b0a8:	20000c5c 	.word	0x20000c5c

0800b0ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b0b0:	4b03      	ldr	r3, [pc, #12]	; (800b0c0 <vTaskMissedYield+0x14>)
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	601a      	str	r2, [r3, #0]
}
 800b0b6:	bf00      	nop
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	20000c58 	.word	0x20000c58

0800b0c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b0cc:	f000 f852 	bl	800b174 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b0d0:	4b06      	ldr	r3, [pc, #24]	; (800b0ec <prvIdleTask+0x28>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d9f9      	bls.n	800b0cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b0d8:	4b05      	ldr	r3, [pc, #20]	; (800b0f0 <prvIdleTask+0x2c>)
 800b0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b0e8:	e7f0      	b.n	800b0cc <prvIdleTask+0x8>
 800b0ea:	bf00      	nop
 800b0ec:	20000774 	.word	0x20000774
 800b0f0:	e000ed04 	.word	0xe000ed04

0800b0f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	607b      	str	r3, [r7, #4]
 800b0fe:	e00c      	b.n	800b11a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	4613      	mov	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4a12      	ldr	r2, [pc, #72]	; (800b154 <prvInitialiseTaskLists+0x60>)
 800b10c:	4413      	add	r3, r2
 800b10e:	4618      	mov	r0, r3
 800b110:	f7fe f8b6 	bl	8009280 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	3301      	adds	r3, #1
 800b118:	607b      	str	r3, [r7, #4]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2b37      	cmp	r3, #55	; 0x37
 800b11e:	d9ef      	bls.n	800b100 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b120:	480d      	ldr	r0, [pc, #52]	; (800b158 <prvInitialiseTaskLists+0x64>)
 800b122:	f7fe f8ad 	bl	8009280 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b126:	480d      	ldr	r0, [pc, #52]	; (800b15c <prvInitialiseTaskLists+0x68>)
 800b128:	f7fe f8aa 	bl	8009280 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b12c:	480c      	ldr	r0, [pc, #48]	; (800b160 <prvInitialiseTaskLists+0x6c>)
 800b12e:	f7fe f8a7 	bl	8009280 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b132:	480c      	ldr	r0, [pc, #48]	; (800b164 <prvInitialiseTaskLists+0x70>)
 800b134:	f7fe f8a4 	bl	8009280 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b138:	480b      	ldr	r0, [pc, #44]	; (800b168 <prvInitialiseTaskLists+0x74>)
 800b13a:	f7fe f8a1 	bl	8009280 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b13e:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <prvInitialiseTaskLists+0x78>)
 800b140:	4a05      	ldr	r2, [pc, #20]	; (800b158 <prvInitialiseTaskLists+0x64>)
 800b142:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b144:	4b0a      	ldr	r3, [pc, #40]	; (800b170 <prvInitialiseTaskLists+0x7c>)
 800b146:	4a05      	ldr	r2, [pc, #20]	; (800b15c <prvInitialiseTaskLists+0x68>)
 800b148:	601a      	str	r2, [r3, #0]
}
 800b14a:	bf00      	nop
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	20000774 	.word	0x20000774
 800b158:	20000bd4 	.word	0x20000bd4
 800b15c:	20000be8 	.word	0x20000be8
 800b160:	20000c04 	.word	0x20000c04
 800b164:	20000c18 	.word	0x20000c18
 800b168:	20000c30 	.word	0x20000c30
 800b16c:	20000bfc 	.word	0x20000bfc
 800b170:	20000c00 	.word	0x20000c00

0800b174 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b17a:	e019      	b.n	800b1b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b17c:	f000 fed2 	bl	800bf24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b180:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <prvCheckTasksWaitingTermination+0x50>)
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3304      	adds	r3, #4
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fe f901 	bl	8009394 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b192:	4b0d      	ldr	r3, [pc, #52]	; (800b1c8 <prvCheckTasksWaitingTermination+0x54>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	3b01      	subs	r3, #1
 800b198:	4a0b      	ldr	r2, [pc, #44]	; (800b1c8 <prvCheckTasksWaitingTermination+0x54>)
 800b19a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b19c:	4b0b      	ldr	r3, [pc, #44]	; (800b1cc <prvCheckTasksWaitingTermination+0x58>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	4a0a      	ldr	r2, [pc, #40]	; (800b1cc <prvCheckTasksWaitingTermination+0x58>)
 800b1a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b1a6:	f000 feed 	bl	800bf84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f810 	bl	800b1d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1b0:	4b06      	ldr	r3, [pc, #24]	; (800b1cc <prvCheckTasksWaitingTermination+0x58>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1e1      	bne.n	800b17c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b1b8:	bf00      	nop
 800b1ba:	bf00      	nop
 800b1bc:	3708      	adds	r7, #8
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	20000c18 	.word	0x20000c18
 800b1c8:	20000c44 	.word	0x20000c44
 800b1cc:	20000c2c 	.word	0x20000c2c

0800b1d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d108      	bne.n	800b1f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f001 f88a 	bl	800c300 <vPortFree>
				vPortFree( pxTCB );
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f001 f887 	bl	800c300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b1f2:	e018      	b.n	800b226 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d103      	bne.n	800b206 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f001 f87e 	bl	800c300 <vPortFree>
	}
 800b204:	e00f      	b.n	800b226 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d00a      	beq.n	800b226 <prvDeleteTCB+0x56>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	60fb      	str	r3, [r7, #12]
}
 800b222:	bf00      	nop
 800b224:	e7fe      	b.n	800b224 <prvDeleteTCB+0x54>
	}
 800b226:	bf00      	nop
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
	...

0800b230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b236:	4b0c      	ldr	r3, [pc, #48]	; (800b268 <prvResetNextTaskUnblockTime+0x38>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d104      	bne.n	800b24a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b240:	4b0a      	ldr	r3, [pc, #40]	; (800b26c <prvResetNextTaskUnblockTime+0x3c>)
 800b242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b246:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b248:	e008      	b.n	800b25c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b24a:	4b07      	ldr	r3, [pc, #28]	; (800b268 <prvResetNextTaskUnblockTime+0x38>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	4a04      	ldr	r2, [pc, #16]	; (800b26c <prvResetNextTaskUnblockTime+0x3c>)
 800b25a:	6013      	str	r3, [r2, #0]
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr
 800b268:	20000bfc 	.word	0x20000bfc
 800b26c:	20000c64 	.word	0x20000c64

0800b270 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b276:	4b0b      	ldr	r3, [pc, #44]	; (800b2a4 <xTaskGetSchedulerState+0x34>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d102      	bne.n	800b284 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b27e:	2301      	movs	r3, #1
 800b280:	607b      	str	r3, [r7, #4]
 800b282:	e008      	b.n	800b296 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b284:	4b08      	ldr	r3, [pc, #32]	; (800b2a8 <xTaskGetSchedulerState+0x38>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d102      	bne.n	800b292 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b28c:	2302      	movs	r3, #2
 800b28e:	607b      	str	r3, [r7, #4]
 800b290:	e001      	b.n	800b296 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b292:	2300      	movs	r3, #0
 800b294:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b296:	687b      	ldr	r3, [r7, #4]
	}
 800b298:	4618      	mov	r0, r3
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr
 800b2a4:	20000c50 	.word	0x20000c50
 800b2a8:	20000c6c 	.word	0x20000c6c

0800b2ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d051      	beq.n	800b366 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c6:	4b2a      	ldr	r3, [pc, #168]	; (800b370 <xTaskPriorityInherit+0xc4>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d241      	bcs.n	800b354 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	699b      	ldr	r3, [r3, #24]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	db06      	blt.n	800b2e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2d8:	4b25      	ldr	r3, [pc, #148]	; (800b370 <xTaskPriorityInherit+0xc4>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	6959      	ldr	r1, [r3, #20]
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ee:	4613      	mov	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	4413      	add	r3, r2
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	4a1f      	ldr	r2, [pc, #124]	; (800b374 <xTaskPriorityInherit+0xc8>)
 800b2f8:	4413      	add	r3, r2
 800b2fa:	4299      	cmp	r1, r3
 800b2fc:	d122      	bne.n	800b344 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	3304      	adds	r3, #4
 800b302:	4618      	mov	r0, r3
 800b304:	f7fe f846 	bl	8009394 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b308:	4b19      	ldr	r3, [pc, #100]	; (800b370 <xTaskPriorityInherit+0xc4>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b316:	4b18      	ldr	r3, [pc, #96]	; (800b378 <xTaskPriorityInherit+0xcc>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d903      	bls.n	800b326 <xTaskPriorityInherit+0x7a>
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b322:	4a15      	ldr	r2, [pc, #84]	; (800b378 <xTaskPriorityInherit+0xcc>)
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b32a:	4613      	mov	r3, r2
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	4413      	add	r3, r2
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	4a10      	ldr	r2, [pc, #64]	; (800b374 <xTaskPriorityInherit+0xc8>)
 800b334:	441a      	add	r2, r3
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	3304      	adds	r3, #4
 800b33a:	4619      	mov	r1, r3
 800b33c:	4610      	mov	r0, r2
 800b33e:	f7fd ffcc 	bl	80092da <vListInsertEnd>
 800b342:	e004      	b.n	800b34e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b344:	4b0a      	ldr	r3, [pc, #40]	; (800b370 <xTaskPriorityInherit+0xc4>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b34e:	2301      	movs	r3, #1
 800b350:	60fb      	str	r3, [r7, #12]
 800b352:	e008      	b.n	800b366 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b358:	4b05      	ldr	r3, [pc, #20]	; (800b370 <xTaskPriorityInherit+0xc4>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35e:	429a      	cmp	r2, r3
 800b360:	d201      	bcs.n	800b366 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b362:	2301      	movs	r3, #1
 800b364:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b366:	68fb      	ldr	r3, [r7, #12]
	}
 800b368:	4618      	mov	r0, r3
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	20000770 	.word	0x20000770
 800b374:	20000774 	.word	0x20000774
 800b378:	20000c4c 	.word	0x20000c4c

0800b37c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b388:	2300      	movs	r3, #0
 800b38a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d056      	beq.n	800b440 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b392:	4b2e      	ldr	r3, [pc, #184]	; (800b44c <xTaskPriorityDisinherit+0xd0>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	693a      	ldr	r2, [r7, #16]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d00a      	beq.n	800b3b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a0:	f383 8811 	msr	BASEPRI, r3
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	60fb      	str	r3, [r7, #12]
}
 800b3ae:	bf00      	nop
 800b3b0:	e7fe      	b.n	800b3b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10a      	bne.n	800b3d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	60bb      	str	r3, [r7, #8]
}
 800b3cc:	bf00      	nop
 800b3ce:	e7fe      	b.n	800b3ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3d4:	1e5a      	subs	r2, r3, #1
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d02c      	beq.n	800b440 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d128      	bne.n	800b440 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	3304      	adds	r3, #4
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fd ffce 	bl	8009394 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b404:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b410:	4b0f      	ldr	r3, [pc, #60]	; (800b450 <xTaskPriorityDisinherit+0xd4>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	429a      	cmp	r2, r3
 800b416:	d903      	bls.n	800b420 <xTaskPriorityDisinherit+0xa4>
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41c:	4a0c      	ldr	r2, [pc, #48]	; (800b450 <xTaskPriorityDisinherit+0xd4>)
 800b41e:	6013      	str	r3, [r2, #0]
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b424:	4613      	mov	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	4413      	add	r3, r2
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	4a09      	ldr	r2, [pc, #36]	; (800b454 <xTaskPriorityDisinherit+0xd8>)
 800b42e:	441a      	add	r2, r3
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	3304      	adds	r3, #4
 800b434:	4619      	mov	r1, r3
 800b436:	4610      	mov	r0, r2
 800b438:	f7fd ff4f 	bl	80092da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b43c:	2301      	movs	r3, #1
 800b43e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b440:	697b      	ldr	r3, [r7, #20]
	}
 800b442:	4618      	mov	r0, r3
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	20000770 	.word	0x20000770
 800b450:	20000c4c 	.word	0x20000c4c
 800b454:	20000774 	.word	0x20000774

0800b458 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b088      	sub	sp, #32
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b466:	2301      	movs	r3, #1
 800b468:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d06a      	beq.n	800b546 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10a      	bne.n	800b48e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	60fb      	str	r3, [r7, #12]
}
 800b48a:	bf00      	nop
 800b48c:	e7fe      	b.n	800b48c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b492:	683a      	ldr	r2, [r7, #0]
 800b494:	429a      	cmp	r2, r3
 800b496:	d902      	bls.n	800b49e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	61fb      	str	r3, [r7, #28]
 800b49c:	e002      	b.n	800b4a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a8:	69fa      	ldr	r2, [r7, #28]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d04b      	beq.n	800b546 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d146      	bne.n	800b546 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b4b8:	4b25      	ldr	r3, [pc, #148]	; (800b550 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	69ba      	ldr	r2, [r7, #24]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d10a      	bne.n	800b4d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c6:	f383 8811 	msr	BASEPRI, r3
 800b4ca:	f3bf 8f6f 	isb	sy
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	60bb      	str	r3, [r7, #8]
}
 800b4d4:	bf00      	nop
 800b4d6:	e7fe      	b.n	800b4d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	69fa      	ldr	r2, [r7, #28]
 800b4e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	699b      	ldr	r3, [r3, #24]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	db04      	blt.n	800b4f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	6959      	ldr	r1, [r3, #20]
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	4413      	add	r3, r2
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	4a13      	ldr	r2, [pc, #76]	; (800b554 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b506:	4413      	add	r3, r2
 800b508:	4299      	cmp	r1, r3
 800b50a:	d11c      	bne.n	800b546 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	3304      	adds	r3, #4
 800b510:	4618      	mov	r0, r3
 800b512:	f7fd ff3f 	bl	8009394 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51a:	4b0f      	ldr	r3, [pc, #60]	; (800b558 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d903      	bls.n	800b52a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b526:	4a0c      	ldr	r2, [pc, #48]	; (800b558 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b528:	6013      	str	r3, [r2, #0]
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52e:	4613      	mov	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4413      	add	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4a07      	ldr	r2, [pc, #28]	; (800b554 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b538:	441a      	add	r2, r3
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	3304      	adds	r3, #4
 800b53e:	4619      	mov	r1, r3
 800b540:	4610      	mov	r0, r2
 800b542:	f7fd feca 	bl	80092da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b546:	bf00      	nop
 800b548:	3720      	adds	r7, #32
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	20000770 	.word	0x20000770
 800b554:	20000774 	.word	0x20000774
 800b558:	20000c4c 	.word	0x20000c4c

0800b55c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b55c:	b480      	push	{r7}
 800b55e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b560:	4b07      	ldr	r3, [pc, #28]	; (800b580 <pvTaskIncrementMutexHeldCount+0x24>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d004      	beq.n	800b572 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b568:	4b05      	ldr	r3, [pc, #20]	; (800b580 <pvTaskIncrementMutexHeldCount+0x24>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b56e:	3201      	adds	r2, #1
 800b570:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b572:	4b03      	ldr	r3, [pc, #12]	; (800b580 <pvTaskIncrementMutexHeldCount+0x24>)
 800b574:	681b      	ldr	r3, [r3, #0]
	}
 800b576:	4618      	mov	r0, r3
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr
 800b580:	20000770 	.word	0x20000770

0800b584 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b58e:	4b21      	ldr	r3, [pc, #132]	; (800b614 <prvAddCurrentTaskToDelayedList+0x90>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b594:	4b20      	ldr	r3, [pc, #128]	; (800b618 <prvAddCurrentTaskToDelayedList+0x94>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	3304      	adds	r3, #4
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fd fefa 	bl	8009394 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5a6:	d10a      	bne.n	800b5be <prvAddCurrentTaskToDelayedList+0x3a>
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d007      	beq.n	800b5be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5ae:	4b1a      	ldr	r3, [pc, #104]	; (800b618 <prvAddCurrentTaskToDelayedList+0x94>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	4819      	ldr	r0, [pc, #100]	; (800b61c <prvAddCurrentTaskToDelayedList+0x98>)
 800b5b8:	f7fd fe8f 	bl	80092da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b5bc:	e026      	b.n	800b60c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b5c6:	4b14      	ldr	r3, [pc, #80]	; (800b618 <prvAddCurrentTaskToDelayedList+0x94>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b5ce:	68ba      	ldr	r2, [r7, #8]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d209      	bcs.n	800b5ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5d6:	4b12      	ldr	r3, [pc, #72]	; (800b620 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	4b0f      	ldr	r3, [pc, #60]	; (800b618 <prvAddCurrentTaskToDelayedList+0x94>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	3304      	adds	r3, #4
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	f7fd fe9d 	bl	8009322 <vListInsert>
}
 800b5e8:	e010      	b.n	800b60c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5ea:	4b0e      	ldr	r3, [pc, #56]	; (800b624 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	4b0a      	ldr	r3, [pc, #40]	; (800b618 <prvAddCurrentTaskToDelayedList+0x94>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	3304      	adds	r3, #4
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	4610      	mov	r0, r2
 800b5f8:	f7fd fe93 	bl	8009322 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b5fc:	4b0a      	ldr	r3, [pc, #40]	; (800b628 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68ba      	ldr	r2, [r7, #8]
 800b602:	429a      	cmp	r2, r3
 800b604:	d202      	bcs.n	800b60c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b606:	4a08      	ldr	r2, [pc, #32]	; (800b628 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	6013      	str	r3, [r2, #0]
}
 800b60c:	bf00      	nop
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	20000c48 	.word	0x20000c48
 800b618:	20000770 	.word	0x20000770
 800b61c:	20000c30 	.word	0x20000c30
 800b620:	20000c00 	.word	0x20000c00
 800b624:	20000bfc 	.word	0x20000bfc
 800b628:	20000c64 	.word	0x20000c64

0800b62c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b08a      	sub	sp, #40	; 0x28
 800b630:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b632:	2300      	movs	r3, #0
 800b634:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b636:	f000 fb07 	bl	800bc48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b63a:	4b1c      	ldr	r3, [pc, #112]	; (800b6ac <xTimerCreateTimerTask+0x80>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d021      	beq.n	800b686 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b642:	2300      	movs	r3, #0
 800b644:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b646:	2300      	movs	r3, #0
 800b648:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b64a:	1d3a      	adds	r2, r7, #4
 800b64c:	f107 0108 	add.w	r1, r7, #8
 800b650:	f107 030c 	add.w	r3, r7, #12
 800b654:	4618      	mov	r0, r3
 800b656:	f7fd fdf9 	bl	800924c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b65a:	6879      	ldr	r1, [r7, #4]
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	9202      	str	r2, [sp, #8]
 800b662:	9301      	str	r3, [sp, #4]
 800b664:	2302      	movs	r3, #2
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	2300      	movs	r3, #0
 800b66a:	460a      	mov	r2, r1
 800b66c:	4910      	ldr	r1, [pc, #64]	; (800b6b0 <xTimerCreateTimerTask+0x84>)
 800b66e:	4811      	ldr	r0, [pc, #68]	; (800b6b4 <xTimerCreateTimerTask+0x88>)
 800b670:	f7fe fec8 	bl	800a404 <xTaskCreateStatic>
 800b674:	4603      	mov	r3, r0
 800b676:	4a10      	ldr	r2, [pc, #64]	; (800b6b8 <xTimerCreateTimerTask+0x8c>)
 800b678:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b67a:	4b0f      	ldr	r3, [pc, #60]	; (800b6b8 <xTimerCreateTimerTask+0x8c>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b682:	2301      	movs	r3, #1
 800b684:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d10a      	bne.n	800b6a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b690:	f383 8811 	msr	BASEPRI, r3
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	613b      	str	r3, [r7, #16]
}
 800b69e:	bf00      	nop
 800b6a0:	e7fe      	b.n	800b6a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b6a2:	697b      	ldr	r3, [r7, #20]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3718      	adds	r7, #24
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	20000ca0 	.word	0x20000ca0
 800b6b0:	0800e7b4 	.word	0x0800e7b4
 800b6b4:	0800b7f1 	.word	0x0800b7f1
 800b6b8:	20000ca4 	.word	0x20000ca4

0800b6bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b08a      	sub	sp, #40	; 0x28
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
 800b6c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10a      	bne.n	800b6ea <xTimerGenericCommand+0x2e>
	__asm volatile
 800b6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d8:	f383 8811 	msr	BASEPRI, r3
 800b6dc:	f3bf 8f6f 	isb	sy
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	623b      	str	r3, [r7, #32]
}
 800b6e6:	bf00      	nop
 800b6e8:	e7fe      	b.n	800b6e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b6ea:	4b1a      	ldr	r3, [pc, #104]	; (800b754 <xTimerGenericCommand+0x98>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d02a      	beq.n	800b748 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	2b05      	cmp	r3, #5
 800b702:	dc18      	bgt.n	800b736 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b704:	f7ff fdb4 	bl	800b270 <xTaskGetSchedulerState>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b02      	cmp	r3, #2
 800b70c:	d109      	bne.n	800b722 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b70e:	4b11      	ldr	r3, [pc, #68]	; (800b754 <xTimerGenericCommand+0x98>)
 800b710:	6818      	ldr	r0, [r3, #0]
 800b712:	f107 0110 	add.w	r1, r7, #16
 800b716:	2300      	movs	r3, #0
 800b718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b71a:	f7fe f80d 	bl	8009738 <xQueueGenericSend>
 800b71e:	6278      	str	r0, [r7, #36]	; 0x24
 800b720:	e012      	b.n	800b748 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b722:	4b0c      	ldr	r3, [pc, #48]	; (800b754 <xTimerGenericCommand+0x98>)
 800b724:	6818      	ldr	r0, [r3, #0]
 800b726:	f107 0110 	add.w	r1, r7, #16
 800b72a:	2300      	movs	r3, #0
 800b72c:	2200      	movs	r2, #0
 800b72e:	f7fe f803 	bl	8009738 <xQueueGenericSend>
 800b732:	6278      	str	r0, [r7, #36]	; 0x24
 800b734:	e008      	b.n	800b748 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b736:	4b07      	ldr	r3, [pc, #28]	; (800b754 <xTimerGenericCommand+0x98>)
 800b738:	6818      	ldr	r0, [r3, #0]
 800b73a:	f107 0110 	add.w	r1, r7, #16
 800b73e:	2300      	movs	r3, #0
 800b740:	683a      	ldr	r2, [r7, #0]
 800b742:	f7fe f8f7 	bl	8009934 <xQueueGenericSendFromISR>
 800b746:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3728      	adds	r7, #40	; 0x28
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	20000ca0 	.word	0x20000ca0

0800b758 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b088      	sub	sp, #32
 800b75c:	af02      	add	r7, sp, #8
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b762:	4b22      	ldr	r3, [pc, #136]	; (800b7ec <prvProcessExpiredTimer+0x94>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	3304      	adds	r3, #4
 800b770:	4618      	mov	r0, r3
 800b772:	f7fd fe0f 	bl	8009394 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b77c:	f003 0304 	and.w	r3, r3, #4
 800b780:	2b00      	cmp	r3, #0
 800b782:	d022      	beq.n	800b7ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	699a      	ldr	r2, [r3, #24]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	18d1      	adds	r1, r2, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	6978      	ldr	r0, [r7, #20]
 800b792:	f000 f8d1 	bl	800b938 <prvInsertTimerInActiveList>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d01f      	beq.n	800b7dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b79c:	2300      	movs	r3, #0
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	6978      	ldr	r0, [r7, #20]
 800b7a8:	f7ff ff88 	bl	800b6bc <xTimerGenericCommand>
 800b7ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d113      	bne.n	800b7dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	60fb      	str	r3, [r7, #12]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7d0:	f023 0301 	bic.w	r3, r3, #1
 800b7d4:	b2da      	uxtb	r2, r3
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	6a1b      	ldr	r3, [r3, #32]
 800b7e0:	6978      	ldr	r0, [r7, #20]
 800b7e2:	4798      	blx	r3
}
 800b7e4:	bf00      	nop
 800b7e6:	3718      	adds	r7, #24
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	20000c98 	.word	0x20000c98

0800b7f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7f8:	f107 0308 	add.w	r3, r7, #8
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f000 f857 	bl	800b8b0 <prvGetNextExpireTime>
 800b802:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	4619      	mov	r1, r3
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 f803 	bl	800b814 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b80e:	f000 f8d5 	bl	800b9bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b812:	e7f1      	b.n	800b7f8 <prvTimerTask+0x8>

0800b814 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b81e:	f7ff f933 	bl	800aa88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b822:	f107 0308 	add.w	r3, r7, #8
 800b826:	4618      	mov	r0, r3
 800b828:	f000 f866 	bl	800b8f8 <prvSampleTimeNow>
 800b82c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d130      	bne.n	800b896 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d10a      	bne.n	800b850 <prvProcessTimerOrBlockTask+0x3c>
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d806      	bhi.n	800b850 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b842:	f7ff f92f 	bl	800aaa4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b846:	68f9      	ldr	r1, [r7, #12]
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f7ff ff85 	bl	800b758 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b84e:	e024      	b.n	800b89a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d008      	beq.n	800b868 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b856:	4b13      	ldr	r3, [pc, #76]	; (800b8a4 <prvProcessTimerOrBlockTask+0x90>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d101      	bne.n	800b864 <prvProcessTimerOrBlockTask+0x50>
 800b860:	2301      	movs	r3, #1
 800b862:	e000      	b.n	800b866 <prvProcessTimerOrBlockTask+0x52>
 800b864:	2300      	movs	r3, #0
 800b866:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b868:	4b0f      	ldr	r3, [pc, #60]	; (800b8a8 <prvProcessTimerOrBlockTask+0x94>)
 800b86a:	6818      	ldr	r0, [r3, #0]
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	683a      	ldr	r2, [r7, #0]
 800b874:	4619      	mov	r1, r3
 800b876:	f7fe fd91 	bl	800a39c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b87a:	f7ff f913 	bl	800aaa4 <xTaskResumeAll>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10a      	bne.n	800b89a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b884:	4b09      	ldr	r3, [pc, #36]	; (800b8ac <prvProcessTimerOrBlockTask+0x98>)
 800b886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b88a:	601a      	str	r2, [r3, #0]
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	f3bf 8f6f 	isb	sy
}
 800b894:	e001      	b.n	800b89a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b896:	f7ff f905 	bl	800aaa4 <xTaskResumeAll>
}
 800b89a:	bf00      	nop
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20000c9c 	.word	0x20000c9c
 800b8a8:	20000ca0 	.word	0x20000ca0
 800b8ac:	e000ed04 	.word	0xe000ed04

0800b8b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b8b8:	4b0e      	ldr	r3, [pc, #56]	; (800b8f4 <prvGetNextExpireTime+0x44>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d101      	bne.n	800b8c6 <prvGetNextExpireTime+0x16>
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	e000      	b.n	800b8c8 <prvGetNextExpireTime+0x18>
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d105      	bne.n	800b8e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8d4:	4b07      	ldr	r3, [pc, #28]	; (800b8f4 <prvGetNextExpireTime+0x44>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	60fb      	str	r3, [r7, #12]
 800b8de:	e001      	b.n	800b8e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3714      	adds	r7, #20
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	20000c98 	.word	0x20000c98

0800b8f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b900:	f7ff f96e 	bl	800abe0 <xTaskGetTickCount>
 800b904:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b906:	4b0b      	ldr	r3, [pc, #44]	; (800b934 <prvSampleTimeNow+0x3c>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d205      	bcs.n	800b91c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b910:	f000 f936 	bl	800bb80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2201      	movs	r2, #1
 800b918:	601a      	str	r2, [r3, #0]
 800b91a:	e002      	b.n	800b922 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b922:	4a04      	ldr	r2, [pc, #16]	; (800b934 <prvSampleTimeNow+0x3c>)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b928:	68fb      	ldr	r3, [r7, #12]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	20000ca8 	.word	0x20000ca8

0800b938 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b086      	sub	sp, #24
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b946:	2300      	movs	r3, #0
 800b948:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b956:	68ba      	ldr	r2, [r7, #8]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d812      	bhi.n	800b984 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	1ad2      	subs	r2, r2, r3
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d302      	bcc.n	800b972 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b96c:	2301      	movs	r3, #1
 800b96e:	617b      	str	r3, [r7, #20]
 800b970:	e01b      	b.n	800b9aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b972:	4b10      	ldr	r3, [pc, #64]	; (800b9b4 <prvInsertTimerInActiveList+0x7c>)
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	3304      	adds	r3, #4
 800b97a:	4619      	mov	r1, r3
 800b97c:	4610      	mov	r0, r2
 800b97e:	f7fd fcd0 	bl	8009322 <vListInsert>
 800b982:	e012      	b.n	800b9aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d206      	bcs.n	800b99a <prvInsertTimerInActiveList+0x62>
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	429a      	cmp	r2, r3
 800b992:	d302      	bcc.n	800b99a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b994:	2301      	movs	r3, #1
 800b996:	617b      	str	r3, [r7, #20]
 800b998:	e007      	b.n	800b9aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b99a:	4b07      	ldr	r3, [pc, #28]	; (800b9b8 <prvInsertTimerInActiveList+0x80>)
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	3304      	adds	r3, #4
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	4610      	mov	r0, r2
 800b9a6:	f7fd fcbc 	bl	8009322 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b9aa:	697b      	ldr	r3, [r7, #20]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3718      	adds	r7, #24
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	20000c9c 	.word	0x20000c9c
 800b9b8:	20000c98 	.word	0x20000c98

0800b9bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b08e      	sub	sp, #56	; 0x38
 800b9c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9c2:	e0ca      	b.n	800bb5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	da18      	bge.n	800b9fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b9ca:	1d3b      	adds	r3, r7, #4
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d10a      	bne.n	800b9ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	61fb      	str	r3, [r7, #28]
}
 800b9e8:	bf00      	nop
 800b9ea:	e7fe      	b.n	800b9ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9f2:	6850      	ldr	r0, [r2, #4]
 800b9f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9f6:	6892      	ldr	r2, [r2, #8]
 800b9f8:	4611      	mov	r1, r2
 800b9fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	f2c0 80aa 	blt.w	800bb58 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ba08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0a:	695b      	ldr	r3, [r3, #20]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d004      	beq.n	800ba1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba12:	3304      	adds	r3, #4
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fd fcbd 	bl	8009394 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba1a:	463b      	mov	r3, r7
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7ff ff6b 	bl	800b8f8 <prvSampleTimeNow>
 800ba22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b09      	cmp	r3, #9
 800ba28:	f200 8097 	bhi.w	800bb5a <prvProcessReceivedCommands+0x19e>
 800ba2c:	a201      	add	r2, pc, #4	; (adr r2, 800ba34 <prvProcessReceivedCommands+0x78>)
 800ba2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba32:	bf00      	nop
 800ba34:	0800ba5d 	.word	0x0800ba5d
 800ba38:	0800ba5d 	.word	0x0800ba5d
 800ba3c:	0800ba5d 	.word	0x0800ba5d
 800ba40:	0800bad1 	.word	0x0800bad1
 800ba44:	0800bae5 	.word	0x0800bae5
 800ba48:	0800bb2f 	.word	0x0800bb2f
 800ba4c:	0800ba5d 	.word	0x0800ba5d
 800ba50:	0800ba5d 	.word	0x0800ba5d
 800ba54:	0800bad1 	.word	0x0800bad1
 800ba58:	0800bae5 	.word	0x0800bae5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba62:	f043 0301 	orr.w	r3, r3, #1
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba6e:	68ba      	ldr	r2, [r7, #8]
 800ba70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	18d1      	adds	r1, r2, r3
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba7c:	f7ff ff5c 	bl	800b938 <prvInsertTimerInActiveList>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d069      	beq.n	800bb5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba88:	6a1b      	ldr	r3, [r3, #32]
 800ba8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba94:	f003 0304 	and.w	r3, r3, #4
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d05e      	beq.n	800bb5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa0:	699b      	ldr	r3, [r3, #24]
 800baa2:	441a      	add	r2, r3
 800baa4:	2300      	movs	r3, #0
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	2300      	movs	r3, #0
 800baaa:	2100      	movs	r1, #0
 800baac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baae:	f7ff fe05 	bl	800b6bc <xTimerGenericCommand>
 800bab2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bab4:	6a3b      	ldr	r3, [r7, #32]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d14f      	bne.n	800bb5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800baba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babe:	f383 8811 	msr	BASEPRI, r3
 800bac2:	f3bf 8f6f 	isb	sy
 800bac6:	f3bf 8f4f 	dsb	sy
 800baca:	61bb      	str	r3, [r7, #24]
}
 800bacc:	bf00      	nop
 800bace:	e7fe      	b.n	800bace <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bad6:	f023 0301 	bic.w	r3, r3, #1
 800bada:	b2da      	uxtb	r2, r3
 800badc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bae2:	e03a      	b.n	800bb5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800baea:	f043 0301 	orr.w	r3, r3, #1
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800baf6:	68ba      	ldr	r2, [r7, #8]
 800baf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10a      	bne.n	800bb1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb08:	f383 8811 	msr	BASEPRI, r3
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	617b      	str	r3, [r7, #20]
}
 800bb16:	bf00      	nop
 800bb18:	e7fe      	b.n	800bb18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1c:	699a      	ldr	r2, [r3, #24]
 800bb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb20:	18d1      	adds	r1, r2, r3
 800bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb28:	f7ff ff06 	bl	800b938 <prvInsertTimerInActiveList>
					break;
 800bb2c:	e015      	b.n	800bb5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb34:	f003 0302 	and.w	r3, r3, #2
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d103      	bne.n	800bb44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bb3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb3e:	f000 fbdf 	bl	800c300 <vPortFree>
 800bb42:	e00a      	b.n	800bb5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb4a:	f023 0301 	bic.w	r3, r3, #1
 800bb4e:	b2da      	uxtb	r2, r3
 800bb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bb56:	e000      	b.n	800bb5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bb58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb5a:	4b08      	ldr	r3, [pc, #32]	; (800bb7c <prvProcessReceivedCommands+0x1c0>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	1d39      	adds	r1, r7, #4
 800bb60:	2200      	movs	r2, #0
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fe f80e 	bl	8009b84 <xQueueReceive>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f47f af2a 	bne.w	800b9c4 <prvProcessReceivedCommands+0x8>
	}
}
 800bb70:	bf00      	nop
 800bb72:	bf00      	nop
 800bb74:	3730      	adds	r7, #48	; 0x30
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	20000ca0 	.word	0x20000ca0

0800bb80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b088      	sub	sp, #32
 800bb84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb86:	e048      	b.n	800bc1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb88:	4b2d      	ldr	r3, [pc, #180]	; (800bc40 <prvSwitchTimerLists+0xc0>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb92:	4b2b      	ldr	r3, [pc, #172]	; (800bc40 <prvSwitchTimerLists+0xc0>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	3304      	adds	r3, #4
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7fd fbf7 	bl	8009394 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6a1b      	ldr	r3, [r3, #32]
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbb4:	f003 0304 	and.w	r3, r3, #4
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d02e      	beq.n	800bc1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bbc6:	68ba      	ldr	r2, [r7, #8]
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d90e      	bls.n	800bbec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbda:	4b19      	ldr	r3, [pc, #100]	; (800bc40 <prvSwitchTimerLists+0xc0>)
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	4610      	mov	r0, r2
 800bbe6:	f7fd fb9c 	bl	8009322 <vListInsert>
 800bbea:	e016      	b.n	800bc1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bbec:	2300      	movs	r3, #0
 800bbee:	9300      	str	r3, [sp, #0]
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	693a      	ldr	r2, [r7, #16]
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f7ff fd60 	bl	800b6bc <xTimerGenericCommand>
 800bbfc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10a      	bne.n	800bc1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc08:	f383 8811 	msr	BASEPRI, r3
 800bc0c:	f3bf 8f6f 	isb	sy
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	603b      	str	r3, [r7, #0]
}
 800bc16:	bf00      	nop
 800bc18:	e7fe      	b.n	800bc18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc1a:	4b09      	ldr	r3, [pc, #36]	; (800bc40 <prvSwitchTimerLists+0xc0>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1b1      	bne.n	800bb88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bc24:	4b06      	ldr	r3, [pc, #24]	; (800bc40 <prvSwitchTimerLists+0xc0>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bc2a:	4b06      	ldr	r3, [pc, #24]	; (800bc44 <prvSwitchTimerLists+0xc4>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a04      	ldr	r2, [pc, #16]	; (800bc40 <prvSwitchTimerLists+0xc0>)
 800bc30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bc32:	4a04      	ldr	r2, [pc, #16]	; (800bc44 <prvSwitchTimerLists+0xc4>)
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	6013      	str	r3, [r2, #0]
}
 800bc38:	bf00      	nop
 800bc3a:	3718      	adds	r7, #24
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	20000c98 	.word	0x20000c98
 800bc44:	20000c9c 	.word	0x20000c9c

0800bc48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bc4e:	f000 f969 	bl	800bf24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bc52:	4b15      	ldr	r3, [pc, #84]	; (800bca8 <prvCheckForValidListAndQueue+0x60>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d120      	bne.n	800bc9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bc5a:	4814      	ldr	r0, [pc, #80]	; (800bcac <prvCheckForValidListAndQueue+0x64>)
 800bc5c:	f7fd fb10 	bl	8009280 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bc60:	4813      	ldr	r0, [pc, #76]	; (800bcb0 <prvCheckForValidListAndQueue+0x68>)
 800bc62:	f7fd fb0d 	bl	8009280 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bc66:	4b13      	ldr	r3, [pc, #76]	; (800bcb4 <prvCheckForValidListAndQueue+0x6c>)
 800bc68:	4a10      	ldr	r2, [pc, #64]	; (800bcac <prvCheckForValidListAndQueue+0x64>)
 800bc6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc6c:	4b12      	ldr	r3, [pc, #72]	; (800bcb8 <prvCheckForValidListAndQueue+0x70>)
 800bc6e:	4a10      	ldr	r2, [pc, #64]	; (800bcb0 <prvCheckForValidListAndQueue+0x68>)
 800bc70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bc72:	2300      	movs	r3, #0
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	4b11      	ldr	r3, [pc, #68]	; (800bcbc <prvCheckForValidListAndQueue+0x74>)
 800bc78:	4a11      	ldr	r2, [pc, #68]	; (800bcc0 <prvCheckForValidListAndQueue+0x78>)
 800bc7a:	2110      	movs	r1, #16
 800bc7c:	200a      	movs	r0, #10
 800bc7e:	f7fd fc1b 	bl	80094b8 <xQueueGenericCreateStatic>
 800bc82:	4603      	mov	r3, r0
 800bc84:	4a08      	ldr	r2, [pc, #32]	; (800bca8 <prvCheckForValidListAndQueue+0x60>)
 800bc86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bc88:	4b07      	ldr	r3, [pc, #28]	; (800bca8 <prvCheckForValidListAndQueue+0x60>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d005      	beq.n	800bc9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc90:	4b05      	ldr	r3, [pc, #20]	; (800bca8 <prvCheckForValidListAndQueue+0x60>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	490b      	ldr	r1, [pc, #44]	; (800bcc4 <prvCheckForValidListAndQueue+0x7c>)
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7fe fb2c 	bl	800a2f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc9c:	f000 f972 	bl	800bf84 <vPortExitCritical>
}
 800bca0:	bf00      	nop
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	20000ca0 	.word	0x20000ca0
 800bcac:	20000c70 	.word	0x20000c70
 800bcb0:	20000c84 	.word	0x20000c84
 800bcb4:	20000c98 	.word	0x20000c98
 800bcb8:	20000c9c 	.word	0x20000c9c
 800bcbc:	20000d4c 	.word	0x20000d4c
 800bcc0:	20000cac 	.word	0x20000cac
 800bcc4:	0800e7bc 	.word	0x0800e7bc

0800bcc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	3b04      	subs	r3, #4
 800bcd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	3b04      	subs	r3, #4
 800bce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	f023 0201 	bic.w	r2, r3, #1
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	3b04      	subs	r3, #4
 800bcf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bcf8:	4a0c      	ldr	r2, [pc, #48]	; (800bd2c <pxPortInitialiseStack+0x64>)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	3b14      	subs	r3, #20
 800bd02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	3b04      	subs	r3, #4
 800bd0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f06f 0202 	mvn.w	r2, #2
 800bd16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	3b20      	subs	r3, #32
 800bd1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3714      	adds	r7, #20
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr
 800bd2c:	0800bd31 	.word	0x0800bd31

0800bd30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bd30:	b480      	push	{r7}
 800bd32:	b085      	sub	sp, #20
 800bd34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bd36:	2300      	movs	r3, #0
 800bd38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bd3a:	4b12      	ldr	r3, [pc, #72]	; (800bd84 <prvTaskExitError+0x54>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd42:	d00a      	beq.n	800bd5a <prvTaskExitError+0x2a>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	60fb      	str	r3, [r7, #12]
}
 800bd56:	bf00      	nop
 800bd58:	e7fe      	b.n	800bd58 <prvTaskExitError+0x28>
	__asm volatile
 800bd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	60bb      	str	r3, [r7, #8]
}
 800bd6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bd6e:	bf00      	nop
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d0fc      	beq.n	800bd70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bd76:	bf00      	nop
 800bd78:	bf00      	nop
 800bd7a:	3714      	adds	r7, #20
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr
 800bd84:	20000010 	.word	0x20000010
	...

0800bd90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bd90:	4b07      	ldr	r3, [pc, #28]	; (800bdb0 <pxCurrentTCBConst2>)
 800bd92:	6819      	ldr	r1, [r3, #0]
 800bd94:	6808      	ldr	r0, [r1, #0]
 800bd96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd9a:	f380 8809 	msr	PSP, r0
 800bd9e:	f3bf 8f6f 	isb	sy
 800bda2:	f04f 0000 	mov.w	r0, #0
 800bda6:	f380 8811 	msr	BASEPRI, r0
 800bdaa:	4770      	bx	lr
 800bdac:	f3af 8000 	nop.w

0800bdb0 <pxCurrentTCBConst2>:
 800bdb0:	20000770 	.word	0x20000770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bdb4:	bf00      	nop
 800bdb6:	bf00      	nop

0800bdb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bdb8:	4808      	ldr	r0, [pc, #32]	; (800bddc <prvPortStartFirstTask+0x24>)
 800bdba:	6800      	ldr	r0, [r0, #0]
 800bdbc:	6800      	ldr	r0, [r0, #0]
 800bdbe:	f380 8808 	msr	MSP, r0
 800bdc2:	f04f 0000 	mov.w	r0, #0
 800bdc6:	f380 8814 	msr	CONTROL, r0
 800bdca:	b662      	cpsie	i
 800bdcc:	b661      	cpsie	f
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	f3bf 8f6f 	isb	sy
 800bdd6:	df00      	svc	0
 800bdd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bdda:	bf00      	nop
 800bddc:	e000ed08 	.word	0xe000ed08

0800bde0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b086      	sub	sp, #24
 800bde4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bde6:	4b46      	ldr	r3, [pc, #280]	; (800bf00 <xPortStartScheduler+0x120>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a46      	ldr	r2, [pc, #280]	; (800bf04 <xPortStartScheduler+0x124>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d10a      	bne.n	800be06 <xPortStartScheduler+0x26>
	__asm volatile
 800bdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf4:	f383 8811 	msr	BASEPRI, r3
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	613b      	str	r3, [r7, #16]
}
 800be02:	bf00      	nop
 800be04:	e7fe      	b.n	800be04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800be06:	4b3e      	ldr	r3, [pc, #248]	; (800bf00 <xPortStartScheduler+0x120>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a3f      	ldr	r2, [pc, #252]	; (800bf08 <xPortStartScheduler+0x128>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d10a      	bne.n	800be26 <xPortStartScheduler+0x46>
	__asm volatile
 800be10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be14:	f383 8811 	msr	BASEPRI, r3
 800be18:	f3bf 8f6f 	isb	sy
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	60fb      	str	r3, [r7, #12]
}
 800be22:	bf00      	nop
 800be24:	e7fe      	b.n	800be24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be26:	4b39      	ldr	r3, [pc, #228]	; (800bf0c <xPortStartScheduler+0x12c>)
 800be28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	22ff      	movs	r2, #255	; 0xff
 800be36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be40:	78fb      	ldrb	r3, [r7, #3]
 800be42:	b2db      	uxtb	r3, r3
 800be44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800be48:	b2da      	uxtb	r2, r3
 800be4a:	4b31      	ldr	r3, [pc, #196]	; (800bf10 <xPortStartScheduler+0x130>)
 800be4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be4e:	4b31      	ldr	r3, [pc, #196]	; (800bf14 <xPortStartScheduler+0x134>)
 800be50:	2207      	movs	r2, #7
 800be52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be54:	e009      	b.n	800be6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800be56:	4b2f      	ldr	r3, [pc, #188]	; (800bf14 <xPortStartScheduler+0x134>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	4a2d      	ldr	r2, [pc, #180]	; (800bf14 <xPortStartScheduler+0x134>)
 800be5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be60:	78fb      	ldrb	r3, [r7, #3]
 800be62:	b2db      	uxtb	r3, r3
 800be64:	005b      	lsls	r3, r3, #1
 800be66:	b2db      	uxtb	r3, r3
 800be68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be6a:	78fb      	ldrb	r3, [r7, #3]
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be72:	2b80      	cmp	r3, #128	; 0x80
 800be74:	d0ef      	beq.n	800be56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800be76:	4b27      	ldr	r3, [pc, #156]	; (800bf14 <xPortStartScheduler+0x134>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f1c3 0307 	rsb	r3, r3, #7
 800be7e:	2b04      	cmp	r3, #4
 800be80:	d00a      	beq.n	800be98 <xPortStartScheduler+0xb8>
	__asm volatile
 800be82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be86:	f383 8811 	msr	BASEPRI, r3
 800be8a:	f3bf 8f6f 	isb	sy
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	60bb      	str	r3, [r7, #8]
}
 800be94:	bf00      	nop
 800be96:	e7fe      	b.n	800be96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be98:	4b1e      	ldr	r3, [pc, #120]	; (800bf14 <xPortStartScheduler+0x134>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	021b      	lsls	r3, r3, #8
 800be9e:	4a1d      	ldr	r2, [pc, #116]	; (800bf14 <xPortStartScheduler+0x134>)
 800bea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bea2:	4b1c      	ldr	r3, [pc, #112]	; (800bf14 <xPortStartScheduler+0x134>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800beaa:	4a1a      	ldr	r2, [pc, #104]	; (800bf14 <xPortStartScheduler+0x134>)
 800beac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	b2da      	uxtb	r2, r3
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800beb6:	4b18      	ldr	r3, [pc, #96]	; (800bf18 <xPortStartScheduler+0x138>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4a17      	ldr	r2, [pc, #92]	; (800bf18 <xPortStartScheduler+0x138>)
 800bebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bec2:	4b15      	ldr	r3, [pc, #84]	; (800bf18 <xPortStartScheduler+0x138>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a14      	ldr	r2, [pc, #80]	; (800bf18 <xPortStartScheduler+0x138>)
 800bec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800becc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bece:	f000 f8dd 	bl	800c08c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bed2:	4b12      	ldr	r3, [pc, #72]	; (800bf1c <xPortStartScheduler+0x13c>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bed8:	f000 f8fc 	bl	800c0d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bedc:	4b10      	ldr	r3, [pc, #64]	; (800bf20 <xPortStartScheduler+0x140>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a0f      	ldr	r2, [pc, #60]	; (800bf20 <xPortStartScheduler+0x140>)
 800bee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bee8:	f7ff ff66 	bl	800bdb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800beec:	f7fe ff54 	bl	800ad98 <vTaskSwitchContext>
	prvTaskExitError();
 800bef0:	f7ff ff1e 	bl	800bd30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	e000ed00 	.word	0xe000ed00
 800bf04:	410fc271 	.word	0x410fc271
 800bf08:	410fc270 	.word	0x410fc270
 800bf0c:	e000e400 	.word	0xe000e400
 800bf10:	20000d9c 	.word	0x20000d9c
 800bf14:	20000da0 	.word	0x20000da0
 800bf18:	e000ed20 	.word	0xe000ed20
 800bf1c:	20000010 	.word	0x20000010
 800bf20:	e000ef34 	.word	0xe000ef34

0800bf24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
	__asm volatile
 800bf2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2e:	f383 8811 	msr	BASEPRI, r3
 800bf32:	f3bf 8f6f 	isb	sy
 800bf36:	f3bf 8f4f 	dsb	sy
 800bf3a:	607b      	str	r3, [r7, #4]
}
 800bf3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf3e:	4b0f      	ldr	r3, [pc, #60]	; (800bf7c <vPortEnterCritical+0x58>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	3301      	adds	r3, #1
 800bf44:	4a0d      	ldr	r2, [pc, #52]	; (800bf7c <vPortEnterCritical+0x58>)
 800bf46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf48:	4b0c      	ldr	r3, [pc, #48]	; (800bf7c <vPortEnterCritical+0x58>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d10f      	bne.n	800bf70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf50:	4b0b      	ldr	r3, [pc, #44]	; (800bf80 <vPortEnterCritical+0x5c>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00a      	beq.n	800bf70 <vPortEnterCritical+0x4c>
	__asm volatile
 800bf5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5e:	f383 8811 	msr	BASEPRI, r3
 800bf62:	f3bf 8f6f 	isb	sy
 800bf66:	f3bf 8f4f 	dsb	sy
 800bf6a:	603b      	str	r3, [r7, #0]
}
 800bf6c:	bf00      	nop
 800bf6e:	e7fe      	b.n	800bf6e <vPortEnterCritical+0x4a>
	}
}
 800bf70:	bf00      	nop
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr
 800bf7c:	20000010 	.word	0x20000010
 800bf80:	e000ed04 	.word	0xe000ed04

0800bf84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bf8a:	4b12      	ldr	r3, [pc, #72]	; (800bfd4 <vPortExitCritical+0x50>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10a      	bne.n	800bfa8 <vPortExitCritical+0x24>
	__asm volatile
 800bf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	607b      	str	r3, [r7, #4]
}
 800bfa4:	bf00      	nop
 800bfa6:	e7fe      	b.n	800bfa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bfa8:	4b0a      	ldr	r3, [pc, #40]	; (800bfd4 <vPortExitCritical+0x50>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	3b01      	subs	r3, #1
 800bfae:	4a09      	ldr	r2, [pc, #36]	; (800bfd4 <vPortExitCritical+0x50>)
 800bfb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bfb2:	4b08      	ldr	r3, [pc, #32]	; (800bfd4 <vPortExitCritical+0x50>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d105      	bne.n	800bfc6 <vPortExitCritical+0x42>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	f383 8811 	msr	BASEPRI, r3
}
 800bfc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bfc6:	bf00      	nop
 800bfc8:	370c      	adds	r7, #12
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr
 800bfd2:	bf00      	nop
 800bfd4:	20000010 	.word	0x20000010
	...

0800bfe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bfe0:	f3ef 8009 	mrs	r0, PSP
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	4b15      	ldr	r3, [pc, #84]	; (800c040 <pxCurrentTCBConst>)
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	f01e 0f10 	tst.w	lr, #16
 800bff0:	bf08      	it	eq
 800bff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffa:	6010      	str	r0, [r2, #0]
 800bffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c000:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c004:	f380 8811 	msr	BASEPRI, r0
 800c008:	f3bf 8f4f 	dsb	sy
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f7fe fec2 	bl	800ad98 <vTaskSwitchContext>
 800c014:	f04f 0000 	mov.w	r0, #0
 800c018:	f380 8811 	msr	BASEPRI, r0
 800c01c:	bc09      	pop	{r0, r3}
 800c01e:	6819      	ldr	r1, [r3, #0]
 800c020:	6808      	ldr	r0, [r1, #0]
 800c022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c026:	f01e 0f10 	tst.w	lr, #16
 800c02a:	bf08      	it	eq
 800c02c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c030:	f380 8809 	msr	PSP, r0
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	f3af 8000 	nop.w

0800c040 <pxCurrentTCBConst>:
 800c040:	20000770 	.word	0x20000770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c044:	bf00      	nop
 800c046:	bf00      	nop

0800c048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
	__asm volatile
 800c04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	607b      	str	r3, [r7, #4]
}
 800c060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c062:	f7fe fddf 	bl	800ac24 <xTaskIncrementTick>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d003      	beq.n	800c074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c06c:	4b06      	ldr	r3, [pc, #24]	; (800c088 <xPortSysTickHandler+0x40>)
 800c06e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c072:	601a      	str	r2, [r3, #0]
 800c074:	2300      	movs	r3, #0
 800c076:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	f383 8811 	msr	BASEPRI, r3
}
 800c07e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c080:	bf00      	nop
 800c082:	3708      	adds	r7, #8
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	e000ed04 	.word	0xe000ed04

0800c08c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c08c:	b480      	push	{r7}
 800c08e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c090:	4b0b      	ldr	r3, [pc, #44]	; (800c0c0 <vPortSetupTimerInterrupt+0x34>)
 800c092:	2200      	movs	r2, #0
 800c094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c096:	4b0b      	ldr	r3, [pc, #44]	; (800c0c4 <vPortSetupTimerInterrupt+0x38>)
 800c098:	2200      	movs	r2, #0
 800c09a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c09c:	4b0a      	ldr	r3, [pc, #40]	; (800c0c8 <vPortSetupTimerInterrupt+0x3c>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a0a      	ldr	r2, [pc, #40]	; (800c0cc <vPortSetupTimerInterrupt+0x40>)
 800c0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0a6:	099b      	lsrs	r3, r3, #6
 800c0a8:	4a09      	ldr	r2, [pc, #36]	; (800c0d0 <vPortSetupTimerInterrupt+0x44>)
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c0ae:	4b04      	ldr	r3, [pc, #16]	; (800c0c0 <vPortSetupTimerInterrupt+0x34>)
 800c0b0:	2207      	movs	r2, #7
 800c0b2:	601a      	str	r2, [r3, #0]
}
 800c0b4:	bf00      	nop
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	e000e010 	.word	0xe000e010
 800c0c4:	e000e018 	.word	0xe000e018
 800c0c8:	20000004 	.word	0x20000004
 800c0cc:	10624dd3 	.word	0x10624dd3
 800c0d0:	e000e014 	.word	0xe000e014

0800c0d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c0d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c0e4 <vPortEnableVFP+0x10>
 800c0d8:	6801      	ldr	r1, [r0, #0]
 800c0da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c0de:	6001      	str	r1, [r0, #0]
 800c0e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c0e2:	bf00      	nop
 800c0e4:	e000ed88 	.word	0xe000ed88

0800c0e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c0ee:	f3ef 8305 	mrs	r3, IPSR
 800c0f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2b0f      	cmp	r3, #15
 800c0f8:	d914      	bls.n	800c124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c0fa:	4a17      	ldr	r2, [pc, #92]	; (800c158 <vPortValidateInterruptPriority+0x70>)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	4413      	add	r3, r2
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c104:	4b15      	ldr	r3, [pc, #84]	; (800c15c <vPortValidateInterruptPriority+0x74>)
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	7afa      	ldrb	r2, [r7, #11]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d20a      	bcs.n	800c124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	607b      	str	r3, [r7, #4]
}
 800c120:	bf00      	nop
 800c122:	e7fe      	b.n	800c122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c124:	4b0e      	ldr	r3, [pc, #56]	; (800c160 <vPortValidateInterruptPriority+0x78>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c12c:	4b0d      	ldr	r3, [pc, #52]	; (800c164 <vPortValidateInterruptPriority+0x7c>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	429a      	cmp	r2, r3
 800c132:	d90a      	bls.n	800c14a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c138:	f383 8811 	msr	BASEPRI, r3
 800c13c:	f3bf 8f6f 	isb	sy
 800c140:	f3bf 8f4f 	dsb	sy
 800c144:	603b      	str	r3, [r7, #0]
}
 800c146:	bf00      	nop
 800c148:	e7fe      	b.n	800c148 <vPortValidateInterruptPriority+0x60>
	}
 800c14a:	bf00      	nop
 800c14c:	3714      	adds	r7, #20
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	e000e3f0 	.word	0xe000e3f0
 800c15c:	20000d9c 	.word	0x20000d9c
 800c160:	e000ed0c 	.word	0xe000ed0c
 800c164:	20000da0 	.word	0x20000da0

0800c168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08a      	sub	sp, #40	; 0x28
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c170:	2300      	movs	r3, #0
 800c172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c174:	f7fe fc88 	bl	800aa88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c178:	4b5b      	ldr	r3, [pc, #364]	; (800c2e8 <pvPortMalloc+0x180>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d101      	bne.n	800c184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c180:	f000 f920 	bl	800c3c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c184:	4b59      	ldr	r3, [pc, #356]	; (800c2ec <pvPortMalloc+0x184>)
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4013      	ands	r3, r2
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f040 8093 	bne.w	800c2b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d01d      	beq.n	800c1d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c198:	2208      	movs	r2, #8
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4413      	add	r3, r2
 800c19e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f003 0307 	and.w	r3, r3, #7
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d014      	beq.n	800c1d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f023 0307 	bic.w	r3, r3, #7
 800c1b0:	3308      	adds	r3, #8
 800c1b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f003 0307 	and.w	r3, r3, #7
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00a      	beq.n	800c1d4 <pvPortMalloc+0x6c>
	__asm volatile
 800c1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c2:	f383 8811 	msr	BASEPRI, r3
 800c1c6:	f3bf 8f6f 	isb	sy
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	617b      	str	r3, [r7, #20]
}
 800c1d0:	bf00      	nop
 800c1d2:	e7fe      	b.n	800c1d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d06e      	beq.n	800c2b8 <pvPortMalloc+0x150>
 800c1da:	4b45      	ldr	r3, [pc, #276]	; (800c2f0 <pvPortMalloc+0x188>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d869      	bhi.n	800c2b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c1e4:	4b43      	ldr	r3, [pc, #268]	; (800c2f4 <pvPortMalloc+0x18c>)
 800c1e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c1e8:	4b42      	ldr	r3, [pc, #264]	; (800c2f4 <pvPortMalloc+0x18c>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1ee:	e004      	b.n	800c1fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	429a      	cmp	r2, r3
 800c202:	d903      	bls.n	800c20c <pvPortMalloc+0xa4>
 800c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1f1      	bne.n	800c1f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c20c:	4b36      	ldr	r3, [pc, #216]	; (800c2e8 <pvPortMalloc+0x180>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c212:	429a      	cmp	r2, r3
 800c214:	d050      	beq.n	800c2b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c216:	6a3b      	ldr	r3, [r7, #32]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2208      	movs	r2, #8
 800c21c:	4413      	add	r3, r2
 800c21e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	6a3b      	ldr	r3, [r7, #32]
 800c226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	1ad2      	subs	r2, r2, r3
 800c230:	2308      	movs	r3, #8
 800c232:	005b      	lsls	r3, r3, #1
 800c234:	429a      	cmp	r2, r3
 800c236:	d91f      	bls.n	800c278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4413      	add	r3, r2
 800c23e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	f003 0307 	and.w	r3, r3, #7
 800c246:	2b00      	cmp	r3, #0
 800c248:	d00a      	beq.n	800c260 <pvPortMalloc+0xf8>
	__asm volatile
 800c24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24e:	f383 8811 	msr	BASEPRI, r3
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	f3bf 8f4f 	dsb	sy
 800c25a:	613b      	str	r3, [r7, #16]
}
 800c25c:	bf00      	nop
 800c25e:	e7fe      	b.n	800c25e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	685a      	ldr	r2, [r3, #4]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	1ad2      	subs	r2, r2, r3
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c272:	69b8      	ldr	r0, [r7, #24]
 800c274:	f000 f908 	bl	800c488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c278:	4b1d      	ldr	r3, [pc, #116]	; (800c2f0 <pvPortMalloc+0x188>)
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	1ad3      	subs	r3, r2, r3
 800c282:	4a1b      	ldr	r2, [pc, #108]	; (800c2f0 <pvPortMalloc+0x188>)
 800c284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c286:	4b1a      	ldr	r3, [pc, #104]	; (800c2f0 <pvPortMalloc+0x188>)
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	4b1b      	ldr	r3, [pc, #108]	; (800c2f8 <pvPortMalloc+0x190>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d203      	bcs.n	800c29a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c292:	4b17      	ldr	r3, [pc, #92]	; (800c2f0 <pvPortMalloc+0x188>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a18      	ldr	r2, [pc, #96]	; (800c2f8 <pvPortMalloc+0x190>)
 800c298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29c:	685a      	ldr	r2, [r3, #4]
 800c29e:	4b13      	ldr	r3, [pc, #76]	; (800c2ec <pvPortMalloc+0x184>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	431a      	orrs	r2, r3
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c2ae:	4b13      	ldr	r3, [pc, #76]	; (800c2fc <pvPortMalloc+0x194>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	4a11      	ldr	r2, [pc, #68]	; (800c2fc <pvPortMalloc+0x194>)
 800c2b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c2b8:	f7fe fbf4 	bl	800aaa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	f003 0307 	and.w	r3, r3, #7
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d00a      	beq.n	800c2dc <pvPortMalloc+0x174>
	__asm volatile
 800c2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	60fb      	str	r3, [r7, #12]
}
 800c2d8:	bf00      	nop
 800c2da:	e7fe      	b.n	800c2da <pvPortMalloc+0x172>
	return pvReturn;
 800c2dc:	69fb      	ldr	r3, [r7, #28]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3728      	adds	r7, #40	; 0x28
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	200049ac 	.word	0x200049ac
 800c2ec:	200049c0 	.word	0x200049c0
 800c2f0:	200049b0 	.word	0x200049b0
 800c2f4:	200049a4 	.word	0x200049a4
 800c2f8:	200049b4 	.word	0x200049b4
 800c2fc:	200049b8 	.word	0x200049b8

0800c300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b086      	sub	sp, #24
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d04d      	beq.n	800c3ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c312:	2308      	movs	r3, #8
 800c314:	425b      	negs	r3, r3
 800c316:	697a      	ldr	r2, [r7, #20]
 800c318:	4413      	add	r3, r2
 800c31a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	685a      	ldr	r2, [r3, #4]
 800c324:	4b24      	ldr	r3, [pc, #144]	; (800c3b8 <vPortFree+0xb8>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4013      	ands	r3, r2
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d10a      	bne.n	800c344 <vPortFree+0x44>
	__asm volatile
 800c32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	60fb      	str	r3, [r7, #12]
}
 800c340:	bf00      	nop
 800c342:	e7fe      	b.n	800c342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d00a      	beq.n	800c362 <vPortFree+0x62>
	__asm volatile
 800c34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c350:	f383 8811 	msr	BASEPRI, r3
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	60bb      	str	r3, [r7, #8]
}
 800c35e:	bf00      	nop
 800c360:	e7fe      	b.n	800c360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	685a      	ldr	r2, [r3, #4]
 800c366:	4b14      	ldr	r3, [pc, #80]	; (800c3b8 <vPortFree+0xb8>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4013      	ands	r3, r2
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d01e      	beq.n	800c3ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d11a      	bne.n	800c3ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	685a      	ldr	r2, [r3, #4]
 800c37c:	4b0e      	ldr	r3, [pc, #56]	; (800c3b8 <vPortFree+0xb8>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	43db      	mvns	r3, r3
 800c382:	401a      	ands	r2, r3
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c388:	f7fe fb7e 	bl	800aa88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	685a      	ldr	r2, [r3, #4]
 800c390:	4b0a      	ldr	r3, [pc, #40]	; (800c3bc <vPortFree+0xbc>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4413      	add	r3, r2
 800c396:	4a09      	ldr	r2, [pc, #36]	; (800c3bc <vPortFree+0xbc>)
 800c398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c39a:	6938      	ldr	r0, [r7, #16]
 800c39c:	f000 f874 	bl	800c488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c3a0:	4b07      	ldr	r3, [pc, #28]	; (800c3c0 <vPortFree+0xc0>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	4a06      	ldr	r2, [pc, #24]	; (800c3c0 <vPortFree+0xc0>)
 800c3a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c3aa:	f7fe fb7b 	bl	800aaa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c3ae:	bf00      	nop
 800c3b0:	3718      	adds	r7, #24
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	200049c0 	.word	0x200049c0
 800c3bc:	200049b0 	.word	0x200049b0
 800c3c0:	200049bc 	.word	0x200049bc

0800c3c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c3ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c3ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c3d0:	4b27      	ldr	r3, [pc, #156]	; (800c470 <prvHeapInit+0xac>)
 800c3d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f003 0307 	and.w	r3, r3, #7
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00c      	beq.n	800c3f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	3307      	adds	r3, #7
 800c3e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f023 0307 	bic.w	r3, r3, #7
 800c3ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c3ec:	68ba      	ldr	r2, [r7, #8]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	4a1f      	ldr	r2, [pc, #124]	; (800c470 <prvHeapInit+0xac>)
 800c3f4:	4413      	add	r3, r2
 800c3f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c3fc:	4a1d      	ldr	r2, [pc, #116]	; (800c474 <prvHeapInit+0xb0>)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c402:	4b1c      	ldr	r3, [pc, #112]	; (800c474 <prvHeapInit+0xb0>)
 800c404:	2200      	movs	r2, #0
 800c406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	4413      	add	r3, r2
 800c40e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c410:	2208      	movs	r2, #8
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	1a9b      	subs	r3, r3, r2
 800c416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f023 0307 	bic.w	r3, r3, #7
 800c41e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	4a15      	ldr	r2, [pc, #84]	; (800c478 <prvHeapInit+0xb4>)
 800c424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c426:	4b14      	ldr	r3, [pc, #80]	; (800c478 <prvHeapInit+0xb4>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2200      	movs	r2, #0
 800c42c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c42e:	4b12      	ldr	r3, [pc, #72]	; (800c478 <prvHeapInit+0xb4>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2200      	movs	r2, #0
 800c434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	1ad2      	subs	r2, r2, r3
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c444:	4b0c      	ldr	r3, [pc, #48]	; (800c478 <prvHeapInit+0xb4>)
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	4a0a      	ldr	r2, [pc, #40]	; (800c47c <prvHeapInit+0xb8>)
 800c452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	4a09      	ldr	r2, [pc, #36]	; (800c480 <prvHeapInit+0xbc>)
 800c45a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c45c:	4b09      	ldr	r3, [pc, #36]	; (800c484 <prvHeapInit+0xc0>)
 800c45e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c462:	601a      	str	r2, [r3, #0]
}
 800c464:	bf00      	nop
 800c466:	3714      	adds	r7, #20
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr
 800c470:	20000da4 	.word	0x20000da4
 800c474:	200049a4 	.word	0x200049a4
 800c478:	200049ac 	.word	0x200049ac
 800c47c:	200049b4 	.word	0x200049b4
 800c480:	200049b0 	.word	0x200049b0
 800c484:	200049c0 	.word	0x200049c0

0800c488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c490:	4b28      	ldr	r3, [pc, #160]	; (800c534 <prvInsertBlockIntoFreeList+0xac>)
 800c492:	60fb      	str	r3, [r7, #12]
 800c494:	e002      	b.n	800c49c <prvInsertBlockIntoFreeList+0x14>
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	60fb      	str	r3, [r7, #12]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d8f7      	bhi.n	800c496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	68ba      	ldr	r2, [r7, #8]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d108      	bne.n	800c4ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	685a      	ldr	r2, [r3, #4]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	441a      	add	r2, r3
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	68ba      	ldr	r2, [r7, #8]
 800c4d4:	441a      	add	r2, r3
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d118      	bne.n	800c510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	4b15      	ldr	r3, [pc, #84]	; (800c538 <prvInsertBlockIntoFreeList+0xb0>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d00d      	beq.n	800c506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	685a      	ldr	r2, [r3, #4]
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	441a      	add	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	601a      	str	r2, [r3, #0]
 800c504:	e008      	b.n	800c518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c506:	4b0c      	ldr	r3, [pc, #48]	; (800c538 <prvInsertBlockIntoFreeList+0xb0>)
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	601a      	str	r2, [r3, #0]
 800c50e:	e003      	b.n	800c518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d002      	beq.n	800c526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c526:	bf00      	nop
 800c528:	3714      	adds	r7, #20
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr
 800c532:	bf00      	nop
 800c534:	200049a4 	.word	0x200049a4
 800c538:	200049ac 	.word	0x200049ac

0800c53c <calloc>:
 800c53c:	4b02      	ldr	r3, [pc, #8]	; (800c548 <calloc+0xc>)
 800c53e:	460a      	mov	r2, r1
 800c540:	4601      	mov	r1, r0
 800c542:	6818      	ldr	r0, [r3, #0]
 800c544:	f000 b842 	b.w	800c5cc <_calloc_r>
 800c548:	20000014 	.word	0x20000014

0800c54c <__errno>:
 800c54c:	4b01      	ldr	r3, [pc, #4]	; (800c554 <__errno+0x8>)
 800c54e:	6818      	ldr	r0, [r3, #0]
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop
 800c554:	20000014 	.word	0x20000014

0800c558 <__libc_init_array>:
 800c558:	b570      	push	{r4, r5, r6, lr}
 800c55a:	4d0d      	ldr	r5, [pc, #52]	; (800c590 <__libc_init_array+0x38>)
 800c55c:	4c0d      	ldr	r4, [pc, #52]	; (800c594 <__libc_init_array+0x3c>)
 800c55e:	1b64      	subs	r4, r4, r5
 800c560:	10a4      	asrs	r4, r4, #2
 800c562:	2600      	movs	r6, #0
 800c564:	42a6      	cmp	r6, r4
 800c566:	d109      	bne.n	800c57c <__libc_init_array+0x24>
 800c568:	4d0b      	ldr	r5, [pc, #44]	; (800c598 <__libc_init_array+0x40>)
 800c56a:	4c0c      	ldr	r4, [pc, #48]	; (800c59c <__libc_init_array+0x44>)
 800c56c:	f002 f8ea 	bl	800e744 <_init>
 800c570:	1b64      	subs	r4, r4, r5
 800c572:	10a4      	asrs	r4, r4, #2
 800c574:	2600      	movs	r6, #0
 800c576:	42a6      	cmp	r6, r4
 800c578:	d105      	bne.n	800c586 <__libc_init_array+0x2e>
 800c57a:	bd70      	pop	{r4, r5, r6, pc}
 800c57c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c580:	4798      	blx	r3
 800c582:	3601      	adds	r6, #1
 800c584:	e7ee      	b.n	800c564 <__libc_init_array+0xc>
 800c586:	f855 3b04 	ldr.w	r3, [r5], #4
 800c58a:	4798      	blx	r3
 800c58c:	3601      	adds	r6, #1
 800c58e:	e7f2      	b.n	800c576 <__libc_init_array+0x1e>
 800c590:	0800ea88 	.word	0x0800ea88
 800c594:	0800ea88 	.word	0x0800ea88
 800c598:	0800ea88 	.word	0x0800ea88
 800c59c:	0800ea8c 	.word	0x0800ea8c

0800c5a0 <memcpy>:
 800c5a0:	440a      	add	r2, r1
 800c5a2:	4291      	cmp	r1, r2
 800c5a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c5a8:	d100      	bne.n	800c5ac <memcpy+0xc>
 800c5aa:	4770      	bx	lr
 800c5ac:	b510      	push	{r4, lr}
 800c5ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5b6:	4291      	cmp	r1, r2
 800c5b8:	d1f9      	bne.n	800c5ae <memcpy+0xe>
 800c5ba:	bd10      	pop	{r4, pc}

0800c5bc <memset>:
 800c5bc:	4402      	add	r2, r0
 800c5be:	4603      	mov	r3, r0
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d100      	bne.n	800c5c6 <memset+0xa>
 800c5c4:	4770      	bx	lr
 800c5c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c5ca:	e7f9      	b.n	800c5c0 <memset+0x4>

0800c5cc <_calloc_r>:
 800c5cc:	b513      	push	{r0, r1, r4, lr}
 800c5ce:	434a      	muls	r2, r1
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	9201      	str	r2, [sp, #4]
 800c5d4:	f000 f85a 	bl	800c68c <_malloc_r>
 800c5d8:	4604      	mov	r4, r0
 800c5da:	b118      	cbz	r0, 800c5e4 <_calloc_r+0x18>
 800c5dc:	9a01      	ldr	r2, [sp, #4]
 800c5de:	2100      	movs	r1, #0
 800c5e0:	f7ff ffec 	bl	800c5bc <memset>
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	b002      	add	sp, #8
 800c5e8:	bd10      	pop	{r4, pc}
	...

0800c5ec <_free_r>:
 800c5ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5ee:	2900      	cmp	r1, #0
 800c5f0:	d048      	beq.n	800c684 <_free_r+0x98>
 800c5f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5f6:	9001      	str	r0, [sp, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f1a1 0404 	sub.w	r4, r1, #4
 800c5fe:	bfb8      	it	lt
 800c600:	18e4      	addlt	r4, r4, r3
 800c602:	f000 f8b5 	bl	800c770 <__malloc_lock>
 800c606:	4a20      	ldr	r2, [pc, #128]	; (800c688 <_free_r+0x9c>)
 800c608:	9801      	ldr	r0, [sp, #4]
 800c60a:	6813      	ldr	r3, [r2, #0]
 800c60c:	4615      	mov	r5, r2
 800c60e:	b933      	cbnz	r3, 800c61e <_free_r+0x32>
 800c610:	6063      	str	r3, [r4, #4]
 800c612:	6014      	str	r4, [r2, #0]
 800c614:	b003      	add	sp, #12
 800c616:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c61a:	f000 b8af 	b.w	800c77c <__malloc_unlock>
 800c61e:	42a3      	cmp	r3, r4
 800c620:	d90b      	bls.n	800c63a <_free_r+0x4e>
 800c622:	6821      	ldr	r1, [r4, #0]
 800c624:	1862      	adds	r2, r4, r1
 800c626:	4293      	cmp	r3, r2
 800c628:	bf04      	itt	eq
 800c62a:	681a      	ldreq	r2, [r3, #0]
 800c62c:	685b      	ldreq	r3, [r3, #4]
 800c62e:	6063      	str	r3, [r4, #4]
 800c630:	bf04      	itt	eq
 800c632:	1852      	addeq	r2, r2, r1
 800c634:	6022      	streq	r2, [r4, #0]
 800c636:	602c      	str	r4, [r5, #0]
 800c638:	e7ec      	b.n	800c614 <_free_r+0x28>
 800c63a:	461a      	mov	r2, r3
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	b10b      	cbz	r3, 800c644 <_free_r+0x58>
 800c640:	42a3      	cmp	r3, r4
 800c642:	d9fa      	bls.n	800c63a <_free_r+0x4e>
 800c644:	6811      	ldr	r1, [r2, #0]
 800c646:	1855      	adds	r5, r2, r1
 800c648:	42a5      	cmp	r5, r4
 800c64a:	d10b      	bne.n	800c664 <_free_r+0x78>
 800c64c:	6824      	ldr	r4, [r4, #0]
 800c64e:	4421      	add	r1, r4
 800c650:	1854      	adds	r4, r2, r1
 800c652:	42a3      	cmp	r3, r4
 800c654:	6011      	str	r1, [r2, #0]
 800c656:	d1dd      	bne.n	800c614 <_free_r+0x28>
 800c658:	681c      	ldr	r4, [r3, #0]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	6053      	str	r3, [r2, #4]
 800c65e:	4421      	add	r1, r4
 800c660:	6011      	str	r1, [r2, #0]
 800c662:	e7d7      	b.n	800c614 <_free_r+0x28>
 800c664:	d902      	bls.n	800c66c <_free_r+0x80>
 800c666:	230c      	movs	r3, #12
 800c668:	6003      	str	r3, [r0, #0]
 800c66a:	e7d3      	b.n	800c614 <_free_r+0x28>
 800c66c:	6825      	ldr	r5, [r4, #0]
 800c66e:	1961      	adds	r1, r4, r5
 800c670:	428b      	cmp	r3, r1
 800c672:	bf04      	itt	eq
 800c674:	6819      	ldreq	r1, [r3, #0]
 800c676:	685b      	ldreq	r3, [r3, #4]
 800c678:	6063      	str	r3, [r4, #4]
 800c67a:	bf04      	itt	eq
 800c67c:	1949      	addeq	r1, r1, r5
 800c67e:	6021      	streq	r1, [r4, #0]
 800c680:	6054      	str	r4, [r2, #4]
 800c682:	e7c7      	b.n	800c614 <_free_r+0x28>
 800c684:	b003      	add	sp, #12
 800c686:	bd30      	pop	{r4, r5, pc}
 800c688:	200049c4 	.word	0x200049c4

0800c68c <_malloc_r>:
 800c68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68e:	1ccd      	adds	r5, r1, #3
 800c690:	f025 0503 	bic.w	r5, r5, #3
 800c694:	3508      	adds	r5, #8
 800c696:	2d0c      	cmp	r5, #12
 800c698:	bf38      	it	cc
 800c69a:	250c      	movcc	r5, #12
 800c69c:	2d00      	cmp	r5, #0
 800c69e:	4606      	mov	r6, r0
 800c6a0:	db01      	blt.n	800c6a6 <_malloc_r+0x1a>
 800c6a2:	42a9      	cmp	r1, r5
 800c6a4:	d903      	bls.n	800c6ae <_malloc_r+0x22>
 800c6a6:	230c      	movs	r3, #12
 800c6a8:	6033      	str	r3, [r6, #0]
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6ae:	f000 f85f 	bl	800c770 <__malloc_lock>
 800c6b2:	4921      	ldr	r1, [pc, #132]	; (800c738 <_malloc_r+0xac>)
 800c6b4:	680a      	ldr	r2, [r1, #0]
 800c6b6:	4614      	mov	r4, r2
 800c6b8:	b99c      	cbnz	r4, 800c6e2 <_malloc_r+0x56>
 800c6ba:	4f20      	ldr	r7, [pc, #128]	; (800c73c <_malloc_r+0xb0>)
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	b923      	cbnz	r3, 800c6ca <_malloc_r+0x3e>
 800c6c0:	4621      	mov	r1, r4
 800c6c2:	4630      	mov	r0, r6
 800c6c4:	f000 f844 	bl	800c750 <_sbrk_r>
 800c6c8:	6038      	str	r0, [r7, #0]
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	f000 f83f 	bl	800c750 <_sbrk_r>
 800c6d2:	1c43      	adds	r3, r0, #1
 800c6d4:	d123      	bne.n	800c71e <_malloc_r+0x92>
 800c6d6:	230c      	movs	r3, #12
 800c6d8:	6033      	str	r3, [r6, #0]
 800c6da:	4630      	mov	r0, r6
 800c6dc:	f000 f84e 	bl	800c77c <__malloc_unlock>
 800c6e0:	e7e3      	b.n	800c6aa <_malloc_r+0x1e>
 800c6e2:	6823      	ldr	r3, [r4, #0]
 800c6e4:	1b5b      	subs	r3, r3, r5
 800c6e6:	d417      	bmi.n	800c718 <_malloc_r+0x8c>
 800c6e8:	2b0b      	cmp	r3, #11
 800c6ea:	d903      	bls.n	800c6f4 <_malloc_r+0x68>
 800c6ec:	6023      	str	r3, [r4, #0]
 800c6ee:	441c      	add	r4, r3
 800c6f0:	6025      	str	r5, [r4, #0]
 800c6f2:	e004      	b.n	800c6fe <_malloc_r+0x72>
 800c6f4:	6863      	ldr	r3, [r4, #4]
 800c6f6:	42a2      	cmp	r2, r4
 800c6f8:	bf0c      	ite	eq
 800c6fa:	600b      	streq	r3, [r1, #0]
 800c6fc:	6053      	strne	r3, [r2, #4]
 800c6fe:	4630      	mov	r0, r6
 800c700:	f000 f83c 	bl	800c77c <__malloc_unlock>
 800c704:	f104 000b 	add.w	r0, r4, #11
 800c708:	1d23      	adds	r3, r4, #4
 800c70a:	f020 0007 	bic.w	r0, r0, #7
 800c70e:	1ac2      	subs	r2, r0, r3
 800c710:	d0cc      	beq.n	800c6ac <_malloc_r+0x20>
 800c712:	1a1b      	subs	r3, r3, r0
 800c714:	50a3      	str	r3, [r4, r2]
 800c716:	e7c9      	b.n	800c6ac <_malloc_r+0x20>
 800c718:	4622      	mov	r2, r4
 800c71a:	6864      	ldr	r4, [r4, #4]
 800c71c:	e7cc      	b.n	800c6b8 <_malloc_r+0x2c>
 800c71e:	1cc4      	adds	r4, r0, #3
 800c720:	f024 0403 	bic.w	r4, r4, #3
 800c724:	42a0      	cmp	r0, r4
 800c726:	d0e3      	beq.n	800c6f0 <_malloc_r+0x64>
 800c728:	1a21      	subs	r1, r4, r0
 800c72a:	4630      	mov	r0, r6
 800c72c:	f000 f810 	bl	800c750 <_sbrk_r>
 800c730:	3001      	adds	r0, #1
 800c732:	d1dd      	bne.n	800c6f0 <_malloc_r+0x64>
 800c734:	e7cf      	b.n	800c6d6 <_malloc_r+0x4a>
 800c736:	bf00      	nop
 800c738:	200049c4 	.word	0x200049c4
 800c73c:	200049c8 	.word	0x200049c8

0800c740 <realloc>:
 800c740:	4b02      	ldr	r3, [pc, #8]	; (800c74c <realloc+0xc>)
 800c742:	460a      	mov	r2, r1
 800c744:	4601      	mov	r1, r0
 800c746:	6818      	ldr	r0, [r3, #0]
 800c748:	f000 b81e 	b.w	800c788 <_realloc_r>
 800c74c:	20000014 	.word	0x20000014

0800c750 <_sbrk_r>:
 800c750:	b538      	push	{r3, r4, r5, lr}
 800c752:	4d06      	ldr	r5, [pc, #24]	; (800c76c <_sbrk_r+0x1c>)
 800c754:	2300      	movs	r3, #0
 800c756:	4604      	mov	r4, r0
 800c758:	4608      	mov	r0, r1
 800c75a:	602b      	str	r3, [r5, #0]
 800c75c:	f7f5 ff96 	bl	800268c <_sbrk>
 800c760:	1c43      	adds	r3, r0, #1
 800c762:	d102      	bne.n	800c76a <_sbrk_r+0x1a>
 800c764:	682b      	ldr	r3, [r5, #0]
 800c766:	b103      	cbz	r3, 800c76a <_sbrk_r+0x1a>
 800c768:	6023      	str	r3, [r4, #0]
 800c76a:	bd38      	pop	{r3, r4, r5, pc}
 800c76c:	200052c8 	.word	0x200052c8

0800c770 <__malloc_lock>:
 800c770:	4801      	ldr	r0, [pc, #4]	; (800c778 <__malloc_lock+0x8>)
 800c772:	f000 b82f 	b.w	800c7d4 <__retarget_lock_acquire_recursive>
 800c776:	bf00      	nop
 800c778:	200052d0 	.word	0x200052d0

0800c77c <__malloc_unlock>:
 800c77c:	4801      	ldr	r0, [pc, #4]	; (800c784 <__malloc_unlock+0x8>)
 800c77e:	f000 b82a 	b.w	800c7d6 <__retarget_lock_release_recursive>
 800c782:	bf00      	nop
 800c784:	200052d0 	.word	0x200052d0

0800c788 <_realloc_r>:
 800c788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c78a:	4607      	mov	r7, r0
 800c78c:	4614      	mov	r4, r2
 800c78e:	460e      	mov	r6, r1
 800c790:	b921      	cbnz	r1, 800c79c <_realloc_r+0x14>
 800c792:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c796:	4611      	mov	r1, r2
 800c798:	f7ff bf78 	b.w	800c68c <_malloc_r>
 800c79c:	b922      	cbnz	r2, 800c7a8 <_realloc_r+0x20>
 800c79e:	f7ff ff25 	bl	800c5ec <_free_r>
 800c7a2:	4625      	mov	r5, r4
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7a8:	f000 f816 	bl	800c7d8 <_malloc_usable_size_r>
 800c7ac:	42a0      	cmp	r0, r4
 800c7ae:	d20f      	bcs.n	800c7d0 <_realloc_r+0x48>
 800c7b0:	4621      	mov	r1, r4
 800c7b2:	4638      	mov	r0, r7
 800c7b4:	f7ff ff6a 	bl	800c68c <_malloc_r>
 800c7b8:	4605      	mov	r5, r0
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d0f2      	beq.n	800c7a4 <_realloc_r+0x1c>
 800c7be:	4631      	mov	r1, r6
 800c7c0:	4622      	mov	r2, r4
 800c7c2:	f7ff feed 	bl	800c5a0 <memcpy>
 800c7c6:	4631      	mov	r1, r6
 800c7c8:	4638      	mov	r0, r7
 800c7ca:	f7ff ff0f 	bl	800c5ec <_free_r>
 800c7ce:	e7e9      	b.n	800c7a4 <_realloc_r+0x1c>
 800c7d0:	4635      	mov	r5, r6
 800c7d2:	e7e7      	b.n	800c7a4 <_realloc_r+0x1c>

0800c7d4 <__retarget_lock_acquire_recursive>:
 800c7d4:	4770      	bx	lr

0800c7d6 <__retarget_lock_release_recursive>:
 800c7d6:	4770      	bx	lr

0800c7d8 <_malloc_usable_size_r>:
 800c7d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7dc:	1f18      	subs	r0, r3, #4
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	bfbc      	itt	lt
 800c7e2:	580b      	ldrlt	r3, [r1, r0]
 800c7e4:	18c0      	addlt	r0, r0, r3
 800c7e6:	4770      	bx	lr

0800c7e8 <cos>:
 800c7e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7ea:	ec53 2b10 	vmov	r2, r3, d0
 800c7ee:	4824      	ldr	r0, [pc, #144]	; (800c880 <cos+0x98>)
 800c7f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c7f4:	4281      	cmp	r1, r0
 800c7f6:	dc06      	bgt.n	800c806 <cos+0x1e>
 800c7f8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800c878 <cos+0x90>
 800c7fc:	f001 f92c 	bl	800da58 <__kernel_cos>
 800c800:	ec51 0b10 	vmov	r0, r1, d0
 800c804:	e007      	b.n	800c816 <cos+0x2e>
 800c806:	481f      	ldr	r0, [pc, #124]	; (800c884 <cos+0x9c>)
 800c808:	4281      	cmp	r1, r0
 800c80a:	dd09      	ble.n	800c820 <cos+0x38>
 800c80c:	ee10 0a10 	vmov	r0, s0
 800c810:	4619      	mov	r1, r3
 800c812:	f7f3 fd01 	bl	8000218 <__aeabi_dsub>
 800c816:	ec41 0b10 	vmov	d0, r0, r1
 800c81a:	b005      	add	sp, #20
 800c81c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c820:	4668      	mov	r0, sp
 800c822:	f000 fe59 	bl	800d4d8 <__ieee754_rem_pio2>
 800c826:	f000 0003 	and.w	r0, r0, #3
 800c82a:	2801      	cmp	r0, #1
 800c82c:	d007      	beq.n	800c83e <cos+0x56>
 800c82e:	2802      	cmp	r0, #2
 800c830:	d012      	beq.n	800c858 <cos+0x70>
 800c832:	b9c0      	cbnz	r0, 800c866 <cos+0x7e>
 800c834:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c838:	ed9d 0b00 	vldr	d0, [sp]
 800c83c:	e7de      	b.n	800c7fc <cos+0x14>
 800c83e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c842:	ed9d 0b00 	vldr	d0, [sp]
 800c846:	f001 fd0f 	bl	800e268 <__kernel_sin>
 800c84a:	ec53 2b10 	vmov	r2, r3, d0
 800c84e:	ee10 0a10 	vmov	r0, s0
 800c852:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c856:	e7de      	b.n	800c816 <cos+0x2e>
 800c858:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c85c:	ed9d 0b00 	vldr	d0, [sp]
 800c860:	f001 f8fa 	bl	800da58 <__kernel_cos>
 800c864:	e7f1      	b.n	800c84a <cos+0x62>
 800c866:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c86a:	ed9d 0b00 	vldr	d0, [sp]
 800c86e:	2001      	movs	r0, #1
 800c870:	f001 fcfa 	bl	800e268 <__kernel_sin>
 800c874:	e7c4      	b.n	800c800 <cos+0x18>
 800c876:	bf00      	nop
	...
 800c880:	3fe921fb 	.word	0x3fe921fb
 800c884:	7fefffff 	.word	0x7fefffff

0800c888 <sin>:
 800c888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c88a:	ec53 2b10 	vmov	r2, r3, d0
 800c88e:	4826      	ldr	r0, [pc, #152]	; (800c928 <sin+0xa0>)
 800c890:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c894:	4281      	cmp	r1, r0
 800c896:	dc07      	bgt.n	800c8a8 <sin+0x20>
 800c898:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c920 <sin+0x98>
 800c89c:	2000      	movs	r0, #0
 800c89e:	f001 fce3 	bl	800e268 <__kernel_sin>
 800c8a2:	ec51 0b10 	vmov	r0, r1, d0
 800c8a6:	e007      	b.n	800c8b8 <sin+0x30>
 800c8a8:	4820      	ldr	r0, [pc, #128]	; (800c92c <sin+0xa4>)
 800c8aa:	4281      	cmp	r1, r0
 800c8ac:	dd09      	ble.n	800c8c2 <sin+0x3a>
 800c8ae:	ee10 0a10 	vmov	r0, s0
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	f7f3 fcb0 	bl	8000218 <__aeabi_dsub>
 800c8b8:	ec41 0b10 	vmov	d0, r0, r1
 800c8bc:	b005      	add	sp, #20
 800c8be:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8c2:	4668      	mov	r0, sp
 800c8c4:	f000 fe08 	bl	800d4d8 <__ieee754_rem_pio2>
 800c8c8:	f000 0003 	and.w	r0, r0, #3
 800c8cc:	2801      	cmp	r0, #1
 800c8ce:	d008      	beq.n	800c8e2 <sin+0x5a>
 800c8d0:	2802      	cmp	r0, #2
 800c8d2:	d00d      	beq.n	800c8f0 <sin+0x68>
 800c8d4:	b9d0      	cbnz	r0, 800c90c <sin+0x84>
 800c8d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c8da:	ed9d 0b00 	vldr	d0, [sp]
 800c8de:	2001      	movs	r0, #1
 800c8e0:	e7dd      	b.n	800c89e <sin+0x16>
 800c8e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c8e6:	ed9d 0b00 	vldr	d0, [sp]
 800c8ea:	f001 f8b5 	bl	800da58 <__kernel_cos>
 800c8ee:	e7d8      	b.n	800c8a2 <sin+0x1a>
 800c8f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c8f4:	ed9d 0b00 	vldr	d0, [sp]
 800c8f8:	2001      	movs	r0, #1
 800c8fa:	f001 fcb5 	bl	800e268 <__kernel_sin>
 800c8fe:	ec53 2b10 	vmov	r2, r3, d0
 800c902:	ee10 0a10 	vmov	r0, s0
 800c906:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c90a:	e7d5      	b.n	800c8b8 <sin+0x30>
 800c90c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c910:	ed9d 0b00 	vldr	d0, [sp]
 800c914:	f001 f8a0 	bl	800da58 <__kernel_cos>
 800c918:	e7f1      	b.n	800c8fe <sin+0x76>
 800c91a:	bf00      	nop
 800c91c:	f3af 8000 	nop.w
	...
 800c928:	3fe921fb 	.word	0x3fe921fb
 800c92c:	7fefffff 	.word	0x7fefffff

0800c930 <pow>:
 800c930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c934:	ec59 8b10 	vmov	r8, r9, d0
 800c938:	ec57 6b11 	vmov	r6, r7, d1
 800c93c:	f000 f8a8 	bl	800ca90 <__ieee754_pow>
 800c940:	4b4e      	ldr	r3, [pc, #312]	; (800ca7c <pow+0x14c>)
 800c942:	f993 3000 	ldrsb.w	r3, [r3]
 800c946:	3301      	adds	r3, #1
 800c948:	ec55 4b10 	vmov	r4, r5, d0
 800c94c:	d015      	beq.n	800c97a <pow+0x4a>
 800c94e:	4632      	mov	r2, r6
 800c950:	463b      	mov	r3, r7
 800c952:	4630      	mov	r0, r6
 800c954:	4639      	mov	r1, r7
 800c956:	f7f4 f8b1 	bl	8000abc <__aeabi_dcmpun>
 800c95a:	b970      	cbnz	r0, 800c97a <pow+0x4a>
 800c95c:	4642      	mov	r2, r8
 800c95e:	464b      	mov	r3, r9
 800c960:	4640      	mov	r0, r8
 800c962:	4649      	mov	r1, r9
 800c964:	f7f4 f8aa 	bl	8000abc <__aeabi_dcmpun>
 800c968:	2200      	movs	r2, #0
 800c96a:	2300      	movs	r3, #0
 800c96c:	b148      	cbz	r0, 800c982 <pow+0x52>
 800c96e:	4630      	mov	r0, r6
 800c970:	4639      	mov	r1, r7
 800c972:	f7f4 f871 	bl	8000a58 <__aeabi_dcmpeq>
 800c976:	2800      	cmp	r0, #0
 800c978:	d17d      	bne.n	800ca76 <pow+0x146>
 800c97a:	ec45 4b10 	vmov	d0, r4, r5
 800c97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c982:	4640      	mov	r0, r8
 800c984:	4649      	mov	r1, r9
 800c986:	f7f4 f867 	bl	8000a58 <__aeabi_dcmpeq>
 800c98a:	b1e0      	cbz	r0, 800c9c6 <pow+0x96>
 800c98c:	2200      	movs	r2, #0
 800c98e:	2300      	movs	r3, #0
 800c990:	4630      	mov	r0, r6
 800c992:	4639      	mov	r1, r7
 800c994:	f7f4 f860 	bl	8000a58 <__aeabi_dcmpeq>
 800c998:	2800      	cmp	r0, #0
 800c99a:	d16c      	bne.n	800ca76 <pow+0x146>
 800c99c:	ec47 6b10 	vmov	d0, r6, r7
 800c9a0:	f001 fd29 	bl	800e3f6 <finite>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	d0e8      	beq.n	800c97a <pow+0x4a>
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	4639      	mov	r1, r7
 800c9b0:	f7f4 f85c 	bl	8000a6c <__aeabi_dcmplt>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	d0e0      	beq.n	800c97a <pow+0x4a>
 800c9b8:	f7ff fdc8 	bl	800c54c <__errno>
 800c9bc:	2321      	movs	r3, #33	; 0x21
 800c9be:	6003      	str	r3, [r0, #0]
 800c9c0:	2400      	movs	r4, #0
 800c9c2:	4d2f      	ldr	r5, [pc, #188]	; (800ca80 <pow+0x150>)
 800c9c4:	e7d9      	b.n	800c97a <pow+0x4a>
 800c9c6:	ec45 4b10 	vmov	d0, r4, r5
 800c9ca:	f001 fd14 	bl	800e3f6 <finite>
 800c9ce:	bbb8      	cbnz	r0, 800ca40 <pow+0x110>
 800c9d0:	ec49 8b10 	vmov	d0, r8, r9
 800c9d4:	f001 fd0f 	bl	800e3f6 <finite>
 800c9d8:	b390      	cbz	r0, 800ca40 <pow+0x110>
 800c9da:	ec47 6b10 	vmov	d0, r6, r7
 800c9de:	f001 fd0a 	bl	800e3f6 <finite>
 800c9e2:	b368      	cbz	r0, 800ca40 <pow+0x110>
 800c9e4:	4622      	mov	r2, r4
 800c9e6:	462b      	mov	r3, r5
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	4629      	mov	r1, r5
 800c9ec:	f7f4 f866 	bl	8000abc <__aeabi_dcmpun>
 800c9f0:	b160      	cbz	r0, 800ca0c <pow+0xdc>
 800c9f2:	f7ff fdab 	bl	800c54c <__errno>
 800c9f6:	2321      	movs	r3, #33	; 0x21
 800c9f8:	6003      	str	r3, [r0, #0]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	4610      	mov	r0, r2
 800ca00:	4619      	mov	r1, r3
 800ca02:	f7f3 feeb 	bl	80007dc <__aeabi_ddiv>
 800ca06:	4604      	mov	r4, r0
 800ca08:	460d      	mov	r5, r1
 800ca0a:	e7b6      	b.n	800c97a <pow+0x4a>
 800ca0c:	f7ff fd9e 	bl	800c54c <__errno>
 800ca10:	2322      	movs	r3, #34	; 0x22
 800ca12:	6003      	str	r3, [r0, #0]
 800ca14:	2200      	movs	r2, #0
 800ca16:	2300      	movs	r3, #0
 800ca18:	4640      	mov	r0, r8
 800ca1a:	4649      	mov	r1, r9
 800ca1c:	f7f4 f826 	bl	8000a6c <__aeabi_dcmplt>
 800ca20:	2400      	movs	r4, #0
 800ca22:	b158      	cbz	r0, 800ca3c <pow+0x10c>
 800ca24:	ec47 6b10 	vmov	d0, r6, r7
 800ca28:	f001 fd7a 	bl	800e520 <rint>
 800ca2c:	4632      	mov	r2, r6
 800ca2e:	ec51 0b10 	vmov	r0, r1, d0
 800ca32:	463b      	mov	r3, r7
 800ca34:	f7f4 f810 	bl	8000a58 <__aeabi_dcmpeq>
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d0c2      	beq.n	800c9c2 <pow+0x92>
 800ca3c:	4d11      	ldr	r5, [pc, #68]	; (800ca84 <pow+0x154>)
 800ca3e:	e79c      	b.n	800c97a <pow+0x4a>
 800ca40:	2200      	movs	r2, #0
 800ca42:	2300      	movs	r3, #0
 800ca44:	4620      	mov	r0, r4
 800ca46:	4629      	mov	r1, r5
 800ca48:	f7f4 f806 	bl	8000a58 <__aeabi_dcmpeq>
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	d094      	beq.n	800c97a <pow+0x4a>
 800ca50:	ec49 8b10 	vmov	d0, r8, r9
 800ca54:	f001 fccf 	bl	800e3f6 <finite>
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	d08e      	beq.n	800c97a <pow+0x4a>
 800ca5c:	ec47 6b10 	vmov	d0, r6, r7
 800ca60:	f001 fcc9 	bl	800e3f6 <finite>
 800ca64:	2800      	cmp	r0, #0
 800ca66:	d088      	beq.n	800c97a <pow+0x4a>
 800ca68:	f7ff fd70 	bl	800c54c <__errno>
 800ca6c:	2322      	movs	r3, #34	; 0x22
 800ca6e:	6003      	str	r3, [r0, #0]
 800ca70:	2400      	movs	r4, #0
 800ca72:	2500      	movs	r5, #0
 800ca74:	e781      	b.n	800c97a <pow+0x4a>
 800ca76:	4d04      	ldr	r5, [pc, #16]	; (800ca88 <pow+0x158>)
 800ca78:	2400      	movs	r4, #0
 800ca7a:	e77e      	b.n	800c97a <pow+0x4a>
 800ca7c:	20000078 	.word	0x20000078
 800ca80:	fff00000 	.word	0xfff00000
 800ca84:	7ff00000 	.word	0x7ff00000
 800ca88:	3ff00000 	.word	0x3ff00000
 800ca8c:	00000000 	.word	0x00000000

0800ca90 <__ieee754_pow>:
 800ca90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca94:	ed2d 8b06 	vpush	{d8-d10}
 800ca98:	b08d      	sub	sp, #52	; 0x34
 800ca9a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800ca9e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800caa2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800caa6:	ea56 0100 	orrs.w	r1, r6, r0
 800caaa:	ec53 2b10 	vmov	r2, r3, d0
 800caae:	f000 84d1 	beq.w	800d454 <__ieee754_pow+0x9c4>
 800cab2:	497f      	ldr	r1, [pc, #508]	; (800ccb0 <__ieee754_pow+0x220>)
 800cab4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800cab8:	428c      	cmp	r4, r1
 800caba:	ee10 8a10 	vmov	r8, s0
 800cabe:	4699      	mov	r9, r3
 800cac0:	dc09      	bgt.n	800cad6 <__ieee754_pow+0x46>
 800cac2:	d103      	bne.n	800cacc <__ieee754_pow+0x3c>
 800cac4:	b97a      	cbnz	r2, 800cae6 <__ieee754_pow+0x56>
 800cac6:	42a6      	cmp	r6, r4
 800cac8:	dd02      	ble.n	800cad0 <__ieee754_pow+0x40>
 800caca:	e00c      	b.n	800cae6 <__ieee754_pow+0x56>
 800cacc:	428e      	cmp	r6, r1
 800cace:	dc02      	bgt.n	800cad6 <__ieee754_pow+0x46>
 800cad0:	428e      	cmp	r6, r1
 800cad2:	d110      	bne.n	800caf6 <__ieee754_pow+0x66>
 800cad4:	b178      	cbz	r0, 800caf6 <__ieee754_pow+0x66>
 800cad6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cada:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cade:	ea54 0308 	orrs.w	r3, r4, r8
 800cae2:	f000 84b7 	beq.w	800d454 <__ieee754_pow+0x9c4>
 800cae6:	4873      	ldr	r0, [pc, #460]	; (800ccb4 <__ieee754_pow+0x224>)
 800cae8:	b00d      	add	sp, #52	; 0x34
 800caea:	ecbd 8b06 	vpop	{d8-d10}
 800caee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf2:	f001 bd0d 	b.w	800e510 <nan>
 800caf6:	f1b9 0f00 	cmp.w	r9, #0
 800cafa:	da36      	bge.n	800cb6a <__ieee754_pow+0xda>
 800cafc:	496e      	ldr	r1, [pc, #440]	; (800ccb8 <__ieee754_pow+0x228>)
 800cafe:	428e      	cmp	r6, r1
 800cb00:	dc51      	bgt.n	800cba6 <__ieee754_pow+0x116>
 800cb02:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800cb06:	428e      	cmp	r6, r1
 800cb08:	f340 84af 	ble.w	800d46a <__ieee754_pow+0x9da>
 800cb0c:	1531      	asrs	r1, r6, #20
 800cb0e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cb12:	2914      	cmp	r1, #20
 800cb14:	dd0f      	ble.n	800cb36 <__ieee754_pow+0xa6>
 800cb16:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800cb1a:	fa20 fc01 	lsr.w	ip, r0, r1
 800cb1e:	fa0c f101 	lsl.w	r1, ip, r1
 800cb22:	4281      	cmp	r1, r0
 800cb24:	f040 84a1 	bne.w	800d46a <__ieee754_pow+0x9da>
 800cb28:	f00c 0c01 	and.w	ip, ip, #1
 800cb2c:	f1cc 0102 	rsb	r1, ip, #2
 800cb30:	9100      	str	r1, [sp, #0]
 800cb32:	b180      	cbz	r0, 800cb56 <__ieee754_pow+0xc6>
 800cb34:	e059      	b.n	800cbea <__ieee754_pow+0x15a>
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d155      	bne.n	800cbe6 <__ieee754_pow+0x156>
 800cb3a:	f1c1 0114 	rsb	r1, r1, #20
 800cb3e:	fa46 fc01 	asr.w	ip, r6, r1
 800cb42:	fa0c f101 	lsl.w	r1, ip, r1
 800cb46:	42b1      	cmp	r1, r6
 800cb48:	f040 848c 	bne.w	800d464 <__ieee754_pow+0x9d4>
 800cb4c:	f00c 0c01 	and.w	ip, ip, #1
 800cb50:	f1cc 0102 	rsb	r1, ip, #2
 800cb54:	9100      	str	r1, [sp, #0]
 800cb56:	4959      	ldr	r1, [pc, #356]	; (800ccbc <__ieee754_pow+0x22c>)
 800cb58:	428e      	cmp	r6, r1
 800cb5a:	d12d      	bne.n	800cbb8 <__ieee754_pow+0x128>
 800cb5c:	2f00      	cmp	r7, #0
 800cb5e:	da79      	bge.n	800cc54 <__ieee754_pow+0x1c4>
 800cb60:	4956      	ldr	r1, [pc, #344]	; (800ccbc <__ieee754_pow+0x22c>)
 800cb62:	2000      	movs	r0, #0
 800cb64:	f7f3 fe3a 	bl	80007dc <__aeabi_ddiv>
 800cb68:	e016      	b.n	800cb98 <__ieee754_pow+0x108>
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	9100      	str	r1, [sp, #0]
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	d13b      	bne.n	800cbea <__ieee754_pow+0x15a>
 800cb72:	494f      	ldr	r1, [pc, #316]	; (800ccb0 <__ieee754_pow+0x220>)
 800cb74:	428e      	cmp	r6, r1
 800cb76:	d1ee      	bne.n	800cb56 <__ieee754_pow+0xc6>
 800cb78:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cb7c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cb80:	ea53 0308 	orrs.w	r3, r3, r8
 800cb84:	f000 8466 	beq.w	800d454 <__ieee754_pow+0x9c4>
 800cb88:	4b4d      	ldr	r3, [pc, #308]	; (800ccc0 <__ieee754_pow+0x230>)
 800cb8a:	429c      	cmp	r4, r3
 800cb8c:	dd0d      	ble.n	800cbaa <__ieee754_pow+0x11a>
 800cb8e:	2f00      	cmp	r7, #0
 800cb90:	f280 8464 	bge.w	800d45c <__ieee754_pow+0x9cc>
 800cb94:	2000      	movs	r0, #0
 800cb96:	2100      	movs	r1, #0
 800cb98:	ec41 0b10 	vmov	d0, r0, r1
 800cb9c:	b00d      	add	sp, #52	; 0x34
 800cb9e:	ecbd 8b06 	vpop	{d8-d10}
 800cba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba6:	2102      	movs	r1, #2
 800cba8:	e7e0      	b.n	800cb6c <__ieee754_pow+0xdc>
 800cbaa:	2f00      	cmp	r7, #0
 800cbac:	daf2      	bge.n	800cb94 <__ieee754_pow+0x104>
 800cbae:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800cbb2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cbb6:	e7ef      	b.n	800cb98 <__ieee754_pow+0x108>
 800cbb8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800cbbc:	d104      	bne.n	800cbc8 <__ieee754_pow+0x138>
 800cbbe:	4610      	mov	r0, r2
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	f7f3 fce1 	bl	8000588 <__aeabi_dmul>
 800cbc6:	e7e7      	b.n	800cb98 <__ieee754_pow+0x108>
 800cbc8:	493e      	ldr	r1, [pc, #248]	; (800ccc4 <__ieee754_pow+0x234>)
 800cbca:	428f      	cmp	r7, r1
 800cbcc:	d10d      	bne.n	800cbea <__ieee754_pow+0x15a>
 800cbce:	f1b9 0f00 	cmp.w	r9, #0
 800cbd2:	db0a      	blt.n	800cbea <__ieee754_pow+0x15a>
 800cbd4:	ec43 2b10 	vmov	d0, r2, r3
 800cbd8:	b00d      	add	sp, #52	; 0x34
 800cbda:	ecbd 8b06 	vpop	{d8-d10}
 800cbde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe2:	f000 be83 	b.w	800d8ec <__ieee754_sqrt>
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	9100      	str	r1, [sp, #0]
 800cbea:	ec43 2b10 	vmov	d0, r2, r3
 800cbee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cbf2:	f001 fbf7 	bl	800e3e4 <fabs>
 800cbf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbfa:	ec51 0b10 	vmov	r0, r1, d0
 800cbfe:	f1b8 0f00 	cmp.w	r8, #0
 800cc02:	d12a      	bne.n	800cc5a <__ieee754_pow+0x1ca>
 800cc04:	b12c      	cbz	r4, 800cc12 <__ieee754_pow+0x182>
 800cc06:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800ccbc <__ieee754_pow+0x22c>
 800cc0a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800cc0e:	45e6      	cmp	lr, ip
 800cc10:	d123      	bne.n	800cc5a <__ieee754_pow+0x1ca>
 800cc12:	2f00      	cmp	r7, #0
 800cc14:	da05      	bge.n	800cc22 <__ieee754_pow+0x192>
 800cc16:	4602      	mov	r2, r0
 800cc18:	460b      	mov	r3, r1
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	4927      	ldr	r1, [pc, #156]	; (800ccbc <__ieee754_pow+0x22c>)
 800cc1e:	f7f3 fddd 	bl	80007dc <__aeabi_ddiv>
 800cc22:	f1b9 0f00 	cmp.w	r9, #0
 800cc26:	dab7      	bge.n	800cb98 <__ieee754_pow+0x108>
 800cc28:	9b00      	ldr	r3, [sp, #0]
 800cc2a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cc2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cc32:	4323      	orrs	r3, r4
 800cc34:	d108      	bne.n	800cc48 <__ieee754_pow+0x1b8>
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	4610      	mov	r0, r2
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	f7f3 faeb 	bl	8000218 <__aeabi_dsub>
 800cc42:	4602      	mov	r2, r0
 800cc44:	460b      	mov	r3, r1
 800cc46:	e78d      	b.n	800cb64 <__ieee754_pow+0xd4>
 800cc48:	9b00      	ldr	r3, [sp, #0]
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d1a4      	bne.n	800cb98 <__ieee754_pow+0x108>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc54:	4610      	mov	r0, r2
 800cc56:	4619      	mov	r1, r3
 800cc58:	e79e      	b.n	800cb98 <__ieee754_pow+0x108>
 800cc5a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800cc5e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800cc62:	950a      	str	r5, [sp, #40]	; 0x28
 800cc64:	9d00      	ldr	r5, [sp, #0]
 800cc66:	46ac      	mov	ip, r5
 800cc68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cc6a:	ea5c 0505 	orrs.w	r5, ip, r5
 800cc6e:	d0e4      	beq.n	800cc3a <__ieee754_pow+0x1aa>
 800cc70:	4b15      	ldr	r3, [pc, #84]	; (800ccc8 <__ieee754_pow+0x238>)
 800cc72:	429e      	cmp	r6, r3
 800cc74:	f340 80fc 	ble.w	800ce70 <__ieee754_pow+0x3e0>
 800cc78:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cc7c:	429e      	cmp	r6, r3
 800cc7e:	4b10      	ldr	r3, [pc, #64]	; (800ccc0 <__ieee754_pow+0x230>)
 800cc80:	dd07      	ble.n	800cc92 <__ieee754_pow+0x202>
 800cc82:	429c      	cmp	r4, r3
 800cc84:	dc0a      	bgt.n	800cc9c <__ieee754_pow+0x20c>
 800cc86:	2f00      	cmp	r7, #0
 800cc88:	da84      	bge.n	800cb94 <__ieee754_pow+0x104>
 800cc8a:	a307      	add	r3, pc, #28	; (adr r3, 800cca8 <__ieee754_pow+0x218>)
 800cc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc90:	e795      	b.n	800cbbe <__ieee754_pow+0x12e>
 800cc92:	429c      	cmp	r4, r3
 800cc94:	dbf7      	blt.n	800cc86 <__ieee754_pow+0x1f6>
 800cc96:	4b09      	ldr	r3, [pc, #36]	; (800ccbc <__ieee754_pow+0x22c>)
 800cc98:	429c      	cmp	r4, r3
 800cc9a:	dd17      	ble.n	800cccc <__ieee754_pow+0x23c>
 800cc9c:	2f00      	cmp	r7, #0
 800cc9e:	dcf4      	bgt.n	800cc8a <__ieee754_pow+0x1fa>
 800cca0:	e778      	b.n	800cb94 <__ieee754_pow+0x104>
 800cca2:	bf00      	nop
 800cca4:	f3af 8000 	nop.w
 800cca8:	8800759c 	.word	0x8800759c
 800ccac:	7e37e43c 	.word	0x7e37e43c
 800ccb0:	7ff00000 	.word	0x7ff00000
 800ccb4:	0800e860 	.word	0x0800e860
 800ccb8:	433fffff 	.word	0x433fffff
 800ccbc:	3ff00000 	.word	0x3ff00000
 800ccc0:	3fefffff 	.word	0x3fefffff
 800ccc4:	3fe00000 	.word	0x3fe00000
 800ccc8:	41e00000 	.word	0x41e00000
 800cccc:	4b64      	ldr	r3, [pc, #400]	; (800ce60 <__ieee754_pow+0x3d0>)
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f7f3 faa2 	bl	8000218 <__aeabi_dsub>
 800ccd4:	a356      	add	r3, pc, #344	; (adr r3, 800ce30 <__ieee754_pow+0x3a0>)
 800ccd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccda:	4604      	mov	r4, r0
 800ccdc:	460d      	mov	r5, r1
 800ccde:	f7f3 fc53 	bl	8000588 <__aeabi_dmul>
 800cce2:	a355      	add	r3, pc, #340	; (adr r3, 800ce38 <__ieee754_pow+0x3a8>)
 800cce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce8:	4606      	mov	r6, r0
 800ccea:	460f      	mov	r7, r1
 800ccec:	4620      	mov	r0, r4
 800ccee:	4629      	mov	r1, r5
 800ccf0:	f7f3 fc4a 	bl	8000588 <__aeabi_dmul>
 800ccf4:	4b5b      	ldr	r3, [pc, #364]	; (800ce64 <__ieee754_pow+0x3d4>)
 800ccf6:	4682      	mov	sl, r0
 800ccf8:	468b      	mov	fp, r1
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	4629      	mov	r1, r5
 800cd00:	f7f3 fc42 	bl	8000588 <__aeabi_dmul>
 800cd04:	4602      	mov	r2, r0
 800cd06:	460b      	mov	r3, r1
 800cd08:	a14d      	add	r1, pc, #308	; (adr r1, 800ce40 <__ieee754_pow+0x3b0>)
 800cd0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd0e:	f7f3 fa83 	bl	8000218 <__aeabi_dsub>
 800cd12:	4622      	mov	r2, r4
 800cd14:	462b      	mov	r3, r5
 800cd16:	f7f3 fc37 	bl	8000588 <__aeabi_dmul>
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	2000      	movs	r0, #0
 800cd20:	4951      	ldr	r1, [pc, #324]	; (800ce68 <__ieee754_pow+0x3d8>)
 800cd22:	f7f3 fa79 	bl	8000218 <__aeabi_dsub>
 800cd26:	4622      	mov	r2, r4
 800cd28:	4680      	mov	r8, r0
 800cd2a:	4689      	mov	r9, r1
 800cd2c:	462b      	mov	r3, r5
 800cd2e:	4620      	mov	r0, r4
 800cd30:	4629      	mov	r1, r5
 800cd32:	f7f3 fc29 	bl	8000588 <__aeabi_dmul>
 800cd36:	4602      	mov	r2, r0
 800cd38:	460b      	mov	r3, r1
 800cd3a:	4640      	mov	r0, r8
 800cd3c:	4649      	mov	r1, r9
 800cd3e:	f7f3 fc23 	bl	8000588 <__aeabi_dmul>
 800cd42:	a341      	add	r3, pc, #260	; (adr r3, 800ce48 <__ieee754_pow+0x3b8>)
 800cd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd48:	f7f3 fc1e 	bl	8000588 <__aeabi_dmul>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	460b      	mov	r3, r1
 800cd50:	4650      	mov	r0, sl
 800cd52:	4659      	mov	r1, fp
 800cd54:	f7f3 fa60 	bl	8000218 <__aeabi_dsub>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	460b      	mov	r3, r1
 800cd5c:	4680      	mov	r8, r0
 800cd5e:	4689      	mov	r9, r1
 800cd60:	4630      	mov	r0, r6
 800cd62:	4639      	mov	r1, r7
 800cd64:	f7f3 fa5a 	bl	800021c <__adddf3>
 800cd68:	2400      	movs	r4, #0
 800cd6a:	4632      	mov	r2, r6
 800cd6c:	463b      	mov	r3, r7
 800cd6e:	4620      	mov	r0, r4
 800cd70:	460d      	mov	r5, r1
 800cd72:	f7f3 fa51 	bl	8000218 <__aeabi_dsub>
 800cd76:	4602      	mov	r2, r0
 800cd78:	460b      	mov	r3, r1
 800cd7a:	4640      	mov	r0, r8
 800cd7c:	4649      	mov	r1, r9
 800cd7e:	f7f3 fa4b 	bl	8000218 <__aeabi_dsub>
 800cd82:	9b00      	ldr	r3, [sp, #0]
 800cd84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd86:	3b01      	subs	r3, #1
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	4682      	mov	sl, r0
 800cd8c:	468b      	mov	fp, r1
 800cd8e:	f040 81f1 	bne.w	800d174 <__ieee754_pow+0x6e4>
 800cd92:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800ce50 <__ieee754_pow+0x3c0>
 800cd96:	eeb0 8a47 	vmov.f32	s16, s14
 800cd9a:	eef0 8a67 	vmov.f32	s17, s15
 800cd9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cda2:	2600      	movs	r6, #0
 800cda4:	4632      	mov	r2, r6
 800cda6:	463b      	mov	r3, r7
 800cda8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdac:	f7f3 fa34 	bl	8000218 <__aeabi_dsub>
 800cdb0:	4622      	mov	r2, r4
 800cdb2:	462b      	mov	r3, r5
 800cdb4:	f7f3 fbe8 	bl	8000588 <__aeabi_dmul>
 800cdb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdbc:	4680      	mov	r8, r0
 800cdbe:	4689      	mov	r9, r1
 800cdc0:	4650      	mov	r0, sl
 800cdc2:	4659      	mov	r1, fp
 800cdc4:	f7f3 fbe0 	bl	8000588 <__aeabi_dmul>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	460b      	mov	r3, r1
 800cdcc:	4640      	mov	r0, r8
 800cdce:	4649      	mov	r1, r9
 800cdd0:	f7f3 fa24 	bl	800021c <__adddf3>
 800cdd4:	4632      	mov	r2, r6
 800cdd6:	463b      	mov	r3, r7
 800cdd8:	4680      	mov	r8, r0
 800cdda:	4689      	mov	r9, r1
 800cddc:	4620      	mov	r0, r4
 800cdde:	4629      	mov	r1, r5
 800cde0:	f7f3 fbd2 	bl	8000588 <__aeabi_dmul>
 800cde4:	460b      	mov	r3, r1
 800cde6:	4604      	mov	r4, r0
 800cde8:	460d      	mov	r5, r1
 800cdea:	4602      	mov	r2, r0
 800cdec:	4649      	mov	r1, r9
 800cdee:	4640      	mov	r0, r8
 800cdf0:	f7f3 fa14 	bl	800021c <__adddf3>
 800cdf4:	4b1d      	ldr	r3, [pc, #116]	; (800ce6c <__ieee754_pow+0x3dc>)
 800cdf6:	4299      	cmp	r1, r3
 800cdf8:	ec45 4b19 	vmov	d9, r4, r5
 800cdfc:	4606      	mov	r6, r0
 800cdfe:	460f      	mov	r7, r1
 800ce00:	468b      	mov	fp, r1
 800ce02:	f340 82fe 	ble.w	800d402 <__ieee754_pow+0x972>
 800ce06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ce0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ce0e:	4303      	orrs	r3, r0
 800ce10:	f000 81f0 	beq.w	800d1f4 <__ieee754_pow+0x764>
 800ce14:	a310      	add	r3, pc, #64	; (adr r3, 800ce58 <__ieee754_pow+0x3c8>)
 800ce16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1a:	ec51 0b18 	vmov	r0, r1, d8
 800ce1e:	f7f3 fbb3 	bl	8000588 <__aeabi_dmul>
 800ce22:	a30d      	add	r3, pc, #52	; (adr r3, 800ce58 <__ieee754_pow+0x3c8>)
 800ce24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce28:	e6cb      	b.n	800cbc2 <__ieee754_pow+0x132>
 800ce2a:	bf00      	nop
 800ce2c:	f3af 8000 	nop.w
 800ce30:	60000000 	.word	0x60000000
 800ce34:	3ff71547 	.word	0x3ff71547
 800ce38:	f85ddf44 	.word	0xf85ddf44
 800ce3c:	3e54ae0b 	.word	0x3e54ae0b
 800ce40:	55555555 	.word	0x55555555
 800ce44:	3fd55555 	.word	0x3fd55555
 800ce48:	652b82fe 	.word	0x652b82fe
 800ce4c:	3ff71547 	.word	0x3ff71547
 800ce50:	00000000 	.word	0x00000000
 800ce54:	bff00000 	.word	0xbff00000
 800ce58:	8800759c 	.word	0x8800759c
 800ce5c:	7e37e43c 	.word	0x7e37e43c
 800ce60:	3ff00000 	.word	0x3ff00000
 800ce64:	3fd00000 	.word	0x3fd00000
 800ce68:	3fe00000 	.word	0x3fe00000
 800ce6c:	408fffff 	.word	0x408fffff
 800ce70:	4bd7      	ldr	r3, [pc, #860]	; (800d1d0 <__ieee754_pow+0x740>)
 800ce72:	ea03 0309 	and.w	r3, r3, r9
 800ce76:	2200      	movs	r2, #0
 800ce78:	b92b      	cbnz	r3, 800ce86 <__ieee754_pow+0x3f6>
 800ce7a:	4bd6      	ldr	r3, [pc, #856]	; (800d1d4 <__ieee754_pow+0x744>)
 800ce7c:	f7f3 fb84 	bl	8000588 <__aeabi_dmul>
 800ce80:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ce84:	460c      	mov	r4, r1
 800ce86:	1523      	asrs	r3, r4, #20
 800ce88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ce8c:	4413      	add	r3, r2
 800ce8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce90:	4bd1      	ldr	r3, [pc, #836]	; (800d1d8 <__ieee754_pow+0x748>)
 800ce92:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ce96:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ce9a:	429c      	cmp	r4, r3
 800ce9c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cea0:	dd08      	ble.n	800ceb4 <__ieee754_pow+0x424>
 800cea2:	4bce      	ldr	r3, [pc, #824]	; (800d1dc <__ieee754_pow+0x74c>)
 800cea4:	429c      	cmp	r4, r3
 800cea6:	f340 8163 	ble.w	800d170 <__ieee754_pow+0x6e0>
 800ceaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceac:	3301      	adds	r3, #1
 800ceae:	9309      	str	r3, [sp, #36]	; 0x24
 800ceb0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ceb4:	2400      	movs	r4, #0
 800ceb6:	00e3      	lsls	r3, r4, #3
 800ceb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ceba:	4bc9      	ldr	r3, [pc, #804]	; (800d1e0 <__ieee754_pow+0x750>)
 800cebc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cec0:	ed93 7b00 	vldr	d7, [r3]
 800cec4:	4629      	mov	r1, r5
 800cec6:	ec53 2b17 	vmov	r2, r3, d7
 800ceca:	eeb0 8a47 	vmov.f32	s16, s14
 800cece:	eef0 8a67 	vmov.f32	s17, s15
 800ced2:	4682      	mov	sl, r0
 800ced4:	f7f3 f9a0 	bl	8000218 <__aeabi_dsub>
 800ced8:	4652      	mov	r2, sl
 800ceda:	4606      	mov	r6, r0
 800cedc:	460f      	mov	r7, r1
 800cede:	462b      	mov	r3, r5
 800cee0:	ec51 0b18 	vmov	r0, r1, d8
 800cee4:	f7f3 f99a 	bl	800021c <__adddf3>
 800cee8:	4602      	mov	r2, r0
 800ceea:	460b      	mov	r3, r1
 800ceec:	2000      	movs	r0, #0
 800ceee:	49bd      	ldr	r1, [pc, #756]	; (800d1e4 <__ieee754_pow+0x754>)
 800cef0:	f7f3 fc74 	bl	80007dc <__aeabi_ddiv>
 800cef4:	ec41 0b19 	vmov	d9, r0, r1
 800cef8:	4602      	mov	r2, r0
 800cefa:	460b      	mov	r3, r1
 800cefc:	4630      	mov	r0, r6
 800cefe:	4639      	mov	r1, r7
 800cf00:	f7f3 fb42 	bl	8000588 <__aeabi_dmul>
 800cf04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cf08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cf10:	2300      	movs	r3, #0
 800cf12:	9304      	str	r3, [sp, #16]
 800cf14:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cf18:	46ab      	mov	fp, r5
 800cf1a:	106d      	asrs	r5, r5, #1
 800cf1c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cf20:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cf24:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800cf28:	2200      	movs	r2, #0
 800cf2a:	4640      	mov	r0, r8
 800cf2c:	4649      	mov	r1, r9
 800cf2e:	4614      	mov	r4, r2
 800cf30:	461d      	mov	r5, r3
 800cf32:	f7f3 fb29 	bl	8000588 <__aeabi_dmul>
 800cf36:	4602      	mov	r2, r0
 800cf38:	460b      	mov	r3, r1
 800cf3a:	4630      	mov	r0, r6
 800cf3c:	4639      	mov	r1, r7
 800cf3e:	f7f3 f96b 	bl	8000218 <__aeabi_dsub>
 800cf42:	ec53 2b18 	vmov	r2, r3, d8
 800cf46:	4606      	mov	r6, r0
 800cf48:	460f      	mov	r7, r1
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	f7f3 f963 	bl	8000218 <__aeabi_dsub>
 800cf52:	4602      	mov	r2, r0
 800cf54:	460b      	mov	r3, r1
 800cf56:	4650      	mov	r0, sl
 800cf58:	4659      	mov	r1, fp
 800cf5a:	f7f3 f95d 	bl	8000218 <__aeabi_dsub>
 800cf5e:	4642      	mov	r2, r8
 800cf60:	464b      	mov	r3, r9
 800cf62:	f7f3 fb11 	bl	8000588 <__aeabi_dmul>
 800cf66:	4602      	mov	r2, r0
 800cf68:	460b      	mov	r3, r1
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	4639      	mov	r1, r7
 800cf6e:	f7f3 f953 	bl	8000218 <__aeabi_dsub>
 800cf72:	ec53 2b19 	vmov	r2, r3, d9
 800cf76:	f7f3 fb07 	bl	8000588 <__aeabi_dmul>
 800cf7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf7e:	ec41 0b18 	vmov	d8, r0, r1
 800cf82:	4610      	mov	r0, r2
 800cf84:	4619      	mov	r1, r3
 800cf86:	f7f3 faff 	bl	8000588 <__aeabi_dmul>
 800cf8a:	a37d      	add	r3, pc, #500	; (adr r3, 800d180 <__ieee754_pow+0x6f0>)
 800cf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf90:	4604      	mov	r4, r0
 800cf92:	460d      	mov	r5, r1
 800cf94:	f7f3 faf8 	bl	8000588 <__aeabi_dmul>
 800cf98:	a37b      	add	r3, pc, #492	; (adr r3, 800d188 <__ieee754_pow+0x6f8>)
 800cf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9e:	f7f3 f93d 	bl	800021c <__adddf3>
 800cfa2:	4622      	mov	r2, r4
 800cfa4:	462b      	mov	r3, r5
 800cfa6:	f7f3 faef 	bl	8000588 <__aeabi_dmul>
 800cfaa:	a379      	add	r3, pc, #484	; (adr r3, 800d190 <__ieee754_pow+0x700>)
 800cfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb0:	f7f3 f934 	bl	800021c <__adddf3>
 800cfb4:	4622      	mov	r2, r4
 800cfb6:	462b      	mov	r3, r5
 800cfb8:	f7f3 fae6 	bl	8000588 <__aeabi_dmul>
 800cfbc:	a376      	add	r3, pc, #472	; (adr r3, 800d198 <__ieee754_pow+0x708>)
 800cfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc2:	f7f3 f92b 	bl	800021c <__adddf3>
 800cfc6:	4622      	mov	r2, r4
 800cfc8:	462b      	mov	r3, r5
 800cfca:	f7f3 fadd 	bl	8000588 <__aeabi_dmul>
 800cfce:	a374      	add	r3, pc, #464	; (adr r3, 800d1a0 <__ieee754_pow+0x710>)
 800cfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd4:	f7f3 f922 	bl	800021c <__adddf3>
 800cfd8:	4622      	mov	r2, r4
 800cfda:	462b      	mov	r3, r5
 800cfdc:	f7f3 fad4 	bl	8000588 <__aeabi_dmul>
 800cfe0:	a371      	add	r3, pc, #452	; (adr r3, 800d1a8 <__ieee754_pow+0x718>)
 800cfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe6:	f7f3 f919 	bl	800021c <__adddf3>
 800cfea:	4622      	mov	r2, r4
 800cfec:	4606      	mov	r6, r0
 800cfee:	460f      	mov	r7, r1
 800cff0:	462b      	mov	r3, r5
 800cff2:	4620      	mov	r0, r4
 800cff4:	4629      	mov	r1, r5
 800cff6:	f7f3 fac7 	bl	8000588 <__aeabi_dmul>
 800cffa:	4602      	mov	r2, r0
 800cffc:	460b      	mov	r3, r1
 800cffe:	4630      	mov	r0, r6
 800d000:	4639      	mov	r1, r7
 800d002:	f7f3 fac1 	bl	8000588 <__aeabi_dmul>
 800d006:	4642      	mov	r2, r8
 800d008:	4604      	mov	r4, r0
 800d00a:	460d      	mov	r5, r1
 800d00c:	464b      	mov	r3, r9
 800d00e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d012:	f7f3 f903 	bl	800021c <__adddf3>
 800d016:	ec53 2b18 	vmov	r2, r3, d8
 800d01a:	f7f3 fab5 	bl	8000588 <__aeabi_dmul>
 800d01e:	4622      	mov	r2, r4
 800d020:	462b      	mov	r3, r5
 800d022:	f7f3 f8fb 	bl	800021c <__adddf3>
 800d026:	4642      	mov	r2, r8
 800d028:	4682      	mov	sl, r0
 800d02a:	468b      	mov	fp, r1
 800d02c:	464b      	mov	r3, r9
 800d02e:	4640      	mov	r0, r8
 800d030:	4649      	mov	r1, r9
 800d032:	f7f3 faa9 	bl	8000588 <__aeabi_dmul>
 800d036:	4b6c      	ldr	r3, [pc, #432]	; (800d1e8 <__ieee754_pow+0x758>)
 800d038:	2200      	movs	r2, #0
 800d03a:	4606      	mov	r6, r0
 800d03c:	460f      	mov	r7, r1
 800d03e:	f7f3 f8ed 	bl	800021c <__adddf3>
 800d042:	4652      	mov	r2, sl
 800d044:	465b      	mov	r3, fp
 800d046:	f7f3 f8e9 	bl	800021c <__adddf3>
 800d04a:	9c04      	ldr	r4, [sp, #16]
 800d04c:	460d      	mov	r5, r1
 800d04e:	4622      	mov	r2, r4
 800d050:	460b      	mov	r3, r1
 800d052:	4640      	mov	r0, r8
 800d054:	4649      	mov	r1, r9
 800d056:	f7f3 fa97 	bl	8000588 <__aeabi_dmul>
 800d05a:	4b63      	ldr	r3, [pc, #396]	; (800d1e8 <__ieee754_pow+0x758>)
 800d05c:	4680      	mov	r8, r0
 800d05e:	4689      	mov	r9, r1
 800d060:	2200      	movs	r2, #0
 800d062:	4620      	mov	r0, r4
 800d064:	4629      	mov	r1, r5
 800d066:	f7f3 f8d7 	bl	8000218 <__aeabi_dsub>
 800d06a:	4632      	mov	r2, r6
 800d06c:	463b      	mov	r3, r7
 800d06e:	f7f3 f8d3 	bl	8000218 <__aeabi_dsub>
 800d072:	4602      	mov	r2, r0
 800d074:	460b      	mov	r3, r1
 800d076:	4650      	mov	r0, sl
 800d078:	4659      	mov	r1, fp
 800d07a:	f7f3 f8cd 	bl	8000218 <__aeabi_dsub>
 800d07e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d082:	f7f3 fa81 	bl	8000588 <__aeabi_dmul>
 800d086:	4622      	mov	r2, r4
 800d088:	4606      	mov	r6, r0
 800d08a:	460f      	mov	r7, r1
 800d08c:	462b      	mov	r3, r5
 800d08e:	ec51 0b18 	vmov	r0, r1, d8
 800d092:	f7f3 fa79 	bl	8000588 <__aeabi_dmul>
 800d096:	4602      	mov	r2, r0
 800d098:	460b      	mov	r3, r1
 800d09a:	4630      	mov	r0, r6
 800d09c:	4639      	mov	r1, r7
 800d09e:	f7f3 f8bd 	bl	800021c <__adddf3>
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	460f      	mov	r7, r1
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	4640      	mov	r0, r8
 800d0ac:	4649      	mov	r1, r9
 800d0ae:	f7f3 f8b5 	bl	800021c <__adddf3>
 800d0b2:	9c04      	ldr	r4, [sp, #16]
 800d0b4:	a33e      	add	r3, pc, #248	; (adr r3, 800d1b0 <__ieee754_pow+0x720>)
 800d0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	460d      	mov	r5, r1
 800d0be:	f7f3 fa63 	bl	8000588 <__aeabi_dmul>
 800d0c2:	4642      	mov	r2, r8
 800d0c4:	ec41 0b18 	vmov	d8, r0, r1
 800d0c8:	464b      	mov	r3, r9
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	f7f3 f8a3 	bl	8000218 <__aeabi_dsub>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	4639      	mov	r1, r7
 800d0da:	f7f3 f89d 	bl	8000218 <__aeabi_dsub>
 800d0de:	a336      	add	r3, pc, #216	; (adr r3, 800d1b8 <__ieee754_pow+0x728>)
 800d0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e4:	f7f3 fa50 	bl	8000588 <__aeabi_dmul>
 800d0e8:	a335      	add	r3, pc, #212	; (adr r3, 800d1c0 <__ieee754_pow+0x730>)
 800d0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ee:	4606      	mov	r6, r0
 800d0f0:	460f      	mov	r7, r1
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	4629      	mov	r1, r5
 800d0f6:	f7f3 fa47 	bl	8000588 <__aeabi_dmul>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	4630      	mov	r0, r6
 800d100:	4639      	mov	r1, r7
 800d102:	f7f3 f88b 	bl	800021c <__adddf3>
 800d106:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d108:	4b38      	ldr	r3, [pc, #224]	; (800d1ec <__ieee754_pow+0x75c>)
 800d10a:	4413      	add	r3, r2
 800d10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d110:	f7f3 f884 	bl	800021c <__adddf3>
 800d114:	4682      	mov	sl, r0
 800d116:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d118:	468b      	mov	fp, r1
 800d11a:	f7f3 f9cb 	bl	80004b4 <__aeabi_i2d>
 800d11e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d120:	4b33      	ldr	r3, [pc, #204]	; (800d1f0 <__ieee754_pow+0x760>)
 800d122:	4413      	add	r3, r2
 800d124:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d128:	4606      	mov	r6, r0
 800d12a:	460f      	mov	r7, r1
 800d12c:	4652      	mov	r2, sl
 800d12e:	465b      	mov	r3, fp
 800d130:	ec51 0b18 	vmov	r0, r1, d8
 800d134:	f7f3 f872 	bl	800021c <__adddf3>
 800d138:	4642      	mov	r2, r8
 800d13a:	464b      	mov	r3, r9
 800d13c:	f7f3 f86e 	bl	800021c <__adddf3>
 800d140:	4632      	mov	r2, r6
 800d142:	463b      	mov	r3, r7
 800d144:	f7f3 f86a 	bl	800021c <__adddf3>
 800d148:	9c04      	ldr	r4, [sp, #16]
 800d14a:	4632      	mov	r2, r6
 800d14c:	463b      	mov	r3, r7
 800d14e:	4620      	mov	r0, r4
 800d150:	460d      	mov	r5, r1
 800d152:	f7f3 f861 	bl	8000218 <__aeabi_dsub>
 800d156:	4642      	mov	r2, r8
 800d158:	464b      	mov	r3, r9
 800d15a:	f7f3 f85d 	bl	8000218 <__aeabi_dsub>
 800d15e:	ec53 2b18 	vmov	r2, r3, d8
 800d162:	f7f3 f859 	bl	8000218 <__aeabi_dsub>
 800d166:	4602      	mov	r2, r0
 800d168:	460b      	mov	r3, r1
 800d16a:	4650      	mov	r0, sl
 800d16c:	4659      	mov	r1, fp
 800d16e:	e606      	b.n	800cd7e <__ieee754_pow+0x2ee>
 800d170:	2401      	movs	r4, #1
 800d172:	e6a0      	b.n	800ceb6 <__ieee754_pow+0x426>
 800d174:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800d1c8 <__ieee754_pow+0x738>
 800d178:	e60d      	b.n	800cd96 <__ieee754_pow+0x306>
 800d17a:	bf00      	nop
 800d17c:	f3af 8000 	nop.w
 800d180:	4a454eef 	.word	0x4a454eef
 800d184:	3fca7e28 	.word	0x3fca7e28
 800d188:	93c9db65 	.word	0x93c9db65
 800d18c:	3fcd864a 	.word	0x3fcd864a
 800d190:	a91d4101 	.word	0xa91d4101
 800d194:	3fd17460 	.word	0x3fd17460
 800d198:	518f264d 	.word	0x518f264d
 800d19c:	3fd55555 	.word	0x3fd55555
 800d1a0:	db6fabff 	.word	0xdb6fabff
 800d1a4:	3fdb6db6 	.word	0x3fdb6db6
 800d1a8:	33333303 	.word	0x33333303
 800d1ac:	3fe33333 	.word	0x3fe33333
 800d1b0:	e0000000 	.word	0xe0000000
 800d1b4:	3feec709 	.word	0x3feec709
 800d1b8:	dc3a03fd 	.word	0xdc3a03fd
 800d1bc:	3feec709 	.word	0x3feec709
 800d1c0:	145b01f5 	.word	0x145b01f5
 800d1c4:	be3e2fe0 	.word	0xbe3e2fe0
 800d1c8:	00000000 	.word	0x00000000
 800d1cc:	3ff00000 	.word	0x3ff00000
 800d1d0:	7ff00000 	.word	0x7ff00000
 800d1d4:	43400000 	.word	0x43400000
 800d1d8:	0003988e 	.word	0x0003988e
 800d1dc:	000bb679 	.word	0x000bb679
 800d1e0:	0800e868 	.word	0x0800e868
 800d1e4:	3ff00000 	.word	0x3ff00000
 800d1e8:	40080000 	.word	0x40080000
 800d1ec:	0800e888 	.word	0x0800e888
 800d1f0:	0800e878 	.word	0x0800e878
 800d1f4:	a3b5      	add	r3, pc, #724	; (adr r3, 800d4cc <__ieee754_pow+0xa3c>)
 800d1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fa:	4640      	mov	r0, r8
 800d1fc:	4649      	mov	r1, r9
 800d1fe:	f7f3 f80d 	bl	800021c <__adddf3>
 800d202:	4622      	mov	r2, r4
 800d204:	ec41 0b1a 	vmov	d10, r0, r1
 800d208:	462b      	mov	r3, r5
 800d20a:	4630      	mov	r0, r6
 800d20c:	4639      	mov	r1, r7
 800d20e:	f7f3 f803 	bl	8000218 <__aeabi_dsub>
 800d212:	4602      	mov	r2, r0
 800d214:	460b      	mov	r3, r1
 800d216:	ec51 0b1a 	vmov	r0, r1, d10
 800d21a:	f7f3 fc45 	bl	8000aa8 <__aeabi_dcmpgt>
 800d21e:	2800      	cmp	r0, #0
 800d220:	f47f adf8 	bne.w	800ce14 <__ieee754_pow+0x384>
 800d224:	4aa4      	ldr	r2, [pc, #656]	; (800d4b8 <__ieee754_pow+0xa28>)
 800d226:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d22a:	4293      	cmp	r3, r2
 800d22c:	f340 810b 	ble.w	800d446 <__ieee754_pow+0x9b6>
 800d230:	151b      	asrs	r3, r3, #20
 800d232:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d236:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d23a:	fa4a f303 	asr.w	r3, sl, r3
 800d23e:	445b      	add	r3, fp
 800d240:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d244:	4e9d      	ldr	r6, [pc, #628]	; (800d4bc <__ieee754_pow+0xa2c>)
 800d246:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d24a:	4116      	asrs	r6, r2
 800d24c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d250:	2000      	movs	r0, #0
 800d252:	ea23 0106 	bic.w	r1, r3, r6
 800d256:	f1c2 0214 	rsb	r2, r2, #20
 800d25a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d25e:	fa4a fa02 	asr.w	sl, sl, r2
 800d262:	f1bb 0f00 	cmp.w	fp, #0
 800d266:	4602      	mov	r2, r0
 800d268:	460b      	mov	r3, r1
 800d26a:	4620      	mov	r0, r4
 800d26c:	4629      	mov	r1, r5
 800d26e:	bfb8      	it	lt
 800d270:	f1ca 0a00 	rsblt	sl, sl, #0
 800d274:	f7f2 ffd0 	bl	8000218 <__aeabi_dsub>
 800d278:	ec41 0b19 	vmov	d9, r0, r1
 800d27c:	4642      	mov	r2, r8
 800d27e:	464b      	mov	r3, r9
 800d280:	ec51 0b19 	vmov	r0, r1, d9
 800d284:	f7f2 ffca 	bl	800021c <__adddf3>
 800d288:	2400      	movs	r4, #0
 800d28a:	a379      	add	r3, pc, #484	; (adr r3, 800d470 <__ieee754_pow+0x9e0>)
 800d28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d290:	4620      	mov	r0, r4
 800d292:	460d      	mov	r5, r1
 800d294:	f7f3 f978 	bl	8000588 <__aeabi_dmul>
 800d298:	ec53 2b19 	vmov	r2, r3, d9
 800d29c:	4606      	mov	r6, r0
 800d29e:	460f      	mov	r7, r1
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	4629      	mov	r1, r5
 800d2a4:	f7f2 ffb8 	bl	8000218 <__aeabi_dsub>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	4640      	mov	r0, r8
 800d2ae:	4649      	mov	r1, r9
 800d2b0:	f7f2 ffb2 	bl	8000218 <__aeabi_dsub>
 800d2b4:	a370      	add	r3, pc, #448	; (adr r3, 800d478 <__ieee754_pow+0x9e8>)
 800d2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ba:	f7f3 f965 	bl	8000588 <__aeabi_dmul>
 800d2be:	a370      	add	r3, pc, #448	; (adr r3, 800d480 <__ieee754_pow+0x9f0>)
 800d2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c4:	4680      	mov	r8, r0
 800d2c6:	4689      	mov	r9, r1
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	4629      	mov	r1, r5
 800d2cc:	f7f3 f95c 	bl	8000588 <__aeabi_dmul>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	4640      	mov	r0, r8
 800d2d6:	4649      	mov	r1, r9
 800d2d8:	f7f2 ffa0 	bl	800021c <__adddf3>
 800d2dc:	4604      	mov	r4, r0
 800d2de:	460d      	mov	r5, r1
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	4639      	mov	r1, r7
 800d2e8:	f7f2 ff98 	bl	800021c <__adddf3>
 800d2ec:	4632      	mov	r2, r6
 800d2ee:	463b      	mov	r3, r7
 800d2f0:	4680      	mov	r8, r0
 800d2f2:	4689      	mov	r9, r1
 800d2f4:	f7f2 ff90 	bl	8000218 <__aeabi_dsub>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	4629      	mov	r1, r5
 800d300:	f7f2 ff8a 	bl	8000218 <__aeabi_dsub>
 800d304:	4642      	mov	r2, r8
 800d306:	4606      	mov	r6, r0
 800d308:	460f      	mov	r7, r1
 800d30a:	464b      	mov	r3, r9
 800d30c:	4640      	mov	r0, r8
 800d30e:	4649      	mov	r1, r9
 800d310:	f7f3 f93a 	bl	8000588 <__aeabi_dmul>
 800d314:	a35c      	add	r3, pc, #368	; (adr r3, 800d488 <__ieee754_pow+0x9f8>)
 800d316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31a:	4604      	mov	r4, r0
 800d31c:	460d      	mov	r5, r1
 800d31e:	f7f3 f933 	bl	8000588 <__aeabi_dmul>
 800d322:	a35b      	add	r3, pc, #364	; (adr r3, 800d490 <__ieee754_pow+0xa00>)
 800d324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d328:	f7f2 ff76 	bl	8000218 <__aeabi_dsub>
 800d32c:	4622      	mov	r2, r4
 800d32e:	462b      	mov	r3, r5
 800d330:	f7f3 f92a 	bl	8000588 <__aeabi_dmul>
 800d334:	a358      	add	r3, pc, #352	; (adr r3, 800d498 <__ieee754_pow+0xa08>)
 800d336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33a:	f7f2 ff6f 	bl	800021c <__adddf3>
 800d33e:	4622      	mov	r2, r4
 800d340:	462b      	mov	r3, r5
 800d342:	f7f3 f921 	bl	8000588 <__aeabi_dmul>
 800d346:	a356      	add	r3, pc, #344	; (adr r3, 800d4a0 <__ieee754_pow+0xa10>)
 800d348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34c:	f7f2 ff64 	bl	8000218 <__aeabi_dsub>
 800d350:	4622      	mov	r2, r4
 800d352:	462b      	mov	r3, r5
 800d354:	f7f3 f918 	bl	8000588 <__aeabi_dmul>
 800d358:	a353      	add	r3, pc, #332	; (adr r3, 800d4a8 <__ieee754_pow+0xa18>)
 800d35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35e:	f7f2 ff5d 	bl	800021c <__adddf3>
 800d362:	4622      	mov	r2, r4
 800d364:	462b      	mov	r3, r5
 800d366:	f7f3 f90f 	bl	8000588 <__aeabi_dmul>
 800d36a:	4602      	mov	r2, r0
 800d36c:	460b      	mov	r3, r1
 800d36e:	4640      	mov	r0, r8
 800d370:	4649      	mov	r1, r9
 800d372:	f7f2 ff51 	bl	8000218 <__aeabi_dsub>
 800d376:	4604      	mov	r4, r0
 800d378:	460d      	mov	r5, r1
 800d37a:	4602      	mov	r2, r0
 800d37c:	460b      	mov	r3, r1
 800d37e:	4640      	mov	r0, r8
 800d380:	4649      	mov	r1, r9
 800d382:	f7f3 f901 	bl	8000588 <__aeabi_dmul>
 800d386:	2200      	movs	r2, #0
 800d388:	ec41 0b19 	vmov	d9, r0, r1
 800d38c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d390:	4620      	mov	r0, r4
 800d392:	4629      	mov	r1, r5
 800d394:	f7f2 ff40 	bl	8000218 <__aeabi_dsub>
 800d398:	4602      	mov	r2, r0
 800d39a:	460b      	mov	r3, r1
 800d39c:	ec51 0b19 	vmov	r0, r1, d9
 800d3a0:	f7f3 fa1c 	bl	80007dc <__aeabi_ddiv>
 800d3a4:	4632      	mov	r2, r6
 800d3a6:	4604      	mov	r4, r0
 800d3a8:	460d      	mov	r5, r1
 800d3aa:	463b      	mov	r3, r7
 800d3ac:	4640      	mov	r0, r8
 800d3ae:	4649      	mov	r1, r9
 800d3b0:	f7f3 f8ea 	bl	8000588 <__aeabi_dmul>
 800d3b4:	4632      	mov	r2, r6
 800d3b6:	463b      	mov	r3, r7
 800d3b8:	f7f2 ff30 	bl	800021c <__adddf3>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	460b      	mov	r3, r1
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	4629      	mov	r1, r5
 800d3c4:	f7f2 ff28 	bl	8000218 <__aeabi_dsub>
 800d3c8:	4642      	mov	r2, r8
 800d3ca:	464b      	mov	r3, r9
 800d3cc:	f7f2 ff24 	bl	8000218 <__aeabi_dsub>
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	493a      	ldr	r1, [pc, #232]	; (800d4c0 <__ieee754_pow+0xa30>)
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	f7f2 ff1e 	bl	8000218 <__aeabi_dsub>
 800d3dc:	e9cd 0100 	strd	r0, r1, [sp]
 800d3e0:	9b01      	ldr	r3, [sp, #4]
 800d3e2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d3e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d3ea:	da2f      	bge.n	800d44c <__ieee754_pow+0x9bc>
 800d3ec:	4650      	mov	r0, sl
 800d3ee:	ed9d 0b00 	vldr	d0, [sp]
 800d3f2:	f001 f921 	bl	800e638 <scalbn>
 800d3f6:	ec51 0b10 	vmov	r0, r1, d0
 800d3fa:	ec53 2b18 	vmov	r2, r3, d8
 800d3fe:	f7ff bbe0 	b.w	800cbc2 <__ieee754_pow+0x132>
 800d402:	4b30      	ldr	r3, [pc, #192]	; (800d4c4 <__ieee754_pow+0xa34>)
 800d404:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d408:	429e      	cmp	r6, r3
 800d40a:	f77f af0b 	ble.w	800d224 <__ieee754_pow+0x794>
 800d40e:	4b2e      	ldr	r3, [pc, #184]	; (800d4c8 <__ieee754_pow+0xa38>)
 800d410:	440b      	add	r3, r1
 800d412:	4303      	orrs	r3, r0
 800d414:	d00b      	beq.n	800d42e <__ieee754_pow+0x99e>
 800d416:	a326      	add	r3, pc, #152	; (adr r3, 800d4b0 <__ieee754_pow+0xa20>)
 800d418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41c:	ec51 0b18 	vmov	r0, r1, d8
 800d420:	f7f3 f8b2 	bl	8000588 <__aeabi_dmul>
 800d424:	a322      	add	r3, pc, #136	; (adr r3, 800d4b0 <__ieee754_pow+0xa20>)
 800d426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42a:	f7ff bbca 	b.w	800cbc2 <__ieee754_pow+0x132>
 800d42e:	4622      	mov	r2, r4
 800d430:	462b      	mov	r3, r5
 800d432:	f7f2 fef1 	bl	8000218 <__aeabi_dsub>
 800d436:	4642      	mov	r2, r8
 800d438:	464b      	mov	r3, r9
 800d43a:	f7f3 fb2b 	bl	8000a94 <__aeabi_dcmpge>
 800d43e:	2800      	cmp	r0, #0
 800d440:	f43f aef0 	beq.w	800d224 <__ieee754_pow+0x794>
 800d444:	e7e7      	b.n	800d416 <__ieee754_pow+0x986>
 800d446:	f04f 0a00 	mov.w	sl, #0
 800d44a:	e717      	b.n	800d27c <__ieee754_pow+0x7ec>
 800d44c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d450:	4619      	mov	r1, r3
 800d452:	e7d2      	b.n	800d3fa <__ieee754_pow+0x96a>
 800d454:	491a      	ldr	r1, [pc, #104]	; (800d4c0 <__ieee754_pow+0xa30>)
 800d456:	2000      	movs	r0, #0
 800d458:	f7ff bb9e 	b.w	800cb98 <__ieee754_pow+0x108>
 800d45c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d460:	f7ff bb9a 	b.w	800cb98 <__ieee754_pow+0x108>
 800d464:	9000      	str	r0, [sp, #0]
 800d466:	f7ff bb76 	b.w	800cb56 <__ieee754_pow+0xc6>
 800d46a:	2100      	movs	r1, #0
 800d46c:	f7ff bb60 	b.w	800cb30 <__ieee754_pow+0xa0>
 800d470:	00000000 	.word	0x00000000
 800d474:	3fe62e43 	.word	0x3fe62e43
 800d478:	fefa39ef 	.word	0xfefa39ef
 800d47c:	3fe62e42 	.word	0x3fe62e42
 800d480:	0ca86c39 	.word	0x0ca86c39
 800d484:	be205c61 	.word	0xbe205c61
 800d488:	72bea4d0 	.word	0x72bea4d0
 800d48c:	3e663769 	.word	0x3e663769
 800d490:	c5d26bf1 	.word	0xc5d26bf1
 800d494:	3ebbbd41 	.word	0x3ebbbd41
 800d498:	af25de2c 	.word	0xaf25de2c
 800d49c:	3f11566a 	.word	0x3f11566a
 800d4a0:	16bebd93 	.word	0x16bebd93
 800d4a4:	3f66c16c 	.word	0x3f66c16c
 800d4a8:	5555553e 	.word	0x5555553e
 800d4ac:	3fc55555 	.word	0x3fc55555
 800d4b0:	c2f8f359 	.word	0xc2f8f359
 800d4b4:	01a56e1f 	.word	0x01a56e1f
 800d4b8:	3fe00000 	.word	0x3fe00000
 800d4bc:	000fffff 	.word	0x000fffff
 800d4c0:	3ff00000 	.word	0x3ff00000
 800d4c4:	4090cbff 	.word	0x4090cbff
 800d4c8:	3f6f3400 	.word	0x3f6f3400
 800d4cc:	652b82fe 	.word	0x652b82fe
 800d4d0:	3c971547 	.word	0x3c971547
 800d4d4:	00000000 	.word	0x00000000

0800d4d8 <__ieee754_rem_pio2>:
 800d4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4dc:	ed2d 8b02 	vpush	{d8}
 800d4e0:	ec55 4b10 	vmov	r4, r5, d0
 800d4e4:	4bca      	ldr	r3, [pc, #808]	; (800d810 <__ieee754_rem_pio2+0x338>)
 800d4e6:	b08b      	sub	sp, #44	; 0x2c
 800d4e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d4ec:	4598      	cmp	r8, r3
 800d4ee:	4682      	mov	sl, r0
 800d4f0:	9502      	str	r5, [sp, #8]
 800d4f2:	dc08      	bgt.n	800d506 <__ieee754_rem_pio2+0x2e>
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	ed80 0b00 	vstr	d0, [r0]
 800d4fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d500:	f04f 0b00 	mov.w	fp, #0
 800d504:	e028      	b.n	800d558 <__ieee754_rem_pio2+0x80>
 800d506:	4bc3      	ldr	r3, [pc, #780]	; (800d814 <__ieee754_rem_pio2+0x33c>)
 800d508:	4598      	cmp	r8, r3
 800d50a:	dc78      	bgt.n	800d5fe <__ieee754_rem_pio2+0x126>
 800d50c:	9b02      	ldr	r3, [sp, #8]
 800d50e:	4ec2      	ldr	r6, [pc, #776]	; (800d818 <__ieee754_rem_pio2+0x340>)
 800d510:	2b00      	cmp	r3, #0
 800d512:	ee10 0a10 	vmov	r0, s0
 800d516:	a3b0      	add	r3, pc, #704	; (adr r3, 800d7d8 <__ieee754_rem_pio2+0x300>)
 800d518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51c:	4629      	mov	r1, r5
 800d51e:	dd39      	ble.n	800d594 <__ieee754_rem_pio2+0xbc>
 800d520:	f7f2 fe7a 	bl	8000218 <__aeabi_dsub>
 800d524:	45b0      	cmp	r8, r6
 800d526:	4604      	mov	r4, r0
 800d528:	460d      	mov	r5, r1
 800d52a:	d01b      	beq.n	800d564 <__ieee754_rem_pio2+0x8c>
 800d52c:	a3ac      	add	r3, pc, #688	; (adr r3, 800d7e0 <__ieee754_rem_pio2+0x308>)
 800d52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d532:	f7f2 fe71 	bl	8000218 <__aeabi_dsub>
 800d536:	4602      	mov	r2, r0
 800d538:	460b      	mov	r3, r1
 800d53a:	e9ca 2300 	strd	r2, r3, [sl]
 800d53e:	4620      	mov	r0, r4
 800d540:	4629      	mov	r1, r5
 800d542:	f7f2 fe69 	bl	8000218 <__aeabi_dsub>
 800d546:	a3a6      	add	r3, pc, #664	; (adr r3, 800d7e0 <__ieee754_rem_pio2+0x308>)
 800d548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54c:	f7f2 fe64 	bl	8000218 <__aeabi_dsub>
 800d550:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d554:	f04f 0b01 	mov.w	fp, #1
 800d558:	4658      	mov	r0, fp
 800d55a:	b00b      	add	sp, #44	; 0x2c
 800d55c:	ecbd 8b02 	vpop	{d8}
 800d560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d564:	a3a0      	add	r3, pc, #640	; (adr r3, 800d7e8 <__ieee754_rem_pio2+0x310>)
 800d566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56a:	f7f2 fe55 	bl	8000218 <__aeabi_dsub>
 800d56e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d7f0 <__ieee754_rem_pio2+0x318>)
 800d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d574:	4604      	mov	r4, r0
 800d576:	460d      	mov	r5, r1
 800d578:	f7f2 fe4e 	bl	8000218 <__aeabi_dsub>
 800d57c:	4602      	mov	r2, r0
 800d57e:	460b      	mov	r3, r1
 800d580:	e9ca 2300 	strd	r2, r3, [sl]
 800d584:	4620      	mov	r0, r4
 800d586:	4629      	mov	r1, r5
 800d588:	f7f2 fe46 	bl	8000218 <__aeabi_dsub>
 800d58c:	a398      	add	r3, pc, #608	; (adr r3, 800d7f0 <__ieee754_rem_pio2+0x318>)
 800d58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d592:	e7db      	b.n	800d54c <__ieee754_rem_pio2+0x74>
 800d594:	f7f2 fe42 	bl	800021c <__adddf3>
 800d598:	45b0      	cmp	r8, r6
 800d59a:	4604      	mov	r4, r0
 800d59c:	460d      	mov	r5, r1
 800d59e:	d016      	beq.n	800d5ce <__ieee754_rem_pio2+0xf6>
 800d5a0:	a38f      	add	r3, pc, #572	; (adr r3, 800d7e0 <__ieee754_rem_pio2+0x308>)
 800d5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a6:	f7f2 fe39 	bl	800021c <__adddf3>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	e9ca 2300 	strd	r2, r3, [sl]
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	4629      	mov	r1, r5
 800d5b6:	f7f2 fe2f 	bl	8000218 <__aeabi_dsub>
 800d5ba:	a389      	add	r3, pc, #548	; (adr r3, 800d7e0 <__ieee754_rem_pio2+0x308>)
 800d5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c0:	f7f2 fe2c 	bl	800021c <__adddf3>
 800d5c4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d5c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d5cc:	e7c4      	b.n	800d558 <__ieee754_rem_pio2+0x80>
 800d5ce:	a386      	add	r3, pc, #536	; (adr r3, 800d7e8 <__ieee754_rem_pio2+0x310>)
 800d5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d4:	f7f2 fe22 	bl	800021c <__adddf3>
 800d5d8:	a385      	add	r3, pc, #532	; (adr r3, 800d7f0 <__ieee754_rem_pio2+0x318>)
 800d5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5de:	4604      	mov	r4, r0
 800d5e0:	460d      	mov	r5, r1
 800d5e2:	f7f2 fe1b 	bl	800021c <__adddf3>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	e9ca 2300 	strd	r2, r3, [sl]
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	4629      	mov	r1, r5
 800d5f2:	f7f2 fe11 	bl	8000218 <__aeabi_dsub>
 800d5f6:	a37e      	add	r3, pc, #504	; (adr r3, 800d7f0 <__ieee754_rem_pio2+0x318>)
 800d5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fc:	e7e0      	b.n	800d5c0 <__ieee754_rem_pio2+0xe8>
 800d5fe:	4b87      	ldr	r3, [pc, #540]	; (800d81c <__ieee754_rem_pio2+0x344>)
 800d600:	4598      	cmp	r8, r3
 800d602:	f300 80d9 	bgt.w	800d7b8 <__ieee754_rem_pio2+0x2e0>
 800d606:	f000 feed 	bl	800e3e4 <fabs>
 800d60a:	ec55 4b10 	vmov	r4, r5, d0
 800d60e:	ee10 0a10 	vmov	r0, s0
 800d612:	a379      	add	r3, pc, #484	; (adr r3, 800d7f8 <__ieee754_rem_pio2+0x320>)
 800d614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d618:	4629      	mov	r1, r5
 800d61a:	f7f2 ffb5 	bl	8000588 <__aeabi_dmul>
 800d61e:	4b80      	ldr	r3, [pc, #512]	; (800d820 <__ieee754_rem_pio2+0x348>)
 800d620:	2200      	movs	r2, #0
 800d622:	f7f2 fdfb 	bl	800021c <__adddf3>
 800d626:	f7f3 fa5f 	bl	8000ae8 <__aeabi_d2iz>
 800d62a:	4683      	mov	fp, r0
 800d62c:	f7f2 ff42 	bl	80004b4 <__aeabi_i2d>
 800d630:	4602      	mov	r2, r0
 800d632:	460b      	mov	r3, r1
 800d634:	ec43 2b18 	vmov	d8, r2, r3
 800d638:	a367      	add	r3, pc, #412	; (adr r3, 800d7d8 <__ieee754_rem_pio2+0x300>)
 800d63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63e:	f7f2 ffa3 	bl	8000588 <__aeabi_dmul>
 800d642:	4602      	mov	r2, r0
 800d644:	460b      	mov	r3, r1
 800d646:	4620      	mov	r0, r4
 800d648:	4629      	mov	r1, r5
 800d64a:	f7f2 fde5 	bl	8000218 <__aeabi_dsub>
 800d64e:	a364      	add	r3, pc, #400	; (adr r3, 800d7e0 <__ieee754_rem_pio2+0x308>)
 800d650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d654:	4606      	mov	r6, r0
 800d656:	460f      	mov	r7, r1
 800d658:	ec51 0b18 	vmov	r0, r1, d8
 800d65c:	f7f2 ff94 	bl	8000588 <__aeabi_dmul>
 800d660:	f1bb 0f1f 	cmp.w	fp, #31
 800d664:	4604      	mov	r4, r0
 800d666:	460d      	mov	r5, r1
 800d668:	dc0d      	bgt.n	800d686 <__ieee754_rem_pio2+0x1ae>
 800d66a:	4b6e      	ldr	r3, [pc, #440]	; (800d824 <__ieee754_rem_pio2+0x34c>)
 800d66c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800d670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d674:	4543      	cmp	r3, r8
 800d676:	d006      	beq.n	800d686 <__ieee754_rem_pio2+0x1ae>
 800d678:	4622      	mov	r2, r4
 800d67a:	462b      	mov	r3, r5
 800d67c:	4630      	mov	r0, r6
 800d67e:	4639      	mov	r1, r7
 800d680:	f7f2 fdca 	bl	8000218 <__aeabi_dsub>
 800d684:	e00f      	b.n	800d6a6 <__ieee754_rem_pio2+0x1ce>
 800d686:	462b      	mov	r3, r5
 800d688:	4622      	mov	r2, r4
 800d68a:	4630      	mov	r0, r6
 800d68c:	4639      	mov	r1, r7
 800d68e:	f7f2 fdc3 	bl	8000218 <__aeabi_dsub>
 800d692:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d696:	9303      	str	r3, [sp, #12]
 800d698:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d69c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d6a0:	f1b8 0f10 	cmp.w	r8, #16
 800d6a4:	dc02      	bgt.n	800d6ac <__ieee754_rem_pio2+0x1d4>
 800d6a6:	e9ca 0100 	strd	r0, r1, [sl]
 800d6aa:	e039      	b.n	800d720 <__ieee754_rem_pio2+0x248>
 800d6ac:	a34e      	add	r3, pc, #312	; (adr r3, 800d7e8 <__ieee754_rem_pio2+0x310>)
 800d6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b2:	ec51 0b18 	vmov	r0, r1, d8
 800d6b6:	f7f2 ff67 	bl	8000588 <__aeabi_dmul>
 800d6ba:	4604      	mov	r4, r0
 800d6bc:	460d      	mov	r5, r1
 800d6be:	4602      	mov	r2, r0
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	4639      	mov	r1, r7
 800d6c6:	f7f2 fda7 	bl	8000218 <__aeabi_dsub>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	4680      	mov	r8, r0
 800d6d0:	4689      	mov	r9, r1
 800d6d2:	4630      	mov	r0, r6
 800d6d4:	4639      	mov	r1, r7
 800d6d6:	f7f2 fd9f 	bl	8000218 <__aeabi_dsub>
 800d6da:	4622      	mov	r2, r4
 800d6dc:	462b      	mov	r3, r5
 800d6de:	f7f2 fd9b 	bl	8000218 <__aeabi_dsub>
 800d6e2:	a343      	add	r3, pc, #268	; (adr r3, 800d7f0 <__ieee754_rem_pio2+0x318>)
 800d6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	460d      	mov	r5, r1
 800d6ec:	ec51 0b18 	vmov	r0, r1, d8
 800d6f0:	f7f2 ff4a 	bl	8000588 <__aeabi_dmul>
 800d6f4:	4622      	mov	r2, r4
 800d6f6:	462b      	mov	r3, r5
 800d6f8:	f7f2 fd8e 	bl	8000218 <__aeabi_dsub>
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	460b      	mov	r3, r1
 800d700:	4604      	mov	r4, r0
 800d702:	460d      	mov	r5, r1
 800d704:	4640      	mov	r0, r8
 800d706:	4649      	mov	r1, r9
 800d708:	f7f2 fd86 	bl	8000218 <__aeabi_dsub>
 800d70c:	9a03      	ldr	r2, [sp, #12]
 800d70e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d712:	1ad3      	subs	r3, r2, r3
 800d714:	2b31      	cmp	r3, #49	; 0x31
 800d716:	dc24      	bgt.n	800d762 <__ieee754_rem_pio2+0x28a>
 800d718:	e9ca 0100 	strd	r0, r1, [sl]
 800d71c:	4646      	mov	r6, r8
 800d71e:	464f      	mov	r7, r9
 800d720:	e9da 8900 	ldrd	r8, r9, [sl]
 800d724:	4630      	mov	r0, r6
 800d726:	4642      	mov	r2, r8
 800d728:	464b      	mov	r3, r9
 800d72a:	4639      	mov	r1, r7
 800d72c:	f7f2 fd74 	bl	8000218 <__aeabi_dsub>
 800d730:	462b      	mov	r3, r5
 800d732:	4622      	mov	r2, r4
 800d734:	f7f2 fd70 	bl	8000218 <__aeabi_dsub>
 800d738:	9b02      	ldr	r3, [sp, #8]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d740:	f6bf af0a 	bge.w	800d558 <__ieee754_rem_pio2+0x80>
 800d744:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d748:	f8ca 3004 	str.w	r3, [sl, #4]
 800d74c:	f8ca 8000 	str.w	r8, [sl]
 800d750:	f8ca 0008 	str.w	r0, [sl, #8]
 800d754:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d758:	f8ca 300c 	str.w	r3, [sl, #12]
 800d75c:	f1cb 0b00 	rsb	fp, fp, #0
 800d760:	e6fa      	b.n	800d558 <__ieee754_rem_pio2+0x80>
 800d762:	a327      	add	r3, pc, #156	; (adr r3, 800d800 <__ieee754_rem_pio2+0x328>)
 800d764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d768:	ec51 0b18 	vmov	r0, r1, d8
 800d76c:	f7f2 ff0c 	bl	8000588 <__aeabi_dmul>
 800d770:	4604      	mov	r4, r0
 800d772:	460d      	mov	r5, r1
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	4640      	mov	r0, r8
 800d77a:	4649      	mov	r1, r9
 800d77c:	f7f2 fd4c 	bl	8000218 <__aeabi_dsub>
 800d780:	4602      	mov	r2, r0
 800d782:	460b      	mov	r3, r1
 800d784:	4606      	mov	r6, r0
 800d786:	460f      	mov	r7, r1
 800d788:	4640      	mov	r0, r8
 800d78a:	4649      	mov	r1, r9
 800d78c:	f7f2 fd44 	bl	8000218 <__aeabi_dsub>
 800d790:	4622      	mov	r2, r4
 800d792:	462b      	mov	r3, r5
 800d794:	f7f2 fd40 	bl	8000218 <__aeabi_dsub>
 800d798:	a31b      	add	r3, pc, #108	; (adr r3, 800d808 <__ieee754_rem_pio2+0x330>)
 800d79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79e:	4604      	mov	r4, r0
 800d7a0:	460d      	mov	r5, r1
 800d7a2:	ec51 0b18 	vmov	r0, r1, d8
 800d7a6:	f7f2 feef 	bl	8000588 <__aeabi_dmul>
 800d7aa:	4622      	mov	r2, r4
 800d7ac:	462b      	mov	r3, r5
 800d7ae:	f7f2 fd33 	bl	8000218 <__aeabi_dsub>
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	460d      	mov	r5, r1
 800d7b6:	e75f      	b.n	800d678 <__ieee754_rem_pio2+0x1a0>
 800d7b8:	4b1b      	ldr	r3, [pc, #108]	; (800d828 <__ieee754_rem_pio2+0x350>)
 800d7ba:	4598      	cmp	r8, r3
 800d7bc:	dd36      	ble.n	800d82c <__ieee754_rem_pio2+0x354>
 800d7be:	ee10 2a10 	vmov	r2, s0
 800d7c2:	462b      	mov	r3, r5
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	4629      	mov	r1, r5
 800d7c8:	f7f2 fd26 	bl	8000218 <__aeabi_dsub>
 800d7cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d7d0:	e9ca 0100 	strd	r0, r1, [sl]
 800d7d4:	e694      	b.n	800d500 <__ieee754_rem_pio2+0x28>
 800d7d6:	bf00      	nop
 800d7d8:	54400000 	.word	0x54400000
 800d7dc:	3ff921fb 	.word	0x3ff921fb
 800d7e0:	1a626331 	.word	0x1a626331
 800d7e4:	3dd0b461 	.word	0x3dd0b461
 800d7e8:	1a600000 	.word	0x1a600000
 800d7ec:	3dd0b461 	.word	0x3dd0b461
 800d7f0:	2e037073 	.word	0x2e037073
 800d7f4:	3ba3198a 	.word	0x3ba3198a
 800d7f8:	6dc9c883 	.word	0x6dc9c883
 800d7fc:	3fe45f30 	.word	0x3fe45f30
 800d800:	2e000000 	.word	0x2e000000
 800d804:	3ba3198a 	.word	0x3ba3198a
 800d808:	252049c1 	.word	0x252049c1
 800d80c:	397b839a 	.word	0x397b839a
 800d810:	3fe921fb 	.word	0x3fe921fb
 800d814:	4002d97b 	.word	0x4002d97b
 800d818:	3ff921fb 	.word	0x3ff921fb
 800d81c:	413921fb 	.word	0x413921fb
 800d820:	3fe00000 	.word	0x3fe00000
 800d824:	0800e898 	.word	0x0800e898
 800d828:	7fefffff 	.word	0x7fefffff
 800d82c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d830:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d834:	ee10 0a10 	vmov	r0, s0
 800d838:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d83c:	ee10 6a10 	vmov	r6, s0
 800d840:	460f      	mov	r7, r1
 800d842:	f7f3 f951 	bl	8000ae8 <__aeabi_d2iz>
 800d846:	f7f2 fe35 	bl	80004b4 <__aeabi_i2d>
 800d84a:	4602      	mov	r2, r0
 800d84c:	460b      	mov	r3, r1
 800d84e:	4630      	mov	r0, r6
 800d850:	4639      	mov	r1, r7
 800d852:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d856:	f7f2 fcdf 	bl	8000218 <__aeabi_dsub>
 800d85a:	4b22      	ldr	r3, [pc, #136]	; (800d8e4 <__ieee754_rem_pio2+0x40c>)
 800d85c:	2200      	movs	r2, #0
 800d85e:	f7f2 fe93 	bl	8000588 <__aeabi_dmul>
 800d862:	460f      	mov	r7, r1
 800d864:	4606      	mov	r6, r0
 800d866:	f7f3 f93f 	bl	8000ae8 <__aeabi_d2iz>
 800d86a:	f7f2 fe23 	bl	80004b4 <__aeabi_i2d>
 800d86e:	4602      	mov	r2, r0
 800d870:	460b      	mov	r3, r1
 800d872:	4630      	mov	r0, r6
 800d874:	4639      	mov	r1, r7
 800d876:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d87a:	f7f2 fccd 	bl	8000218 <__aeabi_dsub>
 800d87e:	4b19      	ldr	r3, [pc, #100]	; (800d8e4 <__ieee754_rem_pio2+0x40c>)
 800d880:	2200      	movs	r2, #0
 800d882:	f7f2 fe81 	bl	8000588 <__aeabi_dmul>
 800d886:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d88a:	ad04      	add	r5, sp, #16
 800d88c:	f04f 0803 	mov.w	r8, #3
 800d890:	46a9      	mov	r9, r5
 800d892:	2600      	movs	r6, #0
 800d894:	2700      	movs	r7, #0
 800d896:	4632      	mov	r2, r6
 800d898:	463b      	mov	r3, r7
 800d89a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d89e:	46c3      	mov	fp, r8
 800d8a0:	3d08      	subs	r5, #8
 800d8a2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d8a6:	f7f3 f8d7 	bl	8000a58 <__aeabi_dcmpeq>
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	d1f3      	bne.n	800d896 <__ieee754_rem_pio2+0x3be>
 800d8ae:	4b0e      	ldr	r3, [pc, #56]	; (800d8e8 <__ieee754_rem_pio2+0x410>)
 800d8b0:	9301      	str	r3, [sp, #4]
 800d8b2:	2302      	movs	r3, #2
 800d8b4:	9300      	str	r3, [sp, #0]
 800d8b6:	4622      	mov	r2, r4
 800d8b8:	465b      	mov	r3, fp
 800d8ba:	4651      	mov	r1, sl
 800d8bc:	4648      	mov	r0, r9
 800d8be:	f000 f993 	bl	800dbe8 <__kernel_rem_pio2>
 800d8c2:	9b02      	ldr	r3, [sp, #8]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	4683      	mov	fp, r0
 800d8c8:	f6bf ae46 	bge.w	800d558 <__ieee754_rem_pio2+0x80>
 800d8cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d8d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d8d4:	f8ca 3004 	str.w	r3, [sl, #4]
 800d8d8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d8dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d8e0:	e73a      	b.n	800d758 <__ieee754_rem_pio2+0x280>
 800d8e2:	bf00      	nop
 800d8e4:	41700000 	.word	0x41700000
 800d8e8:	0800e918 	.word	0x0800e918

0800d8ec <__ieee754_sqrt>:
 800d8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f0:	ec55 4b10 	vmov	r4, r5, d0
 800d8f4:	4e56      	ldr	r6, [pc, #344]	; (800da50 <__ieee754_sqrt+0x164>)
 800d8f6:	43ae      	bics	r6, r5
 800d8f8:	ee10 0a10 	vmov	r0, s0
 800d8fc:	ee10 3a10 	vmov	r3, s0
 800d900:	4629      	mov	r1, r5
 800d902:	462a      	mov	r2, r5
 800d904:	d110      	bne.n	800d928 <__ieee754_sqrt+0x3c>
 800d906:	ee10 2a10 	vmov	r2, s0
 800d90a:	462b      	mov	r3, r5
 800d90c:	f7f2 fe3c 	bl	8000588 <__aeabi_dmul>
 800d910:	4602      	mov	r2, r0
 800d912:	460b      	mov	r3, r1
 800d914:	4620      	mov	r0, r4
 800d916:	4629      	mov	r1, r5
 800d918:	f7f2 fc80 	bl	800021c <__adddf3>
 800d91c:	4604      	mov	r4, r0
 800d91e:	460d      	mov	r5, r1
 800d920:	ec45 4b10 	vmov	d0, r4, r5
 800d924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d928:	2d00      	cmp	r5, #0
 800d92a:	dc10      	bgt.n	800d94e <__ieee754_sqrt+0x62>
 800d92c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d930:	4330      	orrs	r0, r6
 800d932:	d0f5      	beq.n	800d920 <__ieee754_sqrt+0x34>
 800d934:	b15d      	cbz	r5, 800d94e <__ieee754_sqrt+0x62>
 800d936:	ee10 2a10 	vmov	r2, s0
 800d93a:	462b      	mov	r3, r5
 800d93c:	ee10 0a10 	vmov	r0, s0
 800d940:	f7f2 fc6a 	bl	8000218 <__aeabi_dsub>
 800d944:	4602      	mov	r2, r0
 800d946:	460b      	mov	r3, r1
 800d948:	f7f2 ff48 	bl	80007dc <__aeabi_ddiv>
 800d94c:	e7e6      	b.n	800d91c <__ieee754_sqrt+0x30>
 800d94e:	1509      	asrs	r1, r1, #20
 800d950:	d076      	beq.n	800da40 <__ieee754_sqrt+0x154>
 800d952:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d956:	07ce      	lsls	r6, r1, #31
 800d958:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800d95c:	bf5e      	ittt	pl
 800d95e:	0fda      	lsrpl	r2, r3, #31
 800d960:	005b      	lslpl	r3, r3, #1
 800d962:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800d966:	0fda      	lsrs	r2, r3, #31
 800d968:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800d96c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800d970:	2000      	movs	r0, #0
 800d972:	106d      	asrs	r5, r5, #1
 800d974:	005b      	lsls	r3, r3, #1
 800d976:	f04f 0e16 	mov.w	lr, #22
 800d97a:	4684      	mov	ip, r0
 800d97c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d980:	eb0c 0401 	add.w	r4, ip, r1
 800d984:	4294      	cmp	r4, r2
 800d986:	bfde      	ittt	le
 800d988:	1b12      	suble	r2, r2, r4
 800d98a:	eb04 0c01 	addle.w	ip, r4, r1
 800d98e:	1840      	addle	r0, r0, r1
 800d990:	0052      	lsls	r2, r2, #1
 800d992:	f1be 0e01 	subs.w	lr, lr, #1
 800d996:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d99a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d99e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d9a2:	d1ed      	bne.n	800d980 <__ieee754_sqrt+0x94>
 800d9a4:	4671      	mov	r1, lr
 800d9a6:	2720      	movs	r7, #32
 800d9a8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d9ac:	4562      	cmp	r2, ip
 800d9ae:	eb04 060e 	add.w	r6, r4, lr
 800d9b2:	dc02      	bgt.n	800d9ba <__ieee754_sqrt+0xce>
 800d9b4:	d113      	bne.n	800d9de <__ieee754_sqrt+0xf2>
 800d9b6:	429e      	cmp	r6, r3
 800d9b8:	d811      	bhi.n	800d9de <__ieee754_sqrt+0xf2>
 800d9ba:	2e00      	cmp	r6, #0
 800d9bc:	eb06 0e04 	add.w	lr, r6, r4
 800d9c0:	da43      	bge.n	800da4a <__ieee754_sqrt+0x15e>
 800d9c2:	f1be 0f00 	cmp.w	lr, #0
 800d9c6:	db40      	blt.n	800da4a <__ieee754_sqrt+0x15e>
 800d9c8:	f10c 0801 	add.w	r8, ip, #1
 800d9cc:	eba2 020c 	sub.w	r2, r2, ip
 800d9d0:	429e      	cmp	r6, r3
 800d9d2:	bf88      	it	hi
 800d9d4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800d9d8:	1b9b      	subs	r3, r3, r6
 800d9da:	4421      	add	r1, r4
 800d9dc:	46c4      	mov	ip, r8
 800d9de:	0052      	lsls	r2, r2, #1
 800d9e0:	3f01      	subs	r7, #1
 800d9e2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d9e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d9ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d9ee:	d1dd      	bne.n	800d9ac <__ieee754_sqrt+0xc0>
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	d006      	beq.n	800da02 <__ieee754_sqrt+0x116>
 800d9f4:	1c4c      	adds	r4, r1, #1
 800d9f6:	bf13      	iteet	ne
 800d9f8:	3101      	addne	r1, #1
 800d9fa:	3001      	addeq	r0, #1
 800d9fc:	4639      	moveq	r1, r7
 800d9fe:	f021 0101 	bicne.w	r1, r1, #1
 800da02:	1043      	asrs	r3, r0, #1
 800da04:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800da08:	0849      	lsrs	r1, r1, #1
 800da0a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800da0e:	07c2      	lsls	r2, r0, #31
 800da10:	bf48      	it	mi
 800da12:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800da16:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800da1a:	460c      	mov	r4, r1
 800da1c:	463d      	mov	r5, r7
 800da1e:	e77f      	b.n	800d920 <__ieee754_sqrt+0x34>
 800da20:	0ada      	lsrs	r2, r3, #11
 800da22:	3815      	subs	r0, #21
 800da24:	055b      	lsls	r3, r3, #21
 800da26:	2a00      	cmp	r2, #0
 800da28:	d0fa      	beq.n	800da20 <__ieee754_sqrt+0x134>
 800da2a:	02d7      	lsls	r7, r2, #11
 800da2c:	d50a      	bpl.n	800da44 <__ieee754_sqrt+0x158>
 800da2e:	f1c1 0420 	rsb	r4, r1, #32
 800da32:	fa23 f404 	lsr.w	r4, r3, r4
 800da36:	1e4d      	subs	r5, r1, #1
 800da38:	408b      	lsls	r3, r1
 800da3a:	4322      	orrs	r2, r4
 800da3c:	1b41      	subs	r1, r0, r5
 800da3e:	e788      	b.n	800d952 <__ieee754_sqrt+0x66>
 800da40:	4608      	mov	r0, r1
 800da42:	e7f0      	b.n	800da26 <__ieee754_sqrt+0x13a>
 800da44:	0052      	lsls	r2, r2, #1
 800da46:	3101      	adds	r1, #1
 800da48:	e7ef      	b.n	800da2a <__ieee754_sqrt+0x13e>
 800da4a:	46e0      	mov	r8, ip
 800da4c:	e7be      	b.n	800d9cc <__ieee754_sqrt+0xe0>
 800da4e:	bf00      	nop
 800da50:	7ff00000 	.word	0x7ff00000
 800da54:	00000000 	.word	0x00000000

0800da58 <__kernel_cos>:
 800da58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5c:	ec57 6b10 	vmov	r6, r7, d0
 800da60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800da64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800da68:	ed8d 1b00 	vstr	d1, [sp]
 800da6c:	da07      	bge.n	800da7e <__kernel_cos+0x26>
 800da6e:	ee10 0a10 	vmov	r0, s0
 800da72:	4639      	mov	r1, r7
 800da74:	f7f3 f838 	bl	8000ae8 <__aeabi_d2iz>
 800da78:	2800      	cmp	r0, #0
 800da7a:	f000 8088 	beq.w	800db8e <__kernel_cos+0x136>
 800da7e:	4632      	mov	r2, r6
 800da80:	463b      	mov	r3, r7
 800da82:	4630      	mov	r0, r6
 800da84:	4639      	mov	r1, r7
 800da86:	f7f2 fd7f 	bl	8000588 <__aeabi_dmul>
 800da8a:	4b51      	ldr	r3, [pc, #324]	; (800dbd0 <__kernel_cos+0x178>)
 800da8c:	2200      	movs	r2, #0
 800da8e:	4604      	mov	r4, r0
 800da90:	460d      	mov	r5, r1
 800da92:	f7f2 fd79 	bl	8000588 <__aeabi_dmul>
 800da96:	a340      	add	r3, pc, #256	; (adr r3, 800db98 <__kernel_cos+0x140>)
 800da98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9c:	4682      	mov	sl, r0
 800da9e:	468b      	mov	fp, r1
 800daa0:	4620      	mov	r0, r4
 800daa2:	4629      	mov	r1, r5
 800daa4:	f7f2 fd70 	bl	8000588 <__aeabi_dmul>
 800daa8:	a33d      	add	r3, pc, #244	; (adr r3, 800dba0 <__kernel_cos+0x148>)
 800daaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daae:	f7f2 fbb5 	bl	800021c <__adddf3>
 800dab2:	4622      	mov	r2, r4
 800dab4:	462b      	mov	r3, r5
 800dab6:	f7f2 fd67 	bl	8000588 <__aeabi_dmul>
 800daba:	a33b      	add	r3, pc, #236	; (adr r3, 800dba8 <__kernel_cos+0x150>)
 800dabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac0:	f7f2 fbaa 	bl	8000218 <__aeabi_dsub>
 800dac4:	4622      	mov	r2, r4
 800dac6:	462b      	mov	r3, r5
 800dac8:	f7f2 fd5e 	bl	8000588 <__aeabi_dmul>
 800dacc:	a338      	add	r3, pc, #224	; (adr r3, 800dbb0 <__kernel_cos+0x158>)
 800dace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad2:	f7f2 fba3 	bl	800021c <__adddf3>
 800dad6:	4622      	mov	r2, r4
 800dad8:	462b      	mov	r3, r5
 800dada:	f7f2 fd55 	bl	8000588 <__aeabi_dmul>
 800dade:	a336      	add	r3, pc, #216	; (adr r3, 800dbb8 <__kernel_cos+0x160>)
 800dae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae4:	f7f2 fb98 	bl	8000218 <__aeabi_dsub>
 800dae8:	4622      	mov	r2, r4
 800daea:	462b      	mov	r3, r5
 800daec:	f7f2 fd4c 	bl	8000588 <__aeabi_dmul>
 800daf0:	a333      	add	r3, pc, #204	; (adr r3, 800dbc0 <__kernel_cos+0x168>)
 800daf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf6:	f7f2 fb91 	bl	800021c <__adddf3>
 800dafa:	4622      	mov	r2, r4
 800dafc:	462b      	mov	r3, r5
 800dafe:	f7f2 fd43 	bl	8000588 <__aeabi_dmul>
 800db02:	4622      	mov	r2, r4
 800db04:	462b      	mov	r3, r5
 800db06:	f7f2 fd3f 	bl	8000588 <__aeabi_dmul>
 800db0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db0e:	4604      	mov	r4, r0
 800db10:	460d      	mov	r5, r1
 800db12:	4630      	mov	r0, r6
 800db14:	4639      	mov	r1, r7
 800db16:	f7f2 fd37 	bl	8000588 <__aeabi_dmul>
 800db1a:	460b      	mov	r3, r1
 800db1c:	4602      	mov	r2, r0
 800db1e:	4629      	mov	r1, r5
 800db20:	4620      	mov	r0, r4
 800db22:	f7f2 fb79 	bl	8000218 <__aeabi_dsub>
 800db26:	4b2b      	ldr	r3, [pc, #172]	; (800dbd4 <__kernel_cos+0x17c>)
 800db28:	4598      	cmp	r8, r3
 800db2a:	4606      	mov	r6, r0
 800db2c:	460f      	mov	r7, r1
 800db2e:	dc10      	bgt.n	800db52 <__kernel_cos+0xfa>
 800db30:	4602      	mov	r2, r0
 800db32:	460b      	mov	r3, r1
 800db34:	4650      	mov	r0, sl
 800db36:	4659      	mov	r1, fp
 800db38:	f7f2 fb6e 	bl	8000218 <__aeabi_dsub>
 800db3c:	460b      	mov	r3, r1
 800db3e:	4926      	ldr	r1, [pc, #152]	; (800dbd8 <__kernel_cos+0x180>)
 800db40:	4602      	mov	r2, r0
 800db42:	2000      	movs	r0, #0
 800db44:	f7f2 fb68 	bl	8000218 <__aeabi_dsub>
 800db48:	ec41 0b10 	vmov	d0, r0, r1
 800db4c:	b003      	add	sp, #12
 800db4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db52:	4b22      	ldr	r3, [pc, #136]	; (800dbdc <__kernel_cos+0x184>)
 800db54:	4920      	ldr	r1, [pc, #128]	; (800dbd8 <__kernel_cos+0x180>)
 800db56:	4598      	cmp	r8, r3
 800db58:	bfcc      	ite	gt
 800db5a:	4d21      	ldrgt	r5, [pc, #132]	; (800dbe0 <__kernel_cos+0x188>)
 800db5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800db60:	2400      	movs	r4, #0
 800db62:	4622      	mov	r2, r4
 800db64:	462b      	mov	r3, r5
 800db66:	2000      	movs	r0, #0
 800db68:	f7f2 fb56 	bl	8000218 <__aeabi_dsub>
 800db6c:	4622      	mov	r2, r4
 800db6e:	4680      	mov	r8, r0
 800db70:	4689      	mov	r9, r1
 800db72:	462b      	mov	r3, r5
 800db74:	4650      	mov	r0, sl
 800db76:	4659      	mov	r1, fp
 800db78:	f7f2 fb4e 	bl	8000218 <__aeabi_dsub>
 800db7c:	4632      	mov	r2, r6
 800db7e:	463b      	mov	r3, r7
 800db80:	f7f2 fb4a 	bl	8000218 <__aeabi_dsub>
 800db84:	4602      	mov	r2, r0
 800db86:	460b      	mov	r3, r1
 800db88:	4640      	mov	r0, r8
 800db8a:	4649      	mov	r1, r9
 800db8c:	e7da      	b.n	800db44 <__kernel_cos+0xec>
 800db8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800dbc8 <__kernel_cos+0x170>
 800db92:	e7db      	b.n	800db4c <__kernel_cos+0xf4>
 800db94:	f3af 8000 	nop.w
 800db98:	be8838d4 	.word	0xbe8838d4
 800db9c:	bda8fae9 	.word	0xbda8fae9
 800dba0:	bdb4b1c4 	.word	0xbdb4b1c4
 800dba4:	3e21ee9e 	.word	0x3e21ee9e
 800dba8:	809c52ad 	.word	0x809c52ad
 800dbac:	3e927e4f 	.word	0x3e927e4f
 800dbb0:	19cb1590 	.word	0x19cb1590
 800dbb4:	3efa01a0 	.word	0x3efa01a0
 800dbb8:	16c15177 	.word	0x16c15177
 800dbbc:	3f56c16c 	.word	0x3f56c16c
 800dbc0:	5555554c 	.word	0x5555554c
 800dbc4:	3fa55555 	.word	0x3fa55555
 800dbc8:	00000000 	.word	0x00000000
 800dbcc:	3ff00000 	.word	0x3ff00000
 800dbd0:	3fe00000 	.word	0x3fe00000
 800dbd4:	3fd33332 	.word	0x3fd33332
 800dbd8:	3ff00000 	.word	0x3ff00000
 800dbdc:	3fe90000 	.word	0x3fe90000
 800dbe0:	3fd20000 	.word	0x3fd20000
 800dbe4:	00000000 	.word	0x00000000

0800dbe8 <__kernel_rem_pio2>:
 800dbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbec:	ed2d 8b02 	vpush	{d8}
 800dbf0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800dbf4:	f112 0f14 	cmn.w	r2, #20
 800dbf8:	9308      	str	r3, [sp, #32]
 800dbfa:	9101      	str	r1, [sp, #4]
 800dbfc:	4bc6      	ldr	r3, [pc, #792]	; (800df18 <__kernel_rem_pio2+0x330>)
 800dbfe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800dc00:	9009      	str	r0, [sp, #36]	; 0x24
 800dc02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc06:	9304      	str	r3, [sp, #16]
 800dc08:	9b08      	ldr	r3, [sp, #32]
 800dc0a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800dc0e:	bfa8      	it	ge
 800dc10:	1ed4      	subge	r4, r2, #3
 800dc12:	9306      	str	r3, [sp, #24]
 800dc14:	bfb2      	itee	lt
 800dc16:	2400      	movlt	r4, #0
 800dc18:	2318      	movge	r3, #24
 800dc1a:	fb94 f4f3 	sdivge	r4, r4, r3
 800dc1e:	f06f 0317 	mvn.w	r3, #23
 800dc22:	fb04 3303 	mla	r3, r4, r3, r3
 800dc26:	eb03 0a02 	add.w	sl, r3, r2
 800dc2a:	9b04      	ldr	r3, [sp, #16]
 800dc2c:	9a06      	ldr	r2, [sp, #24]
 800dc2e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800df08 <__kernel_rem_pio2+0x320>
 800dc32:	eb03 0802 	add.w	r8, r3, r2
 800dc36:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800dc38:	1aa7      	subs	r7, r4, r2
 800dc3a:	ae20      	add	r6, sp, #128	; 0x80
 800dc3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800dc40:	2500      	movs	r5, #0
 800dc42:	4545      	cmp	r5, r8
 800dc44:	dd18      	ble.n	800dc78 <__kernel_rem_pio2+0x90>
 800dc46:	9b08      	ldr	r3, [sp, #32]
 800dc48:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800dc4c:	aa20      	add	r2, sp, #128	; 0x80
 800dc4e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800df08 <__kernel_rem_pio2+0x320>
 800dc52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800dc56:	f1c3 0301 	rsb	r3, r3, #1
 800dc5a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800dc5e:	9307      	str	r3, [sp, #28]
 800dc60:	9b07      	ldr	r3, [sp, #28]
 800dc62:	9a04      	ldr	r2, [sp, #16]
 800dc64:	4443      	add	r3, r8
 800dc66:	429a      	cmp	r2, r3
 800dc68:	db2f      	blt.n	800dcca <__kernel_rem_pio2+0xe2>
 800dc6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dc6e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dc72:	462f      	mov	r7, r5
 800dc74:	2600      	movs	r6, #0
 800dc76:	e01b      	b.n	800dcb0 <__kernel_rem_pio2+0xc8>
 800dc78:	42ef      	cmn	r7, r5
 800dc7a:	d407      	bmi.n	800dc8c <__kernel_rem_pio2+0xa4>
 800dc7c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dc80:	f7f2 fc18 	bl	80004b4 <__aeabi_i2d>
 800dc84:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dc88:	3501      	adds	r5, #1
 800dc8a:	e7da      	b.n	800dc42 <__kernel_rem_pio2+0x5a>
 800dc8c:	ec51 0b18 	vmov	r0, r1, d8
 800dc90:	e7f8      	b.n	800dc84 <__kernel_rem_pio2+0x9c>
 800dc92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc96:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dc9a:	f7f2 fc75 	bl	8000588 <__aeabi_dmul>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	460b      	mov	r3, r1
 800dca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dca6:	f7f2 fab9 	bl	800021c <__adddf3>
 800dcaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcae:	3601      	adds	r6, #1
 800dcb0:	9b06      	ldr	r3, [sp, #24]
 800dcb2:	429e      	cmp	r6, r3
 800dcb4:	f1a7 0708 	sub.w	r7, r7, #8
 800dcb8:	ddeb      	ble.n	800dc92 <__kernel_rem_pio2+0xaa>
 800dcba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dcbe:	3508      	adds	r5, #8
 800dcc0:	ecab 7b02 	vstmia	fp!, {d7}
 800dcc4:	f108 0801 	add.w	r8, r8, #1
 800dcc8:	e7ca      	b.n	800dc60 <__kernel_rem_pio2+0x78>
 800dcca:	9b04      	ldr	r3, [sp, #16]
 800dccc:	aa0c      	add	r2, sp, #48	; 0x30
 800dcce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dcd2:	930b      	str	r3, [sp, #44]	; 0x2c
 800dcd4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800dcd6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dcda:	9c04      	ldr	r4, [sp, #16]
 800dcdc:	930a      	str	r3, [sp, #40]	; 0x28
 800dcde:	ab98      	add	r3, sp, #608	; 0x260
 800dce0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dce4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800dce8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800dcec:	f8cd b008 	str.w	fp, [sp, #8]
 800dcf0:	4625      	mov	r5, r4
 800dcf2:	2d00      	cmp	r5, #0
 800dcf4:	dc78      	bgt.n	800dde8 <__kernel_rem_pio2+0x200>
 800dcf6:	ec47 6b10 	vmov	d0, r6, r7
 800dcfa:	4650      	mov	r0, sl
 800dcfc:	f000 fc9c 	bl	800e638 <scalbn>
 800dd00:	ec57 6b10 	vmov	r6, r7, d0
 800dd04:	2200      	movs	r2, #0
 800dd06:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800dd0a:	ee10 0a10 	vmov	r0, s0
 800dd0e:	4639      	mov	r1, r7
 800dd10:	f7f2 fc3a 	bl	8000588 <__aeabi_dmul>
 800dd14:	ec41 0b10 	vmov	d0, r0, r1
 800dd18:	f000 fb7a 	bl	800e410 <floor>
 800dd1c:	4b7f      	ldr	r3, [pc, #508]	; (800df1c <__kernel_rem_pio2+0x334>)
 800dd1e:	ec51 0b10 	vmov	r0, r1, d0
 800dd22:	2200      	movs	r2, #0
 800dd24:	f7f2 fc30 	bl	8000588 <__aeabi_dmul>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	4630      	mov	r0, r6
 800dd2e:	4639      	mov	r1, r7
 800dd30:	f7f2 fa72 	bl	8000218 <__aeabi_dsub>
 800dd34:	460f      	mov	r7, r1
 800dd36:	4606      	mov	r6, r0
 800dd38:	f7f2 fed6 	bl	8000ae8 <__aeabi_d2iz>
 800dd3c:	9007      	str	r0, [sp, #28]
 800dd3e:	f7f2 fbb9 	bl	80004b4 <__aeabi_i2d>
 800dd42:	4602      	mov	r2, r0
 800dd44:	460b      	mov	r3, r1
 800dd46:	4630      	mov	r0, r6
 800dd48:	4639      	mov	r1, r7
 800dd4a:	f7f2 fa65 	bl	8000218 <__aeabi_dsub>
 800dd4e:	f1ba 0f00 	cmp.w	sl, #0
 800dd52:	4606      	mov	r6, r0
 800dd54:	460f      	mov	r7, r1
 800dd56:	dd70      	ble.n	800de3a <__kernel_rem_pio2+0x252>
 800dd58:	1e62      	subs	r2, r4, #1
 800dd5a:	ab0c      	add	r3, sp, #48	; 0x30
 800dd5c:	9d07      	ldr	r5, [sp, #28]
 800dd5e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dd62:	f1ca 0118 	rsb	r1, sl, #24
 800dd66:	fa40 f301 	asr.w	r3, r0, r1
 800dd6a:	441d      	add	r5, r3
 800dd6c:	408b      	lsls	r3, r1
 800dd6e:	1ac0      	subs	r0, r0, r3
 800dd70:	ab0c      	add	r3, sp, #48	; 0x30
 800dd72:	9507      	str	r5, [sp, #28]
 800dd74:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800dd78:	f1ca 0317 	rsb	r3, sl, #23
 800dd7c:	fa40 f303 	asr.w	r3, r0, r3
 800dd80:	9302      	str	r3, [sp, #8]
 800dd82:	9b02      	ldr	r3, [sp, #8]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	dd66      	ble.n	800de56 <__kernel_rem_pio2+0x26e>
 800dd88:	9b07      	ldr	r3, [sp, #28]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	9307      	str	r3, [sp, #28]
 800dd90:	4615      	mov	r5, r2
 800dd92:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800dd96:	4294      	cmp	r4, r2
 800dd98:	f300 8099 	bgt.w	800dece <__kernel_rem_pio2+0x2e6>
 800dd9c:	f1ba 0f00 	cmp.w	sl, #0
 800dda0:	dd07      	ble.n	800ddb2 <__kernel_rem_pio2+0x1ca>
 800dda2:	f1ba 0f01 	cmp.w	sl, #1
 800dda6:	f000 80a5 	beq.w	800def4 <__kernel_rem_pio2+0x30c>
 800ddaa:	f1ba 0f02 	cmp.w	sl, #2
 800ddae:	f000 80c1 	beq.w	800df34 <__kernel_rem_pio2+0x34c>
 800ddb2:	9b02      	ldr	r3, [sp, #8]
 800ddb4:	2b02      	cmp	r3, #2
 800ddb6:	d14e      	bne.n	800de56 <__kernel_rem_pio2+0x26e>
 800ddb8:	4632      	mov	r2, r6
 800ddba:	463b      	mov	r3, r7
 800ddbc:	4958      	ldr	r1, [pc, #352]	; (800df20 <__kernel_rem_pio2+0x338>)
 800ddbe:	2000      	movs	r0, #0
 800ddc0:	f7f2 fa2a 	bl	8000218 <__aeabi_dsub>
 800ddc4:	4606      	mov	r6, r0
 800ddc6:	460f      	mov	r7, r1
 800ddc8:	2d00      	cmp	r5, #0
 800ddca:	d044      	beq.n	800de56 <__kernel_rem_pio2+0x26e>
 800ddcc:	4650      	mov	r0, sl
 800ddce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800df10 <__kernel_rem_pio2+0x328>
 800ddd2:	f000 fc31 	bl	800e638 <scalbn>
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	4639      	mov	r1, r7
 800ddda:	ec53 2b10 	vmov	r2, r3, d0
 800ddde:	f7f2 fa1b 	bl	8000218 <__aeabi_dsub>
 800dde2:	4606      	mov	r6, r0
 800dde4:	460f      	mov	r7, r1
 800dde6:	e036      	b.n	800de56 <__kernel_rem_pio2+0x26e>
 800dde8:	4b4e      	ldr	r3, [pc, #312]	; (800df24 <__kernel_rem_pio2+0x33c>)
 800ddea:	2200      	movs	r2, #0
 800ddec:	4630      	mov	r0, r6
 800ddee:	4639      	mov	r1, r7
 800ddf0:	f7f2 fbca 	bl	8000588 <__aeabi_dmul>
 800ddf4:	f7f2 fe78 	bl	8000ae8 <__aeabi_d2iz>
 800ddf8:	f7f2 fb5c 	bl	80004b4 <__aeabi_i2d>
 800ddfc:	4b4a      	ldr	r3, [pc, #296]	; (800df28 <__kernel_rem_pio2+0x340>)
 800ddfe:	2200      	movs	r2, #0
 800de00:	4680      	mov	r8, r0
 800de02:	4689      	mov	r9, r1
 800de04:	f7f2 fbc0 	bl	8000588 <__aeabi_dmul>
 800de08:	4602      	mov	r2, r0
 800de0a:	460b      	mov	r3, r1
 800de0c:	4630      	mov	r0, r6
 800de0e:	4639      	mov	r1, r7
 800de10:	f7f2 fa02 	bl	8000218 <__aeabi_dsub>
 800de14:	f7f2 fe68 	bl	8000ae8 <__aeabi_d2iz>
 800de18:	9b02      	ldr	r3, [sp, #8]
 800de1a:	f843 0b04 	str.w	r0, [r3], #4
 800de1e:	3d01      	subs	r5, #1
 800de20:	9302      	str	r3, [sp, #8]
 800de22:	ab70      	add	r3, sp, #448	; 0x1c0
 800de24:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800de28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2c:	4640      	mov	r0, r8
 800de2e:	4649      	mov	r1, r9
 800de30:	f7f2 f9f4 	bl	800021c <__adddf3>
 800de34:	4606      	mov	r6, r0
 800de36:	460f      	mov	r7, r1
 800de38:	e75b      	b.n	800dcf2 <__kernel_rem_pio2+0x10a>
 800de3a:	d105      	bne.n	800de48 <__kernel_rem_pio2+0x260>
 800de3c:	1e63      	subs	r3, r4, #1
 800de3e:	aa0c      	add	r2, sp, #48	; 0x30
 800de40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800de44:	15c3      	asrs	r3, r0, #23
 800de46:	e79b      	b.n	800dd80 <__kernel_rem_pio2+0x198>
 800de48:	4b38      	ldr	r3, [pc, #224]	; (800df2c <__kernel_rem_pio2+0x344>)
 800de4a:	2200      	movs	r2, #0
 800de4c:	f7f2 fe22 	bl	8000a94 <__aeabi_dcmpge>
 800de50:	2800      	cmp	r0, #0
 800de52:	d139      	bne.n	800dec8 <__kernel_rem_pio2+0x2e0>
 800de54:	9002      	str	r0, [sp, #8]
 800de56:	2200      	movs	r2, #0
 800de58:	2300      	movs	r3, #0
 800de5a:	4630      	mov	r0, r6
 800de5c:	4639      	mov	r1, r7
 800de5e:	f7f2 fdfb 	bl	8000a58 <__aeabi_dcmpeq>
 800de62:	2800      	cmp	r0, #0
 800de64:	f000 80b4 	beq.w	800dfd0 <__kernel_rem_pio2+0x3e8>
 800de68:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800de6c:	465b      	mov	r3, fp
 800de6e:	2200      	movs	r2, #0
 800de70:	9904      	ldr	r1, [sp, #16]
 800de72:	428b      	cmp	r3, r1
 800de74:	da65      	bge.n	800df42 <__kernel_rem_pio2+0x35a>
 800de76:	2a00      	cmp	r2, #0
 800de78:	d07b      	beq.n	800df72 <__kernel_rem_pio2+0x38a>
 800de7a:	ab0c      	add	r3, sp, #48	; 0x30
 800de7c:	f1aa 0a18 	sub.w	sl, sl, #24
 800de80:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800de84:	2b00      	cmp	r3, #0
 800de86:	f000 80a0 	beq.w	800dfca <__kernel_rem_pio2+0x3e2>
 800de8a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800df10 <__kernel_rem_pio2+0x328>
 800de8e:	4650      	mov	r0, sl
 800de90:	f000 fbd2 	bl	800e638 <scalbn>
 800de94:	4f23      	ldr	r7, [pc, #140]	; (800df24 <__kernel_rem_pio2+0x33c>)
 800de96:	ec55 4b10 	vmov	r4, r5, d0
 800de9a:	46d8      	mov	r8, fp
 800de9c:	2600      	movs	r6, #0
 800de9e:	f1b8 0f00 	cmp.w	r8, #0
 800dea2:	f280 80cf 	bge.w	800e044 <__kernel_rem_pio2+0x45c>
 800dea6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800df08 <__kernel_rem_pio2+0x320>
 800deaa:	465f      	mov	r7, fp
 800deac:	f04f 0800 	mov.w	r8, #0
 800deb0:	2f00      	cmp	r7, #0
 800deb2:	f2c0 80fd 	blt.w	800e0b0 <__kernel_rem_pio2+0x4c8>
 800deb6:	ab70      	add	r3, sp, #448	; 0x1c0
 800deb8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800df30 <__kernel_rem_pio2+0x348>
 800debc:	ec55 4b18 	vmov	r4, r5, d8
 800dec0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800dec4:	2600      	movs	r6, #0
 800dec6:	e0e5      	b.n	800e094 <__kernel_rem_pio2+0x4ac>
 800dec8:	2302      	movs	r3, #2
 800deca:	9302      	str	r3, [sp, #8]
 800decc:	e75c      	b.n	800dd88 <__kernel_rem_pio2+0x1a0>
 800dece:	f8db 3000 	ldr.w	r3, [fp]
 800ded2:	b955      	cbnz	r5, 800deea <__kernel_rem_pio2+0x302>
 800ded4:	b123      	cbz	r3, 800dee0 <__kernel_rem_pio2+0x2f8>
 800ded6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800deda:	f8cb 3000 	str.w	r3, [fp]
 800dede:	2301      	movs	r3, #1
 800dee0:	3201      	adds	r2, #1
 800dee2:	f10b 0b04 	add.w	fp, fp, #4
 800dee6:	461d      	mov	r5, r3
 800dee8:	e755      	b.n	800dd96 <__kernel_rem_pio2+0x1ae>
 800deea:	1acb      	subs	r3, r1, r3
 800deec:	f8cb 3000 	str.w	r3, [fp]
 800def0:	462b      	mov	r3, r5
 800def2:	e7f5      	b.n	800dee0 <__kernel_rem_pio2+0x2f8>
 800def4:	1e62      	subs	r2, r4, #1
 800def6:	ab0c      	add	r3, sp, #48	; 0x30
 800def8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800defc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800df00:	a90c      	add	r1, sp, #48	; 0x30
 800df02:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800df06:	e754      	b.n	800ddb2 <__kernel_rem_pio2+0x1ca>
	...
 800df14:	3ff00000 	.word	0x3ff00000
 800df18:	0800ea60 	.word	0x0800ea60
 800df1c:	40200000 	.word	0x40200000
 800df20:	3ff00000 	.word	0x3ff00000
 800df24:	3e700000 	.word	0x3e700000
 800df28:	41700000 	.word	0x41700000
 800df2c:	3fe00000 	.word	0x3fe00000
 800df30:	0800ea20 	.word	0x0800ea20
 800df34:	1e62      	subs	r2, r4, #1
 800df36:	ab0c      	add	r3, sp, #48	; 0x30
 800df38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df3c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800df40:	e7de      	b.n	800df00 <__kernel_rem_pio2+0x318>
 800df42:	a90c      	add	r1, sp, #48	; 0x30
 800df44:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800df48:	3b01      	subs	r3, #1
 800df4a:	430a      	orrs	r2, r1
 800df4c:	e790      	b.n	800de70 <__kernel_rem_pio2+0x288>
 800df4e:	3301      	adds	r3, #1
 800df50:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800df54:	2900      	cmp	r1, #0
 800df56:	d0fa      	beq.n	800df4e <__kernel_rem_pio2+0x366>
 800df58:	9a08      	ldr	r2, [sp, #32]
 800df5a:	18e3      	adds	r3, r4, r3
 800df5c:	18a6      	adds	r6, r4, r2
 800df5e:	aa20      	add	r2, sp, #128	; 0x80
 800df60:	1c65      	adds	r5, r4, #1
 800df62:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800df66:	9302      	str	r3, [sp, #8]
 800df68:	9b02      	ldr	r3, [sp, #8]
 800df6a:	42ab      	cmp	r3, r5
 800df6c:	da04      	bge.n	800df78 <__kernel_rem_pio2+0x390>
 800df6e:	461c      	mov	r4, r3
 800df70:	e6b5      	b.n	800dcde <__kernel_rem_pio2+0xf6>
 800df72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df74:	2301      	movs	r3, #1
 800df76:	e7eb      	b.n	800df50 <__kernel_rem_pio2+0x368>
 800df78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df7e:	f7f2 fa99 	bl	80004b4 <__aeabi_i2d>
 800df82:	e8e6 0102 	strd	r0, r1, [r6], #8
 800df86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df88:	46b3      	mov	fp, r6
 800df8a:	461c      	mov	r4, r3
 800df8c:	2700      	movs	r7, #0
 800df8e:	f04f 0800 	mov.w	r8, #0
 800df92:	f04f 0900 	mov.w	r9, #0
 800df96:	9b06      	ldr	r3, [sp, #24]
 800df98:	429f      	cmp	r7, r3
 800df9a:	dd06      	ble.n	800dfaa <__kernel_rem_pio2+0x3c2>
 800df9c:	ab70      	add	r3, sp, #448	; 0x1c0
 800df9e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dfa2:	e9c3 8900 	strd	r8, r9, [r3]
 800dfa6:	3501      	adds	r5, #1
 800dfa8:	e7de      	b.n	800df68 <__kernel_rem_pio2+0x380>
 800dfaa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800dfae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800dfb2:	f7f2 fae9 	bl	8000588 <__aeabi_dmul>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	460b      	mov	r3, r1
 800dfba:	4640      	mov	r0, r8
 800dfbc:	4649      	mov	r1, r9
 800dfbe:	f7f2 f92d 	bl	800021c <__adddf3>
 800dfc2:	3701      	adds	r7, #1
 800dfc4:	4680      	mov	r8, r0
 800dfc6:	4689      	mov	r9, r1
 800dfc8:	e7e5      	b.n	800df96 <__kernel_rem_pio2+0x3ae>
 800dfca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dfce:	e754      	b.n	800de7a <__kernel_rem_pio2+0x292>
 800dfd0:	ec47 6b10 	vmov	d0, r6, r7
 800dfd4:	f1ca 0000 	rsb	r0, sl, #0
 800dfd8:	f000 fb2e 	bl	800e638 <scalbn>
 800dfdc:	ec57 6b10 	vmov	r6, r7, d0
 800dfe0:	4b9f      	ldr	r3, [pc, #636]	; (800e260 <__kernel_rem_pio2+0x678>)
 800dfe2:	ee10 0a10 	vmov	r0, s0
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	4639      	mov	r1, r7
 800dfea:	f7f2 fd53 	bl	8000a94 <__aeabi_dcmpge>
 800dfee:	b300      	cbz	r0, 800e032 <__kernel_rem_pio2+0x44a>
 800dff0:	4b9c      	ldr	r3, [pc, #624]	; (800e264 <__kernel_rem_pio2+0x67c>)
 800dff2:	2200      	movs	r2, #0
 800dff4:	4630      	mov	r0, r6
 800dff6:	4639      	mov	r1, r7
 800dff8:	f7f2 fac6 	bl	8000588 <__aeabi_dmul>
 800dffc:	f7f2 fd74 	bl	8000ae8 <__aeabi_d2iz>
 800e000:	4605      	mov	r5, r0
 800e002:	f7f2 fa57 	bl	80004b4 <__aeabi_i2d>
 800e006:	4b96      	ldr	r3, [pc, #600]	; (800e260 <__kernel_rem_pio2+0x678>)
 800e008:	2200      	movs	r2, #0
 800e00a:	f7f2 fabd 	bl	8000588 <__aeabi_dmul>
 800e00e:	460b      	mov	r3, r1
 800e010:	4602      	mov	r2, r0
 800e012:	4639      	mov	r1, r7
 800e014:	4630      	mov	r0, r6
 800e016:	f7f2 f8ff 	bl	8000218 <__aeabi_dsub>
 800e01a:	f7f2 fd65 	bl	8000ae8 <__aeabi_d2iz>
 800e01e:	f104 0b01 	add.w	fp, r4, #1
 800e022:	ab0c      	add	r3, sp, #48	; 0x30
 800e024:	f10a 0a18 	add.w	sl, sl, #24
 800e028:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e02c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800e030:	e72b      	b.n	800de8a <__kernel_rem_pio2+0x2a2>
 800e032:	4630      	mov	r0, r6
 800e034:	4639      	mov	r1, r7
 800e036:	f7f2 fd57 	bl	8000ae8 <__aeabi_d2iz>
 800e03a:	ab0c      	add	r3, sp, #48	; 0x30
 800e03c:	46a3      	mov	fp, r4
 800e03e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e042:	e722      	b.n	800de8a <__kernel_rem_pio2+0x2a2>
 800e044:	ab70      	add	r3, sp, #448	; 0x1c0
 800e046:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800e04a:	ab0c      	add	r3, sp, #48	; 0x30
 800e04c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e050:	f7f2 fa30 	bl	80004b4 <__aeabi_i2d>
 800e054:	4622      	mov	r2, r4
 800e056:	462b      	mov	r3, r5
 800e058:	f7f2 fa96 	bl	8000588 <__aeabi_dmul>
 800e05c:	4632      	mov	r2, r6
 800e05e:	e9c9 0100 	strd	r0, r1, [r9]
 800e062:	463b      	mov	r3, r7
 800e064:	4620      	mov	r0, r4
 800e066:	4629      	mov	r1, r5
 800e068:	f7f2 fa8e 	bl	8000588 <__aeabi_dmul>
 800e06c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e070:	4604      	mov	r4, r0
 800e072:	460d      	mov	r5, r1
 800e074:	e713      	b.n	800de9e <__kernel_rem_pio2+0x2b6>
 800e076:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e07a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e07e:	f7f2 fa83 	bl	8000588 <__aeabi_dmul>
 800e082:	4602      	mov	r2, r0
 800e084:	460b      	mov	r3, r1
 800e086:	4620      	mov	r0, r4
 800e088:	4629      	mov	r1, r5
 800e08a:	f7f2 f8c7 	bl	800021c <__adddf3>
 800e08e:	3601      	adds	r6, #1
 800e090:	4604      	mov	r4, r0
 800e092:	460d      	mov	r5, r1
 800e094:	9b04      	ldr	r3, [sp, #16]
 800e096:	429e      	cmp	r6, r3
 800e098:	dc01      	bgt.n	800e09e <__kernel_rem_pio2+0x4b6>
 800e09a:	45b0      	cmp	r8, r6
 800e09c:	daeb      	bge.n	800e076 <__kernel_rem_pio2+0x48e>
 800e09e:	ab48      	add	r3, sp, #288	; 0x120
 800e0a0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e0a4:	e9c3 4500 	strd	r4, r5, [r3]
 800e0a8:	3f01      	subs	r7, #1
 800e0aa:	f108 0801 	add.w	r8, r8, #1
 800e0ae:	e6ff      	b.n	800deb0 <__kernel_rem_pio2+0x2c8>
 800e0b0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e0b2:	2b02      	cmp	r3, #2
 800e0b4:	dc0b      	bgt.n	800e0ce <__kernel_rem_pio2+0x4e6>
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	dc6e      	bgt.n	800e198 <__kernel_rem_pio2+0x5b0>
 800e0ba:	d045      	beq.n	800e148 <__kernel_rem_pio2+0x560>
 800e0bc:	9b07      	ldr	r3, [sp, #28]
 800e0be:	f003 0007 	and.w	r0, r3, #7
 800e0c2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e0c6:	ecbd 8b02 	vpop	{d8}
 800e0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e0d0:	2b03      	cmp	r3, #3
 800e0d2:	d1f3      	bne.n	800e0bc <__kernel_rem_pio2+0x4d4>
 800e0d4:	ab48      	add	r3, sp, #288	; 0x120
 800e0d6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800e0da:	46d0      	mov	r8, sl
 800e0dc:	46d9      	mov	r9, fp
 800e0de:	f1b9 0f00 	cmp.w	r9, #0
 800e0e2:	f1a8 0808 	sub.w	r8, r8, #8
 800e0e6:	dc64      	bgt.n	800e1b2 <__kernel_rem_pio2+0x5ca>
 800e0e8:	465c      	mov	r4, fp
 800e0ea:	2c01      	cmp	r4, #1
 800e0ec:	f1aa 0a08 	sub.w	sl, sl, #8
 800e0f0:	dc7e      	bgt.n	800e1f0 <__kernel_rem_pio2+0x608>
 800e0f2:	2000      	movs	r0, #0
 800e0f4:	2100      	movs	r1, #0
 800e0f6:	f1bb 0f01 	cmp.w	fp, #1
 800e0fa:	f300 8097 	bgt.w	800e22c <__kernel_rem_pio2+0x644>
 800e0fe:	9b02      	ldr	r3, [sp, #8]
 800e100:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800e104:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800e108:	2b00      	cmp	r3, #0
 800e10a:	f040 8099 	bne.w	800e240 <__kernel_rem_pio2+0x658>
 800e10e:	9b01      	ldr	r3, [sp, #4]
 800e110:	e9c3 5600 	strd	r5, r6, [r3]
 800e114:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e118:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e11c:	e7ce      	b.n	800e0bc <__kernel_rem_pio2+0x4d4>
 800e11e:	ab48      	add	r3, sp, #288	; 0x120
 800e120:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e128:	f7f2 f878 	bl	800021c <__adddf3>
 800e12c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e130:	f1bb 0f00 	cmp.w	fp, #0
 800e134:	daf3      	bge.n	800e11e <__kernel_rem_pio2+0x536>
 800e136:	9b02      	ldr	r3, [sp, #8]
 800e138:	b113      	cbz	r3, 800e140 <__kernel_rem_pio2+0x558>
 800e13a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e13e:	4619      	mov	r1, r3
 800e140:	9b01      	ldr	r3, [sp, #4]
 800e142:	e9c3 0100 	strd	r0, r1, [r3]
 800e146:	e7b9      	b.n	800e0bc <__kernel_rem_pio2+0x4d4>
 800e148:	2000      	movs	r0, #0
 800e14a:	2100      	movs	r1, #0
 800e14c:	e7f0      	b.n	800e130 <__kernel_rem_pio2+0x548>
 800e14e:	ab48      	add	r3, sp, #288	; 0x120
 800e150:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e158:	f7f2 f860 	bl	800021c <__adddf3>
 800e15c:	3c01      	subs	r4, #1
 800e15e:	2c00      	cmp	r4, #0
 800e160:	daf5      	bge.n	800e14e <__kernel_rem_pio2+0x566>
 800e162:	9b02      	ldr	r3, [sp, #8]
 800e164:	b1e3      	cbz	r3, 800e1a0 <__kernel_rem_pio2+0x5b8>
 800e166:	4602      	mov	r2, r0
 800e168:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e16c:	9c01      	ldr	r4, [sp, #4]
 800e16e:	e9c4 2300 	strd	r2, r3, [r4]
 800e172:	4602      	mov	r2, r0
 800e174:	460b      	mov	r3, r1
 800e176:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e17a:	f7f2 f84d 	bl	8000218 <__aeabi_dsub>
 800e17e:	ad4a      	add	r5, sp, #296	; 0x128
 800e180:	2401      	movs	r4, #1
 800e182:	45a3      	cmp	fp, r4
 800e184:	da0f      	bge.n	800e1a6 <__kernel_rem_pio2+0x5be>
 800e186:	9b02      	ldr	r3, [sp, #8]
 800e188:	b113      	cbz	r3, 800e190 <__kernel_rem_pio2+0x5a8>
 800e18a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e18e:	4619      	mov	r1, r3
 800e190:	9b01      	ldr	r3, [sp, #4]
 800e192:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e196:	e791      	b.n	800e0bc <__kernel_rem_pio2+0x4d4>
 800e198:	465c      	mov	r4, fp
 800e19a:	2000      	movs	r0, #0
 800e19c:	2100      	movs	r1, #0
 800e19e:	e7de      	b.n	800e15e <__kernel_rem_pio2+0x576>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	460b      	mov	r3, r1
 800e1a4:	e7e2      	b.n	800e16c <__kernel_rem_pio2+0x584>
 800e1a6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e1aa:	f7f2 f837 	bl	800021c <__adddf3>
 800e1ae:	3401      	adds	r4, #1
 800e1b0:	e7e7      	b.n	800e182 <__kernel_rem_pio2+0x59a>
 800e1b2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800e1b6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	4632      	mov	r2, r6
 800e1be:	463b      	mov	r3, r7
 800e1c0:	4629      	mov	r1, r5
 800e1c2:	f7f2 f82b 	bl	800021c <__adddf3>
 800e1c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	460b      	mov	r3, r1
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	4629      	mov	r1, r5
 800e1d2:	f7f2 f821 	bl	8000218 <__aeabi_dsub>
 800e1d6:	4632      	mov	r2, r6
 800e1d8:	463b      	mov	r3, r7
 800e1da:	f7f2 f81f 	bl	800021c <__adddf3>
 800e1de:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e1e2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800e1e6:	ed88 7b00 	vstr	d7, [r8]
 800e1ea:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e1ee:	e776      	b.n	800e0de <__kernel_rem_pio2+0x4f6>
 800e1f0:	e9da 8900 	ldrd	r8, r9, [sl]
 800e1f4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e1f8:	4640      	mov	r0, r8
 800e1fa:	4632      	mov	r2, r6
 800e1fc:	463b      	mov	r3, r7
 800e1fe:	4649      	mov	r1, r9
 800e200:	f7f2 f80c 	bl	800021c <__adddf3>
 800e204:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e208:	4602      	mov	r2, r0
 800e20a:	460b      	mov	r3, r1
 800e20c:	4640      	mov	r0, r8
 800e20e:	4649      	mov	r1, r9
 800e210:	f7f2 f802 	bl	8000218 <__aeabi_dsub>
 800e214:	4632      	mov	r2, r6
 800e216:	463b      	mov	r3, r7
 800e218:	f7f2 f800 	bl	800021c <__adddf3>
 800e21c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e220:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e224:	ed8a 7b00 	vstr	d7, [sl]
 800e228:	3c01      	subs	r4, #1
 800e22a:	e75e      	b.n	800e0ea <__kernel_rem_pio2+0x502>
 800e22c:	ab48      	add	r3, sp, #288	; 0x120
 800e22e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e236:	f7f1 fff1 	bl	800021c <__adddf3>
 800e23a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e23e:	e75a      	b.n	800e0f6 <__kernel_rem_pio2+0x50e>
 800e240:	9b01      	ldr	r3, [sp, #4]
 800e242:	9a01      	ldr	r2, [sp, #4]
 800e244:	601d      	str	r5, [r3, #0]
 800e246:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e24a:	605c      	str	r4, [r3, #4]
 800e24c:	609f      	str	r7, [r3, #8]
 800e24e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e252:	60d3      	str	r3, [r2, #12]
 800e254:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e258:	6110      	str	r0, [r2, #16]
 800e25a:	6153      	str	r3, [r2, #20]
 800e25c:	e72e      	b.n	800e0bc <__kernel_rem_pio2+0x4d4>
 800e25e:	bf00      	nop
 800e260:	41700000 	.word	0x41700000
 800e264:	3e700000 	.word	0x3e700000

0800e268 <__kernel_sin>:
 800e268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e26c:	ed2d 8b04 	vpush	{d8-d9}
 800e270:	eeb0 8a41 	vmov.f32	s16, s2
 800e274:	eef0 8a61 	vmov.f32	s17, s3
 800e278:	ec55 4b10 	vmov	r4, r5, d0
 800e27c:	b083      	sub	sp, #12
 800e27e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e282:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e286:	9001      	str	r0, [sp, #4]
 800e288:	da06      	bge.n	800e298 <__kernel_sin+0x30>
 800e28a:	ee10 0a10 	vmov	r0, s0
 800e28e:	4629      	mov	r1, r5
 800e290:	f7f2 fc2a 	bl	8000ae8 <__aeabi_d2iz>
 800e294:	2800      	cmp	r0, #0
 800e296:	d051      	beq.n	800e33c <__kernel_sin+0xd4>
 800e298:	4622      	mov	r2, r4
 800e29a:	462b      	mov	r3, r5
 800e29c:	4620      	mov	r0, r4
 800e29e:	4629      	mov	r1, r5
 800e2a0:	f7f2 f972 	bl	8000588 <__aeabi_dmul>
 800e2a4:	4682      	mov	sl, r0
 800e2a6:	468b      	mov	fp, r1
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	460b      	mov	r3, r1
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	4629      	mov	r1, r5
 800e2b0:	f7f2 f96a 	bl	8000588 <__aeabi_dmul>
 800e2b4:	a341      	add	r3, pc, #260	; (adr r3, 800e3bc <__kernel_sin+0x154>)
 800e2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ba:	4680      	mov	r8, r0
 800e2bc:	4689      	mov	r9, r1
 800e2be:	4650      	mov	r0, sl
 800e2c0:	4659      	mov	r1, fp
 800e2c2:	f7f2 f961 	bl	8000588 <__aeabi_dmul>
 800e2c6:	a33f      	add	r3, pc, #252	; (adr r3, 800e3c4 <__kernel_sin+0x15c>)
 800e2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2cc:	f7f1 ffa4 	bl	8000218 <__aeabi_dsub>
 800e2d0:	4652      	mov	r2, sl
 800e2d2:	465b      	mov	r3, fp
 800e2d4:	f7f2 f958 	bl	8000588 <__aeabi_dmul>
 800e2d8:	a33c      	add	r3, pc, #240	; (adr r3, 800e3cc <__kernel_sin+0x164>)
 800e2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2de:	f7f1 ff9d 	bl	800021c <__adddf3>
 800e2e2:	4652      	mov	r2, sl
 800e2e4:	465b      	mov	r3, fp
 800e2e6:	f7f2 f94f 	bl	8000588 <__aeabi_dmul>
 800e2ea:	a33a      	add	r3, pc, #232	; (adr r3, 800e3d4 <__kernel_sin+0x16c>)
 800e2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f0:	f7f1 ff92 	bl	8000218 <__aeabi_dsub>
 800e2f4:	4652      	mov	r2, sl
 800e2f6:	465b      	mov	r3, fp
 800e2f8:	f7f2 f946 	bl	8000588 <__aeabi_dmul>
 800e2fc:	a337      	add	r3, pc, #220	; (adr r3, 800e3dc <__kernel_sin+0x174>)
 800e2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e302:	f7f1 ff8b 	bl	800021c <__adddf3>
 800e306:	9b01      	ldr	r3, [sp, #4]
 800e308:	4606      	mov	r6, r0
 800e30a:	460f      	mov	r7, r1
 800e30c:	b9eb      	cbnz	r3, 800e34a <__kernel_sin+0xe2>
 800e30e:	4602      	mov	r2, r0
 800e310:	460b      	mov	r3, r1
 800e312:	4650      	mov	r0, sl
 800e314:	4659      	mov	r1, fp
 800e316:	f7f2 f937 	bl	8000588 <__aeabi_dmul>
 800e31a:	a325      	add	r3, pc, #148	; (adr r3, 800e3b0 <__kernel_sin+0x148>)
 800e31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e320:	f7f1 ff7a 	bl	8000218 <__aeabi_dsub>
 800e324:	4642      	mov	r2, r8
 800e326:	464b      	mov	r3, r9
 800e328:	f7f2 f92e 	bl	8000588 <__aeabi_dmul>
 800e32c:	4602      	mov	r2, r0
 800e32e:	460b      	mov	r3, r1
 800e330:	4620      	mov	r0, r4
 800e332:	4629      	mov	r1, r5
 800e334:	f7f1 ff72 	bl	800021c <__adddf3>
 800e338:	4604      	mov	r4, r0
 800e33a:	460d      	mov	r5, r1
 800e33c:	ec45 4b10 	vmov	d0, r4, r5
 800e340:	b003      	add	sp, #12
 800e342:	ecbd 8b04 	vpop	{d8-d9}
 800e346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e34a:	4b1b      	ldr	r3, [pc, #108]	; (800e3b8 <__kernel_sin+0x150>)
 800e34c:	ec51 0b18 	vmov	r0, r1, d8
 800e350:	2200      	movs	r2, #0
 800e352:	f7f2 f919 	bl	8000588 <__aeabi_dmul>
 800e356:	4632      	mov	r2, r6
 800e358:	ec41 0b19 	vmov	d9, r0, r1
 800e35c:	463b      	mov	r3, r7
 800e35e:	4640      	mov	r0, r8
 800e360:	4649      	mov	r1, r9
 800e362:	f7f2 f911 	bl	8000588 <__aeabi_dmul>
 800e366:	4602      	mov	r2, r0
 800e368:	460b      	mov	r3, r1
 800e36a:	ec51 0b19 	vmov	r0, r1, d9
 800e36e:	f7f1 ff53 	bl	8000218 <__aeabi_dsub>
 800e372:	4652      	mov	r2, sl
 800e374:	465b      	mov	r3, fp
 800e376:	f7f2 f907 	bl	8000588 <__aeabi_dmul>
 800e37a:	ec53 2b18 	vmov	r2, r3, d8
 800e37e:	f7f1 ff4b 	bl	8000218 <__aeabi_dsub>
 800e382:	a30b      	add	r3, pc, #44	; (adr r3, 800e3b0 <__kernel_sin+0x148>)
 800e384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e388:	4606      	mov	r6, r0
 800e38a:	460f      	mov	r7, r1
 800e38c:	4640      	mov	r0, r8
 800e38e:	4649      	mov	r1, r9
 800e390:	f7f2 f8fa 	bl	8000588 <__aeabi_dmul>
 800e394:	4602      	mov	r2, r0
 800e396:	460b      	mov	r3, r1
 800e398:	4630      	mov	r0, r6
 800e39a:	4639      	mov	r1, r7
 800e39c:	f7f1 ff3e 	bl	800021c <__adddf3>
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	4629      	mov	r1, r5
 800e3a8:	f7f1 ff36 	bl	8000218 <__aeabi_dsub>
 800e3ac:	e7c4      	b.n	800e338 <__kernel_sin+0xd0>
 800e3ae:	bf00      	nop
 800e3b0:	55555549 	.word	0x55555549
 800e3b4:	3fc55555 	.word	0x3fc55555
 800e3b8:	3fe00000 	.word	0x3fe00000
 800e3bc:	5acfd57c 	.word	0x5acfd57c
 800e3c0:	3de5d93a 	.word	0x3de5d93a
 800e3c4:	8a2b9ceb 	.word	0x8a2b9ceb
 800e3c8:	3e5ae5e6 	.word	0x3e5ae5e6
 800e3cc:	57b1fe7d 	.word	0x57b1fe7d
 800e3d0:	3ec71de3 	.word	0x3ec71de3
 800e3d4:	19c161d5 	.word	0x19c161d5
 800e3d8:	3f2a01a0 	.word	0x3f2a01a0
 800e3dc:	1110f8a6 	.word	0x1110f8a6
 800e3e0:	3f811111 	.word	0x3f811111

0800e3e4 <fabs>:
 800e3e4:	ec51 0b10 	vmov	r0, r1, d0
 800e3e8:	ee10 2a10 	vmov	r2, s0
 800e3ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e3f0:	ec43 2b10 	vmov	d0, r2, r3
 800e3f4:	4770      	bx	lr

0800e3f6 <finite>:
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	ed8d 0b00 	vstr	d0, [sp]
 800e3fc:	9801      	ldr	r0, [sp, #4]
 800e3fe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e402:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e406:	0fc0      	lsrs	r0, r0, #31
 800e408:	b002      	add	sp, #8
 800e40a:	4770      	bx	lr
 800e40c:	0000      	movs	r0, r0
	...

0800e410 <floor>:
 800e410:	ec51 0b10 	vmov	r0, r1, d0
 800e414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e418:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e41c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e420:	2e13      	cmp	r6, #19
 800e422:	ee10 5a10 	vmov	r5, s0
 800e426:	ee10 8a10 	vmov	r8, s0
 800e42a:	460c      	mov	r4, r1
 800e42c:	dc32      	bgt.n	800e494 <floor+0x84>
 800e42e:	2e00      	cmp	r6, #0
 800e430:	da14      	bge.n	800e45c <floor+0x4c>
 800e432:	a333      	add	r3, pc, #204	; (adr r3, 800e500 <floor+0xf0>)
 800e434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e438:	f7f1 fef0 	bl	800021c <__adddf3>
 800e43c:	2200      	movs	r2, #0
 800e43e:	2300      	movs	r3, #0
 800e440:	f7f2 fb32 	bl	8000aa8 <__aeabi_dcmpgt>
 800e444:	b138      	cbz	r0, 800e456 <floor+0x46>
 800e446:	2c00      	cmp	r4, #0
 800e448:	da57      	bge.n	800e4fa <floor+0xea>
 800e44a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e44e:	431d      	orrs	r5, r3
 800e450:	d001      	beq.n	800e456 <floor+0x46>
 800e452:	4c2d      	ldr	r4, [pc, #180]	; (800e508 <floor+0xf8>)
 800e454:	2500      	movs	r5, #0
 800e456:	4621      	mov	r1, r4
 800e458:	4628      	mov	r0, r5
 800e45a:	e025      	b.n	800e4a8 <floor+0x98>
 800e45c:	4f2b      	ldr	r7, [pc, #172]	; (800e50c <floor+0xfc>)
 800e45e:	4137      	asrs	r7, r6
 800e460:	ea01 0307 	and.w	r3, r1, r7
 800e464:	4303      	orrs	r3, r0
 800e466:	d01f      	beq.n	800e4a8 <floor+0x98>
 800e468:	a325      	add	r3, pc, #148	; (adr r3, 800e500 <floor+0xf0>)
 800e46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46e:	f7f1 fed5 	bl	800021c <__adddf3>
 800e472:	2200      	movs	r2, #0
 800e474:	2300      	movs	r3, #0
 800e476:	f7f2 fb17 	bl	8000aa8 <__aeabi_dcmpgt>
 800e47a:	2800      	cmp	r0, #0
 800e47c:	d0eb      	beq.n	800e456 <floor+0x46>
 800e47e:	2c00      	cmp	r4, #0
 800e480:	bfbe      	ittt	lt
 800e482:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e486:	fa43 f606 	asrlt.w	r6, r3, r6
 800e48a:	19a4      	addlt	r4, r4, r6
 800e48c:	ea24 0407 	bic.w	r4, r4, r7
 800e490:	2500      	movs	r5, #0
 800e492:	e7e0      	b.n	800e456 <floor+0x46>
 800e494:	2e33      	cmp	r6, #51	; 0x33
 800e496:	dd0b      	ble.n	800e4b0 <floor+0xa0>
 800e498:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e49c:	d104      	bne.n	800e4a8 <floor+0x98>
 800e49e:	ee10 2a10 	vmov	r2, s0
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	f7f1 feba 	bl	800021c <__adddf3>
 800e4a8:	ec41 0b10 	vmov	d0, r0, r1
 800e4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4b0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e4b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4b8:	fa23 f707 	lsr.w	r7, r3, r7
 800e4bc:	4207      	tst	r7, r0
 800e4be:	d0f3      	beq.n	800e4a8 <floor+0x98>
 800e4c0:	a30f      	add	r3, pc, #60	; (adr r3, 800e500 <floor+0xf0>)
 800e4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c6:	f7f1 fea9 	bl	800021c <__adddf3>
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	f7f2 faeb 	bl	8000aa8 <__aeabi_dcmpgt>
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	d0bf      	beq.n	800e456 <floor+0x46>
 800e4d6:	2c00      	cmp	r4, #0
 800e4d8:	da02      	bge.n	800e4e0 <floor+0xd0>
 800e4da:	2e14      	cmp	r6, #20
 800e4dc:	d103      	bne.n	800e4e6 <floor+0xd6>
 800e4de:	3401      	adds	r4, #1
 800e4e0:	ea25 0507 	bic.w	r5, r5, r7
 800e4e4:	e7b7      	b.n	800e456 <floor+0x46>
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e4ec:	fa03 f606 	lsl.w	r6, r3, r6
 800e4f0:	4435      	add	r5, r6
 800e4f2:	4545      	cmp	r5, r8
 800e4f4:	bf38      	it	cc
 800e4f6:	18e4      	addcc	r4, r4, r3
 800e4f8:	e7f2      	b.n	800e4e0 <floor+0xd0>
 800e4fa:	2500      	movs	r5, #0
 800e4fc:	462c      	mov	r4, r5
 800e4fe:	e7aa      	b.n	800e456 <floor+0x46>
 800e500:	8800759c 	.word	0x8800759c
 800e504:	7e37e43c 	.word	0x7e37e43c
 800e508:	bff00000 	.word	0xbff00000
 800e50c:	000fffff 	.word	0x000fffff

0800e510 <nan>:
 800e510:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e518 <nan+0x8>
 800e514:	4770      	bx	lr
 800e516:	bf00      	nop
 800e518:	00000000 	.word	0x00000000
 800e51c:	7ff80000 	.word	0x7ff80000

0800e520 <rint>:
 800e520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e522:	ec51 0b10 	vmov	r0, r1, d0
 800e526:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e52a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800e52e:	2e13      	cmp	r6, #19
 800e530:	ee10 4a10 	vmov	r4, s0
 800e534:	460b      	mov	r3, r1
 800e536:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800e53a:	dc58      	bgt.n	800e5ee <rint+0xce>
 800e53c:	2e00      	cmp	r6, #0
 800e53e:	da2b      	bge.n	800e598 <rint+0x78>
 800e540:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e544:	4302      	orrs	r2, r0
 800e546:	d023      	beq.n	800e590 <rint+0x70>
 800e548:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800e54c:	4302      	orrs	r2, r0
 800e54e:	4254      	negs	r4, r2
 800e550:	4314      	orrs	r4, r2
 800e552:	0c4b      	lsrs	r3, r1, #17
 800e554:	0b24      	lsrs	r4, r4, #12
 800e556:	045b      	lsls	r3, r3, #17
 800e558:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800e55c:	ea44 0103 	orr.w	r1, r4, r3
 800e560:	4b32      	ldr	r3, [pc, #200]	; (800e62c <rint+0x10c>)
 800e562:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e566:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e56a:	4602      	mov	r2, r0
 800e56c:	460b      	mov	r3, r1
 800e56e:	4630      	mov	r0, r6
 800e570:	4639      	mov	r1, r7
 800e572:	f7f1 fe53 	bl	800021c <__adddf3>
 800e576:	e9cd 0100 	strd	r0, r1, [sp]
 800e57a:	463b      	mov	r3, r7
 800e57c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e580:	4632      	mov	r2, r6
 800e582:	f7f1 fe49 	bl	8000218 <__aeabi_dsub>
 800e586:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e58a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e58e:	4639      	mov	r1, r7
 800e590:	ec41 0b10 	vmov	d0, r0, r1
 800e594:	b003      	add	sp, #12
 800e596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e598:	4a25      	ldr	r2, [pc, #148]	; (800e630 <rint+0x110>)
 800e59a:	4132      	asrs	r2, r6
 800e59c:	ea01 0702 	and.w	r7, r1, r2
 800e5a0:	4307      	orrs	r7, r0
 800e5a2:	d0f5      	beq.n	800e590 <rint+0x70>
 800e5a4:	0851      	lsrs	r1, r2, #1
 800e5a6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800e5aa:	4314      	orrs	r4, r2
 800e5ac:	d00c      	beq.n	800e5c8 <rint+0xa8>
 800e5ae:	ea23 0201 	bic.w	r2, r3, r1
 800e5b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e5b6:	2e13      	cmp	r6, #19
 800e5b8:	fa43 f606 	asr.w	r6, r3, r6
 800e5bc:	bf0c      	ite	eq
 800e5be:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e5c2:	2400      	movne	r4, #0
 800e5c4:	ea42 0306 	orr.w	r3, r2, r6
 800e5c8:	4918      	ldr	r1, [pc, #96]	; (800e62c <rint+0x10c>)
 800e5ca:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e5ce:	4622      	mov	r2, r4
 800e5d0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e5d4:	4620      	mov	r0, r4
 800e5d6:	4629      	mov	r1, r5
 800e5d8:	f7f1 fe20 	bl	800021c <__adddf3>
 800e5dc:	e9cd 0100 	strd	r0, r1, [sp]
 800e5e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5e4:	4622      	mov	r2, r4
 800e5e6:	462b      	mov	r3, r5
 800e5e8:	f7f1 fe16 	bl	8000218 <__aeabi_dsub>
 800e5ec:	e7d0      	b.n	800e590 <rint+0x70>
 800e5ee:	2e33      	cmp	r6, #51	; 0x33
 800e5f0:	dd07      	ble.n	800e602 <rint+0xe2>
 800e5f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e5f6:	d1cb      	bne.n	800e590 <rint+0x70>
 800e5f8:	ee10 2a10 	vmov	r2, s0
 800e5fc:	f7f1 fe0e 	bl	800021c <__adddf3>
 800e600:	e7c6      	b.n	800e590 <rint+0x70>
 800e602:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e606:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e60a:	40d6      	lsrs	r6, r2
 800e60c:	4230      	tst	r0, r6
 800e60e:	d0bf      	beq.n	800e590 <rint+0x70>
 800e610:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800e614:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800e618:	bf1f      	itttt	ne
 800e61a:	ea24 0101 	bicne.w	r1, r4, r1
 800e61e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e622:	fa44 f202 	asrne.w	r2, r4, r2
 800e626:	ea41 0402 	orrne.w	r4, r1, r2
 800e62a:	e7cd      	b.n	800e5c8 <rint+0xa8>
 800e62c:	0800ea70 	.word	0x0800ea70
 800e630:	000fffff 	.word	0x000fffff
 800e634:	00000000 	.word	0x00000000

0800e638 <scalbn>:
 800e638:	b570      	push	{r4, r5, r6, lr}
 800e63a:	ec55 4b10 	vmov	r4, r5, d0
 800e63e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e642:	4606      	mov	r6, r0
 800e644:	462b      	mov	r3, r5
 800e646:	b99a      	cbnz	r2, 800e670 <scalbn+0x38>
 800e648:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e64c:	4323      	orrs	r3, r4
 800e64e:	d036      	beq.n	800e6be <scalbn+0x86>
 800e650:	4b39      	ldr	r3, [pc, #228]	; (800e738 <scalbn+0x100>)
 800e652:	4629      	mov	r1, r5
 800e654:	ee10 0a10 	vmov	r0, s0
 800e658:	2200      	movs	r2, #0
 800e65a:	f7f1 ff95 	bl	8000588 <__aeabi_dmul>
 800e65e:	4b37      	ldr	r3, [pc, #220]	; (800e73c <scalbn+0x104>)
 800e660:	429e      	cmp	r6, r3
 800e662:	4604      	mov	r4, r0
 800e664:	460d      	mov	r5, r1
 800e666:	da10      	bge.n	800e68a <scalbn+0x52>
 800e668:	a32b      	add	r3, pc, #172	; (adr r3, 800e718 <scalbn+0xe0>)
 800e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66e:	e03a      	b.n	800e6e6 <scalbn+0xae>
 800e670:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e674:	428a      	cmp	r2, r1
 800e676:	d10c      	bne.n	800e692 <scalbn+0x5a>
 800e678:	ee10 2a10 	vmov	r2, s0
 800e67c:	4620      	mov	r0, r4
 800e67e:	4629      	mov	r1, r5
 800e680:	f7f1 fdcc 	bl	800021c <__adddf3>
 800e684:	4604      	mov	r4, r0
 800e686:	460d      	mov	r5, r1
 800e688:	e019      	b.n	800e6be <scalbn+0x86>
 800e68a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e68e:	460b      	mov	r3, r1
 800e690:	3a36      	subs	r2, #54	; 0x36
 800e692:	4432      	add	r2, r6
 800e694:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e698:	428a      	cmp	r2, r1
 800e69a:	dd08      	ble.n	800e6ae <scalbn+0x76>
 800e69c:	2d00      	cmp	r5, #0
 800e69e:	a120      	add	r1, pc, #128	; (adr r1, 800e720 <scalbn+0xe8>)
 800e6a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6a4:	da1c      	bge.n	800e6e0 <scalbn+0xa8>
 800e6a6:	a120      	add	r1, pc, #128	; (adr r1, 800e728 <scalbn+0xf0>)
 800e6a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6ac:	e018      	b.n	800e6e0 <scalbn+0xa8>
 800e6ae:	2a00      	cmp	r2, #0
 800e6b0:	dd08      	ble.n	800e6c4 <scalbn+0x8c>
 800e6b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e6b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e6ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e6be:	ec45 4b10 	vmov	d0, r4, r5
 800e6c2:	bd70      	pop	{r4, r5, r6, pc}
 800e6c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e6c8:	da19      	bge.n	800e6fe <scalbn+0xc6>
 800e6ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e6ce:	429e      	cmp	r6, r3
 800e6d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e6d4:	dd0a      	ble.n	800e6ec <scalbn+0xb4>
 800e6d6:	a112      	add	r1, pc, #72	; (adr r1, 800e720 <scalbn+0xe8>)
 800e6d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d1e2      	bne.n	800e6a6 <scalbn+0x6e>
 800e6e0:	a30f      	add	r3, pc, #60	; (adr r3, 800e720 <scalbn+0xe8>)
 800e6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e6:	f7f1 ff4f 	bl	8000588 <__aeabi_dmul>
 800e6ea:	e7cb      	b.n	800e684 <scalbn+0x4c>
 800e6ec:	a10a      	add	r1, pc, #40	; (adr r1, 800e718 <scalbn+0xe0>)
 800e6ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d0b8      	beq.n	800e668 <scalbn+0x30>
 800e6f6:	a10e      	add	r1, pc, #56	; (adr r1, 800e730 <scalbn+0xf8>)
 800e6f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6fc:	e7b4      	b.n	800e668 <scalbn+0x30>
 800e6fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e702:	3236      	adds	r2, #54	; 0x36
 800e704:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e708:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e70c:	4620      	mov	r0, r4
 800e70e:	4b0c      	ldr	r3, [pc, #48]	; (800e740 <scalbn+0x108>)
 800e710:	2200      	movs	r2, #0
 800e712:	e7e8      	b.n	800e6e6 <scalbn+0xae>
 800e714:	f3af 8000 	nop.w
 800e718:	c2f8f359 	.word	0xc2f8f359
 800e71c:	01a56e1f 	.word	0x01a56e1f
 800e720:	8800759c 	.word	0x8800759c
 800e724:	7e37e43c 	.word	0x7e37e43c
 800e728:	8800759c 	.word	0x8800759c
 800e72c:	fe37e43c 	.word	0xfe37e43c
 800e730:	c2f8f359 	.word	0xc2f8f359
 800e734:	81a56e1f 	.word	0x81a56e1f
 800e738:	43500000 	.word	0x43500000
 800e73c:	ffff3cb0 	.word	0xffff3cb0
 800e740:	3c900000 	.word	0x3c900000

0800e744 <_init>:
 800e744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e746:	bf00      	nop
 800e748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e74a:	bc08      	pop	{r3}
 800e74c:	469e      	mov	lr, r3
 800e74e:	4770      	bx	lr

0800e750 <_fini>:
 800e750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e752:	bf00      	nop
 800e754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e756:	bc08      	pop	{r3}
 800e758:	469e      	mov	lr, r3
 800e75a:	4770      	bx	lr
