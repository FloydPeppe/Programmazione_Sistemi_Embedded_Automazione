
Differential_Drive_Thread_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013910  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  08013ae0  08013ae0  00023ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014348  08014348  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08014348  08014348  00024348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014350  08014350  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014350  08014350  00024350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014354  08014354  00024354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08014358  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007288  200001ec  08014544  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007474  08014544  00037474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028565  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b17  00000000  00000000  00058781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  0005d298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  0005eb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000678b  00000000  00000000  000601c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e099  00000000  00000000  0006694b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bbcf  00000000  00000000  000849e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001905b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f3c  00000000  00000000  00190608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00198544  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00198580  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013ac8 	.word	0x08013ac8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	08013ac8 	.word	0x08013ac8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f004 ffe5 	bl	8006000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f8a7 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f000 fc49 	bl	80018d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800103e:	f000 fc27 	bl	8001890 <MX_DMA_Init>
  MX_TIM2_Init();
 8001042:	f000 f9d3 	bl	80013ec <MX_TIM2_Init>
  MX_TIM1_Init();
 8001046:	f000 f90d 	bl	8001264 <MX_TIM1_Init>
  MX_TIM3_Init();
 800104a:	f000 fa23 	bl	8001494 <MX_TIM3_Init>
  MX_TIM5_Init();
 800104e:	f000 fa6f 	bl	8001530 <MX_TIM5_Init>
  MX_TIM12_Init();
 8001052:	f000 fb97 	bl	8001784 <MX_TIM12_Init>
  MX_TIM7_Init();
 8001056:	f000 fabf 	bl	80015d8 <MX_TIM7_Init>
  MX_TIM8_Init();
 800105a:	f000 faf3 	bl	8001644 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 800105e:	f000 fbed 	bl	800183c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize
  DATASTREAM_Init(&huart3);
 8001062:	483a      	ldr	r0, [pc, #232]	; (800114c <main+0x120>)
 8001064:	f002 f8ca 	bl	80031fc <DATASTREAM_Init>
  MAIN_DIFFDRIVE_Init();
 8001068:	f000 fcd0 	bl	8001a0c <MAIN_DIFFDRIVE_Init>
  MAIN_ULTRASONIC_Init();
 800106c:	f000 fda0 	bl	8001bb0 <MAIN_ULTRASONIC_Init>
  MAIN_MAF_Init();
 8001070:	f000 fdc4 	bl	8001bfc <MAIN_MAF_Init>
  MAIN_SERVO_Init();
 8001074:	f000 fe2a 	bl	8001ccc <MAIN_SERVO_Init>



  // Wait until blue button is pressed
  while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) )
 8001078:	bf00      	nop
 800107a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107e:	4834      	ldr	r0, [pc, #208]	; (8001150 <main+0x124>)
 8001080:	f005 fe0a 	bl	8006c98 <HAL_GPIO_ReadPin>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f7      	bne.n	800107a <main+0x4e>
  		;

  // Enable WIFI to send/receive values
  HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2101      	movs	r1, #1
 800108e:	4830      	ldr	r0, [pc, #192]	; (8001150 <main+0x124>)
 8001090:	f005 fe1a 	bl	8006cc8 <HAL_GPIO_WritePin>

  // Wait for ESP boot
  HAL_Delay(3000);
 8001094:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001098:	f004 fff4 	bl	8006084 <HAL_Delay>

  // Rapidly flash led to show MCU ready to send values
  for(int i=0; i<20; i++){
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	e009      	b.n	80010b6 <main+0x8a>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80010a2:	2120      	movs	r1, #32
 80010a4:	482b      	ldr	r0, [pc, #172]	; (8001154 <main+0x128>)
 80010a6:	f005 fe28 	bl	8006cfa <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 80010aa:	2032      	movs	r0, #50	; 0x32
 80010ac:	f004 ffea 	bl	8006084 <HAL_Delay>
  for(int i=0; i<20; i++){
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3301      	adds	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b13      	cmp	r3, #19
 80010ba:	ddf2      	ble.n	80010a2 <main+0x76>
  }

  // Wait for 10 received chars
  char ch[10];
  HAL_UART_Receive(&huart3, (uint8_t*) ch, sizeof(ch), HAL_MAX_DELAY);
 80010bc:	4639      	mov	r1, r7
 80010be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c2:	220a      	movs	r2, #10
 80010c4:	4821      	ldr	r0, [pc, #132]	; (800114c <main+0x120>)
 80010c6:	f008 fc19 	bl	80098fc <HAL_UART_Receive>

  // LED on
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2120      	movs	r1, #32
 80010ce:	4821      	ldr	r0, [pc, #132]	; (8001154 <main+0x128>)
 80010d0:	f005 fdfa 	bl	8006cc8 <HAL_GPIO_WritePin>

  // Wait a bit more
  HAL_Delay(3000);
 80010d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010d8:	f004 ffd4 	bl	8006084 <HAL_Delay>

  // LED on
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2120      	movs	r1, #32
 80010e0:	481c      	ldr	r0, [pc, #112]	; (8001154 <main+0x128>)
 80010e2:	f005 fdf1 	bl	8006cc8 <HAL_GPIO_WritePin>

  // Wait until the blue button is pressed again
   while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) );
 80010e6:	bf00      	nop
 80010e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ec:	4818      	ldr	r0, [pc, #96]	; (8001150 <main+0x124>)
 80010ee:	f005 fdd3 	bl	8006c98 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f7      	bne.n	80010e8 <main+0xbc>
   		;

  // Wait a bit
  HAL_Delay(1000);
 80010f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fc:	f004 ffc2 	bl	8006084 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001100:	f009 f95e 	bl	800a3c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ControlDiffDriv */
  ControlDiffDrivHandle = osThreadNew(StartControlDiffDrive, NULL, &ControlDiffDriv_attributes);
 8001104:	4a14      	ldr	r2, [pc, #80]	; (8001158 <main+0x12c>)
 8001106:	2100      	movs	r1, #0
 8001108:	4814      	ldr	r0, [pc, #80]	; (800115c <main+0x130>)
 800110a:	f009 f9a3 	bl	800a454 <osThreadNew>
 800110e:	4603      	mov	r3, r0
 8001110:	4a13      	ldr	r2, [pc, #76]	; (8001160 <main+0x134>)
 8001112:	6013      	str	r3, [r2, #0]

  /* creation of DistanceSensor */
  DistanceSensorHandle = osThreadNew(StartDistanceSensor, NULL, &DistanceSensor_attributes);
 8001114:	4a13      	ldr	r2, [pc, #76]	; (8001164 <main+0x138>)
 8001116:	2100      	movs	r1, #0
 8001118:	4813      	ldr	r0, [pc, #76]	; (8001168 <main+0x13c>)
 800111a:	f009 f99b 	bl	800a454 <osThreadNew>
 800111e:	4603      	mov	r3, r0
 8001120:	4a12      	ldr	r2, [pc, #72]	; (800116c <main+0x140>)
 8001122:	6013      	str	r3, [r2, #0]

  /* creation of InfraredSensor */
  InfraredSensorHandle = osThreadNew(StartInfraredSensor, NULL, &InfraredSensor_attributes);
 8001124:	4a12      	ldr	r2, [pc, #72]	; (8001170 <main+0x144>)
 8001126:	2100      	movs	r1, #0
 8001128:	4812      	ldr	r0, [pc, #72]	; (8001174 <main+0x148>)
 800112a:	f009 f993 	bl	800a454 <osThreadNew>
 800112e:	4603      	mov	r3, r0
 8001130:	4a11      	ldr	r2, [pc, #68]	; (8001178 <main+0x14c>)
 8001132:	6013      	str	r3, [r2, #0]

  /* creation of Communication */
  CommunicationHandle = osThreadNew(SerialCommnuication, NULL, &Communication_attributes);
 8001134:	4a11      	ldr	r2, [pc, #68]	; (800117c <main+0x150>)
 8001136:	2100      	movs	r1, #0
 8001138:	4811      	ldr	r0, [pc, #68]	; (8001180 <main+0x154>)
 800113a:	f009 f98b 	bl	800a454 <osThreadNew>
 800113e:	4603      	mov	r3, r0
 8001140:	4a10      	ldr	r2, [pc, #64]	; (8001184 <main+0x158>)
 8001142:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001144:	f009 f960 	bl	800a408 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001148:	e7fe      	b.n	8001148 <main+0x11c>
 800114a:	bf00      	nop
 800114c:	20005ba0 	.word	0x20005ba0
 8001150:	40020800 	.word	0x40020800
 8001154:	40020000 	.word	0x40020000
 8001158:	08013bc8 	.word	0x08013bc8
 800115c:	08001cf1 	.word	0x08001cf1
 8001160:	20005c2c 	.word	0x20005c2c
 8001164:	08013bec 	.word	0x08013bec
 8001168:	08002489 	.word	0x08002489
 800116c:	20005c30 	.word	0x20005c30
 8001170:	08013c10 	.word	0x08013c10
 8001174:	0800297d 	.word	0x0800297d
 8001178:	20005e14 	.word	0x20005e14
 800117c:	08013c34 	.word	0x08013c34
 8001180:	080029bd 	.word	0x080029bd
 8001184:	20005e18 	.word	0x20005e18

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2234      	movs	r2, #52	; 0x34
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f00b fff0 	bl	800d17c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	4b2a      	ldr	r3, [pc, #168]	; (800125c <SystemClock_Config+0xd4>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a29      	ldr	r2, [pc, #164]	; (800125c <SystemClock_Config+0xd4>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <SystemClock_Config+0xd4>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011c8:	2300      	movs	r3, #0
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <SystemClock_Config+0xd8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011d4:	4a22      	ldr	r2, [pc, #136]	; (8001260 <SystemClock_Config+0xd8>)
 80011d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <SystemClock_Config+0xd8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f0:	2310      	movs	r3, #16
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f4:	2302      	movs	r3, #2
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f8:	2300      	movs	r3, #0
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011fc:	2310      	movs	r3, #16
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001200:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001204:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001206:	2304      	movs	r3, #4
 8001208:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800120a:	2302      	movs	r3, #2
 800120c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800120e:	2302      	movs	r3, #2
 8001210:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4618      	mov	r0, r3
 8001218:	f006 f888 	bl	800732c <HAL_RCC_OscConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001222:	f001 fc93 	bl	8002b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001226:	230f      	movs	r3, #15
 8001228:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122a:	2302      	movs	r3, #2
 800122c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001236:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	2102      	movs	r1, #2
 8001242:	4618      	mov	r0, r3
 8001244:	f005 fd74 	bl	8006d30 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800124e:	f001 fc7d 	bl	8002b4c <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3750      	adds	r7, #80	; 0x50
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40007000 	.word	0x40007000

08001264 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b096      	sub	sp, #88	; 0x58
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
 8001292:	615a      	str	r2, [r3, #20]
 8001294:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2220      	movs	r2, #32
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f00b ff6d 	bl	800d17c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012a2:	4b50      	ldr	r3, [pc, #320]	; (80013e4 <MX_TIM1_Init+0x180>)
 80012a4:	4a50      	ldr	r2, [pc, #320]	; (80013e8 <MX_TIM1_Init+0x184>)
 80012a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 80012a8:	4b4e      	ldr	r3, [pc, #312]	; (80013e4 <MX_TIM1_Init+0x180>)
 80012aa:	2208      	movs	r2, #8
 80012ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b4d      	ldr	r3, [pc, #308]	; (80013e4 <MX_TIM1_Init+0x180>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80012b4:	4b4b      	ldr	r3, [pc, #300]	; (80013e4 <MX_TIM1_Init+0x180>)
 80012b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80012ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b49      	ldr	r3, [pc, #292]	; (80013e4 <MX_TIM1_Init+0x180>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012c2:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <MX_TIM1_Init+0x180>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c8:	4b46      	ldr	r3, [pc, #280]	; (80013e4 <MX_TIM1_Init+0x180>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ce:	4845      	ldr	r0, [pc, #276]	; (80013e4 <MX_TIM1_Init+0x180>)
 80012d0:	f006 faca 	bl	8007868 <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012da:	f001 fc37 	bl	8002b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012e8:	4619      	mov	r1, r3
 80012ea:	483e      	ldr	r0, [pc, #248]	; (80013e4 <MX_TIM1_Init+0x180>)
 80012ec:	f007 fb7a 	bl	80089e4 <HAL_TIM_ConfigClockSource>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012f6:	f001 fc29 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012fa:	483a      	ldr	r0, [pc, #232]	; (80013e4 <MX_TIM1_Init+0x180>)
 80012fc:	f006 fc40 	bl	8007b80 <HAL_TIM_PWM_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001306:	f001 fc21 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001312:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001316:	4619      	mov	r1, r3
 8001318:	4832      	ldr	r0, [pc, #200]	; (80013e4 <MX_TIM1_Init+0x180>)
 800131a:	f008 f917 	bl	800954c <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001324:	f001 fc12 	bl	8002b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001328:	2360      	movs	r3, #96	; 0x60
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001334:	2300      	movs	r3, #0
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	2200      	movs	r2, #0
 800134a:	4619      	mov	r1, r3
 800134c:	4825      	ldr	r0, [pc, #148]	; (80013e4 <MX_TIM1_Init+0x180>)
 800134e:	f007 fa87 	bl	8008860 <HAL_TIM_PWM_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001358:	f001 fbf8 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	2204      	movs	r2, #4
 8001362:	4619      	mov	r1, r3
 8001364:	481f      	ldr	r0, [pc, #124]	; (80013e4 <MX_TIM1_Init+0x180>)
 8001366:	f007 fa7b 	bl	8008860 <HAL_TIM_PWM_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001370:	f001 fbec 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001378:	2208      	movs	r2, #8
 800137a:	4619      	mov	r1, r3
 800137c:	4819      	ldr	r0, [pc, #100]	; (80013e4 <MX_TIM1_Init+0x180>)
 800137e:	f007 fa6f 	bl	8008860 <HAL_TIM_PWM_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001388:	f001 fbe0 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	220c      	movs	r2, #12
 8001392:	4619      	mov	r1, r3
 8001394:	4813      	ldr	r0, [pc, #76]	; (80013e4 <MX_TIM1_Init+0x180>)
 8001396:	f007 fa63 	bl	8008860 <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80013a0:	f001 fbd4 	bl	8002b4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4807      	ldr	r0, [pc, #28]	; (80013e4 <MX_TIM1_Init+0x180>)
 80013c8:	f008 f93c 	bl	8009644 <HAL_TIMEx_ConfigBreakDeadTime>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80013d2:	f001 fbbb 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013d6:	4803      	ldr	r0, [pc, #12]	; (80013e4 <MX_TIM1_Init+0x180>)
 80013d8:	f001 fd1e 	bl	8002e18 <HAL_TIM_MspPostInit>

}
 80013dc:	bf00      	nop
 80013de:	3758      	adds	r7, #88	; 0x58
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20005e1c 	.word	0x20005e1c
 80013e8:	40010000 	.word	0x40010000

080013ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08c      	sub	sp, #48	; 0x30
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2224      	movs	r2, #36	; 0x24
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f00b febe 	bl	800d17c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <MX_TIM2_Init+0xa4>)
 800140a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <MX_TIM2_Init+0xa4>)
 8001412:	2200      	movs	r2, #0
 8001414:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <MX_TIM2_Init+0xa4>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MX_TIM2_Init+0xa4>)
 800141e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001422:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <MX_TIM2_Init+0xa4>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MX_TIM2_Init+0xa4>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001430:	2301      	movs	r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001438:	2301      	movs	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001440:	230f      	movs	r3, #15
 8001442:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001448:	2301      	movs	r3, #1
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001450:	230f      	movs	r3, #15
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	4619      	mov	r1, r3
 800145a:	480d      	ldr	r0, [pc, #52]	; (8001490 <MX_TIM2_Init+0xa4>)
 800145c:	f006 fefa 	bl	8008254 <HAL_TIM_Encoder_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001466:	f001 fb71 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	4619      	mov	r1, r3
 8001476:	4806      	ldr	r0, [pc, #24]	; (8001490 <MX_TIM2_Init+0xa4>)
 8001478:	f008 f868 	bl	800954c <HAL_TIMEx_MasterConfigSynchronization>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001482:	f001 fb63 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	3730      	adds	r7, #48	; 0x30
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20005f40 	.word	0x20005f40

08001494 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a8:	463b      	mov	r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014b0:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_TIM3_Init+0x94>)
 80014b2:	4a1e      	ldr	r2, [pc, #120]	; (800152c <MX_TIM3_Init+0x98>)
 80014b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <MX_TIM3_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_TIM3_Init+0x94>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <MX_TIM3_Init+0x94>)
 80014c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_TIM3_Init+0x94>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <MX_TIM3_Init+0x94>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <MX_TIM3_Init+0x94>)
 80014d8:	f006 f9c6 	bl	8007868 <HAL_TIM_Base_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014e2:	f001 fb33 	bl	8002b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	4619      	mov	r1, r3
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <MX_TIM3_Init+0x94>)
 80014f4:	f007 fa76 	bl	80089e4 <HAL_TIM_ConfigClockSource>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014fe:	f001 fb25 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800150a:	463b      	mov	r3, r7
 800150c:	4619      	mov	r1, r3
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <MX_TIM3_Init+0x94>)
 8001510:	f008 f81c 	bl	800954c <HAL_TIMEx_MasterConfigSynchronization>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800151a:	f001 fb17 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20005d48 	.word	0x20005d48
 800152c:	40000400 	.word	0x40000400

08001530 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	; 0x30
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	2224      	movs	r2, #36	; 0x24
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f00b fe1c 	bl	800d17c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800154c:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <MX_TIM5_Init+0xa0>)
 800154e:	4a21      	ldr	r2, [pc, #132]	; (80015d4 <MX_TIM5_Init+0xa4>)
 8001550:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001552:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <MX_TIM5_Init+0xa0>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <MX_TIM5_Init+0xa0>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_TIM5_Init+0xa0>)
 8001560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001564:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_TIM5_Init+0xa0>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <MX_TIM5_Init+0xa0>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001572:	2301      	movs	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800157a:	2301      	movs	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001582:	230f      	movs	r3, #15
 8001584:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800158a:	2301      	movs	r3, #1
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001592:	230f      	movs	r3, #15
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4619      	mov	r1, r3
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <MX_TIM5_Init+0xa0>)
 800159e:	f006 fe59 	bl	8008254 <HAL_TIM_Encoder_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80015a8:	f001 fad0 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_TIM5_Init+0xa0>)
 80015ba:	f007 ffc7 	bl	800954c <HAL_TIMEx_MasterConfigSynchronization>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80015c4:	f001 fac2 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	3730      	adds	r7, #48	; 0x30
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20005c94 	.word	0x20005c94
 80015d4:	40000c00 	.word	0x40000c00

080015d8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015de:	463b      	mov	r3, r7
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <MX_TIM7_Init+0x64>)
 80015e8:	4a15      	ldr	r2, [pc, #84]	; (8001640 <MX_TIM7_Init+0x68>)
 80015ea:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 840;
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <MX_TIM7_Init+0x64>)
 80015ee:	f44f 7252 	mov.w	r2, #840	; 0x348
 80015f2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_TIM7_Init+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <MX_TIM7_Init+0x64>)
 80015fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001600:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_TIM7_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <MX_TIM7_Init+0x64>)
 800160a:	f006 f92d 	bl	8007868 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001614:	f001 fa9a 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001618:	2300      	movs	r3, #0
 800161a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001620:	463b      	mov	r3, r7
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_TIM7_Init+0x64>)
 8001626:	f007 ff91 	bl	800954c <HAL_TIMEx_MasterConfigSynchronization>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001630:	f001 fa8c 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20007288 	.word	0x20007288
 8001640:	40001400 	.word	0x40001400

08001644 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b096      	sub	sp, #88	; 0x58
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001658:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]
 8001672:	615a      	str	r2, [r3, #20]
 8001674:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2220      	movs	r2, #32
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f00b fd7d 	bl	800d17c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001682:	4b3e      	ldr	r3, [pc, #248]	; (800177c <MX_TIM8_Init+0x138>)
 8001684:	4a3e      	ldr	r2, [pc, #248]	; (8001780 <MX_TIM8_Init+0x13c>)
 8001686:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001688:	4b3c      	ldr	r3, [pc, #240]	; (800177c <MX_TIM8_Init+0x138>)
 800168a:	2200      	movs	r2, #0
 800168c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <MX_TIM8_Init+0x138>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001694:	4b39      	ldr	r3, [pc, #228]	; (800177c <MX_TIM8_Init+0x138>)
 8001696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800169a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169c:	4b37      	ldr	r3, [pc, #220]	; (800177c <MX_TIM8_Init+0x138>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016a2:	4b36      	ldr	r3, [pc, #216]	; (800177c <MX_TIM8_Init+0x138>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a8:	4b34      	ldr	r3, [pc, #208]	; (800177c <MX_TIM8_Init+0x138>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016ae:	4833      	ldr	r0, [pc, #204]	; (800177c <MX_TIM8_Init+0x138>)
 80016b0:	f006 f8da 	bl	8007868 <HAL_TIM_Base_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80016ba:	f001 fa47 	bl	8002b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016c8:	4619      	mov	r1, r3
 80016ca:	482c      	ldr	r0, [pc, #176]	; (800177c <MX_TIM8_Init+0x138>)
 80016cc:	f007 f98a 	bl	80089e4 <HAL_TIM_ConfigClockSource>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80016d6:	f001 fa39 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016da:	4828      	ldr	r0, [pc, #160]	; (800177c <MX_TIM8_Init+0x138>)
 80016dc:	f006 fa50 	bl	8007b80 <HAL_TIM_PWM_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80016e6:	f001 fa31 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016f6:	4619      	mov	r1, r3
 80016f8:	4820      	ldr	r0, [pc, #128]	; (800177c <MX_TIM8_Init+0x138>)
 80016fa:	f007 ff27 	bl	800954c <HAL_TIMEx_MasterConfigSynchronization>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001704:	f001 fa22 	bl	8002b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001708:	2360      	movs	r3, #96	; 0x60
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001714:	2300      	movs	r3, #0
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001728:	2200      	movs	r2, #0
 800172a:	4619      	mov	r1, r3
 800172c:	4813      	ldr	r0, [pc, #76]	; (800177c <MX_TIM8_Init+0x138>)
 800172e:	f007 f897 	bl	8008860 <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001738:	f001 fa08 	bl	8002b4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001754:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	4619      	mov	r1, r3
 800175e:	4807      	ldr	r0, [pc, #28]	; (800177c <MX_TIM8_Init+0x138>)
 8001760:	f007 ff70 	bl	8009644 <HAL_TIMEx_ConfigBreakDeadTime>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800176a:	f001 f9ef 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800176e:	4803      	ldr	r0, [pc, #12]	; (800177c <MX_TIM8_Init+0x138>)
 8001770:	f001 fb52 	bl	8002e18 <HAL_TIM_MspPostInit>

}
 8001774:	bf00      	nop
 8001776:	3758      	adds	r7, #88	; 0x58
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20004b4c 	.word	0x20004b4c
 8001780:	40010400 	.word	0x40010400

08001784 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001798:	463b      	mov	r3, r7
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80017a4:	4b23      	ldr	r3, [pc, #140]	; (8001834 <MX_TIM12_Init+0xb0>)
 80017a6:	4a24      	ldr	r2, [pc, #144]	; (8001838 <MX_TIM12_Init+0xb4>)
 80017a8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <MX_TIM12_Init+0xb0>)
 80017ac:	2253      	movs	r2, #83	; 0x53
 80017ae:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <MX_TIM12_Init+0xb0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0xffff;
 80017b6:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <MX_TIM12_Init+0xb0>)
 80017b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017bc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <MX_TIM12_Init+0xb0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <MX_TIM12_Init+0xb0>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80017ca:	481a      	ldr	r0, [pc, #104]	; (8001834 <MX_TIM12_Init+0xb0>)
 80017cc:	f006 f84c 	bl	8007868 <HAL_TIM_Base_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM12_Init+0x56>
  {
    Error_Handler();
 80017d6:	f001 f9b9 	bl	8002b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	4619      	mov	r1, r3
 80017e6:	4813      	ldr	r0, [pc, #76]	; (8001834 <MX_TIM12_Init+0xb0>)
 80017e8:	f007 f8fc 	bl	80089e4 <HAL_TIM_ConfigClockSource>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 80017f2:	f001 f9ab 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 80017f6:	480f      	ldr	r0, [pc, #60]	; (8001834 <MX_TIM12_Init+0xb0>)
 80017f8:	f006 faf0 	bl	8007ddc <HAL_TIM_IC_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8001802:	f001 f9a3 	bl	8002b4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001806:	2302      	movs	r3, #2
 8001808:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800180a:	2301      	movs	r3, #1
 800180c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001816:	463b      	mov	r3, r7
 8001818:	2200      	movs	r2, #0
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_TIM12_Init+0xb0>)
 800181e:	f006 ff83 	bl	8008728 <HAL_TIM_IC_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM12_Init+0xa8>
  {
    Error_Handler();
 8001828:	f001 f990 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20006f94 	.word	0x20006f94
 8001838:	40001800 	.word	0x40001800

0800183c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_USART3_UART_Init+0x4c>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <MX_USART3_UART_Init+0x50>)
 8001844:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <MX_USART3_UART_Init+0x4c>)
 8001848:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 800184c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_USART3_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_USART3_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_USART3_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_USART3_UART_Init+0x4c>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_USART3_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_USART3_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_USART3_UART_Init+0x4c>)
 8001874:	f007 ff56 	bl	8009724 <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800187e:	f001 f965 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20005ba0 	.word	0x20005ba0
 800188c:	40004800 	.word	0x40004800

08001890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_DMA_Init+0x3c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <MX_DMA_Init+0x3c>)
 80018a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_DMA_Init+0x3c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2105      	movs	r1, #5
 80018b6:	200e      	movs	r0, #14
 80018b8:	f004 fcc0 	bl	800623c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80018bc:	200e      	movs	r0, #14
 80018be:	f004 fcd9 	bl	8006274 <HAL_NVIC_EnableIRQ>

}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800

080018d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	4b45      	ldr	r3, [pc, #276]	; (8001a00 <MX_GPIO_Init+0x130>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a44      	ldr	r2, [pc, #272]	; (8001a00 <MX_GPIO_Init+0x130>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b42      	ldr	r3, [pc, #264]	; (8001a00 <MX_GPIO_Init+0x130>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b3e      	ldr	r3, [pc, #248]	; (8001a00 <MX_GPIO_Init+0x130>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a3d      	ldr	r2, [pc, #244]	; (8001a00 <MX_GPIO_Init+0x130>)
 800190c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <MX_GPIO_Init+0x130>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	4b37      	ldr	r3, [pc, #220]	; (8001a00 <MX_GPIO_Init+0x130>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a36      	ldr	r2, [pc, #216]	; (8001a00 <MX_GPIO_Init+0x130>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b34      	ldr	r3, [pc, #208]	; (8001a00 <MX_GPIO_Init+0x130>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <MX_GPIO_Init+0x130>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a2f      	ldr	r2, [pc, #188]	; (8001a00 <MX_GPIO_Init+0x130>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <MX_GPIO_Init+0x130>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	2101      	movs	r1, #1
 800195a:	482a      	ldr	r0, [pc, #168]	; (8001a04 <MX_GPIO_Init+0x134>)
 800195c:	f005 f9b4 	bl	8006cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	2160      	movs	r1, #96	; 0x60
 8001964:	4828      	ldr	r0, [pc, #160]	; (8001a08 <MX_GPIO_Init+0x138>)
 8001966:	f005 f9af 	bl	8006cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800196a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001970:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	4820      	ldr	r0, [pc, #128]	; (8001a04 <MX_GPIO_Init+0x134>)
 8001982:	f004 fff5 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_ENABLE_Pin */
  GPIO_InitStruct.Pin = WIFI_ENABLE_Pin;
 8001986:	2301      	movs	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	2301      	movs	r3, #1
 800198c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4819      	ldr	r0, [pc, #100]	; (8001a04 <MX_GPIO_Init+0x134>)
 800199e:	f004 ffe7 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019a2:	230c      	movs	r3, #12
 80019a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019b2:	2307      	movs	r3, #7
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	4812      	ldr	r0, [pc, #72]	; (8001a08 <MX_GPIO_Init+0x138>)
 80019be:	f004 ffd7 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ULTRASONIC_TRIGGER_Pin;
 80019c2:	2360      	movs	r3, #96	; 0x60
 80019c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	480b      	ldr	r0, [pc, #44]	; (8001a08 <MX_GPIO_Init+0x138>)
 80019da:	f004 ffc9 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pin : INFRARED_SENSOR_Pin */
  GPIO_InitStruct.Pin = INFRARED_SENSOR_Pin;
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INFRARED_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <MX_GPIO_Init+0x134>)
 80019f2:	f004 ffbd 	bl	8006970 <HAL_GPIO_Init>

}
 80019f6:	bf00      	nop
 80019f8:	3728      	adds	r7, #40	; 0x28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40020800 	.word	0x40020800
 8001a08:	40020000 	.word	0x40020000

08001a0c <MAIN_DIFFDRIVE_Init>:

/* USER CODE BEGIN 4 */

static void MAIN_DIFFDRIVE_Init(void){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0

	float Ts= 0.01;
 8001a12:	4b57      	ldr	r3, [pc, #348]	; (8001b70 <MAIN_DIFFDRIVE_Init+0x164>)
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
	int max_sample= 1000;
 8001a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1a:	623b      	str	r3, [r7, #32]

	/* Timing parameters */
	hdiffdrive.Init.timing_htim= &htim3;
 8001a1c:	4b55      	ldr	r3, [pc, #340]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a1e:	4a56      	ldr	r2, [pc, #344]	; (8001b78 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001a20:	649a      	str	r2, [r3, #72]	; 0x48
	hdiffdrive.Init.timing_time_step= Ts;
 8001a22:	4a54      	ldr	r2, [pc, #336]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	64d3      	str	r3, [r2, #76]	; 0x4c

	/* Sensors parameters */
	hdiffdrive.Init.encoder_htim[left ]= &htim2;
 8001a28:	4b52      	ldr	r3, [pc, #328]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a2a:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <MAIN_DIFFDRIVE_Init+0x170>)
 8001a2c:	639a      	str	r2, [r3, #56]	; 0x38
	hdiffdrive.Init.encoder_htim[right]= &htim5;
 8001a2e:	4b51      	ldr	r3, [pc, #324]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a30:	4a53      	ldr	r2, [pc, #332]	; (8001b80 <MAIN_DIFFDRIVE_Init+0x174>)
 8001a32:	63da      	str	r2, [r3, #60]	; 0x3c
	hdiffdrive.Init.encoder_channel[left ]= TIM_CHANNEL_1;
 8001a34:	4b4f      	ldr	r3, [pc, #316]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	641a      	str	r2, [r3, #64]	; 0x40
	hdiffdrive.Init.encoder_channel[right]= TIM_CHANNEL_1;
 8001a3a:	4b4e      	ldr	r3, [pc, #312]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	645a      	str	r2, [r3, #68]	; 0x44

	hdiffdrive.Init.encoder_resolution[left ]= 1900; //1920; // Number of step each wheel revolution
 8001a40:	4b4c      	ldr	r3, [pc, #304]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a42:	4a50      	ldr	r2, [pc, #320]	; (8001b84 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a44:	65da      	str	r2, [r3, #92]	; 0x5c
	hdiffdrive.Init.encoder_resolution[right]= 1900; //1920;
 8001a46:	4b4b      	ldr	r3, [pc, #300]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a48:	4a4e      	ldr	r2, [pc, #312]	; (8001b84 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a4a:	661a      	str	r2, [r3, #96]	; 0x60

	/* Motors parameters */
	hdiffdrive.Init.motor_htim[left ][forward ]= &htim1;
 8001a4c:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a4e:	4a4e      	ldr	r2, [pc, #312]	; (8001b88 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001a50:	601a      	str	r2, [r3, #0]
	hdiffdrive.Init.motor_htim[left ][backward]= &htim1;
 8001a52:	4b48      	ldr	r3, [pc, #288]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a54:	4a4c      	ldr	r2, [pc, #304]	; (8001b88 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001a56:	605a      	str	r2, [r3, #4]
	hdiffdrive.Init.motor_htim[right][forward ]= &htim1;
 8001a58:	4b46      	ldr	r3, [pc, #280]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a5a:	4a4b      	ldr	r2, [pc, #300]	; (8001b88 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001a5c:	609a      	str	r2, [r3, #8]
	hdiffdrive.Init.motor_htim[right][backward]= &htim1;
 8001a5e:	4b45      	ldr	r3, [pc, #276]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a60:	4a49      	ldr	r2, [pc, #292]	; (8001b88 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001a62:	60da      	str	r2, [r3, #12]

	hdiffdrive.Init.motor_pwm_channel[left ][forward ]= TIM_CHANNEL_1;
 8001a64:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
	hdiffdrive.Init.motor_pwm_channel[left ][backward]= TIM_CHANNEL_2;
 8001a6a:	4b42      	ldr	r3, [pc, #264]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	615a      	str	r2, [r3, #20]
	hdiffdrive.Init.motor_pwm_channel[right][forward ]= TIM_CHANNEL_3;
 8001a70:	4b40      	ldr	r3, [pc, #256]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a72:	2208      	movs	r2, #8
 8001a74:	619a      	str	r2, [r3, #24]
	hdiffdrive.Init.motor_pwm_channel[right][backward]= TIM_CHANNEL_4;
 8001a76:	4b3f      	ldr	r3, [pc, #252]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a78:	220c      	movs	r2, #12
 8001a7a:	61da      	str	r2, [r3, #28]

	hdiffdrive.Init.motor_max_voltage[left ]= 	  MOTOR_MAX_VOLTAGE;
 8001a7c:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a7e:	4a43      	ldr	r2, [pc, #268]	; (8001b8c <MAIN_DIFFDRIVE_Init+0x180>)
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28
	hdiffdrive.Init.motor_max_voltage[right]= 	  MOTOR_MAX_VOLTAGE;
 8001a82:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a84:	4a41      	ldr	r2, [pc, #260]	; (8001b8c <MAIN_DIFFDRIVE_Init+0x180>)
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
	hdiffdrive.Init.motor_min_voltage[left ]= 	  MOTOR_MIN_VOLTAGE;
 8001a88:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a8e:	631a      	str	r2, [r3, #48]	; 0x30
	hdiffdrive.Init.motor_min_voltage[right]= 	  MOTOR_MIN_VOLTAGE;
 8001a90:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a96:	635a      	str	r2, [r3, #52]	; 0x34
	hdiffdrive.Init.motor_supply_voltage[left]=   SUPPLY_VOLTAGE;
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a9a:	4a3c      	ldr	r2, [pc, #240]	; (8001b8c <MAIN_DIFFDRIVE_Init+0x180>)
 8001a9c:	621a      	str	r2, [r3, #32]
	hdiffdrive.Init.motor_supply_voltage[right]=  SUPPLY_VOLTAGE;
 8001a9e:	4b35      	ldr	r3, [pc, #212]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001aa0:	4a3a      	ldr	r2, [pc, #232]	; (8001b8c <MAIN_DIFFDRIVE_Init+0x180>)
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24

	/* Feed-forward law parameters */
	hdiffdrive.Init.control_fdfrwrd_arma_AR[left ]= AR_L;
 8001aa4:	4a3a      	ldr	r2, [pc, #232]	; (8001b90 <MAIN_DIFFDRIVE_Init+0x184>)
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ab0:	4a30      	ldr	r2, [pc, #192]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	6713      	str	r3, [r2, #112]	; 0x70
	hdiffdrive.Init.control_fdfrwrd_arma_AR[right]= AR_R;
 8001ab8:	4a36      	ldr	r2, [pc, #216]	; (8001b94 <MAIN_DIFFDRIVE_Init+0x188>)
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ac0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ac4:	4a2b      	ldr	r2, [pc, #172]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001ac6:	f107 0308 	add.w	r3, r7, #8
 8001aca:	6753      	str	r3, [r2, #116]	; 0x74
	hdiffdrive.Init.control_fdfrwrd_arma_MA[left ]= MA_L;
 8001acc:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <MAIN_DIFFDRIVE_Init+0x18c>)
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	4a28      	ldr	r2, [pc, #160]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	6793      	str	r3, [r2, #120]	; 0x78
	hdiffdrive.Init.control_fdfrwrd_arma_MA[right]= MA_R;
 8001ad6:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <MAIN_DIFFDRIVE_Init+0x190>)
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001adc:	463b      	mov	r3, r7
 8001ade:	67d3      	str	r3, [r2, #124]	; 0x7c
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[left ]= N_AR_L;
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[right]= N_AR_R;
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001aea:	2203      	movs	r2, #3
 8001aec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[left ]= N_MA_L;
 8001af0:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[right]= N_MA_R;
 8001af8:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	hdiffdrive.Init.control_fdfrwrd_arma_tau[left ]= TAU_L;
 8001b00:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001b02:	2202      	movs	r2, #2
 8001b04:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	hdiffdrive.Init.control_fdfrwrd_arma_tau[right]= TAU_R;
 8001b08:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	/* PID law parameters */
	hdiffdrive.Init.control_pid_P[left ]= 5*0.00133180775219883*1e1*5e2;   // 0.50835*0.08; // 0.40835;
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001b12:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <MAIN_DIFFDRIVE_Init+0x194>)
 8001b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	hdiffdrive.Init.control_pid_P[right]= 5*0.00133180775219883*1e1*5e2;   // 0.50835*0.08; // 0.40835
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001b1a:	4a21      	ldr	r2, [pc, #132]	; (8001ba0 <MAIN_DIFFDRIVE_Init+0x194>)
 8001b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	hdiffdrive.Init.control_pid_I[left ]= 15.64986485011565*1e-3*5e2; // 0.57005*0.004; // 0.27005;
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001b22:	4a20      	ldr	r2, [pc, #128]	; (8001ba4 <MAIN_DIFFDRIVE_Init+0x198>)
 8001b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	hdiffdrive.Init.control_pid_I[right]= 15.64986485011565*1e-3*5e2; // 0.57005*0.004; // 0.27005;
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001b2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <MAIN_DIFFDRIVE_Init+0x198>)
 8001b2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	hdiffdrive.Init.control_pid_D[left ]= 0.5*0;
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	hdiffdrive.Init.control_pid_D[right]= 0.5*0;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	/* History parameters */
	hdiffdrive.Init.history_max_sample= max_sample;
 8001b44:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	/* Mechanical parameters (from real model) */
	hdiffdrive.Init.mech_prmtr_l=                 0.155/2;	// Distance between wheels
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001b4e:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <MAIN_DIFFDRIVE_Init+0x19c>)
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54
	hdiffdrive.Init.mech_prmtr_r=                 0.069/2; // Wheels radius
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001b54:	4a15      	ldr	r2, [pc, #84]	; (8001bac <MAIN_DIFFDRIVE_Init+0x1a0>)
 8001b56:	651a      	str	r2, [r3, #80]	; 0x50
	hdiffdrive.Init.mech_prmtr_max_wheel_speed=   16;//20;  // Radiant each seconds (rad/s), DC motor and gears specifics
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001b5a:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8001b5e:	659a      	str	r2, [r3, #88]	; 0x58

	DIFFDRIVE_Init(&hdiffdrive);
 8001b60:	4804      	ldr	r0, [pc, #16]	; (8001b74 <MAIN_DIFFDRIVE_Init+0x168>)
 8001b62:	f001 fd15 	bl	8003590 <DIFFDRIVE_Init>

}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	; 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	3c23d70a 	.word	0x3c23d70a
 8001b74:	20007048 	.word	0x20007048
 8001b78:	20005d48 	.word	0x20005d48
 8001b7c:	20005f40 	.word	0x20005f40
 8001b80:	20005c94 	.word	0x20005c94
 8001b84:	44ed8000 	.word	0x44ed8000
 8001b88:	20005e1c 	.word	0x20005e1c
 8001b8c:	40e66666 	.word	0x40e66666
 8001b90:	08013b20 	.word	0x08013b20
 8001b94:	08013b2c 	.word	0x08013b2c
 8001b98:	3a486a06 	.word	0x3a486a06
 8001b9c:	3a4330b9 	.word	0x3a4330b9
 8001ba0:	42052e47 	.word	0x42052e47
 8001ba4:	40fa65d9 	.word	0x40fa65d9
 8001ba8:	3d9eb852 	.word	0x3d9eb852
 8001bac:	3d0d4fdf 	.word	0x3d0d4fdf

08001bb0 <MAIN_ULTRASONIC_Init>:


static void MAIN_ULTRASONIC_Init(void){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0

	hultra.Init.htim=           		&htim12;
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <MAIN_ULTRASONIC_Init+0x3c>)
 8001bb6:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <MAIN_ULTRASONIC_Init+0x40>)
 8001bb8:	601a      	str	r2, [r3, #0]
	hultra.Init.history_lenght= 		100;
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MAIN_ULTRASONIC_Init+0x3c>)
 8001bbc:	2264      	movs	r2, #100	; 0x64
 8001bbe:	809a      	strh	r2, [r3, #4]
	hultra.Init.io_trig_GPIOx=   	    ULTRASONIC_TRIGGER_GPIO_Port;
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <MAIN_ULTRASONIC_Init+0x3c>)
 8001bc2:	4a0c      	ldr	r2, [pc, #48]	; (8001bf4 <MAIN_ULTRASONIC_Init+0x44>)
 8001bc4:	609a      	str	r2, [r3, #8]
	hultra.Init.io_trig_Pin=   			ULTRASONIC_TRIGGER_Pin;
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MAIN_ULTRASONIC_Init+0x3c>)
 8001bc8:	2240      	movs	r2, #64	; 0x40
 8001bca:	60da      	str	r2, [r3, #12]
	hultra.Init.io_echo_GPIOx=  		ULTRASONIC_ECHO_GPIO_Port;
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <MAIN_ULTRASONIC_Init+0x3c>)
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <MAIN_ULTRASONIC_Init+0x48>)
 8001bd0:	611a      	str	r2, [r3, #16]
	hultra.Init.io_echo_Pin=			ULTRASONIC_ECHO_Pin;
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MAIN_ULTRASONIC_Init+0x3c>)
 8001bd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bd8:	615a      	str	r2, [r3, #20]
	hultra.Init.io_echo_IC_tim_channel= TIM_CHANNEL_1;
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <MAIN_ULTRASONIC_Init+0x3c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]

	ULTRASONIC_Init(&hultra);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <MAIN_ULTRASONIC_Init+0x3c>)
 8001be2:	f003 ffad 	bl	8005b40 <ULTRASONIC_Init>

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20005ee8 	.word	0x20005ee8
 8001bf0:	20006f94 	.word	0x20006f94
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	40020400 	.word	0x40020400

08001bfc <MAIN_MAF_Init>:


// Moving Average Filter initialization --------------------------------------------- //
static void MAIN_MAF_Init(void){
 8001bfc:	b5b0      	push	{r4, r5, r7, lr}
 8001bfe:	b08c      	sub	sp, #48	; 0x30
 8001c00:	af00      	add	r7, sp, #0

	int filtr_a_size=  15; // 15;
 8001c02:	230f      	movs	r3, #15
 8001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
	int filtr_th_size= 7; // 7;
 8001c06:	2307      	movs	r3, #7
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28

	int filtr_a_size_2=  12;//50;
 8001c0a:	230c      	movs	r3, #12
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
	int filtr_th_size_2= 12;//50;
 8001c0e:	230c      	movs	r3, #12
 8001c10:	623b      	str	r3, [r7, #32]

	int filtr_infrared_size= 100;
 8001c12:	2364      	movs	r3, #100	; 0x64
 8001c14:	61fb      	str	r3, [r7, #28]

	// Null pointer to use a MAF without weights
	void* weights_buff= NULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]

	// Creating filters
	hfilter_a		 = MAF_Create(filtr_a_size, 	   weights_buff);
 8001c1a:	4c27      	ldr	r4, [pc, #156]	; (8001cb8 <MAIN_MAF_Init+0xbc>)
 8001c1c:	463b      	mov	r3, r7
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 f9e0 	bl	8004fe8 <MAF_Create>
 8001c28:	4625      	mov	r5, r4
 8001c2a:	463c      	mov	r4, r7
 8001c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c34:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_th		 = MAF_Create(filtr_th_size, 	   weights_buff);
 8001c38:	4c20      	ldr	r4, [pc, #128]	; (8001cbc <MAIN_MAF_Init+0xc0>)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 f9d1 	bl	8004fe8 <MAF_Create>
 8001c46:	4625      	mov	r5, r4
 8001c48:	463c      	mov	r4, r7
 8001c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c52:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_a_2		 = MAF_Create(filtr_a_size_2,	   weights_buff);
 8001c56:	4c1a      	ldr	r4, [pc, #104]	; (8001cc0 <MAIN_MAF_Init+0xc4>)
 8001c58:	463b      	mov	r3, r7
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 f9c2 	bl	8004fe8 <MAF_Create>
 8001c64:	4625      	mov	r5, r4
 8001c66:	463c      	mov	r4, r7
 8001c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c70:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_th_2     = MAF_Create(filtr_th_size_2,     weights_buff);
 8001c74:	4c13      	ldr	r4, [pc, #76]	; (8001cc4 <MAIN_MAF_Init+0xc8>)
 8001c76:	463b      	mov	r3, r7
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	6a39      	ldr	r1, [r7, #32]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 f9b3 	bl	8004fe8 <MAF_Create>
 8001c82:	4625      	mov	r5, r4
 8001c84:	463c      	mov	r4, r7
 8001c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c8e:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_infrared = MAF_Create(filtr_infrared_size, weights_buff);
 8001c92:	4c0d      	ldr	r4, [pc, #52]	; (8001cc8 <MAIN_MAF_Init+0xcc>)
 8001c94:	463b      	mov	r3, r7
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	69f9      	ldr	r1, [r7, #28]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 f9a4 	bl	8004fe8 <MAF_Create>
 8001ca0:	4625      	mov	r5, r4
 8001ca2:	463c      	mov	r4, r7
 8001ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cac:	e885 0003 	stmia.w	r5, {r0, r1}

}
 8001cb0:	bf00      	nop
 8001cb2:	3730      	adds	r7, #48	; 0x30
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb8:	2000733c 	.word	0x2000733c
 8001cbc:	20005dfc 	.word	0x20005dfc
 8001cc0:	20005f28 	.word	0x20005f28
 8001cc4:	20005ed0 	.word	0x20005ed0
 8001cc8:	20004b34 	.word	0x20004b34

08001ccc <MAIN_SERVO_Init>:


static void MAIN_SERVO_Init(void){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0

	hservo.Init.htim=        &htim8;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <MAIN_SERVO_Init+0x1c>)
 8001cd2:	4a06      	ldr	r2, [pc, #24]	; (8001cec <MAIN_SERVO_Init+0x20>)
 8001cd4:	601a      	str	r2, [r3, #0]
	hservo.Init.pwm_channel= TIM_CHANNEL_1;
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <MAIN_SERVO_Init+0x1c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	605a      	str	r2, [r3, #4]

	SERVO_Init(&hservo);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <MAIN_SERVO_Init+0x1c>)
 8001cde:	f003 fdb7 	bl	8005850 <SERVO_Init>

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20005c14 	.word	0x20005c14
 8001cec:	20004b4c 	.word	0x20004b4c

08001cf0 <StartControlDiffDrive>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartControlDiffDrive */
void StartControlDiffDrive(void *argument)
{
 8001cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf4:	b0e0      	sub	sp, #384	; 0x180
 8001cf6:	af1e      	add	r7, sp, #120	; 0x78
 8001cf8:	6678      	str	r0, [r7, #100]	; 0x64

	__HAL_TIM_SET_COUNTER(&htim7,0);

#endif

	bool first= true;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	float tmp_P= hdiffdrive.control[left].pid.P;
 8001d00:	4bc5      	ldr	r3, [pc, #788]	; (8002018 <StartControlDiffDrive+0x328>)
 8001d02:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001d06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	float tmp_I= hdiffdrive.control[left].pid.I;
 8001d0a:	4bc3      	ldr	r3, [pc, #780]	; (8002018 <StartControlDiffDrive+0x328>)
 8001d0c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8001d10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	float delta_a_loc, delta_th_loc;

	// Tracking error threshold
	float e_thr= 35*3e-2;
 8001d14:	4bc1      	ldr	r3, [pc, #772]	; (800201c <StartControlDiffDrive+0x32c>)
 8001d16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	// Start control
	DIFFDRIVE_TrackingStart();
 8001d1a:	f003 f901 	bl	8004f20 <DIFFDRIVE_TrackingStart>
#ifdef TEST_TIMING
	  __HAL_TIM_SET_COUNTER(&htim7,0);
#endif

	  // Tracking error flag enabled
	  if( tracking_error_flag ){
 8001d1e:	4bc0      	ldr	r3, [pc, #768]	; (8002020 <StartControlDiffDrive+0x330>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 8197 	beq.w	8002058 <StartControlDiffDrive+0x368>

		  // DO SOMETHING AT EXCEPTION END
		  if( !first ){
 8001d2a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001d2e:	f083 0301 	eor.w	r3, r3, #1
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d02f      	beq.n	8001d98 <StartControlDiffDrive+0xa8>
			  DIFFDRIVE_MOTOR_Stop();
 8001d38:	f001 ffc6 	bl	8003cc8 <DIFFDRIVE_MOTOR_Stop>
			  osThreadSuspend(DistanceSensorHandle);
 8001d3c:	4bb9      	ldr	r3, [pc, #740]	; (8002024 <StartControlDiffDrive+0x334>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f008 fc19 	bl	800a578 <osThreadSuspend>
			  osDelay(400);
 8001d46:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001d4a:	f008 fc57 	bl	800a5fc <osDelay>
			  osThreadResume(DistanceSensorHandle);
 8001d4e:	4bb5      	ldr	r3, [pc, #724]	; (8002024 <StartControlDiffDrive+0x334>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f008 fc31 	bl	800a5ba <osThreadResume>

			  DIFFDRIVE_CONTROL_Reset();
 8001d58:	f002 fe32 	bl	80049c0 <DIFFDRIVE_CONTROL_Reset>

			  //MAF_Reset(&hfilter_a, 0);
			  //MAF_Reset(&hfilter_th, 0);
			  MAF_Reset(&hfilter_a_2, 0);
 8001d5c:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8002028 <StartControlDiffDrive+0x338>
 8001d60:	48b2      	ldr	r0, [pc, #712]	; (800202c <StartControlDiffDrive+0x33c>)
 8001d62:	f003 f968 	bl	8005036 <MAF_Reset>
			  MAF_Reset(&hfilter_th_2, 0);
 8001d66:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8002028 <StartControlDiffDrive+0x338>
 8001d6a:	48b1      	ldr	r0, [pc, #708]	; (8002030 <StartControlDiffDrive+0x340>)
 8001d6c:	f003 f963 	bl	8005036 <MAF_Reset>
			  //MAF_Reset(&hfilter_infrared, 0);

			  hdiffdrive.control[left ].pid.P= tmp_P;
 8001d70:	4aa9      	ldr	r2, [pc, #676]	; (8002018 <StartControlDiffDrive+0x328>)
 8001d72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d76:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
			  hdiffdrive.control[right].pid.P= tmp_P;
 8001d7a:	4aa7      	ldr	r2, [pc, #668]	; (8002018 <StartControlDiffDrive+0x328>)
 8001d7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d80:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
			  hdiffdrive.control[left ].pid.I= tmp_I;
 8001d84:	4aa4      	ldr	r2, [pc, #656]	; (8002018 <StartControlDiffDrive+0x328>)
 8001d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d8a:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
			  hdiffdrive.control[right].pid.I= tmp_I;
 8001d8e:	4aa2      	ldr	r2, [pc, #648]	; (8002018 <StartControlDiffDrive+0x328>)
 8001d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d94:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
		  }

		  // Then set first = true
		  first= true;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		  MAF_Update(&hfilter_a_2, delta_a);
 8001d9e:	4ba5      	ldr	r3, [pc, #660]	; (8002034 <StartControlDiffDrive+0x344>)
 8001da0:	edd3 7a00 	vldr	s15, [r3]
 8001da4:	eeb0 0a67 	vmov.f32	s0, s15
 8001da8:	48a0      	ldr	r0, [pc, #640]	; (800202c <StartControlDiffDrive+0x33c>)
 8001daa:	f003 f96c 	bl	8005086 <MAF_Update>
		  delta_a_loc= __MAF_GET_VAL(&hfilter_a_2);
 8001dae:	4b9f      	ldr	r3, [pc, #636]	; (800202c <StartControlDiffDrive+0x33c>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

		  MAF_Update(&hfilter_th_2, delta_th);
 8001db6:	4ba0      	ldr	r3, [pc, #640]	; (8002038 <StartControlDiffDrive+0x348>)
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc0:	489b      	ldr	r0, [pc, #620]	; (8002030 <StartControlDiffDrive+0x340>)
 8001dc2:	f003 f960 	bl	8005086 <MAF_Update>
		  delta_th_loc= __MAF_GET_VAL(&hfilter_th_2);
 8001dc6:	4b9a      	ldr	r3, [pc, #616]	; (8002030 <StartControlDiffDrive+0x340>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

		  // Manage exception when the robot is stuck somehow and cannot keep following the target
		  if( hdiffdrive.control[left].pid.e_prev  >  e_thr || hdiffdrive.control[right].pid.e_prev >  e_thr ||
 8001dce:	4b92      	ldr	r3, [pc, #584]	; (8002018 <StartControlDiffDrive+0x328>)
 8001dd0:	edd3 7a62 	vldr	s15, [r3, #392]	; 0x188
 8001dd4:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001dd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de0:	d422      	bmi.n	8001e28 <StartControlDiffDrive+0x138>
 8001de2:	4b8d      	ldr	r3, [pc, #564]	; (8002018 <StartControlDiffDrive+0x328>)
 8001de4:	edd3 7a7c 	vldr	s15, [r3, #496]	; 0x1f0
 8001de8:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001dec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df4:	d418      	bmi.n	8001e28 <StartControlDiffDrive+0x138>
			  hdiffdrive.control[left].pid.e_prev  < -e_thr || hdiffdrive.control[right].pid.e_prev < -e_thr    ){
 8001df6:	4b88      	ldr	r3, [pc, #544]	; (8002018 <StartControlDiffDrive+0x328>)
 8001df8:	ed93 7a62 	vldr	s14, [r3, #392]	; 0x188
 8001dfc:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001e00:	eef1 7a67 	vneg.f32	s15, s15
		  if( hdiffdrive.control[left].pid.e_prev  >  e_thr || hdiffdrive.control[right].pid.e_prev >  e_thr ||
 8001e04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	d40c      	bmi.n	8001e28 <StartControlDiffDrive+0x138>
			  hdiffdrive.control[left].pid.e_prev  < -e_thr || hdiffdrive.control[right].pid.e_prev < -e_thr    ){
 8001e0e:	4b82      	ldr	r3, [pc, #520]	; (8002018 <StartControlDiffDrive+0x328>)
 8001e10:	ed93 7a7c 	vldr	s14, [r3, #496]	; 0x1f0
 8001e14:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001e18:	eef1 7a67 	vneg.f32	s15, s15
 8001e1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e24:	f140 8183 	bpl.w	800212e <StartControlDiffDrive+0x43e>

			  // Stop other thread
			//  osThreadSuspend(DistanceSensorHandle);

			  /* Move in back direction */
			  float delta_a_tmp=  -delta_a;
 8001e28:	4b82      	ldr	r3, [pc, #520]	; (8002034 <StartControlDiffDrive+0x344>)
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	eef1 7a67 	vneg.f32	s15, s15
 8001e32:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
			  float delta_th_tmp= -delta_th;
 8001e36:	4b80      	ldr	r3, [pc, #512]	; (8002038 <StartControlDiffDrive+0x348>)
 8001e38:	edd3 7a00 	vldr	s15, [r3]
 8001e3c:	eef1 7a67 	vneg.f32	s15, s15
 8001e40:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8

			  hdiffdrive.control[left ].pid.P= tmp_P*0.1;
 8001e44:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001e48:	f7fe fb9e 	bl	8000588 <__aeabi_f2d>
 8001e4c:	a370      	add	r3, pc, #448	; (adr r3, 8002010 <StartControlDiffDrive+0x320>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f7fe fbf1 	bl	8000638 <__aeabi_dmul>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f7fe fee3 	bl	8000c28 <__aeabi_d2f>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4a6c      	ldr	r2, [pc, #432]	; (8002018 <StartControlDiffDrive+0x328>)
 8001e66:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
			  hdiffdrive.control[right].pid.P= tmp_P*0.1;
 8001e6a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001e6e:	f7fe fb8b 	bl	8000588 <__aeabi_f2d>
 8001e72:	a367      	add	r3, pc, #412	; (adr r3, 8002010 <StartControlDiffDrive+0x320>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fbde 	bl	8000638 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	f7fe fed0 	bl	8000c28 <__aeabi_d2f>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4a63      	ldr	r2, [pc, #396]	; (8002018 <StartControlDiffDrive+0x328>)
 8001e8c:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
			  hdiffdrive.control[left ].pid.I= tmp_I*0.1;
 8001e90:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8001e94:	f7fe fb78 	bl	8000588 <__aeabi_f2d>
 8001e98:	a35d      	add	r3, pc, #372	; (adr r3, 8002010 <StartControlDiffDrive+0x320>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fbcb 	bl	8000638 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7fe febd 	bl	8000c28 <__aeabi_d2f>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4a59      	ldr	r2, [pc, #356]	; (8002018 <StartControlDiffDrive+0x328>)
 8001eb2:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
			  hdiffdrive.control[right].pid.I= tmp_I*0.1;
 8001eb6:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8001eba:	f7fe fb65 	bl	8000588 <__aeabi_f2d>
 8001ebe:	a354      	add	r3, pc, #336	; (adr r3, 8002010 <StartControlDiffDrive+0x320>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	f7fe fbb8 	bl	8000638 <__aeabi_dmul>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f7fe feaa 	bl	8000c28 <__aeabi_d2f>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4a50      	ldr	r2, [pc, #320]	; (8002018 <StartControlDiffDrive+0x328>)
 8001ed8:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8

			  for(int j=0; j<100; j++){
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001ee2:	e04d      	b.n	8001f80 <StartControlDiffDrive+0x290>

				  delta_th_tmp= delta_th;
 8001ee4:	4b54      	ldr	r3, [pc, #336]	; (8002038 <StartControlDiffDrive+0x348>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

				  // Keep use filters to smooth trajectory
				  MAF_Update(&hfilter_a_2,  delta_a_tmp);
 8001eec:	ed97 0a37 	vldr	s0, [r7, #220]	; 0xdc
 8001ef0:	484e      	ldr	r0, [pc, #312]	; (800202c <StartControlDiffDrive+0x33c>)
 8001ef2:	f003 f8c8 	bl	8005086 <MAF_Update>
				  MAF_Update(&hfilter_th_2, delta_th_tmp);
 8001ef6:	ed97 0a36 	vldr	s0, [r7, #216]	; 0xd8
 8001efa:	484d      	ldr	r0, [pc, #308]	; (8002030 <StartControlDiffDrive+0x340>)
 8001efc:	f003 f8c3 	bl	8005086 <MAF_Update>

				  delta_a_loc=  __MAF_GET_VAL(&hfilter_a_2);
 8001f00:	4b4a      	ldr	r3, [pc, #296]	; (800202c <StartControlDiffDrive+0x33c>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
				  delta_th_loc= __MAF_GET_VAL(&hfilter_th_2);
 8001f08:	4b49      	ldr	r3, [pc, #292]	; (8002030 <StartControlDiffDrive+0x340>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

				  if( k_ < 1000 ){
 8001f10:	4b4a      	ldr	r3, [pc, #296]	; (800203c <StartControlDiffDrive+0x34c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f18:	da14      	bge.n	8001f44 <StartControlDiffDrive+0x254>
					  delta_a_hist[k_]=  delta_a_tmp;
 8001f1a:	4b48      	ldr	r3, [pc, #288]	; (800203c <StartControlDiffDrive+0x34c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a48      	ldr	r2, [pc, #288]	; (8002040 <StartControlDiffDrive+0x350>)
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001f28:	601a      	str	r2, [r3, #0]
				  	  delta_th_hist[k_]= delta_th_tmp;
 8001f2a:	4b44      	ldr	r3, [pc, #272]	; (800203c <StartControlDiffDrive+0x34c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a45      	ldr	r2, [pc, #276]	; (8002044 <StartControlDiffDrive+0x354>)
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001f38:	601a      	str	r2, [r3, #0]
				  	  k_++;
 8001f3a:	4b40      	ldr	r3, [pc, #256]	; (800203c <StartControlDiffDrive+0x34c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	4a3e      	ldr	r2, [pc, #248]	; (800203c <StartControlDiffDrive+0x34c>)
 8001f42:	6013      	str	r3, [r2, #0]
				  }

				  // Make Tracking step
				  DIFFDRIVE_TrackingStep(delta_a_loc, delta_th_loc);
 8001f44:	edd7 0a3f 	vldr	s1, [r7, #252]	; 0xfc
 8001f48:	ed97 0a40 	vldr	s0, [r7, #256]	; 0x100
 8001f4c:	f002 fffc 	bl	8004f48 <DIFFDRIVE_TrackingStep>

				  if( !(j%10) )
 8001f50:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001f54:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <StartControlDiffDrive+0x358>)
 8001f56:	fb83 2301 	smull	r2, r3, r3, r1
 8001f5a:	109a      	asrs	r2, r3, #2
 8001f5c:	17cb      	asrs	r3, r1, #31
 8001f5e:	1ad2      	subs	r2, r2, r3
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	1aca      	subs	r2, r1, r3
 8001f6a:	2a00      	cmp	r2, #0
 8001f6c:	d103      	bne.n	8001f76 <StartControlDiffDrive+0x286>
					  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001f6e:	2120      	movs	r1, #32
 8001f70:	4836      	ldr	r0, [pc, #216]	; (800204c <StartControlDiffDrive+0x35c>)
 8001f72:	f004 fec2 	bl	8006cfa <HAL_GPIO_TogglePin>
			  for(int j=0; j<100; j++){
 8001f76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001f80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f84:	2b63      	cmp	r3, #99	; 0x63
 8001f86:	ddad      	ble.n	8001ee4 <StartControlDiffDrive+0x1f4>

			  }

			  osThreadSuspend(DistanceSensorHandle);
 8001f88:	4b26      	ldr	r3, [pc, #152]	; (8002024 <StartControlDiffDrive+0x334>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f008 faf3 	bl	800a578 <osThreadSuspend>
			  // Then stop motors and reset
			  DIFFDRIVE_MOTOR_Stop();
 8001f92:	f001 fe99 	bl	8003cc8 <DIFFDRIVE_MOTOR_Stop>

			  hdiffdrive.control[left ].pid.P= tmp_P;
 8001f96:	4a20      	ldr	r2, [pc, #128]	; (8002018 <StartControlDiffDrive+0x328>)
 8001f98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001f9c:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
			  hdiffdrive.control[right].pid.P= tmp_P;
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <StartControlDiffDrive+0x328>)
 8001fa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001fa6:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
			  hdiffdrive.control[left ].pid.I= tmp_I;
 8001faa:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <StartControlDiffDrive+0x328>)
 8001fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fb0:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
			  hdiffdrive.control[right].pid.I= tmp_I;
 8001fb4:	4a18      	ldr	r2, [pc, #96]	; (8002018 <StartControlDiffDrive+0x328>)
 8001fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fba:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8

			  osDelay(460);
 8001fbe:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8001fc2:	f008 fb1b 	bl	800a5fc <osDelay>

			  MAF_Reset(&hfilter_a, 0);
 8001fc6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8002028 <StartControlDiffDrive+0x338>
 8001fca:	4821      	ldr	r0, [pc, #132]	; (8002050 <StartControlDiffDrive+0x360>)
 8001fcc:	f003 f833 	bl	8005036 <MAF_Reset>
			  MAF_Reset(&hfilter_th, 0);
 8001fd0:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8002028 <StartControlDiffDrive+0x338>
 8001fd4:	481f      	ldr	r0, [pc, #124]	; (8002054 <StartControlDiffDrive+0x364>)
 8001fd6:	f003 f82e 	bl	8005036 <MAF_Reset>
			  MAF_Reset(&hfilter_a_2, 0);
 8001fda:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002028 <StartControlDiffDrive+0x338>
 8001fde:	4813      	ldr	r0, [pc, #76]	; (800202c <StartControlDiffDrive+0x33c>)
 8001fe0:	f003 f829 	bl	8005036 <MAF_Reset>
			  MAF_Reset(&hfilter_th_2, 0);
 8001fe4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8002028 <StartControlDiffDrive+0x338>
 8001fe8:	4811      	ldr	r0, [pc, #68]	; (8002030 <StartControlDiffDrive+0x340>)
 8001fea:	f003 f824 	bl	8005036 <MAF_Reset>

			  delta_a_loc= 0;
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			  delta_th_loc= 0;
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

			  // Reset Control
			  DIFFDRIVE_CONTROL_Reset();
 8001ffe:	f002 fcdf 	bl	80049c0 <DIFFDRIVE_CONTROL_Reset>

			  // Restart other thread
			  osThreadResume(DistanceSensorHandle);
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <StartControlDiffDrive+0x334>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f008 fad7 	bl	800a5ba <osThreadResume>
 800200c:	e08f      	b.n	800212e <StartControlDiffDrive+0x43e>
 800200e:	bf00      	nop
 8002010:	9999999a 	.word	0x9999999a
 8002014:	3fb99999 	.word	0x3fb99999
 8002018:	20007048 	.word	0x20007048
 800201c:	3f866666 	.word	0x3f866666
 8002020:	20000000 	.word	0x20000000
 8002024:	20005c30 	.word	0x20005c30
 8002028:	00000000 	.word	0x00000000
 800202c:	20005f28 	.word	0x20005f28
 8002030:	20005ed0 	.word	0x20005ed0
 8002034:	20000208 	.word	0x20000208
 8002038:	2000020c 	.word	0x2000020c
 800203c:	20000210 	.word	0x20000210
 8002040:	20004c00 	.word	0x20004c00
 8002044:	20005ff4 	.word	0x20005ff4
 8002048:	66666667 	.word	0x66666667
 800204c:	40020000 	.word	0x40020000
 8002050:	2000733c 	.word	0x2000733c
 8002054:	20005dfc 	.word	0x20005dfc
		  }
	  }
	  // Tracking error flag disabled, when robot is really near an obstacle
	  else{
		  // DO SOMETHING AT EXCEPTION START
		  if(first){
 8002058:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800205c:	2b00      	cmp	r3, #0
 800205e:	d04b      	beq.n	80020f8 <StartControlDiffDrive+0x408>

			  hdiffdrive.control[left ].pid.P= tmp_P*0.1;
 8002060:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8002064:	f7fe fa90 	bl	8000588 <__aeabi_f2d>
 8002068:	a37d      	add	r3, pc, #500	; (adr r3, 8002260 <StartControlDiffDrive+0x570>)
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	f7fe fae3 	bl	8000638 <__aeabi_dmul>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f7fe fdd5 	bl	8000c28 <__aeabi_d2f>
 800207e:	4603      	mov	r3, r0
 8002080:	4a79      	ldr	r2, [pc, #484]	; (8002268 <StartControlDiffDrive+0x578>)
 8002082:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
			  hdiffdrive.control[right].pid.P= tmp_P*0.1;
 8002086:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800208a:	f7fe fa7d 	bl	8000588 <__aeabi_f2d>
 800208e:	a374      	add	r3, pc, #464	; (adr r3, 8002260 <StartControlDiffDrive+0x570>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f7fe fad0 	bl	8000638 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f7fe fdc2 	bl	8000c28 <__aeabi_d2f>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4a70      	ldr	r2, [pc, #448]	; (8002268 <StartControlDiffDrive+0x578>)
 80020a8:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
			  hdiffdrive.control[left ].pid.I= tmp_I*0.1;
 80020ac:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80020b0:	f7fe fa6a 	bl	8000588 <__aeabi_f2d>
 80020b4:	a36a      	add	r3, pc, #424	; (adr r3, 8002260 <StartControlDiffDrive+0x570>)
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	f7fe fabd 	bl	8000638 <__aeabi_dmul>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	f7fe fdaf 	bl	8000c28 <__aeabi_d2f>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a66      	ldr	r2, [pc, #408]	; (8002268 <StartControlDiffDrive+0x578>)
 80020ce:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
			  hdiffdrive.control[right].pid.I= tmp_I*0.1;
 80020d2:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80020d6:	f7fe fa57 	bl	8000588 <__aeabi_f2d>
 80020da:	a361      	add	r3, pc, #388	; (adr r3, 8002260 <StartControlDiffDrive+0x570>)
 80020dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e0:	f7fe faaa 	bl	8000638 <__aeabi_dmul>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	f7fe fd9c 	bl	8000c28 <__aeabi_d2f>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4a5d      	ldr	r2, [pc, #372]	; (8002268 <StartControlDiffDrive+0x578>)
 80020f4:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
		  }

		  // Then set first = false
		  first= false;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		  MAF_Update(&hfilter_a_2,  delta_a);
 80020fe:	4b5b      	ldr	r3, [pc, #364]	; (800226c <StartControlDiffDrive+0x57c>)
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	eeb0 0a67 	vmov.f32	s0, s15
 8002108:	4859      	ldr	r0, [pc, #356]	; (8002270 <StartControlDiffDrive+0x580>)
 800210a:	f002 ffbc 	bl	8005086 <MAF_Update>
		  MAF_Update(&hfilter_th_2, delta_th);
 800210e:	4b59      	ldr	r3, [pc, #356]	; (8002274 <StartControlDiffDrive+0x584>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	eeb0 0a67 	vmov.f32	s0, s15
 8002118:	4857      	ldr	r0, [pc, #348]	; (8002278 <StartControlDiffDrive+0x588>)
 800211a:	f002 ffb4 	bl	8005086 <MAF_Update>

		  delta_a_loc=  __MAF_GET_VAL(&hfilter_a_2);
 800211e:	4b54      	ldr	r3, [pc, #336]	; (8002270 <StartControlDiffDrive+0x580>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		  delta_th_loc= __MAF_GET_VAL(&hfilter_th_2);
 8002126:	4b54      	ldr	r3, [pc, #336]	; (8002278 <StartControlDiffDrive+0x588>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  }


	  delta_a_hist [k_%1000]= delta_a;
 800212e:	4b53      	ldr	r3, [pc, #332]	; (800227c <StartControlDiffDrive+0x58c>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	4b53      	ldr	r3, [pc, #332]	; (8002280 <StartControlDiffDrive+0x590>)
 8002134:	fb83 1302 	smull	r1, r3, r3, r2
 8002138:	1199      	asrs	r1, r3, #6
 800213a:	17d3      	asrs	r3, r2, #31
 800213c:	1acb      	subs	r3, r1, r3
 800213e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	4a48      	ldr	r2, [pc, #288]	; (800226c <StartControlDiffDrive+0x57c>)
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	494d      	ldr	r1, [pc, #308]	; (8002284 <StartControlDiffDrive+0x594>)
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	601a      	str	r2, [r3, #0]
	  delta_th_hist[k_%1000]= delta_th;
 8002154:	4b49      	ldr	r3, [pc, #292]	; (800227c <StartControlDiffDrive+0x58c>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b49      	ldr	r3, [pc, #292]	; (8002280 <StartControlDiffDrive+0x590>)
 800215a:	fb83 1302 	smull	r1, r3, r3, r2
 800215e:	1199      	asrs	r1, r3, #6
 8002160:	17d3      	asrs	r3, r2, #31
 8002162:	1acb      	subs	r3, r1, r3
 8002164:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	4a41      	ldr	r2, [pc, #260]	; (8002274 <StartControlDiffDrive+0x584>)
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	4945      	ldr	r1, [pc, #276]	; (8002288 <StartControlDiffDrive+0x598>)
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	601a      	str	r2, [r3, #0]
	  k_++;
 800217a:	4b40      	ldr	r3, [pc, #256]	; (800227c <StartControlDiffDrive+0x58c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	4a3e      	ldr	r2, [pc, #248]	; (800227c <StartControlDiffDrive+0x58c>)
 8002182:	6013      	str	r3, [r2, #0]

	  // Make normal step of trajectory tracking
	  DIFFDRIVE_TrackingStep(delta_a_loc, delta_th_loc);
 8002184:	edd7 0a3f 	vldr	s1, [r7, #252]	; 0xfc
 8002188:	ed97 0a40 	vldr	s0, [r7, #256]	; 0x100
 800218c:	f002 fedc 	bl	8004f48 <DIFFDRIVE_TrackingStep>
	  if( i<20 )
		  tmp_var[i++]= __HAL_TIM_GET_COUNTER(&htim7);
#endif

	  // If blue button is pressed
	  if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8002190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002194:	483d      	ldr	r0, [pc, #244]	; (800228c <StartControlDiffDrive+0x59c>)
 8002196:	f004 fd7f 	bl	8006c98 <HAL_GPIO_ReadPin>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	f47f adbe 	bne.w	8001d1e <StartControlDiffDrive+0x2e>

		  // Stop other thread while sending values
		  osThreadSuspend(DistanceSensorHandle);
 80021a2:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <StartControlDiffDrive+0x5a0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f008 f9e6 	bl	800a578 <osThreadSuspend>

		  DIFFDRIVE_HISTORY_TypeDef tmphist= hdiffdrive.history;
 80021ac:	4b2e      	ldr	r3, [pc, #184]	; (8002268 <StartControlDiffDrive+0x578>)
 80021ae:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 80021b2:	f503 750a 	add.w	r5, r3, #552	; 0x228
 80021b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021be:	e884 0003 	stmia.w	r4, {r0, r1}

		  // Stop control
		  DIFFDRIVE_TrackingStop();
 80021c2:	f002 febb 	bl	8004f3c <DIFFDRIVE_TrackingStop>

		  // Repeat forever
		  for(;;){
			  // Enable WIFI to send/receive values
			  HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_SET);
 80021c6:	2201      	movs	r2, #1
 80021c8:	2101      	movs	r1, #1
 80021ca:	4830      	ldr	r0, [pc, #192]	; (800228c <StartControlDiffDrive+0x59c>)
 80021cc:	f004 fd7c 	bl	8006cc8 <HAL_GPIO_WritePin>

			  // Wait for ESP boot
			  HAL_Delay(3000);
 80021d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80021d4:	f003 ff56 	bl	8006084 <HAL_Delay>

			  // Rapidly flash led to show MCU ready to send values
			  for(int i=0; i<20; i++){
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80021de:	e00b      	b.n	80021f8 <StartControlDiffDrive+0x508>
				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80021e0:	2120      	movs	r1, #32
 80021e2:	482c      	ldr	r0, [pc, #176]	; (8002294 <StartControlDiffDrive+0x5a4>)
 80021e4:	f004 fd89 	bl	8006cfa <HAL_GPIO_TogglePin>
				  HAL_Delay(50);
 80021e8:	2032      	movs	r0, #50	; 0x32
 80021ea:	f003 ff4b 	bl	8006084 <HAL_Delay>
			  for(int i=0; i<20; i++){
 80021ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f2:	3301      	adds	r3, #1
 80021f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80021f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021fc:	2b13      	cmp	r3, #19
 80021fe:	ddef      	ble.n	80021e0 <StartControlDiffDrive+0x4f0>
			  }

			  // Wait for 10 received chars
			  char ch[10];
			  HAL_UART_Receive(&huart3, (uint8_t*) ch, sizeof(ch), HAL_MAX_DELAY);
 8002200:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002208:	220a      	movs	r2, #10
 800220a:	4823      	ldr	r0, [pc, #140]	; (8002298 <StartControlDiffDrive+0x5a8>)
 800220c:	f007 fb76 	bl	80098fc <HAL_UART_Receive>
			  // Wait until button is pressed again
			  //while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) )
			  //		;

			  // Wait a bit
			  osDelay(2000);
 8002210:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002214:	f008 f9f2 	bl	800a5fc <osDelay>

			  // Number of saved samples
			  uint32_t N_sample;
			  if( tmphist.sample_cnt < tmphist.max_sample )
 8002218:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800221c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002220:	429a      	cmp	r2, r3
 8002222:	d204      	bcs.n	800222e <StartControlDiffDrive+0x53e>
				  N_sample=  tmphist.sample_cnt;
 8002224:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002228:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800222c:	e003      	b.n	8002236 <StartControlDiffDrive+0x546>
			  else
				  N_sample=  tmphist.max_sample;
 800222e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002232:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

			  // First values send is the actual number of samples
			  DATASTREAM_RTOS_SendValue(stream_on_matlab, 1, (double)N_sample);
 8002236:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800223a:	f7fe f983 	bl	8000544 <__aeabi_ui2d>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	2101      	movs	r1, #1
 8002244:	2000      	movs	r0, #0
 8002246:	f000 ffef 	bl	8003228 <DATASTREAM_RTOS_SendValue>
			  // Bit of transfer delay
			  osDelay(8);
 800224a:	2008      	movs	r0, #8
 800224c:	f008 f9d6 	bl	800a5fc <osDelay>

			  // Init History Get function
			  DIFFDRIVE_HISTORY_Get_Init();
 8002250:	f002 fb2e 	bl	80048b0 <DIFFDRIVE_HISTORY_Get_Init>

			  for(int k= 0; k < N_sample; k++){
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800225a:	e0ee      	b.n	800243a <StartControlDiffDrive+0x74a>
 800225c:	f3af 8000 	nop.w
 8002260:	9999999a 	.word	0x9999999a
 8002264:	3fb99999 	.word	0x3fb99999
 8002268:	20007048 	.word	0x20007048
 800226c:	20000208 	.word	0x20000208
 8002270:	20005f28 	.word	0x20005f28
 8002274:	2000020c 	.word	0x2000020c
 8002278:	20005ed0 	.word	0x20005ed0
 800227c:	20000210 	.word	0x20000210
 8002280:	10624dd3 	.word	0x10624dd3
 8002284:	20004c00 	.word	0x20004c00
 8002288:	20005ff4 	.word	0x20005ff4
 800228c:	40020800 	.word	0x40020800
 8002290:	20005c30 	.word	0x20005c30
 8002294:	40020000 	.word	0x40020000
 8002298:	20005ba0 	.word	0x20005ba0
				  // Temporary variables
				  DIFFDRIVE_STATE_TypeDef state_measure, state_target;

				  // Get one state sample from history
				  DIFFDRIVE_HISTORY_Get_Sample(&state_measure, &state_target);
 800229c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80022a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f002 fb2a 	bl	8004900 <DIFFDRIVE_HISTORY_Get_Sample>

				  // Send values to serial connected to ESP WiFi module
				  DATASTREAM_RTOS_SendValue(
						  stream_on_matlab, 16,
						  state_measure.input[left], state_measure.input[right],
 80022ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
				  DATASTREAM_RTOS_SendValue(
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f969 	bl	8000588 <__aeabi_f2d>
 80022b6:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
						  state_measure.input[left], state_measure.input[right],
 80022ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
				  DATASTREAM_RTOS_SendValue(
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe f962 	bl	8000588 <__aeabi_f2d>
 80022c4:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
						  state_target .input[left], state_target .input[right],
 80022c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
				  DATASTREAM_RTOS_SendValue(
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f95b 	bl	8000588 <__aeabi_f2d>
 80022d2:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
						  state_target .input[left], state_target .input[right],
 80022d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
				  DATASTREAM_RTOS_SendValue(
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe f954 	bl	8000588 <__aeabi_f2d>
 80022e0:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
						  state_measure.wheel[left], state_measure.wheel[right],
 80022e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
				  DATASTREAM_RTOS_SendValue(
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f94e 	bl	8000588 <__aeabi_f2d>
 80022ec:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
						  state_measure.wheel[left], state_measure.wheel[right],
 80022f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
				  DATASTREAM_RTOS_SendValue(
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe f948 	bl	8000588 <__aeabi_f2d>
 80022f8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
						  state_target .wheel[left], state_target .wheel[right],
 80022fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
				  DATASTREAM_RTOS_SendValue(
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f941 	bl	8000588 <__aeabi_f2d>
 8002306:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						  state_target .wheel[left], state_target .wheel[right],
 800230a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
				  DATASTREAM_RTOS_SendValue(
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f93a 	bl	8000588 <__aeabi_f2d>
 8002314:	e9c7 0108 	strd	r0, r1, [r7, #32]
						  state_measure.pose.x_a,    state_measure.pose.y_a,
 8002318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
				  DATASTREAM_RTOS_SendValue(
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe f934 	bl	8000588 <__aeabi_f2d>
 8002320:	e9c7 0106 	strd	r0, r1, [r7, #24]
						  state_measure.pose.x_a,    state_measure.pose.y_a,
 8002324:	6f3b      	ldr	r3, [r7, #112]	; 0x70
				  DATASTREAM_RTOS_SendValue(
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe f92e 	bl	8000588 <__aeabi_f2d>
 800232c:	e9c7 0104 	strd	r0, r1, [r7, #16]
						  state_measure.pose.theta,
 8002330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
				  DATASTREAM_RTOS_SendValue(
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe f928 	bl	8000588 <__aeabi_f2d>
 8002338:	e9c7 0102 	strd	r0, r1, [r7, #8]
						  state_target .pose.x_a,    state_target.pose.y_a,
 800233c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
				  DATASTREAM_RTOS_SendValue(
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f921 	bl	8000588 <__aeabi_f2d>
 8002346:	e9c7 0100 	strd	r0, r1, [r7]
						  state_target .pose.x_a,    state_target.pose.y_a,
 800234a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
				  DATASTREAM_RTOS_SendValue(
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe f91a 	bl	8000588 <__aeabi_f2d>
 8002354:	4682      	mov	sl, r0
 8002356:	468b      	mov	fp, r1
						  state_target .pose.theta,
 8002358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
				  DATASTREAM_RTOS_SendValue(
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f913 	bl	8000588 <__aeabi_f2d>
 8002362:	4680      	mov	r8, r0
 8002364:	4689      	mov	r9, r1
						  delta_a_hist[k],		     delta_th_hist[k]
 8002366:	4a42      	ldr	r2, [pc, #264]	; (8002470 <StartControlDiffDrive+0x780>)
 8002368:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	681b      	ldr	r3, [r3, #0]
				  DATASTREAM_RTOS_SendValue(
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f908 	bl	8000588 <__aeabi_f2d>
 8002378:	4604      	mov	r4, r0
 800237a:	460d      	mov	r5, r1
						  delta_a_hist[k],		     delta_th_hist[k]
 800237c:	4a3d      	ldr	r2, [pc, #244]	; (8002474 <StartControlDiffDrive+0x784>)
 800237e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	681b      	ldr	r3, [r3, #0]
				  DATASTREAM_RTOS_SendValue(
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f8fd 	bl	8000588 <__aeabi_f2d>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8002396:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 800239a:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
 800239e:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
 80023a2:	ed97 7b00 	vldr	d7, [r7]
 80023a6:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80023aa:	ed97 7b02 	vldr	d7, [r7, #8]
 80023ae:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80023b2:	ed97 7b04 	vldr	d7, [r7, #16]
 80023b6:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80023ba:	ed97 7b06 	vldr	d7, [r7, #24]
 80023be:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80023c2:	ed97 7b08 	vldr	d7, [r7, #32]
 80023c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80023ca:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80023ce:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80023d2:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80023d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80023da:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80023de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80023e2:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80023e6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80023ea:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80023ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80023f2:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80023f6:	ed8d 7b00 	vstr	d7, [sp]
 80023fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023fe:	2110      	movs	r1, #16
 8002400:	2000      	movs	r0, #0
 8002402:	f000 ff11 	bl	8003228 <DATASTREAM_RTOS_SendValue>
				  );
				  // Bit of transfer delay
				  osDelay(8);
 8002406:	2008      	movs	r0, #8
 8002408:	f008 f8f8 	bl	800a5fc <osDelay>
				  // Toggling led to show data transfer operation
				  if( !(k%50) )
 800240c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <StartControlDiffDrive+0x788>)
 8002412:	fb83 1302 	smull	r1, r3, r3, r2
 8002416:	1119      	asrs	r1, r3, #4
 8002418:	17d3      	asrs	r3, r2, #31
 800241a:	1acb      	subs	r3, r1, r3
 800241c:	2132      	movs	r1, #50	; 0x32
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d103      	bne.n	8002430 <StartControlDiffDrive+0x740>
					  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002428:	2120      	movs	r1, #32
 800242a:	4814      	ldr	r0, [pc, #80]	; (800247c <StartControlDiffDrive+0x78c>)
 800242c:	f004 fc65 	bl	8006cfa <HAL_GPIO_TogglePin>
			  for(int k= 0; k < N_sample; k++){
 8002430:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002434:	3301      	adds	r3, #1
 8002436:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800243a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800243e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8002442:	429a      	cmp	r2, r3
 8002444:	f63f af2a 	bhi.w	800229c <StartControlDiffDrive+0x5ac>
			  }

			  // Turn off LED
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002448:	2200      	movs	r2, #0
 800244a:	2120      	movs	r1, #32
 800244c:	480b      	ldr	r0, [pc, #44]	; (800247c <StartControlDiffDrive+0x78c>)
 800244e:	f004 fc3b 	bl	8006cc8 <HAL_GPIO_WritePin>

			  // Disable WiFi
			  HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 8002452:	2200      	movs	r2, #0
 8002454:	2101      	movs	r1, #1
 8002456:	480a      	ldr	r0, [pc, #40]	; (8002480 <StartControlDiffDrive+0x790>)
 8002458:	f004 fc36 	bl	8006cc8 <HAL_GPIO_WritePin>

			  // Wait for blue button pressed again
			  while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) )
 800245c:	bf00      	nop
 800245e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002462:	4807      	ldr	r0, [pc, #28]	; (8002480 <StartControlDiffDrive+0x790>)
 8002464:	f004 fc18 	bl	8006c98 <HAL_GPIO_ReadPin>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f7      	bne.n	800245e <StartControlDiffDrive+0x76e>
		  for(;;){
 800246e:	e6aa      	b.n	80021c6 <StartControlDiffDrive+0x4d6>
 8002470:	20004c00 	.word	0x20004c00
 8002474:	20005ff4 	.word	0x20005ff4
 8002478:	51eb851f 	.word	0x51eb851f
 800247c:	40020000 	.word	0x40020000
 8002480:	40020800 	.word	0x40020800
 8002484:	00000000 	.word	0x00000000

08002488 <StartDistanceSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDistanceSensor */
void StartDistanceSensor(void *argument)
{
 8002488:	b5b0      	push	{r4, r5, r7, lr}
 800248a:	b0b2      	sub	sp, #200	; 0xc8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDistanceSensor */

	ULTRASONIC_StatusTypeDef status;

	float deg_eq= 82;
 8002490:	4bd7      	ldr	r3, [pc, #860]	; (80027f0 <StartDistanceSensor+0x368>)
 8002492:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float deg_array[30]= {-8,12,22,32,42,52,62,72,82,92,102,112,122,142,152,172,152,142,122,112,102,92,82,72,62,52,42,32,22,12};
 8002496:	4ad7      	ldr	r2, [pc, #860]	; (80027f4 <StartDistanceSensor+0x36c>)
 8002498:	f107 031c 	add.w	r3, r7, #28
 800249c:	4611      	mov	r1, r2
 800249e:	2278      	movs	r2, #120	; 0x78
 80024a0:	4618      	mov	r0, r3
 80024a2:	f00a fe5d 	bl	800d160 <memcpy>
	int n= sizeof(deg_array)/sizeof(float);
 80024a6:	231e      	movs	r3, #30
 80024a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	float distance;
	float distance_threshold= 15;
 80024ac:	4bd2      	ldr	r3, [pc, #840]	; (80027f8 <StartDistanceSensor+0x370>)
 80024ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	float max_distance= ULTRASONIC_MAX_DISTANCE*0.5;
 80024b2:	4bd2      	ldr	r3, [pc, #840]	; (80027fc <StartDistanceSensor+0x374>)
 80024b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	float min_distance= ULTRASONIC_MIN_DISTANCE;
 80024b8:	4bd1      	ldr	r3, [pc, #836]	; (8002800 <StartDistanceSensor+0x378>)
 80024ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float delta_th_tmp;
	float delta_th_max; //= 0.025;

	float IR_val;

	int k=0, k2=0;
 80024be:	2300      	movs	r3, #0
 80024c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	(void)k; // Suppress unused variable warning


	float delta_wheel_max[2];
	delta_wheel_max[left ]= hdiffdrive.mech_prmtr.max_wheel_speed*hdiffdrive.timing.time_step;
 80024ca:	4bce      	ldr	r3, [pc, #824]	; (8002804 <StartDistanceSensor+0x37c>)
 80024cc:	ed93 7a89 	vldr	s14, [r3, #548]	; 0x224
 80024d0:	4bcc      	ldr	r3, [pc, #816]	; (8002804 <StartDistanceSensor+0x37c>)
 80024d2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80024d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024da:	edc7 7a03 	vstr	s15, [r7, #12]
	delta_wheel_max[right]= hdiffdrive.mech_prmtr.max_wheel_speed*hdiffdrive.timing.time_step;
 80024de:	4bc9      	ldr	r3, [pc, #804]	; (8002804 <StartDistanceSensor+0x37c>)
 80024e0:	ed93 7a89 	vldr	s14, [r3, #548]	; 0x224
 80024e4:	4bc7      	ldr	r3, [pc, #796]	; (8002804 <StartDistanceSensor+0x37c>)
 80024e6:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80024ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ee:	edc7 7a04 	vstr	s15, [r7, #16]

	// Delta_a_max computation
	DIFFDRIVE_DeltaWheel2DeltaTrajectory(&delta_a_max, NULL, delta_wheel_max);
 80024f2:	f107 020c 	add.w	r2, r7, #12
 80024f6:	f107 0318 	add.w	r3, r7, #24
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 fc1f 	bl	8004d40 <DIFFDRIVE_DeltaWheel2DeltaTrajectory>
	delta_a_max *= 0.6; //0.6
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe f83f 	bl	8000588 <__aeabi_f2d>
 800250a:	a3ab      	add	r3, pc, #684	; (adr r3, 80027b8 <StartDistanceSensor+0x330>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	f7fe f892 	bl	8000638 <__aeabi_dmul>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	f7fe fb84 	bl	8000c28 <__aeabi_d2f>
 8002520:	4603      	mov	r3, r0
 8002522:	61bb      	str	r3, [r7, #24]

	// Delta_th_max computation
	delta_wheel_max[left]= -delta_wheel_max[left];
 8002524:	edd7 7a03 	vldr	s15, [r7, #12]
 8002528:	eef1 7a67 	vneg.f32	s15, s15
 800252c:	edc7 7a03 	vstr	s15, [r7, #12]
	DIFFDRIVE_DeltaWheel2DeltaTrajectory(NULL, &delta_th_max, delta_wheel_max);
 8002530:	f107 020c 	add.w	r2, r7, #12
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	4619      	mov	r1, r3
 800253a:	2000      	movs	r0, #0
 800253c:	f002 fc00 	bl	8004d40 <DIFFDRIVE_DeltaWheel2DeltaTrajectory>
	delta_th_max *= 0.25;
 8002540:	edd7 7a05 	vldr	s15, [r7, #20]
 8002544:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800254c:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Infinite loop */
  for(;;)
  {

	  for(int j=0; j<n; j++){
 8002550:	2300      	movs	r3, #0
 8002552:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002556:	e1fb      	b.n	8002950 <StartDistanceSensor+0x4c8>

		  // Setting up sensor direction using a servo
		  SERVO_SetDegree(&hservo, deg_array[j]);
 8002558:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002562:	4413      	add	r3, r2
 8002564:	3bac      	subs	r3, #172	; 0xac
 8002566:	edd3 7a00 	vldr	s15, [r3]
 800256a:	eeb0 0a67 	vmov.f32	s0, s15
 800256e:	48a6      	ldr	r0, [pc, #664]	; (8002808 <StartDistanceSensor+0x380>)
 8002570:	f003 fa78 	bl	8005a64 <SERVO_SetDegree>

		  // Wait a bit for servo settlement and between ultrasonic acquisition
		  osDelay(120);
 8002574:	2078      	movs	r0, #120	; 0x78
 8002576:	f008 f841 	bl	800a5fc <osDelay>


		  /* Capture measured distance */

		  status= ULTRASONIC_CaptureMeasure(&hultra);
 800257a:	48a4      	ldr	r0, [pc, #656]	; (800280c <StartDistanceSensor+0x384>)
 800257c:	f003 fbb4 	bl	8005ce8 <ULTRASONIC_CaptureMeasure>
 8002580:	4603      	mov	r3, r0
 8002582:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

		  // If there is an error set max distance (an error can occur when a sensor timeout
		  // take place, because the ultrasonic signal is lost)
		  if( status == ULTRASONIC_OK )
 8002586:	f997 309b 	ldrsb.w	r3, [r7, #155]	; 0x9b
 800258a:	2b00      	cmp	r3, #0
 800258c:	d104      	bne.n	8002598 <StartDistanceSensor+0x110>
			  distance= __ULTRASONIC_GET_DISTANCE(&hultra);
 800258e:	4b9f      	ldr	r3, [pc, #636]	; (800280c <StartDistanceSensor+0x384>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002596:	e003      	b.n	80025a0 <StartDistanceSensor+0x118>
		  else
			  distance= max_distance;
 8002598:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800259c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

		  // Sensor fusion with IR Sensor
		  IR_val = __MAF_GET_VAL(&hfilter_infrared);
 80025a0:	4b9b      	ldr	r3, [pc, #620]	; (8002810 <StartDistanceSensor+0x388>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		  distance *= IR_val;
 80025a8:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80025ac:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80025b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b4:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4

		  // Set minimum distance
		  if( distance < min_distance)
 80025b8:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80025bc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80025c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c8:	d503      	bpl.n	80025d2 <StartDistanceSensor+0x14a>
			  distance = min_distance;
 80025ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4


		  /* Using measured distance and servo angular position to generate a trajectory */

		  // Robot linear position variation (direct proportional to distance) and negative below a distance threshold
		  delta_a_tmp= (distance-distance_threshold)*4*1e-5;
 80025d2:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80025d6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80025da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025de:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80025e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e6:	ee17 0a90 	vmov	r0, s15
 80025ea:	f7fd ffcd 	bl	8000588 <__aeabi_f2d>
 80025ee:	a374      	add	r3, pc, #464	; (adr r3, 80027c0 <StartDistanceSensor+0x338>)
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	f7fe f820 	bl	8000638 <__aeabi_dmul>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4610      	mov	r0, r2
 80025fe:	4619      	mov	r1, r3
 8002600:	f7fe fb12 	bl	8000c28 <__aeabi_d2f>
 8002604:	4603      	mov	r3, r0
 8002606:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		  if( distance < distance_threshold)
 800260a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800260e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261a:	d507      	bpl.n	800262c <StartDistanceSensor+0x1a4>
			  delta_a_tmp *= 1.5;
 800261c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002620:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002624:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002628:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0

		  // Robot angular position (yaw) variation (inversely proportional to distance with sign that
		  // depends on servo degree position)
		  if( deg_array[j] > deg_eq )
 800262c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002636:	4413      	add	r3, r2
 8002638:	3bac      	subs	r3, #172	; 0xac
 800263a:	edd3 7a00 	vldr	s15, [r3]
 800263e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264a:	d51d      	bpl.n	8002688 <StartDistanceSensor+0x200>
			  delta_th_tmp= -0.48/distance*0.9;//*1.5;
 800264c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002650:	f7fd ff9a 	bl	8000588 <__aeabi_f2d>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	a15b      	add	r1, pc, #364	; (adr r1, 80027c8 <StartDistanceSensor+0x340>)
 800265a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800265e:	f7fe f915 	bl	800088c <__aeabi_ddiv>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4610      	mov	r0, r2
 8002668:	4619      	mov	r1, r3
 800266a:	a359      	add	r3, pc, #356	; (adr r3, 80027d0 <StartDistanceSensor+0x348>)
 800266c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002670:	f7fd ffe2 	bl	8000638 <__aeabi_dmul>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	f7fe fad4 	bl	8000c28 <__aeabi_d2f>
 8002680:	4603      	mov	r3, r0
 8002682:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002686:	e01c      	b.n	80026c2 <StartDistanceSensor+0x23a>
		  else
			  delta_th_tmp=  0.48/distance*0.9;//*1.5;
 8002688:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800268c:	f7fd ff7c 	bl	8000588 <__aeabi_f2d>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	a150      	add	r1, pc, #320	; (adr r1, 80027d8 <StartDistanceSensor+0x350>)
 8002696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800269a:	f7fe f8f7 	bl	800088c <__aeabi_ddiv>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4610      	mov	r0, r2
 80026a4:	4619      	mov	r1, r3
 80026a6:	a34a      	add	r3, pc, #296	; (adr r3, 80027d0 <StartDistanceSensor+0x348>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	f7fd ffc4 	bl	8000638 <__aeabi_dmul>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4610      	mov	r0, r2
 80026b6:	4619      	mov	r1, r3
 80026b8:	f7fe fab6 	bl	8000c28 <__aeabi_d2f>
 80026bc:	4603      	mov	r3, r0
 80026be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc


		  // Enroll angular variations
		  if( delta_th_tmp > delta_th_max )
 80026c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026c6:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80026ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d2:	dd03      	ble.n	80026dc <StartDistanceSensor+0x254>
			  delta_th_tmp= delta_th_max;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80026da:	e010      	b.n	80026fe <StartDistanceSensor+0x276>
		  else
		  if( delta_th_tmp < -delta_th_max )
 80026dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80026e0:	eef1 7a67 	vneg.f32	s15, s15
 80026e4:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80026e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f0:	d505      	bpl.n	80026fe <StartDistanceSensor+0x276>
			  delta_th_tmp= -delta_th_max;
 80026f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026f6:	eef1 7a67 	vneg.f32	s15, s15
 80026fa:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc

		  if( delta_th_tmp < 0.01 && delta_th_tmp > -0.01 )
 80026fe:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8002702:	f7fd ff41 	bl	8000588 <__aeabi_f2d>
 8002706:	a336      	add	r3, pc, #216	; (adr r3, 80027e0 <StartDistanceSensor+0x358>)
 8002708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270c:	f7fe fa06 	bl	8000b1c <__aeabi_dcmplt>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00f      	beq.n	8002736 <StartDistanceSensor+0x2ae>
 8002716:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800271a:	f7fd ff35 	bl	8000588 <__aeabi_f2d>
 800271e:	a332      	add	r3, pc, #200	; (adr r3, 80027e8 <StartDistanceSensor+0x360>)
 8002720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002724:	f7fe fa18 	bl	8000b58 <__aeabi_dcmpgt>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <StartDistanceSensor+0x2ae>
			  delta_th_tmp= 0;
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		  // Enroll position variationstype filter text
		  if ( delta_a_tmp > delta_a_max)
 8002736:	edd7 7a06 	vldr	s15, [r7, #24]
 800273a:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 800273e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002746:	dd02      	ble.n	800274e <StartDistanceSensor+0x2c6>
			  delta_a_tmp= delta_a_max;
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

		  if ( delta_a_tmp < -delta_a_max)
 800274e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002752:	eef1 7a67 	vneg.f32	s15, s15
 8002756:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 800275a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002762:	d505      	bpl.n	8002770 <StartDistanceSensor+0x2e8>
			  delta_a_tmp= -delta_a_max;
 8002764:	edd7 7a06 	vldr	s15, [r7, #24]
 8002768:	eef1 7a67 	vneg.f32	s15, s15
 800276c:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0

		  // If distance is above a fixed threshold use the generated trajectory variation
		  if( distance > distance_threshold ){
 8002770:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002774:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002778:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	dd52      	ble.n	8002828 <StartDistanceSensor+0x3a0>

			  k= 0;
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

			  // Tracking error control enabling
			  tracking_error_flag= true;
 8002788:	4b22      	ldr	r3, [pc, #136]	; (8002814 <StartDistanceSensor+0x38c>)
 800278a:	2201      	movs	r2, #1
 800278c:	701a      	strb	r2, [r3, #0]

		  	  // Smoothing measure using a Moving Average Filter

		  	  MAF_Update(&hfilter_a, delta_a_tmp);
 800278e:	ed97 0a30 	vldr	s0, [r7, #192]	; 0xc0
 8002792:	4821      	ldr	r0, [pc, #132]	; (8002818 <StartDistanceSensor+0x390>)
 8002794:	f002 fc77 	bl	8005086 <MAF_Update>
		  	  delta_a= __MAF_GET_VAL(&hfilter_a);
 8002798:	4b1f      	ldr	r3, [pc, #124]	; (8002818 <StartDistanceSensor+0x390>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a1f      	ldr	r2, [pc, #124]	; (800281c <StartDistanceSensor+0x394>)
 800279e:	6013      	str	r3, [r2, #0]

		  	  MAF_Update(&hfilter_th, delta_th_tmp);
 80027a0:	ed97 0a2f 	vldr	s0, [r7, #188]	; 0xbc
 80027a4:	481e      	ldr	r0, [pc, #120]	; (8002820 <StartDistanceSensor+0x398>)
 80027a6:	f002 fc6e 	bl	8005086 <MAF_Update>
		  	  delta_th= __MAF_GET_VAL(&hfilter_th);
 80027aa:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <StartDistanceSensor+0x398>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <StartDistanceSensor+0x39c>)
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e09e      	b.n	80028f2 <StartDistanceSensor+0x46a>
 80027b4:	f3af 8000 	nop.w
 80027b8:	33333333 	.word	0x33333333
 80027bc:	3fe33333 	.word	0x3fe33333
 80027c0:	88e368f1 	.word	0x88e368f1
 80027c4:	3ee4f8b5 	.word	0x3ee4f8b5
 80027c8:	eb851eb8 	.word	0xeb851eb8
 80027cc:	bfdeb851 	.word	0xbfdeb851
 80027d0:	cccccccd 	.word	0xcccccccd
 80027d4:	3feccccc 	.word	0x3feccccc
 80027d8:	eb851eb8 	.word	0xeb851eb8
 80027dc:	3fdeb851 	.word	0x3fdeb851
 80027e0:	47ae147b 	.word	0x47ae147b
 80027e4:	3f847ae1 	.word	0x3f847ae1
 80027e8:	47ae147b 	.word	0x47ae147b
 80027ec:	bf847ae1 	.word	0xbf847ae1
 80027f0:	42a40000 	.word	0x42a40000
 80027f4:	08013b38 	.word	0x08013b38
 80027f8:	41700000 	.word	0x41700000
 80027fc:	43480000 	.word	0x43480000
 8002800:	40400000 	.word	0x40400000
 8002804:	20007048 	.word	0x20007048
 8002808:	20005c14 	.word	0x20005c14
 800280c:	20005ee8 	.word	0x20005ee8
 8002810:	20004b34 	.word	0x20004b34
 8002814:	20000000 	.word	0x20000000
 8002818:	2000733c 	.word	0x2000733c
 800281c:	20000208 	.word	0x20000208
 8002820:	20005dfc 	.word	0x20005dfc
 8002824:	2000020c 	.word	0x2000020c

	  	  }
		  // Otherwise, if distance is below a fixed threshold freeze servo in that position and move 'way from obstacle
	  	  else{
	  		  // This do freeze servo
	  		  j--;
 8002828:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800282c:	3b01      	subs	r3, #1
 800282e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			  if( ++k > 1 || IR_val <= 0.5 ){
 8002832:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002836:	3301      	adds	r3, #1
 8002838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800283c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002840:	2b01      	cmp	r3, #1
 8002842:	dc08      	bgt.n	8002856 <StartDistanceSensor+0x3ce>
 8002844:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002848:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800284c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002854:	d84d      	bhi.n	80028f2 <StartDistanceSensor+0x46a>

				  // Following error control disabling (it doesn't need to follow the trajectory perfectly, it just
				  // need to move away from a really near obstacle)
				  tracking_error_flag= false;
 8002856:	4b44      	ldr	r3, [pc, #272]	; (8002968 <StartDistanceSensor+0x4e0>)
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]

				  /* Avoiding the use of filtered values to have a fast response near an obstacle. Anyway,
					 keep  update filters just to not have discontinuities after this exception ends.       */

				  // Force a minimum Delta_a value, otherwise, near threshold, sometimes robot stand still
				  delta_a=  (delta_a_tmp - delta_a_max*0.1)*1;
 800285c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8002860:	f7fd fe92 	bl	8000588 <__aeabi_f2d>
 8002864:	4604      	mov	r4, r0
 8002866:	460d      	mov	r5, r1
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fd fe8c 	bl	8000588 <__aeabi_f2d>
 8002870:	a33b      	add	r3, pc, #236	; (adr r3, 8002960 <StartDistanceSensor+0x4d8>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	f7fd fedf 	bl	8000638 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4620      	mov	r0, r4
 8002880:	4629      	mov	r1, r5
 8002882:	f7fd fd21 	bl	80002c8 <__aeabi_dsub>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4610      	mov	r0, r2
 800288c:	4619      	mov	r1, r3
 800288e:	f7fe f9cb 	bl	8000c28 <__aeabi_d2f>
 8002892:	4603      	mov	r3, r0
 8002894:	4a35      	ldr	r2, [pc, #212]	; (800296c <StartDistanceSensor+0x4e4>)
 8002896:	6013      	str	r3, [r2, #0]

				  if( delta_a > 0)
 8002898:	4b34      	ldr	r3, [pc, #208]	; (800296c <StartDistanceSensor+0x4e4>)
 800289a:	edd3 7a00 	vldr	s15, [r3]
 800289e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a6:	dd07      	ble.n	80028b8 <StartDistanceSensor+0x430>
				  	  delta_a= -delta_a;
 80028a8:	4b30      	ldr	r3, [pc, #192]	; (800296c <StartDistanceSensor+0x4e4>)
 80028aa:	edd3 7a00 	vldr	s15, [r3]
 80028ae:	eef1 7a67 	vneg.f32	s15, s15
 80028b2:	4b2e      	ldr	r3, [pc, #184]	; (800296c <StartDistanceSensor+0x4e4>)
 80028b4:	edc3 7a00 	vstr	s15, [r3]

				  // Set current Delta_theta angle
				  delta_th= delta_th_tmp;
 80028b8:	4a2d      	ldr	r2, [pc, #180]	; (8002970 <StartDistanceSensor+0x4e8>)
 80028ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028be:	6013      	str	r3, [r2, #0]

				  // Filters updates
				  MAF_Update(&hfilter_a,  delta_a_tmp);
 80028c0:	ed97 0a30 	vldr	s0, [r7, #192]	; 0xc0
 80028c4:	482b      	ldr	r0, [pc, #172]	; (8002974 <StartDistanceSensor+0x4ec>)
 80028c6:	f002 fbde 	bl	8005086 <MAF_Update>
				  //delta_a= __MAF_GET_VAL(&hfilter_a);
				  MAF_Update(&hfilter_th, delta_th_tmp);
 80028ca:	ed97 0a2f 	vldr	s0, [r7, #188]	; 0xbc
 80028ce:	482a      	ldr	r0, [pc, #168]	; (8002978 <StartDistanceSensor+0x4f0>)
 80028d0:	f002 fbd9 	bl	8005086 <MAF_Update>
				  //delta_th= __MAF_GET_VAL(&hfilter_th);

				  // Freeze servo just for a fixed time
				  if( k++ > 30 ){
 80028d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80028de:	2b1e      	cmp	r3, #30
 80028e0:	dd07      	ble.n	80028f2 <StartDistanceSensor+0x46a>
					  k= 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
					  j++;
 80028e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028ec:	3301      	adds	r3, #1
 80028ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
					  //delta_a_tmp= -delta_a_tmp;
				  }
			  }
	  	  }

		  if( distance > distance_threshold && distance < distance_threshold*4){
 80028f2:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80028f6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80028fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002902:	dd20      	ble.n	8002946 <StartDistanceSensor+0x4be>
 8002904:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002908:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800290c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002910:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291c:	d513      	bpl.n	8002946 <StartDistanceSensor+0x4be>
			  j--;
 800291e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002922:	3b01      	subs	r3, #1
 8002924:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			  if( k2++ > 10 ){
 8002928:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002932:	2b0a      	cmp	r3, #10
 8002934:	dd07      	ble.n	8002946 <StartDistanceSensor+0x4be>
				  k2= 0;
 8002936:	2300      	movs	r3, #0
 8002938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
				  j++;
 800293c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002940:	3301      	adds	r3, #1
 8002942:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	  for(int j=0; j<n; j++){
 8002946:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800294a:	3301      	adds	r3, #1
 800294c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002950:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002954:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002958:	429a      	cmp	r2, r3
 800295a:	f6ff adfd 	blt.w	8002558 <StartDistanceSensor+0xd0>
 800295e:	e5f7      	b.n	8002550 <StartDistanceSensor+0xc8>
 8002960:	9999999a 	.word	0x9999999a
 8002964:	3fb99999 	.word	0x3fb99999
 8002968:	20000000 	.word	0x20000000
 800296c:	20000208 	.word	0x20000208
 8002970:	2000020c 	.word	0x2000020c
 8002974:	2000733c 	.word	0x2000733c
 8002978:	20005dfc 	.word	0x20005dfc

0800297c <StartInfraredSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInfraredSensor */
void StartInfraredSensor(void *argument)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInfraredSensor */
  /* Infinite loop */

	int sens=0, k=0;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]
//	osThreadSuspend(DistanceSensorHandle);
//	osThreadSuspend(ControlDiffDrivHandle);

	for(;;){

		sens= HAL_GPIO_ReadPin(INFRARED_SENSOR_GPIO_Port, INFRARED_SENSOR_Pin);
 800298c:	2180      	movs	r1, #128	; 0x80
 800298e:	4809      	ldr	r0, [pc, #36]	; (80029b4 <StartInfraredSensor+0x38>)
 8002990:	f004 f982 	bl	8006c98 <HAL_GPIO_ReadPin>
 8002994:	4603      	mov	r3, r0
 8002996:	60fb      	str	r3, [r7, #12]

		MAF_Update(&hfilter_infrared, sens);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a2:	eeb0 0a67 	vmov.f32	s0, s15
 80029a6:	4804      	ldr	r0, [pc, #16]	; (80029b8 <StartInfraredSensor+0x3c>)
 80029a8:	f002 fb6d 	bl	8005086 <MAF_Update>
		if( !(k%10000) ){
			printf("%f\t\n",3*__MAF_GET_VAL(&hfilter_infrared));
			k= 0;
		}
*/
		osDelay(1);
 80029ac:	2001      	movs	r0, #1
 80029ae:	f007 fe25 	bl	800a5fc <osDelay>
		sens= HAL_GPIO_ReadPin(INFRARED_SENSOR_GPIO_Port, INFRARED_SENSOR_Pin);
 80029b2:	e7eb      	b.n	800298c <StartInfraredSensor+0x10>
 80029b4:	40020800 	.word	0x40020800
 80029b8:	20004b34 	.word	0x20004b34

080029bc <SerialCommnuication>:
* @retval None
*/

/* USER CODE END Header_SerialCommnuication */
void SerialCommnuication(void *argument)
{
 80029bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c0:	b0c4      	sub	sp, #272	; 0x110
 80029c2:	af1a      	add	r7, sp, #104	; 0x68
 80029c4:	6578      	str	r0, [r7, #84]	; 0x54
  /* USER CODE BEGIN SerialCommnuication */

  uint32_t curr_sample_cnt= 0, prev_sample_cnt= 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  /* Infinite loop */
  for(;;)
  {

	  if( (curr_sample_cnt= hdiffdrive.history.sample_cnt) != prev_sample_cnt ){
 80029d2:	4b54      	ldr	r3, [pc, #336]	; (8002b24 <SerialCommnuication+0x168>)
 80029d4:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80029d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80029e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029e4:	429a      	cmp	r2, r3
 80029e6:	f000 8098 	beq.w	8002b1a <SerialCommnuication+0x15e>

		  // Update variable
		  prev_sample_cnt= curr_sample_cnt;
 80029ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		  // Temporary variables
		  DIFFDRIVE_STATE_TypeDef state_measure, state_target;

		  // Get one state sample from history
		  DIFFDRIVE_HISTORY_Get_Sample(&state_measure, &state_target);
 80029f2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80029f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 ff7f 	bl	8004900 <DIFFDRIVE_HISTORY_Get_Sample>

		  // Send values to serial connected to ESP WiFi module
		  DATASTREAM_RTOS_SendValue(
				  stream_on_matlab, 14,
				  state_measure.input[left], state_measure.input[right],
 8002a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
		  DATASTREAM_RTOS_SendValue(
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fd fdbf 	bl	8000588 <__aeabi_f2d>
 8002a0a:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
				  state_measure.input[left], state_measure.input[right],
 8002a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
		  DATASTREAM_RTOS_SendValue(
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fdb9 	bl	8000588 <__aeabi_f2d>
 8002a16:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				  state_target .input[left], state_target .input[right],
 8002a1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
		  DATASTREAM_RTOS_SendValue(
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fdb2 	bl	8000588 <__aeabi_f2d>
 8002a24:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				  state_target .input[left], state_target .input[right],
 8002a28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
		  DATASTREAM_RTOS_SendValue(
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fdab 	bl	8000588 <__aeabi_f2d>
 8002a32:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				  state_measure.wheel[left], state_measure.wheel[right],
 8002a36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
		  DATASTREAM_RTOS_SendValue(
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fd fda5 	bl	8000588 <__aeabi_f2d>
 8002a3e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				  state_measure.wheel[left], state_measure.wheel[right],
 8002a42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
		  DATASTREAM_RTOS_SendValue(
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fd9f 	bl	8000588 <__aeabi_f2d>
 8002a4a:	e9c7 0108 	strd	r0, r1, [r7, #32]
				  state_target .wheel[left], state_target .wheel[right],
 8002a4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
		  DATASTREAM_RTOS_SendValue(
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fd fd98 	bl	8000588 <__aeabi_f2d>
 8002a58:	e9c7 0106 	strd	r0, r1, [r7, #24]
				  state_target .wheel[left], state_target .wheel[right],
 8002a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
		  DATASTREAM_RTOS_SendValue(
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fd91 	bl	8000588 <__aeabi_f2d>
 8002a66:	e9c7 0104 	strd	r0, r1, [r7, #16]
				  state_measure.pose.x_a,    state_measure.pose.y_a,
 8002a6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		  DATASTREAM_RTOS_SendValue(
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd8b 	bl	8000588 <__aeabi_f2d>
 8002a72:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  state_measure.pose.x_a,    state_measure.pose.y_a,
 8002a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		  DATASTREAM_RTOS_SendValue(
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fd fd85 	bl	8000588 <__aeabi_f2d>
 8002a7e:	e9c7 0100 	strd	r0, r1, [r7]
				  state_measure.pose.theta,
 8002a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		  DATASTREAM_RTOS_SendValue(
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fd7f 	bl	8000588 <__aeabi_f2d>
 8002a8a:	4682      	mov	sl, r0
 8002a8c:	468b      	mov	fp, r1
				  state_target .pose.x_a,    state_target.pose.y_a,
 8002a8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		  DATASTREAM_RTOS_SendValue(
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fd fd79 	bl	8000588 <__aeabi_f2d>
 8002a96:	4680      	mov	r8, r0
 8002a98:	4689      	mov	r9, r1
				  state_target .pose.x_a,    state_target.pose.y_a,
 8002a9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
		  DATASTREAM_RTOS_SendValue(
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fd fd72 	bl	8000588 <__aeabi_f2d>
 8002aa4:	4604      	mov	r4, r0
 8002aa6:	460d      	mov	r5, r1
				  state_target .pose.theta
 8002aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
		  DATASTREAM_RTOS_SendValue(
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fd fd6b 	bl	8000588 <__aeabi_f2d>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8002aba:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 8002abe:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8002ac2:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 8002ac6:	ed97 7b00 	vldr	d7, [r7]
 8002aca:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002ace:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ad2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002ad6:	ed97 7b04 	vldr	d7, [r7, #16]
 8002ada:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002ade:	ed97 7b06 	vldr	d7, [r7, #24]
 8002ae2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002ae6:	ed97 7b08 	vldr	d7, [r7, #32]
 8002aea:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002aee:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002af2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002af6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002afa:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002afe:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002b02:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002b06:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002b0a:	ed8d 7b00 	vstr	d7, [sp]
 8002b0e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b12:	210e      	movs	r1, #14
 8002b14:	2000      	movs	r0, #0
 8002b16:	f000 fb87 	bl	8003228 <DATASTREAM_RTOS_SendValue>
		  );

	  }

	  osDelay(10);
 8002b1a:	200a      	movs	r0, #10
 8002b1c:	f007 fd6e 	bl	800a5fc <osDelay>
	  if( (curr_sample_cnt= hdiffdrive.history.sample_cnt) != prev_sample_cnt ){
 8002b20:	e757      	b.n	80029d2 <SerialCommnuication+0x16>
 8002b22:	bf00      	nop
 8002b24:	20007048 	.word	0x20007048

08002b28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d101      	bne.n	8002b3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b3a:	f003 fa83 	bl	8006044 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40001000 	.word	0x40001000

08002b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b50:	b672      	cpsid	i
}
 8002b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <Error_Handler+0x8>
	...

08002b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_MspInit+0x54>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	4a11      	ldr	r2, [pc, #68]	; (8002bac <HAL_MspInit+0x54>)
 8002b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_MspInit+0x54>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_MspInit+0x54>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <HAL_MspInit+0x54>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_MspInit+0x54>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	210f      	movs	r1, #15
 8002b9a:	f06f 0001 	mvn.w	r0, #1
 8002b9e:	f003 fb4d 	bl	800623c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800

08002bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08e      	sub	sp, #56	; 0x38
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a4d      	ldr	r2, [pc, #308]	; (8002d04 <HAL_TIM_Base_MspInit+0x154>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	623b      	str	r3, [r7, #32]
 8002bd6:	4b4c      	ldr	r3, [pc, #304]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	4a4b      	ldr	r2, [pc, #300]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6453      	str	r3, [r2, #68]	; 0x44
 8002be2:	4b49      	ldr	r3, [pc, #292]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	623b      	str	r3, [r7, #32]
 8002bec:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002bee:	e085      	b.n	8002cfc <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM3)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a45      	ldr	r2, [pc, #276]	; (8002d0c <HAL_TIM_Base_MspInit+0x15c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d116      	bne.n	8002c28 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	4b42      	ldr	r3, [pc, #264]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	4a41      	ldr	r2, [pc, #260]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002c04:	f043 0302 	orr.w	r3, r3, #2
 8002c08:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0a:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2105      	movs	r1, #5
 8002c1a:	201d      	movs	r0, #29
 8002c1c:	f003 fb0e 	bl	800623c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c20:	201d      	movs	r0, #29
 8002c22:	f003 fb27 	bl	8006274 <HAL_NVIC_EnableIRQ>
}
 8002c26:	e069      	b.n	8002cfc <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM7)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a38      	ldr	r2, [pc, #224]	; (8002d10 <HAL_TIM_Base_MspInit+0x160>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d10e      	bne.n	8002c50 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	4a33      	ldr	r2, [pc, #204]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002c3c:	f043 0320 	orr.w	r3, r3, #32
 8002c40:	6413      	str	r3, [r2, #64]	; 0x40
 8002c42:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
}
 8002c4e:	e055      	b.n	8002cfc <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM8)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2f      	ldr	r2, [pc, #188]	; (8002d14 <HAL_TIM_Base_MspInit+0x164>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d116      	bne.n	8002c88 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002c76:	2200      	movs	r2, #0
 8002c78:	2105      	movs	r1, #5
 8002c7a:	202b      	movs	r0, #43	; 0x2b
 8002c7c:	f003 fade 	bl	800623c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002c80:	202b      	movs	r0, #43	; 0x2b
 8002c82:	f003 faf7 	bl	8006274 <HAL_NVIC_EnableIRQ>
}
 8002c86:	e039      	b.n	8002cfc <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM12)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a22      	ldr	r2, [pc, #136]	; (8002d18 <HAL_TIM_Base_MspInit+0x168>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d134      	bne.n	8002cfc <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4a1b      	ldr	r2, [pc, #108]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca2:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002cb8:	f043 0302 	orr.w	r3, r3, #2
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_TIM_Base_MspInit+0x158>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ULTRASONIC_ECHO_Pin;
 8002cca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002cdc:	2309      	movs	r3, #9
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULTRASONIC_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	480d      	ldr	r0, [pc, #52]	; (8002d1c <HAL_TIM_Base_MspInit+0x16c>)
 8002ce8:	f003 fe42 	bl	8006970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002cec:	2200      	movs	r2, #0
 8002cee:	2105      	movs	r1, #5
 8002cf0:	202b      	movs	r0, #43	; 0x2b
 8002cf2:	f003 faa3 	bl	800623c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002cf6:	202b      	movs	r0, #43	; 0x2b
 8002cf8:	f003 fabc 	bl	8006274 <HAL_NVIC_EnableIRQ>
}
 8002cfc:	bf00      	nop
 8002cfe:	3738      	adds	r7, #56	; 0x38
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40010000 	.word	0x40010000
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40000400 	.word	0x40000400
 8002d10:	40001400 	.word	0x40001400
 8002d14:	40010400 	.word	0x40010400
 8002d18:	40001800 	.word	0x40001800
 8002d1c:	40020400 	.word	0x40020400

08002d20 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08c      	sub	sp, #48	; 0x30
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	f107 031c 	add.w	r3, r7, #28
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d40:	d12d      	bne.n	8002d9e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	4b30      	ldr	r3, [pc, #192]	; (8002e08 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	4a2f      	ldr	r2, [pc, #188]	; (8002e08 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6413      	str	r3, [r2, #64]	; 0x40
 8002d52:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4a28      	ldr	r2, [pc, #160]	; (8002e08 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002d68:	f043 0302 	orr.w	r3, r3, #2
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 8002d7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d80:	2302      	movs	r3, #2
 8002d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d90:	f107 031c 	add.w	r3, r7, #28
 8002d94:	4619      	mov	r1, r3
 8002d96:	481d      	ldr	r0, [pc, #116]	; (8002e0c <HAL_TIM_Encoder_MspInit+0xec>)
 8002d98:	f003 fdea 	bl	8006970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002d9c:	e030      	b.n	8002e00 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1b      	ldr	r2, [pc, #108]	; (8002e10 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d12b      	bne.n	8002e00 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002da8:	2300      	movs	r3, #0
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	4a15      	ldr	r2, [pc, #84]	; (8002e08 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002db2:	f043 0308 	orr.w	r3, r3, #8
 8002db6:	6413      	str	r3, [r2, #64]	; 0x40
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	4a0e      	ldr	r2, [pc, #56]	; (8002e08 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_RIGHT_B_Pin|ENCODER_RIGHT_A_Pin;
 8002de0:	2303      	movs	r3, #3
 8002de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	2302      	movs	r3, #2
 8002de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dec:	2300      	movs	r3, #0
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002df0:	2302      	movs	r3, #2
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df4:	f107 031c 	add.w	r3, r7, #28
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4806      	ldr	r0, [pc, #24]	; (8002e14 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002dfc:	f003 fdb8 	bl	8006970 <HAL_GPIO_Init>
}
 8002e00:	bf00      	nop
 8002e02:	3730      	adds	r7, #48	; 0x30
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40020400 	.word	0x40020400
 8002e10:	40000c00 	.word	0x40000c00
 8002e14:	40020000 	.word	0x40020000

08002e18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a24      	ldr	r2, [pc, #144]	; (8002ec8 <HAL_TIM_MspPostInit+0xb0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d11f      	bne.n	8002e7a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <HAL_TIM_MspPostInit+0xb4>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a22      	ldr	r2, [pc, #136]	; (8002ecc <HAL_TIM_MspPostInit+0xb4>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <HAL_TIM_MspPostInit+0xb4>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_LEFT_FORWARD_Pin|MOTOR_LEFT_BACKWARD_Pin|MOTOR_RIGHT_FORWARD_Pin|MOTOR_RIGHT_BACKWARD_Pin;
 8002e56:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e64:	2300      	movs	r3, #0
 8002e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4619      	mov	r1, r3
 8002e72:	4817      	ldr	r0, [pc, #92]	; (8002ed0 <HAL_TIM_MspPostInit+0xb8>)
 8002e74:	f003 fd7c 	bl	8006970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002e78:	e022      	b.n	8002ec0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a15      	ldr	r2, [pc, #84]	; (8002ed4 <HAL_TIM_MspPostInit+0xbc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d11d      	bne.n	8002ec0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <HAL_TIM_MspPostInit+0xb4>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	4a0f      	ldr	r2, [pc, #60]	; (8002ecc <HAL_TIM_MspPostInit+0xb4>)
 8002e8e:	f043 0304 	orr.w	r3, r3, #4
 8002e92:	6313      	str	r3, [r2, #48]	; 0x30
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <HAL_TIM_MspPostInit+0xb4>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_MOTOR_Pin;
 8002ea0:	2340      	movs	r3, #64	; 0x40
 8002ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eac:	2300      	movs	r3, #0
 8002eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4807      	ldr	r0, [pc, #28]	; (8002ed8 <HAL_TIM_MspPostInit+0xc0>)
 8002ebc:	f003 fd58 	bl	8006970 <HAL_GPIO_Init>
}
 8002ec0:	bf00      	nop
 8002ec2:	3728      	adds	r7, #40	; 0x28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40010000 	.word	0x40010000
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	40010400 	.word	0x40010400
 8002ed8:	40020800 	.word	0x40020800

08002edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	; 0x28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 0314 	add.w	r3, r7, #20
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a40      	ldr	r2, [pc, #256]	; (8002ffc <HAL_UART_MspInit+0x120>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d179      	bne.n	8002ff2 <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	4b3f      	ldr	r3, [pc, #252]	; (8003000 <HAL_UART_MspInit+0x124>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a3e      	ldr	r2, [pc, #248]	; (8003000 <HAL_UART_MspInit+0x124>)
 8002f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	4b3c      	ldr	r3, [pc, #240]	; (8003000 <HAL_UART_MspInit+0x124>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	4b38      	ldr	r3, [pc, #224]	; (8003000 <HAL_UART_MspInit+0x124>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a37      	ldr	r2, [pc, #220]	; (8003000 <HAL_UART_MspInit+0x124>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b35      	ldr	r3, [pc, #212]	; (8003000 <HAL_UART_MspInit+0x124>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	4b31      	ldr	r3, [pc, #196]	; (8003000 <HAL_UART_MspInit+0x124>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a30      	ldr	r2, [pc, #192]	; (8003000 <HAL_UART_MspInit+0x124>)
 8002f40:	f043 0302 	orr.w	r3, r3, #2
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b2e      	ldr	r3, [pc, #184]	; (8003000 <HAL_UART_MspInit+0x124>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f52:	2320      	movs	r3, #32
 8002f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f56:	2302      	movs	r3, #2
 8002f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f62:	2307      	movs	r3, #7
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f66:	f107 0314 	add.w	r3, r7, #20
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4825      	ldr	r0, [pc, #148]	; (8003004 <HAL_UART_MspInit+0x128>)
 8002f6e:	f003 fcff 	bl	8006970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f80:	2303      	movs	r3, #3
 8002f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f84:	2307      	movs	r3, #7
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f88:	f107 0314 	add.w	r3, r7, #20
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	481e      	ldr	r0, [pc, #120]	; (8003008 <HAL_UART_MspInit+0x12c>)
 8002f90:	f003 fcee 	bl	8006970 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002f94:	4b1d      	ldr	r3, [pc, #116]	; (800300c <HAL_UART_MspInit+0x130>)
 8002f96:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <HAL_UART_MspInit+0x134>)
 8002f98:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002f9a:	4b1c      	ldr	r3, [pc, #112]	; (800300c <HAL_UART_MspInit+0x130>)
 8002f9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fa0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fa2:	4b1a      	ldr	r3, [pc, #104]	; (800300c <HAL_UART_MspInit+0x130>)
 8002fa4:	2240      	movs	r2, #64	; 0x40
 8002fa6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fa8:	4b18      	ldr	r3, [pc, #96]	; (800300c <HAL_UART_MspInit+0x130>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fae:	4b17      	ldr	r3, [pc, #92]	; (800300c <HAL_UART_MspInit+0x130>)
 8002fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fb4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <HAL_UART_MspInit+0x130>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fbc:	4b13      	ldr	r3, [pc, #76]	; (800300c <HAL_UART_MspInit+0x130>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_UART_MspInit+0x130>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002fc8:	4b10      	ldr	r3, [pc, #64]	; (800300c <HAL_UART_MspInit+0x130>)
 8002fca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fce:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <HAL_UART_MspInit+0x130>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002fd6:	480d      	ldr	r0, [pc, #52]	; (800300c <HAL_UART_MspInit+0x130>)
 8002fd8:	f003 f95a 	bl	8006290 <HAL_DMA_Init>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8002fe2:	f7ff fdb3 	bl	8002b4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a08      	ldr	r2, [pc, #32]	; (800300c <HAL_UART_MspInit+0x130>)
 8002fea:	635a      	str	r2, [r3, #52]	; 0x34
 8002fec:	4a07      	ldr	r2, [pc, #28]	; (800300c <HAL_UART_MspInit+0x130>)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ff2:	bf00      	nop
 8002ff4:	3728      	adds	r7, #40	; 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40004800 	.word	0x40004800
 8003000:	40023800 	.word	0x40023800
 8003004:	40020800 	.word	0x40020800
 8003008:	40020400 	.word	0x40020400
 800300c:	20005c34 	.word	0x20005c34
 8003010:	40026058 	.word	0x40026058

08003014 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08c      	sub	sp, #48	; 0x30
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003024:	2200      	movs	r2, #0
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	2036      	movs	r0, #54	; 0x36
 800302a:	f003 f907 	bl	800623c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800302e:	2036      	movs	r0, #54	; 0x36
 8003030:	f003 f920 	bl	8006274 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <HAL_InitTick+0xa4>)
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <HAL_InitTick+0xa4>)
 800303e:	f043 0310 	orr.w	r3, r3, #16
 8003042:	6413      	str	r3, [r2, #64]	; 0x40
 8003044:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <HAL_InitTick+0xa4>)
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003050:	f107 0210 	add.w	r2, r7, #16
 8003054:	f107 0314 	add.w	r3, r7, #20
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f003 ff82 	bl	8006f64 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003060:	f003 ff58 	bl	8006f14 <HAL_RCC_GetPCLK1Freq>
 8003064:	4603      	mov	r3, r0
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800306a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306c:	4a13      	ldr	r2, [pc, #76]	; (80030bc <HAL_InitTick+0xa8>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	0c9b      	lsrs	r3, r3, #18
 8003074:	3b01      	subs	r3, #1
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_InitTick+0xac>)
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <HAL_InitTick+0xb0>)
 800307c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <HAL_InitTick+0xac>)
 8003080:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003084:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003086:	4a0e      	ldr	r2, [pc, #56]	; (80030c0 <HAL_InitTick+0xac>)
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <HAL_InitTick+0xac>)
 800308e:	2200      	movs	r2, #0
 8003090:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_InitTick+0xac>)
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003098:	4809      	ldr	r0, [pc, #36]	; (80030c0 <HAL_InitTick+0xac>)
 800309a:	f004 fbe5 	bl	8007868 <HAL_TIM_Base_Init>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d104      	bne.n	80030ae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80030a4:	4806      	ldr	r0, [pc, #24]	; (80030c0 <HAL_InitTick+0xac>)
 80030a6:	f004 fccb 	bl	8007a40 <HAL_TIM_Base_Start_IT>
 80030aa:	4603      	mov	r3, r0
 80030ac:	e000      	b.n	80030b0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3730      	adds	r7, #48	; 0x30
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40023800 	.word	0x40023800
 80030bc:	431bde83 	.word	0x431bde83
 80030c0:	20007354 	.word	0x20007354
 80030c4:	40001000 	.word	0x40001000

080030c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030cc:	e7fe      	b.n	80030cc <NMI_Handler+0x4>

080030ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030d2:	e7fe      	b.n	80030d2 <HardFault_Handler+0x4>

080030d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d8:	e7fe      	b.n	80030d8 <MemManage_Handler+0x4>

080030da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030de:	e7fe      	b.n	80030de <BusFault_Handler+0x4>

080030e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e4:	e7fe      	b.n	80030e4 <UsageFault_Handler+0x4>

080030e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030e6:	b480      	push	{r7}
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <DMA1_Stream3_IRQHandler+0x10>)
 80030fa:	f003 f9cf 	bl	800649c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20005c34 	.word	0x20005c34

08003108 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <TIM3_IRQHandler+0x10>)
 800310e:	f005 f9e3 	bl	80084d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20005d48 	.word	0x20005d48

0800311c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003120:	4803      	ldr	r0, [pc, #12]	; (8003130 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8003122:	f005 f9d9 	bl	80084d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8003126:	4803      	ldr	r0, [pc, #12]	; (8003134 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8003128:	f005 f9d6 	bl	80084d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800312c:	bf00      	nop
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20004b4c 	.word	0x20004b4c
 8003134:	20006f94 	.word	0x20006f94

08003138 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <TIM6_DAC_IRQHandler+0x10>)
 800313e:	f005 f9cb 	bl	80084d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20007354 	.word	0x20007354

0800314c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003154:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <_sbrk+0x5c>)
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <_sbrk+0x60>)
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003160:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <_sbrk+0x64>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <_sbrk+0x64>)
 800316a:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <_sbrk+0x68>)
 800316c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <_sbrk+0x64>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	429a      	cmp	r2, r3
 800317a:	d207      	bcs.n	800318c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800317c:	f009 ffbe 	bl	800d0fc <__errno>
 8003180:	4603      	mov	r3, r0
 8003182:	220c      	movs	r2, #12
 8003184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800318a:	e009      	b.n	80031a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800318c:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <_sbrk+0x64>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003192:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <_sbrk+0x64>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <_sbrk+0x64>)
 800319c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800319e:	68fb      	ldr	r3, [r7, #12]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20020000 	.word	0x20020000
 80031ac:	00000400 	.word	0x00000400
 80031b0:	20000214 	.word	0x20000214
 80031b4:	20007478 	.word	0x20007478

080031b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <SystemInit+0x20>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c2:	4a05      	ldr	r2, [pc, #20]	; (80031d8 <SystemInit+0x20>)
 80031c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <UART_TxCpltCallback>:

UART_HandleTypeDef* huart;

volatile bool data_transmitted= false;

void UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	data_transmitted = true;
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <UART_TxCpltCallback+0x1c>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000218 	.word	0x20000218

080031fc <DATASTREAM_Init>:


// Setting up streaming
void DATASTREAM_Init(UART_HandleTypeDef *huart_init){
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]

	// Setting StdIO Stream
	RetargetInit(huart_init);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f002 fa5b 	bl	80056c0 <RetargetInit>

	// Local UART handle
	huart= huart_init;
 800320a:	4a05      	ldr	r2, [pc, #20]	; (8003220 <DATASTREAM_Init+0x24>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6013      	str	r3, [r2, #0]

	huart->TxCpltCallback= UART_TxCpltCallback;
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <DATASTREAM_Init+0x24>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a03      	ldr	r2, [pc, #12]	; (8003224 <DATASTREAM_Init+0x28>)
 8003216:	649a      	str	r2, [r3, #72]	; 0x48


}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20007408 	.word	0x20007408
 8003224:	080031dd 	.word	0x080031dd

08003228 <DATASTREAM_RTOS_SendValue>:

}

// Do send values into serial, using a Variadic function. This version is for freeRTOS tha doesn't support
// printf and sprintf
void DATASTREAM_RTOS_SendValue(DATASTREAM_mode mode, int vargn, ...){
 8003228:	b40e      	push	{r1, r2, r3}
 800322a:	b580      	push	{r7, lr}
 800322c:	b08b      	sub	sp, #44	; 0x2c
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	71fb      	strb	r3, [r7, #7]

	// Initializing variadic arguments, using "stdarg.h" macros
	va_list vargp;
	va_start( vargp, vargn );
 8003234:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003238:	61fb      	str	r3, [r7, #28]

	char tmp_buff[15], tmp_char[1]= {'\t'};
 800323a:	2309      	movs	r3, #9
 800323c:	723b      	strb	r3, [r7, #8]

	switch(mode){
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d16e      	bne.n	8003322 <DATASTREAM_RTOS_SendValue+0xfa>
		// ---- Streaming values for Matlab script --------------------
		// (Using this mode are sending "n" values separated by tab character,
		//  each stream is ended with a newline)
		case stream_on_matlab:

			for(int i=0; i<vargn; i++){
 8003244:	2300      	movs	r3, #0
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
 8003248:	e043      	b.n	80032d2 <DATASTREAM_RTOS_SendValue+0xaa>

				// Init buffer
				for(int k=0; k<sizeof(tmp_buff); k++)
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]
 800324e:	e008      	b.n	8003262 <DATASTREAM_RTOS_SendValue+0x3a>
					tmp_buff[k]= '\0';
 8003250:	f107 020c 	add.w	r2, r7, #12
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	4413      	add	r3, r2
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
				for(int k=0; k<sizeof(tmp_buff); k++)
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	3301      	adds	r3, #1
 8003260:	623b      	str	r3, [r7, #32]
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	2b0e      	cmp	r3, #14
 8003266:	d9f3      	bls.n	8003250 <DATASTREAM_RTOS_SendValue+0x28>

				// Float to Array!
				ftoa((float)va_arg(vargp, double), tmp_buff, 7);
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	3307      	adds	r3, #7
 800326c:	f023 0307 	bic.w	r3, r3, #7
 8003270:	f103 0208 	add.w	r2, r3, #8
 8003274:	61fa      	str	r2, [r7, #28]
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	4610      	mov	r0, r2
 800327c:	4619      	mov	r1, r3
 800327e:	f7fd fcd3 	bl	8000c28 <__aeabi_d2f>
 8003282:	4602      	mov	r2, r0
 8003284:	f107 030c 	add.w	r3, r7, #12
 8003288:	2107      	movs	r1, #7
 800328a:	4618      	mov	r0, r3
 800328c:	ee00 2a10 	vmov	s0, r2
 8003290:	f000 f8de 	bl	8003450 <ftoa>

				// Cat strings
				strcat(tmp_buff,tmp_char);
 8003294:	f107 0208 	add.w	r2, r7, #8
 8003298:	f107 030c 	add.w	r3, r7, #12
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f00a ffa4 	bl	800e1ec <strcat>

				// Transmit
				data_transmitted= false;
 80032a4:	4b22      	ldr	r3, [pc, #136]	; (8003330 <DATASTREAM_RTOS_SendValue+0x108>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(huart, (uint8_t *)tmp_buff, sizeof(tmp_buff));
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <DATASTREAM_RTOS_SendValue+0x10c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f107 010c 	add.w	r1, r7, #12
 80032b2:	220f      	movs	r2, #15
 80032b4:	4618      	mov	r0, r3
 80032b6:	f006 fbc3 	bl	8009a40 <HAL_UART_Transmit_DMA>

				// Wait until the uart is ready
				while( !data_transmitted )
 80032ba:	bf00      	nop
 80032bc:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <DATASTREAM_RTOS_SendValue+0x108>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f083 0301 	eor.w	r3, r3, #1
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f7      	bne.n	80032bc <DATASTREAM_RTOS_SendValue+0x94>
			for(int i=0; i<vargn; i++){
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	3301      	adds	r3, #1
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
 80032d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d6:	429a      	cmp	r2, r3
 80032d8:	dbb7      	blt.n	800324a <DATASTREAM_RTOS_SendValue+0x22>

			}


			// Deleting last tab and adding a newline
			tmp_char[0]= '\b';
 80032da:	2308      	movs	r3, #8
 80032dc:	723b      	strb	r3, [r7, #8]

			// Transmit
			data_transmitted= false;
 80032de:	4b14      	ldr	r3, [pc, #80]	; (8003330 <DATASTREAM_RTOS_SendValue+0x108>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(huart, (uint8_t *)tmp_char, sizeof(tmp_char));
 80032e4:	4b13      	ldr	r3, [pc, #76]	; (8003334 <DATASTREAM_RTOS_SendValue+0x10c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f107 0108 	add.w	r1, r7, #8
 80032ec:	2201      	movs	r2, #1
 80032ee:	4618      	mov	r0, r3
 80032f0:	f006 fba6 	bl	8009a40 <HAL_UART_Transmit_DMA>

			// Wait until the uart is ready
			while( !data_transmitted )
 80032f4:	bf00      	nop
 80032f6:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <DATASTREAM_RTOS_SendValue+0x108>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f083 0301 	eor.w	r3, r3, #1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f7      	bne.n	80032f6 <DATASTREAM_RTOS_SendValue+0xce>
				;

			// Deleting last tab and adding a newline
			tmp_char[0]= '\n';
 8003306:	230a      	movs	r3, #10
 8003308:	723b      	strb	r3, [r7, #8]

			// Transmit
			data_transmitted= false;
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <DATASTREAM_RTOS_SendValue+0x108>)
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(huart, (uint8_t *)tmp_char, sizeof(tmp_char));
 8003310:	4b08      	ldr	r3, [pc, #32]	; (8003334 <DATASTREAM_RTOS_SendValue+0x10c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f107 0108 	add.w	r1, r7, #8
 8003318:	2201      	movs	r2, #1
 800331a:	4618      	mov	r0, r3
 800331c:	f006 fb90 	bl	8009a40 <HAL_UART_Transmit_DMA>

			break;
 8003320:	bf00      	nop
	}

	// DeInit variables arguments
	va_end( vargp );

}
 8003322:	bf00      	nop
 8003324:	372c      	adds	r7, #44	; 0x2c
 8003326:	46bd      	mov	sp, r7
 8003328:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800332c:	b003      	add	sp, #12
 800332e:	4770      	bx	lr
 8003330:	20000218 	.word	0x20000218
 8003334:	20007408 	.word	0x20007408

08003338 <reverse>:
 */

#include <my_lib/datastream_utils.h>


void reverse(char* str, int len){
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	3b01      	subs	r3, #1
 800334a:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800334c:	e018      	b.n	8003380 <reverse+0x48>
        temp = str[i];
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	4413      	add	r3, r2
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	441a      	add	r2, r3
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	440b      	add	r3, r1
 8003364:	7812      	ldrb	r2, [r2, #0]
 8003366:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	701a      	strb	r2, [r3, #0]
        i++;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3301      	adds	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
        j--;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	3b01      	subs	r3, #1
 800337e:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	429a      	cmp	r2, r3
 8003386:	dbe2      	blt.n	800334e <reverse+0x16>
    }
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <itostr>:

int itostr(int x, char str[], int d){
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
    int i = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
    int neg= 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]

    if( x<0 ){
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	da23      	bge.n	80033fa <itostr+0x62>
    	x= -x;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	425b      	negs	r3, r3
 80033b6:	60fb      	str	r3, [r7, #12]
    	neg= 1;
 80033b8:	2301      	movs	r3, #1
 80033ba:	613b      	str	r3, [r7, #16]
    }

    while (x) {
 80033bc:	e01d      	b.n	80033fa <itostr+0x62>
        str[i++] = (x % 10) + '0';
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4b22      	ldr	r3, [pc, #136]	; (800344c <itostr+0xb4>)
 80033c2:	fb83 1302 	smull	r1, r3, r3, r2
 80033c6:	1099      	asrs	r1, r3, #2
 80033c8:	17d3      	asrs	r3, r2, #31
 80033ca:	1ac9      	subs	r1, r1, r3
 80033cc:	460b      	mov	r3, r1
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	1ad1      	subs	r1, r2, r3
 80033d6:	b2ca      	uxtb	r2, r1
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	1c59      	adds	r1, r3, #1
 80033dc:	6179      	str	r1, [r7, #20]
 80033de:	4619      	mov	r1, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	440b      	add	r3, r1
 80033e4:	3230      	adds	r2, #48	; 0x30
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a17      	ldr	r2, [pc, #92]	; (800344c <itostr+0xb4>)
 80033ee:	fb82 1203 	smull	r1, r2, r2, r3
 80033f2:	1092      	asrs	r2, r2, #2
 80033f4:	17db      	asrs	r3, r3, #31
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	60fb      	str	r3, [r7, #12]
    while (x) {
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1de      	bne.n	80033be <itostr+0x26>
    }

    while (i < d)
 8003400:	e007      	b.n	8003412 <itostr+0x7a>
        str[i++] = '0';
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	617a      	str	r2, [r7, #20]
 8003408:	461a      	mov	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4413      	add	r3, r2
 800340e:	2230      	movs	r2, #48	; 0x30
 8003410:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	429a      	cmp	r2, r3
 8003418:	dbf3      	blt.n	8003402 <itostr+0x6a>

    if(neg)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <itostr+0x98>
    	str[i++]= '-';
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	617a      	str	r2, [r7, #20]
 8003426:	461a      	mov	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4413      	add	r3, r2
 800342c:	222d      	movs	r2, #45	; 0x2d
 800342e:	701a      	strb	r2, [r3, #0]

    reverse(str, i);
 8003430:	6979      	ldr	r1, [r7, #20]
 8003432:	68b8      	ldr	r0, [r7, #8]
 8003434:	f7ff ff80 	bl	8003338 <reverse>

    str[i] = '\0';
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	4413      	add	r3, r2
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]

    return i;
 8003442:	697b      	ldr	r3, [r7, #20]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	66666667 	.word	0x66666667

08003450 <ftoa>:

void ftoa(float n, char* res, int afterpoint){
 8003450:	b5b0      	push	{r4, r5, r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	ed87 0a03 	vstr	s0, [r7, #12]
 800345a:	60b8      	str	r0, [r7, #8]
 800345c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 800345e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003466:	ee17 3a90 	vmov	r3, s15
 800346a:	617b      	str	r3, [r7, #20]
    float fpart;

    int i;

    if( n < 0 )
 800346c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003470:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003478:	d50d      	bpl.n	8003496 <ftoa+0x46>
    	// Extract floating part
    	fpart = -(n - (float)ipart);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	ee07 3a90 	vmov	s15, r3
 8003480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003484:	ed97 7a03 	vldr	s14, [r7, #12]
 8003488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800348c:	eef1 7a67 	vneg.f32	s15, s15
 8003490:	edc7 7a07 	vstr	s15, [r7, #28]
 8003494:	e00a      	b.n	80034ac <ftoa+0x5c>
    else
    	// Extract floating part
    	fpart = n - (float)ipart;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	ee07 3a90 	vmov	s15, r3
 800349c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80034a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034a8:	edc7 7a07 	vstr	s15, [r7, #28]

    // convert integer part to string when ipart is 0
    if( n < 1 && n > 0){
 80034ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80034b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034bc:	d50c      	bpl.n	80034d8 <ftoa+0x88>
 80034be:	edd7 7a03 	vldr	s15, [r7, #12]
 80034c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	dd05      	ble.n	80034d8 <ftoa+0x88>
    	res[0]= '0';
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2230      	movs	r2, #48	; 0x30
 80034d0:	701a      	strb	r2, [r3, #0]
    	i= 1;
 80034d2:	2301      	movs	r3, #1
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	e01f      	b.n	8003518 <ftoa+0xc8>
    }
    else
    if( n < 0 && n > -1){
 80034d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80034dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e4:	d512      	bpl.n	800350c <ftoa+0xbc>
 80034e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80034ea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80034ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f6:	dd09      	ble.n	800350c <ftoa+0xbc>
    	res[0]= '-';
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	222d      	movs	r2, #45	; 0x2d
 80034fc:	701a      	strb	r2, [r3, #0]
    	res[1]= '0';
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	3301      	adds	r3, #1
 8003502:	2230      	movs	r2, #48	; 0x30
 8003504:	701a      	strb	r2, [r3, #0]
    	i= 2;
 8003506:	2302      	movs	r3, #2
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	e005      	b.n	8003518 <ftoa+0xc8>
    }
    else
    	// convert integer part to string
    	i = itostr(ipart, res, 0);
 800350c:	2200      	movs	r2, #0
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	6978      	ldr	r0, [r7, #20]
 8003512:	f7ff ff41 	bl	8003398 <itostr>
 8003516:	61b8      	str	r0, [r7, #24]

    // check for display option after point
    if (afterpoint != 0) {
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d030      	beq.n	8003580 <ftoa+0x130>
        res[i] = '.';
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	4413      	add	r3, r2
 8003524:	222e      	movs	r2, #46	; 0x2e
 8003526:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 8003528:	69f8      	ldr	r0, [r7, #28]
 800352a:	f7fd f82d 	bl	8000588 <__aeabi_f2d>
 800352e:	4604      	mov	r4, r0
 8003530:	460d      	mov	r5, r1
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fd f816 	bl	8000564 <__aeabi_i2d>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	ec43 2b11 	vmov	d1, r2, r3
 8003540:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8003588 <ftoa+0x138>
 8003544:	f00e fbac 	bl	8011ca0 <pow>
 8003548:	ec53 2b10 	vmov	r2, r3, d0
 800354c:	4620      	mov	r0, r4
 800354e:	4629      	mov	r1, r5
 8003550:	f7fd f872 	bl	8000638 <__aeabi_dmul>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4610      	mov	r0, r2
 800355a:	4619      	mov	r1, r3
 800355c:	f7fd fb64 	bl	8000c28 <__aeabi_d2f>
 8003560:	4603      	mov	r3, r0
 8003562:	61fb      	str	r3, [r7, #28]
        itostr((int)fpart, res + i + 1, afterpoint);
 8003564:	edd7 7a07 	vldr	s15, [r7, #28]
 8003568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	3301      	adds	r3, #1
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	4413      	add	r3, r2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	4619      	mov	r1, r3
 8003578:	ee17 0a90 	vmov	r0, s15
 800357c:	f7ff ff0c 	bl	8003398 <itostr>
    }
}
 8003580:	bf00      	nop
 8003582:	3720      	adds	r7, #32
 8003584:	46bd      	mov	sp, r7
 8003586:	bdb0      	pop	{r4, r5, r7, pc}
 8003588:	00000000 	.word	0x00000000
 800358c:	40240000 	.word	0x40240000

08003590 <DIFFDRIVE_Init>:


/* Functions Implementation */

// Initialization
void DIFFDRIVE_Init(DIFFDRIVE_HandleTypeDef* init_hdiffdrv){
 8003590:	b5b0      	push	{r4, r5, r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]

	// Initializing global handle
	hdiffdrv= init_hdiffdrv;
 8003598:	4aa0      	ldr	r2, [pc, #640]	; (800381c <DIFFDRIVE_Init+0x28c>)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6013      	str	r3, [r2, #0]

	// Assigning control struct
	DIFFDRIVE_CONTROL_TypeDef *hctrl= hdiffdrv->control;
 800359e:	4b9f      	ldr	r3, [pc, #636]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80035a6:	623b      	str	r3, [r7, #32]

	// Initializing handle structure values from Init field
	hdiffdrv->timing.htim=       		   hdiffdrv->Init.timing_htim;
 80035a8:	4b9c      	ldr	r3, [pc, #624]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b9b      	ldr	r3, [pc, #620]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80035b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	hdiffdrv->timing.time_step=   		   hdiffdrv->Init.timing_time_step;
 80035b6:	4b99      	ldr	r3, [pc, #612]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4b98      	ldr	r3, [pc, #608]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80035c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	hdiffdrv->mech_prmtr.r=     		   hdiffdrv->Init.mech_prmtr_r;
 80035c4:	4b95      	ldr	r3, [pc, #596]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4b94      	ldr	r3, [pc, #592]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	hdiffdrv->mech_prmtr.l=    			   hdiffdrv->Init.mech_prmtr_l;
 80035d2:	4b92      	ldr	r3, [pc, #584]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4b91      	ldr	r3, [pc, #580]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80035dc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	hdiffdrv->mech_prmtr.max_wheel_speed=  hdiffdrv->Init.mech_prmtr_max_wheel_speed;
 80035e0:	4b8e      	ldr	r3, [pc, #568]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b8d      	ldr	r3, [pc, #564]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80035ea:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80035ee:	2300      	movs	r3, #0
 80035f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80035f4:	e201      	b.n	80039fa <DIFFDRIVE_Init+0x46a>

		// Initializing feedforward Control handle structure values from Init field
		hctrl[side].fdfrwrd.Init.arma_n_ar=  hdiffdrv->Init.control_fdfrwrd_arma_n_ar[side];
 80035f6:	4b89      	ldr	r3, [pc, #548]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80035f8:	6819      	ldr	r1, [r3, #0]
 80035fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003602:	2068      	movs	r0, #104	; 0x68
 8003604:	fb00 f202 	mul.w	r2, r0, r2
 8003608:	6a38      	ldr	r0, [r7, #32]
 800360a:	4402      	add	r2, r0
 800360c:	3330      	adds	r3, #48	; 0x30
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	440b      	add	r3, r1
 8003612:	889b      	ldrh	r3, [r3, #4]
 8003614:	8013      	strh	r3, [r2, #0]
		hctrl[side].fdfrwrd.Init.arma_n_ma=  hdiffdrv->Init.control_fdfrwrd_arma_n_ma[side];
 8003616:	4b81      	ldr	r3, [pc, #516]	; (800381c <DIFFDRIVE_Init+0x28c>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800361e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003622:	2068      	movs	r0, #104	; 0x68
 8003624:	fb00 f303 	mul.w	r3, r0, r3
 8003628:	6a38      	ldr	r0, [r7, #32]
 800362a:	4403      	add	r3, r0
 800362c:	3134      	adds	r1, #52	; 0x34
 800362e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003632:	805a      	strh	r2, [r3, #2]
		hctrl[side].fdfrwrd.Init.arma_AR=    hdiffdrv->Init.control_fdfrwrd_arma_AR[side];
 8003634:	4b79      	ldr	r3, [pc, #484]	; (800381c <DIFFDRIVE_Init+0x28c>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800363c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003640:	2068      	movs	r0, #104	; 0x68
 8003642:	fb00 f303 	mul.w	r3, r0, r3
 8003646:	6a38      	ldr	r0, [r7, #32]
 8003648:	4403      	add	r3, r0
 800364a:	311c      	adds	r1, #28
 800364c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003650:	609a      	str	r2, [r3, #8]
		hctrl[side].fdfrwrd.Init.arma_MA=    hdiffdrv->Init.control_fdfrwrd_arma_MA[side];
 8003652:	4b72      	ldr	r3, [pc, #456]	; (800381c <DIFFDRIVE_Init+0x28c>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800365a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800365e:	2068      	movs	r0, #104	; 0x68
 8003660:	fb00 f303 	mul.w	r3, r0, r3
 8003664:	6a38      	ldr	r0, [r7, #32]
 8003666:	4403      	add	r3, r0
 8003668:	311e      	adds	r1, #30
 800366a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800366e:	60da      	str	r2, [r3, #12]
		hctrl[side].fdfrwrd.Init.arma_tau=   hdiffdrv->Init.control_fdfrwrd_arma_tau[side];
 8003670:	4b6a      	ldr	r3, [pc, #424]	; (800381c <DIFFDRIVE_Init+0x28c>)
 8003672:	6819      	ldr	r1, [r3, #0]
 8003674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003678:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800367c:	2068      	movs	r0, #104	; 0x68
 800367e:	fb00 f202 	mul.w	r2, r0, r2
 8003682:	6a38      	ldr	r0, [r7, #32]
 8003684:	4402      	add	r2, r0
 8003686:	3334      	adds	r3, #52	; 0x34
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	440b      	add	r3, r1
 800368c:	889b      	ldrh	r3, [r3, #4]
 800368e:	8093      	strh	r3, [r2, #4]

		// Init feedforward struct
		FEEDFORWARD_Init(&hctrl[side].fdfrwrd);
 8003690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003694:	2268      	movs	r2, #104	; 0x68
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	6a3a      	ldr	r2, [r7, #32]
 800369c:	4413      	add	r3, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f001 fd7c 	bl	800519c <FEEDFORWARD_Init>

		// Initializing pid Control handle structure values from Init field
		hctrl[side].pid.Init.P=  hdiffdrv->Init.control_pid_P[side];
 80036a4:	4b5d      	ldr	r3, [pc, #372]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80036a6:	6819      	ldr	r1, [r3, #0]
 80036a8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80036ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036b0:	2068      	movs	r0, #104	; 0x68
 80036b2:	fb00 f303 	mul.w	r3, r0, r3
 80036b6:	6a38      	ldr	r0, [r7, #32]
 80036b8:	4403      	add	r3, r0
 80036ba:	3220      	adds	r2, #32
 80036bc:	0092      	lsls	r2, r2, #2
 80036be:	440a      	add	r2, r1
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	635a      	str	r2, [r3, #52]	; 0x34
		hctrl[side].pid.Init.I=  hdiffdrv->Init.control_pid_I[side];
 80036c4:	4b55      	ldr	r3, [pc, #340]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80036c6:	6819      	ldr	r1, [r3, #0]
 80036c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80036cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036d0:	2068      	movs	r0, #104	; 0x68
 80036d2:	fb00 f303 	mul.w	r3, r0, r3
 80036d6:	6a38      	ldr	r0, [r7, #32]
 80036d8:	4403      	add	r3, r0
 80036da:	3222      	adds	r2, #34	; 0x22
 80036dc:	0092      	lsls	r2, r2, #2
 80036de:	440a      	add	r2, r1
 80036e0:	6812      	ldr	r2, [r2, #0]
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38
		hctrl[side].pid.Init.D=  hdiffdrv->Init.control_pid_D[side];
 80036e4:	4b4d      	ldr	r3, [pc, #308]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80036e6:	6819      	ldr	r1, [r3, #0]
 80036e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80036ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036f0:	2068      	movs	r0, #104	; 0x68
 80036f2:	fb00 f303 	mul.w	r3, r0, r3
 80036f6:	6a38      	ldr	r0, [r7, #32]
 80036f8:	4403      	add	r3, r0
 80036fa:	3224      	adds	r2, #36	; 0x24
 80036fc:	0092      	lsls	r2, r2, #2
 80036fe:	440a      	add	r2, r1
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	63da      	str	r2, [r3, #60]	; 0x3c
		hctrl[side].pid.Init.Ts= hdiffdrv->timing.time_step;
 8003704:	4b45      	ldr	r3, [pc, #276]	; (800381c <DIFFDRIVE_Init+0x28c>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800370c:	2168      	movs	r1, #104	; 0x68
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	6a39      	ldr	r1, [r7, #32]
 8003714:	440b      	add	r3, r1
 8003716:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 800371a:	641a      	str	r2, [r3, #64]	; 0x40

		// Init feedforward struct
		PID_Init(&hctrl[side].pid);
 800371c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003720:	2268      	movs	r2, #104	; 0x68
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	6a3a      	ldr	r2, [r7, #32]
 8003728:	4413      	add	r3, r2
 800372a:	3334      	adds	r3, #52	; 0x34
 800372c:	4618      	mov	r0, r3
 800372e:	f001 ff16 	bl	800555e <PID_Init>

		// Sensors
		hdiffdrv->encoder[side].htim=       hdiffdrv->Init.encoder_htim[side];
 8003732:	4b3a      	ldr	r3, [pc, #232]	; (800381c <DIFFDRIVE_Init+0x28c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800373a:	4a38      	ldr	r2, [pc, #224]	; (800381c <DIFFDRIVE_Init+0x28c>)
 800373c:	6810      	ldr	r0, [r2, #0]
 800373e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003742:	310e      	adds	r1, #14
 8003744:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4403      	add	r3, r0
 8003752:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003756:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].channel=    hdiffdrv->Init.encoder_channel[side];
 8003758:	4b30      	ldr	r3, [pc, #192]	; (800381c <DIFFDRIVE_Init+0x28c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003760:	4a2e      	ldr	r2, [pc, #184]	; (800381c <DIFFDRIVE_Init+0x28c>)
 8003762:	6810      	ldr	r0, [r2, #0]
 8003764:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003768:	3110      	adds	r1, #16
 800376a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4403      	add	r3, r0
 8003778:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800377c:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].resolution= hdiffdrv->Init.encoder_resolution[side];
 800377e:	4b27      	ldr	r3, [pc, #156]	; (800381c <DIFFDRIVE_Init+0x28c>)
 8003780:	6819      	ldr	r1, [r3, #0]
 8003782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003786:	4a25      	ldr	r2, [pc, #148]	; (800381c <DIFFDRIVE_Init+0x28c>)
 8003788:	6810      	ldr	r0, [r2, #0]
 800378a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800378e:	3316      	adds	r3, #22
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	3304      	adds	r3, #4
 8003796:	6819      	ldr	r1, [r3, #0]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4403      	add	r3, r0
 80037a2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80037a6:	6019      	str	r1, [r3, #0]

		// Motors
		hdiffdrv->motor[side].supply_voltage= hdiffdrv->Init.motor_supply_voltage[side];
 80037a8:	4b1c      	ldr	r3, [pc, #112]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037b0:	4b1a      	ldr	r3, [pc, #104]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80037b2:	6819      	ldr	r1, [r3, #0]
 80037b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037b8:	3208      	adds	r2, #8
 80037ba:	0092      	lsls	r2, r2, #2
 80037bc:	4402      	add	r2, r0
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	202c      	movs	r0, #44	; 0x2c
 80037c2:	fb00 f303 	mul.w	r3, r0, r3
 80037c6:	440b      	add	r3, r1
 80037c8:	33b8      	adds	r3, #184	; 0xb8
 80037ca:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].max_voltage=    hdiffdrv->Init.motor_max_voltage[side];
 80037cc:	4b13      	ldr	r3, [pc, #76]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80037d6:	6819      	ldr	r1, [r3, #0]
 80037d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037dc:	320a      	adds	r2, #10
 80037de:	0092      	lsls	r2, r2, #2
 80037e0:	4402      	add	r2, r0
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	202c      	movs	r0, #44	; 0x2c
 80037e6:	fb00 f303 	mul.w	r3, r0, r3
 80037ea:	440b      	add	r3, r1
 80037ec:	33bc      	adds	r3, #188	; 0xbc
 80037ee:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].min_voltage=    hdiffdrv->Init.motor_min_voltage[side];
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80037f2:	6818      	ldr	r0, [r3, #0]
 80037f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <DIFFDRIVE_Init+0x28c>)
 80037fa:	6819      	ldr	r1, [r3, #0]
 80037fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003800:	320c      	adds	r2, #12
 8003802:	0092      	lsls	r2, r2, #2
 8003804:	4402      	add	r2, r0
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	202c      	movs	r0, #44	; 0x2c
 800380a:	fb00 f303 	mul.w	r3, r0, r3
 800380e:	440b      	add	r3, r1
 8003810:	33c0      	adds	r3, #192	; 0xc0
 8003812:	601a      	str	r2, [r3, #0]

		// Starting Motor Timer
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 8003814:	2300      	movs	r3, #0
 8003816:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800381a:	e05d      	b.n	80038d8 <DIFFDRIVE_Init+0x348>
 800381c:	2000740c 	.word	0x2000740c
			hdiffdrv->motor[side].htim[dir]= hdiffdrv->Init.motor_htim[side][dir];
 8003820:	4bc2      	ldr	r3, [pc, #776]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 8003828:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 800382c:	4abf      	ldr	r2, [pc, #764]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 800382e:	6811      	ldr	r1, [r2, #0]
 8003830:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003834:	f997 4026 	ldrsb.w	r4, [r7, #38]	; 0x26
 8003838:	006d      	lsls	r5, r5, #1
 800383a:	4428      	add	r0, r5
 800383c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4413      	add	r3, r2
 800384a:	4423      	add	r3, r4
 800384c:	332a      	adds	r3, #42	; 0x2a
 800384e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

			hdiffdrv->motor[side].pwm_channel[dir]= hdiffdrv->Init.motor_pwm_channel[side][dir];
 8003852:	4bb6      	ldr	r3, [pc, #728]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 800385a:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 800385e:	4ab3      	ldr	r2, [pc, #716]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003860:	6811      	ldr	r1, [r2, #0]
 8003862:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003866:	f997 4026 	ldrsb.w	r4, [r7, #38]	; 0x26
 800386a:	006d      	lsls	r5, r5, #1
 800386c:	4428      	add	r0, r5
 800386e:	3004      	adds	r0, #4
 8003870:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	4413      	add	r3, r2
 800387e:	4423      	add	r3, r4
 8003880:	332c      	adds	r3, #44	; 0x2c
 8003882:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
			HAL_TIM_PWM_Start(hdiffdrv->motor[side].htim[dir], hdiffdrv->motor[side].pwm_channel[dir]);
 8003886:	4ba9      	ldr	r3, [pc, #676]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003888:	6819      	ldr	r1, [r3, #0]
 800388a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800388e:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	4403      	add	r3, r0
 800389e:	332a      	adds	r3, #42	; 0x2a
 80038a0:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 80038a4:	4ba1      	ldr	r3, [pc, #644]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 80038a6:	6819      	ldr	r1, [r3, #0]
 80038a8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80038ac:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4413      	add	r3, r2
 80038ba:	4403      	add	r3, r0
 80038bc:	332c      	adds	r3, #44	; 0x2c
 80038be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038c2:	4619      	mov	r1, r3
 80038c4:	4620      	mov	r0, r4
 80038c6:	f004 f9c1 	bl	8007c4c <HAL_TIM_PWM_Start>
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 80038ca:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	3301      	adds	r3, #1
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80038d8:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80038dc:	2b01      	cmp	r3, #1
 80038de:	dd9f      	ble.n	8003820 <DIFFDRIVE_Init+0x290>
		}

	    // Computing duty beat ranges
		float supply_volt= hdiffdrv->motor[side].supply_voltage;
 80038e0:	4b92      	ldr	r3, [pc, #584]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038e8:	212c      	movs	r1, #44	; 0x2c
 80038ea:	fb01 f303 	mul.w	r3, r1, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	33b8      	adds	r3, #184	; 0xb8
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	617b      	str	r3, [r7, #20]
		float min_volt=	   hdiffdrv->motor[side].min_voltage;
 80038f6:	4b8d      	ldr	r3, [pc, #564]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038fe:	212c      	movs	r1, #44	; 0x2c
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	4413      	add	r3, r2
 8003906:	33c0      	adds	r3, #192	; 0xc0
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	613b      	str	r3, [r7, #16]
		float max_volt=    hdiffdrv->motor[side].max_voltage;
 800390c:	4b87      	ldr	r3, [pc, #540]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	33bc      	adds	r3, #188	; 0xbc
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60fb      	str	r3, [r7, #12]

		// Forward or backward are the same in this case, I use timers with the same parameters
		hdiffdrv->motor[side].duty_beat_min= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*min_volt/supply_volt;
 8003922:	4b82      	ldr	r3, [pc, #520]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800392a:	212c      	movs	r1, #44	; 0x2c
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	4413      	add	r3, r2
 8003932:	33a8      	adds	r3, #168	; 0xa8
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003942:	edd7 7a04 	vldr	s15, [r7, #16]
 8003946:	ee67 6a27 	vmul.f32	s13, s14, s15
 800394a:	ed97 7a05 	vldr	s14, [r7, #20]
 800394e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003952:	4b76      	ldr	r3, [pc, #472]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800395a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800395e:	ee17 0a90 	vmov	r0, s15
 8003962:	212c      	movs	r1, #44	; 0x2c
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	4413      	add	r3, r2
 800396a:	33c4      	adds	r3, #196	; 0xc4
 800396c:	6018      	str	r0, [r3, #0]
		hdiffdrv->motor[side].duty_beat_max= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*max_volt/supply_volt;
 800396e:	4b6f      	ldr	r3, [pc, #444]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	33a8      	adds	r3, #168	; 0xa8
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	ee07 3a90 	vmov	s15, r3
 800398a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800398e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003992:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003996:	ed97 7a05 	vldr	s14, [r7, #20]
 800399a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800399e:	4b63      	ldr	r3, [pc, #396]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039aa:	ee17 0a90 	vmov	r0, s15
 80039ae:	212c      	movs	r1, #44	; 0x2c
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	4413      	add	r3, r2
 80039b6:	33c8      	adds	r3, #200	; 0xc8
 80039b8:	6018      	str	r0, [r3, #0]

		// Starting Sensors
		HAL_TIM_Encoder_Start(hdiffdrv->encoder[side].htim, hdiffdrv->encoder[side].channel);
 80039ba:	4b5c      	ldr	r3, [pc, #368]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 80039bc:	6819      	ldr	r1, [r3, #0]
 80039be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	4b56      	ldr	r3, [pc, #344]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 80039d4:	6819      	ldr	r1, [r3, #0]
 80039d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4619      	mov	r1, r3
 80039ec:	f004 fce6 	bl	80083bc <HAL_TIM_Encoder_Start>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80039f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039f4:	3301      	adds	r3, #1
 80039f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	f67f adf9 	bls.w	80035f6 <DIFFDRIVE_Init+0x66>

	}

	// Initialize pose
	hdiffdrv->state.pose.x_a   +=  0;
 8003a04:	4b49      	ldr	r3, [pc, #292]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	edd3 7a7e 	vldr	s15, [r3, #504]	; 0x1f8
 8003a0c:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003b30 <DIFFDRIVE_Init+0x5a0>
 8003a14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a18:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
	hdiffdrv->state.pose.y_a   +=  0;
 8003a1c:	4b43      	ldr	r3, [pc, #268]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	edd3 7a7f 	vldr	s15, [r3, #508]	; 0x1fc
 8003a24:	4b41      	ldr	r3, [pc, #260]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003b30 <DIFFDRIVE_Init+0x5a0>
 8003a2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a30:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
	hdiffdrv->state.pose.theta +=  0;
 8003a34:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003a3c:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003b30 <DIFFDRIVE_Init+0x5a0>
 8003a44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a48:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200

	// Allocating history' arrays
	hdiffdrv->history.max_sample= hdiffdrv->Init.history_max_sample;
 8003a4c:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003a54:	4b35      	ldr	r3, [pc, #212]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230

	// Allocate all variables with zeros (calloc)
	hdiffdrv->history.state_target=  (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 8003a5c:	4b33      	ldr	r3, [pc, #204]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8003a64:	4a31      	ldr	r2, [pc, #196]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003a66:	6814      	ldr	r4, [r2, #0]
 8003a68:	2124      	movs	r1, #36	; 0x24
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f009 fb3e 	bl	800d0ec <calloc>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
	hdiffdrv->history.state_measure= (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 8003a76:	4b2d      	ldr	r3, [pc, #180]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8003a7e:	4a2b      	ldr	r2, [pc, #172]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003a80:	6814      	ldr	r4, [r2, #0]
 8003a82:	2124      	movs	r1, #36	; 0x24
 8003a84:	4618      	mov	r0, r3
 8003a86:	f009 fb31 	bl	800d0ec <calloc>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c

	// Initializing time index
	hdiffdrv->history.index= 0;
 8003a90:	4b26      	ldr	r3, [pc, #152]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	hdiffdrv->history.sample_cnt= 0;
 8003a9a:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

	// Reset timing flag
	hdiffdrv->timing.flag= false;
 8003aa4:	4b21      	ldr	r3, [pc, #132]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4


	/* Computing prescaler ad autoreload period to obtain an update event with frequency 1/timing.time_step Hertz */

	DIFFDRIVE_TIMING_TypeDef* timing= &(hdiffdrv->timing);
 8003aae:	4b1f      	ldr	r3, [pc, #124]	; (8003b2c <DIFFDRIVE_Init+0x59c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	339c      	adds	r3, #156	; 0x9c
 8003ab4:	61fb      	str	r3, [r7, #28]

	uint16_t prescaler=  __MYLIB_GET_TIMER_CLK(timing->htim)*10/1e6 - 1;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <DIFFDRIVE_Init+0x5a4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d017      	beq.n	8003af2 <DIFFDRIVE_Init+0x562>
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	; (8003b38 <DIFFDRIVE_Init+0x5a8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d011      	beq.n	8003af2 <DIFFDRIVE_Init+0x562>
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a19      	ldr	r2, [pc, #100]	; (8003b3c <DIFFDRIVE_Init+0x5ac>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00b      	beq.n	8003af2 <DIFFDRIVE_Init+0x562>
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a17      	ldr	r2, [pc, #92]	; (8003b40 <DIFFDRIVE_Init+0x5b0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d005      	beq.n	8003af2 <DIFFDRIVE_Init+0x562>
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a15      	ldr	r2, [pc, #84]	; (8003b44 <DIFFDRIVE_Init+0x5b4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d12c      	bne.n	8003b4c <DIFFDRIVE_Init+0x5bc>
 8003af2:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <DIFFDRIVE_Init+0x5b8>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <DIFFDRIVE_Init+0x584>
 8003afe:	f003 fa1d 	bl	8006f3c <HAL_RCC_GetPCLK2Freq>
 8003b02:	4602      	mov	r2, r0
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fc fd19 	bl	8000544 <__aeabi_ui2d>
 8003b12:	e036      	b.n	8003b82 <DIFFDRIVE_Init+0x5f2>
 8003b14:	f003 fa12 	bl	8006f3c <HAL_RCC_GetPCLK2Freq>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fc fd0e 	bl	8000544 <__aeabi_ui2d>
 8003b28:	e02b      	b.n	8003b82 <DIFFDRIVE_Init+0x5f2>
 8003b2a:	bf00      	nop
 8003b2c:	2000740c 	.word	0x2000740c
 8003b30:	00000000 	.word	0x00000000
 8003b34:	40010000 	.word	0x40010000
 8003b38:	40010400 	.word	0x40010400
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40014400 	.word	0x40014400
 8003b44:	40014800 	.word	0x40014800
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	4b56      	ldr	r3, [pc, #344]	; (8003ca8 <DIFFDRIVE_Init+0x718>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <DIFFDRIVE_Init+0x5de>
 8003b58:	f003 f9dc 	bl	8006f14 <HAL_RCC_GetPCLK1Freq>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fc fcec 	bl	8000544 <__aeabi_ui2d>
 8003b6c:	e009      	b.n	8003b82 <DIFFDRIVE_Init+0x5f2>
 8003b6e:	f003 f9d1 	bl	8006f14 <HAL_RCC_GetPCLK1Freq>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fc fce1 	bl	8000544 <__aeabi_ui2d>
 8003b82:	a347      	add	r3, pc, #284	; (adr r3, 8003ca0 <DIFFDRIVE_Init+0x710>)
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f7fc fe80 	bl	800088c <__aeabi_ddiv>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	4b44      	ldr	r3, [pc, #272]	; (8003cac <DIFFDRIVE_Init+0x71c>)
 8003b9a:	f7fc fb95 	bl	80002c8 <__aeabi_dsub>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f7fd f81f 	bl	8000be8 <__aeabi_d2uiz>
 8003baa:	4603      	mov	r3, r0
 8003bac:	837b      	strh	r3, [r7, #26]
	// Guessing is a 16bit autoreload timer to avoid troubles
	uint16_t autoreload= __MYLIB_GET_TIMER_CLK(timing->htim)/( (prescaler+1)*1/timing->time_step ) - 1;
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a3e      	ldr	r2, [pc, #248]	; (8003cb0 <DIFFDRIVE_Init+0x720>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d017      	beq.n	8003bea <DIFFDRIVE_Init+0x65a>
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a3c      	ldr	r2, [pc, #240]	; (8003cb4 <DIFFDRIVE_Init+0x724>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d011      	beq.n	8003bea <DIFFDRIVE_Init+0x65a>
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a3a      	ldr	r2, [pc, #232]	; (8003cb8 <DIFFDRIVE_Init+0x728>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00b      	beq.n	8003bea <DIFFDRIVE_Init+0x65a>
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a38      	ldr	r2, [pc, #224]	; (8003cbc <DIFFDRIVE_Init+0x72c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d005      	beq.n	8003bea <DIFFDRIVE_Init+0x65a>
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a36      	ldr	r2, [pc, #216]	; (8003cc0 <DIFFDRIVE_Init+0x730>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d115      	bne.n	8003c16 <DIFFDRIVE_Init+0x686>
 8003bea:	4b2f      	ldr	r3, [pc, #188]	; (8003ca8 <DIFFDRIVE_Init+0x718>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <DIFFDRIVE_Init+0x674>
 8003bf6:	f003 f9a1 	bl	8006f3c <HAL_RCC_GetPCLK2Freq>
 8003bfa:	ee07 0a90 	vmov	s15, r0
 8003bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c02:	e01d      	b.n	8003c40 <DIFFDRIVE_Init+0x6b0>
 8003c04:	f003 f99a 	bl	8006f3c <HAL_RCC_GetPCLK2Freq>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	ee07 3a90 	vmov	s15, r3
 8003c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c14:	e014      	b.n	8003c40 <DIFFDRIVE_Init+0x6b0>
 8003c16:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <DIFFDRIVE_Init+0x718>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <DIFFDRIVE_Init+0x6a0>
 8003c22:	f003 f977 	bl	8006f14 <HAL_RCC_GetPCLK1Freq>
 8003c26:	ee07 0a90 	vmov	s15, r0
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2e:	e007      	b.n	8003c40 <DIFFDRIVE_Init+0x6b0>
 8003c30:	f003 f970 	bl	8006f14 <HAL_RCC_GetPCLK1Freq>
 8003c34:	4603      	mov	r3, r0
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	ee07 3a90 	vmov	s15, r3
 8003c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c40:	8b7b      	ldrh	r3, [r7, #26]
 8003c42:	3301      	adds	r3, #1
 8003c44:	ee07 3a10 	vmov	s14, r3
 8003c48:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c52:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003c56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c66:	ee17 3a90 	vmov	r3, s15
 8003c6a:	833b      	strh	r3, [r7, #24]

	// Set counter with computed prescaler and autoreload period
	__HAL_TIM_SET_PRESCALER(timing->htim, prescaler);
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	8b7a      	ldrh	r2, [r7, #26]
 8003c74:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(timing->htim, autoreload);
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	8b3a      	ldrh	r2, [r7, #24]
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	8b3a      	ldrh	r2, [r7, #24]
 8003c86:	60da      	str	r2, [r3, #12]

	// Assigning callback for timing purpose
	timing->htim->PeriodElapsedCallback= DIFFDRIVE_TIMING_Callback;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a0d      	ldr	r2, [pc, #52]	; (8003cc4 <DIFFDRIVE_Init+0x734>)
 8003c8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	// Reset timing flag
	timing->flag= false;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	2200      	movs	r2, #0
 8003c96:	721a      	strb	r2, [r3, #8]

}
 8003c98:	bf00      	nop
 8003c9a:	3728      	adds	r7, #40	; 0x28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003ca0:	00000000 	.word	0x00000000
 8003ca4:	412e8480 	.word	0x412e8480
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	3ff00000 	.word	0x3ff00000
 8003cb0:	40010000 	.word	0x40010000
 8003cb4:	40010400 	.word	0x40010400
 8003cb8:	40014000 	.word	0x40014000
 8003cbc:	40014400 	.word	0x40014400
 8003cc0:	40014800 	.word	0x40014800
 8003cc4:	08004fc5 	.word	0x08004fc5

08003cc8 <DIFFDRIVE_MOTOR_Stop>:
	free(hdiffdrv->history.state_target);

}


void DIFFDRIVE_MOTOR_Stop(){
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0

	// Set motors to 0 volt
	DIFFDRIVE_MOTOR_SetPWMs((float[2]){0,0});
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	607b      	str	r3, [r7, #4]
 8003cda:	463b      	mov	r3, r7
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 f805 	bl	8003cec <DIFFDRIVE_MOTOR_SetPWMs>

}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <DIFFDRIVE_MOTOR_SetPWMs>:


void DIFFDRIVE_MOTOR_SetPWMs(float* input){
 8003cec:	b480      	push	{r7}
 8003cee:	b089      	sub	sp, #36	; 0x24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_MOTOR_TypeDef *tmp_mtr= hdiffdrv->motor;
 8003cf4:	4bb4      	ldr	r3, [pc, #720]	; (8003fc8 <DIFFDRIVE_MOTOR_SetPWMs+0x2dc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	33a8      	adds	r3, #168	; 0xa8
 8003cfa:	61bb      	str	r3, [r7, #24]
	float tmp_input[2];
	float supply_volt;

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e0c8      	b.n	8003e94 <DIFFDRIVE_MOTOR_SetPWMs+0x1a8>

		tmp_input[side]= input[side];
 8003d02:	7ffb      	ldrb	r3, [r7, #31]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	441a      	add	r2, r3
 8003d0a:	7ffb      	ldrb	r3, [r7, #31]
 8003d0c:	6812      	ldr	r2, [r2, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	f107 0120 	add.w	r1, r7, #32
 8003d14:	440b      	add	r3, r1
 8003d16:	3b14      	subs	r3, #20
 8003d18:	601a      	str	r2, [r3, #0]

		supply_volt= tmp_mtr[side].supply_voltage;
 8003d1a:	7ffb      	ldrb	r3, [r7, #31]
 8003d1c:	222c      	movs	r2, #44	; 0x2c
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4413      	add	r3, r2
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	617b      	str	r3, [r7, #20]

		if(tmp_input[side] > 0){
 8003d2a:	7ffb      	ldrb	r3, [r7, #31]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	f107 0220 	add.w	r2, r7, #32
 8003d32:	4413      	add	r3, r2
 8003d34:	3b14      	subs	r3, #20
 8003d36:	edd3 7a00 	vldr	s15, [r3]
 8003d3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d42:	dd09      	ble.n	8003d58 <DIFFDRIVE_MOTOR_SetPWMs+0x6c>
			// Set direction
			tmp_mtr[side].direction= forward;
 8003d44:	7ffb      	ldrb	r3, [r7, #31]
 8003d46:	222c      	movs	r2, #44	; 0x2c
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4413      	add	r3, r2
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003d56:	e027      	b.n	8003da8 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
		}
		else
		if(tmp_input[side] < 0){
 8003d58:	7ffb      	ldrb	r3, [r7, #31]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	f107 0220 	add.w	r2, r7, #32
 8003d60:	4413      	add	r3, r2
 8003d62:	3b14      	subs	r3, #20
 8003d64:	edd3 7a00 	vldr	s15, [r3]
 8003d68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d70:	d51a      	bpl.n	8003da8 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
			// Set direction
			tmp_mtr[side].direction= backward;
 8003d72:	7ffb      	ldrb	r3, [r7, #31]
 8003d74:	222c      	movs	r2, #44	; 0x2c
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			// Abs of input
			tmp_input[side]= -tmp_input[side];
 8003d84:	7ffb      	ldrb	r3, [r7, #31]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	f107 0220 	add.w	r2, r7, #32
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3b14      	subs	r3, #20
 8003d90:	edd3 7a00 	vldr	s15, [r3]
 8003d94:	7ffb      	ldrb	r3, [r7, #31]
 8003d96:	eef1 7a67 	vneg.f32	s15, s15
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	f107 0220 	add.w	r2, r7, #32
 8003da0:	4413      	add	r3, r2
 8003da2:	3b14      	subs	r3, #20
 8003da4:	edc3 7a00 	vstr	s15, [r3]
		}

		// Duty beat proportional to input voltage plus a minimum duty beat (so, if input is near zero
		// duty beat is near its minimum. DC motors need to reach a tension threshold before moving)
		// Also: forward or backward are the same in this case, I use timers with the same parameters
		tmp_mtr[side].duty_beat  = __HAL_TIM_GET_AUTORELOAD(tmp_mtr[side].htim[forward])*tmp_input[side]/supply_volt;
 8003da8:	7ffb      	ldrb	r3, [r7, #31]
 8003daa:	222c      	movs	r2, #44	; 0x2c
 8003dac:	fb02 f303 	mul.w	r3, r2, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4413      	add	r3, r2
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dc2:	7ffb      	ldrb	r3, [r7, #31]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	f107 0220 	add.w	r2, r7, #32
 8003dca:	4413      	add	r3, r2
 8003dcc:	3b14      	subs	r3, #20
 8003dce:	edd3 7a00 	vldr	s15, [r3]
 8003dd2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003dd6:	ed97 7a05 	vldr	s14, [r7, #20]
 8003dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dde:	7ffb      	ldrb	r3, [r7, #31]
 8003de0:	222c      	movs	r2, #44	; 0x2c
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4413      	add	r3, r2
 8003dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dee:	ee17 2a90 	vmov	r2, s15
 8003df2:	625a      	str	r2, [r3, #36]	; 0x24
		tmp_mtr[side].duty_beat += tmp_mtr[side].duty_beat_min;
 8003df4:	7ffb      	ldrb	r3, [r7, #31]
 8003df6:	222c      	movs	r2, #44	; 0x2c
 8003df8:	fb02 f303 	mul.w	r3, r2, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4413      	add	r3, r2
 8003e00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e02:	7ffb      	ldrb	r3, [r7, #31]
 8003e04:	222c      	movs	r2, #44	; 0x2c
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	7ffb      	ldrb	r3, [r7, #31]
 8003e12:	202c      	movs	r0, #44	; 0x2c
 8003e14:	fb00 f303 	mul.w	r3, r0, r3
 8003e18:	69b8      	ldr	r0, [r7, #24]
 8003e1a:	4403      	add	r3, r0
 8003e1c:	440a      	add	r2, r1
 8003e1e:	625a      	str	r2, [r3, #36]	; 0x24

		// Upper Saturation of duty cycle
		if( tmp_mtr[side].duty_beat > tmp_mtr[side].duty_beat_max )
 8003e20:	7ffb      	ldrb	r3, [r7, #31]
 8003e22:	222c      	movs	r2, #44	; 0x2c
 8003e24:	fb02 f303 	mul.w	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e2e:	7ffb      	ldrb	r3, [r7, #31]
 8003e30:	212c      	movs	r1, #44	; 0x2c
 8003e32:	fb01 f303 	mul.w	r3, r1, r3
 8003e36:	69b9      	ldr	r1, [r7, #24]
 8003e38:	440b      	add	r3, r1
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d90e      	bls.n	8003e5e <DIFFDRIVE_MOTOR_SetPWMs+0x172>
			tmp_mtr[side].duty_beat= tmp_mtr[side].duty_beat_max;
 8003e40:	7ffb      	ldrb	r3, [r7, #31]
 8003e42:	222c      	movs	r2, #44	; 0x2c
 8003e44:	fb02 f303 	mul.w	r3, r2, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	441a      	add	r2, r3
 8003e4c:	7ffb      	ldrb	r3, [r7, #31]
 8003e4e:	212c      	movs	r1, #44	; 0x2c
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	69b9      	ldr	r1, [r7, #24]
 8003e56:	440b      	add	r3, r1
 8003e58:	6a12      	ldr	r2, [r2, #32]
 8003e5a:	625a      	str	r2, [r3, #36]	; 0x24
 8003e5c:	e017      	b.n	8003e8e <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
		else
		// Lower Saturation of duty cycle. If reach lower bound, set to zero to be sure to stop motors
		if( tmp_mtr[side].duty_beat == tmp_mtr[side].duty_beat_min )
 8003e5e:	7ffb      	ldrb	r3, [r7, #31]
 8003e60:	222c      	movs	r2, #44	; 0x2c
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4413      	add	r3, r2
 8003e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e6c:	7ffb      	ldrb	r3, [r7, #31]
 8003e6e:	212c      	movs	r1, #44	; 0x2c
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	69b9      	ldr	r1, [r7, #24]
 8003e76:	440b      	add	r3, r1
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d107      	bne.n	8003e8e <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
			tmp_mtr[side].duty_beat= 0;
 8003e7e:	7ffb      	ldrb	r3, [r7, #31]
 8003e80:	222c      	movs	r2, #44	; 0x2c
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4413      	add	r3, r2
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003e8e:	7ffb      	ldrb	r3, [r7, #31]
 8003e90:	3301      	adds	r3, #1
 8003e92:	77fb      	strb	r3, [r7, #31]
 8003e94:	7ffb      	ldrb	r3, [r7, #31]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	f67f af33 	bls.w	8003d02 <DIFFDRIVE_MOTOR_SetPWMs+0x16>
	}

	// Set PWM signal
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	77bb      	strb	r3, [r7, #30]
 8003ea0:	e14f      	b.n	8004142 <DIFFDRIVE_MOTOR_SetPWMs+0x456>

		// Set opposite direction (!direction) pin to 0
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[!(tmp_mtr[side].direction)],
 8003ea2:	7fbb      	ldrb	r3, [r7, #30]
 8003ea4:	222c      	movs	r2, #44	; 0x2c
 8003ea6:	fb02 f303 	mul.w	r3, r2, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4413      	add	r3, r2
 8003eae:	7fba      	ldrb	r2, [r7, #30]
 8003eb0:	212c      	movs	r1, #44	; 0x2c
 8003eb2:	fb01 f202 	mul.w	r2, r1, r2
 8003eb6:	69b9      	ldr	r1, [r7, #24]
 8003eb8:	440a      	add	r2, r1
 8003eba:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	bf0c      	ite	eq
 8003ec2:	2201      	moveq	r2, #1
 8003ec4:	2200      	movne	r2, #0
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	3202      	adds	r2, #2
 8003eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d118      	bne.n	8003f04 <DIFFDRIVE_MOTOR_SetPWMs+0x218>
 8003ed2:	7fbb      	ldrb	r3, [r7, #30]
 8003ed4:	222c      	movs	r2, #44	; 0x2c
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4413      	add	r3, r2
 8003ede:	7fba      	ldrb	r2, [r7, #30]
 8003ee0:	212c      	movs	r1, #44	; 0x2c
 8003ee2:	fb01 f202 	mul.w	r2, r1, r2
 8003ee6:	69b9      	ldr	r1, [r7, #24]
 8003ee8:	440a      	add	r2, r1
 8003eea:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003eee:	2a00      	cmp	r2, #0
 8003ef0:	bf0c      	ite	eq
 8003ef2:	2201      	moveq	r2, #1
 8003ef4:	2200      	movne	r2, #0
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2200      	movs	r2, #0
 8003f00:	635a      	str	r2, [r3, #52]	; 0x34
 8003f02:	e07b      	b.n	8003ffc <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003f04:	7fbb      	ldrb	r3, [r7, #30]
 8003f06:	222c      	movs	r2, #44	; 0x2c
 8003f08:	fb02 f303 	mul.w	r3, r2, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4413      	add	r3, r2
 8003f10:	7fba      	ldrb	r2, [r7, #30]
 8003f12:	212c      	movs	r1, #44	; 0x2c
 8003f14:	fb01 f202 	mul.w	r2, r1, r2
 8003f18:	69b9      	ldr	r1, [r7, #24]
 8003f1a:	440a      	add	r2, r1
 8003f1c:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003f20:	2a00      	cmp	r2, #0
 8003f22:	bf0c      	ite	eq
 8003f24:	2201      	moveq	r2, #1
 8003f26:	2200      	movne	r2, #0
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	3202      	adds	r2, #2
 8003f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d118      	bne.n	8003f66 <DIFFDRIVE_MOTOR_SetPWMs+0x27a>
 8003f34:	7fbb      	ldrb	r3, [r7, #30]
 8003f36:	222c      	movs	r2, #44	; 0x2c
 8003f38:	fb02 f303 	mul.w	r3, r2, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4413      	add	r3, r2
 8003f40:	7fba      	ldrb	r2, [r7, #30]
 8003f42:	212c      	movs	r1, #44	; 0x2c
 8003f44:	fb01 f202 	mul.w	r2, r1, r2
 8003f48:	69b9      	ldr	r1, [r7, #24]
 8003f4a:	440a      	add	r2, r1
 8003f4c:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003f50:	2a00      	cmp	r2, #0
 8003f52:	bf0c      	ite	eq
 8003f54:	2201      	moveq	r2, #1
 8003f56:	2200      	movne	r2, #0
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	2300      	movs	r3, #0
 8003f62:	6393      	str	r3, [r2, #56]	; 0x38
 8003f64:	e04a      	b.n	8003ffc <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003f66:	7fbb      	ldrb	r3, [r7, #30]
 8003f68:	222c      	movs	r2, #44	; 0x2c
 8003f6a:	fb02 f303 	mul.w	r3, r2, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4413      	add	r3, r2
 8003f72:	7fba      	ldrb	r2, [r7, #30]
 8003f74:	212c      	movs	r1, #44	; 0x2c
 8003f76:	fb01 f202 	mul.w	r2, r1, r2
 8003f7a:	69b9      	ldr	r1, [r7, #24]
 8003f7c:	440a      	add	r2, r1
 8003f7e:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003f82:	2a00      	cmp	r2, #0
 8003f84:	bf0c      	ite	eq
 8003f86:	2201      	moveq	r2, #1
 8003f88:	2200      	movne	r2, #0
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	3202      	adds	r2, #2
 8003f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d11a      	bne.n	8003fcc <DIFFDRIVE_MOTOR_SetPWMs+0x2e0>
 8003f96:	7fbb      	ldrb	r3, [r7, #30]
 8003f98:	222c      	movs	r2, #44	; 0x2c
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	7fba      	ldrb	r2, [r7, #30]
 8003fa4:	212c      	movs	r1, #44	; 0x2c
 8003fa6:	fb01 f202 	mul.w	r2, r1, r2
 8003faa:	69b9      	ldr	r1, [r7, #24]
 8003fac:	440a      	add	r2, r1
 8003fae:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003fb2:	2a00      	cmp	r2, #0
 8003fb4:	bf0c      	ite	eq
 8003fb6:	2201      	moveq	r2, #1
 8003fb8:	2200      	movne	r2, #0
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003fc6:	e019      	b.n	8003ffc <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003fc8:	2000740c 	.word	0x2000740c
 8003fcc:	7fbb      	ldrb	r3, [r7, #30]
 8003fce:	222c      	movs	r2, #44	; 0x2c
 8003fd0:	fb02 f303 	mul.w	r3, r2, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	7fba      	ldrb	r2, [r7, #30]
 8003fda:	212c      	movs	r1, #44	; 0x2c
 8003fdc:	fb01 f202 	mul.w	r2, r1, r2
 8003fe0:	69b9      	ldr	r1, [r7, #24]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003fe8:	2a00      	cmp	r2, #0
 8003fea:	bf0c      	ite	eq
 8003fec:	2201      	moveq	r2, #1
 8003fee:	2200      	movne	r2, #0
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	6413      	str	r3, [r2, #64]	; 0x40
							  tmp_mtr[side].pwm_channel[!(tmp_mtr[side].direction)],
							  0  );

		// Set direction pin with the current duty cycle on PWM signal
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[(tmp_mtr[side].direction)],
 8003ffc:	7fbb      	ldrb	r3, [r7, #30]
 8003ffe:	222c      	movs	r2, #44	; 0x2c
 8004000:	fb02 f303 	mul.w	r3, r2, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4413      	add	r3, r2
 8004008:	7fba      	ldrb	r2, [r7, #30]
 800400a:	212c      	movs	r1, #44	; 0x2c
 800400c:	fb01 f202 	mul.w	r2, r1, r2
 8004010:	69b9      	ldr	r1, [r7, #24]
 8004012:	440a      	add	r2, r1
 8004014:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8004018:	3202      	adds	r2, #2
 800401a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d119      	bne.n	8004056 <DIFFDRIVE_MOTOR_SetPWMs+0x36a>
 8004022:	7fbb      	ldrb	r3, [r7, #30]
 8004024:	222c      	movs	r2, #44	; 0x2c
 8004026:	fb02 f303 	mul.w	r3, r2, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	441a      	add	r2, r3
 800402e:	7fbb      	ldrb	r3, [r7, #30]
 8004030:	212c      	movs	r1, #44	; 0x2c
 8004032:	fb01 f303 	mul.w	r3, r1, r3
 8004036:	69b9      	ldr	r1, [r7, #24]
 8004038:	440b      	add	r3, r1
 800403a:	7fb9      	ldrb	r1, [r7, #30]
 800403c:	202c      	movs	r0, #44	; 0x2c
 800403e:	fb00 f101 	mul.w	r1, r0, r1
 8004042:	69b8      	ldr	r0, [r7, #24]
 8004044:	4401      	add	r1, r0
 8004046:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 800404a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004052:	635a      	str	r2, [r3, #52]	; 0x34
 8004054:	e072      	b.n	800413c <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8004056:	7fbb      	ldrb	r3, [r7, #30]
 8004058:	222c      	movs	r2, #44	; 0x2c
 800405a:	fb02 f303 	mul.w	r3, r2, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4413      	add	r3, r2
 8004062:	7fba      	ldrb	r2, [r7, #30]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f202 	mul.w	r2, r1, r2
 800406a:	69b9      	ldr	r1, [r7, #24]
 800406c:	440a      	add	r2, r1
 800406e:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8004072:	3202      	adds	r2, #2
 8004074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004078:	2b04      	cmp	r3, #4
 800407a:	d119      	bne.n	80040b0 <DIFFDRIVE_MOTOR_SetPWMs+0x3c4>
 800407c:	7fbb      	ldrb	r3, [r7, #30]
 800407e:	222c      	movs	r2, #44	; 0x2c
 8004080:	fb02 f303 	mul.w	r3, r2, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4413      	add	r3, r2
 8004088:	7fba      	ldrb	r2, [r7, #30]
 800408a:	212c      	movs	r1, #44	; 0x2c
 800408c:	fb01 f202 	mul.w	r2, r1, r2
 8004090:	69b9      	ldr	r1, [r7, #24]
 8004092:	440a      	add	r2, r1
 8004094:	7fb9      	ldrb	r1, [r7, #30]
 8004096:	202c      	movs	r0, #44	; 0x2c
 8004098:	fb00 f101 	mul.w	r1, r0, r1
 800409c:	69b8      	ldr	r0, [r7, #24]
 800409e:	4401      	add	r1, r0
 80040a0:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 80040a4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	6393      	str	r3, [r2, #56]	; 0x38
 80040ae:	e045      	b.n	800413c <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 80040b0:	7fbb      	ldrb	r3, [r7, #30]
 80040b2:	222c      	movs	r2, #44	; 0x2c
 80040b4:	fb02 f303 	mul.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4413      	add	r3, r2
 80040bc:	7fba      	ldrb	r2, [r7, #30]
 80040be:	212c      	movs	r1, #44	; 0x2c
 80040c0:	fb01 f202 	mul.w	r2, r1, r2
 80040c4:	69b9      	ldr	r1, [r7, #24]
 80040c6:	440a      	add	r2, r1
 80040c8:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 80040cc:	3202      	adds	r2, #2
 80040ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d119      	bne.n	800410a <DIFFDRIVE_MOTOR_SetPWMs+0x41e>
 80040d6:	7fbb      	ldrb	r3, [r7, #30]
 80040d8:	222c      	movs	r2, #44	; 0x2c
 80040da:	fb02 f303 	mul.w	r3, r2, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4413      	add	r3, r2
 80040e2:	7fba      	ldrb	r2, [r7, #30]
 80040e4:	212c      	movs	r1, #44	; 0x2c
 80040e6:	fb01 f202 	mul.w	r2, r1, r2
 80040ea:	69b9      	ldr	r1, [r7, #24]
 80040ec:	440a      	add	r2, r1
 80040ee:	7fb9      	ldrb	r1, [r7, #30]
 80040f0:	202c      	movs	r0, #44	; 0x2c
 80040f2:	fb00 f101 	mul.w	r1, r0, r1
 80040f6:	69b8      	ldr	r0, [r7, #24]
 80040f8:	4401      	add	r1, r0
 80040fa:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 80040fe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004108:	e018      	b.n	800413c <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 800410a:	7fbb      	ldrb	r3, [r7, #30]
 800410c:	222c      	movs	r2, #44	; 0x2c
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4413      	add	r3, r2
 8004116:	7fba      	ldrb	r2, [r7, #30]
 8004118:	212c      	movs	r1, #44	; 0x2c
 800411a:	fb01 f202 	mul.w	r2, r1, r2
 800411e:	69b9      	ldr	r1, [r7, #24]
 8004120:	440a      	add	r2, r1
 8004122:	7fb9      	ldrb	r1, [r7, #30]
 8004124:	202c      	movs	r0, #44	; 0x2c
 8004126:	fb00 f101 	mul.w	r1, r0, r1
 800412a:	69b8      	ldr	r0, [r7, #24]
 800412c:	4401      	add	r1, r0
 800412e:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 8004132:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	6413      	str	r3, [r2, #64]	; 0x40
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800413c:	7fbb      	ldrb	r3, [r7, #30]
 800413e:	3301      	adds	r3, #1
 8004140:	77bb      	strb	r3, [r7, #30]
 8004142:	7fbb      	ldrb	r3, [r7, #30]
 8004144:	2b01      	cmp	r3, #1
 8004146:	f67f aeac 	bls.w	8003ea2 <DIFFDRIVE_MOTOR_SetPWMs+0x1b6>
							  tmp_mtr[side].pwm_channel[(tmp_mtr[side].direction)],
							  tmp_mtr[side].duty_beat  );

		}

}
 800414a:	bf00      	nop
 800414c:	bf00      	nop
 800414e:	3724      	adds	r7, #36	; 0x24
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <DIFFDRIVE_ENCODER_CaptureMeasure>:


DIFFDRIVE_StatusTypeDef DIFFDRIVE_ENCODER_CaptureMeasure(void){
 8004158:	b5b0      	push	{r4, r5, r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens=  hdiffdrv->encoder;
 800415e:	4b54      	ldr	r3, [pc, #336]	; (80042b0 <DIFFDRIVE_ENCODER_CaptureMeasure+0x158>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004166:	60bb      	str	r3, [r7, #8]

	// int32 max value, minus a secure threshold of 100
	uint32_t counter_max= (pow(2,31)-1)-100;
 8004168:	4b52      	ldr	r3, [pc, #328]	; (80042b4 <DIFFDRIVE_ENCODER_CaptureMeasure+0x15c>)
 800416a:	607b      	str	r3, [r7, #4]

	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 800416c:	2300      	movs	r3, #0
 800416e:	73fb      	strb	r3, [r7, #15]
 8004170:	e090      	b.n	8004294 <DIFFDRIVE_ENCODER_CaptureMeasure+0x13c>

		// Saving previous value
		tmpsens[side].previous_value= tmpsens[side].current_value;
 8004172:	7bfa      	ldrb	r2, [r7, #15]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	461a      	mov	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	1899      	adds	r1, r3, r2
 8004182:	7bfa      	ldrb	r2, [r7, #15]
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	461a      	mov	r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	4413      	add	r3, r2
 8004192:	68ca      	ldr	r2, [r1, #12]
 8004194:	611a      	str	r2, [r3, #16]

		// Updating value. The counter connected to sensor are 32 bit unsigned integer so I cast in
		// 32 bit integer (signed) to have positive and negative values. Then, using encoder resolution,
		tmpsens[side].current_value  = (int32_t)__HAL_TIM_GET_COUNTER(tmpsens[side].htim);
 8004196:	7bfa      	ldrb	r2, [r7, #15]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	461a      	mov	r2, r3
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4413      	add	r3, r2
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	ee07 3a90 	vmov	s15, r3
 80041b0:	7bfa      	ldrb	r2, [r7, #15]
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	461a      	mov	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4413      	add	r3, r2
 80041c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041c4:	edc3 7a03 	vstr	s15, [r3, #12]

		// If counter reach a threshold value return an exception
		if( tmpsens[side].current_value < -(int32_t)counter_max || tmpsens[side].current_value > (int32_t)counter_max  )
 80041c8:	7bfa      	ldrb	r2, [r7, #15]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	461a      	mov	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4413      	add	r3, r2
 80041d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	425b      	negs	r3, r3
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f0:	d413      	bmi.n	800421a <DIFFDRIVE_ENCODER_CaptureMeasure+0xc2>
 80041f2:	7bfa      	ldrb	r2, [r7, #15]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	461a      	mov	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4413      	add	r3, r2
 8004202:	ed93 7a03 	vldr	s14, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004210:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004218:	dd02      	ble.n	8004220 <DIFFDRIVE_ENCODER_CaptureMeasure+0xc8>
			return DIFFDRIVE_ERROR;
 800421a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800421e:	e03e      	b.n	800429e <DIFFDRIVE_ENCODER_CaptureMeasure+0x146>

		// Else convert integer in radiant
		tmpsens[side].current_value *= (2*M_PI)/tmpsens[side].resolution;
 8004220:	7bfa      	ldrb	r2, [r7, #15]
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4413      	add	r3, r2
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fc f9a8 	bl	8000588 <__aeabi_f2d>
 8004238:	4604      	mov	r4, r0
 800423a:	460d      	mov	r5, r1
 800423c:	7bfa      	ldrb	r2, [r7, #15]
 800423e:	4613      	mov	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	461a      	mov	r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4413      	add	r3, r2
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fc f99a 	bl	8000588 <__aeabi_f2d>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	a113      	add	r1, pc, #76	; (adr r1, 80042a8 <DIFFDRIVE_ENCODER_CaptureMeasure+0x150>)
 800425a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800425e:	f7fc fb15 	bl	800088c <__aeabi_ddiv>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4620      	mov	r0, r4
 8004268:	4629      	mov	r1, r5
 800426a:	f7fc f9e5 	bl	8000638 <__aeabi_dmul>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	7bfa      	ldrb	r2, [r7, #15]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	461a      	mov	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	189c      	adds	r4, r3, r2
 8004286:	f7fc fccf 	bl	8000c28 <__aeabi_d2f>
 800428a:	4603      	mov	r3, r0
 800428c:	60e3      	str	r3, [r4, #12]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	3301      	adds	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b01      	cmp	r3, #1
 8004298:	f67f af6b 	bls.w	8004172 <DIFFDRIVE_ENCODER_CaptureMeasure+0x1a>

	}

	return DIFFDRIVE_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bdb0      	pop	{r4, r5, r7, pc}
 80042a6:	bf00      	nop
 80042a8:	54442d18 	.word	0x54442d18
 80042ac:	401921fb 	.word	0x401921fb
 80042b0:	2000740c 	.word	0x2000740c
 80042b4:	7fffff9b 	.word	0x7fffff9b

080042b8 <DIFFDRIVE_ENCODER_Reset>:


void DIFFDRIVE_ENCODER_Reset(void){
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens= hdiffdrv->encoder;
 80042be:	4b16      	ldr	r3, [pc, #88]	; (8004318 <DIFFDRIVE_ENCODER_Reset+0x60>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80042c6:	603b      	str	r3, [r7, #0]

	// Reset Wheel encoders
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 80042c8:	2300      	movs	r3, #0
 80042ca:	71fb      	strb	r3, [r7, #7]
 80042cc:	e019      	b.n	8004302 <DIFFDRIVE_ENCODER_Reset+0x4a>
		__HAL_TIM_SET_COUNTER(tmpsens[side].htim,0);
 80042ce:	79fa      	ldrb	r2, [r7, #7]
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	461a      	mov	r2, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	4413      	add	r3, r2
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24
		tmpsens[side].current_value= 0;
 80042e6:	79fa      	ldrb	r2, [r7, #7]
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	461a      	mov	r2, r3
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	4413      	add	r3, r2
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	60da      	str	r2, [r3, #12]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	3301      	adds	r3, #1
 8004300:	71fb      	strb	r3, [r7, #7]
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d9e2      	bls.n	80042ce <DIFFDRIVE_ENCODER_Reset+0x16>
	}

}
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	2000740c 	.word	0x2000740c

0800431c <DIFFDRIVE_HISTORY_Start>:


void DIFFDRIVE_HISTORY_Start(void){
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0

	// Enable history saving and reset time_index counter
	hdiffdrv->history.sample_cnt= 0;
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <DIFFDRIVE_HISTORY_Start+0x24>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2200      	movs	r2, #0
 8004326:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	hdiffdrv->history.Enabled= true;
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <DIFFDRIVE_HISTORY_Start+0x24>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	2000740c 	.word	0x2000740c

08004344 <DIFFDRIVE_HISTORY_Update>:

}


/* ---- Saving only a fixed number of samples in a circular buffer, if history is enabled  ------------------- */
void DIFFDRIVE_HISTORY_Update(float delta_a_target, float delta_th_target){
 8004344:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004348:	b098      	sub	sp, #96	; 0x60
 800434a:	af00      	add	r7, sp, #0
 800434c:	ed87 0a01 	vstr	s0, [r7, #4]
 8004350:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_HISTORY_TypeDef* tmphist  = &(hdiffdrv->history);
 8004354:	4baf      	ldr	r3, [pc, #700]	; (8004614 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800435c:	65bb      	str	r3, [r7, #88]	; 0x58
	DIFFDRIVE_CONTROL_TypeDef* tmpctrl  =   hdiffdrv->control;
 800435e:	4bad      	ldr	r3, [pc, #692]	; (8004614 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004366:	657b      	str	r3, [r7, #84]	; 0x54
	DIFFDRIVE_STATE_TypeDef    tmpstate =   hdiffdrv->state;
 8004368:	4baa      	ldr	r3, [pc, #680]	; (8004614 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f107 041c 	add.w	r4, r7, #28
 8004370:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 8004374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800437a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800437c:	682b      	ldr	r3, [r5, #0]
 800437e:	6023      	str	r3, [r4, #0]
	float min_volt;
	float max_volt;

	float theta, wheel_target[2], input[2];

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004380:	2300      	movs	r3, #0
 8004382:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004386:	e025      	b.n	80043d4 <DIFFDRIVE_HISTORY_Update+0x90>
		wheel_target[side] = __FEEDFORWARD_GET_CURRENT_TARGET(&(tmpctrl[side].fdfrwrd));
 8004388:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800438c:	2268      	movs	r2, #104	; 0x68
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004394:	441a      	add	r2, r3
 8004396:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800439a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80043a2:	440b      	add	r3, r1
 80043a4:	3b4c      	subs	r3, #76	; 0x4c
 80043a6:	601a      	str	r2, [r3, #0]
		input[side] = tmpstate.input[side];
 80043a8:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80043ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043b0:	3206      	adds	r2, #6
 80043b2:	0092      	lsls	r2, r2, #2
 80043b4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80043b8:	440a      	add	r2, r1
 80043ba:	3a40      	subs	r2, #64	; 0x40
 80043bc:	6812      	ldr	r2, [r2, #0]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80043c4:	440b      	add	r3, r1
 80043c6:	3b54      	subs	r3, #84	; 0x54
 80043c8:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80043ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043ce:	3301      	adds	r3, #1
 80043d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80043d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d9d5      	bls.n	8004388 <DIFFDRIVE_HISTORY_Update+0x44>
	}

	// Current index (using operator % to enroll k between 0 and max_sample; last_time_index is unbounded)
	uint32_t k= tmphist->sample_cnt%tmphist->max_sample;
 80043dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043e2:	6892      	ldr	r2, [r2, #8]
 80043e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80043e8:	fb02 f201 	mul.w	r2, r2, r1
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	653b      	str	r3, [r7, #80]	; 0x50

	tmphist->index= k;
 80043f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043f4:	60da      	str	r2, [r3, #12]

	// Update history if is enabled
	if( tmphist->Enabled ){
 80043f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 8252 	beq.w	80048a4 <DIFFDRIVE_HISTORY_Update+0x560>
		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004400:	2300      	movs	r3, #0
 8004402:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8004406:	e134      	b.n	8004672 <DIFFDRIVE_HISTORY_Update+0x32e>

			min_volt= hdiffdrv->motor[side].min_voltage;
 8004408:	4b82      	ldr	r3, [pc, #520]	; (8004614 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004410:	212c      	movs	r1, #44	; 0x2c
 8004412:	fb01 f303 	mul.w	r3, r1, r3
 8004416:	4413      	add	r3, r2
 8004418:	33c0      	adds	r3, #192	; 0xc0
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	647b      	str	r3, [r7, #68]	; 0x44
			max_volt= hdiffdrv->motor[side].max_voltage;
 800441e:	4b7d      	ldr	r3, [pc, #500]	; (8004614 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004426:	212c      	movs	r1, #44	; 0x2c
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	4413      	add	r3, r2
 800442e:	33bc      	adds	r3, #188	; 0xbc
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	643b      	str	r3, [r7, #64]	; 0x40

			// Input Saturation limits, for "measured" tension-------------------------
			if( input[side] > (max_volt-min_volt))
 8004434:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800443e:	4413      	add	r3, r2
 8004440:	3b54      	subs	r3, #84	; 0x54
 8004442:	ed93 7a00 	vldr	s14, [r3]
 8004446:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800444a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800444e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800445a:	dd16      	ble.n	800448a <DIFFDRIVE_HISTORY_Update+0x146>
				tmphist->state_measure[k].input[side]= max_volt-min_volt;
 800445c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800445e:	6959      	ldr	r1, [r3, #20]
 8004460:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004462:	4613      	mov	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	18ca      	adds	r2, r1, r3
 800446c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004470:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004474:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800447c:	3306      	adds	r3, #6
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	3304      	adds	r3, #4
 8004484:	edc3 7a00 	vstr	s15, [r3]
 8004488:	e045      	b.n	8004516 <DIFFDRIVE_HISTORY_Update+0x1d2>
			else
			if( input[side] < -(max_volt-min_volt))
 800448a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004494:	4413      	add	r3, r2
 8004496:	3b54      	subs	r3, #84	; 0x54
 8004498:	ed93 7a00 	vldr	s14, [r3]
 800449c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80044a0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80044a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80044a8:	eef1 7a67 	vneg.f32	s15, s15
 80044ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b4:	d518      	bpl.n	80044e8 <DIFFDRIVE_HISTORY_Update+0x1a4>
				tmphist->state_measure[k].input[side]= -(max_volt-min_volt);
 80044b6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80044ba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80044be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044c4:	6959      	ldr	r1, [r3, #20]
 80044c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	18ca      	adds	r2, r1, r3
 80044d2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80044d6:	eef1 7a67 	vneg.f32	s15, s15
 80044da:	3306      	adds	r3, #6
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	3304      	adds	r3, #4
 80044e2:	edc3 7a00 	vstr	s15, [r3]
 80044e6:	e016      	b.n	8004516 <DIFFDRIVE_HISTORY_Update+0x1d2>
			else
				tmphist->state_measure[k].input[side]= input[side];
 80044e8:	f897 005e 	ldrb.w	r0, [r7, #94]	; 0x5e
 80044ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ee:	6959      	ldr	r1, [r3, #20]
 80044f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044f2:	4613      	mov	r3, r2
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4419      	add	r1, r3
 80044fc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004500:	0082      	lsls	r2, r0, #2
 8004502:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004506:	4402      	add	r2, r0
 8004508:	3a54      	subs	r2, #84	; 0x54
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	3306      	adds	r3, #6
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	3304      	adds	r3, #4
 8004514:	601a      	str	r2, [r3, #0]
			// ------------------------------------------------------------------------

			// Target input, without PID contribute and saturation limits
			tmphist->state_target[k].input[side]= hdiffdrv->control[side].fdfrwrd.current_input;
 8004516:	4b3f      	ldr	r3, [pc, #252]	; (8004614 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 800451e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004520:	6919      	ldr	r1, [r3, #16]
 8004522:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004524:	4613      	mov	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4419      	add	r1, r3
 800452e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004532:	2268      	movs	r2, #104	; 0x68
 8004534:	fb02 f204 	mul.w	r2, r2, r4
 8004538:	4402      	add	r2, r0
 800453a:	f502 72a8 	add.w	r2, r2, #336	; 0x150
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	3306      	adds	r3, #6
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	3304      	adds	r3, #4
 8004548:	601a      	str	r2, [r3, #0]

			// Wheels measured and target
			tmphist->state_measure[k].wheel[side]= __DIFFDRIVE_ENCODER_GET_CURRENT_VALUE(hdiffdrv,side);
 800454a:	4b32      	ldr	r3, [pc, #200]	; (8004614 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 800454c:	681c      	ldr	r4, [r3, #0]
 800454e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8004552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004554:	6958      	ldr	r0, [r3, #20]
 8004556:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004558:	460b      	mov	r3, r1
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	440b      	add	r3, r1
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	18c1      	adds	r1, r0, r3
 8004562:	f897 005e 	ldrb.w	r0, [r7, #94]	; 0x5e
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4423      	add	r3, r4
 8004570:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	1c83      	adds	r3, r0, #2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	3304      	adds	r3, #4
 800457e:	601a      	str	r2, [r3, #0]
			tmphist->state_measure[k].delta_wheel[side]= hdiffdrv->state.delta_wheel[side];
 8004580:	4b24      	ldr	r3, [pc, #144]	; (8004614 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8004588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800458a:	6959      	ldr	r1, [r3, #20]
 800458c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800458e:	4613      	mov	r3, r2
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	4413      	add	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4419      	add	r1, r3
 8004598:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800459c:	f104 0282 	add.w	r2, r4, #130	; 0x82
 80045a0:	0092      	lsls	r2, r2, #2
 80045a2:	4402      	add	r2, r0
 80045a4:	3204      	adds	r2, #4
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	3304      	adds	r3, #4
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	3304      	adds	r3, #4
 80045b0:	601a      	str	r2, [r3, #0]

			if(k > 0)
 80045b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d02f      	beq.n	8004618 <DIFFDRIVE_HISTORY_Update+0x2d4>
				tmphist->state_target[k].delta_wheel[side]= wheel_target[side]-tmphist->state_target[k-1].wheel[side];
 80045b8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80045c2:	4413      	add	r3, r2
 80045c4:	3b4c      	subs	r3, #76	; 0x4c
 80045c6:	ed93 7a00 	vldr	s14, [r3]
 80045ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045cc:	6919      	ldr	r1, [r3, #16]
 80045ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80045d0:	4613      	mov	r3, r2
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	3b24      	subs	r3, #36	; 0x24
 80045da:	18ca      	adds	r2, r1, r3
 80045dc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80045e0:	3302      	adds	r3, #2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	3304      	adds	r3, #4
 80045e8:	edd3 7a00 	vldr	s15, [r3]
 80045ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045ee:	6919      	ldr	r1, [r3, #16]
 80045f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80045f2:	4613      	mov	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	18ca      	adds	r2, r1, r3
 80045fc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004604:	3304      	adds	r3, #4
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	3304      	adds	r3, #4
 800460c:	edc3 7a00 	vstr	s15, [r3]
 8004610:	e013      	b.n	800463a <DIFFDRIVE_HISTORY_Update+0x2f6>
 8004612:	bf00      	nop
 8004614:	2000740c 	.word	0x2000740c
			else
				tmphist->state_target[k].delta_wheel[side]= 0;
 8004618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800461a:	6919      	ldr	r1, [r3, #16]
 800461c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800461e:	4613      	mov	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	18ca      	adds	r2, r1, r3
 8004628:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800462c:	3304      	adds	r3, #4
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	3304      	adds	r3, #4
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
			tmphist->state_target[k].wheel[side]= wheel_target[side];
 800463a:	f897 005e 	ldrb.w	r0, [r7, #94]	; 0x5e
 800463e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004640:	6919      	ldr	r1, [r3, #16]
 8004642:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004644:	4613      	mov	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4419      	add	r1, r3
 800464e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004652:	0082      	lsls	r2, r0, #2
 8004654:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004658:	4402      	add	r2, r0
 800465a:	3a4c      	subs	r2, #76	; 0x4c
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	3302      	adds	r3, #2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	3304      	adds	r3, #4
 8004666:	601a      	str	r2, [r3, #0]
		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004668:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800466c:	3301      	adds	r3, #1
 800466e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8004672:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004676:	2b01      	cmp	r3, #1
 8004678:	f67f aec6 	bls.w	8004408 <DIFFDRIVE_HISTORY_Update+0xc4>

		}

		// Pose measure, extracted from state register
		tmphist->state_measure[k].pose= tmpstate.pose;
 800467c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800467e:	6959      	ldr	r1, [r3, #20]
 8004680:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004682:	4613      	mov	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	461c      	mov	r4, r3
 800468e:	f107 031c 	add.w	r3, r7, #28
 8004692:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004696:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		// Compute current target pose
		if( tmphist->sample_cnt != 0 ){
 800469a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80a2 	beq.w	80047e8 <DIFFDRIVE_HISTORY_Update+0x4a4>
			uint32_t k_prev= (tmphist->sample_cnt-1)%tmphist->max_sample;
 80046a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046ac:	6892      	ldr	r2, [r2, #8]
 80046ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80046b2:	fb02 f201 	mul.w	r2, r2, r1
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	64bb      	str	r3, [r7, #72]	; 0x48

			theta= tmphist->state_target[k_prev].pose.theta;
 80046ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046bc:	6919      	ldr	r1, [r3, #16]
 80046be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046c0:	4613      	mov	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	64fb      	str	r3, [r7, #76]	; 0x4c
			tmphist->state_target[k].pose.x_a   =  tmphist->state_target[k_prev].pose.x_a   + delta_a_target*cos(theta);
 80046ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046d0:	6919      	ldr	r1, [r3, #16]
 80046d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046d4:	4613      	mov	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fb ff51 	bl	8000588 <__aeabi_f2d>
 80046e6:	4604      	mov	r4, r0
 80046e8:	460d      	mov	r5, r1
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fb ff4c 	bl	8000588 <__aeabi_f2d>
 80046f0:	4680      	mov	r8, r0
 80046f2:	4689      	mov	r9, r1
 80046f4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80046f6:	f7fb ff47 	bl	8000588 <__aeabi_f2d>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	ec43 2b10 	vmov	d0, r2, r3
 8004702:	f00d fa29 	bl	8011b58 <cos>
 8004706:	ec53 2b10 	vmov	r2, r3, d0
 800470a:	4640      	mov	r0, r8
 800470c:	4649      	mov	r1, r9
 800470e:	f7fb ff93 	bl	8000638 <__aeabi_dmul>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4620      	mov	r0, r4
 8004718:	4629      	mov	r1, r5
 800471a:	f7fb fdd7 	bl	80002cc <__adddf3>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4690      	mov	r8, r2
 8004724:	4699      	mov	r9, r3
 8004726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004728:	6919      	ldr	r1, [r3, #16]
 800472a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800472c:	4613      	mov	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	18cc      	adds	r4, r1, r3
 8004736:	4640      	mov	r0, r8
 8004738:	4649      	mov	r1, r9
 800473a:	f7fc fa75 	bl	8000c28 <__aeabi_d2f>
 800473e:	4603      	mov	r3, r0
 8004740:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k].pose.y_a   =  tmphist->state_target[k_prev].pose.y_a   + delta_a_target*sin(theta);
 8004742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004744:	6919      	ldr	r1, [r3, #16]
 8004746:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004748:	4613      	mov	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	4618      	mov	r0, r3
 8004756:	f7fb ff17 	bl	8000588 <__aeabi_f2d>
 800475a:	4604      	mov	r4, r0
 800475c:	460d      	mov	r5, r1
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fb ff12 	bl	8000588 <__aeabi_f2d>
 8004764:	4680      	mov	r8, r0
 8004766:	4689      	mov	r9, r1
 8004768:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800476a:	f7fb ff0d 	bl	8000588 <__aeabi_f2d>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	ec43 2b10 	vmov	d0, r2, r3
 8004776:	f00d fa3f 	bl	8011bf8 <sin>
 800477a:	ec53 2b10 	vmov	r2, r3, d0
 800477e:	4640      	mov	r0, r8
 8004780:	4649      	mov	r1, r9
 8004782:	f7fb ff59 	bl	8000638 <__aeabi_dmul>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4620      	mov	r0, r4
 800478c:	4629      	mov	r1, r5
 800478e:	f7fb fd9d 	bl	80002cc <__adddf3>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4690      	mov	r8, r2
 8004798:	4699      	mov	r9, r3
 800479a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800479c:	6919      	ldr	r1, [r3, #16]
 800479e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047a0:	4613      	mov	r3, r2
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	18cc      	adds	r4, r1, r3
 80047aa:	4640      	mov	r0, r8
 80047ac:	4649      	mov	r1, r9
 80047ae:	f7fc fa3b 	bl	8000c28 <__aeabi_d2f>
 80047b2:	4603      	mov	r3, r0
 80047b4:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k].pose.theta =  tmphist->state_target[k_prev].pose.theta + delta_th_target;
 80047b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047b8:	6919      	ldr	r1, [r3, #16]
 80047ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047bc:	4613      	mov	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80047ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047cc:	6919      	ldr	r1, [r3, #16]
 80047ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047d0:	4613      	mov	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	edd7 7a00 	vldr	s15, [r7]
 80047de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047e2:	edc3 7a02 	vstr	s15, [r3, #8]
 80047e6:	e058      	b.n	800489a <DIFFDRIVE_HISTORY_Update+0x556>
		}else{
			theta= 0;
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	64fb      	str	r3, [r7, #76]	; 0x4c
			tmphist->state_target[k].pose.x_a   =  delta_a_target*cos(theta);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fb feca 	bl	8000588 <__aeabi_f2d>
 80047f4:	4604      	mov	r4, r0
 80047f6:	460d      	mov	r5, r1
 80047f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80047fa:	f7fb fec5 	bl	8000588 <__aeabi_f2d>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	ec43 2b10 	vmov	d0, r2, r3
 8004806:	f00d f9a7 	bl	8011b58 <cos>
 800480a:	ec53 2b10 	vmov	r2, r3, d0
 800480e:	4620      	mov	r0, r4
 8004810:	4629      	mov	r1, r5
 8004812:	f7fb ff11 	bl	8000638 <__aeabi_dmul>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4690      	mov	r8, r2
 800481c:	4699      	mov	r9, r3
 800481e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004820:	6919      	ldr	r1, [r3, #16]
 8004822:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	18cc      	adds	r4, r1, r3
 800482e:	4640      	mov	r0, r8
 8004830:	4649      	mov	r1, r9
 8004832:	f7fc f9f9 	bl	8000c28 <__aeabi_d2f>
 8004836:	4603      	mov	r3, r0
 8004838:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k].pose.y_a   =  delta_a_target*sin(theta);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fb fea4 	bl	8000588 <__aeabi_f2d>
 8004840:	4604      	mov	r4, r0
 8004842:	460d      	mov	r5, r1
 8004844:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004846:	f7fb fe9f 	bl	8000588 <__aeabi_f2d>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	ec43 2b10 	vmov	d0, r2, r3
 8004852:	f00d f9d1 	bl	8011bf8 <sin>
 8004856:	ec53 2b10 	vmov	r2, r3, d0
 800485a:	4620      	mov	r0, r4
 800485c:	4629      	mov	r1, r5
 800485e:	f7fb feeb 	bl	8000638 <__aeabi_dmul>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4690      	mov	r8, r2
 8004868:	4699      	mov	r9, r3
 800486a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800486c:	6919      	ldr	r1, [r3, #16]
 800486e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004870:	4613      	mov	r3, r2
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	18cc      	adds	r4, r1, r3
 800487a:	4640      	mov	r0, r8
 800487c:	4649      	mov	r1, r9
 800487e:	f7fc f9d3 	bl	8000c28 <__aeabi_d2f>
 8004882:	4603      	mov	r3, r0
 8004884:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k].pose.theta =  delta_th_target;
 8004886:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004888:	6919      	ldr	r1, [r3, #16]
 800488a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800488c:	4613      	mov	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	609a      	str	r2, [r3, #8]

		}

		// Increment sample counter
		tmphist->sample_cnt++;
 800489a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048a2:	605a      	str	r2, [r3, #4]
	}
}
 80048a4:	bf00      	nop
 80048a6:	3760      	adds	r7, #96	; 0x60
 80048a8:	46bd      	mov	sp, r7
 80048aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80048ae:	bf00      	nop

080048b0 <DIFFDRIVE_HISTORY_Get_Init>:


/* ---- Init time index to properly read the history circular buffer ----- */
void DIFFDRIVE_HISTORY_Get_Init(void){
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0

	DIFFDRIVE_HISTORY_TypeDef* tmphist= &(hdiffdrv->history);
 80048b6:	4b11      	ldr	r3, [pc, #68]	; (80048fc <DIFFDRIVE_HISTORY_Get_Init+0x4c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80048be:	607b      	str	r3, [r7, #4]

	// Initialize current time index to start read from oldest saved values
	if( tmphist->sample_cnt >= tmphist->max_sample )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d30e      	bcc.n	80048ea <DIFFDRIVE_HISTORY_Get_Init+0x3a>
		tmphist->index= (tmphist->sample_cnt-tmphist->max_sample)%tmphist->max_sample;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6892      	ldr	r2, [r2, #8]
 80048da:	fbb3 f1f2 	udiv	r1, r3, r2
 80048de:	fb02 f201 	mul.w	r2, r2, r1
 80048e2:	1a9a      	subs	r2, r3, r2
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60da      	str	r2, [r3, #12]
	else
		tmphist->index= 0;
}
 80048e8:	e002      	b.n	80048f0 <DIFFDRIVE_HISTORY_Get_Init+0x40>
		tmphist->index= 0;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	60da      	str	r2, [r3, #12]
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	2000740c 	.word	0x2000740c

08004900 <DIFFDRIVE_HISTORY_Get_Sample>:


/* --- Read state sample from History --- */
void DIFFDRIVE_HISTORY_Get_Sample(DIFFDRIVE_STATE_TypeDef* state_measure, DIFFDRIVE_STATE_TypeDef* state_target){
 8004900:	b4b0      	push	{r4, r5, r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]

	DIFFDRIVE_HISTORY_TypeDef* tmphist= &(hdiffdrv->history);
 800490a:	4b23      	ldr	r3, [pc, #140]	; (8004998 <DIFFDRIVE_HISTORY_Get_Sample+0x98>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004912:	60fb      	str	r3, [r7, #12]

	*state_measure= tmphist->state_measure[tmphist->index];
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6959      	ldr	r1, [r3, #20]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	4614      	mov	r4, r2
 800492a:	461d      	mov	r5, r3
 800492c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800492e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004934:	682b      	ldr	r3, [r5, #0]
 8004936:	6023      	str	r3, [r4, #0]
	*state_target = tmphist->state_target [tmphist->index];
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6919      	ldr	r1, [r3, #16]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	4613      	mov	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	4614      	mov	r4, r2
 800494e:	461d      	mov	r5, r3
 8004950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004958:	682b      	ldr	r3, [r5, #0]
 800495a:	6023      	str	r3, [r4, #0]

	// Update index for next step
	if( tmphist->sample_cnt >= tmphist->max_sample )
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	429a      	cmp	r2, r3
 8004966:	d30c      	bcc.n	8004982 <DIFFDRIVE_HISTORY_Get_Sample+0x82>
		tmphist->index= (tmphist->index+1)%tmphist->max_sample;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	3301      	adds	r3, #1
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	6892      	ldr	r2, [r2, #8]
 8004972:	fbb3 f1f2 	udiv	r1, r3, r2
 8004976:	fb02 f201 	mul.w	r2, r2, r1
 800497a:	1a9a      	subs	r2, r3, r2
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	60da      	str	r2, [r3, #12]
	else
		tmphist->index++;
}
 8004980:	e004      	b.n	800498c <DIFFDRIVE_HISTORY_Get_Sample+0x8c>
		tmphist->index++;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	60da      	str	r2, [r3, #12]
}
 800498c:	bf00      	nop
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	bcb0      	pop	{r4, r5, r7}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	2000740c 	.word	0x2000740c

0800499c <DIFFDRIVE_CONTROL_Start>:


void DIFFDRIVE_CONTROL_Start(void){
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0

	// Reset Control
	DIFFDRIVE_CONTROL_Reset();
 80049a0:	f000 f80e 	bl	80049c0 <DIFFDRIVE_CONTROL_Reset>

	// Starting and enabling history
	DIFFDRIVE_HISTORY_Start();
 80049a4:	f7ff fcba 	bl	800431c <DIFFDRIVE_HISTORY_Start>

	// Start control timing
	DIFFDRIVE_TIMING_Start();
 80049a8:	f000 f878 	bl	8004a9c <DIFFDRIVE_TIMING_Start>

}
 80049ac:	bf00      	nop
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <DIFFDRIVE_CONTROL_Stop>:


void DIFFDRIVE_CONTROL_Stop(void){
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0

	// Stop timing, control finished
	DIFFDRIVE_TIMING_Stop();
 80049b4:	f000 f880 	bl	8004ab8 <DIFFDRIVE_TIMING_Stop>

	// Set motor to 0 volt
	DIFFDRIVE_MOTOR_Stop();
 80049b8:	f7ff f986 	bl	8003cc8 <DIFFDRIVE_MOTOR_Stop>

}
 80049bc:	bf00      	nop
 80049be:	bd80      	pop	{r7, pc}

080049c0 <DIFFDRIVE_CONTROL_Reset>:


void DIFFDRIVE_CONTROL_Reset(void){
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0

	DIFFDRIVE_CONTROL_TypeDef* hctrl=    hdiffdrv->control;
 80049c6:	4b34      	ldr	r3, [pc, #208]	; (8004a98 <DIFFDRIVE_CONTROL_Reset+0xd8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80049ce:	60bb      	str	r3, [r7, #8]
	DIFFDRIVE_HISTORY_TypeDef* tmphist= &hdiffdrv->history;
 80049d0:	4b31      	ldr	r3, [pc, #196]	; (8004a98 <DIFFDRIVE_CONTROL_Reset+0xd8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80049d8:	607b      	str	r3, [r7, #4]

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80049da:	2300      	movs	r3, #0
 80049dc:	73fb      	strb	r3, [r7, #15]
 80049de:	e016      	b.n	8004a0e <DIFFDRIVE_CONTROL_Reset+0x4e>
		// Reset feed-forward buffer (with NULL value in second argument the buffers are initialized with zeros)
		FEEDFORWARD_BufferInit(&hctrl[side].fdfrwrd, NULL);
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	2268      	movs	r2, #104	; 0x68
 80049e4:	fb02 f303 	mul.w	r3, r2, r3
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	4413      	add	r3, r2
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fc40 	bl	8005274 <FEEDFORWARD_BufferInit>
		// Reset PID
		PID_Reset(&hctrl[side].pid);
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2268      	movs	r2, #104	; 0x68
 80049f8:	fb02 f303 	mul.w	r3, r2, r3
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	4413      	add	r3, r2
 8004a00:	3334      	adds	r3, #52	; 0x34
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fdd9 	bl	80055ba <PID_Reset>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d9e5      	bls.n	80049e0 <DIFFDRIVE_CONTROL_Reset+0x20>
	}

	// Reset encoder sensors
	DIFFDRIVE_ENCODER_Reset();
 8004a14:	f7ff fc50 	bl	80042b8 <DIFFDRIVE_ENCODER_Reset>

	// If a reset occurred let converge pose target and pose measure, 'cause they are cumulative variables,
	// in order to not have excessive divergences between these two trajectories
	tmphist->state_target[tmphist->index].pose.theta= tmphist->state_measure[tmphist->index].pose.theta;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6959      	ldr	r1, [r3, #20]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	4613      	mov	r3, r2
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4419      	add	r1, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6918      	ldr	r0, [r3, #16]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	4613      	mov	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4403      	add	r3, r0
 8004a3c:	688a      	ldr	r2, [r1, #8]
 8004a3e:	609a      	str	r2, [r3, #8]
	tmphist->state_target[tmphist->index].pose.x_a=   tmphist->state_measure[tmphist->index].pose.x_a;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6959      	ldr	r1, [r3, #20]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4419      	add	r1, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6918      	ldr	r0, [r3, #16]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4403      	add	r3, r0
 8004a64:	680a      	ldr	r2, [r1, #0]
 8004a66:	601a      	str	r2, [r3, #0]
	tmphist->state_target[tmphist->index].pose.y_a=   tmphist->state_measure[tmphist->index].pose.y_a;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6959      	ldr	r1, [r3, #20]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	4613      	mov	r3, r2
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4419      	add	r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6918      	ldr	r0, [r3, #16]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	4613      	mov	r3, r2
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4403      	add	r3, r0
 8004a8c:	684a      	ldr	r2, [r1, #4]
 8004a8e:	605a      	str	r2, [r3, #4]

}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	2000740c 	.word	0x2000740c

08004a9c <DIFFDRIVE_TIMING_Start>:


void DIFFDRIVE_TIMING_Start(void){
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0

	// Starting timer in interrupt mode. It serve for control law timing
	HAL_TIM_Base_Start_IT(hdiffdrv->timing.htim);
 8004aa0:	4b04      	ldr	r3, [pc, #16]	; (8004ab4 <DIFFDRIVE_TIMING_Start+0x18>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f002 ffc9 	bl	8007a40 <HAL_TIM_Base_Start_IT>

}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	2000740c 	.word	0x2000740c

08004ab8 <DIFFDRIVE_TIMING_Stop>:


void DIFFDRIVE_TIMING_Stop(void){
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0

	// Stop timer in interrupt mode
	HAL_TIM_Base_Stop_IT(hdiffdrv->timing.htim);
 8004abc:	4b04      	ldr	r3, [pc, #16]	; (8004ad0 <DIFFDRIVE_TIMING_Stop+0x18>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f003 f82b 	bl	8007b20 <HAL_TIM_Base_Stop_IT>

}
 8004aca:	bf00      	nop
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	2000740c 	.word	0x2000740c

08004ad4 <DIFFDRIVE_TIMING_Wait>:


void DIFFDRIVE_TIMING_Wait(void){
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0

	// Wait until the timing flag is true
	while( !(hdiffdrv->timing.flag) )
 8004ad8:	e000      	b.n	8004adc <DIFFDRIVE_TIMING_Wait+0x8>
		__NOP();
 8004ada:	bf00      	nop
	while( !(hdiffdrv->timing.flag) )
 8004adc:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <DIFFDRIVE_TIMING_Wait+0x30>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	f083 0301 	eor.w	r3, r3, #1
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1f4      	bne.n	8004ada <DIFFDRIVE_TIMING_Wait+0x6>

	// Reset timing flag
	hdiffdrv->timing.flag= false;
 8004af0:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <DIFFDRIVE_TIMING_Wait+0x30>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

}
 8004afa:	bf00      	nop
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	2000740c 	.word	0x2000740c

08004b08 <DIFFDRIVE_STATE_Update>:


void DIFFDRIVE_STATE_Update(float* input){
 8004b08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b0c:	b088      	sub	sp, #32
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_STATE_TypeDef* tmpstate= &(hdiffdrv->state);
 8004b12:	4b60      	ldr	r3, [pc, #384]	; (8004c94 <DIFFDRIVE_STATE_Update+0x18c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b1a:	61bb      	str	r3, [r7, #24]

	float delta_a, delta_th, theta;

	// Updating state
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	77fb      	strb	r3, [r7, #31]
 8004b20:	e042      	b.n	8004ba8 <DIFFDRIVE_STATE_Update+0xa0>
		tmpstate->wheel[side]=       hdiffdrv->encoder[side].current_value;
 8004b22:	4b5c      	ldr	r3, [pc, #368]	; (8004c94 <DIFFDRIVE_STATE_Update+0x18c>)
 8004b24:	6819      	ldr	r1, [r3, #0]
 8004b26:	7ffa      	ldrb	r2, [r7, #31]
 8004b28:	7ff8      	ldrb	r0, [r7, #31]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	69b9      	ldr	r1, [r7, #24]
 8004b3c:	1c83      	adds	r3, r0, #2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	3304      	adds	r3, #4
 8004b44:	601a      	str	r2, [r3, #0]
		tmpstate->delta_wheel[side]= hdiffdrv->encoder[side].current_value-hdiffdrv->encoder[side].previous_value;
 8004b46:	4b53      	ldr	r3, [pc, #332]	; (8004c94 <DIFFDRIVE_STATE_Update+0x18c>)
 8004b48:	6819      	ldr	r1, [r3, #0]
 8004b4a:	7ffa      	ldrb	r2, [r7, #31]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004b5a:	ed93 7a00 	vldr	s14, [r3]
 8004b5e:	4b4d      	ldr	r3, [pc, #308]	; (8004c94 <DIFFDRIVE_STATE_Update+0x18c>)
 8004b60:	6819      	ldr	r1, [r3, #0]
 8004b62:	7ffa      	ldrb	r2, [r7, #31]
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004b72:	edd3 7a00 	vldr	s15, [r3]
 8004b76:	7ffb      	ldrb	r3, [r7, #31]
 8004b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	3304      	adds	r3, #4
 8004b86:	edc3 7a00 	vstr	s15, [r3]
		tmpstate->input[side]=       input[side];
 8004b8a:	7ffb      	ldrb	r3, [r7, #31]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	441a      	add	r2, r3
 8004b92:	7ffb      	ldrb	r3, [r7, #31]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	69b9      	ldr	r1, [r7, #24]
 8004b98:	3306      	adds	r3, #6
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 8004ba2:	7ffb      	ldrb	r3, [r7, #31]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	7ffb      	ldrb	r3, [r7, #31]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d9b9      	bls.n	8004b22 <DIFFDRIVE_STATE_Update+0x1a>
	}

	// Compute and update current pose
	DIFFDRIVE_DeltaWheel2DeltaTrajectory(&delta_a, &delta_th,  tmpstate->delta_wheel);
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	f103 0214 	add.w	r2, r3, #20
 8004bb4:	f107 010c 	add.w	r1, r7, #12
 8004bb8:	f107 0310 	add.w	r3, r7, #16
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 f8bf 	bl	8004d40 <DIFFDRIVE_DeltaWheel2DeltaTrajectory>

	theta= tmpstate->pose.theta;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	617b      	str	r3, [r7, #20]
	tmpstate->pose.x_a   +=  delta_a*cos(theta);
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fb fcdb 	bl	8000588 <__aeabi_f2d>
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	460d      	mov	r5, r1
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fb fcd5 	bl	8000588 <__aeabi_f2d>
 8004bde:	4680      	mov	r8, r0
 8004be0:	4689      	mov	r9, r1
 8004be2:	6978      	ldr	r0, [r7, #20]
 8004be4:	f7fb fcd0 	bl	8000588 <__aeabi_f2d>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	ec43 2b10 	vmov	d0, r2, r3
 8004bf0:	f00c ffb2 	bl	8011b58 <cos>
 8004bf4:	ec53 2b10 	vmov	r2, r3, d0
 8004bf8:	4640      	mov	r0, r8
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	f7fb fd1c 	bl	8000638 <__aeabi_dmul>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4620      	mov	r0, r4
 8004c06:	4629      	mov	r1, r5
 8004c08:	f7fb fb60 	bl	80002cc <__adddf3>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4610      	mov	r0, r2
 8004c12:	4619      	mov	r1, r3
 8004c14:	f7fc f808 	bl	8000c28 <__aeabi_d2f>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	601a      	str	r2, [r3, #0]
	tmpstate->pose.y_a   +=  delta_a*sin(theta);
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fb fcb0 	bl	8000588 <__aeabi_f2d>
 8004c28:	4604      	mov	r4, r0
 8004c2a:	460d      	mov	r5, r1
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fb fcaa 	bl	8000588 <__aeabi_f2d>
 8004c34:	4680      	mov	r8, r0
 8004c36:	4689      	mov	r9, r1
 8004c38:	6978      	ldr	r0, [r7, #20]
 8004c3a:	f7fb fca5 	bl	8000588 <__aeabi_f2d>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	ec43 2b10 	vmov	d0, r2, r3
 8004c46:	f00c ffd7 	bl	8011bf8 <sin>
 8004c4a:	ec53 2b10 	vmov	r2, r3, d0
 8004c4e:	4640      	mov	r0, r8
 8004c50:	4649      	mov	r1, r9
 8004c52:	f7fb fcf1 	bl	8000638 <__aeabi_dmul>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	f7fb fb35 	bl	80002cc <__adddf3>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f7fb ffdd 	bl	8000c28 <__aeabi_d2f>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	605a      	str	r2, [r3, #4]
	tmpstate->pose.theta +=  delta_th;
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	ed93 7a02 	vldr	s14, [r3, #8]
 8004c7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004c88:	bf00      	nop
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c92:	bf00      	nop
 8004c94:	2000740c 	.word	0x2000740c

08004c98 <DIFFDRIVE_DeltaTrajectory2WheelAngle>:


void DIFFDRIVE_DeltaTrajectory2WheelAngle(float* wheel, float delta_a, float delta_theta){
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004ca4:	edc7 0a01 	vstr	s1, [r7, #4]

	float r= hdiffdrv->mech_prmtr.r;
 8004ca8:	4b24      	ldr	r3, [pc, #144]	; (8004d3c <DIFFDRIVE_DeltaTrajectory2WheelAngle+0xa4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004cb0:	617b      	str	r3, [r7, #20]
	float l= hdiffdrv->mech_prmtr.l;
 8004cb2:	4b22      	ldr	r3, [pc, #136]	; (8004d3c <DIFFDRIVE_DeltaTrajectory2WheelAngle+0xa4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8004cba:	613b      	str	r3, [r7, #16]

	// Target computation (it's affect input var "wheel" because is a pointer.
	// Also note the "+=" symbol and not "=")
	if( wheel != NULL){
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d035      	beq.n	8004d2e <DIFFDRIVE_DeltaTrajectory2WheelAngle+0x96>
		wheel[left ] +=  delta_a/r - l*delta_theta/r;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	ed93 7a00 	vldr	s14, [r3]
 8004cc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8004cd0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004cd4:	ed97 6a04 	vldr	s12, [r7, #16]
 8004cd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cdc:	ee66 5a27 	vmul.f32	s11, s12, s15
 8004ce0:	ed97 6a05 	vldr	s12, [r7, #20]
 8004ce4:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004ce8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	edc3 7a00 	vstr	s15, [r3]
		wheel[right] +=  delta_a/r + l*delta_theta/r;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	ed93 7a00 	vldr	s14, [r3]
 8004cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d02:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d06:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004d0a:	ed97 6a04 	vldr	s12, [r7, #16]
 8004d0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d12:	ee66 5a27 	vmul.f32	s11, s12, s15
 8004d16:	ed97 6a05 	vldr	s12, [r7, #20]
 8004d1a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3304      	adds	r3, #4
 8004d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d2a:	edc3 7a00 	vstr	s15, [r3]
	}

}
 8004d2e:	bf00      	nop
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	2000740c 	.word	0x2000740c

08004d40 <DIFFDRIVE_DeltaWheel2DeltaTrajectory>:

void DIFFDRIVE_DeltaWheel2DeltaTrajectory(float* delta_a_p, float* delta_theta_p, float* delta_wheel){
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]

	float r= hdiffdrv->mech_prmtr.r;
 8004d4c:	4b1f      	ldr	r3, [pc, #124]	; (8004dcc <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x8c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004d54:	617b      	str	r3, [r7, #20]
	float l= hdiffdrv->mech_prmtr.l;
 8004d56:	4b1d      	ldr	r3, [pc, #116]	; (8004dcc <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x8c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8004d5e:	613b      	str	r3, [r7, #16]

	// Trajectory Variations computation (it's affect input vars delta_a_p and delta_theta_p because are pointers)

	if( delta_a_p != NULL)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d013      	beq.n	8004d8e <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x4e>
		*delta_a_p= (delta_wheel[right] + delta_wheel[left])*r/2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	ed93 7a00 	vldr	s14, [r3]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	edd3 7a00 	vldr	s15, [r3]
 8004d74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d78:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d80:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004d84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	edc3 7a00 	vstr	s15, [r3]

	if( delta_theta_p != NULL )
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d015      	beq.n	8004dc0 <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x80>
		*delta_theta_p= (delta_wheel[right] - delta_wheel[left])*r/(2*l);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3304      	adds	r3, #4
 8004d98:	ed93 7a00 	vldr	s14, [r3]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	edd3 7a00 	vldr	s15, [r3]
 8004da2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004da6:	edd7 7a05 	vldr	s15, [r7, #20]
 8004daa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004dae:	edd7 7a04 	vldr	s15, [r7, #16]
 8004db2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	edc3 7a00 	vstr	s15, [r3]

}
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	2000740c 	.word	0x2000740c

08004dd0 <DIFFDRIVE_CONTROL_WheelStep>:


void DIFFDRIVE_CONTROL_WheelStep(float* newest_target){
 8004dd0:	b590      	push	{r4, r7, lr}
 8004dd2:	b08b      	sub	sp, #44	; 0x2c
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_CONTROL_TypeDef* hctrl=  hdiffdrv->control;
 8004dd8:	4b50      	ldr	r3, [pc, #320]	; (8004f1c <DIFFDRIVE_CONTROL_WheelStep+0x14c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004de0:	623b      	str	r3, [r7, #32]
	float curr_target[2], curr_measure, input[2];

	/* Do control wheels */

	// Waiting for step control enabling
	DIFFDRIVE_TIMING_Wait();
 8004de2:	f7ff fe77 	bl	8004ad4 <DIFFDRIVE_TIMING_Wait>

	// Then get wheel step measure If counters are not near overflow (look at CaptureMeasure function)
	if( (status= DIFFDRIVE_ENCODER_CaptureMeasure()) == DIFFDRIVE_ERROR ){
 8004de6:	f7ff f9b7 	bl	8004158 <DIFFDRIVE_ENCODER_CaptureMeasure>
 8004dea:	4603      	mov	r3, r0
 8004dec:	77fb      	strb	r3, [r7, #31]
 8004dee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004df6:	d10a      	bne.n	8004e0e <DIFFDRIVE_CONTROL_WheelStep+0x3e>
		// If exception, reset control
		DIFFDRIVE_CONTROL_Reset();
 8004df8:	f7ff fde2 	bl	80049c0 <DIFFDRIVE_CONTROL_Reset>
		// Reset target temporary variable
		newest_target[left ]= 0;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
		newest_target[right]= 0;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3304      	adds	r3, #4
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
	}

	// Compute input
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e14:	e06f      	b.n	8004ef6 <DIFFDRIVE_CONTROL_WheelStep+0x126>

		// Computing input using inversion control
		input[side]  = FEEDFORWARD_InversionControl(&(hctrl[side].fdfrwrd), newest_target[side]);
 8004e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e1a:	2268      	movs	r2, #104	; 0x68
 8004e1c:	fb02 f303 	mul.w	r3, r2, r3
 8004e20:	6a3a      	ldr	r2, [r7, #32]
 8004e22:	4413      	add	r3, r2
 8004e24:	4619      	mov	r1, r3
 8004e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	4413      	add	r3, r2
 8004e30:	edd3 7a00 	vldr	s15, [r3]
 8004e34:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8004e38:	eeb0 0a67 	vmov.f32	s0, s15
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	f000 faac 	bl	800539a <FEEDFORWARD_InversionControl>
 8004e42:	eef0 7a40 	vmov.f32	s15, s0
 8004e46:	00a3      	lsls	r3, r4, #2
 8004e48:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e4c:	4413      	add	r3, r2
 8004e4e:	3b20      	subs	r3, #32
 8004e50:	edc3 7a00 	vstr	s15, [r3]

		// Wheel angle read from sensor
		curr_measure= __DIFFDRIVE_ENCODER_GET_CURRENT_VALUE(hdiffdrv,side);
 8004e54:	4b31      	ldr	r3, [pc, #196]	; (8004f1c <DIFFDRIVE_CONTROL_WheelStep+0x14c>)
 8004e56:	6819      	ldr	r1, [r3, #0]
 8004e58:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	61bb      	str	r3, [r7, #24]

		// Current target value saved in the feed-forward controller struct (you must call before the
		// Inversion Control function and then to extract this value. Look at feed-forward library to
		// better understand why)
		curr_target[side]= __FEEDFORWARD_GET_CURRENT_TARGET(&(hctrl[side].fdfrwrd));
 8004e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e72:	2268      	movs	r2, #104	; 0x68
 8004e74:	fb02 f303 	mul.w	r3, r2, r3
 8004e78:	6a3a      	ldr	r2, [r7, #32]
 8004e7a:	441a      	add	r2, r3
 8004e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004e88:	440b      	add	r3, r1
 8004e8a:	3b18      	subs	r3, #24
 8004e8c:	601a      	str	r2, [r3, #0]

		// Computing PID input
		input[side] += PID_Control(&(hctrl[side].pid), curr_target[side], curr_measure);
 8004e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e92:	2268      	movs	r2, #104	; 0x68
 8004e94:	fb02 f303 	mul.w	r3, r2, r3
 8004e98:	6a3a      	ldr	r2, [r7, #32]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004eaa:	440b      	add	r3, r1
 8004eac:	3b18      	subs	r3, #24
 8004eae:	edd3 7a00 	vldr	s15, [r3]
 8004eb2:	edd7 0a06 	vldr	s1, [r7, #24]
 8004eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f000 fb9b 	bl	80055f6 <PID_Control>
 8004ec0:	eeb0 7a40 	vmov.f32	s14, s0
 8004ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ece:	4413      	add	r3, r2
 8004ed0:	3b20      	subs	r3, #32
 8004ed2:	edd3 7a00 	vldr	s15, [r3]
 8004ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3b20      	subs	r3, #32
 8004ee8:	edc3 7a00 	vstr	s15, [r3]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d98b      	bls.n	8004e16 <DIFFDRIVE_CONTROL_WheelStep+0x46>

	}

	// Set new PWMs signals
	DIFFDRIVE_MOTOR_SetPWMs(input);
 8004efe:	f107 0308 	add.w	r3, r7, #8
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe fef2 	bl	8003cec <DIFFDRIVE_MOTOR_SetPWMs>

	// Update differential drive state structure
	DIFFDRIVE_STATE_Update(input);
 8004f08:	f107 0308 	add.w	r3, r7, #8
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fdfb 	bl	8004b08 <DIFFDRIVE_STATE_Update>

}
 8004f12:	bf00      	nop
 8004f14:	372c      	adds	r7, #44	; 0x2c
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd90      	pop	{r4, r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	2000740c 	.word	0x2000740c

08004f20 <DIFFDRIVE_TrackingStart>:

void DIFFDRIVE_TrackingStart(void){
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0

	// Start control
	DIFFDRIVE_CONTROL_Start();
 8004f24:	f7ff fd3a 	bl	800499c <DIFFDRIVE_CONTROL_Start>

	// First step wheels control (starts with zeros, robot still)
	DIFFDRIVE_TrackingStep(0,0);
 8004f28:	eddf 0a03 	vldr	s1, [pc, #12]	; 8004f38 <DIFFDRIVE_TrackingStart+0x18>
 8004f2c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8004f38 <DIFFDRIVE_TrackingStart+0x18>
 8004f30:	f000 f80a 	bl	8004f48 <DIFFDRIVE_TrackingStep>

}
 8004f34:	bf00      	nop
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	00000000 	.word	0x00000000

08004f3c <DIFFDRIVE_TrackingStop>:


void DIFFDRIVE_TrackingStop(void){
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0

	// Stop control
	DIFFDRIVE_CONTROL_Stop();
 8004f40:	f7ff fd36 	bl	80049b0 <DIFFDRIVE_CONTROL_Stop>

}
 8004f44:	bf00      	nop
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <DIFFDRIVE_TrackingStep>:


void DIFFDRIVE_TrackingStep(float delta_a, float delta_theta){
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004f52:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_CONTROL_TypeDef* tmpctrl= hdiffdrv->control;
 8004f56:	4b1a      	ldr	r3, [pc, #104]	; (8004fc0 <DIFFDRIVE_TrackingStep+0x78>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004f5e:	613b      	str	r3, [r7, #16]
	float newest_target[2];

	// Extracting previous target
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8004f60:	2300      	movs	r3, #0
 8004f62:	75fb      	strb	r3, [r7, #23]
 8004f64:	e010      	b.n	8004f88 <DIFFDRIVE_TrackingStep+0x40>
		newest_target[side]= __FEEDFORWARD_GET_NEWEST_TARGET(&tmpctrl[side].fdfrwrd);
 8004f66:	7dfb      	ldrb	r3, [r7, #23]
 8004f68:	2268      	movs	r2, #104	; 0x68
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	441a      	add	r2, r3
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
 8004f74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	f107 0118 	add.w	r1, r7, #24
 8004f7c:	440b      	add	r3, r1
 8004f7e:	3b10      	subs	r3, #16
 8004f80:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8004f82:	7dfb      	ldrb	r3, [r7, #23]
 8004f84:	3301      	adds	r3, #1
 8004f86:	75fb      	strb	r3, [r7, #23]
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d9eb      	bls.n	8004f66 <DIFFDRIVE_TrackingStep+0x1e>


	// Computing newest target
	DIFFDRIVE_DeltaTrajectory2WheelAngle(newest_target, delta_a, delta_theta);
 8004f8e:	f107 0308 	add.w	r3, r7, #8
 8004f92:	edd7 0a00 	vldr	s1, [r7]
 8004f96:	ed97 0a01 	vldr	s0, [r7, #4]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff fe7c 	bl	8004c98 <DIFFDRIVE_DeltaTrajectory2WheelAngle>

	// Make a wheel step motion
	DIFFDRIVE_CONTROL_WheelStep(newest_target);
 8004fa0:	f107 0308 	add.w	r3, r7, #8
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff ff13 	bl	8004dd0 <DIFFDRIVE_CONTROL_WheelStep>

	// Updating History
	DIFFDRIVE_HISTORY_Update(delta_a, delta_theta);
 8004faa:	edd7 0a00 	vldr	s1, [r7]
 8004fae:	ed97 0a01 	vldr	s0, [r7, #4]
 8004fb2:	f7ff f9c7 	bl	8004344 <DIFFDRIVE_HISTORY_Update>


}
 8004fb6:	bf00      	nop
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	2000740c 	.word	0x2000740c

08004fc4 <DIFFDRIVE_TIMING_Callback>:
	DIFFDRIVE_MOTOR_Stop();

}


void DIFFDRIVE_TIMING_Callback(TIM_HandleTypeDef* htim){
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]

	// Enabling timing flag
	hdiffdrv->timing.flag= true;
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <DIFFDRIVE_TIMING_Callback+0x20>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4


}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	2000740c 	.word	0x2000740c

08004fe8 <MAF_Create>:
#include <stdlib.h>

// Moving Average Filter Methods --------------------------------------------------------------------- //

// MAF Create
MAF_HandleTypeDef MAF_Create(const int buffsize, float *weights){
 8004fe8:	b5b0      	push	{r4, r5, r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
	MAF_HandleTypeDef tmp;

	tmp.buffsize = buffsize;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	613b      	str	r3, [r7, #16]
	tmp.buffer = (float*)calloc(buffsize,sizeof(float));
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2104      	movs	r1, #4
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f008 f875 	bl	800d0ec <calloc>
 8005002:	4603      	mov	r3, r0
 8005004:	623b      	str	r3, [r7, #32]
	tmp.sum = 0;
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	617b      	str	r3, [r7, #20]
	tmp.avg = 0;
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	61bb      	str	r3, [r7, #24]
	tmp.idx = 0;
 8005012:	2300      	movs	r3, #0
 8005014:	61fb      	str	r3, [r7, #28]
	tmp.weights= weights;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	627b      	str	r3, [r7, #36]	; 0x24


	return tmp;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	461d      	mov	r5, r3
 800501e:	f107 0410 	add.w	r4, r7, #16
 8005022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005026:	e894 0003 	ldmia.w	r4, {r0, r1}
 800502a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	3728      	adds	r7, #40	; 0x28
 8005032:	46bd      	mov	sp, r7
 8005034:	bdb0      	pop	{r4, r5, r7, pc}

08005036 <MAF_Reset>:

void MAF_Reset(MAF_HandleTypeDef* filter, float init_val){
 8005036:	b480      	push	{r7}
 8005038:	b085      	sub	sp, #20
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	ed87 0a00 	vstr	s0, [r7]

	filter->sum = init_val;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	605a      	str	r2, [r3, #4]
	filter->avg = init_val;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	609a      	str	r2, [r3, #8]
	filter->idx = 0;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	60da      	str	r2, [r3, #12]

	for(int i=0; i < filter->buffsize; i++)
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	e009      	b.n	800506e <MAF_Reset+0x38>
		filter->buffer[i]= init_val;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691a      	ldr	r2, [r3, #16]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	601a      	str	r2, [r3, #0]
	for(int i=0; i < filter->buffsize; i++)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3301      	adds	r3, #1
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	429a      	cmp	r2, r3
 8005076:	dbf0      	blt.n	800505a <MAF_Reset+0x24>
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <MAF_Update>:

// Maf update. Arithmetic or Weighted. If latter the weights array are ordered from oldest to newest
void MAF_Update(MAF_HandleTypeDef* filter, const float data){
 8005086:	b480      	push	{r7}
 8005088:	b087      	sub	sp, #28
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	ed87 0a00 	vstr	s0, [r7]

	// Weighted
	if(filter->weights != NULL){
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d03e      	beq.n	8005118 <MAF_Update+0x92>
		// Store current measure
		filter->buffer[filter->idx] = data;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691a      	ldr	r2, [r3, #16]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	601a      	str	r2, [r3, #0]

		// Sum variable
		float sum_tmp = 0;
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
		// Index variable to scan the circular buffer
		int idx_tmp;

		// Computing average from oldest to newest (from 1 to size+1), in circular buffer
		// the oldest are the next value from the current
		for(int i=1; i<filter->buffsize+1; i++){
 80050b0:	2301      	movs	r3, #1
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	e027      	b.n	8005106 <MAF_Update+0x80>
			// Current buffer index in the for loop (the mod '%' serve for the circular index)
			idx_tmp = (filter->idx+i)%(filter->buffsize);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4413      	add	r3, r2
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6812      	ldr	r2, [r2, #0]
 80050c2:	fb93 f1f2 	sdiv	r1, r3, r2
 80050c6:	fb02 f201 	mul.w	r2, r2, r1
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
			// Current sum
			sum_tmp += (filter->buffer[idx_tmp])*(filter->weights[i-1]) 	;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	ed93 7a00 	vldr	s14, [r3]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695a      	ldr	r2, [r3, #20]
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050e6:	3b01      	subs	r3, #1
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	edd3 7a00 	vldr	s15, [r3]
 80050f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80050f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050fc:	edc7 7a05 	vstr	s15, [r7, #20]
		for(int i=1; i<filter->buffsize+1; i++){
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	3301      	adds	r3, #1
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	429a      	cmp	r2, r3
 800510e:	ddd2      	ble.n	80050b6 <MAF_Update+0x30>
		}
		filter->avg = sum_tmp;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	609a      	str	r2, [r3, #8]
 8005116:	e02f      	b.n	8005178 <MAF_Update+0xf2>
	}
	// Arithmetic
	else{
		// Remove oldest value from circular buffer
		filter->sum -= filter->buffer[filter->idx];
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	ed93 7a01 	vldr	s14, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	edd3 7a00 	vldr	s15, [r3]
 800512e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	edc3 7a01 	vstr	s15, [r3, #4]

		// Add current measure
		filter->sum += data;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	ed93 7a01 	vldr	s14, [r3, #4]
 800513e:	edd7 7a00 	vldr	s15, [r7]
 8005142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	edc3 7a01 	vstr	s15, [r3, #4]

		// Calculate Average
		filter->avg = (float) filter->sum/filter->buffsize;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	edd3 6a01 	vldr	s13, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800515e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	edc3 7a02 	vstr	s15, [r3, #8]

		// Store current measure
		filter->buffer[filter->idx] = data;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	601a      	str	r2, [r3, #0]
	}

	// Increase index (the mod '%' serve for the circular buffer)
	filter->idx = (filter->idx+1)%(filter->buffsize);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	3301      	adds	r3, #1
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	fb93 f1f2 	sdiv	r1, r3, r2
 8005186:	fb02 f201 	mul.w	r2, r2, r1
 800518a:	1a9a      	subs	r2, r3, r2
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	60da      	str	r2, [r3, #12]

}
 8005190:	bf00      	nop
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <FEEDFORWARD_Init>:

#include <stdlib.h>
#include "my_lib/feedforward_controller.h"


void FEEDFORWARD_Init(FEEDFORWARD_HandleTypeDef* hctrl){
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]

	// Initializing handle structure values from Init field
	hctrl->arma.n_ar=  hctrl->Init.arma_n_ar;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	881a      	ldrh	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	821a      	strh	r2, [r3, #16]
	hctrl->arma.n_ma=  hctrl->Init.arma_n_ma;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	885a      	ldrh	r2, [r3, #2]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	825a      	strh	r2, [r3, #18]
	hctrl->arma.tau=   hctrl->Init.arma_tau;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	889a      	ldrh	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	829a      	strh	r2, [r3, #20]

	hctrl->arma.AR= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8a1b      	ldrh	r3, [r3, #16]
 80051c0:	2104      	movs	r1, #4
 80051c2:	4618      	mov	r0, r3
 80051c4:	f007 ff92 	bl	800d0ec <calloc>
 80051c8:	4603      	mov	r3, r0
 80051ca:	461a      	mov	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	619a      	str	r2, [r3, #24]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e00e      	b.n	80051f4 <FEEDFORWARD_Init+0x58>
		hctrl->arma.AR[i]= hctrl->Init.arma_AR[i];
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	441a      	add	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6999      	ldr	r1, [r3, #24]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	6812      	ldr	r2, [r2, #0]
 80051ec:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3301      	adds	r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8a1b      	ldrh	r3, [r3, #16]
 80051f8:	461a      	mov	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4293      	cmp	r3, r2
 80051fe:	dbea      	blt.n	80051d6 <FEEDFORWARD_Init+0x3a>

	hctrl->arma.MA= (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	8a5b      	ldrh	r3, [r3, #18]
 8005204:	2104      	movs	r1, #4
 8005206:	4618      	mov	r0, r3
 8005208:	f007 ff70 	bl	800d0ec <calloc>
 800520c:	4603      	mov	r3, r0
 800520e:	461a      	mov	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	61da      	str	r2, [r3, #28]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8005214:	2300      	movs	r3, #0
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	e00e      	b.n	8005238 <FEEDFORWARD_Init+0x9c>
		hctrl->arma.MA[i]= hctrl->Init.arma_MA[i];
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	441a      	add	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69d9      	ldr	r1, [r3, #28]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	3301      	adds	r3, #1
 8005236:	60bb      	str	r3, [r7, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8a5b      	ldrh	r3, [r3, #18]
 800523c:	461a      	mov	r2, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	4293      	cmp	r3, r2
 8005242:	dbea      	blt.n	800521a <FEEDFORWARD_Init+0x7e>

	// Allocating history' arrays
	hctrl->target_buffer= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8a1b      	ldrh	r3, [r3, #16]
 8005248:	2104      	movs	r1, #4
 800524a:	4618      	mov	r0, r3
 800524c:	f007 ff4e 	bl	800d0ec <calloc>
 8005250:	4603      	mov	r3, r0
 8005252:	461a      	mov	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	625a      	str	r2, [r3, #36]	; 0x24
	hctrl->input_buffer=  (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8a5b      	ldrh	r3, [r3, #18]
 800525c:	2104      	movs	r1, #4
 800525e:	4618      	mov	r0, r3
 8005260:	f007 ff44 	bl	800d0ec <calloc>
 8005264:	4603      	mov	r3, r0
 8005266:	461a      	mov	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	621a      	str	r2, [r3, #32]

}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <FEEDFORWARD_BufferInit>:
	// Reset feed-forward buffer (with NULL value in second argument the buffers are initialized with zeros)
	FEEDFORWARD_BufferInit(hctrl, NULL);

}

void FEEDFORWARD_BufferInit(FEEDFORWARD_HandleTypeDef* hctrl, float *target_init){
 8005274:	b490      	push	{r4, r7}
 8005276:	b08c      	sub	sp, #48	; 0x30
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f107 0408 	add.w	r4, r7, #8
 8005284:	3310      	adds	r3, #16
 8005286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint16_t n_ar= arma.n_ar;
 800528c:	893b      	ldrh	r3, [r7, #8]
 800528e:	83fb      	strh	r3, [r7, #30]
	uint16_t n_ma= arma.n_ma;
 8005290:	897b      	ldrh	r3, [r7, #10]
 8005292:	83bb      	strh	r3, [r7, #28]
	uint16_t  tau= arma.tau;
 8005294:	89bb      	ldrh	r3, [r7, #12]
 8005296:	837b      	strh	r3, [r7, #26]

	// If target pointer is equal to NULL the buffers take zero values
	if( (void *)target_init == NULL ){
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d129      	bne.n	80052f2 <FEEDFORWARD_BufferInit+0x7e>

		for(int i= 0; i < tau; i++)
 800529e:	2300      	movs	r3, #0
 80052a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052a2:	e00d      	b.n	80052c0 <FEEDFORWARD_BufferInit+0x4c>
			hctrl->target_buffer[(n_ar-1)-i]= 0;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052a8:	8bfb      	ldrh	r3, [r7, #30]
 80052aa:	1e59      	subs	r1, r3, #1
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	1acb      	subs	r3, r1, r3
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]
		for(int i= 0; i < tau; i++)
 80052ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052bc:	3301      	adds	r3, #1
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c0:	8b7b      	ldrh	r3, [r7, #26]
 80052c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052c4:	429a      	cmp	r2, r3
 80052c6:	dbed      	blt.n	80052a4 <FEEDFORWARD_BufferInit+0x30>

		// Complete first values with the same initial value
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 80052c8:	8bfb      	ldrh	r3, [r7, #30]
 80052ca:	1e5a      	subs	r2, r3, #1
 80052cc:	8b7b      	ldrh	r3, [r7, #26]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d2:	e00a      	b.n	80052ea <FEEDFORWARD_BufferInit+0x76>
			hctrl->target_buffer[i]= 0;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	3b01      	subs	r3, #1
 80052e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	daf1      	bge.n	80052d4 <FEEDFORWARD_BufferInit+0x60>
 80052f0:	e02d      	b.n	800534e <FEEDFORWARD_BufferInit+0xda>

	}
	// Else I use the input values
	else{
		for(int i= 0; i < tau; i++)
 80052f2:	2300      	movs	r3, #0
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
 80052f6:	e012      	b.n	800531e <FEEDFORWARD_BufferInit+0xaa>
			hctrl->target_buffer[(n_ar-1)-i]= target_init[tau-i];
 80052f8:	8b7a      	ldrh	r2, [r7, #26]
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	441a      	add	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005308:	8bfb      	ldrh	r3, [r7, #30]
 800530a:	1e58      	subs	r0, r3, #1
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	1ac3      	subs	r3, r0, r3
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	601a      	str	r2, [r3, #0]
		for(int i= 0; i < tau; i++)
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	3301      	adds	r3, #1
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
 800531e:	8b7b      	ldrh	r3, [r7, #26]
 8005320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005322:	429a      	cmp	r2, r3
 8005324:	dbe8      	blt.n	80052f8 <FEEDFORWARD_BufferInit+0x84>

		// Complete first values with the same initial value
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 8005326:	8bfb      	ldrh	r3, [r7, #30]
 8005328:	1e5a      	subs	r2, r3, #1
 800532a:	8b7b      	ldrh	r3, [r7, #26]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	623b      	str	r3, [r7, #32]
 8005330:	e00a      	b.n	8005348 <FEEDFORWARD_BufferInit+0xd4>
			hctrl->target_buffer[i]= target_init[0];
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	601a      	str	r2, [r3, #0]
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	3b01      	subs	r3, #1
 8005346:	623b      	str	r3, [r7, #32]
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	2b00      	cmp	r3, #0
 800534c:	daf1      	bge.n	8005332 <FEEDFORWARD_BufferInit+0xbe>
	}

	// Set current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[n_ar-1-tau];
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005352:	8bfb      	ldrh	r3, [r7, #30]
 8005354:	1e59      	subs	r1, r3, #1
 8005356:	8b7b      	ldrh	r3, [r7, #26]
 8005358:	1acb      	subs	r3, r1, r3
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[n_ma-1];
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1a      	ldr	r2, [r3, #32]
 8005368:	8bbb      	ldrh	r3, [r7, #28]
 800536a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800536e:	3b01      	subs	r3, #1
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800537e:	893b      	ldrh	r3, [r7, #8]
 8005380:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005384:	3b01      	subs	r3, #1
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005390:	bf00      	nop
 8005392:	3730      	adds	r7, #48	; 0x30
 8005394:	46bd      	mov	sp, r7
 8005396:	bc90      	pop	{r4, r7}
 8005398:	4770      	bx	lr

0800539a <FEEDFORWARD_InversionControl>:


float FEEDFORWARD_InversionControl(FEEDFORWARD_HandleTypeDef* hctrl, float newest_target){
 800539a:	b590      	push	{r4, r7, lr}
 800539c:	b08f      	sub	sp, #60	; 0x3c
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	ed87 0a00 	vstr	s0, [r7]

	float input= 0;
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	637b      	str	r3, [r7, #52]	; 0x34
	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f107 040c 	add.w	r4, r7, #12
 80053b2:	3310      	adds	r3, #16
 80053b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int oldest_ar_sample= 0;
 80053ba:	2300      	movs	r3, #0
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
	int newest_ar_sample= arma.n_ar-1;  // Last minus one because
 80053be:	89bb      	ldrh	r3, [r7, #12]
 80053c0:	3b01      	subs	r3, #1
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
								    	//
	int oldest_ma_sample= 0;			//
 80053c4:	2300      	movs	r3, #0
 80053c6:	623b      	str	r3, [r7, #32]
	int newest_ma_sample= arma.n_ma-1;  // C arrays start from 0
 80053c8:	89fb      	ldrh	r3, [r7, #14]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	61fb      	str	r3, [r7, #28]

	// Assigning the newest target value
	hctrl->target_buffer[newest_ar_sample]= newest_target;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	601a      	str	r2, [r3, #0]

	// Compute feed-forward input (inversion control)
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	633b      	str	r3, [r7, #48]	; 0x30
 80053e0:	e019      	b.n	8005416 <FEEDFORWARD_InversionControl+0x7c>
		input += arma.AR[newest_ar_sample-i]*hctrl->target_buffer[i];
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	1acb      	subs	r3, r1, r3
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	ed93 7a00 	vldr	s14, [r3]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	edd3 7a00 	vldr	s15, [r3]
 8005400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005404:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800540c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	3301      	adds	r3, #1
 8005414:	633b      	str	r3, [r7, #48]	; 0x30
 8005416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	429a      	cmp	r2, r3
 800541c:	dde1      	ble.n	80053e2 <FEEDFORWARD_InversionControl+0x48>
	// I know inputs until the newest_ma_sample-1
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005422:	e01b      	b.n	800545c <FEEDFORWARD_InversionControl+0xc2>
		input += -arma.MA[newest_ma_sample-j]*hctrl->input_buffer[j];
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	69f9      	ldr	r1, [r7, #28]
 8005428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542a:	1acb      	subs	r3, r1, r3
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	edd3 7a00 	vldr	s15, [r3]
 8005434:	eeb1 7a67 	vneg.f32	s14, s15
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1a      	ldr	r2, [r3, #32]
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	edd3 7a00 	vldr	s15, [r3]
 8005446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800544e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005452:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	3301      	adds	r3, #1
 800545a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	429a      	cmp	r2, r3
 8005462:	dcdf      	bgt.n	8005424 <FEEDFORWARD_InversionControl+0x8a>
	// Last input is computed here
	input /= arma.MA[0];
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	ed93 7a00 	vldr	s14, [r3]
 800546a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800546e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005472:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Saving newest input
	hctrl->input_buffer[newest_ma_sample]= input;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1a      	ldr	r2, [r3, #32]
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005482:	601a      	str	r2, [r3, #0]

	// Updating Buffer for next step
	FEEDFORWARD_BufferUpdate(hctrl);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f808 	bl	800549a <FEEDFORWARD_BufferUpdate>

	return input;
 800548a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548c:	ee07 3a90 	vmov	s15, r3
}
 8005490:	eeb0 0a67 	vmov.f32	s0, s15
 8005494:	373c      	adds	r7, #60	; 0x3c
 8005496:	46bd      	mov	sp, r7
 8005498:	bd90      	pop	{r4, r7, pc}

0800549a <FEEDFORWARD_BufferUpdate>:


void FEEDFORWARD_BufferUpdate(FEEDFORWARD_HandleTypeDef* hctrl){
 800549a:	b490      	push	{r4, r7}
 800549c:	b088      	sub	sp, #32
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f107 0408 	add.w	r4, r7, #8
 80054a8:	3310      	adds	r3, #16
 80054aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Updating current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[arma.n_ar-1-arma.tau];
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054b4:	893b      	ldrh	r3, [r7, #8]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	89b9      	ldrh	r1, [r7, #12]
 80054ba:	1a5b      	subs	r3, r3, r1
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[arma.n_ma-1];
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1a      	ldr	r2, [r3, #32]
 80054ca:	897b      	ldrh	r3, [r7, #10]
 80054cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054d0:	3b01      	subs	r3, #1
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054e0:	893b      	ldrh	r3, [r7, #8]
 80054e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054e6:	3b01      	subs	r3, #1
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	631a      	str	r2, [r3, #48]	; 0x30

	// Then slide buffers ( look, loops go from idx=0 to idx=n-2 )
	for(int i=0; i < arma.n_ar-1; i++)
 80054f2:	2300      	movs	r3, #0
 80054f4:	61fb      	str	r3, [r7, #28]
 80054f6:	e00f      	b.n	8005518 <FEEDFORWARD_BufferUpdate+0x7e>
		hctrl->target_buffer[i]= hctrl->target_buffer[i+1];
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	3301      	adds	r3, #1
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	441a      	add	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	6812      	ldr	r2, [r2, #0]
 8005510:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ar-1; i++)
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	3301      	adds	r3, #1
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	893b      	ldrh	r3, [r7, #8]
 800551a:	3b01      	subs	r3, #1
 800551c:	69fa      	ldr	r2, [r7, #28]
 800551e:	429a      	cmp	r2, r3
 8005520:	dbea      	blt.n	80054f8 <FEEDFORWARD_BufferUpdate+0x5e>
	for(int i=0; i < arma.n_ma-1; i++)
 8005522:	2300      	movs	r3, #0
 8005524:	61bb      	str	r3, [r7, #24]
 8005526:	e00f      	b.n	8005548 <FEEDFORWARD_BufferUpdate+0xae>
		hctrl->input_buffer[i]= hctrl->input_buffer[i+1];
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1a      	ldr	r2, [r3, #32]
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	3301      	adds	r3, #1
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	441a      	add	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a19      	ldr	r1, [r3, #32]
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ma-1; i++)
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	3301      	adds	r3, #1
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	897b      	ldrh	r3, [r7, #10]
 800554a:	3b01      	subs	r3, #1
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	429a      	cmp	r2, r3
 8005550:	dbea      	blt.n	8005528 <FEEDFORWARD_BufferUpdate+0x8e>

}
 8005552:	bf00      	nop
 8005554:	bf00      	nop
 8005556:	3720      	adds	r7, #32
 8005558:	46bd      	mov	sp, r7
 800555a:	bc90      	pop	{r4, r7}
 800555c:	4770      	bx	lr

0800555e <PID_Init>:
 */

#include "my_lib/pid_controller.h"


void PID_Init(PID_HandleTypeDef* hpid){
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]

	// Init parameters
	hpid->P=  hpid->Init.P;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	611a      	str	r2, [r3, #16]
	hpid->I=  hpid->Init.I;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	615a      	str	r2, [r3, #20]
	hpid->D=  hpid->Init.D;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	619a      	str	r2, [r3, #24]
	hpid->Ts= hpid->Init.Ts;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	631a      	str	r2, [r3, #48]	; 0x30

	// Init Input contributes variables
	hpid->u_P= 0;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	61da      	str	r2, [r3, #28]
	hpid->u_I= 0;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	625a      	str	r2, [r3, #36]	; 0x24

	// Init Previous variables
	hpid->u_prev= 0;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <PID_Reset>:



// Reset previous state and contributes variables
void PID_Reset(PID_HandleTypeDef* hpid){
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]

	hpid->u_P= 0;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	61da      	str	r2, [r3, #28]
	hpid->u_I= 0;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	625a      	str	r2, [r3, #36]	; 0x24

	hpid->u_prev= 0;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	62da      	str	r2, [r3, #44]	; 0x2c

}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <PID_Control>:


float PID_Control(PID_HandleTypeDef* hpid, float target, float measure){
 80055f6:	b480      	push	{r7}
 80055f8:	b089      	sub	sp, #36	; 0x24
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	ed87 0a02 	vstr	s0, [r7, #8]
 8005602:	edc7 0a01 	vstr	s1, [r7, #4]

	float e_prev,e_curr, Ts, u;

	// Time step
	Ts= hpid->Ts;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560a:	61fb      	str	r3, [r7, #28]

	// Following error
	e_curr= target-measure;
 800560c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005610:	edd7 7a01 	vldr	s15, [r7, #4]
 8005614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005618:	edc7 7a06 	vstr	s15, [r7, #24]
	e_prev= hpid->e_prev;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	617b      	str	r3, [r7, #20]

	// Proportional
	hpid->u_P= hpid->P*e_curr;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	ed93 7a04 	vldr	s14, [r3, #16]
 8005628:	edd7 7a06 	vldr	s15, [r7, #24]
 800562c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	edc3 7a07 	vstr	s15, [r3, #28]

	// Integral
	hpid->u_I += hpid->I*e_prev*Ts;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	ed93 7a08 	vldr	s14, [r3, #32]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	edd3 6a05 	vldr	s13, [r3, #20]
 8005642:	edd7 7a05 	vldr	s15, [r7, #20]
 8005646:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800564a:	edd7 7a07 	vldr	s15, [r7, #28]
 800564e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	edc3 7a08 	vstr	s15, [r3, #32]

	// Derivative
	hpid->u_D = hpid->D*(e_curr-e_prev)/Ts;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	ed93 7a06 	vldr	s14, [r3, #24]
 8005662:	edd7 6a06 	vldr	s13, [r7, #24]
 8005666:	edd7 7a05 	vldr	s15, [r7, #20]
 800566a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800566e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005672:	ed97 7a07 	vldr	s14, [r7, #28]
 8005676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Control Input
	u= hpid->u_P + hpid->u_I + hpid->u_D;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	ed93 7a07 	vldr	s14, [r3, #28]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	edd3 7a08 	vldr	s15, [r3, #32]
 800568c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800569a:	edc7 7a04 	vstr	s15, [r7, #16]

	// Updating struct
	hpid->u_prev= u;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= e_curr;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	62da      	str	r2, [r3, #44]	; 0x2c

	return u;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	ee07 3a90 	vmov	s15, r3

}
 80056b0:	eeb0 0a67 	vmov.f32	s0, s15
 80056b4:	3724      	adds	r7, #36	; 0x24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80056c8:	4a07      	ldr	r2, [pc, #28]	; (80056e8 <RetargetInit+0x28>)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80056ce:	4b07      	ldr	r3, [pc, #28]	; (80056ec <RetargetInit+0x2c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6898      	ldr	r0, [r3, #8]
 80056d4:	2300      	movs	r3, #0
 80056d6:	2202      	movs	r2, #2
 80056d8:	2100      	movs	r1, #0
 80056da:	f008 fc9b 	bl	800e014 <setvbuf>
}
 80056de:	bf00      	nop
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20007410 	.word	0x20007410
 80056ec:	20000014 	.word	0x20000014

080056f0 <_isatty>:

int _isatty(int fd) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	db04      	blt.n	8005708 <_isatty+0x18>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b02      	cmp	r3, #2
 8005702:	dc01      	bgt.n	8005708 <_isatty+0x18>
    return 1;
 8005704:	2301      	movs	r3, #1
 8005706:	e005      	b.n	8005714 <_isatty+0x24>

  errno = EBADF;
 8005708:	f007 fcf8 	bl	800d0fc <__errno>
 800570c:	4603      	mov	r3, r0
 800570e:	2209      	movs	r2, #9
 8005710:	601a      	str	r2, [r3, #0]
  return 0;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <_write>:

int _write(int fd, char* ptr, int len) {
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d002      	beq.n	8005734 <_write+0x18>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b02      	cmp	r3, #2
 8005732:	d111      	bne.n	8005758 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8005734:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <_write+0x54>)
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	b29a      	uxth	r2, r3
 800573c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	f004 f849 	bl	80097d8 <HAL_UART_Transmit>
 8005746:	4603      	mov	r3, r0
 8005748:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <_write+0x38>
      return len;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	e008      	b.n	8005766 <_write+0x4a>
    else
      return EIO;
 8005754:	2305      	movs	r3, #5
 8005756:	e006      	b.n	8005766 <_write+0x4a>
  }
  errno = EBADF;
 8005758:	f007 fcd0 	bl	800d0fc <__errno>
 800575c:	4603      	mov	r3, r0
 800575e:	2209      	movs	r2, #9
 8005760:	601a      	str	r2, [r3, #0]
  return -1;
 8005762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005766:	4618      	mov	r0, r3
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20007410 	.word	0x20007410

08005774 <_close>:

int _close(int fd) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	db04      	blt.n	800578c <_close+0x18>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b02      	cmp	r3, #2
 8005786:	dc01      	bgt.n	800578c <_close+0x18>
    return 0;
 8005788:	2300      	movs	r3, #0
 800578a:	e006      	b.n	800579a <_close+0x26>

  errno = EBADF;
 800578c:	f007 fcb6 	bl	800d0fc <__errno>
 8005790:	4603      	mov	r3, r0
 8005792:	2209      	movs	r2, #9
 8005794:	601a      	str	r2, [r3, #0]
  return -1;
 8005796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80057ae:	f007 fca5 	bl	800d0fc <__errno>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2209      	movs	r2, #9
 80057b6:	601a      	str	r2, [r3, #0]
  return -1;
 80057b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <_read>:

int _read(int fd, char* ptr, int len) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d110      	bne.n	80057f8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80057d6:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <_read+0x4c>)
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057de:	2201      	movs	r2, #1
 80057e0:	68b9      	ldr	r1, [r7, #8]
 80057e2:	f004 f88b 	bl	80098fc <HAL_UART_Receive>
 80057e6:	4603      	mov	r3, r0
 80057e8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <_read+0x30>
      return 1;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e008      	b.n	8005806 <_read+0x42>
    else
      return EIO;
 80057f4:	2305      	movs	r3, #5
 80057f6:	e006      	b.n	8005806 <_read+0x42>
  }
  errno = EBADF;
 80057f8:	f007 fc80 	bl	800d0fc <__errno>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2209      	movs	r2, #9
 8005800:	601a      	str	r2, [r3, #0]
  return -1;
 8005802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	20007410 	.word	0x20007410

08005814 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	db08      	blt.n	8005836 <_fstat+0x22>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b02      	cmp	r3, #2
 8005828:	dc05      	bgt.n	8005836 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005830:	605a      	str	r2, [r3, #4]
    return 0;
 8005832:	2300      	movs	r3, #0
 8005834:	e005      	b.n	8005842 <_fstat+0x2e>
  }

  errno = EBADF;
 8005836:	f007 fc61 	bl	800d0fc <__errno>
 800583a:	4603      	mov	r3, r0
 800583c:	2209      	movs	r2, #9
 800583e:	601a      	str	r2, [r3, #0]
  return 0;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	0000      	movs	r0, r0
 800584c:	0000      	movs	r0, r0
	...

08005850 <SERVO_Init>:


/*
 * Initialization
 */
void SERVO_Init(SERVO_HandleTypeDef* hservo){
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]

	// Assign timer handler
	hservo->htim = hservo->Init.htim;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	609a      	str	r2, [r3, #8]

	/* Computing prescaler ad autoreload period to obtain an update event with frequency of SERVO_FREQ Hertz */

	uint16_t prescaler=  __MYLIB_GET_TIMER_CLK(hservo->htim)*1/1e6 - 1;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a76      	ldr	r2, [pc, #472]	; (8005a40 <SERVO_Init+0x1f0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d017      	beq.n	800589c <SERVO_Init+0x4c>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a74      	ldr	r2, [pc, #464]	; (8005a44 <SERVO_Init+0x1f4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d011      	beq.n	800589c <SERVO_Init+0x4c>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a72      	ldr	r2, [pc, #456]	; (8005a48 <SERVO_Init+0x1f8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00b      	beq.n	800589c <SERVO_Init+0x4c>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a70      	ldr	r2, [pc, #448]	; (8005a4c <SERVO_Init+0x1fc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d005      	beq.n	800589c <SERVO_Init+0x4c>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a6e      	ldr	r2, [pc, #440]	; (8005a50 <SERVO_Init+0x200>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d114      	bne.n	80058c6 <SERVO_Init+0x76>
 800589c:	4b6d      	ldr	r3, [pc, #436]	; (8005a54 <SERVO_Init+0x204>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d106      	bne.n	80058b6 <SERVO_Init+0x66>
 80058a8:	f001 fb48 	bl	8006f3c <HAL_RCC_GetPCLK2Freq>
 80058ac:	4603      	mov	r3, r0
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fa fe48 	bl	8000544 <__aeabi_ui2d>
 80058b4:	e01b      	b.n	80058ee <SERVO_Init+0x9e>
 80058b6:	f001 fb41 	bl	8006f3c <HAL_RCC_GetPCLK2Freq>
 80058ba:	4603      	mov	r3, r0
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fa fe40 	bl	8000544 <__aeabi_ui2d>
 80058c4:	e013      	b.n	80058ee <SERVO_Init+0x9e>
 80058c6:	4b63      	ldr	r3, [pc, #396]	; (8005a54 <SERVO_Init+0x204>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <SERVO_Init+0x90>
 80058d2:	f001 fb1f 	bl	8006f14 <HAL_RCC_GetPCLK1Freq>
 80058d6:	4603      	mov	r3, r0
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fa fe33 	bl	8000544 <__aeabi_ui2d>
 80058de:	e006      	b.n	80058ee <SERVO_Init+0x9e>
 80058e0:	f001 fb18 	bl	8006f14 <HAL_RCC_GetPCLK1Freq>
 80058e4:	4603      	mov	r3, r0
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fa fe2b 	bl	8000544 <__aeabi_ui2d>
 80058ee:	a352      	add	r3, pc, #328	; (adr r3, 8005a38 <SERVO_Init+0x1e8>)
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f7fa ffca 	bl	800088c <__aeabi_ddiv>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4610      	mov	r0, r2
 80058fe:	4619      	mov	r1, r3
 8005900:	f04f 0200 	mov.w	r2, #0
 8005904:	4b54      	ldr	r3, [pc, #336]	; (8005a58 <SERVO_Init+0x208>)
 8005906:	f7fa fcdf 	bl	80002c8 <__aeabi_dsub>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4610      	mov	r0, r2
 8005910:	4619      	mov	r1, r3
 8005912:	f7fb f969 	bl	8000be8 <__aeabi_d2uiz>
 8005916:	4603      	mov	r3, r0
 8005918:	81fb      	strh	r3, [r7, #14]
	uint16_t autoreload= __MYLIB_GET_TIMER_CLK(hservo->htim)/( (prescaler+1)*SERVO_FREQ ) - 1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a47      	ldr	r2, [pc, #284]	; (8005a40 <SERVO_Init+0x1f0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d017      	beq.n	8005956 <SERVO_Init+0x106>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a45      	ldr	r2, [pc, #276]	; (8005a44 <SERVO_Init+0x1f4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d011      	beq.n	8005956 <SERVO_Init+0x106>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a43      	ldr	r2, [pc, #268]	; (8005a48 <SERVO_Init+0x1f8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00b      	beq.n	8005956 <SERVO_Init+0x106>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a41      	ldr	r2, [pc, #260]	; (8005a4c <SERVO_Init+0x1fc>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d005      	beq.n	8005956 <SERVO_Init+0x106>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a3f      	ldr	r2, [pc, #252]	; (8005a50 <SERVO_Init+0x200>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d10e      	bne.n	8005974 <SERVO_Init+0x124>
 8005956:	4b3f      	ldr	r3, [pc, #252]	; (8005a54 <SERVO_Init+0x204>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d103      	bne.n	800596a <SERVO_Init+0x11a>
 8005962:	f001 faeb 	bl	8006f3c <HAL_RCC_GetPCLK2Freq>
 8005966:	4603      	mov	r3, r0
 8005968:	e012      	b.n	8005990 <SERVO_Init+0x140>
 800596a:	f001 fae7 	bl	8006f3c <HAL_RCC_GetPCLK2Freq>
 800596e:	4603      	mov	r3, r0
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	e00d      	b.n	8005990 <SERVO_Init+0x140>
 8005974:	4b37      	ldr	r3, [pc, #220]	; (8005a54 <SERVO_Init+0x204>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800597c:	2b00      	cmp	r3, #0
 800597e:	d103      	bne.n	8005988 <SERVO_Init+0x138>
 8005980:	f001 fac8 	bl	8006f14 <HAL_RCC_GetPCLK1Freq>
 8005984:	4603      	mov	r3, r0
 8005986:	e003      	b.n	8005990 <SERVO_Init+0x140>
 8005988:	f001 fac4 	bl	8006f14 <HAL_RCC_GetPCLK1Freq>
 800598c:	4603      	mov	r3, r0
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	89fa      	ldrh	r2, [r7, #14]
 8005992:	3201      	adds	r2, #1
 8005994:	2132      	movs	r1, #50	; 0x32
 8005996:	fb01 f202 	mul.w	r2, r1, r2
 800599a:	fbb3 f3f2 	udiv	r3, r3, r2
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	81bb      	strh	r3, [r7, #12]

	// Set counter with computed prescaler and autoreload period
	__HAL_TIM_SET_PRESCALER(hservo->htim, prescaler);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	89fa      	ldrh	r2, [r7, #14]
 80059ac:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(hservo->htim, autoreload);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	89ba      	ldrh	r2, [r7, #12]
 80059b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	89ba      	ldrh	r2, [r7, #12]
 80059be:	60da      	str	r2, [r3, #12]

	// Compute min and max duty beats
	// min =  0  degree
	// max = 180 degree
	hservo->min_duty_beats= (__HAL_TIM_GET_AUTORELOAD(hservo->htim)+1)*SERVO_MIN_PERC/100;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	3301      	adds	r3, #1
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d2:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80059d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059da:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005a5c <SERVO_Init+0x20c>
 80059de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059e6:	ee17 2a90 	vmov	r2, s15
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	611a      	str	r2, [r3, #16]
	hservo->max_duty_beats= (__HAL_TIM_GET_AUTORELOAD(hservo->htim)+1)*SERVO_MAX_PERC/100;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	3301      	adds	r3, #1
 80059f8:	ee07 3a90 	vmov	s15, r3
 80059fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a00:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005a60 <SERVO_Init+0x210>
 8005a04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005a08:	eddf 6a14 	vldr	s13, [pc, #80]	; 8005a5c <SERVO_Init+0x20c>
 8005a0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a14:	ee17 2a90 	vmov	r2, s15
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	615a      	str	r2, [r3, #20]

	HAL_TIM_PWM_Start(hservo->htim, hservo->pwm_channel);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f002 f910 	bl	8007c4c <HAL_TIM_PWM_Start>

}
 8005a2c:	bf00      	nop
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	f3af 8000 	nop.w
 8005a38:	00000000 	.word	0x00000000
 8005a3c:	412e8480 	.word	0x412e8480
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40010400 	.word	0x40010400
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40014400 	.word	0x40014400
 8005a50:	40014800 	.word	0x40014800
 8005a54:	40023800 	.word	0x40023800
 8005a58:	3ff00000 	.word	0x3ff00000
 8005a5c:	42c80000 	.word	0x42c80000
 8005a60:	4151999a 	.word	0x4151999a

08005a64 <SERVO_SetDegree>:
 * Set degree for SERVO (it can move from 0 to 180 degree):
 *
 * num_duty_beats = (max – min)*deg/180 + min
 *
 */
void SERVO_SetDegree(SERVO_HandleTypeDef* hservo, float degree){
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	ed87 0a00 	vstr	s0, [r7]
	int num_beats = (hservo->max_duty_beats - hservo->min_duty_beats)*degree/180 + hservo->min_duty_beats;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	695a      	ldr	r2, [r3, #20]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a82:	edd7 7a00 	vldr	s15, [r7]
 8005a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a8a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8005abc <SERVO_SetDegree+0x58>
 8005a8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	ee07 3a90 	vmov	s15, r3
 8005a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005aa6:	ee17 3a90 	vmov	r3, s15
 8005aaa:	60fb      	str	r3, [r7, #12]
	SERVO_SetBeats(hservo, num_beats);
 8005aac:	68f9      	ldr	r1, [r7, #12]
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f806 	bl	8005ac0 <SERVO_SetBeats>
}
 8005ab4:	bf00      	nop
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	43340000 	.word	0x43340000

08005ac0 <SERVO_SetBeats>:

/*
 * Set duty cycle beats for SERVO
 * 	  num_beats must be between MIN and MAX
 */
void SERVO_SetBeats(SERVO_HandleTypeDef* hservo, int num_beats){
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]

	// Avoiding to set num_beats outside ranges
	if( num_beats < hservo->min_duty_beats )
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	da03      	bge.n	8005adc <SERVO_SetBeats+0x1c>
		num_beats = hservo->min_duty_beats;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	603b      	str	r3, [r7, #0]
 8005ada:	e007      	b.n	8005aec <SERVO_SetBeats+0x2c>
	else
	if( num_beats > hservo->max_duty_beats )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	dd02      	ble.n	8005aec <SERVO_SetBeats+0x2c>
		num_beats = hservo->max_duty_beats;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	603b      	str	r3, [r7, #0]


	// Setting current PWM duty cycle (via CCR: Capture/Compare TIM's Register)
	__HAL_TIM_SET_COMPARE(hservo->htim,hservo->pwm_channel,num_beats);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <SERVO_SetBeats+0x40>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	635a      	str	r2, [r3, #52]	; 0x34

}
 8005afe:	e018      	b.n	8005b32 <SERVO_SetBeats+0x72>
	__HAL_TIM_SET_COMPARE(hservo->htim,hservo->pwm_channel,num_beats);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d105      	bne.n	8005b14 <SERVO_SetBeats+0x54>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005b12:	e00e      	b.n	8005b32 <SERVO_SetBeats+0x72>
	__HAL_TIM_SET_COMPARE(hservo->htim,hservo->pwm_channel,num_beats);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d105      	bne.n	8005b28 <SERVO_SetBeats+0x68>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8005b26:	e004      	b.n	8005b32 <SERVO_SetBeats+0x72>
	__HAL_TIM_SET_COMPARE(hservo->htim,hservo->pwm_channel,num_beats);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6413      	str	r3, [r2, #64]	; 0x40
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <ULTRASONIC_Init>:

// Global index associated with each sensor
int8_t glbl_idx= 0;


ULTRASONIC_StatusTypeDef ULTRASONIC_Init(ULTRASONIC_HandleTypeDef* hultrsnc){
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]

	// Check if it's possible to initialize a new sensor
	if( glbl_idx < MAX_SENSORS )
 8005b48:	4b5d      	ldr	r3, [pc, #372]	; (8005cc0 <ULTRASONIC_Init+0x180>)
 8005b4a:	f993 3000 	ldrsb.w	r3, [r3]
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	dc41      	bgt.n	8005bd6 <ULTRASONIC_Init+0x96>
		// Assign sensor index and increment global index
		hultrsnc->sensor_idx= glbl_idx++;
 8005b52:	4b5b      	ldr	r3, [pc, #364]	; (8005cc0 <ULTRASONIC_Init+0x180>)
 8005b54:	f993 2000 	ldrsb.w	r2, [r3]
 8005b58:	b2d3      	uxtb	r3, r2
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	b259      	sxtb	r1, r3
 8005b60:	4b57      	ldr	r3, [pc, #348]	; (8005cc0 <ULTRASONIC_Init+0x180>)
 8005b62:	7019      	strb	r1, [r3, #0]
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	else
		// Return exception
		return ULTRASONIC_ERROR;

	// Init fields
	hultrsnc->htim=		  		      hultrsnc->Init.htim;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	61da      	str	r2, [r3, #28]
	hultrsnc->io.trig_GPIOx= 		  hultrsnc->Init.io_trig_GPIOx;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	629a      	str	r2, [r3, #40]	; 0x28
	hultrsnc->io.trig_Pin=  		  hultrsnc->Init.io_trig_Pin;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	62da      	str	r2, [r3, #44]	; 0x2c
	hultrsnc->io.echo_GPIOx= 		  hultrsnc->Init.io_echo_GPIOx;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	631a      	str	r2, [r3, #48]	; 0x30
	hultrsnc->io.echo_Pin=  		  hultrsnc->Init.io_echo_Pin;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	695a      	ldr	r2, [r3, #20]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	635a      	str	r2, [r3, #52]	; 0x34
	hultrsnc->io.echo_IC_tim_channel= hultrsnc->Init.io_echo_IC_tim_channel;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699a      	ldr	r2, [r3, #24]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	639a      	str	r2, [r3, #56]	; 0x38
	uint16_t n=          			  hultrsnc->Init.history_lenght;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	889b      	ldrh	r3, [r3, #4]
 8005ba0:	81fb      	strh	r3, [r7, #14]

	// Allocating history array
	hultrsnc->distance_history= (float*)calloc(n,sizeof(float));
 8005ba2:	89fb      	ldrh	r3, [r7, #14]
 8005ba4:	2104      	movs	r1, #4
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f007 faa0 	bl	800d0ec <calloc>
 8005bac:	4603      	mov	r3, r0
 8005bae:	461a      	mov	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	625a      	str	r2, [r3, #36]	; 0x24

	// Assigning timer callback
	hultrsnc->htim->PeriodElapsedCallback= ULTRASONIC_Timeout_Callback;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	4a42      	ldr	r2, [pc, #264]	; (8005cc4 <ULTRASONIC_Init+0x184>)
 8005bba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	hultrsnc->htim->IC_CaptureCallback=    ULTRASONIC_IC_Callback;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	4a41      	ldr	r2, [pc, #260]	; (8005cc8 <ULTRASONIC_Init+0x188>)
 8005bc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	// Computing prescaler to obtain a timer with frequency of 1MHz
	uint32_t prescaler= __MYLIB_GET_TIMER_CLK(hultrsnc->htim)/1e6 - 1;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a3f      	ldr	r2, [pc, #252]	; (8005ccc <ULTRASONIC_Init+0x18c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d01b      	beq.n	8005c0c <ULTRASONIC_Init+0xcc>
 8005bd4:	e002      	b.n	8005bdc <ULTRASONIC_Init+0x9c>
		return ULTRASONIC_ERROR;
 8005bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bda:	e067      	b.n	8005cac <ULTRASONIC_Init+0x16c>
	uint32_t prescaler= __MYLIB_GET_TIMER_CLK(hultrsnc->htim)/1e6 - 1;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a3b      	ldr	r2, [pc, #236]	; (8005cd0 <ULTRASONIC_Init+0x190>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d011      	beq.n	8005c0c <ULTRASONIC_Init+0xcc>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a39      	ldr	r2, [pc, #228]	; (8005cd4 <ULTRASONIC_Init+0x194>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00b      	beq.n	8005c0c <ULTRASONIC_Init+0xcc>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a37      	ldr	r2, [pc, #220]	; (8005cd8 <ULTRASONIC_Init+0x198>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d005      	beq.n	8005c0c <ULTRASONIC_Init+0xcc>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a35      	ldr	r2, [pc, #212]	; (8005cdc <ULTRASONIC_Init+0x19c>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d114      	bne.n	8005c36 <ULTRASONIC_Init+0xf6>
 8005c0c:	4b34      	ldr	r3, [pc, #208]	; (8005ce0 <ULTRASONIC_Init+0x1a0>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <ULTRASONIC_Init+0xe6>
 8005c18:	f001 f990 	bl	8006f3c <HAL_RCC_GetPCLK2Freq>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fa fc90 	bl	8000544 <__aeabi_ui2d>
 8005c24:	e01b      	b.n	8005c5e <ULTRASONIC_Init+0x11e>
 8005c26:	f001 f989 	bl	8006f3c <HAL_RCC_GetPCLK2Freq>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fa fc88 	bl	8000544 <__aeabi_ui2d>
 8005c34:	e013      	b.n	8005c5e <ULTRASONIC_Init+0x11e>
 8005c36:	4b2a      	ldr	r3, [pc, #168]	; (8005ce0 <ULTRASONIC_Init+0x1a0>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <ULTRASONIC_Init+0x110>
 8005c42:	f001 f967 	bl	8006f14 <HAL_RCC_GetPCLK1Freq>
 8005c46:	4603      	mov	r3, r0
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fa fc7b 	bl	8000544 <__aeabi_ui2d>
 8005c4e:	e006      	b.n	8005c5e <ULTRASONIC_Init+0x11e>
 8005c50:	f001 f960 	bl	8006f14 <HAL_RCC_GetPCLK1Freq>
 8005c54:	4603      	mov	r3, r0
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fa fc73 	bl	8000544 <__aeabi_ui2d>
 8005c5e:	a316      	add	r3, pc, #88	; (adr r3, 8005cb8 <ULTRASONIC_Init+0x178>)
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f7fa fe12 	bl	800088c <__aeabi_ddiv>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	4619      	mov	r1, r3
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	4b1b      	ldr	r3, [pc, #108]	; (8005ce4 <ULTRASONIC_Init+0x1a4>)
 8005c76:	f7fa fb27 	bl	80002c8 <__aeabi_dsub>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4610      	mov	r0, r2
 8005c80:	4619      	mov	r1, r3
 8005c82:	f7fa ffb1 	bl	8000be8 <__aeabi_d2uiz>
 8005c86:	4603      	mov	r3, r0
 8005c88:	60bb      	str	r3, [r7, #8]

	// Set counter with 1MHz frequency (period of one microsecond)
	__HAL_TIM_SET_PRESCALER(hultrsnc->htim,prescaler);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	629a      	str	r2, [r3, #40]	; 0x28

	// Set counter autoreload period (is the maximum microsecond echo time allowed by sensor (11662),
	// plus a small margin )
	__HAL_TIM_SET_AUTORELOAD(hultrsnc->htim,11662+1000);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f243 1276 	movw	r2, #12662	; 0x3176
 8005c9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	f243 1276 	movw	r2, #12662	; 0x3176
 8005ca8:	60da      	str	r2, [r3, #12]

	return ULTRASONIC_OK;
 8005caa:	2300      	movs	r3, #0

}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	f3af 8000 	nop.w
 8005cb8:	00000000 	.word	0x00000000
 8005cbc:	412e8480 	.word	0x412e8480
 8005cc0:	20000219 	.word	0x20000219
 8005cc4:	08005f59 	.word	0x08005f59
 8005cc8:	08005f05 	.word	0x08005f05
 8005ccc:	40010000 	.word	0x40010000
 8005cd0:	40010400 	.word	0x40010400
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	40014400 	.word	0x40014400
 8005cdc:	40014800 	.word	0x40014800
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	3ff00000 	.word	0x3ff00000

08005ce8 <ULTRASONIC_CaptureMeasure>:
	free(hultrsnc->distance_history);

}


ULTRASONIC_StatusTypeDef ULTRASONIC_CaptureMeasure(ULTRASONIC_HandleTypeDef* hultrsnc){
 8005ce8:	b5b0      	push	{r4, r5, r7, lr}
 8005cea:	b08c      	sub	sp, #48	; 0x30
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]

	TIM_HandleTypeDef* htim= hultrsnc->htim;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	62fb      	str	r3, [r7, #44]	; 0x2c

	ULTRASONIC_IO_TypeDef io= hultrsnc->io;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f107 040c 	add.w	r4, r7, #12
 8005cfc:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8005d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	6023      	str	r3, [r4, #0]

	uint32_t echo_time = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Starting Ultrasonic Sensor measure */

	// Start Timer
	HAL_TIM_Base_Start(htim);
 8005d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d0e:	f001 fe07 	bl	8007920 <HAL_TIM_Base_Start>

	// Pull TRIG pin low for at least 2 us
	HAL_GPIO_WritePin(io.trig_GPIOx, io.trig_Pin, GPIO_PIN_RESET);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	b291      	uxth	r1, r2
 8005d18:	2200      	movs	r2, #0
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 ffd4 	bl	8006cc8 <HAL_GPIO_WritePin>
	ULTRASONIC_Delay_us(hultrsnc, 2);
 8005d20:	2102      	movs	r1, #2
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f8d2 	bl	8005ecc <ULTRASONIC_Delay_us>

	// Keep TRIG pin High for 10 us to start sensor
	HAL_GPIO_WritePin(io.trig_GPIOx, io.trig_Pin, GPIO_PIN_SET);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	b291      	uxth	r1, r2
 8005d2e:	2201      	movs	r2, #1
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 ffc9 	bl	8006cc8 <HAL_GPIO_WritePin>
	ULTRASONIC_Delay_us(hultrsnc, 10);
 8005d36:	210a      	movs	r1, #10
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f8c7 	bl	8005ecc <ULTRASONIC_Delay_us>

	// Then keep low
	HAL_GPIO_WritePin(io.trig_GPIOx, io.trig_Pin, GPIO_PIN_RESET);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	b291      	uxth	r1, r2
 8005d44:	2200      	movs	r2, #0
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 ffbe 	bl	8006cc8 <HAL_GPIO_WritePin>

	// Stop Timer
	HAL_TIM_Base_Stop(htim);
 8005d4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d4e:	f001 fe4f 	bl	80079f0 <HAL_TIM_Base_Stop>

	/* Measure time for which the ECHO pin is high */

	// Index of current sensor
	uint8_t idx= hultrsnc->sensor_idx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Reset input_capture flag
	flag[idx].input_capture= false;
 8005d5c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005d60:	4958      	ldr	r1, [pc, #352]	; (8005ec4 <ULTRASONIC_CaptureMeasure+0x1dc>)
 8005d62:	4613      	mov	r3, r2
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	4413      	add	r3, r2
 8005d68:	440b      	add	r3, r1
 8005d6a:	3302      	adds	r3, #2
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]
	flag[idx].timeout= false;
 8005d70:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005d74:	4953      	ldr	r1, [pc, #332]	; (8005ec4 <ULTRASONIC_CaptureMeasure+0x1dc>)
 8005d76:	4613      	mov	r3, r2
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	4413      	add	r3, r2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	3301      	adds	r3, #1
 8005d80:	2200      	movs	r2, #0
 8005d82:	701a      	strb	r2, [r3, #0]

	// Start period elapsed interrupt to handle timeout events
	HAL_TIM_Base_Start_IT(htim);
 8005d84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d86:	f001 fe5b 	bl	8007a40 <HAL_TIM_Base_Start_IT>

	// Enabling current callback flag
	flag[idx].callback_enable= true;
 8005d8a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005d8e:	494d      	ldr	r1, [pc, #308]	; (8005ec4 <ULTRASONIC_CaptureMeasure+0x1dc>)
 8005d90:	4613      	mov	r3, r2
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	4413      	add	r3, r2
 8005d96:	440b      	add	r3, r1
 8005d98:	2201      	movs	r2, #1
 8005d9a:	701a      	strb	r2, [r3, #0]

	// Wait for the ECHO pin to go high
	while( !HAL_GPIO_ReadPin(io.echo_GPIOx, io.echo_Pin) && !flag[idx].timeout )
 8005d9c:	e000      	b.n	8005da0 <ULTRASONIC_CaptureMeasure+0xb8>
		__NOP();
 8005d9e:	bf00      	nop
	while( !HAL_GPIO_ReadPin(io.echo_GPIOx, io.echo_Pin) && !flag[idx].timeout )
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	b292      	uxth	r2, r2
 8005da6:	4611      	mov	r1, r2
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 ff75 	bl	8006c98 <HAL_GPIO_ReadPin>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10e      	bne.n	8005dd2 <ULTRASONIC_CaptureMeasure+0xea>
 8005db4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005db8:	4942      	ldr	r1, [pc, #264]	; (8005ec4 <ULTRASONIC_CaptureMeasure+0x1dc>)
 8005dba:	4613      	mov	r3, r2
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	4413      	add	r3, r2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	f083 0301 	eor.w	r3, r3, #1
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e5      	bne.n	8005d9e <ULTRASONIC_CaptureMeasure+0xb6>

	// Reset counter
	__HAL_TIM_SET_COUNTER(htim, 0);
 8005dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	625a      	str	r2, [r3, #36]	; 0x24

	// Start input capture interrupt
	HAL_TIM_IC_Start_IT(htim, io.echo_IC_tim_channel);
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005de0:	f002 f862 	bl	8007ea8 <HAL_TIM_IC_Start_IT>

	// Wait for capture input interrupt
	while ( !(flag[idx].input_capture) && !flag[idx].timeout )
 8005de4:	e000      	b.n	8005de8 <ULTRASONIC_CaptureMeasure+0x100>
			__NOP();
 8005de6:	bf00      	nop
	while ( !(flag[idx].input_capture) && !flag[idx].timeout )
 8005de8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005dec:	4935      	ldr	r1, [pc, #212]	; (8005ec4 <ULTRASONIC_CaptureMeasure+0x1dc>)
 8005dee:	4613      	mov	r3, r2
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	4413      	add	r3, r2
 8005df4:	440b      	add	r3, r1
 8005df6:	3302      	adds	r3, #2
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f083 0301 	eor.w	r3, r3, #1
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00e      	beq.n	8005e24 <ULTRASONIC_CaptureMeasure+0x13c>
 8005e06:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005e0a:	492e      	ldr	r1, [pc, #184]	; (8005ec4 <ULTRASONIC_CaptureMeasure+0x1dc>)
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	4413      	add	r3, r2
 8005e12:	440b      	add	r3, r1
 8005e14:	3301      	adds	r3, #1
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	f083 0301 	eor.w	r3, r3, #1
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e0      	bne.n	8005de6 <ULTRASONIC_CaptureMeasure+0xfe>

	// Stop IC interruot
	HAL_TIM_IC_Stop_IT(htim, io.echo_IC_tim_channel);
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4619      	mov	r1, r3
 8005e28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e2a:	f002 f965 	bl	80080f8 <HAL_TIM_IC_Stop_IT>

	// Stop Base interrupt
	HAL_TIM_Base_Stop_IT(htim);
 8005e2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e30:	f001 fe76 	bl	8007b20 <HAL_TIM_Base_Stop_IT>

	// Disabling current callback flag
	flag[idx].callback_enable= false;
 8005e34:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005e38:	4922      	ldr	r1, [pc, #136]	; (8005ec4 <ULTRASONIC_CaptureMeasure+0x1dc>)
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	4413      	add	r3, r2
 8005e40:	440b      	add	r3, r1
 8005e42:	2200      	movs	r2, #0
 8005e44:	701a      	strb	r2, [r3, #0]

	// Measured Time
	if( flag[idx].timeout )
 8005e46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005e4a:	491e      	ldr	r1, [pc, #120]	; (8005ec4 <ULTRASONIC_CaptureMeasure+0x1dc>)
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	4413      	add	r3, r2
 8005e52:	440b      	add	r3, r1
 8005e54:	3301      	adds	r3, #1
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <ULTRASONIC_CaptureMeasure+0x17c>
		// If timeout occurred return a sensor error
		return ULTRASONIC_ERROR;
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e62:	e02b      	b.n	8005ebc <ULTRASONIC_CaptureMeasure+0x1d4>
	else
		// Else get the measured time from timer Compare Register
		echo_time= __HAL_TIM_GET_COMPARE(htim, io.echo_IC_tim_channel);
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d103      	bne.n	8005e72 <ULTRASONIC_CaptureMeasure+0x18a>
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e70:	e010      	b.n	8005e94 <ULTRASONIC_CaptureMeasure+0x1ac>
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d103      	bne.n	8005e80 <ULTRASONIC_CaptureMeasure+0x198>
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	e009      	b.n	8005e94 <ULTRASONIC_CaptureMeasure+0x1ac>
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	2b08      	cmp	r3, #8
 8005e84:	d103      	bne.n	8005e8e <ULTRASONIC_CaptureMeasure+0x1a6>
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8c:	e002      	b.n	8005e94 <ULTRASONIC_CaptureMeasure+0x1ac>
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	62bb      	str	r3, [r7, #40]	; 0x28


	// Computing distance in cm (sound speed on air is about 0.0343 cm/us, us := microseconds)
	float distance  = (float)echo_time * (float)(0.0343)/2;
 8005e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e98:	ee07 3a90 	vmov	s15, r3
 8005e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005ec8 <ULTRASONIC_CaptureMeasure+0x1e0>
 8005ea4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ea8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005eac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005eb0:	edc7 7a08 	vstr	s15, [r7, #32]

	// Saving current distance
	hultrsnc->distance= distance;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a3a      	ldr	r2, [r7, #32]
 8005eb8:	621a      	str	r2, [r3, #32]

	return ULTRASONIC_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3730      	adds	r7, #48	; 0x30
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ec4:	20007414 	.word	0x20007414
 8005ec8:	3d0c7e28 	.word	0x3d0c7e28

08005ecc <ULTRASONIC_Delay_us>:


void ULTRASONIC_Delay_us(ULTRASONIC_HandleTypeDef* hultrsnc, uint16_t us){
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	807b      	strh	r3, [r7, #2]

	TIM_HandleTypeDef* htim= hultrsnc->htim;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	60fb      	str	r3, [r7, #12]

	// Reset Counter
	__HAL_TIM_SET_COUNTER(htim, 0);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	625a      	str	r2, [r3, #36]	; 0x24

	// Wait until timer reach target delay (counter frequency is 1Mhz, so 1us every time step)
	while ((__HAL_TIM_GET_COUNTER(htim)) < us)
 8005ee6:	bf00      	nop
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eee:	887b      	ldrh	r3, [r7, #2]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d3f9      	bcc.n	8005ee8 <ULTRASONIC_Delay_us+0x1c>
		;

}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <ULTRASONIC_IC_Callback>:


void ULTRASONIC_IC_Callback(TIM_HandleTypeDef* htim){
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]

	// Checking which sensor is enabled
	for(int idx= 0; idx<MAX_SENSORS; idx++)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	e015      	b.n	8005f3e <ULTRASONIC_IC_Callback+0x3a>
		if( flag[idx].callback_enable )
 8005f12:	4910      	ldr	r1, [pc, #64]	; (8005f54 <ULTRASONIC_IC_Callback+0x50>)
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4613      	mov	r3, r2
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	4413      	add	r3, r2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d008      	beq.n	8005f38 <ULTRASONIC_IC_Callback+0x34>
			flag[idx].input_capture= true;
 8005f26:	490b      	ldr	r1, [pc, #44]	; (8005f54 <ULTRASONIC_IC_Callback+0x50>)
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	4413      	add	r3, r2
 8005f30:	440b      	add	r3, r1
 8005f32:	3302      	adds	r3, #2
 8005f34:	2201      	movs	r2, #1
 8005f36:	701a      	strb	r2, [r3, #0]
	for(int idx= 0; idx<MAX_SENSORS; idx++)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b03      	cmp	r3, #3
 8005f42:	dde6      	ble.n	8005f12 <ULTRASONIC_IC_Callback+0xe>

}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20007414 	.word	0x20007414

08005f58 <ULTRASONIC_Timeout_Callback>:

void ULTRASONIC_Timeout_Callback(TIM_HandleTypeDef* htim){
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]

	// Checking which sensor is enabled
	for(int idx= 0; idx<MAX_SENSORS; idx++)
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e015      	b.n	8005f92 <ULTRASONIC_Timeout_Callback+0x3a>
		if( flag[idx].callback_enable )
 8005f66:	4910      	ldr	r1, [pc, #64]	; (8005fa8 <ULTRASONIC_Timeout_Callback+0x50>)
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	4413      	add	r3, r2
 8005f70:	440b      	add	r3, r1
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d008      	beq.n	8005f8c <ULTRASONIC_Timeout_Callback+0x34>
			flag[idx].timeout= true;
 8005f7a:	490b      	ldr	r1, [pc, #44]	; (8005fa8 <ULTRASONIC_Timeout_Callback+0x50>)
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	4413      	add	r3, r2
 8005f84:	440b      	add	r3, r1
 8005f86:	3301      	adds	r3, #1
 8005f88:	2201      	movs	r2, #1
 8005f8a:	701a      	strb	r2, [r3, #0]
	for(int idx= 0; idx<MAX_SENSORS; idx++)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	dde6      	ble.n	8005f66 <ULTRASONIC_Timeout_Callback+0xe>

}
 8005f98:	bf00      	nop
 8005f9a:	bf00      	nop
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	20007414 	.word	0x20007414

08005fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005fe4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005fb0:	480d      	ldr	r0, [pc, #52]	; (8005fe8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005fb2:	490e      	ldr	r1, [pc, #56]	; (8005fec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005fb4:	4a0e      	ldr	r2, [pc, #56]	; (8005ff0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005fb8:	e002      	b.n	8005fc0 <LoopCopyDataInit>

08005fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005fbe:	3304      	adds	r3, #4

08005fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fc4:	d3f9      	bcc.n	8005fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005fc6:	4a0b      	ldr	r2, [pc, #44]	; (8005ff4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005fc8:	4c0b      	ldr	r4, [pc, #44]	; (8005ff8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fcc:	e001      	b.n	8005fd2 <LoopFillZerobss>

08005fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fd0:	3204      	adds	r2, #4

08005fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fd4:	d3fb      	bcc.n	8005fce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005fd6:	f7fd f8ef 	bl	80031b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005fda:	f007 f895 	bl	800d108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005fde:	f7fb f825 	bl	800102c <main>
  bx  lr    
 8005fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005fe4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fec:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8005ff0:	08014358 	.word	0x08014358
  ldr r2, =_sbss
 8005ff4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8005ff8:	20007474 	.word	0x20007474

08005ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ffc:	e7fe      	b.n	8005ffc <ADC_IRQHandler>
	...

08006000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006004:	4b0e      	ldr	r3, [pc, #56]	; (8006040 <HAL_Init+0x40>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a0d      	ldr	r2, [pc, #52]	; (8006040 <HAL_Init+0x40>)
 800600a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800600e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006010:	4b0b      	ldr	r3, [pc, #44]	; (8006040 <HAL_Init+0x40>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a0a      	ldr	r2, [pc, #40]	; (8006040 <HAL_Init+0x40>)
 8006016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800601a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800601c:	4b08      	ldr	r3, [pc, #32]	; (8006040 <HAL_Init+0x40>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a07      	ldr	r2, [pc, #28]	; (8006040 <HAL_Init+0x40>)
 8006022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006028:	2003      	movs	r0, #3
 800602a:	f000 f8fc 	bl	8006226 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800602e:	2000      	movs	r0, #0
 8006030:	f7fc fff0 	bl	8003014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006034:	f7fc fd90 	bl	8002b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	40023c00 	.word	0x40023c00

08006044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006048:	4b06      	ldr	r3, [pc, #24]	; (8006064 <HAL_IncTick+0x20>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	4b06      	ldr	r3, [pc, #24]	; (8006068 <HAL_IncTick+0x24>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4413      	add	r3, r2
 8006054:	4a04      	ldr	r2, [pc, #16]	; (8006068 <HAL_IncTick+0x24>)
 8006056:	6013      	str	r3, [r2, #0]
}
 8006058:	bf00      	nop
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	2000000c 	.word	0x2000000c
 8006068:	20007420 	.word	0x20007420

0800606c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  return uwTick;
 8006070:	4b03      	ldr	r3, [pc, #12]	; (8006080 <HAL_GetTick+0x14>)
 8006072:	681b      	ldr	r3, [r3, #0]
}
 8006074:	4618      	mov	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20007420 	.word	0x20007420

08006084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800608c:	f7ff ffee 	bl	800606c <HAL_GetTick>
 8006090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800609c:	d005      	beq.n	80060aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800609e:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <HAL_Delay+0x44>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80060aa:	bf00      	nop
 80060ac:	f7ff ffde 	bl	800606c <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d8f7      	bhi.n	80060ac <HAL_Delay+0x28>
  {
  }
}
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	2000000c 	.word	0x2000000c

080060cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060dc:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <__NVIC_SetPriorityGrouping+0x44>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060e8:	4013      	ands	r3, r2
 80060ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060fe:	4a04      	ldr	r2, [pc, #16]	; (8006110 <__NVIC_SetPriorityGrouping+0x44>)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	60d3      	str	r3, [r2, #12]
}
 8006104:	bf00      	nop
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	e000ed00 	.word	0xe000ed00

08006114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006118:	4b04      	ldr	r3, [pc, #16]	; (800612c <__NVIC_GetPriorityGrouping+0x18>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	0a1b      	lsrs	r3, r3, #8
 800611e:	f003 0307 	and.w	r3, r3, #7
}
 8006122:	4618      	mov	r0, r3
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	e000ed00 	.word	0xe000ed00

08006130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	4603      	mov	r3, r0
 8006138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800613a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800613e:	2b00      	cmp	r3, #0
 8006140:	db0b      	blt.n	800615a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	f003 021f 	and.w	r2, r3, #31
 8006148:	4907      	ldr	r1, [pc, #28]	; (8006168 <__NVIC_EnableIRQ+0x38>)
 800614a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	2001      	movs	r0, #1
 8006152:	fa00 f202 	lsl.w	r2, r0, r2
 8006156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	e000e100 	.word	0xe000e100

0800616c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	4603      	mov	r3, r0
 8006174:	6039      	str	r1, [r7, #0]
 8006176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800617c:	2b00      	cmp	r3, #0
 800617e:	db0a      	blt.n	8006196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	b2da      	uxtb	r2, r3
 8006184:	490c      	ldr	r1, [pc, #48]	; (80061b8 <__NVIC_SetPriority+0x4c>)
 8006186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800618a:	0112      	lsls	r2, r2, #4
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	440b      	add	r3, r1
 8006190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006194:	e00a      	b.n	80061ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	4908      	ldr	r1, [pc, #32]	; (80061bc <__NVIC_SetPriority+0x50>)
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	3b04      	subs	r3, #4
 80061a4:	0112      	lsls	r2, r2, #4
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	440b      	add	r3, r1
 80061aa:	761a      	strb	r2, [r3, #24]
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	e000e100 	.word	0xe000e100
 80061bc:	e000ed00 	.word	0xe000ed00

080061c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b089      	sub	sp, #36	; 0x24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	f1c3 0307 	rsb	r3, r3, #7
 80061da:	2b04      	cmp	r3, #4
 80061dc:	bf28      	it	cs
 80061de:	2304      	movcs	r3, #4
 80061e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	3304      	adds	r3, #4
 80061e6:	2b06      	cmp	r3, #6
 80061e8:	d902      	bls.n	80061f0 <NVIC_EncodePriority+0x30>
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	3b03      	subs	r3, #3
 80061ee:	e000      	b.n	80061f2 <NVIC_EncodePriority+0x32>
 80061f0:	2300      	movs	r3, #0
 80061f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	fa02 f303 	lsl.w	r3, r2, r3
 80061fe:	43da      	mvns	r2, r3
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	401a      	ands	r2, r3
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006208:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	fa01 f303 	lsl.w	r3, r1, r3
 8006212:	43d9      	mvns	r1, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006218:	4313      	orrs	r3, r2
         );
}
 800621a:	4618      	mov	r0, r3
 800621c:	3724      	adds	r7, #36	; 0x24
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b082      	sub	sp, #8
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7ff ff4c 	bl	80060cc <__NVIC_SetPriorityGrouping>
}
 8006234:	bf00      	nop
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	4603      	mov	r3, r0
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
 8006248:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800624a:	2300      	movs	r3, #0
 800624c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800624e:	f7ff ff61 	bl	8006114 <__NVIC_GetPriorityGrouping>
 8006252:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	6978      	ldr	r0, [r7, #20]
 800625a:	f7ff ffb1 	bl	80061c0 <NVIC_EncodePriority>
 800625e:	4602      	mov	r2, r0
 8006260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006264:	4611      	mov	r1, r2
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff ff80 	bl	800616c <__NVIC_SetPriority>
}
 800626c:	bf00      	nop
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	4603      	mov	r3, r0
 800627c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800627e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff ff54 	bl	8006130 <__NVIC_EnableIRQ>
}
 8006288:	bf00      	nop
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800629c:	f7ff fee6 	bl	800606c <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e099      	b.n	80063e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0201 	bic.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062cc:	e00f      	b.n	80062ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062ce:	f7ff fecd 	bl	800606c <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b05      	cmp	r3, #5
 80062da:	d908      	bls.n	80062ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2220      	movs	r2, #32
 80062e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2203      	movs	r2, #3
 80062e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e078      	b.n	80063e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e8      	bne.n	80062ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	4b38      	ldr	r3, [pc, #224]	; (80063e8 <HAL_DMA_Init+0x158>)
 8006308:	4013      	ands	r3, r2
 800630a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800631a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	2b04      	cmp	r3, #4
 8006346:	d107      	bne.n	8006358 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	4313      	orrs	r3, r2
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f023 0307 	bic.w	r3, r3, #7
 800636e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	2b04      	cmp	r3, #4
 8006380:	d117      	bne.n	80063b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	4313      	orrs	r3, r2
 800638a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00e      	beq.n	80063b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fa6f 	bl	8006878 <DMA_CheckFifoParam>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d008      	beq.n	80063b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2240      	movs	r2, #64	; 0x40
 80063a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80063ae:	2301      	movs	r3, #1
 80063b0:	e016      	b.n	80063e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fa26 	bl	800680c <DMA_CalcBaseAndBitshift>
 80063c0:	4603      	mov	r3, r0
 80063c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c8:	223f      	movs	r2, #63	; 0x3f
 80063ca:	409a      	lsls	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	f010803f 	.word	0xf010803f

080063ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006402:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <HAL_DMA_Start_IT+0x26>
 800640e:	2302      	movs	r3, #2
 8006410:	e040      	b.n	8006494 <HAL_DMA_Start_IT+0xa8>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b01      	cmp	r3, #1
 8006424:	d12f      	bne.n	8006486 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2202      	movs	r2, #2
 800642a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 f9b8 	bl	80067b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006444:	223f      	movs	r2, #63	; 0x3f
 8006446:	409a      	lsls	r2, r3
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0216 	orr.w	r2, r2, #22
 800645a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006460:	2b00      	cmp	r3, #0
 8006462:	d007      	beq.n	8006474 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0208 	orr.w	r2, r2, #8
 8006472:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	e005      	b.n	8006492 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800648e:	2302      	movs	r3, #2
 8006490:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006492:	7dfb      	ldrb	r3, [r7, #23]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80064a8:	4b92      	ldr	r3, [pc, #584]	; (80066f4 <HAL_DMA_IRQHandler+0x258>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a92      	ldr	r2, [pc, #584]	; (80066f8 <HAL_DMA_IRQHandler+0x25c>)
 80064ae:	fba2 2303 	umull	r2, r3, r2, r3
 80064b2:	0a9b      	lsrs	r3, r3, #10
 80064b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c6:	2208      	movs	r2, #8
 80064c8:	409a      	lsls	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4013      	ands	r3, r2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d01a      	beq.n	8006508 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d013      	beq.n	8006508 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0204 	bic.w	r2, r2, #4
 80064ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f4:	2208      	movs	r2, #8
 80064f6:	409a      	lsls	r2, r3
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006500:	f043 0201 	orr.w	r2, r3, #1
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650c:	2201      	movs	r2, #1
 800650e:	409a      	lsls	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4013      	ands	r3, r2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d012      	beq.n	800653e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00b      	beq.n	800653e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652a:	2201      	movs	r2, #1
 800652c:	409a      	lsls	r2, r3
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006536:	f043 0202 	orr.w	r2, r3, #2
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006542:	2204      	movs	r2, #4
 8006544:	409a      	lsls	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4013      	ands	r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d012      	beq.n	8006574 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00b      	beq.n	8006574 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006560:	2204      	movs	r2, #4
 8006562:	409a      	lsls	r2, r3
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656c:	f043 0204 	orr.w	r2, r3, #4
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006578:	2210      	movs	r2, #16
 800657a:	409a      	lsls	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4013      	ands	r3, r2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d043      	beq.n	800660c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d03c      	beq.n	800660c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006596:	2210      	movs	r2, #16
 8006598:	409a      	lsls	r2, r3
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d018      	beq.n	80065de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d108      	bne.n	80065cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d024      	beq.n	800660c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	4798      	blx	r3
 80065ca:	e01f      	b.n	800660c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01b      	beq.n	800660c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
 80065dc:	e016      	b.n	800660c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d107      	bne.n	80065fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0208 	bic.w	r2, r2, #8
 80065fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006610:	2220      	movs	r2, #32
 8006612:	409a      	lsls	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4013      	ands	r3, r2
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 808e 	beq.w	800673a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 8086 	beq.w	800673a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006632:	2220      	movs	r2, #32
 8006634:	409a      	lsls	r2, r3
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b05      	cmp	r3, #5
 8006644:	d136      	bne.n	80066b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0216 	bic.w	r2, r2, #22
 8006654:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695a      	ldr	r2, [r3, #20]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006664:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d103      	bne.n	8006676 <HAL_DMA_IRQHandler+0x1da>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006672:	2b00      	cmp	r3, #0
 8006674:	d007      	beq.n	8006686 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0208 	bic.w	r2, r2, #8
 8006684:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668a:	223f      	movs	r2, #63	; 0x3f
 800668c:	409a      	lsls	r2, r3
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d07d      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
        }
        return;
 80066b2:	e078      	b.n	80067a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d01c      	beq.n	80066fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d108      	bne.n	80066e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d030      	beq.n	800673a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	4798      	blx	r3
 80066e0:	e02b      	b.n	800673a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d027      	beq.n	800673a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
 80066f2:	e022      	b.n	800673a <HAL_DMA_IRQHandler+0x29e>
 80066f4:	20000004 	.word	0x20000004
 80066f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10f      	bne.n	800672a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0210 	bic.w	r2, r2, #16
 8006718:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673e:	2b00      	cmp	r3, #0
 8006740:	d032      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d022      	beq.n	8006794 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2205      	movs	r2, #5
 8006752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0201 	bic.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	3301      	adds	r3, #1
 800676a:	60bb      	str	r3, [r7, #8]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	429a      	cmp	r2, r3
 8006770:	d307      	bcc.n	8006782 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1f2      	bne.n	8006766 <HAL_DMA_IRQHandler+0x2ca>
 8006780:	e000      	b.n	8006784 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006782:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	4798      	blx	r3
 80067a4:	e000      	b.n	80067a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80067a6:	bf00      	nop
    }
  }
}
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop

080067b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d108      	bne.n	80067f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80067ee:	e007      	b.n	8006800 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	60da      	str	r2, [r3, #12]
}
 8006800:	bf00      	nop
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	3b10      	subs	r3, #16
 800681c:	4a14      	ldr	r2, [pc, #80]	; (8006870 <DMA_CalcBaseAndBitshift+0x64>)
 800681e:	fba2 2303 	umull	r2, r3, r2, r3
 8006822:	091b      	lsrs	r3, r3, #4
 8006824:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006826:	4a13      	ldr	r2, [pc, #76]	; (8006874 <DMA_CalcBaseAndBitshift+0x68>)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4413      	add	r3, r2
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2b03      	cmp	r3, #3
 8006838:	d909      	bls.n	800684e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006842:	f023 0303 	bic.w	r3, r3, #3
 8006846:	1d1a      	adds	r2, r3, #4
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	659a      	str	r2, [r3, #88]	; 0x58
 800684c:	e007      	b.n	800685e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006856:	f023 0303 	bic.w	r3, r3, #3
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	aaaaaaab 	.word	0xaaaaaaab
 8006874:	08013c70 	.word	0x08013c70

08006878 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006888:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d11f      	bne.n	80068d2 <DMA_CheckFifoParam+0x5a>
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b03      	cmp	r3, #3
 8006896:	d856      	bhi.n	8006946 <DMA_CheckFifoParam+0xce>
 8006898:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <DMA_CheckFifoParam+0x28>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	080068b1 	.word	0x080068b1
 80068a4:	080068c3 	.word	0x080068c3
 80068a8:	080068b1 	.word	0x080068b1
 80068ac:	08006947 	.word	0x08006947
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d046      	beq.n	800694a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068c0:	e043      	b.n	800694a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068ca:	d140      	bne.n	800694e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068d0:	e03d      	b.n	800694e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068da:	d121      	bne.n	8006920 <DMA_CheckFifoParam+0xa8>
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d837      	bhi.n	8006952 <DMA_CheckFifoParam+0xda>
 80068e2:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <DMA_CheckFifoParam+0x70>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	080068f9 	.word	0x080068f9
 80068ec:	080068ff 	.word	0x080068ff
 80068f0:	080068f9 	.word	0x080068f9
 80068f4:	08006911 	.word	0x08006911
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	73fb      	strb	r3, [r7, #15]
      break;
 80068fc:	e030      	b.n	8006960 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d025      	beq.n	8006956 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800690e:	e022      	b.n	8006956 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006918:	d11f      	bne.n	800695a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800691e:	e01c      	b.n	800695a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b02      	cmp	r3, #2
 8006924:	d903      	bls.n	800692e <DMA_CheckFifoParam+0xb6>
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b03      	cmp	r3, #3
 800692a:	d003      	beq.n	8006934 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800692c:	e018      	b.n	8006960 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	73fb      	strb	r3, [r7, #15]
      break;
 8006932:	e015      	b.n	8006960 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00e      	beq.n	800695e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	73fb      	strb	r3, [r7, #15]
      break;
 8006944:	e00b      	b.n	800695e <DMA_CheckFifoParam+0xe6>
      break;
 8006946:	bf00      	nop
 8006948:	e00a      	b.n	8006960 <DMA_CheckFifoParam+0xe8>
      break;
 800694a:	bf00      	nop
 800694c:	e008      	b.n	8006960 <DMA_CheckFifoParam+0xe8>
      break;
 800694e:	bf00      	nop
 8006950:	e006      	b.n	8006960 <DMA_CheckFifoParam+0xe8>
      break;
 8006952:	bf00      	nop
 8006954:	e004      	b.n	8006960 <DMA_CheckFifoParam+0xe8>
      break;
 8006956:	bf00      	nop
 8006958:	e002      	b.n	8006960 <DMA_CheckFifoParam+0xe8>
      break;   
 800695a:	bf00      	nop
 800695c:	e000      	b.n	8006960 <DMA_CheckFifoParam+0xe8>
      break;
 800695e:	bf00      	nop
    }
  } 
  
  return status; 
 8006960:	7bfb      	ldrb	r3, [r7, #15]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop

08006970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006970:	b480      	push	{r7}
 8006972:	b089      	sub	sp, #36	; 0x24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800697a:	2300      	movs	r3, #0
 800697c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800697e:	2300      	movs	r3, #0
 8006980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006982:	2300      	movs	r3, #0
 8006984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006986:	2300      	movs	r3, #0
 8006988:	61fb      	str	r3, [r7, #28]
 800698a:	e165      	b.n	8006c58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800698c:	2201      	movs	r2, #1
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	fa02 f303 	lsl.w	r3, r2, r3
 8006994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4013      	ands	r3, r2
 800699e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	f040 8154 	bne.w	8006c52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d005      	beq.n	80069c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d130      	bne.n	8006a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	2203      	movs	r2, #3
 80069ce:	fa02 f303 	lsl.w	r3, r2, r3
 80069d2:	43db      	mvns	r3, r3
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	4013      	ands	r3, r2
 80069d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	fa02 f303 	lsl.w	r3, r2, r3
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069f8:	2201      	movs	r2, #1
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006a00:	43db      	mvns	r3, r3
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	4013      	ands	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	091b      	lsrs	r3, r3, #4
 8006a0e:	f003 0201 	and.w	r2, r3, #1
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	fa02 f303 	lsl.w	r3, r2, r3
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	d017      	beq.n	8006a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	2203      	movs	r2, #3
 8006a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a40:	43db      	mvns	r3, r3
 8006a42:	69ba      	ldr	r2, [r7, #24]
 8006a44:	4013      	ands	r3, r2
 8006a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	fa02 f303 	lsl.w	r3, r2, r3
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f003 0303 	and.w	r3, r3, #3
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d123      	bne.n	8006ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	08da      	lsrs	r2, r3, #3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3208      	adds	r2, #8
 8006a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	220f      	movs	r2, #15
 8006a84:	fa02 f303 	lsl.w	r3, r2, r3
 8006a88:	43db      	mvns	r3, r3
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	08da      	lsrs	r2, r3, #3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3208      	adds	r2, #8
 8006aae:	69b9      	ldr	r1, [r7, #24]
 8006ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	2203      	movs	r2, #3
 8006ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac4:	43db      	mvns	r3, r3
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f003 0203 	and.w	r2, r3, #3
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 80ae 	beq.w	8006c52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	4b5d      	ldr	r3, [pc, #372]	; (8006c70 <HAL_GPIO_Init+0x300>)
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	4a5c      	ldr	r2, [pc, #368]	; (8006c70 <HAL_GPIO_Init+0x300>)
 8006b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b04:	6453      	str	r3, [r2, #68]	; 0x44
 8006b06:	4b5a      	ldr	r3, [pc, #360]	; (8006c70 <HAL_GPIO_Init+0x300>)
 8006b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b12:	4a58      	ldr	r2, [pc, #352]	; (8006c74 <HAL_GPIO_Init+0x304>)
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	089b      	lsrs	r3, r3, #2
 8006b18:	3302      	adds	r3, #2
 8006b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	220f      	movs	r2, #15
 8006b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2e:	43db      	mvns	r3, r3
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	4013      	ands	r3, r2
 8006b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a4f      	ldr	r2, [pc, #316]	; (8006c78 <HAL_GPIO_Init+0x308>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d025      	beq.n	8006b8a <HAL_GPIO_Init+0x21a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a4e      	ldr	r2, [pc, #312]	; (8006c7c <HAL_GPIO_Init+0x30c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d01f      	beq.n	8006b86 <HAL_GPIO_Init+0x216>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a4d      	ldr	r2, [pc, #308]	; (8006c80 <HAL_GPIO_Init+0x310>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d019      	beq.n	8006b82 <HAL_GPIO_Init+0x212>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a4c      	ldr	r2, [pc, #304]	; (8006c84 <HAL_GPIO_Init+0x314>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d013      	beq.n	8006b7e <HAL_GPIO_Init+0x20e>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a4b      	ldr	r2, [pc, #300]	; (8006c88 <HAL_GPIO_Init+0x318>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00d      	beq.n	8006b7a <HAL_GPIO_Init+0x20a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a4a      	ldr	r2, [pc, #296]	; (8006c8c <HAL_GPIO_Init+0x31c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d007      	beq.n	8006b76 <HAL_GPIO_Init+0x206>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a49      	ldr	r2, [pc, #292]	; (8006c90 <HAL_GPIO_Init+0x320>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d101      	bne.n	8006b72 <HAL_GPIO_Init+0x202>
 8006b6e:	2306      	movs	r3, #6
 8006b70:	e00c      	b.n	8006b8c <HAL_GPIO_Init+0x21c>
 8006b72:	2307      	movs	r3, #7
 8006b74:	e00a      	b.n	8006b8c <HAL_GPIO_Init+0x21c>
 8006b76:	2305      	movs	r3, #5
 8006b78:	e008      	b.n	8006b8c <HAL_GPIO_Init+0x21c>
 8006b7a:	2304      	movs	r3, #4
 8006b7c:	e006      	b.n	8006b8c <HAL_GPIO_Init+0x21c>
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e004      	b.n	8006b8c <HAL_GPIO_Init+0x21c>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e002      	b.n	8006b8c <HAL_GPIO_Init+0x21c>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <HAL_GPIO_Init+0x21c>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	69fa      	ldr	r2, [r7, #28]
 8006b8e:	f002 0203 	and.w	r2, r2, #3
 8006b92:	0092      	lsls	r2, r2, #2
 8006b94:	4093      	lsls	r3, r2
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b9c:	4935      	ldr	r1, [pc, #212]	; (8006c74 <HAL_GPIO_Init+0x304>)
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	089b      	lsrs	r3, r3, #2
 8006ba2:	3302      	adds	r3, #2
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006baa:	4b3a      	ldr	r3, [pc, #232]	; (8006c94 <HAL_GPIO_Init+0x324>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	43db      	mvns	r3, r3
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006bce:	4a31      	ldr	r2, [pc, #196]	; (8006c94 <HAL_GPIO_Init+0x324>)
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006bd4:	4b2f      	ldr	r3, [pc, #188]	; (8006c94 <HAL_GPIO_Init+0x324>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	43db      	mvns	r3, r3
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	4013      	ands	r3, r2
 8006be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006bf8:	4a26      	ldr	r2, [pc, #152]	; (8006c94 <HAL_GPIO_Init+0x324>)
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006bfe:	4b25      	ldr	r3, [pc, #148]	; (8006c94 <HAL_GPIO_Init+0x324>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	43db      	mvns	r3, r3
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c22:	4a1c      	ldr	r2, [pc, #112]	; (8006c94 <HAL_GPIO_Init+0x324>)
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c28:	4b1a      	ldr	r3, [pc, #104]	; (8006c94 <HAL_GPIO_Init+0x324>)
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	43db      	mvns	r3, r3
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	4013      	ands	r3, r2
 8006c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c4c:	4a11      	ldr	r2, [pc, #68]	; (8006c94 <HAL_GPIO_Init+0x324>)
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	3301      	adds	r3, #1
 8006c56:	61fb      	str	r3, [r7, #28]
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	2b0f      	cmp	r3, #15
 8006c5c:	f67f ae96 	bls.w	800698c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c60:	bf00      	nop
 8006c62:	bf00      	nop
 8006c64:	3724      	adds	r7, #36	; 0x24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40023800 	.word	0x40023800
 8006c74:	40013800 	.word	0x40013800
 8006c78:	40020000 	.word	0x40020000
 8006c7c:	40020400 	.word	0x40020400
 8006c80:	40020800 	.word	0x40020800
 8006c84:	40020c00 	.word	0x40020c00
 8006c88:	40021000 	.word	0x40021000
 8006c8c:	40021400 	.word	0x40021400
 8006c90:	40021800 	.word	0x40021800
 8006c94:	40013c00 	.word	0x40013c00

08006c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	887b      	ldrh	r3, [r7, #2]
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	73fb      	strb	r3, [r7, #15]
 8006cb4:	e001      	b.n	8006cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	807b      	strh	r3, [r7, #2]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006cd8:	787b      	ldrb	r3, [r7, #1]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cde:	887a      	ldrh	r2, [r7, #2]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006ce4:	e003      	b.n	8006cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ce6:	887b      	ldrh	r3, [r7, #2]
 8006ce8:	041a      	lsls	r2, r3, #16
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	619a      	str	r2, [r3, #24]
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b085      	sub	sp, #20
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	460b      	mov	r3, r1
 8006d04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006d0c:	887a      	ldrh	r2, [r7, #2]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4013      	ands	r3, r2
 8006d12:	041a      	lsls	r2, r3, #16
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	43d9      	mvns	r1, r3
 8006d18:	887b      	ldrh	r3, [r7, #2]
 8006d1a:	400b      	ands	r3, r1
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	619a      	str	r2, [r3, #24]
}
 8006d22:	bf00      	nop
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
	...

08006d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e0cc      	b.n	8006ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d44:	4b68      	ldr	r3, [pc, #416]	; (8006ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 030f 	and.w	r3, r3, #15
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d90c      	bls.n	8006d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d52:	4b65      	ldr	r3, [pc, #404]	; (8006ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d5a:	4b63      	ldr	r3, [pc, #396]	; (8006ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d001      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e0b8      	b.n	8006ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d020      	beq.n	8006dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d005      	beq.n	8006d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d84:	4b59      	ldr	r3, [pc, #356]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	4a58      	ldr	r2, [pc, #352]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006d8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0308 	and.w	r3, r3, #8
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d005      	beq.n	8006da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d9c:	4b53      	ldr	r3, [pc, #332]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	4a52      	ldr	r2, [pc, #328]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006da2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006da8:	4b50      	ldr	r3, [pc, #320]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	494d      	ldr	r1, [pc, #308]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d044      	beq.n	8006e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d107      	bne.n	8006dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dce:	4b47      	ldr	r3, [pc, #284]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d119      	bne.n	8006e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e07f      	b.n	8006ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d003      	beq.n	8006dee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d107      	bne.n	8006dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dee:	4b3f      	ldr	r3, [pc, #252]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d109      	bne.n	8006e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e06f      	b.n	8006ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dfe:	4b3b      	ldr	r3, [pc, #236]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e067      	b.n	8006ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e0e:	4b37      	ldr	r3, [pc, #220]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f023 0203 	bic.w	r2, r3, #3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	4934      	ldr	r1, [pc, #208]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e20:	f7ff f924 	bl	800606c <HAL_GetTick>
 8006e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e26:	e00a      	b.n	8006e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e28:	f7ff f920 	bl	800606c <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e04f      	b.n	8006ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e3e:	4b2b      	ldr	r3, [pc, #172]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 020c 	and.w	r2, r3, #12
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d1eb      	bne.n	8006e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e50:	4b25      	ldr	r3, [pc, #148]	; (8006ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 030f 	and.w	r3, r3, #15
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d20c      	bcs.n	8006e78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e5e:	4b22      	ldr	r3, [pc, #136]	; (8006ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e66:	4b20      	ldr	r3, [pc, #128]	; (8006ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 030f 	and.w	r3, r3, #15
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d001      	beq.n	8006e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e032      	b.n	8006ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d008      	beq.n	8006e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e84:	4b19      	ldr	r3, [pc, #100]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	4916      	ldr	r1, [pc, #88]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0308 	and.w	r3, r3, #8
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d009      	beq.n	8006eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ea2:	4b12      	ldr	r3, [pc, #72]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	490e      	ldr	r1, [pc, #56]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006eb6:	f000 f887 	bl	8006fc8 <HAL_RCC_GetSysClockFreq>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	4b0b      	ldr	r3, [pc, #44]	; (8006eec <HAL_RCC_ClockConfig+0x1bc>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	091b      	lsrs	r3, r3, #4
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	490a      	ldr	r1, [pc, #40]	; (8006ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8006ec8:	5ccb      	ldrb	r3, [r1, r3]
 8006eca:	fa22 f303 	lsr.w	r3, r2, r3
 8006ece:	4a09      	ldr	r2, [pc, #36]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ed2:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fc f89c 	bl	8003014 <HAL_InitTick>

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	40023c00 	.word	0x40023c00
 8006eec:	40023800 	.word	0x40023800
 8006ef0:	08013c58 	.word	0x08013c58
 8006ef4:	20000004 	.word	0x20000004
 8006ef8:	20000008 	.word	0x20000008

08006efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f00:	4b03      	ldr	r3, [pc, #12]	; (8006f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f02:	681b      	ldr	r3, [r3, #0]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	20000004 	.word	0x20000004

08006f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f18:	f7ff fff0 	bl	8006efc <HAL_RCC_GetHCLKFreq>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	0a9b      	lsrs	r3, r3, #10
 8006f24:	f003 0307 	and.w	r3, r3, #7
 8006f28:	4903      	ldr	r1, [pc, #12]	; (8006f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f2a:	5ccb      	ldrb	r3, [r1, r3]
 8006f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	40023800 	.word	0x40023800
 8006f38:	08013c68 	.word	0x08013c68

08006f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f40:	f7ff ffdc 	bl	8006efc <HAL_RCC_GetHCLKFreq>
 8006f44:	4602      	mov	r2, r0
 8006f46:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	0b5b      	lsrs	r3, r3, #13
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	4903      	ldr	r1, [pc, #12]	; (8006f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f52:	5ccb      	ldrb	r3, [r1, r3]
 8006f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40023800 	.word	0x40023800
 8006f60:	08013c68 	.word	0x08013c68

08006f64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	220f      	movs	r2, #15
 8006f72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f74:	4b12      	ldr	r3, [pc, #72]	; (8006fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f003 0203 	and.w	r2, r3, #3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f80:	4b0f      	ldr	r3, [pc, #60]	; (8006fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f8c:	4b0c      	ldr	r3, [pc, #48]	; (8006fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006f98:	4b09      	ldr	r3, [pc, #36]	; (8006fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	08db      	lsrs	r3, r3, #3
 8006f9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006fa6:	4b07      	ldr	r3, [pc, #28]	; (8006fc4 <HAL_RCC_GetClockConfig+0x60>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 020f 	and.w	r2, r3, #15
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	601a      	str	r2, [r3, #0]
}
 8006fb2:	bf00      	nop
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	40023800 	.word	0x40023800
 8006fc4:	40023c00 	.word	0x40023c00

08006fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fcc:	b088      	sub	sp, #32
 8006fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fe4:	4bce      	ldr	r3, [pc, #824]	; (8007320 <HAL_RCC_GetSysClockFreq+0x358>)
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f003 030c 	and.w	r3, r3, #12
 8006fec:	2b0c      	cmp	r3, #12
 8006fee:	f200 818d 	bhi.w	800730c <HAL_RCC_GetSysClockFreq+0x344>
 8006ff2:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <HAL_RCC_GetSysClockFreq+0x30>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	0800702d 	.word	0x0800702d
 8006ffc:	0800730d 	.word	0x0800730d
 8007000:	0800730d 	.word	0x0800730d
 8007004:	0800730d 	.word	0x0800730d
 8007008:	08007033 	.word	0x08007033
 800700c:	0800730d 	.word	0x0800730d
 8007010:	0800730d 	.word	0x0800730d
 8007014:	0800730d 	.word	0x0800730d
 8007018:	08007039 	.word	0x08007039
 800701c:	0800730d 	.word	0x0800730d
 8007020:	0800730d 	.word	0x0800730d
 8007024:	0800730d 	.word	0x0800730d
 8007028:	080071ad 	.word	0x080071ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800702c:	4bbd      	ldr	r3, [pc, #756]	; (8007324 <HAL_RCC_GetSysClockFreq+0x35c>)
 800702e:	61bb      	str	r3, [r7, #24]
       break;
 8007030:	e16f      	b.n	8007312 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007032:	4bbd      	ldr	r3, [pc, #756]	; (8007328 <HAL_RCC_GetSysClockFreq+0x360>)
 8007034:	61bb      	str	r3, [r7, #24]
      break;
 8007036:	e16c      	b.n	8007312 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007038:	4bb9      	ldr	r3, [pc, #740]	; (8007320 <HAL_RCC_GetSysClockFreq+0x358>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007040:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007042:	4bb7      	ldr	r3, [pc, #732]	; (8007320 <HAL_RCC_GetSysClockFreq+0x358>)
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d053      	beq.n	80070f6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800704e:	4bb4      	ldr	r3, [pc, #720]	; (8007320 <HAL_RCC_GetSysClockFreq+0x358>)
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	099b      	lsrs	r3, r3, #6
 8007054:	461a      	mov	r2, r3
 8007056:	f04f 0300 	mov.w	r3, #0
 800705a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800705e:	f04f 0100 	mov.w	r1, #0
 8007062:	ea02 0400 	and.w	r4, r2, r0
 8007066:	603c      	str	r4, [r7, #0]
 8007068:	400b      	ands	r3, r1
 800706a:	607b      	str	r3, [r7, #4]
 800706c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007070:	4620      	mov	r0, r4
 8007072:	4629      	mov	r1, r5
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	f04f 0300 	mov.w	r3, #0
 800707c:	014b      	lsls	r3, r1, #5
 800707e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007082:	0142      	lsls	r2, r0, #5
 8007084:	4610      	mov	r0, r2
 8007086:	4619      	mov	r1, r3
 8007088:	4623      	mov	r3, r4
 800708a:	1ac0      	subs	r0, r0, r3
 800708c:	462b      	mov	r3, r5
 800708e:	eb61 0103 	sbc.w	r1, r1, r3
 8007092:	f04f 0200 	mov.w	r2, #0
 8007096:	f04f 0300 	mov.w	r3, #0
 800709a:	018b      	lsls	r3, r1, #6
 800709c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80070a0:	0182      	lsls	r2, r0, #6
 80070a2:	1a12      	subs	r2, r2, r0
 80070a4:	eb63 0301 	sbc.w	r3, r3, r1
 80070a8:	f04f 0000 	mov.w	r0, #0
 80070ac:	f04f 0100 	mov.w	r1, #0
 80070b0:	00d9      	lsls	r1, r3, #3
 80070b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070b6:	00d0      	lsls	r0, r2, #3
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	4621      	mov	r1, r4
 80070be:	1852      	adds	r2, r2, r1
 80070c0:	4629      	mov	r1, r5
 80070c2:	eb43 0101 	adc.w	r1, r3, r1
 80070c6:	460b      	mov	r3, r1
 80070c8:	f04f 0000 	mov.w	r0, #0
 80070cc:	f04f 0100 	mov.w	r1, #0
 80070d0:	0259      	lsls	r1, r3, #9
 80070d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80070d6:	0250      	lsls	r0, r2, #9
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	4610      	mov	r0, r2
 80070de:	4619      	mov	r1, r3
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	461a      	mov	r2, r3
 80070e4:	f04f 0300 	mov.w	r3, #0
 80070e8:	f7f9 fdee 	bl	8000cc8 <__aeabi_uldivmod>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	4613      	mov	r3, r2
 80070f2:	61fb      	str	r3, [r7, #28]
 80070f4:	e04c      	b.n	8007190 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070f6:	4b8a      	ldr	r3, [pc, #552]	; (8007320 <HAL_RCC_GetSysClockFreq+0x358>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	099b      	lsrs	r3, r3, #6
 80070fc:	461a      	mov	r2, r3
 80070fe:	f04f 0300 	mov.w	r3, #0
 8007102:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007106:	f04f 0100 	mov.w	r1, #0
 800710a:	ea02 0a00 	and.w	sl, r2, r0
 800710e:	ea03 0b01 	and.w	fp, r3, r1
 8007112:	4650      	mov	r0, sl
 8007114:	4659      	mov	r1, fp
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	f04f 0300 	mov.w	r3, #0
 800711e:	014b      	lsls	r3, r1, #5
 8007120:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007124:	0142      	lsls	r2, r0, #5
 8007126:	4610      	mov	r0, r2
 8007128:	4619      	mov	r1, r3
 800712a:	ebb0 000a 	subs.w	r0, r0, sl
 800712e:	eb61 010b 	sbc.w	r1, r1, fp
 8007132:	f04f 0200 	mov.w	r2, #0
 8007136:	f04f 0300 	mov.w	r3, #0
 800713a:	018b      	lsls	r3, r1, #6
 800713c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007140:	0182      	lsls	r2, r0, #6
 8007142:	1a12      	subs	r2, r2, r0
 8007144:	eb63 0301 	sbc.w	r3, r3, r1
 8007148:	f04f 0000 	mov.w	r0, #0
 800714c:	f04f 0100 	mov.w	r1, #0
 8007150:	00d9      	lsls	r1, r3, #3
 8007152:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007156:	00d0      	lsls	r0, r2, #3
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	eb12 020a 	adds.w	r2, r2, sl
 8007160:	eb43 030b 	adc.w	r3, r3, fp
 8007164:	f04f 0000 	mov.w	r0, #0
 8007168:	f04f 0100 	mov.w	r1, #0
 800716c:	0299      	lsls	r1, r3, #10
 800716e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007172:	0290      	lsls	r0, r2, #10
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4610      	mov	r0, r2
 800717a:	4619      	mov	r1, r3
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	461a      	mov	r2, r3
 8007180:	f04f 0300 	mov.w	r3, #0
 8007184:	f7f9 fda0 	bl	8000cc8 <__aeabi_uldivmod>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	4613      	mov	r3, r2
 800718e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007190:	4b63      	ldr	r3, [pc, #396]	; (8007320 <HAL_RCC_GetSysClockFreq+0x358>)
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	0c1b      	lsrs	r3, r3, #16
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	3301      	adds	r3, #1
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80071a0:	69fa      	ldr	r2, [r7, #28]
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a8:	61bb      	str	r3, [r7, #24]
      break;
 80071aa:	e0b2      	b.n	8007312 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071ac:	4b5c      	ldr	r3, [pc, #368]	; (8007320 <HAL_RCC_GetSysClockFreq+0x358>)
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071b4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071b6:	4b5a      	ldr	r3, [pc, #360]	; (8007320 <HAL_RCC_GetSysClockFreq+0x358>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d04d      	beq.n	800725e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071c2:	4b57      	ldr	r3, [pc, #348]	; (8007320 <HAL_RCC_GetSysClockFreq+0x358>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	099b      	lsrs	r3, r3, #6
 80071c8:	461a      	mov	r2, r3
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80071d2:	f04f 0100 	mov.w	r1, #0
 80071d6:	ea02 0800 	and.w	r8, r2, r0
 80071da:	ea03 0901 	and.w	r9, r3, r1
 80071de:	4640      	mov	r0, r8
 80071e0:	4649      	mov	r1, r9
 80071e2:	f04f 0200 	mov.w	r2, #0
 80071e6:	f04f 0300 	mov.w	r3, #0
 80071ea:	014b      	lsls	r3, r1, #5
 80071ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80071f0:	0142      	lsls	r2, r0, #5
 80071f2:	4610      	mov	r0, r2
 80071f4:	4619      	mov	r1, r3
 80071f6:	ebb0 0008 	subs.w	r0, r0, r8
 80071fa:	eb61 0109 	sbc.w	r1, r1, r9
 80071fe:	f04f 0200 	mov.w	r2, #0
 8007202:	f04f 0300 	mov.w	r3, #0
 8007206:	018b      	lsls	r3, r1, #6
 8007208:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800720c:	0182      	lsls	r2, r0, #6
 800720e:	1a12      	subs	r2, r2, r0
 8007210:	eb63 0301 	sbc.w	r3, r3, r1
 8007214:	f04f 0000 	mov.w	r0, #0
 8007218:	f04f 0100 	mov.w	r1, #0
 800721c:	00d9      	lsls	r1, r3, #3
 800721e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007222:	00d0      	lsls	r0, r2, #3
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	eb12 0208 	adds.w	r2, r2, r8
 800722c:	eb43 0309 	adc.w	r3, r3, r9
 8007230:	f04f 0000 	mov.w	r0, #0
 8007234:	f04f 0100 	mov.w	r1, #0
 8007238:	0259      	lsls	r1, r3, #9
 800723a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800723e:	0250      	lsls	r0, r2, #9
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	4610      	mov	r0, r2
 8007246:	4619      	mov	r1, r3
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	461a      	mov	r2, r3
 800724c:	f04f 0300 	mov.w	r3, #0
 8007250:	f7f9 fd3a 	bl	8000cc8 <__aeabi_uldivmod>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4613      	mov	r3, r2
 800725a:	61fb      	str	r3, [r7, #28]
 800725c:	e04a      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800725e:	4b30      	ldr	r3, [pc, #192]	; (8007320 <HAL_RCC_GetSysClockFreq+0x358>)
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	099b      	lsrs	r3, r3, #6
 8007264:	461a      	mov	r2, r3
 8007266:	f04f 0300 	mov.w	r3, #0
 800726a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800726e:	f04f 0100 	mov.w	r1, #0
 8007272:	ea02 0400 	and.w	r4, r2, r0
 8007276:	ea03 0501 	and.w	r5, r3, r1
 800727a:	4620      	mov	r0, r4
 800727c:	4629      	mov	r1, r5
 800727e:	f04f 0200 	mov.w	r2, #0
 8007282:	f04f 0300 	mov.w	r3, #0
 8007286:	014b      	lsls	r3, r1, #5
 8007288:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800728c:	0142      	lsls	r2, r0, #5
 800728e:	4610      	mov	r0, r2
 8007290:	4619      	mov	r1, r3
 8007292:	1b00      	subs	r0, r0, r4
 8007294:	eb61 0105 	sbc.w	r1, r1, r5
 8007298:	f04f 0200 	mov.w	r2, #0
 800729c:	f04f 0300 	mov.w	r3, #0
 80072a0:	018b      	lsls	r3, r1, #6
 80072a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80072a6:	0182      	lsls	r2, r0, #6
 80072a8:	1a12      	subs	r2, r2, r0
 80072aa:	eb63 0301 	sbc.w	r3, r3, r1
 80072ae:	f04f 0000 	mov.w	r0, #0
 80072b2:	f04f 0100 	mov.w	r1, #0
 80072b6:	00d9      	lsls	r1, r3, #3
 80072b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072bc:	00d0      	lsls	r0, r2, #3
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	1912      	adds	r2, r2, r4
 80072c4:	eb45 0303 	adc.w	r3, r5, r3
 80072c8:	f04f 0000 	mov.w	r0, #0
 80072cc:	f04f 0100 	mov.w	r1, #0
 80072d0:	0299      	lsls	r1, r3, #10
 80072d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80072d6:	0290      	lsls	r0, r2, #10
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4610      	mov	r0, r2
 80072de:	4619      	mov	r1, r3
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	461a      	mov	r2, r3
 80072e4:	f04f 0300 	mov.w	r3, #0
 80072e8:	f7f9 fcee 	bl	8000cc8 <__aeabi_uldivmod>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4613      	mov	r3, r2
 80072f2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80072f4:	4b0a      	ldr	r3, [pc, #40]	; (8007320 <HAL_RCC_GetSysClockFreq+0x358>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	0f1b      	lsrs	r3, r3, #28
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8007300:	69fa      	ldr	r2, [r7, #28]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	fbb2 f3f3 	udiv	r3, r2, r3
 8007308:	61bb      	str	r3, [r7, #24]
      break;
 800730a:	e002      	b.n	8007312 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800730c:	4b05      	ldr	r3, [pc, #20]	; (8007324 <HAL_RCC_GetSysClockFreq+0x35c>)
 800730e:	61bb      	str	r3, [r7, #24]
      break;
 8007310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007312:	69bb      	ldr	r3, [r7, #24]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3720      	adds	r7, #32
 8007318:	46bd      	mov	sp, r7
 800731a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800731e:	bf00      	nop
 8007320:	40023800 	.word	0x40023800
 8007324:	00f42400 	.word	0x00f42400
 8007328:	007a1200 	.word	0x007a1200

0800732c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e28d      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 8083 	beq.w	8007452 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800734c:	4b94      	ldr	r3, [pc, #592]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 030c 	and.w	r3, r3, #12
 8007354:	2b04      	cmp	r3, #4
 8007356:	d019      	beq.n	800738c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007358:	4b91      	ldr	r3, [pc, #580]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007360:	2b08      	cmp	r3, #8
 8007362:	d106      	bne.n	8007372 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007364:	4b8e      	ldr	r3, [pc, #568]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800736c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007370:	d00c      	beq.n	800738c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007372:	4b8b      	ldr	r3, [pc, #556]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800737a:	2b0c      	cmp	r3, #12
 800737c:	d112      	bne.n	80073a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800737e:	4b88      	ldr	r3, [pc, #544]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800738a:	d10b      	bne.n	80073a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800738c:	4b84      	ldr	r3, [pc, #528]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d05b      	beq.n	8007450 <HAL_RCC_OscConfig+0x124>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d157      	bne.n	8007450 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e25a      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ac:	d106      	bne.n	80073bc <HAL_RCC_OscConfig+0x90>
 80073ae:	4b7c      	ldr	r3, [pc, #496]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a7b      	ldr	r2, [pc, #492]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 80073b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073b8:	6013      	str	r3, [r2, #0]
 80073ba:	e01d      	b.n	80073f8 <HAL_RCC_OscConfig+0xcc>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073c4:	d10c      	bne.n	80073e0 <HAL_RCC_OscConfig+0xb4>
 80073c6:	4b76      	ldr	r3, [pc, #472]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a75      	ldr	r2, [pc, #468]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 80073cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073d0:	6013      	str	r3, [r2, #0]
 80073d2:	4b73      	ldr	r3, [pc, #460]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a72      	ldr	r2, [pc, #456]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 80073d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	e00b      	b.n	80073f8 <HAL_RCC_OscConfig+0xcc>
 80073e0:	4b6f      	ldr	r3, [pc, #444]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a6e      	ldr	r2, [pc, #440]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 80073e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ea:	6013      	str	r3, [r2, #0]
 80073ec:	4b6c      	ldr	r3, [pc, #432]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a6b      	ldr	r2, [pc, #428]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 80073f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d013      	beq.n	8007428 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007400:	f7fe fe34 	bl	800606c <HAL_GetTick>
 8007404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007406:	e008      	b.n	800741a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007408:	f7fe fe30 	bl	800606c <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	2b64      	cmp	r3, #100	; 0x64
 8007414:	d901      	bls.n	800741a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e21f      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800741a:	4b61      	ldr	r3, [pc, #388]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0f0      	beq.n	8007408 <HAL_RCC_OscConfig+0xdc>
 8007426:	e014      	b.n	8007452 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007428:	f7fe fe20 	bl	800606c <HAL_GetTick>
 800742c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800742e:	e008      	b.n	8007442 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007430:	f7fe fe1c 	bl	800606c <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	2b64      	cmp	r3, #100	; 0x64
 800743c:	d901      	bls.n	8007442 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e20b      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007442:	4b57      	ldr	r3, [pc, #348]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1f0      	bne.n	8007430 <HAL_RCC_OscConfig+0x104>
 800744e:	e000      	b.n	8007452 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d06f      	beq.n	800753e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800745e:	4b50      	ldr	r3, [pc, #320]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f003 030c 	and.w	r3, r3, #12
 8007466:	2b00      	cmp	r3, #0
 8007468:	d017      	beq.n	800749a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800746a:	4b4d      	ldr	r3, [pc, #308]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007472:	2b08      	cmp	r3, #8
 8007474:	d105      	bne.n	8007482 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007476:	4b4a      	ldr	r3, [pc, #296]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00b      	beq.n	800749a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007482:	4b47      	ldr	r3, [pc, #284]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800748a:	2b0c      	cmp	r3, #12
 800748c:	d11c      	bne.n	80074c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800748e:	4b44      	ldr	r3, [pc, #272]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d116      	bne.n	80074c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800749a:	4b41      	ldr	r3, [pc, #260]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d005      	beq.n	80074b2 <HAL_RCC_OscConfig+0x186>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d001      	beq.n	80074b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e1d3      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074b2:	4b3b      	ldr	r3, [pc, #236]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	4937      	ldr	r1, [pc, #220]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074c6:	e03a      	b.n	800753e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d020      	beq.n	8007512 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074d0:	4b34      	ldr	r3, [pc, #208]	; (80075a4 <HAL_RCC_OscConfig+0x278>)
 80074d2:	2201      	movs	r2, #1
 80074d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d6:	f7fe fdc9 	bl	800606c <HAL_GetTick>
 80074da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074dc:	e008      	b.n	80074f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074de:	f7fe fdc5 	bl	800606c <HAL_GetTick>
 80074e2:	4602      	mov	r2, r0
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d901      	bls.n	80074f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e1b4      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074f0:	4b2b      	ldr	r3, [pc, #172]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0302 	and.w	r3, r3, #2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d0f0      	beq.n	80074de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074fc:	4b28      	ldr	r3, [pc, #160]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	00db      	lsls	r3, r3, #3
 800750a:	4925      	ldr	r1, [pc, #148]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 800750c:	4313      	orrs	r3, r2
 800750e:	600b      	str	r3, [r1, #0]
 8007510:	e015      	b.n	800753e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007512:	4b24      	ldr	r3, [pc, #144]	; (80075a4 <HAL_RCC_OscConfig+0x278>)
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007518:	f7fe fda8 	bl	800606c <HAL_GetTick>
 800751c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800751e:	e008      	b.n	8007532 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007520:	f7fe fda4 	bl	800606c <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d901      	bls.n	8007532 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e193      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007532:	4b1b      	ldr	r3, [pc, #108]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1f0      	bne.n	8007520 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0308 	and.w	r3, r3, #8
 8007546:	2b00      	cmp	r3, #0
 8007548:	d036      	beq.n	80075b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d016      	beq.n	8007580 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007552:	4b15      	ldr	r3, [pc, #84]	; (80075a8 <HAL_RCC_OscConfig+0x27c>)
 8007554:	2201      	movs	r2, #1
 8007556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007558:	f7fe fd88 	bl	800606c <HAL_GetTick>
 800755c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800755e:	e008      	b.n	8007572 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007560:	f7fe fd84 	bl	800606c <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	2b02      	cmp	r3, #2
 800756c:	d901      	bls.n	8007572 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e173      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007572:	4b0b      	ldr	r3, [pc, #44]	; (80075a0 <HAL_RCC_OscConfig+0x274>)
 8007574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0f0      	beq.n	8007560 <HAL_RCC_OscConfig+0x234>
 800757e:	e01b      	b.n	80075b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007580:	4b09      	ldr	r3, [pc, #36]	; (80075a8 <HAL_RCC_OscConfig+0x27c>)
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007586:	f7fe fd71 	bl	800606c <HAL_GetTick>
 800758a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800758c:	e00e      	b.n	80075ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800758e:	f7fe fd6d 	bl	800606c <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	2b02      	cmp	r3, #2
 800759a:	d907      	bls.n	80075ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e15c      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
 80075a0:	40023800 	.word	0x40023800
 80075a4:	42470000 	.word	0x42470000
 80075a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075ac:	4b8a      	ldr	r3, [pc, #552]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 80075ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1ea      	bne.n	800758e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0304 	and.w	r3, r3, #4
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 8097 	beq.w	80076f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075c6:	2300      	movs	r3, #0
 80075c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075ca:	4b83      	ldr	r3, [pc, #524]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10f      	bne.n	80075f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075d6:	2300      	movs	r3, #0
 80075d8:	60bb      	str	r3, [r7, #8]
 80075da:	4b7f      	ldr	r3, [pc, #508]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	4a7e      	ldr	r2, [pc, #504]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 80075e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075e4:	6413      	str	r3, [r2, #64]	; 0x40
 80075e6:	4b7c      	ldr	r3, [pc, #496]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 80075e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ee:	60bb      	str	r3, [r7, #8]
 80075f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075f2:	2301      	movs	r3, #1
 80075f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075f6:	4b79      	ldr	r3, [pc, #484]	; (80077dc <HAL_RCC_OscConfig+0x4b0>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d118      	bne.n	8007634 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007602:	4b76      	ldr	r3, [pc, #472]	; (80077dc <HAL_RCC_OscConfig+0x4b0>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a75      	ldr	r2, [pc, #468]	; (80077dc <HAL_RCC_OscConfig+0x4b0>)
 8007608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800760c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800760e:	f7fe fd2d 	bl	800606c <HAL_GetTick>
 8007612:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007614:	e008      	b.n	8007628 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007616:	f7fe fd29 	bl	800606c <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	2b02      	cmp	r3, #2
 8007622:	d901      	bls.n	8007628 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e118      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007628:	4b6c      	ldr	r3, [pc, #432]	; (80077dc <HAL_RCC_OscConfig+0x4b0>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007630:	2b00      	cmp	r3, #0
 8007632:	d0f0      	beq.n	8007616 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d106      	bne.n	800764a <HAL_RCC_OscConfig+0x31e>
 800763c:	4b66      	ldr	r3, [pc, #408]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 800763e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007640:	4a65      	ldr	r2, [pc, #404]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 8007642:	f043 0301 	orr.w	r3, r3, #1
 8007646:	6713      	str	r3, [r2, #112]	; 0x70
 8007648:	e01c      	b.n	8007684 <HAL_RCC_OscConfig+0x358>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	2b05      	cmp	r3, #5
 8007650:	d10c      	bne.n	800766c <HAL_RCC_OscConfig+0x340>
 8007652:	4b61      	ldr	r3, [pc, #388]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 8007654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007656:	4a60      	ldr	r2, [pc, #384]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 8007658:	f043 0304 	orr.w	r3, r3, #4
 800765c:	6713      	str	r3, [r2, #112]	; 0x70
 800765e:	4b5e      	ldr	r3, [pc, #376]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 8007660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007662:	4a5d      	ldr	r2, [pc, #372]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 8007664:	f043 0301 	orr.w	r3, r3, #1
 8007668:	6713      	str	r3, [r2, #112]	; 0x70
 800766a:	e00b      	b.n	8007684 <HAL_RCC_OscConfig+0x358>
 800766c:	4b5a      	ldr	r3, [pc, #360]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 800766e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007670:	4a59      	ldr	r2, [pc, #356]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 8007672:	f023 0301 	bic.w	r3, r3, #1
 8007676:	6713      	str	r3, [r2, #112]	; 0x70
 8007678:	4b57      	ldr	r3, [pc, #348]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 800767a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800767c:	4a56      	ldr	r2, [pc, #344]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 800767e:	f023 0304 	bic.w	r3, r3, #4
 8007682:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d015      	beq.n	80076b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800768c:	f7fe fcee 	bl	800606c <HAL_GetTick>
 8007690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007692:	e00a      	b.n	80076aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007694:	f7fe fcea 	bl	800606c <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d901      	bls.n	80076aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e0d7      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076aa:	4b4b      	ldr	r3, [pc, #300]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 80076ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0ee      	beq.n	8007694 <HAL_RCC_OscConfig+0x368>
 80076b6:	e014      	b.n	80076e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076b8:	f7fe fcd8 	bl	800606c <HAL_GetTick>
 80076bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076be:	e00a      	b.n	80076d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076c0:	f7fe fcd4 	bl	800606c <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e0c1      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076d6:	4b40      	ldr	r3, [pc, #256]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 80076d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1ee      	bne.n	80076c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d105      	bne.n	80076f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076e8:	4b3b      	ldr	r3, [pc, #236]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 80076ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ec:	4a3a      	ldr	r2, [pc, #232]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 80076ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 80ad 	beq.w	8007858 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076fe:	4b36      	ldr	r3, [pc, #216]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f003 030c 	and.w	r3, r3, #12
 8007706:	2b08      	cmp	r3, #8
 8007708:	d060      	beq.n	80077cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	2b02      	cmp	r3, #2
 8007710:	d145      	bne.n	800779e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007712:	4b33      	ldr	r3, [pc, #204]	; (80077e0 <HAL_RCC_OscConfig+0x4b4>)
 8007714:	2200      	movs	r2, #0
 8007716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007718:	f7fe fca8 	bl	800606c <HAL_GetTick>
 800771c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800771e:	e008      	b.n	8007732 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007720:	f7fe fca4 	bl	800606c <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	2b02      	cmp	r3, #2
 800772c:	d901      	bls.n	8007732 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e093      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007732:	4b29      	ldr	r3, [pc, #164]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1f0      	bne.n	8007720 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	69da      	ldr	r2, [r3, #28]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	431a      	orrs	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	019b      	lsls	r3, r3, #6
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007754:	085b      	lsrs	r3, r3, #1
 8007756:	3b01      	subs	r3, #1
 8007758:	041b      	lsls	r3, r3, #16
 800775a:	431a      	orrs	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	061b      	lsls	r3, r3, #24
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007768:	071b      	lsls	r3, r3, #28
 800776a:	491b      	ldr	r1, [pc, #108]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 800776c:	4313      	orrs	r3, r2
 800776e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007770:	4b1b      	ldr	r3, [pc, #108]	; (80077e0 <HAL_RCC_OscConfig+0x4b4>)
 8007772:	2201      	movs	r2, #1
 8007774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007776:	f7fe fc79 	bl	800606c <HAL_GetTick>
 800777a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800777c:	e008      	b.n	8007790 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800777e:	f7fe fc75 	bl	800606c <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d901      	bls.n	8007790 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e064      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007790:	4b11      	ldr	r3, [pc, #68]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0f0      	beq.n	800777e <HAL_RCC_OscConfig+0x452>
 800779c:	e05c      	b.n	8007858 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800779e:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <HAL_RCC_OscConfig+0x4b4>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a4:	f7fe fc62 	bl	800606c <HAL_GetTick>
 80077a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077aa:	e008      	b.n	80077be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077ac:	f7fe fc5e 	bl	800606c <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d901      	bls.n	80077be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e04d      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077be:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <HAL_RCC_OscConfig+0x4ac>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1f0      	bne.n	80077ac <HAL_RCC_OscConfig+0x480>
 80077ca:	e045      	b.n	8007858 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d107      	bne.n	80077e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e040      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
 80077d8:	40023800 	.word	0x40023800
 80077dc:	40007000 	.word	0x40007000
 80077e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077e4:	4b1f      	ldr	r3, [pc, #124]	; (8007864 <HAL_RCC_OscConfig+0x538>)
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d030      	beq.n	8007854 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d129      	bne.n	8007854 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800780a:	429a      	cmp	r2, r3
 800780c:	d122      	bne.n	8007854 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007814:	4013      	ands	r3, r2
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800781a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800781c:	4293      	cmp	r3, r2
 800781e:	d119      	bne.n	8007854 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782a:	085b      	lsrs	r3, r3, #1
 800782c:	3b01      	subs	r3, #1
 800782e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007830:	429a      	cmp	r2, r3
 8007832:	d10f      	bne.n	8007854 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007840:	429a      	cmp	r2, r3
 8007842:	d107      	bne.n	8007854 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007850:	429a      	cmp	r2, r3
 8007852:	d001      	beq.n	8007858 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e000      	b.n	800785a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	40023800 	.word	0x40023800

08007868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e04c      	b.n	8007914 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d111      	bne.n	80078aa <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f001 fe04 	bl	800949c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007898:	2b00      	cmp	r3, #0
 800789a:	d102      	bne.n	80078a2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a1f      	ldr	r2, [pc, #124]	; (800791c <HAL_TIM_Base_Init+0xb4>)
 80078a0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2202      	movs	r2, #2
 80078ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3304      	adds	r3, #4
 80078ba:	4619      	mov	r1, r3
 80078bc:	4610      	mov	r0, r2
 80078be:	f001 f9b3 	bl	8008c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	08002bb1 	.word	0x08002bb1

08007920 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b01      	cmp	r3, #1
 8007932:	d001      	beq.n	8007938 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e046      	b.n	80079c6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a23      	ldr	r2, [pc, #140]	; (80079d4 <HAL_TIM_Base_Start+0xb4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d022      	beq.n	8007990 <HAL_TIM_Base_Start+0x70>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007952:	d01d      	beq.n	8007990 <HAL_TIM_Base_Start+0x70>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a1f      	ldr	r2, [pc, #124]	; (80079d8 <HAL_TIM_Base_Start+0xb8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d018      	beq.n	8007990 <HAL_TIM_Base_Start+0x70>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a1e      	ldr	r2, [pc, #120]	; (80079dc <HAL_TIM_Base_Start+0xbc>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d013      	beq.n	8007990 <HAL_TIM_Base_Start+0x70>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a1c      	ldr	r2, [pc, #112]	; (80079e0 <HAL_TIM_Base_Start+0xc0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00e      	beq.n	8007990 <HAL_TIM_Base_Start+0x70>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1b      	ldr	r2, [pc, #108]	; (80079e4 <HAL_TIM_Base_Start+0xc4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d009      	beq.n	8007990 <HAL_TIM_Base_Start+0x70>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a19      	ldr	r2, [pc, #100]	; (80079e8 <HAL_TIM_Base_Start+0xc8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d004      	beq.n	8007990 <HAL_TIM_Base_Start+0x70>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a18      	ldr	r2, [pc, #96]	; (80079ec <HAL_TIM_Base_Start+0xcc>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d111      	bne.n	80079b4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b06      	cmp	r3, #6
 80079a0:	d010      	beq.n	80079c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f042 0201 	orr.w	r2, r2, #1
 80079b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b2:	e007      	b.n	80079c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0201 	orr.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	40010000 	.word	0x40010000
 80079d8:	40000400 	.word	0x40000400
 80079dc:	40000800 	.word	0x40000800
 80079e0:	40000c00 	.word	0x40000c00
 80079e4:	40010400 	.word	0x40010400
 80079e8:	40014000 	.word	0x40014000
 80079ec:	40001800 	.word	0x40001800

080079f0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6a1a      	ldr	r2, [r3, #32]
 80079fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a02:	4013      	ands	r3, r2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10f      	bne.n	8007a28 <HAL_TIM_Base_Stop+0x38>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6a1a      	ldr	r2, [r3, #32]
 8007a0e:	f240 4344 	movw	r3, #1092	; 0x444
 8007a12:	4013      	ands	r3, r2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d107      	bne.n	8007a28 <HAL_TIM_Base_Stop+0x38>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f022 0201 	bic.w	r2, r2, #1
 8007a26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
	...

08007a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d001      	beq.n	8007a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e04e      	b.n	8007af6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 0201 	orr.w	r2, r2, #1
 8007a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a23      	ldr	r2, [pc, #140]	; (8007b04 <HAL_TIM_Base_Start_IT+0xc4>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d022      	beq.n	8007ac0 <HAL_TIM_Base_Start_IT+0x80>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a82:	d01d      	beq.n	8007ac0 <HAL_TIM_Base_Start_IT+0x80>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a1f      	ldr	r2, [pc, #124]	; (8007b08 <HAL_TIM_Base_Start_IT+0xc8>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d018      	beq.n	8007ac0 <HAL_TIM_Base_Start_IT+0x80>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a1e      	ldr	r2, [pc, #120]	; (8007b0c <HAL_TIM_Base_Start_IT+0xcc>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d013      	beq.n	8007ac0 <HAL_TIM_Base_Start_IT+0x80>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a1c      	ldr	r2, [pc, #112]	; (8007b10 <HAL_TIM_Base_Start_IT+0xd0>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d00e      	beq.n	8007ac0 <HAL_TIM_Base_Start_IT+0x80>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a1b      	ldr	r2, [pc, #108]	; (8007b14 <HAL_TIM_Base_Start_IT+0xd4>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d009      	beq.n	8007ac0 <HAL_TIM_Base_Start_IT+0x80>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a19      	ldr	r2, [pc, #100]	; (8007b18 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d004      	beq.n	8007ac0 <HAL_TIM_Base_Start_IT+0x80>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a18      	ldr	r2, [pc, #96]	; (8007b1c <HAL_TIM_Base_Start_IT+0xdc>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d111      	bne.n	8007ae4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2b06      	cmp	r3, #6
 8007ad0:	d010      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f042 0201 	orr.w	r2, r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ae2:	e007      	b.n	8007af4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0201 	orr.w	r2, r2, #1
 8007af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	40010000 	.word	0x40010000
 8007b08:	40000400 	.word	0x40000400
 8007b0c:	40000800 	.word	0x40000800
 8007b10:	40000c00 	.word	0x40000c00
 8007b14:	40010400 	.word	0x40010400
 8007b18:	40014000 	.word	0x40014000
 8007b1c:	40001800 	.word	0x40001800

08007b20 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0201 	bic.w	r2, r2, #1
 8007b36:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6a1a      	ldr	r2, [r3, #32]
 8007b3e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b42:	4013      	ands	r3, r2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10f      	bne.n	8007b68 <HAL_TIM_Base_Stop_IT+0x48>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6a1a      	ldr	r2, [r3, #32]
 8007b4e:	f240 4344 	movw	r3, #1092	; 0x444
 8007b52:	4013      	ands	r3, r2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d107      	bne.n	8007b68 <HAL_TIM_Base_Stop_IT+0x48>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f022 0201 	bic.w	r2, r2, #1
 8007b66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
	...

08007b80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e04c      	b.n	8007c2c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d111      	bne.n	8007bc2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 fc78 	bl	800949c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d102      	bne.n	8007bba <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a1f      	ldr	r2, [pc, #124]	; (8007c34 <HAL_TIM_PWM_Init+0xb4>)
 8007bb8:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	f001 f827 	bl	8008c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	08007c39 	.word	0x08007c39

08007c38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d109      	bne.n	8007c70 <HAL_TIM_PWM_Start+0x24>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	bf14      	ite	ne
 8007c68:	2301      	movne	r3, #1
 8007c6a:	2300      	moveq	r3, #0
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	e022      	b.n	8007cb6 <HAL_TIM_PWM_Start+0x6a>
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d109      	bne.n	8007c8a <HAL_TIM_PWM_Start+0x3e>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	bf14      	ite	ne
 8007c82:	2301      	movne	r3, #1
 8007c84:	2300      	moveq	r3, #0
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	e015      	b.n	8007cb6 <HAL_TIM_PWM_Start+0x6a>
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d109      	bne.n	8007ca4 <HAL_TIM_PWM_Start+0x58>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	bf14      	ite	ne
 8007c9c:	2301      	movne	r3, #1
 8007c9e:	2300      	moveq	r3, #0
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	e008      	b.n	8007cb6 <HAL_TIM_PWM_Start+0x6a>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	bf14      	ite	ne
 8007cb0:	2301      	movne	r3, #1
 8007cb2:	2300      	moveq	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e07c      	b.n	8007db8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d104      	bne.n	8007cce <HAL_TIM_PWM_Start+0x82>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ccc:	e013      	b.n	8007cf6 <HAL_TIM_PWM_Start+0xaa>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	d104      	bne.n	8007cde <HAL_TIM_PWM_Start+0x92>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cdc:	e00b      	b.n	8007cf6 <HAL_TIM_PWM_Start+0xaa>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d104      	bne.n	8007cee <HAL_TIM_PWM_Start+0xa2>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cec:	e003      	b.n	8007cf6 <HAL_TIM_PWM_Start+0xaa>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f001 fba6 	bl	8009450 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a2d      	ldr	r2, [pc, #180]	; (8007dc0 <HAL_TIM_PWM_Start+0x174>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d004      	beq.n	8007d18 <HAL_TIM_PWM_Start+0xcc>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a2c      	ldr	r2, [pc, #176]	; (8007dc4 <HAL_TIM_PWM_Start+0x178>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d101      	bne.n	8007d1c <HAL_TIM_PWM_Start+0xd0>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e000      	b.n	8007d1e <HAL_TIM_PWM_Start+0xd2>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d007      	beq.n	8007d32 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a22      	ldr	r2, [pc, #136]	; (8007dc0 <HAL_TIM_PWM_Start+0x174>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d022      	beq.n	8007d82 <HAL_TIM_PWM_Start+0x136>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d44:	d01d      	beq.n	8007d82 <HAL_TIM_PWM_Start+0x136>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a1f      	ldr	r2, [pc, #124]	; (8007dc8 <HAL_TIM_PWM_Start+0x17c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d018      	beq.n	8007d82 <HAL_TIM_PWM_Start+0x136>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a1d      	ldr	r2, [pc, #116]	; (8007dcc <HAL_TIM_PWM_Start+0x180>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d013      	beq.n	8007d82 <HAL_TIM_PWM_Start+0x136>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a1c      	ldr	r2, [pc, #112]	; (8007dd0 <HAL_TIM_PWM_Start+0x184>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00e      	beq.n	8007d82 <HAL_TIM_PWM_Start+0x136>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a16      	ldr	r2, [pc, #88]	; (8007dc4 <HAL_TIM_PWM_Start+0x178>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d009      	beq.n	8007d82 <HAL_TIM_PWM_Start+0x136>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a18      	ldr	r2, [pc, #96]	; (8007dd4 <HAL_TIM_PWM_Start+0x188>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d004      	beq.n	8007d82 <HAL_TIM_PWM_Start+0x136>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a16      	ldr	r2, [pc, #88]	; (8007dd8 <HAL_TIM_PWM_Start+0x18c>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d111      	bne.n	8007da6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f003 0307 	and.w	r3, r3, #7
 8007d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b06      	cmp	r3, #6
 8007d92:	d010      	beq.n	8007db6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f042 0201 	orr.w	r2, r2, #1
 8007da2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007da4:	e007      	b.n	8007db6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f042 0201 	orr.w	r2, r2, #1
 8007db4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	40010000 	.word	0x40010000
 8007dc4:	40010400 	.word	0x40010400
 8007dc8:	40000400 	.word	0x40000400
 8007dcc:	40000800 	.word	0x40000800
 8007dd0:	40000c00 	.word	0x40000c00
 8007dd4:	40014000 	.word	0x40014000
 8007dd8:	40001800 	.word	0x40001800

08007ddc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e04c      	b.n	8007e88 <HAL_TIM_IC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d111      	bne.n	8007e1e <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f001 fb4a 	bl	800949c <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d102      	bne.n	8007e16 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a1f      	ldr	r2, [pc, #124]	; (8007e90 <HAL_TIM_IC_Init+0xb4>)
 8007e14:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2202      	movs	r2, #2
 8007e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4610      	mov	r0, r2
 8007e32:	f000 fef9 	bl	8008c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	08007e95 	.word	0x08007e95

08007e94 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d104      	bne.n	8007ec6 <HAL_TIM_IC_Start_IT+0x1e>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	e013      	b.n	8007eee <HAL_TIM_IC_Start_IT+0x46>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b04      	cmp	r3, #4
 8007eca:	d104      	bne.n	8007ed6 <HAL_TIM_IC_Start_IT+0x2e>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	e00b      	b.n	8007eee <HAL_TIM_IC_Start_IT+0x46>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b08      	cmp	r3, #8
 8007eda:	d104      	bne.n	8007ee6 <HAL_TIM_IC_Start_IT+0x3e>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	e003      	b.n	8007eee <HAL_TIM_IC_Start_IT+0x46>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d104      	bne.n	8007f00 <HAL_TIM_IC_Start_IT+0x58>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	e013      	b.n	8007f28 <HAL_TIM_IC_Start_IT+0x80>
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2b04      	cmp	r3, #4
 8007f04:	d104      	bne.n	8007f10 <HAL_TIM_IC_Start_IT+0x68>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	e00b      	b.n	8007f28 <HAL_TIM_IC_Start_IT+0x80>
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2b08      	cmp	r3, #8
 8007f14:	d104      	bne.n	8007f20 <HAL_TIM_IC_Start_IT+0x78>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	e003      	b.n	8007f28 <HAL_TIM_IC_Start_IT+0x80>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d102      	bne.n	8007f36 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f30:	7b7b      	ldrb	r3, [r7, #13]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d001      	beq.n	8007f3a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e0cc      	b.n	80080d4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d104      	bne.n	8007f4a <HAL_TIM_IC_Start_IT+0xa2>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f48:	e013      	b.n	8007f72 <HAL_TIM_IC_Start_IT+0xca>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d104      	bne.n	8007f5a <HAL_TIM_IC_Start_IT+0xb2>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f58:	e00b      	b.n	8007f72 <HAL_TIM_IC_Start_IT+0xca>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	d104      	bne.n	8007f6a <HAL_TIM_IC_Start_IT+0xc2>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f68:	e003      	b.n	8007f72 <HAL_TIM_IC_Start_IT+0xca>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d104      	bne.n	8007f82 <HAL_TIM_IC_Start_IT+0xda>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f80:	e013      	b.n	8007faa <HAL_TIM_IC_Start_IT+0x102>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d104      	bne.n	8007f92 <HAL_TIM_IC_Start_IT+0xea>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f90:	e00b      	b.n	8007faa <HAL_TIM_IC_Start_IT+0x102>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b08      	cmp	r3, #8
 8007f96:	d104      	bne.n	8007fa2 <HAL_TIM_IC_Start_IT+0xfa>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fa0:	e003      	b.n	8007faa <HAL_TIM_IC_Start_IT+0x102>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b0c      	cmp	r3, #12
 8007fae:	d841      	bhi.n	8008034 <HAL_TIM_IC_Start_IT+0x18c>
 8007fb0:	a201      	add	r2, pc, #4	; (adr r2, 8007fb8 <HAL_TIM_IC_Start_IT+0x110>)
 8007fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb6:	bf00      	nop
 8007fb8:	08007fed 	.word	0x08007fed
 8007fbc:	08008035 	.word	0x08008035
 8007fc0:	08008035 	.word	0x08008035
 8007fc4:	08008035 	.word	0x08008035
 8007fc8:	08007fff 	.word	0x08007fff
 8007fcc:	08008035 	.word	0x08008035
 8007fd0:	08008035 	.word	0x08008035
 8007fd4:	08008035 	.word	0x08008035
 8007fd8:	08008011 	.word	0x08008011
 8007fdc:	08008035 	.word	0x08008035
 8007fe0:	08008035 	.word	0x08008035
 8007fe4:	08008035 	.word	0x08008035
 8007fe8:	08008023 	.word	0x08008023
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68da      	ldr	r2, [r3, #12]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0202 	orr.w	r2, r2, #2
 8007ffa:	60da      	str	r2, [r3, #12]
      break;
 8007ffc:	e01d      	b.n	800803a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68da      	ldr	r2, [r3, #12]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f042 0204 	orr.w	r2, r2, #4
 800800c:	60da      	str	r2, [r3, #12]
      break;
 800800e:	e014      	b.n	800803a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f042 0208 	orr.w	r2, r2, #8
 800801e:	60da      	str	r2, [r3, #12]
      break;
 8008020:	e00b      	b.n	800803a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68da      	ldr	r2, [r3, #12]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f042 0210 	orr.w	r2, r2, #16
 8008030:	60da      	str	r2, [r3, #12]
      break;
 8008032:	e002      	b.n	800803a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	73fb      	strb	r3, [r7, #15]
      break;
 8008038:	bf00      	nop
  }

  if (status == HAL_OK)
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d148      	bne.n	80080d2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2201      	movs	r2, #1
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	4618      	mov	r0, r3
 800804a:	f001 fa01 	bl	8009450 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a22      	ldr	r2, [pc, #136]	; (80080dc <HAL_TIM_IC_Start_IT+0x234>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d022      	beq.n	800809e <HAL_TIM_IC_Start_IT+0x1f6>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008060:	d01d      	beq.n	800809e <HAL_TIM_IC_Start_IT+0x1f6>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a1e      	ldr	r2, [pc, #120]	; (80080e0 <HAL_TIM_IC_Start_IT+0x238>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d018      	beq.n	800809e <HAL_TIM_IC_Start_IT+0x1f6>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a1c      	ldr	r2, [pc, #112]	; (80080e4 <HAL_TIM_IC_Start_IT+0x23c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d013      	beq.n	800809e <HAL_TIM_IC_Start_IT+0x1f6>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a1b      	ldr	r2, [pc, #108]	; (80080e8 <HAL_TIM_IC_Start_IT+0x240>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00e      	beq.n	800809e <HAL_TIM_IC_Start_IT+0x1f6>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a19      	ldr	r2, [pc, #100]	; (80080ec <HAL_TIM_IC_Start_IT+0x244>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d009      	beq.n	800809e <HAL_TIM_IC_Start_IT+0x1f6>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a18      	ldr	r2, [pc, #96]	; (80080f0 <HAL_TIM_IC_Start_IT+0x248>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d004      	beq.n	800809e <HAL_TIM_IC_Start_IT+0x1f6>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a16      	ldr	r2, [pc, #88]	; (80080f4 <HAL_TIM_IC_Start_IT+0x24c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d111      	bne.n	80080c2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f003 0307 	and.w	r3, r3, #7
 80080a8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2b06      	cmp	r3, #6
 80080ae:	d010      	beq.n	80080d2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0201 	orr.w	r2, r2, #1
 80080be:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080c0:	e007      	b.n	80080d2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f042 0201 	orr.w	r2, r2, #1
 80080d0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	40010000 	.word	0x40010000
 80080e0:	40000400 	.word	0x40000400
 80080e4:	40000800 	.word	0x40000800
 80080e8:	40000c00 	.word	0x40000c00
 80080ec:	40010400 	.word	0x40010400
 80080f0:	40014000 	.word	0x40014000
 80080f4:	40001800 	.word	0x40001800

080080f8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	73fb      	strb	r3, [r7, #15]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b0c      	cmp	r3, #12
 800810a:	d841      	bhi.n	8008190 <HAL_TIM_IC_Stop_IT+0x98>
 800810c:	a201      	add	r2, pc, #4	; (adr r2, 8008114 <HAL_TIM_IC_Stop_IT+0x1c>)
 800810e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008112:	bf00      	nop
 8008114:	08008149 	.word	0x08008149
 8008118:	08008191 	.word	0x08008191
 800811c:	08008191 	.word	0x08008191
 8008120:	08008191 	.word	0x08008191
 8008124:	0800815b 	.word	0x0800815b
 8008128:	08008191 	.word	0x08008191
 800812c:	08008191 	.word	0x08008191
 8008130:	08008191 	.word	0x08008191
 8008134:	0800816d 	.word	0x0800816d
 8008138:	08008191 	.word	0x08008191
 800813c:	08008191 	.word	0x08008191
 8008140:	08008191 	.word	0x08008191
 8008144:	0800817f 	.word	0x0800817f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68da      	ldr	r2, [r3, #12]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f022 0202 	bic.w	r2, r2, #2
 8008156:	60da      	str	r2, [r3, #12]
      break;
 8008158:	e01d      	b.n	8008196 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68da      	ldr	r2, [r3, #12]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0204 	bic.w	r2, r2, #4
 8008168:	60da      	str	r2, [r3, #12]
      break;
 800816a:	e014      	b.n	8008196 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0208 	bic.w	r2, r2, #8
 800817a:	60da      	str	r2, [r3, #12]
      break;
 800817c:	e00b      	b.n	8008196 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68da      	ldr	r2, [r3, #12]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f022 0210 	bic.w	r2, r2, #16
 800818c:	60da      	str	r2, [r3, #12]
      break;
 800818e:	e002      	b.n	8008196 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	73fb      	strb	r3, [r7, #15]
      break;
 8008194:	bf00      	nop
  }

  if (status == HAL_OK)
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d156      	bne.n	800824a <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2200      	movs	r2, #0
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f001 f953 	bl	8009450 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6a1a      	ldr	r2, [r3, #32]
 80081b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80081b4:	4013      	ands	r3, r2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10f      	bne.n	80081da <HAL_TIM_IC_Stop_IT+0xe2>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6a1a      	ldr	r2, [r3, #32]
 80081c0:	f240 4344 	movw	r3, #1092	; 0x444
 80081c4:	4013      	ands	r3, r2
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d107      	bne.n	80081da <HAL_TIM_IC_Stop_IT+0xe2>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f022 0201 	bic.w	r2, r2, #1
 80081d8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d104      	bne.n	80081ea <HAL_TIM_IC_Stop_IT+0xf2>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081e8:	e013      	b.n	8008212 <HAL_TIM_IC_Stop_IT+0x11a>
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	d104      	bne.n	80081fa <HAL_TIM_IC_Stop_IT+0x102>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081f8:	e00b      	b.n	8008212 <HAL_TIM_IC_Stop_IT+0x11a>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b08      	cmp	r3, #8
 80081fe:	d104      	bne.n	800820a <HAL_TIM_IC_Stop_IT+0x112>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008208:	e003      	b.n	8008212 <HAL_TIM_IC_Stop_IT+0x11a>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d104      	bne.n	8008222 <HAL_TIM_IC_Stop_IT+0x12a>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008220:	e013      	b.n	800824a <HAL_TIM_IC_Stop_IT+0x152>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b04      	cmp	r3, #4
 8008226:	d104      	bne.n	8008232 <HAL_TIM_IC_Stop_IT+0x13a>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008230:	e00b      	b.n	800824a <HAL_TIM_IC_Stop_IT+0x152>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b08      	cmp	r3, #8
 8008236:	d104      	bne.n	8008242 <HAL_TIM_IC_Stop_IT+0x14a>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008240:	e003      	b.n	800824a <HAL_TIM_IC_Stop_IT+0x152>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e0a2      	b.n	80083ae <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b00      	cmp	r3, #0
 8008272:	d111      	bne.n	8008298 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 f90d 	bl	800949c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008286:	2b00      	cmp	r3, #0
 8008288:	d102      	bne.n	8008290 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a4a      	ldr	r2, [pc, #296]	; (80083b8 <HAL_TIM_Encoder_Init+0x164>)
 800828e:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	6812      	ldr	r2, [r2, #0]
 80082aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082ae:	f023 0307 	bic.w	r3, r3, #7
 80082b2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3304      	adds	r3, #4
 80082bc:	4619      	mov	r1, r3
 80082be:	4610      	mov	r0, r2
 80082c0:	f000 fcb2 	bl	8008c28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082ec:	f023 0303 	bic.w	r3, r3, #3
 80082f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	689a      	ldr	r2, [r3, #8]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	021b      	lsls	r3, r3, #8
 80082fc:	4313      	orrs	r3, r2
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	4313      	orrs	r3, r2
 8008302:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800830a:	f023 030c 	bic.w	r3, r3, #12
 800830e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800831a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	68da      	ldr	r2, [r3, #12]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	021b      	lsls	r3, r3, #8
 8008326:	4313      	orrs	r3, r2
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	4313      	orrs	r3, r2
 800832c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	011a      	lsls	r2, r3, #4
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	031b      	lsls	r3, r3, #12
 800833a:	4313      	orrs	r3, r2
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	4313      	orrs	r3, r2
 8008340:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008348:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008350:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	011b      	lsls	r3, r3, #4
 800835c:	4313      	orrs	r3, r2
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	4313      	orrs	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	08002d21 	.word	0x08002d21

080083bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80083d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80083e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d110      	bne.n	800840e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d102      	bne.n	80083f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80083f2:	7b7b      	ldrb	r3, [r7, #13]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d001      	beq.n	80083fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e069      	b.n	80084d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2202      	movs	r2, #2
 8008408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800840c:	e031      	b.n	8008472 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b04      	cmp	r3, #4
 8008412:	d110      	bne.n	8008436 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d102      	bne.n	8008420 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800841a:	7b3b      	ldrb	r3, [r7, #12]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d001      	beq.n	8008424 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e055      	b.n	80084d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2202      	movs	r2, #2
 8008428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2202      	movs	r2, #2
 8008430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008434:	e01d      	b.n	8008472 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d108      	bne.n	800844e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d105      	bne.n	800844e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008442:	7b7b      	ldrb	r3, [r7, #13]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d102      	bne.n	800844e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008448:	7b3b      	ldrb	r3, [r7, #12]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d001      	beq.n	8008452 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e03e      	b.n	80084d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2202      	movs	r2, #2
 8008456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2202      	movs	r2, #2
 800845e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2202      	movs	r2, #2
 8008466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2202      	movs	r2, #2
 800846e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d003      	beq.n	8008480 <HAL_TIM_Encoder_Start+0xc4>
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	2b04      	cmp	r3, #4
 800847c:	d008      	beq.n	8008490 <HAL_TIM_Encoder_Start+0xd4>
 800847e:	e00f      	b.n	80084a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2201      	movs	r2, #1
 8008486:	2100      	movs	r1, #0
 8008488:	4618      	mov	r0, r3
 800848a:	f000 ffe1 	bl	8009450 <TIM_CCxChannelCmd>
      break;
 800848e:	e016      	b.n	80084be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2201      	movs	r2, #1
 8008496:	2104      	movs	r1, #4
 8008498:	4618      	mov	r0, r3
 800849a:	f000 ffd9 	bl	8009450 <TIM_CCxChannelCmd>
      break;
 800849e:	e00e      	b.n	80084be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2201      	movs	r2, #1
 80084a6:	2100      	movs	r1, #0
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 ffd1 	bl	8009450 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2201      	movs	r2, #1
 80084b4:	2104      	movs	r1, #4
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 ffca 	bl	8009450 <TIM_CCxChannelCmd>
      break;
 80084bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f042 0201 	orr.w	r2, r2, #1
 80084cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d128      	bne.n	8008540 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f003 0302 	and.w	r3, r3, #2
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d121      	bne.n	8008540 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f06f 0202 	mvn.w	r2, #2
 8008504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	f003 0303 	and.w	r3, r3, #3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d005      	beq.n	8008526 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	4798      	blx	r3
 8008524:	e009      	b.n	800853a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	f003 0304 	and.w	r3, r3, #4
 800854a:	2b04      	cmp	r3, #4
 800854c:	d128      	bne.n	80085a0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	2b04      	cmp	r3, #4
 800855a:	d121      	bne.n	80085a0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f06f 0204 	mvn.w	r2, #4
 8008564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2202      	movs	r2, #2
 800856a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008576:	2b00      	cmp	r3, #0
 8008578:	d005      	beq.n	8008586 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	4798      	blx	r3
 8008584:	e009      	b.n	800859a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f003 0308 	and.w	r3, r3, #8
 80085aa:	2b08      	cmp	r3, #8
 80085ac:	d128      	bne.n	8008600 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f003 0308 	and.w	r3, r3, #8
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d121      	bne.n	8008600 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f06f 0208 	mvn.w	r2, #8
 80085c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2204      	movs	r2, #4
 80085ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	69db      	ldr	r3, [r3, #28]
 80085d2:	f003 0303 	and.w	r3, r3, #3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	4798      	blx	r3
 80085e4:	e009      	b.n	80085fa <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f003 0310 	and.w	r3, r3, #16
 800860a:	2b10      	cmp	r3, #16
 800860c:	d128      	bne.n	8008660 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	f003 0310 	and.w	r3, r3, #16
 8008618:	2b10      	cmp	r3, #16
 800861a:	d121      	bne.n	8008660 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f06f 0210 	mvn.w	r2, #16
 8008624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2208      	movs	r2, #8
 800862a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008636:	2b00      	cmp	r3, #0
 8008638:	d005      	beq.n	8008646 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	4798      	blx	r3
 8008644:	e009      	b.n	800865a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b01      	cmp	r3, #1
 800866c:	d110      	bne.n	8008690 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b01      	cmp	r3, #1
 800867a:	d109      	bne.n	8008690 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f06f 0201 	mvn.w	r2, #1
 8008684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869a:	2b80      	cmp	r3, #128	; 0x80
 800869c:	d110      	bne.n	80086c0 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a8:	2b80      	cmp	r3, #128	; 0x80
 80086aa:	d109      	bne.n	80086c0 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ca:	2b40      	cmp	r3, #64	; 0x40
 80086cc:	d110      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d8:	2b40      	cmp	r3, #64	; 0x40
 80086da:	d109      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f003 0320 	and.w	r3, r3, #32
 80086fa:	2b20      	cmp	r3, #32
 80086fc:	d110      	bne.n	8008720 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f003 0320 	and.w	r3, r3, #32
 8008708:	2b20      	cmp	r3, #32
 800870a:	d109      	bne.n	8008720 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f06f 0220 	mvn.w	r2, #32
 8008714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800873e:	2b01      	cmp	r3, #1
 8008740:	d101      	bne.n	8008746 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008742:	2302      	movs	r3, #2
 8008744:	e088      	b.n	8008858 <HAL_TIM_IC_ConfigChannel+0x130>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d11b      	bne.n	800878c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6818      	ldr	r0, [r3, #0]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	6819      	ldr	r1, [r3, #0]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	685a      	ldr	r2, [r3, #4]
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	f000 fcb0 	bl	80090c8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	699a      	ldr	r2, [r3, #24]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f022 020c 	bic.w	r2, r2, #12
 8008776:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6999      	ldr	r1, [r3, #24]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	689a      	ldr	r2, [r3, #8]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	430a      	orrs	r2, r1
 8008788:	619a      	str	r2, [r3, #24]
 800878a:	e060      	b.n	800884e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b04      	cmp	r3, #4
 8008790:	d11c      	bne.n	80087cc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6818      	ldr	r0, [r3, #0]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	6819      	ldr	r1, [r3, #0]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f000 fd34 	bl	800920e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	699a      	ldr	r2, [r3, #24]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80087b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6999      	ldr	r1, [r3, #24]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	021a      	lsls	r2, r3, #8
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	619a      	str	r2, [r3, #24]
 80087ca:	e040      	b.n	800884e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b08      	cmp	r3, #8
 80087d0:	d11b      	bne.n	800880a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6819      	ldr	r1, [r3, #0]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	f000 fd81 	bl	80092e8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69da      	ldr	r2, [r3, #28]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f022 020c 	bic.w	r2, r2, #12
 80087f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	69d9      	ldr	r1, [r3, #28]
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	689a      	ldr	r2, [r3, #8]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	430a      	orrs	r2, r1
 8008806:	61da      	str	r2, [r3, #28]
 8008808:	e021      	b.n	800884e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b0c      	cmp	r3, #12
 800880e:	d11c      	bne.n	800884a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6818      	ldr	r0, [r3, #0]
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	6819      	ldr	r1, [r3, #0]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f000 fd9e 	bl	8009360 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	69da      	ldr	r2, [r3, #28]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008832:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	69d9      	ldr	r1, [r3, #28]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	021a      	lsls	r2, r3, #8
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	61da      	str	r2, [r3, #28]
 8008848:	e001      	b.n	800884e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008856:	7dfb      	ldrb	r3, [r7, #23]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3718      	adds	r7, #24
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008876:	2b01      	cmp	r3, #1
 8008878:	d101      	bne.n	800887e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800887a:	2302      	movs	r3, #2
 800887c:	e0ae      	b.n	80089dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b0c      	cmp	r3, #12
 800888a:	f200 809f 	bhi.w	80089cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800888e:	a201      	add	r2, pc, #4	; (adr r2, 8008894 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008894:	080088c9 	.word	0x080088c9
 8008898:	080089cd 	.word	0x080089cd
 800889c:	080089cd 	.word	0x080089cd
 80088a0:	080089cd 	.word	0x080089cd
 80088a4:	08008909 	.word	0x08008909
 80088a8:	080089cd 	.word	0x080089cd
 80088ac:	080089cd 	.word	0x080089cd
 80088b0:	080089cd 	.word	0x080089cd
 80088b4:	0800894b 	.word	0x0800894b
 80088b8:	080089cd 	.word	0x080089cd
 80088bc:	080089cd 	.word	0x080089cd
 80088c0:	080089cd 	.word	0x080089cd
 80088c4:	0800898b 	.word	0x0800898b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68b9      	ldr	r1, [r7, #8]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 fa4a 	bl	8008d68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	699a      	ldr	r2, [r3, #24]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f042 0208 	orr.w	r2, r2, #8
 80088e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	699a      	ldr	r2, [r3, #24]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f022 0204 	bic.w	r2, r2, #4
 80088f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6999      	ldr	r1, [r3, #24]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	691a      	ldr	r2, [r3, #16]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	430a      	orrs	r2, r1
 8008904:	619a      	str	r2, [r3, #24]
      break;
 8008906:	e064      	b.n	80089d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68b9      	ldr	r1, [r7, #8]
 800890e:	4618      	mov	r0, r3
 8008910:	f000 fa9a 	bl	8008e48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	699a      	ldr	r2, [r3, #24]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	699a      	ldr	r2, [r3, #24]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6999      	ldr	r1, [r3, #24]
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	021a      	lsls	r2, r3, #8
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	619a      	str	r2, [r3, #24]
      break;
 8008948:	e043      	b.n	80089d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68b9      	ldr	r1, [r7, #8]
 8008950:	4618      	mov	r0, r3
 8008952:	f000 faef 	bl	8008f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	69da      	ldr	r2, [r3, #28]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f042 0208 	orr.w	r2, r2, #8
 8008964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	69da      	ldr	r2, [r3, #28]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f022 0204 	bic.w	r2, r2, #4
 8008974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	69d9      	ldr	r1, [r3, #28]
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	691a      	ldr	r2, [r3, #16]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	61da      	str	r2, [r3, #28]
      break;
 8008988:	e023      	b.n	80089d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68b9      	ldr	r1, [r7, #8]
 8008990:	4618      	mov	r0, r3
 8008992:	f000 fb43 	bl	800901c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	69da      	ldr	r2, [r3, #28]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	69da      	ldr	r2, [r3, #28]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	69d9      	ldr	r1, [r3, #28]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	021a      	lsls	r2, r3, #8
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	61da      	str	r2, [r3, #28]
      break;
 80089ca:	e002      	b.n	80089d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	75fb      	strb	r3, [r7, #23]
      break;
 80089d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089da:	7dfb      	ldrb	r3, [r7, #23]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d101      	bne.n	8008a00 <HAL_TIM_ConfigClockSource+0x1c>
 80089fc:	2302      	movs	r3, #2
 80089fe:	e0b4      	b.n	8008b6a <HAL_TIM_ConfigClockSource+0x186>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a38:	d03e      	beq.n	8008ab8 <HAL_TIM_ConfigClockSource+0xd4>
 8008a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a3e:	f200 8087 	bhi.w	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
 8008a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a46:	f000 8086 	beq.w	8008b56 <HAL_TIM_ConfigClockSource+0x172>
 8008a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a4e:	d87f      	bhi.n	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
 8008a50:	2b70      	cmp	r3, #112	; 0x70
 8008a52:	d01a      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0xa6>
 8008a54:	2b70      	cmp	r3, #112	; 0x70
 8008a56:	d87b      	bhi.n	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
 8008a58:	2b60      	cmp	r3, #96	; 0x60
 8008a5a:	d050      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0x11a>
 8008a5c:	2b60      	cmp	r3, #96	; 0x60
 8008a5e:	d877      	bhi.n	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
 8008a60:	2b50      	cmp	r3, #80	; 0x50
 8008a62:	d03c      	beq.n	8008ade <HAL_TIM_ConfigClockSource+0xfa>
 8008a64:	2b50      	cmp	r3, #80	; 0x50
 8008a66:	d873      	bhi.n	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
 8008a68:	2b40      	cmp	r3, #64	; 0x40
 8008a6a:	d058      	beq.n	8008b1e <HAL_TIM_ConfigClockSource+0x13a>
 8008a6c:	2b40      	cmp	r3, #64	; 0x40
 8008a6e:	d86f      	bhi.n	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
 8008a70:	2b30      	cmp	r3, #48	; 0x30
 8008a72:	d064      	beq.n	8008b3e <HAL_TIM_ConfigClockSource+0x15a>
 8008a74:	2b30      	cmp	r3, #48	; 0x30
 8008a76:	d86b      	bhi.n	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
 8008a78:	2b20      	cmp	r3, #32
 8008a7a:	d060      	beq.n	8008b3e <HAL_TIM_ConfigClockSource+0x15a>
 8008a7c:	2b20      	cmp	r3, #32
 8008a7e:	d867      	bhi.n	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d05c      	beq.n	8008b3e <HAL_TIM_ConfigClockSource+0x15a>
 8008a84:	2b10      	cmp	r3, #16
 8008a86:	d05a      	beq.n	8008b3e <HAL_TIM_ConfigClockSource+0x15a>
 8008a88:	e062      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6818      	ldr	r0, [r3, #0]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	6899      	ldr	r1, [r3, #8]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	f000 fcb9 	bl	8009410 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008aac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	609a      	str	r2, [r3, #8]
      break;
 8008ab6:	e04f      	b.n	8008b58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6818      	ldr	r0, [r3, #0]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	6899      	ldr	r1, [r3, #8]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f000 fca2 	bl	8009410 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689a      	ldr	r2, [r3, #8]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ada:	609a      	str	r2, [r3, #8]
      break;
 8008adc:	e03c      	b.n	8008b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	6859      	ldr	r1, [r3, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	461a      	mov	r2, r3
 8008aec:	f000 fb60 	bl	80091b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2150      	movs	r1, #80	; 0x50
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 fc6f 	bl	80093da <TIM_ITRx_SetConfig>
      break;
 8008afc:	e02c      	b.n	8008b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6818      	ldr	r0, [r3, #0]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	6859      	ldr	r1, [r3, #4]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	f000 fbbc 	bl	8009288 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2160      	movs	r1, #96	; 0x60
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 fc5f 	bl	80093da <TIM_ITRx_SetConfig>
      break;
 8008b1c:	e01c      	b.n	8008b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6818      	ldr	r0, [r3, #0]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	6859      	ldr	r1, [r3, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f000 fb40 	bl	80091b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2140      	movs	r1, #64	; 0x40
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 fc4f 	bl	80093da <TIM_ITRx_SetConfig>
      break;
 8008b3c:	e00c      	b.n	8008b58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4619      	mov	r1, r3
 8008b48:	4610      	mov	r0, r2
 8008b4a:	f000 fc46 	bl	80093da <TIM_ITRx_SetConfig>
      break;
 8008b4e:	e003      	b.n	8008b58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	73fb      	strb	r3, [r7, #15]
      break;
 8008b54:	e000      	b.n	8008b58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008b7a:	bf00      	nop
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b8e:	bf00      	nop
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ba2:	bf00      	nop
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b083      	sub	sp, #12
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008bb6:	bf00      	nop
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bca:	bf00      	nop
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b083      	sub	sp, #12
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008bde:	bf00      	nop
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bf2:	bf00      	nop
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008c06:	bf00      	nop
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008c1a:	bf00      	nop
 8008c1c:	370c      	adds	r7, #12
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
	...

08008c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a40      	ldr	r2, [pc, #256]	; (8008d3c <TIM_Base_SetConfig+0x114>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d013      	beq.n	8008c68 <TIM_Base_SetConfig+0x40>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c46:	d00f      	beq.n	8008c68 <TIM_Base_SetConfig+0x40>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a3d      	ldr	r2, [pc, #244]	; (8008d40 <TIM_Base_SetConfig+0x118>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d00b      	beq.n	8008c68 <TIM_Base_SetConfig+0x40>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a3c      	ldr	r2, [pc, #240]	; (8008d44 <TIM_Base_SetConfig+0x11c>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d007      	beq.n	8008c68 <TIM_Base_SetConfig+0x40>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a3b      	ldr	r2, [pc, #236]	; (8008d48 <TIM_Base_SetConfig+0x120>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d003      	beq.n	8008c68 <TIM_Base_SetConfig+0x40>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a3a      	ldr	r2, [pc, #232]	; (8008d4c <TIM_Base_SetConfig+0x124>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d108      	bne.n	8008c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a2f      	ldr	r2, [pc, #188]	; (8008d3c <TIM_Base_SetConfig+0x114>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d02b      	beq.n	8008cda <TIM_Base_SetConfig+0xb2>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c88:	d027      	beq.n	8008cda <TIM_Base_SetConfig+0xb2>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a2c      	ldr	r2, [pc, #176]	; (8008d40 <TIM_Base_SetConfig+0x118>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d023      	beq.n	8008cda <TIM_Base_SetConfig+0xb2>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a2b      	ldr	r2, [pc, #172]	; (8008d44 <TIM_Base_SetConfig+0x11c>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d01f      	beq.n	8008cda <TIM_Base_SetConfig+0xb2>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a2a      	ldr	r2, [pc, #168]	; (8008d48 <TIM_Base_SetConfig+0x120>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d01b      	beq.n	8008cda <TIM_Base_SetConfig+0xb2>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a29      	ldr	r2, [pc, #164]	; (8008d4c <TIM_Base_SetConfig+0x124>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d017      	beq.n	8008cda <TIM_Base_SetConfig+0xb2>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a28      	ldr	r2, [pc, #160]	; (8008d50 <TIM_Base_SetConfig+0x128>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d013      	beq.n	8008cda <TIM_Base_SetConfig+0xb2>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a27      	ldr	r2, [pc, #156]	; (8008d54 <TIM_Base_SetConfig+0x12c>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d00f      	beq.n	8008cda <TIM_Base_SetConfig+0xb2>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a26      	ldr	r2, [pc, #152]	; (8008d58 <TIM_Base_SetConfig+0x130>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d00b      	beq.n	8008cda <TIM_Base_SetConfig+0xb2>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a25      	ldr	r2, [pc, #148]	; (8008d5c <TIM_Base_SetConfig+0x134>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d007      	beq.n	8008cda <TIM_Base_SetConfig+0xb2>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a24      	ldr	r2, [pc, #144]	; (8008d60 <TIM_Base_SetConfig+0x138>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d003      	beq.n	8008cda <TIM_Base_SetConfig+0xb2>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a23      	ldr	r2, [pc, #140]	; (8008d64 <TIM_Base_SetConfig+0x13c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d108      	bne.n	8008cec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	689a      	ldr	r2, [r3, #8]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a0a      	ldr	r2, [pc, #40]	; (8008d3c <TIM_Base_SetConfig+0x114>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d003      	beq.n	8008d20 <TIM_Base_SetConfig+0xf8>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a0c      	ldr	r2, [pc, #48]	; (8008d4c <TIM_Base_SetConfig+0x124>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d103      	bne.n	8008d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	691a      	ldr	r2, [r3, #16]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	615a      	str	r2, [r3, #20]
}
 8008d2e:	bf00      	nop
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	40010000 	.word	0x40010000
 8008d40:	40000400 	.word	0x40000400
 8008d44:	40000800 	.word	0x40000800
 8008d48:	40000c00 	.word	0x40000c00
 8008d4c:	40010400 	.word	0x40010400
 8008d50:	40014000 	.word	0x40014000
 8008d54:	40014400 	.word	0x40014400
 8008d58:	40014800 	.word	0x40014800
 8008d5c:	40001800 	.word	0x40001800
 8008d60:	40001c00 	.word	0x40001c00
 8008d64:	40002000 	.word	0x40002000

08008d68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b087      	sub	sp, #28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	f023 0201 	bic.w	r2, r3, #1
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f023 0303 	bic.w	r3, r3, #3
 8008d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f023 0302 	bic.w	r3, r3, #2
 8008db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a20      	ldr	r2, [pc, #128]	; (8008e40 <TIM_OC1_SetConfig+0xd8>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d003      	beq.n	8008dcc <TIM_OC1_SetConfig+0x64>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a1f      	ldr	r2, [pc, #124]	; (8008e44 <TIM_OC1_SetConfig+0xdc>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d10c      	bne.n	8008de6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f023 0308 	bic.w	r3, r3, #8
 8008dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f023 0304 	bic.w	r3, r3, #4
 8008de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a15      	ldr	r2, [pc, #84]	; (8008e40 <TIM_OC1_SetConfig+0xd8>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d003      	beq.n	8008df6 <TIM_OC1_SetConfig+0x8e>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a14      	ldr	r2, [pc, #80]	; (8008e44 <TIM_OC1_SetConfig+0xdc>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d111      	bne.n	8008e1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	621a      	str	r2, [r3, #32]
}
 8008e34:	bf00      	nop
 8008e36:	371c      	adds	r7, #28
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr
 8008e40:	40010000 	.word	0x40010000
 8008e44:	40010400 	.word	0x40010400

08008e48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b087      	sub	sp, #28
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	f023 0210 	bic.w	r2, r3, #16
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	021b      	lsls	r3, r3, #8
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f023 0320 	bic.w	r3, r3, #32
 8008e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	011b      	lsls	r3, r3, #4
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a22      	ldr	r2, [pc, #136]	; (8008f2c <TIM_OC2_SetConfig+0xe4>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d003      	beq.n	8008eb0 <TIM_OC2_SetConfig+0x68>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a21      	ldr	r2, [pc, #132]	; (8008f30 <TIM_OC2_SetConfig+0xe8>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d10d      	bne.n	8008ecc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	011b      	lsls	r3, r3, #4
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a17      	ldr	r2, [pc, #92]	; (8008f2c <TIM_OC2_SetConfig+0xe4>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d003      	beq.n	8008edc <TIM_OC2_SetConfig+0x94>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a16      	ldr	r2, [pc, #88]	; (8008f30 <TIM_OC2_SetConfig+0xe8>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d113      	bne.n	8008f04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	621a      	str	r2, [r3, #32]
}
 8008f1e:	bf00      	nop
 8008f20:	371c      	adds	r7, #28
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	40010000 	.word	0x40010000
 8008f30:	40010400 	.word	0x40010400

08008f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f023 0303 	bic.w	r3, r3, #3
 8008f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	021b      	lsls	r3, r3, #8
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a21      	ldr	r2, [pc, #132]	; (8009014 <TIM_OC3_SetConfig+0xe0>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d003      	beq.n	8008f9a <TIM_OC3_SetConfig+0x66>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a20      	ldr	r2, [pc, #128]	; (8009018 <TIM_OC3_SetConfig+0xe4>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d10d      	bne.n	8008fb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	021b      	lsls	r3, r3, #8
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a16      	ldr	r2, [pc, #88]	; (8009014 <TIM_OC3_SetConfig+0xe0>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d003      	beq.n	8008fc6 <TIM_OC3_SetConfig+0x92>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a15      	ldr	r2, [pc, #84]	; (8009018 <TIM_OC3_SetConfig+0xe4>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d113      	bne.n	8008fee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	011b      	lsls	r3, r3, #4
 8008fdc:	693a      	ldr	r2, [r7, #16]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	011b      	lsls	r3, r3, #4
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	621a      	str	r2, [r3, #32]
}
 8009008:	bf00      	nop
 800900a:	371c      	adds	r7, #28
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	40010000 	.word	0x40010000
 8009018:	40010400 	.word	0x40010400

0800901c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800901c:	b480      	push	{r7}
 800901e:	b087      	sub	sp, #28
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a1b      	ldr	r3, [r3, #32]
 8009036:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	69db      	ldr	r3, [r3, #28]
 8009042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800904a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	021b      	lsls	r3, r3, #8
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	4313      	orrs	r3, r2
 800905e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	031b      	lsls	r3, r3, #12
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	4313      	orrs	r3, r2
 8009072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a12      	ldr	r2, [pc, #72]	; (80090c0 <TIM_OC4_SetConfig+0xa4>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d003      	beq.n	8009084 <TIM_OC4_SetConfig+0x68>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a11      	ldr	r2, [pc, #68]	; (80090c4 <TIM_OC4_SetConfig+0xa8>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d109      	bne.n	8009098 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800908a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	019b      	lsls	r3, r3, #6
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	4313      	orrs	r3, r2
 8009096:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	685a      	ldr	r2, [r3, #4]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	621a      	str	r2, [r3, #32]
}
 80090b2:	bf00      	nop
 80090b4:	371c      	adds	r7, #28
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	40010000 	.word	0x40010000
 80090c4:	40010400 	.word	0x40010400

080090c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b087      	sub	sp, #28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	f023 0201 	bic.w	r2, r3, #1
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6a1b      	ldr	r3, [r3, #32]
 80090ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	4a28      	ldr	r2, [pc, #160]	; (8009194 <TIM_TI1_SetConfig+0xcc>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d01b      	beq.n	800912e <TIM_TI1_SetConfig+0x66>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090fc:	d017      	beq.n	800912e <TIM_TI1_SetConfig+0x66>
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	4a25      	ldr	r2, [pc, #148]	; (8009198 <TIM_TI1_SetConfig+0xd0>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d013      	beq.n	800912e <TIM_TI1_SetConfig+0x66>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	4a24      	ldr	r2, [pc, #144]	; (800919c <TIM_TI1_SetConfig+0xd4>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d00f      	beq.n	800912e <TIM_TI1_SetConfig+0x66>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4a23      	ldr	r2, [pc, #140]	; (80091a0 <TIM_TI1_SetConfig+0xd8>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d00b      	beq.n	800912e <TIM_TI1_SetConfig+0x66>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	4a22      	ldr	r2, [pc, #136]	; (80091a4 <TIM_TI1_SetConfig+0xdc>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d007      	beq.n	800912e <TIM_TI1_SetConfig+0x66>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	4a21      	ldr	r2, [pc, #132]	; (80091a8 <TIM_TI1_SetConfig+0xe0>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d003      	beq.n	800912e <TIM_TI1_SetConfig+0x66>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	4a20      	ldr	r2, [pc, #128]	; (80091ac <TIM_TI1_SetConfig+0xe4>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d101      	bne.n	8009132 <TIM_TI1_SetConfig+0x6a>
 800912e:	2301      	movs	r3, #1
 8009130:	e000      	b.n	8009134 <TIM_TI1_SetConfig+0x6c>
 8009132:	2300      	movs	r3, #0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d008      	beq.n	800914a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f023 0303 	bic.w	r3, r3, #3
 800913e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4313      	orrs	r3, r2
 8009146:	617b      	str	r3, [r7, #20]
 8009148:	e003      	b.n	8009152 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f043 0301 	orr.w	r3, r3, #1
 8009150:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009158:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	011b      	lsls	r3, r3, #4
 800915e:	b2db      	uxtb	r3, r3
 8009160:	697a      	ldr	r2, [r7, #20]
 8009162:	4313      	orrs	r3, r2
 8009164:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f023 030a 	bic.w	r3, r3, #10
 800916c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	f003 030a 	and.w	r3, r3, #10
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	4313      	orrs	r3, r2
 8009178:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	621a      	str	r2, [r3, #32]
}
 8009186:	bf00      	nop
 8009188:	371c      	adds	r7, #28
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	40010000 	.word	0x40010000
 8009198:	40000400 	.word	0x40000400
 800919c:	40000800 	.word	0x40000800
 80091a0:	40000c00 	.word	0x40000c00
 80091a4:	40010400 	.word	0x40010400
 80091a8:	40014000 	.word	0x40014000
 80091ac:	40001800 	.word	0x40001800

080091b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b087      	sub	sp, #28
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6a1b      	ldr	r3, [r3, #32]
 80091c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	f023 0201 	bic.w	r2, r3, #1
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	011b      	lsls	r3, r3, #4
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f023 030a 	bic.w	r3, r3, #10
 80091ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	621a      	str	r2, [r3, #32]
}
 8009202:	bf00      	nop
 8009204:	371c      	adds	r7, #28
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800920e:	b480      	push	{r7}
 8009210:	b087      	sub	sp, #28
 8009212:	af00      	add	r7, sp, #0
 8009214:	60f8      	str	r0, [r7, #12]
 8009216:	60b9      	str	r1, [r7, #8]
 8009218:	607a      	str	r2, [r7, #4]
 800921a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	f023 0210 	bic.w	r2, r3, #16
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800923a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	021b      	lsls	r3, r3, #8
 8009240:	697a      	ldr	r2, [r7, #20]
 8009242:	4313      	orrs	r3, r2
 8009244:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800924c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	031b      	lsls	r3, r3, #12
 8009252:	b29b      	uxth	r3, r3
 8009254:	697a      	ldr	r2, [r7, #20]
 8009256:	4313      	orrs	r3, r2
 8009258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009260:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	011b      	lsls	r3, r3, #4
 8009266:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	4313      	orrs	r3, r2
 800926e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	621a      	str	r2, [r3, #32]
}
 800927c:	bf00      	nop
 800927e:	371c      	adds	r7, #28
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6a1b      	ldr	r3, [r3, #32]
 8009298:	f023 0210 	bic.w	r2, r3, #16
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	031b      	lsls	r3, r3, #12
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	011b      	lsls	r3, r3, #4
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	621a      	str	r2, [r3, #32]
}
 80092dc:	bf00      	nop
 80092de:	371c      	adds	r7, #28
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6a1b      	ldr	r3, [r3, #32]
 80092fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	69db      	ldr	r3, [r3, #28]
 8009306:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6a1b      	ldr	r3, [r3, #32]
 800930c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f023 0303 	bic.w	r3, r3, #3
 8009314:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4313      	orrs	r3, r2
 800931c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009324:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	011b      	lsls	r3, r3, #4
 800932a:	b2db      	uxtb	r3, r3
 800932c:	697a      	ldr	r2, [r7, #20]
 800932e:	4313      	orrs	r3, r2
 8009330:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009338:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	021b      	lsls	r3, r3, #8
 800933e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	4313      	orrs	r3, r2
 8009346:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	621a      	str	r2, [r3, #32]
}
 8009354:	bf00      	nop
 8009356:	371c      	adds	r7, #28
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009360:	b480      	push	{r7}
 8009362:	b087      	sub	sp, #28
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
 800936c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800938c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	021b      	lsls	r3, r3, #8
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	4313      	orrs	r3, r2
 8009396:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800939e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	031b      	lsls	r3, r3, #12
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80093b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	031b      	lsls	r3, r3, #12
 80093b8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	4313      	orrs	r3, r2
 80093c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	693a      	ldr	r2, [r7, #16]
 80093cc:	621a      	str	r2, [r3, #32]
}
 80093ce:	bf00      	nop
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093da:	b480      	push	{r7}
 80093dc:	b085      	sub	sp, #20
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	f043 0307 	orr.w	r3, r3, #7
 80093fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	609a      	str	r2, [r3, #8]
}
 8009404:	bf00      	nop
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009410:	b480      	push	{r7}
 8009412:	b087      	sub	sp, #28
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800942a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	021a      	lsls	r2, r3, #8
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	431a      	orrs	r2, r3
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	4313      	orrs	r3, r2
 8009438:	697a      	ldr	r2, [r7, #20]
 800943a:	4313      	orrs	r3, r2
 800943c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	609a      	str	r2, [r3, #8]
}
 8009444:	bf00      	nop
 8009446:	371c      	adds	r7, #28
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009450:	b480      	push	{r7}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	f003 031f 	and.w	r3, r3, #31
 8009462:	2201      	movs	r2, #1
 8009464:	fa02 f303 	lsl.w	r3, r2, r3
 8009468:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6a1a      	ldr	r2, [r3, #32]
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	43db      	mvns	r3, r3
 8009472:	401a      	ands	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6a1a      	ldr	r2, [r3, #32]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f003 031f 	and.w	r3, r3, #31
 8009482:	6879      	ldr	r1, [r7, #4]
 8009484:	fa01 f303 	lsl.w	r3, r1, r3
 8009488:	431a      	orrs	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	621a      	str	r2, [r3, #32]
}
 800948e:	bf00      	nop
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
	...

0800949c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a1c      	ldr	r2, [pc, #112]	; (8009518 <TIM_ResetCallback+0x7c>)
 80094a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a1b      	ldr	r2, [pc, #108]	; (800951c <TIM_ResetCallback+0x80>)
 80094b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a1a      	ldr	r2, [pc, #104]	; (8009520 <TIM_ResetCallback+0x84>)
 80094b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a19      	ldr	r2, [pc, #100]	; (8009524 <TIM_ResetCallback+0x88>)
 80094c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a18      	ldr	r2, [pc, #96]	; (8009528 <TIM_ResetCallback+0x8c>)
 80094c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a17      	ldr	r2, [pc, #92]	; (800952c <TIM_ResetCallback+0x90>)
 80094d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a16      	ldr	r2, [pc, #88]	; (8009530 <TIM_ResetCallback+0x94>)
 80094d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a15      	ldr	r2, [pc, #84]	; (8009534 <TIM_ResetCallback+0x98>)
 80094e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a14      	ldr	r2, [pc, #80]	; (8009538 <TIM_ResetCallback+0x9c>)
 80094e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a13      	ldr	r2, [pc, #76]	; (800953c <TIM_ResetCallback+0xa0>)
 80094f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a12      	ldr	r2, [pc, #72]	; (8009540 <TIM_ResetCallback+0xa4>)
 80094f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a11      	ldr	r2, [pc, #68]	; (8009544 <TIM_ResetCallback+0xa8>)
 8009500:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a10      	ldr	r2, [pc, #64]	; (8009548 <TIM_ResetCallback+0xac>)
 8009508:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	08002b29 	.word	0x08002b29
 800951c:	08008b73 	.word	0x08008b73
 8009520:	08008beb 	.word	0x08008beb
 8009524:	08008bff 	.word	0x08008bff
 8009528:	08008b9b 	.word	0x08008b9b
 800952c:	08008baf 	.word	0x08008baf
 8009530:	08008b87 	.word	0x08008b87
 8009534:	08008bc3 	.word	0x08008bc3
 8009538:	08008bd7 	.word	0x08008bd7
 800953c:	08008c13 	.word	0x08008c13
 8009540:	080096e9 	.word	0x080096e9
 8009544:	080096fd 	.word	0x080096fd
 8009548:	08009711 	.word	0x08009711

0800954c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800955c:	2b01      	cmp	r3, #1
 800955e:	d101      	bne.n	8009564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009560:	2302      	movs	r3, #2
 8009562:	e05a      	b.n	800961a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2202      	movs	r2, #2
 8009570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800958a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	4313      	orrs	r3, r2
 8009594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a21      	ldr	r2, [pc, #132]	; (8009628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d022      	beq.n	80095ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095b0:	d01d      	beq.n	80095ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a1d      	ldr	r2, [pc, #116]	; (800962c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d018      	beq.n	80095ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a1b      	ldr	r2, [pc, #108]	; (8009630 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d013      	beq.n	80095ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a1a      	ldr	r2, [pc, #104]	; (8009634 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d00e      	beq.n	80095ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a18      	ldr	r2, [pc, #96]	; (8009638 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d009      	beq.n	80095ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a17      	ldr	r2, [pc, #92]	; (800963c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d004      	beq.n	80095ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a15      	ldr	r2, [pc, #84]	; (8009640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d10c      	bne.n	8009608 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	40010000 	.word	0x40010000
 800962c:	40000400 	.word	0x40000400
 8009630:	40000800 	.word	0x40000800
 8009634:	40000c00 	.word	0x40000c00
 8009638:	40010400 	.word	0x40010400
 800963c:	40014000 	.word	0x40014000
 8009640:	40001800 	.word	0x40001800

08009644 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009658:	2b01      	cmp	r3, #1
 800965a:	d101      	bne.n	8009660 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800965c:	2302      	movs	r3, #2
 800965e:	e03d      	b.n	80096dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	4313      	orrs	r3, r2
 8009674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	4313      	orrs	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	4313      	orrs	r3, r2
 8009690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4313      	orrs	r3, r2
 800969e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d101      	bne.n	8009736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e04a      	b.n	80097cc <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d111      	bne.n	8009766 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fa52 	bl	8009bf4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009754:	2b00      	cmp	r3, #0
 8009756:	d102      	bne.n	800975e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a1e      	ldr	r2, [pc, #120]	; (80097d4 <HAL_UART_Init+0xb0>)
 800975c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2224      	movs	r2, #36	; 0x24
 800976a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68da      	ldr	r2, [r3, #12]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800977c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fc12 	bl	8009fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	691a      	ldr	r2, [r3, #16]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009792:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	695a      	ldr	r2, [r3, #20]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80097b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2220      	movs	r2, #32
 80097be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2220      	movs	r2, #32
 80097c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	08002edd 	.word	0x08002edd

080097d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b08a      	sub	sp, #40	; 0x28
 80097dc:	af02      	add	r7, sp, #8
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	603b      	str	r3, [r7, #0]
 80097e4:	4613      	mov	r3, r2
 80097e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80097e8:	2300      	movs	r3, #0
 80097ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b20      	cmp	r3, #32
 80097f6:	d17c      	bne.n	80098f2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d002      	beq.n	8009804 <HAL_UART_Transmit+0x2c>
 80097fe:	88fb      	ldrh	r3, [r7, #6]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d101      	bne.n	8009808 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e075      	b.n	80098f4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800980e:	2b01      	cmp	r3, #1
 8009810:	d101      	bne.n	8009816 <HAL_UART_Transmit+0x3e>
 8009812:	2302      	movs	r3, #2
 8009814:	e06e      	b.n	80098f4 <HAL_UART_Transmit+0x11c>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2221      	movs	r2, #33	; 0x21
 8009828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800982c:	f7fc fc1e 	bl	800606c <HAL_GetTick>
 8009830:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	88fa      	ldrh	r2, [r7, #6]
 8009836:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	88fa      	ldrh	r2, [r7, #6]
 800983c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009846:	d108      	bne.n	800985a <HAL_UART_Transmit+0x82>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d104      	bne.n	800985a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009850:	2300      	movs	r3, #0
 8009852:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	61bb      	str	r3, [r7, #24]
 8009858:	e003      	b.n	8009862 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800985e:	2300      	movs	r3, #0
 8009860:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2200      	movs	r2, #0
 8009866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800986a:	e02a      	b.n	80098c2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	2200      	movs	r2, #0
 8009874:	2180      	movs	r1, #128	; 0x80
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 fa9c 	bl	8009db4 <UART_WaitOnFlagUntilTimeout>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e036      	b.n	80098f4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10b      	bne.n	80098a4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	881b      	ldrh	r3, [r3, #0]
 8009890:	461a      	mov	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800989a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	3302      	adds	r3, #2
 80098a0:	61bb      	str	r3, [r7, #24]
 80098a2:	e007      	b.n	80098b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	781a      	ldrb	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	3301      	adds	r3, #1
 80098b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	3b01      	subs	r3, #1
 80098bc:	b29a      	uxth	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1cf      	bne.n	800986c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	2200      	movs	r2, #0
 80098d4:	2140      	movs	r1, #64	; 0x40
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 fa6c 	bl	8009db4 <UART_WaitOnFlagUntilTimeout>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e006      	b.n	80098f4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2220      	movs	r2, #32
 80098ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	e000      	b.n	80098f4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80098f2:	2302      	movs	r3, #2
  }
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3720      	adds	r7, #32
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b08a      	sub	sp, #40	; 0x28
 8009900:	af02      	add	r7, sp, #8
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	603b      	str	r3, [r7, #0]
 8009908:	4613      	mov	r3, r2
 800990a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800990c:	2300      	movs	r3, #0
 800990e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009916:	b2db      	uxtb	r3, r3
 8009918:	2b20      	cmp	r3, #32
 800991a:	f040 808c 	bne.w	8009a36 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <HAL_UART_Receive+0x2e>
 8009924:	88fb      	ldrh	r3, [r7, #6]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d101      	bne.n	800992e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e084      	b.n	8009a38 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009934:	2b01      	cmp	r3, #1
 8009936:	d101      	bne.n	800993c <HAL_UART_Receive+0x40>
 8009938:	2302      	movs	r3, #2
 800993a:	e07d      	b.n	8009a38 <HAL_UART_Receive+0x13c>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2222      	movs	r2, #34	; 0x22
 800994e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009958:	f7fc fb88 	bl	800606c <HAL_GetTick>
 800995c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	88fa      	ldrh	r2, [r7, #6]
 8009962:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	88fa      	ldrh	r2, [r7, #6]
 8009968:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009972:	d108      	bne.n	8009986 <HAL_UART_Receive+0x8a>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d104      	bne.n	8009986 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800997c:	2300      	movs	r3, #0
 800997e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	61bb      	str	r3, [r7, #24]
 8009984:	e003      	b.n	800998e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800998a:	2300      	movs	r3, #0
 800998c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009996:	e043      	b.n	8009a20 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	2200      	movs	r2, #0
 80099a0:	2120      	movs	r1, #32
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f000 fa06 	bl	8009db4 <UART_WaitOnFlagUntilTimeout>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e042      	b.n	8009a38 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10c      	bne.n	80099d2 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	3302      	adds	r3, #2
 80099ce:	61bb      	str	r3, [r7, #24]
 80099d0:	e01f      	b.n	8009a12 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099da:	d007      	beq.n	80099ec <HAL_UART_Receive+0xf0>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10a      	bne.n	80099fa <HAL_UART_Receive+0xfe>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d106      	bne.n	80099fa <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	701a      	strb	r2, [r3, #0]
 80099f8:	e008      	b.n	8009a0c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1b6      	bne.n	8009998 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2220      	movs	r2, #32
 8009a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	e000      	b.n	8009a38 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009a36:	2302      	movs	r3, #2
  }
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3720      	adds	r7, #32
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b08c      	sub	sp, #48	; 0x30
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b20      	cmp	r3, #32
 8009a58:	d165      	bne.n	8009b26 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d002      	beq.n	8009a66 <HAL_UART_Transmit_DMA+0x26>
 8009a60:	88fb      	ldrh	r3, [r7, #6]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d101      	bne.n	8009a6a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e05e      	b.n	8009b28 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d101      	bne.n	8009a78 <HAL_UART_Transmit_DMA+0x38>
 8009a74:	2302      	movs	r3, #2
 8009a76:	e057      	b.n	8009b28 <HAL_UART_Transmit_DMA+0xe8>
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	88fa      	ldrh	r2, [r7, #6]
 8009a8a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	88fa      	ldrh	r2, [r7, #6]
 8009a90:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2221      	movs	r2, #33	; 0x21
 8009a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aa4:	4a22      	ldr	r2, [pc, #136]	; (8009b30 <HAL_UART_Transmit_DMA+0xf0>)
 8009aa6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aac:	4a21      	ldr	r2, [pc, #132]	; (8009b34 <HAL_UART_Transmit_DMA+0xf4>)
 8009aae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab4:	4a20      	ldr	r2, [pc, #128]	; (8009b38 <HAL_UART_Transmit_DMA+0xf8>)
 8009ab6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009abc:	2200      	movs	r2, #0
 8009abe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8009ac0:	f107 0308 	add.w	r3, r7, #8
 8009ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009acc:	6819      	ldr	r1, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	88fb      	ldrh	r3, [r7, #6]
 8009ad8:	f7fc fc88 	bl	80063ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ae4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3314      	adds	r3, #20
 8009af4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	e853 3f00 	ldrex	r3, [r3]
 8009afc:	617b      	str	r3, [r7, #20]
   return(result);
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3314      	adds	r3, #20
 8009b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b0e:	627a      	str	r2, [r7, #36]	; 0x24
 8009b10:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b12:	6a39      	ldr	r1, [r7, #32]
 8009b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b16:	e841 2300 	strex	r3, r2, [r1]
 8009b1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1e5      	bne.n	8009aee <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	e000      	b.n	8009b28 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009b26:	2302      	movs	r3, #2
  }
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3730      	adds	r7, #48	; 0x30
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	08009c65 	.word	0x08009c65
 8009b34:	08009d01 	.word	0x08009d01
 8009b38:	08009d1f 	.word	0x08009d1f

08009b3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	460b      	mov	r3, r1
 8009be6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a10      	ldr	r2, [pc, #64]	; (8009c40 <UART_InitCallbacksToDefault+0x4c>)
 8009c00:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a0f      	ldr	r2, [pc, #60]	; (8009c44 <UART_InitCallbacksToDefault+0x50>)
 8009c06:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a0f      	ldr	r2, [pc, #60]	; (8009c48 <UART_InitCallbacksToDefault+0x54>)
 8009c0c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a0e      	ldr	r2, [pc, #56]	; (8009c4c <UART_InitCallbacksToDefault+0x58>)
 8009c12:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a0e      	ldr	r2, [pc, #56]	; (8009c50 <UART_InitCallbacksToDefault+0x5c>)
 8009c18:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a0d      	ldr	r2, [pc, #52]	; (8009c54 <UART_InitCallbacksToDefault+0x60>)
 8009c1e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a0d      	ldr	r2, [pc, #52]	; (8009c58 <UART_InitCallbacksToDefault+0x64>)
 8009c24:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a0c      	ldr	r2, [pc, #48]	; (8009c5c <UART_InitCallbacksToDefault+0x68>)
 8009c2a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a0c      	ldr	r2, [pc, #48]	; (8009c60 <UART_InitCallbacksToDefault+0x6c>)
 8009c30:	669a      	str	r2, [r3, #104]	; 0x68

}
 8009c32:	bf00      	nop
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	08009b51 	.word	0x08009b51
 8009c44:	08009b3d 	.word	0x08009b3d
 8009c48:	08009b79 	.word	0x08009b79
 8009c4c:	08009b65 	.word	0x08009b65
 8009c50:	08009b8d 	.word	0x08009b8d
 8009c54:	08009ba1 	.word	0x08009ba1
 8009c58:	08009bb5 	.word	0x08009bb5
 8009c5c:	08009bc9 	.word	0x08009bc9
 8009c60:	08009bdd 	.word	0x08009bdd

08009c64 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b090      	sub	sp, #64	; 0x40
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c70:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d137      	bne.n	8009cf0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c82:	2200      	movs	r2, #0
 8009c84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3314      	adds	r3, #20
 8009c8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	e853 3f00 	ldrex	r3, [r3]
 8009c94:	623b      	str	r3, [r7, #32]
   return(result);
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3314      	adds	r3, #20
 8009ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ca6:	633a      	str	r2, [r7, #48]	; 0x30
 8009ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009caa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cae:	e841 2300 	strex	r3, r2, [r1]
 8009cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1e5      	bne.n	8009c86 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	330c      	adds	r3, #12
 8009cc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	e853 3f00 	ldrex	r3, [r3]
 8009cc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8009cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	330c      	adds	r3, #12
 8009cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cda:	61fa      	str	r2, [r7, #28]
 8009cdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cde:	69b9      	ldr	r1, [r7, #24]
 8009ce0:	69fa      	ldr	r2, [r7, #28]
 8009ce2:	e841 2300 	strex	r3, r2, [r1]
 8009ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1e5      	bne.n	8009cba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009cee:	e003      	b.n	8009cf8 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8009cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cf4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009cf6:	4798      	blx	r3
}
 8009cf8:	bf00      	nop
 8009cfa:	3740      	adds	r7, #64	; 0x40
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d16:	bf00      	nop
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b084      	sub	sp, #16
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009d26:	2300      	movs	r3, #0
 8009d28:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d3a:	2b80      	cmp	r3, #128	; 0x80
 8009d3c:	bf0c      	ite	eq
 8009d3e:	2301      	moveq	r3, #1
 8009d40:	2300      	movne	r3, #0
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	2b21      	cmp	r3, #33	; 0x21
 8009d50:	d108      	bne.n	8009d64 <UART_DMAError+0x46>
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d005      	beq.n	8009d64 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009d5e:	68b8      	ldr	r0, [r7, #8]
 8009d60:	f000 f896 	bl	8009e90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	695b      	ldr	r3, [r3, #20]
 8009d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d6e:	2b40      	cmp	r3, #64	; 0x40
 8009d70:	bf0c      	ite	eq
 8009d72:	2301      	moveq	r3, #1
 8009d74:	2300      	movne	r3, #0
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b22      	cmp	r3, #34	; 0x22
 8009d84:	d108      	bne.n	8009d98 <UART_DMAError+0x7a>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d005      	beq.n	8009d98 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009d92:	68b8      	ldr	r0, [r7, #8]
 8009d94:	f000 f8a4 	bl	8009ee0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9c:	f043 0210 	orr.w	r2, r3, #16
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da8:	68b8      	ldr	r0, [r7, #8]
 8009daa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dac:	bf00      	nop
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b090      	sub	sp, #64	; 0x40
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	603b      	str	r3, [r7, #0]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dc4:	e050      	b.n	8009e68 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dcc:	d04c      	beq.n	8009e68 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d007      	beq.n	8009de4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009dd4:	f7fc f94a 	bl	800606c <HAL_GetTick>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	1ad3      	subs	r3, r2, r3
 8009dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d241      	bcs.n	8009e68 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	330c      	adds	r3, #12
 8009dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dee:	e853 3f00 	ldrex	r3, [r3]
 8009df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	330c      	adds	r3, #12
 8009e02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e04:	637a      	str	r2, [r7, #52]	; 0x34
 8009e06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e0c:	e841 2300 	strex	r3, r2, [r1]
 8009e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1e5      	bne.n	8009de4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	3314      	adds	r3, #20
 8009e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	e853 3f00 	ldrex	r3, [r3]
 8009e26:	613b      	str	r3, [r7, #16]
   return(result);
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	f023 0301 	bic.w	r3, r3, #1
 8009e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	3314      	adds	r3, #20
 8009e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e38:	623a      	str	r2, [r7, #32]
 8009e3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3c:	69f9      	ldr	r1, [r7, #28]
 8009e3e:	6a3a      	ldr	r2, [r7, #32]
 8009e40:	e841 2300 	strex	r3, r2, [r1]
 8009e44:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1e5      	bne.n	8009e18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2220      	movs	r2, #32
 8009e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2220      	movs	r2, #32
 8009e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e00f      	b.n	8009e88 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	4013      	ands	r3, r2
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	bf0c      	ite	eq
 8009e78:	2301      	moveq	r3, #1
 8009e7a:	2300      	movne	r3, #0
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	461a      	mov	r2, r3
 8009e80:	79fb      	ldrb	r3, [r7, #7]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d09f      	beq.n	8009dc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3740      	adds	r7, #64	; 0x40
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b089      	sub	sp, #36	; 0x24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	330c      	adds	r3, #12
 8009e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	e853 3f00 	ldrex	r3, [r3]
 8009ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009eae:	61fb      	str	r3, [r7, #28]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	330c      	adds	r3, #12
 8009eb6:	69fa      	ldr	r2, [r7, #28]
 8009eb8:	61ba      	str	r2, [r7, #24]
 8009eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebc:	6979      	ldr	r1, [r7, #20]
 8009ebe:	69ba      	ldr	r2, [r7, #24]
 8009ec0:	e841 2300 	strex	r3, r2, [r1]
 8009ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1e5      	bne.n	8009e98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2220      	movs	r2, #32
 8009ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009ed4:	bf00      	nop
 8009ed6:	3724      	adds	r7, #36	; 0x24
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b095      	sub	sp, #84	; 0x54
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	330c      	adds	r3, #12
 8009eee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef2:	e853 3f00 	ldrex	r3, [r3]
 8009ef6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	330c      	adds	r3, #12
 8009f06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f08:	643a      	str	r2, [r7, #64]	; 0x40
 8009f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f10:	e841 2300 	strex	r3, r2, [r1]
 8009f14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1e5      	bne.n	8009ee8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	3314      	adds	r3, #20
 8009f22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	e853 3f00 	ldrex	r3, [r3]
 8009f2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	f023 0301 	bic.w	r3, r3, #1
 8009f32:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3314      	adds	r3, #20
 8009f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f44:	e841 2300 	strex	r3, r2, [r1]
 8009f48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1e5      	bne.n	8009f1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d119      	bne.n	8009f8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	330c      	adds	r3, #12
 8009f5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	e853 3f00 	ldrex	r3, [r3]
 8009f66:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	f023 0310 	bic.w	r3, r3, #16
 8009f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	330c      	adds	r3, #12
 8009f76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f78:	61ba      	str	r2, [r7, #24]
 8009f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7c:	6979      	ldr	r1, [r7, #20]
 8009f7e:	69ba      	ldr	r2, [r7, #24]
 8009f80:	e841 2300 	strex	r3, r2, [r1]
 8009f84:	613b      	str	r3, [r7, #16]
   return(result);
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1e5      	bne.n	8009f58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2220      	movs	r2, #32
 8009f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009f9a:	bf00      	nop
 8009f9c:	3754      	adds	r7, #84	; 0x54
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
	...

08009fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fac:	b09f      	sub	sp, #124	; 0x7c
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fbe:	68d9      	ldr	r1, [r3, #12]
 8009fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	ea40 0301 	orr.w	r3, r0, r1
 8009fc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fcc:	689a      	ldr	r2, [r3, #8]
 8009fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fd6:	695b      	ldr	r3, [r3, #20]
 8009fd8:	431a      	orrs	r2, r3
 8009fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fdc:	69db      	ldr	r3, [r3, #28]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009fec:	f021 010c 	bic.w	r1, r1, #12
 8009ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ff6:	430b      	orrs	r3, r1
 8009ff8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	695b      	ldr	r3, [r3, #20]
 800a000:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a006:	6999      	ldr	r1, [r3, #24]
 800a008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	ea40 0301 	orr.w	r3, r0, r1
 800a010:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	4bc5      	ldr	r3, [pc, #788]	; (800a32c <UART_SetConfig+0x384>)
 800a018:	429a      	cmp	r2, r3
 800a01a:	d004      	beq.n	800a026 <UART_SetConfig+0x7e>
 800a01c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	4bc3      	ldr	r3, [pc, #780]	; (800a330 <UART_SetConfig+0x388>)
 800a022:	429a      	cmp	r2, r3
 800a024:	d103      	bne.n	800a02e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a026:	f7fc ff89 	bl	8006f3c <HAL_RCC_GetPCLK2Freq>
 800a02a:	6778      	str	r0, [r7, #116]	; 0x74
 800a02c:	e002      	b.n	800a034 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a02e:	f7fc ff71 	bl	8006f14 <HAL_RCC_GetPCLK1Freq>
 800a032:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a036:	69db      	ldr	r3, [r3, #28]
 800a038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a03c:	f040 80b6 	bne.w	800a1ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a042:	461c      	mov	r4, r3
 800a044:	f04f 0500 	mov.w	r5, #0
 800a048:	4622      	mov	r2, r4
 800a04a:	462b      	mov	r3, r5
 800a04c:	1891      	adds	r1, r2, r2
 800a04e:	6439      	str	r1, [r7, #64]	; 0x40
 800a050:	415b      	adcs	r3, r3
 800a052:	647b      	str	r3, [r7, #68]	; 0x44
 800a054:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a058:	1912      	adds	r2, r2, r4
 800a05a:	eb45 0303 	adc.w	r3, r5, r3
 800a05e:	f04f 0000 	mov.w	r0, #0
 800a062:	f04f 0100 	mov.w	r1, #0
 800a066:	00d9      	lsls	r1, r3, #3
 800a068:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a06c:	00d0      	lsls	r0, r2, #3
 800a06e:	4602      	mov	r2, r0
 800a070:	460b      	mov	r3, r1
 800a072:	1911      	adds	r1, r2, r4
 800a074:	6639      	str	r1, [r7, #96]	; 0x60
 800a076:	416b      	adcs	r3, r5
 800a078:	667b      	str	r3, [r7, #100]	; 0x64
 800a07a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	461a      	mov	r2, r3
 800a080:	f04f 0300 	mov.w	r3, #0
 800a084:	1891      	adds	r1, r2, r2
 800a086:	63b9      	str	r1, [r7, #56]	; 0x38
 800a088:	415b      	adcs	r3, r3
 800a08a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a08c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a090:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a094:	f7f6 fe18 	bl	8000cc8 <__aeabi_uldivmod>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4ba5      	ldr	r3, [pc, #660]	; (800a334 <UART_SetConfig+0x38c>)
 800a09e:	fba3 2302 	umull	r2, r3, r3, r2
 800a0a2:	095b      	lsrs	r3, r3, #5
 800a0a4:	011e      	lsls	r6, r3, #4
 800a0a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0a8:	461c      	mov	r4, r3
 800a0aa:	f04f 0500 	mov.w	r5, #0
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	462b      	mov	r3, r5
 800a0b2:	1891      	adds	r1, r2, r2
 800a0b4:	6339      	str	r1, [r7, #48]	; 0x30
 800a0b6:	415b      	adcs	r3, r3
 800a0b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a0ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a0be:	1912      	adds	r2, r2, r4
 800a0c0:	eb45 0303 	adc.w	r3, r5, r3
 800a0c4:	f04f 0000 	mov.w	r0, #0
 800a0c8:	f04f 0100 	mov.w	r1, #0
 800a0cc:	00d9      	lsls	r1, r3, #3
 800a0ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a0d2:	00d0      	lsls	r0, r2, #3
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	1911      	adds	r1, r2, r4
 800a0da:	65b9      	str	r1, [r7, #88]	; 0x58
 800a0dc:	416b      	adcs	r3, r5
 800a0de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	f04f 0300 	mov.w	r3, #0
 800a0ea:	1891      	adds	r1, r2, r2
 800a0ec:	62b9      	str	r1, [r7, #40]	; 0x28
 800a0ee:	415b      	adcs	r3, r3
 800a0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a0fa:	f7f6 fde5 	bl	8000cc8 <__aeabi_uldivmod>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	4b8c      	ldr	r3, [pc, #560]	; (800a334 <UART_SetConfig+0x38c>)
 800a104:	fba3 1302 	umull	r1, r3, r3, r2
 800a108:	095b      	lsrs	r3, r3, #5
 800a10a:	2164      	movs	r1, #100	; 0x64
 800a10c:	fb01 f303 	mul.w	r3, r1, r3
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	00db      	lsls	r3, r3, #3
 800a114:	3332      	adds	r3, #50	; 0x32
 800a116:	4a87      	ldr	r2, [pc, #540]	; (800a334 <UART_SetConfig+0x38c>)
 800a118:	fba2 2303 	umull	r2, r3, r2, r3
 800a11c:	095b      	lsrs	r3, r3, #5
 800a11e:	005b      	lsls	r3, r3, #1
 800a120:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a124:	441e      	add	r6, r3
 800a126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a128:	4618      	mov	r0, r3
 800a12a:	f04f 0100 	mov.w	r1, #0
 800a12e:	4602      	mov	r2, r0
 800a130:	460b      	mov	r3, r1
 800a132:	1894      	adds	r4, r2, r2
 800a134:	623c      	str	r4, [r7, #32]
 800a136:	415b      	adcs	r3, r3
 800a138:	627b      	str	r3, [r7, #36]	; 0x24
 800a13a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a13e:	1812      	adds	r2, r2, r0
 800a140:	eb41 0303 	adc.w	r3, r1, r3
 800a144:	f04f 0400 	mov.w	r4, #0
 800a148:	f04f 0500 	mov.w	r5, #0
 800a14c:	00dd      	lsls	r5, r3, #3
 800a14e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a152:	00d4      	lsls	r4, r2, #3
 800a154:	4622      	mov	r2, r4
 800a156:	462b      	mov	r3, r5
 800a158:	1814      	adds	r4, r2, r0
 800a15a:	653c      	str	r4, [r7, #80]	; 0x50
 800a15c:	414b      	adcs	r3, r1
 800a15e:	657b      	str	r3, [r7, #84]	; 0x54
 800a160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	461a      	mov	r2, r3
 800a166:	f04f 0300 	mov.w	r3, #0
 800a16a:	1891      	adds	r1, r2, r2
 800a16c:	61b9      	str	r1, [r7, #24]
 800a16e:	415b      	adcs	r3, r3
 800a170:	61fb      	str	r3, [r7, #28]
 800a172:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a176:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a17a:	f7f6 fda5 	bl	8000cc8 <__aeabi_uldivmod>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	4b6c      	ldr	r3, [pc, #432]	; (800a334 <UART_SetConfig+0x38c>)
 800a184:	fba3 1302 	umull	r1, r3, r3, r2
 800a188:	095b      	lsrs	r3, r3, #5
 800a18a:	2164      	movs	r1, #100	; 0x64
 800a18c:	fb01 f303 	mul.w	r3, r1, r3
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	00db      	lsls	r3, r3, #3
 800a194:	3332      	adds	r3, #50	; 0x32
 800a196:	4a67      	ldr	r2, [pc, #412]	; (800a334 <UART_SetConfig+0x38c>)
 800a198:	fba2 2303 	umull	r2, r3, r2, r3
 800a19c:	095b      	lsrs	r3, r3, #5
 800a19e:	f003 0207 	and.w	r2, r3, #7
 800a1a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4432      	add	r2, r6
 800a1a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a1aa:	e0b9      	b.n	800a320 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a1ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1ae:	461c      	mov	r4, r3
 800a1b0:	f04f 0500 	mov.w	r5, #0
 800a1b4:	4622      	mov	r2, r4
 800a1b6:	462b      	mov	r3, r5
 800a1b8:	1891      	adds	r1, r2, r2
 800a1ba:	6139      	str	r1, [r7, #16]
 800a1bc:	415b      	adcs	r3, r3
 800a1be:	617b      	str	r3, [r7, #20]
 800a1c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a1c4:	1912      	adds	r2, r2, r4
 800a1c6:	eb45 0303 	adc.w	r3, r5, r3
 800a1ca:	f04f 0000 	mov.w	r0, #0
 800a1ce:	f04f 0100 	mov.w	r1, #0
 800a1d2:	00d9      	lsls	r1, r3, #3
 800a1d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a1d8:	00d0      	lsls	r0, r2, #3
 800a1da:	4602      	mov	r2, r0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	eb12 0804 	adds.w	r8, r2, r4
 800a1e2:	eb43 0905 	adc.w	r9, r3, r5
 800a1e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f04f 0100 	mov.w	r1, #0
 800a1f0:	f04f 0200 	mov.w	r2, #0
 800a1f4:	f04f 0300 	mov.w	r3, #0
 800a1f8:	008b      	lsls	r3, r1, #2
 800a1fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a1fe:	0082      	lsls	r2, r0, #2
 800a200:	4640      	mov	r0, r8
 800a202:	4649      	mov	r1, r9
 800a204:	f7f6 fd60 	bl	8000cc8 <__aeabi_uldivmod>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	4b49      	ldr	r3, [pc, #292]	; (800a334 <UART_SetConfig+0x38c>)
 800a20e:	fba3 2302 	umull	r2, r3, r3, r2
 800a212:	095b      	lsrs	r3, r3, #5
 800a214:	011e      	lsls	r6, r3, #4
 800a216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a218:	4618      	mov	r0, r3
 800a21a:	f04f 0100 	mov.w	r1, #0
 800a21e:	4602      	mov	r2, r0
 800a220:	460b      	mov	r3, r1
 800a222:	1894      	adds	r4, r2, r2
 800a224:	60bc      	str	r4, [r7, #8]
 800a226:	415b      	adcs	r3, r3
 800a228:	60fb      	str	r3, [r7, #12]
 800a22a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a22e:	1812      	adds	r2, r2, r0
 800a230:	eb41 0303 	adc.w	r3, r1, r3
 800a234:	f04f 0400 	mov.w	r4, #0
 800a238:	f04f 0500 	mov.w	r5, #0
 800a23c:	00dd      	lsls	r5, r3, #3
 800a23e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a242:	00d4      	lsls	r4, r2, #3
 800a244:	4622      	mov	r2, r4
 800a246:	462b      	mov	r3, r5
 800a248:	1814      	adds	r4, r2, r0
 800a24a:	64bc      	str	r4, [r7, #72]	; 0x48
 800a24c:	414b      	adcs	r3, r1
 800a24e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	4618      	mov	r0, r3
 800a256:	f04f 0100 	mov.w	r1, #0
 800a25a:	f04f 0200 	mov.w	r2, #0
 800a25e:	f04f 0300 	mov.w	r3, #0
 800a262:	008b      	lsls	r3, r1, #2
 800a264:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a268:	0082      	lsls	r2, r0, #2
 800a26a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a26e:	f7f6 fd2b 	bl	8000cc8 <__aeabi_uldivmod>
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	4b2f      	ldr	r3, [pc, #188]	; (800a334 <UART_SetConfig+0x38c>)
 800a278:	fba3 1302 	umull	r1, r3, r3, r2
 800a27c:	095b      	lsrs	r3, r3, #5
 800a27e:	2164      	movs	r1, #100	; 0x64
 800a280:	fb01 f303 	mul.w	r3, r1, r3
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	011b      	lsls	r3, r3, #4
 800a288:	3332      	adds	r3, #50	; 0x32
 800a28a:	4a2a      	ldr	r2, [pc, #168]	; (800a334 <UART_SetConfig+0x38c>)
 800a28c:	fba2 2303 	umull	r2, r3, r2, r3
 800a290:	095b      	lsrs	r3, r3, #5
 800a292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a296:	441e      	add	r6, r3
 800a298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a29a:	4618      	mov	r0, r3
 800a29c:	f04f 0100 	mov.w	r1, #0
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	1894      	adds	r4, r2, r2
 800a2a6:	603c      	str	r4, [r7, #0]
 800a2a8:	415b      	adcs	r3, r3
 800a2aa:	607b      	str	r3, [r7, #4]
 800a2ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2b0:	1812      	adds	r2, r2, r0
 800a2b2:	eb41 0303 	adc.w	r3, r1, r3
 800a2b6:	f04f 0400 	mov.w	r4, #0
 800a2ba:	f04f 0500 	mov.w	r5, #0
 800a2be:	00dd      	lsls	r5, r3, #3
 800a2c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a2c4:	00d4      	lsls	r4, r2, #3
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	462b      	mov	r3, r5
 800a2ca:	eb12 0a00 	adds.w	sl, r2, r0
 800a2ce:	eb43 0b01 	adc.w	fp, r3, r1
 800a2d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f04f 0100 	mov.w	r1, #0
 800a2dc:	f04f 0200 	mov.w	r2, #0
 800a2e0:	f04f 0300 	mov.w	r3, #0
 800a2e4:	008b      	lsls	r3, r1, #2
 800a2e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a2ea:	0082      	lsls	r2, r0, #2
 800a2ec:	4650      	mov	r0, sl
 800a2ee:	4659      	mov	r1, fp
 800a2f0:	f7f6 fcea 	bl	8000cc8 <__aeabi_uldivmod>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4b0e      	ldr	r3, [pc, #56]	; (800a334 <UART_SetConfig+0x38c>)
 800a2fa:	fba3 1302 	umull	r1, r3, r3, r2
 800a2fe:	095b      	lsrs	r3, r3, #5
 800a300:	2164      	movs	r1, #100	; 0x64
 800a302:	fb01 f303 	mul.w	r3, r1, r3
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	011b      	lsls	r3, r3, #4
 800a30a:	3332      	adds	r3, #50	; 0x32
 800a30c:	4a09      	ldr	r2, [pc, #36]	; (800a334 <UART_SetConfig+0x38c>)
 800a30e:	fba2 2303 	umull	r2, r3, r2, r3
 800a312:	095b      	lsrs	r3, r3, #5
 800a314:	f003 020f 	and.w	r2, r3, #15
 800a318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4432      	add	r2, r6
 800a31e:	609a      	str	r2, [r3, #8]
}
 800a320:	bf00      	nop
 800a322:	377c      	adds	r7, #124	; 0x7c
 800a324:	46bd      	mov	sp, r7
 800a326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32a:	bf00      	nop
 800a32c:	40011000 	.word	0x40011000
 800a330:	40011400 	.word	0x40011400
 800a334:	51eb851f 	.word	0x51eb851f

0800a338 <__NVIC_SetPriority>:
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	4603      	mov	r3, r0
 800a340:	6039      	str	r1, [r7, #0]
 800a342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	db0a      	blt.n	800a362 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	490c      	ldr	r1, [pc, #48]	; (800a384 <__NVIC_SetPriority+0x4c>)
 800a352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a356:	0112      	lsls	r2, r2, #4
 800a358:	b2d2      	uxtb	r2, r2
 800a35a:	440b      	add	r3, r1
 800a35c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a360:	e00a      	b.n	800a378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	b2da      	uxtb	r2, r3
 800a366:	4908      	ldr	r1, [pc, #32]	; (800a388 <__NVIC_SetPriority+0x50>)
 800a368:	79fb      	ldrb	r3, [r7, #7]
 800a36a:	f003 030f 	and.w	r3, r3, #15
 800a36e:	3b04      	subs	r3, #4
 800a370:	0112      	lsls	r2, r2, #4
 800a372:	b2d2      	uxtb	r2, r2
 800a374:	440b      	add	r3, r1
 800a376:	761a      	strb	r2, [r3, #24]
}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr
 800a384:	e000e100 	.word	0xe000e100
 800a388:	e000ed00 	.word	0xe000ed00

0800a38c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a38c:	b580      	push	{r7, lr}
 800a38e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a390:	4b05      	ldr	r3, [pc, #20]	; (800a3a8 <SysTick_Handler+0x1c>)
 800a392:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a394:	f001 fe46 	bl	800c024 <xTaskGetSchedulerState>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d001      	beq.n	800a3a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a39e:	f002 fc2b 	bl	800cbf8 <xPortSysTickHandler>
  }
}
 800a3a2:	bf00      	nop
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	e000e010 	.word	0xe000e010

0800a3ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	f06f 0004 	mvn.w	r0, #4
 800a3b6:	f7ff ffbf 	bl	800a338 <__NVIC_SetPriority>
#endif
}
 800a3ba:	bf00      	nop
 800a3bc:	bd80      	pop	{r7, pc}
	...

0800a3c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3c6:	f3ef 8305 	mrs	r3, IPSR
 800a3ca:	603b      	str	r3, [r7, #0]
  return(result);
 800a3cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a3d2:	f06f 0305 	mvn.w	r3, #5
 800a3d6:	607b      	str	r3, [r7, #4]
 800a3d8:	e00c      	b.n	800a3f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a3da:	4b0a      	ldr	r3, [pc, #40]	; (800a404 <osKernelInitialize+0x44>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d105      	bne.n	800a3ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a3e2:	4b08      	ldr	r3, [pc, #32]	; (800a404 <osKernelInitialize+0x44>)
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	607b      	str	r3, [r7, #4]
 800a3ec:	e002      	b.n	800a3f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a3ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a3f4:	687b      	ldr	r3, [r7, #4]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	2000021c 	.word	0x2000021c

0800a408 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a40e:	f3ef 8305 	mrs	r3, IPSR
 800a412:	603b      	str	r3, [r7, #0]
  return(result);
 800a414:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a416:	2b00      	cmp	r3, #0
 800a418:	d003      	beq.n	800a422 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a41a:	f06f 0305 	mvn.w	r3, #5
 800a41e:	607b      	str	r3, [r7, #4]
 800a420:	e010      	b.n	800a444 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a422:	4b0b      	ldr	r3, [pc, #44]	; (800a450 <osKernelStart+0x48>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d109      	bne.n	800a43e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a42a:	f7ff ffbf 	bl	800a3ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a42e:	4b08      	ldr	r3, [pc, #32]	; (800a450 <osKernelStart+0x48>)
 800a430:	2202      	movs	r2, #2
 800a432:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a434:	f001 f9ae 	bl	800b794 <vTaskStartScheduler>
      stat = osOK;
 800a438:	2300      	movs	r3, #0
 800a43a:	607b      	str	r3, [r7, #4]
 800a43c:	e002      	b.n	800a444 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a43e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a442:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a444:	687b      	ldr	r3, [r7, #4]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	2000021c 	.word	0x2000021c

0800a454 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a454:	b580      	push	{r7, lr}
 800a456:	b08e      	sub	sp, #56	; 0x38
 800a458:	af04      	add	r7, sp, #16
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a460:	2300      	movs	r3, #0
 800a462:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a464:	f3ef 8305 	mrs	r3, IPSR
 800a468:	617b      	str	r3, [r7, #20]
  return(result);
 800a46a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d17e      	bne.n	800a56e <osThreadNew+0x11a>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d07b      	beq.n	800a56e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a476:	2380      	movs	r3, #128	; 0x80
 800a478:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a47a:	2318      	movs	r3, #24
 800a47c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a47e:	2300      	movs	r3, #0
 800a480:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a486:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d045      	beq.n	800a51a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d002      	beq.n	800a49c <osThreadNew+0x48>
        name = attr->name;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d002      	beq.n	800a4aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	699b      	ldr	r3, [r3, #24]
 800a4a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d008      	beq.n	800a4c2 <osThreadNew+0x6e>
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	2b38      	cmp	r3, #56	; 0x38
 800a4b4:	d805      	bhi.n	800a4c2 <osThreadNew+0x6e>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <osThreadNew+0x72>
        return (NULL);
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	e054      	b.n	800a570 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	695b      	ldr	r3, [r3, #20]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d003      	beq.n	800a4d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	089b      	lsrs	r3, r3, #2
 800a4d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00e      	beq.n	800a4fc <osThreadNew+0xa8>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	2b5b      	cmp	r3, #91	; 0x5b
 800a4e4:	d90a      	bls.n	800a4fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d006      	beq.n	800a4fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d002      	beq.n	800a4fc <osThreadNew+0xa8>
        mem = 1;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	61bb      	str	r3, [r7, #24]
 800a4fa:	e010      	b.n	800a51e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10c      	bne.n	800a51e <osThreadNew+0xca>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d108      	bne.n	800a51e <osThreadNew+0xca>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d104      	bne.n	800a51e <osThreadNew+0xca>
          mem = 0;
 800a514:	2300      	movs	r3, #0
 800a516:	61bb      	str	r3, [r7, #24]
 800a518:	e001      	b.n	800a51e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d110      	bne.n	800a546 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a52c:	9202      	str	r2, [sp, #8]
 800a52e:	9301      	str	r3, [sp, #4]
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	6a3a      	ldr	r2, [r7, #32]
 800a538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f000 fe4e 	bl	800b1dc <xTaskCreateStatic>
 800a540:	4603      	mov	r3, r0
 800a542:	613b      	str	r3, [r7, #16]
 800a544:	e013      	b.n	800a56e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d110      	bne.n	800a56e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a54c:	6a3b      	ldr	r3, [r7, #32]
 800a54e:	b29a      	uxth	r2, r3
 800a550:	f107 0310 	add.w	r3, r7, #16
 800a554:	9301      	str	r3, [sp, #4]
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f000 fe99 	bl	800b296 <xTaskCreate>
 800a564:	4603      	mov	r3, r0
 800a566:	2b01      	cmp	r3, #1
 800a568:	d001      	beq.n	800a56e <osThreadNew+0x11a>
            hTask = NULL;
 800a56a:	2300      	movs	r3, #0
 800a56c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a56e:	693b      	ldr	r3, [r7, #16]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3728      	adds	r7, #40	; 0x28
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a584:	f3ef 8305 	mrs	r3, IPSR
 800a588:	60fb      	str	r3, [r7, #12]
  return(result);
 800a58a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d003      	beq.n	800a598 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800a590:	f06f 0305 	mvn.w	r3, #5
 800a594:	617b      	str	r3, [r7, #20]
 800a596:	e00b      	b.n	800a5b0 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d103      	bne.n	800a5a6 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800a59e:	f06f 0303 	mvn.w	r3, #3
 800a5a2:	617b      	str	r3, [r7, #20]
 800a5a4:	e004      	b.n	800a5b0 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800a5aa:	6938      	ldr	r0, [r7, #16]
 800a5ac:	f000 ffec 	bl	800b588 <vTaskSuspend>
  }

  return (stat);
 800a5b0:	697b      	ldr	r3, [r7, #20]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3718      	adds	r7, #24
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b086      	sub	sp, #24
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5c6:	f3ef 8305 	mrs	r3, IPSR
 800a5ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d003      	beq.n	800a5da <osThreadResume+0x20>
    stat = osErrorISR;
 800a5d2:	f06f 0305 	mvn.w	r3, #5
 800a5d6:	617b      	str	r3, [r7, #20]
 800a5d8:	e00b      	b.n	800a5f2 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d103      	bne.n	800a5e8 <osThreadResume+0x2e>
    stat = osErrorParameter;
 800a5e0:	f06f 0303 	mvn.w	r3, #3
 800a5e4:	617b      	str	r3, [r7, #20]
 800a5e6:	e004      	b.n	800a5f2 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800a5ec:	6938      	ldr	r0, [r7, #16]
 800a5ee:	f001 f873 	bl	800b6d8 <vTaskResume>
  }

  return (stat);
 800a5f2:	697b      	ldr	r3, [r7, #20]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3718      	adds	r7, #24
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a604:	f3ef 8305 	mrs	r3, IPSR
 800a608:	60bb      	str	r3, [r7, #8]
  return(result);
 800a60a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d003      	beq.n	800a618 <osDelay+0x1c>
    stat = osErrorISR;
 800a610:	f06f 0305 	mvn.w	r3, #5
 800a614:	60fb      	str	r3, [r7, #12]
 800a616:	e007      	b.n	800a628 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a618:	2300      	movs	r3, #0
 800a61a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d002      	beq.n	800a628 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 ff7c 	bl	800b520 <vTaskDelay>
    }
  }

  return (stat);
 800a628:	68fb      	ldr	r3, [r7, #12]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
	...

0800a634 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a634:	b480      	push	{r7}
 800a636:	b085      	sub	sp, #20
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4a07      	ldr	r2, [pc, #28]	; (800a660 <vApplicationGetIdleTaskMemory+0x2c>)
 800a644:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	4a06      	ldr	r2, [pc, #24]	; (800a664 <vApplicationGetIdleTaskMemory+0x30>)
 800a64a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2280      	movs	r2, #128	; 0x80
 800a650:	601a      	str	r2, [r3, #0]
}
 800a652:	bf00      	nop
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	20000220 	.word	0x20000220
 800a664:	2000027c 	.word	0x2000027c

0800a668 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4a07      	ldr	r2, [pc, #28]	; (800a694 <vApplicationGetTimerTaskMemory+0x2c>)
 800a678:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	4a06      	ldr	r2, [pc, #24]	; (800a698 <vApplicationGetTimerTaskMemory+0x30>)
 800a67e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a686:	601a      	str	r2, [r3, #0]
}
 800a688:	bf00      	nop
 800a68a:	3714      	adds	r7, #20
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr
 800a694:	2000047c 	.word	0x2000047c
 800a698:	200004d8 	.word	0x200004d8

0800a69c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f103 0208 	add.w	r2, r3, #8
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f103 0208 	add.w	r2, r3, #8
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f103 0208 	add.w	r2, r3, #8
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6ea:	bf00      	nop
 800a6ec:	370c      	adds	r7, #12
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr

0800a6f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	b085      	sub	sp, #20
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	689a      	ldr	r2, [r3, #8]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	1c5a      	adds	r2, r3, #1
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	601a      	str	r2, [r3, #0]
}
 800a732:	bf00      	nop
 800a734:	3714      	adds	r7, #20
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a73e:	b480      	push	{r7}
 800a740:	b085      	sub	sp, #20
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a754:	d103      	bne.n	800a75e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	e00c      	b.n	800a778 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	3308      	adds	r3, #8
 800a762:	60fb      	str	r3, [r7, #12]
 800a764:	e002      	b.n	800a76c <vListInsert+0x2e>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	429a      	cmp	r2, r3
 800a776:	d2f6      	bcs.n	800a766 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	683a      	ldr	r2, [r7, #0]
 800a786:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	1c5a      	adds	r2, r3, #1
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	601a      	str	r2, [r3, #0]
}
 800a7a4:	bf00      	nop
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	6892      	ldr	r2, [r2, #8]
 800a7c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	6852      	ldr	r2, [r2, #4]
 800a7d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d103      	bne.n	800a7e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	689a      	ldr	r2, [r3, #8]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	1e5a      	subs	r2, r3, #1
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3714      	adds	r7, #20
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10a      	bne.n	800a82e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a82a:	bf00      	nop
 800a82c:	e7fe      	b.n	800a82c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a82e:	f002 f951 	bl	800cad4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a83a:	68f9      	ldr	r1, [r7, #12]
 800a83c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a83e:	fb01 f303 	mul.w	r3, r1, r3
 800a842:	441a      	add	r2, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a85e:	3b01      	subs	r3, #1
 800a860:	68f9      	ldr	r1, [r7, #12]
 800a862:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a864:	fb01 f303 	mul.w	r3, r1, r3
 800a868:	441a      	add	r2, r3
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	22ff      	movs	r2, #255	; 0xff
 800a872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	22ff      	movs	r2, #255	; 0xff
 800a87a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d114      	bne.n	800a8ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d01a      	beq.n	800a8c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	3310      	adds	r3, #16
 800a890:	4618      	mov	r0, r3
 800a892:	f001 fa09 	bl	800bca8 <xTaskRemoveFromEventList>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d012      	beq.n	800a8c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a89c:	4b0c      	ldr	r3, [pc, #48]	; (800a8d0 <xQueueGenericReset+0xcc>)
 800a89e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	e009      	b.n	800a8c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3310      	adds	r3, #16
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7ff fef2 	bl	800a69c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	3324      	adds	r3, #36	; 0x24
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7ff feed 	bl	800a69c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a8c2:	f002 f937 	bl	800cb34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a8c6:	2301      	movs	r3, #1
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	e000ed04 	.word	0xe000ed04

0800a8d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b08e      	sub	sp, #56	; 0x38
 800a8d8:	af02      	add	r7, sp, #8
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
 800a8e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10a      	bne.n	800a8fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ec:	f383 8811 	msr	BASEPRI, r3
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8fa:	bf00      	nop
 800a8fc:	e7fe      	b.n	800a8fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10a      	bne.n	800a91a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a916:	bf00      	nop
 800a918:	e7fe      	b.n	800a918 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <xQueueGenericCreateStatic+0x52>
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <xQueueGenericCreateStatic+0x56>
 800a926:	2301      	movs	r3, #1
 800a928:	e000      	b.n	800a92c <xQueueGenericCreateStatic+0x58>
 800a92a:	2300      	movs	r3, #0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10a      	bne.n	800a946 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a934:	f383 8811 	msr	BASEPRI, r3
 800a938:	f3bf 8f6f 	isb	sy
 800a93c:	f3bf 8f4f 	dsb	sy
 800a940:	623b      	str	r3, [r7, #32]
}
 800a942:	bf00      	nop
 800a944:	e7fe      	b.n	800a944 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d102      	bne.n	800a952 <xQueueGenericCreateStatic+0x7e>
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <xQueueGenericCreateStatic+0x82>
 800a952:	2301      	movs	r3, #1
 800a954:	e000      	b.n	800a958 <xQueueGenericCreateStatic+0x84>
 800a956:	2300      	movs	r3, #0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10a      	bne.n	800a972 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	61fb      	str	r3, [r7, #28]
}
 800a96e:	bf00      	nop
 800a970:	e7fe      	b.n	800a970 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a972:	2350      	movs	r3, #80	; 0x50
 800a974:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2b50      	cmp	r3, #80	; 0x50
 800a97a:	d00a      	beq.n	800a992 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	61bb      	str	r3, [r7, #24]
}
 800a98e:	bf00      	nop
 800a990:	e7fe      	b.n	800a990 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a992:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00d      	beq.n	800a9ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	68b9      	ldr	r1, [r7, #8]
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f000 f805 	bl	800a9c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3730      	adds	r7, #48	; 0x30
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	607a      	str	r2, [r7, #4]
 800a9d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d103      	bne.n	800a9e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	69ba      	ldr	r2, [r7, #24]
 800a9dc:	601a      	str	r2, [r3, #0]
 800a9de:	e002      	b.n	800a9e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a9f2:	2101      	movs	r1, #1
 800a9f4:	69b8      	ldr	r0, [r7, #24]
 800a9f6:	f7ff ff05 	bl	800a804 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	78fa      	ldrb	r2, [r7, #3]
 800a9fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa02:	bf00      	nop
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
	...

0800aa0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b08e      	sub	sp, #56	; 0x38
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
 800aa18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10a      	bne.n	800aa3e <xQueueGenericSend+0x32>
	__asm volatile
 800aa28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2c:	f383 8811 	msr	BASEPRI, r3
 800aa30:	f3bf 8f6f 	isb	sy
 800aa34:	f3bf 8f4f 	dsb	sy
 800aa38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa3a:	bf00      	nop
 800aa3c:	e7fe      	b.n	800aa3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d103      	bne.n	800aa4c <xQueueGenericSend+0x40>
 800aa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d101      	bne.n	800aa50 <xQueueGenericSend+0x44>
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e000      	b.n	800aa52 <xQueueGenericSend+0x46>
 800aa50:	2300      	movs	r3, #0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10a      	bne.n	800aa6c <xQueueGenericSend+0x60>
	__asm volatile
 800aa56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5a:	f383 8811 	msr	BASEPRI, r3
 800aa5e:	f3bf 8f6f 	isb	sy
 800aa62:	f3bf 8f4f 	dsb	sy
 800aa66:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa68:	bf00      	nop
 800aa6a:	e7fe      	b.n	800aa6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d103      	bne.n	800aa7a <xQueueGenericSend+0x6e>
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d101      	bne.n	800aa7e <xQueueGenericSend+0x72>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e000      	b.n	800aa80 <xQueueGenericSend+0x74>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10a      	bne.n	800aa9a <xQueueGenericSend+0x8e>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	623b      	str	r3, [r7, #32]
}
 800aa96:	bf00      	nop
 800aa98:	e7fe      	b.n	800aa98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa9a:	f001 fac3 	bl	800c024 <xTaskGetSchedulerState>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d102      	bne.n	800aaaa <xQueueGenericSend+0x9e>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d101      	bne.n	800aaae <xQueueGenericSend+0xa2>
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e000      	b.n	800aab0 <xQueueGenericSend+0xa4>
 800aaae:	2300      	movs	r3, #0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10a      	bne.n	800aaca <xQueueGenericSend+0xbe>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	61fb      	str	r3, [r7, #28]
}
 800aac6:	bf00      	nop
 800aac8:	e7fe      	b.n	800aac8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aaca:	f002 f803 	bl	800cad4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d302      	bcc.n	800aae0 <xQueueGenericSend+0xd4>
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d129      	bne.n	800ab34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aae0:	683a      	ldr	r2, [r7, #0]
 800aae2:	68b9      	ldr	r1, [r7, #8]
 800aae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aae6:	f000 fa0b 	bl	800af00 <prvCopyDataToQueue>
 800aaea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d010      	beq.n	800ab16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aaf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf6:	3324      	adds	r3, #36	; 0x24
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f001 f8d5 	bl	800bca8 <xTaskRemoveFromEventList>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d013      	beq.n	800ab2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab04:	4b3f      	ldr	r3, [pc, #252]	; (800ac04 <xQueueGenericSend+0x1f8>)
 800ab06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab0a:	601a      	str	r2, [r3, #0]
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	f3bf 8f6f 	isb	sy
 800ab14:	e00a      	b.n	800ab2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d007      	beq.n	800ab2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab1c:	4b39      	ldr	r3, [pc, #228]	; (800ac04 <xQueueGenericSend+0x1f8>)
 800ab1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab22:	601a      	str	r2, [r3, #0]
 800ab24:	f3bf 8f4f 	dsb	sy
 800ab28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab2c:	f002 f802 	bl	800cb34 <vPortExitCritical>
				return pdPASS;
 800ab30:	2301      	movs	r3, #1
 800ab32:	e063      	b.n	800abfc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d103      	bne.n	800ab42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab3a:	f001 fffb 	bl	800cb34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	e05c      	b.n	800abfc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d106      	bne.n	800ab56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab48:	f107 0314 	add.w	r3, r7, #20
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f001 f90f 	bl	800bd70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab52:	2301      	movs	r3, #1
 800ab54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab56:	f001 ffed 	bl	800cb34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab5a:	f000 fe81 	bl	800b860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab5e:	f001 ffb9 	bl	800cad4 <vPortEnterCritical>
 800ab62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab68:	b25b      	sxtb	r3, r3
 800ab6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab6e:	d103      	bne.n	800ab78 <xQueueGenericSend+0x16c>
 800ab70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab72:	2200      	movs	r2, #0
 800ab74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab7e:	b25b      	sxtb	r3, r3
 800ab80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab84:	d103      	bne.n	800ab8e <xQueueGenericSend+0x182>
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab8e:	f001 ffd1 	bl	800cb34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab92:	1d3a      	adds	r2, r7, #4
 800ab94:	f107 0314 	add.w	r3, r7, #20
 800ab98:	4611      	mov	r1, r2
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f001 f8fe 	bl	800bd9c <xTaskCheckForTimeOut>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d124      	bne.n	800abf0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aba6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aba8:	f000 faa2 	bl	800b0f0 <prvIsQueueFull>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d018      	beq.n	800abe4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800abb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb4:	3310      	adds	r3, #16
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	4611      	mov	r1, r2
 800abba:	4618      	mov	r0, r3
 800abbc:	f001 f824 	bl	800bc08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800abc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abc2:	f000 fa2d 	bl	800b020 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800abc6:	f000 fe59 	bl	800b87c <xTaskResumeAll>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f47f af7c 	bne.w	800aaca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800abd2:	4b0c      	ldr	r3, [pc, #48]	; (800ac04 <xQueueGenericSend+0x1f8>)
 800abd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	e772      	b.n	800aaca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800abe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abe6:	f000 fa1b 	bl	800b020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abea:	f000 fe47 	bl	800b87c <xTaskResumeAll>
 800abee:	e76c      	b.n	800aaca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800abf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abf2:	f000 fa15 	bl	800b020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abf6:	f000 fe41 	bl	800b87c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800abfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3738      	adds	r7, #56	; 0x38
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	e000ed04 	.word	0xe000ed04

0800ac08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b090      	sub	sp, #64	; 0x40
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
 800ac14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ac1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10a      	bne.n	800ac36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ac20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac32:	bf00      	nop
 800ac34:	e7fe      	b.n	800ac34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d103      	bne.n	800ac44 <xQueueGenericSendFromISR+0x3c>
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d101      	bne.n	800ac48 <xQueueGenericSendFromISR+0x40>
 800ac44:	2301      	movs	r3, #1
 800ac46:	e000      	b.n	800ac4a <xQueueGenericSendFromISR+0x42>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10a      	bne.n	800ac64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ac4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac52:	f383 8811 	msr	BASEPRI, r3
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac60:	bf00      	nop
 800ac62:	e7fe      	b.n	800ac62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d103      	bne.n	800ac72 <xQueueGenericSendFromISR+0x6a>
 800ac6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d101      	bne.n	800ac76 <xQueueGenericSendFromISR+0x6e>
 800ac72:	2301      	movs	r3, #1
 800ac74:	e000      	b.n	800ac78 <xQueueGenericSendFromISR+0x70>
 800ac76:	2300      	movs	r3, #0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10a      	bne.n	800ac92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	623b      	str	r3, [r7, #32]
}
 800ac8e:	bf00      	nop
 800ac90:	e7fe      	b.n	800ac90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac92:	f002 f801 	bl	800cc98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ac96:	f3ef 8211 	mrs	r2, BASEPRI
 800ac9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	61fa      	str	r2, [r7, #28]
 800acac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800acae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acb0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acba:	429a      	cmp	r2, r3
 800acbc:	d302      	bcc.n	800acc4 <xQueueGenericSendFromISR+0xbc>
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	d12f      	bne.n	800ad24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800acc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	68b9      	ldr	r1, [r7, #8]
 800acd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800acda:	f000 f911 	bl	800af00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800acde:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ace2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ace6:	d112      	bne.n	800ad0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ace8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acec:	2b00      	cmp	r3, #0
 800acee:	d016      	beq.n	800ad1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf2:	3324      	adds	r3, #36	; 0x24
 800acf4:	4618      	mov	r0, r3
 800acf6:	f000 ffd7 	bl	800bca8 <xTaskRemoveFromEventList>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00e      	beq.n	800ad1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00b      	beq.n	800ad1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	601a      	str	r2, [r3, #0]
 800ad0c:	e007      	b.n	800ad1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad12:	3301      	adds	r3, #1
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	b25a      	sxtb	r2, r3
 800ad18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ad22:	e001      	b.n	800ad28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad24:	2300      	movs	r3, #0
 800ad26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3740      	adds	r7, #64	; 0x40
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
	...

0800ad40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b08c      	sub	sp, #48	; 0x30
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10a      	bne.n	800ad70 <xQueueReceive+0x30>
	__asm volatile
 800ad5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	623b      	str	r3, [r7, #32]
}
 800ad6c:	bf00      	nop
 800ad6e:	e7fe      	b.n	800ad6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d103      	bne.n	800ad7e <xQueueReceive+0x3e>
 800ad76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d101      	bne.n	800ad82 <xQueueReceive+0x42>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e000      	b.n	800ad84 <xQueueReceive+0x44>
 800ad82:	2300      	movs	r3, #0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10a      	bne.n	800ad9e <xQueueReceive+0x5e>
	__asm volatile
 800ad88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8c:	f383 8811 	msr	BASEPRI, r3
 800ad90:	f3bf 8f6f 	isb	sy
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	61fb      	str	r3, [r7, #28]
}
 800ad9a:	bf00      	nop
 800ad9c:	e7fe      	b.n	800ad9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad9e:	f001 f941 	bl	800c024 <xTaskGetSchedulerState>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d102      	bne.n	800adae <xQueueReceive+0x6e>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d101      	bne.n	800adb2 <xQueueReceive+0x72>
 800adae:	2301      	movs	r3, #1
 800adb0:	e000      	b.n	800adb4 <xQueueReceive+0x74>
 800adb2:	2300      	movs	r3, #0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10a      	bne.n	800adce <xQueueReceive+0x8e>
	__asm volatile
 800adb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	61bb      	str	r3, [r7, #24]
}
 800adca:	bf00      	nop
 800adcc:	e7fe      	b.n	800adcc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adce:	f001 fe81 	bl	800cad4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800add2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800add8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adda:	2b00      	cmp	r3, #0
 800addc:	d01f      	beq.n	800ae1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800adde:	68b9      	ldr	r1, [r7, #8]
 800ade0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ade2:	f000 f8f7 	bl	800afd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade8:	1e5a      	subs	r2, r3, #1
 800adea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00f      	beq.n	800ae16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf8:	3310      	adds	r3, #16
 800adfa:	4618      	mov	r0, r3
 800adfc:	f000 ff54 	bl	800bca8 <xTaskRemoveFromEventList>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d007      	beq.n	800ae16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae06:	4b3d      	ldr	r3, [pc, #244]	; (800aefc <xQueueReceive+0x1bc>)
 800ae08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae0c:	601a      	str	r2, [r3, #0]
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae16:	f001 fe8d 	bl	800cb34 <vPortExitCritical>
				return pdPASS;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e069      	b.n	800aef2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d103      	bne.n	800ae2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae24:	f001 fe86 	bl	800cb34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	e062      	b.n	800aef2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d106      	bne.n	800ae40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae32:	f107 0310 	add.w	r3, r7, #16
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 ff9a 	bl	800bd70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae40:	f001 fe78 	bl	800cb34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae44:	f000 fd0c 	bl	800b860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae48:	f001 fe44 	bl	800cad4 <vPortEnterCritical>
 800ae4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae52:	b25b      	sxtb	r3, r3
 800ae54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae58:	d103      	bne.n	800ae62 <xQueueReceive+0x122>
 800ae5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae68:	b25b      	sxtb	r3, r3
 800ae6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae6e:	d103      	bne.n	800ae78 <xQueueReceive+0x138>
 800ae70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae78:	f001 fe5c 	bl	800cb34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae7c:	1d3a      	adds	r2, r7, #4
 800ae7e:	f107 0310 	add.w	r3, r7, #16
 800ae82:	4611      	mov	r1, r2
 800ae84:	4618      	mov	r0, r3
 800ae86:	f000 ff89 	bl	800bd9c <xTaskCheckForTimeOut>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d123      	bne.n	800aed8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae92:	f000 f917 	bl	800b0c4 <prvIsQueueEmpty>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d017      	beq.n	800aecc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9e:	3324      	adds	r3, #36	; 0x24
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	4611      	mov	r1, r2
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 feaf 	bl	800bc08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aeaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeac:	f000 f8b8 	bl	800b020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aeb0:	f000 fce4 	bl	800b87c <xTaskResumeAll>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d189      	bne.n	800adce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aeba:	4b10      	ldr	r3, [pc, #64]	; (800aefc <xQueueReceive+0x1bc>)
 800aebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec0:	601a      	str	r2, [r3, #0]
 800aec2:	f3bf 8f4f 	dsb	sy
 800aec6:	f3bf 8f6f 	isb	sy
 800aeca:	e780      	b.n	800adce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aece:	f000 f8a7 	bl	800b020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aed2:	f000 fcd3 	bl	800b87c <xTaskResumeAll>
 800aed6:	e77a      	b.n	800adce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeda:	f000 f8a1 	bl	800b020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aede:	f000 fccd 	bl	800b87c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aee4:	f000 f8ee 	bl	800b0c4 <prvIsQueueEmpty>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f43f af6f 	beq.w	800adce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aef0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3730      	adds	r7, #48	; 0x30
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	e000ed04 	.word	0xe000ed04

0800af00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af0c:	2300      	movs	r3, #0
 800af0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10d      	bne.n	800af3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d14d      	bne.n	800afc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f001 f898 	bl	800c060 <xTaskPriorityDisinherit>
 800af30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2200      	movs	r2, #0
 800af36:	609a      	str	r2, [r3, #8]
 800af38:	e043      	b.n	800afc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d119      	bne.n	800af74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6858      	ldr	r0, [r3, #4]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af48:	461a      	mov	r2, r3
 800af4a:	68b9      	ldr	r1, [r7, #8]
 800af4c:	f002 f908 	bl	800d160 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	685a      	ldr	r2, [r3, #4]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af58:	441a      	add	r2, r3
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	429a      	cmp	r2, r3
 800af68:	d32b      	bcc.n	800afc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	605a      	str	r2, [r3, #4]
 800af72:	e026      	b.n	800afc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	68d8      	ldr	r0, [r3, #12]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7c:	461a      	mov	r2, r3
 800af7e:	68b9      	ldr	r1, [r7, #8]
 800af80:	f002 f8ee 	bl	800d160 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	68da      	ldr	r2, [r3, #12]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8c:	425b      	negs	r3, r3
 800af8e:	441a      	add	r2, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	68da      	ldr	r2, [r3, #12]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d207      	bcs.n	800afb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	689a      	ldr	r2, [r3, #8]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa8:	425b      	negs	r3, r3
 800afaa:	441a      	add	r2, r3
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d105      	bne.n	800afc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d002      	beq.n	800afc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	3b01      	subs	r3, #1
 800afc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	1c5a      	adds	r2, r3, #1
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800afca:	697b      	ldr	r3, [r7, #20]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3718      	adds	r7, #24
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d018      	beq.n	800b018 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68da      	ldr	r2, [r3, #12]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afee:	441a      	add	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	68da      	ldr	r2, [r3, #12]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	429a      	cmp	r2, r3
 800affe:	d303      	bcc.n	800b008 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	68d9      	ldr	r1, [r3, #12]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b010:	461a      	mov	r2, r3
 800b012:	6838      	ldr	r0, [r7, #0]
 800b014:	f002 f8a4 	bl	800d160 <memcpy>
	}
}
 800b018:	bf00      	nop
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b028:	f001 fd54 	bl	800cad4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b032:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b034:	e011      	b.n	800b05a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d012      	beq.n	800b064 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	3324      	adds	r3, #36	; 0x24
 800b042:	4618      	mov	r0, r3
 800b044:	f000 fe30 	bl	800bca8 <xTaskRemoveFromEventList>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d001      	beq.n	800b052 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b04e:	f000 ff07 	bl	800be60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b052:	7bfb      	ldrb	r3, [r7, #15]
 800b054:	3b01      	subs	r3, #1
 800b056:	b2db      	uxtb	r3, r3
 800b058:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b05a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	dce9      	bgt.n	800b036 <prvUnlockQueue+0x16>
 800b062:	e000      	b.n	800b066 <prvUnlockQueue+0x46>
					break;
 800b064:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	22ff      	movs	r2, #255	; 0xff
 800b06a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b06e:	f001 fd61 	bl	800cb34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b072:	f001 fd2f 	bl	800cad4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b07c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b07e:	e011      	b.n	800b0a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d012      	beq.n	800b0ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	3310      	adds	r3, #16
 800b08c:	4618      	mov	r0, r3
 800b08e:	f000 fe0b 	bl	800bca8 <xTaskRemoveFromEventList>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d001      	beq.n	800b09c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b098:	f000 fee2 	bl	800be60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b09c:	7bbb      	ldrb	r3, [r7, #14]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	dce9      	bgt.n	800b080 <prvUnlockQueue+0x60>
 800b0ac:	e000      	b.n	800b0b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b0ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	22ff      	movs	r2, #255	; 0xff
 800b0b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b0b8:	f001 fd3c 	bl	800cb34 <vPortExitCritical>
}
 800b0bc:	bf00      	nop
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0cc:	f001 fd02 	bl	800cad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d102      	bne.n	800b0de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	e001      	b.n	800b0e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0e2:	f001 fd27 	bl	800cb34 <vPortExitCritical>

	return xReturn;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0f8:	f001 fcec 	bl	800cad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b104:	429a      	cmp	r2, r3
 800b106:	d102      	bne.n	800b10e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b108:	2301      	movs	r3, #1
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	e001      	b.n	800b112 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b10e:	2300      	movs	r3, #0
 800b110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b112:	f001 fd0f 	bl	800cb34 <vPortExitCritical>

	return xReturn;
 800b116:	68fb      	ldr	r3, [r7, #12]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b12a:	2300      	movs	r3, #0
 800b12c:	60fb      	str	r3, [r7, #12]
 800b12e:	e014      	b.n	800b15a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b130:	4a0f      	ldr	r2, [pc, #60]	; (800b170 <vQueueAddToRegistry+0x50>)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10b      	bne.n	800b154 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b13c:	490c      	ldr	r1, [pc, #48]	; (800b170 <vQueueAddToRegistry+0x50>)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	683a      	ldr	r2, [r7, #0]
 800b142:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b146:	4a0a      	ldr	r2, [pc, #40]	; (800b170 <vQueueAddToRegistry+0x50>)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	00db      	lsls	r3, r3, #3
 800b14c:	4413      	add	r3, r2
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b152:	e006      	b.n	800b162 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	3301      	adds	r3, #1
 800b158:	60fb      	str	r3, [r7, #12]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2b07      	cmp	r3, #7
 800b15e:	d9e7      	bls.n	800b130 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b160:	bf00      	nop
 800b162:	bf00      	nop
 800b164:	3714      	adds	r7, #20
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	20007424 	.word	0x20007424

0800b174 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b174:	b580      	push	{r7, lr}
 800b176:	b086      	sub	sp, #24
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b184:	f001 fca6 	bl	800cad4 <vPortEnterCritical>
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b18e:	b25b      	sxtb	r3, r3
 800b190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b194:	d103      	bne.n	800b19e <vQueueWaitForMessageRestricted+0x2a>
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	2200      	movs	r2, #0
 800b19a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1a4:	b25b      	sxtb	r3, r3
 800b1a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1aa:	d103      	bne.n	800b1b4 <vQueueWaitForMessageRestricted+0x40>
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1b4:	f001 fcbe 	bl	800cb34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d106      	bne.n	800b1ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	3324      	adds	r3, #36	; 0x24
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	68b9      	ldr	r1, [r7, #8]
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f000 fd41 	bl	800bc50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b1ce:	6978      	ldr	r0, [r7, #20]
 800b1d0:	f7ff ff26 	bl	800b020 <prvUnlockQueue>
	}
 800b1d4:	bf00      	nop
 800b1d6:	3718      	adds	r7, #24
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b08e      	sub	sp, #56	; 0x38
 800b1e0:	af04      	add	r7, sp, #16
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	607a      	str	r2, [r7, #4]
 800b1e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10a      	bne.n	800b206 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	623b      	str	r3, [r7, #32]
}
 800b202:	bf00      	nop
 800b204:	e7fe      	b.n	800b204 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d10a      	bne.n	800b222 <xTaskCreateStatic+0x46>
	__asm volatile
 800b20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b210:	f383 8811 	msr	BASEPRI, r3
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	f3bf 8f4f 	dsb	sy
 800b21c:	61fb      	str	r3, [r7, #28]
}
 800b21e:	bf00      	nop
 800b220:	e7fe      	b.n	800b220 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b222:	235c      	movs	r3, #92	; 0x5c
 800b224:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	2b5c      	cmp	r3, #92	; 0x5c
 800b22a:	d00a      	beq.n	800b242 <xTaskCreateStatic+0x66>
	__asm volatile
 800b22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b230:	f383 8811 	msr	BASEPRI, r3
 800b234:	f3bf 8f6f 	isb	sy
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	61bb      	str	r3, [r7, #24]
}
 800b23e:	bf00      	nop
 800b240:	e7fe      	b.n	800b240 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b242:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b246:	2b00      	cmp	r3, #0
 800b248:	d01e      	beq.n	800b288 <xTaskCreateStatic+0xac>
 800b24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d01b      	beq.n	800b288 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b258:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25c:	2202      	movs	r2, #2
 800b25e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b262:	2300      	movs	r3, #0
 800b264:	9303      	str	r3, [sp, #12]
 800b266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b268:	9302      	str	r3, [sp, #8]
 800b26a:	f107 0314 	add.w	r3, r7, #20
 800b26e:	9301      	str	r3, [sp, #4]
 800b270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	68b9      	ldr	r1, [r7, #8]
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f000 f850 	bl	800b320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b282:	f000 f8dd 	bl	800b440 <prvAddNewTaskToReadyList>
 800b286:	e001      	b.n	800b28c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b288:	2300      	movs	r3, #0
 800b28a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b28c:	697b      	ldr	r3, [r7, #20]
	}
 800b28e:	4618      	mov	r0, r3
 800b290:	3728      	adds	r7, #40	; 0x28
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}

0800b296 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b296:	b580      	push	{r7, lr}
 800b298:	b08c      	sub	sp, #48	; 0x30
 800b29a:	af04      	add	r7, sp, #16
 800b29c:	60f8      	str	r0, [r7, #12]
 800b29e:	60b9      	str	r1, [r7, #8]
 800b2a0:	603b      	str	r3, [r7, #0]
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b2a6:	88fb      	ldrh	r3, [r7, #6]
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f001 fd34 	bl	800cd18 <pvPortMalloc>
 800b2b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00e      	beq.n	800b2d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b2b8:	205c      	movs	r0, #92	; 0x5c
 800b2ba:	f001 fd2d 	bl	800cd18 <pvPortMalloc>
 800b2be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d003      	beq.n	800b2ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	697a      	ldr	r2, [r7, #20]
 800b2ca:	631a      	str	r2, [r3, #48]	; 0x30
 800b2cc:	e005      	b.n	800b2da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b2ce:	6978      	ldr	r0, [r7, #20]
 800b2d0:	f001 fdee 	bl	800ceb0 <vPortFree>
 800b2d4:	e001      	b.n	800b2da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d017      	beq.n	800b310 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b2e8:	88fa      	ldrh	r2, [r7, #6]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	9303      	str	r3, [sp, #12]
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	9302      	str	r3, [sp, #8]
 800b2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f4:	9301      	str	r3, [sp, #4]
 800b2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	68b9      	ldr	r1, [r7, #8]
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f000 f80e 	bl	800b320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b304:	69f8      	ldr	r0, [r7, #28]
 800b306:	f000 f89b 	bl	800b440 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b30a:	2301      	movs	r3, #1
 800b30c:	61bb      	str	r3, [r7, #24]
 800b30e:	e002      	b.n	800b316 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b314:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b316:	69bb      	ldr	r3, [r7, #24]
	}
 800b318:	4618      	mov	r0, r3
 800b31a:	3720      	adds	r7, #32
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b088      	sub	sp, #32
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	607a      	str	r2, [r7, #4]
 800b32c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b330:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	461a      	mov	r2, r3
 800b338:	21a5      	movs	r1, #165	; 0xa5
 800b33a:	f001 ff1f 	bl	800d17c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b348:	3b01      	subs	r3, #1
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	4413      	add	r3, r2
 800b34e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	f023 0307 	bic.w	r3, r3, #7
 800b356:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	f003 0307 	and.w	r3, r3, #7
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00a      	beq.n	800b378 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	617b      	str	r3, [r7, #20]
}
 800b374:	bf00      	nop
 800b376:	e7fe      	b.n	800b376 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d01f      	beq.n	800b3be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b37e:	2300      	movs	r3, #0
 800b380:	61fb      	str	r3, [r7, #28]
 800b382:	e012      	b.n	800b3aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b384:	68ba      	ldr	r2, [r7, #8]
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	4413      	add	r3, r2
 800b38a:	7819      	ldrb	r1, [r3, #0]
 800b38c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	4413      	add	r3, r2
 800b392:	3334      	adds	r3, #52	; 0x34
 800b394:	460a      	mov	r2, r1
 800b396:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	4413      	add	r3, r2
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d006      	beq.n	800b3b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	61fb      	str	r3, [r7, #28]
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	2b0f      	cmp	r3, #15
 800b3ae:	d9e9      	bls.n	800b384 <prvInitialiseNewTask+0x64>
 800b3b0:	e000      	b.n	800b3b4 <prvInitialiseNewTask+0x94>
			{
				break;
 800b3b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b3bc:	e003      	b.n	800b3c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c8:	2b37      	cmp	r3, #55	; 0x37
 800b3ca:	d901      	bls.n	800b3d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b3cc:	2337      	movs	r3, #55	; 0x37
 800b3ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3de:	2200      	movs	r2, #0
 800b3e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7ff f978 	bl	800a6dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ee:	3318      	adds	r3, #24
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7ff f973 	bl	800a6dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b404:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b40a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40e:	2200      	movs	r2, #0
 800b410:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	68f9      	ldr	r1, [r7, #12]
 800b41e:	69b8      	ldr	r0, [r7, #24]
 800b420:	f001 fa2e 	bl	800c880 <pxPortInitialiseStack>
 800b424:	4602      	mov	r2, r0
 800b426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b428:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d002      	beq.n	800b436 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b436:	bf00      	nop
 800b438:	3720      	adds	r7, #32
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
	...

0800b440 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b448:	f001 fb44 	bl	800cad4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b44c:	4b2d      	ldr	r3, [pc, #180]	; (800b504 <prvAddNewTaskToReadyList+0xc4>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	3301      	adds	r3, #1
 800b452:	4a2c      	ldr	r2, [pc, #176]	; (800b504 <prvAddNewTaskToReadyList+0xc4>)
 800b454:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b456:	4b2c      	ldr	r3, [pc, #176]	; (800b508 <prvAddNewTaskToReadyList+0xc8>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d109      	bne.n	800b472 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b45e:	4a2a      	ldr	r2, [pc, #168]	; (800b508 <prvAddNewTaskToReadyList+0xc8>)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b464:	4b27      	ldr	r3, [pc, #156]	; (800b504 <prvAddNewTaskToReadyList+0xc4>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d110      	bne.n	800b48e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b46c:	f000 fd1c 	bl	800bea8 <prvInitialiseTaskLists>
 800b470:	e00d      	b.n	800b48e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b472:	4b26      	ldr	r3, [pc, #152]	; (800b50c <prvAddNewTaskToReadyList+0xcc>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d109      	bne.n	800b48e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b47a:	4b23      	ldr	r3, [pc, #140]	; (800b508 <prvAddNewTaskToReadyList+0xc8>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b484:	429a      	cmp	r2, r3
 800b486:	d802      	bhi.n	800b48e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b488:	4a1f      	ldr	r2, [pc, #124]	; (800b508 <prvAddNewTaskToReadyList+0xc8>)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b48e:	4b20      	ldr	r3, [pc, #128]	; (800b510 <prvAddNewTaskToReadyList+0xd0>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3301      	adds	r3, #1
 800b494:	4a1e      	ldr	r2, [pc, #120]	; (800b510 <prvAddNewTaskToReadyList+0xd0>)
 800b496:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b498:	4b1d      	ldr	r3, [pc, #116]	; (800b510 <prvAddNewTaskToReadyList+0xd0>)
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a4:	4b1b      	ldr	r3, [pc, #108]	; (800b514 <prvAddNewTaskToReadyList+0xd4>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d903      	bls.n	800b4b4 <prvAddNewTaskToReadyList+0x74>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b0:	4a18      	ldr	r2, [pc, #96]	; (800b514 <prvAddNewTaskToReadyList+0xd4>)
 800b4b2:	6013      	str	r3, [r2, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b8:	4613      	mov	r3, r2
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	4413      	add	r3, r2
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4a15      	ldr	r2, [pc, #84]	; (800b518 <prvAddNewTaskToReadyList+0xd8>)
 800b4c2:	441a      	add	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	3304      	adds	r3, #4
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	4610      	mov	r0, r2
 800b4cc:	f7ff f913 	bl	800a6f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b4d0:	f001 fb30 	bl	800cb34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b4d4:	4b0d      	ldr	r3, [pc, #52]	; (800b50c <prvAddNewTaskToReadyList+0xcc>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00e      	beq.n	800b4fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b4dc:	4b0a      	ldr	r3, [pc, #40]	; (800b508 <prvAddNewTaskToReadyList+0xc8>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d207      	bcs.n	800b4fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b4ea:	4b0c      	ldr	r3, [pc, #48]	; (800b51c <prvAddNewTaskToReadyList+0xdc>)
 800b4ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4f0:	601a      	str	r2, [r3, #0]
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4fa:	bf00      	nop
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	20000dac 	.word	0x20000dac
 800b508:	200008d8 	.word	0x200008d8
 800b50c:	20000db8 	.word	0x20000db8
 800b510:	20000dc8 	.word	0x20000dc8
 800b514:	20000db4 	.word	0x20000db4
 800b518:	200008dc 	.word	0x200008dc
 800b51c:	e000ed04 	.word	0xe000ed04

0800b520 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b528:	2300      	movs	r3, #0
 800b52a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d017      	beq.n	800b562 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b532:	4b13      	ldr	r3, [pc, #76]	; (800b580 <vTaskDelay+0x60>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00a      	beq.n	800b550 <vTaskDelay+0x30>
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	60bb      	str	r3, [r7, #8]
}
 800b54c:	bf00      	nop
 800b54e:	e7fe      	b.n	800b54e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b550:	f000 f986 	bl	800b860 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b554:	2100      	movs	r1, #0
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 fdf0 	bl	800c13c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b55c:	f000 f98e 	bl	800b87c <xTaskResumeAll>
 800b560:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d107      	bne.n	800b578 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b568:	4b06      	ldr	r3, [pc, #24]	; (800b584 <vTaskDelay+0x64>)
 800b56a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b56e:	601a      	str	r2, [r3, #0]
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b578:	bf00      	nop
 800b57a:	3710      	adds	r7, #16
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	20000dd4 	.word	0x20000dd4
 800b584:	e000ed04 	.word	0xe000ed04

0800b588 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b590:	f001 faa0 	bl	800cad4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d102      	bne.n	800b5a0 <vTaskSuspend+0x18>
 800b59a:	4b30      	ldr	r3, [pc, #192]	; (800b65c <vTaskSuspend+0xd4>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	e000      	b.n	800b5a2 <vTaskSuspend+0x1a>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7ff f901 	bl	800a7b0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d004      	beq.n	800b5c0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	3318      	adds	r3, #24
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7ff f8f8 	bl	800a7b0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	4826      	ldr	r0, [pc, #152]	; (800b660 <vTaskSuspend+0xd8>)
 800b5c8:	f7ff f895 	bl	800a6f6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d103      	bne.n	800b5e0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b5e0:	f001 faa8 	bl	800cb34 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b5e4:	4b1f      	ldr	r3, [pc, #124]	; (800b664 <vTaskSuspend+0xdc>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d005      	beq.n	800b5f8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b5ec:	f001 fa72 	bl	800cad4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b5f0:	f000 fcf8 	bl	800bfe4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b5f4:	f001 fa9e 	bl	800cb34 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b5f8:	4b18      	ldr	r3, [pc, #96]	; (800b65c <vTaskSuspend+0xd4>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d127      	bne.n	800b652 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800b602:	4b18      	ldr	r3, [pc, #96]	; (800b664 <vTaskSuspend+0xdc>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d017      	beq.n	800b63a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b60a:	4b17      	ldr	r3, [pc, #92]	; (800b668 <vTaskSuspend+0xe0>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d00a      	beq.n	800b628 <vTaskSuspend+0xa0>
	__asm volatile
 800b612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b616:	f383 8811 	msr	BASEPRI, r3
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	60bb      	str	r3, [r7, #8]
}
 800b624:	bf00      	nop
 800b626:	e7fe      	b.n	800b626 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800b628:	4b10      	ldr	r3, [pc, #64]	; (800b66c <vTaskSuspend+0xe4>)
 800b62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b62e:	601a      	str	r2, [r3, #0]
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b638:	e00b      	b.n	800b652 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b63a:	4b09      	ldr	r3, [pc, #36]	; (800b660 <vTaskSuspend+0xd8>)
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	4b0c      	ldr	r3, [pc, #48]	; (800b670 <vTaskSuspend+0xe8>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	429a      	cmp	r2, r3
 800b644:	d103      	bne.n	800b64e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800b646:	4b05      	ldr	r3, [pc, #20]	; (800b65c <vTaskSuspend+0xd4>)
 800b648:	2200      	movs	r2, #0
 800b64a:	601a      	str	r2, [r3, #0]
	}
 800b64c:	e001      	b.n	800b652 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800b64e:	f000 fa7d 	bl	800bb4c <vTaskSwitchContext>
	}
 800b652:	bf00      	nop
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	200008d8 	.word	0x200008d8
 800b660:	20000d98 	.word	0x20000d98
 800b664:	20000db8 	.word	0x20000db8
 800b668:	20000dd4 	.word	0x20000dd4
 800b66c:	e000ed04 	.word	0xe000ed04
 800b670:	20000dac 	.word	0x20000dac

0800b674 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800b674:	b480      	push	{r7}
 800b676:	b087      	sub	sp, #28
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800b67c:	2300      	movs	r3, #0
 800b67e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10a      	bne.n	800b6a0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800b68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	60fb      	str	r3, [r7, #12]
}
 800b69c:	bf00      	nop
 800b69e:	e7fe      	b.n	800b69e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	695b      	ldr	r3, [r3, #20]
 800b6a4:	4a0a      	ldr	r2, [pc, #40]	; (800b6d0 <prvTaskIsTaskSuspended+0x5c>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d10a      	bne.n	800b6c0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ae:	4a09      	ldr	r2, [pc, #36]	; (800b6d4 <prvTaskIsTaskSuspended+0x60>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d005      	beq.n	800b6c0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d101      	bne.n	800b6c0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b6c0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	371c      	adds	r7, #28
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	20000d98 	.word	0x20000d98
 800b6d4:	20000d6c 	.word	0x20000d6c

0800b6d8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10a      	bne.n	800b700 <vTaskResume+0x28>
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	60bb      	str	r3, [r7, #8]
}
 800b6fc:	bf00      	nop
 800b6fe:	e7fe      	b.n	800b6fe <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800b700:	4b20      	ldr	r3, [pc, #128]	; (800b784 <vTaskResume+0xac>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	68fa      	ldr	r2, [r7, #12]
 800b706:	429a      	cmp	r2, r3
 800b708:	d038      	beq.n	800b77c <vTaskResume+0xa4>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d035      	beq.n	800b77c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800b710:	f001 f9e0 	bl	800cad4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f7ff ffad 	bl	800b674 <prvTaskIsTaskSuspended>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d02b      	beq.n	800b778 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	3304      	adds	r3, #4
 800b724:	4618      	mov	r0, r3
 800b726:	f7ff f843 	bl	800a7b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72e:	4b16      	ldr	r3, [pc, #88]	; (800b788 <vTaskResume+0xb0>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	429a      	cmp	r2, r3
 800b734:	d903      	bls.n	800b73e <vTaskResume+0x66>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73a:	4a13      	ldr	r2, [pc, #76]	; (800b788 <vTaskResume+0xb0>)
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b742:	4613      	mov	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	4413      	add	r3, r2
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4a10      	ldr	r2, [pc, #64]	; (800b78c <vTaskResume+0xb4>)
 800b74c:	441a      	add	r2, r3
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	3304      	adds	r3, #4
 800b752:	4619      	mov	r1, r3
 800b754:	4610      	mov	r0, r2
 800b756:	f7fe ffce 	bl	800a6f6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b75e:	4b09      	ldr	r3, [pc, #36]	; (800b784 <vTaskResume+0xac>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b764:	429a      	cmp	r2, r3
 800b766:	d307      	bcc.n	800b778 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800b768:	4b09      	ldr	r3, [pc, #36]	; (800b790 <vTaskResume+0xb8>)
 800b76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b76e:	601a      	str	r2, [r3, #0]
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800b778:	f001 f9dc 	bl	800cb34 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b77c:	bf00      	nop
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	200008d8 	.word	0x200008d8
 800b788:	20000db4 	.word	0x20000db4
 800b78c:	200008dc 	.word	0x200008dc
 800b790:	e000ed04 	.word	0xe000ed04

0800b794 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b08a      	sub	sp, #40	; 0x28
 800b798:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b79a:	2300      	movs	r3, #0
 800b79c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b7a2:	463a      	mov	r2, r7
 800b7a4:	1d39      	adds	r1, r7, #4
 800b7a6:	f107 0308 	add.w	r3, r7, #8
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7fe ff42 	bl	800a634 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b7b0:	6839      	ldr	r1, [r7, #0]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	68ba      	ldr	r2, [r7, #8]
 800b7b6:	9202      	str	r2, [sp, #8]
 800b7b8:	9301      	str	r3, [sp, #4]
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	2300      	movs	r3, #0
 800b7c0:	460a      	mov	r2, r1
 800b7c2:	4921      	ldr	r1, [pc, #132]	; (800b848 <vTaskStartScheduler+0xb4>)
 800b7c4:	4821      	ldr	r0, [pc, #132]	; (800b84c <vTaskStartScheduler+0xb8>)
 800b7c6:	f7ff fd09 	bl	800b1dc <xTaskCreateStatic>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	4a20      	ldr	r2, [pc, #128]	; (800b850 <vTaskStartScheduler+0xbc>)
 800b7ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b7d0:	4b1f      	ldr	r3, [pc, #124]	; (800b850 <vTaskStartScheduler+0xbc>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d002      	beq.n	800b7de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	617b      	str	r3, [r7, #20]
 800b7dc:	e001      	b.n	800b7e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d102      	bne.n	800b7ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b7e8:	f000 fcfc 	bl	800c1e4 <xTimerCreateTimerTask>
 800b7ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d116      	bne.n	800b822 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	613b      	str	r3, [r7, #16]
}
 800b806:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b808:	4b12      	ldr	r3, [pc, #72]	; (800b854 <vTaskStartScheduler+0xc0>)
 800b80a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b80e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b810:	4b11      	ldr	r3, [pc, #68]	; (800b858 <vTaskStartScheduler+0xc4>)
 800b812:	2201      	movs	r2, #1
 800b814:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b816:	4b11      	ldr	r3, [pc, #68]	; (800b85c <vTaskStartScheduler+0xc8>)
 800b818:	2200      	movs	r2, #0
 800b81a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b81c:	f001 f8b8 	bl	800c990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b820:	e00e      	b.n	800b840 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b828:	d10a      	bne.n	800b840 <vTaskStartScheduler+0xac>
	__asm volatile
 800b82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	60fb      	str	r3, [r7, #12]
}
 800b83c:	bf00      	nop
 800b83e:	e7fe      	b.n	800b83e <vTaskStartScheduler+0xaa>
}
 800b840:	bf00      	nop
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	08013bb0 	.word	0x08013bb0
 800b84c:	0800be79 	.word	0x0800be79
 800b850:	20000dd0 	.word	0x20000dd0
 800b854:	20000dcc 	.word	0x20000dcc
 800b858:	20000db8 	.word	0x20000db8
 800b85c:	20000db0 	.word	0x20000db0

0800b860 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b860:	b480      	push	{r7}
 800b862:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b864:	4b04      	ldr	r3, [pc, #16]	; (800b878 <vTaskSuspendAll+0x18>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	3301      	adds	r3, #1
 800b86a:	4a03      	ldr	r2, [pc, #12]	; (800b878 <vTaskSuspendAll+0x18>)
 800b86c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b86e:	bf00      	nop
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	20000dd4 	.word	0x20000dd4

0800b87c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b882:	2300      	movs	r3, #0
 800b884:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b886:	2300      	movs	r3, #0
 800b888:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b88a:	4b42      	ldr	r3, [pc, #264]	; (800b994 <xTaskResumeAll+0x118>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d10a      	bne.n	800b8a8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b896:	f383 8811 	msr	BASEPRI, r3
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	603b      	str	r3, [r7, #0]
}
 800b8a4:	bf00      	nop
 800b8a6:	e7fe      	b.n	800b8a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b8a8:	f001 f914 	bl	800cad4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b8ac:	4b39      	ldr	r3, [pc, #228]	; (800b994 <xTaskResumeAll+0x118>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	4a38      	ldr	r2, [pc, #224]	; (800b994 <xTaskResumeAll+0x118>)
 800b8b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8b6:	4b37      	ldr	r3, [pc, #220]	; (800b994 <xTaskResumeAll+0x118>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d162      	bne.n	800b984 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b8be:	4b36      	ldr	r3, [pc, #216]	; (800b998 <xTaskResumeAll+0x11c>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d05e      	beq.n	800b984 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8c6:	e02f      	b.n	800b928 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8c8:	4b34      	ldr	r3, [pc, #208]	; (800b99c <xTaskResumeAll+0x120>)
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3318      	adds	r3, #24
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7fe ff6b 	bl	800a7b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	3304      	adds	r3, #4
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7fe ff66 	bl	800a7b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e8:	4b2d      	ldr	r3, [pc, #180]	; (800b9a0 <xTaskResumeAll+0x124>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d903      	bls.n	800b8f8 <xTaskResumeAll+0x7c>
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f4:	4a2a      	ldr	r2, [pc, #168]	; (800b9a0 <xTaskResumeAll+0x124>)
 800b8f6:	6013      	str	r3, [r2, #0]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4413      	add	r3, r2
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	4a27      	ldr	r2, [pc, #156]	; (800b9a4 <xTaskResumeAll+0x128>)
 800b906:	441a      	add	r2, r3
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	3304      	adds	r3, #4
 800b90c:	4619      	mov	r1, r3
 800b90e:	4610      	mov	r0, r2
 800b910:	f7fe fef1 	bl	800a6f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b918:	4b23      	ldr	r3, [pc, #140]	; (800b9a8 <xTaskResumeAll+0x12c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91e:	429a      	cmp	r2, r3
 800b920:	d302      	bcc.n	800b928 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b922:	4b22      	ldr	r3, [pc, #136]	; (800b9ac <xTaskResumeAll+0x130>)
 800b924:	2201      	movs	r2, #1
 800b926:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b928:	4b1c      	ldr	r3, [pc, #112]	; (800b99c <xTaskResumeAll+0x120>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1cb      	bne.n	800b8c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d001      	beq.n	800b93a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b936:	f000 fb55 	bl	800bfe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b93a:	4b1d      	ldr	r3, [pc, #116]	; (800b9b0 <xTaskResumeAll+0x134>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d010      	beq.n	800b968 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b946:	f000 f847 	bl	800b9d8 <xTaskIncrementTick>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b950:	4b16      	ldr	r3, [pc, #88]	; (800b9ac <xTaskResumeAll+0x130>)
 800b952:	2201      	movs	r2, #1
 800b954:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	3b01      	subs	r3, #1
 800b95a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1f1      	bne.n	800b946 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b962:	4b13      	ldr	r3, [pc, #76]	; (800b9b0 <xTaskResumeAll+0x134>)
 800b964:	2200      	movs	r2, #0
 800b966:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b968:	4b10      	ldr	r3, [pc, #64]	; (800b9ac <xTaskResumeAll+0x130>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d009      	beq.n	800b984 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b970:	2301      	movs	r3, #1
 800b972:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b974:	4b0f      	ldr	r3, [pc, #60]	; (800b9b4 <xTaskResumeAll+0x138>)
 800b976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b97a:	601a      	str	r2, [r3, #0]
 800b97c:	f3bf 8f4f 	dsb	sy
 800b980:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b984:	f001 f8d6 	bl	800cb34 <vPortExitCritical>

	return xAlreadyYielded;
 800b988:	68bb      	ldr	r3, [r7, #8]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	20000dd4 	.word	0x20000dd4
 800b998:	20000dac 	.word	0x20000dac
 800b99c:	20000d6c 	.word	0x20000d6c
 800b9a0:	20000db4 	.word	0x20000db4
 800b9a4:	200008dc 	.word	0x200008dc
 800b9a8:	200008d8 	.word	0x200008d8
 800b9ac:	20000dc0 	.word	0x20000dc0
 800b9b0:	20000dbc 	.word	0x20000dbc
 800b9b4:	e000ed04 	.word	0xe000ed04

0800b9b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b9be:	4b05      	ldr	r3, [pc, #20]	; (800b9d4 <xTaskGetTickCount+0x1c>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b9c4:	687b      	ldr	r3, [r7, #4]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	370c      	adds	r7, #12
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	20000db0 	.word	0x20000db0

0800b9d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9e2:	4b4f      	ldr	r3, [pc, #316]	; (800bb20 <xTaskIncrementTick+0x148>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f040 808f 	bne.w	800bb0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9ec:	4b4d      	ldr	r3, [pc, #308]	; (800bb24 <xTaskIncrementTick+0x14c>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b9f4:	4a4b      	ldr	r2, [pc, #300]	; (800bb24 <xTaskIncrementTick+0x14c>)
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d120      	bne.n	800ba42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba00:	4b49      	ldr	r3, [pc, #292]	; (800bb28 <xTaskIncrementTick+0x150>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00a      	beq.n	800ba20 <xTaskIncrementTick+0x48>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	603b      	str	r3, [r7, #0]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <xTaskIncrementTick+0x46>
 800ba20:	4b41      	ldr	r3, [pc, #260]	; (800bb28 <xTaskIncrementTick+0x150>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	60fb      	str	r3, [r7, #12]
 800ba26:	4b41      	ldr	r3, [pc, #260]	; (800bb2c <xTaskIncrementTick+0x154>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a3f      	ldr	r2, [pc, #252]	; (800bb28 <xTaskIncrementTick+0x150>)
 800ba2c:	6013      	str	r3, [r2, #0]
 800ba2e:	4a3f      	ldr	r2, [pc, #252]	; (800bb2c <xTaskIncrementTick+0x154>)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6013      	str	r3, [r2, #0]
 800ba34:	4b3e      	ldr	r3, [pc, #248]	; (800bb30 <xTaskIncrementTick+0x158>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	4a3d      	ldr	r2, [pc, #244]	; (800bb30 <xTaskIncrementTick+0x158>)
 800ba3c:	6013      	str	r3, [r2, #0]
 800ba3e:	f000 fad1 	bl	800bfe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba42:	4b3c      	ldr	r3, [pc, #240]	; (800bb34 <xTaskIncrementTick+0x15c>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	693a      	ldr	r2, [r7, #16]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d349      	bcc.n	800bae0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba4c:	4b36      	ldr	r3, [pc, #216]	; (800bb28 <xTaskIncrementTick+0x150>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d104      	bne.n	800ba60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba56:	4b37      	ldr	r3, [pc, #220]	; (800bb34 <xTaskIncrementTick+0x15c>)
 800ba58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba5c:	601a      	str	r2, [r3, #0]
					break;
 800ba5e:	e03f      	b.n	800bae0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba60:	4b31      	ldr	r3, [pc, #196]	; (800bb28 <xTaskIncrementTick+0x150>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba70:	693a      	ldr	r2, [r7, #16]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d203      	bcs.n	800ba80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba78:	4a2e      	ldr	r2, [pc, #184]	; (800bb34 <xTaskIncrementTick+0x15c>)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba7e:	e02f      	b.n	800bae0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	3304      	adds	r3, #4
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fe fe93 	bl	800a7b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d004      	beq.n	800ba9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	3318      	adds	r3, #24
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7fe fe8a 	bl	800a7b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa0:	4b25      	ldr	r3, [pc, #148]	; (800bb38 <xTaskIncrementTick+0x160>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d903      	bls.n	800bab0 <xTaskIncrementTick+0xd8>
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baac:	4a22      	ldr	r2, [pc, #136]	; (800bb38 <xTaskIncrementTick+0x160>)
 800baae:	6013      	str	r3, [r2, #0]
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab4:	4613      	mov	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4413      	add	r3, r2
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	4a1f      	ldr	r2, [pc, #124]	; (800bb3c <xTaskIncrementTick+0x164>)
 800babe:	441a      	add	r2, r3
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	3304      	adds	r3, #4
 800bac4:	4619      	mov	r1, r3
 800bac6:	4610      	mov	r0, r2
 800bac8:	f7fe fe15 	bl	800a6f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad0:	4b1b      	ldr	r3, [pc, #108]	; (800bb40 <xTaskIncrementTick+0x168>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d3b8      	bcc.n	800ba4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bada:	2301      	movs	r3, #1
 800badc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bade:	e7b5      	b.n	800ba4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bae0:	4b17      	ldr	r3, [pc, #92]	; (800bb40 <xTaskIncrementTick+0x168>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae6:	4915      	ldr	r1, [pc, #84]	; (800bb3c <xTaskIncrementTick+0x164>)
 800bae8:	4613      	mov	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	4413      	add	r3, r2
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	440b      	add	r3, r1
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d901      	bls.n	800bafc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800baf8:	2301      	movs	r3, #1
 800bafa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bafc:	4b11      	ldr	r3, [pc, #68]	; (800bb44 <xTaskIncrementTick+0x16c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d007      	beq.n	800bb14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bb04:	2301      	movs	r3, #1
 800bb06:	617b      	str	r3, [r7, #20]
 800bb08:	e004      	b.n	800bb14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb0a:	4b0f      	ldr	r3, [pc, #60]	; (800bb48 <xTaskIncrementTick+0x170>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	4a0d      	ldr	r2, [pc, #52]	; (800bb48 <xTaskIncrementTick+0x170>)
 800bb12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb14:	697b      	ldr	r3, [r7, #20]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3718      	adds	r7, #24
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20000dd4 	.word	0x20000dd4
 800bb24:	20000db0 	.word	0x20000db0
 800bb28:	20000d64 	.word	0x20000d64
 800bb2c:	20000d68 	.word	0x20000d68
 800bb30:	20000dc4 	.word	0x20000dc4
 800bb34:	20000dcc 	.word	0x20000dcc
 800bb38:	20000db4 	.word	0x20000db4
 800bb3c:	200008dc 	.word	0x200008dc
 800bb40:	200008d8 	.word	0x200008d8
 800bb44:	20000dc0 	.word	0x20000dc0
 800bb48:	20000dbc 	.word	0x20000dbc

0800bb4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb52:	4b28      	ldr	r3, [pc, #160]	; (800bbf4 <vTaskSwitchContext+0xa8>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d003      	beq.n	800bb62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb5a:	4b27      	ldr	r3, [pc, #156]	; (800bbf8 <vTaskSwitchContext+0xac>)
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb60:	e041      	b.n	800bbe6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bb62:	4b25      	ldr	r3, [pc, #148]	; (800bbf8 <vTaskSwitchContext+0xac>)
 800bb64:	2200      	movs	r2, #0
 800bb66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb68:	4b24      	ldr	r3, [pc, #144]	; (800bbfc <vTaskSwitchContext+0xb0>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	60fb      	str	r3, [r7, #12]
 800bb6e:	e010      	b.n	800bb92 <vTaskSwitchContext+0x46>
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10a      	bne.n	800bb8c <vTaskSwitchContext+0x40>
	__asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	607b      	str	r3, [r7, #4]
}
 800bb88:	bf00      	nop
 800bb8a:	e7fe      	b.n	800bb8a <vTaskSwitchContext+0x3e>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	60fb      	str	r3, [r7, #12]
 800bb92:	491b      	ldr	r1, [pc, #108]	; (800bc00 <vTaskSwitchContext+0xb4>)
 800bb94:	68fa      	ldr	r2, [r7, #12]
 800bb96:	4613      	mov	r3, r2
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	4413      	add	r3, r2
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	440b      	add	r3, r1
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d0e4      	beq.n	800bb70 <vTaskSwitchContext+0x24>
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	4413      	add	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4a13      	ldr	r2, [pc, #76]	; (800bc00 <vTaskSwitchContext+0xb4>)
 800bbb2:	4413      	add	r3, r2
 800bbb4:	60bb      	str	r3, [r7, #8]
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	685a      	ldr	r2, [r3, #4]
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	605a      	str	r2, [r3, #4]
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	685a      	ldr	r2, [r3, #4]
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	3308      	adds	r3, #8
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d104      	bne.n	800bbd6 <vTaskSwitchContext+0x8a>
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	685a      	ldr	r2, [r3, #4]
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	605a      	str	r2, [r3, #4]
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	4a09      	ldr	r2, [pc, #36]	; (800bc04 <vTaskSwitchContext+0xb8>)
 800bbde:	6013      	str	r3, [r2, #0]
 800bbe0:	4a06      	ldr	r2, [pc, #24]	; (800bbfc <vTaskSwitchContext+0xb0>)
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6013      	str	r3, [r2, #0]
}
 800bbe6:	bf00      	nop
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	20000dd4 	.word	0x20000dd4
 800bbf8:	20000dc0 	.word	0x20000dc0
 800bbfc:	20000db4 	.word	0x20000db4
 800bc00:	200008dc 	.word	0x200008dc
 800bc04:	200008d8 	.word	0x200008d8

0800bc08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10a      	bne.n	800bc2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	60fb      	str	r3, [r7, #12]
}
 800bc2a:	bf00      	nop
 800bc2c:	e7fe      	b.n	800bc2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc2e:	4b07      	ldr	r3, [pc, #28]	; (800bc4c <vTaskPlaceOnEventList+0x44>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	3318      	adds	r3, #24
 800bc34:	4619      	mov	r1, r3
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f7fe fd81 	bl	800a73e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	6838      	ldr	r0, [r7, #0]
 800bc40:	f000 fa7c 	bl	800c13c <prvAddCurrentTaskToDelayedList>
}
 800bc44:	bf00      	nop
 800bc46:	3710      	adds	r7, #16
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	200008d8 	.word	0x200008d8

0800bc50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b086      	sub	sp, #24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10a      	bne.n	800bc78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	617b      	str	r3, [r7, #20]
}
 800bc74:	bf00      	nop
 800bc76:	e7fe      	b.n	800bc76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc78:	4b0a      	ldr	r3, [pc, #40]	; (800bca4 <vTaskPlaceOnEventListRestricted+0x54>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	3318      	adds	r3, #24
 800bc7e:	4619      	mov	r1, r3
 800bc80:	68f8      	ldr	r0, [r7, #12]
 800bc82:	f7fe fd38 	bl	800a6f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d002      	beq.n	800bc92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bc8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bc92:	6879      	ldr	r1, [r7, #4]
 800bc94:	68b8      	ldr	r0, [r7, #8]
 800bc96:	f000 fa51 	bl	800c13c <prvAddCurrentTaskToDelayedList>
	}
 800bc9a:	bf00      	nop
 800bc9c:	3718      	adds	r7, #24
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	200008d8 	.word	0x200008d8

0800bca8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b086      	sub	sp, #24
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10a      	bne.n	800bcd4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	60fb      	str	r3, [r7, #12]
}
 800bcd0:	bf00      	nop
 800bcd2:	e7fe      	b.n	800bcd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	3318      	adds	r3, #24
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7fe fd69 	bl	800a7b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcde:	4b1e      	ldr	r3, [pc, #120]	; (800bd58 <xTaskRemoveFromEventList+0xb0>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d11d      	bne.n	800bd22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	3304      	adds	r3, #4
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fe fd60 	bl	800a7b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf4:	4b19      	ldr	r3, [pc, #100]	; (800bd5c <xTaskRemoveFromEventList+0xb4>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d903      	bls.n	800bd04 <xTaskRemoveFromEventList+0x5c>
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd00:	4a16      	ldr	r2, [pc, #88]	; (800bd5c <xTaskRemoveFromEventList+0xb4>)
 800bd02:	6013      	str	r3, [r2, #0]
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd08:	4613      	mov	r3, r2
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	4413      	add	r3, r2
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	4a13      	ldr	r2, [pc, #76]	; (800bd60 <xTaskRemoveFromEventList+0xb8>)
 800bd12:	441a      	add	r2, r3
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	3304      	adds	r3, #4
 800bd18:	4619      	mov	r1, r3
 800bd1a:	4610      	mov	r0, r2
 800bd1c:	f7fe fceb 	bl	800a6f6 <vListInsertEnd>
 800bd20:	e005      	b.n	800bd2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	3318      	adds	r3, #24
 800bd26:	4619      	mov	r1, r3
 800bd28:	480e      	ldr	r0, [pc, #56]	; (800bd64 <xTaskRemoveFromEventList+0xbc>)
 800bd2a:	f7fe fce4 	bl	800a6f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd32:	4b0d      	ldr	r3, [pc, #52]	; (800bd68 <xTaskRemoveFromEventList+0xc0>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d905      	bls.n	800bd48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd40:	4b0a      	ldr	r3, [pc, #40]	; (800bd6c <xTaskRemoveFromEventList+0xc4>)
 800bd42:	2201      	movs	r2, #1
 800bd44:	601a      	str	r2, [r3, #0]
 800bd46:	e001      	b.n	800bd4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd4c:	697b      	ldr	r3, [r7, #20]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3718      	adds	r7, #24
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	20000dd4 	.word	0x20000dd4
 800bd5c:	20000db4 	.word	0x20000db4
 800bd60:	200008dc 	.word	0x200008dc
 800bd64:	20000d6c 	.word	0x20000d6c
 800bd68:	200008d8 	.word	0x200008d8
 800bd6c:	20000dc0 	.word	0x20000dc0

0800bd70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd78:	4b06      	ldr	r3, [pc, #24]	; (800bd94 <vTaskInternalSetTimeOutState+0x24>)
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd80:	4b05      	ldr	r3, [pc, #20]	; (800bd98 <vTaskInternalSetTimeOutState+0x28>)
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	605a      	str	r2, [r3, #4]
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr
 800bd94:	20000dc4 	.word	0x20000dc4
 800bd98:	20000db0 	.word	0x20000db0

0800bd9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b088      	sub	sp, #32
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10a      	bne.n	800bdc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb0:	f383 8811 	msr	BASEPRI, r3
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	f3bf 8f4f 	dsb	sy
 800bdbc:	613b      	str	r3, [r7, #16]
}
 800bdbe:	bf00      	nop
 800bdc0:	e7fe      	b.n	800bdc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10a      	bne.n	800bdde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdcc:	f383 8811 	msr	BASEPRI, r3
 800bdd0:	f3bf 8f6f 	isb	sy
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	60fb      	str	r3, [r7, #12]
}
 800bdda:	bf00      	nop
 800bddc:	e7fe      	b.n	800bddc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bdde:	f000 fe79 	bl	800cad4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bde2:	4b1d      	ldr	r3, [pc, #116]	; (800be58 <xTaskCheckForTimeOut+0xbc>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	69ba      	ldr	r2, [r7, #24]
 800bdee:	1ad3      	subs	r3, r2, r3
 800bdf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdfa:	d102      	bne.n	800be02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	61fb      	str	r3, [r7, #28]
 800be00:	e023      	b.n	800be4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	4b15      	ldr	r3, [pc, #84]	; (800be5c <xTaskCheckForTimeOut+0xc0>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d007      	beq.n	800be1e <xTaskCheckForTimeOut+0x82>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	69ba      	ldr	r2, [r7, #24]
 800be14:	429a      	cmp	r2, r3
 800be16:	d302      	bcc.n	800be1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be18:	2301      	movs	r3, #1
 800be1a:	61fb      	str	r3, [r7, #28]
 800be1c:	e015      	b.n	800be4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	429a      	cmp	r2, r3
 800be26:	d20b      	bcs.n	800be40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	1ad2      	subs	r2, r2, r3
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f7ff ff9b 	bl	800bd70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be3a:	2300      	movs	r3, #0
 800be3c:	61fb      	str	r3, [r7, #28]
 800be3e:	e004      	b.n	800be4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2200      	movs	r2, #0
 800be44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be46:	2301      	movs	r3, #1
 800be48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be4a:	f000 fe73 	bl	800cb34 <vPortExitCritical>

	return xReturn;
 800be4e:	69fb      	ldr	r3, [r7, #28]
}
 800be50:	4618      	mov	r0, r3
 800be52:	3720      	adds	r7, #32
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	20000db0 	.word	0x20000db0
 800be5c:	20000dc4 	.word	0x20000dc4

0800be60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be60:	b480      	push	{r7}
 800be62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be64:	4b03      	ldr	r3, [pc, #12]	; (800be74 <vTaskMissedYield+0x14>)
 800be66:	2201      	movs	r2, #1
 800be68:	601a      	str	r2, [r3, #0]
}
 800be6a:	bf00      	nop
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr
 800be74:	20000dc0 	.word	0x20000dc0

0800be78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be80:	f000 f852 	bl	800bf28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be84:	4b06      	ldr	r3, [pc, #24]	; (800bea0 <prvIdleTask+0x28>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d9f9      	bls.n	800be80 <prvIdleTask+0x8>
			{
				taskYIELD();
 800be8c:	4b05      	ldr	r3, [pc, #20]	; (800bea4 <prvIdleTask+0x2c>)
 800be8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	f3bf 8f4f 	dsb	sy
 800be98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800be9c:	e7f0      	b.n	800be80 <prvIdleTask+0x8>
 800be9e:	bf00      	nop
 800bea0:	200008dc 	.word	0x200008dc
 800bea4:	e000ed04 	.word	0xe000ed04

0800bea8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800beae:	2300      	movs	r3, #0
 800beb0:	607b      	str	r3, [r7, #4]
 800beb2:	e00c      	b.n	800bece <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	4613      	mov	r3, r2
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	4413      	add	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4a12      	ldr	r2, [pc, #72]	; (800bf08 <prvInitialiseTaskLists+0x60>)
 800bec0:	4413      	add	r3, r2
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7fe fbea 	bl	800a69c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	3301      	adds	r3, #1
 800becc:	607b      	str	r3, [r7, #4]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b37      	cmp	r3, #55	; 0x37
 800bed2:	d9ef      	bls.n	800beb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bed4:	480d      	ldr	r0, [pc, #52]	; (800bf0c <prvInitialiseTaskLists+0x64>)
 800bed6:	f7fe fbe1 	bl	800a69c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800beda:	480d      	ldr	r0, [pc, #52]	; (800bf10 <prvInitialiseTaskLists+0x68>)
 800bedc:	f7fe fbde 	bl	800a69c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bee0:	480c      	ldr	r0, [pc, #48]	; (800bf14 <prvInitialiseTaskLists+0x6c>)
 800bee2:	f7fe fbdb 	bl	800a69c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bee6:	480c      	ldr	r0, [pc, #48]	; (800bf18 <prvInitialiseTaskLists+0x70>)
 800bee8:	f7fe fbd8 	bl	800a69c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800beec:	480b      	ldr	r0, [pc, #44]	; (800bf1c <prvInitialiseTaskLists+0x74>)
 800beee:	f7fe fbd5 	bl	800a69c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bef2:	4b0b      	ldr	r3, [pc, #44]	; (800bf20 <prvInitialiseTaskLists+0x78>)
 800bef4:	4a05      	ldr	r2, [pc, #20]	; (800bf0c <prvInitialiseTaskLists+0x64>)
 800bef6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bef8:	4b0a      	ldr	r3, [pc, #40]	; (800bf24 <prvInitialiseTaskLists+0x7c>)
 800befa:	4a05      	ldr	r2, [pc, #20]	; (800bf10 <prvInitialiseTaskLists+0x68>)
 800befc:	601a      	str	r2, [r3, #0]
}
 800befe:	bf00      	nop
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	200008dc 	.word	0x200008dc
 800bf0c:	20000d3c 	.word	0x20000d3c
 800bf10:	20000d50 	.word	0x20000d50
 800bf14:	20000d6c 	.word	0x20000d6c
 800bf18:	20000d80 	.word	0x20000d80
 800bf1c:	20000d98 	.word	0x20000d98
 800bf20:	20000d64 	.word	0x20000d64
 800bf24:	20000d68 	.word	0x20000d68

0800bf28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf2e:	e019      	b.n	800bf64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf30:	f000 fdd0 	bl	800cad4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf34:	4b10      	ldr	r3, [pc, #64]	; (800bf78 <prvCheckTasksWaitingTermination+0x50>)
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	3304      	adds	r3, #4
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7fe fc35 	bl	800a7b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf46:	4b0d      	ldr	r3, [pc, #52]	; (800bf7c <prvCheckTasksWaitingTermination+0x54>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	4a0b      	ldr	r2, [pc, #44]	; (800bf7c <prvCheckTasksWaitingTermination+0x54>)
 800bf4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf50:	4b0b      	ldr	r3, [pc, #44]	; (800bf80 <prvCheckTasksWaitingTermination+0x58>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	4a0a      	ldr	r2, [pc, #40]	; (800bf80 <prvCheckTasksWaitingTermination+0x58>)
 800bf58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bf5a:	f000 fdeb 	bl	800cb34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f810 	bl	800bf84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf64:	4b06      	ldr	r3, [pc, #24]	; (800bf80 <prvCheckTasksWaitingTermination+0x58>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1e1      	bne.n	800bf30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bf6c:	bf00      	nop
 800bf6e:	bf00      	nop
 800bf70:	3708      	adds	r7, #8
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	20000d80 	.word	0x20000d80
 800bf7c:	20000dac 	.word	0x20000dac
 800bf80:	20000d94 	.word	0x20000d94

0800bf84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d108      	bne.n	800bfa8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f000 ff88 	bl	800ceb0 <vPortFree>
				vPortFree( pxTCB );
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 ff85 	bl	800ceb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bfa6:	e018      	b.n	800bfda <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d103      	bne.n	800bfba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 ff7c 	bl	800ceb0 <vPortFree>
	}
 800bfb8:	e00f      	b.n	800bfda <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bfc0:	2b02      	cmp	r3, #2
 800bfc2:	d00a      	beq.n	800bfda <prvDeleteTCB+0x56>
	__asm volatile
 800bfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc8:	f383 8811 	msr	BASEPRI, r3
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	60fb      	str	r3, [r7, #12]
}
 800bfd6:	bf00      	nop
 800bfd8:	e7fe      	b.n	800bfd8 <prvDeleteTCB+0x54>
	}
 800bfda:	bf00      	nop
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
	...

0800bfe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfea:	4b0c      	ldr	r3, [pc, #48]	; (800c01c <prvResetNextTaskUnblockTime+0x38>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d104      	bne.n	800bffe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bff4:	4b0a      	ldr	r3, [pc, #40]	; (800c020 <prvResetNextTaskUnblockTime+0x3c>)
 800bff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bffa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bffc:	e008      	b.n	800c010 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bffe:	4b07      	ldr	r3, [pc, #28]	; (800c01c <prvResetNextTaskUnblockTime+0x38>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	4a04      	ldr	r2, [pc, #16]	; (800c020 <prvResetNextTaskUnblockTime+0x3c>)
 800c00e:	6013      	str	r3, [r2, #0]
}
 800c010:	bf00      	nop
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr
 800c01c:	20000d64 	.word	0x20000d64
 800c020:	20000dcc 	.word	0x20000dcc

0800c024 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c02a:	4b0b      	ldr	r3, [pc, #44]	; (800c058 <xTaskGetSchedulerState+0x34>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d102      	bne.n	800c038 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c032:	2301      	movs	r3, #1
 800c034:	607b      	str	r3, [r7, #4]
 800c036:	e008      	b.n	800c04a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c038:	4b08      	ldr	r3, [pc, #32]	; (800c05c <xTaskGetSchedulerState+0x38>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d102      	bne.n	800c046 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c040:	2302      	movs	r3, #2
 800c042:	607b      	str	r3, [r7, #4]
 800c044:	e001      	b.n	800c04a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c046:	2300      	movs	r3, #0
 800c048:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c04a:	687b      	ldr	r3, [r7, #4]
	}
 800c04c:	4618      	mov	r0, r3
 800c04e:	370c      	adds	r7, #12
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr
 800c058:	20000db8 	.word	0x20000db8
 800c05c:	20000dd4 	.word	0x20000dd4

0800c060 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c06c:	2300      	movs	r3, #0
 800c06e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d056      	beq.n	800c124 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c076:	4b2e      	ldr	r3, [pc, #184]	; (800c130 <xTaskPriorityDisinherit+0xd0>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	693a      	ldr	r2, [r7, #16]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d00a      	beq.n	800c096 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c084:	f383 8811 	msr	BASEPRI, r3
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	60fb      	str	r3, [r7, #12]
}
 800c092:	bf00      	nop
 800c094:	e7fe      	b.n	800c094 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d10a      	bne.n	800c0b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a2:	f383 8811 	msr	BASEPRI, r3
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	60bb      	str	r3, [r7, #8]
}
 800c0b0:	bf00      	nop
 800c0b2:	e7fe      	b.n	800c0b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0b8:	1e5a      	subs	r2, r3, #1
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d02c      	beq.n	800c124 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d128      	bne.n	800c124 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fe fb6a 	bl	800a7b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f4:	4b0f      	ldr	r3, [pc, #60]	; (800c134 <xTaskPriorityDisinherit+0xd4>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d903      	bls.n	800c104 <xTaskPriorityDisinherit+0xa4>
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c100:	4a0c      	ldr	r2, [pc, #48]	; (800c134 <xTaskPriorityDisinherit+0xd4>)
 800c102:	6013      	str	r3, [r2, #0]
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c108:	4613      	mov	r3, r2
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	4413      	add	r3, r2
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	4a09      	ldr	r2, [pc, #36]	; (800c138 <xTaskPriorityDisinherit+0xd8>)
 800c112:	441a      	add	r2, r3
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	3304      	adds	r3, #4
 800c118:	4619      	mov	r1, r3
 800c11a:	4610      	mov	r0, r2
 800c11c:	f7fe faeb 	bl	800a6f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c120:	2301      	movs	r3, #1
 800c122:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c124:	697b      	ldr	r3, [r7, #20]
	}
 800c126:	4618      	mov	r0, r3
 800c128:	3718      	adds	r7, #24
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	200008d8 	.word	0x200008d8
 800c134:	20000db4 	.word	0x20000db4
 800c138:	200008dc 	.word	0x200008dc

0800c13c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c146:	4b21      	ldr	r3, [pc, #132]	; (800c1cc <prvAddCurrentTaskToDelayedList+0x90>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c14c:	4b20      	ldr	r3, [pc, #128]	; (800c1d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	3304      	adds	r3, #4
 800c152:	4618      	mov	r0, r3
 800c154:	f7fe fb2c 	bl	800a7b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c15e:	d10a      	bne.n	800c176 <prvAddCurrentTaskToDelayedList+0x3a>
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d007      	beq.n	800c176 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c166:	4b1a      	ldr	r3, [pc, #104]	; (800c1d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	3304      	adds	r3, #4
 800c16c:	4619      	mov	r1, r3
 800c16e:	4819      	ldr	r0, [pc, #100]	; (800c1d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800c170:	f7fe fac1 	bl	800a6f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c174:	e026      	b.n	800c1c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c176:	68fa      	ldr	r2, [r7, #12]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4413      	add	r3, r2
 800c17c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c17e:	4b14      	ldr	r3, [pc, #80]	; (800c1d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c186:	68ba      	ldr	r2, [r7, #8]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d209      	bcs.n	800c1a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c18e:	4b12      	ldr	r3, [pc, #72]	; (800c1d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	4b0f      	ldr	r3, [pc, #60]	; (800c1d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	3304      	adds	r3, #4
 800c198:	4619      	mov	r1, r3
 800c19a:	4610      	mov	r0, r2
 800c19c:	f7fe facf 	bl	800a73e <vListInsert>
}
 800c1a0:	e010      	b.n	800c1c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1a2:	4b0e      	ldr	r3, [pc, #56]	; (800c1dc <prvAddCurrentTaskToDelayedList+0xa0>)
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	4b0a      	ldr	r3, [pc, #40]	; (800c1d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	4610      	mov	r0, r2
 800c1b0:	f7fe fac5 	bl	800a73e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c1b4:	4b0a      	ldr	r3, [pc, #40]	; (800c1e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d202      	bcs.n	800c1c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c1be:	4a08      	ldr	r2, [pc, #32]	; (800c1e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	6013      	str	r3, [r2, #0]
}
 800c1c4:	bf00      	nop
 800c1c6:	3710      	adds	r7, #16
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	20000db0 	.word	0x20000db0
 800c1d0:	200008d8 	.word	0x200008d8
 800c1d4:	20000d98 	.word	0x20000d98
 800c1d8:	20000d68 	.word	0x20000d68
 800c1dc:	20000d64 	.word	0x20000d64
 800c1e0:	20000dcc 	.word	0x20000dcc

0800c1e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b08a      	sub	sp, #40	; 0x28
 800c1e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c1ee:	f000 fb07 	bl	800c800 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c1f2:	4b1c      	ldr	r3, [pc, #112]	; (800c264 <xTimerCreateTimerTask+0x80>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d021      	beq.n	800c23e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c1fe:	2300      	movs	r3, #0
 800c200:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c202:	1d3a      	adds	r2, r7, #4
 800c204:	f107 0108 	add.w	r1, r7, #8
 800c208:	f107 030c 	add.w	r3, r7, #12
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7fe fa2b 	bl	800a668 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c212:	6879      	ldr	r1, [r7, #4]
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	68fa      	ldr	r2, [r7, #12]
 800c218:	9202      	str	r2, [sp, #8]
 800c21a:	9301      	str	r3, [sp, #4]
 800c21c:	2302      	movs	r3, #2
 800c21e:	9300      	str	r3, [sp, #0]
 800c220:	2300      	movs	r3, #0
 800c222:	460a      	mov	r2, r1
 800c224:	4910      	ldr	r1, [pc, #64]	; (800c268 <xTimerCreateTimerTask+0x84>)
 800c226:	4811      	ldr	r0, [pc, #68]	; (800c26c <xTimerCreateTimerTask+0x88>)
 800c228:	f7fe ffd8 	bl	800b1dc <xTaskCreateStatic>
 800c22c:	4603      	mov	r3, r0
 800c22e:	4a10      	ldr	r2, [pc, #64]	; (800c270 <xTimerCreateTimerTask+0x8c>)
 800c230:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c232:	4b0f      	ldr	r3, [pc, #60]	; (800c270 <xTimerCreateTimerTask+0x8c>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d001      	beq.n	800c23e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c23a:	2301      	movs	r3, #1
 800c23c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10a      	bne.n	800c25a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c248:	f383 8811 	msr	BASEPRI, r3
 800c24c:	f3bf 8f6f 	isb	sy
 800c250:	f3bf 8f4f 	dsb	sy
 800c254:	613b      	str	r3, [r7, #16]
}
 800c256:	bf00      	nop
 800c258:	e7fe      	b.n	800c258 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c25a:	697b      	ldr	r3, [r7, #20]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3718      	adds	r7, #24
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	20000e08 	.word	0x20000e08
 800c268:	08013bb8 	.word	0x08013bb8
 800c26c:	0800c3a9 	.word	0x0800c3a9
 800c270:	20000e0c 	.word	0x20000e0c

0800c274 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b08a      	sub	sp, #40	; 0x28
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
 800c280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c282:	2300      	movs	r3, #0
 800c284:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d10a      	bne.n	800c2a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c290:	f383 8811 	msr	BASEPRI, r3
 800c294:	f3bf 8f6f 	isb	sy
 800c298:	f3bf 8f4f 	dsb	sy
 800c29c:	623b      	str	r3, [r7, #32]
}
 800c29e:	bf00      	nop
 800c2a0:	e7fe      	b.n	800c2a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c2a2:	4b1a      	ldr	r3, [pc, #104]	; (800c30c <xTimerGenericCommand+0x98>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d02a      	beq.n	800c300 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	2b05      	cmp	r3, #5
 800c2ba:	dc18      	bgt.n	800c2ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c2bc:	f7ff feb2 	bl	800c024 <xTaskGetSchedulerState>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b02      	cmp	r3, #2
 800c2c4:	d109      	bne.n	800c2da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c2c6:	4b11      	ldr	r3, [pc, #68]	; (800c30c <xTimerGenericCommand+0x98>)
 800c2c8:	6818      	ldr	r0, [r3, #0]
 800c2ca:	f107 0110 	add.w	r1, r7, #16
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2d2:	f7fe fb9b 	bl	800aa0c <xQueueGenericSend>
 800c2d6:	6278      	str	r0, [r7, #36]	; 0x24
 800c2d8:	e012      	b.n	800c300 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c2da:	4b0c      	ldr	r3, [pc, #48]	; (800c30c <xTimerGenericCommand+0x98>)
 800c2dc:	6818      	ldr	r0, [r3, #0]
 800c2de:	f107 0110 	add.w	r1, r7, #16
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	f7fe fb91 	bl	800aa0c <xQueueGenericSend>
 800c2ea:	6278      	str	r0, [r7, #36]	; 0x24
 800c2ec:	e008      	b.n	800c300 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c2ee:	4b07      	ldr	r3, [pc, #28]	; (800c30c <xTimerGenericCommand+0x98>)
 800c2f0:	6818      	ldr	r0, [r3, #0]
 800c2f2:	f107 0110 	add.w	r1, r7, #16
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	683a      	ldr	r2, [r7, #0]
 800c2fa:	f7fe fc85 	bl	800ac08 <xQueueGenericSendFromISR>
 800c2fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c302:	4618      	mov	r0, r3
 800c304:	3728      	adds	r7, #40	; 0x28
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	20000e08 	.word	0x20000e08

0800c310 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b088      	sub	sp, #32
 800c314:	af02      	add	r7, sp, #8
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c31a:	4b22      	ldr	r3, [pc, #136]	; (800c3a4 <prvProcessExpiredTimer+0x94>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	3304      	adds	r3, #4
 800c328:	4618      	mov	r0, r3
 800c32a:	f7fe fa41 	bl	800a7b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c334:	f003 0304 	and.w	r3, r3, #4
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d022      	beq.n	800c382 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	699a      	ldr	r2, [r3, #24]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	18d1      	adds	r1, r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	6978      	ldr	r0, [r7, #20]
 800c34a:	f000 f8d1 	bl	800c4f0 <prvInsertTimerInActiveList>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d01f      	beq.n	800c394 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c354:	2300      	movs	r3, #0
 800c356:	9300      	str	r3, [sp, #0]
 800c358:	2300      	movs	r3, #0
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	2100      	movs	r1, #0
 800c35e:	6978      	ldr	r0, [r7, #20]
 800c360:	f7ff ff88 	bl	800c274 <xTimerGenericCommand>
 800c364:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d113      	bne.n	800c394 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c370:	f383 8811 	msr	BASEPRI, r3
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	f3bf 8f4f 	dsb	sy
 800c37c:	60fb      	str	r3, [r7, #12]
}
 800c37e:	bf00      	nop
 800c380:	e7fe      	b.n	800c380 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c388:	f023 0301 	bic.w	r3, r3, #1
 800c38c:	b2da      	uxtb	r2, r3
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	6a1b      	ldr	r3, [r3, #32]
 800c398:	6978      	ldr	r0, [r7, #20]
 800c39a:	4798      	blx	r3
}
 800c39c:	bf00      	nop
 800c39e:	3718      	adds	r7, #24
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	20000e00 	.word	0x20000e00

0800c3a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3b0:	f107 0308 	add.w	r3, r7, #8
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f000 f857 	bl	800c468 <prvGetNextExpireTime>
 800c3ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	4619      	mov	r1, r3
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f000 f803 	bl	800c3cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c3c6:	f000 f8d5 	bl	800c574 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3ca:	e7f1      	b.n	800c3b0 <prvTimerTask+0x8>

0800c3cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c3d6:	f7ff fa43 	bl	800b860 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c3da:	f107 0308 	add.w	r3, r7, #8
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 f866 	bl	800c4b0 <prvSampleTimeNow>
 800c3e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d130      	bne.n	800c44e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d10a      	bne.n	800c408 <prvProcessTimerOrBlockTask+0x3c>
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d806      	bhi.n	800c408 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c3fa:	f7ff fa3f 	bl	800b87c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c3fe:	68f9      	ldr	r1, [r7, #12]
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f7ff ff85 	bl	800c310 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c406:	e024      	b.n	800c452 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d008      	beq.n	800c420 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c40e:	4b13      	ldr	r3, [pc, #76]	; (800c45c <prvProcessTimerOrBlockTask+0x90>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d101      	bne.n	800c41c <prvProcessTimerOrBlockTask+0x50>
 800c418:	2301      	movs	r3, #1
 800c41a:	e000      	b.n	800c41e <prvProcessTimerOrBlockTask+0x52>
 800c41c:	2300      	movs	r3, #0
 800c41e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c420:	4b0f      	ldr	r3, [pc, #60]	; (800c460 <prvProcessTimerOrBlockTask+0x94>)
 800c422:	6818      	ldr	r0, [r3, #0]
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	4619      	mov	r1, r3
 800c42e:	f7fe fea1 	bl	800b174 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c432:	f7ff fa23 	bl	800b87c <xTaskResumeAll>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10a      	bne.n	800c452 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c43c:	4b09      	ldr	r3, [pc, #36]	; (800c464 <prvProcessTimerOrBlockTask+0x98>)
 800c43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c442:	601a      	str	r2, [r3, #0]
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	f3bf 8f6f 	isb	sy
}
 800c44c:	e001      	b.n	800c452 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c44e:	f7ff fa15 	bl	800b87c <xTaskResumeAll>
}
 800c452:	bf00      	nop
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	20000e04 	.word	0x20000e04
 800c460:	20000e08 	.word	0x20000e08
 800c464:	e000ed04 	.word	0xe000ed04

0800c468 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c470:	4b0e      	ldr	r3, [pc, #56]	; (800c4ac <prvGetNextExpireTime+0x44>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d101      	bne.n	800c47e <prvGetNextExpireTime+0x16>
 800c47a:	2201      	movs	r2, #1
 800c47c:	e000      	b.n	800c480 <prvGetNextExpireTime+0x18>
 800c47e:	2200      	movs	r2, #0
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d105      	bne.n	800c498 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c48c:	4b07      	ldr	r3, [pc, #28]	; (800c4ac <prvGetNextExpireTime+0x44>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	60fb      	str	r3, [r7, #12]
 800c496:	e001      	b.n	800c49c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c498:	2300      	movs	r3, #0
 800c49a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c49c:	68fb      	ldr	r3, [r7, #12]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3714      	adds	r7, #20
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a8:	4770      	bx	lr
 800c4aa:	bf00      	nop
 800c4ac:	20000e00 	.word	0x20000e00

0800c4b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c4b8:	f7ff fa7e 	bl	800b9b8 <xTaskGetTickCount>
 800c4bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c4be:	4b0b      	ldr	r3, [pc, #44]	; (800c4ec <prvSampleTimeNow+0x3c>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	68fa      	ldr	r2, [r7, #12]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d205      	bcs.n	800c4d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c4c8:	f000 f936 	bl	800c738 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	601a      	str	r2, [r3, #0]
 800c4d2:	e002      	b.n	800c4da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c4da:	4a04      	ldr	r2, [pc, #16]	; (800c4ec <prvSampleTimeNow+0x3c>)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	20000e10 	.word	0x20000e10

0800c4f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b086      	sub	sp, #24
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	607a      	str	r2, [r7, #4]
 800c4fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c4fe:	2300      	movs	r3, #0
 800c500:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c50e:	68ba      	ldr	r2, [r7, #8]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	429a      	cmp	r2, r3
 800c514:	d812      	bhi.n	800c53c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	1ad2      	subs	r2, r2, r3
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	699b      	ldr	r3, [r3, #24]
 800c520:	429a      	cmp	r2, r3
 800c522:	d302      	bcc.n	800c52a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c524:	2301      	movs	r3, #1
 800c526:	617b      	str	r3, [r7, #20]
 800c528:	e01b      	b.n	800c562 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c52a:	4b10      	ldr	r3, [pc, #64]	; (800c56c <prvInsertTimerInActiveList+0x7c>)
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	3304      	adds	r3, #4
 800c532:	4619      	mov	r1, r3
 800c534:	4610      	mov	r0, r2
 800c536:	f7fe f902 	bl	800a73e <vListInsert>
 800c53a:	e012      	b.n	800c562 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	429a      	cmp	r2, r3
 800c542:	d206      	bcs.n	800c552 <prvInsertTimerInActiveList+0x62>
 800c544:	68ba      	ldr	r2, [r7, #8]
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d302      	bcc.n	800c552 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c54c:	2301      	movs	r3, #1
 800c54e:	617b      	str	r3, [r7, #20]
 800c550:	e007      	b.n	800c562 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c552:	4b07      	ldr	r3, [pc, #28]	; (800c570 <prvInsertTimerInActiveList+0x80>)
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	3304      	adds	r3, #4
 800c55a:	4619      	mov	r1, r3
 800c55c:	4610      	mov	r0, r2
 800c55e:	f7fe f8ee 	bl	800a73e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c562:	697b      	ldr	r3, [r7, #20]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3718      	adds	r7, #24
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	20000e04 	.word	0x20000e04
 800c570:	20000e00 	.word	0x20000e00

0800c574 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b08e      	sub	sp, #56	; 0x38
 800c578:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c57a:	e0ca      	b.n	800c712 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	da18      	bge.n	800c5b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c582:	1d3b      	adds	r3, r7, #4
 800c584:	3304      	adds	r3, #4
 800c586:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d10a      	bne.n	800c5a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	61fb      	str	r3, [r7, #28]
}
 800c5a0:	bf00      	nop
 800c5a2:	e7fe      	b.n	800c5a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5aa:	6850      	ldr	r0, [r2, #4]
 800c5ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5ae:	6892      	ldr	r2, [r2, #8]
 800c5b0:	4611      	mov	r1, r2
 800c5b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f2c0 80aa 	blt.w	800c710 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c2:	695b      	ldr	r3, [r3, #20]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d004      	beq.n	800c5d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ca:	3304      	adds	r3, #4
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fe f8ef 	bl	800a7b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5d2:	463b      	mov	r3, r7
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7ff ff6b 	bl	800c4b0 <prvSampleTimeNow>
 800c5da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2b09      	cmp	r3, #9
 800c5e0:	f200 8097 	bhi.w	800c712 <prvProcessReceivedCommands+0x19e>
 800c5e4:	a201      	add	r2, pc, #4	; (adr r2, 800c5ec <prvProcessReceivedCommands+0x78>)
 800c5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ea:	bf00      	nop
 800c5ec:	0800c615 	.word	0x0800c615
 800c5f0:	0800c615 	.word	0x0800c615
 800c5f4:	0800c615 	.word	0x0800c615
 800c5f8:	0800c689 	.word	0x0800c689
 800c5fc:	0800c69d 	.word	0x0800c69d
 800c600:	0800c6e7 	.word	0x0800c6e7
 800c604:	0800c615 	.word	0x0800c615
 800c608:	0800c615 	.word	0x0800c615
 800c60c:	0800c689 	.word	0x0800c689
 800c610:	0800c69d 	.word	0x0800c69d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c61a:	f043 0301 	orr.w	r3, r3, #1
 800c61e:	b2da      	uxtb	r2, r3
 800c620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c626:	68ba      	ldr	r2, [r7, #8]
 800c628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62a:	699b      	ldr	r3, [r3, #24]
 800c62c:	18d1      	adds	r1, r2, r3
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c634:	f7ff ff5c 	bl	800c4f0 <prvInsertTimerInActiveList>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d069      	beq.n	800c712 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c640:	6a1b      	ldr	r3, [r3, #32]
 800c642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c644:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c64c:	f003 0304 	and.w	r3, r3, #4
 800c650:	2b00      	cmp	r3, #0
 800c652:	d05e      	beq.n	800c712 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c658:	699b      	ldr	r3, [r3, #24]
 800c65a:	441a      	add	r2, r3
 800c65c:	2300      	movs	r3, #0
 800c65e:	9300      	str	r3, [sp, #0]
 800c660:	2300      	movs	r3, #0
 800c662:	2100      	movs	r1, #0
 800c664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c666:	f7ff fe05 	bl	800c274 <xTimerGenericCommand>
 800c66a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c66c:	6a3b      	ldr	r3, [r7, #32]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d14f      	bne.n	800c712 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c676:	f383 8811 	msr	BASEPRI, r3
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	61bb      	str	r3, [r7, #24]
}
 800c684:	bf00      	nop
 800c686:	e7fe      	b.n	800c686 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c68e:	f023 0301 	bic.w	r3, r3, #1
 800c692:	b2da      	uxtb	r2, r3
 800c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c69a:	e03a      	b.n	800c712 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6a2:	f043 0301 	orr.w	r3, r3, #1
 800c6a6:	b2da      	uxtb	r2, r3
 800c6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b6:	699b      	ldr	r3, [r3, #24]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d10a      	bne.n	800c6d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c0:	f383 8811 	msr	BASEPRI, r3
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	617b      	str	r3, [r7, #20]
}
 800c6ce:	bf00      	nop
 800c6d0:	e7fe      	b.n	800c6d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d4:	699a      	ldr	r2, [r3, #24]
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d8:	18d1      	adds	r1, r2, r3
 800c6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6e0:	f7ff ff06 	bl	800c4f0 <prvInsertTimerInActiveList>
					break;
 800c6e4:	e015      	b.n	800c712 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6ec:	f003 0302 	and.w	r3, r3, #2
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d103      	bne.n	800c6fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c6f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6f6:	f000 fbdb 	bl	800ceb0 <vPortFree>
 800c6fa:	e00a      	b.n	800c712 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c702:	f023 0301 	bic.w	r3, r3, #1
 800c706:	b2da      	uxtb	r2, r3
 800c708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c70e:	e000      	b.n	800c712 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c710:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c712:	4b08      	ldr	r3, [pc, #32]	; (800c734 <prvProcessReceivedCommands+0x1c0>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	1d39      	adds	r1, r7, #4
 800c718:	2200      	movs	r2, #0
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7fe fb10 	bl	800ad40 <xQueueReceive>
 800c720:	4603      	mov	r3, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	f47f af2a 	bne.w	800c57c <prvProcessReceivedCommands+0x8>
	}
}
 800c728:	bf00      	nop
 800c72a:	bf00      	nop
 800c72c:	3730      	adds	r7, #48	; 0x30
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	20000e08 	.word	0x20000e08

0800c738 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b088      	sub	sp, #32
 800c73c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c73e:	e048      	b.n	800c7d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c740:	4b2d      	ldr	r3, [pc, #180]	; (800c7f8 <prvSwitchTimerLists+0xc0>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c74a:	4b2b      	ldr	r3, [pc, #172]	; (800c7f8 <prvSwitchTimerLists+0xc0>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	3304      	adds	r3, #4
 800c758:	4618      	mov	r0, r3
 800c75a:	f7fe f829 	bl	800a7b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	6a1b      	ldr	r3, [r3, #32]
 800c762:	68f8      	ldr	r0, [r7, #12]
 800c764:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c76c:	f003 0304 	and.w	r3, r3, #4
 800c770:	2b00      	cmp	r3, #0
 800c772:	d02e      	beq.n	800c7d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	699b      	ldr	r3, [r3, #24]
 800c778:	693a      	ldr	r2, [r7, #16]
 800c77a:	4413      	add	r3, r2
 800c77c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c77e:	68ba      	ldr	r2, [r7, #8]
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	429a      	cmp	r2, r3
 800c784:	d90e      	bls.n	800c7a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	68ba      	ldr	r2, [r7, #8]
 800c78a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c792:	4b19      	ldr	r3, [pc, #100]	; (800c7f8 <prvSwitchTimerLists+0xc0>)
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3304      	adds	r3, #4
 800c79a:	4619      	mov	r1, r3
 800c79c:	4610      	mov	r0, r2
 800c79e:	f7fd ffce 	bl	800a73e <vListInsert>
 800c7a2:	e016      	b.n	800c7d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	9300      	str	r3, [sp, #0]
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	693a      	ldr	r2, [r7, #16]
 800c7ac:	2100      	movs	r1, #0
 800c7ae:	68f8      	ldr	r0, [r7, #12]
 800c7b0:	f7ff fd60 	bl	800c274 <xTimerGenericCommand>
 800c7b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d10a      	bne.n	800c7d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c0:	f383 8811 	msr	BASEPRI, r3
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	603b      	str	r3, [r7, #0]
}
 800c7ce:	bf00      	nop
 800c7d0:	e7fe      	b.n	800c7d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7d2:	4b09      	ldr	r3, [pc, #36]	; (800c7f8 <prvSwitchTimerLists+0xc0>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1b1      	bne.n	800c740 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c7dc:	4b06      	ldr	r3, [pc, #24]	; (800c7f8 <prvSwitchTimerLists+0xc0>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c7e2:	4b06      	ldr	r3, [pc, #24]	; (800c7fc <prvSwitchTimerLists+0xc4>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a04      	ldr	r2, [pc, #16]	; (800c7f8 <prvSwitchTimerLists+0xc0>)
 800c7e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c7ea:	4a04      	ldr	r2, [pc, #16]	; (800c7fc <prvSwitchTimerLists+0xc4>)
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	6013      	str	r3, [r2, #0]
}
 800c7f0:	bf00      	nop
 800c7f2:	3718      	adds	r7, #24
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	20000e00 	.word	0x20000e00
 800c7fc:	20000e04 	.word	0x20000e04

0800c800 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c806:	f000 f965 	bl	800cad4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c80a:	4b15      	ldr	r3, [pc, #84]	; (800c860 <prvCheckForValidListAndQueue+0x60>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d120      	bne.n	800c854 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c812:	4814      	ldr	r0, [pc, #80]	; (800c864 <prvCheckForValidListAndQueue+0x64>)
 800c814:	f7fd ff42 	bl	800a69c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c818:	4813      	ldr	r0, [pc, #76]	; (800c868 <prvCheckForValidListAndQueue+0x68>)
 800c81a:	f7fd ff3f 	bl	800a69c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c81e:	4b13      	ldr	r3, [pc, #76]	; (800c86c <prvCheckForValidListAndQueue+0x6c>)
 800c820:	4a10      	ldr	r2, [pc, #64]	; (800c864 <prvCheckForValidListAndQueue+0x64>)
 800c822:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c824:	4b12      	ldr	r3, [pc, #72]	; (800c870 <prvCheckForValidListAndQueue+0x70>)
 800c826:	4a10      	ldr	r2, [pc, #64]	; (800c868 <prvCheckForValidListAndQueue+0x68>)
 800c828:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c82a:	2300      	movs	r3, #0
 800c82c:	9300      	str	r3, [sp, #0]
 800c82e:	4b11      	ldr	r3, [pc, #68]	; (800c874 <prvCheckForValidListAndQueue+0x74>)
 800c830:	4a11      	ldr	r2, [pc, #68]	; (800c878 <prvCheckForValidListAndQueue+0x78>)
 800c832:	2110      	movs	r1, #16
 800c834:	200a      	movs	r0, #10
 800c836:	f7fe f84d 	bl	800a8d4 <xQueueGenericCreateStatic>
 800c83a:	4603      	mov	r3, r0
 800c83c:	4a08      	ldr	r2, [pc, #32]	; (800c860 <prvCheckForValidListAndQueue+0x60>)
 800c83e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c840:	4b07      	ldr	r3, [pc, #28]	; (800c860 <prvCheckForValidListAndQueue+0x60>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d005      	beq.n	800c854 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c848:	4b05      	ldr	r3, [pc, #20]	; (800c860 <prvCheckForValidListAndQueue+0x60>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	490b      	ldr	r1, [pc, #44]	; (800c87c <prvCheckForValidListAndQueue+0x7c>)
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fe fc66 	bl	800b120 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c854:	f000 f96e 	bl	800cb34 <vPortExitCritical>
}
 800c858:	bf00      	nop
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	20000e08 	.word	0x20000e08
 800c864:	20000dd8 	.word	0x20000dd8
 800c868:	20000dec 	.word	0x20000dec
 800c86c:	20000e00 	.word	0x20000e00
 800c870:	20000e04 	.word	0x20000e04
 800c874:	20000eb4 	.word	0x20000eb4
 800c878:	20000e14 	.word	0x20000e14
 800c87c:	08013bc0 	.word	0x08013bc0

0800c880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	3b04      	subs	r3, #4
 800c890:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	3b04      	subs	r3, #4
 800c89e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	f023 0201 	bic.w	r2, r3, #1
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	3b04      	subs	r3, #4
 800c8ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c8b0:	4a0c      	ldr	r2, [pc, #48]	; (800c8e4 <pxPortInitialiseStack+0x64>)
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	3b14      	subs	r3, #20
 800c8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	3b04      	subs	r3, #4
 800c8c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f06f 0202 	mvn.w	r2, #2
 800c8ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	3b20      	subs	r3, #32
 800c8d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3714      	adds	r7, #20
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr
 800c8e4:	0800c8e9 	.word	0x0800c8e9

0800c8e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c8f2:	4b12      	ldr	r3, [pc, #72]	; (800c93c <prvTaskExitError+0x54>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8fa:	d00a      	beq.n	800c912 <prvTaskExitError+0x2a>
	__asm volatile
 800c8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	60fb      	str	r3, [r7, #12]
}
 800c90e:	bf00      	nop
 800c910:	e7fe      	b.n	800c910 <prvTaskExitError+0x28>
	__asm volatile
 800c912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c916:	f383 8811 	msr	BASEPRI, r3
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	60bb      	str	r3, [r7, #8]
}
 800c924:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c926:	bf00      	nop
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d0fc      	beq.n	800c928 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c92e:	bf00      	nop
 800c930:	bf00      	nop
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	20000010 	.word	0x20000010

0800c940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c940:	4b07      	ldr	r3, [pc, #28]	; (800c960 <pxCurrentTCBConst2>)
 800c942:	6819      	ldr	r1, [r3, #0]
 800c944:	6808      	ldr	r0, [r1, #0]
 800c946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94a:	f380 8809 	msr	PSP, r0
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	f04f 0000 	mov.w	r0, #0
 800c956:	f380 8811 	msr	BASEPRI, r0
 800c95a:	4770      	bx	lr
 800c95c:	f3af 8000 	nop.w

0800c960 <pxCurrentTCBConst2>:
 800c960:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c964:	bf00      	nop
 800c966:	bf00      	nop

0800c968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c968:	4808      	ldr	r0, [pc, #32]	; (800c98c <prvPortStartFirstTask+0x24>)
 800c96a:	6800      	ldr	r0, [r0, #0]
 800c96c:	6800      	ldr	r0, [r0, #0]
 800c96e:	f380 8808 	msr	MSP, r0
 800c972:	f04f 0000 	mov.w	r0, #0
 800c976:	f380 8814 	msr	CONTROL, r0
 800c97a:	b662      	cpsie	i
 800c97c:	b661      	cpsie	f
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	df00      	svc	0
 800c988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c98a:	bf00      	nop
 800c98c:	e000ed08 	.word	0xe000ed08

0800c990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c996:	4b46      	ldr	r3, [pc, #280]	; (800cab0 <xPortStartScheduler+0x120>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4a46      	ldr	r2, [pc, #280]	; (800cab4 <xPortStartScheduler+0x124>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d10a      	bne.n	800c9b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a4:	f383 8811 	msr	BASEPRI, r3
 800c9a8:	f3bf 8f6f 	isb	sy
 800c9ac:	f3bf 8f4f 	dsb	sy
 800c9b0:	613b      	str	r3, [r7, #16]
}
 800c9b2:	bf00      	nop
 800c9b4:	e7fe      	b.n	800c9b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c9b6:	4b3e      	ldr	r3, [pc, #248]	; (800cab0 <xPortStartScheduler+0x120>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a3f      	ldr	r2, [pc, #252]	; (800cab8 <xPortStartScheduler+0x128>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d10a      	bne.n	800c9d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c4:	f383 8811 	msr	BASEPRI, r3
 800c9c8:	f3bf 8f6f 	isb	sy
 800c9cc:	f3bf 8f4f 	dsb	sy
 800c9d0:	60fb      	str	r3, [r7, #12]
}
 800c9d2:	bf00      	nop
 800c9d4:	e7fe      	b.n	800c9d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c9d6:	4b39      	ldr	r3, [pc, #228]	; (800cabc <xPortStartScheduler+0x12c>)
 800c9d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	22ff      	movs	r2, #255	; 0xff
 800c9e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c9f0:	78fb      	ldrb	r3, [r7, #3]
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c9f8:	b2da      	uxtb	r2, r3
 800c9fa:	4b31      	ldr	r3, [pc, #196]	; (800cac0 <xPortStartScheduler+0x130>)
 800c9fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c9fe:	4b31      	ldr	r3, [pc, #196]	; (800cac4 <xPortStartScheduler+0x134>)
 800ca00:	2207      	movs	r2, #7
 800ca02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca04:	e009      	b.n	800ca1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ca06:	4b2f      	ldr	r3, [pc, #188]	; (800cac4 <xPortStartScheduler+0x134>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	4a2d      	ldr	r2, [pc, #180]	; (800cac4 <xPortStartScheduler+0x134>)
 800ca0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca10:	78fb      	ldrb	r3, [r7, #3]
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	005b      	lsls	r3, r3, #1
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca1a:	78fb      	ldrb	r3, [r7, #3]
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca22:	2b80      	cmp	r3, #128	; 0x80
 800ca24:	d0ef      	beq.n	800ca06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ca26:	4b27      	ldr	r3, [pc, #156]	; (800cac4 <xPortStartScheduler+0x134>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f1c3 0307 	rsb	r3, r3, #7
 800ca2e:	2b04      	cmp	r3, #4
 800ca30:	d00a      	beq.n	800ca48 <xPortStartScheduler+0xb8>
	__asm volatile
 800ca32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca36:	f383 8811 	msr	BASEPRI, r3
 800ca3a:	f3bf 8f6f 	isb	sy
 800ca3e:	f3bf 8f4f 	dsb	sy
 800ca42:	60bb      	str	r3, [r7, #8]
}
 800ca44:	bf00      	nop
 800ca46:	e7fe      	b.n	800ca46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca48:	4b1e      	ldr	r3, [pc, #120]	; (800cac4 <xPortStartScheduler+0x134>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	021b      	lsls	r3, r3, #8
 800ca4e:	4a1d      	ldr	r2, [pc, #116]	; (800cac4 <xPortStartScheduler+0x134>)
 800ca50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ca52:	4b1c      	ldr	r3, [pc, #112]	; (800cac4 <xPortStartScheduler+0x134>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ca5a:	4a1a      	ldr	r2, [pc, #104]	; (800cac4 <xPortStartScheduler+0x134>)
 800ca5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	b2da      	uxtb	r2, r3
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca66:	4b18      	ldr	r3, [pc, #96]	; (800cac8 <xPortStartScheduler+0x138>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a17      	ldr	r2, [pc, #92]	; (800cac8 <xPortStartScheduler+0x138>)
 800ca6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca72:	4b15      	ldr	r3, [pc, #84]	; (800cac8 <xPortStartScheduler+0x138>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a14      	ldr	r2, [pc, #80]	; (800cac8 <xPortStartScheduler+0x138>)
 800ca78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ca7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca7e:	f000 f8dd 	bl	800cc3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca82:	4b12      	ldr	r3, [pc, #72]	; (800cacc <xPortStartScheduler+0x13c>)
 800ca84:	2200      	movs	r2, #0
 800ca86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca88:	f000 f8fc 	bl	800cc84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca8c:	4b10      	ldr	r3, [pc, #64]	; (800cad0 <xPortStartScheduler+0x140>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a0f      	ldr	r2, [pc, #60]	; (800cad0 <xPortStartScheduler+0x140>)
 800ca92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ca96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca98:	f7ff ff66 	bl	800c968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca9c:	f7ff f856 	bl	800bb4c <vTaskSwitchContext>
	prvTaskExitError();
 800caa0:	f7ff ff22 	bl	800c8e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3718      	adds	r7, #24
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	e000ed00 	.word	0xe000ed00
 800cab4:	410fc271 	.word	0x410fc271
 800cab8:	410fc270 	.word	0x410fc270
 800cabc:	e000e400 	.word	0xe000e400
 800cac0:	20000f04 	.word	0x20000f04
 800cac4:	20000f08 	.word	0x20000f08
 800cac8:	e000ed20 	.word	0xe000ed20
 800cacc:	20000010 	.word	0x20000010
 800cad0:	e000ef34 	.word	0xe000ef34

0800cad4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
	__asm volatile
 800cada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cade:	f383 8811 	msr	BASEPRI, r3
 800cae2:	f3bf 8f6f 	isb	sy
 800cae6:	f3bf 8f4f 	dsb	sy
 800caea:	607b      	str	r3, [r7, #4]
}
 800caec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800caee:	4b0f      	ldr	r3, [pc, #60]	; (800cb2c <vPortEnterCritical+0x58>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3301      	adds	r3, #1
 800caf4:	4a0d      	ldr	r2, [pc, #52]	; (800cb2c <vPortEnterCritical+0x58>)
 800caf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800caf8:	4b0c      	ldr	r3, [pc, #48]	; (800cb2c <vPortEnterCritical+0x58>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d10f      	bne.n	800cb20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cb00:	4b0b      	ldr	r3, [pc, #44]	; (800cb30 <vPortEnterCritical+0x5c>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00a      	beq.n	800cb20 <vPortEnterCritical+0x4c>
	__asm volatile
 800cb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	603b      	str	r3, [r7, #0]
}
 800cb1c:	bf00      	nop
 800cb1e:	e7fe      	b.n	800cb1e <vPortEnterCritical+0x4a>
	}
}
 800cb20:	bf00      	nop
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	20000010 	.word	0x20000010
 800cb30:	e000ed04 	.word	0xe000ed04

0800cb34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cb3a:	4b12      	ldr	r3, [pc, #72]	; (800cb84 <vPortExitCritical+0x50>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10a      	bne.n	800cb58 <vPortExitCritical+0x24>
	__asm volatile
 800cb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	607b      	str	r3, [r7, #4]
}
 800cb54:	bf00      	nop
 800cb56:	e7fe      	b.n	800cb56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cb58:	4b0a      	ldr	r3, [pc, #40]	; (800cb84 <vPortExitCritical+0x50>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	3b01      	subs	r3, #1
 800cb5e:	4a09      	ldr	r2, [pc, #36]	; (800cb84 <vPortExitCritical+0x50>)
 800cb60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cb62:	4b08      	ldr	r3, [pc, #32]	; (800cb84 <vPortExitCritical+0x50>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d105      	bne.n	800cb76 <vPortExitCritical+0x42>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	f383 8811 	msr	BASEPRI, r3
}
 800cb74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb76:	bf00      	nop
 800cb78:	370c      	adds	r7, #12
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	20000010 	.word	0x20000010
	...

0800cb90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb90:	f3ef 8009 	mrs	r0, PSP
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	4b15      	ldr	r3, [pc, #84]	; (800cbf0 <pxCurrentTCBConst>)
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	f01e 0f10 	tst.w	lr, #16
 800cba0:	bf08      	it	eq
 800cba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbaa:	6010      	str	r0, [r2, #0]
 800cbac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cbb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cbb4:	f380 8811 	msr	BASEPRI, r0
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f7fe ffc4 	bl	800bb4c <vTaskSwitchContext>
 800cbc4:	f04f 0000 	mov.w	r0, #0
 800cbc8:	f380 8811 	msr	BASEPRI, r0
 800cbcc:	bc09      	pop	{r0, r3}
 800cbce:	6819      	ldr	r1, [r3, #0]
 800cbd0:	6808      	ldr	r0, [r1, #0]
 800cbd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd6:	f01e 0f10 	tst.w	lr, #16
 800cbda:	bf08      	it	eq
 800cbdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cbe0:	f380 8809 	msr	PSP, r0
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	f3af 8000 	nop.w

0800cbf0 <pxCurrentTCBConst>:
 800cbf0:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cbf4:	bf00      	nop
 800cbf6:	bf00      	nop

0800cbf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
	__asm volatile
 800cbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	607b      	str	r3, [r7, #4]
}
 800cc10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc12:	f7fe fee1 	bl	800b9d8 <xTaskIncrementTick>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d003      	beq.n	800cc24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc1c:	4b06      	ldr	r3, [pc, #24]	; (800cc38 <xPortSysTickHandler+0x40>)
 800cc1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc22:	601a      	str	r2, [r3, #0]
 800cc24:	2300      	movs	r3, #0
 800cc26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	f383 8811 	msr	BASEPRI, r3
}
 800cc2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc30:	bf00      	nop
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	e000ed04 	.word	0xe000ed04

0800cc3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc40:	4b0b      	ldr	r3, [pc, #44]	; (800cc70 <vPortSetupTimerInterrupt+0x34>)
 800cc42:	2200      	movs	r2, #0
 800cc44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc46:	4b0b      	ldr	r3, [pc, #44]	; (800cc74 <vPortSetupTimerInterrupt+0x38>)
 800cc48:	2200      	movs	r2, #0
 800cc4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc4c:	4b0a      	ldr	r3, [pc, #40]	; (800cc78 <vPortSetupTimerInterrupt+0x3c>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a0a      	ldr	r2, [pc, #40]	; (800cc7c <vPortSetupTimerInterrupt+0x40>)
 800cc52:	fba2 2303 	umull	r2, r3, r2, r3
 800cc56:	099b      	lsrs	r3, r3, #6
 800cc58:	4a09      	ldr	r2, [pc, #36]	; (800cc80 <vPortSetupTimerInterrupt+0x44>)
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cc5e:	4b04      	ldr	r3, [pc, #16]	; (800cc70 <vPortSetupTimerInterrupt+0x34>)
 800cc60:	2207      	movs	r2, #7
 800cc62:	601a      	str	r2, [r3, #0]
}
 800cc64:	bf00      	nop
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	e000e010 	.word	0xe000e010
 800cc74:	e000e018 	.word	0xe000e018
 800cc78:	20000004 	.word	0x20000004
 800cc7c:	10624dd3 	.word	0x10624dd3
 800cc80:	e000e014 	.word	0xe000e014

0800cc84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cc94 <vPortEnableVFP+0x10>
 800cc88:	6801      	ldr	r1, [r0, #0]
 800cc8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cc8e:	6001      	str	r1, [r0, #0]
 800cc90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc92:	bf00      	nop
 800cc94:	e000ed88 	.word	0xe000ed88

0800cc98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc98:	b480      	push	{r7}
 800cc9a:	b085      	sub	sp, #20
 800cc9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc9e:	f3ef 8305 	mrs	r3, IPSR
 800cca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2b0f      	cmp	r3, #15
 800cca8:	d914      	bls.n	800ccd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ccaa:	4a17      	ldr	r2, [pc, #92]	; (800cd08 <vPortValidateInterruptPriority+0x70>)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	4413      	add	r3, r2
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ccb4:	4b15      	ldr	r3, [pc, #84]	; (800cd0c <vPortValidateInterruptPriority+0x74>)
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	7afa      	ldrb	r2, [r7, #11]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d20a      	bcs.n	800ccd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ccbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc2:	f383 8811 	msr	BASEPRI, r3
 800ccc6:	f3bf 8f6f 	isb	sy
 800ccca:	f3bf 8f4f 	dsb	sy
 800ccce:	607b      	str	r3, [r7, #4]
}
 800ccd0:	bf00      	nop
 800ccd2:	e7fe      	b.n	800ccd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ccd4:	4b0e      	ldr	r3, [pc, #56]	; (800cd10 <vPortValidateInterruptPriority+0x78>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ccdc:	4b0d      	ldr	r3, [pc, #52]	; (800cd14 <vPortValidateInterruptPriority+0x7c>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d90a      	bls.n	800ccfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce8:	f383 8811 	msr	BASEPRI, r3
 800ccec:	f3bf 8f6f 	isb	sy
 800ccf0:	f3bf 8f4f 	dsb	sy
 800ccf4:	603b      	str	r3, [r7, #0]
}
 800ccf6:	bf00      	nop
 800ccf8:	e7fe      	b.n	800ccf8 <vPortValidateInterruptPriority+0x60>
	}
 800ccfa:	bf00      	nop
 800ccfc:	3714      	adds	r7, #20
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop
 800cd08:	e000e3f0 	.word	0xe000e3f0
 800cd0c:	20000f04 	.word	0x20000f04
 800cd10:	e000ed0c 	.word	0xe000ed0c
 800cd14:	20000f08 	.word	0x20000f08

0800cd18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b08a      	sub	sp, #40	; 0x28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cd20:	2300      	movs	r3, #0
 800cd22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cd24:	f7fe fd9c 	bl	800b860 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cd28:	4b5b      	ldr	r3, [pc, #364]	; (800ce98 <pvPortMalloc+0x180>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d101      	bne.n	800cd34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cd30:	f000 f920 	bl	800cf74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd34:	4b59      	ldr	r3, [pc, #356]	; (800ce9c <pvPortMalloc+0x184>)
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	4013      	ands	r3, r2
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f040 8093 	bne.w	800ce68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d01d      	beq.n	800cd84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cd48:	2208      	movs	r2, #8
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f003 0307 	and.w	r3, r3, #7
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d014      	beq.n	800cd84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f023 0307 	bic.w	r3, r3, #7
 800cd60:	3308      	adds	r3, #8
 800cd62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f003 0307 	and.w	r3, r3, #7
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d00a      	beq.n	800cd84 <pvPortMalloc+0x6c>
	__asm volatile
 800cd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd72:	f383 8811 	msr	BASEPRI, r3
 800cd76:	f3bf 8f6f 	isb	sy
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	617b      	str	r3, [r7, #20]
}
 800cd80:	bf00      	nop
 800cd82:	e7fe      	b.n	800cd82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d06e      	beq.n	800ce68 <pvPortMalloc+0x150>
 800cd8a:	4b45      	ldr	r3, [pc, #276]	; (800cea0 <pvPortMalloc+0x188>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d869      	bhi.n	800ce68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd94:	4b43      	ldr	r3, [pc, #268]	; (800cea4 <pvPortMalloc+0x18c>)
 800cd96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd98:	4b42      	ldr	r3, [pc, #264]	; (800cea4 <pvPortMalloc+0x18c>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd9e:	e004      	b.n	800cdaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d903      	bls.n	800cdbc <pvPortMalloc+0xa4>
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d1f1      	bne.n	800cda0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cdbc:	4b36      	ldr	r3, [pc, #216]	; (800ce98 <pvPortMalloc+0x180>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d050      	beq.n	800ce68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cdc6:	6a3b      	ldr	r3, [r7, #32]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2208      	movs	r2, #8
 800cdcc:	4413      	add	r3, r2
 800cdce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	6a3b      	ldr	r3, [r7, #32]
 800cdd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdda:	685a      	ldr	r2, [r3, #4]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	1ad2      	subs	r2, r2, r3
 800cde0:	2308      	movs	r3, #8
 800cde2:	005b      	lsls	r3, r3, #1
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d91f      	bls.n	800ce28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cde8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	4413      	add	r3, r2
 800cdee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	f003 0307 	and.w	r3, r3, #7
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00a      	beq.n	800ce10 <pvPortMalloc+0xf8>
	__asm volatile
 800cdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfe:	f383 8811 	msr	BASEPRI, r3
 800ce02:	f3bf 8f6f 	isb	sy
 800ce06:	f3bf 8f4f 	dsb	sy
 800ce0a:	613b      	str	r3, [r7, #16]
}
 800ce0c:	bf00      	nop
 800ce0e:	e7fe      	b.n	800ce0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce12:	685a      	ldr	r2, [r3, #4]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	1ad2      	subs	r2, r2, r3
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce22:	69b8      	ldr	r0, [r7, #24]
 800ce24:	f000 f908 	bl	800d038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce28:	4b1d      	ldr	r3, [pc, #116]	; (800cea0 <pvPortMalloc+0x188>)
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	1ad3      	subs	r3, r2, r3
 800ce32:	4a1b      	ldr	r2, [pc, #108]	; (800cea0 <pvPortMalloc+0x188>)
 800ce34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce36:	4b1a      	ldr	r3, [pc, #104]	; (800cea0 <pvPortMalloc+0x188>)
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	4b1b      	ldr	r3, [pc, #108]	; (800cea8 <pvPortMalloc+0x190>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d203      	bcs.n	800ce4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ce42:	4b17      	ldr	r3, [pc, #92]	; (800cea0 <pvPortMalloc+0x188>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a18      	ldr	r2, [pc, #96]	; (800cea8 <pvPortMalloc+0x190>)
 800ce48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ce4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4c:	685a      	ldr	r2, [r3, #4]
 800ce4e:	4b13      	ldr	r3, [pc, #76]	; (800ce9c <pvPortMalloc+0x184>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	431a      	orrs	r2, r3
 800ce54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ce58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ce5e:	4b13      	ldr	r3, [pc, #76]	; (800ceac <pvPortMalloc+0x194>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3301      	adds	r3, #1
 800ce64:	4a11      	ldr	r2, [pc, #68]	; (800ceac <pvPortMalloc+0x194>)
 800ce66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce68:	f7fe fd08 	bl	800b87c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	f003 0307 	and.w	r3, r3, #7
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00a      	beq.n	800ce8c <pvPortMalloc+0x174>
	__asm volatile
 800ce76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7a:	f383 8811 	msr	BASEPRI, r3
 800ce7e:	f3bf 8f6f 	isb	sy
 800ce82:	f3bf 8f4f 	dsb	sy
 800ce86:	60fb      	str	r3, [r7, #12]
}
 800ce88:	bf00      	nop
 800ce8a:	e7fe      	b.n	800ce8a <pvPortMalloc+0x172>
	return pvReturn;
 800ce8c:	69fb      	ldr	r3, [r7, #28]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3728      	adds	r7, #40	; 0x28
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	20004b14 	.word	0x20004b14
 800ce9c:	20004b28 	.word	0x20004b28
 800cea0:	20004b18 	.word	0x20004b18
 800cea4:	20004b0c 	.word	0x20004b0c
 800cea8:	20004b1c 	.word	0x20004b1c
 800ceac:	20004b20 	.word	0x20004b20

0800ceb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d04d      	beq.n	800cf5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cec2:	2308      	movs	r3, #8
 800cec4:	425b      	negs	r3, r3
 800cec6:	697a      	ldr	r2, [r7, #20]
 800cec8:	4413      	add	r3, r2
 800ceca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	685a      	ldr	r2, [r3, #4]
 800ced4:	4b24      	ldr	r3, [pc, #144]	; (800cf68 <vPortFree+0xb8>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4013      	ands	r3, r2
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d10a      	bne.n	800cef4 <vPortFree+0x44>
	__asm volatile
 800cede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee2:	f383 8811 	msr	BASEPRI, r3
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	60fb      	str	r3, [r7, #12]
}
 800cef0:	bf00      	nop
 800cef2:	e7fe      	b.n	800cef2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d00a      	beq.n	800cf12 <vPortFree+0x62>
	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	60bb      	str	r3, [r7, #8]
}
 800cf0e:	bf00      	nop
 800cf10:	e7fe      	b.n	800cf10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	685a      	ldr	r2, [r3, #4]
 800cf16:	4b14      	ldr	r3, [pc, #80]	; (800cf68 <vPortFree+0xb8>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4013      	ands	r3, r2
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d01e      	beq.n	800cf5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d11a      	bne.n	800cf5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	4b0e      	ldr	r3, [pc, #56]	; (800cf68 <vPortFree+0xb8>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	43db      	mvns	r3, r3
 800cf32:	401a      	ands	r2, r3
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cf38:	f7fe fc92 	bl	800b860 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	685a      	ldr	r2, [r3, #4]
 800cf40:	4b0a      	ldr	r3, [pc, #40]	; (800cf6c <vPortFree+0xbc>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4413      	add	r3, r2
 800cf46:	4a09      	ldr	r2, [pc, #36]	; (800cf6c <vPortFree+0xbc>)
 800cf48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cf4a:	6938      	ldr	r0, [r7, #16]
 800cf4c:	f000 f874 	bl	800d038 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cf50:	4b07      	ldr	r3, [pc, #28]	; (800cf70 <vPortFree+0xc0>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	3301      	adds	r3, #1
 800cf56:	4a06      	ldr	r2, [pc, #24]	; (800cf70 <vPortFree+0xc0>)
 800cf58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cf5a:	f7fe fc8f 	bl	800b87c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cf5e:	bf00      	nop
 800cf60:	3718      	adds	r7, #24
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	20004b28 	.word	0x20004b28
 800cf6c:	20004b18 	.word	0x20004b18
 800cf70:	20004b24 	.word	0x20004b24

0800cf74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf74:	b480      	push	{r7}
 800cf76:	b085      	sub	sp, #20
 800cf78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cf7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf80:	4b27      	ldr	r3, [pc, #156]	; (800d020 <prvHeapInit+0xac>)
 800cf82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f003 0307 	and.w	r3, r3, #7
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d00c      	beq.n	800cfa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	3307      	adds	r3, #7
 800cf92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f023 0307 	bic.w	r3, r3, #7
 800cf9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf9c:	68ba      	ldr	r2, [r7, #8]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	4a1f      	ldr	r2, [pc, #124]	; (800d020 <prvHeapInit+0xac>)
 800cfa4:	4413      	add	r3, r2
 800cfa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cfac:	4a1d      	ldr	r2, [pc, #116]	; (800d024 <prvHeapInit+0xb0>)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cfb2:	4b1c      	ldr	r3, [pc, #112]	; (800d024 <prvHeapInit+0xb0>)
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	68ba      	ldr	r2, [r7, #8]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cfc0:	2208      	movs	r2, #8
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	1a9b      	subs	r3, r3, r2
 800cfc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f023 0307 	bic.w	r3, r3, #7
 800cfce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	4a15      	ldr	r2, [pc, #84]	; (800d028 <prvHeapInit+0xb4>)
 800cfd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cfd6:	4b14      	ldr	r3, [pc, #80]	; (800d028 <prvHeapInit+0xb4>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cfde:	4b12      	ldr	r3, [pc, #72]	; (800d028 <prvHeapInit+0xb4>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	68fa      	ldr	r2, [r7, #12]
 800cfee:	1ad2      	subs	r2, r2, r3
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cff4:	4b0c      	ldr	r3, [pc, #48]	; (800d028 <prvHeapInit+0xb4>)
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	4a0a      	ldr	r2, [pc, #40]	; (800d02c <prvHeapInit+0xb8>)
 800d002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	4a09      	ldr	r2, [pc, #36]	; (800d030 <prvHeapInit+0xbc>)
 800d00a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d00c:	4b09      	ldr	r3, [pc, #36]	; (800d034 <prvHeapInit+0xc0>)
 800d00e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d012:	601a      	str	r2, [r3, #0]
}
 800d014:	bf00      	nop
 800d016:	3714      	adds	r7, #20
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr
 800d020:	20000f0c 	.word	0x20000f0c
 800d024:	20004b0c 	.word	0x20004b0c
 800d028:	20004b14 	.word	0x20004b14
 800d02c:	20004b1c 	.word	0x20004b1c
 800d030:	20004b18 	.word	0x20004b18
 800d034:	20004b28 	.word	0x20004b28

0800d038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d038:	b480      	push	{r7}
 800d03a:	b085      	sub	sp, #20
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d040:	4b28      	ldr	r3, [pc, #160]	; (800d0e4 <prvInsertBlockIntoFreeList+0xac>)
 800d042:	60fb      	str	r3, [r7, #12]
 800d044:	e002      	b.n	800d04c <prvInsertBlockIntoFreeList+0x14>
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	60fb      	str	r3, [r7, #12]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	429a      	cmp	r2, r3
 800d054:	d8f7      	bhi.n	800d046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	68ba      	ldr	r2, [r7, #8]
 800d060:	4413      	add	r3, r2
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	429a      	cmp	r2, r3
 800d066:	d108      	bne.n	800d07a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	685a      	ldr	r2, [r3, #4]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	441a      	add	r2, r3
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	68ba      	ldr	r2, [r7, #8]
 800d084:	441a      	add	r2, r3
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d118      	bne.n	800d0c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	4b15      	ldr	r3, [pc, #84]	; (800d0e8 <prvInsertBlockIntoFreeList+0xb0>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	429a      	cmp	r2, r3
 800d098:	d00d      	beq.n	800d0b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	685a      	ldr	r2, [r3, #4]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	441a      	add	r2, r3
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	601a      	str	r2, [r3, #0]
 800d0b4:	e008      	b.n	800d0c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d0b6:	4b0c      	ldr	r3, [pc, #48]	; (800d0e8 <prvInsertBlockIntoFreeList+0xb0>)
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	601a      	str	r2, [r3, #0]
 800d0be:	e003      	b.n	800d0c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d002      	beq.n	800d0d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	687a      	ldr	r2, [r7, #4]
 800d0d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0d6:	bf00      	nop
 800d0d8:	3714      	adds	r7, #20
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	20004b0c 	.word	0x20004b0c
 800d0e8:	20004b14 	.word	0x20004b14

0800d0ec <calloc>:
 800d0ec:	4b02      	ldr	r3, [pc, #8]	; (800d0f8 <calloc+0xc>)
 800d0ee:	460a      	mov	r2, r1
 800d0f0:	4601      	mov	r1, r0
 800d0f2:	6818      	ldr	r0, [r3, #0]
 800d0f4:	f000 b84a 	b.w	800d18c <_calloc_r>
 800d0f8:	20000014 	.word	0x20000014

0800d0fc <__errno>:
 800d0fc:	4b01      	ldr	r3, [pc, #4]	; (800d104 <__errno+0x8>)
 800d0fe:	6818      	ldr	r0, [r3, #0]
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	20000014 	.word	0x20000014

0800d108 <__libc_init_array>:
 800d108:	b570      	push	{r4, r5, r6, lr}
 800d10a:	4d0d      	ldr	r5, [pc, #52]	; (800d140 <__libc_init_array+0x38>)
 800d10c:	4c0d      	ldr	r4, [pc, #52]	; (800d144 <__libc_init_array+0x3c>)
 800d10e:	1b64      	subs	r4, r4, r5
 800d110:	10a4      	asrs	r4, r4, #2
 800d112:	2600      	movs	r6, #0
 800d114:	42a6      	cmp	r6, r4
 800d116:	d109      	bne.n	800d12c <__libc_init_array+0x24>
 800d118:	4d0b      	ldr	r5, [pc, #44]	; (800d148 <__libc_init_array+0x40>)
 800d11a:	4c0c      	ldr	r4, [pc, #48]	; (800d14c <__libc_init_array+0x44>)
 800d11c:	f006 fcd4 	bl	8013ac8 <_init>
 800d120:	1b64      	subs	r4, r4, r5
 800d122:	10a4      	asrs	r4, r4, #2
 800d124:	2600      	movs	r6, #0
 800d126:	42a6      	cmp	r6, r4
 800d128:	d105      	bne.n	800d136 <__libc_init_array+0x2e>
 800d12a:	bd70      	pop	{r4, r5, r6, pc}
 800d12c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d130:	4798      	blx	r3
 800d132:	3601      	adds	r6, #1
 800d134:	e7ee      	b.n	800d114 <__libc_init_array+0xc>
 800d136:	f855 3b04 	ldr.w	r3, [r5], #4
 800d13a:	4798      	blx	r3
 800d13c:	3601      	adds	r6, #1
 800d13e:	e7f2      	b.n	800d126 <__libc_init_array+0x1e>
 800d140:	08014350 	.word	0x08014350
 800d144:	08014350 	.word	0x08014350
 800d148:	08014350 	.word	0x08014350
 800d14c:	08014354 	.word	0x08014354

0800d150 <malloc>:
 800d150:	4b02      	ldr	r3, [pc, #8]	; (800d15c <malloc+0xc>)
 800d152:	4601      	mov	r1, r0
 800d154:	6818      	ldr	r0, [r3, #0]
 800d156:	f000 b879 	b.w	800d24c <_malloc_r>
 800d15a:	bf00      	nop
 800d15c:	20000014 	.word	0x20000014

0800d160 <memcpy>:
 800d160:	440a      	add	r2, r1
 800d162:	4291      	cmp	r1, r2
 800d164:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d168:	d100      	bne.n	800d16c <memcpy+0xc>
 800d16a:	4770      	bx	lr
 800d16c:	b510      	push	{r4, lr}
 800d16e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d172:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d176:	4291      	cmp	r1, r2
 800d178:	d1f9      	bne.n	800d16e <memcpy+0xe>
 800d17a:	bd10      	pop	{r4, pc}

0800d17c <memset>:
 800d17c:	4402      	add	r2, r0
 800d17e:	4603      	mov	r3, r0
 800d180:	4293      	cmp	r3, r2
 800d182:	d100      	bne.n	800d186 <memset+0xa>
 800d184:	4770      	bx	lr
 800d186:	f803 1b01 	strb.w	r1, [r3], #1
 800d18a:	e7f9      	b.n	800d180 <memset+0x4>

0800d18c <_calloc_r>:
 800d18c:	b513      	push	{r0, r1, r4, lr}
 800d18e:	434a      	muls	r2, r1
 800d190:	4611      	mov	r1, r2
 800d192:	9201      	str	r2, [sp, #4]
 800d194:	f000 f85a 	bl	800d24c <_malloc_r>
 800d198:	4604      	mov	r4, r0
 800d19a:	b118      	cbz	r0, 800d1a4 <_calloc_r+0x18>
 800d19c:	9a01      	ldr	r2, [sp, #4]
 800d19e:	2100      	movs	r1, #0
 800d1a0:	f7ff ffec 	bl	800d17c <memset>
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	b002      	add	sp, #8
 800d1a8:	bd10      	pop	{r4, pc}
	...

0800d1ac <_free_r>:
 800d1ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1ae:	2900      	cmp	r1, #0
 800d1b0:	d048      	beq.n	800d244 <_free_r+0x98>
 800d1b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1b6:	9001      	str	r0, [sp, #4]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	f1a1 0404 	sub.w	r4, r1, #4
 800d1be:	bfb8      	it	lt
 800d1c0:	18e4      	addlt	r4, r4, r3
 800d1c2:	f003 fbb5 	bl	8010930 <__malloc_lock>
 800d1c6:	4a20      	ldr	r2, [pc, #128]	; (800d248 <_free_r+0x9c>)
 800d1c8:	9801      	ldr	r0, [sp, #4]
 800d1ca:	6813      	ldr	r3, [r2, #0]
 800d1cc:	4615      	mov	r5, r2
 800d1ce:	b933      	cbnz	r3, 800d1de <_free_r+0x32>
 800d1d0:	6063      	str	r3, [r4, #4]
 800d1d2:	6014      	str	r4, [r2, #0]
 800d1d4:	b003      	add	sp, #12
 800d1d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1da:	f003 bbaf 	b.w	801093c <__malloc_unlock>
 800d1de:	42a3      	cmp	r3, r4
 800d1e0:	d90b      	bls.n	800d1fa <_free_r+0x4e>
 800d1e2:	6821      	ldr	r1, [r4, #0]
 800d1e4:	1862      	adds	r2, r4, r1
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	bf04      	itt	eq
 800d1ea:	681a      	ldreq	r2, [r3, #0]
 800d1ec:	685b      	ldreq	r3, [r3, #4]
 800d1ee:	6063      	str	r3, [r4, #4]
 800d1f0:	bf04      	itt	eq
 800d1f2:	1852      	addeq	r2, r2, r1
 800d1f4:	6022      	streq	r2, [r4, #0]
 800d1f6:	602c      	str	r4, [r5, #0]
 800d1f8:	e7ec      	b.n	800d1d4 <_free_r+0x28>
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	b10b      	cbz	r3, 800d204 <_free_r+0x58>
 800d200:	42a3      	cmp	r3, r4
 800d202:	d9fa      	bls.n	800d1fa <_free_r+0x4e>
 800d204:	6811      	ldr	r1, [r2, #0]
 800d206:	1855      	adds	r5, r2, r1
 800d208:	42a5      	cmp	r5, r4
 800d20a:	d10b      	bne.n	800d224 <_free_r+0x78>
 800d20c:	6824      	ldr	r4, [r4, #0]
 800d20e:	4421      	add	r1, r4
 800d210:	1854      	adds	r4, r2, r1
 800d212:	42a3      	cmp	r3, r4
 800d214:	6011      	str	r1, [r2, #0]
 800d216:	d1dd      	bne.n	800d1d4 <_free_r+0x28>
 800d218:	681c      	ldr	r4, [r3, #0]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	6053      	str	r3, [r2, #4]
 800d21e:	4421      	add	r1, r4
 800d220:	6011      	str	r1, [r2, #0]
 800d222:	e7d7      	b.n	800d1d4 <_free_r+0x28>
 800d224:	d902      	bls.n	800d22c <_free_r+0x80>
 800d226:	230c      	movs	r3, #12
 800d228:	6003      	str	r3, [r0, #0]
 800d22a:	e7d3      	b.n	800d1d4 <_free_r+0x28>
 800d22c:	6825      	ldr	r5, [r4, #0]
 800d22e:	1961      	adds	r1, r4, r5
 800d230:	428b      	cmp	r3, r1
 800d232:	bf04      	itt	eq
 800d234:	6819      	ldreq	r1, [r3, #0]
 800d236:	685b      	ldreq	r3, [r3, #4]
 800d238:	6063      	str	r3, [r4, #4]
 800d23a:	bf04      	itt	eq
 800d23c:	1949      	addeq	r1, r1, r5
 800d23e:	6021      	streq	r1, [r4, #0]
 800d240:	6054      	str	r4, [r2, #4]
 800d242:	e7c7      	b.n	800d1d4 <_free_r+0x28>
 800d244:	b003      	add	sp, #12
 800d246:	bd30      	pop	{r4, r5, pc}
 800d248:	20004b2c 	.word	0x20004b2c

0800d24c <_malloc_r>:
 800d24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24e:	1ccd      	adds	r5, r1, #3
 800d250:	f025 0503 	bic.w	r5, r5, #3
 800d254:	3508      	adds	r5, #8
 800d256:	2d0c      	cmp	r5, #12
 800d258:	bf38      	it	cc
 800d25a:	250c      	movcc	r5, #12
 800d25c:	2d00      	cmp	r5, #0
 800d25e:	4606      	mov	r6, r0
 800d260:	db01      	blt.n	800d266 <_malloc_r+0x1a>
 800d262:	42a9      	cmp	r1, r5
 800d264:	d903      	bls.n	800d26e <_malloc_r+0x22>
 800d266:	230c      	movs	r3, #12
 800d268:	6033      	str	r3, [r6, #0]
 800d26a:	2000      	movs	r0, #0
 800d26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d26e:	f003 fb5f 	bl	8010930 <__malloc_lock>
 800d272:	4921      	ldr	r1, [pc, #132]	; (800d2f8 <_malloc_r+0xac>)
 800d274:	680a      	ldr	r2, [r1, #0]
 800d276:	4614      	mov	r4, r2
 800d278:	b99c      	cbnz	r4, 800d2a2 <_malloc_r+0x56>
 800d27a:	4f20      	ldr	r7, [pc, #128]	; (800d2fc <_malloc_r+0xb0>)
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	b923      	cbnz	r3, 800d28a <_malloc_r+0x3e>
 800d280:	4621      	mov	r1, r4
 800d282:	4630      	mov	r0, r6
 800d284:	f000 feb6 	bl	800dff4 <_sbrk_r>
 800d288:	6038      	str	r0, [r7, #0]
 800d28a:	4629      	mov	r1, r5
 800d28c:	4630      	mov	r0, r6
 800d28e:	f000 feb1 	bl	800dff4 <_sbrk_r>
 800d292:	1c43      	adds	r3, r0, #1
 800d294:	d123      	bne.n	800d2de <_malloc_r+0x92>
 800d296:	230c      	movs	r3, #12
 800d298:	6033      	str	r3, [r6, #0]
 800d29a:	4630      	mov	r0, r6
 800d29c:	f003 fb4e 	bl	801093c <__malloc_unlock>
 800d2a0:	e7e3      	b.n	800d26a <_malloc_r+0x1e>
 800d2a2:	6823      	ldr	r3, [r4, #0]
 800d2a4:	1b5b      	subs	r3, r3, r5
 800d2a6:	d417      	bmi.n	800d2d8 <_malloc_r+0x8c>
 800d2a8:	2b0b      	cmp	r3, #11
 800d2aa:	d903      	bls.n	800d2b4 <_malloc_r+0x68>
 800d2ac:	6023      	str	r3, [r4, #0]
 800d2ae:	441c      	add	r4, r3
 800d2b0:	6025      	str	r5, [r4, #0]
 800d2b2:	e004      	b.n	800d2be <_malloc_r+0x72>
 800d2b4:	6863      	ldr	r3, [r4, #4]
 800d2b6:	42a2      	cmp	r2, r4
 800d2b8:	bf0c      	ite	eq
 800d2ba:	600b      	streq	r3, [r1, #0]
 800d2bc:	6053      	strne	r3, [r2, #4]
 800d2be:	4630      	mov	r0, r6
 800d2c0:	f003 fb3c 	bl	801093c <__malloc_unlock>
 800d2c4:	f104 000b 	add.w	r0, r4, #11
 800d2c8:	1d23      	adds	r3, r4, #4
 800d2ca:	f020 0007 	bic.w	r0, r0, #7
 800d2ce:	1ac2      	subs	r2, r0, r3
 800d2d0:	d0cc      	beq.n	800d26c <_malloc_r+0x20>
 800d2d2:	1a1b      	subs	r3, r3, r0
 800d2d4:	50a3      	str	r3, [r4, r2]
 800d2d6:	e7c9      	b.n	800d26c <_malloc_r+0x20>
 800d2d8:	4622      	mov	r2, r4
 800d2da:	6864      	ldr	r4, [r4, #4]
 800d2dc:	e7cc      	b.n	800d278 <_malloc_r+0x2c>
 800d2de:	1cc4      	adds	r4, r0, #3
 800d2e0:	f024 0403 	bic.w	r4, r4, #3
 800d2e4:	42a0      	cmp	r0, r4
 800d2e6:	d0e3      	beq.n	800d2b0 <_malloc_r+0x64>
 800d2e8:	1a21      	subs	r1, r4, r0
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	f000 fe82 	bl	800dff4 <_sbrk_r>
 800d2f0:	3001      	adds	r0, #1
 800d2f2:	d1dd      	bne.n	800d2b0 <_malloc_r+0x64>
 800d2f4:	e7cf      	b.n	800d296 <_malloc_r+0x4a>
 800d2f6:	bf00      	nop
 800d2f8:	20004b2c 	.word	0x20004b2c
 800d2fc:	20004b30 	.word	0x20004b30

0800d300 <__cvt>:
 800d300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d304:	ec55 4b10 	vmov	r4, r5, d0
 800d308:	2d00      	cmp	r5, #0
 800d30a:	460e      	mov	r6, r1
 800d30c:	4619      	mov	r1, r3
 800d30e:	462b      	mov	r3, r5
 800d310:	bfbb      	ittet	lt
 800d312:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d316:	461d      	movlt	r5, r3
 800d318:	2300      	movge	r3, #0
 800d31a:	232d      	movlt	r3, #45	; 0x2d
 800d31c:	700b      	strb	r3, [r1, #0]
 800d31e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d320:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d324:	4691      	mov	r9, r2
 800d326:	f023 0820 	bic.w	r8, r3, #32
 800d32a:	bfbc      	itt	lt
 800d32c:	4622      	movlt	r2, r4
 800d32e:	4614      	movlt	r4, r2
 800d330:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d334:	d005      	beq.n	800d342 <__cvt+0x42>
 800d336:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d33a:	d100      	bne.n	800d33e <__cvt+0x3e>
 800d33c:	3601      	adds	r6, #1
 800d33e:	2102      	movs	r1, #2
 800d340:	e000      	b.n	800d344 <__cvt+0x44>
 800d342:	2103      	movs	r1, #3
 800d344:	ab03      	add	r3, sp, #12
 800d346:	9301      	str	r3, [sp, #4]
 800d348:	ab02      	add	r3, sp, #8
 800d34a:	9300      	str	r3, [sp, #0]
 800d34c:	ec45 4b10 	vmov	d0, r4, r5
 800d350:	4653      	mov	r3, sl
 800d352:	4632      	mov	r2, r6
 800d354:	f001 ff5c 	bl	800f210 <_dtoa_r>
 800d358:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d35c:	4607      	mov	r7, r0
 800d35e:	d102      	bne.n	800d366 <__cvt+0x66>
 800d360:	f019 0f01 	tst.w	r9, #1
 800d364:	d022      	beq.n	800d3ac <__cvt+0xac>
 800d366:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d36a:	eb07 0906 	add.w	r9, r7, r6
 800d36e:	d110      	bne.n	800d392 <__cvt+0x92>
 800d370:	783b      	ldrb	r3, [r7, #0]
 800d372:	2b30      	cmp	r3, #48	; 0x30
 800d374:	d10a      	bne.n	800d38c <__cvt+0x8c>
 800d376:	2200      	movs	r2, #0
 800d378:	2300      	movs	r3, #0
 800d37a:	4620      	mov	r0, r4
 800d37c:	4629      	mov	r1, r5
 800d37e:	f7f3 fbc3 	bl	8000b08 <__aeabi_dcmpeq>
 800d382:	b918      	cbnz	r0, 800d38c <__cvt+0x8c>
 800d384:	f1c6 0601 	rsb	r6, r6, #1
 800d388:	f8ca 6000 	str.w	r6, [sl]
 800d38c:	f8da 3000 	ldr.w	r3, [sl]
 800d390:	4499      	add	r9, r3
 800d392:	2200      	movs	r2, #0
 800d394:	2300      	movs	r3, #0
 800d396:	4620      	mov	r0, r4
 800d398:	4629      	mov	r1, r5
 800d39a:	f7f3 fbb5 	bl	8000b08 <__aeabi_dcmpeq>
 800d39e:	b108      	cbz	r0, 800d3a4 <__cvt+0xa4>
 800d3a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d3a4:	2230      	movs	r2, #48	; 0x30
 800d3a6:	9b03      	ldr	r3, [sp, #12]
 800d3a8:	454b      	cmp	r3, r9
 800d3aa:	d307      	bcc.n	800d3bc <__cvt+0xbc>
 800d3ac:	9b03      	ldr	r3, [sp, #12]
 800d3ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3b0:	1bdb      	subs	r3, r3, r7
 800d3b2:	4638      	mov	r0, r7
 800d3b4:	6013      	str	r3, [r2, #0]
 800d3b6:	b004      	add	sp, #16
 800d3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3bc:	1c59      	adds	r1, r3, #1
 800d3be:	9103      	str	r1, [sp, #12]
 800d3c0:	701a      	strb	r2, [r3, #0]
 800d3c2:	e7f0      	b.n	800d3a6 <__cvt+0xa6>

0800d3c4 <__exponent>:
 800d3c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2900      	cmp	r1, #0
 800d3ca:	bfb8      	it	lt
 800d3cc:	4249      	neglt	r1, r1
 800d3ce:	f803 2b02 	strb.w	r2, [r3], #2
 800d3d2:	bfb4      	ite	lt
 800d3d4:	222d      	movlt	r2, #45	; 0x2d
 800d3d6:	222b      	movge	r2, #43	; 0x2b
 800d3d8:	2909      	cmp	r1, #9
 800d3da:	7042      	strb	r2, [r0, #1]
 800d3dc:	dd2a      	ble.n	800d434 <__exponent+0x70>
 800d3de:	f10d 0407 	add.w	r4, sp, #7
 800d3e2:	46a4      	mov	ip, r4
 800d3e4:	270a      	movs	r7, #10
 800d3e6:	46a6      	mov	lr, r4
 800d3e8:	460a      	mov	r2, r1
 800d3ea:	fb91 f6f7 	sdiv	r6, r1, r7
 800d3ee:	fb07 1516 	mls	r5, r7, r6, r1
 800d3f2:	3530      	adds	r5, #48	; 0x30
 800d3f4:	2a63      	cmp	r2, #99	; 0x63
 800d3f6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d3fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d3fe:	4631      	mov	r1, r6
 800d400:	dcf1      	bgt.n	800d3e6 <__exponent+0x22>
 800d402:	3130      	adds	r1, #48	; 0x30
 800d404:	f1ae 0502 	sub.w	r5, lr, #2
 800d408:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d40c:	1c44      	adds	r4, r0, #1
 800d40e:	4629      	mov	r1, r5
 800d410:	4561      	cmp	r1, ip
 800d412:	d30a      	bcc.n	800d42a <__exponent+0x66>
 800d414:	f10d 0209 	add.w	r2, sp, #9
 800d418:	eba2 020e 	sub.w	r2, r2, lr
 800d41c:	4565      	cmp	r5, ip
 800d41e:	bf88      	it	hi
 800d420:	2200      	movhi	r2, #0
 800d422:	4413      	add	r3, r2
 800d424:	1a18      	subs	r0, r3, r0
 800d426:	b003      	add	sp, #12
 800d428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d42a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d42e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d432:	e7ed      	b.n	800d410 <__exponent+0x4c>
 800d434:	2330      	movs	r3, #48	; 0x30
 800d436:	3130      	adds	r1, #48	; 0x30
 800d438:	7083      	strb	r3, [r0, #2]
 800d43a:	70c1      	strb	r1, [r0, #3]
 800d43c:	1d03      	adds	r3, r0, #4
 800d43e:	e7f1      	b.n	800d424 <__exponent+0x60>

0800d440 <_printf_float>:
 800d440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d444:	ed2d 8b02 	vpush	{d8}
 800d448:	b08d      	sub	sp, #52	; 0x34
 800d44a:	460c      	mov	r4, r1
 800d44c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d450:	4616      	mov	r6, r2
 800d452:	461f      	mov	r7, r3
 800d454:	4605      	mov	r5, r0
 800d456:	f003 f9ed 	bl	8010834 <_localeconv_r>
 800d45a:	f8d0 a000 	ldr.w	sl, [r0]
 800d45e:	4650      	mov	r0, sl
 800d460:	f7f2 fed6 	bl	8000210 <strlen>
 800d464:	2300      	movs	r3, #0
 800d466:	930a      	str	r3, [sp, #40]	; 0x28
 800d468:	6823      	ldr	r3, [r4, #0]
 800d46a:	9305      	str	r3, [sp, #20]
 800d46c:	f8d8 3000 	ldr.w	r3, [r8]
 800d470:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d474:	3307      	adds	r3, #7
 800d476:	f023 0307 	bic.w	r3, r3, #7
 800d47a:	f103 0208 	add.w	r2, r3, #8
 800d47e:	f8c8 2000 	str.w	r2, [r8]
 800d482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d486:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d48a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d48e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d492:	9307      	str	r3, [sp, #28]
 800d494:	f8cd 8018 	str.w	r8, [sp, #24]
 800d498:	ee08 0a10 	vmov	s16, r0
 800d49c:	4b9f      	ldr	r3, [pc, #636]	; (800d71c <_printf_float+0x2dc>)
 800d49e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4a6:	f7f3 fb61 	bl	8000b6c <__aeabi_dcmpun>
 800d4aa:	bb88      	cbnz	r0, 800d510 <_printf_float+0xd0>
 800d4ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4b0:	4b9a      	ldr	r3, [pc, #616]	; (800d71c <_printf_float+0x2dc>)
 800d4b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4b6:	f7f3 fb3b 	bl	8000b30 <__aeabi_dcmple>
 800d4ba:	bb48      	cbnz	r0, 800d510 <_printf_float+0xd0>
 800d4bc:	2200      	movs	r2, #0
 800d4be:	2300      	movs	r3, #0
 800d4c0:	4640      	mov	r0, r8
 800d4c2:	4649      	mov	r1, r9
 800d4c4:	f7f3 fb2a 	bl	8000b1c <__aeabi_dcmplt>
 800d4c8:	b110      	cbz	r0, 800d4d0 <_printf_float+0x90>
 800d4ca:	232d      	movs	r3, #45	; 0x2d
 800d4cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4d0:	4b93      	ldr	r3, [pc, #588]	; (800d720 <_printf_float+0x2e0>)
 800d4d2:	4894      	ldr	r0, [pc, #592]	; (800d724 <_printf_float+0x2e4>)
 800d4d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d4d8:	bf94      	ite	ls
 800d4da:	4698      	movls	r8, r3
 800d4dc:	4680      	movhi	r8, r0
 800d4de:	2303      	movs	r3, #3
 800d4e0:	6123      	str	r3, [r4, #16]
 800d4e2:	9b05      	ldr	r3, [sp, #20]
 800d4e4:	f023 0204 	bic.w	r2, r3, #4
 800d4e8:	6022      	str	r2, [r4, #0]
 800d4ea:	f04f 0900 	mov.w	r9, #0
 800d4ee:	9700      	str	r7, [sp, #0]
 800d4f0:	4633      	mov	r3, r6
 800d4f2:	aa0b      	add	r2, sp, #44	; 0x2c
 800d4f4:	4621      	mov	r1, r4
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	f000 f9d8 	bl	800d8ac <_printf_common>
 800d4fc:	3001      	adds	r0, #1
 800d4fe:	f040 8090 	bne.w	800d622 <_printf_float+0x1e2>
 800d502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d506:	b00d      	add	sp, #52	; 0x34
 800d508:	ecbd 8b02 	vpop	{d8}
 800d50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d510:	4642      	mov	r2, r8
 800d512:	464b      	mov	r3, r9
 800d514:	4640      	mov	r0, r8
 800d516:	4649      	mov	r1, r9
 800d518:	f7f3 fb28 	bl	8000b6c <__aeabi_dcmpun>
 800d51c:	b140      	cbz	r0, 800d530 <_printf_float+0xf0>
 800d51e:	464b      	mov	r3, r9
 800d520:	2b00      	cmp	r3, #0
 800d522:	bfbc      	itt	lt
 800d524:	232d      	movlt	r3, #45	; 0x2d
 800d526:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d52a:	487f      	ldr	r0, [pc, #508]	; (800d728 <_printf_float+0x2e8>)
 800d52c:	4b7f      	ldr	r3, [pc, #508]	; (800d72c <_printf_float+0x2ec>)
 800d52e:	e7d1      	b.n	800d4d4 <_printf_float+0x94>
 800d530:	6863      	ldr	r3, [r4, #4]
 800d532:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d536:	9206      	str	r2, [sp, #24]
 800d538:	1c5a      	adds	r2, r3, #1
 800d53a:	d13f      	bne.n	800d5bc <_printf_float+0x17c>
 800d53c:	2306      	movs	r3, #6
 800d53e:	6063      	str	r3, [r4, #4]
 800d540:	9b05      	ldr	r3, [sp, #20]
 800d542:	6861      	ldr	r1, [r4, #4]
 800d544:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d548:	2300      	movs	r3, #0
 800d54a:	9303      	str	r3, [sp, #12]
 800d54c:	ab0a      	add	r3, sp, #40	; 0x28
 800d54e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d552:	ab09      	add	r3, sp, #36	; 0x24
 800d554:	ec49 8b10 	vmov	d0, r8, r9
 800d558:	9300      	str	r3, [sp, #0]
 800d55a:	6022      	str	r2, [r4, #0]
 800d55c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d560:	4628      	mov	r0, r5
 800d562:	f7ff fecd 	bl	800d300 <__cvt>
 800d566:	9b06      	ldr	r3, [sp, #24]
 800d568:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d56a:	2b47      	cmp	r3, #71	; 0x47
 800d56c:	4680      	mov	r8, r0
 800d56e:	d108      	bne.n	800d582 <_printf_float+0x142>
 800d570:	1cc8      	adds	r0, r1, #3
 800d572:	db02      	blt.n	800d57a <_printf_float+0x13a>
 800d574:	6863      	ldr	r3, [r4, #4]
 800d576:	4299      	cmp	r1, r3
 800d578:	dd41      	ble.n	800d5fe <_printf_float+0x1be>
 800d57a:	f1ab 0b02 	sub.w	fp, fp, #2
 800d57e:	fa5f fb8b 	uxtb.w	fp, fp
 800d582:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d586:	d820      	bhi.n	800d5ca <_printf_float+0x18a>
 800d588:	3901      	subs	r1, #1
 800d58a:	465a      	mov	r2, fp
 800d58c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d590:	9109      	str	r1, [sp, #36]	; 0x24
 800d592:	f7ff ff17 	bl	800d3c4 <__exponent>
 800d596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d598:	1813      	adds	r3, r2, r0
 800d59a:	2a01      	cmp	r2, #1
 800d59c:	4681      	mov	r9, r0
 800d59e:	6123      	str	r3, [r4, #16]
 800d5a0:	dc02      	bgt.n	800d5a8 <_printf_float+0x168>
 800d5a2:	6822      	ldr	r2, [r4, #0]
 800d5a4:	07d2      	lsls	r2, r2, #31
 800d5a6:	d501      	bpl.n	800d5ac <_printf_float+0x16c>
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	6123      	str	r3, [r4, #16]
 800d5ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d09c      	beq.n	800d4ee <_printf_float+0xae>
 800d5b4:	232d      	movs	r3, #45	; 0x2d
 800d5b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5ba:	e798      	b.n	800d4ee <_printf_float+0xae>
 800d5bc:	9a06      	ldr	r2, [sp, #24]
 800d5be:	2a47      	cmp	r2, #71	; 0x47
 800d5c0:	d1be      	bne.n	800d540 <_printf_float+0x100>
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1bc      	bne.n	800d540 <_printf_float+0x100>
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e7b9      	b.n	800d53e <_printf_float+0xfe>
 800d5ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d5ce:	d118      	bne.n	800d602 <_printf_float+0x1c2>
 800d5d0:	2900      	cmp	r1, #0
 800d5d2:	6863      	ldr	r3, [r4, #4]
 800d5d4:	dd0b      	ble.n	800d5ee <_printf_float+0x1ae>
 800d5d6:	6121      	str	r1, [r4, #16]
 800d5d8:	b913      	cbnz	r3, 800d5e0 <_printf_float+0x1a0>
 800d5da:	6822      	ldr	r2, [r4, #0]
 800d5dc:	07d0      	lsls	r0, r2, #31
 800d5de:	d502      	bpl.n	800d5e6 <_printf_float+0x1a6>
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	440b      	add	r3, r1
 800d5e4:	6123      	str	r3, [r4, #16]
 800d5e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800d5e8:	f04f 0900 	mov.w	r9, #0
 800d5ec:	e7de      	b.n	800d5ac <_printf_float+0x16c>
 800d5ee:	b913      	cbnz	r3, 800d5f6 <_printf_float+0x1b6>
 800d5f0:	6822      	ldr	r2, [r4, #0]
 800d5f2:	07d2      	lsls	r2, r2, #31
 800d5f4:	d501      	bpl.n	800d5fa <_printf_float+0x1ba>
 800d5f6:	3302      	adds	r3, #2
 800d5f8:	e7f4      	b.n	800d5e4 <_printf_float+0x1a4>
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e7f2      	b.n	800d5e4 <_printf_float+0x1a4>
 800d5fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d604:	4299      	cmp	r1, r3
 800d606:	db05      	blt.n	800d614 <_printf_float+0x1d4>
 800d608:	6823      	ldr	r3, [r4, #0]
 800d60a:	6121      	str	r1, [r4, #16]
 800d60c:	07d8      	lsls	r0, r3, #31
 800d60e:	d5ea      	bpl.n	800d5e6 <_printf_float+0x1a6>
 800d610:	1c4b      	adds	r3, r1, #1
 800d612:	e7e7      	b.n	800d5e4 <_printf_float+0x1a4>
 800d614:	2900      	cmp	r1, #0
 800d616:	bfd4      	ite	le
 800d618:	f1c1 0202 	rsble	r2, r1, #2
 800d61c:	2201      	movgt	r2, #1
 800d61e:	4413      	add	r3, r2
 800d620:	e7e0      	b.n	800d5e4 <_printf_float+0x1a4>
 800d622:	6823      	ldr	r3, [r4, #0]
 800d624:	055a      	lsls	r2, r3, #21
 800d626:	d407      	bmi.n	800d638 <_printf_float+0x1f8>
 800d628:	6923      	ldr	r3, [r4, #16]
 800d62a:	4642      	mov	r2, r8
 800d62c:	4631      	mov	r1, r6
 800d62e:	4628      	mov	r0, r5
 800d630:	47b8      	blx	r7
 800d632:	3001      	adds	r0, #1
 800d634:	d12c      	bne.n	800d690 <_printf_float+0x250>
 800d636:	e764      	b.n	800d502 <_printf_float+0xc2>
 800d638:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d63c:	f240 80e0 	bls.w	800d800 <_printf_float+0x3c0>
 800d640:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d644:	2200      	movs	r2, #0
 800d646:	2300      	movs	r3, #0
 800d648:	f7f3 fa5e 	bl	8000b08 <__aeabi_dcmpeq>
 800d64c:	2800      	cmp	r0, #0
 800d64e:	d034      	beq.n	800d6ba <_printf_float+0x27a>
 800d650:	4a37      	ldr	r2, [pc, #220]	; (800d730 <_printf_float+0x2f0>)
 800d652:	2301      	movs	r3, #1
 800d654:	4631      	mov	r1, r6
 800d656:	4628      	mov	r0, r5
 800d658:	47b8      	blx	r7
 800d65a:	3001      	adds	r0, #1
 800d65c:	f43f af51 	beq.w	800d502 <_printf_float+0xc2>
 800d660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d664:	429a      	cmp	r2, r3
 800d666:	db02      	blt.n	800d66e <_printf_float+0x22e>
 800d668:	6823      	ldr	r3, [r4, #0]
 800d66a:	07d8      	lsls	r0, r3, #31
 800d66c:	d510      	bpl.n	800d690 <_printf_float+0x250>
 800d66e:	ee18 3a10 	vmov	r3, s16
 800d672:	4652      	mov	r2, sl
 800d674:	4631      	mov	r1, r6
 800d676:	4628      	mov	r0, r5
 800d678:	47b8      	blx	r7
 800d67a:	3001      	adds	r0, #1
 800d67c:	f43f af41 	beq.w	800d502 <_printf_float+0xc2>
 800d680:	f04f 0800 	mov.w	r8, #0
 800d684:	f104 091a 	add.w	r9, r4, #26
 800d688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d68a:	3b01      	subs	r3, #1
 800d68c:	4543      	cmp	r3, r8
 800d68e:	dc09      	bgt.n	800d6a4 <_printf_float+0x264>
 800d690:	6823      	ldr	r3, [r4, #0]
 800d692:	079b      	lsls	r3, r3, #30
 800d694:	f100 8105 	bmi.w	800d8a2 <_printf_float+0x462>
 800d698:	68e0      	ldr	r0, [r4, #12]
 800d69a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d69c:	4298      	cmp	r0, r3
 800d69e:	bfb8      	it	lt
 800d6a0:	4618      	movlt	r0, r3
 800d6a2:	e730      	b.n	800d506 <_printf_float+0xc6>
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	464a      	mov	r2, r9
 800d6a8:	4631      	mov	r1, r6
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	47b8      	blx	r7
 800d6ae:	3001      	adds	r0, #1
 800d6b0:	f43f af27 	beq.w	800d502 <_printf_float+0xc2>
 800d6b4:	f108 0801 	add.w	r8, r8, #1
 800d6b8:	e7e6      	b.n	800d688 <_printf_float+0x248>
 800d6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	dc39      	bgt.n	800d734 <_printf_float+0x2f4>
 800d6c0:	4a1b      	ldr	r2, [pc, #108]	; (800d730 <_printf_float+0x2f0>)
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	4631      	mov	r1, r6
 800d6c6:	4628      	mov	r0, r5
 800d6c8:	47b8      	blx	r7
 800d6ca:	3001      	adds	r0, #1
 800d6cc:	f43f af19 	beq.w	800d502 <_printf_float+0xc2>
 800d6d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	d102      	bne.n	800d6de <_printf_float+0x29e>
 800d6d8:	6823      	ldr	r3, [r4, #0]
 800d6da:	07d9      	lsls	r1, r3, #31
 800d6dc:	d5d8      	bpl.n	800d690 <_printf_float+0x250>
 800d6de:	ee18 3a10 	vmov	r3, s16
 800d6e2:	4652      	mov	r2, sl
 800d6e4:	4631      	mov	r1, r6
 800d6e6:	4628      	mov	r0, r5
 800d6e8:	47b8      	blx	r7
 800d6ea:	3001      	adds	r0, #1
 800d6ec:	f43f af09 	beq.w	800d502 <_printf_float+0xc2>
 800d6f0:	f04f 0900 	mov.w	r9, #0
 800d6f4:	f104 0a1a 	add.w	sl, r4, #26
 800d6f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6fa:	425b      	negs	r3, r3
 800d6fc:	454b      	cmp	r3, r9
 800d6fe:	dc01      	bgt.n	800d704 <_printf_float+0x2c4>
 800d700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d702:	e792      	b.n	800d62a <_printf_float+0x1ea>
 800d704:	2301      	movs	r3, #1
 800d706:	4652      	mov	r2, sl
 800d708:	4631      	mov	r1, r6
 800d70a:	4628      	mov	r0, r5
 800d70c:	47b8      	blx	r7
 800d70e:	3001      	adds	r0, #1
 800d710:	f43f aef7 	beq.w	800d502 <_printf_float+0xc2>
 800d714:	f109 0901 	add.w	r9, r9, #1
 800d718:	e7ee      	b.n	800d6f8 <_printf_float+0x2b8>
 800d71a:	bf00      	nop
 800d71c:	7fefffff 	.word	0x7fefffff
 800d720:	08013c7c 	.word	0x08013c7c
 800d724:	08013c80 	.word	0x08013c80
 800d728:	08013c88 	.word	0x08013c88
 800d72c:	08013c84 	.word	0x08013c84
 800d730:	08013c8c 	.word	0x08013c8c
 800d734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d736:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d738:	429a      	cmp	r2, r3
 800d73a:	bfa8      	it	ge
 800d73c:	461a      	movge	r2, r3
 800d73e:	2a00      	cmp	r2, #0
 800d740:	4691      	mov	r9, r2
 800d742:	dc37      	bgt.n	800d7b4 <_printf_float+0x374>
 800d744:	f04f 0b00 	mov.w	fp, #0
 800d748:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d74c:	f104 021a 	add.w	r2, r4, #26
 800d750:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d752:	9305      	str	r3, [sp, #20]
 800d754:	eba3 0309 	sub.w	r3, r3, r9
 800d758:	455b      	cmp	r3, fp
 800d75a:	dc33      	bgt.n	800d7c4 <_printf_float+0x384>
 800d75c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d760:	429a      	cmp	r2, r3
 800d762:	db3b      	blt.n	800d7dc <_printf_float+0x39c>
 800d764:	6823      	ldr	r3, [r4, #0]
 800d766:	07da      	lsls	r2, r3, #31
 800d768:	d438      	bmi.n	800d7dc <_printf_float+0x39c>
 800d76a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d76c:	9b05      	ldr	r3, [sp, #20]
 800d76e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	eba2 0901 	sub.w	r9, r2, r1
 800d776:	4599      	cmp	r9, r3
 800d778:	bfa8      	it	ge
 800d77a:	4699      	movge	r9, r3
 800d77c:	f1b9 0f00 	cmp.w	r9, #0
 800d780:	dc35      	bgt.n	800d7ee <_printf_float+0x3ae>
 800d782:	f04f 0800 	mov.w	r8, #0
 800d786:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d78a:	f104 0a1a 	add.w	sl, r4, #26
 800d78e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d792:	1a9b      	subs	r3, r3, r2
 800d794:	eba3 0309 	sub.w	r3, r3, r9
 800d798:	4543      	cmp	r3, r8
 800d79a:	f77f af79 	ble.w	800d690 <_printf_float+0x250>
 800d79e:	2301      	movs	r3, #1
 800d7a0:	4652      	mov	r2, sl
 800d7a2:	4631      	mov	r1, r6
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	47b8      	blx	r7
 800d7a8:	3001      	adds	r0, #1
 800d7aa:	f43f aeaa 	beq.w	800d502 <_printf_float+0xc2>
 800d7ae:	f108 0801 	add.w	r8, r8, #1
 800d7b2:	e7ec      	b.n	800d78e <_printf_float+0x34e>
 800d7b4:	4613      	mov	r3, r2
 800d7b6:	4631      	mov	r1, r6
 800d7b8:	4642      	mov	r2, r8
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	47b8      	blx	r7
 800d7be:	3001      	adds	r0, #1
 800d7c0:	d1c0      	bne.n	800d744 <_printf_float+0x304>
 800d7c2:	e69e      	b.n	800d502 <_printf_float+0xc2>
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	4631      	mov	r1, r6
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	9205      	str	r2, [sp, #20]
 800d7cc:	47b8      	blx	r7
 800d7ce:	3001      	adds	r0, #1
 800d7d0:	f43f ae97 	beq.w	800d502 <_printf_float+0xc2>
 800d7d4:	9a05      	ldr	r2, [sp, #20]
 800d7d6:	f10b 0b01 	add.w	fp, fp, #1
 800d7da:	e7b9      	b.n	800d750 <_printf_float+0x310>
 800d7dc:	ee18 3a10 	vmov	r3, s16
 800d7e0:	4652      	mov	r2, sl
 800d7e2:	4631      	mov	r1, r6
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	47b8      	blx	r7
 800d7e8:	3001      	adds	r0, #1
 800d7ea:	d1be      	bne.n	800d76a <_printf_float+0x32a>
 800d7ec:	e689      	b.n	800d502 <_printf_float+0xc2>
 800d7ee:	9a05      	ldr	r2, [sp, #20]
 800d7f0:	464b      	mov	r3, r9
 800d7f2:	4442      	add	r2, r8
 800d7f4:	4631      	mov	r1, r6
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	47b8      	blx	r7
 800d7fa:	3001      	adds	r0, #1
 800d7fc:	d1c1      	bne.n	800d782 <_printf_float+0x342>
 800d7fe:	e680      	b.n	800d502 <_printf_float+0xc2>
 800d800:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d802:	2a01      	cmp	r2, #1
 800d804:	dc01      	bgt.n	800d80a <_printf_float+0x3ca>
 800d806:	07db      	lsls	r3, r3, #31
 800d808:	d538      	bpl.n	800d87c <_printf_float+0x43c>
 800d80a:	2301      	movs	r3, #1
 800d80c:	4642      	mov	r2, r8
 800d80e:	4631      	mov	r1, r6
 800d810:	4628      	mov	r0, r5
 800d812:	47b8      	blx	r7
 800d814:	3001      	adds	r0, #1
 800d816:	f43f ae74 	beq.w	800d502 <_printf_float+0xc2>
 800d81a:	ee18 3a10 	vmov	r3, s16
 800d81e:	4652      	mov	r2, sl
 800d820:	4631      	mov	r1, r6
 800d822:	4628      	mov	r0, r5
 800d824:	47b8      	blx	r7
 800d826:	3001      	adds	r0, #1
 800d828:	f43f ae6b 	beq.w	800d502 <_printf_float+0xc2>
 800d82c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d830:	2200      	movs	r2, #0
 800d832:	2300      	movs	r3, #0
 800d834:	f7f3 f968 	bl	8000b08 <__aeabi_dcmpeq>
 800d838:	b9d8      	cbnz	r0, 800d872 <_printf_float+0x432>
 800d83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d83c:	f108 0201 	add.w	r2, r8, #1
 800d840:	3b01      	subs	r3, #1
 800d842:	4631      	mov	r1, r6
 800d844:	4628      	mov	r0, r5
 800d846:	47b8      	blx	r7
 800d848:	3001      	adds	r0, #1
 800d84a:	d10e      	bne.n	800d86a <_printf_float+0x42a>
 800d84c:	e659      	b.n	800d502 <_printf_float+0xc2>
 800d84e:	2301      	movs	r3, #1
 800d850:	4652      	mov	r2, sl
 800d852:	4631      	mov	r1, r6
 800d854:	4628      	mov	r0, r5
 800d856:	47b8      	blx	r7
 800d858:	3001      	adds	r0, #1
 800d85a:	f43f ae52 	beq.w	800d502 <_printf_float+0xc2>
 800d85e:	f108 0801 	add.w	r8, r8, #1
 800d862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d864:	3b01      	subs	r3, #1
 800d866:	4543      	cmp	r3, r8
 800d868:	dcf1      	bgt.n	800d84e <_printf_float+0x40e>
 800d86a:	464b      	mov	r3, r9
 800d86c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d870:	e6dc      	b.n	800d62c <_printf_float+0x1ec>
 800d872:	f04f 0800 	mov.w	r8, #0
 800d876:	f104 0a1a 	add.w	sl, r4, #26
 800d87a:	e7f2      	b.n	800d862 <_printf_float+0x422>
 800d87c:	2301      	movs	r3, #1
 800d87e:	4642      	mov	r2, r8
 800d880:	e7df      	b.n	800d842 <_printf_float+0x402>
 800d882:	2301      	movs	r3, #1
 800d884:	464a      	mov	r2, r9
 800d886:	4631      	mov	r1, r6
 800d888:	4628      	mov	r0, r5
 800d88a:	47b8      	blx	r7
 800d88c:	3001      	adds	r0, #1
 800d88e:	f43f ae38 	beq.w	800d502 <_printf_float+0xc2>
 800d892:	f108 0801 	add.w	r8, r8, #1
 800d896:	68e3      	ldr	r3, [r4, #12]
 800d898:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d89a:	1a5b      	subs	r3, r3, r1
 800d89c:	4543      	cmp	r3, r8
 800d89e:	dcf0      	bgt.n	800d882 <_printf_float+0x442>
 800d8a0:	e6fa      	b.n	800d698 <_printf_float+0x258>
 800d8a2:	f04f 0800 	mov.w	r8, #0
 800d8a6:	f104 0919 	add.w	r9, r4, #25
 800d8aa:	e7f4      	b.n	800d896 <_printf_float+0x456>

0800d8ac <_printf_common>:
 800d8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8b0:	4616      	mov	r6, r2
 800d8b2:	4699      	mov	r9, r3
 800d8b4:	688a      	ldr	r2, [r1, #8]
 800d8b6:	690b      	ldr	r3, [r1, #16]
 800d8b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	bfb8      	it	lt
 800d8c0:	4613      	movlt	r3, r2
 800d8c2:	6033      	str	r3, [r6, #0]
 800d8c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8c8:	4607      	mov	r7, r0
 800d8ca:	460c      	mov	r4, r1
 800d8cc:	b10a      	cbz	r2, 800d8d2 <_printf_common+0x26>
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	6033      	str	r3, [r6, #0]
 800d8d2:	6823      	ldr	r3, [r4, #0]
 800d8d4:	0699      	lsls	r1, r3, #26
 800d8d6:	bf42      	ittt	mi
 800d8d8:	6833      	ldrmi	r3, [r6, #0]
 800d8da:	3302      	addmi	r3, #2
 800d8dc:	6033      	strmi	r3, [r6, #0]
 800d8de:	6825      	ldr	r5, [r4, #0]
 800d8e0:	f015 0506 	ands.w	r5, r5, #6
 800d8e4:	d106      	bne.n	800d8f4 <_printf_common+0x48>
 800d8e6:	f104 0a19 	add.w	sl, r4, #25
 800d8ea:	68e3      	ldr	r3, [r4, #12]
 800d8ec:	6832      	ldr	r2, [r6, #0]
 800d8ee:	1a9b      	subs	r3, r3, r2
 800d8f0:	42ab      	cmp	r3, r5
 800d8f2:	dc26      	bgt.n	800d942 <_printf_common+0x96>
 800d8f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d8f8:	1e13      	subs	r3, r2, #0
 800d8fa:	6822      	ldr	r2, [r4, #0]
 800d8fc:	bf18      	it	ne
 800d8fe:	2301      	movne	r3, #1
 800d900:	0692      	lsls	r2, r2, #26
 800d902:	d42b      	bmi.n	800d95c <_printf_common+0xb0>
 800d904:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d908:	4649      	mov	r1, r9
 800d90a:	4638      	mov	r0, r7
 800d90c:	47c0      	blx	r8
 800d90e:	3001      	adds	r0, #1
 800d910:	d01e      	beq.n	800d950 <_printf_common+0xa4>
 800d912:	6823      	ldr	r3, [r4, #0]
 800d914:	68e5      	ldr	r5, [r4, #12]
 800d916:	6832      	ldr	r2, [r6, #0]
 800d918:	f003 0306 	and.w	r3, r3, #6
 800d91c:	2b04      	cmp	r3, #4
 800d91e:	bf08      	it	eq
 800d920:	1aad      	subeq	r5, r5, r2
 800d922:	68a3      	ldr	r3, [r4, #8]
 800d924:	6922      	ldr	r2, [r4, #16]
 800d926:	bf0c      	ite	eq
 800d928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d92c:	2500      	movne	r5, #0
 800d92e:	4293      	cmp	r3, r2
 800d930:	bfc4      	itt	gt
 800d932:	1a9b      	subgt	r3, r3, r2
 800d934:	18ed      	addgt	r5, r5, r3
 800d936:	2600      	movs	r6, #0
 800d938:	341a      	adds	r4, #26
 800d93a:	42b5      	cmp	r5, r6
 800d93c:	d11a      	bne.n	800d974 <_printf_common+0xc8>
 800d93e:	2000      	movs	r0, #0
 800d940:	e008      	b.n	800d954 <_printf_common+0xa8>
 800d942:	2301      	movs	r3, #1
 800d944:	4652      	mov	r2, sl
 800d946:	4649      	mov	r1, r9
 800d948:	4638      	mov	r0, r7
 800d94a:	47c0      	blx	r8
 800d94c:	3001      	adds	r0, #1
 800d94e:	d103      	bne.n	800d958 <_printf_common+0xac>
 800d950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d958:	3501      	adds	r5, #1
 800d95a:	e7c6      	b.n	800d8ea <_printf_common+0x3e>
 800d95c:	18e1      	adds	r1, r4, r3
 800d95e:	1c5a      	adds	r2, r3, #1
 800d960:	2030      	movs	r0, #48	; 0x30
 800d962:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d966:	4422      	add	r2, r4
 800d968:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d96c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d970:	3302      	adds	r3, #2
 800d972:	e7c7      	b.n	800d904 <_printf_common+0x58>
 800d974:	2301      	movs	r3, #1
 800d976:	4622      	mov	r2, r4
 800d978:	4649      	mov	r1, r9
 800d97a:	4638      	mov	r0, r7
 800d97c:	47c0      	blx	r8
 800d97e:	3001      	adds	r0, #1
 800d980:	d0e6      	beq.n	800d950 <_printf_common+0xa4>
 800d982:	3601      	adds	r6, #1
 800d984:	e7d9      	b.n	800d93a <_printf_common+0x8e>
	...

0800d988 <_printf_i>:
 800d988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d98c:	460c      	mov	r4, r1
 800d98e:	4691      	mov	r9, r2
 800d990:	7e27      	ldrb	r7, [r4, #24]
 800d992:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d994:	2f78      	cmp	r7, #120	; 0x78
 800d996:	4680      	mov	r8, r0
 800d998:	469a      	mov	sl, r3
 800d99a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d99e:	d807      	bhi.n	800d9b0 <_printf_i+0x28>
 800d9a0:	2f62      	cmp	r7, #98	; 0x62
 800d9a2:	d80a      	bhi.n	800d9ba <_printf_i+0x32>
 800d9a4:	2f00      	cmp	r7, #0
 800d9a6:	f000 80d8 	beq.w	800db5a <_printf_i+0x1d2>
 800d9aa:	2f58      	cmp	r7, #88	; 0x58
 800d9ac:	f000 80a3 	beq.w	800daf6 <_printf_i+0x16e>
 800d9b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d9b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d9b8:	e03a      	b.n	800da30 <_printf_i+0xa8>
 800d9ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d9be:	2b15      	cmp	r3, #21
 800d9c0:	d8f6      	bhi.n	800d9b0 <_printf_i+0x28>
 800d9c2:	a001      	add	r0, pc, #4	; (adr r0, 800d9c8 <_printf_i+0x40>)
 800d9c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d9c8:	0800da21 	.word	0x0800da21
 800d9cc:	0800da35 	.word	0x0800da35
 800d9d0:	0800d9b1 	.word	0x0800d9b1
 800d9d4:	0800d9b1 	.word	0x0800d9b1
 800d9d8:	0800d9b1 	.word	0x0800d9b1
 800d9dc:	0800d9b1 	.word	0x0800d9b1
 800d9e0:	0800da35 	.word	0x0800da35
 800d9e4:	0800d9b1 	.word	0x0800d9b1
 800d9e8:	0800d9b1 	.word	0x0800d9b1
 800d9ec:	0800d9b1 	.word	0x0800d9b1
 800d9f0:	0800d9b1 	.word	0x0800d9b1
 800d9f4:	0800db41 	.word	0x0800db41
 800d9f8:	0800da65 	.word	0x0800da65
 800d9fc:	0800db23 	.word	0x0800db23
 800da00:	0800d9b1 	.word	0x0800d9b1
 800da04:	0800d9b1 	.word	0x0800d9b1
 800da08:	0800db63 	.word	0x0800db63
 800da0c:	0800d9b1 	.word	0x0800d9b1
 800da10:	0800da65 	.word	0x0800da65
 800da14:	0800d9b1 	.word	0x0800d9b1
 800da18:	0800d9b1 	.word	0x0800d9b1
 800da1c:	0800db2b 	.word	0x0800db2b
 800da20:	680b      	ldr	r3, [r1, #0]
 800da22:	1d1a      	adds	r2, r3, #4
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	600a      	str	r2, [r1, #0]
 800da28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800da2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da30:	2301      	movs	r3, #1
 800da32:	e0a3      	b.n	800db7c <_printf_i+0x1f4>
 800da34:	6825      	ldr	r5, [r4, #0]
 800da36:	6808      	ldr	r0, [r1, #0]
 800da38:	062e      	lsls	r6, r5, #24
 800da3a:	f100 0304 	add.w	r3, r0, #4
 800da3e:	d50a      	bpl.n	800da56 <_printf_i+0xce>
 800da40:	6805      	ldr	r5, [r0, #0]
 800da42:	600b      	str	r3, [r1, #0]
 800da44:	2d00      	cmp	r5, #0
 800da46:	da03      	bge.n	800da50 <_printf_i+0xc8>
 800da48:	232d      	movs	r3, #45	; 0x2d
 800da4a:	426d      	negs	r5, r5
 800da4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da50:	485e      	ldr	r0, [pc, #376]	; (800dbcc <_printf_i+0x244>)
 800da52:	230a      	movs	r3, #10
 800da54:	e019      	b.n	800da8a <_printf_i+0x102>
 800da56:	f015 0f40 	tst.w	r5, #64	; 0x40
 800da5a:	6805      	ldr	r5, [r0, #0]
 800da5c:	600b      	str	r3, [r1, #0]
 800da5e:	bf18      	it	ne
 800da60:	b22d      	sxthne	r5, r5
 800da62:	e7ef      	b.n	800da44 <_printf_i+0xbc>
 800da64:	680b      	ldr	r3, [r1, #0]
 800da66:	6825      	ldr	r5, [r4, #0]
 800da68:	1d18      	adds	r0, r3, #4
 800da6a:	6008      	str	r0, [r1, #0]
 800da6c:	0628      	lsls	r0, r5, #24
 800da6e:	d501      	bpl.n	800da74 <_printf_i+0xec>
 800da70:	681d      	ldr	r5, [r3, #0]
 800da72:	e002      	b.n	800da7a <_printf_i+0xf2>
 800da74:	0669      	lsls	r1, r5, #25
 800da76:	d5fb      	bpl.n	800da70 <_printf_i+0xe8>
 800da78:	881d      	ldrh	r5, [r3, #0]
 800da7a:	4854      	ldr	r0, [pc, #336]	; (800dbcc <_printf_i+0x244>)
 800da7c:	2f6f      	cmp	r7, #111	; 0x6f
 800da7e:	bf0c      	ite	eq
 800da80:	2308      	moveq	r3, #8
 800da82:	230a      	movne	r3, #10
 800da84:	2100      	movs	r1, #0
 800da86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da8a:	6866      	ldr	r6, [r4, #4]
 800da8c:	60a6      	str	r6, [r4, #8]
 800da8e:	2e00      	cmp	r6, #0
 800da90:	bfa2      	ittt	ge
 800da92:	6821      	ldrge	r1, [r4, #0]
 800da94:	f021 0104 	bicge.w	r1, r1, #4
 800da98:	6021      	strge	r1, [r4, #0]
 800da9a:	b90d      	cbnz	r5, 800daa0 <_printf_i+0x118>
 800da9c:	2e00      	cmp	r6, #0
 800da9e:	d04d      	beq.n	800db3c <_printf_i+0x1b4>
 800daa0:	4616      	mov	r6, r2
 800daa2:	fbb5 f1f3 	udiv	r1, r5, r3
 800daa6:	fb03 5711 	mls	r7, r3, r1, r5
 800daaa:	5dc7      	ldrb	r7, [r0, r7]
 800daac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dab0:	462f      	mov	r7, r5
 800dab2:	42bb      	cmp	r3, r7
 800dab4:	460d      	mov	r5, r1
 800dab6:	d9f4      	bls.n	800daa2 <_printf_i+0x11a>
 800dab8:	2b08      	cmp	r3, #8
 800daba:	d10b      	bne.n	800dad4 <_printf_i+0x14c>
 800dabc:	6823      	ldr	r3, [r4, #0]
 800dabe:	07df      	lsls	r7, r3, #31
 800dac0:	d508      	bpl.n	800dad4 <_printf_i+0x14c>
 800dac2:	6923      	ldr	r3, [r4, #16]
 800dac4:	6861      	ldr	r1, [r4, #4]
 800dac6:	4299      	cmp	r1, r3
 800dac8:	bfde      	ittt	le
 800daca:	2330      	movle	r3, #48	; 0x30
 800dacc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dad0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800dad4:	1b92      	subs	r2, r2, r6
 800dad6:	6122      	str	r2, [r4, #16]
 800dad8:	f8cd a000 	str.w	sl, [sp]
 800dadc:	464b      	mov	r3, r9
 800dade:	aa03      	add	r2, sp, #12
 800dae0:	4621      	mov	r1, r4
 800dae2:	4640      	mov	r0, r8
 800dae4:	f7ff fee2 	bl	800d8ac <_printf_common>
 800dae8:	3001      	adds	r0, #1
 800daea:	d14c      	bne.n	800db86 <_printf_i+0x1fe>
 800daec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800daf0:	b004      	add	sp, #16
 800daf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daf6:	4835      	ldr	r0, [pc, #212]	; (800dbcc <_printf_i+0x244>)
 800daf8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dafc:	6823      	ldr	r3, [r4, #0]
 800dafe:	680e      	ldr	r6, [r1, #0]
 800db00:	061f      	lsls	r7, r3, #24
 800db02:	f856 5b04 	ldr.w	r5, [r6], #4
 800db06:	600e      	str	r6, [r1, #0]
 800db08:	d514      	bpl.n	800db34 <_printf_i+0x1ac>
 800db0a:	07d9      	lsls	r1, r3, #31
 800db0c:	bf44      	itt	mi
 800db0e:	f043 0320 	orrmi.w	r3, r3, #32
 800db12:	6023      	strmi	r3, [r4, #0]
 800db14:	b91d      	cbnz	r5, 800db1e <_printf_i+0x196>
 800db16:	6823      	ldr	r3, [r4, #0]
 800db18:	f023 0320 	bic.w	r3, r3, #32
 800db1c:	6023      	str	r3, [r4, #0]
 800db1e:	2310      	movs	r3, #16
 800db20:	e7b0      	b.n	800da84 <_printf_i+0xfc>
 800db22:	6823      	ldr	r3, [r4, #0]
 800db24:	f043 0320 	orr.w	r3, r3, #32
 800db28:	6023      	str	r3, [r4, #0]
 800db2a:	2378      	movs	r3, #120	; 0x78
 800db2c:	4828      	ldr	r0, [pc, #160]	; (800dbd0 <_printf_i+0x248>)
 800db2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db32:	e7e3      	b.n	800dafc <_printf_i+0x174>
 800db34:	065e      	lsls	r6, r3, #25
 800db36:	bf48      	it	mi
 800db38:	b2ad      	uxthmi	r5, r5
 800db3a:	e7e6      	b.n	800db0a <_printf_i+0x182>
 800db3c:	4616      	mov	r6, r2
 800db3e:	e7bb      	b.n	800dab8 <_printf_i+0x130>
 800db40:	680b      	ldr	r3, [r1, #0]
 800db42:	6826      	ldr	r6, [r4, #0]
 800db44:	6960      	ldr	r0, [r4, #20]
 800db46:	1d1d      	adds	r5, r3, #4
 800db48:	600d      	str	r5, [r1, #0]
 800db4a:	0635      	lsls	r5, r6, #24
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	d501      	bpl.n	800db54 <_printf_i+0x1cc>
 800db50:	6018      	str	r0, [r3, #0]
 800db52:	e002      	b.n	800db5a <_printf_i+0x1d2>
 800db54:	0671      	lsls	r1, r6, #25
 800db56:	d5fb      	bpl.n	800db50 <_printf_i+0x1c8>
 800db58:	8018      	strh	r0, [r3, #0]
 800db5a:	2300      	movs	r3, #0
 800db5c:	6123      	str	r3, [r4, #16]
 800db5e:	4616      	mov	r6, r2
 800db60:	e7ba      	b.n	800dad8 <_printf_i+0x150>
 800db62:	680b      	ldr	r3, [r1, #0]
 800db64:	1d1a      	adds	r2, r3, #4
 800db66:	600a      	str	r2, [r1, #0]
 800db68:	681e      	ldr	r6, [r3, #0]
 800db6a:	6862      	ldr	r2, [r4, #4]
 800db6c:	2100      	movs	r1, #0
 800db6e:	4630      	mov	r0, r6
 800db70:	f7f2 fb56 	bl	8000220 <memchr>
 800db74:	b108      	cbz	r0, 800db7a <_printf_i+0x1f2>
 800db76:	1b80      	subs	r0, r0, r6
 800db78:	6060      	str	r0, [r4, #4]
 800db7a:	6863      	ldr	r3, [r4, #4]
 800db7c:	6123      	str	r3, [r4, #16]
 800db7e:	2300      	movs	r3, #0
 800db80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db84:	e7a8      	b.n	800dad8 <_printf_i+0x150>
 800db86:	6923      	ldr	r3, [r4, #16]
 800db88:	4632      	mov	r2, r6
 800db8a:	4649      	mov	r1, r9
 800db8c:	4640      	mov	r0, r8
 800db8e:	47d0      	blx	sl
 800db90:	3001      	adds	r0, #1
 800db92:	d0ab      	beq.n	800daec <_printf_i+0x164>
 800db94:	6823      	ldr	r3, [r4, #0]
 800db96:	079b      	lsls	r3, r3, #30
 800db98:	d413      	bmi.n	800dbc2 <_printf_i+0x23a>
 800db9a:	68e0      	ldr	r0, [r4, #12]
 800db9c:	9b03      	ldr	r3, [sp, #12]
 800db9e:	4298      	cmp	r0, r3
 800dba0:	bfb8      	it	lt
 800dba2:	4618      	movlt	r0, r3
 800dba4:	e7a4      	b.n	800daf0 <_printf_i+0x168>
 800dba6:	2301      	movs	r3, #1
 800dba8:	4632      	mov	r2, r6
 800dbaa:	4649      	mov	r1, r9
 800dbac:	4640      	mov	r0, r8
 800dbae:	47d0      	blx	sl
 800dbb0:	3001      	adds	r0, #1
 800dbb2:	d09b      	beq.n	800daec <_printf_i+0x164>
 800dbb4:	3501      	adds	r5, #1
 800dbb6:	68e3      	ldr	r3, [r4, #12]
 800dbb8:	9903      	ldr	r1, [sp, #12]
 800dbba:	1a5b      	subs	r3, r3, r1
 800dbbc:	42ab      	cmp	r3, r5
 800dbbe:	dcf2      	bgt.n	800dba6 <_printf_i+0x21e>
 800dbc0:	e7eb      	b.n	800db9a <_printf_i+0x212>
 800dbc2:	2500      	movs	r5, #0
 800dbc4:	f104 0619 	add.w	r6, r4, #25
 800dbc8:	e7f5      	b.n	800dbb6 <_printf_i+0x22e>
 800dbca:	bf00      	nop
 800dbcc:	08013c8e 	.word	0x08013c8e
 800dbd0:	08013c9f 	.word	0x08013c9f

0800dbd4 <_scanf_float>:
 800dbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd8:	b087      	sub	sp, #28
 800dbda:	4617      	mov	r7, r2
 800dbdc:	9303      	str	r3, [sp, #12]
 800dbde:	688b      	ldr	r3, [r1, #8]
 800dbe0:	1e5a      	subs	r2, r3, #1
 800dbe2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dbe6:	bf83      	ittte	hi
 800dbe8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dbec:	195b      	addhi	r3, r3, r5
 800dbee:	9302      	strhi	r3, [sp, #8]
 800dbf0:	2300      	movls	r3, #0
 800dbf2:	bf86      	itte	hi
 800dbf4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dbf8:	608b      	strhi	r3, [r1, #8]
 800dbfa:	9302      	strls	r3, [sp, #8]
 800dbfc:	680b      	ldr	r3, [r1, #0]
 800dbfe:	468b      	mov	fp, r1
 800dc00:	2500      	movs	r5, #0
 800dc02:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800dc06:	f84b 3b1c 	str.w	r3, [fp], #28
 800dc0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dc0e:	4680      	mov	r8, r0
 800dc10:	460c      	mov	r4, r1
 800dc12:	465e      	mov	r6, fp
 800dc14:	46aa      	mov	sl, r5
 800dc16:	46a9      	mov	r9, r5
 800dc18:	9501      	str	r5, [sp, #4]
 800dc1a:	68a2      	ldr	r2, [r4, #8]
 800dc1c:	b152      	cbz	r2, 800dc34 <_scanf_float+0x60>
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	2b4e      	cmp	r3, #78	; 0x4e
 800dc24:	d864      	bhi.n	800dcf0 <_scanf_float+0x11c>
 800dc26:	2b40      	cmp	r3, #64	; 0x40
 800dc28:	d83c      	bhi.n	800dca4 <_scanf_float+0xd0>
 800dc2a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800dc2e:	b2c8      	uxtb	r0, r1
 800dc30:	280e      	cmp	r0, #14
 800dc32:	d93a      	bls.n	800dcaa <_scanf_float+0xd6>
 800dc34:	f1b9 0f00 	cmp.w	r9, #0
 800dc38:	d003      	beq.n	800dc42 <_scanf_float+0x6e>
 800dc3a:	6823      	ldr	r3, [r4, #0]
 800dc3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc40:	6023      	str	r3, [r4, #0]
 800dc42:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800dc46:	f1ba 0f01 	cmp.w	sl, #1
 800dc4a:	f200 8113 	bhi.w	800de74 <_scanf_float+0x2a0>
 800dc4e:	455e      	cmp	r6, fp
 800dc50:	f200 8105 	bhi.w	800de5e <_scanf_float+0x28a>
 800dc54:	2501      	movs	r5, #1
 800dc56:	4628      	mov	r0, r5
 800dc58:	b007      	add	sp, #28
 800dc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc5e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800dc62:	2a0d      	cmp	r2, #13
 800dc64:	d8e6      	bhi.n	800dc34 <_scanf_float+0x60>
 800dc66:	a101      	add	r1, pc, #4	; (adr r1, 800dc6c <_scanf_float+0x98>)
 800dc68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dc6c:	0800ddab 	.word	0x0800ddab
 800dc70:	0800dc35 	.word	0x0800dc35
 800dc74:	0800dc35 	.word	0x0800dc35
 800dc78:	0800dc35 	.word	0x0800dc35
 800dc7c:	0800de0b 	.word	0x0800de0b
 800dc80:	0800dde3 	.word	0x0800dde3
 800dc84:	0800dc35 	.word	0x0800dc35
 800dc88:	0800dc35 	.word	0x0800dc35
 800dc8c:	0800ddb9 	.word	0x0800ddb9
 800dc90:	0800dc35 	.word	0x0800dc35
 800dc94:	0800dc35 	.word	0x0800dc35
 800dc98:	0800dc35 	.word	0x0800dc35
 800dc9c:	0800dc35 	.word	0x0800dc35
 800dca0:	0800dd71 	.word	0x0800dd71
 800dca4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800dca8:	e7db      	b.n	800dc62 <_scanf_float+0x8e>
 800dcaa:	290e      	cmp	r1, #14
 800dcac:	d8c2      	bhi.n	800dc34 <_scanf_float+0x60>
 800dcae:	a001      	add	r0, pc, #4	; (adr r0, 800dcb4 <_scanf_float+0xe0>)
 800dcb0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dcb4:	0800dd63 	.word	0x0800dd63
 800dcb8:	0800dc35 	.word	0x0800dc35
 800dcbc:	0800dd63 	.word	0x0800dd63
 800dcc0:	0800ddf7 	.word	0x0800ddf7
 800dcc4:	0800dc35 	.word	0x0800dc35
 800dcc8:	0800dd11 	.word	0x0800dd11
 800dccc:	0800dd4d 	.word	0x0800dd4d
 800dcd0:	0800dd4d 	.word	0x0800dd4d
 800dcd4:	0800dd4d 	.word	0x0800dd4d
 800dcd8:	0800dd4d 	.word	0x0800dd4d
 800dcdc:	0800dd4d 	.word	0x0800dd4d
 800dce0:	0800dd4d 	.word	0x0800dd4d
 800dce4:	0800dd4d 	.word	0x0800dd4d
 800dce8:	0800dd4d 	.word	0x0800dd4d
 800dcec:	0800dd4d 	.word	0x0800dd4d
 800dcf0:	2b6e      	cmp	r3, #110	; 0x6e
 800dcf2:	d809      	bhi.n	800dd08 <_scanf_float+0x134>
 800dcf4:	2b60      	cmp	r3, #96	; 0x60
 800dcf6:	d8b2      	bhi.n	800dc5e <_scanf_float+0x8a>
 800dcf8:	2b54      	cmp	r3, #84	; 0x54
 800dcfa:	d077      	beq.n	800ddec <_scanf_float+0x218>
 800dcfc:	2b59      	cmp	r3, #89	; 0x59
 800dcfe:	d199      	bne.n	800dc34 <_scanf_float+0x60>
 800dd00:	2d07      	cmp	r5, #7
 800dd02:	d197      	bne.n	800dc34 <_scanf_float+0x60>
 800dd04:	2508      	movs	r5, #8
 800dd06:	e029      	b.n	800dd5c <_scanf_float+0x188>
 800dd08:	2b74      	cmp	r3, #116	; 0x74
 800dd0a:	d06f      	beq.n	800ddec <_scanf_float+0x218>
 800dd0c:	2b79      	cmp	r3, #121	; 0x79
 800dd0e:	e7f6      	b.n	800dcfe <_scanf_float+0x12a>
 800dd10:	6821      	ldr	r1, [r4, #0]
 800dd12:	05c8      	lsls	r0, r1, #23
 800dd14:	d51a      	bpl.n	800dd4c <_scanf_float+0x178>
 800dd16:	9b02      	ldr	r3, [sp, #8]
 800dd18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800dd1c:	6021      	str	r1, [r4, #0]
 800dd1e:	f109 0901 	add.w	r9, r9, #1
 800dd22:	b11b      	cbz	r3, 800dd2c <_scanf_float+0x158>
 800dd24:	3b01      	subs	r3, #1
 800dd26:	3201      	adds	r2, #1
 800dd28:	9302      	str	r3, [sp, #8]
 800dd2a:	60a2      	str	r2, [r4, #8]
 800dd2c:	68a3      	ldr	r3, [r4, #8]
 800dd2e:	3b01      	subs	r3, #1
 800dd30:	60a3      	str	r3, [r4, #8]
 800dd32:	6923      	ldr	r3, [r4, #16]
 800dd34:	3301      	adds	r3, #1
 800dd36:	6123      	str	r3, [r4, #16]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	3b01      	subs	r3, #1
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	607b      	str	r3, [r7, #4]
 800dd40:	f340 8084 	ble.w	800de4c <_scanf_float+0x278>
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	3301      	adds	r3, #1
 800dd48:	603b      	str	r3, [r7, #0]
 800dd4a:	e766      	b.n	800dc1a <_scanf_float+0x46>
 800dd4c:	eb1a 0f05 	cmn.w	sl, r5
 800dd50:	f47f af70 	bne.w	800dc34 <_scanf_float+0x60>
 800dd54:	6822      	ldr	r2, [r4, #0]
 800dd56:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800dd5a:	6022      	str	r2, [r4, #0]
 800dd5c:	f806 3b01 	strb.w	r3, [r6], #1
 800dd60:	e7e4      	b.n	800dd2c <_scanf_float+0x158>
 800dd62:	6822      	ldr	r2, [r4, #0]
 800dd64:	0610      	lsls	r0, r2, #24
 800dd66:	f57f af65 	bpl.w	800dc34 <_scanf_float+0x60>
 800dd6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd6e:	e7f4      	b.n	800dd5a <_scanf_float+0x186>
 800dd70:	f1ba 0f00 	cmp.w	sl, #0
 800dd74:	d10e      	bne.n	800dd94 <_scanf_float+0x1c0>
 800dd76:	f1b9 0f00 	cmp.w	r9, #0
 800dd7a:	d10e      	bne.n	800dd9a <_scanf_float+0x1c6>
 800dd7c:	6822      	ldr	r2, [r4, #0]
 800dd7e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dd82:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dd86:	d108      	bne.n	800dd9a <_scanf_float+0x1c6>
 800dd88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dd8c:	6022      	str	r2, [r4, #0]
 800dd8e:	f04f 0a01 	mov.w	sl, #1
 800dd92:	e7e3      	b.n	800dd5c <_scanf_float+0x188>
 800dd94:	f1ba 0f02 	cmp.w	sl, #2
 800dd98:	d055      	beq.n	800de46 <_scanf_float+0x272>
 800dd9a:	2d01      	cmp	r5, #1
 800dd9c:	d002      	beq.n	800dda4 <_scanf_float+0x1d0>
 800dd9e:	2d04      	cmp	r5, #4
 800dda0:	f47f af48 	bne.w	800dc34 <_scanf_float+0x60>
 800dda4:	3501      	adds	r5, #1
 800dda6:	b2ed      	uxtb	r5, r5
 800dda8:	e7d8      	b.n	800dd5c <_scanf_float+0x188>
 800ddaa:	f1ba 0f01 	cmp.w	sl, #1
 800ddae:	f47f af41 	bne.w	800dc34 <_scanf_float+0x60>
 800ddb2:	f04f 0a02 	mov.w	sl, #2
 800ddb6:	e7d1      	b.n	800dd5c <_scanf_float+0x188>
 800ddb8:	b97d      	cbnz	r5, 800ddda <_scanf_float+0x206>
 800ddba:	f1b9 0f00 	cmp.w	r9, #0
 800ddbe:	f47f af3c 	bne.w	800dc3a <_scanf_float+0x66>
 800ddc2:	6822      	ldr	r2, [r4, #0]
 800ddc4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ddc8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ddcc:	f47f af39 	bne.w	800dc42 <_scanf_float+0x6e>
 800ddd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ddd4:	6022      	str	r2, [r4, #0]
 800ddd6:	2501      	movs	r5, #1
 800ddd8:	e7c0      	b.n	800dd5c <_scanf_float+0x188>
 800ddda:	2d03      	cmp	r5, #3
 800dddc:	d0e2      	beq.n	800dda4 <_scanf_float+0x1d0>
 800ddde:	2d05      	cmp	r5, #5
 800dde0:	e7de      	b.n	800dda0 <_scanf_float+0x1cc>
 800dde2:	2d02      	cmp	r5, #2
 800dde4:	f47f af26 	bne.w	800dc34 <_scanf_float+0x60>
 800dde8:	2503      	movs	r5, #3
 800ddea:	e7b7      	b.n	800dd5c <_scanf_float+0x188>
 800ddec:	2d06      	cmp	r5, #6
 800ddee:	f47f af21 	bne.w	800dc34 <_scanf_float+0x60>
 800ddf2:	2507      	movs	r5, #7
 800ddf4:	e7b2      	b.n	800dd5c <_scanf_float+0x188>
 800ddf6:	6822      	ldr	r2, [r4, #0]
 800ddf8:	0591      	lsls	r1, r2, #22
 800ddfa:	f57f af1b 	bpl.w	800dc34 <_scanf_float+0x60>
 800ddfe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800de02:	6022      	str	r2, [r4, #0]
 800de04:	f8cd 9004 	str.w	r9, [sp, #4]
 800de08:	e7a8      	b.n	800dd5c <_scanf_float+0x188>
 800de0a:	6822      	ldr	r2, [r4, #0]
 800de0c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800de10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800de14:	d006      	beq.n	800de24 <_scanf_float+0x250>
 800de16:	0550      	lsls	r0, r2, #21
 800de18:	f57f af0c 	bpl.w	800dc34 <_scanf_float+0x60>
 800de1c:	f1b9 0f00 	cmp.w	r9, #0
 800de20:	f43f af0f 	beq.w	800dc42 <_scanf_float+0x6e>
 800de24:	0591      	lsls	r1, r2, #22
 800de26:	bf58      	it	pl
 800de28:	9901      	ldrpl	r1, [sp, #4]
 800de2a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800de2e:	bf58      	it	pl
 800de30:	eba9 0101 	subpl.w	r1, r9, r1
 800de34:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800de38:	bf58      	it	pl
 800de3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800de3e:	6022      	str	r2, [r4, #0]
 800de40:	f04f 0900 	mov.w	r9, #0
 800de44:	e78a      	b.n	800dd5c <_scanf_float+0x188>
 800de46:	f04f 0a03 	mov.w	sl, #3
 800de4a:	e787      	b.n	800dd5c <_scanf_float+0x188>
 800de4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800de50:	4639      	mov	r1, r7
 800de52:	4640      	mov	r0, r8
 800de54:	4798      	blx	r3
 800de56:	2800      	cmp	r0, #0
 800de58:	f43f aedf 	beq.w	800dc1a <_scanf_float+0x46>
 800de5c:	e6ea      	b.n	800dc34 <_scanf_float+0x60>
 800de5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800de62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800de66:	463a      	mov	r2, r7
 800de68:	4640      	mov	r0, r8
 800de6a:	4798      	blx	r3
 800de6c:	6923      	ldr	r3, [r4, #16]
 800de6e:	3b01      	subs	r3, #1
 800de70:	6123      	str	r3, [r4, #16]
 800de72:	e6ec      	b.n	800dc4e <_scanf_float+0x7a>
 800de74:	1e6b      	subs	r3, r5, #1
 800de76:	2b06      	cmp	r3, #6
 800de78:	d825      	bhi.n	800dec6 <_scanf_float+0x2f2>
 800de7a:	2d02      	cmp	r5, #2
 800de7c:	d836      	bhi.n	800deec <_scanf_float+0x318>
 800de7e:	455e      	cmp	r6, fp
 800de80:	f67f aee8 	bls.w	800dc54 <_scanf_float+0x80>
 800de84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800de88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800de8c:	463a      	mov	r2, r7
 800de8e:	4640      	mov	r0, r8
 800de90:	4798      	blx	r3
 800de92:	6923      	ldr	r3, [r4, #16]
 800de94:	3b01      	subs	r3, #1
 800de96:	6123      	str	r3, [r4, #16]
 800de98:	e7f1      	b.n	800de7e <_scanf_float+0x2aa>
 800de9a:	9802      	ldr	r0, [sp, #8]
 800de9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dea0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800dea4:	9002      	str	r0, [sp, #8]
 800dea6:	463a      	mov	r2, r7
 800dea8:	4640      	mov	r0, r8
 800deaa:	4798      	blx	r3
 800deac:	6923      	ldr	r3, [r4, #16]
 800deae:	3b01      	subs	r3, #1
 800deb0:	6123      	str	r3, [r4, #16]
 800deb2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800deb6:	fa5f fa8a 	uxtb.w	sl, sl
 800deba:	f1ba 0f02 	cmp.w	sl, #2
 800debe:	d1ec      	bne.n	800de9a <_scanf_float+0x2c6>
 800dec0:	3d03      	subs	r5, #3
 800dec2:	b2ed      	uxtb	r5, r5
 800dec4:	1b76      	subs	r6, r6, r5
 800dec6:	6823      	ldr	r3, [r4, #0]
 800dec8:	05da      	lsls	r2, r3, #23
 800deca:	d52f      	bpl.n	800df2c <_scanf_float+0x358>
 800decc:	055b      	lsls	r3, r3, #21
 800dece:	d510      	bpl.n	800def2 <_scanf_float+0x31e>
 800ded0:	455e      	cmp	r6, fp
 800ded2:	f67f aebf 	bls.w	800dc54 <_scanf_float+0x80>
 800ded6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800deda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dede:	463a      	mov	r2, r7
 800dee0:	4640      	mov	r0, r8
 800dee2:	4798      	blx	r3
 800dee4:	6923      	ldr	r3, [r4, #16]
 800dee6:	3b01      	subs	r3, #1
 800dee8:	6123      	str	r3, [r4, #16]
 800deea:	e7f1      	b.n	800ded0 <_scanf_float+0x2fc>
 800deec:	46aa      	mov	sl, r5
 800deee:	9602      	str	r6, [sp, #8]
 800def0:	e7df      	b.n	800deb2 <_scanf_float+0x2de>
 800def2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800def6:	6923      	ldr	r3, [r4, #16]
 800def8:	2965      	cmp	r1, #101	; 0x65
 800defa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800defe:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800df02:	6123      	str	r3, [r4, #16]
 800df04:	d00c      	beq.n	800df20 <_scanf_float+0x34c>
 800df06:	2945      	cmp	r1, #69	; 0x45
 800df08:	d00a      	beq.n	800df20 <_scanf_float+0x34c>
 800df0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800df0e:	463a      	mov	r2, r7
 800df10:	4640      	mov	r0, r8
 800df12:	4798      	blx	r3
 800df14:	6923      	ldr	r3, [r4, #16]
 800df16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800df1a:	3b01      	subs	r3, #1
 800df1c:	1eb5      	subs	r5, r6, #2
 800df1e:	6123      	str	r3, [r4, #16]
 800df20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800df24:	463a      	mov	r2, r7
 800df26:	4640      	mov	r0, r8
 800df28:	4798      	blx	r3
 800df2a:	462e      	mov	r6, r5
 800df2c:	6825      	ldr	r5, [r4, #0]
 800df2e:	f015 0510 	ands.w	r5, r5, #16
 800df32:	d158      	bne.n	800dfe6 <_scanf_float+0x412>
 800df34:	7035      	strb	r5, [r6, #0]
 800df36:	6823      	ldr	r3, [r4, #0]
 800df38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800df3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df40:	d11c      	bne.n	800df7c <_scanf_float+0x3a8>
 800df42:	9b01      	ldr	r3, [sp, #4]
 800df44:	454b      	cmp	r3, r9
 800df46:	eba3 0209 	sub.w	r2, r3, r9
 800df4a:	d124      	bne.n	800df96 <_scanf_float+0x3c2>
 800df4c:	2200      	movs	r2, #0
 800df4e:	4659      	mov	r1, fp
 800df50:	4640      	mov	r0, r8
 800df52:	f000 ff83 	bl	800ee5c <_strtod_r>
 800df56:	9b03      	ldr	r3, [sp, #12]
 800df58:	6821      	ldr	r1, [r4, #0]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f011 0f02 	tst.w	r1, #2
 800df60:	ec57 6b10 	vmov	r6, r7, d0
 800df64:	f103 0204 	add.w	r2, r3, #4
 800df68:	d020      	beq.n	800dfac <_scanf_float+0x3d8>
 800df6a:	9903      	ldr	r1, [sp, #12]
 800df6c:	600a      	str	r2, [r1, #0]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	e9c3 6700 	strd	r6, r7, [r3]
 800df74:	68e3      	ldr	r3, [r4, #12]
 800df76:	3301      	adds	r3, #1
 800df78:	60e3      	str	r3, [r4, #12]
 800df7a:	e66c      	b.n	800dc56 <_scanf_float+0x82>
 800df7c:	9b04      	ldr	r3, [sp, #16]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d0e4      	beq.n	800df4c <_scanf_float+0x378>
 800df82:	9905      	ldr	r1, [sp, #20]
 800df84:	230a      	movs	r3, #10
 800df86:	462a      	mov	r2, r5
 800df88:	3101      	adds	r1, #1
 800df8a:	4640      	mov	r0, r8
 800df8c:	f000 fff0 	bl	800ef70 <_strtol_r>
 800df90:	9b04      	ldr	r3, [sp, #16]
 800df92:	9e05      	ldr	r6, [sp, #20]
 800df94:	1ac2      	subs	r2, r0, r3
 800df96:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800df9a:	429e      	cmp	r6, r3
 800df9c:	bf28      	it	cs
 800df9e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800dfa2:	4912      	ldr	r1, [pc, #72]	; (800dfec <_scanf_float+0x418>)
 800dfa4:	4630      	mov	r0, r6
 800dfa6:	f000 f901 	bl	800e1ac <siprintf>
 800dfaa:	e7cf      	b.n	800df4c <_scanf_float+0x378>
 800dfac:	f011 0f04 	tst.w	r1, #4
 800dfb0:	9903      	ldr	r1, [sp, #12]
 800dfb2:	600a      	str	r2, [r1, #0]
 800dfb4:	d1db      	bne.n	800df6e <_scanf_float+0x39a>
 800dfb6:	f8d3 8000 	ldr.w	r8, [r3]
 800dfba:	ee10 2a10 	vmov	r2, s0
 800dfbe:	ee10 0a10 	vmov	r0, s0
 800dfc2:	463b      	mov	r3, r7
 800dfc4:	4639      	mov	r1, r7
 800dfc6:	f7f2 fdd1 	bl	8000b6c <__aeabi_dcmpun>
 800dfca:	b128      	cbz	r0, 800dfd8 <_scanf_float+0x404>
 800dfcc:	4808      	ldr	r0, [pc, #32]	; (800dff0 <_scanf_float+0x41c>)
 800dfce:	f000 f8e7 	bl	800e1a0 <nanf>
 800dfd2:	ed88 0a00 	vstr	s0, [r8]
 800dfd6:	e7cd      	b.n	800df74 <_scanf_float+0x3a0>
 800dfd8:	4630      	mov	r0, r6
 800dfda:	4639      	mov	r1, r7
 800dfdc:	f7f2 fe24 	bl	8000c28 <__aeabi_d2f>
 800dfe0:	f8c8 0000 	str.w	r0, [r8]
 800dfe4:	e7c6      	b.n	800df74 <_scanf_float+0x3a0>
 800dfe6:	2500      	movs	r5, #0
 800dfe8:	e635      	b.n	800dc56 <_scanf_float+0x82>
 800dfea:	bf00      	nop
 800dfec:	08013cb0 	.word	0x08013cb0
 800dff0:	08014128 	.word	0x08014128

0800dff4 <_sbrk_r>:
 800dff4:	b538      	push	{r3, r4, r5, lr}
 800dff6:	4d06      	ldr	r5, [pc, #24]	; (800e010 <_sbrk_r+0x1c>)
 800dff8:	2300      	movs	r3, #0
 800dffa:	4604      	mov	r4, r0
 800dffc:	4608      	mov	r0, r1
 800dffe:	602b      	str	r3, [r5, #0]
 800e000:	f7f5 f8a4 	bl	800314c <_sbrk>
 800e004:	1c43      	adds	r3, r0, #1
 800e006:	d102      	bne.n	800e00e <_sbrk_r+0x1a>
 800e008:	682b      	ldr	r3, [r5, #0]
 800e00a:	b103      	cbz	r3, 800e00e <_sbrk_r+0x1a>
 800e00c:	6023      	str	r3, [r4, #0]
 800e00e:	bd38      	pop	{r3, r4, r5, pc}
 800e010:	20007470 	.word	0x20007470

0800e014 <setvbuf>:
 800e014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e018:	461d      	mov	r5, r3
 800e01a:	4b5d      	ldr	r3, [pc, #372]	; (800e190 <setvbuf+0x17c>)
 800e01c:	681f      	ldr	r7, [r3, #0]
 800e01e:	4604      	mov	r4, r0
 800e020:	460e      	mov	r6, r1
 800e022:	4690      	mov	r8, r2
 800e024:	b127      	cbz	r7, 800e030 <setvbuf+0x1c>
 800e026:	69bb      	ldr	r3, [r7, #24]
 800e028:	b913      	cbnz	r3, 800e030 <setvbuf+0x1c>
 800e02a:	4638      	mov	r0, r7
 800e02c:	f001 fff6 	bl	801001c <__sinit>
 800e030:	4b58      	ldr	r3, [pc, #352]	; (800e194 <setvbuf+0x180>)
 800e032:	429c      	cmp	r4, r3
 800e034:	d167      	bne.n	800e106 <setvbuf+0xf2>
 800e036:	687c      	ldr	r4, [r7, #4]
 800e038:	f1b8 0f02 	cmp.w	r8, #2
 800e03c:	d006      	beq.n	800e04c <setvbuf+0x38>
 800e03e:	f1b8 0f01 	cmp.w	r8, #1
 800e042:	f200 809f 	bhi.w	800e184 <setvbuf+0x170>
 800e046:	2d00      	cmp	r5, #0
 800e048:	f2c0 809c 	blt.w	800e184 <setvbuf+0x170>
 800e04c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e04e:	07db      	lsls	r3, r3, #31
 800e050:	d405      	bmi.n	800e05e <setvbuf+0x4a>
 800e052:	89a3      	ldrh	r3, [r4, #12]
 800e054:	0598      	lsls	r0, r3, #22
 800e056:	d402      	bmi.n	800e05e <setvbuf+0x4a>
 800e058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e05a:	f002 fbf0 	bl	801083e <__retarget_lock_acquire_recursive>
 800e05e:	4621      	mov	r1, r4
 800e060:	4638      	mov	r0, r7
 800e062:	f001 ff47 	bl	800fef4 <_fflush_r>
 800e066:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e068:	b141      	cbz	r1, 800e07c <setvbuf+0x68>
 800e06a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e06e:	4299      	cmp	r1, r3
 800e070:	d002      	beq.n	800e078 <setvbuf+0x64>
 800e072:	4638      	mov	r0, r7
 800e074:	f7ff f89a 	bl	800d1ac <_free_r>
 800e078:	2300      	movs	r3, #0
 800e07a:	6363      	str	r3, [r4, #52]	; 0x34
 800e07c:	2300      	movs	r3, #0
 800e07e:	61a3      	str	r3, [r4, #24]
 800e080:	6063      	str	r3, [r4, #4]
 800e082:	89a3      	ldrh	r3, [r4, #12]
 800e084:	0619      	lsls	r1, r3, #24
 800e086:	d503      	bpl.n	800e090 <setvbuf+0x7c>
 800e088:	6921      	ldr	r1, [r4, #16]
 800e08a:	4638      	mov	r0, r7
 800e08c:	f7ff f88e 	bl	800d1ac <_free_r>
 800e090:	89a3      	ldrh	r3, [r4, #12]
 800e092:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800e096:	f023 0303 	bic.w	r3, r3, #3
 800e09a:	f1b8 0f02 	cmp.w	r8, #2
 800e09e:	81a3      	strh	r3, [r4, #12]
 800e0a0:	d06c      	beq.n	800e17c <setvbuf+0x168>
 800e0a2:	ab01      	add	r3, sp, #4
 800e0a4:	466a      	mov	r2, sp
 800e0a6:	4621      	mov	r1, r4
 800e0a8:	4638      	mov	r0, r7
 800e0aa:	f002 fbca 	bl	8010842 <__swhatbuf_r>
 800e0ae:	89a3      	ldrh	r3, [r4, #12]
 800e0b0:	4318      	orrs	r0, r3
 800e0b2:	81a0      	strh	r0, [r4, #12]
 800e0b4:	2d00      	cmp	r5, #0
 800e0b6:	d130      	bne.n	800e11a <setvbuf+0x106>
 800e0b8:	9d00      	ldr	r5, [sp, #0]
 800e0ba:	4628      	mov	r0, r5
 800e0bc:	f7ff f848 	bl	800d150 <malloc>
 800e0c0:	4606      	mov	r6, r0
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	d155      	bne.n	800e172 <setvbuf+0x15e>
 800e0c6:	f8dd 9000 	ldr.w	r9, [sp]
 800e0ca:	45a9      	cmp	r9, r5
 800e0cc:	d14a      	bne.n	800e164 <setvbuf+0x150>
 800e0ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	60a2      	str	r2, [r4, #8]
 800e0d6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800e0da:	6022      	str	r2, [r4, #0]
 800e0dc:	6122      	str	r2, [r4, #16]
 800e0de:	2201      	movs	r2, #1
 800e0e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0e4:	6162      	str	r2, [r4, #20]
 800e0e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e0e8:	f043 0302 	orr.w	r3, r3, #2
 800e0ec:	07d2      	lsls	r2, r2, #31
 800e0ee:	81a3      	strh	r3, [r4, #12]
 800e0f0:	d405      	bmi.n	800e0fe <setvbuf+0xea>
 800e0f2:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e0f6:	d102      	bne.n	800e0fe <setvbuf+0xea>
 800e0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0fa:	f002 fba1 	bl	8010840 <__retarget_lock_release_recursive>
 800e0fe:	4628      	mov	r0, r5
 800e100:	b003      	add	sp, #12
 800e102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e106:	4b24      	ldr	r3, [pc, #144]	; (800e198 <setvbuf+0x184>)
 800e108:	429c      	cmp	r4, r3
 800e10a:	d101      	bne.n	800e110 <setvbuf+0xfc>
 800e10c:	68bc      	ldr	r4, [r7, #8]
 800e10e:	e793      	b.n	800e038 <setvbuf+0x24>
 800e110:	4b22      	ldr	r3, [pc, #136]	; (800e19c <setvbuf+0x188>)
 800e112:	429c      	cmp	r4, r3
 800e114:	bf08      	it	eq
 800e116:	68fc      	ldreq	r4, [r7, #12]
 800e118:	e78e      	b.n	800e038 <setvbuf+0x24>
 800e11a:	2e00      	cmp	r6, #0
 800e11c:	d0cd      	beq.n	800e0ba <setvbuf+0xa6>
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	b913      	cbnz	r3, 800e128 <setvbuf+0x114>
 800e122:	4638      	mov	r0, r7
 800e124:	f001 ff7a 	bl	801001c <__sinit>
 800e128:	f1b8 0f01 	cmp.w	r8, #1
 800e12c:	bf08      	it	eq
 800e12e:	89a3      	ldrheq	r3, [r4, #12]
 800e130:	6026      	str	r6, [r4, #0]
 800e132:	bf04      	itt	eq
 800e134:	f043 0301 	orreq.w	r3, r3, #1
 800e138:	81a3      	strheq	r3, [r4, #12]
 800e13a:	89a2      	ldrh	r2, [r4, #12]
 800e13c:	f012 0308 	ands.w	r3, r2, #8
 800e140:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800e144:	d01c      	beq.n	800e180 <setvbuf+0x16c>
 800e146:	07d3      	lsls	r3, r2, #31
 800e148:	bf41      	itttt	mi
 800e14a:	2300      	movmi	r3, #0
 800e14c:	426d      	negmi	r5, r5
 800e14e:	60a3      	strmi	r3, [r4, #8]
 800e150:	61a5      	strmi	r5, [r4, #24]
 800e152:	bf58      	it	pl
 800e154:	60a5      	strpl	r5, [r4, #8]
 800e156:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800e158:	f015 0501 	ands.w	r5, r5, #1
 800e15c:	d115      	bne.n	800e18a <setvbuf+0x176>
 800e15e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800e162:	e7c8      	b.n	800e0f6 <setvbuf+0xe2>
 800e164:	4648      	mov	r0, r9
 800e166:	f7fe fff3 	bl	800d150 <malloc>
 800e16a:	4606      	mov	r6, r0
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d0ae      	beq.n	800e0ce <setvbuf+0xba>
 800e170:	464d      	mov	r5, r9
 800e172:	89a3      	ldrh	r3, [r4, #12]
 800e174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e178:	81a3      	strh	r3, [r4, #12]
 800e17a:	e7d0      	b.n	800e11e <setvbuf+0x10a>
 800e17c:	2500      	movs	r5, #0
 800e17e:	e7a8      	b.n	800e0d2 <setvbuf+0xbe>
 800e180:	60a3      	str	r3, [r4, #8]
 800e182:	e7e8      	b.n	800e156 <setvbuf+0x142>
 800e184:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e188:	e7b9      	b.n	800e0fe <setvbuf+0xea>
 800e18a:	2500      	movs	r5, #0
 800e18c:	e7b7      	b.n	800e0fe <setvbuf+0xea>
 800e18e:	bf00      	nop
 800e190:	20000014 	.word	0x20000014
 800e194:	08013ec0 	.word	0x08013ec0
 800e198:	08013ee0 	.word	0x08013ee0
 800e19c:	08013ea0 	.word	0x08013ea0

0800e1a0 <nanf>:
 800e1a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e1a8 <nanf+0x8>
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	7fc00000 	.word	0x7fc00000

0800e1ac <siprintf>:
 800e1ac:	b40e      	push	{r1, r2, r3}
 800e1ae:	b500      	push	{lr}
 800e1b0:	b09c      	sub	sp, #112	; 0x70
 800e1b2:	ab1d      	add	r3, sp, #116	; 0x74
 800e1b4:	9002      	str	r0, [sp, #8]
 800e1b6:	9006      	str	r0, [sp, #24]
 800e1b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1bc:	4809      	ldr	r0, [pc, #36]	; (800e1e4 <siprintf+0x38>)
 800e1be:	9107      	str	r1, [sp, #28]
 800e1c0:	9104      	str	r1, [sp, #16]
 800e1c2:	4909      	ldr	r1, [pc, #36]	; (800e1e8 <siprintf+0x3c>)
 800e1c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1c8:	9105      	str	r1, [sp, #20]
 800e1ca:	6800      	ldr	r0, [r0, #0]
 800e1cc:	9301      	str	r3, [sp, #4]
 800e1ce:	a902      	add	r1, sp, #8
 800e1d0:	f003 f8d0 	bl	8011374 <_svfiprintf_r>
 800e1d4:	9b02      	ldr	r3, [sp, #8]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	701a      	strb	r2, [r3, #0]
 800e1da:	b01c      	add	sp, #112	; 0x70
 800e1dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1e0:	b003      	add	sp, #12
 800e1e2:	4770      	bx	lr
 800e1e4:	20000014 	.word	0x20000014
 800e1e8:	ffff0208 	.word	0xffff0208

0800e1ec <strcat>:
 800e1ec:	b510      	push	{r4, lr}
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	7814      	ldrb	r4, [r2, #0]
 800e1f2:	4613      	mov	r3, r2
 800e1f4:	3201      	adds	r2, #1
 800e1f6:	2c00      	cmp	r4, #0
 800e1f8:	d1fa      	bne.n	800e1f0 <strcat+0x4>
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e200:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e204:	2a00      	cmp	r2, #0
 800e206:	d1f9      	bne.n	800e1fc <strcat+0x10>
 800e208:	bd10      	pop	{r4, pc}

0800e20a <sulp>:
 800e20a:	b570      	push	{r4, r5, r6, lr}
 800e20c:	4604      	mov	r4, r0
 800e20e:	460d      	mov	r5, r1
 800e210:	ec45 4b10 	vmov	d0, r4, r5
 800e214:	4616      	mov	r6, r2
 800e216:	f002 ff03 	bl	8011020 <__ulp>
 800e21a:	ec51 0b10 	vmov	r0, r1, d0
 800e21e:	b17e      	cbz	r6, 800e240 <sulp+0x36>
 800e220:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e224:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e228:	2b00      	cmp	r3, #0
 800e22a:	dd09      	ble.n	800e240 <sulp+0x36>
 800e22c:	051b      	lsls	r3, r3, #20
 800e22e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e232:	2400      	movs	r4, #0
 800e234:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e238:	4622      	mov	r2, r4
 800e23a:	462b      	mov	r3, r5
 800e23c:	f7f2 f9fc 	bl	8000638 <__aeabi_dmul>
 800e240:	bd70      	pop	{r4, r5, r6, pc}
 800e242:	0000      	movs	r0, r0
 800e244:	0000      	movs	r0, r0
	...

0800e248 <_strtod_l>:
 800e248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e24c:	b0a3      	sub	sp, #140	; 0x8c
 800e24e:	461f      	mov	r7, r3
 800e250:	2300      	movs	r3, #0
 800e252:	931e      	str	r3, [sp, #120]	; 0x78
 800e254:	4ba4      	ldr	r3, [pc, #656]	; (800e4e8 <_strtod_l+0x2a0>)
 800e256:	9219      	str	r2, [sp, #100]	; 0x64
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	9307      	str	r3, [sp, #28]
 800e25c:	4604      	mov	r4, r0
 800e25e:	4618      	mov	r0, r3
 800e260:	4688      	mov	r8, r1
 800e262:	f7f1 ffd5 	bl	8000210 <strlen>
 800e266:	f04f 0a00 	mov.w	sl, #0
 800e26a:	4605      	mov	r5, r0
 800e26c:	f04f 0b00 	mov.w	fp, #0
 800e270:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e274:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e276:	781a      	ldrb	r2, [r3, #0]
 800e278:	2a2b      	cmp	r2, #43	; 0x2b
 800e27a:	d04c      	beq.n	800e316 <_strtod_l+0xce>
 800e27c:	d839      	bhi.n	800e2f2 <_strtod_l+0xaa>
 800e27e:	2a0d      	cmp	r2, #13
 800e280:	d832      	bhi.n	800e2e8 <_strtod_l+0xa0>
 800e282:	2a08      	cmp	r2, #8
 800e284:	d832      	bhi.n	800e2ec <_strtod_l+0xa4>
 800e286:	2a00      	cmp	r2, #0
 800e288:	d03c      	beq.n	800e304 <_strtod_l+0xbc>
 800e28a:	2300      	movs	r3, #0
 800e28c:	930e      	str	r3, [sp, #56]	; 0x38
 800e28e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e290:	7833      	ldrb	r3, [r6, #0]
 800e292:	2b30      	cmp	r3, #48	; 0x30
 800e294:	f040 80b4 	bne.w	800e400 <_strtod_l+0x1b8>
 800e298:	7873      	ldrb	r3, [r6, #1]
 800e29a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e29e:	2b58      	cmp	r3, #88	; 0x58
 800e2a0:	d16c      	bne.n	800e37c <_strtod_l+0x134>
 800e2a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2a4:	9301      	str	r3, [sp, #4]
 800e2a6:	ab1e      	add	r3, sp, #120	; 0x78
 800e2a8:	9702      	str	r7, [sp, #8]
 800e2aa:	9300      	str	r3, [sp, #0]
 800e2ac:	4a8f      	ldr	r2, [pc, #572]	; (800e4ec <_strtod_l+0x2a4>)
 800e2ae:	ab1f      	add	r3, sp, #124	; 0x7c
 800e2b0:	a91d      	add	r1, sp, #116	; 0x74
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	f001 ffb6 	bl	8010224 <__gethex>
 800e2b8:	f010 0707 	ands.w	r7, r0, #7
 800e2bc:	4605      	mov	r5, r0
 800e2be:	d005      	beq.n	800e2cc <_strtod_l+0x84>
 800e2c0:	2f06      	cmp	r7, #6
 800e2c2:	d12a      	bne.n	800e31a <_strtod_l+0xd2>
 800e2c4:	3601      	adds	r6, #1
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	961d      	str	r6, [sp, #116]	; 0x74
 800e2ca:	930e      	str	r3, [sp, #56]	; 0x38
 800e2cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	f040 8596 	bne.w	800ee00 <_strtod_l+0xbb8>
 800e2d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2d6:	b1db      	cbz	r3, 800e310 <_strtod_l+0xc8>
 800e2d8:	4652      	mov	r2, sl
 800e2da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e2de:	ec43 2b10 	vmov	d0, r2, r3
 800e2e2:	b023      	add	sp, #140	; 0x8c
 800e2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e8:	2a20      	cmp	r2, #32
 800e2ea:	d1ce      	bne.n	800e28a <_strtod_l+0x42>
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	931d      	str	r3, [sp, #116]	; 0x74
 800e2f0:	e7c0      	b.n	800e274 <_strtod_l+0x2c>
 800e2f2:	2a2d      	cmp	r2, #45	; 0x2d
 800e2f4:	d1c9      	bne.n	800e28a <_strtod_l+0x42>
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	920e      	str	r2, [sp, #56]	; 0x38
 800e2fa:	1c5a      	adds	r2, r3, #1
 800e2fc:	921d      	str	r2, [sp, #116]	; 0x74
 800e2fe:	785b      	ldrb	r3, [r3, #1]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d1c4      	bne.n	800e28e <_strtod_l+0x46>
 800e304:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e306:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	f040 8576 	bne.w	800edfc <_strtod_l+0xbb4>
 800e310:	4652      	mov	r2, sl
 800e312:	465b      	mov	r3, fp
 800e314:	e7e3      	b.n	800e2de <_strtod_l+0x96>
 800e316:	2200      	movs	r2, #0
 800e318:	e7ee      	b.n	800e2f8 <_strtod_l+0xb0>
 800e31a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e31c:	b13a      	cbz	r2, 800e32e <_strtod_l+0xe6>
 800e31e:	2135      	movs	r1, #53	; 0x35
 800e320:	a820      	add	r0, sp, #128	; 0x80
 800e322:	f002 ff88 	bl	8011236 <__copybits>
 800e326:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e328:	4620      	mov	r0, r4
 800e32a:	f002 fb4d 	bl	80109c8 <_Bfree>
 800e32e:	3f01      	subs	r7, #1
 800e330:	2f05      	cmp	r7, #5
 800e332:	d807      	bhi.n	800e344 <_strtod_l+0xfc>
 800e334:	e8df f007 	tbb	[pc, r7]
 800e338:	1d180b0e 	.word	0x1d180b0e
 800e33c:	030e      	.short	0x030e
 800e33e:	f04f 0b00 	mov.w	fp, #0
 800e342:	46da      	mov	sl, fp
 800e344:	0728      	lsls	r0, r5, #28
 800e346:	d5c1      	bpl.n	800e2cc <_strtod_l+0x84>
 800e348:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e34c:	e7be      	b.n	800e2cc <_strtod_l+0x84>
 800e34e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e352:	e7f7      	b.n	800e344 <_strtod_l+0xfc>
 800e354:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e358:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e35a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e35e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e362:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e366:	e7ed      	b.n	800e344 <_strtod_l+0xfc>
 800e368:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e4f0 <_strtod_l+0x2a8>
 800e36c:	f04f 0a00 	mov.w	sl, #0
 800e370:	e7e8      	b.n	800e344 <_strtod_l+0xfc>
 800e372:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e376:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e37a:	e7e3      	b.n	800e344 <_strtod_l+0xfc>
 800e37c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e37e:	1c5a      	adds	r2, r3, #1
 800e380:	921d      	str	r2, [sp, #116]	; 0x74
 800e382:	785b      	ldrb	r3, [r3, #1]
 800e384:	2b30      	cmp	r3, #48	; 0x30
 800e386:	d0f9      	beq.n	800e37c <_strtod_l+0x134>
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d09f      	beq.n	800e2cc <_strtod_l+0x84>
 800e38c:	2301      	movs	r3, #1
 800e38e:	f04f 0900 	mov.w	r9, #0
 800e392:	9304      	str	r3, [sp, #16]
 800e394:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e396:	930a      	str	r3, [sp, #40]	; 0x28
 800e398:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e39c:	464f      	mov	r7, r9
 800e39e:	220a      	movs	r2, #10
 800e3a0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e3a2:	7806      	ldrb	r6, [r0, #0]
 800e3a4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e3a8:	b2d9      	uxtb	r1, r3
 800e3aa:	2909      	cmp	r1, #9
 800e3ac:	d92a      	bls.n	800e404 <_strtod_l+0x1bc>
 800e3ae:	9907      	ldr	r1, [sp, #28]
 800e3b0:	462a      	mov	r2, r5
 800e3b2:	f003 fa84 	bl	80118be <strncmp>
 800e3b6:	b398      	cbz	r0, 800e420 <_strtod_l+0x1d8>
 800e3b8:	2000      	movs	r0, #0
 800e3ba:	4633      	mov	r3, r6
 800e3bc:	463d      	mov	r5, r7
 800e3be:	9007      	str	r0, [sp, #28]
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	2b65      	cmp	r3, #101	; 0x65
 800e3c4:	d001      	beq.n	800e3ca <_strtod_l+0x182>
 800e3c6:	2b45      	cmp	r3, #69	; 0x45
 800e3c8:	d118      	bne.n	800e3fc <_strtod_l+0x1b4>
 800e3ca:	b91d      	cbnz	r5, 800e3d4 <_strtod_l+0x18c>
 800e3cc:	9b04      	ldr	r3, [sp, #16]
 800e3ce:	4303      	orrs	r3, r0
 800e3d0:	d098      	beq.n	800e304 <_strtod_l+0xbc>
 800e3d2:	2500      	movs	r5, #0
 800e3d4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e3d8:	f108 0301 	add.w	r3, r8, #1
 800e3dc:	931d      	str	r3, [sp, #116]	; 0x74
 800e3de:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e3e2:	2b2b      	cmp	r3, #43	; 0x2b
 800e3e4:	d075      	beq.n	800e4d2 <_strtod_l+0x28a>
 800e3e6:	2b2d      	cmp	r3, #45	; 0x2d
 800e3e8:	d07b      	beq.n	800e4e2 <_strtod_l+0x29a>
 800e3ea:	f04f 0c00 	mov.w	ip, #0
 800e3ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e3f2:	2909      	cmp	r1, #9
 800e3f4:	f240 8082 	bls.w	800e4fc <_strtod_l+0x2b4>
 800e3f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e3fc:	2600      	movs	r6, #0
 800e3fe:	e09d      	b.n	800e53c <_strtod_l+0x2f4>
 800e400:	2300      	movs	r3, #0
 800e402:	e7c4      	b.n	800e38e <_strtod_l+0x146>
 800e404:	2f08      	cmp	r7, #8
 800e406:	bfd8      	it	le
 800e408:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e40a:	f100 0001 	add.w	r0, r0, #1
 800e40e:	bfda      	itte	le
 800e410:	fb02 3301 	mlale	r3, r2, r1, r3
 800e414:	9309      	strle	r3, [sp, #36]	; 0x24
 800e416:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e41a:	3701      	adds	r7, #1
 800e41c:	901d      	str	r0, [sp, #116]	; 0x74
 800e41e:	e7bf      	b.n	800e3a0 <_strtod_l+0x158>
 800e420:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e422:	195a      	adds	r2, r3, r5
 800e424:	921d      	str	r2, [sp, #116]	; 0x74
 800e426:	5d5b      	ldrb	r3, [r3, r5]
 800e428:	2f00      	cmp	r7, #0
 800e42a:	d037      	beq.n	800e49c <_strtod_l+0x254>
 800e42c:	9007      	str	r0, [sp, #28]
 800e42e:	463d      	mov	r5, r7
 800e430:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e434:	2a09      	cmp	r2, #9
 800e436:	d912      	bls.n	800e45e <_strtod_l+0x216>
 800e438:	2201      	movs	r2, #1
 800e43a:	e7c2      	b.n	800e3c2 <_strtod_l+0x17a>
 800e43c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e43e:	1c5a      	adds	r2, r3, #1
 800e440:	921d      	str	r2, [sp, #116]	; 0x74
 800e442:	785b      	ldrb	r3, [r3, #1]
 800e444:	3001      	adds	r0, #1
 800e446:	2b30      	cmp	r3, #48	; 0x30
 800e448:	d0f8      	beq.n	800e43c <_strtod_l+0x1f4>
 800e44a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e44e:	2a08      	cmp	r2, #8
 800e450:	f200 84db 	bhi.w	800ee0a <_strtod_l+0xbc2>
 800e454:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e456:	9007      	str	r0, [sp, #28]
 800e458:	2000      	movs	r0, #0
 800e45a:	920a      	str	r2, [sp, #40]	; 0x28
 800e45c:	4605      	mov	r5, r0
 800e45e:	3b30      	subs	r3, #48	; 0x30
 800e460:	f100 0201 	add.w	r2, r0, #1
 800e464:	d014      	beq.n	800e490 <_strtod_l+0x248>
 800e466:	9907      	ldr	r1, [sp, #28]
 800e468:	4411      	add	r1, r2
 800e46a:	9107      	str	r1, [sp, #28]
 800e46c:	462a      	mov	r2, r5
 800e46e:	eb00 0e05 	add.w	lr, r0, r5
 800e472:	210a      	movs	r1, #10
 800e474:	4572      	cmp	r2, lr
 800e476:	d113      	bne.n	800e4a0 <_strtod_l+0x258>
 800e478:	182a      	adds	r2, r5, r0
 800e47a:	2a08      	cmp	r2, #8
 800e47c:	f105 0501 	add.w	r5, r5, #1
 800e480:	4405      	add	r5, r0
 800e482:	dc1c      	bgt.n	800e4be <_strtod_l+0x276>
 800e484:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e486:	220a      	movs	r2, #10
 800e488:	fb02 3301 	mla	r3, r2, r1, r3
 800e48c:	9309      	str	r3, [sp, #36]	; 0x24
 800e48e:	2200      	movs	r2, #0
 800e490:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e492:	1c59      	adds	r1, r3, #1
 800e494:	911d      	str	r1, [sp, #116]	; 0x74
 800e496:	785b      	ldrb	r3, [r3, #1]
 800e498:	4610      	mov	r0, r2
 800e49a:	e7c9      	b.n	800e430 <_strtod_l+0x1e8>
 800e49c:	4638      	mov	r0, r7
 800e49e:	e7d2      	b.n	800e446 <_strtod_l+0x1fe>
 800e4a0:	2a08      	cmp	r2, #8
 800e4a2:	dc04      	bgt.n	800e4ae <_strtod_l+0x266>
 800e4a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e4a6:	434e      	muls	r6, r1
 800e4a8:	9609      	str	r6, [sp, #36]	; 0x24
 800e4aa:	3201      	adds	r2, #1
 800e4ac:	e7e2      	b.n	800e474 <_strtod_l+0x22c>
 800e4ae:	f102 0c01 	add.w	ip, r2, #1
 800e4b2:	f1bc 0f10 	cmp.w	ip, #16
 800e4b6:	bfd8      	it	le
 800e4b8:	fb01 f909 	mulle.w	r9, r1, r9
 800e4bc:	e7f5      	b.n	800e4aa <_strtod_l+0x262>
 800e4be:	2d10      	cmp	r5, #16
 800e4c0:	bfdc      	itt	le
 800e4c2:	220a      	movle	r2, #10
 800e4c4:	fb02 3909 	mlale	r9, r2, r9, r3
 800e4c8:	e7e1      	b.n	800e48e <_strtod_l+0x246>
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	9307      	str	r3, [sp, #28]
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	e77c      	b.n	800e3cc <_strtod_l+0x184>
 800e4d2:	f04f 0c00 	mov.w	ip, #0
 800e4d6:	f108 0302 	add.w	r3, r8, #2
 800e4da:	931d      	str	r3, [sp, #116]	; 0x74
 800e4dc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e4e0:	e785      	b.n	800e3ee <_strtod_l+0x1a6>
 800e4e2:	f04f 0c01 	mov.w	ip, #1
 800e4e6:	e7f6      	b.n	800e4d6 <_strtod_l+0x28e>
 800e4e8:	08013f6c 	.word	0x08013f6c
 800e4ec:	08013cb8 	.word	0x08013cb8
 800e4f0:	7ff00000 	.word	0x7ff00000
 800e4f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e4f6:	1c59      	adds	r1, r3, #1
 800e4f8:	911d      	str	r1, [sp, #116]	; 0x74
 800e4fa:	785b      	ldrb	r3, [r3, #1]
 800e4fc:	2b30      	cmp	r3, #48	; 0x30
 800e4fe:	d0f9      	beq.n	800e4f4 <_strtod_l+0x2ac>
 800e500:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e504:	2908      	cmp	r1, #8
 800e506:	f63f af79 	bhi.w	800e3fc <_strtod_l+0x1b4>
 800e50a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e50e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e510:	9308      	str	r3, [sp, #32]
 800e512:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e514:	1c59      	adds	r1, r3, #1
 800e516:	911d      	str	r1, [sp, #116]	; 0x74
 800e518:	785b      	ldrb	r3, [r3, #1]
 800e51a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e51e:	2e09      	cmp	r6, #9
 800e520:	d937      	bls.n	800e592 <_strtod_l+0x34a>
 800e522:	9e08      	ldr	r6, [sp, #32]
 800e524:	1b89      	subs	r1, r1, r6
 800e526:	2908      	cmp	r1, #8
 800e528:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e52c:	dc02      	bgt.n	800e534 <_strtod_l+0x2ec>
 800e52e:	4576      	cmp	r6, lr
 800e530:	bfa8      	it	ge
 800e532:	4676      	movge	r6, lr
 800e534:	f1bc 0f00 	cmp.w	ip, #0
 800e538:	d000      	beq.n	800e53c <_strtod_l+0x2f4>
 800e53a:	4276      	negs	r6, r6
 800e53c:	2d00      	cmp	r5, #0
 800e53e:	d14f      	bne.n	800e5e0 <_strtod_l+0x398>
 800e540:	9904      	ldr	r1, [sp, #16]
 800e542:	4301      	orrs	r1, r0
 800e544:	f47f aec2 	bne.w	800e2cc <_strtod_l+0x84>
 800e548:	2a00      	cmp	r2, #0
 800e54a:	f47f aedb 	bne.w	800e304 <_strtod_l+0xbc>
 800e54e:	2b69      	cmp	r3, #105	; 0x69
 800e550:	d027      	beq.n	800e5a2 <_strtod_l+0x35a>
 800e552:	dc24      	bgt.n	800e59e <_strtod_l+0x356>
 800e554:	2b49      	cmp	r3, #73	; 0x49
 800e556:	d024      	beq.n	800e5a2 <_strtod_l+0x35a>
 800e558:	2b4e      	cmp	r3, #78	; 0x4e
 800e55a:	f47f aed3 	bne.w	800e304 <_strtod_l+0xbc>
 800e55e:	499e      	ldr	r1, [pc, #632]	; (800e7d8 <_strtod_l+0x590>)
 800e560:	a81d      	add	r0, sp, #116	; 0x74
 800e562:	f002 f8b7 	bl	80106d4 <__match>
 800e566:	2800      	cmp	r0, #0
 800e568:	f43f aecc 	beq.w	800e304 <_strtod_l+0xbc>
 800e56c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	2b28      	cmp	r3, #40	; 0x28
 800e572:	d12d      	bne.n	800e5d0 <_strtod_l+0x388>
 800e574:	4999      	ldr	r1, [pc, #612]	; (800e7dc <_strtod_l+0x594>)
 800e576:	aa20      	add	r2, sp, #128	; 0x80
 800e578:	a81d      	add	r0, sp, #116	; 0x74
 800e57a:	f002 f8bf 	bl	80106fc <__hexnan>
 800e57e:	2805      	cmp	r0, #5
 800e580:	d126      	bne.n	800e5d0 <_strtod_l+0x388>
 800e582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e584:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e588:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e58c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e590:	e69c      	b.n	800e2cc <_strtod_l+0x84>
 800e592:	210a      	movs	r1, #10
 800e594:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e598:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e59c:	e7b9      	b.n	800e512 <_strtod_l+0x2ca>
 800e59e:	2b6e      	cmp	r3, #110	; 0x6e
 800e5a0:	e7db      	b.n	800e55a <_strtod_l+0x312>
 800e5a2:	498f      	ldr	r1, [pc, #572]	; (800e7e0 <_strtod_l+0x598>)
 800e5a4:	a81d      	add	r0, sp, #116	; 0x74
 800e5a6:	f002 f895 	bl	80106d4 <__match>
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	f43f aeaa 	beq.w	800e304 <_strtod_l+0xbc>
 800e5b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e5b2:	498c      	ldr	r1, [pc, #560]	; (800e7e4 <_strtod_l+0x59c>)
 800e5b4:	3b01      	subs	r3, #1
 800e5b6:	a81d      	add	r0, sp, #116	; 0x74
 800e5b8:	931d      	str	r3, [sp, #116]	; 0x74
 800e5ba:	f002 f88b 	bl	80106d4 <__match>
 800e5be:	b910      	cbnz	r0, 800e5c6 <_strtod_l+0x37e>
 800e5c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	931d      	str	r3, [sp, #116]	; 0x74
 800e5c6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e7f4 <_strtod_l+0x5ac>
 800e5ca:	f04f 0a00 	mov.w	sl, #0
 800e5ce:	e67d      	b.n	800e2cc <_strtod_l+0x84>
 800e5d0:	4885      	ldr	r0, [pc, #532]	; (800e7e8 <_strtod_l+0x5a0>)
 800e5d2:	f003 f929 	bl	8011828 <nan>
 800e5d6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e5da:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e5de:	e675      	b.n	800e2cc <_strtod_l+0x84>
 800e5e0:	9b07      	ldr	r3, [sp, #28]
 800e5e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5e4:	1af3      	subs	r3, r6, r3
 800e5e6:	2f00      	cmp	r7, #0
 800e5e8:	bf08      	it	eq
 800e5ea:	462f      	moveq	r7, r5
 800e5ec:	2d10      	cmp	r5, #16
 800e5ee:	9308      	str	r3, [sp, #32]
 800e5f0:	46a8      	mov	r8, r5
 800e5f2:	bfa8      	it	ge
 800e5f4:	f04f 0810 	movge.w	r8, #16
 800e5f8:	f7f1 ffa4 	bl	8000544 <__aeabi_ui2d>
 800e5fc:	2d09      	cmp	r5, #9
 800e5fe:	4682      	mov	sl, r0
 800e600:	468b      	mov	fp, r1
 800e602:	dd13      	ble.n	800e62c <_strtod_l+0x3e4>
 800e604:	4b79      	ldr	r3, [pc, #484]	; (800e7ec <_strtod_l+0x5a4>)
 800e606:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e60a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e60e:	f7f2 f813 	bl	8000638 <__aeabi_dmul>
 800e612:	4682      	mov	sl, r0
 800e614:	4648      	mov	r0, r9
 800e616:	468b      	mov	fp, r1
 800e618:	f7f1 ff94 	bl	8000544 <__aeabi_ui2d>
 800e61c:	4602      	mov	r2, r0
 800e61e:	460b      	mov	r3, r1
 800e620:	4650      	mov	r0, sl
 800e622:	4659      	mov	r1, fp
 800e624:	f7f1 fe52 	bl	80002cc <__adddf3>
 800e628:	4682      	mov	sl, r0
 800e62a:	468b      	mov	fp, r1
 800e62c:	2d0f      	cmp	r5, #15
 800e62e:	dc38      	bgt.n	800e6a2 <_strtod_l+0x45a>
 800e630:	9b08      	ldr	r3, [sp, #32]
 800e632:	2b00      	cmp	r3, #0
 800e634:	f43f ae4a 	beq.w	800e2cc <_strtod_l+0x84>
 800e638:	dd24      	ble.n	800e684 <_strtod_l+0x43c>
 800e63a:	2b16      	cmp	r3, #22
 800e63c:	dc0b      	bgt.n	800e656 <_strtod_l+0x40e>
 800e63e:	4d6b      	ldr	r5, [pc, #428]	; (800e7ec <_strtod_l+0x5a4>)
 800e640:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e644:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e648:	4652      	mov	r2, sl
 800e64a:	465b      	mov	r3, fp
 800e64c:	f7f1 fff4 	bl	8000638 <__aeabi_dmul>
 800e650:	4682      	mov	sl, r0
 800e652:	468b      	mov	fp, r1
 800e654:	e63a      	b.n	800e2cc <_strtod_l+0x84>
 800e656:	9a08      	ldr	r2, [sp, #32]
 800e658:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e65c:	4293      	cmp	r3, r2
 800e65e:	db20      	blt.n	800e6a2 <_strtod_l+0x45a>
 800e660:	4c62      	ldr	r4, [pc, #392]	; (800e7ec <_strtod_l+0x5a4>)
 800e662:	f1c5 050f 	rsb	r5, r5, #15
 800e666:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e66a:	4652      	mov	r2, sl
 800e66c:	465b      	mov	r3, fp
 800e66e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e672:	f7f1 ffe1 	bl	8000638 <__aeabi_dmul>
 800e676:	9b08      	ldr	r3, [sp, #32]
 800e678:	1b5d      	subs	r5, r3, r5
 800e67a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e67e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e682:	e7e3      	b.n	800e64c <_strtod_l+0x404>
 800e684:	9b08      	ldr	r3, [sp, #32]
 800e686:	3316      	adds	r3, #22
 800e688:	db0b      	blt.n	800e6a2 <_strtod_l+0x45a>
 800e68a:	9b07      	ldr	r3, [sp, #28]
 800e68c:	4a57      	ldr	r2, [pc, #348]	; (800e7ec <_strtod_l+0x5a4>)
 800e68e:	1b9e      	subs	r6, r3, r6
 800e690:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e694:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e698:	4650      	mov	r0, sl
 800e69a:	4659      	mov	r1, fp
 800e69c:	f7f2 f8f6 	bl	800088c <__aeabi_ddiv>
 800e6a0:	e7d6      	b.n	800e650 <_strtod_l+0x408>
 800e6a2:	9b08      	ldr	r3, [sp, #32]
 800e6a4:	eba5 0808 	sub.w	r8, r5, r8
 800e6a8:	4498      	add	r8, r3
 800e6aa:	f1b8 0f00 	cmp.w	r8, #0
 800e6ae:	dd71      	ble.n	800e794 <_strtod_l+0x54c>
 800e6b0:	f018 030f 	ands.w	r3, r8, #15
 800e6b4:	d00a      	beq.n	800e6cc <_strtod_l+0x484>
 800e6b6:	494d      	ldr	r1, [pc, #308]	; (800e7ec <_strtod_l+0x5a4>)
 800e6b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e6bc:	4652      	mov	r2, sl
 800e6be:	465b      	mov	r3, fp
 800e6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6c4:	f7f1 ffb8 	bl	8000638 <__aeabi_dmul>
 800e6c8:	4682      	mov	sl, r0
 800e6ca:	468b      	mov	fp, r1
 800e6cc:	f038 080f 	bics.w	r8, r8, #15
 800e6d0:	d04d      	beq.n	800e76e <_strtod_l+0x526>
 800e6d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e6d6:	dd22      	ble.n	800e71e <_strtod_l+0x4d6>
 800e6d8:	2500      	movs	r5, #0
 800e6da:	462e      	mov	r6, r5
 800e6dc:	9509      	str	r5, [sp, #36]	; 0x24
 800e6de:	9507      	str	r5, [sp, #28]
 800e6e0:	2322      	movs	r3, #34	; 0x22
 800e6e2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e7f4 <_strtod_l+0x5ac>
 800e6e6:	6023      	str	r3, [r4, #0]
 800e6e8:	f04f 0a00 	mov.w	sl, #0
 800e6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	f43f adec 	beq.w	800e2cc <_strtod_l+0x84>
 800e6f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	f002 f966 	bl	80109c8 <_Bfree>
 800e6fc:	9907      	ldr	r1, [sp, #28]
 800e6fe:	4620      	mov	r0, r4
 800e700:	f002 f962 	bl	80109c8 <_Bfree>
 800e704:	4631      	mov	r1, r6
 800e706:	4620      	mov	r0, r4
 800e708:	f002 f95e 	bl	80109c8 <_Bfree>
 800e70c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e70e:	4620      	mov	r0, r4
 800e710:	f002 f95a 	bl	80109c8 <_Bfree>
 800e714:	4629      	mov	r1, r5
 800e716:	4620      	mov	r0, r4
 800e718:	f002 f956 	bl	80109c8 <_Bfree>
 800e71c:	e5d6      	b.n	800e2cc <_strtod_l+0x84>
 800e71e:	2300      	movs	r3, #0
 800e720:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e724:	4650      	mov	r0, sl
 800e726:	4659      	mov	r1, fp
 800e728:	4699      	mov	r9, r3
 800e72a:	f1b8 0f01 	cmp.w	r8, #1
 800e72e:	dc21      	bgt.n	800e774 <_strtod_l+0x52c>
 800e730:	b10b      	cbz	r3, 800e736 <_strtod_l+0x4ee>
 800e732:	4682      	mov	sl, r0
 800e734:	468b      	mov	fp, r1
 800e736:	4b2e      	ldr	r3, [pc, #184]	; (800e7f0 <_strtod_l+0x5a8>)
 800e738:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e73c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e740:	4652      	mov	r2, sl
 800e742:	465b      	mov	r3, fp
 800e744:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e748:	f7f1 ff76 	bl	8000638 <__aeabi_dmul>
 800e74c:	4b29      	ldr	r3, [pc, #164]	; (800e7f4 <_strtod_l+0x5ac>)
 800e74e:	460a      	mov	r2, r1
 800e750:	400b      	ands	r3, r1
 800e752:	4929      	ldr	r1, [pc, #164]	; (800e7f8 <_strtod_l+0x5b0>)
 800e754:	428b      	cmp	r3, r1
 800e756:	4682      	mov	sl, r0
 800e758:	d8be      	bhi.n	800e6d8 <_strtod_l+0x490>
 800e75a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e75e:	428b      	cmp	r3, r1
 800e760:	bf86      	itte	hi
 800e762:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e7fc <_strtod_l+0x5b4>
 800e766:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800e76a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e76e:	2300      	movs	r3, #0
 800e770:	9304      	str	r3, [sp, #16]
 800e772:	e081      	b.n	800e878 <_strtod_l+0x630>
 800e774:	f018 0f01 	tst.w	r8, #1
 800e778:	d007      	beq.n	800e78a <_strtod_l+0x542>
 800e77a:	4b1d      	ldr	r3, [pc, #116]	; (800e7f0 <_strtod_l+0x5a8>)
 800e77c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e784:	f7f1 ff58 	bl	8000638 <__aeabi_dmul>
 800e788:	2301      	movs	r3, #1
 800e78a:	f109 0901 	add.w	r9, r9, #1
 800e78e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e792:	e7ca      	b.n	800e72a <_strtod_l+0x4e2>
 800e794:	d0eb      	beq.n	800e76e <_strtod_l+0x526>
 800e796:	f1c8 0800 	rsb	r8, r8, #0
 800e79a:	f018 020f 	ands.w	r2, r8, #15
 800e79e:	d00a      	beq.n	800e7b6 <_strtod_l+0x56e>
 800e7a0:	4b12      	ldr	r3, [pc, #72]	; (800e7ec <_strtod_l+0x5a4>)
 800e7a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7a6:	4650      	mov	r0, sl
 800e7a8:	4659      	mov	r1, fp
 800e7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ae:	f7f2 f86d 	bl	800088c <__aeabi_ddiv>
 800e7b2:	4682      	mov	sl, r0
 800e7b4:	468b      	mov	fp, r1
 800e7b6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e7ba:	d0d8      	beq.n	800e76e <_strtod_l+0x526>
 800e7bc:	f1b8 0f1f 	cmp.w	r8, #31
 800e7c0:	dd1e      	ble.n	800e800 <_strtod_l+0x5b8>
 800e7c2:	2500      	movs	r5, #0
 800e7c4:	462e      	mov	r6, r5
 800e7c6:	9509      	str	r5, [sp, #36]	; 0x24
 800e7c8:	9507      	str	r5, [sp, #28]
 800e7ca:	2322      	movs	r3, #34	; 0x22
 800e7cc:	f04f 0a00 	mov.w	sl, #0
 800e7d0:	f04f 0b00 	mov.w	fp, #0
 800e7d4:	6023      	str	r3, [r4, #0]
 800e7d6:	e789      	b.n	800e6ec <_strtod_l+0x4a4>
 800e7d8:	08013c89 	.word	0x08013c89
 800e7dc:	08013ccc 	.word	0x08013ccc
 800e7e0:	08013c81 	.word	0x08013c81
 800e7e4:	08013e0c 	.word	0x08013e0c
 800e7e8:	08014128 	.word	0x08014128
 800e7ec:	08014008 	.word	0x08014008
 800e7f0:	08013fe0 	.word	0x08013fe0
 800e7f4:	7ff00000 	.word	0x7ff00000
 800e7f8:	7ca00000 	.word	0x7ca00000
 800e7fc:	7fefffff 	.word	0x7fefffff
 800e800:	f018 0310 	ands.w	r3, r8, #16
 800e804:	bf18      	it	ne
 800e806:	236a      	movne	r3, #106	; 0x6a
 800e808:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ebc0 <_strtod_l+0x978>
 800e80c:	9304      	str	r3, [sp, #16]
 800e80e:	4650      	mov	r0, sl
 800e810:	4659      	mov	r1, fp
 800e812:	2300      	movs	r3, #0
 800e814:	f018 0f01 	tst.w	r8, #1
 800e818:	d004      	beq.n	800e824 <_strtod_l+0x5dc>
 800e81a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e81e:	f7f1 ff0b 	bl	8000638 <__aeabi_dmul>
 800e822:	2301      	movs	r3, #1
 800e824:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e828:	f109 0908 	add.w	r9, r9, #8
 800e82c:	d1f2      	bne.n	800e814 <_strtod_l+0x5cc>
 800e82e:	b10b      	cbz	r3, 800e834 <_strtod_l+0x5ec>
 800e830:	4682      	mov	sl, r0
 800e832:	468b      	mov	fp, r1
 800e834:	9b04      	ldr	r3, [sp, #16]
 800e836:	b1bb      	cbz	r3, 800e868 <_strtod_l+0x620>
 800e838:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e83c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e840:	2b00      	cmp	r3, #0
 800e842:	4659      	mov	r1, fp
 800e844:	dd10      	ble.n	800e868 <_strtod_l+0x620>
 800e846:	2b1f      	cmp	r3, #31
 800e848:	f340 8128 	ble.w	800ea9c <_strtod_l+0x854>
 800e84c:	2b34      	cmp	r3, #52	; 0x34
 800e84e:	bfde      	ittt	le
 800e850:	3b20      	suble	r3, #32
 800e852:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800e856:	fa02 f303 	lslle.w	r3, r2, r3
 800e85a:	f04f 0a00 	mov.w	sl, #0
 800e85e:	bfcc      	ite	gt
 800e860:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e864:	ea03 0b01 	andle.w	fp, r3, r1
 800e868:	2200      	movs	r2, #0
 800e86a:	2300      	movs	r3, #0
 800e86c:	4650      	mov	r0, sl
 800e86e:	4659      	mov	r1, fp
 800e870:	f7f2 f94a 	bl	8000b08 <__aeabi_dcmpeq>
 800e874:	2800      	cmp	r0, #0
 800e876:	d1a4      	bne.n	800e7c2 <_strtod_l+0x57a>
 800e878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e87e:	462b      	mov	r3, r5
 800e880:	463a      	mov	r2, r7
 800e882:	4620      	mov	r0, r4
 800e884:	f002 f90c 	bl	8010aa0 <__s2b>
 800e888:	9009      	str	r0, [sp, #36]	; 0x24
 800e88a:	2800      	cmp	r0, #0
 800e88c:	f43f af24 	beq.w	800e6d8 <_strtod_l+0x490>
 800e890:	9b07      	ldr	r3, [sp, #28]
 800e892:	1b9e      	subs	r6, r3, r6
 800e894:	9b08      	ldr	r3, [sp, #32]
 800e896:	2b00      	cmp	r3, #0
 800e898:	bfb4      	ite	lt
 800e89a:	4633      	movlt	r3, r6
 800e89c:	2300      	movge	r3, #0
 800e89e:	9310      	str	r3, [sp, #64]	; 0x40
 800e8a0:	9b08      	ldr	r3, [sp, #32]
 800e8a2:	2500      	movs	r5, #0
 800e8a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e8a8:	9318      	str	r3, [sp, #96]	; 0x60
 800e8aa:	462e      	mov	r6, r5
 800e8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	6859      	ldr	r1, [r3, #4]
 800e8b2:	f002 f849 	bl	8010948 <_Balloc>
 800e8b6:	9007      	str	r0, [sp, #28]
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	f43f af11 	beq.w	800e6e0 <_strtod_l+0x498>
 800e8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8c0:	691a      	ldr	r2, [r3, #16]
 800e8c2:	3202      	adds	r2, #2
 800e8c4:	f103 010c 	add.w	r1, r3, #12
 800e8c8:	0092      	lsls	r2, r2, #2
 800e8ca:	300c      	adds	r0, #12
 800e8cc:	f7fe fc48 	bl	800d160 <memcpy>
 800e8d0:	ec4b ab10 	vmov	d0, sl, fp
 800e8d4:	aa20      	add	r2, sp, #128	; 0x80
 800e8d6:	a91f      	add	r1, sp, #124	; 0x7c
 800e8d8:	4620      	mov	r0, r4
 800e8da:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e8de:	f002 fc1b 	bl	8011118 <__d2b>
 800e8e2:	901e      	str	r0, [sp, #120]	; 0x78
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	f43f aefb 	beq.w	800e6e0 <_strtod_l+0x498>
 800e8ea:	2101      	movs	r1, #1
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	f002 f971 	bl	8010bd4 <__i2b>
 800e8f2:	4606      	mov	r6, r0
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	f43f aef3 	beq.w	800e6e0 <_strtod_l+0x498>
 800e8fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e8fc:	9904      	ldr	r1, [sp, #16]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	bfab      	itete	ge
 800e902:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800e904:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800e906:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800e908:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800e90c:	bfac      	ite	ge
 800e90e:	eb03 0902 	addge.w	r9, r3, r2
 800e912:	1ad7      	sublt	r7, r2, r3
 800e914:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e916:	eba3 0801 	sub.w	r8, r3, r1
 800e91a:	4490      	add	r8, r2
 800e91c:	4ba3      	ldr	r3, [pc, #652]	; (800ebac <_strtod_l+0x964>)
 800e91e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e922:	4598      	cmp	r8, r3
 800e924:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e928:	f280 80cc 	bge.w	800eac4 <_strtod_l+0x87c>
 800e92c:	eba3 0308 	sub.w	r3, r3, r8
 800e930:	2b1f      	cmp	r3, #31
 800e932:	eba2 0203 	sub.w	r2, r2, r3
 800e936:	f04f 0101 	mov.w	r1, #1
 800e93a:	f300 80b6 	bgt.w	800eaaa <_strtod_l+0x862>
 800e93e:	fa01 f303 	lsl.w	r3, r1, r3
 800e942:	9311      	str	r3, [sp, #68]	; 0x44
 800e944:	2300      	movs	r3, #0
 800e946:	930c      	str	r3, [sp, #48]	; 0x30
 800e948:	eb09 0802 	add.w	r8, r9, r2
 800e94c:	9b04      	ldr	r3, [sp, #16]
 800e94e:	45c1      	cmp	r9, r8
 800e950:	4417      	add	r7, r2
 800e952:	441f      	add	r7, r3
 800e954:	464b      	mov	r3, r9
 800e956:	bfa8      	it	ge
 800e958:	4643      	movge	r3, r8
 800e95a:	42bb      	cmp	r3, r7
 800e95c:	bfa8      	it	ge
 800e95e:	463b      	movge	r3, r7
 800e960:	2b00      	cmp	r3, #0
 800e962:	bfc2      	ittt	gt
 800e964:	eba8 0803 	subgt.w	r8, r8, r3
 800e968:	1aff      	subgt	r7, r7, r3
 800e96a:	eba9 0903 	subgt.w	r9, r9, r3
 800e96e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e970:	2b00      	cmp	r3, #0
 800e972:	dd17      	ble.n	800e9a4 <_strtod_l+0x75c>
 800e974:	4631      	mov	r1, r6
 800e976:	461a      	mov	r2, r3
 800e978:	4620      	mov	r0, r4
 800e97a:	f002 f9e7 	bl	8010d4c <__pow5mult>
 800e97e:	4606      	mov	r6, r0
 800e980:	2800      	cmp	r0, #0
 800e982:	f43f aead 	beq.w	800e6e0 <_strtod_l+0x498>
 800e986:	4601      	mov	r1, r0
 800e988:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e98a:	4620      	mov	r0, r4
 800e98c:	f002 f938 	bl	8010c00 <__multiply>
 800e990:	900f      	str	r0, [sp, #60]	; 0x3c
 800e992:	2800      	cmp	r0, #0
 800e994:	f43f aea4 	beq.w	800e6e0 <_strtod_l+0x498>
 800e998:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e99a:	4620      	mov	r0, r4
 800e99c:	f002 f814 	bl	80109c8 <_Bfree>
 800e9a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9a2:	931e      	str	r3, [sp, #120]	; 0x78
 800e9a4:	f1b8 0f00 	cmp.w	r8, #0
 800e9a8:	f300 8091 	bgt.w	800eace <_strtod_l+0x886>
 800e9ac:	9b08      	ldr	r3, [sp, #32]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	dd08      	ble.n	800e9c4 <_strtod_l+0x77c>
 800e9b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e9b4:	9907      	ldr	r1, [sp, #28]
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	f002 f9c8 	bl	8010d4c <__pow5mult>
 800e9bc:	9007      	str	r0, [sp, #28]
 800e9be:	2800      	cmp	r0, #0
 800e9c0:	f43f ae8e 	beq.w	800e6e0 <_strtod_l+0x498>
 800e9c4:	2f00      	cmp	r7, #0
 800e9c6:	dd08      	ble.n	800e9da <_strtod_l+0x792>
 800e9c8:	9907      	ldr	r1, [sp, #28]
 800e9ca:	463a      	mov	r2, r7
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	f002 fa17 	bl	8010e00 <__lshift>
 800e9d2:	9007      	str	r0, [sp, #28]
 800e9d4:	2800      	cmp	r0, #0
 800e9d6:	f43f ae83 	beq.w	800e6e0 <_strtod_l+0x498>
 800e9da:	f1b9 0f00 	cmp.w	r9, #0
 800e9de:	dd08      	ble.n	800e9f2 <_strtod_l+0x7aa>
 800e9e0:	4631      	mov	r1, r6
 800e9e2:	464a      	mov	r2, r9
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	f002 fa0b 	bl	8010e00 <__lshift>
 800e9ea:	4606      	mov	r6, r0
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	f43f ae77 	beq.w	800e6e0 <_strtod_l+0x498>
 800e9f2:	9a07      	ldr	r2, [sp, #28]
 800e9f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	f002 fa8a 	bl	8010f10 <__mdiff>
 800e9fc:	4605      	mov	r5, r0
 800e9fe:	2800      	cmp	r0, #0
 800ea00:	f43f ae6e 	beq.w	800e6e0 <_strtod_l+0x498>
 800ea04:	68c3      	ldr	r3, [r0, #12]
 800ea06:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea08:	2300      	movs	r3, #0
 800ea0a:	60c3      	str	r3, [r0, #12]
 800ea0c:	4631      	mov	r1, r6
 800ea0e:	f002 fa63 	bl	8010ed8 <__mcmp>
 800ea12:	2800      	cmp	r0, #0
 800ea14:	da65      	bge.n	800eae2 <_strtod_l+0x89a>
 800ea16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea18:	ea53 030a 	orrs.w	r3, r3, sl
 800ea1c:	f040 8087 	bne.w	800eb2e <_strtod_l+0x8e6>
 800ea20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	f040 8082 	bne.w	800eb2e <_strtod_l+0x8e6>
 800ea2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea2e:	0d1b      	lsrs	r3, r3, #20
 800ea30:	051b      	lsls	r3, r3, #20
 800ea32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ea36:	d97a      	bls.n	800eb2e <_strtod_l+0x8e6>
 800ea38:	696b      	ldr	r3, [r5, #20]
 800ea3a:	b913      	cbnz	r3, 800ea42 <_strtod_l+0x7fa>
 800ea3c:	692b      	ldr	r3, [r5, #16]
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	dd75      	ble.n	800eb2e <_strtod_l+0x8e6>
 800ea42:	4629      	mov	r1, r5
 800ea44:	2201      	movs	r2, #1
 800ea46:	4620      	mov	r0, r4
 800ea48:	f002 f9da 	bl	8010e00 <__lshift>
 800ea4c:	4631      	mov	r1, r6
 800ea4e:	4605      	mov	r5, r0
 800ea50:	f002 fa42 	bl	8010ed8 <__mcmp>
 800ea54:	2800      	cmp	r0, #0
 800ea56:	dd6a      	ble.n	800eb2e <_strtod_l+0x8e6>
 800ea58:	9904      	ldr	r1, [sp, #16]
 800ea5a:	4a55      	ldr	r2, [pc, #340]	; (800ebb0 <_strtod_l+0x968>)
 800ea5c:	465b      	mov	r3, fp
 800ea5e:	2900      	cmp	r1, #0
 800ea60:	f000 8085 	beq.w	800eb6e <_strtod_l+0x926>
 800ea64:	ea02 010b 	and.w	r1, r2, fp
 800ea68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ea6c:	dc7f      	bgt.n	800eb6e <_strtod_l+0x926>
 800ea6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ea72:	f77f aeaa 	ble.w	800e7ca <_strtod_l+0x582>
 800ea76:	4a4f      	ldr	r2, [pc, #316]	; (800ebb4 <_strtod_l+0x96c>)
 800ea78:	2300      	movs	r3, #0
 800ea7a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ea7e:	4650      	mov	r0, sl
 800ea80:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ea84:	4659      	mov	r1, fp
 800ea86:	f7f1 fdd7 	bl	8000638 <__aeabi_dmul>
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	4303      	orrs	r3, r0
 800ea8e:	bf08      	it	eq
 800ea90:	2322      	moveq	r3, #34	; 0x22
 800ea92:	4682      	mov	sl, r0
 800ea94:	468b      	mov	fp, r1
 800ea96:	bf08      	it	eq
 800ea98:	6023      	streq	r3, [r4, #0]
 800ea9a:	e62b      	b.n	800e6f4 <_strtod_l+0x4ac>
 800ea9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eaa0:	fa02 f303 	lsl.w	r3, r2, r3
 800eaa4:	ea03 0a0a 	and.w	sl, r3, sl
 800eaa8:	e6de      	b.n	800e868 <_strtod_l+0x620>
 800eaaa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800eaae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800eab2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800eab6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800eaba:	fa01 f308 	lsl.w	r3, r1, r8
 800eabe:	930c      	str	r3, [sp, #48]	; 0x30
 800eac0:	9111      	str	r1, [sp, #68]	; 0x44
 800eac2:	e741      	b.n	800e948 <_strtod_l+0x700>
 800eac4:	2300      	movs	r3, #0
 800eac6:	930c      	str	r3, [sp, #48]	; 0x30
 800eac8:	2301      	movs	r3, #1
 800eaca:	9311      	str	r3, [sp, #68]	; 0x44
 800eacc:	e73c      	b.n	800e948 <_strtod_l+0x700>
 800eace:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ead0:	4642      	mov	r2, r8
 800ead2:	4620      	mov	r0, r4
 800ead4:	f002 f994 	bl	8010e00 <__lshift>
 800ead8:	901e      	str	r0, [sp, #120]	; 0x78
 800eada:	2800      	cmp	r0, #0
 800eadc:	f47f af66 	bne.w	800e9ac <_strtod_l+0x764>
 800eae0:	e5fe      	b.n	800e6e0 <_strtod_l+0x498>
 800eae2:	465f      	mov	r7, fp
 800eae4:	d16e      	bne.n	800ebc4 <_strtod_l+0x97c>
 800eae6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eae8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eaec:	b342      	cbz	r2, 800eb40 <_strtod_l+0x8f8>
 800eaee:	4a32      	ldr	r2, [pc, #200]	; (800ebb8 <_strtod_l+0x970>)
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d128      	bne.n	800eb46 <_strtod_l+0x8fe>
 800eaf4:	9b04      	ldr	r3, [sp, #16]
 800eaf6:	4650      	mov	r0, sl
 800eaf8:	b1eb      	cbz	r3, 800eb36 <_strtod_l+0x8ee>
 800eafa:	4a2d      	ldr	r2, [pc, #180]	; (800ebb0 <_strtod_l+0x968>)
 800eafc:	403a      	ands	r2, r7
 800eafe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800eb02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800eb06:	d819      	bhi.n	800eb3c <_strtod_l+0x8f4>
 800eb08:	0d12      	lsrs	r2, r2, #20
 800eb0a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800eb0e:	fa01 f303 	lsl.w	r3, r1, r3
 800eb12:	4298      	cmp	r0, r3
 800eb14:	d117      	bne.n	800eb46 <_strtod_l+0x8fe>
 800eb16:	4b29      	ldr	r3, [pc, #164]	; (800ebbc <_strtod_l+0x974>)
 800eb18:	429f      	cmp	r7, r3
 800eb1a:	d102      	bne.n	800eb22 <_strtod_l+0x8da>
 800eb1c:	3001      	adds	r0, #1
 800eb1e:	f43f addf 	beq.w	800e6e0 <_strtod_l+0x498>
 800eb22:	4b23      	ldr	r3, [pc, #140]	; (800ebb0 <_strtod_l+0x968>)
 800eb24:	403b      	ands	r3, r7
 800eb26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800eb2a:	f04f 0a00 	mov.w	sl, #0
 800eb2e:	9b04      	ldr	r3, [sp, #16]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d1a0      	bne.n	800ea76 <_strtod_l+0x82e>
 800eb34:	e5de      	b.n	800e6f4 <_strtod_l+0x4ac>
 800eb36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb3a:	e7ea      	b.n	800eb12 <_strtod_l+0x8ca>
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	e7e8      	b.n	800eb12 <_strtod_l+0x8ca>
 800eb40:	ea53 030a 	orrs.w	r3, r3, sl
 800eb44:	d088      	beq.n	800ea58 <_strtod_l+0x810>
 800eb46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb48:	b1db      	cbz	r3, 800eb82 <_strtod_l+0x93a>
 800eb4a:	423b      	tst	r3, r7
 800eb4c:	d0ef      	beq.n	800eb2e <_strtod_l+0x8e6>
 800eb4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb50:	9a04      	ldr	r2, [sp, #16]
 800eb52:	4650      	mov	r0, sl
 800eb54:	4659      	mov	r1, fp
 800eb56:	b1c3      	cbz	r3, 800eb8a <_strtod_l+0x942>
 800eb58:	f7ff fb57 	bl	800e20a <sulp>
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	460b      	mov	r3, r1
 800eb60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eb64:	f7f1 fbb2 	bl	80002cc <__adddf3>
 800eb68:	4682      	mov	sl, r0
 800eb6a:	468b      	mov	fp, r1
 800eb6c:	e7df      	b.n	800eb2e <_strtod_l+0x8e6>
 800eb6e:	4013      	ands	r3, r2
 800eb70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eb74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eb78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eb7c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800eb80:	e7d5      	b.n	800eb2e <_strtod_l+0x8e6>
 800eb82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb84:	ea13 0f0a 	tst.w	r3, sl
 800eb88:	e7e0      	b.n	800eb4c <_strtod_l+0x904>
 800eb8a:	f7ff fb3e 	bl	800e20a <sulp>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	460b      	mov	r3, r1
 800eb92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eb96:	f7f1 fb97 	bl	80002c8 <__aeabi_dsub>
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	4682      	mov	sl, r0
 800eba0:	468b      	mov	fp, r1
 800eba2:	f7f1 ffb1 	bl	8000b08 <__aeabi_dcmpeq>
 800eba6:	2800      	cmp	r0, #0
 800eba8:	d0c1      	beq.n	800eb2e <_strtod_l+0x8e6>
 800ebaa:	e60e      	b.n	800e7ca <_strtod_l+0x582>
 800ebac:	fffffc02 	.word	0xfffffc02
 800ebb0:	7ff00000 	.word	0x7ff00000
 800ebb4:	39500000 	.word	0x39500000
 800ebb8:	000fffff 	.word	0x000fffff
 800ebbc:	7fefffff 	.word	0x7fefffff
 800ebc0:	08013ce0 	.word	0x08013ce0
 800ebc4:	4631      	mov	r1, r6
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	f002 fb02 	bl	80111d0 <__ratio>
 800ebcc:	ec59 8b10 	vmov	r8, r9, d0
 800ebd0:	ee10 0a10 	vmov	r0, s0
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ebda:	4649      	mov	r1, r9
 800ebdc:	f7f1 ffa8 	bl	8000b30 <__aeabi_dcmple>
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	d07c      	beq.n	800ecde <_strtod_l+0xa96>
 800ebe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d04c      	beq.n	800ec84 <_strtod_l+0xa3c>
 800ebea:	4b95      	ldr	r3, [pc, #596]	; (800ee40 <_strtod_l+0xbf8>)
 800ebec:	2200      	movs	r2, #0
 800ebee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ebf2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ee40 <_strtod_l+0xbf8>
 800ebf6:	f04f 0800 	mov.w	r8, #0
 800ebfa:	4b92      	ldr	r3, [pc, #584]	; (800ee44 <_strtod_l+0xbfc>)
 800ebfc:	403b      	ands	r3, r7
 800ebfe:	9311      	str	r3, [sp, #68]	; 0x44
 800ec00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ec02:	4b91      	ldr	r3, [pc, #580]	; (800ee48 <_strtod_l+0xc00>)
 800ec04:	429a      	cmp	r2, r3
 800ec06:	f040 80b2 	bne.w	800ed6e <_strtod_l+0xb26>
 800ec0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ec0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ec12:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ec16:	ec4b ab10 	vmov	d0, sl, fp
 800ec1a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800ec1e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ec22:	f002 f9fd 	bl	8011020 <__ulp>
 800ec26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ec2a:	ec53 2b10 	vmov	r2, r3, d0
 800ec2e:	f7f1 fd03 	bl	8000638 <__aeabi_dmul>
 800ec32:	4652      	mov	r2, sl
 800ec34:	465b      	mov	r3, fp
 800ec36:	f7f1 fb49 	bl	80002cc <__adddf3>
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	4981      	ldr	r1, [pc, #516]	; (800ee44 <_strtod_l+0xbfc>)
 800ec3e:	4a83      	ldr	r2, [pc, #524]	; (800ee4c <_strtod_l+0xc04>)
 800ec40:	4019      	ands	r1, r3
 800ec42:	4291      	cmp	r1, r2
 800ec44:	4682      	mov	sl, r0
 800ec46:	d95e      	bls.n	800ed06 <_strtod_l+0xabe>
 800ec48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec4a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d103      	bne.n	800ec5a <_strtod_l+0xa12>
 800ec52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec54:	3301      	adds	r3, #1
 800ec56:	f43f ad43 	beq.w	800e6e0 <_strtod_l+0x498>
 800ec5a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800ee58 <_strtod_l+0xc10>
 800ec5e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ec62:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ec64:	4620      	mov	r0, r4
 800ec66:	f001 feaf 	bl	80109c8 <_Bfree>
 800ec6a:	9907      	ldr	r1, [sp, #28]
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f001 feab 	bl	80109c8 <_Bfree>
 800ec72:	4631      	mov	r1, r6
 800ec74:	4620      	mov	r0, r4
 800ec76:	f001 fea7 	bl	80109c8 <_Bfree>
 800ec7a:	4629      	mov	r1, r5
 800ec7c:	4620      	mov	r0, r4
 800ec7e:	f001 fea3 	bl	80109c8 <_Bfree>
 800ec82:	e613      	b.n	800e8ac <_strtod_l+0x664>
 800ec84:	f1ba 0f00 	cmp.w	sl, #0
 800ec88:	d11b      	bne.n	800ecc2 <_strtod_l+0xa7a>
 800ec8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec8e:	b9f3      	cbnz	r3, 800ecce <_strtod_l+0xa86>
 800ec90:	4b6b      	ldr	r3, [pc, #428]	; (800ee40 <_strtod_l+0xbf8>)
 800ec92:	2200      	movs	r2, #0
 800ec94:	4640      	mov	r0, r8
 800ec96:	4649      	mov	r1, r9
 800ec98:	f7f1 ff40 	bl	8000b1c <__aeabi_dcmplt>
 800ec9c:	b9d0      	cbnz	r0, 800ecd4 <_strtod_l+0xa8c>
 800ec9e:	4640      	mov	r0, r8
 800eca0:	4649      	mov	r1, r9
 800eca2:	4b6b      	ldr	r3, [pc, #428]	; (800ee50 <_strtod_l+0xc08>)
 800eca4:	2200      	movs	r2, #0
 800eca6:	f7f1 fcc7 	bl	8000638 <__aeabi_dmul>
 800ecaa:	4680      	mov	r8, r0
 800ecac:	4689      	mov	r9, r1
 800ecae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ecb2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ecb6:	931b      	str	r3, [sp, #108]	; 0x6c
 800ecb8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ecbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ecc0:	e79b      	b.n	800ebfa <_strtod_l+0x9b2>
 800ecc2:	f1ba 0f01 	cmp.w	sl, #1
 800ecc6:	d102      	bne.n	800ecce <_strtod_l+0xa86>
 800ecc8:	2f00      	cmp	r7, #0
 800ecca:	f43f ad7e 	beq.w	800e7ca <_strtod_l+0x582>
 800ecce:	4b61      	ldr	r3, [pc, #388]	; (800ee54 <_strtod_l+0xc0c>)
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	e78c      	b.n	800ebee <_strtod_l+0x9a6>
 800ecd4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ee50 <_strtod_l+0xc08>
 800ecd8:	f04f 0800 	mov.w	r8, #0
 800ecdc:	e7e7      	b.n	800ecae <_strtod_l+0xa66>
 800ecde:	4b5c      	ldr	r3, [pc, #368]	; (800ee50 <_strtod_l+0xc08>)
 800ece0:	4640      	mov	r0, r8
 800ece2:	4649      	mov	r1, r9
 800ece4:	2200      	movs	r2, #0
 800ece6:	f7f1 fca7 	bl	8000638 <__aeabi_dmul>
 800ecea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ecec:	4680      	mov	r8, r0
 800ecee:	4689      	mov	r9, r1
 800ecf0:	b933      	cbnz	r3, 800ed00 <_strtod_l+0xab8>
 800ecf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecf6:	9012      	str	r0, [sp, #72]	; 0x48
 800ecf8:	9313      	str	r3, [sp, #76]	; 0x4c
 800ecfa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ecfe:	e7dd      	b.n	800ecbc <_strtod_l+0xa74>
 800ed00:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800ed04:	e7f9      	b.n	800ecfa <_strtod_l+0xab2>
 800ed06:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ed0a:	9b04      	ldr	r3, [sp, #16]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d1a8      	bne.n	800ec62 <_strtod_l+0xa1a>
 800ed10:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ed14:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ed16:	0d1b      	lsrs	r3, r3, #20
 800ed18:	051b      	lsls	r3, r3, #20
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d1a1      	bne.n	800ec62 <_strtod_l+0xa1a>
 800ed1e:	4640      	mov	r0, r8
 800ed20:	4649      	mov	r1, r9
 800ed22:	f7f1 ffe9 	bl	8000cf8 <__aeabi_d2lz>
 800ed26:	f7f1 fc59 	bl	80005dc <__aeabi_l2d>
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	4640      	mov	r0, r8
 800ed30:	4649      	mov	r1, r9
 800ed32:	f7f1 fac9 	bl	80002c8 <__aeabi_dsub>
 800ed36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed3c:	ea43 030a 	orr.w	r3, r3, sl
 800ed40:	4313      	orrs	r3, r2
 800ed42:	4680      	mov	r8, r0
 800ed44:	4689      	mov	r9, r1
 800ed46:	d053      	beq.n	800edf0 <_strtod_l+0xba8>
 800ed48:	a335      	add	r3, pc, #212	; (adr r3, 800ee20 <_strtod_l+0xbd8>)
 800ed4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4e:	f7f1 fee5 	bl	8000b1c <__aeabi_dcmplt>
 800ed52:	2800      	cmp	r0, #0
 800ed54:	f47f acce 	bne.w	800e6f4 <_strtod_l+0x4ac>
 800ed58:	a333      	add	r3, pc, #204	; (adr r3, 800ee28 <_strtod_l+0xbe0>)
 800ed5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5e:	4640      	mov	r0, r8
 800ed60:	4649      	mov	r1, r9
 800ed62:	f7f1 fef9 	bl	8000b58 <__aeabi_dcmpgt>
 800ed66:	2800      	cmp	r0, #0
 800ed68:	f43f af7b 	beq.w	800ec62 <_strtod_l+0xa1a>
 800ed6c:	e4c2      	b.n	800e6f4 <_strtod_l+0x4ac>
 800ed6e:	9b04      	ldr	r3, [sp, #16]
 800ed70:	b333      	cbz	r3, 800edc0 <_strtod_l+0xb78>
 800ed72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ed78:	d822      	bhi.n	800edc0 <_strtod_l+0xb78>
 800ed7a:	a32d      	add	r3, pc, #180	; (adr r3, 800ee30 <_strtod_l+0xbe8>)
 800ed7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed80:	4640      	mov	r0, r8
 800ed82:	4649      	mov	r1, r9
 800ed84:	f7f1 fed4 	bl	8000b30 <__aeabi_dcmple>
 800ed88:	b1a0      	cbz	r0, 800edb4 <_strtod_l+0xb6c>
 800ed8a:	4649      	mov	r1, r9
 800ed8c:	4640      	mov	r0, r8
 800ed8e:	f7f1 ff2b 	bl	8000be8 <__aeabi_d2uiz>
 800ed92:	2801      	cmp	r0, #1
 800ed94:	bf38      	it	cc
 800ed96:	2001      	movcc	r0, #1
 800ed98:	f7f1 fbd4 	bl	8000544 <__aeabi_ui2d>
 800ed9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed9e:	4680      	mov	r8, r0
 800eda0:	4689      	mov	r9, r1
 800eda2:	bb13      	cbnz	r3, 800edea <_strtod_l+0xba2>
 800eda4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eda8:	9014      	str	r0, [sp, #80]	; 0x50
 800edaa:	9315      	str	r3, [sp, #84]	; 0x54
 800edac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800edb0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800edb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800edb8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800edbc:	1a9b      	subs	r3, r3, r2
 800edbe:	930d      	str	r3, [sp, #52]	; 0x34
 800edc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800edc4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800edc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800edcc:	f002 f928 	bl	8011020 <__ulp>
 800edd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800edd4:	ec53 2b10 	vmov	r2, r3, d0
 800edd8:	f7f1 fc2e 	bl	8000638 <__aeabi_dmul>
 800eddc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ede0:	f7f1 fa74 	bl	80002cc <__adddf3>
 800ede4:	4682      	mov	sl, r0
 800ede6:	468b      	mov	fp, r1
 800ede8:	e78f      	b.n	800ed0a <_strtod_l+0xac2>
 800edea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800edee:	e7dd      	b.n	800edac <_strtod_l+0xb64>
 800edf0:	a311      	add	r3, pc, #68	; (adr r3, 800ee38 <_strtod_l+0xbf0>)
 800edf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf6:	f7f1 fe91 	bl	8000b1c <__aeabi_dcmplt>
 800edfa:	e7b4      	b.n	800ed66 <_strtod_l+0xb1e>
 800edfc:	2300      	movs	r3, #0
 800edfe:	930e      	str	r3, [sp, #56]	; 0x38
 800ee00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ee02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ee04:	6013      	str	r3, [r2, #0]
 800ee06:	f7ff ba65 	b.w	800e2d4 <_strtod_l+0x8c>
 800ee0a:	2b65      	cmp	r3, #101	; 0x65
 800ee0c:	f43f ab5d 	beq.w	800e4ca <_strtod_l+0x282>
 800ee10:	2b45      	cmp	r3, #69	; 0x45
 800ee12:	f43f ab5a 	beq.w	800e4ca <_strtod_l+0x282>
 800ee16:	2201      	movs	r2, #1
 800ee18:	f7ff bb92 	b.w	800e540 <_strtod_l+0x2f8>
 800ee1c:	f3af 8000 	nop.w
 800ee20:	94a03595 	.word	0x94a03595
 800ee24:	3fdfffff 	.word	0x3fdfffff
 800ee28:	35afe535 	.word	0x35afe535
 800ee2c:	3fe00000 	.word	0x3fe00000
 800ee30:	ffc00000 	.word	0xffc00000
 800ee34:	41dfffff 	.word	0x41dfffff
 800ee38:	94a03595 	.word	0x94a03595
 800ee3c:	3fcfffff 	.word	0x3fcfffff
 800ee40:	3ff00000 	.word	0x3ff00000
 800ee44:	7ff00000 	.word	0x7ff00000
 800ee48:	7fe00000 	.word	0x7fe00000
 800ee4c:	7c9fffff 	.word	0x7c9fffff
 800ee50:	3fe00000 	.word	0x3fe00000
 800ee54:	bff00000 	.word	0xbff00000
 800ee58:	7fefffff 	.word	0x7fefffff

0800ee5c <_strtod_r>:
 800ee5c:	4b01      	ldr	r3, [pc, #4]	; (800ee64 <_strtod_r+0x8>)
 800ee5e:	f7ff b9f3 	b.w	800e248 <_strtod_l>
 800ee62:	bf00      	nop
 800ee64:	2000007c 	.word	0x2000007c

0800ee68 <_strtol_l.isra.0>:
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee6e:	d001      	beq.n	800ee74 <_strtol_l.isra.0+0xc>
 800ee70:	2b24      	cmp	r3, #36	; 0x24
 800ee72:	d906      	bls.n	800ee82 <_strtol_l.isra.0+0x1a>
 800ee74:	f7fe f942 	bl	800d0fc <__errno>
 800ee78:	2316      	movs	r3, #22
 800ee7a:	6003      	str	r3, [r0, #0]
 800ee7c:	2000      	movs	r0, #0
 800ee7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee82:	4f3a      	ldr	r7, [pc, #232]	; (800ef6c <_strtol_l.isra.0+0x104>)
 800ee84:	468e      	mov	lr, r1
 800ee86:	4676      	mov	r6, lr
 800ee88:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ee8c:	5de5      	ldrb	r5, [r4, r7]
 800ee8e:	f015 0508 	ands.w	r5, r5, #8
 800ee92:	d1f8      	bne.n	800ee86 <_strtol_l.isra.0+0x1e>
 800ee94:	2c2d      	cmp	r4, #45	; 0x2d
 800ee96:	d134      	bne.n	800ef02 <_strtol_l.isra.0+0x9a>
 800ee98:	f89e 4000 	ldrb.w	r4, [lr]
 800ee9c:	f04f 0801 	mov.w	r8, #1
 800eea0:	f106 0e02 	add.w	lr, r6, #2
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d05c      	beq.n	800ef62 <_strtol_l.isra.0+0xfa>
 800eea8:	2b10      	cmp	r3, #16
 800eeaa:	d10c      	bne.n	800eec6 <_strtol_l.isra.0+0x5e>
 800eeac:	2c30      	cmp	r4, #48	; 0x30
 800eeae:	d10a      	bne.n	800eec6 <_strtol_l.isra.0+0x5e>
 800eeb0:	f89e 4000 	ldrb.w	r4, [lr]
 800eeb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eeb8:	2c58      	cmp	r4, #88	; 0x58
 800eeba:	d14d      	bne.n	800ef58 <_strtol_l.isra.0+0xf0>
 800eebc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800eec0:	2310      	movs	r3, #16
 800eec2:	f10e 0e02 	add.w	lr, lr, #2
 800eec6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800eeca:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800eece:	2600      	movs	r6, #0
 800eed0:	fbbc f9f3 	udiv	r9, ip, r3
 800eed4:	4635      	mov	r5, r6
 800eed6:	fb03 ca19 	mls	sl, r3, r9, ip
 800eeda:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800eede:	2f09      	cmp	r7, #9
 800eee0:	d818      	bhi.n	800ef14 <_strtol_l.isra.0+0xac>
 800eee2:	463c      	mov	r4, r7
 800eee4:	42a3      	cmp	r3, r4
 800eee6:	dd24      	ble.n	800ef32 <_strtol_l.isra.0+0xca>
 800eee8:	2e00      	cmp	r6, #0
 800eeea:	db1f      	blt.n	800ef2c <_strtol_l.isra.0+0xc4>
 800eeec:	45a9      	cmp	r9, r5
 800eeee:	d31d      	bcc.n	800ef2c <_strtol_l.isra.0+0xc4>
 800eef0:	d101      	bne.n	800eef6 <_strtol_l.isra.0+0x8e>
 800eef2:	45a2      	cmp	sl, r4
 800eef4:	db1a      	blt.n	800ef2c <_strtol_l.isra.0+0xc4>
 800eef6:	fb05 4503 	mla	r5, r5, r3, r4
 800eefa:	2601      	movs	r6, #1
 800eefc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ef00:	e7eb      	b.n	800eeda <_strtol_l.isra.0+0x72>
 800ef02:	2c2b      	cmp	r4, #43	; 0x2b
 800ef04:	bf08      	it	eq
 800ef06:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ef0a:	46a8      	mov	r8, r5
 800ef0c:	bf08      	it	eq
 800ef0e:	f106 0e02 	addeq.w	lr, r6, #2
 800ef12:	e7c7      	b.n	800eea4 <_strtol_l.isra.0+0x3c>
 800ef14:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ef18:	2f19      	cmp	r7, #25
 800ef1a:	d801      	bhi.n	800ef20 <_strtol_l.isra.0+0xb8>
 800ef1c:	3c37      	subs	r4, #55	; 0x37
 800ef1e:	e7e1      	b.n	800eee4 <_strtol_l.isra.0+0x7c>
 800ef20:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ef24:	2f19      	cmp	r7, #25
 800ef26:	d804      	bhi.n	800ef32 <_strtol_l.isra.0+0xca>
 800ef28:	3c57      	subs	r4, #87	; 0x57
 800ef2a:	e7db      	b.n	800eee4 <_strtol_l.isra.0+0x7c>
 800ef2c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800ef30:	e7e4      	b.n	800eefc <_strtol_l.isra.0+0x94>
 800ef32:	2e00      	cmp	r6, #0
 800ef34:	da05      	bge.n	800ef42 <_strtol_l.isra.0+0xda>
 800ef36:	2322      	movs	r3, #34	; 0x22
 800ef38:	6003      	str	r3, [r0, #0]
 800ef3a:	4665      	mov	r5, ip
 800ef3c:	b942      	cbnz	r2, 800ef50 <_strtol_l.isra.0+0xe8>
 800ef3e:	4628      	mov	r0, r5
 800ef40:	e79d      	b.n	800ee7e <_strtol_l.isra.0+0x16>
 800ef42:	f1b8 0f00 	cmp.w	r8, #0
 800ef46:	d000      	beq.n	800ef4a <_strtol_l.isra.0+0xe2>
 800ef48:	426d      	negs	r5, r5
 800ef4a:	2a00      	cmp	r2, #0
 800ef4c:	d0f7      	beq.n	800ef3e <_strtol_l.isra.0+0xd6>
 800ef4e:	b10e      	cbz	r6, 800ef54 <_strtol_l.isra.0+0xec>
 800ef50:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800ef54:	6011      	str	r1, [r2, #0]
 800ef56:	e7f2      	b.n	800ef3e <_strtol_l.isra.0+0xd6>
 800ef58:	2430      	movs	r4, #48	; 0x30
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1b3      	bne.n	800eec6 <_strtol_l.isra.0+0x5e>
 800ef5e:	2308      	movs	r3, #8
 800ef60:	e7b1      	b.n	800eec6 <_strtol_l.isra.0+0x5e>
 800ef62:	2c30      	cmp	r4, #48	; 0x30
 800ef64:	d0a4      	beq.n	800eeb0 <_strtol_l.isra.0+0x48>
 800ef66:	230a      	movs	r3, #10
 800ef68:	e7ad      	b.n	800eec6 <_strtol_l.isra.0+0x5e>
 800ef6a:	bf00      	nop
 800ef6c:	08013d09 	.word	0x08013d09

0800ef70 <_strtol_r>:
 800ef70:	f7ff bf7a 	b.w	800ee68 <_strtol_l.isra.0>

0800ef74 <__swbuf_r>:
 800ef74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef76:	460e      	mov	r6, r1
 800ef78:	4614      	mov	r4, r2
 800ef7a:	4605      	mov	r5, r0
 800ef7c:	b118      	cbz	r0, 800ef86 <__swbuf_r+0x12>
 800ef7e:	6983      	ldr	r3, [r0, #24]
 800ef80:	b90b      	cbnz	r3, 800ef86 <__swbuf_r+0x12>
 800ef82:	f001 f84b 	bl	801001c <__sinit>
 800ef86:	4b21      	ldr	r3, [pc, #132]	; (800f00c <__swbuf_r+0x98>)
 800ef88:	429c      	cmp	r4, r3
 800ef8a:	d12b      	bne.n	800efe4 <__swbuf_r+0x70>
 800ef8c:	686c      	ldr	r4, [r5, #4]
 800ef8e:	69a3      	ldr	r3, [r4, #24]
 800ef90:	60a3      	str	r3, [r4, #8]
 800ef92:	89a3      	ldrh	r3, [r4, #12]
 800ef94:	071a      	lsls	r2, r3, #28
 800ef96:	d52f      	bpl.n	800eff8 <__swbuf_r+0x84>
 800ef98:	6923      	ldr	r3, [r4, #16]
 800ef9a:	b36b      	cbz	r3, 800eff8 <__swbuf_r+0x84>
 800ef9c:	6923      	ldr	r3, [r4, #16]
 800ef9e:	6820      	ldr	r0, [r4, #0]
 800efa0:	1ac0      	subs	r0, r0, r3
 800efa2:	6963      	ldr	r3, [r4, #20]
 800efa4:	b2f6      	uxtb	r6, r6
 800efa6:	4283      	cmp	r3, r0
 800efa8:	4637      	mov	r7, r6
 800efaa:	dc04      	bgt.n	800efb6 <__swbuf_r+0x42>
 800efac:	4621      	mov	r1, r4
 800efae:	4628      	mov	r0, r5
 800efb0:	f000 ffa0 	bl	800fef4 <_fflush_r>
 800efb4:	bb30      	cbnz	r0, 800f004 <__swbuf_r+0x90>
 800efb6:	68a3      	ldr	r3, [r4, #8]
 800efb8:	3b01      	subs	r3, #1
 800efba:	60a3      	str	r3, [r4, #8]
 800efbc:	6823      	ldr	r3, [r4, #0]
 800efbe:	1c5a      	adds	r2, r3, #1
 800efc0:	6022      	str	r2, [r4, #0]
 800efc2:	701e      	strb	r6, [r3, #0]
 800efc4:	6963      	ldr	r3, [r4, #20]
 800efc6:	3001      	adds	r0, #1
 800efc8:	4283      	cmp	r3, r0
 800efca:	d004      	beq.n	800efd6 <__swbuf_r+0x62>
 800efcc:	89a3      	ldrh	r3, [r4, #12]
 800efce:	07db      	lsls	r3, r3, #31
 800efd0:	d506      	bpl.n	800efe0 <__swbuf_r+0x6c>
 800efd2:	2e0a      	cmp	r6, #10
 800efd4:	d104      	bne.n	800efe0 <__swbuf_r+0x6c>
 800efd6:	4621      	mov	r1, r4
 800efd8:	4628      	mov	r0, r5
 800efda:	f000 ff8b 	bl	800fef4 <_fflush_r>
 800efde:	b988      	cbnz	r0, 800f004 <__swbuf_r+0x90>
 800efe0:	4638      	mov	r0, r7
 800efe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efe4:	4b0a      	ldr	r3, [pc, #40]	; (800f010 <__swbuf_r+0x9c>)
 800efe6:	429c      	cmp	r4, r3
 800efe8:	d101      	bne.n	800efee <__swbuf_r+0x7a>
 800efea:	68ac      	ldr	r4, [r5, #8]
 800efec:	e7cf      	b.n	800ef8e <__swbuf_r+0x1a>
 800efee:	4b09      	ldr	r3, [pc, #36]	; (800f014 <__swbuf_r+0xa0>)
 800eff0:	429c      	cmp	r4, r3
 800eff2:	bf08      	it	eq
 800eff4:	68ec      	ldreq	r4, [r5, #12]
 800eff6:	e7ca      	b.n	800ef8e <__swbuf_r+0x1a>
 800eff8:	4621      	mov	r1, r4
 800effa:	4628      	mov	r0, r5
 800effc:	f000 f80c 	bl	800f018 <__swsetup_r>
 800f000:	2800      	cmp	r0, #0
 800f002:	d0cb      	beq.n	800ef9c <__swbuf_r+0x28>
 800f004:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f008:	e7ea      	b.n	800efe0 <__swbuf_r+0x6c>
 800f00a:	bf00      	nop
 800f00c:	08013ec0 	.word	0x08013ec0
 800f010:	08013ee0 	.word	0x08013ee0
 800f014:	08013ea0 	.word	0x08013ea0

0800f018 <__swsetup_r>:
 800f018:	4b32      	ldr	r3, [pc, #200]	; (800f0e4 <__swsetup_r+0xcc>)
 800f01a:	b570      	push	{r4, r5, r6, lr}
 800f01c:	681d      	ldr	r5, [r3, #0]
 800f01e:	4606      	mov	r6, r0
 800f020:	460c      	mov	r4, r1
 800f022:	b125      	cbz	r5, 800f02e <__swsetup_r+0x16>
 800f024:	69ab      	ldr	r3, [r5, #24]
 800f026:	b913      	cbnz	r3, 800f02e <__swsetup_r+0x16>
 800f028:	4628      	mov	r0, r5
 800f02a:	f000 fff7 	bl	801001c <__sinit>
 800f02e:	4b2e      	ldr	r3, [pc, #184]	; (800f0e8 <__swsetup_r+0xd0>)
 800f030:	429c      	cmp	r4, r3
 800f032:	d10f      	bne.n	800f054 <__swsetup_r+0x3c>
 800f034:	686c      	ldr	r4, [r5, #4]
 800f036:	89a3      	ldrh	r3, [r4, #12]
 800f038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f03c:	0719      	lsls	r1, r3, #28
 800f03e:	d42c      	bmi.n	800f09a <__swsetup_r+0x82>
 800f040:	06dd      	lsls	r5, r3, #27
 800f042:	d411      	bmi.n	800f068 <__swsetup_r+0x50>
 800f044:	2309      	movs	r3, #9
 800f046:	6033      	str	r3, [r6, #0]
 800f048:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f04c:	81a3      	strh	r3, [r4, #12]
 800f04e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f052:	e03e      	b.n	800f0d2 <__swsetup_r+0xba>
 800f054:	4b25      	ldr	r3, [pc, #148]	; (800f0ec <__swsetup_r+0xd4>)
 800f056:	429c      	cmp	r4, r3
 800f058:	d101      	bne.n	800f05e <__swsetup_r+0x46>
 800f05a:	68ac      	ldr	r4, [r5, #8]
 800f05c:	e7eb      	b.n	800f036 <__swsetup_r+0x1e>
 800f05e:	4b24      	ldr	r3, [pc, #144]	; (800f0f0 <__swsetup_r+0xd8>)
 800f060:	429c      	cmp	r4, r3
 800f062:	bf08      	it	eq
 800f064:	68ec      	ldreq	r4, [r5, #12]
 800f066:	e7e6      	b.n	800f036 <__swsetup_r+0x1e>
 800f068:	0758      	lsls	r0, r3, #29
 800f06a:	d512      	bpl.n	800f092 <__swsetup_r+0x7a>
 800f06c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f06e:	b141      	cbz	r1, 800f082 <__swsetup_r+0x6a>
 800f070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f074:	4299      	cmp	r1, r3
 800f076:	d002      	beq.n	800f07e <__swsetup_r+0x66>
 800f078:	4630      	mov	r0, r6
 800f07a:	f7fe f897 	bl	800d1ac <_free_r>
 800f07e:	2300      	movs	r3, #0
 800f080:	6363      	str	r3, [r4, #52]	; 0x34
 800f082:	89a3      	ldrh	r3, [r4, #12]
 800f084:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f088:	81a3      	strh	r3, [r4, #12]
 800f08a:	2300      	movs	r3, #0
 800f08c:	6063      	str	r3, [r4, #4]
 800f08e:	6923      	ldr	r3, [r4, #16]
 800f090:	6023      	str	r3, [r4, #0]
 800f092:	89a3      	ldrh	r3, [r4, #12]
 800f094:	f043 0308 	orr.w	r3, r3, #8
 800f098:	81a3      	strh	r3, [r4, #12]
 800f09a:	6923      	ldr	r3, [r4, #16]
 800f09c:	b94b      	cbnz	r3, 800f0b2 <__swsetup_r+0x9a>
 800f09e:	89a3      	ldrh	r3, [r4, #12]
 800f0a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0a8:	d003      	beq.n	800f0b2 <__swsetup_r+0x9a>
 800f0aa:	4621      	mov	r1, r4
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	f001 fbed 	bl	801088c <__smakebuf_r>
 800f0b2:	89a0      	ldrh	r0, [r4, #12]
 800f0b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0b8:	f010 0301 	ands.w	r3, r0, #1
 800f0bc:	d00a      	beq.n	800f0d4 <__swsetup_r+0xbc>
 800f0be:	2300      	movs	r3, #0
 800f0c0:	60a3      	str	r3, [r4, #8]
 800f0c2:	6963      	ldr	r3, [r4, #20]
 800f0c4:	425b      	negs	r3, r3
 800f0c6:	61a3      	str	r3, [r4, #24]
 800f0c8:	6923      	ldr	r3, [r4, #16]
 800f0ca:	b943      	cbnz	r3, 800f0de <__swsetup_r+0xc6>
 800f0cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f0d0:	d1ba      	bne.n	800f048 <__swsetup_r+0x30>
 800f0d2:	bd70      	pop	{r4, r5, r6, pc}
 800f0d4:	0781      	lsls	r1, r0, #30
 800f0d6:	bf58      	it	pl
 800f0d8:	6963      	ldrpl	r3, [r4, #20]
 800f0da:	60a3      	str	r3, [r4, #8]
 800f0dc:	e7f4      	b.n	800f0c8 <__swsetup_r+0xb0>
 800f0de:	2000      	movs	r0, #0
 800f0e0:	e7f7      	b.n	800f0d2 <__swsetup_r+0xba>
 800f0e2:	bf00      	nop
 800f0e4:	20000014 	.word	0x20000014
 800f0e8:	08013ec0 	.word	0x08013ec0
 800f0ec:	08013ee0 	.word	0x08013ee0
 800f0f0:	08013ea0 	.word	0x08013ea0

0800f0f4 <quorem>:
 800f0f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f8:	6903      	ldr	r3, [r0, #16]
 800f0fa:	690c      	ldr	r4, [r1, #16]
 800f0fc:	42a3      	cmp	r3, r4
 800f0fe:	4607      	mov	r7, r0
 800f100:	f2c0 8081 	blt.w	800f206 <quorem+0x112>
 800f104:	3c01      	subs	r4, #1
 800f106:	f101 0814 	add.w	r8, r1, #20
 800f10a:	f100 0514 	add.w	r5, r0, #20
 800f10e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f112:	9301      	str	r3, [sp, #4]
 800f114:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f118:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f11c:	3301      	adds	r3, #1
 800f11e:	429a      	cmp	r2, r3
 800f120:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f124:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f128:	fbb2 f6f3 	udiv	r6, r2, r3
 800f12c:	d331      	bcc.n	800f192 <quorem+0x9e>
 800f12e:	f04f 0e00 	mov.w	lr, #0
 800f132:	4640      	mov	r0, r8
 800f134:	46ac      	mov	ip, r5
 800f136:	46f2      	mov	sl, lr
 800f138:	f850 2b04 	ldr.w	r2, [r0], #4
 800f13c:	b293      	uxth	r3, r2
 800f13e:	fb06 e303 	mla	r3, r6, r3, lr
 800f142:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f146:	b29b      	uxth	r3, r3
 800f148:	ebaa 0303 	sub.w	r3, sl, r3
 800f14c:	0c12      	lsrs	r2, r2, #16
 800f14e:	f8dc a000 	ldr.w	sl, [ip]
 800f152:	fb06 e202 	mla	r2, r6, r2, lr
 800f156:	fa13 f38a 	uxtah	r3, r3, sl
 800f15a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f15e:	fa1f fa82 	uxth.w	sl, r2
 800f162:	f8dc 2000 	ldr.w	r2, [ip]
 800f166:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f16a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f16e:	b29b      	uxth	r3, r3
 800f170:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f174:	4581      	cmp	r9, r0
 800f176:	f84c 3b04 	str.w	r3, [ip], #4
 800f17a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f17e:	d2db      	bcs.n	800f138 <quorem+0x44>
 800f180:	f855 300b 	ldr.w	r3, [r5, fp]
 800f184:	b92b      	cbnz	r3, 800f192 <quorem+0x9e>
 800f186:	9b01      	ldr	r3, [sp, #4]
 800f188:	3b04      	subs	r3, #4
 800f18a:	429d      	cmp	r5, r3
 800f18c:	461a      	mov	r2, r3
 800f18e:	d32e      	bcc.n	800f1ee <quorem+0xfa>
 800f190:	613c      	str	r4, [r7, #16]
 800f192:	4638      	mov	r0, r7
 800f194:	f001 fea0 	bl	8010ed8 <__mcmp>
 800f198:	2800      	cmp	r0, #0
 800f19a:	db24      	blt.n	800f1e6 <quorem+0xf2>
 800f19c:	3601      	adds	r6, #1
 800f19e:	4628      	mov	r0, r5
 800f1a0:	f04f 0c00 	mov.w	ip, #0
 800f1a4:	f858 2b04 	ldr.w	r2, [r8], #4
 800f1a8:	f8d0 e000 	ldr.w	lr, [r0]
 800f1ac:	b293      	uxth	r3, r2
 800f1ae:	ebac 0303 	sub.w	r3, ip, r3
 800f1b2:	0c12      	lsrs	r2, r2, #16
 800f1b4:	fa13 f38e 	uxtah	r3, r3, lr
 800f1b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f1bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1c6:	45c1      	cmp	r9, r8
 800f1c8:	f840 3b04 	str.w	r3, [r0], #4
 800f1cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f1d0:	d2e8      	bcs.n	800f1a4 <quorem+0xb0>
 800f1d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f1d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f1da:	b922      	cbnz	r2, 800f1e6 <quorem+0xf2>
 800f1dc:	3b04      	subs	r3, #4
 800f1de:	429d      	cmp	r5, r3
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	d30a      	bcc.n	800f1fa <quorem+0x106>
 800f1e4:	613c      	str	r4, [r7, #16]
 800f1e6:	4630      	mov	r0, r6
 800f1e8:	b003      	add	sp, #12
 800f1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ee:	6812      	ldr	r2, [r2, #0]
 800f1f0:	3b04      	subs	r3, #4
 800f1f2:	2a00      	cmp	r2, #0
 800f1f4:	d1cc      	bne.n	800f190 <quorem+0x9c>
 800f1f6:	3c01      	subs	r4, #1
 800f1f8:	e7c7      	b.n	800f18a <quorem+0x96>
 800f1fa:	6812      	ldr	r2, [r2, #0]
 800f1fc:	3b04      	subs	r3, #4
 800f1fe:	2a00      	cmp	r2, #0
 800f200:	d1f0      	bne.n	800f1e4 <quorem+0xf0>
 800f202:	3c01      	subs	r4, #1
 800f204:	e7eb      	b.n	800f1de <quorem+0xea>
 800f206:	2000      	movs	r0, #0
 800f208:	e7ee      	b.n	800f1e8 <quorem+0xf4>
 800f20a:	0000      	movs	r0, r0
 800f20c:	0000      	movs	r0, r0
	...

0800f210 <_dtoa_r>:
 800f210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f214:	ed2d 8b02 	vpush	{d8}
 800f218:	ec57 6b10 	vmov	r6, r7, d0
 800f21c:	b095      	sub	sp, #84	; 0x54
 800f21e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f220:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f224:	9105      	str	r1, [sp, #20]
 800f226:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f22a:	4604      	mov	r4, r0
 800f22c:	9209      	str	r2, [sp, #36]	; 0x24
 800f22e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f230:	b975      	cbnz	r5, 800f250 <_dtoa_r+0x40>
 800f232:	2010      	movs	r0, #16
 800f234:	f7fd ff8c 	bl	800d150 <malloc>
 800f238:	4602      	mov	r2, r0
 800f23a:	6260      	str	r0, [r4, #36]	; 0x24
 800f23c:	b920      	cbnz	r0, 800f248 <_dtoa_r+0x38>
 800f23e:	4bb2      	ldr	r3, [pc, #712]	; (800f508 <_dtoa_r+0x2f8>)
 800f240:	21ea      	movs	r1, #234	; 0xea
 800f242:	48b2      	ldr	r0, [pc, #712]	; (800f50c <_dtoa_r+0x2fc>)
 800f244:	f002 fb6c 	bl	8011920 <__assert_func>
 800f248:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f24c:	6005      	str	r5, [r0, #0]
 800f24e:	60c5      	str	r5, [r0, #12]
 800f250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f252:	6819      	ldr	r1, [r3, #0]
 800f254:	b151      	cbz	r1, 800f26c <_dtoa_r+0x5c>
 800f256:	685a      	ldr	r2, [r3, #4]
 800f258:	604a      	str	r2, [r1, #4]
 800f25a:	2301      	movs	r3, #1
 800f25c:	4093      	lsls	r3, r2
 800f25e:	608b      	str	r3, [r1, #8]
 800f260:	4620      	mov	r0, r4
 800f262:	f001 fbb1 	bl	80109c8 <_Bfree>
 800f266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f268:	2200      	movs	r2, #0
 800f26a:	601a      	str	r2, [r3, #0]
 800f26c:	1e3b      	subs	r3, r7, #0
 800f26e:	bfb9      	ittee	lt
 800f270:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f274:	9303      	strlt	r3, [sp, #12]
 800f276:	2300      	movge	r3, #0
 800f278:	f8c8 3000 	strge.w	r3, [r8]
 800f27c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f280:	4ba3      	ldr	r3, [pc, #652]	; (800f510 <_dtoa_r+0x300>)
 800f282:	bfbc      	itt	lt
 800f284:	2201      	movlt	r2, #1
 800f286:	f8c8 2000 	strlt.w	r2, [r8]
 800f28a:	ea33 0309 	bics.w	r3, r3, r9
 800f28e:	d11b      	bne.n	800f2c8 <_dtoa_r+0xb8>
 800f290:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f292:	f242 730f 	movw	r3, #9999	; 0x270f
 800f296:	6013      	str	r3, [r2, #0]
 800f298:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f29c:	4333      	orrs	r3, r6
 800f29e:	f000 857a 	beq.w	800fd96 <_dtoa_r+0xb86>
 800f2a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2a4:	b963      	cbnz	r3, 800f2c0 <_dtoa_r+0xb0>
 800f2a6:	4b9b      	ldr	r3, [pc, #620]	; (800f514 <_dtoa_r+0x304>)
 800f2a8:	e024      	b.n	800f2f4 <_dtoa_r+0xe4>
 800f2aa:	4b9b      	ldr	r3, [pc, #620]	; (800f518 <_dtoa_r+0x308>)
 800f2ac:	9300      	str	r3, [sp, #0]
 800f2ae:	3308      	adds	r3, #8
 800f2b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f2b2:	6013      	str	r3, [r2, #0]
 800f2b4:	9800      	ldr	r0, [sp, #0]
 800f2b6:	b015      	add	sp, #84	; 0x54
 800f2b8:	ecbd 8b02 	vpop	{d8}
 800f2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2c0:	4b94      	ldr	r3, [pc, #592]	; (800f514 <_dtoa_r+0x304>)
 800f2c2:	9300      	str	r3, [sp, #0]
 800f2c4:	3303      	adds	r3, #3
 800f2c6:	e7f3      	b.n	800f2b0 <_dtoa_r+0xa0>
 800f2c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	ec51 0b17 	vmov	r0, r1, d7
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f2d8:	f7f1 fc16 	bl	8000b08 <__aeabi_dcmpeq>
 800f2dc:	4680      	mov	r8, r0
 800f2de:	b158      	cbz	r0, 800f2f8 <_dtoa_r+0xe8>
 800f2e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	6013      	str	r3, [r2, #0]
 800f2e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	f000 8551 	beq.w	800fd90 <_dtoa_r+0xb80>
 800f2ee:	488b      	ldr	r0, [pc, #556]	; (800f51c <_dtoa_r+0x30c>)
 800f2f0:	6018      	str	r0, [r3, #0]
 800f2f2:	1e43      	subs	r3, r0, #1
 800f2f4:	9300      	str	r3, [sp, #0]
 800f2f6:	e7dd      	b.n	800f2b4 <_dtoa_r+0xa4>
 800f2f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f2fc:	aa12      	add	r2, sp, #72	; 0x48
 800f2fe:	a913      	add	r1, sp, #76	; 0x4c
 800f300:	4620      	mov	r0, r4
 800f302:	f001 ff09 	bl	8011118 <__d2b>
 800f306:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f30a:	4683      	mov	fp, r0
 800f30c:	2d00      	cmp	r5, #0
 800f30e:	d07c      	beq.n	800f40a <_dtoa_r+0x1fa>
 800f310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f312:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f316:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f31a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f31e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f322:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f32a:	4b7d      	ldr	r3, [pc, #500]	; (800f520 <_dtoa_r+0x310>)
 800f32c:	2200      	movs	r2, #0
 800f32e:	4630      	mov	r0, r6
 800f330:	4639      	mov	r1, r7
 800f332:	f7f0 ffc9 	bl	80002c8 <__aeabi_dsub>
 800f336:	a36e      	add	r3, pc, #440	; (adr r3, 800f4f0 <_dtoa_r+0x2e0>)
 800f338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33c:	f7f1 f97c 	bl	8000638 <__aeabi_dmul>
 800f340:	a36d      	add	r3, pc, #436	; (adr r3, 800f4f8 <_dtoa_r+0x2e8>)
 800f342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f346:	f7f0 ffc1 	bl	80002cc <__adddf3>
 800f34a:	4606      	mov	r6, r0
 800f34c:	4628      	mov	r0, r5
 800f34e:	460f      	mov	r7, r1
 800f350:	f7f1 f908 	bl	8000564 <__aeabi_i2d>
 800f354:	a36a      	add	r3, pc, #424	; (adr r3, 800f500 <_dtoa_r+0x2f0>)
 800f356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f35a:	f7f1 f96d 	bl	8000638 <__aeabi_dmul>
 800f35e:	4602      	mov	r2, r0
 800f360:	460b      	mov	r3, r1
 800f362:	4630      	mov	r0, r6
 800f364:	4639      	mov	r1, r7
 800f366:	f7f0 ffb1 	bl	80002cc <__adddf3>
 800f36a:	4606      	mov	r6, r0
 800f36c:	460f      	mov	r7, r1
 800f36e:	f7f1 fc13 	bl	8000b98 <__aeabi_d2iz>
 800f372:	2200      	movs	r2, #0
 800f374:	4682      	mov	sl, r0
 800f376:	2300      	movs	r3, #0
 800f378:	4630      	mov	r0, r6
 800f37a:	4639      	mov	r1, r7
 800f37c:	f7f1 fbce 	bl	8000b1c <__aeabi_dcmplt>
 800f380:	b148      	cbz	r0, 800f396 <_dtoa_r+0x186>
 800f382:	4650      	mov	r0, sl
 800f384:	f7f1 f8ee 	bl	8000564 <__aeabi_i2d>
 800f388:	4632      	mov	r2, r6
 800f38a:	463b      	mov	r3, r7
 800f38c:	f7f1 fbbc 	bl	8000b08 <__aeabi_dcmpeq>
 800f390:	b908      	cbnz	r0, 800f396 <_dtoa_r+0x186>
 800f392:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f396:	f1ba 0f16 	cmp.w	sl, #22
 800f39a:	d854      	bhi.n	800f446 <_dtoa_r+0x236>
 800f39c:	4b61      	ldr	r3, [pc, #388]	; (800f524 <_dtoa_r+0x314>)
 800f39e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f3aa:	f7f1 fbb7 	bl	8000b1c <__aeabi_dcmplt>
 800f3ae:	2800      	cmp	r0, #0
 800f3b0:	d04b      	beq.n	800f44a <_dtoa_r+0x23a>
 800f3b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	930e      	str	r3, [sp, #56]	; 0x38
 800f3ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f3bc:	1b5d      	subs	r5, r3, r5
 800f3be:	1e6b      	subs	r3, r5, #1
 800f3c0:	9304      	str	r3, [sp, #16]
 800f3c2:	bf43      	ittte	mi
 800f3c4:	2300      	movmi	r3, #0
 800f3c6:	f1c5 0801 	rsbmi	r8, r5, #1
 800f3ca:	9304      	strmi	r3, [sp, #16]
 800f3cc:	f04f 0800 	movpl.w	r8, #0
 800f3d0:	f1ba 0f00 	cmp.w	sl, #0
 800f3d4:	db3b      	blt.n	800f44e <_dtoa_r+0x23e>
 800f3d6:	9b04      	ldr	r3, [sp, #16]
 800f3d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f3dc:	4453      	add	r3, sl
 800f3de:	9304      	str	r3, [sp, #16]
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	9306      	str	r3, [sp, #24]
 800f3e4:	9b05      	ldr	r3, [sp, #20]
 800f3e6:	2b09      	cmp	r3, #9
 800f3e8:	d869      	bhi.n	800f4be <_dtoa_r+0x2ae>
 800f3ea:	2b05      	cmp	r3, #5
 800f3ec:	bfc4      	itt	gt
 800f3ee:	3b04      	subgt	r3, #4
 800f3f0:	9305      	strgt	r3, [sp, #20]
 800f3f2:	9b05      	ldr	r3, [sp, #20]
 800f3f4:	f1a3 0302 	sub.w	r3, r3, #2
 800f3f8:	bfcc      	ite	gt
 800f3fa:	2500      	movgt	r5, #0
 800f3fc:	2501      	movle	r5, #1
 800f3fe:	2b03      	cmp	r3, #3
 800f400:	d869      	bhi.n	800f4d6 <_dtoa_r+0x2c6>
 800f402:	e8df f003 	tbb	[pc, r3]
 800f406:	4e2c      	.short	0x4e2c
 800f408:	5a4c      	.short	0x5a4c
 800f40a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f40e:	441d      	add	r5, r3
 800f410:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f414:	2b20      	cmp	r3, #32
 800f416:	bfc1      	itttt	gt
 800f418:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f41c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f420:	fa09 f303 	lslgt.w	r3, r9, r3
 800f424:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f428:	bfda      	itte	le
 800f42a:	f1c3 0320 	rsble	r3, r3, #32
 800f42e:	fa06 f003 	lslle.w	r0, r6, r3
 800f432:	4318      	orrgt	r0, r3
 800f434:	f7f1 f886 	bl	8000544 <__aeabi_ui2d>
 800f438:	2301      	movs	r3, #1
 800f43a:	4606      	mov	r6, r0
 800f43c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f440:	3d01      	subs	r5, #1
 800f442:	9310      	str	r3, [sp, #64]	; 0x40
 800f444:	e771      	b.n	800f32a <_dtoa_r+0x11a>
 800f446:	2301      	movs	r3, #1
 800f448:	e7b6      	b.n	800f3b8 <_dtoa_r+0x1a8>
 800f44a:	900e      	str	r0, [sp, #56]	; 0x38
 800f44c:	e7b5      	b.n	800f3ba <_dtoa_r+0x1aa>
 800f44e:	f1ca 0300 	rsb	r3, sl, #0
 800f452:	9306      	str	r3, [sp, #24]
 800f454:	2300      	movs	r3, #0
 800f456:	eba8 080a 	sub.w	r8, r8, sl
 800f45a:	930d      	str	r3, [sp, #52]	; 0x34
 800f45c:	e7c2      	b.n	800f3e4 <_dtoa_r+0x1d4>
 800f45e:	2300      	movs	r3, #0
 800f460:	9308      	str	r3, [sp, #32]
 800f462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f464:	2b00      	cmp	r3, #0
 800f466:	dc39      	bgt.n	800f4dc <_dtoa_r+0x2cc>
 800f468:	f04f 0901 	mov.w	r9, #1
 800f46c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f470:	464b      	mov	r3, r9
 800f472:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f476:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f478:	2200      	movs	r2, #0
 800f47a:	6042      	str	r2, [r0, #4]
 800f47c:	2204      	movs	r2, #4
 800f47e:	f102 0614 	add.w	r6, r2, #20
 800f482:	429e      	cmp	r6, r3
 800f484:	6841      	ldr	r1, [r0, #4]
 800f486:	d92f      	bls.n	800f4e8 <_dtoa_r+0x2d8>
 800f488:	4620      	mov	r0, r4
 800f48a:	f001 fa5d 	bl	8010948 <_Balloc>
 800f48e:	9000      	str	r0, [sp, #0]
 800f490:	2800      	cmp	r0, #0
 800f492:	d14b      	bne.n	800f52c <_dtoa_r+0x31c>
 800f494:	4b24      	ldr	r3, [pc, #144]	; (800f528 <_dtoa_r+0x318>)
 800f496:	4602      	mov	r2, r0
 800f498:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f49c:	e6d1      	b.n	800f242 <_dtoa_r+0x32>
 800f49e:	2301      	movs	r3, #1
 800f4a0:	e7de      	b.n	800f460 <_dtoa_r+0x250>
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	9308      	str	r3, [sp, #32]
 800f4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4a8:	eb0a 0903 	add.w	r9, sl, r3
 800f4ac:	f109 0301 	add.w	r3, r9, #1
 800f4b0:	2b01      	cmp	r3, #1
 800f4b2:	9301      	str	r3, [sp, #4]
 800f4b4:	bfb8      	it	lt
 800f4b6:	2301      	movlt	r3, #1
 800f4b8:	e7dd      	b.n	800f476 <_dtoa_r+0x266>
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	e7f2      	b.n	800f4a4 <_dtoa_r+0x294>
 800f4be:	2501      	movs	r5, #1
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	9305      	str	r3, [sp, #20]
 800f4c4:	9508      	str	r5, [sp, #32]
 800f4c6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	f8cd 9004 	str.w	r9, [sp, #4]
 800f4d0:	2312      	movs	r3, #18
 800f4d2:	9209      	str	r2, [sp, #36]	; 0x24
 800f4d4:	e7cf      	b.n	800f476 <_dtoa_r+0x266>
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	9308      	str	r3, [sp, #32]
 800f4da:	e7f4      	b.n	800f4c6 <_dtoa_r+0x2b6>
 800f4dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f4e0:	f8cd 9004 	str.w	r9, [sp, #4]
 800f4e4:	464b      	mov	r3, r9
 800f4e6:	e7c6      	b.n	800f476 <_dtoa_r+0x266>
 800f4e8:	3101      	adds	r1, #1
 800f4ea:	6041      	str	r1, [r0, #4]
 800f4ec:	0052      	lsls	r2, r2, #1
 800f4ee:	e7c6      	b.n	800f47e <_dtoa_r+0x26e>
 800f4f0:	636f4361 	.word	0x636f4361
 800f4f4:	3fd287a7 	.word	0x3fd287a7
 800f4f8:	8b60c8b3 	.word	0x8b60c8b3
 800f4fc:	3fc68a28 	.word	0x3fc68a28
 800f500:	509f79fb 	.word	0x509f79fb
 800f504:	3fd34413 	.word	0x3fd34413
 800f508:	08013e16 	.word	0x08013e16
 800f50c:	08013e2d 	.word	0x08013e2d
 800f510:	7ff00000 	.word	0x7ff00000
 800f514:	08013e12 	.word	0x08013e12
 800f518:	08013e09 	.word	0x08013e09
 800f51c:	08013c8d 	.word	0x08013c8d
 800f520:	3ff80000 	.word	0x3ff80000
 800f524:	08014008 	.word	0x08014008
 800f528:	08013e8c 	.word	0x08013e8c
 800f52c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f52e:	9a00      	ldr	r2, [sp, #0]
 800f530:	601a      	str	r2, [r3, #0]
 800f532:	9b01      	ldr	r3, [sp, #4]
 800f534:	2b0e      	cmp	r3, #14
 800f536:	f200 80ad 	bhi.w	800f694 <_dtoa_r+0x484>
 800f53a:	2d00      	cmp	r5, #0
 800f53c:	f000 80aa 	beq.w	800f694 <_dtoa_r+0x484>
 800f540:	f1ba 0f00 	cmp.w	sl, #0
 800f544:	dd36      	ble.n	800f5b4 <_dtoa_r+0x3a4>
 800f546:	4ac3      	ldr	r2, [pc, #780]	; (800f854 <_dtoa_r+0x644>)
 800f548:	f00a 030f 	and.w	r3, sl, #15
 800f54c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f550:	ed93 7b00 	vldr	d7, [r3]
 800f554:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f558:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f55c:	eeb0 8a47 	vmov.f32	s16, s14
 800f560:	eef0 8a67 	vmov.f32	s17, s15
 800f564:	d016      	beq.n	800f594 <_dtoa_r+0x384>
 800f566:	4bbc      	ldr	r3, [pc, #752]	; (800f858 <_dtoa_r+0x648>)
 800f568:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f56c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f570:	f7f1 f98c 	bl	800088c <__aeabi_ddiv>
 800f574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f578:	f007 070f 	and.w	r7, r7, #15
 800f57c:	2503      	movs	r5, #3
 800f57e:	4eb6      	ldr	r6, [pc, #728]	; (800f858 <_dtoa_r+0x648>)
 800f580:	b957      	cbnz	r7, 800f598 <_dtoa_r+0x388>
 800f582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f586:	ec53 2b18 	vmov	r2, r3, d8
 800f58a:	f7f1 f97f 	bl	800088c <__aeabi_ddiv>
 800f58e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f592:	e029      	b.n	800f5e8 <_dtoa_r+0x3d8>
 800f594:	2502      	movs	r5, #2
 800f596:	e7f2      	b.n	800f57e <_dtoa_r+0x36e>
 800f598:	07f9      	lsls	r1, r7, #31
 800f59a:	d508      	bpl.n	800f5ae <_dtoa_r+0x39e>
 800f59c:	ec51 0b18 	vmov	r0, r1, d8
 800f5a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f5a4:	f7f1 f848 	bl	8000638 <__aeabi_dmul>
 800f5a8:	ec41 0b18 	vmov	d8, r0, r1
 800f5ac:	3501      	adds	r5, #1
 800f5ae:	107f      	asrs	r7, r7, #1
 800f5b0:	3608      	adds	r6, #8
 800f5b2:	e7e5      	b.n	800f580 <_dtoa_r+0x370>
 800f5b4:	f000 80a6 	beq.w	800f704 <_dtoa_r+0x4f4>
 800f5b8:	f1ca 0600 	rsb	r6, sl, #0
 800f5bc:	4ba5      	ldr	r3, [pc, #660]	; (800f854 <_dtoa_r+0x644>)
 800f5be:	4fa6      	ldr	r7, [pc, #664]	; (800f858 <_dtoa_r+0x648>)
 800f5c0:	f006 020f 	and.w	r2, r6, #15
 800f5c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f5d0:	f7f1 f832 	bl	8000638 <__aeabi_dmul>
 800f5d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5d8:	1136      	asrs	r6, r6, #4
 800f5da:	2300      	movs	r3, #0
 800f5dc:	2502      	movs	r5, #2
 800f5de:	2e00      	cmp	r6, #0
 800f5e0:	f040 8085 	bne.w	800f6ee <_dtoa_r+0x4de>
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d1d2      	bne.n	800f58e <_dtoa_r+0x37e>
 800f5e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	f000 808c 	beq.w	800f708 <_dtoa_r+0x4f8>
 800f5f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f5f4:	4b99      	ldr	r3, [pc, #612]	; (800f85c <_dtoa_r+0x64c>)
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	4639      	mov	r1, r7
 800f5fc:	f7f1 fa8e 	bl	8000b1c <__aeabi_dcmplt>
 800f600:	2800      	cmp	r0, #0
 800f602:	f000 8081 	beq.w	800f708 <_dtoa_r+0x4f8>
 800f606:	9b01      	ldr	r3, [sp, #4]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d07d      	beq.n	800f708 <_dtoa_r+0x4f8>
 800f60c:	f1b9 0f00 	cmp.w	r9, #0
 800f610:	dd3c      	ble.n	800f68c <_dtoa_r+0x47c>
 800f612:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f616:	9307      	str	r3, [sp, #28]
 800f618:	2200      	movs	r2, #0
 800f61a:	4b91      	ldr	r3, [pc, #580]	; (800f860 <_dtoa_r+0x650>)
 800f61c:	4630      	mov	r0, r6
 800f61e:	4639      	mov	r1, r7
 800f620:	f7f1 f80a 	bl	8000638 <__aeabi_dmul>
 800f624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f628:	3501      	adds	r5, #1
 800f62a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f62e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f632:	4628      	mov	r0, r5
 800f634:	f7f0 ff96 	bl	8000564 <__aeabi_i2d>
 800f638:	4632      	mov	r2, r6
 800f63a:	463b      	mov	r3, r7
 800f63c:	f7f0 fffc 	bl	8000638 <__aeabi_dmul>
 800f640:	4b88      	ldr	r3, [pc, #544]	; (800f864 <_dtoa_r+0x654>)
 800f642:	2200      	movs	r2, #0
 800f644:	f7f0 fe42 	bl	80002cc <__adddf3>
 800f648:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f64c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f650:	9303      	str	r3, [sp, #12]
 800f652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f654:	2b00      	cmp	r3, #0
 800f656:	d15c      	bne.n	800f712 <_dtoa_r+0x502>
 800f658:	4b83      	ldr	r3, [pc, #524]	; (800f868 <_dtoa_r+0x658>)
 800f65a:	2200      	movs	r2, #0
 800f65c:	4630      	mov	r0, r6
 800f65e:	4639      	mov	r1, r7
 800f660:	f7f0 fe32 	bl	80002c8 <__aeabi_dsub>
 800f664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f668:	4606      	mov	r6, r0
 800f66a:	460f      	mov	r7, r1
 800f66c:	f7f1 fa74 	bl	8000b58 <__aeabi_dcmpgt>
 800f670:	2800      	cmp	r0, #0
 800f672:	f040 8296 	bne.w	800fba2 <_dtoa_r+0x992>
 800f676:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f67a:	4630      	mov	r0, r6
 800f67c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f680:	4639      	mov	r1, r7
 800f682:	f7f1 fa4b 	bl	8000b1c <__aeabi_dcmplt>
 800f686:	2800      	cmp	r0, #0
 800f688:	f040 8288 	bne.w	800fb9c <_dtoa_r+0x98c>
 800f68c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f690:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f694:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f696:	2b00      	cmp	r3, #0
 800f698:	f2c0 8158 	blt.w	800f94c <_dtoa_r+0x73c>
 800f69c:	f1ba 0f0e 	cmp.w	sl, #14
 800f6a0:	f300 8154 	bgt.w	800f94c <_dtoa_r+0x73c>
 800f6a4:	4b6b      	ldr	r3, [pc, #428]	; (800f854 <_dtoa_r+0x644>)
 800f6a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f6aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	f280 80e3 	bge.w	800f87c <_dtoa_r+0x66c>
 800f6b6:	9b01      	ldr	r3, [sp, #4]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f300 80df 	bgt.w	800f87c <_dtoa_r+0x66c>
 800f6be:	f040 826d 	bne.w	800fb9c <_dtoa_r+0x98c>
 800f6c2:	4b69      	ldr	r3, [pc, #420]	; (800f868 <_dtoa_r+0x658>)
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	4640      	mov	r0, r8
 800f6c8:	4649      	mov	r1, r9
 800f6ca:	f7f0 ffb5 	bl	8000638 <__aeabi_dmul>
 800f6ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f6d2:	f7f1 fa37 	bl	8000b44 <__aeabi_dcmpge>
 800f6d6:	9e01      	ldr	r6, [sp, #4]
 800f6d8:	4637      	mov	r7, r6
 800f6da:	2800      	cmp	r0, #0
 800f6dc:	f040 8243 	bne.w	800fb66 <_dtoa_r+0x956>
 800f6e0:	9d00      	ldr	r5, [sp, #0]
 800f6e2:	2331      	movs	r3, #49	; 0x31
 800f6e4:	f805 3b01 	strb.w	r3, [r5], #1
 800f6e8:	f10a 0a01 	add.w	sl, sl, #1
 800f6ec:	e23f      	b.n	800fb6e <_dtoa_r+0x95e>
 800f6ee:	07f2      	lsls	r2, r6, #31
 800f6f0:	d505      	bpl.n	800f6fe <_dtoa_r+0x4ee>
 800f6f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6f6:	f7f0 ff9f 	bl	8000638 <__aeabi_dmul>
 800f6fa:	3501      	adds	r5, #1
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	1076      	asrs	r6, r6, #1
 800f700:	3708      	adds	r7, #8
 800f702:	e76c      	b.n	800f5de <_dtoa_r+0x3ce>
 800f704:	2502      	movs	r5, #2
 800f706:	e76f      	b.n	800f5e8 <_dtoa_r+0x3d8>
 800f708:	9b01      	ldr	r3, [sp, #4]
 800f70a:	f8cd a01c 	str.w	sl, [sp, #28]
 800f70e:	930c      	str	r3, [sp, #48]	; 0x30
 800f710:	e78d      	b.n	800f62e <_dtoa_r+0x41e>
 800f712:	9900      	ldr	r1, [sp, #0]
 800f714:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f718:	4b4e      	ldr	r3, [pc, #312]	; (800f854 <_dtoa_r+0x644>)
 800f71a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f71e:	4401      	add	r1, r0
 800f720:	9102      	str	r1, [sp, #8]
 800f722:	9908      	ldr	r1, [sp, #32]
 800f724:	eeb0 8a47 	vmov.f32	s16, s14
 800f728:	eef0 8a67 	vmov.f32	s17, s15
 800f72c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f730:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f734:	2900      	cmp	r1, #0
 800f736:	d045      	beq.n	800f7c4 <_dtoa_r+0x5b4>
 800f738:	494c      	ldr	r1, [pc, #304]	; (800f86c <_dtoa_r+0x65c>)
 800f73a:	2000      	movs	r0, #0
 800f73c:	f7f1 f8a6 	bl	800088c <__aeabi_ddiv>
 800f740:	ec53 2b18 	vmov	r2, r3, d8
 800f744:	f7f0 fdc0 	bl	80002c8 <__aeabi_dsub>
 800f748:	9d00      	ldr	r5, [sp, #0]
 800f74a:	ec41 0b18 	vmov	d8, r0, r1
 800f74e:	4639      	mov	r1, r7
 800f750:	4630      	mov	r0, r6
 800f752:	f7f1 fa21 	bl	8000b98 <__aeabi_d2iz>
 800f756:	900c      	str	r0, [sp, #48]	; 0x30
 800f758:	f7f0 ff04 	bl	8000564 <__aeabi_i2d>
 800f75c:	4602      	mov	r2, r0
 800f75e:	460b      	mov	r3, r1
 800f760:	4630      	mov	r0, r6
 800f762:	4639      	mov	r1, r7
 800f764:	f7f0 fdb0 	bl	80002c8 <__aeabi_dsub>
 800f768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f76a:	3330      	adds	r3, #48	; 0x30
 800f76c:	f805 3b01 	strb.w	r3, [r5], #1
 800f770:	ec53 2b18 	vmov	r2, r3, d8
 800f774:	4606      	mov	r6, r0
 800f776:	460f      	mov	r7, r1
 800f778:	f7f1 f9d0 	bl	8000b1c <__aeabi_dcmplt>
 800f77c:	2800      	cmp	r0, #0
 800f77e:	d165      	bne.n	800f84c <_dtoa_r+0x63c>
 800f780:	4632      	mov	r2, r6
 800f782:	463b      	mov	r3, r7
 800f784:	4935      	ldr	r1, [pc, #212]	; (800f85c <_dtoa_r+0x64c>)
 800f786:	2000      	movs	r0, #0
 800f788:	f7f0 fd9e 	bl	80002c8 <__aeabi_dsub>
 800f78c:	ec53 2b18 	vmov	r2, r3, d8
 800f790:	f7f1 f9c4 	bl	8000b1c <__aeabi_dcmplt>
 800f794:	2800      	cmp	r0, #0
 800f796:	f040 80b9 	bne.w	800f90c <_dtoa_r+0x6fc>
 800f79a:	9b02      	ldr	r3, [sp, #8]
 800f79c:	429d      	cmp	r5, r3
 800f79e:	f43f af75 	beq.w	800f68c <_dtoa_r+0x47c>
 800f7a2:	4b2f      	ldr	r3, [pc, #188]	; (800f860 <_dtoa_r+0x650>)
 800f7a4:	ec51 0b18 	vmov	r0, r1, d8
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	f7f0 ff45 	bl	8000638 <__aeabi_dmul>
 800f7ae:	4b2c      	ldr	r3, [pc, #176]	; (800f860 <_dtoa_r+0x650>)
 800f7b0:	ec41 0b18 	vmov	d8, r0, r1
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	4630      	mov	r0, r6
 800f7b8:	4639      	mov	r1, r7
 800f7ba:	f7f0 ff3d 	bl	8000638 <__aeabi_dmul>
 800f7be:	4606      	mov	r6, r0
 800f7c0:	460f      	mov	r7, r1
 800f7c2:	e7c4      	b.n	800f74e <_dtoa_r+0x53e>
 800f7c4:	ec51 0b17 	vmov	r0, r1, d7
 800f7c8:	f7f0 ff36 	bl	8000638 <__aeabi_dmul>
 800f7cc:	9b02      	ldr	r3, [sp, #8]
 800f7ce:	9d00      	ldr	r5, [sp, #0]
 800f7d0:	930c      	str	r3, [sp, #48]	; 0x30
 800f7d2:	ec41 0b18 	vmov	d8, r0, r1
 800f7d6:	4639      	mov	r1, r7
 800f7d8:	4630      	mov	r0, r6
 800f7da:	f7f1 f9dd 	bl	8000b98 <__aeabi_d2iz>
 800f7de:	9011      	str	r0, [sp, #68]	; 0x44
 800f7e0:	f7f0 fec0 	bl	8000564 <__aeabi_i2d>
 800f7e4:	4602      	mov	r2, r0
 800f7e6:	460b      	mov	r3, r1
 800f7e8:	4630      	mov	r0, r6
 800f7ea:	4639      	mov	r1, r7
 800f7ec:	f7f0 fd6c 	bl	80002c8 <__aeabi_dsub>
 800f7f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f7f2:	3330      	adds	r3, #48	; 0x30
 800f7f4:	f805 3b01 	strb.w	r3, [r5], #1
 800f7f8:	9b02      	ldr	r3, [sp, #8]
 800f7fa:	429d      	cmp	r5, r3
 800f7fc:	4606      	mov	r6, r0
 800f7fe:	460f      	mov	r7, r1
 800f800:	f04f 0200 	mov.w	r2, #0
 800f804:	d134      	bne.n	800f870 <_dtoa_r+0x660>
 800f806:	4b19      	ldr	r3, [pc, #100]	; (800f86c <_dtoa_r+0x65c>)
 800f808:	ec51 0b18 	vmov	r0, r1, d8
 800f80c:	f7f0 fd5e 	bl	80002cc <__adddf3>
 800f810:	4602      	mov	r2, r0
 800f812:	460b      	mov	r3, r1
 800f814:	4630      	mov	r0, r6
 800f816:	4639      	mov	r1, r7
 800f818:	f7f1 f99e 	bl	8000b58 <__aeabi_dcmpgt>
 800f81c:	2800      	cmp	r0, #0
 800f81e:	d175      	bne.n	800f90c <_dtoa_r+0x6fc>
 800f820:	ec53 2b18 	vmov	r2, r3, d8
 800f824:	4911      	ldr	r1, [pc, #68]	; (800f86c <_dtoa_r+0x65c>)
 800f826:	2000      	movs	r0, #0
 800f828:	f7f0 fd4e 	bl	80002c8 <__aeabi_dsub>
 800f82c:	4602      	mov	r2, r0
 800f82e:	460b      	mov	r3, r1
 800f830:	4630      	mov	r0, r6
 800f832:	4639      	mov	r1, r7
 800f834:	f7f1 f972 	bl	8000b1c <__aeabi_dcmplt>
 800f838:	2800      	cmp	r0, #0
 800f83a:	f43f af27 	beq.w	800f68c <_dtoa_r+0x47c>
 800f83e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f840:	1e6b      	subs	r3, r5, #1
 800f842:	930c      	str	r3, [sp, #48]	; 0x30
 800f844:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f848:	2b30      	cmp	r3, #48	; 0x30
 800f84a:	d0f8      	beq.n	800f83e <_dtoa_r+0x62e>
 800f84c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f850:	e04a      	b.n	800f8e8 <_dtoa_r+0x6d8>
 800f852:	bf00      	nop
 800f854:	08014008 	.word	0x08014008
 800f858:	08013fe0 	.word	0x08013fe0
 800f85c:	3ff00000 	.word	0x3ff00000
 800f860:	40240000 	.word	0x40240000
 800f864:	401c0000 	.word	0x401c0000
 800f868:	40140000 	.word	0x40140000
 800f86c:	3fe00000 	.word	0x3fe00000
 800f870:	4baf      	ldr	r3, [pc, #700]	; (800fb30 <_dtoa_r+0x920>)
 800f872:	f7f0 fee1 	bl	8000638 <__aeabi_dmul>
 800f876:	4606      	mov	r6, r0
 800f878:	460f      	mov	r7, r1
 800f87a:	e7ac      	b.n	800f7d6 <_dtoa_r+0x5c6>
 800f87c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f880:	9d00      	ldr	r5, [sp, #0]
 800f882:	4642      	mov	r2, r8
 800f884:	464b      	mov	r3, r9
 800f886:	4630      	mov	r0, r6
 800f888:	4639      	mov	r1, r7
 800f88a:	f7f0 ffff 	bl	800088c <__aeabi_ddiv>
 800f88e:	f7f1 f983 	bl	8000b98 <__aeabi_d2iz>
 800f892:	9002      	str	r0, [sp, #8]
 800f894:	f7f0 fe66 	bl	8000564 <__aeabi_i2d>
 800f898:	4642      	mov	r2, r8
 800f89a:	464b      	mov	r3, r9
 800f89c:	f7f0 fecc 	bl	8000638 <__aeabi_dmul>
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	460b      	mov	r3, r1
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	4639      	mov	r1, r7
 800f8a8:	f7f0 fd0e 	bl	80002c8 <__aeabi_dsub>
 800f8ac:	9e02      	ldr	r6, [sp, #8]
 800f8ae:	9f01      	ldr	r7, [sp, #4]
 800f8b0:	3630      	adds	r6, #48	; 0x30
 800f8b2:	f805 6b01 	strb.w	r6, [r5], #1
 800f8b6:	9e00      	ldr	r6, [sp, #0]
 800f8b8:	1bae      	subs	r6, r5, r6
 800f8ba:	42b7      	cmp	r7, r6
 800f8bc:	4602      	mov	r2, r0
 800f8be:	460b      	mov	r3, r1
 800f8c0:	d137      	bne.n	800f932 <_dtoa_r+0x722>
 800f8c2:	f7f0 fd03 	bl	80002cc <__adddf3>
 800f8c6:	4642      	mov	r2, r8
 800f8c8:	464b      	mov	r3, r9
 800f8ca:	4606      	mov	r6, r0
 800f8cc:	460f      	mov	r7, r1
 800f8ce:	f7f1 f943 	bl	8000b58 <__aeabi_dcmpgt>
 800f8d2:	b9c8      	cbnz	r0, 800f908 <_dtoa_r+0x6f8>
 800f8d4:	4642      	mov	r2, r8
 800f8d6:	464b      	mov	r3, r9
 800f8d8:	4630      	mov	r0, r6
 800f8da:	4639      	mov	r1, r7
 800f8dc:	f7f1 f914 	bl	8000b08 <__aeabi_dcmpeq>
 800f8e0:	b110      	cbz	r0, 800f8e8 <_dtoa_r+0x6d8>
 800f8e2:	9b02      	ldr	r3, [sp, #8]
 800f8e4:	07d9      	lsls	r1, r3, #31
 800f8e6:	d40f      	bmi.n	800f908 <_dtoa_r+0x6f8>
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	4659      	mov	r1, fp
 800f8ec:	f001 f86c 	bl	80109c8 <_Bfree>
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	702b      	strb	r3, [r5, #0]
 800f8f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8f6:	f10a 0001 	add.w	r0, sl, #1
 800f8fa:	6018      	str	r0, [r3, #0]
 800f8fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	f43f acd8 	beq.w	800f2b4 <_dtoa_r+0xa4>
 800f904:	601d      	str	r5, [r3, #0]
 800f906:	e4d5      	b.n	800f2b4 <_dtoa_r+0xa4>
 800f908:	f8cd a01c 	str.w	sl, [sp, #28]
 800f90c:	462b      	mov	r3, r5
 800f90e:	461d      	mov	r5, r3
 800f910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f914:	2a39      	cmp	r2, #57	; 0x39
 800f916:	d108      	bne.n	800f92a <_dtoa_r+0x71a>
 800f918:	9a00      	ldr	r2, [sp, #0]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d1f7      	bne.n	800f90e <_dtoa_r+0x6fe>
 800f91e:	9a07      	ldr	r2, [sp, #28]
 800f920:	9900      	ldr	r1, [sp, #0]
 800f922:	3201      	adds	r2, #1
 800f924:	9207      	str	r2, [sp, #28]
 800f926:	2230      	movs	r2, #48	; 0x30
 800f928:	700a      	strb	r2, [r1, #0]
 800f92a:	781a      	ldrb	r2, [r3, #0]
 800f92c:	3201      	adds	r2, #1
 800f92e:	701a      	strb	r2, [r3, #0]
 800f930:	e78c      	b.n	800f84c <_dtoa_r+0x63c>
 800f932:	4b7f      	ldr	r3, [pc, #508]	; (800fb30 <_dtoa_r+0x920>)
 800f934:	2200      	movs	r2, #0
 800f936:	f7f0 fe7f 	bl	8000638 <__aeabi_dmul>
 800f93a:	2200      	movs	r2, #0
 800f93c:	2300      	movs	r3, #0
 800f93e:	4606      	mov	r6, r0
 800f940:	460f      	mov	r7, r1
 800f942:	f7f1 f8e1 	bl	8000b08 <__aeabi_dcmpeq>
 800f946:	2800      	cmp	r0, #0
 800f948:	d09b      	beq.n	800f882 <_dtoa_r+0x672>
 800f94a:	e7cd      	b.n	800f8e8 <_dtoa_r+0x6d8>
 800f94c:	9a08      	ldr	r2, [sp, #32]
 800f94e:	2a00      	cmp	r2, #0
 800f950:	f000 80c4 	beq.w	800fadc <_dtoa_r+0x8cc>
 800f954:	9a05      	ldr	r2, [sp, #20]
 800f956:	2a01      	cmp	r2, #1
 800f958:	f300 80a8 	bgt.w	800faac <_dtoa_r+0x89c>
 800f95c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f95e:	2a00      	cmp	r2, #0
 800f960:	f000 80a0 	beq.w	800faa4 <_dtoa_r+0x894>
 800f964:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f968:	9e06      	ldr	r6, [sp, #24]
 800f96a:	4645      	mov	r5, r8
 800f96c:	9a04      	ldr	r2, [sp, #16]
 800f96e:	2101      	movs	r1, #1
 800f970:	441a      	add	r2, r3
 800f972:	4620      	mov	r0, r4
 800f974:	4498      	add	r8, r3
 800f976:	9204      	str	r2, [sp, #16]
 800f978:	f001 f92c 	bl	8010bd4 <__i2b>
 800f97c:	4607      	mov	r7, r0
 800f97e:	2d00      	cmp	r5, #0
 800f980:	dd0b      	ble.n	800f99a <_dtoa_r+0x78a>
 800f982:	9b04      	ldr	r3, [sp, #16]
 800f984:	2b00      	cmp	r3, #0
 800f986:	dd08      	ble.n	800f99a <_dtoa_r+0x78a>
 800f988:	42ab      	cmp	r3, r5
 800f98a:	9a04      	ldr	r2, [sp, #16]
 800f98c:	bfa8      	it	ge
 800f98e:	462b      	movge	r3, r5
 800f990:	eba8 0803 	sub.w	r8, r8, r3
 800f994:	1aed      	subs	r5, r5, r3
 800f996:	1ad3      	subs	r3, r2, r3
 800f998:	9304      	str	r3, [sp, #16]
 800f99a:	9b06      	ldr	r3, [sp, #24]
 800f99c:	b1fb      	cbz	r3, 800f9de <_dtoa_r+0x7ce>
 800f99e:	9b08      	ldr	r3, [sp, #32]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f000 809f 	beq.w	800fae4 <_dtoa_r+0x8d4>
 800f9a6:	2e00      	cmp	r6, #0
 800f9a8:	dd11      	ble.n	800f9ce <_dtoa_r+0x7be>
 800f9aa:	4639      	mov	r1, r7
 800f9ac:	4632      	mov	r2, r6
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	f001 f9cc 	bl	8010d4c <__pow5mult>
 800f9b4:	465a      	mov	r2, fp
 800f9b6:	4601      	mov	r1, r0
 800f9b8:	4607      	mov	r7, r0
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	f001 f920 	bl	8010c00 <__multiply>
 800f9c0:	4659      	mov	r1, fp
 800f9c2:	9007      	str	r0, [sp, #28]
 800f9c4:	4620      	mov	r0, r4
 800f9c6:	f000 ffff 	bl	80109c8 <_Bfree>
 800f9ca:	9b07      	ldr	r3, [sp, #28]
 800f9cc:	469b      	mov	fp, r3
 800f9ce:	9b06      	ldr	r3, [sp, #24]
 800f9d0:	1b9a      	subs	r2, r3, r6
 800f9d2:	d004      	beq.n	800f9de <_dtoa_r+0x7ce>
 800f9d4:	4659      	mov	r1, fp
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	f001 f9b8 	bl	8010d4c <__pow5mult>
 800f9dc:	4683      	mov	fp, r0
 800f9de:	2101      	movs	r1, #1
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	f001 f8f7 	bl	8010bd4 <__i2b>
 800f9e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	4606      	mov	r6, r0
 800f9ec:	dd7c      	ble.n	800fae8 <_dtoa_r+0x8d8>
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	4601      	mov	r1, r0
 800f9f2:	4620      	mov	r0, r4
 800f9f4:	f001 f9aa 	bl	8010d4c <__pow5mult>
 800f9f8:	9b05      	ldr	r3, [sp, #20]
 800f9fa:	2b01      	cmp	r3, #1
 800f9fc:	4606      	mov	r6, r0
 800f9fe:	dd76      	ble.n	800faee <_dtoa_r+0x8de>
 800fa00:	2300      	movs	r3, #0
 800fa02:	9306      	str	r3, [sp, #24]
 800fa04:	6933      	ldr	r3, [r6, #16]
 800fa06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fa0a:	6918      	ldr	r0, [r3, #16]
 800fa0c:	f001 f892 	bl	8010b34 <__hi0bits>
 800fa10:	f1c0 0020 	rsb	r0, r0, #32
 800fa14:	9b04      	ldr	r3, [sp, #16]
 800fa16:	4418      	add	r0, r3
 800fa18:	f010 001f 	ands.w	r0, r0, #31
 800fa1c:	f000 8086 	beq.w	800fb2c <_dtoa_r+0x91c>
 800fa20:	f1c0 0320 	rsb	r3, r0, #32
 800fa24:	2b04      	cmp	r3, #4
 800fa26:	dd7f      	ble.n	800fb28 <_dtoa_r+0x918>
 800fa28:	f1c0 001c 	rsb	r0, r0, #28
 800fa2c:	9b04      	ldr	r3, [sp, #16]
 800fa2e:	4403      	add	r3, r0
 800fa30:	4480      	add	r8, r0
 800fa32:	4405      	add	r5, r0
 800fa34:	9304      	str	r3, [sp, #16]
 800fa36:	f1b8 0f00 	cmp.w	r8, #0
 800fa3a:	dd05      	ble.n	800fa48 <_dtoa_r+0x838>
 800fa3c:	4659      	mov	r1, fp
 800fa3e:	4642      	mov	r2, r8
 800fa40:	4620      	mov	r0, r4
 800fa42:	f001 f9dd 	bl	8010e00 <__lshift>
 800fa46:	4683      	mov	fp, r0
 800fa48:	9b04      	ldr	r3, [sp, #16]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	dd05      	ble.n	800fa5a <_dtoa_r+0x84a>
 800fa4e:	4631      	mov	r1, r6
 800fa50:	461a      	mov	r2, r3
 800fa52:	4620      	mov	r0, r4
 800fa54:	f001 f9d4 	bl	8010e00 <__lshift>
 800fa58:	4606      	mov	r6, r0
 800fa5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d069      	beq.n	800fb34 <_dtoa_r+0x924>
 800fa60:	4631      	mov	r1, r6
 800fa62:	4658      	mov	r0, fp
 800fa64:	f001 fa38 	bl	8010ed8 <__mcmp>
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	da63      	bge.n	800fb34 <_dtoa_r+0x924>
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	4659      	mov	r1, fp
 800fa70:	220a      	movs	r2, #10
 800fa72:	4620      	mov	r0, r4
 800fa74:	f000 ffca 	bl	8010a0c <__multadd>
 800fa78:	9b08      	ldr	r3, [sp, #32]
 800fa7a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fa7e:	4683      	mov	fp, r0
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	f000 818f 	beq.w	800fda4 <_dtoa_r+0xb94>
 800fa86:	4639      	mov	r1, r7
 800fa88:	2300      	movs	r3, #0
 800fa8a:	220a      	movs	r2, #10
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	f000 ffbd 	bl	8010a0c <__multadd>
 800fa92:	f1b9 0f00 	cmp.w	r9, #0
 800fa96:	4607      	mov	r7, r0
 800fa98:	f300 808e 	bgt.w	800fbb8 <_dtoa_r+0x9a8>
 800fa9c:	9b05      	ldr	r3, [sp, #20]
 800fa9e:	2b02      	cmp	r3, #2
 800faa0:	dc50      	bgt.n	800fb44 <_dtoa_r+0x934>
 800faa2:	e089      	b.n	800fbb8 <_dtoa_r+0x9a8>
 800faa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800faa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800faaa:	e75d      	b.n	800f968 <_dtoa_r+0x758>
 800faac:	9b01      	ldr	r3, [sp, #4]
 800faae:	1e5e      	subs	r6, r3, #1
 800fab0:	9b06      	ldr	r3, [sp, #24]
 800fab2:	42b3      	cmp	r3, r6
 800fab4:	bfbf      	itttt	lt
 800fab6:	9b06      	ldrlt	r3, [sp, #24]
 800fab8:	9606      	strlt	r6, [sp, #24]
 800faba:	1af2      	sublt	r2, r6, r3
 800fabc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fabe:	bfb6      	itet	lt
 800fac0:	189b      	addlt	r3, r3, r2
 800fac2:	1b9e      	subge	r6, r3, r6
 800fac4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fac6:	9b01      	ldr	r3, [sp, #4]
 800fac8:	bfb8      	it	lt
 800faca:	2600      	movlt	r6, #0
 800facc:	2b00      	cmp	r3, #0
 800face:	bfb5      	itete	lt
 800fad0:	eba8 0503 	sublt.w	r5, r8, r3
 800fad4:	9b01      	ldrge	r3, [sp, #4]
 800fad6:	2300      	movlt	r3, #0
 800fad8:	4645      	movge	r5, r8
 800fada:	e747      	b.n	800f96c <_dtoa_r+0x75c>
 800fadc:	9e06      	ldr	r6, [sp, #24]
 800fade:	9f08      	ldr	r7, [sp, #32]
 800fae0:	4645      	mov	r5, r8
 800fae2:	e74c      	b.n	800f97e <_dtoa_r+0x76e>
 800fae4:	9a06      	ldr	r2, [sp, #24]
 800fae6:	e775      	b.n	800f9d4 <_dtoa_r+0x7c4>
 800fae8:	9b05      	ldr	r3, [sp, #20]
 800faea:	2b01      	cmp	r3, #1
 800faec:	dc18      	bgt.n	800fb20 <_dtoa_r+0x910>
 800faee:	9b02      	ldr	r3, [sp, #8]
 800faf0:	b9b3      	cbnz	r3, 800fb20 <_dtoa_r+0x910>
 800faf2:	9b03      	ldr	r3, [sp, #12]
 800faf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800faf8:	b9a3      	cbnz	r3, 800fb24 <_dtoa_r+0x914>
 800fafa:	9b03      	ldr	r3, [sp, #12]
 800fafc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb00:	0d1b      	lsrs	r3, r3, #20
 800fb02:	051b      	lsls	r3, r3, #20
 800fb04:	b12b      	cbz	r3, 800fb12 <_dtoa_r+0x902>
 800fb06:	9b04      	ldr	r3, [sp, #16]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	9304      	str	r3, [sp, #16]
 800fb0c:	f108 0801 	add.w	r8, r8, #1
 800fb10:	2301      	movs	r3, #1
 800fb12:	9306      	str	r3, [sp, #24]
 800fb14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	f47f af74 	bne.w	800fa04 <_dtoa_r+0x7f4>
 800fb1c:	2001      	movs	r0, #1
 800fb1e:	e779      	b.n	800fa14 <_dtoa_r+0x804>
 800fb20:	2300      	movs	r3, #0
 800fb22:	e7f6      	b.n	800fb12 <_dtoa_r+0x902>
 800fb24:	9b02      	ldr	r3, [sp, #8]
 800fb26:	e7f4      	b.n	800fb12 <_dtoa_r+0x902>
 800fb28:	d085      	beq.n	800fa36 <_dtoa_r+0x826>
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	301c      	adds	r0, #28
 800fb2e:	e77d      	b.n	800fa2c <_dtoa_r+0x81c>
 800fb30:	40240000 	.word	0x40240000
 800fb34:	9b01      	ldr	r3, [sp, #4]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	dc38      	bgt.n	800fbac <_dtoa_r+0x99c>
 800fb3a:	9b05      	ldr	r3, [sp, #20]
 800fb3c:	2b02      	cmp	r3, #2
 800fb3e:	dd35      	ble.n	800fbac <_dtoa_r+0x99c>
 800fb40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fb44:	f1b9 0f00 	cmp.w	r9, #0
 800fb48:	d10d      	bne.n	800fb66 <_dtoa_r+0x956>
 800fb4a:	4631      	mov	r1, r6
 800fb4c:	464b      	mov	r3, r9
 800fb4e:	2205      	movs	r2, #5
 800fb50:	4620      	mov	r0, r4
 800fb52:	f000 ff5b 	bl	8010a0c <__multadd>
 800fb56:	4601      	mov	r1, r0
 800fb58:	4606      	mov	r6, r0
 800fb5a:	4658      	mov	r0, fp
 800fb5c:	f001 f9bc 	bl	8010ed8 <__mcmp>
 800fb60:	2800      	cmp	r0, #0
 800fb62:	f73f adbd 	bgt.w	800f6e0 <_dtoa_r+0x4d0>
 800fb66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb68:	9d00      	ldr	r5, [sp, #0]
 800fb6a:	ea6f 0a03 	mvn.w	sl, r3
 800fb6e:	f04f 0800 	mov.w	r8, #0
 800fb72:	4631      	mov	r1, r6
 800fb74:	4620      	mov	r0, r4
 800fb76:	f000 ff27 	bl	80109c8 <_Bfree>
 800fb7a:	2f00      	cmp	r7, #0
 800fb7c:	f43f aeb4 	beq.w	800f8e8 <_dtoa_r+0x6d8>
 800fb80:	f1b8 0f00 	cmp.w	r8, #0
 800fb84:	d005      	beq.n	800fb92 <_dtoa_r+0x982>
 800fb86:	45b8      	cmp	r8, r7
 800fb88:	d003      	beq.n	800fb92 <_dtoa_r+0x982>
 800fb8a:	4641      	mov	r1, r8
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	f000 ff1b 	bl	80109c8 <_Bfree>
 800fb92:	4639      	mov	r1, r7
 800fb94:	4620      	mov	r0, r4
 800fb96:	f000 ff17 	bl	80109c8 <_Bfree>
 800fb9a:	e6a5      	b.n	800f8e8 <_dtoa_r+0x6d8>
 800fb9c:	2600      	movs	r6, #0
 800fb9e:	4637      	mov	r7, r6
 800fba0:	e7e1      	b.n	800fb66 <_dtoa_r+0x956>
 800fba2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fba4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fba8:	4637      	mov	r7, r6
 800fbaa:	e599      	b.n	800f6e0 <_dtoa_r+0x4d0>
 800fbac:	9b08      	ldr	r3, [sp, #32]
 800fbae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	f000 80fd 	beq.w	800fdb2 <_dtoa_r+0xba2>
 800fbb8:	2d00      	cmp	r5, #0
 800fbba:	dd05      	ble.n	800fbc8 <_dtoa_r+0x9b8>
 800fbbc:	4639      	mov	r1, r7
 800fbbe:	462a      	mov	r2, r5
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	f001 f91d 	bl	8010e00 <__lshift>
 800fbc6:	4607      	mov	r7, r0
 800fbc8:	9b06      	ldr	r3, [sp, #24]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d05c      	beq.n	800fc88 <_dtoa_r+0xa78>
 800fbce:	6879      	ldr	r1, [r7, #4]
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	f000 feb9 	bl	8010948 <_Balloc>
 800fbd6:	4605      	mov	r5, r0
 800fbd8:	b928      	cbnz	r0, 800fbe6 <_dtoa_r+0x9d6>
 800fbda:	4b80      	ldr	r3, [pc, #512]	; (800fddc <_dtoa_r+0xbcc>)
 800fbdc:	4602      	mov	r2, r0
 800fbde:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fbe2:	f7ff bb2e 	b.w	800f242 <_dtoa_r+0x32>
 800fbe6:	693a      	ldr	r2, [r7, #16]
 800fbe8:	3202      	adds	r2, #2
 800fbea:	0092      	lsls	r2, r2, #2
 800fbec:	f107 010c 	add.w	r1, r7, #12
 800fbf0:	300c      	adds	r0, #12
 800fbf2:	f7fd fab5 	bl	800d160 <memcpy>
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	4629      	mov	r1, r5
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	f001 f900 	bl	8010e00 <__lshift>
 800fc00:	9b00      	ldr	r3, [sp, #0]
 800fc02:	3301      	adds	r3, #1
 800fc04:	9301      	str	r3, [sp, #4]
 800fc06:	9b00      	ldr	r3, [sp, #0]
 800fc08:	444b      	add	r3, r9
 800fc0a:	9307      	str	r3, [sp, #28]
 800fc0c:	9b02      	ldr	r3, [sp, #8]
 800fc0e:	f003 0301 	and.w	r3, r3, #1
 800fc12:	46b8      	mov	r8, r7
 800fc14:	9306      	str	r3, [sp, #24]
 800fc16:	4607      	mov	r7, r0
 800fc18:	9b01      	ldr	r3, [sp, #4]
 800fc1a:	4631      	mov	r1, r6
 800fc1c:	3b01      	subs	r3, #1
 800fc1e:	4658      	mov	r0, fp
 800fc20:	9302      	str	r3, [sp, #8]
 800fc22:	f7ff fa67 	bl	800f0f4 <quorem>
 800fc26:	4603      	mov	r3, r0
 800fc28:	3330      	adds	r3, #48	; 0x30
 800fc2a:	9004      	str	r0, [sp, #16]
 800fc2c:	4641      	mov	r1, r8
 800fc2e:	4658      	mov	r0, fp
 800fc30:	9308      	str	r3, [sp, #32]
 800fc32:	f001 f951 	bl	8010ed8 <__mcmp>
 800fc36:	463a      	mov	r2, r7
 800fc38:	4681      	mov	r9, r0
 800fc3a:	4631      	mov	r1, r6
 800fc3c:	4620      	mov	r0, r4
 800fc3e:	f001 f967 	bl	8010f10 <__mdiff>
 800fc42:	68c2      	ldr	r2, [r0, #12]
 800fc44:	9b08      	ldr	r3, [sp, #32]
 800fc46:	4605      	mov	r5, r0
 800fc48:	bb02      	cbnz	r2, 800fc8c <_dtoa_r+0xa7c>
 800fc4a:	4601      	mov	r1, r0
 800fc4c:	4658      	mov	r0, fp
 800fc4e:	f001 f943 	bl	8010ed8 <__mcmp>
 800fc52:	9b08      	ldr	r3, [sp, #32]
 800fc54:	4602      	mov	r2, r0
 800fc56:	4629      	mov	r1, r5
 800fc58:	4620      	mov	r0, r4
 800fc5a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fc5e:	f000 feb3 	bl	80109c8 <_Bfree>
 800fc62:	9b05      	ldr	r3, [sp, #20]
 800fc64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc66:	9d01      	ldr	r5, [sp, #4]
 800fc68:	ea43 0102 	orr.w	r1, r3, r2
 800fc6c:	9b06      	ldr	r3, [sp, #24]
 800fc6e:	430b      	orrs	r3, r1
 800fc70:	9b08      	ldr	r3, [sp, #32]
 800fc72:	d10d      	bne.n	800fc90 <_dtoa_r+0xa80>
 800fc74:	2b39      	cmp	r3, #57	; 0x39
 800fc76:	d029      	beq.n	800fccc <_dtoa_r+0xabc>
 800fc78:	f1b9 0f00 	cmp.w	r9, #0
 800fc7c:	dd01      	ble.n	800fc82 <_dtoa_r+0xa72>
 800fc7e:	9b04      	ldr	r3, [sp, #16]
 800fc80:	3331      	adds	r3, #49	; 0x31
 800fc82:	9a02      	ldr	r2, [sp, #8]
 800fc84:	7013      	strb	r3, [r2, #0]
 800fc86:	e774      	b.n	800fb72 <_dtoa_r+0x962>
 800fc88:	4638      	mov	r0, r7
 800fc8a:	e7b9      	b.n	800fc00 <_dtoa_r+0x9f0>
 800fc8c:	2201      	movs	r2, #1
 800fc8e:	e7e2      	b.n	800fc56 <_dtoa_r+0xa46>
 800fc90:	f1b9 0f00 	cmp.w	r9, #0
 800fc94:	db06      	blt.n	800fca4 <_dtoa_r+0xa94>
 800fc96:	9905      	ldr	r1, [sp, #20]
 800fc98:	ea41 0909 	orr.w	r9, r1, r9
 800fc9c:	9906      	ldr	r1, [sp, #24]
 800fc9e:	ea59 0101 	orrs.w	r1, r9, r1
 800fca2:	d120      	bne.n	800fce6 <_dtoa_r+0xad6>
 800fca4:	2a00      	cmp	r2, #0
 800fca6:	ddec      	ble.n	800fc82 <_dtoa_r+0xa72>
 800fca8:	4659      	mov	r1, fp
 800fcaa:	2201      	movs	r2, #1
 800fcac:	4620      	mov	r0, r4
 800fcae:	9301      	str	r3, [sp, #4]
 800fcb0:	f001 f8a6 	bl	8010e00 <__lshift>
 800fcb4:	4631      	mov	r1, r6
 800fcb6:	4683      	mov	fp, r0
 800fcb8:	f001 f90e 	bl	8010ed8 <__mcmp>
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	9b01      	ldr	r3, [sp, #4]
 800fcc0:	dc02      	bgt.n	800fcc8 <_dtoa_r+0xab8>
 800fcc2:	d1de      	bne.n	800fc82 <_dtoa_r+0xa72>
 800fcc4:	07da      	lsls	r2, r3, #31
 800fcc6:	d5dc      	bpl.n	800fc82 <_dtoa_r+0xa72>
 800fcc8:	2b39      	cmp	r3, #57	; 0x39
 800fcca:	d1d8      	bne.n	800fc7e <_dtoa_r+0xa6e>
 800fccc:	9a02      	ldr	r2, [sp, #8]
 800fcce:	2339      	movs	r3, #57	; 0x39
 800fcd0:	7013      	strb	r3, [r2, #0]
 800fcd2:	462b      	mov	r3, r5
 800fcd4:	461d      	mov	r5, r3
 800fcd6:	3b01      	subs	r3, #1
 800fcd8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fcdc:	2a39      	cmp	r2, #57	; 0x39
 800fcde:	d050      	beq.n	800fd82 <_dtoa_r+0xb72>
 800fce0:	3201      	adds	r2, #1
 800fce2:	701a      	strb	r2, [r3, #0]
 800fce4:	e745      	b.n	800fb72 <_dtoa_r+0x962>
 800fce6:	2a00      	cmp	r2, #0
 800fce8:	dd03      	ble.n	800fcf2 <_dtoa_r+0xae2>
 800fcea:	2b39      	cmp	r3, #57	; 0x39
 800fcec:	d0ee      	beq.n	800fccc <_dtoa_r+0xabc>
 800fcee:	3301      	adds	r3, #1
 800fcf0:	e7c7      	b.n	800fc82 <_dtoa_r+0xa72>
 800fcf2:	9a01      	ldr	r2, [sp, #4]
 800fcf4:	9907      	ldr	r1, [sp, #28]
 800fcf6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fcfa:	428a      	cmp	r2, r1
 800fcfc:	d02a      	beq.n	800fd54 <_dtoa_r+0xb44>
 800fcfe:	4659      	mov	r1, fp
 800fd00:	2300      	movs	r3, #0
 800fd02:	220a      	movs	r2, #10
 800fd04:	4620      	mov	r0, r4
 800fd06:	f000 fe81 	bl	8010a0c <__multadd>
 800fd0a:	45b8      	cmp	r8, r7
 800fd0c:	4683      	mov	fp, r0
 800fd0e:	f04f 0300 	mov.w	r3, #0
 800fd12:	f04f 020a 	mov.w	r2, #10
 800fd16:	4641      	mov	r1, r8
 800fd18:	4620      	mov	r0, r4
 800fd1a:	d107      	bne.n	800fd2c <_dtoa_r+0xb1c>
 800fd1c:	f000 fe76 	bl	8010a0c <__multadd>
 800fd20:	4680      	mov	r8, r0
 800fd22:	4607      	mov	r7, r0
 800fd24:	9b01      	ldr	r3, [sp, #4]
 800fd26:	3301      	adds	r3, #1
 800fd28:	9301      	str	r3, [sp, #4]
 800fd2a:	e775      	b.n	800fc18 <_dtoa_r+0xa08>
 800fd2c:	f000 fe6e 	bl	8010a0c <__multadd>
 800fd30:	4639      	mov	r1, r7
 800fd32:	4680      	mov	r8, r0
 800fd34:	2300      	movs	r3, #0
 800fd36:	220a      	movs	r2, #10
 800fd38:	4620      	mov	r0, r4
 800fd3a:	f000 fe67 	bl	8010a0c <__multadd>
 800fd3e:	4607      	mov	r7, r0
 800fd40:	e7f0      	b.n	800fd24 <_dtoa_r+0xb14>
 800fd42:	f1b9 0f00 	cmp.w	r9, #0
 800fd46:	9a00      	ldr	r2, [sp, #0]
 800fd48:	bfcc      	ite	gt
 800fd4a:	464d      	movgt	r5, r9
 800fd4c:	2501      	movle	r5, #1
 800fd4e:	4415      	add	r5, r2
 800fd50:	f04f 0800 	mov.w	r8, #0
 800fd54:	4659      	mov	r1, fp
 800fd56:	2201      	movs	r2, #1
 800fd58:	4620      	mov	r0, r4
 800fd5a:	9301      	str	r3, [sp, #4]
 800fd5c:	f001 f850 	bl	8010e00 <__lshift>
 800fd60:	4631      	mov	r1, r6
 800fd62:	4683      	mov	fp, r0
 800fd64:	f001 f8b8 	bl	8010ed8 <__mcmp>
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	dcb2      	bgt.n	800fcd2 <_dtoa_r+0xac2>
 800fd6c:	d102      	bne.n	800fd74 <_dtoa_r+0xb64>
 800fd6e:	9b01      	ldr	r3, [sp, #4]
 800fd70:	07db      	lsls	r3, r3, #31
 800fd72:	d4ae      	bmi.n	800fcd2 <_dtoa_r+0xac2>
 800fd74:	462b      	mov	r3, r5
 800fd76:	461d      	mov	r5, r3
 800fd78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd7c:	2a30      	cmp	r2, #48	; 0x30
 800fd7e:	d0fa      	beq.n	800fd76 <_dtoa_r+0xb66>
 800fd80:	e6f7      	b.n	800fb72 <_dtoa_r+0x962>
 800fd82:	9a00      	ldr	r2, [sp, #0]
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d1a5      	bne.n	800fcd4 <_dtoa_r+0xac4>
 800fd88:	f10a 0a01 	add.w	sl, sl, #1
 800fd8c:	2331      	movs	r3, #49	; 0x31
 800fd8e:	e779      	b.n	800fc84 <_dtoa_r+0xa74>
 800fd90:	4b13      	ldr	r3, [pc, #76]	; (800fde0 <_dtoa_r+0xbd0>)
 800fd92:	f7ff baaf 	b.w	800f2f4 <_dtoa_r+0xe4>
 800fd96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	f47f aa86 	bne.w	800f2aa <_dtoa_r+0x9a>
 800fd9e:	4b11      	ldr	r3, [pc, #68]	; (800fde4 <_dtoa_r+0xbd4>)
 800fda0:	f7ff baa8 	b.w	800f2f4 <_dtoa_r+0xe4>
 800fda4:	f1b9 0f00 	cmp.w	r9, #0
 800fda8:	dc03      	bgt.n	800fdb2 <_dtoa_r+0xba2>
 800fdaa:	9b05      	ldr	r3, [sp, #20]
 800fdac:	2b02      	cmp	r3, #2
 800fdae:	f73f aec9 	bgt.w	800fb44 <_dtoa_r+0x934>
 800fdb2:	9d00      	ldr	r5, [sp, #0]
 800fdb4:	4631      	mov	r1, r6
 800fdb6:	4658      	mov	r0, fp
 800fdb8:	f7ff f99c 	bl	800f0f4 <quorem>
 800fdbc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fdc0:	f805 3b01 	strb.w	r3, [r5], #1
 800fdc4:	9a00      	ldr	r2, [sp, #0]
 800fdc6:	1aaa      	subs	r2, r5, r2
 800fdc8:	4591      	cmp	r9, r2
 800fdca:	ddba      	ble.n	800fd42 <_dtoa_r+0xb32>
 800fdcc:	4659      	mov	r1, fp
 800fdce:	2300      	movs	r3, #0
 800fdd0:	220a      	movs	r2, #10
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	f000 fe1a 	bl	8010a0c <__multadd>
 800fdd8:	4683      	mov	fp, r0
 800fdda:	e7eb      	b.n	800fdb4 <_dtoa_r+0xba4>
 800fddc:	08013e8c 	.word	0x08013e8c
 800fde0:	08013c8c 	.word	0x08013c8c
 800fde4:	08013e09 	.word	0x08013e09

0800fde8 <__sflush_r>:
 800fde8:	898a      	ldrh	r2, [r1, #12]
 800fdea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdee:	4605      	mov	r5, r0
 800fdf0:	0710      	lsls	r0, r2, #28
 800fdf2:	460c      	mov	r4, r1
 800fdf4:	d458      	bmi.n	800fea8 <__sflush_r+0xc0>
 800fdf6:	684b      	ldr	r3, [r1, #4]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	dc05      	bgt.n	800fe08 <__sflush_r+0x20>
 800fdfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	dc02      	bgt.n	800fe08 <__sflush_r+0x20>
 800fe02:	2000      	movs	r0, #0
 800fe04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe0a:	2e00      	cmp	r6, #0
 800fe0c:	d0f9      	beq.n	800fe02 <__sflush_r+0x1a>
 800fe0e:	2300      	movs	r3, #0
 800fe10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe14:	682f      	ldr	r7, [r5, #0]
 800fe16:	602b      	str	r3, [r5, #0]
 800fe18:	d032      	beq.n	800fe80 <__sflush_r+0x98>
 800fe1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fe1c:	89a3      	ldrh	r3, [r4, #12]
 800fe1e:	075a      	lsls	r2, r3, #29
 800fe20:	d505      	bpl.n	800fe2e <__sflush_r+0x46>
 800fe22:	6863      	ldr	r3, [r4, #4]
 800fe24:	1ac0      	subs	r0, r0, r3
 800fe26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe28:	b10b      	cbz	r3, 800fe2e <__sflush_r+0x46>
 800fe2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe2c:	1ac0      	subs	r0, r0, r3
 800fe2e:	2300      	movs	r3, #0
 800fe30:	4602      	mov	r2, r0
 800fe32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe34:	6a21      	ldr	r1, [r4, #32]
 800fe36:	4628      	mov	r0, r5
 800fe38:	47b0      	blx	r6
 800fe3a:	1c43      	adds	r3, r0, #1
 800fe3c:	89a3      	ldrh	r3, [r4, #12]
 800fe3e:	d106      	bne.n	800fe4e <__sflush_r+0x66>
 800fe40:	6829      	ldr	r1, [r5, #0]
 800fe42:	291d      	cmp	r1, #29
 800fe44:	d82c      	bhi.n	800fea0 <__sflush_r+0xb8>
 800fe46:	4a2a      	ldr	r2, [pc, #168]	; (800fef0 <__sflush_r+0x108>)
 800fe48:	40ca      	lsrs	r2, r1
 800fe4a:	07d6      	lsls	r6, r2, #31
 800fe4c:	d528      	bpl.n	800fea0 <__sflush_r+0xb8>
 800fe4e:	2200      	movs	r2, #0
 800fe50:	6062      	str	r2, [r4, #4]
 800fe52:	04d9      	lsls	r1, r3, #19
 800fe54:	6922      	ldr	r2, [r4, #16]
 800fe56:	6022      	str	r2, [r4, #0]
 800fe58:	d504      	bpl.n	800fe64 <__sflush_r+0x7c>
 800fe5a:	1c42      	adds	r2, r0, #1
 800fe5c:	d101      	bne.n	800fe62 <__sflush_r+0x7a>
 800fe5e:	682b      	ldr	r3, [r5, #0]
 800fe60:	b903      	cbnz	r3, 800fe64 <__sflush_r+0x7c>
 800fe62:	6560      	str	r0, [r4, #84]	; 0x54
 800fe64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe66:	602f      	str	r7, [r5, #0]
 800fe68:	2900      	cmp	r1, #0
 800fe6a:	d0ca      	beq.n	800fe02 <__sflush_r+0x1a>
 800fe6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe70:	4299      	cmp	r1, r3
 800fe72:	d002      	beq.n	800fe7a <__sflush_r+0x92>
 800fe74:	4628      	mov	r0, r5
 800fe76:	f7fd f999 	bl	800d1ac <_free_r>
 800fe7a:	2000      	movs	r0, #0
 800fe7c:	6360      	str	r0, [r4, #52]	; 0x34
 800fe7e:	e7c1      	b.n	800fe04 <__sflush_r+0x1c>
 800fe80:	6a21      	ldr	r1, [r4, #32]
 800fe82:	2301      	movs	r3, #1
 800fe84:	4628      	mov	r0, r5
 800fe86:	47b0      	blx	r6
 800fe88:	1c41      	adds	r1, r0, #1
 800fe8a:	d1c7      	bne.n	800fe1c <__sflush_r+0x34>
 800fe8c:	682b      	ldr	r3, [r5, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d0c4      	beq.n	800fe1c <__sflush_r+0x34>
 800fe92:	2b1d      	cmp	r3, #29
 800fe94:	d001      	beq.n	800fe9a <__sflush_r+0xb2>
 800fe96:	2b16      	cmp	r3, #22
 800fe98:	d101      	bne.n	800fe9e <__sflush_r+0xb6>
 800fe9a:	602f      	str	r7, [r5, #0]
 800fe9c:	e7b1      	b.n	800fe02 <__sflush_r+0x1a>
 800fe9e:	89a3      	ldrh	r3, [r4, #12]
 800fea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fea4:	81a3      	strh	r3, [r4, #12]
 800fea6:	e7ad      	b.n	800fe04 <__sflush_r+0x1c>
 800fea8:	690f      	ldr	r7, [r1, #16]
 800feaa:	2f00      	cmp	r7, #0
 800feac:	d0a9      	beq.n	800fe02 <__sflush_r+0x1a>
 800feae:	0793      	lsls	r3, r2, #30
 800feb0:	680e      	ldr	r6, [r1, #0]
 800feb2:	bf08      	it	eq
 800feb4:	694b      	ldreq	r3, [r1, #20]
 800feb6:	600f      	str	r7, [r1, #0]
 800feb8:	bf18      	it	ne
 800feba:	2300      	movne	r3, #0
 800febc:	eba6 0807 	sub.w	r8, r6, r7
 800fec0:	608b      	str	r3, [r1, #8]
 800fec2:	f1b8 0f00 	cmp.w	r8, #0
 800fec6:	dd9c      	ble.n	800fe02 <__sflush_r+0x1a>
 800fec8:	6a21      	ldr	r1, [r4, #32]
 800feca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fecc:	4643      	mov	r3, r8
 800fece:	463a      	mov	r2, r7
 800fed0:	4628      	mov	r0, r5
 800fed2:	47b0      	blx	r6
 800fed4:	2800      	cmp	r0, #0
 800fed6:	dc06      	bgt.n	800fee6 <__sflush_r+0xfe>
 800fed8:	89a3      	ldrh	r3, [r4, #12]
 800feda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fede:	81a3      	strh	r3, [r4, #12]
 800fee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fee4:	e78e      	b.n	800fe04 <__sflush_r+0x1c>
 800fee6:	4407      	add	r7, r0
 800fee8:	eba8 0800 	sub.w	r8, r8, r0
 800feec:	e7e9      	b.n	800fec2 <__sflush_r+0xda>
 800feee:	bf00      	nop
 800fef0:	20400001 	.word	0x20400001

0800fef4 <_fflush_r>:
 800fef4:	b538      	push	{r3, r4, r5, lr}
 800fef6:	690b      	ldr	r3, [r1, #16]
 800fef8:	4605      	mov	r5, r0
 800fefa:	460c      	mov	r4, r1
 800fefc:	b913      	cbnz	r3, 800ff04 <_fflush_r+0x10>
 800fefe:	2500      	movs	r5, #0
 800ff00:	4628      	mov	r0, r5
 800ff02:	bd38      	pop	{r3, r4, r5, pc}
 800ff04:	b118      	cbz	r0, 800ff0e <_fflush_r+0x1a>
 800ff06:	6983      	ldr	r3, [r0, #24]
 800ff08:	b90b      	cbnz	r3, 800ff0e <_fflush_r+0x1a>
 800ff0a:	f000 f887 	bl	801001c <__sinit>
 800ff0e:	4b14      	ldr	r3, [pc, #80]	; (800ff60 <_fflush_r+0x6c>)
 800ff10:	429c      	cmp	r4, r3
 800ff12:	d11b      	bne.n	800ff4c <_fflush_r+0x58>
 800ff14:	686c      	ldr	r4, [r5, #4]
 800ff16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d0ef      	beq.n	800fefe <_fflush_r+0xa>
 800ff1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff20:	07d0      	lsls	r0, r2, #31
 800ff22:	d404      	bmi.n	800ff2e <_fflush_r+0x3a>
 800ff24:	0599      	lsls	r1, r3, #22
 800ff26:	d402      	bmi.n	800ff2e <_fflush_r+0x3a>
 800ff28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff2a:	f000 fc88 	bl	801083e <__retarget_lock_acquire_recursive>
 800ff2e:	4628      	mov	r0, r5
 800ff30:	4621      	mov	r1, r4
 800ff32:	f7ff ff59 	bl	800fde8 <__sflush_r>
 800ff36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff38:	07da      	lsls	r2, r3, #31
 800ff3a:	4605      	mov	r5, r0
 800ff3c:	d4e0      	bmi.n	800ff00 <_fflush_r+0xc>
 800ff3e:	89a3      	ldrh	r3, [r4, #12]
 800ff40:	059b      	lsls	r3, r3, #22
 800ff42:	d4dd      	bmi.n	800ff00 <_fflush_r+0xc>
 800ff44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff46:	f000 fc7b 	bl	8010840 <__retarget_lock_release_recursive>
 800ff4a:	e7d9      	b.n	800ff00 <_fflush_r+0xc>
 800ff4c:	4b05      	ldr	r3, [pc, #20]	; (800ff64 <_fflush_r+0x70>)
 800ff4e:	429c      	cmp	r4, r3
 800ff50:	d101      	bne.n	800ff56 <_fflush_r+0x62>
 800ff52:	68ac      	ldr	r4, [r5, #8]
 800ff54:	e7df      	b.n	800ff16 <_fflush_r+0x22>
 800ff56:	4b04      	ldr	r3, [pc, #16]	; (800ff68 <_fflush_r+0x74>)
 800ff58:	429c      	cmp	r4, r3
 800ff5a:	bf08      	it	eq
 800ff5c:	68ec      	ldreq	r4, [r5, #12]
 800ff5e:	e7da      	b.n	800ff16 <_fflush_r+0x22>
 800ff60:	08013ec0 	.word	0x08013ec0
 800ff64:	08013ee0 	.word	0x08013ee0
 800ff68:	08013ea0 	.word	0x08013ea0

0800ff6c <std>:
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	b510      	push	{r4, lr}
 800ff70:	4604      	mov	r4, r0
 800ff72:	e9c0 3300 	strd	r3, r3, [r0]
 800ff76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff7a:	6083      	str	r3, [r0, #8]
 800ff7c:	8181      	strh	r1, [r0, #12]
 800ff7e:	6643      	str	r3, [r0, #100]	; 0x64
 800ff80:	81c2      	strh	r2, [r0, #14]
 800ff82:	6183      	str	r3, [r0, #24]
 800ff84:	4619      	mov	r1, r3
 800ff86:	2208      	movs	r2, #8
 800ff88:	305c      	adds	r0, #92	; 0x5c
 800ff8a:	f7fd f8f7 	bl	800d17c <memset>
 800ff8e:	4b05      	ldr	r3, [pc, #20]	; (800ffa4 <std+0x38>)
 800ff90:	6263      	str	r3, [r4, #36]	; 0x24
 800ff92:	4b05      	ldr	r3, [pc, #20]	; (800ffa8 <std+0x3c>)
 800ff94:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff96:	4b05      	ldr	r3, [pc, #20]	; (800ffac <std+0x40>)
 800ff98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ff9a:	4b05      	ldr	r3, [pc, #20]	; (800ffb0 <std+0x44>)
 800ff9c:	6224      	str	r4, [r4, #32]
 800ff9e:	6323      	str	r3, [r4, #48]	; 0x30
 800ffa0:	bd10      	pop	{r4, pc}
 800ffa2:	bf00      	nop
 800ffa4:	08011839 	.word	0x08011839
 800ffa8:	0801185b 	.word	0x0801185b
 800ffac:	08011893 	.word	0x08011893
 800ffb0:	080118b7 	.word	0x080118b7

0800ffb4 <_cleanup_r>:
 800ffb4:	4901      	ldr	r1, [pc, #4]	; (800ffbc <_cleanup_r+0x8>)
 800ffb6:	f000 b8af 	b.w	8010118 <_fwalk_reent>
 800ffba:	bf00      	nop
 800ffbc:	0800fef5 	.word	0x0800fef5

0800ffc0 <__sfmoreglue>:
 800ffc0:	b570      	push	{r4, r5, r6, lr}
 800ffc2:	1e4a      	subs	r2, r1, #1
 800ffc4:	2568      	movs	r5, #104	; 0x68
 800ffc6:	4355      	muls	r5, r2
 800ffc8:	460e      	mov	r6, r1
 800ffca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ffce:	f7fd f93d 	bl	800d24c <_malloc_r>
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	b140      	cbz	r0, 800ffe8 <__sfmoreglue+0x28>
 800ffd6:	2100      	movs	r1, #0
 800ffd8:	e9c0 1600 	strd	r1, r6, [r0]
 800ffdc:	300c      	adds	r0, #12
 800ffde:	60a0      	str	r0, [r4, #8]
 800ffe0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ffe4:	f7fd f8ca 	bl	800d17c <memset>
 800ffe8:	4620      	mov	r0, r4
 800ffea:	bd70      	pop	{r4, r5, r6, pc}

0800ffec <__sfp_lock_acquire>:
 800ffec:	4801      	ldr	r0, [pc, #4]	; (800fff4 <__sfp_lock_acquire+0x8>)
 800ffee:	f000 bc26 	b.w	801083e <__retarget_lock_acquire_recursive>
 800fff2:	bf00      	nop
 800fff4:	2000746c 	.word	0x2000746c

0800fff8 <__sfp_lock_release>:
 800fff8:	4801      	ldr	r0, [pc, #4]	; (8010000 <__sfp_lock_release+0x8>)
 800fffa:	f000 bc21 	b.w	8010840 <__retarget_lock_release_recursive>
 800fffe:	bf00      	nop
 8010000:	2000746c 	.word	0x2000746c

08010004 <__sinit_lock_acquire>:
 8010004:	4801      	ldr	r0, [pc, #4]	; (801000c <__sinit_lock_acquire+0x8>)
 8010006:	f000 bc1a 	b.w	801083e <__retarget_lock_acquire_recursive>
 801000a:	bf00      	nop
 801000c:	20007467 	.word	0x20007467

08010010 <__sinit_lock_release>:
 8010010:	4801      	ldr	r0, [pc, #4]	; (8010018 <__sinit_lock_release+0x8>)
 8010012:	f000 bc15 	b.w	8010840 <__retarget_lock_release_recursive>
 8010016:	bf00      	nop
 8010018:	20007467 	.word	0x20007467

0801001c <__sinit>:
 801001c:	b510      	push	{r4, lr}
 801001e:	4604      	mov	r4, r0
 8010020:	f7ff fff0 	bl	8010004 <__sinit_lock_acquire>
 8010024:	69a3      	ldr	r3, [r4, #24]
 8010026:	b11b      	cbz	r3, 8010030 <__sinit+0x14>
 8010028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801002c:	f7ff bff0 	b.w	8010010 <__sinit_lock_release>
 8010030:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010034:	6523      	str	r3, [r4, #80]	; 0x50
 8010036:	4b13      	ldr	r3, [pc, #76]	; (8010084 <__sinit+0x68>)
 8010038:	4a13      	ldr	r2, [pc, #76]	; (8010088 <__sinit+0x6c>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	62a2      	str	r2, [r4, #40]	; 0x28
 801003e:	42a3      	cmp	r3, r4
 8010040:	bf04      	itt	eq
 8010042:	2301      	moveq	r3, #1
 8010044:	61a3      	streq	r3, [r4, #24]
 8010046:	4620      	mov	r0, r4
 8010048:	f000 f820 	bl	801008c <__sfp>
 801004c:	6060      	str	r0, [r4, #4]
 801004e:	4620      	mov	r0, r4
 8010050:	f000 f81c 	bl	801008c <__sfp>
 8010054:	60a0      	str	r0, [r4, #8]
 8010056:	4620      	mov	r0, r4
 8010058:	f000 f818 	bl	801008c <__sfp>
 801005c:	2200      	movs	r2, #0
 801005e:	60e0      	str	r0, [r4, #12]
 8010060:	2104      	movs	r1, #4
 8010062:	6860      	ldr	r0, [r4, #4]
 8010064:	f7ff ff82 	bl	800ff6c <std>
 8010068:	68a0      	ldr	r0, [r4, #8]
 801006a:	2201      	movs	r2, #1
 801006c:	2109      	movs	r1, #9
 801006e:	f7ff ff7d 	bl	800ff6c <std>
 8010072:	68e0      	ldr	r0, [r4, #12]
 8010074:	2202      	movs	r2, #2
 8010076:	2112      	movs	r1, #18
 8010078:	f7ff ff78 	bl	800ff6c <std>
 801007c:	2301      	movs	r3, #1
 801007e:	61a3      	str	r3, [r4, #24]
 8010080:	e7d2      	b.n	8010028 <__sinit+0xc>
 8010082:	bf00      	nop
 8010084:	08013c78 	.word	0x08013c78
 8010088:	0800ffb5 	.word	0x0800ffb5

0801008c <__sfp>:
 801008c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801008e:	4607      	mov	r7, r0
 8010090:	f7ff ffac 	bl	800ffec <__sfp_lock_acquire>
 8010094:	4b1e      	ldr	r3, [pc, #120]	; (8010110 <__sfp+0x84>)
 8010096:	681e      	ldr	r6, [r3, #0]
 8010098:	69b3      	ldr	r3, [r6, #24]
 801009a:	b913      	cbnz	r3, 80100a2 <__sfp+0x16>
 801009c:	4630      	mov	r0, r6
 801009e:	f7ff ffbd 	bl	801001c <__sinit>
 80100a2:	3648      	adds	r6, #72	; 0x48
 80100a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80100a8:	3b01      	subs	r3, #1
 80100aa:	d503      	bpl.n	80100b4 <__sfp+0x28>
 80100ac:	6833      	ldr	r3, [r6, #0]
 80100ae:	b30b      	cbz	r3, 80100f4 <__sfp+0x68>
 80100b0:	6836      	ldr	r6, [r6, #0]
 80100b2:	e7f7      	b.n	80100a4 <__sfp+0x18>
 80100b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80100b8:	b9d5      	cbnz	r5, 80100f0 <__sfp+0x64>
 80100ba:	4b16      	ldr	r3, [pc, #88]	; (8010114 <__sfp+0x88>)
 80100bc:	60e3      	str	r3, [r4, #12]
 80100be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80100c2:	6665      	str	r5, [r4, #100]	; 0x64
 80100c4:	f000 fbba 	bl	801083c <__retarget_lock_init_recursive>
 80100c8:	f7ff ff96 	bl	800fff8 <__sfp_lock_release>
 80100cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80100d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80100d4:	6025      	str	r5, [r4, #0]
 80100d6:	61a5      	str	r5, [r4, #24]
 80100d8:	2208      	movs	r2, #8
 80100da:	4629      	mov	r1, r5
 80100dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80100e0:	f7fd f84c 	bl	800d17c <memset>
 80100e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80100e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80100ec:	4620      	mov	r0, r4
 80100ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100f0:	3468      	adds	r4, #104	; 0x68
 80100f2:	e7d9      	b.n	80100a8 <__sfp+0x1c>
 80100f4:	2104      	movs	r1, #4
 80100f6:	4638      	mov	r0, r7
 80100f8:	f7ff ff62 	bl	800ffc0 <__sfmoreglue>
 80100fc:	4604      	mov	r4, r0
 80100fe:	6030      	str	r0, [r6, #0]
 8010100:	2800      	cmp	r0, #0
 8010102:	d1d5      	bne.n	80100b0 <__sfp+0x24>
 8010104:	f7ff ff78 	bl	800fff8 <__sfp_lock_release>
 8010108:	230c      	movs	r3, #12
 801010a:	603b      	str	r3, [r7, #0]
 801010c:	e7ee      	b.n	80100ec <__sfp+0x60>
 801010e:	bf00      	nop
 8010110:	08013c78 	.word	0x08013c78
 8010114:	ffff0001 	.word	0xffff0001

08010118 <_fwalk_reent>:
 8010118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801011c:	4606      	mov	r6, r0
 801011e:	4688      	mov	r8, r1
 8010120:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010124:	2700      	movs	r7, #0
 8010126:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801012a:	f1b9 0901 	subs.w	r9, r9, #1
 801012e:	d505      	bpl.n	801013c <_fwalk_reent+0x24>
 8010130:	6824      	ldr	r4, [r4, #0]
 8010132:	2c00      	cmp	r4, #0
 8010134:	d1f7      	bne.n	8010126 <_fwalk_reent+0xe>
 8010136:	4638      	mov	r0, r7
 8010138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801013c:	89ab      	ldrh	r3, [r5, #12]
 801013e:	2b01      	cmp	r3, #1
 8010140:	d907      	bls.n	8010152 <_fwalk_reent+0x3a>
 8010142:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010146:	3301      	adds	r3, #1
 8010148:	d003      	beq.n	8010152 <_fwalk_reent+0x3a>
 801014a:	4629      	mov	r1, r5
 801014c:	4630      	mov	r0, r6
 801014e:	47c0      	blx	r8
 8010150:	4307      	orrs	r7, r0
 8010152:	3568      	adds	r5, #104	; 0x68
 8010154:	e7e9      	b.n	801012a <_fwalk_reent+0x12>

08010156 <rshift>:
 8010156:	6903      	ldr	r3, [r0, #16]
 8010158:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801015c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010160:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010164:	f100 0414 	add.w	r4, r0, #20
 8010168:	dd45      	ble.n	80101f6 <rshift+0xa0>
 801016a:	f011 011f 	ands.w	r1, r1, #31
 801016e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010172:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010176:	d10c      	bne.n	8010192 <rshift+0x3c>
 8010178:	f100 0710 	add.w	r7, r0, #16
 801017c:	4629      	mov	r1, r5
 801017e:	42b1      	cmp	r1, r6
 8010180:	d334      	bcc.n	80101ec <rshift+0x96>
 8010182:	1a9b      	subs	r3, r3, r2
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	1eea      	subs	r2, r5, #3
 8010188:	4296      	cmp	r6, r2
 801018a:	bf38      	it	cc
 801018c:	2300      	movcc	r3, #0
 801018e:	4423      	add	r3, r4
 8010190:	e015      	b.n	80101be <rshift+0x68>
 8010192:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010196:	f1c1 0820 	rsb	r8, r1, #32
 801019a:	40cf      	lsrs	r7, r1
 801019c:	f105 0e04 	add.w	lr, r5, #4
 80101a0:	46a1      	mov	r9, r4
 80101a2:	4576      	cmp	r6, lr
 80101a4:	46f4      	mov	ip, lr
 80101a6:	d815      	bhi.n	80101d4 <rshift+0x7e>
 80101a8:	1a9b      	subs	r3, r3, r2
 80101aa:	009a      	lsls	r2, r3, #2
 80101ac:	3a04      	subs	r2, #4
 80101ae:	3501      	adds	r5, #1
 80101b0:	42ae      	cmp	r6, r5
 80101b2:	bf38      	it	cc
 80101b4:	2200      	movcc	r2, #0
 80101b6:	18a3      	adds	r3, r4, r2
 80101b8:	50a7      	str	r7, [r4, r2]
 80101ba:	b107      	cbz	r7, 80101be <rshift+0x68>
 80101bc:	3304      	adds	r3, #4
 80101be:	1b1a      	subs	r2, r3, r4
 80101c0:	42a3      	cmp	r3, r4
 80101c2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80101c6:	bf08      	it	eq
 80101c8:	2300      	moveq	r3, #0
 80101ca:	6102      	str	r2, [r0, #16]
 80101cc:	bf08      	it	eq
 80101ce:	6143      	streq	r3, [r0, #20]
 80101d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101d4:	f8dc c000 	ldr.w	ip, [ip]
 80101d8:	fa0c fc08 	lsl.w	ip, ip, r8
 80101dc:	ea4c 0707 	orr.w	r7, ip, r7
 80101e0:	f849 7b04 	str.w	r7, [r9], #4
 80101e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80101e8:	40cf      	lsrs	r7, r1
 80101ea:	e7da      	b.n	80101a2 <rshift+0x4c>
 80101ec:	f851 cb04 	ldr.w	ip, [r1], #4
 80101f0:	f847 cf04 	str.w	ip, [r7, #4]!
 80101f4:	e7c3      	b.n	801017e <rshift+0x28>
 80101f6:	4623      	mov	r3, r4
 80101f8:	e7e1      	b.n	80101be <rshift+0x68>

080101fa <__hexdig_fun>:
 80101fa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80101fe:	2b09      	cmp	r3, #9
 8010200:	d802      	bhi.n	8010208 <__hexdig_fun+0xe>
 8010202:	3820      	subs	r0, #32
 8010204:	b2c0      	uxtb	r0, r0
 8010206:	4770      	bx	lr
 8010208:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801020c:	2b05      	cmp	r3, #5
 801020e:	d801      	bhi.n	8010214 <__hexdig_fun+0x1a>
 8010210:	3847      	subs	r0, #71	; 0x47
 8010212:	e7f7      	b.n	8010204 <__hexdig_fun+0xa>
 8010214:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010218:	2b05      	cmp	r3, #5
 801021a:	d801      	bhi.n	8010220 <__hexdig_fun+0x26>
 801021c:	3827      	subs	r0, #39	; 0x27
 801021e:	e7f1      	b.n	8010204 <__hexdig_fun+0xa>
 8010220:	2000      	movs	r0, #0
 8010222:	4770      	bx	lr

08010224 <__gethex>:
 8010224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010228:	ed2d 8b02 	vpush	{d8}
 801022c:	b089      	sub	sp, #36	; 0x24
 801022e:	ee08 0a10 	vmov	s16, r0
 8010232:	9304      	str	r3, [sp, #16]
 8010234:	4bbc      	ldr	r3, [pc, #752]	; (8010528 <__gethex+0x304>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	9301      	str	r3, [sp, #4]
 801023a:	4618      	mov	r0, r3
 801023c:	468b      	mov	fp, r1
 801023e:	4690      	mov	r8, r2
 8010240:	f7ef ffe6 	bl	8000210 <strlen>
 8010244:	9b01      	ldr	r3, [sp, #4]
 8010246:	f8db 2000 	ldr.w	r2, [fp]
 801024a:	4403      	add	r3, r0
 801024c:	4682      	mov	sl, r0
 801024e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010252:	9305      	str	r3, [sp, #20]
 8010254:	1c93      	adds	r3, r2, #2
 8010256:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801025a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801025e:	32fe      	adds	r2, #254	; 0xfe
 8010260:	18d1      	adds	r1, r2, r3
 8010262:	461f      	mov	r7, r3
 8010264:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010268:	9100      	str	r1, [sp, #0]
 801026a:	2830      	cmp	r0, #48	; 0x30
 801026c:	d0f8      	beq.n	8010260 <__gethex+0x3c>
 801026e:	f7ff ffc4 	bl	80101fa <__hexdig_fun>
 8010272:	4604      	mov	r4, r0
 8010274:	2800      	cmp	r0, #0
 8010276:	d13a      	bne.n	80102ee <__gethex+0xca>
 8010278:	9901      	ldr	r1, [sp, #4]
 801027a:	4652      	mov	r2, sl
 801027c:	4638      	mov	r0, r7
 801027e:	f001 fb1e 	bl	80118be <strncmp>
 8010282:	4605      	mov	r5, r0
 8010284:	2800      	cmp	r0, #0
 8010286:	d168      	bne.n	801035a <__gethex+0x136>
 8010288:	f817 000a 	ldrb.w	r0, [r7, sl]
 801028c:	eb07 060a 	add.w	r6, r7, sl
 8010290:	f7ff ffb3 	bl	80101fa <__hexdig_fun>
 8010294:	2800      	cmp	r0, #0
 8010296:	d062      	beq.n	801035e <__gethex+0x13a>
 8010298:	4633      	mov	r3, r6
 801029a:	7818      	ldrb	r0, [r3, #0]
 801029c:	2830      	cmp	r0, #48	; 0x30
 801029e:	461f      	mov	r7, r3
 80102a0:	f103 0301 	add.w	r3, r3, #1
 80102a4:	d0f9      	beq.n	801029a <__gethex+0x76>
 80102a6:	f7ff ffa8 	bl	80101fa <__hexdig_fun>
 80102aa:	2301      	movs	r3, #1
 80102ac:	fab0 f480 	clz	r4, r0
 80102b0:	0964      	lsrs	r4, r4, #5
 80102b2:	4635      	mov	r5, r6
 80102b4:	9300      	str	r3, [sp, #0]
 80102b6:	463a      	mov	r2, r7
 80102b8:	4616      	mov	r6, r2
 80102ba:	3201      	adds	r2, #1
 80102bc:	7830      	ldrb	r0, [r6, #0]
 80102be:	f7ff ff9c 	bl	80101fa <__hexdig_fun>
 80102c2:	2800      	cmp	r0, #0
 80102c4:	d1f8      	bne.n	80102b8 <__gethex+0x94>
 80102c6:	9901      	ldr	r1, [sp, #4]
 80102c8:	4652      	mov	r2, sl
 80102ca:	4630      	mov	r0, r6
 80102cc:	f001 faf7 	bl	80118be <strncmp>
 80102d0:	b980      	cbnz	r0, 80102f4 <__gethex+0xd0>
 80102d2:	b94d      	cbnz	r5, 80102e8 <__gethex+0xc4>
 80102d4:	eb06 050a 	add.w	r5, r6, sl
 80102d8:	462a      	mov	r2, r5
 80102da:	4616      	mov	r6, r2
 80102dc:	3201      	adds	r2, #1
 80102de:	7830      	ldrb	r0, [r6, #0]
 80102e0:	f7ff ff8b 	bl	80101fa <__hexdig_fun>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	d1f8      	bne.n	80102da <__gethex+0xb6>
 80102e8:	1bad      	subs	r5, r5, r6
 80102ea:	00ad      	lsls	r5, r5, #2
 80102ec:	e004      	b.n	80102f8 <__gethex+0xd4>
 80102ee:	2400      	movs	r4, #0
 80102f0:	4625      	mov	r5, r4
 80102f2:	e7e0      	b.n	80102b6 <__gethex+0x92>
 80102f4:	2d00      	cmp	r5, #0
 80102f6:	d1f7      	bne.n	80102e8 <__gethex+0xc4>
 80102f8:	7833      	ldrb	r3, [r6, #0]
 80102fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80102fe:	2b50      	cmp	r3, #80	; 0x50
 8010300:	d13b      	bne.n	801037a <__gethex+0x156>
 8010302:	7873      	ldrb	r3, [r6, #1]
 8010304:	2b2b      	cmp	r3, #43	; 0x2b
 8010306:	d02c      	beq.n	8010362 <__gethex+0x13e>
 8010308:	2b2d      	cmp	r3, #45	; 0x2d
 801030a:	d02e      	beq.n	801036a <__gethex+0x146>
 801030c:	1c71      	adds	r1, r6, #1
 801030e:	f04f 0900 	mov.w	r9, #0
 8010312:	7808      	ldrb	r0, [r1, #0]
 8010314:	f7ff ff71 	bl	80101fa <__hexdig_fun>
 8010318:	1e43      	subs	r3, r0, #1
 801031a:	b2db      	uxtb	r3, r3
 801031c:	2b18      	cmp	r3, #24
 801031e:	d82c      	bhi.n	801037a <__gethex+0x156>
 8010320:	f1a0 0210 	sub.w	r2, r0, #16
 8010324:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010328:	f7ff ff67 	bl	80101fa <__hexdig_fun>
 801032c:	1e43      	subs	r3, r0, #1
 801032e:	b2db      	uxtb	r3, r3
 8010330:	2b18      	cmp	r3, #24
 8010332:	d91d      	bls.n	8010370 <__gethex+0x14c>
 8010334:	f1b9 0f00 	cmp.w	r9, #0
 8010338:	d000      	beq.n	801033c <__gethex+0x118>
 801033a:	4252      	negs	r2, r2
 801033c:	4415      	add	r5, r2
 801033e:	f8cb 1000 	str.w	r1, [fp]
 8010342:	b1e4      	cbz	r4, 801037e <__gethex+0x15a>
 8010344:	9b00      	ldr	r3, [sp, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	bf14      	ite	ne
 801034a:	2700      	movne	r7, #0
 801034c:	2706      	moveq	r7, #6
 801034e:	4638      	mov	r0, r7
 8010350:	b009      	add	sp, #36	; 0x24
 8010352:	ecbd 8b02 	vpop	{d8}
 8010356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801035a:	463e      	mov	r6, r7
 801035c:	4625      	mov	r5, r4
 801035e:	2401      	movs	r4, #1
 8010360:	e7ca      	b.n	80102f8 <__gethex+0xd4>
 8010362:	f04f 0900 	mov.w	r9, #0
 8010366:	1cb1      	adds	r1, r6, #2
 8010368:	e7d3      	b.n	8010312 <__gethex+0xee>
 801036a:	f04f 0901 	mov.w	r9, #1
 801036e:	e7fa      	b.n	8010366 <__gethex+0x142>
 8010370:	230a      	movs	r3, #10
 8010372:	fb03 0202 	mla	r2, r3, r2, r0
 8010376:	3a10      	subs	r2, #16
 8010378:	e7d4      	b.n	8010324 <__gethex+0x100>
 801037a:	4631      	mov	r1, r6
 801037c:	e7df      	b.n	801033e <__gethex+0x11a>
 801037e:	1bf3      	subs	r3, r6, r7
 8010380:	3b01      	subs	r3, #1
 8010382:	4621      	mov	r1, r4
 8010384:	2b07      	cmp	r3, #7
 8010386:	dc0b      	bgt.n	80103a0 <__gethex+0x17c>
 8010388:	ee18 0a10 	vmov	r0, s16
 801038c:	f000 fadc 	bl	8010948 <_Balloc>
 8010390:	4604      	mov	r4, r0
 8010392:	b940      	cbnz	r0, 80103a6 <__gethex+0x182>
 8010394:	4b65      	ldr	r3, [pc, #404]	; (801052c <__gethex+0x308>)
 8010396:	4602      	mov	r2, r0
 8010398:	21de      	movs	r1, #222	; 0xde
 801039a:	4865      	ldr	r0, [pc, #404]	; (8010530 <__gethex+0x30c>)
 801039c:	f001 fac0 	bl	8011920 <__assert_func>
 80103a0:	3101      	adds	r1, #1
 80103a2:	105b      	asrs	r3, r3, #1
 80103a4:	e7ee      	b.n	8010384 <__gethex+0x160>
 80103a6:	f100 0914 	add.w	r9, r0, #20
 80103aa:	f04f 0b00 	mov.w	fp, #0
 80103ae:	f1ca 0301 	rsb	r3, sl, #1
 80103b2:	f8cd 9008 	str.w	r9, [sp, #8]
 80103b6:	f8cd b000 	str.w	fp, [sp]
 80103ba:	9306      	str	r3, [sp, #24]
 80103bc:	42b7      	cmp	r7, r6
 80103be:	d340      	bcc.n	8010442 <__gethex+0x21e>
 80103c0:	9802      	ldr	r0, [sp, #8]
 80103c2:	9b00      	ldr	r3, [sp, #0]
 80103c4:	f840 3b04 	str.w	r3, [r0], #4
 80103c8:	eba0 0009 	sub.w	r0, r0, r9
 80103cc:	1080      	asrs	r0, r0, #2
 80103ce:	0146      	lsls	r6, r0, #5
 80103d0:	6120      	str	r0, [r4, #16]
 80103d2:	4618      	mov	r0, r3
 80103d4:	f000 fbae 	bl	8010b34 <__hi0bits>
 80103d8:	1a30      	subs	r0, r6, r0
 80103da:	f8d8 6000 	ldr.w	r6, [r8]
 80103de:	42b0      	cmp	r0, r6
 80103e0:	dd63      	ble.n	80104aa <__gethex+0x286>
 80103e2:	1b87      	subs	r7, r0, r6
 80103e4:	4639      	mov	r1, r7
 80103e6:	4620      	mov	r0, r4
 80103e8:	f000 ff48 	bl	801127c <__any_on>
 80103ec:	4682      	mov	sl, r0
 80103ee:	b1a8      	cbz	r0, 801041c <__gethex+0x1f8>
 80103f0:	1e7b      	subs	r3, r7, #1
 80103f2:	1159      	asrs	r1, r3, #5
 80103f4:	f003 021f 	and.w	r2, r3, #31
 80103f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80103fc:	f04f 0a01 	mov.w	sl, #1
 8010400:	fa0a f202 	lsl.w	r2, sl, r2
 8010404:	420a      	tst	r2, r1
 8010406:	d009      	beq.n	801041c <__gethex+0x1f8>
 8010408:	4553      	cmp	r3, sl
 801040a:	dd05      	ble.n	8010418 <__gethex+0x1f4>
 801040c:	1eb9      	subs	r1, r7, #2
 801040e:	4620      	mov	r0, r4
 8010410:	f000 ff34 	bl	801127c <__any_on>
 8010414:	2800      	cmp	r0, #0
 8010416:	d145      	bne.n	80104a4 <__gethex+0x280>
 8010418:	f04f 0a02 	mov.w	sl, #2
 801041c:	4639      	mov	r1, r7
 801041e:	4620      	mov	r0, r4
 8010420:	f7ff fe99 	bl	8010156 <rshift>
 8010424:	443d      	add	r5, r7
 8010426:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801042a:	42ab      	cmp	r3, r5
 801042c:	da4c      	bge.n	80104c8 <__gethex+0x2a4>
 801042e:	ee18 0a10 	vmov	r0, s16
 8010432:	4621      	mov	r1, r4
 8010434:	f000 fac8 	bl	80109c8 <_Bfree>
 8010438:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801043a:	2300      	movs	r3, #0
 801043c:	6013      	str	r3, [r2, #0]
 801043e:	27a3      	movs	r7, #163	; 0xa3
 8010440:	e785      	b.n	801034e <__gethex+0x12a>
 8010442:	1e73      	subs	r3, r6, #1
 8010444:	9a05      	ldr	r2, [sp, #20]
 8010446:	9303      	str	r3, [sp, #12]
 8010448:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801044c:	4293      	cmp	r3, r2
 801044e:	d019      	beq.n	8010484 <__gethex+0x260>
 8010450:	f1bb 0f20 	cmp.w	fp, #32
 8010454:	d107      	bne.n	8010466 <__gethex+0x242>
 8010456:	9b02      	ldr	r3, [sp, #8]
 8010458:	9a00      	ldr	r2, [sp, #0]
 801045a:	f843 2b04 	str.w	r2, [r3], #4
 801045e:	9302      	str	r3, [sp, #8]
 8010460:	2300      	movs	r3, #0
 8010462:	9300      	str	r3, [sp, #0]
 8010464:	469b      	mov	fp, r3
 8010466:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801046a:	f7ff fec6 	bl	80101fa <__hexdig_fun>
 801046e:	9b00      	ldr	r3, [sp, #0]
 8010470:	f000 000f 	and.w	r0, r0, #15
 8010474:	fa00 f00b 	lsl.w	r0, r0, fp
 8010478:	4303      	orrs	r3, r0
 801047a:	9300      	str	r3, [sp, #0]
 801047c:	f10b 0b04 	add.w	fp, fp, #4
 8010480:	9b03      	ldr	r3, [sp, #12]
 8010482:	e00d      	b.n	80104a0 <__gethex+0x27c>
 8010484:	9b03      	ldr	r3, [sp, #12]
 8010486:	9a06      	ldr	r2, [sp, #24]
 8010488:	4413      	add	r3, r2
 801048a:	42bb      	cmp	r3, r7
 801048c:	d3e0      	bcc.n	8010450 <__gethex+0x22c>
 801048e:	4618      	mov	r0, r3
 8010490:	9901      	ldr	r1, [sp, #4]
 8010492:	9307      	str	r3, [sp, #28]
 8010494:	4652      	mov	r2, sl
 8010496:	f001 fa12 	bl	80118be <strncmp>
 801049a:	9b07      	ldr	r3, [sp, #28]
 801049c:	2800      	cmp	r0, #0
 801049e:	d1d7      	bne.n	8010450 <__gethex+0x22c>
 80104a0:	461e      	mov	r6, r3
 80104a2:	e78b      	b.n	80103bc <__gethex+0x198>
 80104a4:	f04f 0a03 	mov.w	sl, #3
 80104a8:	e7b8      	b.n	801041c <__gethex+0x1f8>
 80104aa:	da0a      	bge.n	80104c2 <__gethex+0x29e>
 80104ac:	1a37      	subs	r7, r6, r0
 80104ae:	4621      	mov	r1, r4
 80104b0:	ee18 0a10 	vmov	r0, s16
 80104b4:	463a      	mov	r2, r7
 80104b6:	f000 fca3 	bl	8010e00 <__lshift>
 80104ba:	1bed      	subs	r5, r5, r7
 80104bc:	4604      	mov	r4, r0
 80104be:	f100 0914 	add.w	r9, r0, #20
 80104c2:	f04f 0a00 	mov.w	sl, #0
 80104c6:	e7ae      	b.n	8010426 <__gethex+0x202>
 80104c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80104cc:	42a8      	cmp	r0, r5
 80104ce:	dd72      	ble.n	80105b6 <__gethex+0x392>
 80104d0:	1b45      	subs	r5, r0, r5
 80104d2:	42ae      	cmp	r6, r5
 80104d4:	dc36      	bgt.n	8010544 <__gethex+0x320>
 80104d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80104da:	2b02      	cmp	r3, #2
 80104dc:	d02a      	beq.n	8010534 <__gethex+0x310>
 80104de:	2b03      	cmp	r3, #3
 80104e0:	d02c      	beq.n	801053c <__gethex+0x318>
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	d115      	bne.n	8010512 <__gethex+0x2ee>
 80104e6:	42ae      	cmp	r6, r5
 80104e8:	d113      	bne.n	8010512 <__gethex+0x2ee>
 80104ea:	2e01      	cmp	r6, #1
 80104ec:	d10b      	bne.n	8010506 <__gethex+0x2e2>
 80104ee:	9a04      	ldr	r2, [sp, #16]
 80104f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80104f4:	6013      	str	r3, [r2, #0]
 80104f6:	2301      	movs	r3, #1
 80104f8:	6123      	str	r3, [r4, #16]
 80104fa:	f8c9 3000 	str.w	r3, [r9]
 80104fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010500:	2762      	movs	r7, #98	; 0x62
 8010502:	601c      	str	r4, [r3, #0]
 8010504:	e723      	b.n	801034e <__gethex+0x12a>
 8010506:	1e71      	subs	r1, r6, #1
 8010508:	4620      	mov	r0, r4
 801050a:	f000 feb7 	bl	801127c <__any_on>
 801050e:	2800      	cmp	r0, #0
 8010510:	d1ed      	bne.n	80104ee <__gethex+0x2ca>
 8010512:	ee18 0a10 	vmov	r0, s16
 8010516:	4621      	mov	r1, r4
 8010518:	f000 fa56 	bl	80109c8 <_Bfree>
 801051c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801051e:	2300      	movs	r3, #0
 8010520:	6013      	str	r3, [r2, #0]
 8010522:	2750      	movs	r7, #80	; 0x50
 8010524:	e713      	b.n	801034e <__gethex+0x12a>
 8010526:	bf00      	nop
 8010528:	08013f6c 	.word	0x08013f6c
 801052c:	08013e8c 	.word	0x08013e8c
 8010530:	08013f00 	.word	0x08013f00
 8010534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010536:	2b00      	cmp	r3, #0
 8010538:	d1eb      	bne.n	8010512 <__gethex+0x2ee>
 801053a:	e7d8      	b.n	80104ee <__gethex+0x2ca>
 801053c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801053e:	2b00      	cmp	r3, #0
 8010540:	d1d5      	bne.n	80104ee <__gethex+0x2ca>
 8010542:	e7e6      	b.n	8010512 <__gethex+0x2ee>
 8010544:	1e6f      	subs	r7, r5, #1
 8010546:	f1ba 0f00 	cmp.w	sl, #0
 801054a:	d131      	bne.n	80105b0 <__gethex+0x38c>
 801054c:	b127      	cbz	r7, 8010558 <__gethex+0x334>
 801054e:	4639      	mov	r1, r7
 8010550:	4620      	mov	r0, r4
 8010552:	f000 fe93 	bl	801127c <__any_on>
 8010556:	4682      	mov	sl, r0
 8010558:	117b      	asrs	r3, r7, #5
 801055a:	2101      	movs	r1, #1
 801055c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010560:	f007 071f 	and.w	r7, r7, #31
 8010564:	fa01 f707 	lsl.w	r7, r1, r7
 8010568:	421f      	tst	r7, r3
 801056a:	4629      	mov	r1, r5
 801056c:	4620      	mov	r0, r4
 801056e:	bf18      	it	ne
 8010570:	f04a 0a02 	orrne.w	sl, sl, #2
 8010574:	1b76      	subs	r6, r6, r5
 8010576:	f7ff fdee 	bl	8010156 <rshift>
 801057a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801057e:	2702      	movs	r7, #2
 8010580:	f1ba 0f00 	cmp.w	sl, #0
 8010584:	d048      	beq.n	8010618 <__gethex+0x3f4>
 8010586:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801058a:	2b02      	cmp	r3, #2
 801058c:	d015      	beq.n	80105ba <__gethex+0x396>
 801058e:	2b03      	cmp	r3, #3
 8010590:	d017      	beq.n	80105c2 <__gethex+0x39e>
 8010592:	2b01      	cmp	r3, #1
 8010594:	d109      	bne.n	80105aa <__gethex+0x386>
 8010596:	f01a 0f02 	tst.w	sl, #2
 801059a:	d006      	beq.n	80105aa <__gethex+0x386>
 801059c:	f8d9 0000 	ldr.w	r0, [r9]
 80105a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80105a4:	f01a 0f01 	tst.w	sl, #1
 80105a8:	d10e      	bne.n	80105c8 <__gethex+0x3a4>
 80105aa:	f047 0710 	orr.w	r7, r7, #16
 80105ae:	e033      	b.n	8010618 <__gethex+0x3f4>
 80105b0:	f04f 0a01 	mov.w	sl, #1
 80105b4:	e7d0      	b.n	8010558 <__gethex+0x334>
 80105b6:	2701      	movs	r7, #1
 80105b8:	e7e2      	b.n	8010580 <__gethex+0x35c>
 80105ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80105bc:	f1c3 0301 	rsb	r3, r3, #1
 80105c0:	9315      	str	r3, [sp, #84]	; 0x54
 80105c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d0f0      	beq.n	80105aa <__gethex+0x386>
 80105c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80105cc:	f104 0314 	add.w	r3, r4, #20
 80105d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80105d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80105d8:	f04f 0c00 	mov.w	ip, #0
 80105dc:	4618      	mov	r0, r3
 80105de:	f853 2b04 	ldr.w	r2, [r3], #4
 80105e2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80105e6:	d01c      	beq.n	8010622 <__gethex+0x3fe>
 80105e8:	3201      	adds	r2, #1
 80105ea:	6002      	str	r2, [r0, #0]
 80105ec:	2f02      	cmp	r7, #2
 80105ee:	f104 0314 	add.w	r3, r4, #20
 80105f2:	d13f      	bne.n	8010674 <__gethex+0x450>
 80105f4:	f8d8 2000 	ldr.w	r2, [r8]
 80105f8:	3a01      	subs	r2, #1
 80105fa:	42b2      	cmp	r2, r6
 80105fc:	d10a      	bne.n	8010614 <__gethex+0x3f0>
 80105fe:	1171      	asrs	r1, r6, #5
 8010600:	2201      	movs	r2, #1
 8010602:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010606:	f006 061f 	and.w	r6, r6, #31
 801060a:	fa02 f606 	lsl.w	r6, r2, r6
 801060e:	421e      	tst	r6, r3
 8010610:	bf18      	it	ne
 8010612:	4617      	movne	r7, r2
 8010614:	f047 0720 	orr.w	r7, r7, #32
 8010618:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801061a:	601c      	str	r4, [r3, #0]
 801061c:	9b04      	ldr	r3, [sp, #16]
 801061e:	601d      	str	r5, [r3, #0]
 8010620:	e695      	b.n	801034e <__gethex+0x12a>
 8010622:	4299      	cmp	r1, r3
 8010624:	f843 cc04 	str.w	ip, [r3, #-4]
 8010628:	d8d8      	bhi.n	80105dc <__gethex+0x3b8>
 801062a:	68a3      	ldr	r3, [r4, #8]
 801062c:	459b      	cmp	fp, r3
 801062e:	db19      	blt.n	8010664 <__gethex+0x440>
 8010630:	6861      	ldr	r1, [r4, #4]
 8010632:	ee18 0a10 	vmov	r0, s16
 8010636:	3101      	adds	r1, #1
 8010638:	f000 f986 	bl	8010948 <_Balloc>
 801063c:	4681      	mov	r9, r0
 801063e:	b918      	cbnz	r0, 8010648 <__gethex+0x424>
 8010640:	4b1a      	ldr	r3, [pc, #104]	; (80106ac <__gethex+0x488>)
 8010642:	4602      	mov	r2, r0
 8010644:	2184      	movs	r1, #132	; 0x84
 8010646:	e6a8      	b.n	801039a <__gethex+0x176>
 8010648:	6922      	ldr	r2, [r4, #16]
 801064a:	3202      	adds	r2, #2
 801064c:	f104 010c 	add.w	r1, r4, #12
 8010650:	0092      	lsls	r2, r2, #2
 8010652:	300c      	adds	r0, #12
 8010654:	f7fc fd84 	bl	800d160 <memcpy>
 8010658:	4621      	mov	r1, r4
 801065a:	ee18 0a10 	vmov	r0, s16
 801065e:	f000 f9b3 	bl	80109c8 <_Bfree>
 8010662:	464c      	mov	r4, r9
 8010664:	6923      	ldr	r3, [r4, #16]
 8010666:	1c5a      	adds	r2, r3, #1
 8010668:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801066c:	6122      	str	r2, [r4, #16]
 801066e:	2201      	movs	r2, #1
 8010670:	615a      	str	r2, [r3, #20]
 8010672:	e7bb      	b.n	80105ec <__gethex+0x3c8>
 8010674:	6922      	ldr	r2, [r4, #16]
 8010676:	455a      	cmp	r2, fp
 8010678:	dd0b      	ble.n	8010692 <__gethex+0x46e>
 801067a:	2101      	movs	r1, #1
 801067c:	4620      	mov	r0, r4
 801067e:	f7ff fd6a 	bl	8010156 <rshift>
 8010682:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010686:	3501      	adds	r5, #1
 8010688:	42ab      	cmp	r3, r5
 801068a:	f6ff aed0 	blt.w	801042e <__gethex+0x20a>
 801068e:	2701      	movs	r7, #1
 8010690:	e7c0      	b.n	8010614 <__gethex+0x3f0>
 8010692:	f016 061f 	ands.w	r6, r6, #31
 8010696:	d0fa      	beq.n	801068e <__gethex+0x46a>
 8010698:	449a      	add	sl, r3
 801069a:	f1c6 0620 	rsb	r6, r6, #32
 801069e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80106a2:	f000 fa47 	bl	8010b34 <__hi0bits>
 80106a6:	42b0      	cmp	r0, r6
 80106a8:	dbe7      	blt.n	801067a <__gethex+0x456>
 80106aa:	e7f0      	b.n	801068e <__gethex+0x46a>
 80106ac:	08013e8c 	.word	0x08013e8c

080106b0 <L_shift>:
 80106b0:	f1c2 0208 	rsb	r2, r2, #8
 80106b4:	0092      	lsls	r2, r2, #2
 80106b6:	b570      	push	{r4, r5, r6, lr}
 80106b8:	f1c2 0620 	rsb	r6, r2, #32
 80106bc:	6843      	ldr	r3, [r0, #4]
 80106be:	6804      	ldr	r4, [r0, #0]
 80106c0:	fa03 f506 	lsl.w	r5, r3, r6
 80106c4:	432c      	orrs	r4, r5
 80106c6:	40d3      	lsrs	r3, r2
 80106c8:	6004      	str	r4, [r0, #0]
 80106ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80106ce:	4288      	cmp	r0, r1
 80106d0:	d3f4      	bcc.n	80106bc <L_shift+0xc>
 80106d2:	bd70      	pop	{r4, r5, r6, pc}

080106d4 <__match>:
 80106d4:	b530      	push	{r4, r5, lr}
 80106d6:	6803      	ldr	r3, [r0, #0]
 80106d8:	3301      	adds	r3, #1
 80106da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106de:	b914      	cbnz	r4, 80106e6 <__match+0x12>
 80106e0:	6003      	str	r3, [r0, #0]
 80106e2:	2001      	movs	r0, #1
 80106e4:	bd30      	pop	{r4, r5, pc}
 80106e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80106ee:	2d19      	cmp	r5, #25
 80106f0:	bf98      	it	ls
 80106f2:	3220      	addls	r2, #32
 80106f4:	42a2      	cmp	r2, r4
 80106f6:	d0f0      	beq.n	80106da <__match+0x6>
 80106f8:	2000      	movs	r0, #0
 80106fa:	e7f3      	b.n	80106e4 <__match+0x10>

080106fc <__hexnan>:
 80106fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010700:	680b      	ldr	r3, [r1, #0]
 8010702:	6801      	ldr	r1, [r0, #0]
 8010704:	115e      	asrs	r6, r3, #5
 8010706:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801070a:	f013 031f 	ands.w	r3, r3, #31
 801070e:	b087      	sub	sp, #28
 8010710:	bf18      	it	ne
 8010712:	3604      	addne	r6, #4
 8010714:	2500      	movs	r5, #0
 8010716:	1f37      	subs	r7, r6, #4
 8010718:	4682      	mov	sl, r0
 801071a:	4690      	mov	r8, r2
 801071c:	9301      	str	r3, [sp, #4]
 801071e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010722:	46b9      	mov	r9, r7
 8010724:	463c      	mov	r4, r7
 8010726:	9502      	str	r5, [sp, #8]
 8010728:	46ab      	mov	fp, r5
 801072a:	784a      	ldrb	r2, [r1, #1]
 801072c:	1c4b      	adds	r3, r1, #1
 801072e:	9303      	str	r3, [sp, #12]
 8010730:	b342      	cbz	r2, 8010784 <__hexnan+0x88>
 8010732:	4610      	mov	r0, r2
 8010734:	9105      	str	r1, [sp, #20]
 8010736:	9204      	str	r2, [sp, #16]
 8010738:	f7ff fd5f 	bl	80101fa <__hexdig_fun>
 801073c:	2800      	cmp	r0, #0
 801073e:	d14f      	bne.n	80107e0 <__hexnan+0xe4>
 8010740:	9a04      	ldr	r2, [sp, #16]
 8010742:	9905      	ldr	r1, [sp, #20]
 8010744:	2a20      	cmp	r2, #32
 8010746:	d818      	bhi.n	801077a <__hexnan+0x7e>
 8010748:	9b02      	ldr	r3, [sp, #8]
 801074a:	459b      	cmp	fp, r3
 801074c:	dd13      	ble.n	8010776 <__hexnan+0x7a>
 801074e:	454c      	cmp	r4, r9
 8010750:	d206      	bcs.n	8010760 <__hexnan+0x64>
 8010752:	2d07      	cmp	r5, #7
 8010754:	dc04      	bgt.n	8010760 <__hexnan+0x64>
 8010756:	462a      	mov	r2, r5
 8010758:	4649      	mov	r1, r9
 801075a:	4620      	mov	r0, r4
 801075c:	f7ff ffa8 	bl	80106b0 <L_shift>
 8010760:	4544      	cmp	r4, r8
 8010762:	d950      	bls.n	8010806 <__hexnan+0x10a>
 8010764:	2300      	movs	r3, #0
 8010766:	f1a4 0904 	sub.w	r9, r4, #4
 801076a:	f844 3c04 	str.w	r3, [r4, #-4]
 801076e:	f8cd b008 	str.w	fp, [sp, #8]
 8010772:	464c      	mov	r4, r9
 8010774:	461d      	mov	r5, r3
 8010776:	9903      	ldr	r1, [sp, #12]
 8010778:	e7d7      	b.n	801072a <__hexnan+0x2e>
 801077a:	2a29      	cmp	r2, #41	; 0x29
 801077c:	d156      	bne.n	801082c <__hexnan+0x130>
 801077e:	3102      	adds	r1, #2
 8010780:	f8ca 1000 	str.w	r1, [sl]
 8010784:	f1bb 0f00 	cmp.w	fp, #0
 8010788:	d050      	beq.n	801082c <__hexnan+0x130>
 801078a:	454c      	cmp	r4, r9
 801078c:	d206      	bcs.n	801079c <__hexnan+0xa0>
 801078e:	2d07      	cmp	r5, #7
 8010790:	dc04      	bgt.n	801079c <__hexnan+0xa0>
 8010792:	462a      	mov	r2, r5
 8010794:	4649      	mov	r1, r9
 8010796:	4620      	mov	r0, r4
 8010798:	f7ff ff8a 	bl	80106b0 <L_shift>
 801079c:	4544      	cmp	r4, r8
 801079e:	d934      	bls.n	801080a <__hexnan+0x10e>
 80107a0:	f1a8 0204 	sub.w	r2, r8, #4
 80107a4:	4623      	mov	r3, r4
 80107a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80107aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80107ae:	429f      	cmp	r7, r3
 80107b0:	d2f9      	bcs.n	80107a6 <__hexnan+0xaa>
 80107b2:	1b3b      	subs	r3, r7, r4
 80107b4:	f023 0303 	bic.w	r3, r3, #3
 80107b8:	3304      	adds	r3, #4
 80107ba:	3401      	adds	r4, #1
 80107bc:	3e03      	subs	r6, #3
 80107be:	42b4      	cmp	r4, r6
 80107c0:	bf88      	it	hi
 80107c2:	2304      	movhi	r3, #4
 80107c4:	4443      	add	r3, r8
 80107c6:	2200      	movs	r2, #0
 80107c8:	f843 2b04 	str.w	r2, [r3], #4
 80107cc:	429f      	cmp	r7, r3
 80107ce:	d2fb      	bcs.n	80107c8 <__hexnan+0xcc>
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	b91b      	cbnz	r3, 80107dc <__hexnan+0xe0>
 80107d4:	4547      	cmp	r7, r8
 80107d6:	d127      	bne.n	8010828 <__hexnan+0x12c>
 80107d8:	2301      	movs	r3, #1
 80107da:	603b      	str	r3, [r7, #0]
 80107dc:	2005      	movs	r0, #5
 80107de:	e026      	b.n	801082e <__hexnan+0x132>
 80107e0:	3501      	adds	r5, #1
 80107e2:	2d08      	cmp	r5, #8
 80107e4:	f10b 0b01 	add.w	fp, fp, #1
 80107e8:	dd06      	ble.n	80107f8 <__hexnan+0xfc>
 80107ea:	4544      	cmp	r4, r8
 80107ec:	d9c3      	bls.n	8010776 <__hexnan+0x7a>
 80107ee:	2300      	movs	r3, #0
 80107f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80107f4:	2501      	movs	r5, #1
 80107f6:	3c04      	subs	r4, #4
 80107f8:	6822      	ldr	r2, [r4, #0]
 80107fa:	f000 000f 	and.w	r0, r0, #15
 80107fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010802:	6022      	str	r2, [r4, #0]
 8010804:	e7b7      	b.n	8010776 <__hexnan+0x7a>
 8010806:	2508      	movs	r5, #8
 8010808:	e7b5      	b.n	8010776 <__hexnan+0x7a>
 801080a:	9b01      	ldr	r3, [sp, #4]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d0df      	beq.n	80107d0 <__hexnan+0xd4>
 8010810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010814:	f1c3 0320 	rsb	r3, r3, #32
 8010818:	fa22 f303 	lsr.w	r3, r2, r3
 801081c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010820:	401a      	ands	r2, r3
 8010822:	f846 2c04 	str.w	r2, [r6, #-4]
 8010826:	e7d3      	b.n	80107d0 <__hexnan+0xd4>
 8010828:	3f04      	subs	r7, #4
 801082a:	e7d1      	b.n	80107d0 <__hexnan+0xd4>
 801082c:	2004      	movs	r0, #4
 801082e:	b007      	add	sp, #28
 8010830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010834 <_localeconv_r>:
 8010834:	4800      	ldr	r0, [pc, #0]	; (8010838 <_localeconv_r+0x4>)
 8010836:	4770      	bx	lr
 8010838:	2000016c 	.word	0x2000016c

0801083c <__retarget_lock_init_recursive>:
 801083c:	4770      	bx	lr

0801083e <__retarget_lock_acquire_recursive>:
 801083e:	4770      	bx	lr

08010840 <__retarget_lock_release_recursive>:
 8010840:	4770      	bx	lr

08010842 <__swhatbuf_r>:
 8010842:	b570      	push	{r4, r5, r6, lr}
 8010844:	460e      	mov	r6, r1
 8010846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801084a:	2900      	cmp	r1, #0
 801084c:	b096      	sub	sp, #88	; 0x58
 801084e:	4614      	mov	r4, r2
 8010850:	461d      	mov	r5, r3
 8010852:	da07      	bge.n	8010864 <__swhatbuf_r+0x22>
 8010854:	2300      	movs	r3, #0
 8010856:	602b      	str	r3, [r5, #0]
 8010858:	89b3      	ldrh	r3, [r6, #12]
 801085a:	061a      	lsls	r2, r3, #24
 801085c:	d410      	bmi.n	8010880 <__swhatbuf_r+0x3e>
 801085e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010862:	e00e      	b.n	8010882 <__swhatbuf_r+0x40>
 8010864:	466a      	mov	r2, sp
 8010866:	f001 f89b 	bl	80119a0 <_fstat_r>
 801086a:	2800      	cmp	r0, #0
 801086c:	dbf2      	blt.n	8010854 <__swhatbuf_r+0x12>
 801086e:	9a01      	ldr	r2, [sp, #4]
 8010870:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010874:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010878:	425a      	negs	r2, r3
 801087a:	415a      	adcs	r2, r3
 801087c:	602a      	str	r2, [r5, #0]
 801087e:	e7ee      	b.n	801085e <__swhatbuf_r+0x1c>
 8010880:	2340      	movs	r3, #64	; 0x40
 8010882:	2000      	movs	r0, #0
 8010884:	6023      	str	r3, [r4, #0]
 8010886:	b016      	add	sp, #88	; 0x58
 8010888:	bd70      	pop	{r4, r5, r6, pc}
	...

0801088c <__smakebuf_r>:
 801088c:	898b      	ldrh	r3, [r1, #12]
 801088e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010890:	079d      	lsls	r5, r3, #30
 8010892:	4606      	mov	r6, r0
 8010894:	460c      	mov	r4, r1
 8010896:	d507      	bpl.n	80108a8 <__smakebuf_r+0x1c>
 8010898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801089c:	6023      	str	r3, [r4, #0]
 801089e:	6123      	str	r3, [r4, #16]
 80108a0:	2301      	movs	r3, #1
 80108a2:	6163      	str	r3, [r4, #20]
 80108a4:	b002      	add	sp, #8
 80108a6:	bd70      	pop	{r4, r5, r6, pc}
 80108a8:	ab01      	add	r3, sp, #4
 80108aa:	466a      	mov	r2, sp
 80108ac:	f7ff ffc9 	bl	8010842 <__swhatbuf_r>
 80108b0:	9900      	ldr	r1, [sp, #0]
 80108b2:	4605      	mov	r5, r0
 80108b4:	4630      	mov	r0, r6
 80108b6:	f7fc fcc9 	bl	800d24c <_malloc_r>
 80108ba:	b948      	cbnz	r0, 80108d0 <__smakebuf_r+0x44>
 80108bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108c0:	059a      	lsls	r2, r3, #22
 80108c2:	d4ef      	bmi.n	80108a4 <__smakebuf_r+0x18>
 80108c4:	f023 0303 	bic.w	r3, r3, #3
 80108c8:	f043 0302 	orr.w	r3, r3, #2
 80108cc:	81a3      	strh	r3, [r4, #12]
 80108ce:	e7e3      	b.n	8010898 <__smakebuf_r+0xc>
 80108d0:	4b0d      	ldr	r3, [pc, #52]	; (8010908 <__smakebuf_r+0x7c>)
 80108d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80108d4:	89a3      	ldrh	r3, [r4, #12]
 80108d6:	6020      	str	r0, [r4, #0]
 80108d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108dc:	81a3      	strh	r3, [r4, #12]
 80108de:	9b00      	ldr	r3, [sp, #0]
 80108e0:	6163      	str	r3, [r4, #20]
 80108e2:	9b01      	ldr	r3, [sp, #4]
 80108e4:	6120      	str	r0, [r4, #16]
 80108e6:	b15b      	cbz	r3, 8010900 <__smakebuf_r+0x74>
 80108e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108ec:	4630      	mov	r0, r6
 80108ee:	f001 f869 	bl	80119c4 <_isatty_r>
 80108f2:	b128      	cbz	r0, 8010900 <__smakebuf_r+0x74>
 80108f4:	89a3      	ldrh	r3, [r4, #12]
 80108f6:	f023 0303 	bic.w	r3, r3, #3
 80108fa:	f043 0301 	orr.w	r3, r3, #1
 80108fe:	81a3      	strh	r3, [r4, #12]
 8010900:	89a0      	ldrh	r0, [r4, #12]
 8010902:	4305      	orrs	r5, r0
 8010904:	81a5      	strh	r5, [r4, #12]
 8010906:	e7cd      	b.n	80108a4 <__smakebuf_r+0x18>
 8010908:	0800ffb5 	.word	0x0800ffb5

0801090c <__ascii_mbtowc>:
 801090c:	b082      	sub	sp, #8
 801090e:	b901      	cbnz	r1, 8010912 <__ascii_mbtowc+0x6>
 8010910:	a901      	add	r1, sp, #4
 8010912:	b142      	cbz	r2, 8010926 <__ascii_mbtowc+0x1a>
 8010914:	b14b      	cbz	r3, 801092a <__ascii_mbtowc+0x1e>
 8010916:	7813      	ldrb	r3, [r2, #0]
 8010918:	600b      	str	r3, [r1, #0]
 801091a:	7812      	ldrb	r2, [r2, #0]
 801091c:	1e10      	subs	r0, r2, #0
 801091e:	bf18      	it	ne
 8010920:	2001      	movne	r0, #1
 8010922:	b002      	add	sp, #8
 8010924:	4770      	bx	lr
 8010926:	4610      	mov	r0, r2
 8010928:	e7fb      	b.n	8010922 <__ascii_mbtowc+0x16>
 801092a:	f06f 0001 	mvn.w	r0, #1
 801092e:	e7f8      	b.n	8010922 <__ascii_mbtowc+0x16>

08010930 <__malloc_lock>:
 8010930:	4801      	ldr	r0, [pc, #4]	; (8010938 <__malloc_lock+0x8>)
 8010932:	f7ff bf84 	b.w	801083e <__retarget_lock_acquire_recursive>
 8010936:	bf00      	nop
 8010938:	20007468 	.word	0x20007468

0801093c <__malloc_unlock>:
 801093c:	4801      	ldr	r0, [pc, #4]	; (8010944 <__malloc_unlock+0x8>)
 801093e:	f7ff bf7f 	b.w	8010840 <__retarget_lock_release_recursive>
 8010942:	bf00      	nop
 8010944:	20007468 	.word	0x20007468

08010948 <_Balloc>:
 8010948:	b570      	push	{r4, r5, r6, lr}
 801094a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801094c:	4604      	mov	r4, r0
 801094e:	460d      	mov	r5, r1
 8010950:	b976      	cbnz	r6, 8010970 <_Balloc+0x28>
 8010952:	2010      	movs	r0, #16
 8010954:	f7fc fbfc 	bl	800d150 <malloc>
 8010958:	4602      	mov	r2, r0
 801095a:	6260      	str	r0, [r4, #36]	; 0x24
 801095c:	b920      	cbnz	r0, 8010968 <_Balloc+0x20>
 801095e:	4b18      	ldr	r3, [pc, #96]	; (80109c0 <_Balloc+0x78>)
 8010960:	4818      	ldr	r0, [pc, #96]	; (80109c4 <_Balloc+0x7c>)
 8010962:	2166      	movs	r1, #102	; 0x66
 8010964:	f000 ffdc 	bl	8011920 <__assert_func>
 8010968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801096c:	6006      	str	r6, [r0, #0]
 801096e:	60c6      	str	r6, [r0, #12]
 8010970:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010972:	68f3      	ldr	r3, [r6, #12]
 8010974:	b183      	cbz	r3, 8010998 <_Balloc+0x50>
 8010976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010978:	68db      	ldr	r3, [r3, #12]
 801097a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801097e:	b9b8      	cbnz	r0, 80109b0 <_Balloc+0x68>
 8010980:	2101      	movs	r1, #1
 8010982:	fa01 f605 	lsl.w	r6, r1, r5
 8010986:	1d72      	adds	r2, r6, #5
 8010988:	0092      	lsls	r2, r2, #2
 801098a:	4620      	mov	r0, r4
 801098c:	f7fc fbfe 	bl	800d18c <_calloc_r>
 8010990:	b160      	cbz	r0, 80109ac <_Balloc+0x64>
 8010992:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010996:	e00e      	b.n	80109b6 <_Balloc+0x6e>
 8010998:	2221      	movs	r2, #33	; 0x21
 801099a:	2104      	movs	r1, #4
 801099c:	4620      	mov	r0, r4
 801099e:	f7fc fbf5 	bl	800d18c <_calloc_r>
 80109a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109a4:	60f0      	str	r0, [r6, #12]
 80109a6:	68db      	ldr	r3, [r3, #12]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d1e4      	bne.n	8010976 <_Balloc+0x2e>
 80109ac:	2000      	movs	r0, #0
 80109ae:	bd70      	pop	{r4, r5, r6, pc}
 80109b0:	6802      	ldr	r2, [r0, #0]
 80109b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80109b6:	2300      	movs	r3, #0
 80109b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80109bc:	e7f7      	b.n	80109ae <_Balloc+0x66>
 80109be:	bf00      	nop
 80109c0:	08013e16 	.word	0x08013e16
 80109c4:	08013f80 	.word	0x08013f80

080109c8 <_Bfree>:
 80109c8:	b570      	push	{r4, r5, r6, lr}
 80109ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80109cc:	4605      	mov	r5, r0
 80109ce:	460c      	mov	r4, r1
 80109d0:	b976      	cbnz	r6, 80109f0 <_Bfree+0x28>
 80109d2:	2010      	movs	r0, #16
 80109d4:	f7fc fbbc 	bl	800d150 <malloc>
 80109d8:	4602      	mov	r2, r0
 80109da:	6268      	str	r0, [r5, #36]	; 0x24
 80109dc:	b920      	cbnz	r0, 80109e8 <_Bfree+0x20>
 80109de:	4b09      	ldr	r3, [pc, #36]	; (8010a04 <_Bfree+0x3c>)
 80109e0:	4809      	ldr	r0, [pc, #36]	; (8010a08 <_Bfree+0x40>)
 80109e2:	218a      	movs	r1, #138	; 0x8a
 80109e4:	f000 ff9c 	bl	8011920 <__assert_func>
 80109e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80109ec:	6006      	str	r6, [r0, #0]
 80109ee:	60c6      	str	r6, [r0, #12]
 80109f0:	b13c      	cbz	r4, 8010a02 <_Bfree+0x3a>
 80109f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80109f4:	6862      	ldr	r2, [r4, #4]
 80109f6:	68db      	ldr	r3, [r3, #12]
 80109f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80109fc:	6021      	str	r1, [r4, #0]
 80109fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010a02:	bd70      	pop	{r4, r5, r6, pc}
 8010a04:	08013e16 	.word	0x08013e16
 8010a08:	08013f80 	.word	0x08013f80

08010a0c <__multadd>:
 8010a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a10:	690e      	ldr	r6, [r1, #16]
 8010a12:	4607      	mov	r7, r0
 8010a14:	4698      	mov	r8, r3
 8010a16:	460c      	mov	r4, r1
 8010a18:	f101 0014 	add.w	r0, r1, #20
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	6805      	ldr	r5, [r0, #0]
 8010a20:	b2a9      	uxth	r1, r5
 8010a22:	fb02 8101 	mla	r1, r2, r1, r8
 8010a26:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010a2a:	0c2d      	lsrs	r5, r5, #16
 8010a2c:	fb02 c505 	mla	r5, r2, r5, ip
 8010a30:	b289      	uxth	r1, r1
 8010a32:	3301      	adds	r3, #1
 8010a34:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010a38:	429e      	cmp	r6, r3
 8010a3a:	f840 1b04 	str.w	r1, [r0], #4
 8010a3e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010a42:	dcec      	bgt.n	8010a1e <__multadd+0x12>
 8010a44:	f1b8 0f00 	cmp.w	r8, #0
 8010a48:	d022      	beq.n	8010a90 <__multadd+0x84>
 8010a4a:	68a3      	ldr	r3, [r4, #8]
 8010a4c:	42b3      	cmp	r3, r6
 8010a4e:	dc19      	bgt.n	8010a84 <__multadd+0x78>
 8010a50:	6861      	ldr	r1, [r4, #4]
 8010a52:	4638      	mov	r0, r7
 8010a54:	3101      	adds	r1, #1
 8010a56:	f7ff ff77 	bl	8010948 <_Balloc>
 8010a5a:	4605      	mov	r5, r0
 8010a5c:	b928      	cbnz	r0, 8010a6a <__multadd+0x5e>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	4b0d      	ldr	r3, [pc, #52]	; (8010a98 <__multadd+0x8c>)
 8010a62:	480e      	ldr	r0, [pc, #56]	; (8010a9c <__multadd+0x90>)
 8010a64:	21b5      	movs	r1, #181	; 0xb5
 8010a66:	f000 ff5b 	bl	8011920 <__assert_func>
 8010a6a:	6922      	ldr	r2, [r4, #16]
 8010a6c:	3202      	adds	r2, #2
 8010a6e:	f104 010c 	add.w	r1, r4, #12
 8010a72:	0092      	lsls	r2, r2, #2
 8010a74:	300c      	adds	r0, #12
 8010a76:	f7fc fb73 	bl	800d160 <memcpy>
 8010a7a:	4621      	mov	r1, r4
 8010a7c:	4638      	mov	r0, r7
 8010a7e:	f7ff ffa3 	bl	80109c8 <_Bfree>
 8010a82:	462c      	mov	r4, r5
 8010a84:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010a88:	3601      	adds	r6, #1
 8010a8a:	f8c3 8014 	str.w	r8, [r3, #20]
 8010a8e:	6126      	str	r6, [r4, #16]
 8010a90:	4620      	mov	r0, r4
 8010a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a96:	bf00      	nop
 8010a98:	08013e8c 	.word	0x08013e8c
 8010a9c:	08013f80 	.word	0x08013f80

08010aa0 <__s2b>:
 8010aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010aa4:	460c      	mov	r4, r1
 8010aa6:	4615      	mov	r5, r2
 8010aa8:	461f      	mov	r7, r3
 8010aaa:	2209      	movs	r2, #9
 8010aac:	3308      	adds	r3, #8
 8010aae:	4606      	mov	r6, r0
 8010ab0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ab4:	2100      	movs	r1, #0
 8010ab6:	2201      	movs	r2, #1
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	db09      	blt.n	8010ad0 <__s2b+0x30>
 8010abc:	4630      	mov	r0, r6
 8010abe:	f7ff ff43 	bl	8010948 <_Balloc>
 8010ac2:	b940      	cbnz	r0, 8010ad6 <__s2b+0x36>
 8010ac4:	4602      	mov	r2, r0
 8010ac6:	4b19      	ldr	r3, [pc, #100]	; (8010b2c <__s2b+0x8c>)
 8010ac8:	4819      	ldr	r0, [pc, #100]	; (8010b30 <__s2b+0x90>)
 8010aca:	21ce      	movs	r1, #206	; 0xce
 8010acc:	f000 ff28 	bl	8011920 <__assert_func>
 8010ad0:	0052      	lsls	r2, r2, #1
 8010ad2:	3101      	adds	r1, #1
 8010ad4:	e7f0      	b.n	8010ab8 <__s2b+0x18>
 8010ad6:	9b08      	ldr	r3, [sp, #32]
 8010ad8:	6143      	str	r3, [r0, #20]
 8010ada:	2d09      	cmp	r5, #9
 8010adc:	f04f 0301 	mov.w	r3, #1
 8010ae0:	6103      	str	r3, [r0, #16]
 8010ae2:	dd16      	ble.n	8010b12 <__s2b+0x72>
 8010ae4:	f104 0909 	add.w	r9, r4, #9
 8010ae8:	46c8      	mov	r8, r9
 8010aea:	442c      	add	r4, r5
 8010aec:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010af0:	4601      	mov	r1, r0
 8010af2:	3b30      	subs	r3, #48	; 0x30
 8010af4:	220a      	movs	r2, #10
 8010af6:	4630      	mov	r0, r6
 8010af8:	f7ff ff88 	bl	8010a0c <__multadd>
 8010afc:	45a0      	cmp	r8, r4
 8010afe:	d1f5      	bne.n	8010aec <__s2b+0x4c>
 8010b00:	f1a5 0408 	sub.w	r4, r5, #8
 8010b04:	444c      	add	r4, r9
 8010b06:	1b2d      	subs	r5, r5, r4
 8010b08:	1963      	adds	r3, r4, r5
 8010b0a:	42bb      	cmp	r3, r7
 8010b0c:	db04      	blt.n	8010b18 <__s2b+0x78>
 8010b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b12:	340a      	adds	r4, #10
 8010b14:	2509      	movs	r5, #9
 8010b16:	e7f6      	b.n	8010b06 <__s2b+0x66>
 8010b18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010b1c:	4601      	mov	r1, r0
 8010b1e:	3b30      	subs	r3, #48	; 0x30
 8010b20:	220a      	movs	r2, #10
 8010b22:	4630      	mov	r0, r6
 8010b24:	f7ff ff72 	bl	8010a0c <__multadd>
 8010b28:	e7ee      	b.n	8010b08 <__s2b+0x68>
 8010b2a:	bf00      	nop
 8010b2c:	08013e8c 	.word	0x08013e8c
 8010b30:	08013f80 	.word	0x08013f80

08010b34 <__hi0bits>:
 8010b34:	0c03      	lsrs	r3, r0, #16
 8010b36:	041b      	lsls	r3, r3, #16
 8010b38:	b9d3      	cbnz	r3, 8010b70 <__hi0bits+0x3c>
 8010b3a:	0400      	lsls	r0, r0, #16
 8010b3c:	2310      	movs	r3, #16
 8010b3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010b42:	bf04      	itt	eq
 8010b44:	0200      	lsleq	r0, r0, #8
 8010b46:	3308      	addeq	r3, #8
 8010b48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010b4c:	bf04      	itt	eq
 8010b4e:	0100      	lsleq	r0, r0, #4
 8010b50:	3304      	addeq	r3, #4
 8010b52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010b56:	bf04      	itt	eq
 8010b58:	0080      	lsleq	r0, r0, #2
 8010b5a:	3302      	addeq	r3, #2
 8010b5c:	2800      	cmp	r0, #0
 8010b5e:	db05      	blt.n	8010b6c <__hi0bits+0x38>
 8010b60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010b64:	f103 0301 	add.w	r3, r3, #1
 8010b68:	bf08      	it	eq
 8010b6a:	2320      	moveq	r3, #32
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	4770      	bx	lr
 8010b70:	2300      	movs	r3, #0
 8010b72:	e7e4      	b.n	8010b3e <__hi0bits+0xa>

08010b74 <__lo0bits>:
 8010b74:	6803      	ldr	r3, [r0, #0]
 8010b76:	f013 0207 	ands.w	r2, r3, #7
 8010b7a:	4601      	mov	r1, r0
 8010b7c:	d00b      	beq.n	8010b96 <__lo0bits+0x22>
 8010b7e:	07da      	lsls	r2, r3, #31
 8010b80:	d424      	bmi.n	8010bcc <__lo0bits+0x58>
 8010b82:	0798      	lsls	r0, r3, #30
 8010b84:	bf49      	itett	mi
 8010b86:	085b      	lsrmi	r3, r3, #1
 8010b88:	089b      	lsrpl	r3, r3, #2
 8010b8a:	2001      	movmi	r0, #1
 8010b8c:	600b      	strmi	r3, [r1, #0]
 8010b8e:	bf5c      	itt	pl
 8010b90:	600b      	strpl	r3, [r1, #0]
 8010b92:	2002      	movpl	r0, #2
 8010b94:	4770      	bx	lr
 8010b96:	b298      	uxth	r0, r3
 8010b98:	b9b0      	cbnz	r0, 8010bc8 <__lo0bits+0x54>
 8010b9a:	0c1b      	lsrs	r3, r3, #16
 8010b9c:	2010      	movs	r0, #16
 8010b9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010ba2:	bf04      	itt	eq
 8010ba4:	0a1b      	lsreq	r3, r3, #8
 8010ba6:	3008      	addeq	r0, #8
 8010ba8:	071a      	lsls	r2, r3, #28
 8010baa:	bf04      	itt	eq
 8010bac:	091b      	lsreq	r3, r3, #4
 8010bae:	3004      	addeq	r0, #4
 8010bb0:	079a      	lsls	r2, r3, #30
 8010bb2:	bf04      	itt	eq
 8010bb4:	089b      	lsreq	r3, r3, #2
 8010bb6:	3002      	addeq	r0, #2
 8010bb8:	07da      	lsls	r2, r3, #31
 8010bba:	d403      	bmi.n	8010bc4 <__lo0bits+0x50>
 8010bbc:	085b      	lsrs	r3, r3, #1
 8010bbe:	f100 0001 	add.w	r0, r0, #1
 8010bc2:	d005      	beq.n	8010bd0 <__lo0bits+0x5c>
 8010bc4:	600b      	str	r3, [r1, #0]
 8010bc6:	4770      	bx	lr
 8010bc8:	4610      	mov	r0, r2
 8010bca:	e7e8      	b.n	8010b9e <__lo0bits+0x2a>
 8010bcc:	2000      	movs	r0, #0
 8010bce:	4770      	bx	lr
 8010bd0:	2020      	movs	r0, #32
 8010bd2:	4770      	bx	lr

08010bd4 <__i2b>:
 8010bd4:	b510      	push	{r4, lr}
 8010bd6:	460c      	mov	r4, r1
 8010bd8:	2101      	movs	r1, #1
 8010bda:	f7ff feb5 	bl	8010948 <_Balloc>
 8010bde:	4602      	mov	r2, r0
 8010be0:	b928      	cbnz	r0, 8010bee <__i2b+0x1a>
 8010be2:	4b05      	ldr	r3, [pc, #20]	; (8010bf8 <__i2b+0x24>)
 8010be4:	4805      	ldr	r0, [pc, #20]	; (8010bfc <__i2b+0x28>)
 8010be6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010bea:	f000 fe99 	bl	8011920 <__assert_func>
 8010bee:	2301      	movs	r3, #1
 8010bf0:	6144      	str	r4, [r0, #20]
 8010bf2:	6103      	str	r3, [r0, #16]
 8010bf4:	bd10      	pop	{r4, pc}
 8010bf6:	bf00      	nop
 8010bf8:	08013e8c 	.word	0x08013e8c
 8010bfc:	08013f80 	.word	0x08013f80

08010c00 <__multiply>:
 8010c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c04:	4614      	mov	r4, r2
 8010c06:	690a      	ldr	r2, [r1, #16]
 8010c08:	6923      	ldr	r3, [r4, #16]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	bfb8      	it	lt
 8010c0e:	460b      	movlt	r3, r1
 8010c10:	460d      	mov	r5, r1
 8010c12:	bfbc      	itt	lt
 8010c14:	4625      	movlt	r5, r4
 8010c16:	461c      	movlt	r4, r3
 8010c18:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010c1c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010c20:	68ab      	ldr	r3, [r5, #8]
 8010c22:	6869      	ldr	r1, [r5, #4]
 8010c24:	eb0a 0709 	add.w	r7, sl, r9
 8010c28:	42bb      	cmp	r3, r7
 8010c2a:	b085      	sub	sp, #20
 8010c2c:	bfb8      	it	lt
 8010c2e:	3101      	addlt	r1, #1
 8010c30:	f7ff fe8a 	bl	8010948 <_Balloc>
 8010c34:	b930      	cbnz	r0, 8010c44 <__multiply+0x44>
 8010c36:	4602      	mov	r2, r0
 8010c38:	4b42      	ldr	r3, [pc, #264]	; (8010d44 <__multiply+0x144>)
 8010c3a:	4843      	ldr	r0, [pc, #268]	; (8010d48 <__multiply+0x148>)
 8010c3c:	f240 115d 	movw	r1, #349	; 0x15d
 8010c40:	f000 fe6e 	bl	8011920 <__assert_func>
 8010c44:	f100 0614 	add.w	r6, r0, #20
 8010c48:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010c4c:	4633      	mov	r3, r6
 8010c4e:	2200      	movs	r2, #0
 8010c50:	4543      	cmp	r3, r8
 8010c52:	d31e      	bcc.n	8010c92 <__multiply+0x92>
 8010c54:	f105 0c14 	add.w	ip, r5, #20
 8010c58:	f104 0314 	add.w	r3, r4, #20
 8010c5c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010c60:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010c64:	9202      	str	r2, [sp, #8]
 8010c66:	ebac 0205 	sub.w	r2, ip, r5
 8010c6a:	3a15      	subs	r2, #21
 8010c6c:	f022 0203 	bic.w	r2, r2, #3
 8010c70:	3204      	adds	r2, #4
 8010c72:	f105 0115 	add.w	r1, r5, #21
 8010c76:	458c      	cmp	ip, r1
 8010c78:	bf38      	it	cc
 8010c7a:	2204      	movcc	r2, #4
 8010c7c:	9201      	str	r2, [sp, #4]
 8010c7e:	9a02      	ldr	r2, [sp, #8]
 8010c80:	9303      	str	r3, [sp, #12]
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d808      	bhi.n	8010c98 <__multiply+0x98>
 8010c86:	2f00      	cmp	r7, #0
 8010c88:	dc55      	bgt.n	8010d36 <__multiply+0x136>
 8010c8a:	6107      	str	r7, [r0, #16]
 8010c8c:	b005      	add	sp, #20
 8010c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c92:	f843 2b04 	str.w	r2, [r3], #4
 8010c96:	e7db      	b.n	8010c50 <__multiply+0x50>
 8010c98:	f8b3 a000 	ldrh.w	sl, [r3]
 8010c9c:	f1ba 0f00 	cmp.w	sl, #0
 8010ca0:	d020      	beq.n	8010ce4 <__multiply+0xe4>
 8010ca2:	f105 0e14 	add.w	lr, r5, #20
 8010ca6:	46b1      	mov	r9, r6
 8010ca8:	2200      	movs	r2, #0
 8010caa:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010cae:	f8d9 b000 	ldr.w	fp, [r9]
 8010cb2:	b2a1      	uxth	r1, r4
 8010cb4:	fa1f fb8b 	uxth.w	fp, fp
 8010cb8:	fb0a b101 	mla	r1, sl, r1, fp
 8010cbc:	4411      	add	r1, r2
 8010cbe:	f8d9 2000 	ldr.w	r2, [r9]
 8010cc2:	0c24      	lsrs	r4, r4, #16
 8010cc4:	0c12      	lsrs	r2, r2, #16
 8010cc6:	fb0a 2404 	mla	r4, sl, r4, r2
 8010cca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010cce:	b289      	uxth	r1, r1
 8010cd0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010cd4:	45f4      	cmp	ip, lr
 8010cd6:	f849 1b04 	str.w	r1, [r9], #4
 8010cda:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010cde:	d8e4      	bhi.n	8010caa <__multiply+0xaa>
 8010ce0:	9901      	ldr	r1, [sp, #4]
 8010ce2:	5072      	str	r2, [r6, r1]
 8010ce4:	9a03      	ldr	r2, [sp, #12]
 8010ce6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010cea:	3304      	adds	r3, #4
 8010cec:	f1b9 0f00 	cmp.w	r9, #0
 8010cf0:	d01f      	beq.n	8010d32 <__multiply+0x132>
 8010cf2:	6834      	ldr	r4, [r6, #0]
 8010cf4:	f105 0114 	add.w	r1, r5, #20
 8010cf8:	46b6      	mov	lr, r6
 8010cfa:	f04f 0a00 	mov.w	sl, #0
 8010cfe:	880a      	ldrh	r2, [r1, #0]
 8010d00:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010d04:	fb09 b202 	mla	r2, r9, r2, fp
 8010d08:	4492      	add	sl, r2
 8010d0a:	b2a4      	uxth	r4, r4
 8010d0c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010d10:	f84e 4b04 	str.w	r4, [lr], #4
 8010d14:	f851 4b04 	ldr.w	r4, [r1], #4
 8010d18:	f8be 2000 	ldrh.w	r2, [lr]
 8010d1c:	0c24      	lsrs	r4, r4, #16
 8010d1e:	fb09 2404 	mla	r4, r9, r4, r2
 8010d22:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010d26:	458c      	cmp	ip, r1
 8010d28:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010d2c:	d8e7      	bhi.n	8010cfe <__multiply+0xfe>
 8010d2e:	9a01      	ldr	r2, [sp, #4]
 8010d30:	50b4      	str	r4, [r6, r2]
 8010d32:	3604      	adds	r6, #4
 8010d34:	e7a3      	b.n	8010c7e <__multiply+0x7e>
 8010d36:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d1a5      	bne.n	8010c8a <__multiply+0x8a>
 8010d3e:	3f01      	subs	r7, #1
 8010d40:	e7a1      	b.n	8010c86 <__multiply+0x86>
 8010d42:	bf00      	nop
 8010d44:	08013e8c 	.word	0x08013e8c
 8010d48:	08013f80 	.word	0x08013f80

08010d4c <__pow5mult>:
 8010d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d50:	4615      	mov	r5, r2
 8010d52:	f012 0203 	ands.w	r2, r2, #3
 8010d56:	4606      	mov	r6, r0
 8010d58:	460f      	mov	r7, r1
 8010d5a:	d007      	beq.n	8010d6c <__pow5mult+0x20>
 8010d5c:	4c25      	ldr	r4, [pc, #148]	; (8010df4 <__pow5mult+0xa8>)
 8010d5e:	3a01      	subs	r2, #1
 8010d60:	2300      	movs	r3, #0
 8010d62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010d66:	f7ff fe51 	bl	8010a0c <__multadd>
 8010d6a:	4607      	mov	r7, r0
 8010d6c:	10ad      	asrs	r5, r5, #2
 8010d6e:	d03d      	beq.n	8010dec <__pow5mult+0xa0>
 8010d70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010d72:	b97c      	cbnz	r4, 8010d94 <__pow5mult+0x48>
 8010d74:	2010      	movs	r0, #16
 8010d76:	f7fc f9eb 	bl	800d150 <malloc>
 8010d7a:	4602      	mov	r2, r0
 8010d7c:	6270      	str	r0, [r6, #36]	; 0x24
 8010d7e:	b928      	cbnz	r0, 8010d8c <__pow5mult+0x40>
 8010d80:	4b1d      	ldr	r3, [pc, #116]	; (8010df8 <__pow5mult+0xac>)
 8010d82:	481e      	ldr	r0, [pc, #120]	; (8010dfc <__pow5mult+0xb0>)
 8010d84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010d88:	f000 fdca 	bl	8011920 <__assert_func>
 8010d8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010d90:	6004      	str	r4, [r0, #0]
 8010d92:	60c4      	str	r4, [r0, #12]
 8010d94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010d98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010d9c:	b94c      	cbnz	r4, 8010db2 <__pow5mult+0x66>
 8010d9e:	f240 2171 	movw	r1, #625	; 0x271
 8010da2:	4630      	mov	r0, r6
 8010da4:	f7ff ff16 	bl	8010bd4 <__i2b>
 8010da8:	2300      	movs	r3, #0
 8010daa:	f8c8 0008 	str.w	r0, [r8, #8]
 8010dae:	4604      	mov	r4, r0
 8010db0:	6003      	str	r3, [r0, #0]
 8010db2:	f04f 0900 	mov.w	r9, #0
 8010db6:	07eb      	lsls	r3, r5, #31
 8010db8:	d50a      	bpl.n	8010dd0 <__pow5mult+0x84>
 8010dba:	4639      	mov	r1, r7
 8010dbc:	4622      	mov	r2, r4
 8010dbe:	4630      	mov	r0, r6
 8010dc0:	f7ff ff1e 	bl	8010c00 <__multiply>
 8010dc4:	4639      	mov	r1, r7
 8010dc6:	4680      	mov	r8, r0
 8010dc8:	4630      	mov	r0, r6
 8010dca:	f7ff fdfd 	bl	80109c8 <_Bfree>
 8010dce:	4647      	mov	r7, r8
 8010dd0:	106d      	asrs	r5, r5, #1
 8010dd2:	d00b      	beq.n	8010dec <__pow5mult+0xa0>
 8010dd4:	6820      	ldr	r0, [r4, #0]
 8010dd6:	b938      	cbnz	r0, 8010de8 <__pow5mult+0x9c>
 8010dd8:	4622      	mov	r2, r4
 8010dda:	4621      	mov	r1, r4
 8010ddc:	4630      	mov	r0, r6
 8010dde:	f7ff ff0f 	bl	8010c00 <__multiply>
 8010de2:	6020      	str	r0, [r4, #0]
 8010de4:	f8c0 9000 	str.w	r9, [r0]
 8010de8:	4604      	mov	r4, r0
 8010dea:	e7e4      	b.n	8010db6 <__pow5mult+0x6a>
 8010dec:	4638      	mov	r0, r7
 8010dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010df2:	bf00      	nop
 8010df4:	080140d0 	.word	0x080140d0
 8010df8:	08013e16 	.word	0x08013e16
 8010dfc:	08013f80 	.word	0x08013f80

08010e00 <__lshift>:
 8010e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e04:	460c      	mov	r4, r1
 8010e06:	6849      	ldr	r1, [r1, #4]
 8010e08:	6923      	ldr	r3, [r4, #16]
 8010e0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010e0e:	68a3      	ldr	r3, [r4, #8]
 8010e10:	4607      	mov	r7, r0
 8010e12:	4691      	mov	r9, r2
 8010e14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010e18:	f108 0601 	add.w	r6, r8, #1
 8010e1c:	42b3      	cmp	r3, r6
 8010e1e:	db0b      	blt.n	8010e38 <__lshift+0x38>
 8010e20:	4638      	mov	r0, r7
 8010e22:	f7ff fd91 	bl	8010948 <_Balloc>
 8010e26:	4605      	mov	r5, r0
 8010e28:	b948      	cbnz	r0, 8010e3e <__lshift+0x3e>
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	4b28      	ldr	r3, [pc, #160]	; (8010ed0 <__lshift+0xd0>)
 8010e2e:	4829      	ldr	r0, [pc, #164]	; (8010ed4 <__lshift+0xd4>)
 8010e30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010e34:	f000 fd74 	bl	8011920 <__assert_func>
 8010e38:	3101      	adds	r1, #1
 8010e3a:	005b      	lsls	r3, r3, #1
 8010e3c:	e7ee      	b.n	8010e1c <__lshift+0x1c>
 8010e3e:	2300      	movs	r3, #0
 8010e40:	f100 0114 	add.w	r1, r0, #20
 8010e44:	f100 0210 	add.w	r2, r0, #16
 8010e48:	4618      	mov	r0, r3
 8010e4a:	4553      	cmp	r3, sl
 8010e4c:	db33      	blt.n	8010eb6 <__lshift+0xb6>
 8010e4e:	6920      	ldr	r0, [r4, #16]
 8010e50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010e54:	f104 0314 	add.w	r3, r4, #20
 8010e58:	f019 091f 	ands.w	r9, r9, #31
 8010e5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010e60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010e64:	d02b      	beq.n	8010ebe <__lshift+0xbe>
 8010e66:	f1c9 0e20 	rsb	lr, r9, #32
 8010e6a:	468a      	mov	sl, r1
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	6818      	ldr	r0, [r3, #0]
 8010e70:	fa00 f009 	lsl.w	r0, r0, r9
 8010e74:	4302      	orrs	r2, r0
 8010e76:	f84a 2b04 	str.w	r2, [sl], #4
 8010e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e7e:	459c      	cmp	ip, r3
 8010e80:	fa22 f20e 	lsr.w	r2, r2, lr
 8010e84:	d8f3      	bhi.n	8010e6e <__lshift+0x6e>
 8010e86:	ebac 0304 	sub.w	r3, ip, r4
 8010e8a:	3b15      	subs	r3, #21
 8010e8c:	f023 0303 	bic.w	r3, r3, #3
 8010e90:	3304      	adds	r3, #4
 8010e92:	f104 0015 	add.w	r0, r4, #21
 8010e96:	4584      	cmp	ip, r0
 8010e98:	bf38      	it	cc
 8010e9a:	2304      	movcc	r3, #4
 8010e9c:	50ca      	str	r2, [r1, r3]
 8010e9e:	b10a      	cbz	r2, 8010ea4 <__lshift+0xa4>
 8010ea0:	f108 0602 	add.w	r6, r8, #2
 8010ea4:	3e01      	subs	r6, #1
 8010ea6:	4638      	mov	r0, r7
 8010ea8:	612e      	str	r6, [r5, #16]
 8010eaa:	4621      	mov	r1, r4
 8010eac:	f7ff fd8c 	bl	80109c8 <_Bfree>
 8010eb0:	4628      	mov	r0, r5
 8010eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8010eba:	3301      	adds	r3, #1
 8010ebc:	e7c5      	b.n	8010e4a <__lshift+0x4a>
 8010ebe:	3904      	subs	r1, #4
 8010ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ec4:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ec8:	459c      	cmp	ip, r3
 8010eca:	d8f9      	bhi.n	8010ec0 <__lshift+0xc0>
 8010ecc:	e7ea      	b.n	8010ea4 <__lshift+0xa4>
 8010ece:	bf00      	nop
 8010ed0:	08013e8c 	.word	0x08013e8c
 8010ed4:	08013f80 	.word	0x08013f80

08010ed8 <__mcmp>:
 8010ed8:	b530      	push	{r4, r5, lr}
 8010eda:	6902      	ldr	r2, [r0, #16]
 8010edc:	690c      	ldr	r4, [r1, #16]
 8010ede:	1b12      	subs	r2, r2, r4
 8010ee0:	d10e      	bne.n	8010f00 <__mcmp+0x28>
 8010ee2:	f100 0314 	add.w	r3, r0, #20
 8010ee6:	3114      	adds	r1, #20
 8010ee8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010eec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010ef0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010ef4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010ef8:	42a5      	cmp	r5, r4
 8010efa:	d003      	beq.n	8010f04 <__mcmp+0x2c>
 8010efc:	d305      	bcc.n	8010f0a <__mcmp+0x32>
 8010efe:	2201      	movs	r2, #1
 8010f00:	4610      	mov	r0, r2
 8010f02:	bd30      	pop	{r4, r5, pc}
 8010f04:	4283      	cmp	r3, r0
 8010f06:	d3f3      	bcc.n	8010ef0 <__mcmp+0x18>
 8010f08:	e7fa      	b.n	8010f00 <__mcmp+0x28>
 8010f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f0e:	e7f7      	b.n	8010f00 <__mcmp+0x28>

08010f10 <__mdiff>:
 8010f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f14:	460c      	mov	r4, r1
 8010f16:	4606      	mov	r6, r0
 8010f18:	4611      	mov	r1, r2
 8010f1a:	4620      	mov	r0, r4
 8010f1c:	4617      	mov	r7, r2
 8010f1e:	f7ff ffdb 	bl	8010ed8 <__mcmp>
 8010f22:	1e05      	subs	r5, r0, #0
 8010f24:	d110      	bne.n	8010f48 <__mdiff+0x38>
 8010f26:	4629      	mov	r1, r5
 8010f28:	4630      	mov	r0, r6
 8010f2a:	f7ff fd0d 	bl	8010948 <_Balloc>
 8010f2e:	b930      	cbnz	r0, 8010f3e <__mdiff+0x2e>
 8010f30:	4b39      	ldr	r3, [pc, #228]	; (8011018 <__mdiff+0x108>)
 8010f32:	4602      	mov	r2, r0
 8010f34:	f240 2132 	movw	r1, #562	; 0x232
 8010f38:	4838      	ldr	r0, [pc, #224]	; (801101c <__mdiff+0x10c>)
 8010f3a:	f000 fcf1 	bl	8011920 <__assert_func>
 8010f3e:	2301      	movs	r3, #1
 8010f40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010f44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f48:	bfa4      	itt	ge
 8010f4a:	463b      	movge	r3, r7
 8010f4c:	4627      	movge	r7, r4
 8010f4e:	4630      	mov	r0, r6
 8010f50:	6879      	ldr	r1, [r7, #4]
 8010f52:	bfa6      	itte	ge
 8010f54:	461c      	movge	r4, r3
 8010f56:	2500      	movge	r5, #0
 8010f58:	2501      	movlt	r5, #1
 8010f5a:	f7ff fcf5 	bl	8010948 <_Balloc>
 8010f5e:	b920      	cbnz	r0, 8010f6a <__mdiff+0x5a>
 8010f60:	4b2d      	ldr	r3, [pc, #180]	; (8011018 <__mdiff+0x108>)
 8010f62:	4602      	mov	r2, r0
 8010f64:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010f68:	e7e6      	b.n	8010f38 <__mdiff+0x28>
 8010f6a:	693e      	ldr	r6, [r7, #16]
 8010f6c:	60c5      	str	r5, [r0, #12]
 8010f6e:	6925      	ldr	r5, [r4, #16]
 8010f70:	f107 0114 	add.w	r1, r7, #20
 8010f74:	f104 0914 	add.w	r9, r4, #20
 8010f78:	f100 0e14 	add.w	lr, r0, #20
 8010f7c:	f107 0210 	add.w	r2, r7, #16
 8010f80:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010f84:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010f88:	46f2      	mov	sl, lr
 8010f8a:	2700      	movs	r7, #0
 8010f8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010f90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010f94:	fa1f f883 	uxth.w	r8, r3
 8010f98:	fa17 f78b 	uxtah	r7, r7, fp
 8010f9c:	0c1b      	lsrs	r3, r3, #16
 8010f9e:	eba7 0808 	sub.w	r8, r7, r8
 8010fa2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010fa6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010faa:	fa1f f888 	uxth.w	r8, r8
 8010fae:	141f      	asrs	r7, r3, #16
 8010fb0:	454d      	cmp	r5, r9
 8010fb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010fb6:	f84a 3b04 	str.w	r3, [sl], #4
 8010fba:	d8e7      	bhi.n	8010f8c <__mdiff+0x7c>
 8010fbc:	1b2b      	subs	r3, r5, r4
 8010fbe:	3b15      	subs	r3, #21
 8010fc0:	f023 0303 	bic.w	r3, r3, #3
 8010fc4:	3304      	adds	r3, #4
 8010fc6:	3415      	adds	r4, #21
 8010fc8:	42a5      	cmp	r5, r4
 8010fca:	bf38      	it	cc
 8010fcc:	2304      	movcc	r3, #4
 8010fce:	4419      	add	r1, r3
 8010fd0:	4473      	add	r3, lr
 8010fd2:	469e      	mov	lr, r3
 8010fd4:	460d      	mov	r5, r1
 8010fd6:	4565      	cmp	r5, ip
 8010fd8:	d30e      	bcc.n	8010ff8 <__mdiff+0xe8>
 8010fda:	f10c 0203 	add.w	r2, ip, #3
 8010fde:	1a52      	subs	r2, r2, r1
 8010fe0:	f022 0203 	bic.w	r2, r2, #3
 8010fe4:	3903      	subs	r1, #3
 8010fe6:	458c      	cmp	ip, r1
 8010fe8:	bf38      	it	cc
 8010fea:	2200      	movcc	r2, #0
 8010fec:	441a      	add	r2, r3
 8010fee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010ff2:	b17b      	cbz	r3, 8011014 <__mdiff+0x104>
 8010ff4:	6106      	str	r6, [r0, #16]
 8010ff6:	e7a5      	b.n	8010f44 <__mdiff+0x34>
 8010ff8:	f855 8b04 	ldr.w	r8, [r5], #4
 8010ffc:	fa17 f488 	uxtah	r4, r7, r8
 8011000:	1422      	asrs	r2, r4, #16
 8011002:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011006:	b2a4      	uxth	r4, r4
 8011008:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801100c:	f84e 4b04 	str.w	r4, [lr], #4
 8011010:	1417      	asrs	r7, r2, #16
 8011012:	e7e0      	b.n	8010fd6 <__mdiff+0xc6>
 8011014:	3e01      	subs	r6, #1
 8011016:	e7ea      	b.n	8010fee <__mdiff+0xde>
 8011018:	08013e8c 	.word	0x08013e8c
 801101c:	08013f80 	.word	0x08013f80

08011020 <__ulp>:
 8011020:	b082      	sub	sp, #8
 8011022:	ed8d 0b00 	vstr	d0, [sp]
 8011026:	9b01      	ldr	r3, [sp, #4]
 8011028:	4912      	ldr	r1, [pc, #72]	; (8011074 <__ulp+0x54>)
 801102a:	4019      	ands	r1, r3
 801102c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011030:	2900      	cmp	r1, #0
 8011032:	dd05      	ble.n	8011040 <__ulp+0x20>
 8011034:	2200      	movs	r2, #0
 8011036:	460b      	mov	r3, r1
 8011038:	ec43 2b10 	vmov	d0, r2, r3
 801103c:	b002      	add	sp, #8
 801103e:	4770      	bx	lr
 8011040:	4249      	negs	r1, r1
 8011042:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011046:	ea4f 5021 	mov.w	r0, r1, asr #20
 801104a:	f04f 0200 	mov.w	r2, #0
 801104e:	f04f 0300 	mov.w	r3, #0
 8011052:	da04      	bge.n	801105e <__ulp+0x3e>
 8011054:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011058:	fa41 f300 	asr.w	r3, r1, r0
 801105c:	e7ec      	b.n	8011038 <__ulp+0x18>
 801105e:	f1a0 0114 	sub.w	r1, r0, #20
 8011062:	291e      	cmp	r1, #30
 8011064:	bfda      	itte	le
 8011066:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801106a:	fa20 f101 	lsrle.w	r1, r0, r1
 801106e:	2101      	movgt	r1, #1
 8011070:	460a      	mov	r2, r1
 8011072:	e7e1      	b.n	8011038 <__ulp+0x18>
 8011074:	7ff00000 	.word	0x7ff00000

08011078 <__b2d>:
 8011078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801107a:	6905      	ldr	r5, [r0, #16]
 801107c:	f100 0714 	add.w	r7, r0, #20
 8011080:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011084:	1f2e      	subs	r6, r5, #4
 8011086:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801108a:	4620      	mov	r0, r4
 801108c:	f7ff fd52 	bl	8010b34 <__hi0bits>
 8011090:	f1c0 0320 	rsb	r3, r0, #32
 8011094:	280a      	cmp	r0, #10
 8011096:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011114 <__b2d+0x9c>
 801109a:	600b      	str	r3, [r1, #0]
 801109c:	dc14      	bgt.n	80110c8 <__b2d+0x50>
 801109e:	f1c0 0e0b 	rsb	lr, r0, #11
 80110a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80110a6:	42b7      	cmp	r7, r6
 80110a8:	ea41 030c 	orr.w	r3, r1, ip
 80110ac:	bf34      	ite	cc
 80110ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80110b2:	2100      	movcs	r1, #0
 80110b4:	3015      	adds	r0, #21
 80110b6:	fa04 f000 	lsl.w	r0, r4, r0
 80110ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80110be:	ea40 0201 	orr.w	r2, r0, r1
 80110c2:	ec43 2b10 	vmov	d0, r2, r3
 80110c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110c8:	42b7      	cmp	r7, r6
 80110ca:	bf3a      	itte	cc
 80110cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80110d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80110d4:	2100      	movcs	r1, #0
 80110d6:	380b      	subs	r0, #11
 80110d8:	d017      	beq.n	801110a <__b2d+0x92>
 80110da:	f1c0 0c20 	rsb	ip, r0, #32
 80110de:	fa04 f500 	lsl.w	r5, r4, r0
 80110e2:	42be      	cmp	r6, r7
 80110e4:	fa21 f40c 	lsr.w	r4, r1, ip
 80110e8:	ea45 0504 	orr.w	r5, r5, r4
 80110ec:	bf8c      	ite	hi
 80110ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80110f2:	2400      	movls	r4, #0
 80110f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80110f8:	fa01 f000 	lsl.w	r0, r1, r0
 80110fc:	fa24 f40c 	lsr.w	r4, r4, ip
 8011100:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011104:	ea40 0204 	orr.w	r2, r0, r4
 8011108:	e7db      	b.n	80110c2 <__b2d+0x4a>
 801110a:	ea44 030c 	orr.w	r3, r4, ip
 801110e:	460a      	mov	r2, r1
 8011110:	e7d7      	b.n	80110c2 <__b2d+0x4a>
 8011112:	bf00      	nop
 8011114:	3ff00000 	.word	0x3ff00000

08011118 <__d2b>:
 8011118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801111c:	4689      	mov	r9, r1
 801111e:	2101      	movs	r1, #1
 8011120:	ec57 6b10 	vmov	r6, r7, d0
 8011124:	4690      	mov	r8, r2
 8011126:	f7ff fc0f 	bl	8010948 <_Balloc>
 801112a:	4604      	mov	r4, r0
 801112c:	b930      	cbnz	r0, 801113c <__d2b+0x24>
 801112e:	4602      	mov	r2, r0
 8011130:	4b25      	ldr	r3, [pc, #148]	; (80111c8 <__d2b+0xb0>)
 8011132:	4826      	ldr	r0, [pc, #152]	; (80111cc <__d2b+0xb4>)
 8011134:	f240 310a 	movw	r1, #778	; 0x30a
 8011138:	f000 fbf2 	bl	8011920 <__assert_func>
 801113c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011140:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011144:	bb35      	cbnz	r5, 8011194 <__d2b+0x7c>
 8011146:	2e00      	cmp	r6, #0
 8011148:	9301      	str	r3, [sp, #4]
 801114a:	d028      	beq.n	801119e <__d2b+0x86>
 801114c:	4668      	mov	r0, sp
 801114e:	9600      	str	r6, [sp, #0]
 8011150:	f7ff fd10 	bl	8010b74 <__lo0bits>
 8011154:	9900      	ldr	r1, [sp, #0]
 8011156:	b300      	cbz	r0, 801119a <__d2b+0x82>
 8011158:	9a01      	ldr	r2, [sp, #4]
 801115a:	f1c0 0320 	rsb	r3, r0, #32
 801115e:	fa02 f303 	lsl.w	r3, r2, r3
 8011162:	430b      	orrs	r3, r1
 8011164:	40c2      	lsrs	r2, r0
 8011166:	6163      	str	r3, [r4, #20]
 8011168:	9201      	str	r2, [sp, #4]
 801116a:	9b01      	ldr	r3, [sp, #4]
 801116c:	61a3      	str	r3, [r4, #24]
 801116e:	2b00      	cmp	r3, #0
 8011170:	bf14      	ite	ne
 8011172:	2202      	movne	r2, #2
 8011174:	2201      	moveq	r2, #1
 8011176:	6122      	str	r2, [r4, #16]
 8011178:	b1d5      	cbz	r5, 80111b0 <__d2b+0x98>
 801117a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801117e:	4405      	add	r5, r0
 8011180:	f8c9 5000 	str.w	r5, [r9]
 8011184:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011188:	f8c8 0000 	str.w	r0, [r8]
 801118c:	4620      	mov	r0, r4
 801118e:	b003      	add	sp, #12
 8011190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011194:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011198:	e7d5      	b.n	8011146 <__d2b+0x2e>
 801119a:	6161      	str	r1, [r4, #20]
 801119c:	e7e5      	b.n	801116a <__d2b+0x52>
 801119e:	a801      	add	r0, sp, #4
 80111a0:	f7ff fce8 	bl	8010b74 <__lo0bits>
 80111a4:	9b01      	ldr	r3, [sp, #4]
 80111a6:	6163      	str	r3, [r4, #20]
 80111a8:	2201      	movs	r2, #1
 80111aa:	6122      	str	r2, [r4, #16]
 80111ac:	3020      	adds	r0, #32
 80111ae:	e7e3      	b.n	8011178 <__d2b+0x60>
 80111b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80111b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80111b8:	f8c9 0000 	str.w	r0, [r9]
 80111bc:	6918      	ldr	r0, [r3, #16]
 80111be:	f7ff fcb9 	bl	8010b34 <__hi0bits>
 80111c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80111c6:	e7df      	b.n	8011188 <__d2b+0x70>
 80111c8:	08013e8c 	.word	0x08013e8c
 80111cc:	08013f80 	.word	0x08013f80

080111d0 <__ratio>:
 80111d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111d4:	4688      	mov	r8, r1
 80111d6:	4669      	mov	r1, sp
 80111d8:	4681      	mov	r9, r0
 80111da:	f7ff ff4d 	bl	8011078 <__b2d>
 80111de:	a901      	add	r1, sp, #4
 80111e0:	4640      	mov	r0, r8
 80111e2:	ec55 4b10 	vmov	r4, r5, d0
 80111e6:	f7ff ff47 	bl	8011078 <__b2d>
 80111ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80111ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80111f2:	eba3 0c02 	sub.w	ip, r3, r2
 80111f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80111fa:	1a9b      	subs	r3, r3, r2
 80111fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011200:	ec51 0b10 	vmov	r0, r1, d0
 8011204:	2b00      	cmp	r3, #0
 8011206:	bfd6      	itet	le
 8011208:	460a      	movle	r2, r1
 801120a:	462a      	movgt	r2, r5
 801120c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011210:	468b      	mov	fp, r1
 8011212:	462f      	mov	r7, r5
 8011214:	bfd4      	ite	le
 8011216:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801121a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801121e:	4620      	mov	r0, r4
 8011220:	ee10 2a10 	vmov	r2, s0
 8011224:	465b      	mov	r3, fp
 8011226:	4639      	mov	r1, r7
 8011228:	f7ef fb30 	bl	800088c <__aeabi_ddiv>
 801122c:	ec41 0b10 	vmov	d0, r0, r1
 8011230:	b003      	add	sp, #12
 8011232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011236 <__copybits>:
 8011236:	3901      	subs	r1, #1
 8011238:	b570      	push	{r4, r5, r6, lr}
 801123a:	1149      	asrs	r1, r1, #5
 801123c:	6914      	ldr	r4, [r2, #16]
 801123e:	3101      	adds	r1, #1
 8011240:	f102 0314 	add.w	r3, r2, #20
 8011244:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011248:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801124c:	1f05      	subs	r5, r0, #4
 801124e:	42a3      	cmp	r3, r4
 8011250:	d30c      	bcc.n	801126c <__copybits+0x36>
 8011252:	1aa3      	subs	r3, r4, r2
 8011254:	3b11      	subs	r3, #17
 8011256:	f023 0303 	bic.w	r3, r3, #3
 801125a:	3211      	adds	r2, #17
 801125c:	42a2      	cmp	r2, r4
 801125e:	bf88      	it	hi
 8011260:	2300      	movhi	r3, #0
 8011262:	4418      	add	r0, r3
 8011264:	2300      	movs	r3, #0
 8011266:	4288      	cmp	r0, r1
 8011268:	d305      	bcc.n	8011276 <__copybits+0x40>
 801126a:	bd70      	pop	{r4, r5, r6, pc}
 801126c:	f853 6b04 	ldr.w	r6, [r3], #4
 8011270:	f845 6f04 	str.w	r6, [r5, #4]!
 8011274:	e7eb      	b.n	801124e <__copybits+0x18>
 8011276:	f840 3b04 	str.w	r3, [r0], #4
 801127a:	e7f4      	b.n	8011266 <__copybits+0x30>

0801127c <__any_on>:
 801127c:	f100 0214 	add.w	r2, r0, #20
 8011280:	6900      	ldr	r0, [r0, #16]
 8011282:	114b      	asrs	r3, r1, #5
 8011284:	4298      	cmp	r0, r3
 8011286:	b510      	push	{r4, lr}
 8011288:	db11      	blt.n	80112ae <__any_on+0x32>
 801128a:	dd0a      	ble.n	80112a2 <__any_on+0x26>
 801128c:	f011 011f 	ands.w	r1, r1, #31
 8011290:	d007      	beq.n	80112a2 <__any_on+0x26>
 8011292:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011296:	fa24 f001 	lsr.w	r0, r4, r1
 801129a:	fa00 f101 	lsl.w	r1, r0, r1
 801129e:	428c      	cmp	r4, r1
 80112a0:	d10b      	bne.n	80112ba <__any_on+0x3e>
 80112a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80112a6:	4293      	cmp	r3, r2
 80112a8:	d803      	bhi.n	80112b2 <__any_on+0x36>
 80112aa:	2000      	movs	r0, #0
 80112ac:	bd10      	pop	{r4, pc}
 80112ae:	4603      	mov	r3, r0
 80112b0:	e7f7      	b.n	80112a2 <__any_on+0x26>
 80112b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80112b6:	2900      	cmp	r1, #0
 80112b8:	d0f5      	beq.n	80112a6 <__any_on+0x2a>
 80112ba:	2001      	movs	r0, #1
 80112bc:	e7f6      	b.n	80112ac <__any_on+0x30>

080112be <__ssputs_r>:
 80112be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112c2:	688e      	ldr	r6, [r1, #8]
 80112c4:	429e      	cmp	r6, r3
 80112c6:	4682      	mov	sl, r0
 80112c8:	460c      	mov	r4, r1
 80112ca:	4690      	mov	r8, r2
 80112cc:	461f      	mov	r7, r3
 80112ce:	d838      	bhi.n	8011342 <__ssputs_r+0x84>
 80112d0:	898a      	ldrh	r2, [r1, #12]
 80112d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80112d6:	d032      	beq.n	801133e <__ssputs_r+0x80>
 80112d8:	6825      	ldr	r5, [r4, #0]
 80112da:	6909      	ldr	r1, [r1, #16]
 80112dc:	eba5 0901 	sub.w	r9, r5, r1
 80112e0:	6965      	ldr	r5, [r4, #20]
 80112e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80112e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80112ea:	3301      	adds	r3, #1
 80112ec:	444b      	add	r3, r9
 80112ee:	106d      	asrs	r5, r5, #1
 80112f0:	429d      	cmp	r5, r3
 80112f2:	bf38      	it	cc
 80112f4:	461d      	movcc	r5, r3
 80112f6:	0553      	lsls	r3, r2, #21
 80112f8:	d531      	bpl.n	801135e <__ssputs_r+0xa0>
 80112fa:	4629      	mov	r1, r5
 80112fc:	f7fb ffa6 	bl	800d24c <_malloc_r>
 8011300:	4606      	mov	r6, r0
 8011302:	b950      	cbnz	r0, 801131a <__ssputs_r+0x5c>
 8011304:	230c      	movs	r3, #12
 8011306:	f8ca 3000 	str.w	r3, [sl]
 801130a:	89a3      	ldrh	r3, [r4, #12]
 801130c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011310:	81a3      	strh	r3, [r4, #12]
 8011312:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801131a:	6921      	ldr	r1, [r4, #16]
 801131c:	464a      	mov	r2, r9
 801131e:	f7fb ff1f 	bl	800d160 <memcpy>
 8011322:	89a3      	ldrh	r3, [r4, #12]
 8011324:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801132c:	81a3      	strh	r3, [r4, #12]
 801132e:	6126      	str	r6, [r4, #16]
 8011330:	6165      	str	r5, [r4, #20]
 8011332:	444e      	add	r6, r9
 8011334:	eba5 0509 	sub.w	r5, r5, r9
 8011338:	6026      	str	r6, [r4, #0]
 801133a:	60a5      	str	r5, [r4, #8]
 801133c:	463e      	mov	r6, r7
 801133e:	42be      	cmp	r6, r7
 8011340:	d900      	bls.n	8011344 <__ssputs_r+0x86>
 8011342:	463e      	mov	r6, r7
 8011344:	4632      	mov	r2, r6
 8011346:	6820      	ldr	r0, [r4, #0]
 8011348:	4641      	mov	r1, r8
 801134a:	f000 fb5d 	bl	8011a08 <memmove>
 801134e:	68a3      	ldr	r3, [r4, #8]
 8011350:	6822      	ldr	r2, [r4, #0]
 8011352:	1b9b      	subs	r3, r3, r6
 8011354:	4432      	add	r2, r6
 8011356:	60a3      	str	r3, [r4, #8]
 8011358:	6022      	str	r2, [r4, #0]
 801135a:	2000      	movs	r0, #0
 801135c:	e7db      	b.n	8011316 <__ssputs_r+0x58>
 801135e:	462a      	mov	r2, r5
 8011360:	f000 fb6c 	bl	8011a3c <_realloc_r>
 8011364:	4606      	mov	r6, r0
 8011366:	2800      	cmp	r0, #0
 8011368:	d1e1      	bne.n	801132e <__ssputs_r+0x70>
 801136a:	6921      	ldr	r1, [r4, #16]
 801136c:	4650      	mov	r0, sl
 801136e:	f7fb ff1d 	bl	800d1ac <_free_r>
 8011372:	e7c7      	b.n	8011304 <__ssputs_r+0x46>

08011374 <_svfiprintf_r>:
 8011374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011378:	4698      	mov	r8, r3
 801137a:	898b      	ldrh	r3, [r1, #12]
 801137c:	061b      	lsls	r3, r3, #24
 801137e:	b09d      	sub	sp, #116	; 0x74
 8011380:	4607      	mov	r7, r0
 8011382:	460d      	mov	r5, r1
 8011384:	4614      	mov	r4, r2
 8011386:	d50e      	bpl.n	80113a6 <_svfiprintf_r+0x32>
 8011388:	690b      	ldr	r3, [r1, #16]
 801138a:	b963      	cbnz	r3, 80113a6 <_svfiprintf_r+0x32>
 801138c:	2140      	movs	r1, #64	; 0x40
 801138e:	f7fb ff5d 	bl	800d24c <_malloc_r>
 8011392:	6028      	str	r0, [r5, #0]
 8011394:	6128      	str	r0, [r5, #16]
 8011396:	b920      	cbnz	r0, 80113a2 <_svfiprintf_r+0x2e>
 8011398:	230c      	movs	r3, #12
 801139a:	603b      	str	r3, [r7, #0]
 801139c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80113a0:	e0d1      	b.n	8011546 <_svfiprintf_r+0x1d2>
 80113a2:	2340      	movs	r3, #64	; 0x40
 80113a4:	616b      	str	r3, [r5, #20]
 80113a6:	2300      	movs	r3, #0
 80113a8:	9309      	str	r3, [sp, #36]	; 0x24
 80113aa:	2320      	movs	r3, #32
 80113ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80113b4:	2330      	movs	r3, #48	; 0x30
 80113b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011560 <_svfiprintf_r+0x1ec>
 80113ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80113be:	f04f 0901 	mov.w	r9, #1
 80113c2:	4623      	mov	r3, r4
 80113c4:	469a      	mov	sl, r3
 80113c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113ca:	b10a      	cbz	r2, 80113d0 <_svfiprintf_r+0x5c>
 80113cc:	2a25      	cmp	r2, #37	; 0x25
 80113ce:	d1f9      	bne.n	80113c4 <_svfiprintf_r+0x50>
 80113d0:	ebba 0b04 	subs.w	fp, sl, r4
 80113d4:	d00b      	beq.n	80113ee <_svfiprintf_r+0x7a>
 80113d6:	465b      	mov	r3, fp
 80113d8:	4622      	mov	r2, r4
 80113da:	4629      	mov	r1, r5
 80113dc:	4638      	mov	r0, r7
 80113de:	f7ff ff6e 	bl	80112be <__ssputs_r>
 80113e2:	3001      	adds	r0, #1
 80113e4:	f000 80aa 	beq.w	801153c <_svfiprintf_r+0x1c8>
 80113e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113ea:	445a      	add	r2, fp
 80113ec:	9209      	str	r2, [sp, #36]	; 0x24
 80113ee:	f89a 3000 	ldrb.w	r3, [sl]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	f000 80a2 	beq.w	801153c <_svfiprintf_r+0x1c8>
 80113f8:	2300      	movs	r3, #0
 80113fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80113fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011402:	f10a 0a01 	add.w	sl, sl, #1
 8011406:	9304      	str	r3, [sp, #16]
 8011408:	9307      	str	r3, [sp, #28]
 801140a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801140e:	931a      	str	r3, [sp, #104]	; 0x68
 8011410:	4654      	mov	r4, sl
 8011412:	2205      	movs	r2, #5
 8011414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011418:	4851      	ldr	r0, [pc, #324]	; (8011560 <_svfiprintf_r+0x1ec>)
 801141a:	f7ee ff01 	bl	8000220 <memchr>
 801141e:	9a04      	ldr	r2, [sp, #16]
 8011420:	b9d8      	cbnz	r0, 801145a <_svfiprintf_r+0xe6>
 8011422:	06d0      	lsls	r0, r2, #27
 8011424:	bf44      	itt	mi
 8011426:	2320      	movmi	r3, #32
 8011428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801142c:	0711      	lsls	r1, r2, #28
 801142e:	bf44      	itt	mi
 8011430:	232b      	movmi	r3, #43	; 0x2b
 8011432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011436:	f89a 3000 	ldrb.w	r3, [sl]
 801143a:	2b2a      	cmp	r3, #42	; 0x2a
 801143c:	d015      	beq.n	801146a <_svfiprintf_r+0xf6>
 801143e:	9a07      	ldr	r2, [sp, #28]
 8011440:	4654      	mov	r4, sl
 8011442:	2000      	movs	r0, #0
 8011444:	f04f 0c0a 	mov.w	ip, #10
 8011448:	4621      	mov	r1, r4
 801144a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801144e:	3b30      	subs	r3, #48	; 0x30
 8011450:	2b09      	cmp	r3, #9
 8011452:	d94e      	bls.n	80114f2 <_svfiprintf_r+0x17e>
 8011454:	b1b0      	cbz	r0, 8011484 <_svfiprintf_r+0x110>
 8011456:	9207      	str	r2, [sp, #28]
 8011458:	e014      	b.n	8011484 <_svfiprintf_r+0x110>
 801145a:	eba0 0308 	sub.w	r3, r0, r8
 801145e:	fa09 f303 	lsl.w	r3, r9, r3
 8011462:	4313      	orrs	r3, r2
 8011464:	9304      	str	r3, [sp, #16]
 8011466:	46a2      	mov	sl, r4
 8011468:	e7d2      	b.n	8011410 <_svfiprintf_r+0x9c>
 801146a:	9b03      	ldr	r3, [sp, #12]
 801146c:	1d19      	adds	r1, r3, #4
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	9103      	str	r1, [sp, #12]
 8011472:	2b00      	cmp	r3, #0
 8011474:	bfbb      	ittet	lt
 8011476:	425b      	neglt	r3, r3
 8011478:	f042 0202 	orrlt.w	r2, r2, #2
 801147c:	9307      	strge	r3, [sp, #28]
 801147e:	9307      	strlt	r3, [sp, #28]
 8011480:	bfb8      	it	lt
 8011482:	9204      	strlt	r2, [sp, #16]
 8011484:	7823      	ldrb	r3, [r4, #0]
 8011486:	2b2e      	cmp	r3, #46	; 0x2e
 8011488:	d10c      	bne.n	80114a4 <_svfiprintf_r+0x130>
 801148a:	7863      	ldrb	r3, [r4, #1]
 801148c:	2b2a      	cmp	r3, #42	; 0x2a
 801148e:	d135      	bne.n	80114fc <_svfiprintf_r+0x188>
 8011490:	9b03      	ldr	r3, [sp, #12]
 8011492:	1d1a      	adds	r2, r3, #4
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	9203      	str	r2, [sp, #12]
 8011498:	2b00      	cmp	r3, #0
 801149a:	bfb8      	it	lt
 801149c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80114a0:	3402      	adds	r4, #2
 80114a2:	9305      	str	r3, [sp, #20]
 80114a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011570 <_svfiprintf_r+0x1fc>
 80114a8:	7821      	ldrb	r1, [r4, #0]
 80114aa:	2203      	movs	r2, #3
 80114ac:	4650      	mov	r0, sl
 80114ae:	f7ee feb7 	bl	8000220 <memchr>
 80114b2:	b140      	cbz	r0, 80114c6 <_svfiprintf_r+0x152>
 80114b4:	2340      	movs	r3, #64	; 0x40
 80114b6:	eba0 000a 	sub.w	r0, r0, sl
 80114ba:	fa03 f000 	lsl.w	r0, r3, r0
 80114be:	9b04      	ldr	r3, [sp, #16]
 80114c0:	4303      	orrs	r3, r0
 80114c2:	3401      	adds	r4, #1
 80114c4:	9304      	str	r3, [sp, #16]
 80114c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114ca:	4826      	ldr	r0, [pc, #152]	; (8011564 <_svfiprintf_r+0x1f0>)
 80114cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114d0:	2206      	movs	r2, #6
 80114d2:	f7ee fea5 	bl	8000220 <memchr>
 80114d6:	2800      	cmp	r0, #0
 80114d8:	d038      	beq.n	801154c <_svfiprintf_r+0x1d8>
 80114da:	4b23      	ldr	r3, [pc, #140]	; (8011568 <_svfiprintf_r+0x1f4>)
 80114dc:	bb1b      	cbnz	r3, 8011526 <_svfiprintf_r+0x1b2>
 80114de:	9b03      	ldr	r3, [sp, #12]
 80114e0:	3307      	adds	r3, #7
 80114e2:	f023 0307 	bic.w	r3, r3, #7
 80114e6:	3308      	adds	r3, #8
 80114e8:	9303      	str	r3, [sp, #12]
 80114ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114ec:	4433      	add	r3, r6
 80114ee:	9309      	str	r3, [sp, #36]	; 0x24
 80114f0:	e767      	b.n	80113c2 <_svfiprintf_r+0x4e>
 80114f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80114f6:	460c      	mov	r4, r1
 80114f8:	2001      	movs	r0, #1
 80114fa:	e7a5      	b.n	8011448 <_svfiprintf_r+0xd4>
 80114fc:	2300      	movs	r3, #0
 80114fe:	3401      	adds	r4, #1
 8011500:	9305      	str	r3, [sp, #20]
 8011502:	4619      	mov	r1, r3
 8011504:	f04f 0c0a 	mov.w	ip, #10
 8011508:	4620      	mov	r0, r4
 801150a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801150e:	3a30      	subs	r2, #48	; 0x30
 8011510:	2a09      	cmp	r2, #9
 8011512:	d903      	bls.n	801151c <_svfiprintf_r+0x1a8>
 8011514:	2b00      	cmp	r3, #0
 8011516:	d0c5      	beq.n	80114a4 <_svfiprintf_r+0x130>
 8011518:	9105      	str	r1, [sp, #20]
 801151a:	e7c3      	b.n	80114a4 <_svfiprintf_r+0x130>
 801151c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011520:	4604      	mov	r4, r0
 8011522:	2301      	movs	r3, #1
 8011524:	e7f0      	b.n	8011508 <_svfiprintf_r+0x194>
 8011526:	ab03      	add	r3, sp, #12
 8011528:	9300      	str	r3, [sp, #0]
 801152a:	462a      	mov	r2, r5
 801152c:	4b0f      	ldr	r3, [pc, #60]	; (801156c <_svfiprintf_r+0x1f8>)
 801152e:	a904      	add	r1, sp, #16
 8011530:	4638      	mov	r0, r7
 8011532:	f7fb ff85 	bl	800d440 <_printf_float>
 8011536:	1c42      	adds	r2, r0, #1
 8011538:	4606      	mov	r6, r0
 801153a:	d1d6      	bne.n	80114ea <_svfiprintf_r+0x176>
 801153c:	89ab      	ldrh	r3, [r5, #12]
 801153e:	065b      	lsls	r3, r3, #25
 8011540:	f53f af2c 	bmi.w	801139c <_svfiprintf_r+0x28>
 8011544:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011546:	b01d      	add	sp, #116	; 0x74
 8011548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801154c:	ab03      	add	r3, sp, #12
 801154e:	9300      	str	r3, [sp, #0]
 8011550:	462a      	mov	r2, r5
 8011552:	4b06      	ldr	r3, [pc, #24]	; (801156c <_svfiprintf_r+0x1f8>)
 8011554:	a904      	add	r1, sp, #16
 8011556:	4638      	mov	r0, r7
 8011558:	f7fc fa16 	bl	800d988 <_printf_i>
 801155c:	e7eb      	b.n	8011536 <_svfiprintf_r+0x1c2>
 801155e:	bf00      	nop
 8011560:	080140dc 	.word	0x080140dc
 8011564:	080140e6 	.word	0x080140e6
 8011568:	0800d441 	.word	0x0800d441
 801156c:	080112bf 	.word	0x080112bf
 8011570:	080140e2 	.word	0x080140e2

08011574 <__sfputc_r>:
 8011574:	6893      	ldr	r3, [r2, #8]
 8011576:	3b01      	subs	r3, #1
 8011578:	2b00      	cmp	r3, #0
 801157a:	b410      	push	{r4}
 801157c:	6093      	str	r3, [r2, #8]
 801157e:	da08      	bge.n	8011592 <__sfputc_r+0x1e>
 8011580:	6994      	ldr	r4, [r2, #24]
 8011582:	42a3      	cmp	r3, r4
 8011584:	db01      	blt.n	801158a <__sfputc_r+0x16>
 8011586:	290a      	cmp	r1, #10
 8011588:	d103      	bne.n	8011592 <__sfputc_r+0x1e>
 801158a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801158e:	f7fd bcf1 	b.w	800ef74 <__swbuf_r>
 8011592:	6813      	ldr	r3, [r2, #0]
 8011594:	1c58      	adds	r0, r3, #1
 8011596:	6010      	str	r0, [r2, #0]
 8011598:	7019      	strb	r1, [r3, #0]
 801159a:	4608      	mov	r0, r1
 801159c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115a0:	4770      	bx	lr

080115a2 <__sfputs_r>:
 80115a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115a4:	4606      	mov	r6, r0
 80115a6:	460f      	mov	r7, r1
 80115a8:	4614      	mov	r4, r2
 80115aa:	18d5      	adds	r5, r2, r3
 80115ac:	42ac      	cmp	r4, r5
 80115ae:	d101      	bne.n	80115b4 <__sfputs_r+0x12>
 80115b0:	2000      	movs	r0, #0
 80115b2:	e007      	b.n	80115c4 <__sfputs_r+0x22>
 80115b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115b8:	463a      	mov	r2, r7
 80115ba:	4630      	mov	r0, r6
 80115bc:	f7ff ffda 	bl	8011574 <__sfputc_r>
 80115c0:	1c43      	adds	r3, r0, #1
 80115c2:	d1f3      	bne.n	80115ac <__sfputs_r+0xa>
 80115c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080115c8 <_vfiprintf_r>:
 80115c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115cc:	460d      	mov	r5, r1
 80115ce:	b09d      	sub	sp, #116	; 0x74
 80115d0:	4614      	mov	r4, r2
 80115d2:	4698      	mov	r8, r3
 80115d4:	4606      	mov	r6, r0
 80115d6:	b118      	cbz	r0, 80115e0 <_vfiprintf_r+0x18>
 80115d8:	6983      	ldr	r3, [r0, #24]
 80115da:	b90b      	cbnz	r3, 80115e0 <_vfiprintf_r+0x18>
 80115dc:	f7fe fd1e 	bl	801001c <__sinit>
 80115e0:	4b89      	ldr	r3, [pc, #548]	; (8011808 <_vfiprintf_r+0x240>)
 80115e2:	429d      	cmp	r5, r3
 80115e4:	d11b      	bne.n	801161e <_vfiprintf_r+0x56>
 80115e6:	6875      	ldr	r5, [r6, #4]
 80115e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115ea:	07d9      	lsls	r1, r3, #31
 80115ec:	d405      	bmi.n	80115fa <_vfiprintf_r+0x32>
 80115ee:	89ab      	ldrh	r3, [r5, #12]
 80115f0:	059a      	lsls	r2, r3, #22
 80115f2:	d402      	bmi.n	80115fa <_vfiprintf_r+0x32>
 80115f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115f6:	f7ff f922 	bl	801083e <__retarget_lock_acquire_recursive>
 80115fa:	89ab      	ldrh	r3, [r5, #12]
 80115fc:	071b      	lsls	r3, r3, #28
 80115fe:	d501      	bpl.n	8011604 <_vfiprintf_r+0x3c>
 8011600:	692b      	ldr	r3, [r5, #16]
 8011602:	b9eb      	cbnz	r3, 8011640 <_vfiprintf_r+0x78>
 8011604:	4629      	mov	r1, r5
 8011606:	4630      	mov	r0, r6
 8011608:	f7fd fd06 	bl	800f018 <__swsetup_r>
 801160c:	b1c0      	cbz	r0, 8011640 <_vfiprintf_r+0x78>
 801160e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011610:	07dc      	lsls	r4, r3, #31
 8011612:	d50e      	bpl.n	8011632 <_vfiprintf_r+0x6a>
 8011614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011618:	b01d      	add	sp, #116	; 0x74
 801161a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801161e:	4b7b      	ldr	r3, [pc, #492]	; (801180c <_vfiprintf_r+0x244>)
 8011620:	429d      	cmp	r5, r3
 8011622:	d101      	bne.n	8011628 <_vfiprintf_r+0x60>
 8011624:	68b5      	ldr	r5, [r6, #8]
 8011626:	e7df      	b.n	80115e8 <_vfiprintf_r+0x20>
 8011628:	4b79      	ldr	r3, [pc, #484]	; (8011810 <_vfiprintf_r+0x248>)
 801162a:	429d      	cmp	r5, r3
 801162c:	bf08      	it	eq
 801162e:	68f5      	ldreq	r5, [r6, #12]
 8011630:	e7da      	b.n	80115e8 <_vfiprintf_r+0x20>
 8011632:	89ab      	ldrh	r3, [r5, #12]
 8011634:	0598      	lsls	r0, r3, #22
 8011636:	d4ed      	bmi.n	8011614 <_vfiprintf_r+0x4c>
 8011638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801163a:	f7ff f901 	bl	8010840 <__retarget_lock_release_recursive>
 801163e:	e7e9      	b.n	8011614 <_vfiprintf_r+0x4c>
 8011640:	2300      	movs	r3, #0
 8011642:	9309      	str	r3, [sp, #36]	; 0x24
 8011644:	2320      	movs	r3, #32
 8011646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801164a:	f8cd 800c 	str.w	r8, [sp, #12]
 801164e:	2330      	movs	r3, #48	; 0x30
 8011650:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011814 <_vfiprintf_r+0x24c>
 8011654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011658:	f04f 0901 	mov.w	r9, #1
 801165c:	4623      	mov	r3, r4
 801165e:	469a      	mov	sl, r3
 8011660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011664:	b10a      	cbz	r2, 801166a <_vfiprintf_r+0xa2>
 8011666:	2a25      	cmp	r2, #37	; 0x25
 8011668:	d1f9      	bne.n	801165e <_vfiprintf_r+0x96>
 801166a:	ebba 0b04 	subs.w	fp, sl, r4
 801166e:	d00b      	beq.n	8011688 <_vfiprintf_r+0xc0>
 8011670:	465b      	mov	r3, fp
 8011672:	4622      	mov	r2, r4
 8011674:	4629      	mov	r1, r5
 8011676:	4630      	mov	r0, r6
 8011678:	f7ff ff93 	bl	80115a2 <__sfputs_r>
 801167c:	3001      	adds	r0, #1
 801167e:	f000 80aa 	beq.w	80117d6 <_vfiprintf_r+0x20e>
 8011682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011684:	445a      	add	r2, fp
 8011686:	9209      	str	r2, [sp, #36]	; 0x24
 8011688:	f89a 3000 	ldrb.w	r3, [sl]
 801168c:	2b00      	cmp	r3, #0
 801168e:	f000 80a2 	beq.w	80117d6 <_vfiprintf_r+0x20e>
 8011692:	2300      	movs	r3, #0
 8011694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801169c:	f10a 0a01 	add.w	sl, sl, #1
 80116a0:	9304      	str	r3, [sp, #16]
 80116a2:	9307      	str	r3, [sp, #28]
 80116a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80116a8:	931a      	str	r3, [sp, #104]	; 0x68
 80116aa:	4654      	mov	r4, sl
 80116ac:	2205      	movs	r2, #5
 80116ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116b2:	4858      	ldr	r0, [pc, #352]	; (8011814 <_vfiprintf_r+0x24c>)
 80116b4:	f7ee fdb4 	bl	8000220 <memchr>
 80116b8:	9a04      	ldr	r2, [sp, #16]
 80116ba:	b9d8      	cbnz	r0, 80116f4 <_vfiprintf_r+0x12c>
 80116bc:	06d1      	lsls	r1, r2, #27
 80116be:	bf44      	itt	mi
 80116c0:	2320      	movmi	r3, #32
 80116c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116c6:	0713      	lsls	r3, r2, #28
 80116c8:	bf44      	itt	mi
 80116ca:	232b      	movmi	r3, #43	; 0x2b
 80116cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116d0:	f89a 3000 	ldrb.w	r3, [sl]
 80116d4:	2b2a      	cmp	r3, #42	; 0x2a
 80116d6:	d015      	beq.n	8011704 <_vfiprintf_r+0x13c>
 80116d8:	9a07      	ldr	r2, [sp, #28]
 80116da:	4654      	mov	r4, sl
 80116dc:	2000      	movs	r0, #0
 80116de:	f04f 0c0a 	mov.w	ip, #10
 80116e2:	4621      	mov	r1, r4
 80116e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116e8:	3b30      	subs	r3, #48	; 0x30
 80116ea:	2b09      	cmp	r3, #9
 80116ec:	d94e      	bls.n	801178c <_vfiprintf_r+0x1c4>
 80116ee:	b1b0      	cbz	r0, 801171e <_vfiprintf_r+0x156>
 80116f0:	9207      	str	r2, [sp, #28]
 80116f2:	e014      	b.n	801171e <_vfiprintf_r+0x156>
 80116f4:	eba0 0308 	sub.w	r3, r0, r8
 80116f8:	fa09 f303 	lsl.w	r3, r9, r3
 80116fc:	4313      	orrs	r3, r2
 80116fe:	9304      	str	r3, [sp, #16]
 8011700:	46a2      	mov	sl, r4
 8011702:	e7d2      	b.n	80116aa <_vfiprintf_r+0xe2>
 8011704:	9b03      	ldr	r3, [sp, #12]
 8011706:	1d19      	adds	r1, r3, #4
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	9103      	str	r1, [sp, #12]
 801170c:	2b00      	cmp	r3, #0
 801170e:	bfbb      	ittet	lt
 8011710:	425b      	neglt	r3, r3
 8011712:	f042 0202 	orrlt.w	r2, r2, #2
 8011716:	9307      	strge	r3, [sp, #28]
 8011718:	9307      	strlt	r3, [sp, #28]
 801171a:	bfb8      	it	lt
 801171c:	9204      	strlt	r2, [sp, #16]
 801171e:	7823      	ldrb	r3, [r4, #0]
 8011720:	2b2e      	cmp	r3, #46	; 0x2e
 8011722:	d10c      	bne.n	801173e <_vfiprintf_r+0x176>
 8011724:	7863      	ldrb	r3, [r4, #1]
 8011726:	2b2a      	cmp	r3, #42	; 0x2a
 8011728:	d135      	bne.n	8011796 <_vfiprintf_r+0x1ce>
 801172a:	9b03      	ldr	r3, [sp, #12]
 801172c:	1d1a      	adds	r2, r3, #4
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	9203      	str	r2, [sp, #12]
 8011732:	2b00      	cmp	r3, #0
 8011734:	bfb8      	it	lt
 8011736:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801173a:	3402      	adds	r4, #2
 801173c:	9305      	str	r3, [sp, #20]
 801173e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011824 <_vfiprintf_r+0x25c>
 8011742:	7821      	ldrb	r1, [r4, #0]
 8011744:	2203      	movs	r2, #3
 8011746:	4650      	mov	r0, sl
 8011748:	f7ee fd6a 	bl	8000220 <memchr>
 801174c:	b140      	cbz	r0, 8011760 <_vfiprintf_r+0x198>
 801174e:	2340      	movs	r3, #64	; 0x40
 8011750:	eba0 000a 	sub.w	r0, r0, sl
 8011754:	fa03 f000 	lsl.w	r0, r3, r0
 8011758:	9b04      	ldr	r3, [sp, #16]
 801175a:	4303      	orrs	r3, r0
 801175c:	3401      	adds	r4, #1
 801175e:	9304      	str	r3, [sp, #16]
 8011760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011764:	482c      	ldr	r0, [pc, #176]	; (8011818 <_vfiprintf_r+0x250>)
 8011766:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801176a:	2206      	movs	r2, #6
 801176c:	f7ee fd58 	bl	8000220 <memchr>
 8011770:	2800      	cmp	r0, #0
 8011772:	d03f      	beq.n	80117f4 <_vfiprintf_r+0x22c>
 8011774:	4b29      	ldr	r3, [pc, #164]	; (801181c <_vfiprintf_r+0x254>)
 8011776:	bb1b      	cbnz	r3, 80117c0 <_vfiprintf_r+0x1f8>
 8011778:	9b03      	ldr	r3, [sp, #12]
 801177a:	3307      	adds	r3, #7
 801177c:	f023 0307 	bic.w	r3, r3, #7
 8011780:	3308      	adds	r3, #8
 8011782:	9303      	str	r3, [sp, #12]
 8011784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011786:	443b      	add	r3, r7
 8011788:	9309      	str	r3, [sp, #36]	; 0x24
 801178a:	e767      	b.n	801165c <_vfiprintf_r+0x94>
 801178c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011790:	460c      	mov	r4, r1
 8011792:	2001      	movs	r0, #1
 8011794:	e7a5      	b.n	80116e2 <_vfiprintf_r+0x11a>
 8011796:	2300      	movs	r3, #0
 8011798:	3401      	adds	r4, #1
 801179a:	9305      	str	r3, [sp, #20]
 801179c:	4619      	mov	r1, r3
 801179e:	f04f 0c0a 	mov.w	ip, #10
 80117a2:	4620      	mov	r0, r4
 80117a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117a8:	3a30      	subs	r2, #48	; 0x30
 80117aa:	2a09      	cmp	r2, #9
 80117ac:	d903      	bls.n	80117b6 <_vfiprintf_r+0x1ee>
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d0c5      	beq.n	801173e <_vfiprintf_r+0x176>
 80117b2:	9105      	str	r1, [sp, #20]
 80117b4:	e7c3      	b.n	801173e <_vfiprintf_r+0x176>
 80117b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80117ba:	4604      	mov	r4, r0
 80117bc:	2301      	movs	r3, #1
 80117be:	e7f0      	b.n	80117a2 <_vfiprintf_r+0x1da>
 80117c0:	ab03      	add	r3, sp, #12
 80117c2:	9300      	str	r3, [sp, #0]
 80117c4:	462a      	mov	r2, r5
 80117c6:	4b16      	ldr	r3, [pc, #88]	; (8011820 <_vfiprintf_r+0x258>)
 80117c8:	a904      	add	r1, sp, #16
 80117ca:	4630      	mov	r0, r6
 80117cc:	f7fb fe38 	bl	800d440 <_printf_float>
 80117d0:	4607      	mov	r7, r0
 80117d2:	1c78      	adds	r0, r7, #1
 80117d4:	d1d6      	bne.n	8011784 <_vfiprintf_r+0x1bc>
 80117d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117d8:	07d9      	lsls	r1, r3, #31
 80117da:	d405      	bmi.n	80117e8 <_vfiprintf_r+0x220>
 80117dc:	89ab      	ldrh	r3, [r5, #12]
 80117de:	059a      	lsls	r2, r3, #22
 80117e0:	d402      	bmi.n	80117e8 <_vfiprintf_r+0x220>
 80117e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117e4:	f7ff f82c 	bl	8010840 <__retarget_lock_release_recursive>
 80117e8:	89ab      	ldrh	r3, [r5, #12]
 80117ea:	065b      	lsls	r3, r3, #25
 80117ec:	f53f af12 	bmi.w	8011614 <_vfiprintf_r+0x4c>
 80117f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117f2:	e711      	b.n	8011618 <_vfiprintf_r+0x50>
 80117f4:	ab03      	add	r3, sp, #12
 80117f6:	9300      	str	r3, [sp, #0]
 80117f8:	462a      	mov	r2, r5
 80117fa:	4b09      	ldr	r3, [pc, #36]	; (8011820 <_vfiprintf_r+0x258>)
 80117fc:	a904      	add	r1, sp, #16
 80117fe:	4630      	mov	r0, r6
 8011800:	f7fc f8c2 	bl	800d988 <_printf_i>
 8011804:	e7e4      	b.n	80117d0 <_vfiprintf_r+0x208>
 8011806:	bf00      	nop
 8011808:	08013ec0 	.word	0x08013ec0
 801180c:	08013ee0 	.word	0x08013ee0
 8011810:	08013ea0 	.word	0x08013ea0
 8011814:	080140dc 	.word	0x080140dc
 8011818:	080140e6 	.word	0x080140e6
 801181c:	0800d441 	.word	0x0800d441
 8011820:	080115a3 	.word	0x080115a3
 8011824:	080140e2 	.word	0x080140e2

08011828 <nan>:
 8011828:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011830 <nan+0x8>
 801182c:	4770      	bx	lr
 801182e:	bf00      	nop
 8011830:	00000000 	.word	0x00000000
 8011834:	7ff80000 	.word	0x7ff80000

08011838 <__sread>:
 8011838:	b510      	push	{r4, lr}
 801183a:	460c      	mov	r4, r1
 801183c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011840:	f000 f922 	bl	8011a88 <_read_r>
 8011844:	2800      	cmp	r0, #0
 8011846:	bfab      	itete	ge
 8011848:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801184a:	89a3      	ldrhlt	r3, [r4, #12]
 801184c:	181b      	addge	r3, r3, r0
 801184e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011852:	bfac      	ite	ge
 8011854:	6563      	strge	r3, [r4, #84]	; 0x54
 8011856:	81a3      	strhlt	r3, [r4, #12]
 8011858:	bd10      	pop	{r4, pc}

0801185a <__swrite>:
 801185a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801185e:	461f      	mov	r7, r3
 8011860:	898b      	ldrh	r3, [r1, #12]
 8011862:	05db      	lsls	r3, r3, #23
 8011864:	4605      	mov	r5, r0
 8011866:	460c      	mov	r4, r1
 8011868:	4616      	mov	r6, r2
 801186a:	d505      	bpl.n	8011878 <__swrite+0x1e>
 801186c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011870:	2302      	movs	r3, #2
 8011872:	2200      	movs	r2, #0
 8011874:	f000 f8b6 	bl	80119e4 <_lseek_r>
 8011878:	89a3      	ldrh	r3, [r4, #12]
 801187a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801187e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011882:	81a3      	strh	r3, [r4, #12]
 8011884:	4632      	mov	r2, r6
 8011886:	463b      	mov	r3, r7
 8011888:	4628      	mov	r0, r5
 801188a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801188e:	f000 b835 	b.w	80118fc <_write_r>

08011892 <__sseek>:
 8011892:	b510      	push	{r4, lr}
 8011894:	460c      	mov	r4, r1
 8011896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801189a:	f000 f8a3 	bl	80119e4 <_lseek_r>
 801189e:	1c43      	adds	r3, r0, #1
 80118a0:	89a3      	ldrh	r3, [r4, #12]
 80118a2:	bf15      	itete	ne
 80118a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80118a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80118aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80118ae:	81a3      	strheq	r3, [r4, #12]
 80118b0:	bf18      	it	ne
 80118b2:	81a3      	strhne	r3, [r4, #12]
 80118b4:	bd10      	pop	{r4, pc}

080118b6 <__sclose>:
 80118b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118ba:	f000 b84f 	b.w	801195c <_close_r>

080118be <strncmp>:
 80118be:	b510      	push	{r4, lr}
 80118c0:	b16a      	cbz	r2, 80118de <strncmp+0x20>
 80118c2:	3901      	subs	r1, #1
 80118c4:	1884      	adds	r4, r0, r2
 80118c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80118ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d103      	bne.n	80118da <strncmp+0x1c>
 80118d2:	42a0      	cmp	r0, r4
 80118d4:	d001      	beq.n	80118da <strncmp+0x1c>
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d1f5      	bne.n	80118c6 <strncmp+0x8>
 80118da:	1a98      	subs	r0, r3, r2
 80118dc:	bd10      	pop	{r4, pc}
 80118de:	4610      	mov	r0, r2
 80118e0:	e7fc      	b.n	80118dc <strncmp+0x1e>

080118e2 <__ascii_wctomb>:
 80118e2:	b149      	cbz	r1, 80118f8 <__ascii_wctomb+0x16>
 80118e4:	2aff      	cmp	r2, #255	; 0xff
 80118e6:	bf85      	ittet	hi
 80118e8:	238a      	movhi	r3, #138	; 0x8a
 80118ea:	6003      	strhi	r3, [r0, #0]
 80118ec:	700a      	strbls	r2, [r1, #0]
 80118ee:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80118f2:	bf98      	it	ls
 80118f4:	2001      	movls	r0, #1
 80118f6:	4770      	bx	lr
 80118f8:	4608      	mov	r0, r1
 80118fa:	4770      	bx	lr

080118fc <_write_r>:
 80118fc:	b538      	push	{r3, r4, r5, lr}
 80118fe:	4d07      	ldr	r5, [pc, #28]	; (801191c <_write_r+0x20>)
 8011900:	4604      	mov	r4, r0
 8011902:	4608      	mov	r0, r1
 8011904:	4611      	mov	r1, r2
 8011906:	2200      	movs	r2, #0
 8011908:	602a      	str	r2, [r5, #0]
 801190a:	461a      	mov	r2, r3
 801190c:	f7f3 ff06 	bl	800571c <_write>
 8011910:	1c43      	adds	r3, r0, #1
 8011912:	d102      	bne.n	801191a <_write_r+0x1e>
 8011914:	682b      	ldr	r3, [r5, #0]
 8011916:	b103      	cbz	r3, 801191a <_write_r+0x1e>
 8011918:	6023      	str	r3, [r4, #0]
 801191a:	bd38      	pop	{r3, r4, r5, pc}
 801191c:	20007470 	.word	0x20007470

08011920 <__assert_func>:
 8011920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011922:	4614      	mov	r4, r2
 8011924:	461a      	mov	r2, r3
 8011926:	4b09      	ldr	r3, [pc, #36]	; (801194c <__assert_func+0x2c>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	4605      	mov	r5, r0
 801192c:	68d8      	ldr	r0, [r3, #12]
 801192e:	b14c      	cbz	r4, 8011944 <__assert_func+0x24>
 8011930:	4b07      	ldr	r3, [pc, #28]	; (8011950 <__assert_func+0x30>)
 8011932:	9100      	str	r1, [sp, #0]
 8011934:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011938:	4906      	ldr	r1, [pc, #24]	; (8011954 <__assert_func+0x34>)
 801193a:	462b      	mov	r3, r5
 801193c:	f000 f81e 	bl	801197c <fiprintf>
 8011940:	f000 f8b4 	bl	8011aac <abort>
 8011944:	4b04      	ldr	r3, [pc, #16]	; (8011958 <__assert_func+0x38>)
 8011946:	461c      	mov	r4, r3
 8011948:	e7f3      	b.n	8011932 <__assert_func+0x12>
 801194a:	bf00      	nop
 801194c:	20000014 	.word	0x20000014
 8011950:	080140ed 	.word	0x080140ed
 8011954:	080140fa 	.word	0x080140fa
 8011958:	08014128 	.word	0x08014128

0801195c <_close_r>:
 801195c:	b538      	push	{r3, r4, r5, lr}
 801195e:	4d06      	ldr	r5, [pc, #24]	; (8011978 <_close_r+0x1c>)
 8011960:	2300      	movs	r3, #0
 8011962:	4604      	mov	r4, r0
 8011964:	4608      	mov	r0, r1
 8011966:	602b      	str	r3, [r5, #0]
 8011968:	f7f3 ff04 	bl	8005774 <_close>
 801196c:	1c43      	adds	r3, r0, #1
 801196e:	d102      	bne.n	8011976 <_close_r+0x1a>
 8011970:	682b      	ldr	r3, [r5, #0]
 8011972:	b103      	cbz	r3, 8011976 <_close_r+0x1a>
 8011974:	6023      	str	r3, [r4, #0]
 8011976:	bd38      	pop	{r3, r4, r5, pc}
 8011978:	20007470 	.word	0x20007470

0801197c <fiprintf>:
 801197c:	b40e      	push	{r1, r2, r3}
 801197e:	b503      	push	{r0, r1, lr}
 8011980:	4601      	mov	r1, r0
 8011982:	ab03      	add	r3, sp, #12
 8011984:	4805      	ldr	r0, [pc, #20]	; (801199c <fiprintf+0x20>)
 8011986:	f853 2b04 	ldr.w	r2, [r3], #4
 801198a:	6800      	ldr	r0, [r0, #0]
 801198c:	9301      	str	r3, [sp, #4]
 801198e:	f7ff fe1b 	bl	80115c8 <_vfiprintf_r>
 8011992:	b002      	add	sp, #8
 8011994:	f85d eb04 	ldr.w	lr, [sp], #4
 8011998:	b003      	add	sp, #12
 801199a:	4770      	bx	lr
 801199c:	20000014 	.word	0x20000014

080119a0 <_fstat_r>:
 80119a0:	b538      	push	{r3, r4, r5, lr}
 80119a2:	4d07      	ldr	r5, [pc, #28]	; (80119c0 <_fstat_r+0x20>)
 80119a4:	2300      	movs	r3, #0
 80119a6:	4604      	mov	r4, r0
 80119a8:	4608      	mov	r0, r1
 80119aa:	4611      	mov	r1, r2
 80119ac:	602b      	str	r3, [r5, #0]
 80119ae:	f7f3 ff31 	bl	8005814 <_fstat>
 80119b2:	1c43      	adds	r3, r0, #1
 80119b4:	d102      	bne.n	80119bc <_fstat_r+0x1c>
 80119b6:	682b      	ldr	r3, [r5, #0]
 80119b8:	b103      	cbz	r3, 80119bc <_fstat_r+0x1c>
 80119ba:	6023      	str	r3, [r4, #0]
 80119bc:	bd38      	pop	{r3, r4, r5, pc}
 80119be:	bf00      	nop
 80119c0:	20007470 	.word	0x20007470

080119c4 <_isatty_r>:
 80119c4:	b538      	push	{r3, r4, r5, lr}
 80119c6:	4d06      	ldr	r5, [pc, #24]	; (80119e0 <_isatty_r+0x1c>)
 80119c8:	2300      	movs	r3, #0
 80119ca:	4604      	mov	r4, r0
 80119cc:	4608      	mov	r0, r1
 80119ce:	602b      	str	r3, [r5, #0]
 80119d0:	f7f3 fe8e 	bl	80056f0 <_isatty>
 80119d4:	1c43      	adds	r3, r0, #1
 80119d6:	d102      	bne.n	80119de <_isatty_r+0x1a>
 80119d8:	682b      	ldr	r3, [r5, #0]
 80119da:	b103      	cbz	r3, 80119de <_isatty_r+0x1a>
 80119dc:	6023      	str	r3, [r4, #0]
 80119de:	bd38      	pop	{r3, r4, r5, pc}
 80119e0:	20007470 	.word	0x20007470

080119e4 <_lseek_r>:
 80119e4:	b538      	push	{r3, r4, r5, lr}
 80119e6:	4d07      	ldr	r5, [pc, #28]	; (8011a04 <_lseek_r+0x20>)
 80119e8:	4604      	mov	r4, r0
 80119ea:	4608      	mov	r0, r1
 80119ec:	4611      	mov	r1, r2
 80119ee:	2200      	movs	r2, #0
 80119f0:	602a      	str	r2, [r5, #0]
 80119f2:	461a      	mov	r2, r3
 80119f4:	f7f3 fed5 	bl	80057a2 <_lseek>
 80119f8:	1c43      	adds	r3, r0, #1
 80119fa:	d102      	bne.n	8011a02 <_lseek_r+0x1e>
 80119fc:	682b      	ldr	r3, [r5, #0]
 80119fe:	b103      	cbz	r3, 8011a02 <_lseek_r+0x1e>
 8011a00:	6023      	str	r3, [r4, #0]
 8011a02:	bd38      	pop	{r3, r4, r5, pc}
 8011a04:	20007470 	.word	0x20007470

08011a08 <memmove>:
 8011a08:	4288      	cmp	r0, r1
 8011a0a:	b510      	push	{r4, lr}
 8011a0c:	eb01 0402 	add.w	r4, r1, r2
 8011a10:	d902      	bls.n	8011a18 <memmove+0x10>
 8011a12:	4284      	cmp	r4, r0
 8011a14:	4623      	mov	r3, r4
 8011a16:	d807      	bhi.n	8011a28 <memmove+0x20>
 8011a18:	1e43      	subs	r3, r0, #1
 8011a1a:	42a1      	cmp	r1, r4
 8011a1c:	d008      	beq.n	8011a30 <memmove+0x28>
 8011a1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a26:	e7f8      	b.n	8011a1a <memmove+0x12>
 8011a28:	4402      	add	r2, r0
 8011a2a:	4601      	mov	r1, r0
 8011a2c:	428a      	cmp	r2, r1
 8011a2e:	d100      	bne.n	8011a32 <memmove+0x2a>
 8011a30:	bd10      	pop	{r4, pc}
 8011a32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011a3a:	e7f7      	b.n	8011a2c <memmove+0x24>

08011a3c <_realloc_r>:
 8011a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a3e:	4607      	mov	r7, r0
 8011a40:	4614      	mov	r4, r2
 8011a42:	460e      	mov	r6, r1
 8011a44:	b921      	cbnz	r1, 8011a50 <_realloc_r+0x14>
 8011a46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011a4a:	4611      	mov	r1, r2
 8011a4c:	f7fb bbfe 	b.w	800d24c <_malloc_r>
 8011a50:	b922      	cbnz	r2, 8011a5c <_realloc_r+0x20>
 8011a52:	f7fb fbab 	bl	800d1ac <_free_r>
 8011a56:	4625      	mov	r5, r4
 8011a58:	4628      	mov	r0, r5
 8011a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a5c:	f000 f82d 	bl	8011aba <_malloc_usable_size_r>
 8011a60:	42a0      	cmp	r0, r4
 8011a62:	d20f      	bcs.n	8011a84 <_realloc_r+0x48>
 8011a64:	4621      	mov	r1, r4
 8011a66:	4638      	mov	r0, r7
 8011a68:	f7fb fbf0 	bl	800d24c <_malloc_r>
 8011a6c:	4605      	mov	r5, r0
 8011a6e:	2800      	cmp	r0, #0
 8011a70:	d0f2      	beq.n	8011a58 <_realloc_r+0x1c>
 8011a72:	4631      	mov	r1, r6
 8011a74:	4622      	mov	r2, r4
 8011a76:	f7fb fb73 	bl	800d160 <memcpy>
 8011a7a:	4631      	mov	r1, r6
 8011a7c:	4638      	mov	r0, r7
 8011a7e:	f7fb fb95 	bl	800d1ac <_free_r>
 8011a82:	e7e9      	b.n	8011a58 <_realloc_r+0x1c>
 8011a84:	4635      	mov	r5, r6
 8011a86:	e7e7      	b.n	8011a58 <_realloc_r+0x1c>

08011a88 <_read_r>:
 8011a88:	b538      	push	{r3, r4, r5, lr}
 8011a8a:	4d07      	ldr	r5, [pc, #28]	; (8011aa8 <_read_r+0x20>)
 8011a8c:	4604      	mov	r4, r0
 8011a8e:	4608      	mov	r0, r1
 8011a90:	4611      	mov	r1, r2
 8011a92:	2200      	movs	r2, #0
 8011a94:	602a      	str	r2, [r5, #0]
 8011a96:	461a      	mov	r2, r3
 8011a98:	f7f3 fe94 	bl	80057c4 <_read>
 8011a9c:	1c43      	adds	r3, r0, #1
 8011a9e:	d102      	bne.n	8011aa6 <_read_r+0x1e>
 8011aa0:	682b      	ldr	r3, [r5, #0]
 8011aa2:	b103      	cbz	r3, 8011aa6 <_read_r+0x1e>
 8011aa4:	6023      	str	r3, [r4, #0]
 8011aa6:	bd38      	pop	{r3, r4, r5, pc}
 8011aa8:	20007470 	.word	0x20007470

08011aac <abort>:
 8011aac:	b508      	push	{r3, lr}
 8011aae:	2006      	movs	r0, #6
 8011ab0:	f000 f834 	bl	8011b1c <raise>
 8011ab4:	2001      	movs	r0, #1
 8011ab6:	f002 f805 	bl	8013ac4 <_exit>

08011aba <_malloc_usable_size_r>:
 8011aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011abe:	1f18      	subs	r0, r3, #4
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	bfbc      	itt	lt
 8011ac4:	580b      	ldrlt	r3, [r1, r0]
 8011ac6:	18c0      	addlt	r0, r0, r3
 8011ac8:	4770      	bx	lr

08011aca <_raise_r>:
 8011aca:	291f      	cmp	r1, #31
 8011acc:	b538      	push	{r3, r4, r5, lr}
 8011ace:	4604      	mov	r4, r0
 8011ad0:	460d      	mov	r5, r1
 8011ad2:	d904      	bls.n	8011ade <_raise_r+0x14>
 8011ad4:	2316      	movs	r3, #22
 8011ad6:	6003      	str	r3, [r0, #0]
 8011ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011adc:	bd38      	pop	{r3, r4, r5, pc}
 8011ade:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011ae0:	b112      	cbz	r2, 8011ae8 <_raise_r+0x1e>
 8011ae2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ae6:	b94b      	cbnz	r3, 8011afc <_raise_r+0x32>
 8011ae8:	4620      	mov	r0, r4
 8011aea:	f000 f831 	bl	8011b50 <_getpid_r>
 8011aee:	462a      	mov	r2, r5
 8011af0:	4601      	mov	r1, r0
 8011af2:	4620      	mov	r0, r4
 8011af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011af8:	f000 b818 	b.w	8011b2c <_kill_r>
 8011afc:	2b01      	cmp	r3, #1
 8011afe:	d00a      	beq.n	8011b16 <_raise_r+0x4c>
 8011b00:	1c59      	adds	r1, r3, #1
 8011b02:	d103      	bne.n	8011b0c <_raise_r+0x42>
 8011b04:	2316      	movs	r3, #22
 8011b06:	6003      	str	r3, [r0, #0]
 8011b08:	2001      	movs	r0, #1
 8011b0a:	e7e7      	b.n	8011adc <_raise_r+0x12>
 8011b0c:	2400      	movs	r4, #0
 8011b0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011b12:	4628      	mov	r0, r5
 8011b14:	4798      	blx	r3
 8011b16:	2000      	movs	r0, #0
 8011b18:	e7e0      	b.n	8011adc <_raise_r+0x12>
	...

08011b1c <raise>:
 8011b1c:	4b02      	ldr	r3, [pc, #8]	; (8011b28 <raise+0xc>)
 8011b1e:	4601      	mov	r1, r0
 8011b20:	6818      	ldr	r0, [r3, #0]
 8011b22:	f7ff bfd2 	b.w	8011aca <_raise_r>
 8011b26:	bf00      	nop
 8011b28:	20000014 	.word	0x20000014

08011b2c <_kill_r>:
 8011b2c:	b538      	push	{r3, r4, r5, lr}
 8011b2e:	4d07      	ldr	r5, [pc, #28]	; (8011b4c <_kill_r+0x20>)
 8011b30:	2300      	movs	r3, #0
 8011b32:	4604      	mov	r4, r0
 8011b34:	4608      	mov	r0, r1
 8011b36:	4611      	mov	r1, r2
 8011b38:	602b      	str	r3, [r5, #0]
 8011b3a:	f001 ffbb 	bl	8013ab4 <_kill>
 8011b3e:	1c43      	adds	r3, r0, #1
 8011b40:	d102      	bne.n	8011b48 <_kill_r+0x1c>
 8011b42:	682b      	ldr	r3, [r5, #0]
 8011b44:	b103      	cbz	r3, 8011b48 <_kill_r+0x1c>
 8011b46:	6023      	str	r3, [r4, #0]
 8011b48:	bd38      	pop	{r3, r4, r5, pc}
 8011b4a:	bf00      	nop
 8011b4c:	20007470 	.word	0x20007470

08011b50 <_getpid_r>:
 8011b50:	f001 bfa8 	b.w	8013aa4 <_getpid>
 8011b54:	0000      	movs	r0, r0
	...

08011b58 <cos>:
 8011b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b5a:	ec53 2b10 	vmov	r2, r3, d0
 8011b5e:	4824      	ldr	r0, [pc, #144]	; (8011bf0 <cos+0x98>)
 8011b60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011b64:	4281      	cmp	r1, r0
 8011b66:	dc06      	bgt.n	8011b76 <cos+0x1e>
 8011b68:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8011be8 <cos+0x90>
 8011b6c:	f001 f92c 	bl	8012dc8 <__kernel_cos>
 8011b70:	ec51 0b10 	vmov	r0, r1, d0
 8011b74:	e007      	b.n	8011b86 <cos+0x2e>
 8011b76:	481f      	ldr	r0, [pc, #124]	; (8011bf4 <cos+0x9c>)
 8011b78:	4281      	cmp	r1, r0
 8011b7a:	dd09      	ble.n	8011b90 <cos+0x38>
 8011b7c:	ee10 0a10 	vmov	r0, s0
 8011b80:	4619      	mov	r1, r3
 8011b82:	f7ee fba1 	bl	80002c8 <__aeabi_dsub>
 8011b86:	ec41 0b10 	vmov	d0, r0, r1
 8011b8a:	b005      	add	sp, #20
 8011b8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b90:	4668      	mov	r0, sp
 8011b92:	f000 fe59 	bl	8012848 <__ieee754_rem_pio2>
 8011b96:	f000 0003 	and.w	r0, r0, #3
 8011b9a:	2801      	cmp	r0, #1
 8011b9c:	d007      	beq.n	8011bae <cos+0x56>
 8011b9e:	2802      	cmp	r0, #2
 8011ba0:	d012      	beq.n	8011bc8 <cos+0x70>
 8011ba2:	b9c0      	cbnz	r0, 8011bd6 <cos+0x7e>
 8011ba4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011ba8:	ed9d 0b00 	vldr	d0, [sp]
 8011bac:	e7de      	b.n	8011b6c <cos+0x14>
 8011bae:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bb2:	ed9d 0b00 	vldr	d0, [sp]
 8011bb6:	f001 fd0f 	bl	80135d8 <__kernel_sin>
 8011bba:	ec53 2b10 	vmov	r2, r3, d0
 8011bbe:	ee10 0a10 	vmov	r0, s0
 8011bc2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011bc6:	e7de      	b.n	8011b86 <cos+0x2e>
 8011bc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bcc:	ed9d 0b00 	vldr	d0, [sp]
 8011bd0:	f001 f8fa 	bl	8012dc8 <__kernel_cos>
 8011bd4:	e7f1      	b.n	8011bba <cos+0x62>
 8011bd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bda:	ed9d 0b00 	vldr	d0, [sp]
 8011bde:	2001      	movs	r0, #1
 8011be0:	f001 fcfa 	bl	80135d8 <__kernel_sin>
 8011be4:	e7c4      	b.n	8011b70 <cos+0x18>
 8011be6:	bf00      	nop
	...
 8011bf0:	3fe921fb 	.word	0x3fe921fb
 8011bf4:	7fefffff 	.word	0x7fefffff

08011bf8 <sin>:
 8011bf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bfa:	ec53 2b10 	vmov	r2, r3, d0
 8011bfe:	4826      	ldr	r0, [pc, #152]	; (8011c98 <sin+0xa0>)
 8011c00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011c04:	4281      	cmp	r1, r0
 8011c06:	dc07      	bgt.n	8011c18 <sin+0x20>
 8011c08:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8011c90 <sin+0x98>
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	f001 fce3 	bl	80135d8 <__kernel_sin>
 8011c12:	ec51 0b10 	vmov	r0, r1, d0
 8011c16:	e007      	b.n	8011c28 <sin+0x30>
 8011c18:	4820      	ldr	r0, [pc, #128]	; (8011c9c <sin+0xa4>)
 8011c1a:	4281      	cmp	r1, r0
 8011c1c:	dd09      	ble.n	8011c32 <sin+0x3a>
 8011c1e:	ee10 0a10 	vmov	r0, s0
 8011c22:	4619      	mov	r1, r3
 8011c24:	f7ee fb50 	bl	80002c8 <__aeabi_dsub>
 8011c28:	ec41 0b10 	vmov	d0, r0, r1
 8011c2c:	b005      	add	sp, #20
 8011c2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c32:	4668      	mov	r0, sp
 8011c34:	f000 fe08 	bl	8012848 <__ieee754_rem_pio2>
 8011c38:	f000 0003 	and.w	r0, r0, #3
 8011c3c:	2801      	cmp	r0, #1
 8011c3e:	d008      	beq.n	8011c52 <sin+0x5a>
 8011c40:	2802      	cmp	r0, #2
 8011c42:	d00d      	beq.n	8011c60 <sin+0x68>
 8011c44:	b9d0      	cbnz	r0, 8011c7c <sin+0x84>
 8011c46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c4a:	ed9d 0b00 	vldr	d0, [sp]
 8011c4e:	2001      	movs	r0, #1
 8011c50:	e7dd      	b.n	8011c0e <sin+0x16>
 8011c52:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c56:	ed9d 0b00 	vldr	d0, [sp]
 8011c5a:	f001 f8b5 	bl	8012dc8 <__kernel_cos>
 8011c5e:	e7d8      	b.n	8011c12 <sin+0x1a>
 8011c60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c64:	ed9d 0b00 	vldr	d0, [sp]
 8011c68:	2001      	movs	r0, #1
 8011c6a:	f001 fcb5 	bl	80135d8 <__kernel_sin>
 8011c6e:	ec53 2b10 	vmov	r2, r3, d0
 8011c72:	ee10 0a10 	vmov	r0, s0
 8011c76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011c7a:	e7d5      	b.n	8011c28 <sin+0x30>
 8011c7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c80:	ed9d 0b00 	vldr	d0, [sp]
 8011c84:	f001 f8a0 	bl	8012dc8 <__kernel_cos>
 8011c88:	e7f1      	b.n	8011c6e <sin+0x76>
 8011c8a:	bf00      	nop
 8011c8c:	f3af 8000 	nop.w
	...
 8011c98:	3fe921fb 	.word	0x3fe921fb
 8011c9c:	7fefffff 	.word	0x7fefffff

08011ca0 <pow>:
 8011ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ca4:	ec59 8b10 	vmov	r8, r9, d0
 8011ca8:	ec57 6b11 	vmov	r6, r7, d1
 8011cac:	f000 f8a8 	bl	8011e00 <__ieee754_pow>
 8011cb0:	4b4e      	ldr	r3, [pc, #312]	; (8011dec <pow+0x14c>)
 8011cb2:	f993 3000 	ldrsb.w	r3, [r3]
 8011cb6:	3301      	adds	r3, #1
 8011cb8:	ec55 4b10 	vmov	r4, r5, d0
 8011cbc:	d015      	beq.n	8011cea <pow+0x4a>
 8011cbe:	4632      	mov	r2, r6
 8011cc0:	463b      	mov	r3, r7
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	4639      	mov	r1, r7
 8011cc6:	f7ee ff51 	bl	8000b6c <__aeabi_dcmpun>
 8011cca:	b970      	cbnz	r0, 8011cea <pow+0x4a>
 8011ccc:	4642      	mov	r2, r8
 8011cce:	464b      	mov	r3, r9
 8011cd0:	4640      	mov	r0, r8
 8011cd2:	4649      	mov	r1, r9
 8011cd4:	f7ee ff4a 	bl	8000b6c <__aeabi_dcmpun>
 8011cd8:	2200      	movs	r2, #0
 8011cda:	2300      	movs	r3, #0
 8011cdc:	b148      	cbz	r0, 8011cf2 <pow+0x52>
 8011cde:	4630      	mov	r0, r6
 8011ce0:	4639      	mov	r1, r7
 8011ce2:	f7ee ff11 	bl	8000b08 <__aeabi_dcmpeq>
 8011ce6:	2800      	cmp	r0, #0
 8011ce8:	d17d      	bne.n	8011de6 <pow+0x146>
 8011cea:	ec45 4b10 	vmov	d0, r4, r5
 8011cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cf2:	4640      	mov	r0, r8
 8011cf4:	4649      	mov	r1, r9
 8011cf6:	f7ee ff07 	bl	8000b08 <__aeabi_dcmpeq>
 8011cfa:	b1e0      	cbz	r0, 8011d36 <pow+0x96>
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	2300      	movs	r3, #0
 8011d00:	4630      	mov	r0, r6
 8011d02:	4639      	mov	r1, r7
 8011d04:	f7ee ff00 	bl	8000b08 <__aeabi_dcmpeq>
 8011d08:	2800      	cmp	r0, #0
 8011d0a:	d16c      	bne.n	8011de6 <pow+0x146>
 8011d0c:	ec47 6b10 	vmov	d0, r6, r7
 8011d10:	f001 fd29 	bl	8013766 <finite>
 8011d14:	2800      	cmp	r0, #0
 8011d16:	d0e8      	beq.n	8011cea <pow+0x4a>
 8011d18:	2200      	movs	r2, #0
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	4630      	mov	r0, r6
 8011d1e:	4639      	mov	r1, r7
 8011d20:	f7ee fefc 	bl	8000b1c <__aeabi_dcmplt>
 8011d24:	2800      	cmp	r0, #0
 8011d26:	d0e0      	beq.n	8011cea <pow+0x4a>
 8011d28:	f7fb f9e8 	bl	800d0fc <__errno>
 8011d2c:	2321      	movs	r3, #33	; 0x21
 8011d2e:	6003      	str	r3, [r0, #0]
 8011d30:	2400      	movs	r4, #0
 8011d32:	4d2f      	ldr	r5, [pc, #188]	; (8011df0 <pow+0x150>)
 8011d34:	e7d9      	b.n	8011cea <pow+0x4a>
 8011d36:	ec45 4b10 	vmov	d0, r4, r5
 8011d3a:	f001 fd14 	bl	8013766 <finite>
 8011d3e:	bbb8      	cbnz	r0, 8011db0 <pow+0x110>
 8011d40:	ec49 8b10 	vmov	d0, r8, r9
 8011d44:	f001 fd0f 	bl	8013766 <finite>
 8011d48:	b390      	cbz	r0, 8011db0 <pow+0x110>
 8011d4a:	ec47 6b10 	vmov	d0, r6, r7
 8011d4e:	f001 fd0a 	bl	8013766 <finite>
 8011d52:	b368      	cbz	r0, 8011db0 <pow+0x110>
 8011d54:	4622      	mov	r2, r4
 8011d56:	462b      	mov	r3, r5
 8011d58:	4620      	mov	r0, r4
 8011d5a:	4629      	mov	r1, r5
 8011d5c:	f7ee ff06 	bl	8000b6c <__aeabi_dcmpun>
 8011d60:	b160      	cbz	r0, 8011d7c <pow+0xdc>
 8011d62:	f7fb f9cb 	bl	800d0fc <__errno>
 8011d66:	2321      	movs	r3, #33	; 0x21
 8011d68:	6003      	str	r3, [r0, #0]
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	4610      	mov	r0, r2
 8011d70:	4619      	mov	r1, r3
 8011d72:	f7ee fd8b 	bl	800088c <__aeabi_ddiv>
 8011d76:	4604      	mov	r4, r0
 8011d78:	460d      	mov	r5, r1
 8011d7a:	e7b6      	b.n	8011cea <pow+0x4a>
 8011d7c:	f7fb f9be 	bl	800d0fc <__errno>
 8011d80:	2322      	movs	r3, #34	; 0x22
 8011d82:	6003      	str	r3, [r0, #0]
 8011d84:	2200      	movs	r2, #0
 8011d86:	2300      	movs	r3, #0
 8011d88:	4640      	mov	r0, r8
 8011d8a:	4649      	mov	r1, r9
 8011d8c:	f7ee fec6 	bl	8000b1c <__aeabi_dcmplt>
 8011d90:	2400      	movs	r4, #0
 8011d92:	b158      	cbz	r0, 8011dac <pow+0x10c>
 8011d94:	ec47 6b10 	vmov	d0, r6, r7
 8011d98:	f001 fd72 	bl	8013880 <rint>
 8011d9c:	4632      	mov	r2, r6
 8011d9e:	ec51 0b10 	vmov	r0, r1, d0
 8011da2:	463b      	mov	r3, r7
 8011da4:	f7ee feb0 	bl	8000b08 <__aeabi_dcmpeq>
 8011da8:	2800      	cmp	r0, #0
 8011daa:	d0c2      	beq.n	8011d32 <pow+0x92>
 8011dac:	4d11      	ldr	r5, [pc, #68]	; (8011df4 <pow+0x154>)
 8011dae:	e79c      	b.n	8011cea <pow+0x4a>
 8011db0:	2200      	movs	r2, #0
 8011db2:	2300      	movs	r3, #0
 8011db4:	4620      	mov	r0, r4
 8011db6:	4629      	mov	r1, r5
 8011db8:	f7ee fea6 	bl	8000b08 <__aeabi_dcmpeq>
 8011dbc:	2800      	cmp	r0, #0
 8011dbe:	d094      	beq.n	8011cea <pow+0x4a>
 8011dc0:	ec49 8b10 	vmov	d0, r8, r9
 8011dc4:	f001 fccf 	bl	8013766 <finite>
 8011dc8:	2800      	cmp	r0, #0
 8011dca:	d08e      	beq.n	8011cea <pow+0x4a>
 8011dcc:	ec47 6b10 	vmov	d0, r6, r7
 8011dd0:	f001 fcc9 	bl	8013766 <finite>
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	d088      	beq.n	8011cea <pow+0x4a>
 8011dd8:	f7fb f990 	bl	800d0fc <__errno>
 8011ddc:	2322      	movs	r3, #34	; 0x22
 8011dde:	6003      	str	r3, [r0, #0]
 8011de0:	2400      	movs	r4, #0
 8011de2:	2500      	movs	r5, #0
 8011de4:	e781      	b.n	8011cea <pow+0x4a>
 8011de6:	4d04      	ldr	r5, [pc, #16]	; (8011df8 <pow+0x158>)
 8011de8:	2400      	movs	r4, #0
 8011dea:	e77e      	b.n	8011cea <pow+0x4a>
 8011dec:	200001e8 	.word	0x200001e8
 8011df0:	fff00000 	.word	0xfff00000
 8011df4:	7ff00000 	.word	0x7ff00000
 8011df8:	3ff00000 	.word	0x3ff00000
 8011dfc:	00000000 	.word	0x00000000

08011e00 <__ieee754_pow>:
 8011e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e04:	ed2d 8b06 	vpush	{d8-d10}
 8011e08:	b08d      	sub	sp, #52	; 0x34
 8011e0a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8011e0e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8011e12:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8011e16:	ea56 0100 	orrs.w	r1, r6, r0
 8011e1a:	ec53 2b10 	vmov	r2, r3, d0
 8011e1e:	f000 84d1 	beq.w	80127c4 <__ieee754_pow+0x9c4>
 8011e22:	497f      	ldr	r1, [pc, #508]	; (8012020 <__ieee754_pow+0x220>)
 8011e24:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011e28:	428c      	cmp	r4, r1
 8011e2a:	ee10 8a10 	vmov	r8, s0
 8011e2e:	4699      	mov	r9, r3
 8011e30:	dc09      	bgt.n	8011e46 <__ieee754_pow+0x46>
 8011e32:	d103      	bne.n	8011e3c <__ieee754_pow+0x3c>
 8011e34:	b97a      	cbnz	r2, 8011e56 <__ieee754_pow+0x56>
 8011e36:	42a6      	cmp	r6, r4
 8011e38:	dd02      	ble.n	8011e40 <__ieee754_pow+0x40>
 8011e3a:	e00c      	b.n	8011e56 <__ieee754_pow+0x56>
 8011e3c:	428e      	cmp	r6, r1
 8011e3e:	dc02      	bgt.n	8011e46 <__ieee754_pow+0x46>
 8011e40:	428e      	cmp	r6, r1
 8011e42:	d110      	bne.n	8011e66 <__ieee754_pow+0x66>
 8011e44:	b178      	cbz	r0, 8011e66 <__ieee754_pow+0x66>
 8011e46:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011e4a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011e4e:	ea54 0308 	orrs.w	r3, r4, r8
 8011e52:	f000 84b7 	beq.w	80127c4 <__ieee754_pow+0x9c4>
 8011e56:	4873      	ldr	r0, [pc, #460]	; (8012024 <__ieee754_pow+0x224>)
 8011e58:	b00d      	add	sp, #52	; 0x34
 8011e5a:	ecbd 8b06 	vpop	{d8-d10}
 8011e5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e62:	f7ff bce1 	b.w	8011828 <nan>
 8011e66:	f1b9 0f00 	cmp.w	r9, #0
 8011e6a:	da36      	bge.n	8011eda <__ieee754_pow+0xda>
 8011e6c:	496e      	ldr	r1, [pc, #440]	; (8012028 <__ieee754_pow+0x228>)
 8011e6e:	428e      	cmp	r6, r1
 8011e70:	dc51      	bgt.n	8011f16 <__ieee754_pow+0x116>
 8011e72:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8011e76:	428e      	cmp	r6, r1
 8011e78:	f340 84af 	ble.w	80127da <__ieee754_pow+0x9da>
 8011e7c:	1531      	asrs	r1, r6, #20
 8011e7e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011e82:	2914      	cmp	r1, #20
 8011e84:	dd0f      	ble.n	8011ea6 <__ieee754_pow+0xa6>
 8011e86:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8011e8a:	fa20 fc01 	lsr.w	ip, r0, r1
 8011e8e:	fa0c f101 	lsl.w	r1, ip, r1
 8011e92:	4281      	cmp	r1, r0
 8011e94:	f040 84a1 	bne.w	80127da <__ieee754_pow+0x9da>
 8011e98:	f00c 0c01 	and.w	ip, ip, #1
 8011e9c:	f1cc 0102 	rsb	r1, ip, #2
 8011ea0:	9100      	str	r1, [sp, #0]
 8011ea2:	b180      	cbz	r0, 8011ec6 <__ieee754_pow+0xc6>
 8011ea4:	e059      	b.n	8011f5a <__ieee754_pow+0x15a>
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	d155      	bne.n	8011f56 <__ieee754_pow+0x156>
 8011eaa:	f1c1 0114 	rsb	r1, r1, #20
 8011eae:	fa46 fc01 	asr.w	ip, r6, r1
 8011eb2:	fa0c f101 	lsl.w	r1, ip, r1
 8011eb6:	42b1      	cmp	r1, r6
 8011eb8:	f040 848c 	bne.w	80127d4 <__ieee754_pow+0x9d4>
 8011ebc:	f00c 0c01 	and.w	ip, ip, #1
 8011ec0:	f1cc 0102 	rsb	r1, ip, #2
 8011ec4:	9100      	str	r1, [sp, #0]
 8011ec6:	4959      	ldr	r1, [pc, #356]	; (801202c <__ieee754_pow+0x22c>)
 8011ec8:	428e      	cmp	r6, r1
 8011eca:	d12d      	bne.n	8011f28 <__ieee754_pow+0x128>
 8011ecc:	2f00      	cmp	r7, #0
 8011ece:	da79      	bge.n	8011fc4 <__ieee754_pow+0x1c4>
 8011ed0:	4956      	ldr	r1, [pc, #344]	; (801202c <__ieee754_pow+0x22c>)
 8011ed2:	2000      	movs	r0, #0
 8011ed4:	f7ee fcda 	bl	800088c <__aeabi_ddiv>
 8011ed8:	e016      	b.n	8011f08 <__ieee754_pow+0x108>
 8011eda:	2100      	movs	r1, #0
 8011edc:	9100      	str	r1, [sp, #0]
 8011ede:	2800      	cmp	r0, #0
 8011ee0:	d13b      	bne.n	8011f5a <__ieee754_pow+0x15a>
 8011ee2:	494f      	ldr	r1, [pc, #316]	; (8012020 <__ieee754_pow+0x220>)
 8011ee4:	428e      	cmp	r6, r1
 8011ee6:	d1ee      	bne.n	8011ec6 <__ieee754_pow+0xc6>
 8011ee8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011eec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011ef0:	ea53 0308 	orrs.w	r3, r3, r8
 8011ef4:	f000 8466 	beq.w	80127c4 <__ieee754_pow+0x9c4>
 8011ef8:	4b4d      	ldr	r3, [pc, #308]	; (8012030 <__ieee754_pow+0x230>)
 8011efa:	429c      	cmp	r4, r3
 8011efc:	dd0d      	ble.n	8011f1a <__ieee754_pow+0x11a>
 8011efe:	2f00      	cmp	r7, #0
 8011f00:	f280 8464 	bge.w	80127cc <__ieee754_pow+0x9cc>
 8011f04:	2000      	movs	r0, #0
 8011f06:	2100      	movs	r1, #0
 8011f08:	ec41 0b10 	vmov	d0, r0, r1
 8011f0c:	b00d      	add	sp, #52	; 0x34
 8011f0e:	ecbd 8b06 	vpop	{d8-d10}
 8011f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f16:	2102      	movs	r1, #2
 8011f18:	e7e0      	b.n	8011edc <__ieee754_pow+0xdc>
 8011f1a:	2f00      	cmp	r7, #0
 8011f1c:	daf2      	bge.n	8011f04 <__ieee754_pow+0x104>
 8011f1e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8011f22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011f26:	e7ef      	b.n	8011f08 <__ieee754_pow+0x108>
 8011f28:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8011f2c:	d104      	bne.n	8011f38 <__ieee754_pow+0x138>
 8011f2e:	4610      	mov	r0, r2
 8011f30:	4619      	mov	r1, r3
 8011f32:	f7ee fb81 	bl	8000638 <__aeabi_dmul>
 8011f36:	e7e7      	b.n	8011f08 <__ieee754_pow+0x108>
 8011f38:	493e      	ldr	r1, [pc, #248]	; (8012034 <__ieee754_pow+0x234>)
 8011f3a:	428f      	cmp	r7, r1
 8011f3c:	d10d      	bne.n	8011f5a <__ieee754_pow+0x15a>
 8011f3e:	f1b9 0f00 	cmp.w	r9, #0
 8011f42:	db0a      	blt.n	8011f5a <__ieee754_pow+0x15a>
 8011f44:	ec43 2b10 	vmov	d0, r2, r3
 8011f48:	b00d      	add	sp, #52	; 0x34
 8011f4a:	ecbd 8b06 	vpop	{d8-d10}
 8011f4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f52:	f000 be83 	b.w	8012c5c <__ieee754_sqrt>
 8011f56:	2100      	movs	r1, #0
 8011f58:	9100      	str	r1, [sp, #0]
 8011f5a:	ec43 2b10 	vmov	d0, r2, r3
 8011f5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011f62:	f001 fbf7 	bl	8013754 <fabs>
 8011f66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f6a:	ec51 0b10 	vmov	r0, r1, d0
 8011f6e:	f1b8 0f00 	cmp.w	r8, #0
 8011f72:	d12a      	bne.n	8011fca <__ieee754_pow+0x1ca>
 8011f74:	b12c      	cbz	r4, 8011f82 <__ieee754_pow+0x182>
 8011f76:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801202c <__ieee754_pow+0x22c>
 8011f7a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8011f7e:	45e6      	cmp	lr, ip
 8011f80:	d123      	bne.n	8011fca <__ieee754_pow+0x1ca>
 8011f82:	2f00      	cmp	r7, #0
 8011f84:	da05      	bge.n	8011f92 <__ieee754_pow+0x192>
 8011f86:	4602      	mov	r2, r0
 8011f88:	460b      	mov	r3, r1
 8011f8a:	2000      	movs	r0, #0
 8011f8c:	4927      	ldr	r1, [pc, #156]	; (801202c <__ieee754_pow+0x22c>)
 8011f8e:	f7ee fc7d 	bl	800088c <__aeabi_ddiv>
 8011f92:	f1b9 0f00 	cmp.w	r9, #0
 8011f96:	dab7      	bge.n	8011f08 <__ieee754_pow+0x108>
 8011f98:	9b00      	ldr	r3, [sp, #0]
 8011f9a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011f9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011fa2:	4323      	orrs	r3, r4
 8011fa4:	d108      	bne.n	8011fb8 <__ieee754_pow+0x1b8>
 8011fa6:	4602      	mov	r2, r0
 8011fa8:	460b      	mov	r3, r1
 8011faa:	4610      	mov	r0, r2
 8011fac:	4619      	mov	r1, r3
 8011fae:	f7ee f98b 	bl	80002c8 <__aeabi_dsub>
 8011fb2:	4602      	mov	r2, r0
 8011fb4:	460b      	mov	r3, r1
 8011fb6:	e78d      	b.n	8011ed4 <__ieee754_pow+0xd4>
 8011fb8:	9b00      	ldr	r3, [sp, #0]
 8011fba:	2b01      	cmp	r3, #1
 8011fbc:	d1a4      	bne.n	8011f08 <__ieee754_pow+0x108>
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011fc4:	4610      	mov	r0, r2
 8011fc6:	4619      	mov	r1, r3
 8011fc8:	e79e      	b.n	8011f08 <__ieee754_pow+0x108>
 8011fca:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8011fce:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8011fd2:	950a      	str	r5, [sp, #40]	; 0x28
 8011fd4:	9d00      	ldr	r5, [sp, #0]
 8011fd6:	46ac      	mov	ip, r5
 8011fd8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011fda:	ea5c 0505 	orrs.w	r5, ip, r5
 8011fde:	d0e4      	beq.n	8011faa <__ieee754_pow+0x1aa>
 8011fe0:	4b15      	ldr	r3, [pc, #84]	; (8012038 <__ieee754_pow+0x238>)
 8011fe2:	429e      	cmp	r6, r3
 8011fe4:	f340 80fc 	ble.w	80121e0 <__ieee754_pow+0x3e0>
 8011fe8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011fec:	429e      	cmp	r6, r3
 8011fee:	4b10      	ldr	r3, [pc, #64]	; (8012030 <__ieee754_pow+0x230>)
 8011ff0:	dd07      	ble.n	8012002 <__ieee754_pow+0x202>
 8011ff2:	429c      	cmp	r4, r3
 8011ff4:	dc0a      	bgt.n	801200c <__ieee754_pow+0x20c>
 8011ff6:	2f00      	cmp	r7, #0
 8011ff8:	da84      	bge.n	8011f04 <__ieee754_pow+0x104>
 8011ffa:	a307      	add	r3, pc, #28	; (adr r3, 8012018 <__ieee754_pow+0x218>)
 8011ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012000:	e795      	b.n	8011f2e <__ieee754_pow+0x12e>
 8012002:	429c      	cmp	r4, r3
 8012004:	dbf7      	blt.n	8011ff6 <__ieee754_pow+0x1f6>
 8012006:	4b09      	ldr	r3, [pc, #36]	; (801202c <__ieee754_pow+0x22c>)
 8012008:	429c      	cmp	r4, r3
 801200a:	dd17      	ble.n	801203c <__ieee754_pow+0x23c>
 801200c:	2f00      	cmp	r7, #0
 801200e:	dcf4      	bgt.n	8011ffa <__ieee754_pow+0x1fa>
 8012010:	e778      	b.n	8011f04 <__ieee754_pow+0x104>
 8012012:	bf00      	nop
 8012014:	f3af 8000 	nop.w
 8012018:	8800759c 	.word	0x8800759c
 801201c:	7e37e43c 	.word	0x7e37e43c
 8012020:	7ff00000 	.word	0x7ff00000
 8012024:	08014128 	.word	0x08014128
 8012028:	433fffff 	.word	0x433fffff
 801202c:	3ff00000 	.word	0x3ff00000
 8012030:	3fefffff 	.word	0x3fefffff
 8012034:	3fe00000 	.word	0x3fe00000
 8012038:	41e00000 	.word	0x41e00000
 801203c:	4b64      	ldr	r3, [pc, #400]	; (80121d0 <__ieee754_pow+0x3d0>)
 801203e:	2200      	movs	r2, #0
 8012040:	f7ee f942 	bl	80002c8 <__aeabi_dsub>
 8012044:	a356      	add	r3, pc, #344	; (adr r3, 80121a0 <__ieee754_pow+0x3a0>)
 8012046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801204a:	4604      	mov	r4, r0
 801204c:	460d      	mov	r5, r1
 801204e:	f7ee faf3 	bl	8000638 <__aeabi_dmul>
 8012052:	a355      	add	r3, pc, #340	; (adr r3, 80121a8 <__ieee754_pow+0x3a8>)
 8012054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012058:	4606      	mov	r6, r0
 801205a:	460f      	mov	r7, r1
 801205c:	4620      	mov	r0, r4
 801205e:	4629      	mov	r1, r5
 8012060:	f7ee faea 	bl	8000638 <__aeabi_dmul>
 8012064:	4b5b      	ldr	r3, [pc, #364]	; (80121d4 <__ieee754_pow+0x3d4>)
 8012066:	4682      	mov	sl, r0
 8012068:	468b      	mov	fp, r1
 801206a:	2200      	movs	r2, #0
 801206c:	4620      	mov	r0, r4
 801206e:	4629      	mov	r1, r5
 8012070:	f7ee fae2 	bl	8000638 <__aeabi_dmul>
 8012074:	4602      	mov	r2, r0
 8012076:	460b      	mov	r3, r1
 8012078:	a14d      	add	r1, pc, #308	; (adr r1, 80121b0 <__ieee754_pow+0x3b0>)
 801207a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801207e:	f7ee f923 	bl	80002c8 <__aeabi_dsub>
 8012082:	4622      	mov	r2, r4
 8012084:	462b      	mov	r3, r5
 8012086:	f7ee fad7 	bl	8000638 <__aeabi_dmul>
 801208a:	4602      	mov	r2, r0
 801208c:	460b      	mov	r3, r1
 801208e:	2000      	movs	r0, #0
 8012090:	4951      	ldr	r1, [pc, #324]	; (80121d8 <__ieee754_pow+0x3d8>)
 8012092:	f7ee f919 	bl	80002c8 <__aeabi_dsub>
 8012096:	4622      	mov	r2, r4
 8012098:	4680      	mov	r8, r0
 801209a:	4689      	mov	r9, r1
 801209c:	462b      	mov	r3, r5
 801209e:	4620      	mov	r0, r4
 80120a0:	4629      	mov	r1, r5
 80120a2:	f7ee fac9 	bl	8000638 <__aeabi_dmul>
 80120a6:	4602      	mov	r2, r0
 80120a8:	460b      	mov	r3, r1
 80120aa:	4640      	mov	r0, r8
 80120ac:	4649      	mov	r1, r9
 80120ae:	f7ee fac3 	bl	8000638 <__aeabi_dmul>
 80120b2:	a341      	add	r3, pc, #260	; (adr r3, 80121b8 <__ieee754_pow+0x3b8>)
 80120b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b8:	f7ee fabe 	bl	8000638 <__aeabi_dmul>
 80120bc:	4602      	mov	r2, r0
 80120be:	460b      	mov	r3, r1
 80120c0:	4650      	mov	r0, sl
 80120c2:	4659      	mov	r1, fp
 80120c4:	f7ee f900 	bl	80002c8 <__aeabi_dsub>
 80120c8:	4602      	mov	r2, r0
 80120ca:	460b      	mov	r3, r1
 80120cc:	4680      	mov	r8, r0
 80120ce:	4689      	mov	r9, r1
 80120d0:	4630      	mov	r0, r6
 80120d2:	4639      	mov	r1, r7
 80120d4:	f7ee f8fa 	bl	80002cc <__adddf3>
 80120d8:	2400      	movs	r4, #0
 80120da:	4632      	mov	r2, r6
 80120dc:	463b      	mov	r3, r7
 80120de:	4620      	mov	r0, r4
 80120e0:	460d      	mov	r5, r1
 80120e2:	f7ee f8f1 	bl	80002c8 <__aeabi_dsub>
 80120e6:	4602      	mov	r2, r0
 80120e8:	460b      	mov	r3, r1
 80120ea:	4640      	mov	r0, r8
 80120ec:	4649      	mov	r1, r9
 80120ee:	f7ee f8eb 	bl	80002c8 <__aeabi_dsub>
 80120f2:	9b00      	ldr	r3, [sp, #0]
 80120f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120f6:	3b01      	subs	r3, #1
 80120f8:	4313      	orrs	r3, r2
 80120fa:	4682      	mov	sl, r0
 80120fc:	468b      	mov	fp, r1
 80120fe:	f040 81f1 	bne.w	80124e4 <__ieee754_pow+0x6e4>
 8012102:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80121c0 <__ieee754_pow+0x3c0>
 8012106:	eeb0 8a47 	vmov.f32	s16, s14
 801210a:	eef0 8a67 	vmov.f32	s17, s15
 801210e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012112:	2600      	movs	r6, #0
 8012114:	4632      	mov	r2, r6
 8012116:	463b      	mov	r3, r7
 8012118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801211c:	f7ee f8d4 	bl	80002c8 <__aeabi_dsub>
 8012120:	4622      	mov	r2, r4
 8012122:	462b      	mov	r3, r5
 8012124:	f7ee fa88 	bl	8000638 <__aeabi_dmul>
 8012128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801212c:	4680      	mov	r8, r0
 801212e:	4689      	mov	r9, r1
 8012130:	4650      	mov	r0, sl
 8012132:	4659      	mov	r1, fp
 8012134:	f7ee fa80 	bl	8000638 <__aeabi_dmul>
 8012138:	4602      	mov	r2, r0
 801213a:	460b      	mov	r3, r1
 801213c:	4640      	mov	r0, r8
 801213e:	4649      	mov	r1, r9
 8012140:	f7ee f8c4 	bl	80002cc <__adddf3>
 8012144:	4632      	mov	r2, r6
 8012146:	463b      	mov	r3, r7
 8012148:	4680      	mov	r8, r0
 801214a:	4689      	mov	r9, r1
 801214c:	4620      	mov	r0, r4
 801214e:	4629      	mov	r1, r5
 8012150:	f7ee fa72 	bl	8000638 <__aeabi_dmul>
 8012154:	460b      	mov	r3, r1
 8012156:	4604      	mov	r4, r0
 8012158:	460d      	mov	r5, r1
 801215a:	4602      	mov	r2, r0
 801215c:	4649      	mov	r1, r9
 801215e:	4640      	mov	r0, r8
 8012160:	f7ee f8b4 	bl	80002cc <__adddf3>
 8012164:	4b1d      	ldr	r3, [pc, #116]	; (80121dc <__ieee754_pow+0x3dc>)
 8012166:	4299      	cmp	r1, r3
 8012168:	ec45 4b19 	vmov	d9, r4, r5
 801216c:	4606      	mov	r6, r0
 801216e:	460f      	mov	r7, r1
 8012170:	468b      	mov	fp, r1
 8012172:	f340 82fe 	ble.w	8012772 <__ieee754_pow+0x972>
 8012176:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801217a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801217e:	4303      	orrs	r3, r0
 8012180:	f000 81f0 	beq.w	8012564 <__ieee754_pow+0x764>
 8012184:	a310      	add	r3, pc, #64	; (adr r3, 80121c8 <__ieee754_pow+0x3c8>)
 8012186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801218a:	ec51 0b18 	vmov	r0, r1, d8
 801218e:	f7ee fa53 	bl	8000638 <__aeabi_dmul>
 8012192:	a30d      	add	r3, pc, #52	; (adr r3, 80121c8 <__ieee754_pow+0x3c8>)
 8012194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012198:	e6cb      	b.n	8011f32 <__ieee754_pow+0x132>
 801219a:	bf00      	nop
 801219c:	f3af 8000 	nop.w
 80121a0:	60000000 	.word	0x60000000
 80121a4:	3ff71547 	.word	0x3ff71547
 80121a8:	f85ddf44 	.word	0xf85ddf44
 80121ac:	3e54ae0b 	.word	0x3e54ae0b
 80121b0:	55555555 	.word	0x55555555
 80121b4:	3fd55555 	.word	0x3fd55555
 80121b8:	652b82fe 	.word	0x652b82fe
 80121bc:	3ff71547 	.word	0x3ff71547
 80121c0:	00000000 	.word	0x00000000
 80121c4:	bff00000 	.word	0xbff00000
 80121c8:	8800759c 	.word	0x8800759c
 80121cc:	7e37e43c 	.word	0x7e37e43c
 80121d0:	3ff00000 	.word	0x3ff00000
 80121d4:	3fd00000 	.word	0x3fd00000
 80121d8:	3fe00000 	.word	0x3fe00000
 80121dc:	408fffff 	.word	0x408fffff
 80121e0:	4bd7      	ldr	r3, [pc, #860]	; (8012540 <__ieee754_pow+0x740>)
 80121e2:	ea03 0309 	and.w	r3, r3, r9
 80121e6:	2200      	movs	r2, #0
 80121e8:	b92b      	cbnz	r3, 80121f6 <__ieee754_pow+0x3f6>
 80121ea:	4bd6      	ldr	r3, [pc, #856]	; (8012544 <__ieee754_pow+0x744>)
 80121ec:	f7ee fa24 	bl	8000638 <__aeabi_dmul>
 80121f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80121f4:	460c      	mov	r4, r1
 80121f6:	1523      	asrs	r3, r4, #20
 80121f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80121fc:	4413      	add	r3, r2
 80121fe:	9309      	str	r3, [sp, #36]	; 0x24
 8012200:	4bd1      	ldr	r3, [pc, #836]	; (8012548 <__ieee754_pow+0x748>)
 8012202:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012206:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801220a:	429c      	cmp	r4, r3
 801220c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012210:	dd08      	ble.n	8012224 <__ieee754_pow+0x424>
 8012212:	4bce      	ldr	r3, [pc, #824]	; (801254c <__ieee754_pow+0x74c>)
 8012214:	429c      	cmp	r4, r3
 8012216:	f340 8163 	ble.w	80124e0 <__ieee754_pow+0x6e0>
 801221a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801221c:	3301      	adds	r3, #1
 801221e:	9309      	str	r3, [sp, #36]	; 0x24
 8012220:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012224:	2400      	movs	r4, #0
 8012226:	00e3      	lsls	r3, r4, #3
 8012228:	930b      	str	r3, [sp, #44]	; 0x2c
 801222a:	4bc9      	ldr	r3, [pc, #804]	; (8012550 <__ieee754_pow+0x750>)
 801222c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012230:	ed93 7b00 	vldr	d7, [r3]
 8012234:	4629      	mov	r1, r5
 8012236:	ec53 2b17 	vmov	r2, r3, d7
 801223a:	eeb0 8a47 	vmov.f32	s16, s14
 801223e:	eef0 8a67 	vmov.f32	s17, s15
 8012242:	4682      	mov	sl, r0
 8012244:	f7ee f840 	bl	80002c8 <__aeabi_dsub>
 8012248:	4652      	mov	r2, sl
 801224a:	4606      	mov	r6, r0
 801224c:	460f      	mov	r7, r1
 801224e:	462b      	mov	r3, r5
 8012250:	ec51 0b18 	vmov	r0, r1, d8
 8012254:	f7ee f83a 	bl	80002cc <__adddf3>
 8012258:	4602      	mov	r2, r0
 801225a:	460b      	mov	r3, r1
 801225c:	2000      	movs	r0, #0
 801225e:	49bd      	ldr	r1, [pc, #756]	; (8012554 <__ieee754_pow+0x754>)
 8012260:	f7ee fb14 	bl	800088c <__aeabi_ddiv>
 8012264:	ec41 0b19 	vmov	d9, r0, r1
 8012268:	4602      	mov	r2, r0
 801226a:	460b      	mov	r3, r1
 801226c:	4630      	mov	r0, r6
 801226e:	4639      	mov	r1, r7
 8012270:	f7ee f9e2 	bl	8000638 <__aeabi_dmul>
 8012274:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012278:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801227c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012280:	2300      	movs	r3, #0
 8012282:	9304      	str	r3, [sp, #16]
 8012284:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012288:	46ab      	mov	fp, r5
 801228a:	106d      	asrs	r5, r5, #1
 801228c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012290:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012294:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012298:	2200      	movs	r2, #0
 801229a:	4640      	mov	r0, r8
 801229c:	4649      	mov	r1, r9
 801229e:	4614      	mov	r4, r2
 80122a0:	461d      	mov	r5, r3
 80122a2:	f7ee f9c9 	bl	8000638 <__aeabi_dmul>
 80122a6:	4602      	mov	r2, r0
 80122a8:	460b      	mov	r3, r1
 80122aa:	4630      	mov	r0, r6
 80122ac:	4639      	mov	r1, r7
 80122ae:	f7ee f80b 	bl	80002c8 <__aeabi_dsub>
 80122b2:	ec53 2b18 	vmov	r2, r3, d8
 80122b6:	4606      	mov	r6, r0
 80122b8:	460f      	mov	r7, r1
 80122ba:	4620      	mov	r0, r4
 80122bc:	4629      	mov	r1, r5
 80122be:	f7ee f803 	bl	80002c8 <__aeabi_dsub>
 80122c2:	4602      	mov	r2, r0
 80122c4:	460b      	mov	r3, r1
 80122c6:	4650      	mov	r0, sl
 80122c8:	4659      	mov	r1, fp
 80122ca:	f7ed fffd 	bl	80002c8 <__aeabi_dsub>
 80122ce:	4642      	mov	r2, r8
 80122d0:	464b      	mov	r3, r9
 80122d2:	f7ee f9b1 	bl	8000638 <__aeabi_dmul>
 80122d6:	4602      	mov	r2, r0
 80122d8:	460b      	mov	r3, r1
 80122da:	4630      	mov	r0, r6
 80122dc:	4639      	mov	r1, r7
 80122de:	f7ed fff3 	bl	80002c8 <__aeabi_dsub>
 80122e2:	ec53 2b19 	vmov	r2, r3, d9
 80122e6:	f7ee f9a7 	bl	8000638 <__aeabi_dmul>
 80122ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80122ee:	ec41 0b18 	vmov	d8, r0, r1
 80122f2:	4610      	mov	r0, r2
 80122f4:	4619      	mov	r1, r3
 80122f6:	f7ee f99f 	bl	8000638 <__aeabi_dmul>
 80122fa:	a37d      	add	r3, pc, #500	; (adr r3, 80124f0 <__ieee754_pow+0x6f0>)
 80122fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012300:	4604      	mov	r4, r0
 8012302:	460d      	mov	r5, r1
 8012304:	f7ee f998 	bl	8000638 <__aeabi_dmul>
 8012308:	a37b      	add	r3, pc, #492	; (adr r3, 80124f8 <__ieee754_pow+0x6f8>)
 801230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801230e:	f7ed ffdd 	bl	80002cc <__adddf3>
 8012312:	4622      	mov	r2, r4
 8012314:	462b      	mov	r3, r5
 8012316:	f7ee f98f 	bl	8000638 <__aeabi_dmul>
 801231a:	a379      	add	r3, pc, #484	; (adr r3, 8012500 <__ieee754_pow+0x700>)
 801231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012320:	f7ed ffd4 	bl	80002cc <__adddf3>
 8012324:	4622      	mov	r2, r4
 8012326:	462b      	mov	r3, r5
 8012328:	f7ee f986 	bl	8000638 <__aeabi_dmul>
 801232c:	a376      	add	r3, pc, #472	; (adr r3, 8012508 <__ieee754_pow+0x708>)
 801232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012332:	f7ed ffcb 	bl	80002cc <__adddf3>
 8012336:	4622      	mov	r2, r4
 8012338:	462b      	mov	r3, r5
 801233a:	f7ee f97d 	bl	8000638 <__aeabi_dmul>
 801233e:	a374      	add	r3, pc, #464	; (adr r3, 8012510 <__ieee754_pow+0x710>)
 8012340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012344:	f7ed ffc2 	bl	80002cc <__adddf3>
 8012348:	4622      	mov	r2, r4
 801234a:	462b      	mov	r3, r5
 801234c:	f7ee f974 	bl	8000638 <__aeabi_dmul>
 8012350:	a371      	add	r3, pc, #452	; (adr r3, 8012518 <__ieee754_pow+0x718>)
 8012352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012356:	f7ed ffb9 	bl	80002cc <__adddf3>
 801235a:	4622      	mov	r2, r4
 801235c:	4606      	mov	r6, r0
 801235e:	460f      	mov	r7, r1
 8012360:	462b      	mov	r3, r5
 8012362:	4620      	mov	r0, r4
 8012364:	4629      	mov	r1, r5
 8012366:	f7ee f967 	bl	8000638 <__aeabi_dmul>
 801236a:	4602      	mov	r2, r0
 801236c:	460b      	mov	r3, r1
 801236e:	4630      	mov	r0, r6
 8012370:	4639      	mov	r1, r7
 8012372:	f7ee f961 	bl	8000638 <__aeabi_dmul>
 8012376:	4642      	mov	r2, r8
 8012378:	4604      	mov	r4, r0
 801237a:	460d      	mov	r5, r1
 801237c:	464b      	mov	r3, r9
 801237e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012382:	f7ed ffa3 	bl	80002cc <__adddf3>
 8012386:	ec53 2b18 	vmov	r2, r3, d8
 801238a:	f7ee f955 	bl	8000638 <__aeabi_dmul>
 801238e:	4622      	mov	r2, r4
 8012390:	462b      	mov	r3, r5
 8012392:	f7ed ff9b 	bl	80002cc <__adddf3>
 8012396:	4642      	mov	r2, r8
 8012398:	4682      	mov	sl, r0
 801239a:	468b      	mov	fp, r1
 801239c:	464b      	mov	r3, r9
 801239e:	4640      	mov	r0, r8
 80123a0:	4649      	mov	r1, r9
 80123a2:	f7ee f949 	bl	8000638 <__aeabi_dmul>
 80123a6:	4b6c      	ldr	r3, [pc, #432]	; (8012558 <__ieee754_pow+0x758>)
 80123a8:	2200      	movs	r2, #0
 80123aa:	4606      	mov	r6, r0
 80123ac:	460f      	mov	r7, r1
 80123ae:	f7ed ff8d 	bl	80002cc <__adddf3>
 80123b2:	4652      	mov	r2, sl
 80123b4:	465b      	mov	r3, fp
 80123b6:	f7ed ff89 	bl	80002cc <__adddf3>
 80123ba:	9c04      	ldr	r4, [sp, #16]
 80123bc:	460d      	mov	r5, r1
 80123be:	4622      	mov	r2, r4
 80123c0:	460b      	mov	r3, r1
 80123c2:	4640      	mov	r0, r8
 80123c4:	4649      	mov	r1, r9
 80123c6:	f7ee f937 	bl	8000638 <__aeabi_dmul>
 80123ca:	4b63      	ldr	r3, [pc, #396]	; (8012558 <__ieee754_pow+0x758>)
 80123cc:	4680      	mov	r8, r0
 80123ce:	4689      	mov	r9, r1
 80123d0:	2200      	movs	r2, #0
 80123d2:	4620      	mov	r0, r4
 80123d4:	4629      	mov	r1, r5
 80123d6:	f7ed ff77 	bl	80002c8 <__aeabi_dsub>
 80123da:	4632      	mov	r2, r6
 80123dc:	463b      	mov	r3, r7
 80123de:	f7ed ff73 	bl	80002c8 <__aeabi_dsub>
 80123e2:	4602      	mov	r2, r0
 80123e4:	460b      	mov	r3, r1
 80123e6:	4650      	mov	r0, sl
 80123e8:	4659      	mov	r1, fp
 80123ea:	f7ed ff6d 	bl	80002c8 <__aeabi_dsub>
 80123ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80123f2:	f7ee f921 	bl	8000638 <__aeabi_dmul>
 80123f6:	4622      	mov	r2, r4
 80123f8:	4606      	mov	r6, r0
 80123fa:	460f      	mov	r7, r1
 80123fc:	462b      	mov	r3, r5
 80123fe:	ec51 0b18 	vmov	r0, r1, d8
 8012402:	f7ee f919 	bl	8000638 <__aeabi_dmul>
 8012406:	4602      	mov	r2, r0
 8012408:	460b      	mov	r3, r1
 801240a:	4630      	mov	r0, r6
 801240c:	4639      	mov	r1, r7
 801240e:	f7ed ff5d 	bl	80002cc <__adddf3>
 8012412:	4606      	mov	r6, r0
 8012414:	460f      	mov	r7, r1
 8012416:	4602      	mov	r2, r0
 8012418:	460b      	mov	r3, r1
 801241a:	4640      	mov	r0, r8
 801241c:	4649      	mov	r1, r9
 801241e:	f7ed ff55 	bl	80002cc <__adddf3>
 8012422:	9c04      	ldr	r4, [sp, #16]
 8012424:	a33e      	add	r3, pc, #248	; (adr r3, 8012520 <__ieee754_pow+0x720>)
 8012426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242a:	4620      	mov	r0, r4
 801242c:	460d      	mov	r5, r1
 801242e:	f7ee f903 	bl	8000638 <__aeabi_dmul>
 8012432:	4642      	mov	r2, r8
 8012434:	ec41 0b18 	vmov	d8, r0, r1
 8012438:	464b      	mov	r3, r9
 801243a:	4620      	mov	r0, r4
 801243c:	4629      	mov	r1, r5
 801243e:	f7ed ff43 	bl	80002c8 <__aeabi_dsub>
 8012442:	4602      	mov	r2, r0
 8012444:	460b      	mov	r3, r1
 8012446:	4630      	mov	r0, r6
 8012448:	4639      	mov	r1, r7
 801244a:	f7ed ff3d 	bl	80002c8 <__aeabi_dsub>
 801244e:	a336      	add	r3, pc, #216	; (adr r3, 8012528 <__ieee754_pow+0x728>)
 8012450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012454:	f7ee f8f0 	bl	8000638 <__aeabi_dmul>
 8012458:	a335      	add	r3, pc, #212	; (adr r3, 8012530 <__ieee754_pow+0x730>)
 801245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801245e:	4606      	mov	r6, r0
 8012460:	460f      	mov	r7, r1
 8012462:	4620      	mov	r0, r4
 8012464:	4629      	mov	r1, r5
 8012466:	f7ee f8e7 	bl	8000638 <__aeabi_dmul>
 801246a:	4602      	mov	r2, r0
 801246c:	460b      	mov	r3, r1
 801246e:	4630      	mov	r0, r6
 8012470:	4639      	mov	r1, r7
 8012472:	f7ed ff2b 	bl	80002cc <__adddf3>
 8012476:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012478:	4b38      	ldr	r3, [pc, #224]	; (801255c <__ieee754_pow+0x75c>)
 801247a:	4413      	add	r3, r2
 801247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012480:	f7ed ff24 	bl	80002cc <__adddf3>
 8012484:	4682      	mov	sl, r0
 8012486:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012488:	468b      	mov	fp, r1
 801248a:	f7ee f86b 	bl	8000564 <__aeabi_i2d>
 801248e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012490:	4b33      	ldr	r3, [pc, #204]	; (8012560 <__ieee754_pow+0x760>)
 8012492:	4413      	add	r3, r2
 8012494:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012498:	4606      	mov	r6, r0
 801249a:	460f      	mov	r7, r1
 801249c:	4652      	mov	r2, sl
 801249e:	465b      	mov	r3, fp
 80124a0:	ec51 0b18 	vmov	r0, r1, d8
 80124a4:	f7ed ff12 	bl	80002cc <__adddf3>
 80124a8:	4642      	mov	r2, r8
 80124aa:	464b      	mov	r3, r9
 80124ac:	f7ed ff0e 	bl	80002cc <__adddf3>
 80124b0:	4632      	mov	r2, r6
 80124b2:	463b      	mov	r3, r7
 80124b4:	f7ed ff0a 	bl	80002cc <__adddf3>
 80124b8:	9c04      	ldr	r4, [sp, #16]
 80124ba:	4632      	mov	r2, r6
 80124bc:	463b      	mov	r3, r7
 80124be:	4620      	mov	r0, r4
 80124c0:	460d      	mov	r5, r1
 80124c2:	f7ed ff01 	bl	80002c8 <__aeabi_dsub>
 80124c6:	4642      	mov	r2, r8
 80124c8:	464b      	mov	r3, r9
 80124ca:	f7ed fefd 	bl	80002c8 <__aeabi_dsub>
 80124ce:	ec53 2b18 	vmov	r2, r3, d8
 80124d2:	f7ed fef9 	bl	80002c8 <__aeabi_dsub>
 80124d6:	4602      	mov	r2, r0
 80124d8:	460b      	mov	r3, r1
 80124da:	4650      	mov	r0, sl
 80124dc:	4659      	mov	r1, fp
 80124de:	e606      	b.n	80120ee <__ieee754_pow+0x2ee>
 80124e0:	2401      	movs	r4, #1
 80124e2:	e6a0      	b.n	8012226 <__ieee754_pow+0x426>
 80124e4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8012538 <__ieee754_pow+0x738>
 80124e8:	e60d      	b.n	8012106 <__ieee754_pow+0x306>
 80124ea:	bf00      	nop
 80124ec:	f3af 8000 	nop.w
 80124f0:	4a454eef 	.word	0x4a454eef
 80124f4:	3fca7e28 	.word	0x3fca7e28
 80124f8:	93c9db65 	.word	0x93c9db65
 80124fc:	3fcd864a 	.word	0x3fcd864a
 8012500:	a91d4101 	.word	0xa91d4101
 8012504:	3fd17460 	.word	0x3fd17460
 8012508:	518f264d 	.word	0x518f264d
 801250c:	3fd55555 	.word	0x3fd55555
 8012510:	db6fabff 	.word	0xdb6fabff
 8012514:	3fdb6db6 	.word	0x3fdb6db6
 8012518:	33333303 	.word	0x33333303
 801251c:	3fe33333 	.word	0x3fe33333
 8012520:	e0000000 	.word	0xe0000000
 8012524:	3feec709 	.word	0x3feec709
 8012528:	dc3a03fd 	.word	0xdc3a03fd
 801252c:	3feec709 	.word	0x3feec709
 8012530:	145b01f5 	.word	0x145b01f5
 8012534:	be3e2fe0 	.word	0xbe3e2fe0
 8012538:	00000000 	.word	0x00000000
 801253c:	3ff00000 	.word	0x3ff00000
 8012540:	7ff00000 	.word	0x7ff00000
 8012544:	43400000 	.word	0x43400000
 8012548:	0003988e 	.word	0x0003988e
 801254c:	000bb679 	.word	0x000bb679
 8012550:	08014130 	.word	0x08014130
 8012554:	3ff00000 	.word	0x3ff00000
 8012558:	40080000 	.word	0x40080000
 801255c:	08014150 	.word	0x08014150
 8012560:	08014140 	.word	0x08014140
 8012564:	a3b5      	add	r3, pc, #724	; (adr r3, 801283c <__ieee754_pow+0xa3c>)
 8012566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801256a:	4640      	mov	r0, r8
 801256c:	4649      	mov	r1, r9
 801256e:	f7ed fead 	bl	80002cc <__adddf3>
 8012572:	4622      	mov	r2, r4
 8012574:	ec41 0b1a 	vmov	d10, r0, r1
 8012578:	462b      	mov	r3, r5
 801257a:	4630      	mov	r0, r6
 801257c:	4639      	mov	r1, r7
 801257e:	f7ed fea3 	bl	80002c8 <__aeabi_dsub>
 8012582:	4602      	mov	r2, r0
 8012584:	460b      	mov	r3, r1
 8012586:	ec51 0b1a 	vmov	r0, r1, d10
 801258a:	f7ee fae5 	bl	8000b58 <__aeabi_dcmpgt>
 801258e:	2800      	cmp	r0, #0
 8012590:	f47f adf8 	bne.w	8012184 <__ieee754_pow+0x384>
 8012594:	4aa4      	ldr	r2, [pc, #656]	; (8012828 <__ieee754_pow+0xa28>)
 8012596:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801259a:	4293      	cmp	r3, r2
 801259c:	f340 810b 	ble.w	80127b6 <__ieee754_pow+0x9b6>
 80125a0:	151b      	asrs	r3, r3, #20
 80125a2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80125a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80125aa:	fa4a f303 	asr.w	r3, sl, r3
 80125ae:	445b      	add	r3, fp
 80125b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80125b4:	4e9d      	ldr	r6, [pc, #628]	; (801282c <__ieee754_pow+0xa2c>)
 80125b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80125ba:	4116      	asrs	r6, r2
 80125bc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80125c0:	2000      	movs	r0, #0
 80125c2:	ea23 0106 	bic.w	r1, r3, r6
 80125c6:	f1c2 0214 	rsb	r2, r2, #20
 80125ca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80125ce:	fa4a fa02 	asr.w	sl, sl, r2
 80125d2:	f1bb 0f00 	cmp.w	fp, #0
 80125d6:	4602      	mov	r2, r0
 80125d8:	460b      	mov	r3, r1
 80125da:	4620      	mov	r0, r4
 80125dc:	4629      	mov	r1, r5
 80125de:	bfb8      	it	lt
 80125e0:	f1ca 0a00 	rsblt	sl, sl, #0
 80125e4:	f7ed fe70 	bl	80002c8 <__aeabi_dsub>
 80125e8:	ec41 0b19 	vmov	d9, r0, r1
 80125ec:	4642      	mov	r2, r8
 80125ee:	464b      	mov	r3, r9
 80125f0:	ec51 0b19 	vmov	r0, r1, d9
 80125f4:	f7ed fe6a 	bl	80002cc <__adddf3>
 80125f8:	2400      	movs	r4, #0
 80125fa:	a379      	add	r3, pc, #484	; (adr r3, 80127e0 <__ieee754_pow+0x9e0>)
 80125fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012600:	4620      	mov	r0, r4
 8012602:	460d      	mov	r5, r1
 8012604:	f7ee f818 	bl	8000638 <__aeabi_dmul>
 8012608:	ec53 2b19 	vmov	r2, r3, d9
 801260c:	4606      	mov	r6, r0
 801260e:	460f      	mov	r7, r1
 8012610:	4620      	mov	r0, r4
 8012612:	4629      	mov	r1, r5
 8012614:	f7ed fe58 	bl	80002c8 <__aeabi_dsub>
 8012618:	4602      	mov	r2, r0
 801261a:	460b      	mov	r3, r1
 801261c:	4640      	mov	r0, r8
 801261e:	4649      	mov	r1, r9
 8012620:	f7ed fe52 	bl	80002c8 <__aeabi_dsub>
 8012624:	a370      	add	r3, pc, #448	; (adr r3, 80127e8 <__ieee754_pow+0x9e8>)
 8012626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801262a:	f7ee f805 	bl	8000638 <__aeabi_dmul>
 801262e:	a370      	add	r3, pc, #448	; (adr r3, 80127f0 <__ieee754_pow+0x9f0>)
 8012630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012634:	4680      	mov	r8, r0
 8012636:	4689      	mov	r9, r1
 8012638:	4620      	mov	r0, r4
 801263a:	4629      	mov	r1, r5
 801263c:	f7ed fffc 	bl	8000638 <__aeabi_dmul>
 8012640:	4602      	mov	r2, r0
 8012642:	460b      	mov	r3, r1
 8012644:	4640      	mov	r0, r8
 8012646:	4649      	mov	r1, r9
 8012648:	f7ed fe40 	bl	80002cc <__adddf3>
 801264c:	4604      	mov	r4, r0
 801264e:	460d      	mov	r5, r1
 8012650:	4602      	mov	r2, r0
 8012652:	460b      	mov	r3, r1
 8012654:	4630      	mov	r0, r6
 8012656:	4639      	mov	r1, r7
 8012658:	f7ed fe38 	bl	80002cc <__adddf3>
 801265c:	4632      	mov	r2, r6
 801265e:	463b      	mov	r3, r7
 8012660:	4680      	mov	r8, r0
 8012662:	4689      	mov	r9, r1
 8012664:	f7ed fe30 	bl	80002c8 <__aeabi_dsub>
 8012668:	4602      	mov	r2, r0
 801266a:	460b      	mov	r3, r1
 801266c:	4620      	mov	r0, r4
 801266e:	4629      	mov	r1, r5
 8012670:	f7ed fe2a 	bl	80002c8 <__aeabi_dsub>
 8012674:	4642      	mov	r2, r8
 8012676:	4606      	mov	r6, r0
 8012678:	460f      	mov	r7, r1
 801267a:	464b      	mov	r3, r9
 801267c:	4640      	mov	r0, r8
 801267e:	4649      	mov	r1, r9
 8012680:	f7ed ffda 	bl	8000638 <__aeabi_dmul>
 8012684:	a35c      	add	r3, pc, #368	; (adr r3, 80127f8 <__ieee754_pow+0x9f8>)
 8012686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801268a:	4604      	mov	r4, r0
 801268c:	460d      	mov	r5, r1
 801268e:	f7ed ffd3 	bl	8000638 <__aeabi_dmul>
 8012692:	a35b      	add	r3, pc, #364	; (adr r3, 8012800 <__ieee754_pow+0xa00>)
 8012694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012698:	f7ed fe16 	bl	80002c8 <__aeabi_dsub>
 801269c:	4622      	mov	r2, r4
 801269e:	462b      	mov	r3, r5
 80126a0:	f7ed ffca 	bl	8000638 <__aeabi_dmul>
 80126a4:	a358      	add	r3, pc, #352	; (adr r3, 8012808 <__ieee754_pow+0xa08>)
 80126a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126aa:	f7ed fe0f 	bl	80002cc <__adddf3>
 80126ae:	4622      	mov	r2, r4
 80126b0:	462b      	mov	r3, r5
 80126b2:	f7ed ffc1 	bl	8000638 <__aeabi_dmul>
 80126b6:	a356      	add	r3, pc, #344	; (adr r3, 8012810 <__ieee754_pow+0xa10>)
 80126b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126bc:	f7ed fe04 	bl	80002c8 <__aeabi_dsub>
 80126c0:	4622      	mov	r2, r4
 80126c2:	462b      	mov	r3, r5
 80126c4:	f7ed ffb8 	bl	8000638 <__aeabi_dmul>
 80126c8:	a353      	add	r3, pc, #332	; (adr r3, 8012818 <__ieee754_pow+0xa18>)
 80126ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ce:	f7ed fdfd 	bl	80002cc <__adddf3>
 80126d2:	4622      	mov	r2, r4
 80126d4:	462b      	mov	r3, r5
 80126d6:	f7ed ffaf 	bl	8000638 <__aeabi_dmul>
 80126da:	4602      	mov	r2, r0
 80126dc:	460b      	mov	r3, r1
 80126de:	4640      	mov	r0, r8
 80126e0:	4649      	mov	r1, r9
 80126e2:	f7ed fdf1 	bl	80002c8 <__aeabi_dsub>
 80126e6:	4604      	mov	r4, r0
 80126e8:	460d      	mov	r5, r1
 80126ea:	4602      	mov	r2, r0
 80126ec:	460b      	mov	r3, r1
 80126ee:	4640      	mov	r0, r8
 80126f0:	4649      	mov	r1, r9
 80126f2:	f7ed ffa1 	bl	8000638 <__aeabi_dmul>
 80126f6:	2200      	movs	r2, #0
 80126f8:	ec41 0b19 	vmov	d9, r0, r1
 80126fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012700:	4620      	mov	r0, r4
 8012702:	4629      	mov	r1, r5
 8012704:	f7ed fde0 	bl	80002c8 <__aeabi_dsub>
 8012708:	4602      	mov	r2, r0
 801270a:	460b      	mov	r3, r1
 801270c:	ec51 0b19 	vmov	r0, r1, d9
 8012710:	f7ee f8bc 	bl	800088c <__aeabi_ddiv>
 8012714:	4632      	mov	r2, r6
 8012716:	4604      	mov	r4, r0
 8012718:	460d      	mov	r5, r1
 801271a:	463b      	mov	r3, r7
 801271c:	4640      	mov	r0, r8
 801271e:	4649      	mov	r1, r9
 8012720:	f7ed ff8a 	bl	8000638 <__aeabi_dmul>
 8012724:	4632      	mov	r2, r6
 8012726:	463b      	mov	r3, r7
 8012728:	f7ed fdd0 	bl	80002cc <__adddf3>
 801272c:	4602      	mov	r2, r0
 801272e:	460b      	mov	r3, r1
 8012730:	4620      	mov	r0, r4
 8012732:	4629      	mov	r1, r5
 8012734:	f7ed fdc8 	bl	80002c8 <__aeabi_dsub>
 8012738:	4642      	mov	r2, r8
 801273a:	464b      	mov	r3, r9
 801273c:	f7ed fdc4 	bl	80002c8 <__aeabi_dsub>
 8012740:	460b      	mov	r3, r1
 8012742:	4602      	mov	r2, r0
 8012744:	493a      	ldr	r1, [pc, #232]	; (8012830 <__ieee754_pow+0xa30>)
 8012746:	2000      	movs	r0, #0
 8012748:	f7ed fdbe 	bl	80002c8 <__aeabi_dsub>
 801274c:	e9cd 0100 	strd	r0, r1, [sp]
 8012750:	9b01      	ldr	r3, [sp, #4]
 8012752:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801275a:	da2f      	bge.n	80127bc <__ieee754_pow+0x9bc>
 801275c:	4650      	mov	r0, sl
 801275e:	ed9d 0b00 	vldr	d0, [sp]
 8012762:	f001 f919 	bl	8013998 <scalbn>
 8012766:	ec51 0b10 	vmov	r0, r1, d0
 801276a:	ec53 2b18 	vmov	r2, r3, d8
 801276e:	f7ff bbe0 	b.w	8011f32 <__ieee754_pow+0x132>
 8012772:	4b30      	ldr	r3, [pc, #192]	; (8012834 <__ieee754_pow+0xa34>)
 8012774:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012778:	429e      	cmp	r6, r3
 801277a:	f77f af0b 	ble.w	8012594 <__ieee754_pow+0x794>
 801277e:	4b2e      	ldr	r3, [pc, #184]	; (8012838 <__ieee754_pow+0xa38>)
 8012780:	440b      	add	r3, r1
 8012782:	4303      	orrs	r3, r0
 8012784:	d00b      	beq.n	801279e <__ieee754_pow+0x99e>
 8012786:	a326      	add	r3, pc, #152	; (adr r3, 8012820 <__ieee754_pow+0xa20>)
 8012788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278c:	ec51 0b18 	vmov	r0, r1, d8
 8012790:	f7ed ff52 	bl	8000638 <__aeabi_dmul>
 8012794:	a322      	add	r3, pc, #136	; (adr r3, 8012820 <__ieee754_pow+0xa20>)
 8012796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279a:	f7ff bbca 	b.w	8011f32 <__ieee754_pow+0x132>
 801279e:	4622      	mov	r2, r4
 80127a0:	462b      	mov	r3, r5
 80127a2:	f7ed fd91 	bl	80002c8 <__aeabi_dsub>
 80127a6:	4642      	mov	r2, r8
 80127a8:	464b      	mov	r3, r9
 80127aa:	f7ee f9cb 	bl	8000b44 <__aeabi_dcmpge>
 80127ae:	2800      	cmp	r0, #0
 80127b0:	f43f aef0 	beq.w	8012594 <__ieee754_pow+0x794>
 80127b4:	e7e7      	b.n	8012786 <__ieee754_pow+0x986>
 80127b6:	f04f 0a00 	mov.w	sl, #0
 80127ba:	e717      	b.n	80125ec <__ieee754_pow+0x7ec>
 80127bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127c0:	4619      	mov	r1, r3
 80127c2:	e7d2      	b.n	801276a <__ieee754_pow+0x96a>
 80127c4:	491a      	ldr	r1, [pc, #104]	; (8012830 <__ieee754_pow+0xa30>)
 80127c6:	2000      	movs	r0, #0
 80127c8:	f7ff bb9e 	b.w	8011f08 <__ieee754_pow+0x108>
 80127cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127d0:	f7ff bb9a 	b.w	8011f08 <__ieee754_pow+0x108>
 80127d4:	9000      	str	r0, [sp, #0]
 80127d6:	f7ff bb76 	b.w	8011ec6 <__ieee754_pow+0xc6>
 80127da:	2100      	movs	r1, #0
 80127dc:	f7ff bb60 	b.w	8011ea0 <__ieee754_pow+0xa0>
 80127e0:	00000000 	.word	0x00000000
 80127e4:	3fe62e43 	.word	0x3fe62e43
 80127e8:	fefa39ef 	.word	0xfefa39ef
 80127ec:	3fe62e42 	.word	0x3fe62e42
 80127f0:	0ca86c39 	.word	0x0ca86c39
 80127f4:	be205c61 	.word	0xbe205c61
 80127f8:	72bea4d0 	.word	0x72bea4d0
 80127fc:	3e663769 	.word	0x3e663769
 8012800:	c5d26bf1 	.word	0xc5d26bf1
 8012804:	3ebbbd41 	.word	0x3ebbbd41
 8012808:	af25de2c 	.word	0xaf25de2c
 801280c:	3f11566a 	.word	0x3f11566a
 8012810:	16bebd93 	.word	0x16bebd93
 8012814:	3f66c16c 	.word	0x3f66c16c
 8012818:	5555553e 	.word	0x5555553e
 801281c:	3fc55555 	.word	0x3fc55555
 8012820:	c2f8f359 	.word	0xc2f8f359
 8012824:	01a56e1f 	.word	0x01a56e1f
 8012828:	3fe00000 	.word	0x3fe00000
 801282c:	000fffff 	.word	0x000fffff
 8012830:	3ff00000 	.word	0x3ff00000
 8012834:	4090cbff 	.word	0x4090cbff
 8012838:	3f6f3400 	.word	0x3f6f3400
 801283c:	652b82fe 	.word	0x652b82fe
 8012840:	3c971547 	.word	0x3c971547
 8012844:	00000000 	.word	0x00000000

08012848 <__ieee754_rem_pio2>:
 8012848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801284c:	ed2d 8b02 	vpush	{d8}
 8012850:	ec55 4b10 	vmov	r4, r5, d0
 8012854:	4bca      	ldr	r3, [pc, #808]	; (8012b80 <__ieee754_rem_pio2+0x338>)
 8012856:	b08b      	sub	sp, #44	; 0x2c
 8012858:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801285c:	4598      	cmp	r8, r3
 801285e:	4682      	mov	sl, r0
 8012860:	9502      	str	r5, [sp, #8]
 8012862:	dc08      	bgt.n	8012876 <__ieee754_rem_pio2+0x2e>
 8012864:	2200      	movs	r2, #0
 8012866:	2300      	movs	r3, #0
 8012868:	ed80 0b00 	vstr	d0, [r0]
 801286c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012870:	f04f 0b00 	mov.w	fp, #0
 8012874:	e028      	b.n	80128c8 <__ieee754_rem_pio2+0x80>
 8012876:	4bc3      	ldr	r3, [pc, #780]	; (8012b84 <__ieee754_rem_pio2+0x33c>)
 8012878:	4598      	cmp	r8, r3
 801287a:	dc78      	bgt.n	801296e <__ieee754_rem_pio2+0x126>
 801287c:	9b02      	ldr	r3, [sp, #8]
 801287e:	4ec2      	ldr	r6, [pc, #776]	; (8012b88 <__ieee754_rem_pio2+0x340>)
 8012880:	2b00      	cmp	r3, #0
 8012882:	ee10 0a10 	vmov	r0, s0
 8012886:	a3b0      	add	r3, pc, #704	; (adr r3, 8012b48 <__ieee754_rem_pio2+0x300>)
 8012888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801288c:	4629      	mov	r1, r5
 801288e:	dd39      	ble.n	8012904 <__ieee754_rem_pio2+0xbc>
 8012890:	f7ed fd1a 	bl	80002c8 <__aeabi_dsub>
 8012894:	45b0      	cmp	r8, r6
 8012896:	4604      	mov	r4, r0
 8012898:	460d      	mov	r5, r1
 801289a:	d01b      	beq.n	80128d4 <__ieee754_rem_pio2+0x8c>
 801289c:	a3ac      	add	r3, pc, #688	; (adr r3, 8012b50 <__ieee754_rem_pio2+0x308>)
 801289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a2:	f7ed fd11 	bl	80002c8 <__aeabi_dsub>
 80128a6:	4602      	mov	r2, r0
 80128a8:	460b      	mov	r3, r1
 80128aa:	e9ca 2300 	strd	r2, r3, [sl]
 80128ae:	4620      	mov	r0, r4
 80128b0:	4629      	mov	r1, r5
 80128b2:	f7ed fd09 	bl	80002c8 <__aeabi_dsub>
 80128b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8012b50 <__ieee754_rem_pio2+0x308>)
 80128b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128bc:	f7ed fd04 	bl	80002c8 <__aeabi_dsub>
 80128c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80128c4:	f04f 0b01 	mov.w	fp, #1
 80128c8:	4658      	mov	r0, fp
 80128ca:	b00b      	add	sp, #44	; 0x2c
 80128cc:	ecbd 8b02 	vpop	{d8}
 80128d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128d4:	a3a0      	add	r3, pc, #640	; (adr r3, 8012b58 <__ieee754_rem_pio2+0x310>)
 80128d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128da:	f7ed fcf5 	bl	80002c8 <__aeabi_dsub>
 80128de:	a3a0      	add	r3, pc, #640	; (adr r3, 8012b60 <__ieee754_rem_pio2+0x318>)
 80128e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128e4:	4604      	mov	r4, r0
 80128e6:	460d      	mov	r5, r1
 80128e8:	f7ed fcee 	bl	80002c8 <__aeabi_dsub>
 80128ec:	4602      	mov	r2, r0
 80128ee:	460b      	mov	r3, r1
 80128f0:	e9ca 2300 	strd	r2, r3, [sl]
 80128f4:	4620      	mov	r0, r4
 80128f6:	4629      	mov	r1, r5
 80128f8:	f7ed fce6 	bl	80002c8 <__aeabi_dsub>
 80128fc:	a398      	add	r3, pc, #608	; (adr r3, 8012b60 <__ieee754_rem_pio2+0x318>)
 80128fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012902:	e7db      	b.n	80128bc <__ieee754_rem_pio2+0x74>
 8012904:	f7ed fce2 	bl	80002cc <__adddf3>
 8012908:	45b0      	cmp	r8, r6
 801290a:	4604      	mov	r4, r0
 801290c:	460d      	mov	r5, r1
 801290e:	d016      	beq.n	801293e <__ieee754_rem_pio2+0xf6>
 8012910:	a38f      	add	r3, pc, #572	; (adr r3, 8012b50 <__ieee754_rem_pio2+0x308>)
 8012912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012916:	f7ed fcd9 	bl	80002cc <__adddf3>
 801291a:	4602      	mov	r2, r0
 801291c:	460b      	mov	r3, r1
 801291e:	e9ca 2300 	strd	r2, r3, [sl]
 8012922:	4620      	mov	r0, r4
 8012924:	4629      	mov	r1, r5
 8012926:	f7ed fccf 	bl	80002c8 <__aeabi_dsub>
 801292a:	a389      	add	r3, pc, #548	; (adr r3, 8012b50 <__ieee754_rem_pio2+0x308>)
 801292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012930:	f7ed fccc 	bl	80002cc <__adddf3>
 8012934:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8012938:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801293c:	e7c4      	b.n	80128c8 <__ieee754_rem_pio2+0x80>
 801293e:	a386      	add	r3, pc, #536	; (adr r3, 8012b58 <__ieee754_rem_pio2+0x310>)
 8012940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012944:	f7ed fcc2 	bl	80002cc <__adddf3>
 8012948:	a385      	add	r3, pc, #532	; (adr r3, 8012b60 <__ieee754_rem_pio2+0x318>)
 801294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801294e:	4604      	mov	r4, r0
 8012950:	460d      	mov	r5, r1
 8012952:	f7ed fcbb 	bl	80002cc <__adddf3>
 8012956:	4602      	mov	r2, r0
 8012958:	460b      	mov	r3, r1
 801295a:	e9ca 2300 	strd	r2, r3, [sl]
 801295e:	4620      	mov	r0, r4
 8012960:	4629      	mov	r1, r5
 8012962:	f7ed fcb1 	bl	80002c8 <__aeabi_dsub>
 8012966:	a37e      	add	r3, pc, #504	; (adr r3, 8012b60 <__ieee754_rem_pio2+0x318>)
 8012968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801296c:	e7e0      	b.n	8012930 <__ieee754_rem_pio2+0xe8>
 801296e:	4b87      	ldr	r3, [pc, #540]	; (8012b8c <__ieee754_rem_pio2+0x344>)
 8012970:	4598      	cmp	r8, r3
 8012972:	f300 80d9 	bgt.w	8012b28 <__ieee754_rem_pio2+0x2e0>
 8012976:	f000 feed 	bl	8013754 <fabs>
 801297a:	ec55 4b10 	vmov	r4, r5, d0
 801297e:	ee10 0a10 	vmov	r0, s0
 8012982:	a379      	add	r3, pc, #484	; (adr r3, 8012b68 <__ieee754_rem_pio2+0x320>)
 8012984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012988:	4629      	mov	r1, r5
 801298a:	f7ed fe55 	bl	8000638 <__aeabi_dmul>
 801298e:	4b80      	ldr	r3, [pc, #512]	; (8012b90 <__ieee754_rem_pio2+0x348>)
 8012990:	2200      	movs	r2, #0
 8012992:	f7ed fc9b 	bl	80002cc <__adddf3>
 8012996:	f7ee f8ff 	bl	8000b98 <__aeabi_d2iz>
 801299a:	4683      	mov	fp, r0
 801299c:	f7ed fde2 	bl	8000564 <__aeabi_i2d>
 80129a0:	4602      	mov	r2, r0
 80129a2:	460b      	mov	r3, r1
 80129a4:	ec43 2b18 	vmov	d8, r2, r3
 80129a8:	a367      	add	r3, pc, #412	; (adr r3, 8012b48 <__ieee754_rem_pio2+0x300>)
 80129aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ae:	f7ed fe43 	bl	8000638 <__aeabi_dmul>
 80129b2:	4602      	mov	r2, r0
 80129b4:	460b      	mov	r3, r1
 80129b6:	4620      	mov	r0, r4
 80129b8:	4629      	mov	r1, r5
 80129ba:	f7ed fc85 	bl	80002c8 <__aeabi_dsub>
 80129be:	a364      	add	r3, pc, #400	; (adr r3, 8012b50 <__ieee754_rem_pio2+0x308>)
 80129c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c4:	4606      	mov	r6, r0
 80129c6:	460f      	mov	r7, r1
 80129c8:	ec51 0b18 	vmov	r0, r1, d8
 80129cc:	f7ed fe34 	bl	8000638 <__aeabi_dmul>
 80129d0:	f1bb 0f1f 	cmp.w	fp, #31
 80129d4:	4604      	mov	r4, r0
 80129d6:	460d      	mov	r5, r1
 80129d8:	dc0d      	bgt.n	80129f6 <__ieee754_rem_pio2+0x1ae>
 80129da:	4b6e      	ldr	r3, [pc, #440]	; (8012b94 <__ieee754_rem_pio2+0x34c>)
 80129dc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80129e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129e4:	4543      	cmp	r3, r8
 80129e6:	d006      	beq.n	80129f6 <__ieee754_rem_pio2+0x1ae>
 80129e8:	4622      	mov	r2, r4
 80129ea:	462b      	mov	r3, r5
 80129ec:	4630      	mov	r0, r6
 80129ee:	4639      	mov	r1, r7
 80129f0:	f7ed fc6a 	bl	80002c8 <__aeabi_dsub>
 80129f4:	e00f      	b.n	8012a16 <__ieee754_rem_pio2+0x1ce>
 80129f6:	462b      	mov	r3, r5
 80129f8:	4622      	mov	r2, r4
 80129fa:	4630      	mov	r0, r6
 80129fc:	4639      	mov	r1, r7
 80129fe:	f7ed fc63 	bl	80002c8 <__aeabi_dsub>
 8012a02:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012a06:	9303      	str	r3, [sp, #12]
 8012a08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012a0c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012a10:	f1b8 0f10 	cmp.w	r8, #16
 8012a14:	dc02      	bgt.n	8012a1c <__ieee754_rem_pio2+0x1d4>
 8012a16:	e9ca 0100 	strd	r0, r1, [sl]
 8012a1a:	e039      	b.n	8012a90 <__ieee754_rem_pio2+0x248>
 8012a1c:	a34e      	add	r3, pc, #312	; (adr r3, 8012b58 <__ieee754_rem_pio2+0x310>)
 8012a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a22:	ec51 0b18 	vmov	r0, r1, d8
 8012a26:	f7ed fe07 	bl	8000638 <__aeabi_dmul>
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	460d      	mov	r5, r1
 8012a2e:	4602      	mov	r2, r0
 8012a30:	460b      	mov	r3, r1
 8012a32:	4630      	mov	r0, r6
 8012a34:	4639      	mov	r1, r7
 8012a36:	f7ed fc47 	bl	80002c8 <__aeabi_dsub>
 8012a3a:	4602      	mov	r2, r0
 8012a3c:	460b      	mov	r3, r1
 8012a3e:	4680      	mov	r8, r0
 8012a40:	4689      	mov	r9, r1
 8012a42:	4630      	mov	r0, r6
 8012a44:	4639      	mov	r1, r7
 8012a46:	f7ed fc3f 	bl	80002c8 <__aeabi_dsub>
 8012a4a:	4622      	mov	r2, r4
 8012a4c:	462b      	mov	r3, r5
 8012a4e:	f7ed fc3b 	bl	80002c8 <__aeabi_dsub>
 8012a52:	a343      	add	r3, pc, #268	; (adr r3, 8012b60 <__ieee754_rem_pio2+0x318>)
 8012a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a58:	4604      	mov	r4, r0
 8012a5a:	460d      	mov	r5, r1
 8012a5c:	ec51 0b18 	vmov	r0, r1, d8
 8012a60:	f7ed fdea 	bl	8000638 <__aeabi_dmul>
 8012a64:	4622      	mov	r2, r4
 8012a66:	462b      	mov	r3, r5
 8012a68:	f7ed fc2e 	bl	80002c8 <__aeabi_dsub>
 8012a6c:	4602      	mov	r2, r0
 8012a6e:	460b      	mov	r3, r1
 8012a70:	4604      	mov	r4, r0
 8012a72:	460d      	mov	r5, r1
 8012a74:	4640      	mov	r0, r8
 8012a76:	4649      	mov	r1, r9
 8012a78:	f7ed fc26 	bl	80002c8 <__aeabi_dsub>
 8012a7c:	9a03      	ldr	r2, [sp, #12]
 8012a7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012a82:	1ad3      	subs	r3, r2, r3
 8012a84:	2b31      	cmp	r3, #49	; 0x31
 8012a86:	dc24      	bgt.n	8012ad2 <__ieee754_rem_pio2+0x28a>
 8012a88:	e9ca 0100 	strd	r0, r1, [sl]
 8012a8c:	4646      	mov	r6, r8
 8012a8e:	464f      	mov	r7, r9
 8012a90:	e9da 8900 	ldrd	r8, r9, [sl]
 8012a94:	4630      	mov	r0, r6
 8012a96:	4642      	mov	r2, r8
 8012a98:	464b      	mov	r3, r9
 8012a9a:	4639      	mov	r1, r7
 8012a9c:	f7ed fc14 	bl	80002c8 <__aeabi_dsub>
 8012aa0:	462b      	mov	r3, r5
 8012aa2:	4622      	mov	r2, r4
 8012aa4:	f7ed fc10 	bl	80002c8 <__aeabi_dsub>
 8012aa8:	9b02      	ldr	r3, [sp, #8]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012ab0:	f6bf af0a 	bge.w	80128c8 <__ieee754_rem_pio2+0x80>
 8012ab4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012ab8:	f8ca 3004 	str.w	r3, [sl, #4]
 8012abc:	f8ca 8000 	str.w	r8, [sl]
 8012ac0:	f8ca 0008 	str.w	r0, [sl, #8]
 8012ac4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ac8:	f8ca 300c 	str.w	r3, [sl, #12]
 8012acc:	f1cb 0b00 	rsb	fp, fp, #0
 8012ad0:	e6fa      	b.n	80128c8 <__ieee754_rem_pio2+0x80>
 8012ad2:	a327      	add	r3, pc, #156	; (adr r3, 8012b70 <__ieee754_rem_pio2+0x328>)
 8012ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad8:	ec51 0b18 	vmov	r0, r1, d8
 8012adc:	f7ed fdac 	bl	8000638 <__aeabi_dmul>
 8012ae0:	4604      	mov	r4, r0
 8012ae2:	460d      	mov	r5, r1
 8012ae4:	4602      	mov	r2, r0
 8012ae6:	460b      	mov	r3, r1
 8012ae8:	4640      	mov	r0, r8
 8012aea:	4649      	mov	r1, r9
 8012aec:	f7ed fbec 	bl	80002c8 <__aeabi_dsub>
 8012af0:	4602      	mov	r2, r0
 8012af2:	460b      	mov	r3, r1
 8012af4:	4606      	mov	r6, r0
 8012af6:	460f      	mov	r7, r1
 8012af8:	4640      	mov	r0, r8
 8012afa:	4649      	mov	r1, r9
 8012afc:	f7ed fbe4 	bl	80002c8 <__aeabi_dsub>
 8012b00:	4622      	mov	r2, r4
 8012b02:	462b      	mov	r3, r5
 8012b04:	f7ed fbe0 	bl	80002c8 <__aeabi_dsub>
 8012b08:	a31b      	add	r3, pc, #108	; (adr r3, 8012b78 <__ieee754_rem_pio2+0x330>)
 8012b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b0e:	4604      	mov	r4, r0
 8012b10:	460d      	mov	r5, r1
 8012b12:	ec51 0b18 	vmov	r0, r1, d8
 8012b16:	f7ed fd8f 	bl	8000638 <__aeabi_dmul>
 8012b1a:	4622      	mov	r2, r4
 8012b1c:	462b      	mov	r3, r5
 8012b1e:	f7ed fbd3 	bl	80002c8 <__aeabi_dsub>
 8012b22:	4604      	mov	r4, r0
 8012b24:	460d      	mov	r5, r1
 8012b26:	e75f      	b.n	80129e8 <__ieee754_rem_pio2+0x1a0>
 8012b28:	4b1b      	ldr	r3, [pc, #108]	; (8012b98 <__ieee754_rem_pio2+0x350>)
 8012b2a:	4598      	cmp	r8, r3
 8012b2c:	dd36      	ble.n	8012b9c <__ieee754_rem_pio2+0x354>
 8012b2e:	ee10 2a10 	vmov	r2, s0
 8012b32:	462b      	mov	r3, r5
 8012b34:	4620      	mov	r0, r4
 8012b36:	4629      	mov	r1, r5
 8012b38:	f7ed fbc6 	bl	80002c8 <__aeabi_dsub>
 8012b3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012b40:	e9ca 0100 	strd	r0, r1, [sl]
 8012b44:	e694      	b.n	8012870 <__ieee754_rem_pio2+0x28>
 8012b46:	bf00      	nop
 8012b48:	54400000 	.word	0x54400000
 8012b4c:	3ff921fb 	.word	0x3ff921fb
 8012b50:	1a626331 	.word	0x1a626331
 8012b54:	3dd0b461 	.word	0x3dd0b461
 8012b58:	1a600000 	.word	0x1a600000
 8012b5c:	3dd0b461 	.word	0x3dd0b461
 8012b60:	2e037073 	.word	0x2e037073
 8012b64:	3ba3198a 	.word	0x3ba3198a
 8012b68:	6dc9c883 	.word	0x6dc9c883
 8012b6c:	3fe45f30 	.word	0x3fe45f30
 8012b70:	2e000000 	.word	0x2e000000
 8012b74:	3ba3198a 	.word	0x3ba3198a
 8012b78:	252049c1 	.word	0x252049c1
 8012b7c:	397b839a 	.word	0x397b839a
 8012b80:	3fe921fb 	.word	0x3fe921fb
 8012b84:	4002d97b 	.word	0x4002d97b
 8012b88:	3ff921fb 	.word	0x3ff921fb
 8012b8c:	413921fb 	.word	0x413921fb
 8012b90:	3fe00000 	.word	0x3fe00000
 8012b94:	08014160 	.word	0x08014160
 8012b98:	7fefffff 	.word	0x7fefffff
 8012b9c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012ba0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8012ba4:	ee10 0a10 	vmov	r0, s0
 8012ba8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8012bac:	ee10 6a10 	vmov	r6, s0
 8012bb0:	460f      	mov	r7, r1
 8012bb2:	f7ed fff1 	bl	8000b98 <__aeabi_d2iz>
 8012bb6:	f7ed fcd5 	bl	8000564 <__aeabi_i2d>
 8012bba:	4602      	mov	r2, r0
 8012bbc:	460b      	mov	r3, r1
 8012bbe:	4630      	mov	r0, r6
 8012bc0:	4639      	mov	r1, r7
 8012bc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012bc6:	f7ed fb7f 	bl	80002c8 <__aeabi_dsub>
 8012bca:	4b22      	ldr	r3, [pc, #136]	; (8012c54 <__ieee754_rem_pio2+0x40c>)
 8012bcc:	2200      	movs	r2, #0
 8012bce:	f7ed fd33 	bl	8000638 <__aeabi_dmul>
 8012bd2:	460f      	mov	r7, r1
 8012bd4:	4606      	mov	r6, r0
 8012bd6:	f7ed ffdf 	bl	8000b98 <__aeabi_d2iz>
 8012bda:	f7ed fcc3 	bl	8000564 <__aeabi_i2d>
 8012bde:	4602      	mov	r2, r0
 8012be0:	460b      	mov	r3, r1
 8012be2:	4630      	mov	r0, r6
 8012be4:	4639      	mov	r1, r7
 8012be6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012bea:	f7ed fb6d 	bl	80002c8 <__aeabi_dsub>
 8012bee:	4b19      	ldr	r3, [pc, #100]	; (8012c54 <__ieee754_rem_pio2+0x40c>)
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	f7ed fd21 	bl	8000638 <__aeabi_dmul>
 8012bf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012bfa:	ad04      	add	r5, sp, #16
 8012bfc:	f04f 0803 	mov.w	r8, #3
 8012c00:	46a9      	mov	r9, r5
 8012c02:	2600      	movs	r6, #0
 8012c04:	2700      	movs	r7, #0
 8012c06:	4632      	mov	r2, r6
 8012c08:	463b      	mov	r3, r7
 8012c0a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8012c0e:	46c3      	mov	fp, r8
 8012c10:	3d08      	subs	r5, #8
 8012c12:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012c16:	f7ed ff77 	bl	8000b08 <__aeabi_dcmpeq>
 8012c1a:	2800      	cmp	r0, #0
 8012c1c:	d1f3      	bne.n	8012c06 <__ieee754_rem_pio2+0x3be>
 8012c1e:	4b0e      	ldr	r3, [pc, #56]	; (8012c58 <__ieee754_rem_pio2+0x410>)
 8012c20:	9301      	str	r3, [sp, #4]
 8012c22:	2302      	movs	r3, #2
 8012c24:	9300      	str	r3, [sp, #0]
 8012c26:	4622      	mov	r2, r4
 8012c28:	465b      	mov	r3, fp
 8012c2a:	4651      	mov	r1, sl
 8012c2c:	4648      	mov	r0, r9
 8012c2e:	f000 f993 	bl	8012f58 <__kernel_rem_pio2>
 8012c32:	9b02      	ldr	r3, [sp, #8]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	4683      	mov	fp, r0
 8012c38:	f6bf ae46 	bge.w	80128c8 <__ieee754_rem_pio2+0x80>
 8012c3c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012c40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012c44:	f8ca 3004 	str.w	r3, [sl, #4]
 8012c48:	f8da 300c 	ldr.w	r3, [sl, #12]
 8012c4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012c50:	e73a      	b.n	8012ac8 <__ieee754_rem_pio2+0x280>
 8012c52:	bf00      	nop
 8012c54:	41700000 	.word	0x41700000
 8012c58:	080141e0 	.word	0x080141e0

08012c5c <__ieee754_sqrt>:
 8012c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c60:	ec55 4b10 	vmov	r4, r5, d0
 8012c64:	4e56      	ldr	r6, [pc, #344]	; (8012dc0 <__ieee754_sqrt+0x164>)
 8012c66:	43ae      	bics	r6, r5
 8012c68:	ee10 0a10 	vmov	r0, s0
 8012c6c:	ee10 3a10 	vmov	r3, s0
 8012c70:	4629      	mov	r1, r5
 8012c72:	462a      	mov	r2, r5
 8012c74:	d110      	bne.n	8012c98 <__ieee754_sqrt+0x3c>
 8012c76:	ee10 2a10 	vmov	r2, s0
 8012c7a:	462b      	mov	r3, r5
 8012c7c:	f7ed fcdc 	bl	8000638 <__aeabi_dmul>
 8012c80:	4602      	mov	r2, r0
 8012c82:	460b      	mov	r3, r1
 8012c84:	4620      	mov	r0, r4
 8012c86:	4629      	mov	r1, r5
 8012c88:	f7ed fb20 	bl	80002cc <__adddf3>
 8012c8c:	4604      	mov	r4, r0
 8012c8e:	460d      	mov	r5, r1
 8012c90:	ec45 4b10 	vmov	d0, r4, r5
 8012c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c98:	2d00      	cmp	r5, #0
 8012c9a:	dc10      	bgt.n	8012cbe <__ieee754_sqrt+0x62>
 8012c9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012ca0:	4330      	orrs	r0, r6
 8012ca2:	d0f5      	beq.n	8012c90 <__ieee754_sqrt+0x34>
 8012ca4:	b15d      	cbz	r5, 8012cbe <__ieee754_sqrt+0x62>
 8012ca6:	ee10 2a10 	vmov	r2, s0
 8012caa:	462b      	mov	r3, r5
 8012cac:	ee10 0a10 	vmov	r0, s0
 8012cb0:	f7ed fb0a 	bl	80002c8 <__aeabi_dsub>
 8012cb4:	4602      	mov	r2, r0
 8012cb6:	460b      	mov	r3, r1
 8012cb8:	f7ed fde8 	bl	800088c <__aeabi_ddiv>
 8012cbc:	e7e6      	b.n	8012c8c <__ieee754_sqrt+0x30>
 8012cbe:	1509      	asrs	r1, r1, #20
 8012cc0:	d076      	beq.n	8012db0 <__ieee754_sqrt+0x154>
 8012cc2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012cc6:	07ce      	lsls	r6, r1, #31
 8012cc8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8012ccc:	bf5e      	ittt	pl
 8012cce:	0fda      	lsrpl	r2, r3, #31
 8012cd0:	005b      	lslpl	r3, r3, #1
 8012cd2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8012cd6:	0fda      	lsrs	r2, r3, #31
 8012cd8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8012cdc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8012ce0:	2000      	movs	r0, #0
 8012ce2:	106d      	asrs	r5, r5, #1
 8012ce4:	005b      	lsls	r3, r3, #1
 8012ce6:	f04f 0e16 	mov.w	lr, #22
 8012cea:	4684      	mov	ip, r0
 8012cec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012cf0:	eb0c 0401 	add.w	r4, ip, r1
 8012cf4:	4294      	cmp	r4, r2
 8012cf6:	bfde      	ittt	le
 8012cf8:	1b12      	suble	r2, r2, r4
 8012cfa:	eb04 0c01 	addle.w	ip, r4, r1
 8012cfe:	1840      	addle	r0, r0, r1
 8012d00:	0052      	lsls	r2, r2, #1
 8012d02:	f1be 0e01 	subs.w	lr, lr, #1
 8012d06:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8012d0a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012d0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012d12:	d1ed      	bne.n	8012cf0 <__ieee754_sqrt+0x94>
 8012d14:	4671      	mov	r1, lr
 8012d16:	2720      	movs	r7, #32
 8012d18:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8012d1c:	4562      	cmp	r2, ip
 8012d1e:	eb04 060e 	add.w	r6, r4, lr
 8012d22:	dc02      	bgt.n	8012d2a <__ieee754_sqrt+0xce>
 8012d24:	d113      	bne.n	8012d4e <__ieee754_sqrt+0xf2>
 8012d26:	429e      	cmp	r6, r3
 8012d28:	d811      	bhi.n	8012d4e <__ieee754_sqrt+0xf2>
 8012d2a:	2e00      	cmp	r6, #0
 8012d2c:	eb06 0e04 	add.w	lr, r6, r4
 8012d30:	da43      	bge.n	8012dba <__ieee754_sqrt+0x15e>
 8012d32:	f1be 0f00 	cmp.w	lr, #0
 8012d36:	db40      	blt.n	8012dba <__ieee754_sqrt+0x15e>
 8012d38:	f10c 0801 	add.w	r8, ip, #1
 8012d3c:	eba2 020c 	sub.w	r2, r2, ip
 8012d40:	429e      	cmp	r6, r3
 8012d42:	bf88      	it	hi
 8012d44:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8012d48:	1b9b      	subs	r3, r3, r6
 8012d4a:	4421      	add	r1, r4
 8012d4c:	46c4      	mov	ip, r8
 8012d4e:	0052      	lsls	r2, r2, #1
 8012d50:	3f01      	subs	r7, #1
 8012d52:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8012d56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012d5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012d5e:	d1dd      	bne.n	8012d1c <__ieee754_sqrt+0xc0>
 8012d60:	4313      	orrs	r3, r2
 8012d62:	d006      	beq.n	8012d72 <__ieee754_sqrt+0x116>
 8012d64:	1c4c      	adds	r4, r1, #1
 8012d66:	bf13      	iteet	ne
 8012d68:	3101      	addne	r1, #1
 8012d6a:	3001      	addeq	r0, #1
 8012d6c:	4639      	moveq	r1, r7
 8012d6e:	f021 0101 	bicne.w	r1, r1, #1
 8012d72:	1043      	asrs	r3, r0, #1
 8012d74:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012d78:	0849      	lsrs	r1, r1, #1
 8012d7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012d7e:	07c2      	lsls	r2, r0, #31
 8012d80:	bf48      	it	mi
 8012d82:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8012d86:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8012d8a:	460c      	mov	r4, r1
 8012d8c:	463d      	mov	r5, r7
 8012d8e:	e77f      	b.n	8012c90 <__ieee754_sqrt+0x34>
 8012d90:	0ada      	lsrs	r2, r3, #11
 8012d92:	3815      	subs	r0, #21
 8012d94:	055b      	lsls	r3, r3, #21
 8012d96:	2a00      	cmp	r2, #0
 8012d98:	d0fa      	beq.n	8012d90 <__ieee754_sqrt+0x134>
 8012d9a:	02d7      	lsls	r7, r2, #11
 8012d9c:	d50a      	bpl.n	8012db4 <__ieee754_sqrt+0x158>
 8012d9e:	f1c1 0420 	rsb	r4, r1, #32
 8012da2:	fa23 f404 	lsr.w	r4, r3, r4
 8012da6:	1e4d      	subs	r5, r1, #1
 8012da8:	408b      	lsls	r3, r1
 8012daa:	4322      	orrs	r2, r4
 8012dac:	1b41      	subs	r1, r0, r5
 8012dae:	e788      	b.n	8012cc2 <__ieee754_sqrt+0x66>
 8012db0:	4608      	mov	r0, r1
 8012db2:	e7f0      	b.n	8012d96 <__ieee754_sqrt+0x13a>
 8012db4:	0052      	lsls	r2, r2, #1
 8012db6:	3101      	adds	r1, #1
 8012db8:	e7ef      	b.n	8012d9a <__ieee754_sqrt+0x13e>
 8012dba:	46e0      	mov	r8, ip
 8012dbc:	e7be      	b.n	8012d3c <__ieee754_sqrt+0xe0>
 8012dbe:	bf00      	nop
 8012dc0:	7ff00000 	.word	0x7ff00000
 8012dc4:	00000000 	.word	0x00000000

08012dc8 <__kernel_cos>:
 8012dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dcc:	ec57 6b10 	vmov	r6, r7, d0
 8012dd0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012dd4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012dd8:	ed8d 1b00 	vstr	d1, [sp]
 8012ddc:	da07      	bge.n	8012dee <__kernel_cos+0x26>
 8012dde:	ee10 0a10 	vmov	r0, s0
 8012de2:	4639      	mov	r1, r7
 8012de4:	f7ed fed8 	bl	8000b98 <__aeabi_d2iz>
 8012de8:	2800      	cmp	r0, #0
 8012dea:	f000 8088 	beq.w	8012efe <__kernel_cos+0x136>
 8012dee:	4632      	mov	r2, r6
 8012df0:	463b      	mov	r3, r7
 8012df2:	4630      	mov	r0, r6
 8012df4:	4639      	mov	r1, r7
 8012df6:	f7ed fc1f 	bl	8000638 <__aeabi_dmul>
 8012dfa:	4b51      	ldr	r3, [pc, #324]	; (8012f40 <__kernel_cos+0x178>)
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	4604      	mov	r4, r0
 8012e00:	460d      	mov	r5, r1
 8012e02:	f7ed fc19 	bl	8000638 <__aeabi_dmul>
 8012e06:	a340      	add	r3, pc, #256	; (adr r3, 8012f08 <__kernel_cos+0x140>)
 8012e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e0c:	4682      	mov	sl, r0
 8012e0e:	468b      	mov	fp, r1
 8012e10:	4620      	mov	r0, r4
 8012e12:	4629      	mov	r1, r5
 8012e14:	f7ed fc10 	bl	8000638 <__aeabi_dmul>
 8012e18:	a33d      	add	r3, pc, #244	; (adr r3, 8012f10 <__kernel_cos+0x148>)
 8012e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1e:	f7ed fa55 	bl	80002cc <__adddf3>
 8012e22:	4622      	mov	r2, r4
 8012e24:	462b      	mov	r3, r5
 8012e26:	f7ed fc07 	bl	8000638 <__aeabi_dmul>
 8012e2a:	a33b      	add	r3, pc, #236	; (adr r3, 8012f18 <__kernel_cos+0x150>)
 8012e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e30:	f7ed fa4a 	bl	80002c8 <__aeabi_dsub>
 8012e34:	4622      	mov	r2, r4
 8012e36:	462b      	mov	r3, r5
 8012e38:	f7ed fbfe 	bl	8000638 <__aeabi_dmul>
 8012e3c:	a338      	add	r3, pc, #224	; (adr r3, 8012f20 <__kernel_cos+0x158>)
 8012e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e42:	f7ed fa43 	bl	80002cc <__adddf3>
 8012e46:	4622      	mov	r2, r4
 8012e48:	462b      	mov	r3, r5
 8012e4a:	f7ed fbf5 	bl	8000638 <__aeabi_dmul>
 8012e4e:	a336      	add	r3, pc, #216	; (adr r3, 8012f28 <__kernel_cos+0x160>)
 8012e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e54:	f7ed fa38 	bl	80002c8 <__aeabi_dsub>
 8012e58:	4622      	mov	r2, r4
 8012e5a:	462b      	mov	r3, r5
 8012e5c:	f7ed fbec 	bl	8000638 <__aeabi_dmul>
 8012e60:	a333      	add	r3, pc, #204	; (adr r3, 8012f30 <__kernel_cos+0x168>)
 8012e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e66:	f7ed fa31 	bl	80002cc <__adddf3>
 8012e6a:	4622      	mov	r2, r4
 8012e6c:	462b      	mov	r3, r5
 8012e6e:	f7ed fbe3 	bl	8000638 <__aeabi_dmul>
 8012e72:	4622      	mov	r2, r4
 8012e74:	462b      	mov	r3, r5
 8012e76:	f7ed fbdf 	bl	8000638 <__aeabi_dmul>
 8012e7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e7e:	4604      	mov	r4, r0
 8012e80:	460d      	mov	r5, r1
 8012e82:	4630      	mov	r0, r6
 8012e84:	4639      	mov	r1, r7
 8012e86:	f7ed fbd7 	bl	8000638 <__aeabi_dmul>
 8012e8a:	460b      	mov	r3, r1
 8012e8c:	4602      	mov	r2, r0
 8012e8e:	4629      	mov	r1, r5
 8012e90:	4620      	mov	r0, r4
 8012e92:	f7ed fa19 	bl	80002c8 <__aeabi_dsub>
 8012e96:	4b2b      	ldr	r3, [pc, #172]	; (8012f44 <__kernel_cos+0x17c>)
 8012e98:	4598      	cmp	r8, r3
 8012e9a:	4606      	mov	r6, r0
 8012e9c:	460f      	mov	r7, r1
 8012e9e:	dc10      	bgt.n	8012ec2 <__kernel_cos+0xfa>
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	460b      	mov	r3, r1
 8012ea4:	4650      	mov	r0, sl
 8012ea6:	4659      	mov	r1, fp
 8012ea8:	f7ed fa0e 	bl	80002c8 <__aeabi_dsub>
 8012eac:	460b      	mov	r3, r1
 8012eae:	4926      	ldr	r1, [pc, #152]	; (8012f48 <__kernel_cos+0x180>)
 8012eb0:	4602      	mov	r2, r0
 8012eb2:	2000      	movs	r0, #0
 8012eb4:	f7ed fa08 	bl	80002c8 <__aeabi_dsub>
 8012eb8:	ec41 0b10 	vmov	d0, r0, r1
 8012ebc:	b003      	add	sp, #12
 8012ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ec2:	4b22      	ldr	r3, [pc, #136]	; (8012f4c <__kernel_cos+0x184>)
 8012ec4:	4920      	ldr	r1, [pc, #128]	; (8012f48 <__kernel_cos+0x180>)
 8012ec6:	4598      	cmp	r8, r3
 8012ec8:	bfcc      	ite	gt
 8012eca:	4d21      	ldrgt	r5, [pc, #132]	; (8012f50 <__kernel_cos+0x188>)
 8012ecc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012ed0:	2400      	movs	r4, #0
 8012ed2:	4622      	mov	r2, r4
 8012ed4:	462b      	mov	r3, r5
 8012ed6:	2000      	movs	r0, #0
 8012ed8:	f7ed f9f6 	bl	80002c8 <__aeabi_dsub>
 8012edc:	4622      	mov	r2, r4
 8012ede:	4680      	mov	r8, r0
 8012ee0:	4689      	mov	r9, r1
 8012ee2:	462b      	mov	r3, r5
 8012ee4:	4650      	mov	r0, sl
 8012ee6:	4659      	mov	r1, fp
 8012ee8:	f7ed f9ee 	bl	80002c8 <__aeabi_dsub>
 8012eec:	4632      	mov	r2, r6
 8012eee:	463b      	mov	r3, r7
 8012ef0:	f7ed f9ea 	bl	80002c8 <__aeabi_dsub>
 8012ef4:	4602      	mov	r2, r0
 8012ef6:	460b      	mov	r3, r1
 8012ef8:	4640      	mov	r0, r8
 8012efa:	4649      	mov	r1, r9
 8012efc:	e7da      	b.n	8012eb4 <__kernel_cos+0xec>
 8012efe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012f38 <__kernel_cos+0x170>
 8012f02:	e7db      	b.n	8012ebc <__kernel_cos+0xf4>
 8012f04:	f3af 8000 	nop.w
 8012f08:	be8838d4 	.word	0xbe8838d4
 8012f0c:	bda8fae9 	.word	0xbda8fae9
 8012f10:	bdb4b1c4 	.word	0xbdb4b1c4
 8012f14:	3e21ee9e 	.word	0x3e21ee9e
 8012f18:	809c52ad 	.word	0x809c52ad
 8012f1c:	3e927e4f 	.word	0x3e927e4f
 8012f20:	19cb1590 	.word	0x19cb1590
 8012f24:	3efa01a0 	.word	0x3efa01a0
 8012f28:	16c15177 	.word	0x16c15177
 8012f2c:	3f56c16c 	.word	0x3f56c16c
 8012f30:	5555554c 	.word	0x5555554c
 8012f34:	3fa55555 	.word	0x3fa55555
 8012f38:	00000000 	.word	0x00000000
 8012f3c:	3ff00000 	.word	0x3ff00000
 8012f40:	3fe00000 	.word	0x3fe00000
 8012f44:	3fd33332 	.word	0x3fd33332
 8012f48:	3ff00000 	.word	0x3ff00000
 8012f4c:	3fe90000 	.word	0x3fe90000
 8012f50:	3fd20000 	.word	0x3fd20000
 8012f54:	00000000 	.word	0x00000000

08012f58 <__kernel_rem_pio2>:
 8012f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f5c:	ed2d 8b02 	vpush	{d8}
 8012f60:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8012f64:	f112 0f14 	cmn.w	r2, #20
 8012f68:	9308      	str	r3, [sp, #32]
 8012f6a:	9101      	str	r1, [sp, #4]
 8012f6c:	4bc6      	ldr	r3, [pc, #792]	; (8013288 <__kernel_rem_pio2+0x330>)
 8012f6e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8012f70:	9009      	str	r0, [sp, #36]	; 0x24
 8012f72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012f76:	9304      	str	r3, [sp, #16]
 8012f78:	9b08      	ldr	r3, [sp, #32]
 8012f7a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012f7e:	bfa8      	it	ge
 8012f80:	1ed4      	subge	r4, r2, #3
 8012f82:	9306      	str	r3, [sp, #24]
 8012f84:	bfb2      	itee	lt
 8012f86:	2400      	movlt	r4, #0
 8012f88:	2318      	movge	r3, #24
 8012f8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8012f8e:	f06f 0317 	mvn.w	r3, #23
 8012f92:	fb04 3303 	mla	r3, r4, r3, r3
 8012f96:	eb03 0a02 	add.w	sl, r3, r2
 8012f9a:	9b04      	ldr	r3, [sp, #16]
 8012f9c:	9a06      	ldr	r2, [sp, #24]
 8012f9e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8013278 <__kernel_rem_pio2+0x320>
 8012fa2:	eb03 0802 	add.w	r8, r3, r2
 8012fa6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012fa8:	1aa7      	subs	r7, r4, r2
 8012faa:	ae20      	add	r6, sp, #128	; 0x80
 8012fac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012fb0:	2500      	movs	r5, #0
 8012fb2:	4545      	cmp	r5, r8
 8012fb4:	dd18      	ble.n	8012fe8 <__kernel_rem_pio2+0x90>
 8012fb6:	9b08      	ldr	r3, [sp, #32]
 8012fb8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012fbc:	aa20      	add	r2, sp, #128	; 0x80
 8012fbe:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8013278 <__kernel_rem_pio2+0x320>
 8012fc2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012fc6:	f1c3 0301 	rsb	r3, r3, #1
 8012fca:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8012fce:	9307      	str	r3, [sp, #28]
 8012fd0:	9b07      	ldr	r3, [sp, #28]
 8012fd2:	9a04      	ldr	r2, [sp, #16]
 8012fd4:	4443      	add	r3, r8
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	db2f      	blt.n	801303a <__kernel_rem_pio2+0xe2>
 8012fda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012fde:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012fe2:	462f      	mov	r7, r5
 8012fe4:	2600      	movs	r6, #0
 8012fe6:	e01b      	b.n	8013020 <__kernel_rem_pio2+0xc8>
 8012fe8:	42ef      	cmn	r7, r5
 8012fea:	d407      	bmi.n	8012ffc <__kernel_rem_pio2+0xa4>
 8012fec:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012ff0:	f7ed fab8 	bl	8000564 <__aeabi_i2d>
 8012ff4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012ff8:	3501      	adds	r5, #1
 8012ffa:	e7da      	b.n	8012fb2 <__kernel_rem_pio2+0x5a>
 8012ffc:	ec51 0b18 	vmov	r0, r1, d8
 8013000:	e7f8      	b.n	8012ff4 <__kernel_rem_pio2+0x9c>
 8013002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013006:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801300a:	f7ed fb15 	bl	8000638 <__aeabi_dmul>
 801300e:	4602      	mov	r2, r0
 8013010:	460b      	mov	r3, r1
 8013012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013016:	f7ed f959 	bl	80002cc <__adddf3>
 801301a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801301e:	3601      	adds	r6, #1
 8013020:	9b06      	ldr	r3, [sp, #24]
 8013022:	429e      	cmp	r6, r3
 8013024:	f1a7 0708 	sub.w	r7, r7, #8
 8013028:	ddeb      	ble.n	8013002 <__kernel_rem_pio2+0xaa>
 801302a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801302e:	3508      	adds	r5, #8
 8013030:	ecab 7b02 	vstmia	fp!, {d7}
 8013034:	f108 0801 	add.w	r8, r8, #1
 8013038:	e7ca      	b.n	8012fd0 <__kernel_rem_pio2+0x78>
 801303a:	9b04      	ldr	r3, [sp, #16]
 801303c:	aa0c      	add	r2, sp, #48	; 0x30
 801303e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013042:	930b      	str	r3, [sp, #44]	; 0x2c
 8013044:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8013046:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801304a:	9c04      	ldr	r4, [sp, #16]
 801304c:	930a      	str	r3, [sp, #40]	; 0x28
 801304e:	ab98      	add	r3, sp, #608	; 0x260
 8013050:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013054:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8013058:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 801305c:	f8cd b008 	str.w	fp, [sp, #8]
 8013060:	4625      	mov	r5, r4
 8013062:	2d00      	cmp	r5, #0
 8013064:	dc78      	bgt.n	8013158 <__kernel_rem_pio2+0x200>
 8013066:	ec47 6b10 	vmov	d0, r6, r7
 801306a:	4650      	mov	r0, sl
 801306c:	f000 fc94 	bl	8013998 <scalbn>
 8013070:	ec57 6b10 	vmov	r6, r7, d0
 8013074:	2200      	movs	r2, #0
 8013076:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801307a:	ee10 0a10 	vmov	r0, s0
 801307e:	4639      	mov	r1, r7
 8013080:	f7ed fada 	bl	8000638 <__aeabi_dmul>
 8013084:	ec41 0b10 	vmov	d0, r0, r1
 8013088:	f000 fb7a 	bl	8013780 <floor>
 801308c:	4b7f      	ldr	r3, [pc, #508]	; (801328c <__kernel_rem_pio2+0x334>)
 801308e:	ec51 0b10 	vmov	r0, r1, d0
 8013092:	2200      	movs	r2, #0
 8013094:	f7ed fad0 	bl	8000638 <__aeabi_dmul>
 8013098:	4602      	mov	r2, r0
 801309a:	460b      	mov	r3, r1
 801309c:	4630      	mov	r0, r6
 801309e:	4639      	mov	r1, r7
 80130a0:	f7ed f912 	bl	80002c8 <__aeabi_dsub>
 80130a4:	460f      	mov	r7, r1
 80130a6:	4606      	mov	r6, r0
 80130a8:	f7ed fd76 	bl	8000b98 <__aeabi_d2iz>
 80130ac:	9007      	str	r0, [sp, #28]
 80130ae:	f7ed fa59 	bl	8000564 <__aeabi_i2d>
 80130b2:	4602      	mov	r2, r0
 80130b4:	460b      	mov	r3, r1
 80130b6:	4630      	mov	r0, r6
 80130b8:	4639      	mov	r1, r7
 80130ba:	f7ed f905 	bl	80002c8 <__aeabi_dsub>
 80130be:	f1ba 0f00 	cmp.w	sl, #0
 80130c2:	4606      	mov	r6, r0
 80130c4:	460f      	mov	r7, r1
 80130c6:	dd70      	ble.n	80131aa <__kernel_rem_pio2+0x252>
 80130c8:	1e62      	subs	r2, r4, #1
 80130ca:	ab0c      	add	r3, sp, #48	; 0x30
 80130cc:	9d07      	ldr	r5, [sp, #28]
 80130ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80130d2:	f1ca 0118 	rsb	r1, sl, #24
 80130d6:	fa40 f301 	asr.w	r3, r0, r1
 80130da:	441d      	add	r5, r3
 80130dc:	408b      	lsls	r3, r1
 80130de:	1ac0      	subs	r0, r0, r3
 80130e0:	ab0c      	add	r3, sp, #48	; 0x30
 80130e2:	9507      	str	r5, [sp, #28]
 80130e4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80130e8:	f1ca 0317 	rsb	r3, sl, #23
 80130ec:	fa40 f303 	asr.w	r3, r0, r3
 80130f0:	9302      	str	r3, [sp, #8]
 80130f2:	9b02      	ldr	r3, [sp, #8]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	dd66      	ble.n	80131c6 <__kernel_rem_pio2+0x26e>
 80130f8:	9b07      	ldr	r3, [sp, #28]
 80130fa:	2200      	movs	r2, #0
 80130fc:	3301      	adds	r3, #1
 80130fe:	9307      	str	r3, [sp, #28]
 8013100:	4615      	mov	r5, r2
 8013102:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013106:	4294      	cmp	r4, r2
 8013108:	f300 8099 	bgt.w	801323e <__kernel_rem_pio2+0x2e6>
 801310c:	f1ba 0f00 	cmp.w	sl, #0
 8013110:	dd07      	ble.n	8013122 <__kernel_rem_pio2+0x1ca>
 8013112:	f1ba 0f01 	cmp.w	sl, #1
 8013116:	f000 80a5 	beq.w	8013264 <__kernel_rem_pio2+0x30c>
 801311a:	f1ba 0f02 	cmp.w	sl, #2
 801311e:	f000 80c1 	beq.w	80132a4 <__kernel_rem_pio2+0x34c>
 8013122:	9b02      	ldr	r3, [sp, #8]
 8013124:	2b02      	cmp	r3, #2
 8013126:	d14e      	bne.n	80131c6 <__kernel_rem_pio2+0x26e>
 8013128:	4632      	mov	r2, r6
 801312a:	463b      	mov	r3, r7
 801312c:	4958      	ldr	r1, [pc, #352]	; (8013290 <__kernel_rem_pio2+0x338>)
 801312e:	2000      	movs	r0, #0
 8013130:	f7ed f8ca 	bl	80002c8 <__aeabi_dsub>
 8013134:	4606      	mov	r6, r0
 8013136:	460f      	mov	r7, r1
 8013138:	2d00      	cmp	r5, #0
 801313a:	d044      	beq.n	80131c6 <__kernel_rem_pio2+0x26e>
 801313c:	4650      	mov	r0, sl
 801313e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8013280 <__kernel_rem_pio2+0x328>
 8013142:	f000 fc29 	bl	8013998 <scalbn>
 8013146:	4630      	mov	r0, r6
 8013148:	4639      	mov	r1, r7
 801314a:	ec53 2b10 	vmov	r2, r3, d0
 801314e:	f7ed f8bb 	bl	80002c8 <__aeabi_dsub>
 8013152:	4606      	mov	r6, r0
 8013154:	460f      	mov	r7, r1
 8013156:	e036      	b.n	80131c6 <__kernel_rem_pio2+0x26e>
 8013158:	4b4e      	ldr	r3, [pc, #312]	; (8013294 <__kernel_rem_pio2+0x33c>)
 801315a:	2200      	movs	r2, #0
 801315c:	4630      	mov	r0, r6
 801315e:	4639      	mov	r1, r7
 8013160:	f7ed fa6a 	bl	8000638 <__aeabi_dmul>
 8013164:	f7ed fd18 	bl	8000b98 <__aeabi_d2iz>
 8013168:	f7ed f9fc 	bl	8000564 <__aeabi_i2d>
 801316c:	4b4a      	ldr	r3, [pc, #296]	; (8013298 <__kernel_rem_pio2+0x340>)
 801316e:	2200      	movs	r2, #0
 8013170:	4680      	mov	r8, r0
 8013172:	4689      	mov	r9, r1
 8013174:	f7ed fa60 	bl	8000638 <__aeabi_dmul>
 8013178:	4602      	mov	r2, r0
 801317a:	460b      	mov	r3, r1
 801317c:	4630      	mov	r0, r6
 801317e:	4639      	mov	r1, r7
 8013180:	f7ed f8a2 	bl	80002c8 <__aeabi_dsub>
 8013184:	f7ed fd08 	bl	8000b98 <__aeabi_d2iz>
 8013188:	9b02      	ldr	r3, [sp, #8]
 801318a:	f843 0b04 	str.w	r0, [r3], #4
 801318e:	3d01      	subs	r5, #1
 8013190:	9302      	str	r3, [sp, #8]
 8013192:	ab70      	add	r3, sp, #448	; 0x1c0
 8013194:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801319c:	4640      	mov	r0, r8
 801319e:	4649      	mov	r1, r9
 80131a0:	f7ed f894 	bl	80002cc <__adddf3>
 80131a4:	4606      	mov	r6, r0
 80131a6:	460f      	mov	r7, r1
 80131a8:	e75b      	b.n	8013062 <__kernel_rem_pio2+0x10a>
 80131aa:	d105      	bne.n	80131b8 <__kernel_rem_pio2+0x260>
 80131ac:	1e63      	subs	r3, r4, #1
 80131ae:	aa0c      	add	r2, sp, #48	; 0x30
 80131b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80131b4:	15c3      	asrs	r3, r0, #23
 80131b6:	e79b      	b.n	80130f0 <__kernel_rem_pio2+0x198>
 80131b8:	4b38      	ldr	r3, [pc, #224]	; (801329c <__kernel_rem_pio2+0x344>)
 80131ba:	2200      	movs	r2, #0
 80131bc:	f7ed fcc2 	bl	8000b44 <__aeabi_dcmpge>
 80131c0:	2800      	cmp	r0, #0
 80131c2:	d139      	bne.n	8013238 <__kernel_rem_pio2+0x2e0>
 80131c4:	9002      	str	r0, [sp, #8]
 80131c6:	2200      	movs	r2, #0
 80131c8:	2300      	movs	r3, #0
 80131ca:	4630      	mov	r0, r6
 80131cc:	4639      	mov	r1, r7
 80131ce:	f7ed fc9b 	bl	8000b08 <__aeabi_dcmpeq>
 80131d2:	2800      	cmp	r0, #0
 80131d4:	f000 80b4 	beq.w	8013340 <__kernel_rem_pio2+0x3e8>
 80131d8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 80131dc:	465b      	mov	r3, fp
 80131de:	2200      	movs	r2, #0
 80131e0:	9904      	ldr	r1, [sp, #16]
 80131e2:	428b      	cmp	r3, r1
 80131e4:	da65      	bge.n	80132b2 <__kernel_rem_pio2+0x35a>
 80131e6:	2a00      	cmp	r2, #0
 80131e8:	d07b      	beq.n	80132e2 <__kernel_rem_pio2+0x38a>
 80131ea:	ab0c      	add	r3, sp, #48	; 0x30
 80131ec:	f1aa 0a18 	sub.w	sl, sl, #24
 80131f0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	f000 80a0 	beq.w	801333a <__kernel_rem_pio2+0x3e2>
 80131fa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8013280 <__kernel_rem_pio2+0x328>
 80131fe:	4650      	mov	r0, sl
 8013200:	f000 fbca 	bl	8013998 <scalbn>
 8013204:	4f23      	ldr	r7, [pc, #140]	; (8013294 <__kernel_rem_pio2+0x33c>)
 8013206:	ec55 4b10 	vmov	r4, r5, d0
 801320a:	46d8      	mov	r8, fp
 801320c:	2600      	movs	r6, #0
 801320e:	f1b8 0f00 	cmp.w	r8, #0
 8013212:	f280 80cf 	bge.w	80133b4 <__kernel_rem_pio2+0x45c>
 8013216:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8013278 <__kernel_rem_pio2+0x320>
 801321a:	465f      	mov	r7, fp
 801321c:	f04f 0800 	mov.w	r8, #0
 8013220:	2f00      	cmp	r7, #0
 8013222:	f2c0 80fd 	blt.w	8013420 <__kernel_rem_pio2+0x4c8>
 8013226:	ab70      	add	r3, sp, #448	; 0x1c0
 8013228:	f8df a074 	ldr.w	sl, [pc, #116]	; 80132a0 <__kernel_rem_pio2+0x348>
 801322c:	ec55 4b18 	vmov	r4, r5, d8
 8013230:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8013234:	2600      	movs	r6, #0
 8013236:	e0e5      	b.n	8013404 <__kernel_rem_pio2+0x4ac>
 8013238:	2302      	movs	r3, #2
 801323a:	9302      	str	r3, [sp, #8]
 801323c:	e75c      	b.n	80130f8 <__kernel_rem_pio2+0x1a0>
 801323e:	f8db 3000 	ldr.w	r3, [fp]
 8013242:	b955      	cbnz	r5, 801325a <__kernel_rem_pio2+0x302>
 8013244:	b123      	cbz	r3, 8013250 <__kernel_rem_pio2+0x2f8>
 8013246:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801324a:	f8cb 3000 	str.w	r3, [fp]
 801324e:	2301      	movs	r3, #1
 8013250:	3201      	adds	r2, #1
 8013252:	f10b 0b04 	add.w	fp, fp, #4
 8013256:	461d      	mov	r5, r3
 8013258:	e755      	b.n	8013106 <__kernel_rem_pio2+0x1ae>
 801325a:	1acb      	subs	r3, r1, r3
 801325c:	f8cb 3000 	str.w	r3, [fp]
 8013260:	462b      	mov	r3, r5
 8013262:	e7f5      	b.n	8013250 <__kernel_rem_pio2+0x2f8>
 8013264:	1e62      	subs	r2, r4, #1
 8013266:	ab0c      	add	r3, sp, #48	; 0x30
 8013268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801326c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013270:	a90c      	add	r1, sp, #48	; 0x30
 8013272:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013276:	e754      	b.n	8013122 <__kernel_rem_pio2+0x1ca>
	...
 8013284:	3ff00000 	.word	0x3ff00000
 8013288:	08014328 	.word	0x08014328
 801328c:	40200000 	.word	0x40200000
 8013290:	3ff00000 	.word	0x3ff00000
 8013294:	3e700000 	.word	0x3e700000
 8013298:	41700000 	.word	0x41700000
 801329c:	3fe00000 	.word	0x3fe00000
 80132a0:	080142e8 	.word	0x080142e8
 80132a4:	1e62      	subs	r2, r4, #1
 80132a6:	ab0c      	add	r3, sp, #48	; 0x30
 80132a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80132b0:	e7de      	b.n	8013270 <__kernel_rem_pio2+0x318>
 80132b2:	a90c      	add	r1, sp, #48	; 0x30
 80132b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80132b8:	3b01      	subs	r3, #1
 80132ba:	430a      	orrs	r2, r1
 80132bc:	e790      	b.n	80131e0 <__kernel_rem_pio2+0x288>
 80132be:	3301      	adds	r3, #1
 80132c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80132c4:	2900      	cmp	r1, #0
 80132c6:	d0fa      	beq.n	80132be <__kernel_rem_pio2+0x366>
 80132c8:	9a08      	ldr	r2, [sp, #32]
 80132ca:	18e3      	adds	r3, r4, r3
 80132cc:	18a6      	adds	r6, r4, r2
 80132ce:	aa20      	add	r2, sp, #128	; 0x80
 80132d0:	1c65      	adds	r5, r4, #1
 80132d2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80132d6:	9302      	str	r3, [sp, #8]
 80132d8:	9b02      	ldr	r3, [sp, #8]
 80132da:	42ab      	cmp	r3, r5
 80132dc:	da04      	bge.n	80132e8 <__kernel_rem_pio2+0x390>
 80132de:	461c      	mov	r4, r3
 80132e0:	e6b5      	b.n	801304e <__kernel_rem_pio2+0xf6>
 80132e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80132e4:	2301      	movs	r3, #1
 80132e6:	e7eb      	b.n	80132c0 <__kernel_rem_pio2+0x368>
 80132e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80132ee:	f7ed f939 	bl	8000564 <__aeabi_i2d>
 80132f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80132f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132f8:	46b3      	mov	fp, r6
 80132fa:	461c      	mov	r4, r3
 80132fc:	2700      	movs	r7, #0
 80132fe:	f04f 0800 	mov.w	r8, #0
 8013302:	f04f 0900 	mov.w	r9, #0
 8013306:	9b06      	ldr	r3, [sp, #24]
 8013308:	429f      	cmp	r7, r3
 801330a:	dd06      	ble.n	801331a <__kernel_rem_pio2+0x3c2>
 801330c:	ab70      	add	r3, sp, #448	; 0x1c0
 801330e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013312:	e9c3 8900 	strd	r8, r9, [r3]
 8013316:	3501      	adds	r5, #1
 8013318:	e7de      	b.n	80132d8 <__kernel_rem_pio2+0x380>
 801331a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801331e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013322:	f7ed f989 	bl	8000638 <__aeabi_dmul>
 8013326:	4602      	mov	r2, r0
 8013328:	460b      	mov	r3, r1
 801332a:	4640      	mov	r0, r8
 801332c:	4649      	mov	r1, r9
 801332e:	f7ec ffcd 	bl	80002cc <__adddf3>
 8013332:	3701      	adds	r7, #1
 8013334:	4680      	mov	r8, r0
 8013336:	4689      	mov	r9, r1
 8013338:	e7e5      	b.n	8013306 <__kernel_rem_pio2+0x3ae>
 801333a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801333e:	e754      	b.n	80131ea <__kernel_rem_pio2+0x292>
 8013340:	ec47 6b10 	vmov	d0, r6, r7
 8013344:	f1ca 0000 	rsb	r0, sl, #0
 8013348:	f000 fb26 	bl	8013998 <scalbn>
 801334c:	ec57 6b10 	vmov	r6, r7, d0
 8013350:	4b9f      	ldr	r3, [pc, #636]	; (80135d0 <__kernel_rem_pio2+0x678>)
 8013352:	ee10 0a10 	vmov	r0, s0
 8013356:	2200      	movs	r2, #0
 8013358:	4639      	mov	r1, r7
 801335a:	f7ed fbf3 	bl	8000b44 <__aeabi_dcmpge>
 801335e:	b300      	cbz	r0, 80133a2 <__kernel_rem_pio2+0x44a>
 8013360:	4b9c      	ldr	r3, [pc, #624]	; (80135d4 <__kernel_rem_pio2+0x67c>)
 8013362:	2200      	movs	r2, #0
 8013364:	4630      	mov	r0, r6
 8013366:	4639      	mov	r1, r7
 8013368:	f7ed f966 	bl	8000638 <__aeabi_dmul>
 801336c:	f7ed fc14 	bl	8000b98 <__aeabi_d2iz>
 8013370:	4605      	mov	r5, r0
 8013372:	f7ed f8f7 	bl	8000564 <__aeabi_i2d>
 8013376:	4b96      	ldr	r3, [pc, #600]	; (80135d0 <__kernel_rem_pio2+0x678>)
 8013378:	2200      	movs	r2, #0
 801337a:	f7ed f95d 	bl	8000638 <__aeabi_dmul>
 801337e:	460b      	mov	r3, r1
 8013380:	4602      	mov	r2, r0
 8013382:	4639      	mov	r1, r7
 8013384:	4630      	mov	r0, r6
 8013386:	f7ec ff9f 	bl	80002c8 <__aeabi_dsub>
 801338a:	f7ed fc05 	bl	8000b98 <__aeabi_d2iz>
 801338e:	f104 0b01 	add.w	fp, r4, #1
 8013392:	ab0c      	add	r3, sp, #48	; 0x30
 8013394:	f10a 0a18 	add.w	sl, sl, #24
 8013398:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801339c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80133a0:	e72b      	b.n	80131fa <__kernel_rem_pio2+0x2a2>
 80133a2:	4630      	mov	r0, r6
 80133a4:	4639      	mov	r1, r7
 80133a6:	f7ed fbf7 	bl	8000b98 <__aeabi_d2iz>
 80133aa:	ab0c      	add	r3, sp, #48	; 0x30
 80133ac:	46a3      	mov	fp, r4
 80133ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80133b2:	e722      	b.n	80131fa <__kernel_rem_pio2+0x2a2>
 80133b4:	ab70      	add	r3, sp, #448	; 0x1c0
 80133b6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80133ba:	ab0c      	add	r3, sp, #48	; 0x30
 80133bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80133c0:	f7ed f8d0 	bl	8000564 <__aeabi_i2d>
 80133c4:	4622      	mov	r2, r4
 80133c6:	462b      	mov	r3, r5
 80133c8:	f7ed f936 	bl	8000638 <__aeabi_dmul>
 80133cc:	4632      	mov	r2, r6
 80133ce:	e9c9 0100 	strd	r0, r1, [r9]
 80133d2:	463b      	mov	r3, r7
 80133d4:	4620      	mov	r0, r4
 80133d6:	4629      	mov	r1, r5
 80133d8:	f7ed f92e 	bl	8000638 <__aeabi_dmul>
 80133dc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80133e0:	4604      	mov	r4, r0
 80133e2:	460d      	mov	r5, r1
 80133e4:	e713      	b.n	801320e <__kernel_rem_pio2+0x2b6>
 80133e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80133ea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80133ee:	f7ed f923 	bl	8000638 <__aeabi_dmul>
 80133f2:	4602      	mov	r2, r0
 80133f4:	460b      	mov	r3, r1
 80133f6:	4620      	mov	r0, r4
 80133f8:	4629      	mov	r1, r5
 80133fa:	f7ec ff67 	bl	80002cc <__adddf3>
 80133fe:	3601      	adds	r6, #1
 8013400:	4604      	mov	r4, r0
 8013402:	460d      	mov	r5, r1
 8013404:	9b04      	ldr	r3, [sp, #16]
 8013406:	429e      	cmp	r6, r3
 8013408:	dc01      	bgt.n	801340e <__kernel_rem_pio2+0x4b6>
 801340a:	45b0      	cmp	r8, r6
 801340c:	daeb      	bge.n	80133e6 <__kernel_rem_pio2+0x48e>
 801340e:	ab48      	add	r3, sp, #288	; 0x120
 8013410:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013414:	e9c3 4500 	strd	r4, r5, [r3]
 8013418:	3f01      	subs	r7, #1
 801341a:	f108 0801 	add.w	r8, r8, #1
 801341e:	e6ff      	b.n	8013220 <__kernel_rem_pio2+0x2c8>
 8013420:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013422:	2b02      	cmp	r3, #2
 8013424:	dc0b      	bgt.n	801343e <__kernel_rem_pio2+0x4e6>
 8013426:	2b00      	cmp	r3, #0
 8013428:	dc6e      	bgt.n	8013508 <__kernel_rem_pio2+0x5b0>
 801342a:	d045      	beq.n	80134b8 <__kernel_rem_pio2+0x560>
 801342c:	9b07      	ldr	r3, [sp, #28]
 801342e:	f003 0007 	and.w	r0, r3, #7
 8013432:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8013436:	ecbd 8b02 	vpop	{d8}
 801343a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801343e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013440:	2b03      	cmp	r3, #3
 8013442:	d1f3      	bne.n	801342c <__kernel_rem_pio2+0x4d4>
 8013444:	ab48      	add	r3, sp, #288	; 0x120
 8013446:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801344a:	46d0      	mov	r8, sl
 801344c:	46d9      	mov	r9, fp
 801344e:	f1b9 0f00 	cmp.w	r9, #0
 8013452:	f1a8 0808 	sub.w	r8, r8, #8
 8013456:	dc64      	bgt.n	8013522 <__kernel_rem_pio2+0x5ca>
 8013458:	465c      	mov	r4, fp
 801345a:	2c01      	cmp	r4, #1
 801345c:	f1aa 0a08 	sub.w	sl, sl, #8
 8013460:	dc7e      	bgt.n	8013560 <__kernel_rem_pio2+0x608>
 8013462:	2000      	movs	r0, #0
 8013464:	2100      	movs	r1, #0
 8013466:	f1bb 0f01 	cmp.w	fp, #1
 801346a:	f300 8097 	bgt.w	801359c <__kernel_rem_pio2+0x644>
 801346e:	9b02      	ldr	r3, [sp, #8]
 8013470:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8013474:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8013478:	2b00      	cmp	r3, #0
 801347a:	f040 8099 	bne.w	80135b0 <__kernel_rem_pio2+0x658>
 801347e:	9b01      	ldr	r3, [sp, #4]
 8013480:	e9c3 5600 	strd	r5, r6, [r3]
 8013484:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013488:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801348c:	e7ce      	b.n	801342c <__kernel_rem_pio2+0x4d4>
 801348e:	ab48      	add	r3, sp, #288	; 0x120
 8013490:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013498:	f7ec ff18 	bl	80002cc <__adddf3>
 801349c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80134a0:	f1bb 0f00 	cmp.w	fp, #0
 80134a4:	daf3      	bge.n	801348e <__kernel_rem_pio2+0x536>
 80134a6:	9b02      	ldr	r3, [sp, #8]
 80134a8:	b113      	cbz	r3, 80134b0 <__kernel_rem_pio2+0x558>
 80134aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80134ae:	4619      	mov	r1, r3
 80134b0:	9b01      	ldr	r3, [sp, #4]
 80134b2:	e9c3 0100 	strd	r0, r1, [r3]
 80134b6:	e7b9      	b.n	801342c <__kernel_rem_pio2+0x4d4>
 80134b8:	2000      	movs	r0, #0
 80134ba:	2100      	movs	r1, #0
 80134bc:	e7f0      	b.n	80134a0 <__kernel_rem_pio2+0x548>
 80134be:	ab48      	add	r3, sp, #288	; 0x120
 80134c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80134c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c8:	f7ec ff00 	bl	80002cc <__adddf3>
 80134cc:	3c01      	subs	r4, #1
 80134ce:	2c00      	cmp	r4, #0
 80134d0:	daf5      	bge.n	80134be <__kernel_rem_pio2+0x566>
 80134d2:	9b02      	ldr	r3, [sp, #8]
 80134d4:	b1e3      	cbz	r3, 8013510 <__kernel_rem_pio2+0x5b8>
 80134d6:	4602      	mov	r2, r0
 80134d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80134dc:	9c01      	ldr	r4, [sp, #4]
 80134de:	e9c4 2300 	strd	r2, r3, [r4]
 80134e2:	4602      	mov	r2, r0
 80134e4:	460b      	mov	r3, r1
 80134e6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80134ea:	f7ec feed 	bl	80002c8 <__aeabi_dsub>
 80134ee:	ad4a      	add	r5, sp, #296	; 0x128
 80134f0:	2401      	movs	r4, #1
 80134f2:	45a3      	cmp	fp, r4
 80134f4:	da0f      	bge.n	8013516 <__kernel_rem_pio2+0x5be>
 80134f6:	9b02      	ldr	r3, [sp, #8]
 80134f8:	b113      	cbz	r3, 8013500 <__kernel_rem_pio2+0x5a8>
 80134fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80134fe:	4619      	mov	r1, r3
 8013500:	9b01      	ldr	r3, [sp, #4]
 8013502:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013506:	e791      	b.n	801342c <__kernel_rem_pio2+0x4d4>
 8013508:	465c      	mov	r4, fp
 801350a:	2000      	movs	r0, #0
 801350c:	2100      	movs	r1, #0
 801350e:	e7de      	b.n	80134ce <__kernel_rem_pio2+0x576>
 8013510:	4602      	mov	r2, r0
 8013512:	460b      	mov	r3, r1
 8013514:	e7e2      	b.n	80134dc <__kernel_rem_pio2+0x584>
 8013516:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801351a:	f7ec fed7 	bl	80002cc <__adddf3>
 801351e:	3401      	adds	r4, #1
 8013520:	e7e7      	b.n	80134f2 <__kernel_rem_pio2+0x59a>
 8013522:	e9d8 4500 	ldrd	r4, r5, [r8]
 8013526:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801352a:	4620      	mov	r0, r4
 801352c:	4632      	mov	r2, r6
 801352e:	463b      	mov	r3, r7
 8013530:	4629      	mov	r1, r5
 8013532:	f7ec fecb 	bl	80002cc <__adddf3>
 8013536:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801353a:	4602      	mov	r2, r0
 801353c:	460b      	mov	r3, r1
 801353e:	4620      	mov	r0, r4
 8013540:	4629      	mov	r1, r5
 8013542:	f7ec fec1 	bl	80002c8 <__aeabi_dsub>
 8013546:	4632      	mov	r2, r6
 8013548:	463b      	mov	r3, r7
 801354a:	f7ec febf 	bl	80002cc <__adddf3>
 801354e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013552:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8013556:	ed88 7b00 	vstr	d7, [r8]
 801355a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801355e:	e776      	b.n	801344e <__kernel_rem_pio2+0x4f6>
 8013560:	e9da 8900 	ldrd	r8, r9, [sl]
 8013564:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013568:	4640      	mov	r0, r8
 801356a:	4632      	mov	r2, r6
 801356c:	463b      	mov	r3, r7
 801356e:	4649      	mov	r1, r9
 8013570:	f7ec feac 	bl	80002cc <__adddf3>
 8013574:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013578:	4602      	mov	r2, r0
 801357a:	460b      	mov	r3, r1
 801357c:	4640      	mov	r0, r8
 801357e:	4649      	mov	r1, r9
 8013580:	f7ec fea2 	bl	80002c8 <__aeabi_dsub>
 8013584:	4632      	mov	r2, r6
 8013586:	463b      	mov	r3, r7
 8013588:	f7ec fea0 	bl	80002cc <__adddf3>
 801358c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013590:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013594:	ed8a 7b00 	vstr	d7, [sl]
 8013598:	3c01      	subs	r4, #1
 801359a:	e75e      	b.n	801345a <__kernel_rem_pio2+0x502>
 801359c:	ab48      	add	r3, sp, #288	; 0x120
 801359e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80135a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a6:	f7ec fe91 	bl	80002cc <__adddf3>
 80135aa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80135ae:	e75a      	b.n	8013466 <__kernel_rem_pio2+0x50e>
 80135b0:	9b01      	ldr	r3, [sp, #4]
 80135b2:	9a01      	ldr	r2, [sp, #4]
 80135b4:	601d      	str	r5, [r3, #0]
 80135b6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80135ba:	605c      	str	r4, [r3, #4]
 80135bc:	609f      	str	r7, [r3, #8]
 80135be:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80135c2:	60d3      	str	r3, [r2, #12]
 80135c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80135c8:	6110      	str	r0, [r2, #16]
 80135ca:	6153      	str	r3, [r2, #20]
 80135cc:	e72e      	b.n	801342c <__kernel_rem_pio2+0x4d4>
 80135ce:	bf00      	nop
 80135d0:	41700000 	.word	0x41700000
 80135d4:	3e700000 	.word	0x3e700000

080135d8 <__kernel_sin>:
 80135d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135dc:	ed2d 8b04 	vpush	{d8-d9}
 80135e0:	eeb0 8a41 	vmov.f32	s16, s2
 80135e4:	eef0 8a61 	vmov.f32	s17, s3
 80135e8:	ec55 4b10 	vmov	r4, r5, d0
 80135ec:	b083      	sub	sp, #12
 80135ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80135f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80135f6:	9001      	str	r0, [sp, #4]
 80135f8:	da06      	bge.n	8013608 <__kernel_sin+0x30>
 80135fa:	ee10 0a10 	vmov	r0, s0
 80135fe:	4629      	mov	r1, r5
 8013600:	f7ed faca 	bl	8000b98 <__aeabi_d2iz>
 8013604:	2800      	cmp	r0, #0
 8013606:	d051      	beq.n	80136ac <__kernel_sin+0xd4>
 8013608:	4622      	mov	r2, r4
 801360a:	462b      	mov	r3, r5
 801360c:	4620      	mov	r0, r4
 801360e:	4629      	mov	r1, r5
 8013610:	f7ed f812 	bl	8000638 <__aeabi_dmul>
 8013614:	4682      	mov	sl, r0
 8013616:	468b      	mov	fp, r1
 8013618:	4602      	mov	r2, r0
 801361a:	460b      	mov	r3, r1
 801361c:	4620      	mov	r0, r4
 801361e:	4629      	mov	r1, r5
 8013620:	f7ed f80a 	bl	8000638 <__aeabi_dmul>
 8013624:	a341      	add	r3, pc, #260	; (adr r3, 801372c <__kernel_sin+0x154>)
 8013626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801362a:	4680      	mov	r8, r0
 801362c:	4689      	mov	r9, r1
 801362e:	4650      	mov	r0, sl
 8013630:	4659      	mov	r1, fp
 8013632:	f7ed f801 	bl	8000638 <__aeabi_dmul>
 8013636:	a33f      	add	r3, pc, #252	; (adr r3, 8013734 <__kernel_sin+0x15c>)
 8013638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801363c:	f7ec fe44 	bl	80002c8 <__aeabi_dsub>
 8013640:	4652      	mov	r2, sl
 8013642:	465b      	mov	r3, fp
 8013644:	f7ec fff8 	bl	8000638 <__aeabi_dmul>
 8013648:	a33c      	add	r3, pc, #240	; (adr r3, 801373c <__kernel_sin+0x164>)
 801364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801364e:	f7ec fe3d 	bl	80002cc <__adddf3>
 8013652:	4652      	mov	r2, sl
 8013654:	465b      	mov	r3, fp
 8013656:	f7ec ffef 	bl	8000638 <__aeabi_dmul>
 801365a:	a33a      	add	r3, pc, #232	; (adr r3, 8013744 <__kernel_sin+0x16c>)
 801365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013660:	f7ec fe32 	bl	80002c8 <__aeabi_dsub>
 8013664:	4652      	mov	r2, sl
 8013666:	465b      	mov	r3, fp
 8013668:	f7ec ffe6 	bl	8000638 <__aeabi_dmul>
 801366c:	a337      	add	r3, pc, #220	; (adr r3, 801374c <__kernel_sin+0x174>)
 801366e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013672:	f7ec fe2b 	bl	80002cc <__adddf3>
 8013676:	9b01      	ldr	r3, [sp, #4]
 8013678:	4606      	mov	r6, r0
 801367a:	460f      	mov	r7, r1
 801367c:	b9eb      	cbnz	r3, 80136ba <__kernel_sin+0xe2>
 801367e:	4602      	mov	r2, r0
 8013680:	460b      	mov	r3, r1
 8013682:	4650      	mov	r0, sl
 8013684:	4659      	mov	r1, fp
 8013686:	f7ec ffd7 	bl	8000638 <__aeabi_dmul>
 801368a:	a325      	add	r3, pc, #148	; (adr r3, 8013720 <__kernel_sin+0x148>)
 801368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013690:	f7ec fe1a 	bl	80002c8 <__aeabi_dsub>
 8013694:	4642      	mov	r2, r8
 8013696:	464b      	mov	r3, r9
 8013698:	f7ec ffce 	bl	8000638 <__aeabi_dmul>
 801369c:	4602      	mov	r2, r0
 801369e:	460b      	mov	r3, r1
 80136a0:	4620      	mov	r0, r4
 80136a2:	4629      	mov	r1, r5
 80136a4:	f7ec fe12 	bl	80002cc <__adddf3>
 80136a8:	4604      	mov	r4, r0
 80136aa:	460d      	mov	r5, r1
 80136ac:	ec45 4b10 	vmov	d0, r4, r5
 80136b0:	b003      	add	sp, #12
 80136b2:	ecbd 8b04 	vpop	{d8-d9}
 80136b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ba:	4b1b      	ldr	r3, [pc, #108]	; (8013728 <__kernel_sin+0x150>)
 80136bc:	ec51 0b18 	vmov	r0, r1, d8
 80136c0:	2200      	movs	r2, #0
 80136c2:	f7ec ffb9 	bl	8000638 <__aeabi_dmul>
 80136c6:	4632      	mov	r2, r6
 80136c8:	ec41 0b19 	vmov	d9, r0, r1
 80136cc:	463b      	mov	r3, r7
 80136ce:	4640      	mov	r0, r8
 80136d0:	4649      	mov	r1, r9
 80136d2:	f7ec ffb1 	bl	8000638 <__aeabi_dmul>
 80136d6:	4602      	mov	r2, r0
 80136d8:	460b      	mov	r3, r1
 80136da:	ec51 0b19 	vmov	r0, r1, d9
 80136de:	f7ec fdf3 	bl	80002c8 <__aeabi_dsub>
 80136e2:	4652      	mov	r2, sl
 80136e4:	465b      	mov	r3, fp
 80136e6:	f7ec ffa7 	bl	8000638 <__aeabi_dmul>
 80136ea:	ec53 2b18 	vmov	r2, r3, d8
 80136ee:	f7ec fdeb 	bl	80002c8 <__aeabi_dsub>
 80136f2:	a30b      	add	r3, pc, #44	; (adr r3, 8013720 <__kernel_sin+0x148>)
 80136f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136f8:	4606      	mov	r6, r0
 80136fa:	460f      	mov	r7, r1
 80136fc:	4640      	mov	r0, r8
 80136fe:	4649      	mov	r1, r9
 8013700:	f7ec ff9a 	bl	8000638 <__aeabi_dmul>
 8013704:	4602      	mov	r2, r0
 8013706:	460b      	mov	r3, r1
 8013708:	4630      	mov	r0, r6
 801370a:	4639      	mov	r1, r7
 801370c:	f7ec fdde 	bl	80002cc <__adddf3>
 8013710:	4602      	mov	r2, r0
 8013712:	460b      	mov	r3, r1
 8013714:	4620      	mov	r0, r4
 8013716:	4629      	mov	r1, r5
 8013718:	f7ec fdd6 	bl	80002c8 <__aeabi_dsub>
 801371c:	e7c4      	b.n	80136a8 <__kernel_sin+0xd0>
 801371e:	bf00      	nop
 8013720:	55555549 	.word	0x55555549
 8013724:	3fc55555 	.word	0x3fc55555
 8013728:	3fe00000 	.word	0x3fe00000
 801372c:	5acfd57c 	.word	0x5acfd57c
 8013730:	3de5d93a 	.word	0x3de5d93a
 8013734:	8a2b9ceb 	.word	0x8a2b9ceb
 8013738:	3e5ae5e6 	.word	0x3e5ae5e6
 801373c:	57b1fe7d 	.word	0x57b1fe7d
 8013740:	3ec71de3 	.word	0x3ec71de3
 8013744:	19c161d5 	.word	0x19c161d5
 8013748:	3f2a01a0 	.word	0x3f2a01a0
 801374c:	1110f8a6 	.word	0x1110f8a6
 8013750:	3f811111 	.word	0x3f811111

08013754 <fabs>:
 8013754:	ec51 0b10 	vmov	r0, r1, d0
 8013758:	ee10 2a10 	vmov	r2, s0
 801375c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013760:	ec43 2b10 	vmov	d0, r2, r3
 8013764:	4770      	bx	lr

08013766 <finite>:
 8013766:	b082      	sub	sp, #8
 8013768:	ed8d 0b00 	vstr	d0, [sp]
 801376c:	9801      	ldr	r0, [sp, #4]
 801376e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013772:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013776:	0fc0      	lsrs	r0, r0, #31
 8013778:	b002      	add	sp, #8
 801377a:	4770      	bx	lr
 801377c:	0000      	movs	r0, r0
	...

08013780 <floor>:
 8013780:	ec51 0b10 	vmov	r0, r1, d0
 8013784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013788:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801378c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013790:	2e13      	cmp	r6, #19
 8013792:	ee10 5a10 	vmov	r5, s0
 8013796:	ee10 8a10 	vmov	r8, s0
 801379a:	460c      	mov	r4, r1
 801379c:	dc32      	bgt.n	8013804 <floor+0x84>
 801379e:	2e00      	cmp	r6, #0
 80137a0:	da14      	bge.n	80137cc <floor+0x4c>
 80137a2:	a333      	add	r3, pc, #204	; (adr r3, 8013870 <floor+0xf0>)
 80137a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137a8:	f7ec fd90 	bl	80002cc <__adddf3>
 80137ac:	2200      	movs	r2, #0
 80137ae:	2300      	movs	r3, #0
 80137b0:	f7ed f9d2 	bl	8000b58 <__aeabi_dcmpgt>
 80137b4:	b138      	cbz	r0, 80137c6 <floor+0x46>
 80137b6:	2c00      	cmp	r4, #0
 80137b8:	da57      	bge.n	801386a <floor+0xea>
 80137ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80137be:	431d      	orrs	r5, r3
 80137c0:	d001      	beq.n	80137c6 <floor+0x46>
 80137c2:	4c2d      	ldr	r4, [pc, #180]	; (8013878 <floor+0xf8>)
 80137c4:	2500      	movs	r5, #0
 80137c6:	4621      	mov	r1, r4
 80137c8:	4628      	mov	r0, r5
 80137ca:	e025      	b.n	8013818 <floor+0x98>
 80137cc:	4f2b      	ldr	r7, [pc, #172]	; (801387c <floor+0xfc>)
 80137ce:	4137      	asrs	r7, r6
 80137d0:	ea01 0307 	and.w	r3, r1, r7
 80137d4:	4303      	orrs	r3, r0
 80137d6:	d01f      	beq.n	8013818 <floor+0x98>
 80137d8:	a325      	add	r3, pc, #148	; (adr r3, 8013870 <floor+0xf0>)
 80137da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137de:	f7ec fd75 	bl	80002cc <__adddf3>
 80137e2:	2200      	movs	r2, #0
 80137e4:	2300      	movs	r3, #0
 80137e6:	f7ed f9b7 	bl	8000b58 <__aeabi_dcmpgt>
 80137ea:	2800      	cmp	r0, #0
 80137ec:	d0eb      	beq.n	80137c6 <floor+0x46>
 80137ee:	2c00      	cmp	r4, #0
 80137f0:	bfbe      	ittt	lt
 80137f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80137f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80137fa:	19a4      	addlt	r4, r4, r6
 80137fc:	ea24 0407 	bic.w	r4, r4, r7
 8013800:	2500      	movs	r5, #0
 8013802:	e7e0      	b.n	80137c6 <floor+0x46>
 8013804:	2e33      	cmp	r6, #51	; 0x33
 8013806:	dd0b      	ble.n	8013820 <floor+0xa0>
 8013808:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801380c:	d104      	bne.n	8013818 <floor+0x98>
 801380e:	ee10 2a10 	vmov	r2, s0
 8013812:	460b      	mov	r3, r1
 8013814:	f7ec fd5a 	bl	80002cc <__adddf3>
 8013818:	ec41 0b10 	vmov	d0, r0, r1
 801381c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013820:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013828:	fa23 f707 	lsr.w	r7, r3, r7
 801382c:	4207      	tst	r7, r0
 801382e:	d0f3      	beq.n	8013818 <floor+0x98>
 8013830:	a30f      	add	r3, pc, #60	; (adr r3, 8013870 <floor+0xf0>)
 8013832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013836:	f7ec fd49 	bl	80002cc <__adddf3>
 801383a:	2200      	movs	r2, #0
 801383c:	2300      	movs	r3, #0
 801383e:	f7ed f98b 	bl	8000b58 <__aeabi_dcmpgt>
 8013842:	2800      	cmp	r0, #0
 8013844:	d0bf      	beq.n	80137c6 <floor+0x46>
 8013846:	2c00      	cmp	r4, #0
 8013848:	da02      	bge.n	8013850 <floor+0xd0>
 801384a:	2e14      	cmp	r6, #20
 801384c:	d103      	bne.n	8013856 <floor+0xd6>
 801384e:	3401      	adds	r4, #1
 8013850:	ea25 0507 	bic.w	r5, r5, r7
 8013854:	e7b7      	b.n	80137c6 <floor+0x46>
 8013856:	2301      	movs	r3, #1
 8013858:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801385c:	fa03 f606 	lsl.w	r6, r3, r6
 8013860:	4435      	add	r5, r6
 8013862:	4545      	cmp	r5, r8
 8013864:	bf38      	it	cc
 8013866:	18e4      	addcc	r4, r4, r3
 8013868:	e7f2      	b.n	8013850 <floor+0xd0>
 801386a:	2500      	movs	r5, #0
 801386c:	462c      	mov	r4, r5
 801386e:	e7aa      	b.n	80137c6 <floor+0x46>
 8013870:	8800759c 	.word	0x8800759c
 8013874:	7e37e43c 	.word	0x7e37e43c
 8013878:	bff00000 	.word	0xbff00000
 801387c:	000fffff 	.word	0x000fffff

08013880 <rint>:
 8013880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013882:	ec51 0b10 	vmov	r0, r1, d0
 8013886:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801388a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801388e:	2e13      	cmp	r6, #19
 8013890:	ee10 4a10 	vmov	r4, s0
 8013894:	460b      	mov	r3, r1
 8013896:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801389a:	dc58      	bgt.n	801394e <rint+0xce>
 801389c:	2e00      	cmp	r6, #0
 801389e:	da2b      	bge.n	80138f8 <rint+0x78>
 80138a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80138a4:	4302      	orrs	r2, r0
 80138a6:	d023      	beq.n	80138f0 <rint+0x70>
 80138a8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80138ac:	4302      	orrs	r2, r0
 80138ae:	4254      	negs	r4, r2
 80138b0:	4314      	orrs	r4, r2
 80138b2:	0c4b      	lsrs	r3, r1, #17
 80138b4:	0b24      	lsrs	r4, r4, #12
 80138b6:	045b      	lsls	r3, r3, #17
 80138b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80138bc:	ea44 0103 	orr.w	r1, r4, r3
 80138c0:	4b32      	ldr	r3, [pc, #200]	; (801398c <rint+0x10c>)
 80138c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80138c6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80138ca:	4602      	mov	r2, r0
 80138cc:	460b      	mov	r3, r1
 80138ce:	4630      	mov	r0, r6
 80138d0:	4639      	mov	r1, r7
 80138d2:	f7ec fcfb 	bl	80002cc <__adddf3>
 80138d6:	e9cd 0100 	strd	r0, r1, [sp]
 80138da:	463b      	mov	r3, r7
 80138dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138e0:	4632      	mov	r2, r6
 80138e2:	f7ec fcf1 	bl	80002c8 <__aeabi_dsub>
 80138e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80138ea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80138ee:	4639      	mov	r1, r7
 80138f0:	ec41 0b10 	vmov	d0, r0, r1
 80138f4:	b003      	add	sp, #12
 80138f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138f8:	4a25      	ldr	r2, [pc, #148]	; (8013990 <rint+0x110>)
 80138fa:	4132      	asrs	r2, r6
 80138fc:	ea01 0702 	and.w	r7, r1, r2
 8013900:	4307      	orrs	r7, r0
 8013902:	d0f5      	beq.n	80138f0 <rint+0x70>
 8013904:	0851      	lsrs	r1, r2, #1
 8013906:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801390a:	4314      	orrs	r4, r2
 801390c:	d00c      	beq.n	8013928 <rint+0xa8>
 801390e:	ea23 0201 	bic.w	r2, r3, r1
 8013912:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013916:	2e13      	cmp	r6, #19
 8013918:	fa43 f606 	asr.w	r6, r3, r6
 801391c:	bf0c      	ite	eq
 801391e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8013922:	2400      	movne	r4, #0
 8013924:	ea42 0306 	orr.w	r3, r2, r6
 8013928:	4918      	ldr	r1, [pc, #96]	; (801398c <rint+0x10c>)
 801392a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801392e:	4622      	mov	r2, r4
 8013930:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013934:	4620      	mov	r0, r4
 8013936:	4629      	mov	r1, r5
 8013938:	f7ec fcc8 	bl	80002cc <__adddf3>
 801393c:	e9cd 0100 	strd	r0, r1, [sp]
 8013940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013944:	4622      	mov	r2, r4
 8013946:	462b      	mov	r3, r5
 8013948:	f7ec fcbe 	bl	80002c8 <__aeabi_dsub>
 801394c:	e7d0      	b.n	80138f0 <rint+0x70>
 801394e:	2e33      	cmp	r6, #51	; 0x33
 8013950:	dd07      	ble.n	8013962 <rint+0xe2>
 8013952:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013956:	d1cb      	bne.n	80138f0 <rint+0x70>
 8013958:	ee10 2a10 	vmov	r2, s0
 801395c:	f7ec fcb6 	bl	80002cc <__adddf3>
 8013960:	e7c6      	b.n	80138f0 <rint+0x70>
 8013962:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8013966:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801396a:	40d6      	lsrs	r6, r2
 801396c:	4230      	tst	r0, r6
 801396e:	d0bf      	beq.n	80138f0 <rint+0x70>
 8013970:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8013974:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8013978:	bf1f      	itttt	ne
 801397a:	ea24 0101 	bicne.w	r1, r4, r1
 801397e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8013982:	fa44 f202 	asrne.w	r2, r4, r2
 8013986:	ea41 0402 	orrne.w	r4, r1, r2
 801398a:	e7cd      	b.n	8013928 <rint+0xa8>
 801398c:	08014338 	.word	0x08014338
 8013990:	000fffff 	.word	0x000fffff
 8013994:	00000000 	.word	0x00000000

08013998 <scalbn>:
 8013998:	b570      	push	{r4, r5, r6, lr}
 801399a:	ec55 4b10 	vmov	r4, r5, d0
 801399e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80139a2:	4606      	mov	r6, r0
 80139a4:	462b      	mov	r3, r5
 80139a6:	b99a      	cbnz	r2, 80139d0 <scalbn+0x38>
 80139a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80139ac:	4323      	orrs	r3, r4
 80139ae:	d036      	beq.n	8013a1e <scalbn+0x86>
 80139b0:	4b39      	ldr	r3, [pc, #228]	; (8013a98 <scalbn+0x100>)
 80139b2:	4629      	mov	r1, r5
 80139b4:	ee10 0a10 	vmov	r0, s0
 80139b8:	2200      	movs	r2, #0
 80139ba:	f7ec fe3d 	bl	8000638 <__aeabi_dmul>
 80139be:	4b37      	ldr	r3, [pc, #220]	; (8013a9c <scalbn+0x104>)
 80139c0:	429e      	cmp	r6, r3
 80139c2:	4604      	mov	r4, r0
 80139c4:	460d      	mov	r5, r1
 80139c6:	da10      	bge.n	80139ea <scalbn+0x52>
 80139c8:	a32b      	add	r3, pc, #172	; (adr r3, 8013a78 <scalbn+0xe0>)
 80139ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ce:	e03a      	b.n	8013a46 <scalbn+0xae>
 80139d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80139d4:	428a      	cmp	r2, r1
 80139d6:	d10c      	bne.n	80139f2 <scalbn+0x5a>
 80139d8:	ee10 2a10 	vmov	r2, s0
 80139dc:	4620      	mov	r0, r4
 80139de:	4629      	mov	r1, r5
 80139e0:	f7ec fc74 	bl	80002cc <__adddf3>
 80139e4:	4604      	mov	r4, r0
 80139e6:	460d      	mov	r5, r1
 80139e8:	e019      	b.n	8013a1e <scalbn+0x86>
 80139ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80139ee:	460b      	mov	r3, r1
 80139f0:	3a36      	subs	r2, #54	; 0x36
 80139f2:	4432      	add	r2, r6
 80139f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80139f8:	428a      	cmp	r2, r1
 80139fa:	dd08      	ble.n	8013a0e <scalbn+0x76>
 80139fc:	2d00      	cmp	r5, #0
 80139fe:	a120      	add	r1, pc, #128	; (adr r1, 8013a80 <scalbn+0xe8>)
 8013a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a04:	da1c      	bge.n	8013a40 <scalbn+0xa8>
 8013a06:	a120      	add	r1, pc, #128	; (adr r1, 8013a88 <scalbn+0xf0>)
 8013a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a0c:	e018      	b.n	8013a40 <scalbn+0xa8>
 8013a0e:	2a00      	cmp	r2, #0
 8013a10:	dd08      	ble.n	8013a24 <scalbn+0x8c>
 8013a12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013a16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013a1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013a1e:	ec45 4b10 	vmov	d0, r4, r5
 8013a22:	bd70      	pop	{r4, r5, r6, pc}
 8013a24:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013a28:	da19      	bge.n	8013a5e <scalbn+0xc6>
 8013a2a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013a2e:	429e      	cmp	r6, r3
 8013a30:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013a34:	dd0a      	ble.n	8013a4c <scalbn+0xb4>
 8013a36:	a112      	add	r1, pc, #72	; (adr r1, 8013a80 <scalbn+0xe8>)
 8013a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d1e2      	bne.n	8013a06 <scalbn+0x6e>
 8013a40:	a30f      	add	r3, pc, #60	; (adr r3, 8013a80 <scalbn+0xe8>)
 8013a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a46:	f7ec fdf7 	bl	8000638 <__aeabi_dmul>
 8013a4a:	e7cb      	b.n	80139e4 <scalbn+0x4c>
 8013a4c:	a10a      	add	r1, pc, #40	; (adr r1, 8013a78 <scalbn+0xe0>)
 8013a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d0b8      	beq.n	80139c8 <scalbn+0x30>
 8013a56:	a10e      	add	r1, pc, #56	; (adr r1, 8013a90 <scalbn+0xf8>)
 8013a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a5c:	e7b4      	b.n	80139c8 <scalbn+0x30>
 8013a5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013a62:	3236      	adds	r2, #54	; 0x36
 8013a64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013a68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013a6c:	4620      	mov	r0, r4
 8013a6e:	4b0c      	ldr	r3, [pc, #48]	; (8013aa0 <scalbn+0x108>)
 8013a70:	2200      	movs	r2, #0
 8013a72:	e7e8      	b.n	8013a46 <scalbn+0xae>
 8013a74:	f3af 8000 	nop.w
 8013a78:	c2f8f359 	.word	0xc2f8f359
 8013a7c:	01a56e1f 	.word	0x01a56e1f
 8013a80:	8800759c 	.word	0x8800759c
 8013a84:	7e37e43c 	.word	0x7e37e43c
 8013a88:	8800759c 	.word	0x8800759c
 8013a8c:	fe37e43c 	.word	0xfe37e43c
 8013a90:	c2f8f359 	.word	0xc2f8f359
 8013a94:	81a56e1f 	.word	0x81a56e1f
 8013a98:	43500000 	.word	0x43500000
 8013a9c:	ffff3cb0 	.word	0xffff3cb0
 8013aa0:	3c900000 	.word	0x3c900000

08013aa4 <_getpid>:
 8013aa4:	4b02      	ldr	r3, [pc, #8]	; (8013ab0 <_getpid+0xc>)
 8013aa6:	2258      	movs	r2, #88	; 0x58
 8013aa8:	601a      	str	r2, [r3, #0]
 8013aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013aae:	4770      	bx	lr
 8013ab0:	20007470 	.word	0x20007470

08013ab4 <_kill>:
 8013ab4:	4b02      	ldr	r3, [pc, #8]	; (8013ac0 <_kill+0xc>)
 8013ab6:	2258      	movs	r2, #88	; 0x58
 8013ab8:	601a      	str	r2, [r3, #0]
 8013aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013abe:	4770      	bx	lr
 8013ac0:	20007470 	.word	0x20007470

08013ac4 <_exit>:
 8013ac4:	e7fe      	b.n	8013ac4 <_exit>
	...

08013ac8 <_init>:
 8013ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aca:	bf00      	nop
 8013acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ace:	bc08      	pop	{r3}
 8013ad0:	469e      	mov	lr, r3
 8013ad2:	4770      	bx	lr

08013ad4 <_fini>:
 8013ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ad6:	bf00      	nop
 8013ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ada:	bc08      	pop	{r3}
 8013adc:	469e      	mov	lr, r3
 8013ade:	4770      	bx	lr
