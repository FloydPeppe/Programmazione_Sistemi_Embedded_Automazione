
Remote_Control_Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc74  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800be48  0800be48  0001be48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c210  0800c210  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c210  0800c210  0001c210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c218  0800c218  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c218  0800c218  0001c218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c21c  0800c21c  0001c21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050e8  20000074  0800c294  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000515c  0800c294  0002515c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a40  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fd1  00000000  00000000  00042ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  00046ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b0  00000000  00000000  000481e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f93  00000000  00000000  00049790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adf6  00000000  00000000  0004e723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de981  00000000  00000000  00069519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00147e9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067e4  00000000  00000000  00147ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800be2c 	.word	0x0800be2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800be2c 	.word	0x0800be2c

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_d2iz>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d215      	bcs.n	8000af2 <__aeabi_d2iz+0x36>
 8000ac6:	d511      	bpl.n	8000aec <__aeabi_d2iz+0x30>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d912      	bls.n	8000af8 <__aeabi_d2iz+0x3c>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d105      	bne.n	8000b04 <__aeabi_d2iz+0x48>
 8000af8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	bf08      	it	eq
 8000afe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_d2uiz>:
 8000b0c:	004a      	lsls	r2, r1, #1
 8000b0e:	d211      	bcs.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b14:	d211      	bcs.n	8000b3a <__aeabi_d2uiz+0x2e>
 8000b16:	d50d      	bpl.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b20:	d40e      	bmi.n	8000b40 <__aeabi_d2uiz+0x34>
 8000b22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_d2uiz+0x3a>
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_d2f>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b54:	bf24      	itt	cs
 8000b56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5e:	d90d      	bls.n	8000b7c <__aeabi_d2f+0x30>
 8000b60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b74:	bf08      	it	eq
 8000b76:	f020 0001 	biceq.w	r0, r0, #1
 8000b7a:	4770      	bx	lr
 8000b7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b80:	d121      	bne.n	8000bc6 <__aeabi_d2f+0x7a>
 8000b82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b86:	bfbc      	itt	lt
 8000b88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	4770      	bxlt	lr
 8000b8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b96:	f1c2 0218 	rsb	r2, r2, #24
 8000b9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ba2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	f040 0001 	orrne.w	r0, r0, #1
 8000bac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb8:	ea40 000c 	orr.w	r0, r0, ip
 8000bbc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc4:	e7cc      	b.n	8000b60 <__aeabi_d2f+0x14>
 8000bc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bca:	d107      	bne.n	8000bdc <__aeabi_d2f+0x90>
 8000bcc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd0:	bf1e      	ittt	ne
 8000bd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bda:	4770      	bxne	lr
 8000bdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c00:	f000 b96e 	b.w	8000ee0 <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f806 	bl	8000c1c <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__udivmoddi4>:
 8000c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c20:	9d08      	ldr	r5, [sp, #32]
 8000c22:	4604      	mov	r4, r0
 8000c24:	468c      	mov	ip, r1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f040 8083 	bne.w	8000d32 <__udivmoddi4+0x116>
 8000c2c:	428a      	cmp	r2, r1
 8000c2e:	4617      	mov	r7, r2
 8000c30:	d947      	bls.n	8000cc2 <__udivmoddi4+0xa6>
 8000c32:	fab2 f282 	clz	r2, r2
 8000c36:	b142      	cbz	r2, 8000c4a <__udivmoddi4+0x2e>
 8000c38:	f1c2 0020 	rsb	r0, r2, #32
 8000c3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c40:	4091      	lsls	r1, r2
 8000c42:	4097      	lsls	r7, r2
 8000c44:	ea40 0c01 	orr.w	ip, r0, r1
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4e:	0c23      	lsrs	r3, r4, #16
 8000c50:	fbbc f6f8 	udiv	r6, ip, r8
 8000c54:	fa1f fe87 	uxth.w	lr, r7
 8000c58:	fb08 c116 	mls	r1, r8, r6, ip
 8000c5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c60:	fb06 f10e 	mul.w	r1, r6, lr
 8000c64:	4299      	cmp	r1, r3
 8000c66:	d909      	bls.n	8000c7c <__udivmoddi4+0x60>
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6e:	f080 8119 	bcs.w	8000ea4 <__udivmoddi4+0x288>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 8116 	bls.w	8000ea4 <__udivmoddi4+0x288>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	443b      	add	r3, r7
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c90:	45a6      	cmp	lr, r4
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x8c>
 8000c94:	193c      	adds	r4, r7, r4
 8000c96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9a:	f080 8105 	bcs.w	8000ea8 <__udivmoddi4+0x28c>
 8000c9e:	45a6      	cmp	lr, r4
 8000ca0:	f240 8102 	bls.w	8000ea8 <__udivmoddi4+0x28c>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	443c      	add	r4, r7
 8000ca8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cac:	eba4 040e 	sub.w	r4, r4, lr
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa0>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b902      	cbnz	r2, 8000cc6 <__udivmoddi4+0xaa>
 8000cc4:	deff      	udf	#255	; 0xff
 8000cc6:	fab2 f282 	clz	r2, r2
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	d150      	bne.n	8000d70 <__udivmoddi4+0x154>
 8000cce:	1bcb      	subs	r3, r1, r7
 8000cd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd4:	fa1f f887 	uxth.w	r8, r7
 8000cd8:	2601      	movs	r6, #1
 8000cda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cde:	0c21      	lsrs	r1, r4, #16
 8000ce0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cec:	428b      	cmp	r3, r1
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0xe4>
 8000cf0:	1879      	adds	r1, r7, r1
 8000cf2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0xe2>
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	f200 80e9 	bhi.w	8000ed0 <__udivmoddi4+0x2b4>
 8000cfe:	4684      	mov	ip, r0
 8000d00:	1ac9      	subs	r1, r1, r3
 8000d02:	b2a3      	uxth	r3, r4
 8000d04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d10:	fb08 f800 	mul.w	r8, r8, r0
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	d907      	bls.n	8000d28 <__udivmoddi4+0x10c>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x10a>
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	f200 80d9 	bhi.w	8000ed8 <__udivmoddi4+0x2bc>
 8000d26:	4618      	mov	r0, r3
 8000d28:	eba4 0408 	sub.w	r4, r4, r8
 8000d2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d30:	e7bf      	b.n	8000cb2 <__udivmoddi4+0x96>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0x12e>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80b1 	beq.w	8000e9e <__udivmoddi4+0x282>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x1cc>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0x140>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80b8 	bhi.w	8000ecc <__udivmoddi4+0x2b0>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	468c      	mov	ip, r1
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0a8      	beq.n	8000cbc <__udivmoddi4+0xa0>
 8000d6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0xa0>
 8000d70:	f1c2 0320 	rsb	r3, r2, #32
 8000d74:	fa20 f603 	lsr.w	r6, r0, r3
 8000d78:	4097      	lsls	r7, r2
 8000d7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d82:	40d9      	lsrs	r1, r3
 8000d84:	4330      	orrs	r0, r6
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d8c:	fa1f f887 	uxth.w	r8, r7
 8000d90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f108 	mul.w	r1, r6, r8
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x19c>
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000daa:	f080 808d 	bcs.w	8000ec8 <__udivmoddi4+0x2ac>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 808a 	bls.w	8000ec8 <__udivmoddi4+0x2ac>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b281      	uxth	r1, r0
 8000dbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc8:	fb00 f308 	mul.w	r3, r0, r8
 8000dcc:	428b      	cmp	r3, r1
 8000dce:	d907      	bls.n	8000de0 <__udivmoddi4+0x1c4>
 8000dd0:	1879      	adds	r1, r7, r1
 8000dd2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd6:	d273      	bcs.n	8000ec0 <__udivmoddi4+0x2a4>
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d971      	bls.n	8000ec0 <__udivmoddi4+0x2a4>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4439      	add	r1, r7
 8000de0:	1acb      	subs	r3, r1, r3
 8000de2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de6:	e778      	b.n	8000cda <__udivmoddi4+0xbe>
 8000de8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dec:	fa03 f406 	lsl.w	r4, r3, r6
 8000df0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df4:	431c      	orrs	r4, r3
 8000df6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e06:	431f      	orrs	r7, r3
 8000e08:	0c3b      	lsrs	r3, r7, #16
 8000e0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0e:	fa1f f884 	uxth.w	r8, r4
 8000e12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	fa02 f206 	lsl.w	r2, r2, r6
 8000e24:	fa00 f306 	lsl.w	r3, r0, r6
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x220>
 8000e2a:	1861      	adds	r1, r4, r1
 8000e2c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e30:	d248      	bcs.n	8000ec4 <__udivmoddi4+0x2a8>
 8000e32:	458a      	cmp	sl, r1
 8000e34:	d946      	bls.n	8000ec4 <__udivmoddi4+0x2a8>
 8000e36:	f1a9 0902 	sub.w	r9, r9, #2
 8000e3a:	4421      	add	r1, r4
 8000e3c:	eba1 010a 	sub.w	r1, r1, sl
 8000e40:	b2bf      	uxth	r7, r7
 8000e42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4e:	fb00 f808 	mul.w	r8, r0, r8
 8000e52:	45b8      	cmp	r8, r7
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x24a>
 8000e56:	19e7      	adds	r7, r4, r7
 8000e58:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e5c:	d22e      	bcs.n	8000ebc <__udivmoddi4+0x2a0>
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d92c      	bls.n	8000ebc <__udivmoddi4+0x2a0>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4427      	add	r7, r4
 8000e66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e6a:	eba7 0708 	sub.w	r7, r7, r8
 8000e6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e72:	454f      	cmp	r7, r9
 8000e74:	46c6      	mov	lr, r8
 8000e76:	4649      	mov	r1, r9
 8000e78:	d31a      	bcc.n	8000eb0 <__udivmoddi4+0x294>
 8000e7a:	d017      	beq.n	8000eac <__udivmoddi4+0x290>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x27a>
 8000e7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e82:	eb67 0701 	sbc.w	r7, r7, r1
 8000e86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e8a:	40f2      	lsrs	r2, r6
 8000e8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e90:	40f7      	lsrs	r7, r6
 8000e92:	e9c5 2700 	strd	r2, r7, [r5]
 8000e96:	2600      	movs	r6, #0
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	462e      	mov	r6, r5
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	e70b      	b.n	8000cbc <__udivmoddi4+0xa0>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	e6e9      	b.n	8000c7c <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fd      	b.n	8000ca8 <__udivmoddi4+0x8c>
 8000eac:	4543      	cmp	r3, r8
 8000eae:	d2e5      	bcs.n	8000e7c <__udivmoddi4+0x260>
 8000eb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb8:	3801      	subs	r0, #1
 8000eba:	e7df      	b.n	8000e7c <__udivmoddi4+0x260>
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	e7d2      	b.n	8000e66 <__udivmoddi4+0x24a>
 8000ec0:	4660      	mov	r0, ip
 8000ec2:	e78d      	b.n	8000de0 <__udivmoddi4+0x1c4>
 8000ec4:	4681      	mov	r9, r0
 8000ec6:	e7b9      	b.n	8000e3c <__udivmoddi4+0x220>
 8000ec8:	4666      	mov	r6, ip
 8000eca:	e775      	b.n	8000db8 <__udivmoddi4+0x19c>
 8000ecc:	4630      	mov	r0, r6
 8000ece:	e74a      	b.n	8000d66 <__udivmoddi4+0x14a>
 8000ed0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed4:	4439      	add	r1, r7
 8000ed6:	e713      	b.n	8000d00 <__udivmoddi4+0xe4>
 8000ed8:	3802      	subs	r0, #2
 8000eda:	443c      	add	r4, r7
 8000edc:	e724      	b.n	8000d28 <__udivmoddi4+0x10c>
 8000ede:	bf00      	nop

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f003 fa65 	bl	80043b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f88d 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 fae9 	bl	80014c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef6:	f000 fabf 	bl	8001478 <MX_DMA_Init>
  MX_TIM2_Init();
 8000efa:	f000 f99d 	bl	8001238 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000efe:	f000 f8f3 	bl	80010e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f02:	f000 f9ed 	bl	80012e0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000f06:	f000 fa39 	bl	800137c <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8000f0a:	f000 fa8b 	bl	8001424 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  MAIN_DIFFDRIVE_Init();
 8000f0e:	f000 fb89 	bl	8001624 <MAIN_DIFFDRIVE_Init>
  MAIN_MAF_Init();
 8000f12:	f000 fc59 	bl	80017c8 <MAIN_MAF_Init>

  // Using the flag "wait_button" to start MCU with WIFI disabled
  // if blue button is pressed during reset. It's useful to avoid
  // battery leakage
  bool wait_for_button= false;
 8000f16:	2300      	movs	r3, #0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8000f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1e:	4830      	ldr	r0, [pc, #192]	; (8000fe0 <main+0xfc>)
 8000f20:	f004 f8e4 	bl	80050ec <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d11a      	bne.n	8000f60 <main+0x7c>
   	wait_for_button= true;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	71fb      	strb	r3, [r7, #7]
   	// Show pressed button
   	while( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8000f2e:	e006      	b.n	8000f3e <main+0x5a>
   		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f30:	2120      	movs	r1, #32
 8000f32:	482c      	ldr	r0, [pc, #176]	; (8000fe4 <main+0x100>)
 8000f34:	f004 f90b 	bl	800514e <HAL_GPIO_TogglePin>
   		HAL_Delay(50);
 8000f38:	2032      	movs	r0, #50	; 0x32
 8000f3a:	f003 fa7f 	bl	800443c <HAL_Delay>
   	while( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8000f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f42:	4827      	ldr	r0, [pc, #156]	; (8000fe0 <main+0xfc>)
 8000f44:	f004 f8d2 	bl	80050ec <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f0      	beq.n	8000f30 <main+0x4c>
   	}
   	// Turn off LED
   	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2120      	movs	r1, #32
 8000f52:	4824      	ldr	r0, [pc, #144]	; (8000fe4 <main+0x100>)
 8000f54:	f004 f8e2 	bl	800511c <HAL_GPIO_WritePin>
   	// Debouncing released button
   	HAL_Delay(1000);
 8000f58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f5c:	f003 fa6e 	bl	800443c <HAL_Delay>
  }

  // Reset ESP-8266
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2101      	movs	r1, #1
 8000f64:	481e      	ldr	r0, [pc, #120]	; (8000fe0 <main+0xfc>)
 8000f66:	f004 f8d9 	bl	800511c <HAL_GPIO_WritePin>

  // Wait for blue button if this option is on
  if( wait_for_button )
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d008      	beq.n	8000f82 <main+0x9e>
	  while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) )
 8000f70:	bf00      	nop
 8000f72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f76:	481a      	ldr	r0, [pc, #104]	; (8000fe0 <main+0xfc>)
 8000f78:	f004 f8b8 	bl	80050ec <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f7      	bne.n	8000f72 <main+0x8e>
		  	  ;

  HAL_Delay(1000);
 8000f82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f86:	f003 fa59 	bl	800443c <HAL_Delay>

  // Start ESP
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <main+0xfc>)
 8000f90:	f004 f8c4 	bl	800511c <HAL_GPIO_WritePin>

  // Wait a bit for ESP initialization
  HAL_Delay(3000);
 8000f94:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f98:	f003 fa50 	bl	800443c <HAL_Delay>

  // Keep LED on to show that data transfer is down
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2120      	movs	r1, #32
 8000fa0:	4810      	ldr	r0, [pc, #64]	; (8000fe4 <main+0x100>)
 8000fa2:	f004 f8bb 	bl	800511c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fa6:	f006 fe99 	bl	8007cdc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DiffDrive */
  DiffDriveHandle = osThreadNew(MoveDifferentialDrive, NULL, &DiffDrive_attributes);
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <main+0x104>)
 8000fac:	2100      	movs	r1, #0
 8000fae:	480f      	ldr	r0, [pc, #60]	; (8000fec <main+0x108>)
 8000fb0:	f006 fef3 	bl	8007d9a <osThreadNew>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <main+0x10c>)
 8000fb8:	6013      	str	r3, [r2, #0]

  /* creation of Communication */
  CommunicationHandle = osThreadNew(SerialCommunication, NULL, &Communication_attributes);
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <main+0x110>)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <main+0x114>)
 8000fc0:	f006 feeb 	bl	8007d9a <osThreadNew>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <main+0x118>)
 8000fc8:	6013      	str	r3, [r2, #0]

  /* creation of InfraredSens */
  InfraredSensHandle = osThreadNew(InfraredSensor, NULL, &InfraredSens_attributes);
 8000fca:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <main+0x11c>)
 8000fcc:	2100      	movs	r1, #0
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <main+0x120>)
 8000fd0:	f006 fee3 	bl	8007d9a <osThreadNew>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4a0c      	ldr	r2, [pc, #48]	; (8001008 <main+0x124>)
 8000fd8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fda:	f006 fea3 	bl	8007d24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000fde:	e7fe      	b.n	8000fde <main+0xfa>
 8000fe0:	40020800 	.word	0x40020800
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	0800bea4 	.word	0x0800bea4
 8000fec:	0800184d 	.word	0x0800184d
 8000ff0:	2000504c 	.word	0x2000504c
 8000ff4:	0800bec8 	.word	0x0800bec8
 8000ff8:	08001a55 	.word	0x08001a55
 8000ffc:	20004c88 	.word	0x20004c88
 8001000:	0800beec 	.word	0x0800beec
 8001004:	08001cf5 	.word	0x08001cf5
 8001008:	20004b04 	.word	0x20004b04

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b094      	sub	sp, #80	; 0x50
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	2234      	movs	r2, #52	; 0x34
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f009 fd62 	bl	800aae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <SystemClock_Config+0xd4>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	4a29      	ldr	r2, [pc, #164]	; (80010e0 <SystemClock_Config+0xd4>)
 800103a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103e:	6413      	str	r3, [r2, #64]	; 0x40
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <SystemClock_Config+0xd4>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800104c:	2300      	movs	r3, #0
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <SystemClock_Config+0xd8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001058:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <SystemClock_Config+0xd8>)
 800105a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <SystemClock_Config+0xd8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001068:	603b      	str	r3, [r7, #0]
 800106a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800106c:	2302      	movs	r3, #2
 800106e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001070:	2301      	movs	r3, #1
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001074:	2310      	movs	r3, #16
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001078:	2302      	movs	r3, #2
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800107c:	2300      	movs	r3, #0
 800107e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001080:	2310      	movs	r3, #16
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001084:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001088:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800108a:	2304      	movs	r3, #4
 800108c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800108e:	2302      	movs	r3, #2
 8001090:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001092:	2302      	movs	r3, #2
 8001094:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4618      	mov	r0, r3
 800109c:	f004 fb70 	bl	8005780 <HAL_RCC_OscConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010a6:	f000 fe57 	bl	8001d58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010aa:	230f      	movs	r3, #15
 80010ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ae:	2302      	movs	r3, #2
 80010b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	2102      	movs	r1, #2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f004 f85c 	bl	8005184 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010d2:	f000 fe41 	bl	8001d58 <Error_Handler>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3750      	adds	r7, #80	; 0x50
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40007000 	.word	0x40007000

080010e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b092      	sub	sp, #72	; 0x48
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2220      	movs	r2, #32
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f009 fce6 	bl	800aae4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001118:	4b45      	ldr	r3, [pc, #276]	; (8001230 <MX_TIM1_Init+0x148>)
 800111a:	4a46      	ldr	r2, [pc, #280]	; (8001234 <MX_TIM1_Init+0x14c>)
 800111c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 800111e:	4b44      	ldr	r3, [pc, #272]	; (8001230 <MX_TIM1_Init+0x148>)
 8001120:	2208      	movs	r2, #8
 8001122:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b42      	ldr	r3, [pc, #264]	; (8001230 <MX_TIM1_Init+0x148>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800112a:	4b41      	ldr	r3, [pc, #260]	; (8001230 <MX_TIM1_Init+0x148>)
 800112c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001130:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b3f      	ldr	r3, [pc, #252]	; (8001230 <MX_TIM1_Init+0x148>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001138:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <MX_TIM1_Init+0x148>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <MX_TIM1_Init+0x148>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001144:	483a      	ldr	r0, [pc, #232]	; (8001230 <MX_TIM1_Init+0x148>)
 8001146:	f004 feb5 	bl	8005eb4 <HAL_TIM_PWM_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001150:	f000 fe02 	bl	8001d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800115c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001160:	4619      	mov	r1, r3
 8001162:	4833      	ldr	r0, [pc, #204]	; (8001230 <MX_TIM1_Init+0x148>)
 8001164:	f005 ff80 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800116e:	f000 fdf3 	bl	8001d58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001172:	2360      	movs	r3, #96	; 0x60
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800117e:	2300      	movs	r3, #0
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	2200      	movs	r2, #0
 8001194:	4619      	mov	r1, r3
 8001196:	4826      	ldr	r0, [pc, #152]	; (8001230 <MX_TIM1_Init+0x148>)
 8001198:	f005 fa1a 	bl	80065d0 <HAL_TIM_PWM_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80011a2:	f000 fdd9 	bl	8001d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011aa:	2204      	movs	r2, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4820      	ldr	r0, [pc, #128]	; (8001230 <MX_TIM1_Init+0x148>)
 80011b0:	f005 fa0e 	bl	80065d0 <HAL_TIM_PWM_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80011ba:	f000 fdcd 	bl	8001d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c2:	2208      	movs	r2, #8
 80011c4:	4619      	mov	r1, r3
 80011c6:	481a      	ldr	r0, [pc, #104]	; (8001230 <MX_TIM1_Init+0x148>)
 80011c8:	f005 fa02 	bl	80065d0 <HAL_TIM_PWM_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80011d2:	f000 fdc1 	bl	8001d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011da:	220c      	movs	r2, #12
 80011dc:	4619      	mov	r1, r3
 80011de:	4814      	ldr	r0, [pc, #80]	; (8001230 <MX_TIM1_Init+0x148>)
 80011e0:	f005 f9f6 	bl	80065d0 <HAL_TIM_PWM_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80011ea:	f000 fdb5 	bl	8001d58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001206:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4807      	ldr	r0, [pc, #28]	; (8001230 <MX_TIM1_Init+0x148>)
 8001212:	f005 ffa5 	bl	8007160 <HAL_TIMEx_ConfigBreakDeadTime>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800121c:	f000 fd9c 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001220:	4803      	ldr	r0, [pc, #12]	; (8001230 <MX_TIM1_Init+0x148>)
 8001222:	f000 fe91 	bl	8001f48 <HAL_TIM_MspPostInit>

}
 8001226:	bf00      	nop
 8001228:	3748      	adds	r7, #72	; 0x48
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20004c8c 	.word	0x20004c8c
 8001234:	40010000 	.word	0x40010000

08001238 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	2224      	movs	r2, #36	; 0x24
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f009 fc4c 	bl	800aae4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MX_TIM2_Init+0xa4>)
 8001256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <MX_TIM2_Init+0xa4>)
 800125e:	2200      	movs	r2, #0
 8001260:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_TIM2_Init+0xa4>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_TIM2_Init+0xa4>)
 800126a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800126e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_TIM2_Init+0xa4>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_TIM2_Init+0xa4>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800127c:	2301      	movs	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001284:	2301      	movs	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800128c:	230f      	movs	r3, #15
 800128e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001294:	2301      	movs	r3, #1
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800129c:	230f      	movs	r3, #15
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	4619      	mov	r1, r3
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <MX_TIM2_Init+0xa4>)
 80012a8:	f004 ff28 	bl	80060fc <HAL_TIM_Encoder_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012b2:	f000 fd51 	bl	8001d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <MX_TIM2_Init+0xa4>)
 80012c4:	f005 fed0 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80012ce:	f000 fd43 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3730      	adds	r7, #48	; 0x30
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20004d40 	.word	0x20004d40

080012e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_TIM3_Init+0x94>)
 80012fe:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <MX_TIM3_Init+0x98>)
 8001300:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <MX_TIM3_Init+0x94>)
 8001304:	f240 3247 	movw	r2, #839	; 0x347
 8001308:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_TIM3_Init+0x94>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_TIM3_Init+0x94>)
 8001312:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001316:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_TIM3_Init+0x94>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_TIM3_Init+0x94>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001324:	4813      	ldr	r0, [pc, #76]	; (8001374 <MX_TIM3_Init+0x94>)
 8001326:	f004 fcc9 	bl	8005cbc <HAL_TIM_Base_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001330:	f000 fd12 	bl	8001d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	4619      	mov	r1, r3
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <MX_TIM3_Init+0x94>)
 8001342:	f005 fa07 	bl	8006754 <HAL_TIM_ConfigClockSource>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800134c:	f000 fd04 	bl	8001d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_TIM3_Init+0x94>)
 800135e:	f005 fe83 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001368:	f000 fcf6 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20004bbc 	.word	0x20004bbc
 8001378:	40000400 	.word	0x40000400

0800137c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08c      	sub	sp, #48	; 0x30
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	2224      	movs	r2, #36	; 0x24
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f009 fbaa 	bl	800aae4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001398:	4b20      	ldr	r3, [pc, #128]	; (800141c <MX_TIM5_Init+0xa0>)
 800139a:	4a21      	ldr	r2, [pc, #132]	; (8001420 <MX_TIM5_Init+0xa4>)
 800139c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <MX_TIM5_Init+0xa0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_TIM5_Init+0xa0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <MX_TIM5_Init+0xa0>)
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013b0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_TIM5_Init+0xa0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_TIM5_Init+0xa0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013be:	2301      	movs	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c6:	2301      	movs	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80013ce:	230f      	movs	r3, #15
 80013d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d6:	2301      	movs	r3, #1
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80013de:	230f      	movs	r3, #15
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4619      	mov	r1, r3
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <MX_TIM5_Init+0xa0>)
 80013ea:	f004 fe87 	bl	80060fc <HAL_TIM_Encoder_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80013f4:	f000 fcb0 	bl	8001d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_TIM5_Init+0xa0>)
 8001406:	f005 fe2f 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001410:	f000 fca2 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3730      	adds	r7, #48	; 0x30
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20004b08 	.word	0x20004b08
 8001420:	40000c00 	.word	0x40000c00

08001424 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_USART3_UART_Init+0x4c>)
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <MX_USART3_UART_Init+0x50>)
 800142c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <MX_USART3_UART_Init+0x4c>)
 8001430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001434:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_USART3_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_USART3_UART_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <MX_USART3_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_USART3_UART_Init+0x4c>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <MX_USART3_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_USART3_UART_Init+0x4c>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_USART3_UART_Init+0x4c>)
 800145c:	f005 fef0 	bl	8007240 <HAL_UART_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001466:	f000 fc77 	bl	8001d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20004a30 	.word	0x20004a30
 8001474:	40004800 	.word	0x40004800

08001478 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <MX_DMA_Init+0x4c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <MX_DMA_Init+0x4c>)
 8001488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <MX_DMA_Init+0x4c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2105      	movs	r1, #5
 800149e:	200c      	movs	r0, #12
 80014a0:	f003 f8e3 	bl	800466a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80014a4:	200c      	movs	r0, #12
 80014a6:	f003 f8fc 	bl	80046a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2105      	movs	r1, #5
 80014ae:	200e      	movs	r0, #14
 80014b0:	f003 f8db 	bl	800466a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80014b4:	200e      	movs	r0, #14
 80014b6:	f003 f8f4 	bl	80046a2 <HAL_NVIC_EnableIRQ>

}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b4d      	ldr	r3, [pc, #308]	; (8001618 <MX_GPIO_Init+0x150>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a4c      	ldr	r2, [pc, #304]	; (8001618 <MX_GPIO_Init+0x150>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b4a      	ldr	r3, [pc, #296]	; (8001618 <MX_GPIO_Init+0x150>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b46      	ldr	r3, [pc, #280]	; (8001618 <MX_GPIO_Init+0x150>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a45      	ldr	r2, [pc, #276]	; (8001618 <MX_GPIO_Init+0x150>)
 8001504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b43      	ldr	r3, [pc, #268]	; (8001618 <MX_GPIO_Init+0x150>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b3f      	ldr	r3, [pc, #252]	; (8001618 <MX_GPIO_Init+0x150>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a3e      	ldr	r2, [pc, #248]	; (8001618 <MX_GPIO_Init+0x150>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b3c      	ldr	r3, [pc, #240]	; (8001618 <MX_GPIO_Init+0x150>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b38      	ldr	r3, [pc, #224]	; (8001618 <MX_GPIO_Init+0x150>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a37      	ldr	r2, [pc, #220]	; (8001618 <MX_GPIO_Init+0x150>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b35      	ldr	r3, [pc, #212]	; (8001618 <MX_GPIO_Init+0x150>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port, WIFI_RESET_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2101      	movs	r1, #1
 8001552:	4832      	ldr	r0, [pc, #200]	; (800161c <MX_GPIO_Init+0x154>)
 8001554:	f003 fde2 	bl	800511c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SUPPLY_ENABLE_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2130      	movs	r1, #48	; 0x30
 800155c:	4830      	ldr	r0, [pc, #192]	; (8001620 <MX_GPIO_Init+0x158>)
 800155e:	f003 fddd 	bl	800511c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001568:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	4828      	ldr	r0, [pc, #160]	; (800161c <MX_GPIO_Init+0x154>)
 800157a:	f003 fc23 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RESET_Pin */
  GPIO_InitStruct.Pin = WIFI_RESET_Pin;
 800157e:	2301      	movs	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RESET_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4821      	ldr	r0, [pc, #132]	; (800161c <MX_GPIO_Init+0x154>)
 8001596:	f003 fc15 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800159a:	230c      	movs	r3, #12
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015aa:	2307      	movs	r3, #7
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	481a      	ldr	r0, [pc, #104]	; (8001620 <MX_GPIO_Init+0x158>)
 80015b6:	f003 fc05 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SUPPLY_ENABLE_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SUPPLY_ENABLE_Pin|LD2_Pin;
 80015ba:	2330      	movs	r3, #48	; 0x30
 80015bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015be:	2301      	movs	r3, #1
 80015c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	4813      	ldr	r0, [pc, #76]	; (8001620 <MX_GPIO_Init+0x158>)
 80015d2:	f003 fbf7 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INFRARED_SENSOR_Pin */
  GPIO_InitStruct.Pin = INFRARED_SENSOR_Pin;
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INFRARED_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <MX_GPIO_Init+0x154>)
 80015ea:	f003 fbeb 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001600:	2308      	movs	r3, #8
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_GPIO_Init+0x158>)
 800160c:	f003 fbda 	bl	8004dc4 <HAL_GPIO_Init>

}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	40020800 	.word	0x40020800
 8001620:	40020000 	.word	0x40020000

08001624 <MAIN_DIFFDRIVE_Init>:

/* USER CODE BEGIN 4 */

static void MAIN_DIFFDRIVE_Init(void){
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0

	float Ts= 0.01;
 800162a:	4b58      	ldr	r3, [pc, #352]	; (800178c <MAIN_DIFFDRIVE_Init+0x168>)
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
	int max_sample= 1400;
 800162e:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8001632:	623b      	str	r3, [r7, #32]

	hdiffdrive.Init.timing_htim= &htim3;
 8001634:	4b56      	ldr	r3, [pc, #344]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001636:	4a57      	ldr	r2, [pc, #348]	; (8001794 <MAIN_DIFFDRIVE_Init+0x170>)
 8001638:	649a      	str	r2, [r3, #72]	; 0x48
	hdiffdrive.Init.timing_time_step= Ts;
 800163a:	4a55      	ldr	r2, [pc, #340]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	64d3      	str	r3, [r2, #76]	; 0x4c

	hdiffdrive.Init.encoder_htim[left ]= &htim2;
 8001640:	4b53      	ldr	r3, [pc, #332]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001642:	4a55      	ldr	r2, [pc, #340]	; (8001798 <MAIN_DIFFDRIVE_Init+0x174>)
 8001644:	639a      	str	r2, [r3, #56]	; 0x38
	hdiffdrive.Init.encoder_htim[right]= &htim5;
 8001646:	4b52      	ldr	r3, [pc, #328]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001648:	4a54      	ldr	r2, [pc, #336]	; (800179c <MAIN_DIFFDRIVE_Init+0x178>)
 800164a:	63da      	str	r2, [r3, #60]	; 0x3c
	hdiffdrive.Init.encoder_channel[left ]= TIM_CHANNEL_1;
 800164c:	4b50      	ldr	r3, [pc, #320]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 800164e:	2200      	movs	r2, #0
 8001650:	641a      	str	r2, [r3, #64]	; 0x40
	hdiffdrive.Init.encoder_channel[right]= TIM_CHANNEL_1;
 8001652:	4b4f      	ldr	r3, [pc, #316]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001654:	2200      	movs	r2, #0
 8001656:	645a      	str	r2, [r3, #68]	; 0x44

	hdiffdrive.Init.encoder_resolution[left ]= 1900; //1920; // Number of step each wheel revolution
 8001658:	4b4d      	ldr	r3, [pc, #308]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 800165a:	4a51      	ldr	r2, [pc, #324]	; (80017a0 <MAIN_DIFFDRIVE_Init+0x17c>)
 800165c:	65da      	str	r2, [r3, #92]	; 0x5c
	hdiffdrive.Init.encoder_resolution[right]= 1900; //1920;
 800165e:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001660:	4a4f      	ldr	r2, [pc, #316]	; (80017a0 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001662:	661a      	str	r2, [r3, #96]	; 0x60

	hdiffdrive.Init.motor_htim[left ][forward ]= &htim1;
 8001664:	4b4a      	ldr	r3, [pc, #296]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001666:	4a4f      	ldr	r2, [pc, #316]	; (80017a4 <MAIN_DIFFDRIVE_Init+0x180>)
 8001668:	601a      	str	r2, [r3, #0]
	hdiffdrive.Init.motor_htim[left ][backward]= &htim1;
 800166a:	4b49      	ldr	r3, [pc, #292]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 800166c:	4a4d      	ldr	r2, [pc, #308]	; (80017a4 <MAIN_DIFFDRIVE_Init+0x180>)
 800166e:	605a      	str	r2, [r3, #4]
	hdiffdrive.Init.motor_htim[right][forward ]= &htim1;
 8001670:	4b47      	ldr	r3, [pc, #284]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001672:	4a4c      	ldr	r2, [pc, #304]	; (80017a4 <MAIN_DIFFDRIVE_Init+0x180>)
 8001674:	609a      	str	r2, [r3, #8]
	hdiffdrive.Init.motor_htim[right][backward]= &htim1;
 8001676:	4b46      	ldr	r3, [pc, #280]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001678:	4a4a      	ldr	r2, [pc, #296]	; (80017a4 <MAIN_DIFFDRIVE_Init+0x180>)
 800167a:	60da      	str	r2, [r3, #12]

	hdiffdrive.Init.motor_pwm_channel[left ][forward ]= TIM_CHANNEL_1;
 800167c:	4b44      	ldr	r3, [pc, #272]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
	hdiffdrive.Init.motor_pwm_channel[left ][backward]= TIM_CHANNEL_2;
 8001682:	4b43      	ldr	r3, [pc, #268]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001684:	2204      	movs	r2, #4
 8001686:	615a      	str	r2, [r3, #20]
	hdiffdrive.Init.motor_pwm_channel[right][forward ]= TIM_CHANNEL_3;
 8001688:	4b41      	ldr	r3, [pc, #260]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 800168a:	2208      	movs	r2, #8
 800168c:	619a      	str	r2, [r3, #24]
	hdiffdrive.Init.motor_pwm_channel[right][backward]= TIM_CHANNEL_4;
 800168e:	4b40      	ldr	r3, [pc, #256]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001690:	220c      	movs	r2, #12
 8001692:	61da      	str	r2, [r3, #28]

	hdiffdrive.Init.motor_max_voltage[left ]= 	  MOTOR_MAX_VOLTAGE;
 8001694:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001696:	4a44      	ldr	r2, [pc, #272]	; (80017a8 <MAIN_DIFFDRIVE_Init+0x184>)
 8001698:	629a      	str	r2, [r3, #40]	; 0x28
	hdiffdrive.Init.motor_max_voltage[right]= 	  MOTOR_MAX_VOLTAGE;
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 800169c:	4a42      	ldr	r2, [pc, #264]	; (80017a8 <MAIN_DIFFDRIVE_Init+0x184>)
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
	hdiffdrive.Init.motor_min_voltage[left ]= 	  MOTOR_MIN_VOLTAGE;
 80016a0:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
	hdiffdrive.Init.motor_min_voltage[right]= 	  MOTOR_MIN_VOLTAGE;
 80016a8:	4b39      	ldr	r3, [pc, #228]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	635a      	str	r2, [r3, #52]	; 0x34
	hdiffdrive.Init.motor_supply_voltage[left]=   SUPPLY_VOLTAGE;
 80016b0:	4b37      	ldr	r3, [pc, #220]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 80016b2:	4a3d      	ldr	r2, [pc, #244]	; (80017a8 <MAIN_DIFFDRIVE_Init+0x184>)
 80016b4:	621a      	str	r2, [r3, #32]
	hdiffdrive.Init.motor_supply_voltage[right]=  SUPPLY_VOLTAGE;
 80016b6:	4b36      	ldr	r3, [pc, #216]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 80016b8:	4a3b      	ldr	r2, [pc, #236]	; (80017a8 <MAIN_DIFFDRIVE_Init+0x184>)
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24

	hdiffdrive.Init.control_fdfrwrd_arma_AR[left ]= AR_L;
 80016bc:	4a3b      	ldr	r2, [pc, #236]	; (80017ac <MAIN_DIFFDRIVE_Init+0x188>)
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80016c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016c8:	4a31      	ldr	r2, [pc, #196]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	6713      	str	r3, [r2, #112]	; 0x70
	hdiffdrive.Init.control_fdfrwrd_arma_AR[right]= AR_R;
 80016d0:	4a37      	ldr	r2, [pc, #220]	; (80017b0 <MAIN_DIFFDRIVE_Init+0x18c>)
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80016d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016dc:	4a2c      	ldr	r2, [pc, #176]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	6753      	str	r3, [r2, #116]	; 0x74
	hdiffdrive.Init.control_fdfrwrd_arma_MA[left ]= MA_L;
 80016e4:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <MAIN_DIFFDRIVE_Init+0x190>)
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	4a29      	ldr	r2, [pc, #164]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	6793      	str	r3, [r2, #120]	; 0x78
	hdiffdrive.Init.control_fdfrwrd_arma_MA[right]= MA_R;
 80016ee:	4b32      	ldr	r3, [pc, #200]	; (80017b8 <MAIN_DIFFDRIVE_Init+0x194>)
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	4a27      	ldr	r2, [pc, #156]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 80016f4:	463b      	mov	r3, r7
 80016f6:	67d3      	str	r3, [r2, #124]	; 0x7c
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[left ]= N_AR_L;
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 80016fa:	2203      	movs	r2, #3
 80016fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[right]= N_AR_R;
 8001700:	4b23      	ldr	r3, [pc, #140]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001702:	2203      	movs	r2, #3
 8001704:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[left ]= N_MA_L;
 8001708:	4b21      	ldr	r3, [pc, #132]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 800170a:	2201      	movs	r2, #1
 800170c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[right]= N_MA_R;
 8001710:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001712:	2201      	movs	r2, #1
 8001714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	hdiffdrive.Init.control_fdfrwrd_arma_tau[left ]= TAU_L;
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 800171a:	2202      	movs	r2, #2
 800171c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	hdiffdrive.Init.control_fdfrwrd_arma_tau[right]= TAU_R;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001722:	2202      	movs	r2, #2
 8001724:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	hdiffdrive.Init.control_pid_P[left ]= 40;  //33.3;
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 800172a:	4a24      	ldr	r2, [pc, #144]	; (80017bc <MAIN_DIFFDRIVE_Init+0x198>)
 800172c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	hdiffdrive.Init.control_pid_P[right]= 40;  //33.3;
 8001730:	4b17      	ldr	r3, [pc, #92]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001732:	4a22      	ldr	r2, [pc, #136]	; (80017bc <MAIN_DIFFDRIVE_Init+0x198>)
 8001734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	hdiffdrive.Init.control_pid_I[left ]= 8;   //7.6;
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 800173a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800173e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	hdiffdrive.Init.control_pid_I[right]= 8;   //7.6;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001744:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	hdiffdrive.Init.control_pid_D[left ]= 0;
 800174c:	4b10      	ldr	r3, [pc, #64]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	hdiffdrive.Init.control_pid_D[right]= 0;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	hdiffdrive.Init.history_max_sample= max_sample;
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	hdiffdrive.Init.mech_prmtr_l=               0.155/2;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 800176a:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <MAIN_DIFFDRIVE_Init+0x19c>)
 800176c:	655a      	str	r2, [r3, #84]	; 0x54
	hdiffdrive.Init.mech_prmtr_r=               0.069/2;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <MAIN_DIFFDRIVE_Init+0x1a0>)
 8001772:	651a      	str	r2, [r3, #80]	; 0x50
	hdiffdrive.Init.mech_prmtr_max_wheel_speed= 16;      // 16 rad/s, from DC motor specifics
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001776:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800177a:	659a      	str	r2, [r3, #88]	; 0x58


	DIFFDRIVE_Init(&hdiffdrive);
 800177c:	4804      	ldr	r0, [pc, #16]	; (8001790 <MAIN_DIFFDRIVE_Init+0x16c>)
 800177e:	f000 fdcf 	bl	8002320 <DIFFDRIVE_Init>

}
 8001782:	bf00      	nop
 8001784:	3728      	adds	r7, #40	; 0x28
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	3c23d70a 	.word	0x3c23d70a
 8001790:	20004df4 	.word	0x20004df4
 8001794:	20004bbc 	.word	0x20004bbc
 8001798:	20004d40 	.word	0x20004d40
 800179c:	20004b08 	.word	0x20004b08
 80017a0:	44ed8000 	.word	0x44ed8000
 80017a4:	20004c8c 	.word	0x20004c8c
 80017a8:	40f00000 	.word	0x40f00000
 80017ac:	0800be74 	.word	0x0800be74
 80017b0:	0800be80 	.word	0x0800be80
 80017b4:	3a28296b 	.word	0x3a28296b
 80017b8:	3a22717f 	.word	0x3a22717f
 80017bc:	42200000 	.word	0x42200000
 80017c0:	3d9eb852 	.word	0x3d9eb852
 80017c4:	3d0d4fdf 	.word	0x3d0d4fdf

080017c8 <MAIN_MAF_Init>:

// Moving Average Filter initialization --------------------------------------------- //
static void MAIN_MAF_Init(void){
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0

	int filtr_a_size= 		 60;
 80017ce:	233c      	movs	r3, #60	; 0x3c
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
	int filtr_th_size=		 60;
 80017d2:	233c      	movs	r3, #60	; 0x3c
 80017d4:	623b      	str	r3, [r7, #32]
	int filtr_infrared_size= 100;
 80017d6:	2364      	movs	r3, #100	; 0x64
 80017d8:	61fb      	str	r3, [r7, #28]
	// Null pointer to use a MAF without weights
	void* weights_buff= NULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]

	// Creating filters
	hfilter_a  = MAF_Create(filtr_a_size,  weights_buff);
 80017de:	4c18      	ldr	r4, [pc, #96]	; (8001840 <MAIN_MAF_Init+0x78>)
 80017e0:	463b      	mov	r3, r7
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 fa50 	bl	8003c8c <MAF_Create>
 80017ec:	4625      	mov	r5, r4
 80017ee:	463c      	mov	r4, r7
 80017f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017f8:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_th = MAF_Create(filtr_th_size, weights_buff);
 80017fc:	4c11      	ldr	r4, [pc, #68]	; (8001844 <MAIN_MAF_Init+0x7c>)
 80017fe:	463b      	mov	r3, r7
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	6a39      	ldr	r1, [r7, #32]
 8001804:	4618      	mov	r0, r3
 8001806:	f002 fa41 	bl	8003c8c <MAF_Create>
 800180a:	4625      	mov	r5, r4
 800180c:	463c      	mov	r4, r7
 800180e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001812:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001816:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_infrared = MAF_Create(filtr_infrared_size, weights_buff);
 800181a:	4c0b      	ldr	r4, [pc, #44]	; (8001848 <MAIN_MAF_Init+0x80>)
 800181c:	463b      	mov	r3, r7
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	69f9      	ldr	r1, [r7, #28]
 8001822:	4618      	mov	r0, r3
 8001824:	f002 fa32 	bl	8003c8c <MAF_Create>
 8001828:	4625      	mov	r5, r4
 800182a:	463c      	mov	r4, r7
 800182c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001830:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001834:	e885 0003 	stmia.w	r5, {r0, r1}

}
 8001838:	bf00      	nop
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bdb0      	pop	{r4, r5, r7, pc}
 8001840:	20005034 	.word	0x20005034
 8001844:	20004c70 	.word	0x20004c70
 8001848:	200049b8 	.word	0x200049b8

0800184c <MoveDifferentialDrive>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MoveDifferentialDrive */
void MoveDifferentialDrive(void *argument)
{
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	float delta_a, delta_th;
	float delta_a_max= 3.8e-3, delta_th_max= 4e-2, delta_a_max_curr;
 8001854:	4b6c      	ldr	r3, [pc, #432]	; (8001a08 <MoveDifferentialDrive+0x1bc>)
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	4b6c      	ldr	r3, [pc, #432]	; (8001a0c <MoveDifferentialDrive+0x1c0>)
 800185a:	613b      	str	r3, [r7, #16]

	float IR_val;

	bool stop_flag= true;
 800185c:	2301      	movs	r3, #1
 800185e:	76fb      	strb	r3, [r7, #27]

	/* Infinite loop */
	for(;;){

		if( delta_th > 0 )
 8001860:	edd7 7a08 	vldr	s15, [r7, #32]
 8001864:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186c:	dd29      	ble.n	80018c2 <MoveDifferentialDrive+0x76>
			delta_a_max_curr= delta_a_max * (1-delta_th/delta_th_max*0.5);
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7fe fe32 	bl	80004d8 <__aeabi_f2d>
 8001874:	4604      	mov	r4, r0
 8001876:	460d      	mov	r5, r1
 8001878:	ed97 7a08 	vldr	s14, [r7, #32]
 800187c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001880:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001884:	ee16 0a90 	vmov	r0, s13
 8001888:	f7fe fe26 	bl	80004d8 <__aeabi_f2d>
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	4b5f      	ldr	r3, [pc, #380]	; (8001a10 <MoveDifferentialDrive+0x1c4>)
 8001892:	f7fe fe79 	bl	8000588 <__aeabi_dmul>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	f04f 0000 	mov.w	r0, #0
 800189e:	495d      	ldr	r1, [pc, #372]	; (8001a14 <MoveDifferentialDrive+0x1c8>)
 80018a0:	f7fe fcba 	bl	8000218 <__aeabi_dsub>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4620      	mov	r0, r4
 80018aa:	4629      	mov	r1, r5
 80018ac:	f7fe fe6c 	bl	8000588 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f948 	bl	8000b4c <__aeabi_d2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	e02a      	b.n	8001918 <MoveDifferentialDrive+0xcc>
		else
			delta_a_max_curr= delta_a_max * (1+delta_th/delta_th_max*0.5);
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7fe fe08 	bl	80004d8 <__aeabi_f2d>
 80018c8:	4604      	mov	r4, r0
 80018ca:	460d      	mov	r5, r1
 80018cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80018d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80018d8:	ee16 0a90 	vmov	r0, s13
 80018dc:	f7fe fdfc 	bl	80004d8 <__aeabi_f2d>
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <MoveDifferentialDrive+0x1c4>)
 80018e6:	f7fe fe4f 	bl	8000588 <__aeabi_dmul>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <MoveDifferentialDrive+0x1c8>)
 80018f8:	f7fe fc90 	bl	800021c <__adddf3>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4620      	mov	r0, r4
 8001902:	4629      	mov	r1, r5
 8001904:	f7fe fe40 	bl	8000588 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f91c 	bl	8000b4c <__aeabi_d2f>
 8001914:	4603      	mov	r3, r0
 8001916:	61fb      	str	r3, [r7, #28]

		if( x_val != 0 || y_val != 0  ){
 8001918:	4b3f      	ldr	r3, [pc, #252]	; (8001a18 <MoveDifferentialDrive+0x1cc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d103      	bne.n	8001928 <MoveDifferentialDrive+0xdc>
 8001920:	4b3e      	ldr	r3, [pc, #248]	; (8001a1c <MoveDifferentialDrive+0x1d0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d027      	beq.n	8001978 <MoveDifferentialDrive+0x12c>

			delta_a  = (float)x_val/512 * delta_a_max_curr;
 8001928:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <MoveDifferentialDrive+0x1cc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001934:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001a20 <MoveDifferentialDrive+0x1d4>
 8001938:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001944:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			delta_th = (float)y_val/512 * delta_th_max;
 8001948:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <MoveDifferentialDrive+0x1d0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001954:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001a20 <MoveDifferentialDrive+0x1d4>
 8001958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800195c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001964:	edc7 7a08 	vstr	s15, [r7, #32]

			if( stop_flag ){
 8001968:	7efb      	ldrb	r3, [r7, #27]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d018      	beq.n	80019a0 <MoveDifferentialDrive+0x154>
				DIFFDRIVE_TrackingStart();
 800196e:	f002 f929 	bl	8003bc4 <DIFFDRIVE_TrackingStart>
				stop_flag= false;
 8001972:	2300      	movs	r3, #0
 8001974:	76fb      	strb	r3, [r7, #27]
			if( stop_flag ){
 8001976:	e013      	b.n	80019a0 <MoveDifferentialDrive+0x154>
			}
		}
		else{
			DIFFDRIVE_TrackingStop();
 8001978:	f002 f932 	bl	8003be0 <DIFFDRIVE_TrackingStop>
			MAF_Reset(&hfilter_a, 0);
 800197c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8001a24 <MoveDifferentialDrive+0x1d8>
 8001980:	4829      	ldr	r0, [pc, #164]	; (8001a28 <MoveDifferentialDrive+0x1dc>)
 8001982:	f002 f9aa 	bl	8003cda <MAF_Reset>
			MAF_Reset(&hfilter_th, 0);
 8001986:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8001a24 <MoveDifferentialDrive+0x1d8>
 800198a:	4828      	ldr	r0, [pc, #160]	; (8001a2c <MoveDifferentialDrive+0x1e0>)
 800198c:	f002 f9a5 	bl	8003cda <MAF_Reset>

			stop_flag= true;
 8001990:	2301      	movs	r3, #1
 8001992:	76fb      	strb	r3, [r7, #27]

			delta_a=  0;
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
			delta_th= 0;
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
		}

		// Update filters
		MAF_Update(&hfilter_a,  delta_a);
 80019a0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80019a4:	4820      	ldr	r0, [pc, #128]	; (8001a28 <MoveDifferentialDrive+0x1dc>)
 80019a6:	f002 f9c0 	bl	8003d2a <MAF_Update>
		MAF_Update(&hfilter_th, delta_th);
 80019aa:	ed97 0a08 	vldr	s0, [r7, #32]
 80019ae:	481f      	ldr	r0, [pc, #124]	; (8001a2c <MoveDifferentialDrive+0x1e0>)
 80019b0:	f002 f9bb 	bl	8003d2a <MAF_Update>

		// Get current values
		delta_a=  __MAF_GET_VAL(&hfilter_a);
 80019b4:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <MoveDifferentialDrive+0x1dc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
		delta_th= __MAF_GET_VAL(&hfilter_th);
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <MoveDifferentialDrive+0x1e0>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	623b      	str	r3, [r7, #32]

		// Infrared sensor value
		IR_val = __MAF_GET_VAL(&hfilter_infrared);
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <MoveDifferentialDrive+0x1e4>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	60fb      	str	r3, [r7, #12]

		// If IR_val == 0 delta_a = 0
		if( delta_a > 0 && IR_val < 0.5 )
 80019c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d2:	dd0b      	ble.n	80019ec <MoveDifferentialDrive+0x1a0>
 80019d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e4:	d502      	bpl.n	80019ec <MoveDifferentialDrive+0x1a0>
			delta_a = 0;
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24

		// Make step control
		if( !stop_flag )
 80019ec:	7efb      	ldrb	r3, [r7, #27]
 80019ee:	f083 0301 	eor.w	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f43f af33 	beq.w	8001860 <MoveDifferentialDrive+0x14>
			DIFFDRIVE_TrackingStep(delta_a, delta_th);
 80019fa:	edd7 0a08 	vldr	s1, [r7, #32]
 80019fe:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001a02:	f002 f8f3 	bl	8003bec <DIFFDRIVE_TrackingStep>
		if( delta_th > 0 )
 8001a06:	e72b      	b.n	8001860 <MoveDifferentialDrive+0x14>
 8001a08:	3b79096c 	.word	0x3b79096c
 8001a0c:	3d23d70a 	.word	0x3d23d70a
 8001a10:	3fe00000 	.word	0x3fe00000
 8001a14:	3ff00000 	.word	0x3ff00000
 8001a18:	20000090 	.word	0x20000090
 8001a1c:	20000094 	.word	0x20000094
 8001a20:	44000000 	.word	0x44000000
 8001a24:	00000000 	.word	0x00000000
 8001a28:	20005034 	.word	0x20005034
 8001a2c:	20004c70 	.word	0x20004c70
 8001a30:	200049b8 	.word	0x200049b8

08001a34 <UART_RxCpltCallback>:
* @param argument: Not used
* @retval None
*/

volatile bool data_received= false;
void UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	data_received = true;
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <UART_RxCpltCallback+0x1c>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000098 	.word	0x20000098

08001a54 <SerialCommunication>:
	data_transmitted = true;
}
*/
/* USER CODE END Header_SerialCommunication */
void SerialCommunication(void *argument)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b092      	sub	sp, #72	; 0x48
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SerialCommunication */
	/* Infinite loop */

	// Values threshold
	int val_thres= 10;
 8001a5c:	230a      	movs	r3, #10
 8001a5e:	633b      	str	r3, [r7, #48]	; 0x30

	// Assign uart Rx complete callback (function defined above in this file)
	huart3.RxCpltCallback= UART_RxCpltCallback;
 8001a60:	4b9d      	ldr	r3, [pc, #628]	; (8001cd8 <SerialCommunication+0x284>)
 8001a62:	4a9e      	ldr	r2, [pc, #632]	; (8001cdc <SerialCommunication+0x288>)
 8001a64:	651a      	str	r2, [r3, #80]	; 0x50
	HAL_UART_Transmit_DMA(&huart3, (uint8_t*)tmp_str_1, sizeof(tmp_str_1));
	while( !data_transmitted )
		__NOP();
*/
	// Wait for a good input
	data[0]= '\0';
 8001a66:	2300      	movs	r3, #0
 8001a68:	763b      	strb	r3, [r7, #24]
	bool bad_input= true;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while( bad_input ){
 8001a70:	e039      	b.n	8001ae6 <SerialCommunication+0x92>
		data_received= false;
 8001a72:	4b9b      	ldr	r3, [pc, #620]	; (8001ce0 <SerialCommunication+0x28c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, data, sizeof(data));
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	2214      	movs	r2, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4895      	ldr	r0, [pc, #596]	; (8001cd8 <SerialCommunication+0x284>)
 8001a82:	f005 fc37 	bl	80072f4 <HAL_UART_Receive_DMA>
		while( !data_received )
 8001a86:	e000      	b.n	8001a8a <SerialCommunication+0x36>
			__NOP();
 8001a88:	bf00      	nop
		while( !data_received )
 8001a8a:	4b95      	ldr	r3, [pc, #596]	; (8001ce0 <SerialCommunication+0x28c>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f083 0301 	eor.w	r3, r3, #1
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f6      	bne.n	8001a88 <SerialCommunication+0x34>
		for(char ch=48; ch<58; ch++ )
 8001a9a:	2330      	movs	r3, #48	; 0x30
 8001a9c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001aa0:	e00d      	b.n	8001abe <SerialCommunication+0x6a>
			if( data[0] == ch ){
 8001aa2:	7e3b      	ldrb	r3, [r7, #24]
 8001aa4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d103      	bne.n	8001ab4 <SerialCommunication+0x60>
				bad_input= false;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8001ab2:	e008      	b.n	8001ac6 <SerialCommunication+0x72>
		for(char ch=48; ch<58; ch++ )
 8001ab4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001abe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001ac2:	2b39      	cmp	r3, #57	; 0x39
 8001ac4:	d9ed      	bls.n	8001aa2 <SerialCommunication+0x4e>
			}
		if( bad_input && (data[0] == 's' || data[0] == 'e' || data[0] == ' ') )
 8001ac6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <SerialCommunication+0x92>
 8001ace:	7e3b      	ldrb	r3, [r7, #24]
 8001ad0:	2b73      	cmp	r3, #115	; 0x73
 8001ad2:	d005      	beq.n	8001ae0 <SerialCommunication+0x8c>
 8001ad4:	7e3b      	ldrb	r3, [r7, #24]
 8001ad6:	2b65      	cmp	r3, #101	; 0x65
 8001ad8:	d002      	beq.n	8001ae0 <SerialCommunication+0x8c>
 8001ada:	7e3b      	ldrb	r3, [r7, #24]
 8001adc:	2b20      	cmp	r3, #32
 8001ade:	d102      	bne.n	8001ae6 <SerialCommunication+0x92>
			bad_input= false;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while( bad_input ){
 8001ae6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1c1      	bne.n	8001a72 <SerialCommunication+0x1e>
	}

	// LED off to show that data transfer is up
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2120      	movs	r1, #32
 8001af2:	487c      	ldr	r0, [pc, #496]	; (8001ce4 <SerialCommunication+0x290>)
 8001af4:	f003 fb12 	bl	800511c <HAL_GPIO_WritePin>

	// Measure time
	uint32_t tic= osKernelGetTickCount();
 8001af8:	f006 f93a 	bl	8007d70 <osKernelGetTickCount>
 8001afc:	6438      	str	r0, [r7, #64]	; 0x40
	uint32_t toc;

	for(;;){

		if( data_received ){
 8001afe:	4b78      	ldr	r3, [pc, #480]	; (8001ce0 <SerialCommunication+0x28c>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 8092 	beq.w	8001c2e <SerialCommunication+0x1da>

			// Find message packet start index (where the 's' char is)
			int start_idx;
			for(start_idx= 0; data[start_idx] != 's'; start_idx++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b0e:	e002      	b.n	8001b16 <SerialCommunication+0xc2>
 8001b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b12:	3301      	adds	r3, #1
 8001b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b16:	f107 0218 	add.w	r2, r7, #24
 8001b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b1c:	4413      	add	r3, r2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b73      	cmp	r3, #115	; 0x73
 8001b22:	d1f5      	bne.n	8001b10 <SerialCommunication+0xbc>
				;

			// Read message
			for(int i=start_idx+1; i<start_idx+5; i++)
 8001b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b26:	3301      	adds	r3, #1
 8001b28:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b2a:	e010      	b.n	8001b4e <SerialCommunication+0xfa>
				tmp_str_1[i-(1+start_idx)] = data[i];
 8001b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b2e:	3301      	adds	r3, #1
 8001b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	f107 0118 	add.w	r1, r7, #24
 8001b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b3a:	440a      	add	r2, r1
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b42:	440b      	add	r3, r1
 8001b44:	f803 2c38 	strb.w	r2, [r3, #-56]
			for(int i=start_idx+1; i<start_idx+5; i++)
 8001b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b50:	3304      	adds	r3, #4
 8001b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b54:	429a      	cmp	r2, r3
 8001b56:	dde9      	ble.n	8001b2c <SerialCommunication+0xd8>
			tmp_str_1[4]= '\0';
 8001b58:	2300      	movs	r3, #0
 8001b5a:	753b      	strb	r3, [r7, #20]
			for(int i=start_idx+5; i<start_idx+9; i++)
 8001b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b5e:	3305      	adds	r3, #5
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
 8001b62:	e010      	b.n	8001b86 <SerialCommunication+0x132>
				tmp_str_2[i-(5+start_idx)] = data[i];
 8001b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b66:	3305      	adds	r3, #5
 8001b68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	f107 0118 	add.w	r1, r7, #24
 8001b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b72:	440a      	add	r2, r1
 8001b74:	7812      	ldrb	r2, [r2, #0]
 8001b76:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f803 2c40 	strb.w	r2, [r3, #-64]
			for(int i=start_idx+5; i<start_idx+9; i++)
 8001b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b82:	3301      	adds	r3, #1
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
 8001b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b88:	3308      	adds	r3, #8
 8001b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dde9      	ble.n	8001b64 <SerialCommunication+0x110>
			tmp_str_2[4]= '\0';
 8001b90:	2300      	movs	r3, #0
 8001b92:	733b      	strb	r3, [r7, #12]

			// Convert in integer values
			x_val= (float)atoi((char*) tmp_str_1);
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f008 ff5f 	bl	800aa5c <atoi>
 8001b9e:	ee07 0a90 	vmov	s15, r0
 8001ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001baa:	ee17 2a90 	vmov	r2, s15
 8001bae:	4b4e      	ldr	r3, [pc, #312]	; (8001ce8 <SerialCommunication+0x294>)
 8001bb0:	601a      	str	r2, [r3, #0]
			y_val= (float)atoi((char*) tmp_str_2);
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f008 ff50 	bl	800aa5c <atoi>
 8001bbc:	ee07 0a90 	vmov	s15, r0
 8001bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc8:	ee17 2a90 	vmov	r2, s15
 8001bcc:	4b47      	ldr	r3, [pc, #284]	; (8001cec <SerialCommunication+0x298>)
 8001bce:	601a      	str	r2, [r3, #0]

			// Convert values from 0 to 1023 to about -512 to 512 (values are generated from a joystick,
			// connected to an Arduino with a 10 bit resolution ADC)
			x_val= -(1023-x_val-512+1); // Inverted values
 8001bd0:	4b45      	ldr	r3, [pc, #276]	; (8001ce8 <SerialCommunication+0x294>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001bd8:	4a43      	ldr	r2, [pc, #268]	; (8001ce8 <SerialCommunication+0x294>)
 8001bda:	6013      	str	r3, [r2, #0]
			y_val=  (1023-y_val-512+9);
 8001bdc:	4b43      	ldr	r3, [pc, #268]	; (8001cec <SerialCommunication+0x298>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f5c3 7302 	rsb	r3, r3, #520	; 0x208
 8001be4:	4a41      	ldr	r2, [pc, #260]	; (8001cec <SerialCommunication+0x298>)
 8001be6:	6013      	str	r3, [r2, #0]

			// Set zero values below a threshold to reject noise
			if( abs(x_val) < val_thres )
 8001be8:	4b3f      	ldr	r3, [pc, #252]	; (8001ce8 <SerialCommunication+0x294>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bfb8      	it	lt
 8001bf0:	425b      	neglt	r3, r3
 8001bf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	dd02      	ble.n	8001bfe <SerialCommunication+0x1aa>
				x_val= 0;
 8001bf8:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <SerialCommunication+0x294>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
			if( abs(y_val) < val_thres )
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <SerialCommunication+0x298>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bfb8      	it	lt
 8001c06:	425b      	neglt	r3, r3
 8001c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	dd02      	ble.n	8001c14 <SerialCommunication+0x1c0>
				y_val= 0;
 8001c0e:	4b37      	ldr	r3, [pc, #220]	; (8001cec <SerialCommunication+0x298>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

			// Ready for new messages
			data_received= false;
 8001c14:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <SerialCommunication+0x28c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart3, data, sizeof(data));
 8001c1a:	f107 0318 	add.w	r3, r7, #24
 8001c1e:	2214      	movs	r2, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	482d      	ldr	r0, [pc, #180]	; (8001cd8 <SerialCommunication+0x284>)
 8001c24:	f005 fb66 	bl	80072f4 <HAL_UART_Receive_DMA>

			tic= osKernelGetTickCount();
 8001c28:	f006 f8a2 	bl	8007d70 <osKernelGetTickCount>
 8001c2c:	6438      	str	r0, [r7, #64]	; 0x40

		}

		// If data aren't received for a period of time
		if( (toc= osKernelGetTickCount()-tic) > 1000 ){
 8001c2e:	f006 f89f 	bl	8007d70 <osKernelGetTickCount>
 8001c32:	4602      	mov	r2, r0
 8001c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c40:	f67f af5d 	bls.w	8001afe <SerialCommunication+0xaa>
			// Set values to zero
			x_val= 0;
 8001c44:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <SerialCommunication+0x294>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
			y_val= 0;
 8001c4a:	4b28      	ldr	r3, [pc, #160]	; (8001cec <SerialCommunication+0x298>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

			osDelay(100);
 8001c50:	2064      	movs	r0, #100	; 0x64
 8001c52:	f006 f976 	bl	8007f42 <osDelay>

			// Suspend other thread
			osThreadSuspend(DiffDriveHandle);
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <SerialCommunication+0x29c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f006 f92f 	bl	8007ebe <osThreadSuspend>

			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2120      	movs	r1, #32
 8001c64:	481f      	ldr	r0, [pc, #124]	; (8001ce4 <SerialCommunication+0x290>)
 8001c66:	f003 fa59 	bl	800511c <HAL_GPIO_WritePin>

			// Reset uart Rx and DMA interrupt
			HAL_NVIC_DisableIRQ(DMA1_Stream1_IRQn);
 8001c6a:	200c      	movs	r0, #12
 8001c6c:	f002 fd27 	bl	80046be <HAL_NVIC_DisableIRQ>
			huart3.RxState= HAL_UART_STATE_READY;
 8001c70:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <SerialCommunication+0x284>)
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c78:	200c      	movs	r0, #12
 8001c7a:	f002 fd12 	bl	80046a2 <HAL_NVIC_EnableIRQ>

			// Start a new DMA receiving request
			HAL_UART_Receive_DMA(&huart3, data, sizeof(data));
 8001c7e:	f107 0318 	add.w	r3, r7, #24
 8001c82:	2214      	movs	r2, #20
 8001c84:	4619      	mov	r1, r3
 8001c86:	4814      	ldr	r0, [pc, #80]	; (8001cd8 <SerialCommunication+0x284>)
 8001c88:	f005 fb34 	bl	80072f4 <HAL_UART_Receive_DMA>

			// Wait for input
			while( !data_received ){
 8001c8c:	e00d      	b.n	8001caa <SerialCommunication+0x256>
				// If more time elapses, without data, reset system
				if( (osKernelGetTickCount()-tic) > 6*toc ){
 8001c8e:	f006 f86f 	bl	8007d70 <osKernelGetTickCount>
 8001c92:	4602      	mov	r2, r0
 8001c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c96:	1ad1      	subs	r1, r2, r3
 8001c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4299      	cmp	r1, r3
 8001ca4:	d901      	bls.n	8001caa <SerialCommunication+0x256>

					// Reset MCU
					HAL_NVIC_SystemReset();
 8001ca6:	f002 fd18 	bl	80046da <HAL_NVIC_SystemReset>
			while( !data_received ){
 8001caa:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <SerialCommunication+0x28c>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f083 0301 	eor.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1e9      	bne.n	8001c8e <SerialCommunication+0x23a>

				}
			}

			osDelay(1000);
 8001cba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cbe:	f006 f940 	bl	8007f42 <osDelay>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	2120      	movs	r1, #32
 8001cc6:	4807      	ldr	r0, [pc, #28]	; (8001ce4 <SerialCommunication+0x290>)
 8001cc8:	f003 fa28 	bl	800511c <HAL_GPIO_WritePin>

			// Resume other thread
			osThreadResume(DiffDriveHandle);
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <SerialCommunication+0x29c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f006 f915 	bl	8007f00 <osThreadResume>
		if( data_received ){
 8001cd6:	e712      	b.n	8001afe <SerialCommunication+0xaa>
 8001cd8:	20004a30 	.word	0x20004a30
 8001cdc:	08001a35 	.word	0x08001a35
 8001ce0:	20000098 	.word	0x20000098
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	20000090 	.word	0x20000090
 8001cec:	20000094 	.word	0x20000094
 8001cf0:	2000504c 	.word	0x2000504c

08001cf4 <InfraredSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_InfraredSensor */
void InfraredSensor(void *argument)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN InfraredSensor */

  int sens=0, k=0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	2300      	movs	r3, #0
 8001d02:	60bb      	str	r3, [r7, #8]
  (void) k;

  /* Infinite loop */
  for(;;)
  {
	  sens= HAL_GPIO_ReadPin(INFRARED_SENSOR_GPIO_Port, INFRARED_SENSOR_Pin);
 8001d04:	2180      	movs	r1, #128	; 0x80
 8001d06:	4809      	ldr	r0, [pc, #36]	; (8001d2c <InfraredSensor+0x38>)
 8001d08:	f003 f9f0 	bl	80050ec <HAL_GPIO_ReadPin>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60fb      	str	r3, [r7, #12]

	  MAF_Update(&hfilter_infrared, sens);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1e:	4804      	ldr	r0, [pc, #16]	; (8001d30 <InfraredSensor+0x3c>)
 8001d20:	f002 f803 	bl	8003d2a <MAF_Update>

	  osDelay(1);
 8001d24:	2001      	movs	r0, #1
 8001d26:	f006 f90c 	bl	8007f42 <osDelay>
	  sens= HAL_GPIO_ReadPin(INFRARED_SENSOR_GPIO_Port, INFRARED_SENSOR_Pin);
 8001d2a:	e7eb      	b.n	8001d04 <InfraredSensor+0x10>
 8001d2c:	40020800 	.word	0x40020800
 8001d30:	200049b8 	.word	0x200049b8

08001d34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d101      	bne.n	8001d4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d46:	f002 fb59 	bl	80043fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40001000 	.word	0x40001000

08001d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d5c:	b672      	cpsid	i
}
 8001d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <Error_Handler+0x8>
	...

08001d64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_MspInit+0x54>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	4a11      	ldr	r2, [pc, #68]	; (8001db8 <HAL_MspInit+0x54>)
 8001d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <HAL_MspInit+0x54>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_MspInit+0x54>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_MspInit+0x54>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_MspInit+0x54>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	210f      	movs	r1, #15
 8001da6:	f06f 0001 	mvn.w	r0, #1
 8001daa:	f002 fc5e 	bl	800466a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10d      	bne.n	8001dea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_TIM_PWM_MspInit+0x40>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <HAL_TIM_PWM_MspInit+0x40>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <HAL_TIM_PWM_MspInit+0x40>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	40023800 	.word	0x40023800

08001e00 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e20:	d12d      	bne.n	8001e7e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a2f      	ldr	r2, [pc, #188]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a28      	ldr	r2, [pc, #160]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 8001e5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	4619      	mov	r1, r3
 8001e76:	481d      	ldr	r0, [pc, #116]	; (8001eec <HAL_TIM_Encoder_MspInit+0xec>)
 8001e78:	f002 ffa4 	bl	8004dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001e7c:	e030      	b.n	8001ee0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1b      	ldr	r2, [pc, #108]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d12b      	bne.n	8001ee0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	4a15      	ldr	r2, [pc, #84]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e92:	f043 0308 	orr.w	r3, r3, #8
 8001e96:	6413      	str	r3, [r2, #64]	; 0x40
 8001e98:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_RIGHT_B_Pin|ENCODER_RIGHT_A_Pin;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4806      	ldr	r0, [pc, #24]	; (8001ef4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001edc:	f002 ff72 	bl	8004dc4 <HAL_GPIO_Init>
}
 8001ee0:	bf00      	nop
 8001ee2:	3730      	adds	r7, #48	; 0x30
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	40000c00 	.word	0x40000c00
 8001ef4:	40020000 	.word	0x40020000

08001ef8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <HAL_TIM_Base_MspInit+0x48>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d115      	bne.n	8001f36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_TIM_Base_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <HAL_TIM_Base_MspInit+0x4c>)
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_TIM_Base_MspInit+0x4c>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2105      	movs	r1, #5
 8001f2a:	201d      	movs	r0, #29
 8001f2c:	f002 fb9d 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f30:	201d      	movs	r0, #29
 8001f32:	f002 fbb6 	bl	80046a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40000400 	.word	0x40000400
 8001f44:	40023800 	.word	0x40023800

08001f48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <HAL_TIM_MspPostInit+0x68>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d11e      	bne.n	8001fa8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_TIM_MspPostInit+0x6c>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a10      	ldr	r2, [pc, #64]	; (8001fb4 <HAL_TIM_MspPostInit+0x6c>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <HAL_TIM_MspPostInit+0x6c>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_FORWARD_Pin|LEFT_MOTOR_BACKWARD_Pin|RIGHT_MOTOR_FORWARD_Pin|RIGHT_MOTOR_BACKWARD_Pin;
 8001f86:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001f8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <HAL_TIM_MspPostInit+0x70>)
 8001fa4:	f002 ff0e 	bl	8004dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40020000 	.word	0x40020000

08001fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a58      	ldr	r2, [pc, #352]	; (800213c <HAL_UART_MspInit+0x180>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	f040 80a9 	bne.w	8002132 <HAL_UART_MspInit+0x176>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	4b56      	ldr	r3, [pc, #344]	; (8002140 <HAL_UART_MspInit+0x184>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	4a55      	ldr	r2, [pc, #340]	; (8002140 <HAL_UART_MspInit+0x184>)
 8001fea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fee:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff0:	4b53      	ldr	r3, [pc, #332]	; (8002140 <HAL_UART_MspInit+0x184>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	4b4f      	ldr	r3, [pc, #316]	; (8002140 <HAL_UART_MspInit+0x184>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	4a4e      	ldr	r2, [pc, #312]	; (8002140 <HAL_UART_MspInit+0x184>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6313      	str	r3, [r2, #48]	; 0x30
 800200c:	4b4c      	ldr	r3, [pc, #304]	; (8002140 <HAL_UART_MspInit+0x184>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	4b48      	ldr	r3, [pc, #288]	; (8002140 <HAL_UART_MspInit+0x184>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	4a47      	ldr	r2, [pc, #284]	; (8002140 <HAL_UART_MspInit+0x184>)
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	6313      	str	r3, [r2, #48]	; 0x30
 8002028:	4b45      	ldr	r3, [pc, #276]	; (8002140 <HAL_UART_MspInit+0x184>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002034:	2320      	movs	r3, #32
 8002036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002044:	2307      	movs	r3, #7
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	483d      	ldr	r0, [pc, #244]	; (8002144 <HAL_UART_MspInit+0x188>)
 8002050:	f002 feb8 	bl	8004dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002066:	2307      	movs	r3, #7
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	4835      	ldr	r0, [pc, #212]	; (8002148 <HAL_UART_MspInit+0x18c>)
 8002072:	f002 fea7 	bl	8004dc4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002076:	4b35      	ldr	r3, [pc, #212]	; (800214c <HAL_UART_MspInit+0x190>)
 8002078:	4a35      	ldr	r2, [pc, #212]	; (8002150 <HAL_UART_MspInit+0x194>)
 800207a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800207c:	4b33      	ldr	r3, [pc, #204]	; (800214c <HAL_UART_MspInit+0x190>)
 800207e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002082:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002084:	4b31      	ldr	r3, [pc, #196]	; (800214c <HAL_UART_MspInit+0x190>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800208a:	4b30      	ldr	r3, [pc, #192]	; (800214c <HAL_UART_MspInit+0x190>)
 800208c:	2200      	movs	r2, #0
 800208e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002090:	4b2e      	ldr	r3, [pc, #184]	; (800214c <HAL_UART_MspInit+0x190>)
 8002092:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002096:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002098:	4b2c      	ldr	r3, [pc, #176]	; (800214c <HAL_UART_MspInit+0x190>)
 800209a:	2200      	movs	r2, #0
 800209c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800209e:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_UART_MspInit+0x190>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80020a4:	4b29      	ldr	r3, [pc, #164]	; (800214c <HAL_UART_MspInit+0x190>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80020aa:	4b28      	ldr	r3, [pc, #160]	; (800214c <HAL_UART_MspInit+0x190>)
 80020ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020b0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <HAL_UART_MspInit+0x190>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80020b8:	4824      	ldr	r0, [pc, #144]	; (800214c <HAL_UART_MspInit+0x190>)
 80020ba:	f002 fb13 	bl	80046e4 <HAL_DMA_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80020c4:	f7ff fe48 	bl	8001d58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a20      	ldr	r2, [pc, #128]	; (800214c <HAL_UART_MspInit+0x190>)
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
 80020ce:	4a1f      	ldr	r2, [pc, #124]	; (800214c <HAL_UART_MspInit+0x190>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80020d4:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <HAL_UART_MspInit+0x198>)
 80020d6:	4a20      	ldr	r2, [pc, #128]	; (8002158 <HAL_UART_MspInit+0x19c>)
 80020d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80020da:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <HAL_UART_MspInit+0x198>)
 80020dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_UART_MspInit+0x198>)
 80020e4:	2240      	movs	r2, #64	; 0x40
 80020e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_UART_MspInit+0x198>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_UART_MspInit+0x198>)
 80020f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_UART_MspInit+0x198>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020fc:	4b15      	ldr	r3, [pc, #84]	; (8002154 <HAL_UART_MspInit+0x198>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_UART_MspInit+0x198>)
 8002104:	2200      	movs	r2, #0
 8002106:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_UART_MspInit+0x198>)
 800210a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800210e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_UART_MspInit+0x198>)
 8002112:	2200      	movs	r2, #0
 8002114:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002116:	480f      	ldr	r0, [pc, #60]	; (8002154 <HAL_UART_MspInit+0x198>)
 8002118:	f002 fae4 	bl	80046e4 <HAL_DMA_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8002122:	f7ff fe19 	bl	8001d58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <HAL_UART_MspInit+0x198>)
 800212a:	635a      	str	r2, [r3, #52]	; 0x34
 800212c:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_UART_MspInit+0x198>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002132:	bf00      	nop
 8002134:	3728      	adds	r7, #40	; 0x28
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40004800 	.word	0x40004800
 8002140:	40023800 	.word	0x40023800
 8002144:	40020800 	.word	0x40020800
 8002148:	40020400 	.word	0x40020400
 800214c:	200049d0 	.word	0x200049d0
 8002150:	40026028 	.word	0x40026028
 8002154:	20004aa4 	.word	0x20004aa4
 8002158:	40026058 	.word	0x40026058

0800215c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08c      	sub	sp, #48	; 0x30
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800216c:	2200      	movs	r2, #0
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	2036      	movs	r0, #54	; 0x36
 8002172:	f002 fa7a 	bl	800466a <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002176:	2036      	movs	r0, #54	; 0x36
 8002178:	f002 fa93 	bl	80046a2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <HAL_InitTick+0xa4>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <HAL_InitTick+0xa4>)
 8002186:	f043 0310 	orr.w	r3, r3, #16
 800218a:	6413      	str	r3, [r2, #64]	; 0x40
 800218c:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <HAL_InitTick+0xa4>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002198:	f107 0210 	add.w	r2, r7, #16
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 f908 	bl	80053b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80021a8:	f003 f8de 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 80021ac:	4603      	mov	r3, r0
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b4:	4a13      	ldr	r2, [pc, #76]	; (8002204 <HAL_InitTick+0xa8>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	0c9b      	lsrs	r3, r3, #18
 80021bc:	3b01      	subs	r3, #1
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_InitTick+0xac>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	; (800220c <HAL_InitTick+0xb0>)
 80021c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <HAL_InitTick+0xac>)
 80021c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021ce:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <HAL_InitTick+0xac>)
 80021d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_InitTick+0xac>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_InitTick+0xac>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021e0:	4809      	ldr	r0, [pc, #36]	; (8002208 <HAL_InitTick+0xac>)
 80021e2:	f003 fd6b 	bl	8005cbc <HAL_TIM_Base_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d104      	bne.n	80021f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80021ec:	4806      	ldr	r0, [pc, #24]	; (8002208 <HAL_InitTick+0xac>)
 80021ee:	f003 fdc1 	bl	8005d74 <HAL_TIM_Base_Start_IT>
 80021f2:	4603      	mov	r3, r0
 80021f4:	e000      	b.n	80021f8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3730      	adds	r7, #48	; 0x30
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	431bde83 	.word	0x431bde83
 8002208:	20005050 	.word	0x20005050
 800220c:	40001000 	.word	0x40001000

08002210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <NMI_Handler+0x4>

08002216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221a:	e7fe      	b.n	800221a <HardFault_Handler+0x4>

0800221c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <MemManage_Handler+0x4>

08002222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <BusFault_Handler+0x4>

08002228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <UsageFault_Handler+0x4>

0800222e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <DMA1_Stream1_IRQHandler+0x10>)
 8002242:	f002 fb55 	bl	80048f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200049d0 	.word	0x200049d0

08002250 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <DMA1_Stream3_IRQHandler+0x10>)
 8002256:	f002 fb4b 	bl	80048f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20004aa4 	.word	0x20004aa4

08002264 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <TIM3_IRQHandler+0x10>)
 800226a:	f004 f889 	bl	8006380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20004bbc 	.word	0x20004bbc

08002278 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <TIM6_DAC_IRQHandler+0x10>)
 800227e:	f004 f87f 	bl	8006380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20005050 	.word	0x20005050

0800228c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <_sbrk+0x5c>)
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <_sbrk+0x60>)
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <_sbrk+0x64>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <_sbrk+0x64>)
 80022aa:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <_sbrk+0x68>)
 80022ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <_sbrk+0x64>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d207      	bcs.n	80022cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022bc:	f008 fbda 	bl	800aa74 <__errno>
 80022c0:	4603      	mov	r3, r0
 80022c2:	220c      	movs	r2, #12
 80022c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ca:	e009      	b.n	80022e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <_sbrk+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <_sbrk+0x64>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <_sbrk+0x64>)
 80022dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022de:	68fb      	ldr	r3, [r7, #12]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20020000 	.word	0x20020000
 80022ec:	00000400 	.word	0x00000400
 80022f0:	2000009c 	.word	0x2000009c
 80022f4:	20005160 	.word	0x20005160

080022f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <SystemInit+0x20>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <SystemInit+0x20>)
 8002304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000ed00 	.word	0xe000ed00
 800231c:	00000000 	.word	0x00000000

08002320 <DIFFDRIVE_Init>:


/* Functions Implementation */

// Initialization
void DIFFDRIVE_Init(DIFFDRIVE_HandleTypeDef* init_hdiffdrv){
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

	// Initializing global handle
	hdiffdrv= init_hdiffdrv;
 8002328:	4aa0      	ldr	r2, [pc, #640]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6013      	str	r3, [r2, #0]

	// Assigning control struct
	DIFFDRIVE_CONTROL_TypeDef *hctrl= hdiffdrv->control;
 800232e:	4b9f      	ldr	r3, [pc, #636]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002336:	623b      	str	r3, [r7, #32]

	// Initializing handle structure values from Init field
	hdiffdrv->timing.htim=       		   hdiffdrv->Init.timing_htim;
 8002338:	4b9c      	ldr	r3, [pc, #624]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b9b      	ldr	r3, [pc, #620]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002342:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	hdiffdrv->timing.time_step=   		   hdiffdrv->Init.timing_time_step;
 8002346:	4b99      	ldr	r3, [pc, #612]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	4b98      	ldr	r3, [pc, #608]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002350:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	hdiffdrv->mech_prmtr.r=     		   hdiffdrv->Init.mech_prmtr_r;
 8002354:	4b95      	ldr	r3, [pc, #596]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b94      	ldr	r3, [pc, #592]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800235e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	hdiffdrv->mech_prmtr.l=    			   hdiffdrv->Init.mech_prmtr_l;
 8002362:	4b92      	ldr	r3, [pc, #584]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4b91      	ldr	r3, [pc, #580]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800236c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	hdiffdrv->mech_prmtr.max_wheel_speed=  hdiffdrv->Init.mech_prmtr_max_wheel_speed;
 8002370:	4b8e      	ldr	r3, [pc, #568]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b8d      	ldr	r3, [pc, #564]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800237a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800237e:	2300      	movs	r3, #0
 8002380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002384:	e201      	b.n	800278a <DIFFDRIVE_Init+0x46a>

		// Initializing feedforward Control handle structure values from Init field
		hctrl[side].fdfrwrd.Init.arma_n_ar=  hdiffdrv->Init.control_fdfrwrd_arma_n_ar[side];
 8002386:	4b89      	ldr	r3, [pc, #548]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002388:	6819      	ldr	r1, [r3, #0]
 800238a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800238e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002392:	2068      	movs	r0, #104	; 0x68
 8002394:	fb00 f202 	mul.w	r2, r0, r2
 8002398:	6a38      	ldr	r0, [r7, #32]
 800239a:	4402      	add	r2, r0
 800239c:	3330      	adds	r3, #48	; 0x30
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	440b      	add	r3, r1
 80023a2:	889b      	ldrh	r3, [r3, #4]
 80023a4:	8013      	strh	r3, [r2, #0]
		hctrl[side].fdfrwrd.Init.arma_n_ma=  hdiffdrv->Init.control_fdfrwrd_arma_n_ma[side];
 80023a6:	4b81      	ldr	r3, [pc, #516]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80023ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023b2:	2068      	movs	r0, #104	; 0x68
 80023b4:	fb00 f303 	mul.w	r3, r0, r3
 80023b8:	6a38      	ldr	r0, [r7, #32]
 80023ba:	4403      	add	r3, r0
 80023bc:	3134      	adds	r1, #52	; 0x34
 80023be:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80023c2:	805a      	strh	r2, [r3, #2]
		hctrl[side].fdfrwrd.Init.arma_AR=    hdiffdrv->Init.control_fdfrwrd_arma_AR[side];
 80023c4:	4b79      	ldr	r3, [pc, #484]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80023cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023d0:	2068      	movs	r0, #104	; 0x68
 80023d2:	fb00 f303 	mul.w	r3, r0, r3
 80023d6:	6a38      	ldr	r0, [r7, #32]
 80023d8:	4403      	add	r3, r0
 80023da:	311c      	adds	r1, #28
 80023dc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80023e0:	609a      	str	r2, [r3, #8]
		hctrl[side].fdfrwrd.Init.arma_MA=    hdiffdrv->Init.control_fdfrwrd_arma_MA[side];
 80023e2:	4b72      	ldr	r3, [pc, #456]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80023ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023ee:	2068      	movs	r0, #104	; 0x68
 80023f0:	fb00 f303 	mul.w	r3, r0, r3
 80023f4:	6a38      	ldr	r0, [r7, #32]
 80023f6:	4403      	add	r3, r0
 80023f8:	311e      	adds	r1, #30
 80023fa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80023fe:	60da      	str	r2, [r3, #12]
		hctrl[side].fdfrwrd.Init.arma_tau=   hdiffdrv->Init.control_fdfrwrd_arma_tau[side];
 8002400:	4b6a      	ldr	r3, [pc, #424]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002402:	6819      	ldr	r1, [r3, #0]
 8002404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002408:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800240c:	2068      	movs	r0, #104	; 0x68
 800240e:	fb00 f202 	mul.w	r2, r0, r2
 8002412:	6a38      	ldr	r0, [r7, #32]
 8002414:	4402      	add	r2, r0
 8002416:	3334      	adds	r3, #52	; 0x34
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	440b      	add	r3, r1
 800241c:	889b      	ldrh	r3, [r3, #4]
 800241e:	8093      	strh	r3, [r2, #4]

		// Init feedforward struct
		FEEDFORWARD_Init(&hctrl[side].fdfrwrd);
 8002420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002424:	2268      	movs	r2, #104	; 0x68
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	6a3a      	ldr	r2, [r7, #32]
 800242c:	4413      	add	r3, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f001 fd06 	bl	8003e40 <FEEDFORWARD_Init>

		// Initializing pid Control handle structure values from Init field
		hctrl[side].pid.Init.P=  hdiffdrv->Init.control_pid_P[side];
 8002434:	4b5d      	ldr	r3, [pc, #372]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002436:	6819      	ldr	r1, [r3, #0]
 8002438:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800243c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002440:	2068      	movs	r0, #104	; 0x68
 8002442:	fb00 f303 	mul.w	r3, r0, r3
 8002446:	6a38      	ldr	r0, [r7, #32]
 8002448:	4403      	add	r3, r0
 800244a:	3220      	adds	r2, #32
 800244c:	0092      	lsls	r2, r2, #2
 800244e:	440a      	add	r2, r1
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	635a      	str	r2, [r3, #52]	; 0x34
		hctrl[side].pid.Init.I=  hdiffdrv->Init.control_pid_I[side];
 8002454:	4b55      	ldr	r3, [pc, #340]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002456:	6819      	ldr	r1, [r3, #0]
 8002458:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800245c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002460:	2068      	movs	r0, #104	; 0x68
 8002462:	fb00 f303 	mul.w	r3, r0, r3
 8002466:	6a38      	ldr	r0, [r7, #32]
 8002468:	4403      	add	r3, r0
 800246a:	3222      	adds	r2, #34	; 0x22
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	440a      	add	r2, r1
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	639a      	str	r2, [r3, #56]	; 0x38
		hctrl[side].pid.Init.D=  hdiffdrv->Init.control_pid_D[side];
 8002474:	4b4d      	ldr	r3, [pc, #308]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800247c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002480:	2068      	movs	r0, #104	; 0x68
 8002482:	fb00 f303 	mul.w	r3, r0, r3
 8002486:	6a38      	ldr	r0, [r7, #32]
 8002488:	4403      	add	r3, r0
 800248a:	3224      	adds	r2, #36	; 0x24
 800248c:	0092      	lsls	r2, r2, #2
 800248e:	440a      	add	r2, r1
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	63da      	str	r2, [r3, #60]	; 0x3c
		hctrl[side].pid.Init.Ts= hdiffdrv->timing.time_step;
 8002494:	4b45      	ldr	r3, [pc, #276]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800249c:	2168      	movs	r1, #104	; 0x68
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	6a39      	ldr	r1, [r7, #32]
 80024a4:	440b      	add	r3, r1
 80024a6:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40

		// Init feedforward struct
		PID_Init(&hctrl[side].pid);
 80024ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024b0:	2268      	movs	r2, #104	; 0x68
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	6a3a      	ldr	r2, [r7, #32]
 80024b8:	4413      	add	r3, r2
 80024ba:	3334      	adds	r3, #52	; 0x34
 80024bc:	4618      	mov	r0, r3
 80024be:	f001 fea0 	bl	8004202 <PID_Init>

		// Sensors
		hdiffdrv->encoder[side].htim=       hdiffdrv->Init.encoder_htim[side];
 80024c2:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80024ca:	4a38      	ldr	r2, [pc, #224]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 80024cc:	6810      	ldr	r0, [r2, #0]
 80024ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80024d2:	310e      	adds	r1, #14
 80024d4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4403      	add	r3, r0
 80024e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80024e6:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].channel=    hdiffdrv->Init.encoder_channel[side];
 80024e8:	4b30      	ldr	r3, [pc, #192]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80024f0:	4a2e      	ldr	r2, [pc, #184]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 80024f2:	6810      	ldr	r0, [r2, #0]
 80024f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80024f8:	3110      	adds	r1, #16
 80024fa:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4403      	add	r3, r0
 8002508:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800250c:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].resolution= hdiffdrv->Init.encoder_resolution[side];
 800250e:	4b27      	ldr	r3, [pc, #156]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002510:	6819      	ldr	r1, [r3, #0]
 8002512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002516:	4a25      	ldr	r2, [pc, #148]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002518:	6810      	ldr	r0, [r2, #0]
 800251a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800251e:	3316      	adds	r3, #22
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	3304      	adds	r3, #4
 8002526:	6819      	ldr	r1, [r3, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4403      	add	r3, r0
 8002532:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002536:	6019      	str	r1, [r3, #0]

		// Motors
		hdiffdrv->motor[side].supply_voltage= hdiffdrv->Init.motor_supply_voltage[side];
 8002538:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002548:	3208      	adds	r2, #8
 800254a:	0092      	lsls	r2, r2, #2
 800254c:	4402      	add	r2, r0
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	202c      	movs	r0, #44	; 0x2c
 8002552:	fb00 f303 	mul.w	r3, r0, r3
 8002556:	440b      	add	r3, r1
 8002558:	33b8      	adds	r3, #184	; 0xb8
 800255a:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].max_voltage=    hdiffdrv->Init.motor_max_voltage[side];
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002566:	6819      	ldr	r1, [r3, #0]
 8002568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800256c:	320a      	adds	r2, #10
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	4402      	add	r2, r0
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	202c      	movs	r0, #44	; 0x2c
 8002576:	fb00 f303 	mul.w	r3, r0, r3
 800257a:	440b      	add	r3, r1
 800257c:	33bc      	adds	r3, #188	; 0xbc
 800257e:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].min_voltage=    hdiffdrv->Init.motor_min_voltage[side];
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <DIFFDRIVE_Init+0x28c>)
 800258a:	6819      	ldr	r1, [r3, #0]
 800258c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002590:	320c      	adds	r2, #12
 8002592:	0092      	lsls	r2, r2, #2
 8002594:	4402      	add	r2, r0
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	202c      	movs	r0, #44	; 0x2c
 800259a:	fb00 f303 	mul.w	r3, r0, r3
 800259e:	440b      	add	r3, r1
 80025a0:	33c0      	adds	r3, #192	; 0xc0
 80025a2:	601a      	str	r2, [r3, #0]

		// Starting Motor Timer
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 80025a4:	2300      	movs	r3, #0
 80025a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80025aa:	e05d      	b.n	8002668 <DIFFDRIVE_Init+0x348>
 80025ac:	20005104 	.word	0x20005104
			hdiffdrv->motor[side].htim[dir]= hdiffdrv->Init.motor_htim[side][dir];
 80025b0:	4bc2      	ldr	r3, [pc, #776]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 80025b8:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 80025bc:	4abf      	ldr	r2, [pc, #764]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 80025be:	6811      	ldr	r1, [r2, #0]
 80025c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80025c4:	f997 4026 	ldrsb.w	r4, [r7, #38]	; 0x26
 80025c8:	006d      	lsls	r5, r5, #1
 80025ca:	4428      	add	r0, r5
 80025cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	4423      	add	r3, r4
 80025dc:	332a      	adds	r3, #42	; 0x2a
 80025de:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

			hdiffdrv->motor[side].pwm_channel[dir]= hdiffdrv->Init.motor_pwm_channel[side][dir];
 80025e2:	4bb6      	ldr	r3, [pc, #728]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 80025ea:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 80025ee:	4ab3      	ldr	r2, [pc, #716]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 80025f0:	6811      	ldr	r1, [r2, #0]
 80025f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80025f6:	f997 4026 	ldrsb.w	r4, [r7, #38]	; 0x26
 80025fa:	006d      	lsls	r5, r5, #1
 80025fc:	4428      	add	r0, r5
 80025fe:	3004      	adds	r0, #4
 8002600:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	4423      	add	r3, r4
 8002610:	332c      	adds	r3, #44	; 0x2c
 8002612:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
			HAL_TIM_PWM_Start(hdiffdrv->motor[side].htim[dir], hdiffdrv->motor[side].pwm_channel[dir]);
 8002616:	4ba9      	ldr	r3, [pc, #676]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800261e:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	4403      	add	r3, r0
 800262e:	332a      	adds	r3, #42	; 0x2a
 8002630:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8002634:	4ba1      	ldr	r3, [pc, #644]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 8002636:	6819      	ldr	r1, [r3, #0]
 8002638:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800263c:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	4403      	add	r3, r0
 800264c:	332c      	adds	r3, #44	; 0x2c
 800264e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002652:	4619      	mov	r1, r3
 8002654:	4620      	mov	r0, r4
 8002656:	f003 fc89 	bl	8005f6c <HAL_TIM_PWM_Start>
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 800265a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800265e:	b2db      	uxtb	r3, r3
 8002660:	3301      	adds	r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002668:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800266c:	2b01      	cmp	r3, #1
 800266e:	dd9f      	ble.n	80025b0 <DIFFDRIVE_Init+0x290>
		}

	    // Computing duty beat ranges
		float supply_volt= hdiffdrv->motor[side].supply_voltage;
 8002670:	4b92      	ldr	r3, [pc, #584]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002678:	212c      	movs	r1, #44	; 0x2c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	33b8      	adds	r3, #184	; 0xb8
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	617b      	str	r3, [r7, #20]
		float min_volt=	   hdiffdrv->motor[side].min_voltage;
 8002686:	4b8d      	ldr	r3, [pc, #564]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	33c0      	adds	r3, #192	; 0xc0
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	613b      	str	r3, [r7, #16]
		float max_volt=    hdiffdrv->motor[side].max_voltage;
 800269c:	4b87      	ldr	r3, [pc, #540]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	33bc      	adds	r3, #188	; 0xbc
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]

		// Forward or backward are the same in this case, I use timers with the same parameters
		hdiffdrv->motor[side].duty_beat_min= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*min_volt/supply_volt;
 80026b2:	4b82      	ldr	r3, [pc, #520]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026ba:	212c      	movs	r1, #44	; 0x2c
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	33a8      	adds	r3, #168	; 0xa8
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80026d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80026da:	ed97 7a05 	vldr	s14, [r7, #20]
 80026de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e2:	4b76      	ldr	r3, [pc, #472]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026ee:	ee17 0a90 	vmov	r0, s15
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	33c4      	adds	r3, #196	; 0xc4
 80026fc:	6018      	str	r0, [r3, #0]
		hdiffdrv->motor[side].duty_beat_max= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*max_volt/supply_volt;
 80026fe:	4b6f      	ldr	r3, [pc, #444]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	33a8      	adds	r3, #168	; 0xa8
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800271e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002722:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002726:	ed97 7a05 	vldr	s14, [r7, #20]
 800272a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800272e:	4b63      	ldr	r3, [pc, #396]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800273a:	ee17 0a90 	vmov	r0, s15
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	33c8      	adds	r3, #200	; 0xc8
 8002748:	6018      	str	r0, [r3, #0]

		// Starting Sensors
		HAL_TIM_Encoder_Start(hdiffdrv->encoder[side].htim, hdiffdrv->encoder[side].channel);
 800274a:	4b5c      	ldr	r3, [pc, #368]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	4b56      	ldr	r3, [pc, #344]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 8002764:	6819      	ldr	r1, [r3, #0]
 8002766:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4619      	mov	r1, r3
 800277c:	f003 fd72 	bl	8006264 <HAL_TIM_Encoder_Start>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002784:	3301      	adds	r3, #1
 8002786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800278a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800278e:	2b01      	cmp	r3, #1
 8002790:	f67f adf9 	bls.w	8002386 <DIFFDRIVE_Init+0x66>

	}

	// Initialize pose
	hdiffdrv->state.pose.x_a   +=  0;
 8002794:	4b49      	ldr	r3, [pc, #292]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	edd3 7a7e 	vldr	s15, [r3, #504]	; 0x1f8
 800279c:	4b47      	ldr	r3, [pc, #284]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80028c0 <DIFFDRIVE_Init+0x5a0>
 80027a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027a8:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
	hdiffdrv->state.pose.y_a   +=  0;
 80027ac:	4b43      	ldr	r3, [pc, #268]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	edd3 7a7f 	vldr	s15, [r3, #508]	; 0x1fc
 80027b4:	4b41      	ldr	r3, [pc, #260]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80028c0 <DIFFDRIVE_Init+0x5a0>
 80027bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027c0:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
	hdiffdrv->state.pose.theta +=  0;
 80027c4:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80027cc:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80028c0 <DIFFDRIVE_Init+0x5a0>
 80027d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027d8:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200

	// Allocating history' arrays
	hdiffdrv->history.max_sample= hdiffdrv->Init.history_max_sample;
 80027dc:	4b37      	ldr	r3, [pc, #220]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80027e4:	4b35      	ldr	r3, [pc, #212]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230

	// Allocate all variables with zeros (calloc)
	hdiffdrv->history.state_target=  (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 80027ec:	4b33      	ldr	r3, [pc, #204]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80027f4:	4a31      	ldr	r2, [pc, #196]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 80027f6:	6814      	ldr	r4, [r2, #0]
 80027f8:	2124      	movs	r1, #36	; 0x24
 80027fa:	4618      	mov	r0, r3
 80027fc:	f008 f932 	bl	800aa64 <calloc>
 8002800:	4603      	mov	r3, r0
 8002802:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
	hdiffdrv->history.state_measure= (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 8002806:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800280e:	4a2b      	ldr	r2, [pc, #172]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 8002810:	6814      	ldr	r4, [r2, #0]
 8002812:	2124      	movs	r1, #36	; 0x24
 8002814:	4618      	mov	r0, r3
 8002816:	f008 f925 	bl	800aa64 <calloc>
 800281a:	4603      	mov	r3, r0
 800281c:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c

	// Initializing time index
	hdiffdrv->history.index= 0;
 8002820:	4b26      	ldr	r3, [pc, #152]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2200      	movs	r2, #0
 8002826:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	hdiffdrv->history.sample_cnt= 0;
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2200      	movs	r2, #0
 8002830:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

	// Reset timing flag
	hdiffdrv->timing.flag= false;
 8002834:	4b21      	ldr	r3, [pc, #132]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4


	/* Computing prescaler ad autoreload period to obtain an update event with frequency 1/timing.time_step Hertz */

	DIFFDRIVE_TIMING_TypeDef* timing= &(hdiffdrv->timing);
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <DIFFDRIVE_Init+0x59c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	339c      	adds	r3, #156	; 0x9c
 8002844:	61fb      	str	r3, [r7, #28]

	uint16_t prescaler=  __MYLIB_GET_TIMER_CLK(timing->htim)*10/1e6 - 1;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1d      	ldr	r2, [pc, #116]	; (80028c4 <DIFFDRIVE_Init+0x5a4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d017      	beq.n	8002882 <DIFFDRIVE_Init+0x562>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <DIFFDRIVE_Init+0x5a8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d011      	beq.n	8002882 <DIFFDRIVE_Init+0x562>
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a19      	ldr	r2, [pc, #100]	; (80028cc <DIFFDRIVE_Init+0x5ac>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00b      	beq.n	8002882 <DIFFDRIVE_Init+0x562>
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <DIFFDRIVE_Init+0x5b0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d005      	beq.n	8002882 <DIFFDRIVE_Init+0x562>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a15      	ldr	r2, [pc, #84]	; (80028d4 <DIFFDRIVE_Init+0x5b4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d12c      	bne.n	80028dc <DIFFDRIVE_Init+0x5bc>
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <DIFFDRIVE_Init+0x5b8>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10a      	bne.n	80028a4 <DIFFDRIVE_Init+0x584>
 800288e:	f002 fd7f 	bl	8005390 <HAL_RCC_GetPCLK2Freq>
 8002892:	4602      	mov	r2, r0
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd fdf9 	bl	8000494 <__aeabi_ui2d>
 80028a2:	e036      	b.n	8002912 <DIFFDRIVE_Init+0x5f2>
 80028a4:	f002 fd74 	bl	8005390 <HAL_RCC_GetPCLK2Freq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fdee 	bl	8000494 <__aeabi_ui2d>
 80028b8:	e02b      	b.n	8002912 <DIFFDRIVE_Init+0x5f2>
 80028ba:	bf00      	nop
 80028bc:	20005104 	.word	0x20005104
 80028c0:	00000000 	.word	0x00000000
 80028c4:	40010000 	.word	0x40010000
 80028c8:	40010400 	.word	0x40010400
 80028cc:	40014000 	.word	0x40014000
 80028d0:	40014400 	.word	0x40014400
 80028d4:	40014800 	.word	0x40014800
 80028d8:	40023800 	.word	0x40023800
 80028dc:	4b56      	ldr	r3, [pc, #344]	; (8002a38 <DIFFDRIVE_Init+0x718>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <DIFFDRIVE_Init+0x5de>
 80028e8:	f002 fd3e 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fd fdcc 	bl	8000494 <__aeabi_ui2d>
 80028fc:	e009      	b.n	8002912 <DIFFDRIVE_Init+0x5f2>
 80028fe:	f002 fd33 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 8002902:	4602      	mov	r2, r0
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fdc1 	bl	8000494 <__aeabi_ui2d>
 8002912:	a347      	add	r3, pc, #284	; (adr r3, 8002a30 <DIFFDRIVE_Init+0x710>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd ff60 	bl	80007dc <__aeabi_ddiv>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4610      	mov	r0, r2
 8002922:	4619      	mov	r1, r3
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	4b44      	ldr	r3, [pc, #272]	; (8002a3c <DIFFDRIVE_Init+0x71c>)
 800292a:	f7fd fc75 	bl	8000218 <__aeabi_dsub>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	f7fe f8e9 	bl	8000b0c <__aeabi_d2uiz>
 800293a:	4603      	mov	r3, r0
 800293c:	837b      	strh	r3, [r7, #26]
	// Guessing is a 16bit autoreload timer to avoid troubles
	uint16_t autoreload= __MYLIB_GET_TIMER_CLK(timing->htim)/( (prescaler+1)*1/timing->time_step ) - 1;
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a3e      	ldr	r2, [pc, #248]	; (8002a40 <DIFFDRIVE_Init+0x720>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d017      	beq.n	800297a <DIFFDRIVE_Init+0x65a>
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a3c      	ldr	r2, [pc, #240]	; (8002a44 <DIFFDRIVE_Init+0x724>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d011      	beq.n	800297a <DIFFDRIVE_Init+0x65a>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a3a      	ldr	r2, [pc, #232]	; (8002a48 <DIFFDRIVE_Init+0x728>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00b      	beq.n	800297a <DIFFDRIVE_Init+0x65a>
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a38      	ldr	r2, [pc, #224]	; (8002a4c <DIFFDRIVE_Init+0x72c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d005      	beq.n	800297a <DIFFDRIVE_Init+0x65a>
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a36      	ldr	r2, [pc, #216]	; (8002a50 <DIFFDRIVE_Init+0x730>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d115      	bne.n	80029a6 <DIFFDRIVE_Init+0x686>
 800297a:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <DIFFDRIVE_Init+0x718>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <DIFFDRIVE_Init+0x674>
 8002986:	f002 fd03 	bl	8005390 <HAL_RCC_GetPCLK2Freq>
 800298a:	ee07 0a90 	vmov	s15, r0
 800298e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002992:	e01d      	b.n	80029d0 <DIFFDRIVE_Init+0x6b0>
 8002994:	f002 fcfc 	bl	8005390 <HAL_RCC_GetPCLK2Freq>
 8002998:	4603      	mov	r3, r0
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a4:	e014      	b.n	80029d0 <DIFFDRIVE_Init+0x6b0>
 80029a6:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <DIFFDRIVE_Init+0x718>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <DIFFDRIVE_Init+0x6a0>
 80029b2:	f002 fcd9 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 80029b6:	ee07 0a90 	vmov	s15, r0
 80029ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029be:	e007      	b.n	80029d0 <DIFFDRIVE_Init+0x6b0>
 80029c0:	f002 fcd2 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 80029c4:	4603      	mov	r3, r0
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	ee07 3a90 	vmov	s15, r3
 80029cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d0:	8b7b      	ldrh	r3, [r7, #26]
 80029d2:	3301      	adds	r3, #1
 80029d4:	ee07 3a10 	vmov	s14, r3
 80029d8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	ed93 7a01 	vldr	s14, [r3, #4]
 80029e2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80029e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80029ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029f6:	ee17 3a90 	vmov	r3, s15
 80029fa:	833b      	strh	r3, [r7, #24]

	// Set counter with computed prescaler and autoreload period
	__HAL_TIM_SET_PRESCALER(timing->htim, prescaler);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	8b7a      	ldrh	r2, [r7, #26]
 8002a04:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(timing->htim, autoreload);
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	8b3a      	ldrh	r2, [r7, #24]
 8002a0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	8b3a      	ldrh	r2, [r7, #24]
 8002a16:	60da      	str	r2, [r3, #12]

	// Assigning callback for timing purpose
	timing->htim->PeriodElapsedCallback= DIFFDRIVE_TIMING_Callback;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <DIFFDRIVE_Init+0x734>)
 8002a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	// Reset timing flag
	timing->flag= false;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	2200      	movs	r2, #0
 8002a26:	721a      	strb	r2, [r3, #8]

}
 8002a28:	bf00      	nop
 8002a2a:	3728      	adds	r7, #40	; 0x28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a30:	00000000 	.word	0x00000000
 8002a34:	412e8480 	.word	0x412e8480
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	3ff00000 	.word	0x3ff00000
 8002a40:	40010000 	.word	0x40010000
 8002a44:	40010400 	.word	0x40010400
 8002a48:	40014000 	.word	0x40014000
 8002a4c:	40014400 	.word	0x40014400
 8002a50:	40014800 	.word	0x40014800
 8002a54:	08003c69 	.word	0x08003c69

08002a58 <DIFFDRIVE_MOTOR_Stop>:
	free(hdiffdrv->history.state_target);

}


void DIFFDRIVE_MOTOR_Stop(){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0

	// Set motors to 0 volt
	DIFFDRIVE_MOTOR_SetPWMs((float[2]){0,0});
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	463b      	mov	r3, r7
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 f805 	bl	8002a7c <DIFFDRIVE_MOTOR_SetPWMs>

}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <DIFFDRIVE_MOTOR_SetPWMs>:


void DIFFDRIVE_MOTOR_SetPWMs(float* input){
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	; 0x24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_MOTOR_TypeDef *tmp_mtr= hdiffdrv->motor;
 8002a84:	4bb4      	ldr	r3, [pc, #720]	; (8002d58 <DIFFDRIVE_MOTOR_SetPWMs+0x2dc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	33a8      	adds	r3, #168	; 0xa8
 8002a8a:	61bb      	str	r3, [r7, #24]
	float tmp_input[2];
	float supply_volt;

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	77fb      	strb	r3, [r7, #31]
 8002a90:	e0c8      	b.n	8002c24 <DIFFDRIVE_MOTOR_SetPWMs+0x1a8>

		tmp_input[side]= input[side];
 8002a92:	7ffb      	ldrb	r3, [r7, #31]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	441a      	add	r2, r3
 8002a9a:	7ffb      	ldrb	r3, [r7, #31]
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	f107 0120 	add.w	r1, r7, #32
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3b14      	subs	r3, #20
 8002aa8:	601a      	str	r2, [r3, #0]

		supply_volt= tmp_mtr[side].supply_voltage;
 8002aaa:	7ffb      	ldrb	r3, [r7, #31]
 8002aac:	222c      	movs	r2, #44	; 0x2c
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	617b      	str	r3, [r7, #20]

		if(tmp_input[side] > 0){
 8002aba:	7ffb      	ldrb	r3, [r7, #31]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	f107 0220 	add.w	r2, r7, #32
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b14      	subs	r3, #20
 8002ac6:	edd3 7a00 	vldr	s15, [r3]
 8002aca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad2:	dd09      	ble.n	8002ae8 <DIFFDRIVE_MOTOR_SetPWMs+0x6c>
			// Set direction
			tmp_mtr[side].direction= forward;
 8002ad4:	7ffb      	ldrb	r3, [r7, #31]
 8002ad6:	222c      	movs	r2, #44	; 0x2c
 8002ad8:	fb02 f303 	mul.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4413      	add	r3, r2
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002ae6:	e027      	b.n	8002b38 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
		}
		else
		if(tmp_input[side] < 0){
 8002ae8:	7ffb      	ldrb	r3, [r7, #31]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	f107 0220 	add.w	r2, r7, #32
 8002af0:	4413      	add	r3, r2
 8002af2:	3b14      	subs	r3, #20
 8002af4:	edd3 7a00 	vldr	s15, [r3]
 8002af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b00:	d51a      	bpl.n	8002b38 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
			// Set direction
			tmp_mtr[side].direction= backward;
 8002b02:	7ffb      	ldrb	r3, [r7, #31]
 8002b04:	222c      	movs	r2, #44	; 0x2c
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			// Abs of input
			tmp_input[side]= -tmp_input[side];
 8002b14:	7ffb      	ldrb	r3, [r7, #31]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	f107 0220 	add.w	r2, r7, #32
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3b14      	subs	r3, #20
 8002b20:	edd3 7a00 	vldr	s15, [r3]
 8002b24:	7ffb      	ldrb	r3, [r7, #31]
 8002b26:	eef1 7a67 	vneg.f32	s15, s15
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	f107 0220 	add.w	r2, r7, #32
 8002b30:	4413      	add	r3, r2
 8002b32:	3b14      	subs	r3, #20
 8002b34:	edc3 7a00 	vstr	s15, [r3]
		}

		// Duty beat proportional to input voltage plus a minimum duty beat (so, if input is near zero
		// duty beat is near its minimum. DC motors need to reach a tension threshold before moving)
		// Also: forward or backward are the same in this case, I use timers with the same parameters
		tmp_mtr[side].duty_beat  = __HAL_TIM_GET_AUTORELOAD(tmp_mtr[side].htim[forward])*tmp_input[side]/supply_volt;
 8002b38:	7ffb      	ldrb	r3, [r7, #31]
 8002b3a:	222c      	movs	r2, #44	; 0x2c
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4413      	add	r3, r2
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b52:	7ffb      	ldrb	r3, [r7, #31]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	f107 0220 	add.w	r2, r7, #32
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3b14      	subs	r3, #20
 8002b5e:	edd3 7a00 	vldr	s15, [r3]
 8002b62:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b66:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b6e:	7ffb      	ldrb	r3, [r7, #31]
 8002b70:	222c      	movs	r2, #44	; 0x2c
 8002b72:	fb02 f303 	mul.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4413      	add	r3, r2
 8002b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b7e:	ee17 2a90 	vmov	r2, s15
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24
		tmp_mtr[side].duty_beat += tmp_mtr[side].duty_beat_min;
 8002b84:	7ffb      	ldrb	r3, [r7, #31]
 8002b86:	222c      	movs	r2, #44	; 0x2c
 8002b88:	fb02 f303 	mul.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4413      	add	r3, r2
 8002b90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
 8002b94:	222c      	movs	r2, #44	; 0x2c
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	7ffb      	ldrb	r3, [r7, #31]
 8002ba2:	202c      	movs	r0, #44	; 0x2c
 8002ba4:	fb00 f303 	mul.w	r3, r0, r3
 8002ba8:	69b8      	ldr	r0, [r7, #24]
 8002baa:	4403      	add	r3, r0
 8002bac:	440a      	add	r2, r1
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24

		// Upper Saturation of duty cycle
		if( tmp_mtr[side].duty_beat > tmp_mtr[side].duty_beat_max )
 8002bb0:	7ffb      	ldrb	r3, [r7, #31]
 8002bb2:	222c      	movs	r2, #44	; 0x2c
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4413      	add	r3, r2
 8002bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bbe:	7ffb      	ldrb	r3, [r7, #31]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	69b9      	ldr	r1, [r7, #24]
 8002bc8:	440b      	add	r3, r1
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d90e      	bls.n	8002bee <DIFFDRIVE_MOTOR_SetPWMs+0x172>
			tmp_mtr[side].duty_beat= tmp_mtr[side].duty_beat_max;
 8002bd0:	7ffb      	ldrb	r3, [r7, #31]
 8002bd2:	222c      	movs	r2, #44	; 0x2c
 8002bd4:	fb02 f303 	mul.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	441a      	add	r2, r3
 8002bdc:	7ffb      	ldrb	r3, [r7, #31]
 8002bde:	212c      	movs	r1, #44	; 0x2c
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	69b9      	ldr	r1, [r7, #24]
 8002be6:	440b      	add	r3, r1
 8002be8:	6a12      	ldr	r2, [r2, #32]
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24
 8002bec:	e017      	b.n	8002c1e <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
		else
		// Lower Saturation of duty cycle. If reach lower bound, set to zero to be sure to stop motors
		if( tmp_mtr[side].duty_beat == tmp_mtr[side].duty_beat_min )
 8002bee:	7ffb      	ldrb	r3, [r7, #31]
 8002bf0:	222c      	movs	r2, #44	; 0x2c
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bfc:	7ffb      	ldrb	r3, [r7, #31]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	69b9      	ldr	r1, [r7, #24]
 8002c06:	440b      	add	r3, r1
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d107      	bne.n	8002c1e <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
			tmp_mtr[side].duty_beat= 0;
 8002c0e:	7ffb      	ldrb	r3, [r7, #31]
 8002c10:	222c      	movs	r2, #44	; 0x2c
 8002c12:	fb02 f303 	mul.w	r3, r2, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4413      	add	r3, r2
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002c1e:	7ffb      	ldrb	r3, [r7, #31]
 8002c20:	3301      	adds	r3, #1
 8002c22:	77fb      	strb	r3, [r7, #31]
 8002c24:	7ffb      	ldrb	r3, [r7, #31]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	f67f af33 	bls.w	8002a92 <DIFFDRIVE_MOTOR_SetPWMs+0x16>
	}

	// Set PWM signal
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	77bb      	strb	r3, [r7, #30]
 8002c30:	e14f      	b.n	8002ed2 <DIFFDRIVE_MOTOR_SetPWMs+0x456>

		// Set opposite direction (!direction) pin to 0
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[!(tmp_mtr[side].direction)],
 8002c32:	7fbb      	ldrb	r3, [r7, #30]
 8002c34:	222c      	movs	r2, #44	; 0x2c
 8002c36:	fb02 f303 	mul.w	r3, r2, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	7fba      	ldrb	r2, [r7, #30]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f202 	mul.w	r2, r1, r2
 8002c46:	69b9      	ldr	r1, [r7, #24]
 8002c48:	440a      	add	r2, r1
 8002c4a:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002c4e:	2a00      	cmp	r2, #0
 8002c50:	bf0c      	ite	eq
 8002c52:	2201      	moveq	r2, #1
 8002c54:	2200      	movne	r2, #0
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	3202      	adds	r2, #2
 8002c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d118      	bne.n	8002c94 <DIFFDRIVE_MOTOR_SetPWMs+0x218>
 8002c62:	7fbb      	ldrb	r3, [r7, #30]
 8002c64:	222c      	movs	r2, #44	; 0x2c
 8002c66:	fb02 f303 	mul.w	r3, r2, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	7fba      	ldrb	r2, [r7, #30]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f202 	mul.w	r2, r1, r2
 8002c76:	69b9      	ldr	r1, [r7, #24]
 8002c78:	440a      	add	r2, r1
 8002c7a:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002c7e:	2a00      	cmp	r2, #0
 8002c80:	bf0c      	ite	eq
 8002c82:	2201      	moveq	r2, #1
 8002c84:	2200      	movne	r2, #0
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	635a      	str	r2, [r3, #52]	; 0x34
 8002c92:	e07b      	b.n	8002d8c <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8002c94:	7fbb      	ldrb	r3, [r7, #30]
 8002c96:	222c      	movs	r2, #44	; 0x2c
 8002c98:	fb02 f303 	mul.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	7fba      	ldrb	r2, [r7, #30]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f202 	mul.w	r2, r1, r2
 8002ca8:	69b9      	ldr	r1, [r7, #24]
 8002caa:	440a      	add	r2, r1
 8002cac:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002cb0:	2a00      	cmp	r2, #0
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2201      	moveq	r2, #1
 8002cb6:	2200      	movne	r2, #0
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	3202      	adds	r2, #2
 8002cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d118      	bne.n	8002cf6 <DIFFDRIVE_MOTOR_SetPWMs+0x27a>
 8002cc4:	7fbb      	ldrb	r3, [r7, #30]
 8002cc6:	222c      	movs	r2, #44	; 0x2c
 8002cc8:	fb02 f303 	mul.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4413      	add	r3, r2
 8002cd0:	7fba      	ldrb	r2, [r7, #30]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f202 	mul.w	r2, r1, r2
 8002cd8:	69b9      	ldr	r1, [r7, #24]
 8002cda:	440a      	add	r2, r1
 8002cdc:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002ce0:	2a00      	cmp	r2, #0
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2201      	moveq	r2, #1
 8002ce6:	2200      	movne	r2, #0
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	6393      	str	r3, [r2, #56]	; 0x38
 8002cf4:	e04a      	b.n	8002d8c <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8002cf6:	7fbb      	ldrb	r3, [r7, #30]
 8002cf8:	222c      	movs	r2, #44	; 0x2c
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4413      	add	r3, r2
 8002d02:	7fba      	ldrb	r2, [r7, #30]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f202 	mul.w	r2, r1, r2
 8002d0a:	69b9      	ldr	r1, [r7, #24]
 8002d0c:	440a      	add	r2, r1
 8002d0e:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002d12:	2a00      	cmp	r2, #0
 8002d14:	bf0c      	ite	eq
 8002d16:	2201      	moveq	r2, #1
 8002d18:	2200      	movne	r2, #0
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	3202      	adds	r2, #2
 8002d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d11a      	bne.n	8002d5c <DIFFDRIVE_MOTOR_SetPWMs+0x2e0>
 8002d26:	7fbb      	ldrb	r3, [r7, #30]
 8002d28:	222c      	movs	r2, #44	; 0x2c
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4413      	add	r3, r2
 8002d32:	7fba      	ldrb	r2, [r7, #30]
 8002d34:	212c      	movs	r1, #44	; 0x2c
 8002d36:	fb01 f202 	mul.w	r2, r1, r2
 8002d3a:	69b9      	ldr	r1, [r7, #24]
 8002d3c:	440a      	add	r2, r1
 8002d3e:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	bf0c      	ite	eq
 8002d46:	2201      	moveq	r2, #1
 8002d48:	2200      	movne	r2, #0
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	2300      	movs	r3, #0
 8002d54:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002d56:	e019      	b.n	8002d8c <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8002d58:	20005104 	.word	0x20005104
 8002d5c:	7fbb      	ldrb	r3, [r7, #30]
 8002d5e:	222c      	movs	r2, #44	; 0x2c
 8002d60:	fb02 f303 	mul.w	r3, r2, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4413      	add	r3, r2
 8002d68:	7fba      	ldrb	r2, [r7, #30]
 8002d6a:	212c      	movs	r1, #44	; 0x2c
 8002d6c:	fb01 f202 	mul.w	r2, r1, r2
 8002d70:	69b9      	ldr	r1, [r7, #24]
 8002d72:	440a      	add	r2, r1
 8002d74:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002d78:	2a00      	cmp	r2, #0
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2201      	moveq	r2, #1
 8002d7e:	2200      	movne	r2, #0
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	6413      	str	r3, [r2, #64]	; 0x40
							  tmp_mtr[side].pwm_channel[!(tmp_mtr[side].direction)],
							  0  );

		// Set direction pin with the current duty cycle on PWM signal
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[(tmp_mtr[side].direction)],
 8002d8c:	7fbb      	ldrb	r3, [r7, #30]
 8002d8e:	222c      	movs	r2, #44	; 0x2c
 8002d90:	fb02 f303 	mul.w	r3, r2, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4413      	add	r3, r2
 8002d98:	7fba      	ldrb	r2, [r7, #30]
 8002d9a:	212c      	movs	r1, #44	; 0x2c
 8002d9c:	fb01 f202 	mul.w	r2, r1, r2
 8002da0:	69b9      	ldr	r1, [r7, #24]
 8002da2:	440a      	add	r2, r1
 8002da4:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002da8:	3202      	adds	r2, #2
 8002daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d119      	bne.n	8002de6 <DIFFDRIVE_MOTOR_SetPWMs+0x36a>
 8002db2:	7fbb      	ldrb	r3, [r7, #30]
 8002db4:	222c      	movs	r2, #44	; 0x2c
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	441a      	add	r2, r3
 8002dbe:	7fbb      	ldrb	r3, [r7, #30]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	69b9      	ldr	r1, [r7, #24]
 8002dc8:	440b      	add	r3, r1
 8002dca:	7fb9      	ldrb	r1, [r7, #30]
 8002dcc:	202c      	movs	r0, #44	; 0x2c
 8002dce:	fb00 f101 	mul.w	r1, r0, r1
 8002dd2:	69b8      	ldr	r0, [r7, #24]
 8002dd4:	4401      	add	r1, r0
 8002dd6:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 8002dda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002de2:	635a      	str	r2, [r3, #52]	; 0x34
 8002de4:	e072      	b.n	8002ecc <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8002de6:	7fbb      	ldrb	r3, [r7, #30]
 8002de8:	222c      	movs	r2, #44	; 0x2c
 8002dea:	fb02 f303 	mul.w	r3, r2, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4413      	add	r3, r2
 8002df2:	7fba      	ldrb	r2, [r7, #30]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f202 	mul.w	r2, r1, r2
 8002dfa:	69b9      	ldr	r1, [r7, #24]
 8002dfc:	440a      	add	r2, r1
 8002dfe:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002e02:	3202      	adds	r2, #2
 8002e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d119      	bne.n	8002e40 <DIFFDRIVE_MOTOR_SetPWMs+0x3c4>
 8002e0c:	7fbb      	ldrb	r3, [r7, #30]
 8002e0e:	222c      	movs	r2, #44	; 0x2c
 8002e10:	fb02 f303 	mul.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4413      	add	r3, r2
 8002e18:	7fba      	ldrb	r2, [r7, #30]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f202 	mul.w	r2, r1, r2
 8002e20:	69b9      	ldr	r1, [r7, #24]
 8002e22:	440a      	add	r2, r1
 8002e24:	7fb9      	ldrb	r1, [r7, #30]
 8002e26:	202c      	movs	r0, #44	; 0x2c
 8002e28:	fb00 f101 	mul.w	r1, r0, r1
 8002e2c:	69b8      	ldr	r0, [r7, #24]
 8002e2e:	4401      	add	r1, r0
 8002e30:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 8002e34:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	6393      	str	r3, [r2, #56]	; 0x38
 8002e3e:	e045      	b.n	8002ecc <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8002e40:	7fbb      	ldrb	r3, [r7, #30]
 8002e42:	222c      	movs	r2, #44	; 0x2c
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	7fba      	ldrb	r2, [r7, #30]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f202 	mul.w	r2, r1, r2
 8002e54:	69b9      	ldr	r1, [r7, #24]
 8002e56:	440a      	add	r2, r1
 8002e58:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002e5c:	3202      	adds	r2, #2
 8002e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d119      	bne.n	8002e9a <DIFFDRIVE_MOTOR_SetPWMs+0x41e>
 8002e66:	7fbb      	ldrb	r3, [r7, #30]
 8002e68:	222c      	movs	r2, #44	; 0x2c
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4413      	add	r3, r2
 8002e72:	7fba      	ldrb	r2, [r7, #30]
 8002e74:	212c      	movs	r1, #44	; 0x2c
 8002e76:	fb01 f202 	mul.w	r2, r1, r2
 8002e7a:	69b9      	ldr	r1, [r7, #24]
 8002e7c:	440a      	add	r2, r1
 8002e7e:	7fb9      	ldrb	r1, [r7, #30]
 8002e80:	202c      	movs	r0, #44	; 0x2c
 8002e82:	fb00 f101 	mul.w	r1, r0, r1
 8002e86:	69b8      	ldr	r0, [r7, #24]
 8002e88:	4401      	add	r1, r0
 8002e8a:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 8002e8e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002e98:	e018      	b.n	8002ecc <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8002e9a:	7fbb      	ldrb	r3, [r7, #30]
 8002e9c:	222c      	movs	r2, #44	; 0x2c
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	7fba      	ldrb	r2, [r7, #30]
 8002ea8:	212c      	movs	r1, #44	; 0x2c
 8002eaa:	fb01 f202 	mul.w	r2, r1, r2
 8002eae:	69b9      	ldr	r1, [r7, #24]
 8002eb0:	440a      	add	r2, r1
 8002eb2:	7fb9      	ldrb	r1, [r7, #30]
 8002eb4:	202c      	movs	r0, #44	; 0x2c
 8002eb6:	fb00 f101 	mul.w	r1, r0, r1
 8002eba:	69b8      	ldr	r0, [r7, #24]
 8002ebc:	4401      	add	r1, r0
 8002ebe:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 8002ec2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	6413      	str	r3, [r2, #64]	; 0x40
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002ecc:	7fbb      	ldrb	r3, [r7, #30]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	77bb      	strb	r3, [r7, #30]
 8002ed2:	7fbb      	ldrb	r3, [r7, #30]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	f67f aeac 	bls.w	8002c32 <DIFFDRIVE_MOTOR_SetPWMs+0x1b6>
							  tmp_mtr[side].pwm_channel[(tmp_mtr[side].direction)],
							  tmp_mtr[side].duty_beat  );

		}

}
 8002eda:	bf00      	nop
 8002edc:	bf00      	nop
 8002ede:	3724      	adds	r7, #36	; 0x24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <DIFFDRIVE_ENCODER_CaptureMeasure>:


DIFFDRIVE_StatusTypeDef DIFFDRIVE_ENCODER_CaptureMeasure(void){
 8002ee8:	b5b0      	push	{r4, r5, r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens=  hdiffdrv->encoder;
 8002eee:	4b54      	ldr	r3, [pc, #336]	; (8003040 <DIFFDRIVE_ENCODER_CaptureMeasure+0x158>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ef6:	60bb      	str	r3, [r7, #8]

	// int32 max value, minus a secure threshold of 100
	uint32_t counter_max= (pow(2,31)-1)-100;
 8002ef8:	4b52      	ldr	r3, [pc, #328]	; (8003044 <DIFFDRIVE_ENCODER_CaptureMeasure+0x15c>)
 8002efa:	607b      	str	r3, [r7, #4]

	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	e090      	b.n	8003024 <DIFFDRIVE_ENCODER_CaptureMeasure+0x13c>

		// Saving previous value
		tmpsens[side].previous_value= tmpsens[side].current_value;
 8002f02:	7bfa      	ldrb	r2, [r7, #15]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	1899      	adds	r1, r3, r2
 8002f12:	7bfa      	ldrb	r2, [r7, #15]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4413      	add	r3, r2
 8002f22:	68ca      	ldr	r2, [r1, #12]
 8002f24:	611a      	str	r2, [r3, #16]

		// Updating value. The counter connected to sensor are 32 bit unsigned integer so I cast in
		// 32 bit integer (signed) to have positive and negative values. Then, using encoder resolution,
		tmpsens[side].current_value  = (int32_t)__HAL_TIM_GET_COUNTER(tmpsens[side].htim);
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	461a      	mov	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4413      	add	r3, r2
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	ee07 3a90 	vmov	s15, r3
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4413      	add	r3, r2
 8002f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f54:	edc3 7a03 	vstr	s15, [r3, #12]

		// If counter reach a threshold value return an exception
		if( tmpsens[side].current_value < -(int32_t)counter_max || tmpsens[side].current_value > (int32_t)counter_max  )
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	461a      	mov	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4413      	add	r3, r2
 8002f68:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	425b      	negs	r3, r3
 8002f70:	ee07 3a90 	vmov	s15, r3
 8002f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f80:	d413      	bmi.n	8002faa <DIFFDRIVE_ENCODER_CaptureMeasure+0xc2>
 8002f82:	7bfa      	ldrb	r2, [r7, #15]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4413      	add	r3, r2
 8002f92:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	ee07 3a90 	vmov	s15, r3
 8002f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa8:	dd02      	ble.n	8002fb0 <DIFFDRIVE_ENCODER_CaptureMeasure+0xc8>
			return DIFFDRIVE_ERROR;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fae:	e03e      	b.n	800302e <DIFFDRIVE_ENCODER_CaptureMeasure+0x146>

		// Else convert integer in radiant
		tmpsens[side].current_value *= (2*M_PI)/tmpsens[side].resolution;
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd fa88 	bl	80004d8 <__aeabi_f2d>
 8002fc8:	4604      	mov	r4, r0
 8002fca:	460d      	mov	r5, r1
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4413      	add	r3, r2
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd fa7a 	bl	80004d8 <__aeabi_f2d>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	a113      	add	r1, pc, #76	; (adr r1, 8003038 <DIFFDRIVE_ENCODER_CaptureMeasure+0x150>)
 8002fea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fee:	f7fd fbf5 	bl	80007dc <__aeabi_ddiv>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	f7fd fac5 	bl	8000588 <__aeabi_dmul>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4610      	mov	r0, r2
 8003004:	4619      	mov	r1, r3
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	461a      	mov	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	189c      	adds	r4, r3, r2
 8003016:	f7fd fd99 	bl	8000b4c <__aeabi_d2f>
 800301a:	4603      	mov	r3, r0
 800301c:	60e3      	str	r3, [r4, #12]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 800301e:	7bfb      	ldrb	r3, [r7, #15]
 8003020:	3301      	adds	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	2b01      	cmp	r3, #1
 8003028:	f67f af6b 	bls.w	8002f02 <DIFFDRIVE_ENCODER_CaptureMeasure+0x1a>

	}

	return DIFFDRIVE_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bdb0      	pop	{r4, r5, r7, pc}
 8003036:	bf00      	nop
 8003038:	54442d18 	.word	0x54442d18
 800303c:	401921fb 	.word	0x401921fb
 8003040:	20005104 	.word	0x20005104
 8003044:	7fffff9b 	.word	0x7fffff9b

08003048 <DIFFDRIVE_ENCODER_Reset>:


void DIFFDRIVE_ENCODER_Reset(void){
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens= hdiffdrv->encoder;
 800304e:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <DIFFDRIVE_ENCODER_Reset+0x60>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003056:	603b      	str	r3, [r7, #0]

	// Reset Wheel encoders
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003058:	2300      	movs	r3, #0
 800305a:	71fb      	strb	r3, [r7, #7]
 800305c:	e019      	b.n	8003092 <DIFFDRIVE_ENCODER_Reset+0x4a>
		__HAL_TIM_SET_COUNTER(tmpsens[side].htim,0);
 800305e:	79fa      	ldrb	r2, [r7, #7]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	461a      	mov	r2, r3
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	4413      	add	r3, r2
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2200      	movs	r2, #0
 8003074:	625a      	str	r2, [r3, #36]	; 0x24
		tmpsens[side].current_value= 0;
 8003076:	79fa      	ldrb	r2, [r7, #7]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	461a      	mov	r2, r3
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	4413      	add	r3, r2
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	60da      	str	r2, [r3, #12]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	3301      	adds	r3, #1
 8003090:	71fb      	strb	r3, [r7, #7]
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d9e2      	bls.n	800305e <DIFFDRIVE_ENCODER_Reset+0x16>
	}

}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20005104 	.word	0x20005104

080030ac <DIFFDRIVE_HISTORY_Start>:


void DIFFDRIVE_HISTORY_Start(void){
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0

	// Enable history saving and reset time_index counter
	hdiffdrv->history.sample_cnt= 0;
 80030b0:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <DIFFDRIVE_HISTORY_Start+0x24>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	hdiffdrv->history.Enabled= true;
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <DIFFDRIVE_HISTORY_Start+0x24>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20005104 	.word	0x20005104

080030d4 <DIFFDRIVE_HISTORY_Update>:

}


/* ---- Saving only a fixed number of samples in a circular buffer, if history is enabled  ------------------- */
void DIFFDRIVE_HISTORY_Update(float delta_a_target, float delta_th_target){
 80030d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030d8:	b098      	sub	sp, #96	; 0x60
 80030da:	af00      	add	r7, sp, #0
 80030dc:	ed87 0a01 	vstr	s0, [r7, #4]
 80030e0:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_HISTORY_TypeDef* tmphist  = &(hdiffdrv->history);
 80030e4:	4baf      	ldr	r3, [pc, #700]	; (80033a4 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80030ec:	65bb      	str	r3, [r7, #88]	; 0x58
	DIFFDRIVE_CONTROL_TypeDef* tmpctrl  =   hdiffdrv->control;
 80030ee:	4bad      	ldr	r3, [pc, #692]	; (80033a4 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80030f6:	657b      	str	r3, [r7, #84]	; 0x54
	DIFFDRIVE_STATE_TypeDef    tmpstate =   hdiffdrv->state;
 80030f8:	4baa      	ldr	r3, [pc, #680]	; (80033a4 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f107 041c 	add.w	r4, r7, #28
 8003100:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 8003104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800310a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800310c:	682b      	ldr	r3, [r5, #0]
 800310e:	6023      	str	r3, [r4, #0]
	float min_volt;
	float max_volt;

	float theta, wheel_target[2], input[2];

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003110:	2300      	movs	r3, #0
 8003112:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003116:	e025      	b.n	8003164 <DIFFDRIVE_HISTORY_Update+0x90>
		wheel_target[side] = __FEEDFORWARD_GET_CURRENT_TARGET(&(tmpctrl[side].fdfrwrd));
 8003118:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800311c:	2268      	movs	r2, #104	; 0x68
 800311e:	fb02 f303 	mul.w	r3, r2, r3
 8003122:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003124:	441a      	add	r2, r3
 8003126:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800312a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003132:	440b      	add	r3, r1
 8003134:	3b4c      	subs	r3, #76	; 0x4c
 8003136:	601a      	str	r2, [r3, #0]
		input[side] = tmpstate.input[side];
 8003138:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800313c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003140:	3206      	adds	r2, #6
 8003142:	0092      	lsls	r2, r2, #2
 8003144:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003148:	440a      	add	r2, r1
 800314a:	3a40      	subs	r2, #64	; 0x40
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003154:	440b      	add	r3, r1
 8003156:	3b54      	subs	r3, #84	; 0x54
 8003158:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800315a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800315e:	3301      	adds	r3, #1
 8003160:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003164:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003168:	2b01      	cmp	r3, #1
 800316a:	d9d5      	bls.n	8003118 <DIFFDRIVE_HISTORY_Update+0x44>
	}

	// Current index (using operator % to enroll k between 0 and max_sample; last_time_index is unbounded)
	uint32_t k= tmphist->sample_cnt%tmphist->max_sample;
 800316c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003172:	6892      	ldr	r2, [r2, #8]
 8003174:	fbb3 f1f2 	udiv	r1, r3, r2
 8003178:	fb02 f201 	mul.w	r2, r2, r1
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	653b      	str	r3, [r7, #80]	; 0x50

	tmphist->index= k;
 8003180:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003182:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003184:	60da      	str	r2, [r3, #12]

	// Update history if is enabled
	if( tmphist->Enabled ){
 8003186:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 8252 	beq.w	8003634 <DIFFDRIVE_HISTORY_Update+0x560>
		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003190:	2300      	movs	r3, #0
 8003192:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8003196:	e134      	b.n	8003402 <DIFFDRIVE_HISTORY_Update+0x32e>

			min_volt= hdiffdrv->motor[side].min_voltage;
 8003198:	4b82      	ldr	r3, [pc, #520]	; (80033a4 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80031a0:	212c      	movs	r1, #44	; 0x2c
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	33c0      	adds	r3, #192	; 0xc0
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	647b      	str	r3, [r7, #68]	; 0x44
			max_volt= hdiffdrv->motor[side].max_voltage;
 80031ae:	4b7d      	ldr	r3, [pc, #500]	; (80033a4 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80031b6:	212c      	movs	r1, #44	; 0x2c
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	33bc      	adds	r3, #188	; 0xbc
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	643b      	str	r3, [r7, #64]	; 0x40

			// Input Saturation limits, for "measured" tension-------------------------
			if( input[side] > (max_volt-min_volt))
 80031c4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80031ce:	4413      	add	r3, r2
 80031d0:	3b54      	subs	r3, #84	; 0x54
 80031d2:	ed93 7a00 	vldr	s14, [r3]
 80031d6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80031da:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80031de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80031e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ea:	dd16      	ble.n	800321a <DIFFDRIVE_HISTORY_Update+0x146>
				tmphist->state_measure[k].input[side]= max_volt-min_volt;
 80031ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ee:	6959      	ldr	r1, [r3, #20]
 80031f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80031f2:	4613      	mov	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	18ca      	adds	r2, r1, r3
 80031fc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003200:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003204:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800320c:	3306      	adds	r3, #6
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	3304      	adds	r3, #4
 8003214:	edc3 7a00 	vstr	s15, [r3]
 8003218:	e045      	b.n	80032a6 <DIFFDRIVE_HISTORY_Update+0x1d2>
			else
			if( input[side] < -(max_volt-min_volt))
 800321a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003224:	4413      	add	r3, r2
 8003226:	3b54      	subs	r3, #84	; 0x54
 8003228:	ed93 7a00 	vldr	s14, [r3]
 800322c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8003230:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003234:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003238:	eef1 7a67 	vneg.f32	s15, s15
 800323c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003244:	d518      	bpl.n	8003278 <DIFFDRIVE_HISTORY_Update+0x1a4>
				tmphist->state_measure[k].input[side]= -(max_volt-min_volt);
 8003246:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800324a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800324e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003254:	6959      	ldr	r1, [r3, #20]
 8003256:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	18ca      	adds	r2, r1, r3
 8003262:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003266:	eef1 7a67 	vneg.f32	s15, s15
 800326a:	3306      	adds	r3, #6
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	3304      	adds	r3, #4
 8003272:	edc3 7a00 	vstr	s15, [r3]
 8003276:	e016      	b.n	80032a6 <DIFFDRIVE_HISTORY_Update+0x1d2>
			else
				tmphist->state_measure[k].input[side]= input[side];
 8003278:	f897 005e 	ldrb.w	r0, [r7, #94]	; 0x5e
 800327c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800327e:	6959      	ldr	r1, [r3, #20]
 8003280:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4419      	add	r1, r3
 800328c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003290:	0082      	lsls	r2, r0, #2
 8003292:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8003296:	4402      	add	r2, r0
 8003298:	3a54      	subs	r2, #84	; 0x54
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	3306      	adds	r3, #6
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	3304      	adds	r3, #4
 80032a4:	601a      	str	r2, [r3, #0]
			// ------------------------------------------------------------------------

			// Target input, without PID contribute and saturation limits
			tmphist->state_target[k].input[side]= hdiffdrv->control[side].fdfrwrd.current_input;
 80032a6:	4b3f      	ldr	r3, [pc, #252]	; (80033a4 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 80032ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b0:	6919      	ldr	r1, [r3, #16]
 80032b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4419      	add	r1, r3
 80032be:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80032c2:	2268      	movs	r2, #104	; 0x68
 80032c4:	fb02 f204 	mul.w	r2, r2, r4
 80032c8:	4402      	add	r2, r0
 80032ca:	f502 72a8 	add.w	r2, r2, #336	; 0x150
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	3306      	adds	r3, #6
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	3304      	adds	r3, #4
 80032d8:	601a      	str	r2, [r3, #0]

			// Wheels measured and target
			tmphist->state_measure[k].wheel[side]= __DIFFDRIVE_ENCODER_GET_CURRENT_VALUE(hdiffdrv,side);
 80032da:	4b32      	ldr	r3, [pc, #200]	; (80033a4 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 80032dc:	681c      	ldr	r4, [r3, #0]
 80032de:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80032e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e4:	6958      	ldr	r0, [r3, #20]
 80032e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80032e8:	460b      	mov	r3, r1
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	440b      	add	r3, r1
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	18c1      	adds	r1, r0, r3
 80032f2:	f897 005e 	ldrb.w	r0, [r7, #94]	; 0x5e
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4423      	add	r3, r4
 8003300:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	1c83      	adds	r3, r0, #2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3304      	adds	r3, #4
 800330e:	601a      	str	r2, [r3, #0]
			tmphist->state_measure[k].delta_wheel[side]= hdiffdrv->state.delta_wheel[side];
 8003310:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8003318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800331a:	6959      	ldr	r1, [r3, #20]
 800331c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800331e:	4613      	mov	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4419      	add	r1, r3
 8003328:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800332c:	f104 0282 	add.w	r2, r4, #130	; 0x82
 8003330:	0092      	lsls	r2, r2, #2
 8003332:	4402      	add	r2, r0
 8003334:	3204      	adds	r2, #4
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	3304      	adds	r3, #4
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	3304      	adds	r3, #4
 8003340:	601a      	str	r2, [r3, #0]

			if(k > 0)
 8003342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003344:	2b00      	cmp	r3, #0
 8003346:	d02f      	beq.n	80033a8 <DIFFDRIVE_HISTORY_Update+0x2d4>
				tmphist->state_target[k].delta_wheel[side]= wheel_target[side]-tmphist->state_target[k-1].wheel[side];
 8003348:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003352:	4413      	add	r3, r2
 8003354:	3b4c      	subs	r3, #76	; 0x4c
 8003356:	ed93 7a00 	vldr	s14, [r3]
 800335a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800335c:	6919      	ldr	r1, [r3, #16]
 800335e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003360:	4613      	mov	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	3b24      	subs	r3, #36	; 0x24
 800336a:	18ca      	adds	r2, r1, r3
 800336c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003370:	3302      	adds	r3, #2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	edd3 7a00 	vldr	s15, [r3]
 800337c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800337e:	6919      	ldr	r1, [r3, #16]
 8003380:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	18ca      	adds	r2, r1, r3
 800338c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003394:	3304      	adds	r3, #4
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	3304      	adds	r3, #4
 800339c:	edc3 7a00 	vstr	s15, [r3]
 80033a0:	e013      	b.n	80033ca <DIFFDRIVE_HISTORY_Update+0x2f6>
 80033a2:	bf00      	nop
 80033a4:	20005104 	.word	0x20005104
			else
				tmphist->state_target[k].delta_wheel[side]= 0;
 80033a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033aa:	6919      	ldr	r1, [r3, #16]
 80033ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	18ca      	adds	r2, r1, r3
 80033b8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80033bc:	3304      	adds	r3, #4
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	3304      	adds	r3, #4
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
			tmphist->state_target[k].wheel[side]= wheel_target[side];
 80033ca:	f897 005e 	ldrb.w	r0, [r7, #94]	; 0x5e
 80033ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033d0:	6919      	ldr	r1, [r3, #16]
 80033d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4419      	add	r1, r3
 80033de:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80033e2:	0082      	lsls	r2, r0, #2
 80033e4:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80033e8:	4402      	add	r2, r0
 80033ea:	3a4c      	subs	r2, #76	; 0x4c
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	3302      	adds	r3, #2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	3304      	adds	r3, #4
 80033f6:	601a      	str	r2, [r3, #0]
		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80033f8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80033fc:	3301      	adds	r3, #1
 80033fe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8003402:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003406:	2b01      	cmp	r3, #1
 8003408:	f67f aec6 	bls.w	8003198 <DIFFDRIVE_HISTORY_Update+0xc4>

		}

		// Pose measure, extracted from state register
		tmphist->state_measure[k].pose= tmpstate.pose;
 800340c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800340e:	6959      	ldr	r1, [r3, #20]
 8003410:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	461c      	mov	r4, r3
 800341e:	f107 031c 	add.w	r3, r7, #28
 8003422:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003426:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		// Compute current target pose
		if( tmphist->sample_cnt != 0 ){
 800342a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80a2 	beq.w	8003578 <DIFFDRIVE_HISTORY_Update+0x4a4>
			uint32_t k_prev= (tmphist->sample_cnt-1)%tmphist->max_sample;
 8003434:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	3b01      	subs	r3, #1
 800343a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800343c:	6892      	ldr	r2, [r2, #8]
 800343e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003442:	fb02 f201 	mul.w	r2, r2, r1
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	64bb      	str	r3, [r7, #72]	; 0x48

			theta= tmphist->state_target[k_prev].pose.theta;
 800344a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800344c:	6919      	ldr	r1, [r3, #16]
 800344e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	64fb      	str	r3, [r7, #76]	; 0x4c
			tmphist->state_target[k].pose.x_a   =  tmphist->state_target[k_prev].pose.x_a   + delta_a_target*cos(theta);
 800345e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003460:	6919      	ldr	r1, [r3, #16]
 8003462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd f831 	bl	80004d8 <__aeabi_f2d>
 8003476:	4604      	mov	r4, r0
 8003478:	460d      	mov	r5, r1
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd f82c 	bl	80004d8 <__aeabi_f2d>
 8003480:	4680      	mov	r8, r0
 8003482:	4689      	mov	r9, r1
 8003484:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003486:	f7fd f827 	bl	80004d8 <__aeabi_f2d>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	ec43 2b10 	vmov	d0, r2, r3
 8003492:	f007 fc45 	bl	800ad20 <cos>
 8003496:	ec53 2b10 	vmov	r2, r3, d0
 800349a:	4640      	mov	r0, r8
 800349c:	4649      	mov	r1, r9
 800349e:	f7fd f873 	bl	8000588 <__aeabi_dmul>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4620      	mov	r0, r4
 80034a8:	4629      	mov	r1, r5
 80034aa:	f7fc feb7 	bl	800021c <__adddf3>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4690      	mov	r8, r2
 80034b4:	4699      	mov	r9, r3
 80034b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034b8:	6919      	ldr	r1, [r3, #16]
 80034ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	18cc      	adds	r4, r1, r3
 80034c6:	4640      	mov	r0, r8
 80034c8:	4649      	mov	r1, r9
 80034ca:	f7fd fb3f 	bl	8000b4c <__aeabi_d2f>
 80034ce:	4603      	mov	r3, r0
 80034d0:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k].pose.y_a   =  tmphist->state_target[k_prev].pose.y_a   + delta_a_target*sin(theta);
 80034d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034d4:	6919      	ldr	r1, [r3, #16]
 80034d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fc fff7 	bl	80004d8 <__aeabi_f2d>
 80034ea:	4604      	mov	r4, r0
 80034ec:	460d      	mov	r5, r1
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fc fff2 	bl	80004d8 <__aeabi_f2d>
 80034f4:	4680      	mov	r8, r0
 80034f6:	4689      	mov	r9, r1
 80034f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80034fa:	f7fc ffed 	bl	80004d8 <__aeabi_f2d>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	ec43 2b10 	vmov	d0, r2, r3
 8003506:	f007 fc5b 	bl	800adc0 <sin>
 800350a:	ec53 2b10 	vmov	r2, r3, d0
 800350e:	4640      	mov	r0, r8
 8003510:	4649      	mov	r1, r9
 8003512:	f7fd f839 	bl	8000588 <__aeabi_dmul>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4620      	mov	r0, r4
 800351c:	4629      	mov	r1, r5
 800351e:	f7fc fe7d 	bl	800021c <__adddf3>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4690      	mov	r8, r2
 8003528:	4699      	mov	r9, r3
 800352a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800352c:	6919      	ldr	r1, [r3, #16]
 800352e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	18cc      	adds	r4, r1, r3
 800353a:	4640      	mov	r0, r8
 800353c:	4649      	mov	r1, r9
 800353e:	f7fd fb05 	bl	8000b4c <__aeabi_d2f>
 8003542:	4603      	mov	r3, r0
 8003544:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k].pose.theta =  tmphist->state_target[k_prev].pose.theta + delta_th_target;
 8003546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003548:	6919      	ldr	r1, [r3, #16]
 800354a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	ed93 7a02 	vldr	s14, [r3, #8]
 800355a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800355c:	6919      	ldr	r1, [r3, #16]
 800355e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	edd7 7a00 	vldr	s15, [r7]
 800356e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003572:	edc3 7a02 	vstr	s15, [r3, #8]
 8003576:	e058      	b.n	800362a <DIFFDRIVE_HISTORY_Update+0x556>
		}else{
			theta= 0;
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	64fb      	str	r3, [r7, #76]	; 0x4c
			tmphist->state_target[k].pose.x_a   =  delta_a_target*cos(theta);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fc ffaa 	bl	80004d8 <__aeabi_f2d>
 8003584:	4604      	mov	r4, r0
 8003586:	460d      	mov	r5, r1
 8003588:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800358a:	f7fc ffa5 	bl	80004d8 <__aeabi_f2d>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	ec43 2b10 	vmov	d0, r2, r3
 8003596:	f007 fbc3 	bl	800ad20 <cos>
 800359a:	ec53 2b10 	vmov	r2, r3, d0
 800359e:	4620      	mov	r0, r4
 80035a0:	4629      	mov	r1, r5
 80035a2:	f7fc fff1 	bl	8000588 <__aeabi_dmul>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4690      	mov	r8, r2
 80035ac:	4699      	mov	r9, r3
 80035ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b0:	6919      	ldr	r1, [r3, #16]
 80035b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	18cc      	adds	r4, r1, r3
 80035be:	4640      	mov	r0, r8
 80035c0:	4649      	mov	r1, r9
 80035c2:	f7fd fac3 	bl	8000b4c <__aeabi_d2f>
 80035c6:	4603      	mov	r3, r0
 80035c8:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k].pose.y_a   =  delta_a_target*sin(theta);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fc ff84 	bl	80004d8 <__aeabi_f2d>
 80035d0:	4604      	mov	r4, r0
 80035d2:	460d      	mov	r5, r1
 80035d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80035d6:	f7fc ff7f 	bl	80004d8 <__aeabi_f2d>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	ec43 2b10 	vmov	d0, r2, r3
 80035e2:	f007 fbed 	bl	800adc0 <sin>
 80035e6:	ec53 2b10 	vmov	r2, r3, d0
 80035ea:	4620      	mov	r0, r4
 80035ec:	4629      	mov	r1, r5
 80035ee:	f7fc ffcb 	bl	8000588 <__aeabi_dmul>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4690      	mov	r8, r2
 80035f8:	4699      	mov	r9, r3
 80035fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035fc:	6919      	ldr	r1, [r3, #16]
 80035fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003600:	4613      	mov	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	18cc      	adds	r4, r1, r3
 800360a:	4640      	mov	r0, r8
 800360c:	4649      	mov	r1, r9
 800360e:	f7fd fa9d 	bl	8000b4c <__aeabi_d2f>
 8003612:	4603      	mov	r3, r0
 8003614:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k].pose.theta =  delta_th_target;
 8003616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003618:	6919      	ldr	r1, [r3, #16]
 800361a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	609a      	str	r2, [r3, #8]

		}

		// Increment sample counter
		tmphist->sample_cnt++;
 800362a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003632:	605a      	str	r2, [r3, #4]
	}
}
 8003634:	bf00      	nop
 8003636:	3760      	adds	r7, #96	; 0x60
 8003638:	46bd      	mov	sp, r7
 800363a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800363e:	bf00      	nop

08003640 <DIFFDRIVE_CONTROL_Start>:
	else
		tmphist->index++;
}


void DIFFDRIVE_CONTROL_Start(void){
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0

	// Reset Control
	DIFFDRIVE_CONTROL_Reset();
 8003644:	f000 f80e 	bl	8003664 <DIFFDRIVE_CONTROL_Reset>

	// Starting and enabling history
	DIFFDRIVE_HISTORY_Start();
 8003648:	f7ff fd30 	bl	80030ac <DIFFDRIVE_HISTORY_Start>

	// Start control timing
	DIFFDRIVE_TIMING_Start();
 800364c:	f000 f878 	bl	8003740 <DIFFDRIVE_TIMING_Start>

}
 8003650:	bf00      	nop
 8003652:	bd80      	pop	{r7, pc}

08003654 <DIFFDRIVE_CONTROL_Stop>:


void DIFFDRIVE_CONTROL_Stop(void){
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0

	// Stop timing, control finished
	DIFFDRIVE_TIMING_Stop();
 8003658:	f000 f880 	bl	800375c <DIFFDRIVE_TIMING_Stop>

	// Set motor to 0 volt
	DIFFDRIVE_MOTOR_Stop();
 800365c:	f7ff f9fc 	bl	8002a58 <DIFFDRIVE_MOTOR_Stop>

}
 8003660:	bf00      	nop
 8003662:	bd80      	pop	{r7, pc}

08003664 <DIFFDRIVE_CONTROL_Reset>:


void DIFFDRIVE_CONTROL_Reset(void){
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0

	DIFFDRIVE_CONTROL_TypeDef* hctrl=    hdiffdrv->control;
 800366a:	4b34      	ldr	r3, [pc, #208]	; (800373c <DIFFDRIVE_CONTROL_Reset+0xd8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003672:	60bb      	str	r3, [r7, #8]
	DIFFDRIVE_HISTORY_TypeDef* tmphist= &hdiffdrv->history;
 8003674:	4b31      	ldr	r3, [pc, #196]	; (800373c <DIFFDRIVE_CONTROL_Reset+0xd8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800367c:	607b      	str	r3, [r7, #4]

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
 8003682:	e016      	b.n	80036b2 <DIFFDRIVE_CONTROL_Reset+0x4e>
		// Reset feed-forward buffer (with NULL value in second argument the buffers are initialized with zeros)
		FEEDFORWARD_BufferInit(&hctrl[side].fdfrwrd, NULL);
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2268      	movs	r2, #104	; 0x68
 8003688:	fb02 f303 	mul.w	r3, r2, r3
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	4413      	add	r3, r2
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fc40 	bl	8003f18 <FEEDFORWARD_BufferInit>
		// Reset PID
		PID_Reset(&hctrl[side].pid);
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	2268      	movs	r2, #104	; 0x68
 800369c:	fb02 f303 	mul.w	r3, r2, r3
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	4413      	add	r3, r2
 80036a4:	3334      	adds	r3, #52	; 0x34
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 fdd9 	bl	800425e <PID_Reset>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	3301      	adds	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d9e5      	bls.n	8003684 <DIFFDRIVE_CONTROL_Reset+0x20>
	}

	// Reset encoder sensors
	DIFFDRIVE_ENCODER_Reset();
 80036b8:	f7ff fcc6 	bl	8003048 <DIFFDRIVE_ENCODER_Reset>

	// If a reset occurred let converge pose target and pose measure, 'cause they are cumulative variables,
	// in order to not have excessive divergences between these two trajectories
	tmphist->state_target[tmphist->index].pose.theta= tmphist->state_measure[tmphist->index].pose.theta;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6959      	ldr	r1, [r3, #20]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4419      	add	r1, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6918      	ldr	r0, [r3, #16]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	4613      	mov	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4403      	add	r3, r0
 80036e0:	688a      	ldr	r2, [r1, #8]
 80036e2:	609a      	str	r2, [r3, #8]
	tmphist->state_target[tmphist->index].pose.x_a=   tmphist->state_measure[tmphist->index].pose.x_a;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6959      	ldr	r1, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4419      	add	r1, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6918      	ldr	r0, [r3, #16]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4403      	add	r3, r0
 8003708:	680a      	ldr	r2, [r1, #0]
 800370a:	601a      	str	r2, [r3, #0]
	tmphist->state_target[tmphist->index].pose.y_a=   tmphist->state_measure[tmphist->index].pose.y_a;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6959      	ldr	r1, [r3, #20]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4419      	add	r1, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6918      	ldr	r0, [r3, #16]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	4613      	mov	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4403      	add	r3, r0
 8003730:	684a      	ldr	r2, [r1, #4]
 8003732:	605a      	str	r2, [r3, #4]

}
 8003734:	bf00      	nop
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20005104 	.word	0x20005104

08003740 <DIFFDRIVE_TIMING_Start>:


void DIFFDRIVE_TIMING_Start(void){
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0

	// Starting timer in interrupt mode. It serve for control law timing
	HAL_TIM_Base_Start_IT(hdiffdrv->timing.htim);
 8003744:	4b04      	ldr	r3, [pc, #16]	; (8003758 <DIFFDRIVE_TIMING_Start+0x18>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800374c:	4618      	mov	r0, r3
 800374e:	f002 fb11 	bl	8005d74 <HAL_TIM_Base_Start_IT>

}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20005104 	.word	0x20005104

0800375c <DIFFDRIVE_TIMING_Stop>:


void DIFFDRIVE_TIMING_Stop(void){
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0

	// Stop timer in interrupt mode
	HAL_TIM_Base_Stop_IT(hdiffdrv->timing.htim);
 8003760:	4b04      	ldr	r3, [pc, #16]	; (8003774 <DIFFDRIVE_TIMING_Stop+0x18>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003768:	4618      	mov	r0, r3
 800376a:	f002 fb73 	bl	8005e54 <HAL_TIM_Base_Stop_IT>

}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20005104 	.word	0x20005104

08003778 <DIFFDRIVE_TIMING_Wait>:


void DIFFDRIVE_TIMING_Wait(void){
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0

	// Wait until the timing flag is true
	while( !(hdiffdrv->timing.flag) )
 800377c:	e000      	b.n	8003780 <DIFFDRIVE_TIMING_Wait+0x8>
		__NOP();
 800377e:	bf00      	nop
	while( !(hdiffdrv->timing.flag) )
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <DIFFDRIVE_TIMING_Wait+0x30>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8003788:	b2db      	uxtb	r3, r3
 800378a:	f083 0301 	eor.w	r3, r3, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f4      	bne.n	800377e <DIFFDRIVE_TIMING_Wait+0x6>

	// Reset timing flag
	hdiffdrv->timing.flag= false;
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <DIFFDRIVE_TIMING_Wait+0x30>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

}
 800379e:	bf00      	nop
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	20005104 	.word	0x20005104

080037ac <DIFFDRIVE_STATE_Update>:


void DIFFDRIVE_STATE_Update(float* input){
 80037ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037b0:	b088      	sub	sp, #32
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_STATE_TypeDef* tmpstate= &(hdiffdrv->state);
 80037b6:	4b60      	ldr	r3, [pc, #384]	; (8003938 <DIFFDRIVE_STATE_Update+0x18c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037be:	61bb      	str	r3, [r7, #24]

	float delta_a, delta_th, theta;

	// Updating state
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 80037c0:	2300      	movs	r3, #0
 80037c2:	77fb      	strb	r3, [r7, #31]
 80037c4:	e042      	b.n	800384c <DIFFDRIVE_STATE_Update+0xa0>
		tmpstate->wheel[side]=       hdiffdrv->encoder[side].current_value;
 80037c6:	4b5c      	ldr	r3, [pc, #368]	; (8003938 <DIFFDRIVE_STATE_Update+0x18c>)
 80037c8:	6819      	ldr	r1, [r3, #0]
 80037ca:	7ffa      	ldrb	r2, [r7, #31]
 80037cc:	7ff8      	ldrb	r0, [r7, #31]
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	69b9      	ldr	r1, [r7, #24]
 80037e0:	1c83      	adds	r3, r0, #2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	3304      	adds	r3, #4
 80037e8:	601a      	str	r2, [r3, #0]
		tmpstate->delta_wheel[side]= hdiffdrv->encoder[side].current_value-hdiffdrv->encoder[side].previous_value;
 80037ea:	4b53      	ldr	r3, [pc, #332]	; (8003938 <DIFFDRIVE_STATE_Update+0x18c>)
 80037ec:	6819      	ldr	r1, [r3, #0]
 80037ee:	7ffa      	ldrb	r2, [r7, #31]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80037fe:	ed93 7a00 	vldr	s14, [r3]
 8003802:	4b4d      	ldr	r3, [pc, #308]	; (8003938 <DIFFDRIVE_STATE_Update+0x18c>)
 8003804:	6819      	ldr	r1, [r3, #0]
 8003806:	7ffa      	ldrb	r2, [r7, #31]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003816:	edd3 7a00 	vldr	s15, [r3]
 800381a:	7ffb      	ldrb	r3, [r7, #31]
 800381c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	3304      	adds	r3, #4
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	3304      	adds	r3, #4
 800382a:	edc3 7a00 	vstr	s15, [r3]
		tmpstate->input[side]=       input[side];
 800382e:	7ffb      	ldrb	r3, [r7, #31]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	441a      	add	r2, r3
 8003836:	7ffb      	ldrb	r3, [r7, #31]
 8003838:	6812      	ldr	r2, [r2, #0]
 800383a:	69b9      	ldr	r1, [r7, #24]
 800383c:	3306      	adds	r3, #6
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	3304      	adds	r3, #4
 8003844:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 8003846:	7ffb      	ldrb	r3, [r7, #31]
 8003848:	3301      	adds	r3, #1
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	7ffb      	ldrb	r3, [r7, #31]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d9b9      	bls.n	80037c6 <DIFFDRIVE_STATE_Update+0x1a>
	}

	// Compute and update current pose
	DIFFDRIVE_DeltaWheel2DeltaTrajectory(&delta_a, &delta_th,  tmpstate->delta_wheel);
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f103 0214 	add.w	r2, r3, #20
 8003858:	f107 010c 	add.w	r1, r7, #12
 800385c:	f107 0310 	add.w	r3, r7, #16
 8003860:	4618      	mov	r0, r3
 8003862:	f000 f8bf 	bl	80039e4 <DIFFDRIVE_DeltaWheel2DeltaTrajectory>

	theta= tmpstate->pose.theta;
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	617b      	str	r3, [r7, #20]
	tmpstate->pose.x_a   +=  delta_a*cos(theta);
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7fc fe31 	bl	80004d8 <__aeabi_f2d>
 8003876:	4604      	mov	r4, r0
 8003878:	460d      	mov	r5, r1
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4618      	mov	r0, r3
 800387e:	f7fc fe2b 	bl	80004d8 <__aeabi_f2d>
 8003882:	4680      	mov	r8, r0
 8003884:	4689      	mov	r9, r1
 8003886:	6978      	ldr	r0, [r7, #20]
 8003888:	f7fc fe26 	bl	80004d8 <__aeabi_f2d>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	ec43 2b10 	vmov	d0, r2, r3
 8003894:	f007 fa44 	bl	800ad20 <cos>
 8003898:	ec53 2b10 	vmov	r2, r3, d0
 800389c:	4640      	mov	r0, r8
 800389e:	4649      	mov	r1, r9
 80038a0:	f7fc fe72 	bl	8000588 <__aeabi_dmul>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4620      	mov	r0, r4
 80038aa:	4629      	mov	r1, r5
 80038ac:	f7fc fcb6 	bl	800021c <__adddf3>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4610      	mov	r0, r2
 80038b6:	4619      	mov	r1, r3
 80038b8:	f7fd f948 	bl	8000b4c <__aeabi_d2f>
 80038bc:	4602      	mov	r2, r0
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	601a      	str	r2, [r3, #0]
	tmpstate->pose.y_a   +=  delta_a*sin(theta);
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fc fe06 	bl	80004d8 <__aeabi_f2d>
 80038cc:	4604      	mov	r4, r0
 80038ce:	460d      	mov	r5, r1
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fc fe00 	bl	80004d8 <__aeabi_f2d>
 80038d8:	4680      	mov	r8, r0
 80038da:	4689      	mov	r9, r1
 80038dc:	6978      	ldr	r0, [r7, #20]
 80038de:	f7fc fdfb 	bl	80004d8 <__aeabi_f2d>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	ec43 2b10 	vmov	d0, r2, r3
 80038ea:	f007 fa69 	bl	800adc0 <sin>
 80038ee:	ec53 2b10 	vmov	r2, r3, d0
 80038f2:	4640      	mov	r0, r8
 80038f4:	4649      	mov	r1, r9
 80038f6:	f7fc fe47 	bl	8000588 <__aeabi_dmul>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4620      	mov	r0, r4
 8003900:	4629      	mov	r1, r5
 8003902:	f7fc fc8b 	bl	800021c <__adddf3>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	f7fd f91d 	bl	8000b4c <__aeabi_d2f>
 8003912:	4602      	mov	r2, r0
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	605a      	str	r2, [r3, #4]
	tmpstate->pose.theta +=  delta_th;
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	ed93 7a02 	vldr	s14, [r3, #8]
 800391e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800392c:	bf00      	nop
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003936:	bf00      	nop
 8003938:	20005104 	.word	0x20005104

0800393c <DIFFDRIVE_DeltaTrajectory2WheelAngle>:


void DIFFDRIVE_DeltaTrajectory2WheelAngle(float* wheel, float delta_a, float delta_theta){
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	ed87 0a02 	vstr	s0, [r7, #8]
 8003948:	edc7 0a01 	vstr	s1, [r7, #4]

	float r= hdiffdrv->mech_prmtr.r;
 800394c:	4b24      	ldr	r3, [pc, #144]	; (80039e0 <DIFFDRIVE_DeltaTrajectory2WheelAngle+0xa4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003954:	617b      	str	r3, [r7, #20]
	float l= hdiffdrv->mech_prmtr.l;
 8003956:	4b22      	ldr	r3, [pc, #136]	; (80039e0 <DIFFDRIVE_DeltaTrajectory2WheelAngle+0xa4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800395e:	613b      	str	r3, [r7, #16]

	// Target computation (it's affect input var "wheel" because is a pointer.
	// Also note the "+=" symbol and not "=")
	if( wheel != NULL){
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d035      	beq.n	80039d2 <DIFFDRIVE_DeltaTrajectory2WheelAngle+0x96>
		wheel[left ] +=  delta_a/r - l*delta_theta/r;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	ed93 7a00 	vldr	s14, [r3]
 800396c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003970:	edd7 7a05 	vldr	s15, [r7, #20]
 8003974:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003978:	ed97 6a04 	vldr	s12, [r7, #16]
 800397c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003980:	ee66 5a27 	vmul.f32	s11, s12, s15
 8003984:	ed97 6a05 	vldr	s12, [r7, #20]
 8003988:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800398c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	edc3 7a00 	vstr	s15, [r3]
		wheel[right] +=  delta_a/r + l*delta_theta/r;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3304      	adds	r3, #4
 800399e:	ed93 7a00 	vldr	s14, [r3]
 80039a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80039aa:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80039ae:	ed97 6a04 	vldr	s12, [r7, #16]
 80039b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80039b6:	ee66 5a27 	vmul.f32	s11, s12, s15
 80039ba:	ed97 6a05 	vldr	s12, [r7, #20]
 80039be:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80039c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	3304      	adds	r3, #4
 80039ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ce:	edc3 7a00 	vstr	s15, [r3]
	}

}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	20005104 	.word	0x20005104

080039e4 <DIFFDRIVE_DeltaWheel2DeltaTrajectory>:

void DIFFDRIVE_DeltaWheel2DeltaTrajectory(float* delta_a_p, float* delta_theta_p, float* delta_wheel){
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]

	float r= hdiffdrv->mech_prmtr.r;
 80039f0:	4b1f      	ldr	r3, [pc, #124]	; (8003a70 <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x8c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80039f8:	617b      	str	r3, [r7, #20]
	float l= hdiffdrv->mech_prmtr.l;
 80039fa:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x8c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8003a02:	613b      	str	r3, [r7, #16]

	// Trajectory Variations computation (it's affect input vars delta_a_p and delta_theta_p because are pointers)

	if( delta_a_p != NULL)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d013      	beq.n	8003a32 <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x4e>
		*delta_a_p= (delta_wheel[right] + delta_wheel[left])*r/2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	ed93 7a00 	vldr	s14, [r3]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	edd3 7a00 	vldr	s15, [r3]
 8003a18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a24:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003a28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	edc3 7a00 	vstr	s15, [r3]

	if( delta_theta_p != NULL )
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d015      	beq.n	8003a64 <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x80>
		*delta_theta_p= (delta_wheel[right] - delta_wheel[left])*r/(2*l);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	ed93 7a00 	vldr	s14, [r3]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	edd3 7a00 	vldr	s15, [r3]
 8003a46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a4e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003a52:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a56:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	edc3 7a00 	vstr	s15, [r3]

}
 8003a64:	bf00      	nop
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	20005104 	.word	0x20005104

08003a74 <DIFFDRIVE_CONTROL_WheelStep>:


void DIFFDRIVE_CONTROL_WheelStep(float* newest_target){
 8003a74:	b590      	push	{r4, r7, lr}
 8003a76:	b08b      	sub	sp, #44	; 0x2c
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_CONTROL_TypeDef* hctrl=  hdiffdrv->control;
 8003a7c:	4b50      	ldr	r3, [pc, #320]	; (8003bc0 <DIFFDRIVE_CONTROL_WheelStep+0x14c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a84:	623b      	str	r3, [r7, #32]
	float curr_target[2], curr_measure, input[2];

	/* Do control wheels */

	// Waiting for step control enabling
	DIFFDRIVE_TIMING_Wait();
 8003a86:	f7ff fe77 	bl	8003778 <DIFFDRIVE_TIMING_Wait>

	// Then get wheel step measure If counters are not near overflow (look at CaptureMeasure function)
	if( (status= DIFFDRIVE_ENCODER_CaptureMeasure()) == DIFFDRIVE_ERROR ){
 8003a8a:	f7ff fa2d 	bl	8002ee8 <DIFFDRIVE_ENCODER_CaptureMeasure>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	77fb      	strb	r3, [r7, #31]
 8003a92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a9a:	d10a      	bne.n	8003ab2 <DIFFDRIVE_CONTROL_WheelStep+0x3e>
		// If exception, reset control
		DIFFDRIVE_CONTROL_Reset();
 8003a9c:	f7ff fde2 	bl	8003664 <DIFFDRIVE_CONTROL_Reset>
		// Reset target temporary variable
		newest_target[left ]= 0;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
		newest_target[right]= 0;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
	}

	// Compute input
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ab8:	e06f      	b.n	8003b9a <DIFFDRIVE_CONTROL_WheelStep+0x126>

		// Computing input using inversion control
		input[side]  = FEEDFORWARD_InversionControl(&(hctrl[side].fdfrwrd), newest_target[side]);
 8003aba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003abe:	2268      	movs	r2, #104	; 0x68
 8003ac0:	fb02 f303 	mul.w	r3, r2, r3
 8003ac4:	6a3a      	ldr	r2, [r7, #32]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	edd3 7a00 	vldr	s15, [r3]
 8003ad8:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8003adc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	f000 faac 	bl	800403e <FEEDFORWARD_InversionControl>
 8003ae6:	eef0 7a40 	vmov.f32	s15, s0
 8003aea:	00a3      	lsls	r3, r4, #2
 8003aec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003af0:	4413      	add	r3, r2
 8003af2:	3b20      	subs	r3, #32
 8003af4:	edc3 7a00 	vstr	s15, [r3]

		// Wheel angle read from sensor
		curr_measure= __DIFFDRIVE_ENCODER_GET_CURRENT_VALUE(hdiffdrv,side);
 8003af8:	4b31      	ldr	r3, [pc, #196]	; (8003bc0 <DIFFDRIVE_CONTROL_WheelStep+0x14c>)
 8003afa:	6819      	ldr	r1, [r3, #0]
 8003afc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	61bb      	str	r3, [r7, #24]

		// Current target value saved in the feed-forward controller struct (you must call before the
		// Inversion Control function and then to extract this value. Look at feed-forward library to
		// better understand why)
		curr_target[side]= __FEEDFORWARD_GET_CURRENT_TARGET(&(hctrl[side].fdfrwrd));
 8003b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b16:	2268      	movs	r2, #104	; 0x68
 8003b18:	fb02 f303 	mul.w	r3, r2, r3
 8003b1c:	6a3a      	ldr	r2, [r7, #32]
 8003b1e:	441a      	add	r2, r3
 8003b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003b2c:	440b      	add	r3, r1
 8003b2e:	3b18      	subs	r3, #24
 8003b30:	601a      	str	r2, [r3, #0]

		// Computing PID input
		input[side] += PID_Control(&(hctrl[side].pid), curr_target[side], curr_measure);
 8003b32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b36:	2268      	movs	r2, #104	; 0x68
 8003b38:	fb02 f303 	mul.w	r3, r2, r3
 8003b3c:	6a3a      	ldr	r2, [r7, #32]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003b4e:	440b      	add	r3, r1
 8003b50:	3b18      	subs	r3, #24
 8003b52:	edd3 7a00 	vldr	s15, [r3]
 8003b56:	edd7 0a06 	vldr	s1, [r7, #24]
 8003b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b5e:	4610      	mov	r0, r2
 8003b60:	f000 fb9b 	bl	800429a <PID_Control>
 8003b64:	eeb0 7a40 	vmov.f32	s14, s0
 8003b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b72:	4413      	add	r3, r2
 8003b74:	3b20      	subs	r3, #32
 8003b76:	edd3 7a00 	vldr	s15, [r3]
 8003b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b88:	4413      	add	r3, r2
 8003b8a:	3b20      	subs	r3, #32
 8003b8c:	edc3 7a00 	vstr	s15, [r3]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b94:	3301      	adds	r3, #1
 8003b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d98b      	bls.n	8003aba <DIFFDRIVE_CONTROL_WheelStep+0x46>

	}

	// Set new PWMs signals
	DIFFDRIVE_MOTOR_SetPWMs(input);
 8003ba2:	f107 0308 	add.w	r3, r7, #8
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe ff68 	bl	8002a7c <DIFFDRIVE_MOTOR_SetPWMs>

	// Update differential drive state structure
	DIFFDRIVE_STATE_Update(input);
 8003bac:	f107 0308 	add.w	r3, r7, #8
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fdfb 	bl	80037ac <DIFFDRIVE_STATE_Update>

}
 8003bb6:	bf00      	nop
 8003bb8:	372c      	adds	r7, #44	; 0x2c
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd90      	pop	{r4, r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20005104 	.word	0x20005104

08003bc4 <DIFFDRIVE_TrackingStart>:

void DIFFDRIVE_TrackingStart(void){
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0

	// Start control
	DIFFDRIVE_CONTROL_Start();
 8003bc8:	f7ff fd3a 	bl	8003640 <DIFFDRIVE_CONTROL_Start>

	// First step wheels control (starts with zeros, robot still)
	DIFFDRIVE_TrackingStep(0,0);
 8003bcc:	eddf 0a03 	vldr	s1, [pc, #12]	; 8003bdc <DIFFDRIVE_TrackingStart+0x18>
 8003bd0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8003bdc <DIFFDRIVE_TrackingStart+0x18>
 8003bd4:	f000 f80a 	bl	8003bec <DIFFDRIVE_TrackingStep>

}
 8003bd8:	bf00      	nop
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	00000000 	.word	0x00000000

08003be0 <DIFFDRIVE_TrackingStop>:


void DIFFDRIVE_TrackingStop(void){
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0

	// Stop control
	DIFFDRIVE_CONTROL_Stop();
 8003be4:	f7ff fd36 	bl	8003654 <DIFFDRIVE_CONTROL_Stop>

}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}

08003bec <DIFFDRIVE_TrackingStep>:


void DIFFDRIVE_TrackingStep(float delta_a, float delta_theta){
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003bf6:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_CONTROL_TypeDef* tmpctrl= hdiffdrv->control;
 8003bfa:	4b1a      	ldr	r3, [pc, #104]	; (8003c64 <DIFFDRIVE_TrackingStep+0x78>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c02:	613b      	str	r3, [r7, #16]
	float newest_target[2];

	// Extracting previous target
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8003c04:	2300      	movs	r3, #0
 8003c06:	75fb      	strb	r3, [r7, #23]
 8003c08:	e010      	b.n	8003c2c <DIFFDRIVE_TrackingStep+0x40>
		newest_target[side]= __FEEDFORWARD_GET_NEWEST_TARGET(&tmpctrl[side].fdfrwrd);
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	2268      	movs	r2, #104	; 0x68
 8003c0e:	fb02 f303 	mul.w	r3, r2, r3
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	441a      	add	r2, r3
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
 8003c18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	f107 0118 	add.w	r1, r7, #24
 8003c20:	440b      	add	r3, r1
 8003c22:	3b10      	subs	r3, #16
 8003c24:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	75fb      	strb	r3, [r7, #23]
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d9eb      	bls.n	8003c0a <DIFFDRIVE_TrackingStep+0x1e>


	// Computing newest target
	DIFFDRIVE_DeltaTrajectory2WheelAngle(newest_target, delta_a, delta_theta);
 8003c32:	f107 0308 	add.w	r3, r7, #8
 8003c36:	edd7 0a00 	vldr	s1, [r7]
 8003c3a:	ed97 0a01 	vldr	s0, [r7, #4]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fe7c 	bl	800393c <DIFFDRIVE_DeltaTrajectory2WheelAngle>

	// Make a wheel step motion
	DIFFDRIVE_CONTROL_WheelStep(newest_target);
 8003c44:	f107 0308 	add.w	r3, r7, #8
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff ff13 	bl	8003a74 <DIFFDRIVE_CONTROL_WheelStep>

	// Updating History
	DIFFDRIVE_HISTORY_Update(delta_a, delta_theta);
 8003c4e:	edd7 0a00 	vldr	s1, [r7]
 8003c52:	ed97 0a01 	vldr	s0, [r7, #4]
 8003c56:	f7ff fa3d 	bl	80030d4 <DIFFDRIVE_HISTORY_Update>


}
 8003c5a:	bf00      	nop
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20005104 	.word	0x20005104

08003c68 <DIFFDRIVE_TIMING_Callback>:
	DIFFDRIVE_MOTOR_Stop();

}


void DIFFDRIVE_TIMING_Callback(TIM_HandleTypeDef* htim){
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

	// Enabling timing flag
	hdiffdrv->timing.flag= true;
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <DIFFDRIVE_TIMING_Callback+0x20>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4


}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20005104 	.word	0x20005104

08003c8c <MAF_Create>:
#include <stdlib.h>

// Moving Average Filter Methods --------------------------------------------------------------------- //

// MAF Create
MAF_HandleTypeDef MAF_Create(const int buffsize, float *weights){
 8003c8c:	b5b0      	push	{r4, r5, r7, lr}
 8003c8e:	b08a      	sub	sp, #40	; 0x28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
	MAF_HandleTypeDef tmp;

	tmp.buffsize = buffsize;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	613b      	str	r3, [r7, #16]
	tmp.buffer = (float*)calloc(buffsize,sizeof(float));
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2104      	movs	r1, #4
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f006 fedf 	bl	800aa64 <calloc>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	623b      	str	r3, [r7, #32]
	tmp.sum = 0;
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
	tmp.avg = 0;
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
	tmp.idx = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61fb      	str	r3, [r7, #28]
	tmp.weights= weights;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24


	return tmp;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	461d      	mov	r5, r3
 8003cc2:	f107 0410 	add.w	r4, r7, #16
 8003cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cce:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	3728      	adds	r7, #40	; 0x28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bdb0      	pop	{r4, r5, r7, pc}

08003cda <MAF_Reset>:

void MAF_Reset(MAF_HandleTypeDef* filter, float init_val){
 8003cda:	b480      	push	{r7}
 8003cdc:	b085      	sub	sp, #20
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	ed87 0a00 	vstr	s0, [r7]

	filter->sum = init_val;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	605a      	str	r2, [r3, #4]
	filter->avg = init_val;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	609a      	str	r2, [r3, #8]
	filter->idx = 0;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	60da      	str	r2, [r3, #12]

	for(int i=0; i < filter->buffsize; i++)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	e009      	b.n	8003d12 <MAF_Reset+0x38>
		filter->buffer[i]= init_val;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	601a      	str	r2, [r3, #0]
	for(int i=0; i < filter->buffsize; i++)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	dbf0      	blt.n	8003cfe <MAF_Reset+0x24>
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <MAF_Update>:

// Maf update. Arithmetic or Weighted. If latter the weights array are ordered from oldest to newest
void MAF_Update(MAF_HandleTypeDef* filter, const float data){
 8003d2a:	b480      	push	{r7}
 8003d2c:	b087      	sub	sp, #28
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	ed87 0a00 	vstr	s0, [r7]

	// Weighted
	if(filter->weights != NULL){
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d03e      	beq.n	8003dbc <MAF_Update+0x92>
		// Store current measure
		filter->buffer[filter->idx] = data;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	601a      	str	r2, [r3, #0]

		// Sum variable
		float sum_tmp = 0;
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
		// Index variable to scan the circular buffer
		int idx_tmp;

		// Computing average from oldest to newest (from 1 to size+1), in circular buffer
		// the oldest are the next value from the current
		for(int i=1; i<filter->buffsize+1; i++){
 8003d54:	2301      	movs	r3, #1
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	e027      	b.n	8003daa <MAF_Update+0x80>
			// Current buffer index in the for loop (the mod '%' serve for the circular index)
			idx_tmp = (filter->idx+i)%(filter->buffsize);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4413      	add	r3, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6812      	ldr	r2, [r2, #0]
 8003d66:	fb93 f1f2 	sdiv	r1, r3, r2
 8003d6a:	fb02 f201 	mul.w	r2, r2, r1
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]
			// Current sum
			sum_tmp += (filter->buffer[idx_tmp])*(filter->weights[i-1]) 	;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691a      	ldr	r2, [r3, #16]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	ed93 7a00 	vldr	s14, [r3]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	edd3 7a00 	vldr	s15, [r3]
 8003d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d98:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003da0:	edc7 7a05 	vstr	s15, [r7, #20]
		for(int i=1; i<filter->buffsize+1; i++){
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	3301      	adds	r3, #1
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	ddd2      	ble.n	8003d5a <MAF_Update+0x30>
		}
		filter->avg = sum_tmp;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	e02f      	b.n	8003e1c <MAF_Update+0xf2>
	}
	// Arithmetic
	else{
		// Remove oldest value from circular buffer
		filter->sum -= filter->buffer[filter->idx];
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	ed93 7a01 	vldr	s14, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	edd3 7a00 	vldr	s15, [r3]
 8003dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	edc3 7a01 	vstr	s15, [r3, #4]

		// Add current measure
		filter->sum += data;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	ed93 7a01 	vldr	s14, [r3, #4]
 8003de2:	edd7 7a00 	vldr	s15, [r7]
 8003de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	edc3 7a01 	vstr	s15, [r3, #4]

		// Calculate Average
		filter->avg = (float) filter->sum/filter->buffsize;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	edd3 6a01 	vldr	s13, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	edc3 7a02 	vstr	s15, [r3, #8]

		// Store current measure
		filter->buffer[filter->idx] = data;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	601a      	str	r2, [r3, #0]
	}

	// Increase index (the mod '%' serve for the circular buffer)
	filter->idx = (filter->idx+1)%(filter->buffsize);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	3301      	adds	r3, #1
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	fb93 f1f2 	sdiv	r1, r3, r2
 8003e2a:	fb02 f201 	mul.w	r2, r2, r1
 8003e2e:	1a9a      	subs	r2, r3, r2
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	60da      	str	r2, [r3, #12]

}
 8003e34:	bf00      	nop
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <FEEDFORWARD_Init>:

#include <stdlib.h>
#include "my_lib/feedforward_controller.h"


void FEEDFORWARD_Init(FEEDFORWARD_HandleTypeDef* hctrl){
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

	// Initializing handle structure values from Init field
	hctrl->arma.n_ar=  hctrl->Init.arma_n_ar;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	881a      	ldrh	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	821a      	strh	r2, [r3, #16]
	hctrl->arma.n_ma=  hctrl->Init.arma_n_ma;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	885a      	ldrh	r2, [r3, #2]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	825a      	strh	r2, [r3, #18]
	hctrl->arma.tau=   hctrl->Init.arma_tau;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	889a      	ldrh	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	829a      	strh	r2, [r3, #20]

	hctrl->arma.AR= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8a1b      	ldrh	r3, [r3, #16]
 8003e64:	2104      	movs	r1, #4
 8003e66:	4618      	mov	r0, r3
 8003e68:	f006 fdfc 	bl	800aa64 <calloc>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461a      	mov	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	619a      	str	r2, [r3, #24]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	e00e      	b.n	8003e98 <FEEDFORWARD_Init+0x58>
		hctrl->arma.AR[i]= hctrl->Init.arma_AR[i];
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	441a      	add	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6999      	ldr	r1, [r3, #24]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3301      	adds	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8a1b      	ldrh	r3, [r3, #16]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	dbea      	blt.n	8003e7a <FEEDFORWARD_Init+0x3a>

	hctrl->arma.MA= (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8a5b      	ldrh	r3, [r3, #18]
 8003ea8:	2104      	movs	r1, #4
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f006 fdda 	bl	800aa64 <calloc>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	61da      	str	r2, [r3, #28]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	e00e      	b.n	8003edc <FEEDFORWARD_Init+0x9c>
		hctrl->arma.MA[i]= hctrl->Init.arma_MA[i];
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	441a      	add	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69d9      	ldr	r1, [r3, #28]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8a5b      	ldrh	r3, [r3, #18]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	dbea      	blt.n	8003ebe <FEEDFORWARD_Init+0x7e>

	// Allocating history' arrays
	hctrl->target_buffer= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8a1b      	ldrh	r3, [r3, #16]
 8003eec:	2104      	movs	r1, #4
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f006 fdb8 	bl	800aa64 <calloc>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24
	hctrl->input_buffer=  (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8a5b      	ldrh	r3, [r3, #18]
 8003f00:	2104      	movs	r1, #4
 8003f02:	4618      	mov	r0, r3
 8003f04:	f006 fdae 	bl	800aa64 <calloc>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	621a      	str	r2, [r3, #32]

}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <FEEDFORWARD_BufferInit>:
	// Reset feed-forward buffer (with NULL value in second argument the buffers are initialized with zeros)
	FEEDFORWARD_BufferInit(hctrl, NULL);

}

void FEEDFORWARD_BufferInit(FEEDFORWARD_HandleTypeDef* hctrl, float *target_init){
 8003f18:	b490      	push	{r4, r7}
 8003f1a:	b08c      	sub	sp, #48	; 0x30
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f107 0408 	add.w	r4, r7, #8
 8003f28:	3310      	adds	r3, #16
 8003f2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint16_t n_ar= arma.n_ar;
 8003f30:	893b      	ldrh	r3, [r7, #8]
 8003f32:	83fb      	strh	r3, [r7, #30]
	uint16_t n_ma= arma.n_ma;
 8003f34:	897b      	ldrh	r3, [r7, #10]
 8003f36:	83bb      	strh	r3, [r7, #28]
	uint16_t  tau= arma.tau;
 8003f38:	89bb      	ldrh	r3, [r7, #12]
 8003f3a:	837b      	strh	r3, [r7, #26]

	// If target pointer is equal to NULL the buffers take zero values
	if( (void *)target_init == NULL ){
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d129      	bne.n	8003f96 <FEEDFORWARD_BufferInit+0x7e>

		for(int i= 0; i < tau; i++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f46:	e00d      	b.n	8003f64 <FEEDFORWARD_BufferInit+0x4c>
			hctrl->target_buffer[(n_ar-1)-i]= 0;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f4c:	8bfb      	ldrh	r3, [r7, #30]
 8003f4e:	1e59      	subs	r1, r3, #1
 8003f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f52:	1acb      	subs	r3, r1, r3
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
		for(int i= 0; i < tau; i++)
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	3301      	adds	r3, #1
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f64:	8b7b      	ldrh	r3, [r7, #26]
 8003f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	dbed      	blt.n	8003f48 <FEEDFORWARD_BufferInit+0x30>

		// Complete first values with the same initial value
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 8003f6c:	8bfb      	ldrh	r3, [r7, #30]
 8003f6e:	1e5a      	subs	r2, r3, #1
 8003f70:	8b7b      	ldrh	r3, [r7, #26]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f76:	e00a      	b.n	8003f8e <FEEDFORWARD_BufferInit+0x76>
			hctrl->target_buffer[i]= 0;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	daf1      	bge.n	8003f78 <FEEDFORWARD_BufferInit+0x60>
 8003f94:	e02d      	b.n	8003ff2 <FEEDFORWARD_BufferInit+0xda>

	}
	// Else I use the input values
	else{
		for(int i= 0; i < tau; i++)
 8003f96:	2300      	movs	r3, #0
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9a:	e012      	b.n	8003fc2 <FEEDFORWARD_BufferInit+0xaa>
			hctrl->target_buffer[(n_ar-1)-i]= target_init[tau-i];
 8003f9c:	8b7a      	ldrh	r2, [r7, #26]
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	441a      	add	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003fac:	8bfb      	ldrh	r3, [r7, #30]
 8003fae:	1e58      	subs	r0, r3, #1
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	1ac3      	subs	r3, r0, r3
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	601a      	str	r2, [r3, #0]
		for(int i= 0; i < tau; i++)
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc2:	8b7b      	ldrh	r3, [r7, #26]
 8003fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	dbe8      	blt.n	8003f9c <FEEDFORWARD_BufferInit+0x84>

		// Complete first values with the same initial value
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 8003fca:	8bfb      	ldrh	r3, [r7, #30]
 8003fcc:	1e5a      	subs	r2, r3, #1
 8003fce:	8b7b      	ldrh	r3, [r7, #26]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	623b      	str	r3, [r7, #32]
 8003fd4:	e00a      	b.n	8003fec <FEEDFORWARD_BufferInit+0xd4>
			hctrl->target_buffer[i]= target_init[0];
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	601a      	str	r2, [r3, #0]
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	623b      	str	r3, [r7, #32]
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	daf1      	bge.n	8003fd6 <FEEDFORWARD_BufferInit+0xbe>
	}

	// Set current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[n_ar-1-tau];
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ff6:	8bfb      	ldrh	r3, [r7, #30]
 8003ff8:	1e59      	subs	r1, r3, #1
 8003ffa:	8b7b      	ldrh	r3, [r7, #26]
 8003ffc:	1acb      	subs	r3, r1, r3
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[n_ma-1];
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1a      	ldr	r2, [r3, #32]
 800400c:	8bbb      	ldrh	r3, [r7, #28]
 800400e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004012:	3b01      	subs	r3, #1
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004022:	893b      	ldrh	r3, [r7, #8]
 8004024:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004028:	3b01      	subs	r3, #1
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004034:	bf00      	nop
 8004036:	3730      	adds	r7, #48	; 0x30
 8004038:	46bd      	mov	sp, r7
 800403a:	bc90      	pop	{r4, r7}
 800403c:	4770      	bx	lr

0800403e <FEEDFORWARD_InversionControl>:


float FEEDFORWARD_InversionControl(FEEDFORWARD_HandleTypeDef* hctrl, float newest_target){
 800403e:	b590      	push	{r4, r7, lr}
 8004040:	b08f      	sub	sp, #60	; 0x3c
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	ed87 0a00 	vstr	s0, [r7]

	float input= 0;
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	637b      	str	r3, [r7, #52]	; 0x34
	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f107 040c 	add.w	r4, r7, #12
 8004056:	3310      	adds	r3, #16
 8004058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800405a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int oldest_ar_sample= 0;
 800405e:	2300      	movs	r3, #0
 8004060:	62bb      	str	r3, [r7, #40]	; 0x28
	int newest_ar_sample= arma.n_ar-1;  // Last minus one because
 8004062:	89bb      	ldrh	r3, [r7, #12]
 8004064:	3b01      	subs	r3, #1
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
								    	//
	int oldest_ma_sample= 0;			//
 8004068:	2300      	movs	r3, #0
 800406a:	623b      	str	r3, [r7, #32]
	int newest_ma_sample= arma.n_ma-1;  // C arrays start from 0
 800406c:	89fb      	ldrh	r3, [r7, #14]
 800406e:	3b01      	subs	r3, #1
 8004070:	61fb      	str	r3, [r7, #28]

	// Assigning the newest target value
	hctrl->target_buffer[newest_ar_sample]= newest_target;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	601a      	str	r2, [r3, #0]

	// Compute feed-forward input (inversion control)
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	633b      	str	r3, [r7, #48]	; 0x30
 8004084:	e019      	b.n	80040ba <FEEDFORWARD_InversionControl+0x7c>
		input += arma.AR[newest_ar_sample-i]*hctrl->target_buffer[i];
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	1acb      	subs	r3, r1, r3
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	ed93 7a00 	vldr	s14, [r3]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	edd3 7a00 	vldr	s15, [r3]
 80040a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80040ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040b0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 80040b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b6:	3301      	adds	r3, #1
 80040b8:	633b      	str	r3, [r7, #48]	; 0x30
 80040ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	429a      	cmp	r2, r3
 80040c0:	dde1      	ble.n	8004086 <FEEDFORWARD_InversionControl+0x48>
	// I know inputs until the newest_ma_sample-1
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c6:	e01b      	b.n	8004100 <FEEDFORWARD_InversionControl+0xc2>
		input += -arma.MA[newest_ma_sample-j]*hctrl->input_buffer[j];
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	69f9      	ldr	r1, [r7, #28]
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	1acb      	subs	r3, r1, r3
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	edd3 7a00 	vldr	s15, [r3]
 80040d8:	eeb1 7a67 	vneg.f32	s14, s15
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1a      	ldr	r2, [r3, #32]
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	edd3 7a00 	vldr	s15, [r3]
 80040ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ee:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80040f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 80040fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fc:	3301      	adds	r3, #1
 80040fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004104:	429a      	cmp	r2, r3
 8004106:	dcdf      	bgt.n	80040c8 <FEEDFORWARD_InversionControl+0x8a>
	// Last input is computed here
	input /= arma.MA[0];
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	ed93 7a00 	vldr	s14, [r3]
 800410e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8004112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004116:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Saving newest input
	hctrl->input_buffer[newest_ma_sample]= input;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1a      	ldr	r2, [r3, #32]
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004126:	601a      	str	r2, [r3, #0]

	// Updating Buffer for next step
	FEEDFORWARD_BufferUpdate(hctrl);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f808 	bl	800413e <FEEDFORWARD_BufferUpdate>

	return input;
 800412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004130:	ee07 3a90 	vmov	s15, r3
}
 8004134:	eeb0 0a67 	vmov.f32	s0, s15
 8004138:	373c      	adds	r7, #60	; 0x3c
 800413a:	46bd      	mov	sp, r7
 800413c:	bd90      	pop	{r4, r7, pc}

0800413e <FEEDFORWARD_BufferUpdate>:


void FEEDFORWARD_BufferUpdate(FEEDFORWARD_HandleTypeDef* hctrl){
 800413e:	b490      	push	{r4, r7}
 8004140:	b088      	sub	sp, #32
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f107 0408 	add.w	r4, r7, #8
 800414c:	3310      	adds	r3, #16
 800414e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Updating current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[arma.n_ar-1-arma.tau];
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004158:	893b      	ldrh	r3, [r7, #8]
 800415a:	3b01      	subs	r3, #1
 800415c:	89b9      	ldrh	r1, [r7, #12]
 800415e:	1a5b      	subs	r3, r3, r1
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[arma.n_ma-1];
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1a      	ldr	r2, [r3, #32]
 800416e:	897b      	ldrh	r3, [r7, #10]
 8004170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004174:	3b01      	subs	r3, #1
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004184:	893b      	ldrh	r3, [r7, #8]
 8004186:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800418a:	3b01      	subs	r3, #1
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	631a      	str	r2, [r3, #48]	; 0x30

	// Then slide buffers ( look, loops go from idx=0 to idx=n-2 )
	for(int i=0; i < arma.n_ar-1; i++)
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	e00f      	b.n	80041bc <FEEDFORWARD_BufferUpdate+0x7e>
		hctrl->target_buffer[i]= hctrl->target_buffer[i+1];
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	3301      	adds	r3, #1
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	441a      	add	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ar-1; i++)
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	3301      	adds	r3, #1
 80041ba:	61fb      	str	r3, [r7, #28]
 80041bc:	893b      	ldrh	r3, [r7, #8]
 80041be:	3b01      	subs	r3, #1
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	dbea      	blt.n	800419c <FEEDFORWARD_BufferUpdate+0x5e>
	for(int i=0; i < arma.n_ma-1; i++)
 80041c6:	2300      	movs	r3, #0
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	e00f      	b.n	80041ec <FEEDFORWARD_BufferUpdate+0xae>
		hctrl->input_buffer[i]= hctrl->input_buffer[i+1];
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1a      	ldr	r2, [r3, #32]
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	3301      	adds	r3, #1
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	441a      	add	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a19      	ldr	r1, [r3, #32]
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ma-1; i++)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	3301      	adds	r3, #1
 80041ea:	61bb      	str	r3, [r7, #24]
 80041ec:	897b      	ldrh	r3, [r7, #10]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	dbea      	blt.n	80041cc <FEEDFORWARD_BufferUpdate+0x8e>

}
 80041f6:	bf00      	nop
 80041f8:	bf00      	nop
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc90      	pop	{r4, r7}
 8004200:	4770      	bx	lr

08004202 <PID_Init>:
 */

#include "my_lib/pid_controller.h"


void PID_Init(PID_HandleTypeDef* hpid){
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]

	// Init parameters
	hpid->P=  hpid->Init.P;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	611a      	str	r2, [r3, #16]
	hpid->I=  hpid->Init.I;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	615a      	str	r2, [r3, #20]
	hpid->D=  hpid->Init.D;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	619a      	str	r2, [r3, #24]
	hpid->Ts= hpid->Init.Ts;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	631a      	str	r2, [r3, #48]	; 0x30

	// Init Input contributes variables
	hpid->u_I= 0;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	625a      	str	r2, [r3, #36]	; 0x24
	hpid->u_P= 0;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	61da      	str	r2, [r3, #28]

	// Init Previous variables
	hpid->u_prev= 0;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <PID_Reset>:



// Reset input buffer and the contributes variables
void PID_Reset(PID_HandleTypeDef* hpid){
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]

	hpid->u_I= 0;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	625a      	str	r2, [r3, #36]	; 0x24
	hpid->u_P= 0;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	61da      	str	r2, [r3, #28]

	hpid->u_prev= 0;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	62da      	str	r2, [r3, #44]	; 0x2c



}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <PID_Control>:

float PID_Control(PID_HandleTypeDef* hpid, float target, float measure){
 800429a:	b480      	push	{r7}
 800429c:	b089      	sub	sp, #36	; 0x24
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80042a6:	edc7 0a01 	vstr	s1, [r7, #4]

	float e_prev,e_curr, Ts, u;

	// Time step
	Ts= hpid->Ts;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	61fb      	str	r3, [r7, #28]

	// Following error
	e_curr= target-measure;
 80042b0:	ed97 7a02 	vldr	s14, [r7, #8]
 80042b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80042b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042bc:	edc7 7a06 	vstr	s15, [r7, #24]
	e_prev= hpid->e_prev;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	617b      	str	r3, [r7, #20]

	// Proportional
	hpid->u_P= hpid->P*e_curr;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	ed93 7a04 	vldr	s14, [r3, #16]
 80042cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80042d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	edc3 7a07 	vstr	s15, [r3, #28]

	// Integral
	hpid->u_I += hpid->I*e_prev*Ts;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	ed93 7a08 	vldr	s14, [r3, #32]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	edd3 6a05 	vldr	s13, [r3, #20]
 80042e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80042ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80042ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80042f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	edc3 7a08 	vstr	s15, [r3, #32]

	// Derivative
	hpid->u_D = hpid->D*(e_curr-e_prev)/Ts;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	ed93 7a06 	vldr	s14, [r3, #24]
 8004306:	edd7 6a06 	vldr	s13, [r7, #24]
 800430a:	edd7 7a05 	vldr	s15, [r7, #20]
 800430e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004312:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004316:	ed97 7a07 	vldr	s14, [r7, #28]
 800431a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Input
	u= hpid->u_P + hpid->u_I + hpid->u_D;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	ed93 7a07 	vldr	s14, [r3, #28]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004330:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800433a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800433e:	edc7 7a04 	vstr	s15, [r7, #16]

	// Updating struct
	hpid->u_prev= u;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= e_curr;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	62da      	str	r2, [r3, #44]	; 0x2c

	return u;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	ee07 3a90 	vmov	s15, r3

}
 8004354:	eeb0 0a67 	vmov.f32	s0, s15
 8004358:	3724      	adds	r7, #36	; 0x24
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800439c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004368:	480d      	ldr	r0, [pc, #52]	; (80043a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800436a:	490e      	ldr	r1, [pc, #56]	; (80043a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800436c:	4a0e      	ldr	r2, [pc, #56]	; (80043a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800436e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004370:	e002      	b.n	8004378 <LoopCopyDataInit>

08004372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004376:	3304      	adds	r3, #4

08004378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800437a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800437c:	d3f9      	bcc.n	8004372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800437e:	4a0b      	ldr	r2, [pc, #44]	; (80043ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004380:	4c0b      	ldr	r4, [pc, #44]	; (80043b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004384:	e001      	b.n	800438a <LoopFillZerobss>

08004386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004388:	3204      	adds	r2, #4

0800438a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800438a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800438c:	d3fb      	bcc.n	8004386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800438e:	f7fd ffb3 	bl	80022f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004392:	f006 fb75 	bl	800aa80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004396:	f7fc fda5 	bl	8000ee4 <main>
  bx  lr    
 800439a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800439c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043a4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80043a8:	0800c220 	.word	0x0800c220
  ldr r2, =_sbss
 80043ac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80043b0:	2000515c 	.word	0x2000515c

080043b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043b4:	e7fe      	b.n	80043b4 <ADC_IRQHandler>
	...

080043b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043bc:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <HAL_Init+0x40>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0d      	ldr	r2, [pc, #52]	; (80043f8 <HAL_Init+0x40>)
 80043c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_Init+0x40>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a0a      	ldr	r2, [pc, #40]	; (80043f8 <HAL_Init+0x40>)
 80043ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043d4:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <HAL_Init+0x40>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a07      	ldr	r2, [pc, #28]	; (80043f8 <HAL_Init+0x40>)
 80043da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043e0:	2003      	movs	r0, #3
 80043e2:	f000 f937 	bl	8004654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043e6:	2000      	movs	r0, #0
 80043e8:	f7fd feb8 	bl	800215c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043ec:	f7fd fcba 	bl	8001d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40023c00 	.word	0x40023c00

080043fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <HAL_IncTick+0x20>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <HAL_IncTick+0x24>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4413      	add	r3, r2
 800440c:	4a04      	ldr	r2, [pc, #16]	; (8004420 <HAL_IncTick+0x24>)
 800440e:	6013      	str	r3, [r2, #0]
}
 8004410:	bf00      	nop
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000008 	.word	0x20000008
 8004420:	20005108 	.word	0x20005108

08004424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  return uwTick;
 8004428:	4b03      	ldr	r3, [pc, #12]	; (8004438 <HAL_GetTick+0x14>)
 800442a:	681b      	ldr	r3, [r3, #0]
}
 800442c:	4618      	mov	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20005108 	.word	0x20005108

0800443c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004444:	f7ff ffee 	bl	8004424 <HAL_GetTick>
 8004448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004454:	d005      	beq.n	8004462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004456:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <HAL_Delay+0x44>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4413      	add	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004462:	bf00      	nop
 8004464:	f7ff ffde 	bl	8004424 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	429a      	cmp	r2, r3
 8004472:	d8f7      	bhi.n	8004464 <HAL_Delay+0x28>
  {
  }
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20000008 	.word	0x20000008

08004484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004494:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044a0:	4013      	ands	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044b6:	4a04      	ldr	r2, [pc, #16]	; (80044c8 <__NVIC_SetPriorityGrouping+0x44>)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	60d3      	str	r3, [r2, #12]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	e000ed00 	.word	0xe000ed00

080044cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d0:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <__NVIC_GetPriorityGrouping+0x18>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	f003 0307 	and.w	r3, r3, #7
}
 80044da:	4618      	mov	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	db0b      	blt.n	8004512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	f003 021f 	and.w	r2, r3, #31
 8004500:	4907      	ldr	r1, [pc, #28]	; (8004520 <__NVIC_EnableIRQ+0x38>)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	2001      	movs	r0, #1
 800450a:	fa00 f202 	lsl.w	r2, r0, r2
 800450e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	e000e100 	.word	0xe000e100

08004524 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800452e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004532:	2b00      	cmp	r3, #0
 8004534:	db12      	blt.n	800455c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	f003 021f 	and.w	r2, r3, #31
 800453c:	490a      	ldr	r1, [pc, #40]	; (8004568 <__NVIC_DisableIRQ+0x44>)
 800453e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	2001      	movs	r0, #1
 8004546:	fa00 f202 	lsl.w	r2, r0, r2
 800454a:	3320      	adds	r3, #32
 800454c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004550:	f3bf 8f4f 	dsb	sy
}
 8004554:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004556:	f3bf 8f6f 	isb	sy
}
 800455a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	e000e100 	.word	0xe000e100

0800456c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	6039      	str	r1, [r7, #0]
 8004576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457c:	2b00      	cmp	r3, #0
 800457e:	db0a      	blt.n	8004596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	490c      	ldr	r1, [pc, #48]	; (80045b8 <__NVIC_SetPriority+0x4c>)
 8004586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458a:	0112      	lsls	r2, r2, #4
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	440b      	add	r3, r1
 8004590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004594:	e00a      	b.n	80045ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	4908      	ldr	r1, [pc, #32]	; (80045bc <__NVIC_SetPriority+0x50>)
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	3b04      	subs	r3, #4
 80045a4:	0112      	lsls	r2, r2, #4
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	440b      	add	r3, r1
 80045aa:	761a      	strb	r2, [r3, #24]
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	e000e100 	.word	0xe000e100
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b089      	sub	sp, #36	; 0x24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f1c3 0307 	rsb	r3, r3, #7
 80045da:	2b04      	cmp	r3, #4
 80045dc:	bf28      	it	cs
 80045de:	2304      	movcs	r3, #4
 80045e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3304      	adds	r3, #4
 80045e6:	2b06      	cmp	r3, #6
 80045e8:	d902      	bls.n	80045f0 <NVIC_EncodePriority+0x30>
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3b03      	subs	r3, #3
 80045ee:	e000      	b.n	80045f2 <NVIC_EncodePriority+0x32>
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43da      	mvns	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	401a      	ands	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004608:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	fa01 f303 	lsl.w	r3, r1, r3
 8004612:	43d9      	mvns	r1, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004618:	4313      	orrs	r3, r2
         );
}
 800461a:	4618      	mov	r0, r3
 800461c:	3724      	adds	r7, #36	; 0x24
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800462c:	f3bf 8f4f 	dsb	sy
}
 8004630:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <__NVIC_SystemReset+0x24>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800463a:	4904      	ldr	r1, [pc, #16]	; (800464c <__NVIC_SystemReset+0x24>)
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <__NVIC_SystemReset+0x28>)
 800463e:	4313      	orrs	r3, r2
 8004640:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004642:	f3bf 8f4f 	dsb	sy
}
 8004646:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004648:	bf00      	nop
 800464a:	e7fd      	b.n	8004648 <__NVIC_SystemReset+0x20>
 800464c:	e000ed00 	.word	0xe000ed00
 8004650:	05fa0004 	.word	0x05fa0004

08004654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff ff11 	bl	8004484 <__NVIC_SetPriorityGrouping>
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800466a:	b580      	push	{r7, lr}
 800466c:	b086      	sub	sp, #24
 800466e:	af00      	add	r7, sp, #0
 8004670:	4603      	mov	r3, r0
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
 8004676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800467c:	f7ff ff26 	bl	80044cc <__NVIC_GetPriorityGrouping>
 8004680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	6978      	ldr	r0, [r7, #20]
 8004688:	f7ff ff9a 	bl	80045c0 <NVIC_EncodePriority>
 800468c:	4602      	mov	r2, r0
 800468e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004692:	4611      	mov	r1, r2
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff ff69 	bl	800456c <__NVIC_SetPriority>
}
 800469a:	bf00      	nop
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	4603      	mov	r3, r0
 80046aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff ff19 	bl	80044e8 <__NVIC_EnableIRQ>
}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b082      	sub	sp, #8
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	4603      	mov	r3, r0
 80046c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff ff29 	bl	8004524 <__NVIC_DisableIRQ>
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80046de:	f7ff ffa3 	bl	8004628 <__NVIC_SystemReset>
	...

080046e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046f0:	f7ff fe98 	bl	8004424 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e099      	b.n	8004834 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004720:	e00f      	b.n	8004742 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004722:	f7ff fe7f 	bl	8004424 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b05      	cmp	r3, #5
 800472e:	d908      	bls.n	8004742 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2203      	movs	r2, #3
 800473a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e078      	b.n	8004834 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e8      	bne.n	8004722 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4b38      	ldr	r3, [pc, #224]	; (800483c <HAL_DMA_Init+0x158>)
 800475c:	4013      	ands	r3, r2
 800475e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800476e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800477a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	2b04      	cmp	r3, #4
 800479a:	d107      	bne.n	80047ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	4313      	orrs	r3, r2
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f023 0307 	bic.w	r3, r3, #7
 80047c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d117      	bne.n	8004806 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00e      	beq.n	8004806 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fa6f 	bl	8004ccc <DMA_CheckFifoParam>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2240      	movs	r2, #64	; 0x40
 80047f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004802:	2301      	movs	r3, #1
 8004804:	e016      	b.n	8004834 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fa26 	bl	8004c60 <DMA_CalcBaseAndBitshift>
 8004814:	4603      	mov	r3, r0
 8004816:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481c:	223f      	movs	r2, #63	; 0x3f
 800481e:	409a      	lsls	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	f010803f 	.word	0xf010803f

08004840 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004856:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_DMA_Start_IT+0x26>
 8004862:	2302      	movs	r3, #2
 8004864:	e040      	b.n	80048e8 <HAL_DMA_Start_IT+0xa8>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	d12f      	bne.n	80048da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2202      	movs	r2, #2
 800487e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f9b8 	bl	8004c04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004898:	223f      	movs	r2, #63	; 0x3f
 800489a:	409a      	lsls	r2, r3
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0216 	orr.w	r2, r2, #22
 80048ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d007      	beq.n	80048c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0208 	orr.w	r2, r2, #8
 80048c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	e005      	b.n	80048e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048e2:	2302      	movs	r3, #2
 80048e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048fc:	4b92      	ldr	r3, [pc, #584]	; (8004b48 <HAL_DMA_IRQHandler+0x258>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a92      	ldr	r2, [pc, #584]	; (8004b4c <HAL_DMA_IRQHandler+0x25c>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	0a9b      	lsrs	r3, r3, #10
 8004908:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491a:	2208      	movs	r2, #8
 800491c:	409a      	lsls	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4013      	ands	r3, r2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d01a      	beq.n	800495c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d013      	beq.n	800495c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0204 	bic.w	r2, r2, #4
 8004942:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004948:	2208      	movs	r2, #8
 800494a:	409a      	lsls	r2, r3
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	f043 0201 	orr.w	r2, r3, #1
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004960:	2201      	movs	r2, #1
 8004962:	409a      	lsls	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4013      	ands	r3, r2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d012      	beq.n	8004992 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00b      	beq.n	8004992 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497e:	2201      	movs	r2, #1
 8004980:	409a      	lsls	r2, r3
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498a:	f043 0202 	orr.w	r2, r3, #2
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004996:	2204      	movs	r2, #4
 8004998:	409a      	lsls	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4013      	ands	r3, r2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d012      	beq.n	80049c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00b      	beq.n	80049c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b4:	2204      	movs	r2, #4
 80049b6:	409a      	lsls	r2, r3
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c0:	f043 0204 	orr.w	r2, r3, #4
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049cc:	2210      	movs	r2, #16
 80049ce:	409a      	lsls	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d043      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d03c      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ea:	2210      	movs	r2, #16
 80049ec:	409a      	lsls	r2, r3
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d018      	beq.n	8004a32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d108      	bne.n	8004a20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d024      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	4798      	blx	r3
 8004a1e:	e01f      	b.n	8004a60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01b      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	4798      	blx	r3
 8004a30:	e016      	b.n	8004a60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d107      	bne.n	8004a50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0208 	bic.w	r2, r2, #8
 8004a4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a64:	2220      	movs	r2, #32
 8004a66:	409a      	lsls	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 808e 	beq.w	8004b8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8086 	beq.w	8004b8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a86:	2220      	movs	r2, #32
 8004a88:	409a      	lsls	r2, r3
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b05      	cmp	r3, #5
 8004a98:	d136      	bne.n	8004b08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0216 	bic.w	r2, r2, #22
 8004aa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695a      	ldr	r2, [r3, #20]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ab8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d103      	bne.n	8004aca <HAL_DMA_IRQHandler+0x1da>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0208 	bic.w	r2, r2, #8
 8004ad8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ade:	223f      	movs	r2, #63	; 0x3f
 8004ae0:	409a      	lsls	r2, r3
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d07d      	beq.n	8004bfa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	4798      	blx	r3
        }
        return;
 8004b06:	e078      	b.n	8004bfa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d01c      	beq.n	8004b50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d108      	bne.n	8004b36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d030      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	4798      	blx	r3
 8004b34:	e02b      	b.n	8004b8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d027      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4798      	blx	r3
 8004b46:	e022      	b.n	8004b8e <HAL_DMA_IRQHandler+0x29e>
 8004b48:	20000000 	.word	0x20000000
 8004b4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10f      	bne.n	8004b7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0210 	bic.w	r2, r2, #16
 8004b6c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d032      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d022      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2205      	movs	r2, #5
 8004ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0201 	bic.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d307      	bcc.n	8004bd6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f2      	bne.n	8004bba <HAL_DMA_IRQHandler+0x2ca>
 8004bd4:	e000      	b.n	8004bd8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004bd6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	4798      	blx	r3
 8004bf8:	e000      	b.n	8004bfc <HAL_DMA_IRQHandler+0x30c>
        return;
 8004bfa:	bf00      	nop
    }
  }
}
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop

08004c04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	d108      	bne.n	8004c44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c42:	e007      	b.n	8004c54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	60da      	str	r2, [r3, #12]
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	3b10      	subs	r3, #16
 8004c70:	4a14      	ldr	r2, [pc, #80]	; (8004cc4 <DMA_CalcBaseAndBitshift+0x64>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	091b      	lsrs	r3, r3, #4
 8004c78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c7a:	4a13      	ldr	r2, [pc, #76]	; (8004cc8 <DMA_CalcBaseAndBitshift+0x68>)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4413      	add	r3, r2
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d909      	bls.n	8004ca2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c96:	f023 0303 	bic.w	r3, r3, #3
 8004c9a:	1d1a      	adds	r2, r3, #4
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	659a      	str	r2, [r3, #88]	; 0x58
 8004ca0:	e007      	b.n	8004cb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004caa:	f023 0303 	bic.w	r3, r3, #3
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	aaaaaaab 	.word	0xaaaaaaab
 8004cc8:	0800bf28 	.word	0x0800bf28

08004ccc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d11f      	bne.n	8004d26 <DMA_CheckFifoParam+0x5a>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d856      	bhi.n	8004d9a <DMA_CheckFifoParam+0xce>
 8004cec:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <DMA_CheckFifoParam+0x28>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d05 	.word	0x08004d05
 8004cf8:	08004d17 	.word	0x08004d17
 8004cfc:	08004d05 	.word	0x08004d05
 8004d00:	08004d9b 	.word	0x08004d9b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d046      	beq.n	8004d9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d14:	e043      	b.n	8004d9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d1e:	d140      	bne.n	8004da2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d24:	e03d      	b.n	8004da2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d2e:	d121      	bne.n	8004d74 <DMA_CheckFifoParam+0xa8>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d837      	bhi.n	8004da6 <DMA_CheckFifoParam+0xda>
 8004d36:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <DMA_CheckFifoParam+0x70>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004d4d 	.word	0x08004d4d
 8004d40:	08004d53 	.word	0x08004d53
 8004d44:	08004d4d 	.word	0x08004d4d
 8004d48:	08004d65 	.word	0x08004d65
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d50:	e030      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d025      	beq.n	8004daa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d62:	e022      	b.n	8004daa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d6c:	d11f      	bne.n	8004dae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d72:	e01c      	b.n	8004dae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d903      	bls.n	8004d82 <DMA_CheckFifoParam+0xb6>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d003      	beq.n	8004d88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d80:	e018      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
      break;
 8004d86:	e015      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00e      	beq.n	8004db2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
      break;
 8004d98:	e00b      	b.n	8004db2 <DMA_CheckFifoParam+0xe6>
      break;
 8004d9a:	bf00      	nop
 8004d9c:	e00a      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;
 8004d9e:	bf00      	nop
 8004da0:	e008      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;
 8004da2:	bf00      	nop
 8004da4:	e006      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;
 8004da6:	bf00      	nop
 8004da8:	e004      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;
 8004daa:	bf00      	nop
 8004dac:	e002      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004dae:	bf00      	nop
 8004db0:	e000      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;
 8004db2:	bf00      	nop
    }
  } 
  
  return status; 
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop

08004dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b089      	sub	sp, #36	; 0x24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	e165      	b.n	80050ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004de0:	2201      	movs	r2, #1
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4013      	ands	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	f040 8154 	bne.w	80050a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d005      	beq.n	8004e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d130      	bne.n	8004e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	2203      	movs	r2, #3
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	43db      	mvns	r3, r3
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	f003 0201 	and.w	r2, r3, #1
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d017      	beq.n	8004eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	2203      	movs	r2, #3
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d123      	bne.n	8004f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	08da      	lsrs	r2, r3, #3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3208      	adds	r2, #8
 8004ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	220f      	movs	r2, #15
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	43db      	mvns	r3, r3
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	08da      	lsrs	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3208      	adds	r2, #8
 8004f02:	69b9      	ldr	r1, [r7, #24]
 8004f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	2203      	movs	r2, #3
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f003 0203 	and.w	r2, r3, #3
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80ae 	beq.w	80050a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	4b5d      	ldr	r3, [pc, #372]	; (80050c4 <HAL_GPIO_Init+0x300>)
 8004f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f52:	4a5c      	ldr	r2, [pc, #368]	; (80050c4 <HAL_GPIO_Init+0x300>)
 8004f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f58:	6453      	str	r3, [r2, #68]	; 0x44
 8004f5a:	4b5a      	ldr	r3, [pc, #360]	; (80050c4 <HAL_GPIO_Init+0x300>)
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f66:	4a58      	ldr	r2, [pc, #352]	; (80050c8 <HAL_GPIO_Init+0x304>)
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	089b      	lsrs	r3, r3, #2
 8004f6c:	3302      	adds	r3, #2
 8004f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	220f      	movs	r2, #15
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	43db      	mvns	r3, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4013      	ands	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a4f      	ldr	r2, [pc, #316]	; (80050cc <HAL_GPIO_Init+0x308>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d025      	beq.n	8004fde <HAL_GPIO_Init+0x21a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a4e      	ldr	r2, [pc, #312]	; (80050d0 <HAL_GPIO_Init+0x30c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d01f      	beq.n	8004fda <HAL_GPIO_Init+0x216>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a4d      	ldr	r2, [pc, #308]	; (80050d4 <HAL_GPIO_Init+0x310>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d019      	beq.n	8004fd6 <HAL_GPIO_Init+0x212>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a4c      	ldr	r2, [pc, #304]	; (80050d8 <HAL_GPIO_Init+0x314>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_GPIO_Init+0x20e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a4b      	ldr	r2, [pc, #300]	; (80050dc <HAL_GPIO_Init+0x318>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00d      	beq.n	8004fce <HAL_GPIO_Init+0x20a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a4a      	ldr	r2, [pc, #296]	; (80050e0 <HAL_GPIO_Init+0x31c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <HAL_GPIO_Init+0x206>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a49      	ldr	r2, [pc, #292]	; (80050e4 <HAL_GPIO_Init+0x320>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <HAL_GPIO_Init+0x202>
 8004fc2:	2306      	movs	r3, #6
 8004fc4:	e00c      	b.n	8004fe0 <HAL_GPIO_Init+0x21c>
 8004fc6:	2307      	movs	r3, #7
 8004fc8:	e00a      	b.n	8004fe0 <HAL_GPIO_Init+0x21c>
 8004fca:	2305      	movs	r3, #5
 8004fcc:	e008      	b.n	8004fe0 <HAL_GPIO_Init+0x21c>
 8004fce:	2304      	movs	r3, #4
 8004fd0:	e006      	b.n	8004fe0 <HAL_GPIO_Init+0x21c>
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e004      	b.n	8004fe0 <HAL_GPIO_Init+0x21c>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e002      	b.n	8004fe0 <HAL_GPIO_Init+0x21c>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <HAL_GPIO_Init+0x21c>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	f002 0203 	and.w	r2, r2, #3
 8004fe6:	0092      	lsls	r2, r2, #2
 8004fe8:	4093      	lsls	r3, r2
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ff0:	4935      	ldr	r1, [pc, #212]	; (80050c8 <HAL_GPIO_Init+0x304>)
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	089b      	lsrs	r3, r3, #2
 8004ff6:	3302      	adds	r3, #2
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ffe:	4b3a      	ldr	r3, [pc, #232]	; (80050e8 <HAL_GPIO_Init+0x324>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	43db      	mvns	r3, r3
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	4013      	ands	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005022:	4a31      	ldr	r2, [pc, #196]	; (80050e8 <HAL_GPIO_Init+0x324>)
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005028:	4b2f      	ldr	r3, [pc, #188]	; (80050e8 <HAL_GPIO_Init+0x324>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	43db      	mvns	r3, r3
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4013      	ands	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800504c:	4a26      	ldr	r2, [pc, #152]	; (80050e8 <HAL_GPIO_Init+0x324>)
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005052:	4b25      	ldr	r3, [pc, #148]	; (80050e8 <HAL_GPIO_Init+0x324>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	43db      	mvns	r3, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	4013      	ands	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005076:	4a1c      	ldr	r2, [pc, #112]	; (80050e8 <HAL_GPIO_Init+0x324>)
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800507c:	4b1a      	ldr	r3, [pc, #104]	; (80050e8 <HAL_GPIO_Init+0x324>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	43db      	mvns	r3, r3
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4013      	ands	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050a0:	4a11      	ldr	r2, [pc, #68]	; (80050e8 <HAL_GPIO_Init+0x324>)
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	3301      	adds	r3, #1
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	2b0f      	cmp	r3, #15
 80050b0:	f67f ae96 	bls.w	8004de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop
 80050b8:	3724      	adds	r7, #36	; 0x24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40023800 	.word	0x40023800
 80050c8:	40013800 	.word	0x40013800
 80050cc:	40020000 	.word	0x40020000
 80050d0:	40020400 	.word	0x40020400
 80050d4:	40020800 	.word	0x40020800
 80050d8:	40020c00 	.word	0x40020c00
 80050dc:	40021000 	.word	0x40021000
 80050e0:	40021400 	.word	0x40021400
 80050e4:	40021800 	.word	0x40021800
 80050e8:	40013c00 	.word	0x40013c00

080050ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	887b      	ldrh	r3, [r7, #2]
 80050fe:	4013      	ands	r3, r2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005104:	2301      	movs	r3, #1
 8005106:	73fb      	strb	r3, [r7, #15]
 8005108:	e001      	b.n	800510e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800510e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	807b      	strh	r3, [r7, #2]
 8005128:	4613      	mov	r3, r2
 800512a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800512c:	787b      	ldrb	r3, [r7, #1]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005132:	887a      	ldrh	r2, [r7, #2]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005138:	e003      	b.n	8005142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800513a:	887b      	ldrh	r3, [r7, #2]
 800513c:	041a      	lsls	r2, r3, #16
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	619a      	str	r2, [r3, #24]
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	460b      	mov	r3, r1
 8005158:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005160:	887a      	ldrh	r2, [r7, #2]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4013      	ands	r3, r2
 8005166:	041a      	lsls	r2, r3, #16
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	43d9      	mvns	r1, r3
 800516c:	887b      	ldrh	r3, [r7, #2]
 800516e:	400b      	ands	r3, r1
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	619a      	str	r2, [r3, #24]
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e0cc      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005198:	4b68      	ldr	r3, [pc, #416]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d90c      	bls.n	80051c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a6:	4b65      	ldr	r3, [pc, #404]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ae:	4b63      	ldr	r3, [pc, #396]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0b8      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d020      	beq.n	800520e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d8:	4b59      	ldr	r3, [pc, #356]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	4a58      	ldr	r2, [pc, #352]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051f0:	4b53      	ldr	r3, [pc, #332]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4a52      	ldr	r2, [pc, #328]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051fc:	4b50      	ldr	r3, [pc, #320]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	494d      	ldr	r1, [pc, #308]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	4313      	orrs	r3, r2
 800520c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d044      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d107      	bne.n	8005232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005222:	4b47      	ldr	r3, [pc, #284]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d119      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e07f      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d003      	beq.n	8005242 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800523e:	2b03      	cmp	r3, #3
 8005240:	d107      	bne.n	8005252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005242:	4b3f      	ldr	r3, [pc, #252]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e06f      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005252:	4b3b      	ldr	r3, [pc, #236]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e067      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005262:	4b37      	ldr	r3, [pc, #220]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f023 0203 	bic.w	r2, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	4934      	ldr	r1, [pc, #208]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005270:	4313      	orrs	r3, r2
 8005272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005274:	f7ff f8d6 	bl	8004424 <HAL_GetTick>
 8005278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527a:	e00a      	b.n	8005292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800527c:	f7ff f8d2 	bl	8004424 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f241 3288 	movw	r2, #5000	; 0x1388
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e04f      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005292:	4b2b      	ldr	r3, [pc, #172]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 020c 	and.w	r2, r3, #12
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d1eb      	bne.n	800527c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052a4:	4b25      	ldr	r3, [pc, #148]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d20c      	bcs.n	80052cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b2:	4b22      	ldr	r3, [pc, #136]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ba:	4b20      	ldr	r3, [pc, #128]	; (800533c <HAL_RCC_ClockConfig+0x1b8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d001      	beq.n	80052cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e032      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d8:	4b19      	ldr	r3, [pc, #100]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4916      	ldr	r1, [pc, #88]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052f6:	4b12      	ldr	r3, [pc, #72]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	490e      	ldr	r1, [pc, #56]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005306:	4313      	orrs	r3, r2
 8005308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800530a:	f000 f887 	bl	800541c <HAL_RCC_GetSysClockFreq>
 800530e:	4602      	mov	r2, r0
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	490a      	ldr	r1, [pc, #40]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 800531c:	5ccb      	ldrb	r3, [r1, r3]
 800531e:	fa22 f303 	lsr.w	r3, r2, r3
 8005322:	4a09      	ldr	r2, [pc, #36]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005326:	4b09      	ldr	r3, [pc, #36]	; (800534c <HAL_RCC_ClockConfig+0x1c8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7fc ff16 	bl	800215c <HAL_InitTick>

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40023c00 	.word	0x40023c00
 8005340:	40023800 	.word	0x40023800
 8005344:	0800bf10 	.word	0x0800bf10
 8005348:	20000000 	.word	0x20000000
 800534c:	20000004 	.word	0x20000004

08005350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005354:	4b03      	ldr	r3, [pc, #12]	; (8005364 <HAL_RCC_GetHCLKFreq+0x14>)
 8005356:	681b      	ldr	r3, [r3, #0]
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000000 	.word	0x20000000

08005368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800536c:	f7ff fff0 	bl	8005350 <HAL_RCC_GetHCLKFreq>
 8005370:	4602      	mov	r2, r0
 8005372:	4b05      	ldr	r3, [pc, #20]	; (8005388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	0a9b      	lsrs	r3, r3, #10
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	4903      	ldr	r1, [pc, #12]	; (800538c <HAL_RCC_GetPCLK1Freq+0x24>)
 800537e:	5ccb      	ldrb	r3, [r1, r3]
 8005380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005384:	4618      	mov	r0, r3
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40023800 	.word	0x40023800
 800538c:	0800bf20 	.word	0x0800bf20

08005390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005394:	f7ff ffdc 	bl	8005350 <HAL_RCC_GetHCLKFreq>
 8005398:	4602      	mov	r2, r0
 800539a:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	0b5b      	lsrs	r3, r3, #13
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	4903      	ldr	r1, [pc, #12]	; (80053b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053a6:	5ccb      	ldrb	r3, [r1, r3]
 80053a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40023800 	.word	0x40023800
 80053b4:	0800bf20 	.word	0x0800bf20

080053b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	220f      	movs	r2, #15
 80053c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053c8:	4b12      	ldr	r3, [pc, #72]	; (8005414 <HAL_RCC_GetClockConfig+0x5c>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 0203 	and.w	r2, r3, #3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053d4:	4b0f      	ldr	r3, [pc, #60]	; (8005414 <HAL_RCC_GetClockConfig+0x5c>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053e0:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <HAL_RCC_GetClockConfig+0x5c>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053ec:	4b09      	ldr	r3, [pc, #36]	; (8005414 <HAL_RCC_GetClockConfig+0x5c>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	08db      	lsrs	r3, r3, #3
 80053f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053fa:	4b07      	ldr	r3, [pc, #28]	; (8005418 <HAL_RCC_GetClockConfig+0x60>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 020f 	and.w	r2, r3, #15
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	601a      	str	r2, [r3, #0]
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40023800 	.word	0x40023800
 8005418:	40023c00 	.word	0x40023c00

0800541c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800541c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005420:	b088      	sub	sp, #32
 8005422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005438:	4bce      	ldr	r3, [pc, #824]	; (8005774 <HAL_RCC_GetSysClockFreq+0x358>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 030c 	and.w	r3, r3, #12
 8005440:	2b0c      	cmp	r3, #12
 8005442:	f200 818d 	bhi.w	8005760 <HAL_RCC_GetSysClockFreq+0x344>
 8005446:	a201      	add	r2, pc, #4	; (adr r2, 800544c <HAL_RCC_GetSysClockFreq+0x30>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	08005481 	.word	0x08005481
 8005450:	08005761 	.word	0x08005761
 8005454:	08005761 	.word	0x08005761
 8005458:	08005761 	.word	0x08005761
 800545c:	08005487 	.word	0x08005487
 8005460:	08005761 	.word	0x08005761
 8005464:	08005761 	.word	0x08005761
 8005468:	08005761 	.word	0x08005761
 800546c:	0800548d 	.word	0x0800548d
 8005470:	08005761 	.word	0x08005761
 8005474:	08005761 	.word	0x08005761
 8005478:	08005761 	.word	0x08005761
 800547c:	08005601 	.word	0x08005601
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005480:	4bbd      	ldr	r3, [pc, #756]	; (8005778 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005482:	61bb      	str	r3, [r7, #24]
       break;
 8005484:	e16f      	b.n	8005766 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005486:	4bbd      	ldr	r3, [pc, #756]	; (800577c <HAL_RCC_GetSysClockFreq+0x360>)
 8005488:	61bb      	str	r3, [r7, #24]
      break;
 800548a:	e16c      	b.n	8005766 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800548c:	4bb9      	ldr	r3, [pc, #740]	; (8005774 <HAL_RCC_GetSysClockFreq+0x358>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005494:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005496:	4bb7      	ldr	r3, [pc, #732]	; (8005774 <HAL_RCC_GetSysClockFreq+0x358>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d053      	beq.n	800554a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054a2:	4bb4      	ldr	r3, [pc, #720]	; (8005774 <HAL_RCC_GetSysClockFreq+0x358>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	099b      	lsrs	r3, r3, #6
 80054a8:	461a      	mov	r2, r3
 80054aa:	f04f 0300 	mov.w	r3, #0
 80054ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054b2:	f04f 0100 	mov.w	r1, #0
 80054b6:	ea02 0400 	and.w	r4, r2, r0
 80054ba:	603c      	str	r4, [r7, #0]
 80054bc:	400b      	ands	r3, r1
 80054be:	607b      	str	r3, [r7, #4]
 80054c0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054c4:	4620      	mov	r0, r4
 80054c6:	4629      	mov	r1, r5
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	014b      	lsls	r3, r1, #5
 80054d2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054d6:	0142      	lsls	r2, r0, #5
 80054d8:	4610      	mov	r0, r2
 80054da:	4619      	mov	r1, r3
 80054dc:	4623      	mov	r3, r4
 80054de:	1ac0      	subs	r0, r0, r3
 80054e0:	462b      	mov	r3, r5
 80054e2:	eb61 0103 	sbc.w	r1, r1, r3
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	018b      	lsls	r3, r1, #6
 80054f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80054f4:	0182      	lsls	r2, r0, #6
 80054f6:	1a12      	subs	r2, r2, r0
 80054f8:	eb63 0301 	sbc.w	r3, r3, r1
 80054fc:	f04f 0000 	mov.w	r0, #0
 8005500:	f04f 0100 	mov.w	r1, #0
 8005504:	00d9      	lsls	r1, r3, #3
 8005506:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800550a:	00d0      	lsls	r0, r2, #3
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4621      	mov	r1, r4
 8005512:	1852      	adds	r2, r2, r1
 8005514:	4629      	mov	r1, r5
 8005516:	eb43 0101 	adc.w	r1, r3, r1
 800551a:	460b      	mov	r3, r1
 800551c:	f04f 0000 	mov.w	r0, #0
 8005520:	f04f 0100 	mov.w	r1, #0
 8005524:	0259      	lsls	r1, r3, #9
 8005526:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800552a:	0250      	lsls	r0, r2, #9
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4610      	mov	r0, r2
 8005532:	4619      	mov	r1, r3
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	461a      	mov	r2, r3
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	f7fb fb56 	bl	8000bec <__aeabi_uldivmod>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4613      	mov	r3, r2
 8005546:	61fb      	str	r3, [r7, #28]
 8005548:	e04c      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800554a:	4b8a      	ldr	r3, [pc, #552]	; (8005774 <HAL_RCC_GetSysClockFreq+0x358>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	099b      	lsrs	r3, r3, #6
 8005550:	461a      	mov	r2, r3
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	f240 10ff 	movw	r0, #511	; 0x1ff
 800555a:	f04f 0100 	mov.w	r1, #0
 800555e:	ea02 0a00 	and.w	sl, r2, r0
 8005562:	ea03 0b01 	and.w	fp, r3, r1
 8005566:	4650      	mov	r0, sl
 8005568:	4659      	mov	r1, fp
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	014b      	lsls	r3, r1, #5
 8005574:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005578:	0142      	lsls	r2, r0, #5
 800557a:	4610      	mov	r0, r2
 800557c:	4619      	mov	r1, r3
 800557e:	ebb0 000a 	subs.w	r0, r0, sl
 8005582:	eb61 010b 	sbc.w	r1, r1, fp
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	018b      	lsls	r3, r1, #6
 8005590:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005594:	0182      	lsls	r2, r0, #6
 8005596:	1a12      	subs	r2, r2, r0
 8005598:	eb63 0301 	sbc.w	r3, r3, r1
 800559c:	f04f 0000 	mov.w	r0, #0
 80055a0:	f04f 0100 	mov.w	r1, #0
 80055a4:	00d9      	lsls	r1, r3, #3
 80055a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055aa:	00d0      	lsls	r0, r2, #3
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	eb12 020a 	adds.w	r2, r2, sl
 80055b4:	eb43 030b 	adc.w	r3, r3, fp
 80055b8:	f04f 0000 	mov.w	r0, #0
 80055bc:	f04f 0100 	mov.w	r1, #0
 80055c0:	0299      	lsls	r1, r3, #10
 80055c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055c6:	0290      	lsls	r0, r2, #10
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4610      	mov	r0, r2
 80055ce:	4619      	mov	r1, r3
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	461a      	mov	r2, r3
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	f7fb fb08 	bl	8000bec <__aeabi_uldivmod>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4613      	mov	r3, r2
 80055e2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055e4:	4b63      	ldr	r3, [pc, #396]	; (8005774 <HAL_RCC_GetSysClockFreq+0x358>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	0c1b      	lsrs	r3, r3, #16
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	3301      	adds	r3, #1
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80055f4:	69fa      	ldr	r2, [r7, #28]
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fc:	61bb      	str	r3, [r7, #24]
      break;
 80055fe:	e0b2      	b.n	8005766 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005600:	4b5c      	ldr	r3, [pc, #368]	; (8005774 <HAL_RCC_GetSysClockFreq+0x358>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005608:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800560a:	4b5a      	ldr	r3, [pc, #360]	; (8005774 <HAL_RCC_GetSysClockFreq+0x358>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d04d      	beq.n	80056b2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005616:	4b57      	ldr	r3, [pc, #348]	; (8005774 <HAL_RCC_GetSysClockFreq+0x358>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	099b      	lsrs	r3, r3, #6
 800561c:	461a      	mov	r2, r3
 800561e:	f04f 0300 	mov.w	r3, #0
 8005622:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005626:	f04f 0100 	mov.w	r1, #0
 800562a:	ea02 0800 	and.w	r8, r2, r0
 800562e:	ea03 0901 	and.w	r9, r3, r1
 8005632:	4640      	mov	r0, r8
 8005634:	4649      	mov	r1, r9
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	014b      	lsls	r3, r1, #5
 8005640:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005644:	0142      	lsls	r2, r0, #5
 8005646:	4610      	mov	r0, r2
 8005648:	4619      	mov	r1, r3
 800564a:	ebb0 0008 	subs.w	r0, r0, r8
 800564e:	eb61 0109 	sbc.w	r1, r1, r9
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	018b      	lsls	r3, r1, #6
 800565c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005660:	0182      	lsls	r2, r0, #6
 8005662:	1a12      	subs	r2, r2, r0
 8005664:	eb63 0301 	sbc.w	r3, r3, r1
 8005668:	f04f 0000 	mov.w	r0, #0
 800566c:	f04f 0100 	mov.w	r1, #0
 8005670:	00d9      	lsls	r1, r3, #3
 8005672:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005676:	00d0      	lsls	r0, r2, #3
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	eb12 0208 	adds.w	r2, r2, r8
 8005680:	eb43 0309 	adc.w	r3, r3, r9
 8005684:	f04f 0000 	mov.w	r0, #0
 8005688:	f04f 0100 	mov.w	r1, #0
 800568c:	0259      	lsls	r1, r3, #9
 800568e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005692:	0250      	lsls	r0, r2, #9
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	4610      	mov	r0, r2
 800569a:	4619      	mov	r1, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	461a      	mov	r2, r3
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	f7fb faa2 	bl	8000bec <__aeabi_uldivmod>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4613      	mov	r3, r2
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	e04a      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056b2:	4b30      	ldr	r3, [pc, #192]	; (8005774 <HAL_RCC_GetSysClockFreq+0x358>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	099b      	lsrs	r3, r3, #6
 80056b8:	461a      	mov	r2, r3
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80056c2:	f04f 0100 	mov.w	r1, #0
 80056c6:	ea02 0400 	and.w	r4, r2, r0
 80056ca:	ea03 0501 	and.w	r5, r3, r1
 80056ce:	4620      	mov	r0, r4
 80056d0:	4629      	mov	r1, r5
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	014b      	lsls	r3, r1, #5
 80056dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80056e0:	0142      	lsls	r2, r0, #5
 80056e2:	4610      	mov	r0, r2
 80056e4:	4619      	mov	r1, r3
 80056e6:	1b00      	subs	r0, r0, r4
 80056e8:	eb61 0105 	sbc.w	r1, r1, r5
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	018b      	lsls	r3, r1, #6
 80056f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80056fa:	0182      	lsls	r2, r0, #6
 80056fc:	1a12      	subs	r2, r2, r0
 80056fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005702:	f04f 0000 	mov.w	r0, #0
 8005706:	f04f 0100 	mov.w	r1, #0
 800570a:	00d9      	lsls	r1, r3, #3
 800570c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005710:	00d0      	lsls	r0, r2, #3
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	1912      	adds	r2, r2, r4
 8005718:	eb45 0303 	adc.w	r3, r5, r3
 800571c:	f04f 0000 	mov.w	r0, #0
 8005720:	f04f 0100 	mov.w	r1, #0
 8005724:	0299      	lsls	r1, r3, #10
 8005726:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800572a:	0290      	lsls	r0, r2, #10
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4610      	mov	r0, r2
 8005732:	4619      	mov	r1, r3
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	461a      	mov	r2, r3
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	f7fb fa56 	bl	8000bec <__aeabi_uldivmod>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4613      	mov	r3, r2
 8005746:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005748:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <HAL_RCC_GetSysClockFreq+0x358>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	0f1b      	lsrs	r3, r3, #28
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	fbb2 f3f3 	udiv	r3, r2, r3
 800575c:	61bb      	str	r3, [r7, #24]
      break;
 800575e:	e002      	b.n	8005766 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005762:	61bb      	str	r3, [r7, #24]
      break;
 8005764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005766:	69bb      	ldr	r3, [r7, #24]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3720      	adds	r7, #32
 800576c:	46bd      	mov	sp, r7
 800576e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005772:	bf00      	nop
 8005774:	40023800 	.word	0x40023800
 8005778:	00f42400 	.word	0x00f42400
 800577c:	007a1200 	.word	0x007a1200

08005780 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e28d      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 8083 	beq.w	80058a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80057a0:	4b94      	ldr	r3, [pc, #592]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 030c 	and.w	r3, r3, #12
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d019      	beq.n	80057e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057ac:	4b91      	ldr	r3, [pc, #580]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d106      	bne.n	80057c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057b8:	4b8e      	ldr	r3, [pc, #568]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057c4:	d00c      	beq.n	80057e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057c6:	4b8b      	ldr	r3, [pc, #556]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057ce:	2b0c      	cmp	r3, #12
 80057d0:	d112      	bne.n	80057f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057d2:	4b88      	ldr	r3, [pc, #544]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057de:	d10b      	bne.n	80057f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e0:	4b84      	ldr	r3, [pc, #528]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d05b      	beq.n	80058a4 <HAL_RCC_OscConfig+0x124>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d157      	bne.n	80058a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e25a      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005800:	d106      	bne.n	8005810 <HAL_RCC_OscConfig+0x90>
 8005802:	4b7c      	ldr	r3, [pc, #496]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a7b      	ldr	r2, [pc, #492]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 8005808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	e01d      	b.n	800584c <HAL_RCC_OscConfig+0xcc>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005818:	d10c      	bne.n	8005834 <HAL_RCC_OscConfig+0xb4>
 800581a:	4b76      	ldr	r3, [pc, #472]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a75      	ldr	r2, [pc, #468]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 8005820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	4b73      	ldr	r3, [pc, #460]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a72      	ldr	r2, [pc, #456]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 800582c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	e00b      	b.n	800584c <HAL_RCC_OscConfig+0xcc>
 8005834:	4b6f      	ldr	r3, [pc, #444]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a6e      	ldr	r2, [pc, #440]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 800583a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	4b6c      	ldr	r3, [pc, #432]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a6b      	ldr	r2, [pc, #428]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 8005846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800584a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d013      	beq.n	800587c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005854:	f7fe fde6 	bl	8004424 <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800585c:	f7fe fde2 	bl	8004424 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b64      	cmp	r3, #100	; 0x64
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e21f      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586e:	4b61      	ldr	r3, [pc, #388]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0f0      	beq.n	800585c <HAL_RCC_OscConfig+0xdc>
 800587a:	e014      	b.n	80058a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587c:	f7fe fdd2 	bl	8004424 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005884:	f7fe fdce 	bl	8004424 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b64      	cmp	r3, #100	; 0x64
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e20b      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005896:	4b57      	ldr	r3, [pc, #348]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1f0      	bne.n	8005884 <HAL_RCC_OscConfig+0x104>
 80058a2:	e000      	b.n	80058a6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d06f      	beq.n	8005992 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80058b2:	4b50      	ldr	r3, [pc, #320]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 030c 	and.w	r3, r3, #12
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d017      	beq.n	80058ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058be:	4b4d      	ldr	r3, [pc, #308]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d105      	bne.n	80058d6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058ca:	4b4a      	ldr	r3, [pc, #296]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00b      	beq.n	80058ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058d6:	4b47      	ldr	r3, [pc, #284]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058de:	2b0c      	cmp	r3, #12
 80058e0:	d11c      	bne.n	800591c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058e2:	4b44      	ldr	r3, [pc, #272]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d116      	bne.n	800591c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ee:	4b41      	ldr	r3, [pc, #260]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <HAL_RCC_OscConfig+0x186>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d001      	beq.n	8005906 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e1d3      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005906:	4b3b      	ldr	r3, [pc, #236]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	4937      	ldr	r1, [pc, #220]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 8005916:	4313      	orrs	r3, r2
 8005918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800591a:	e03a      	b.n	8005992 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d020      	beq.n	8005966 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005924:	4b34      	ldr	r3, [pc, #208]	; (80059f8 <HAL_RCC_OscConfig+0x278>)
 8005926:	2201      	movs	r2, #1
 8005928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592a:	f7fe fd7b 	bl	8004424 <HAL_GetTick>
 800592e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005930:	e008      	b.n	8005944 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005932:	f7fe fd77 	bl	8004424 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d901      	bls.n	8005944 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e1b4      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005944:	4b2b      	ldr	r3, [pc, #172]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0f0      	beq.n	8005932 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005950:	4b28      	ldr	r3, [pc, #160]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	4925      	ldr	r1, [pc, #148]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 8005960:	4313      	orrs	r3, r2
 8005962:	600b      	str	r3, [r1, #0]
 8005964:	e015      	b.n	8005992 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005966:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <HAL_RCC_OscConfig+0x278>)
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596c:	f7fe fd5a 	bl	8004424 <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005972:	e008      	b.n	8005986 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005974:	f7fe fd56 	bl	8004424 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e193      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005986:	4b1b      	ldr	r3, [pc, #108]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1f0      	bne.n	8005974 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0308 	and.w	r3, r3, #8
 800599a:	2b00      	cmp	r3, #0
 800599c:	d036      	beq.n	8005a0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d016      	beq.n	80059d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059a6:	4b15      	ldr	r3, [pc, #84]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 80059a8:	2201      	movs	r2, #1
 80059aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ac:	f7fe fd3a 	bl	8004424 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059b4:	f7fe fd36 	bl	8004424 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e173      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c6:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <HAL_RCC_OscConfig+0x274>)
 80059c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0f0      	beq.n	80059b4 <HAL_RCC_OscConfig+0x234>
 80059d2:	e01b      	b.n	8005a0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059d4:	4b09      	ldr	r3, [pc, #36]	; (80059fc <HAL_RCC_OscConfig+0x27c>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059da:	f7fe fd23 	bl	8004424 <HAL_GetTick>
 80059de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059e0:	e00e      	b.n	8005a00 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059e2:	f7fe fd1f 	bl	8004424 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d907      	bls.n	8005a00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e15c      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
 80059f4:	40023800 	.word	0x40023800
 80059f8:	42470000 	.word	0x42470000
 80059fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a00:	4b8a      	ldr	r3, [pc, #552]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1ea      	bne.n	80059e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 8097 	beq.w	8005b48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a1e:	4b83      	ldr	r3, [pc, #524]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10f      	bne.n	8005a4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60bb      	str	r3, [r7, #8]
 8005a2e:	4b7f      	ldr	r3, [pc, #508]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	4a7e      	ldr	r2, [pc, #504]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a38:	6413      	str	r3, [r2, #64]	; 0x40
 8005a3a:	4b7c      	ldr	r3, [pc, #496]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a42:	60bb      	str	r3, [r7, #8]
 8005a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a46:	2301      	movs	r3, #1
 8005a48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a4a:	4b79      	ldr	r3, [pc, #484]	; (8005c30 <HAL_RCC_OscConfig+0x4b0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d118      	bne.n	8005a88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a56:	4b76      	ldr	r3, [pc, #472]	; (8005c30 <HAL_RCC_OscConfig+0x4b0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a75      	ldr	r2, [pc, #468]	; (8005c30 <HAL_RCC_OscConfig+0x4b0>)
 8005a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a62:	f7fe fcdf 	bl	8004424 <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a6a:	f7fe fcdb 	bl	8004424 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e118      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7c:	4b6c      	ldr	r3, [pc, #432]	; (8005c30 <HAL_RCC_OscConfig+0x4b0>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d0f0      	beq.n	8005a6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d106      	bne.n	8005a9e <HAL_RCC_OscConfig+0x31e>
 8005a90:	4b66      	ldr	r3, [pc, #408]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a94:	4a65      	ldr	r2, [pc, #404]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005a96:	f043 0301 	orr.w	r3, r3, #1
 8005a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a9c:	e01c      	b.n	8005ad8 <HAL_RCC_OscConfig+0x358>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2b05      	cmp	r3, #5
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x340>
 8005aa6:	4b61      	ldr	r3, [pc, #388]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aaa:	4a60      	ldr	r2, [pc, #384]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005aac:	f043 0304 	orr.w	r3, r3, #4
 8005ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab2:	4b5e      	ldr	r3, [pc, #376]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	4a5d      	ldr	r2, [pc, #372]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005ab8:	f043 0301 	orr.w	r3, r3, #1
 8005abc:	6713      	str	r3, [r2, #112]	; 0x70
 8005abe:	e00b      	b.n	8005ad8 <HAL_RCC_OscConfig+0x358>
 8005ac0:	4b5a      	ldr	r3, [pc, #360]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac4:	4a59      	ldr	r2, [pc, #356]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005ac6:	f023 0301 	bic.w	r3, r3, #1
 8005aca:	6713      	str	r3, [r2, #112]	; 0x70
 8005acc:	4b57      	ldr	r3, [pc, #348]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad0:	4a56      	ldr	r2, [pc, #344]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005ad2:	f023 0304 	bic.w	r3, r3, #4
 8005ad6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d015      	beq.n	8005b0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae0:	f7fe fca0 	bl	8004424 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae6:	e00a      	b.n	8005afe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ae8:	f7fe fc9c 	bl	8004424 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e0d7      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005afe:	4b4b      	ldr	r3, [pc, #300]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0ee      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x368>
 8005b0a:	e014      	b.n	8005b36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0c:	f7fe fc8a 	bl	8004424 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b12:	e00a      	b.n	8005b2a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b14:	f7fe fc86 	bl	8004424 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e0c1      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b2a:	4b40      	ldr	r3, [pc, #256]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1ee      	bne.n	8005b14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d105      	bne.n	8005b48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b3c:	4b3b      	ldr	r3, [pc, #236]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	4a3a      	ldr	r2, [pc, #232]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 80ad 	beq.w	8005cac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b52:	4b36      	ldr	r3, [pc, #216]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 030c 	and.w	r3, r3, #12
 8005b5a:	2b08      	cmp	r3, #8
 8005b5c:	d060      	beq.n	8005c20 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d145      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b66:	4b33      	ldr	r3, [pc, #204]	; (8005c34 <HAL_RCC_OscConfig+0x4b4>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6c:	f7fe fc5a 	bl	8004424 <HAL_GetTick>
 8005b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b74:	f7fe fc56 	bl	8004424 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e093      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b86:	4b29      	ldr	r3, [pc, #164]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1f0      	bne.n	8005b74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69da      	ldr	r2, [r3, #28]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	019b      	lsls	r3, r3, #6
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	3b01      	subs	r3, #1
 8005bac:	041b      	lsls	r3, r3, #16
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	061b      	lsls	r3, r3, #24
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	071b      	lsls	r3, r3, #28
 8005bbe:	491b      	ldr	r1, [pc, #108]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bc4:	4b1b      	ldr	r3, [pc, #108]	; (8005c34 <HAL_RCC_OscConfig+0x4b4>)
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bca:	f7fe fc2b 	bl	8004424 <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bd2:	f7fe fc27 	bl	8004424 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e064      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be4:	4b11      	ldr	r3, [pc, #68]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0f0      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x452>
 8005bf0:	e05c      	b.n	8005cac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bf2:	4b10      	ldr	r3, [pc, #64]	; (8005c34 <HAL_RCC_OscConfig+0x4b4>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf8:	f7fe fc14 	bl	8004424 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c00:	f7fe fc10 	bl	8004424 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e04d      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c12:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <HAL_RCC_OscConfig+0x4ac>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f0      	bne.n	8005c00 <HAL_RCC_OscConfig+0x480>
 8005c1e:	e045      	b.n	8005cac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d107      	bne.n	8005c38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e040      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
 8005c2c:	40023800 	.word	0x40023800
 8005c30:	40007000 	.word	0x40007000
 8005c34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c38:	4b1f      	ldr	r3, [pc, #124]	; (8005cb8 <HAL_RCC_OscConfig+0x538>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d030      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d129      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d122      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c68:	4013      	ands	r3, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d119      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	3b01      	subs	r3, #1
 8005c82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d10f      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d107      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40023800 	.word	0x40023800

08005cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e04c      	b.n	8005d68 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d111      	bne.n	8005cfe <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f001 f968 	bl	8006fb8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d102      	bne.n	8005cf6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a1f      	ldr	r2, [pc, #124]	; (8005d70 <HAL_TIM_Base_Init+0xb4>)
 8005cf4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f000 fe41 	bl	8006998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	08001ef9 	.word	0x08001ef9

08005d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d001      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e04e      	b.n	8005e2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0201 	orr.w	r2, r2, #1
 8005da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a23      	ldr	r2, [pc, #140]	; (8005e38 <HAL_TIM_Base_Start_IT+0xc4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d022      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x80>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db6:	d01d      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x80>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a1f      	ldr	r2, [pc, #124]	; (8005e3c <HAL_TIM_Base_Start_IT+0xc8>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d018      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x80>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a1e      	ldr	r2, [pc, #120]	; (8005e40 <HAL_TIM_Base_Start_IT+0xcc>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d013      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x80>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a1c      	ldr	r2, [pc, #112]	; (8005e44 <HAL_TIM_Base_Start_IT+0xd0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00e      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x80>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1b      	ldr	r2, [pc, #108]	; (8005e48 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d009      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x80>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a19      	ldr	r2, [pc, #100]	; (8005e4c <HAL_TIM_Base_Start_IT+0xd8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d004      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x80>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a18      	ldr	r2, [pc, #96]	; (8005e50 <HAL_TIM_Base_Start_IT+0xdc>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d111      	bne.n	8005e18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b06      	cmp	r3, #6
 8005e04:	d010      	beq.n	8005e28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0201 	orr.w	r2, r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e16:	e007      	b.n	8005e28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	40010000 	.word	0x40010000
 8005e3c:	40000400 	.word	0x40000400
 8005e40:	40000800 	.word	0x40000800
 8005e44:	40000c00 	.word	0x40000c00
 8005e48:	40010400 	.word	0x40010400
 8005e4c:	40014000 	.word	0x40014000
 8005e50:	40001800 	.word	0x40001800

08005e54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0201 	bic.w	r2, r2, #1
 8005e6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6a1a      	ldr	r2, [r3, #32]
 8005e72:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e76:	4013      	ands	r3, r2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10f      	bne.n	8005e9c <HAL_TIM_Base_Stop_IT+0x48>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6a1a      	ldr	r2, [r3, #32]
 8005e82:	f240 4344 	movw	r3, #1092	; 0x444
 8005e86:	4013      	ands	r3, r2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d107      	bne.n	8005e9c <HAL_TIM_Base_Stop_IT+0x48>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0201 	bic.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
	...

08005eb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e04c      	b.n	8005f60 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d111      	bne.n	8005ef6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f001 f86c 	bl	8006fb8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a1f      	ldr	r2, [pc, #124]	; (8005f68 <HAL_TIM_PWM_Init+0xb4>)
 8005eec:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3304      	adds	r3, #4
 8005f06:	4619      	mov	r1, r3
 8005f08:	4610      	mov	r0, r2
 8005f0a:	f000 fd45 	bl	8006998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	08001dbd 	.word	0x08001dbd

08005f6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d109      	bne.n	8005f90 <HAL_TIM_PWM_Start+0x24>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	bf14      	ite	ne
 8005f88:	2301      	movne	r3, #1
 8005f8a:	2300      	moveq	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	e022      	b.n	8005fd6 <HAL_TIM_PWM_Start+0x6a>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d109      	bne.n	8005faa <HAL_TIM_PWM_Start+0x3e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	bf14      	ite	ne
 8005fa2:	2301      	movne	r3, #1
 8005fa4:	2300      	moveq	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	e015      	b.n	8005fd6 <HAL_TIM_PWM_Start+0x6a>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d109      	bne.n	8005fc4 <HAL_TIM_PWM_Start+0x58>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	e008      	b.n	8005fd6 <HAL_TIM_PWM_Start+0x6a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	bf14      	ite	ne
 8005fd0:	2301      	movne	r3, #1
 8005fd2:	2300      	moveq	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e07c      	b.n	80060d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d104      	bne.n	8005fee <HAL_TIM_PWM_Start+0x82>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fec:	e013      	b.n	8006016 <HAL_TIM_PWM_Start+0xaa>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d104      	bne.n	8005ffe <HAL_TIM_PWM_Start+0x92>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ffc:	e00b      	b.n	8006016 <HAL_TIM_PWM_Start+0xaa>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b08      	cmp	r3, #8
 8006002:	d104      	bne.n	800600e <HAL_TIM_PWM_Start+0xa2>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800600c:	e003      	b.n	8006016 <HAL_TIM_PWM_Start+0xaa>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2201      	movs	r2, #1
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	4618      	mov	r0, r3
 8006020:	f000 ffa4 	bl	8006f6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a2d      	ldr	r2, [pc, #180]	; (80060e0 <HAL_TIM_PWM_Start+0x174>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d004      	beq.n	8006038 <HAL_TIM_PWM_Start+0xcc>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a2c      	ldr	r2, [pc, #176]	; (80060e4 <HAL_TIM_PWM_Start+0x178>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d101      	bne.n	800603c <HAL_TIM_PWM_Start+0xd0>
 8006038:	2301      	movs	r3, #1
 800603a:	e000      	b.n	800603e <HAL_TIM_PWM_Start+0xd2>
 800603c:	2300      	movs	r3, #0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d007      	beq.n	8006052 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006050:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a22      	ldr	r2, [pc, #136]	; (80060e0 <HAL_TIM_PWM_Start+0x174>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d022      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x136>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006064:	d01d      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x136>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1f      	ldr	r2, [pc, #124]	; (80060e8 <HAL_TIM_PWM_Start+0x17c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d018      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x136>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1d      	ldr	r2, [pc, #116]	; (80060ec <HAL_TIM_PWM_Start+0x180>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x136>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1c      	ldr	r2, [pc, #112]	; (80060f0 <HAL_TIM_PWM_Start+0x184>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00e      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x136>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a16      	ldr	r2, [pc, #88]	; (80060e4 <HAL_TIM_PWM_Start+0x178>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d009      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x136>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a18      	ldr	r2, [pc, #96]	; (80060f4 <HAL_TIM_PWM_Start+0x188>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d004      	beq.n	80060a2 <HAL_TIM_PWM_Start+0x136>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a16      	ldr	r2, [pc, #88]	; (80060f8 <HAL_TIM_PWM_Start+0x18c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d111      	bne.n	80060c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b06      	cmp	r3, #6
 80060b2:	d010      	beq.n	80060d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c4:	e007      	b.n	80060d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0201 	orr.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40010000 	.word	0x40010000
 80060e4:	40010400 	.word	0x40010400
 80060e8:	40000400 	.word	0x40000400
 80060ec:	40000800 	.word	0x40000800
 80060f0:	40000c00 	.word	0x40000c00
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40001800 	.word	0x40001800

080060fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e0a2      	b.n	8006256 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d111      	bne.n	8006140 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 ff47 	bl	8006fb8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612e:	2b00      	cmp	r3, #0
 8006130:	d102      	bne.n	8006138 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a4a      	ldr	r2, [pc, #296]	; (8006260 <HAL_TIM_Encoder_Init+0x164>)
 8006136:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	6812      	ldr	r2, [r2, #0]
 8006152:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006156:	f023 0307 	bic.w	r3, r3, #7
 800615a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3304      	adds	r3, #4
 8006164:	4619      	mov	r1, r3
 8006166:	4610      	mov	r0, r2
 8006168:	f000 fc16 	bl	8006998 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006194:	f023 0303 	bic.w	r3, r3, #3
 8006198:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	4313      	orrs	r3, r2
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80061b2:	f023 030c 	bic.w	r3, r3, #12
 80061b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	021b      	lsls	r3, r3, #8
 80061ce:	4313      	orrs	r3, r2
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	011a      	lsls	r2, r3, #4
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	031b      	lsls	r3, r3, #12
 80061e2:	4313      	orrs	r3, r2
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80061f0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80061f8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	4313      	orrs	r3, r2
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	08001e01 	.word	0x08001e01

08006264 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006274:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800627c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006284:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800628c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d110      	bne.n	80062b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d102      	bne.n	80062a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800629a:	7b7b      	ldrb	r3, [r7, #13]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d001      	beq.n	80062a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e069      	b.n	8006378 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062b4:	e031      	b.n	800631a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d110      	bne.n	80062de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062bc:	7bbb      	ldrb	r3, [r7, #14]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d102      	bne.n	80062c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062c2:	7b3b      	ldrb	r3, [r7, #12]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d001      	beq.n	80062cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e055      	b.n	8006378 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062dc:	e01d      	b.n	800631a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d108      	bne.n	80062f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062e4:	7bbb      	ldrb	r3, [r7, #14]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d105      	bne.n	80062f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062ea:	7b7b      	ldrb	r3, [r7, #13]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d102      	bne.n	80062f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062f0:	7b3b      	ldrb	r3, [r7, #12]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d001      	beq.n	80062fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e03e      	b.n	8006378 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2202      	movs	r2, #2
 80062fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2202      	movs	r2, #2
 8006306:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2202      	movs	r2, #2
 800630e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2202      	movs	r2, #2
 8006316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_TIM_Encoder_Start+0xc4>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b04      	cmp	r3, #4
 8006324:	d008      	beq.n	8006338 <HAL_TIM_Encoder_Start+0xd4>
 8006326:	e00f      	b.n	8006348 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2201      	movs	r2, #1
 800632e:	2100      	movs	r1, #0
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fe1b 	bl	8006f6c <TIM_CCxChannelCmd>
      break;
 8006336:	e016      	b.n	8006366 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2201      	movs	r2, #1
 800633e:	2104      	movs	r1, #4
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fe13 	bl	8006f6c <TIM_CCxChannelCmd>
      break;
 8006346:	e00e      	b.n	8006366 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2201      	movs	r2, #1
 800634e:	2100      	movs	r1, #0
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fe0b 	bl	8006f6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2201      	movs	r2, #1
 800635c:	2104      	movs	r1, #4
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fe04 	bl	8006f6c <TIM_CCxChannelCmd>
      break;
 8006364:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 0201 	orr.w	r2, r2, #1
 8006374:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b02      	cmp	r3, #2
 8006394:	d128      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d121      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f06f 0202 	mvn.w	r2, #2
 80063ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	f003 0303 	and.w	r3, r3, #3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d005      	beq.n	80063ce <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	4798      	blx	r3
 80063cc:	e009      	b.n	80063e2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d128      	bne.n	8006448 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b04      	cmp	r3, #4
 8006402:	d121      	bne.n	8006448 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f06f 0204 	mvn.w	r2, #4
 800640c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2202      	movs	r2, #2
 8006412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800641e:	2b00      	cmp	r3, #0
 8006420:	d005      	beq.n	800642e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	4798      	blx	r3
 800642c:	e009      	b.n	8006442 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b08      	cmp	r3, #8
 8006454:	d128      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b08      	cmp	r3, #8
 8006462:	d121      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0208 	mvn.w	r2, #8
 800646c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2204      	movs	r2, #4
 8006472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4798      	blx	r3
 800648c:	e009      	b.n	80064a2 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f003 0310 	and.w	r3, r3, #16
 80064b2:	2b10      	cmp	r3, #16
 80064b4:	d128      	bne.n	8006508 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f003 0310 	and.w	r3, r3, #16
 80064c0:	2b10      	cmp	r3, #16
 80064c2:	d121      	bne.n	8006508 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f06f 0210 	mvn.w	r2, #16
 80064cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2208      	movs	r2, #8
 80064d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	4798      	blx	r3
 80064ec:	e009      	b.n	8006502 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b01      	cmp	r3, #1
 8006514:	d110      	bne.n	8006538 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b01      	cmp	r3, #1
 8006522:	d109      	bne.n	8006538 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0201 	mvn.w	r2, #1
 800652c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b80      	cmp	r3, #128	; 0x80
 8006544:	d110      	bne.n	8006568 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006550:	2b80      	cmp	r3, #128	; 0x80
 8006552:	d109      	bne.n	8006568 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800655c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b40      	cmp	r3, #64	; 0x40
 8006574:	d110      	bne.n	8006598 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006580:	2b40      	cmp	r3, #64	; 0x40
 8006582:	d109      	bne.n	8006598 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800658c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d110      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d109      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0220 	mvn.w	r2, #32
 80065bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065c8:	bf00      	nop
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065ea:	2302      	movs	r3, #2
 80065ec:	e0ae      	b.n	800674c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b0c      	cmp	r3, #12
 80065fa:	f200 809f 	bhi.w	800673c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80065fe:	a201      	add	r2, pc, #4	; (adr r2, 8006604 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006604:	08006639 	.word	0x08006639
 8006608:	0800673d 	.word	0x0800673d
 800660c:	0800673d 	.word	0x0800673d
 8006610:	0800673d 	.word	0x0800673d
 8006614:	08006679 	.word	0x08006679
 8006618:	0800673d 	.word	0x0800673d
 800661c:	0800673d 	.word	0x0800673d
 8006620:	0800673d 	.word	0x0800673d
 8006624:	080066bb 	.word	0x080066bb
 8006628:	0800673d 	.word	0x0800673d
 800662c:	0800673d 	.word	0x0800673d
 8006630:	0800673d 	.word	0x0800673d
 8006634:	080066fb 	.word	0x080066fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68b9      	ldr	r1, [r7, #8]
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fa4a 	bl	8006ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0208 	orr.w	r2, r2, #8
 8006652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0204 	bic.w	r2, r2, #4
 8006662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6999      	ldr	r1, [r3, #24]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	619a      	str	r2, [r3, #24]
      break;
 8006676:	e064      	b.n	8006742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fa9a 	bl	8006bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699a      	ldr	r2, [r3, #24]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6999      	ldr	r1, [r3, #24]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	021a      	lsls	r2, r3, #8
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	619a      	str	r2, [r3, #24]
      break;
 80066b8:	e043      	b.n	8006742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 faef 	bl	8006ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69da      	ldr	r2, [r3, #28]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f042 0208 	orr.w	r2, r2, #8
 80066d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69da      	ldr	r2, [r3, #28]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0204 	bic.w	r2, r2, #4
 80066e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69d9      	ldr	r1, [r3, #28]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	61da      	str	r2, [r3, #28]
      break;
 80066f8:	e023      	b.n	8006742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68b9      	ldr	r1, [r7, #8]
 8006700:	4618      	mov	r0, r3
 8006702:	f000 fb43 	bl	8006d8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69da      	ldr	r2, [r3, #28]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69d9      	ldr	r1, [r3, #28]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	021a      	lsls	r2, r3, #8
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	61da      	str	r2, [r3, #28]
      break;
 800673a:	e002      	b.n	8006742 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	75fb      	strb	r3, [r7, #23]
      break;
 8006740:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800674a:	7dfb      	ldrb	r3, [r7, #23]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3718      	adds	r7, #24
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_TIM_ConfigClockSource+0x1c>
 800676c:	2302      	movs	r3, #2
 800676e:	e0b4      	b.n	80068da <HAL_TIM_ConfigClockSource+0x186>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800678e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006796:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a8:	d03e      	beq.n	8006828 <HAL_TIM_ConfigClockSource+0xd4>
 80067aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ae:	f200 8087 	bhi.w	80068c0 <HAL_TIM_ConfigClockSource+0x16c>
 80067b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b6:	f000 8086 	beq.w	80068c6 <HAL_TIM_ConfigClockSource+0x172>
 80067ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067be:	d87f      	bhi.n	80068c0 <HAL_TIM_ConfigClockSource+0x16c>
 80067c0:	2b70      	cmp	r3, #112	; 0x70
 80067c2:	d01a      	beq.n	80067fa <HAL_TIM_ConfigClockSource+0xa6>
 80067c4:	2b70      	cmp	r3, #112	; 0x70
 80067c6:	d87b      	bhi.n	80068c0 <HAL_TIM_ConfigClockSource+0x16c>
 80067c8:	2b60      	cmp	r3, #96	; 0x60
 80067ca:	d050      	beq.n	800686e <HAL_TIM_ConfigClockSource+0x11a>
 80067cc:	2b60      	cmp	r3, #96	; 0x60
 80067ce:	d877      	bhi.n	80068c0 <HAL_TIM_ConfigClockSource+0x16c>
 80067d0:	2b50      	cmp	r3, #80	; 0x50
 80067d2:	d03c      	beq.n	800684e <HAL_TIM_ConfigClockSource+0xfa>
 80067d4:	2b50      	cmp	r3, #80	; 0x50
 80067d6:	d873      	bhi.n	80068c0 <HAL_TIM_ConfigClockSource+0x16c>
 80067d8:	2b40      	cmp	r3, #64	; 0x40
 80067da:	d058      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x13a>
 80067dc:	2b40      	cmp	r3, #64	; 0x40
 80067de:	d86f      	bhi.n	80068c0 <HAL_TIM_ConfigClockSource+0x16c>
 80067e0:	2b30      	cmp	r3, #48	; 0x30
 80067e2:	d064      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0x15a>
 80067e4:	2b30      	cmp	r3, #48	; 0x30
 80067e6:	d86b      	bhi.n	80068c0 <HAL_TIM_ConfigClockSource+0x16c>
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	d060      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0x15a>
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	d867      	bhi.n	80068c0 <HAL_TIM_ConfigClockSource+0x16c>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d05c      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0x15a>
 80067f4:	2b10      	cmp	r3, #16
 80067f6:	d05a      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0x15a>
 80067f8:	e062      	b.n	80068c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6818      	ldr	r0, [r3, #0]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	6899      	ldr	r1, [r3, #8]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f000 fb8f 	bl	8006f2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800681c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	609a      	str	r2, [r3, #8]
      break;
 8006826:	e04f      	b.n	80068c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6818      	ldr	r0, [r3, #0]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	6899      	ldr	r1, [r3, #8]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f000 fb78 	bl	8006f2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800684a:	609a      	str	r2, [r3, #8]
      break;
 800684c:	e03c      	b.n	80068c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6859      	ldr	r1, [r3, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	461a      	mov	r2, r3
 800685c:	f000 faec 	bl	8006e38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2150      	movs	r1, #80	; 0x50
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fb45 	bl	8006ef6 <TIM_ITRx_SetConfig>
      break;
 800686c:	e02c      	b.n	80068c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	6859      	ldr	r1, [r3, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	461a      	mov	r2, r3
 800687c:	f000 fb0b 	bl	8006e96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2160      	movs	r1, #96	; 0x60
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fb35 	bl	8006ef6 <TIM_ITRx_SetConfig>
      break;
 800688c:	e01c      	b.n	80068c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6818      	ldr	r0, [r3, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	6859      	ldr	r1, [r3, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	461a      	mov	r2, r3
 800689c:	f000 facc 	bl	8006e38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2140      	movs	r1, #64	; 0x40
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fb25 	bl	8006ef6 <TIM_ITRx_SetConfig>
      break;
 80068ac:	e00c      	b.n	80068c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4619      	mov	r1, r3
 80068b8:	4610      	mov	r0, r2
 80068ba:	f000 fb1c 	bl	8006ef6 <TIM_ITRx_SetConfig>
      break;
 80068be:	e003      	b.n	80068c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	73fb      	strb	r3, [r7, #15]
      break;
 80068c4:	e000      	b.n	80068c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80068c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006912:	bf00      	nop
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800695a:	b480      	push	{r7}
 800695c:	b083      	sub	sp, #12
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
	...

08006998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a40      	ldr	r2, [pc, #256]	; (8006aac <TIM_Base_SetConfig+0x114>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d013      	beq.n	80069d8 <TIM_Base_SetConfig+0x40>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b6:	d00f      	beq.n	80069d8 <TIM_Base_SetConfig+0x40>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a3d      	ldr	r2, [pc, #244]	; (8006ab0 <TIM_Base_SetConfig+0x118>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00b      	beq.n	80069d8 <TIM_Base_SetConfig+0x40>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a3c      	ldr	r2, [pc, #240]	; (8006ab4 <TIM_Base_SetConfig+0x11c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d007      	beq.n	80069d8 <TIM_Base_SetConfig+0x40>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a3b      	ldr	r2, [pc, #236]	; (8006ab8 <TIM_Base_SetConfig+0x120>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d003      	beq.n	80069d8 <TIM_Base_SetConfig+0x40>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a3a      	ldr	r2, [pc, #232]	; (8006abc <TIM_Base_SetConfig+0x124>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d108      	bne.n	80069ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a2f      	ldr	r2, [pc, #188]	; (8006aac <TIM_Base_SetConfig+0x114>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d02b      	beq.n	8006a4a <TIM_Base_SetConfig+0xb2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f8:	d027      	beq.n	8006a4a <TIM_Base_SetConfig+0xb2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a2c      	ldr	r2, [pc, #176]	; (8006ab0 <TIM_Base_SetConfig+0x118>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d023      	beq.n	8006a4a <TIM_Base_SetConfig+0xb2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a2b      	ldr	r2, [pc, #172]	; (8006ab4 <TIM_Base_SetConfig+0x11c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d01f      	beq.n	8006a4a <TIM_Base_SetConfig+0xb2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a2a      	ldr	r2, [pc, #168]	; (8006ab8 <TIM_Base_SetConfig+0x120>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d01b      	beq.n	8006a4a <TIM_Base_SetConfig+0xb2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a29      	ldr	r2, [pc, #164]	; (8006abc <TIM_Base_SetConfig+0x124>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d017      	beq.n	8006a4a <TIM_Base_SetConfig+0xb2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a28      	ldr	r2, [pc, #160]	; (8006ac0 <TIM_Base_SetConfig+0x128>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d013      	beq.n	8006a4a <TIM_Base_SetConfig+0xb2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a27      	ldr	r2, [pc, #156]	; (8006ac4 <TIM_Base_SetConfig+0x12c>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d00f      	beq.n	8006a4a <TIM_Base_SetConfig+0xb2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a26      	ldr	r2, [pc, #152]	; (8006ac8 <TIM_Base_SetConfig+0x130>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00b      	beq.n	8006a4a <TIM_Base_SetConfig+0xb2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a25      	ldr	r2, [pc, #148]	; (8006acc <TIM_Base_SetConfig+0x134>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d007      	beq.n	8006a4a <TIM_Base_SetConfig+0xb2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a24      	ldr	r2, [pc, #144]	; (8006ad0 <TIM_Base_SetConfig+0x138>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d003      	beq.n	8006a4a <TIM_Base_SetConfig+0xb2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a23      	ldr	r2, [pc, #140]	; (8006ad4 <TIM_Base_SetConfig+0x13c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d108      	bne.n	8006a5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <TIM_Base_SetConfig+0x114>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d003      	beq.n	8006a90 <TIM_Base_SetConfig+0xf8>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a0c      	ldr	r2, [pc, #48]	; (8006abc <TIM_Base_SetConfig+0x124>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d103      	bne.n	8006a98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	615a      	str	r2, [r3, #20]
}
 8006a9e:	bf00      	nop
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	40010000 	.word	0x40010000
 8006ab0:	40000400 	.word	0x40000400
 8006ab4:	40000800 	.word	0x40000800
 8006ab8:	40000c00 	.word	0x40000c00
 8006abc:	40010400 	.word	0x40010400
 8006ac0:	40014000 	.word	0x40014000
 8006ac4:	40014400 	.word	0x40014400
 8006ac8:	40014800 	.word	0x40014800
 8006acc:	40001800 	.word	0x40001800
 8006ad0:	40001c00 	.word	0x40001c00
 8006ad4:	40002000 	.word	0x40002000

08006ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f023 0201 	bic.w	r2, r3, #1
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0303 	bic.w	r3, r3, #3
 8006b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f023 0302 	bic.w	r3, r3, #2
 8006b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a20      	ldr	r2, [pc, #128]	; (8006bb0 <TIM_OC1_SetConfig+0xd8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d003      	beq.n	8006b3c <TIM_OC1_SetConfig+0x64>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a1f      	ldr	r2, [pc, #124]	; (8006bb4 <TIM_OC1_SetConfig+0xdc>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d10c      	bne.n	8006b56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f023 0308 	bic.w	r3, r3, #8
 8006b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f023 0304 	bic.w	r3, r3, #4
 8006b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a15      	ldr	r2, [pc, #84]	; (8006bb0 <TIM_OC1_SetConfig+0xd8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d003      	beq.n	8006b66 <TIM_OC1_SetConfig+0x8e>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a14      	ldr	r2, [pc, #80]	; (8006bb4 <TIM_OC1_SetConfig+0xdc>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d111      	bne.n	8006b8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	621a      	str	r2, [r3, #32]
}
 8006ba4:	bf00      	nop
 8006ba6:	371c      	adds	r7, #28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	40010000 	.word	0x40010000
 8006bb4:	40010400 	.word	0x40010400

08006bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f023 0210 	bic.w	r2, r3, #16
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	021b      	lsls	r3, r3, #8
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f023 0320 	bic.w	r3, r3, #32
 8006c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	011b      	lsls	r3, r3, #4
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a22      	ldr	r2, [pc, #136]	; (8006c9c <TIM_OC2_SetConfig+0xe4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_OC2_SetConfig+0x68>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a21      	ldr	r2, [pc, #132]	; (8006ca0 <TIM_OC2_SetConfig+0xe8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d10d      	bne.n	8006c3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a17      	ldr	r2, [pc, #92]	; (8006c9c <TIM_OC2_SetConfig+0xe4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d003      	beq.n	8006c4c <TIM_OC2_SetConfig+0x94>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a16      	ldr	r2, [pc, #88]	; (8006ca0 <TIM_OC2_SetConfig+0xe8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d113      	bne.n	8006c74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	621a      	str	r2, [r3, #32]
}
 8006c8e:	bf00      	nop
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	40010000 	.word	0x40010000
 8006ca0:	40010400 	.word	0x40010400

08006ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0303 	bic.w	r3, r3, #3
 8006cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a21      	ldr	r2, [pc, #132]	; (8006d84 <TIM_OC3_SetConfig+0xe0>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d003      	beq.n	8006d0a <TIM_OC3_SetConfig+0x66>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a20      	ldr	r2, [pc, #128]	; (8006d88 <TIM_OC3_SetConfig+0xe4>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d10d      	bne.n	8006d26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	021b      	lsls	r3, r3, #8
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a16      	ldr	r2, [pc, #88]	; (8006d84 <TIM_OC3_SetConfig+0xe0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d003      	beq.n	8006d36 <TIM_OC3_SetConfig+0x92>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a15      	ldr	r2, [pc, #84]	; (8006d88 <TIM_OC3_SetConfig+0xe4>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d113      	bne.n	8006d5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	011b      	lsls	r3, r3, #4
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	621a      	str	r2, [r3, #32]
}
 8006d78:	bf00      	nop
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	40010000 	.word	0x40010000
 8006d88:	40010400 	.word	0x40010400

08006d8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	021b      	lsls	r3, r3, #8
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	031b      	lsls	r3, r3, #12
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a12      	ldr	r2, [pc, #72]	; (8006e30 <TIM_OC4_SetConfig+0xa4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d003      	beq.n	8006df4 <TIM_OC4_SetConfig+0x68>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a11      	ldr	r2, [pc, #68]	; (8006e34 <TIM_OC4_SetConfig+0xa8>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d109      	bne.n	8006e08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	019b      	lsls	r3, r3, #6
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	621a      	str	r2, [r3, #32]
}
 8006e22:	bf00      	nop
 8006e24:	371c      	adds	r7, #28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	40010000 	.word	0x40010000
 8006e34:	40010400 	.word	0x40010400

08006e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	f023 0201 	bic.w	r2, r3, #1
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	011b      	lsls	r3, r3, #4
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f023 030a 	bic.w	r3, r3, #10
 8006e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	621a      	str	r2, [r3, #32]
}
 8006e8a:	bf00      	nop
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b087      	sub	sp, #28
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	60f8      	str	r0, [r7, #12]
 8006e9e:	60b9      	str	r1, [r7, #8]
 8006ea0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	f023 0210 	bic.w	r2, r3, #16
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ec0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	031b      	lsls	r3, r3, #12
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ed2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	011b      	lsls	r3, r3, #4
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	621a      	str	r2, [r3, #32]
}
 8006eea:	bf00      	nop
 8006eec:	371c      	adds	r7, #28
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b085      	sub	sp, #20
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	f043 0307 	orr.w	r3, r3, #7
 8006f18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	609a      	str	r2, [r3, #8]
}
 8006f20:	bf00      	nop
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	021a      	lsls	r2, r3, #8
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	609a      	str	r2, [r3, #8]
}
 8006f60:	bf00      	nop
 8006f62:	371c      	adds	r7, #28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f003 031f 	and.w	r3, r3, #31
 8006f7e:	2201      	movs	r2, #1
 8006f80:	fa02 f303 	lsl.w	r3, r2, r3
 8006f84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a1a      	ldr	r2, [r3, #32]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	43db      	mvns	r3, r3
 8006f8e:	401a      	ands	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a1a      	ldr	r2, [r3, #32]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f003 031f 	and.w	r3, r3, #31
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	621a      	str	r2, [r3, #32]
}
 8006faa:	bf00      	nop
 8006fac:	371c      	adds	r7, #28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
	...

08006fb8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a1c      	ldr	r2, [pc, #112]	; (8007034 <TIM_ResetCallback+0x7c>)
 8006fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a1b      	ldr	r2, [pc, #108]	; (8007038 <TIM_ResetCallback+0x80>)
 8006fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a1a      	ldr	r2, [pc, #104]	; (800703c <TIM_ResetCallback+0x84>)
 8006fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a19      	ldr	r2, [pc, #100]	; (8007040 <TIM_ResetCallback+0x88>)
 8006fdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a18      	ldr	r2, [pc, #96]	; (8007044 <TIM_ResetCallback+0x8c>)
 8006fe4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a17      	ldr	r2, [pc, #92]	; (8007048 <TIM_ResetCallback+0x90>)
 8006fec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a16      	ldr	r2, [pc, #88]	; (800704c <TIM_ResetCallback+0x94>)
 8006ff4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a15      	ldr	r2, [pc, #84]	; (8007050 <TIM_ResetCallback+0x98>)
 8006ffc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a14      	ldr	r2, [pc, #80]	; (8007054 <TIM_ResetCallback+0x9c>)
 8007004:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a13      	ldr	r2, [pc, #76]	; (8007058 <TIM_ResetCallback+0xa0>)
 800700c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a12      	ldr	r2, [pc, #72]	; (800705c <TIM_ResetCallback+0xa4>)
 8007014:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a11      	ldr	r2, [pc, #68]	; (8007060 <TIM_ResetCallback+0xa8>)
 800701c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a10      	ldr	r2, [pc, #64]	; (8007064 <TIM_ResetCallback+0xac>)
 8007024:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	08001d35 	.word	0x08001d35
 8007038:	080068e3 	.word	0x080068e3
 800703c:	0800695b 	.word	0x0800695b
 8007040:	0800696f 	.word	0x0800696f
 8007044:	0800690b 	.word	0x0800690b
 8007048:	0800691f 	.word	0x0800691f
 800704c:	080068f7 	.word	0x080068f7
 8007050:	08006933 	.word	0x08006933
 8007054:	08006947 	.word	0x08006947
 8007058:	08006983 	.word	0x08006983
 800705c:	08007205 	.word	0x08007205
 8007060:	08007219 	.word	0x08007219
 8007064:	0800722d 	.word	0x0800722d

08007068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007078:	2b01      	cmp	r3, #1
 800707a:	d101      	bne.n	8007080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800707c:	2302      	movs	r3, #2
 800707e:	e05a      	b.n	8007136 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a21      	ldr	r2, [pc, #132]	; (8007144 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d022      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070cc:	d01d      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a1d      	ldr	r2, [pc, #116]	; (8007148 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d018      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a1b      	ldr	r2, [pc, #108]	; (800714c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d013      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1a      	ldr	r2, [pc, #104]	; (8007150 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00e      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a18      	ldr	r2, [pc, #96]	; (8007154 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d009      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a17      	ldr	r2, [pc, #92]	; (8007158 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d004      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a15      	ldr	r2, [pc, #84]	; (800715c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d10c      	bne.n	8007124 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	4313      	orrs	r3, r2
 800711a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40010000 	.word	0x40010000
 8007148:	40000400 	.word	0x40000400
 800714c:	40000800 	.word	0x40000800
 8007150:	40000c00 	.word	0x40000c00
 8007154:	40010400 	.word	0x40010400
 8007158:	40014000 	.word	0x40014000
 800715c:	40001800 	.word	0x40001800

08007160 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800716a:	2300      	movs	r3, #0
 800716c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007178:	2302      	movs	r3, #2
 800717a:	e03d      	b.n	80071f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	4313      	orrs	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	4313      	orrs	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e04a      	b.n	80072e8 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d111      	bne.n	8007282 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f8d0 	bl	800740c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d102      	bne.n	800727a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a1e      	ldr	r2, [pc, #120]	; (80072f0 <HAL_UART_Init+0xb0>)
 8007278:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2224      	movs	r2, #36	; 0x24
 8007286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007298:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fb12 	bl	80078c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691a      	ldr	r2, [r3, #16]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695a      	ldr	r2, [r3, #20]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2220      	movs	r2, #32
 80072da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	08001fbd 	.word	0x08001fbd

080072f4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	4613      	mov	r3, r2
 8007300:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b20      	cmp	r3, #32
 800730c:	d11d      	bne.n	800734a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d002      	beq.n	800731a <HAL_UART_Receive_DMA+0x26>
 8007314:	88fb      	ldrh	r3, [r7, #6]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e016      	b.n	800734c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007324:	2b01      	cmp	r3, #1
 8007326:	d101      	bne.n	800732c <HAL_UART_Receive_DMA+0x38>
 8007328:	2302      	movs	r3, #2
 800732a:	e00f      	b.n	800734c <HAL_UART_Receive_DMA+0x58>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800733a:	88fb      	ldrh	r3, [r7, #6]
 800733c:	461a      	mov	r2, r3
 800733e:	68b9      	ldr	r1, [r7, #8]
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 f999 	bl	8007678 <UART_Start_Receive_DMA>
 8007346:	4603      	mov	r3, r0
 8007348:	e000      	b.n	800734c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800734a:	2302      	movs	r3, #2
  }
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	460b      	mov	r3, r1
 80073fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a10      	ldr	r2, [pc, #64]	; (8007458 <UART_InitCallbacksToDefault+0x4c>)
 8007418:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a0f      	ldr	r2, [pc, #60]	; (800745c <UART_InitCallbacksToDefault+0x50>)
 800741e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a0f      	ldr	r2, [pc, #60]	; (8007460 <UART_InitCallbacksToDefault+0x54>)
 8007424:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a0e      	ldr	r2, [pc, #56]	; (8007464 <UART_InitCallbacksToDefault+0x58>)
 800742a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a0e      	ldr	r2, [pc, #56]	; (8007468 <UART_InitCallbacksToDefault+0x5c>)
 8007430:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a0d      	ldr	r2, [pc, #52]	; (800746c <UART_InitCallbacksToDefault+0x60>)
 8007436:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a0d      	ldr	r2, [pc, #52]	; (8007470 <UART_InitCallbacksToDefault+0x64>)
 800743c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a0c      	ldr	r2, [pc, #48]	; (8007474 <UART_InitCallbacksToDefault+0x68>)
 8007442:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a0c      	ldr	r2, [pc, #48]	; (8007478 <UART_InitCallbacksToDefault+0x6c>)
 8007448:	669a      	str	r2, [r3, #104]	; 0x68

}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	08007369 	.word	0x08007369
 800745c:	08007355 	.word	0x08007355
 8007460:	08007391 	.word	0x08007391
 8007464:	0800737d 	.word	0x0800737d
 8007468:	080073a5 	.word	0x080073a5
 800746c:	080073b9 	.word	0x080073b9
 8007470:	080073cd 	.word	0x080073cd
 8007474:	080073e1 	.word	0x080073e1
 8007478:	080073f5 	.word	0x080073f5

0800747c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b09c      	sub	sp, #112	; 0x70
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007494:	2b00      	cmp	r3, #0
 8007496:	d172      	bne.n	800757e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800749a:	2200      	movs	r2, #0
 800749c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800749e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	330c      	adds	r3, #12
 80074a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80074b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	330c      	adds	r3, #12
 80074bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074be:	65ba      	str	r2, [r7, #88]	; 0x58
 80074c0:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e5      	bne.n	800749e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3314      	adds	r3, #20
 80074d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e4:	f023 0301 	bic.w	r3, r3, #1
 80074e8:	667b      	str	r3, [r7, #100]	; 0x64
 80074ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3314      	adds	r3, #20
 80074f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80074f2:	647a      	str	r2, [r7, #68]	; 0x44
 80074f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e5      	bne.n	80074d2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3314      	adds	r3, #20
 800750c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	623b      	str	r3, [r7, #32]
   return(result);
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800751c:	663b      	str	r3, [r7, #96]	; 0x60
 800751e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3314      	adds	r3, #20
 8007524:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007526:	633a      	str	r2, [r7, #48]	; 0x30
 8007528:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800752c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e5      	bne.n	8007506 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800753a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753c:	2220      	movs	r2, #32
 800753e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	2b01      	cmp	r3, #1
 8007548:	d119      	bne.n	800757e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800754a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	330c      	adds	r3, #12
 8007550:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	e853 3f00 	ldrex	r3, [r3]
 8007558:	60fb      	str	r3, [r7, #12]
   return(result);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f023 0310 	bic.w	r3, r3, #16
 8007560:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	330c      	adds	r3, #12
 8007568:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800756a:	61fa      	str	r2, [r7, #28]
 800756c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	69b9      	ldr	r1, [r7, #24]
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	617b      	str	r3, [r7, #20]
   return(result);
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e5      	bne.n	800754a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800757e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007582:	2b01      	cmp	r3, #1
 8007584:	d107      	bne.n	8007596 <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8007586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800758a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800758c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800758e:	4611      	mov	r1, r2
 8007590:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007592:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007594:	e003      	b.n	800759e <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 8007596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800759c:	4798      	blx	r3
}
 800759e:	bf00      	nop
 80075a0:	3770      	adds	r7, #112	; 0x70
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b084      	sub	sp, #16
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d109      	bne.n	80075d0 <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80075c4:	0852      	lsrs	r2, r2, #1
 80075c6:	b292      	uxth	r2, r2
 80075c8:	4611      	mov	r1, r2
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075ce:	e003      	b.n	80075d8 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	4798      	blx	r3
}
 80075d8:	bf00      	nop
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fc:	2b80      	cmp	r3, #128	; 0x80
 80075fe:	bf0c      	ite	eq
 8007600:	2301      	moveq	r3, #1
 8007602:	2300      	movne	r3, #0
 8007604:	b2db      	uxtb	r3, r3
 8007606:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b21      	cmp	r3, #33	; 0x21
 8007612:	d108      	bne.n	8007626 <UART_DMAError+0x46>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d005      	beq.n	8007626 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2200      	movs	r2, #0
 800761e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007620:	68b8      	ldr	r0, [r7, #8]
 8007622:	f000 f8c3 	bl	80077ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007630:	2b40      	cmp	r3, #64	; 0x40
 8007632:	bf0c      	ite	eq
 8007634:	2301      	moveq	r3, #1
 8007636:	2300      	movne	r3, #0
 8007638:	b2db      	uxtb	r3, r3
 800763a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b22      	cmp	r3, #34	; 0x22
 8007646:	d108      	bne.n	800765a <UART_DMAError+0x7a>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2200      	movs	r2, #0
 8007652:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007654:	68b8      	ldr	r0, [r7, #8]
 8007656:	f000 f8d1 	bl	80077fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	f043 0210 	orr.w	r2, r3, #16
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766a:	68b8      	ldr	r0, [r7, #8]
 800766c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800766e:	bf00      	nop
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b098      	sub	sp, #96	; 0x60
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	4613      	mov	r3, r2
 8007684:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	88fa      	ldrh	r2, [r7, #6]
 8007690:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2222      	movs	r2, #34	; 0x22
 800769c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	4a3e      	ldr	r2, [pc, #248]	; (80077a0 <UART_Start_Receive_DMA+0x128>)
 80076a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ac:	4a3d      	ldr	r2, [pc, #244]	; (80077a4 <UART_Start_Receive_DMA+0x12c>)
 80076ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	4a3c      	ldr	r2, [pc, #240]	; (80077a8 <UART_Start_Receive_DMA+0x130>)
 80076b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	2200      	movs	r2, #0
 80076be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80076c0:	f107 0308 	add.w	r3, r7, #8
 80076c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3304      	adds	r3, #4
 80076d0:	4619      	mov	r1, r3
 80076d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	f7fd f8b2 	bl	8004840 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80076dc:	2300      	movs	r3, #0
 80076de:	613b      	str	r3, [r7, #16]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	613b      	str	r3, [r7, #16]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	613b      	str	r3, [r7, #16]
 80076f0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	330c      	adds	r3, #12
 8007700:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800770a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800770c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007710:	65bb      	str	r3, [r7, #88]	; 0x58
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	330c      	adds	r3, #12
 8007718:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800771a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800771c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007720:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e5      	bne.n	80076fa <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3314      	adds	r3, #20
 8007734:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	f043 0301 	orr.w	r3, r3, #1
 8007744:	657b      	str	r3, [r7, #84]	; 0x54
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3314      	adds	r3, #20
 800774c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800774e:	63ba      	str	r2, [r7, #56]	; 0x38
 8007750:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e5      	bne.n	800772e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3314      	adds	r3, #20
 8007768:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	617b      	str	r3, [r7, #20]
   return(result);
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007778:	653b      	str	r3, [r7, #80]	; 0x50
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3314      	adds	r3, #20
 8007780:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007782:	627a      	str	r2, [r7, #36]	; 0x24
 8007784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	6a39      	ldr	r1, [r7, #32]
 8007788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800778a:	e841 2300 	strex	r3, r2, [r1]
 800778e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1e5      	bne.n	8007762 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3760      	adds	r7, #96	; 0x60
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	0800747d 	.word	0x0800747d
 80077a4:	080075a7 	.word	0x080075a7
 80077a8:	080075e1 	.word	0x080075e1

080077ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b089      	sub	sp, #36	; 0x24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	330c      	adds	r3, #12
 80077ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	e853 3f00 	ldrex	r3, [r3]
 80077c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	330c      	adds	r3, #12
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	61ba      	str	r2, [r7, #24]
 80077d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	6979      	ldr	r1, [r7, #20]
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	e841 2300 	strex	r3, r2, [r1]
 80077e0:	613b      	str	r3, [r7, #16]
   return(result);
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e5      	bne.n	80077b4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2220      	movs	r2, #32
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80077f0:	bf00      	nop
 80077f2:	3724      	adds	r7, #36	; 0x24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b095      	sub	sp, #84	; 0x54
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	330c      	adds	r3, #12
 800780a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800781a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	330c      	adds	r3, #12
 8007822:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007824:	643a      	str	r2, [r7, #64]	; 0x40
 8007826:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800782a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e5      	bne.n	8007804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3314      	adds	r3, #20
 800783e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	61fb      	str	r3, [r7, #28]
   return(result);
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	f023 0301 	bic.w	r3, r3, #1
 800784e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3314      	adds	r3, #20
 8007856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007858:	62fa      	str	r2, [r7, #44]	; 0x2c
 800785a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800785e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e5      	bne.n	8007838 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	2b01      	cmp	r3, #1
 8007872:	d119      	bne.n	80078a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	330c      	adds	r3, #12
 800787a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	60bb      	str	r3, [r7, #8]
   return(result);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f023 0310 	bic.w	r3, r3, #16
 800788a:	647b      	str	r3, [r7, #68]	; 0x44
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	330c      	adds	r3, #12
 8007892:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007894:	61ba      	str	r2, [r7, #24]
 8007896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6979      	ldr	r1, [r7, #20]
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	613b      	str	r3, [r7, #16]
   return(result);
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e5      	bne.n	8007874 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2220      	movs	r2, #32
 80078ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078b6:	bf00      	nop
 80078b8:	3754      	adds	r7, #84	; 0x54
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
	...

080078c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c8:	b09f      	sub	sp, #124	; 0x7c
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80078d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078da:	68d9      	ldr	r1, [r3, #12]
 80078dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	ea40 0301 	orr.w	r3, r0, r1
 80078e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	431a      	orrs	r2, r3
 80078f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	431a      	orrs	r2, r3
 80078f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80078fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007908:	f021 010c 	bic.w	r1, r1, #12
 800790c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007912:	430b      	orrs	r3, r1
 8007914:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007922:	6999      	ldr	r1, [r3, #24]
 8007924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	ea40 0301 	orr.w	r3, r0, r1
 800792c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800792e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	4bc5      	ldr	r3, [pc, #788]	; (8007c48 <UART_SetConfig+0x384>)
 8007934:	429a      	cmp	r2, r3
 8007936:	d004      	beq.n	8007942 <UART_SetConfig+0x7e>
 8007938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	4bc3      	ldr	r3, [pc, #780]	; (8007c4c <UART_SetConfig+0x388>)
 800793e:	429a      	cmp	r2, r3
 8007940:	d103      	bne.n	800794a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007942:	f7fd fd25 	bl	8005390 <HAL_RCC_GetPCLK2Freq>
 8007946:	6778      	str	r0, [r7, #116]	; 0x74
 8007948:	e002      	b.n	8007950 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800794a:	f7fd fd0d 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 800794e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007958:	f040 80b6 	bne.w	8007ac8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800795c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800795e:	461c      	mov	r4, r3
 8007960:	f04f 0500 	mov.w	r5, #0
 8007964:	4622      	mov	r2, r4
 8007966:	462b      	mov	r3, r5
 8007968:	1891      	adds	r1, r2, r2
 800796a:	6439      	str	r1, [r7, #64]	; 0x40
 800796c:	415b      	adcs	r3, r3
 800796e:	647b      	str	r3, [r7, #68]	; 0x44
 8007970:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007974:	1912      	adds	r2, r2, r4
 8007976:	eb45 0303 	adc.w	r3, r5, r3
 800797a:	f04f 0000 	mov.w	r0, #0
 800797e:	f04f 0100 	mov.w	r1, #0
 8007982:	00d9      	lsls	r1, r3, #3
 8007984:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007988:	00d0      	lsls	r0, r2, #3
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	1911      	adds	r1, r2, r4
 8007990:	6639      	str	r1, [r7, #96]	; 0x60
 8007992:	416b      	adcs	r3, r5
 8007994:	667b      	str	r3, [r7, #100]	; 0x64
 8007996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	461a      	mov	r2, r3
 800799c:	f04f 0300 	mov.w	r3, #0
 80079a0:	1891      	adds	r1, r2, r2
 80079a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80079a4:	415b      	adcs	r3, r3
 80079a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80079ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80079b0:	f7f9 f91c 	bl	8000bec <__aeabi_uldivmod>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4ba5      	ldr	r3, [pc, #660]	; (8007c50 <UART_SetConfig+0x38c>)
 80079ba:	fba3 2302 	umull	r2, r3, r3, r2
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	011e      	lsls	r6, r3, #4
 80079c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079c4:	461c      	mov	r4, r3
 80079c6:	f04f 0500 	mov.w	r5, #0
 80079ca:	4622      	mov	r2, r4
 80079cc:	462b      	mov	r3, r5
 80079ce:	1891      	adds	r1, r2, r2
 80079d0:	6339      	str	r1, [r7, #48]	; 0x30
 80079d2:	415b      	adcs	r3, r3
 80079d4:	637b      	str	r3, [r7, #52]	; 0x34
 80079d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80079da:	1912      	adds	r2, r2, r4
 80079dc:	eb45 0303 	adc.w	r3, r5, r3
 80079e0:	f04f 0000 	mov.w	r0, #0
 80079e4:	f04f 0100 	mov.w	r1, #0
 80079e8:	00d9      	lsls	r1, r3, #3
 80079ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80079ee:	00d0      	lsls	r0, r2, #3
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	1911      	adds	r1, r2, r4
 80079f6:	65b9      	str	r1, [r7, #88]	; 0x58
 80079f8:	416b      	adcs	r3, r5
 80079fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	461a      	mov	r2, r3
 8007a02:	f04f 0300 	mov.w	r3, #0
 8007a06:	1891      	adds	r1, r2, r2
 8007a08:	62b9      	str	r1, [r7, #40]	; 0x28
 8007a0a:	415b      	adcs	r3, r3
 8007a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a12:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007a16:	f7f9 f8e9 	bl	8000bec <__aeabi_uldivmod>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4b8c      	ldr	r3, [pc, #560]	; (8007c50 <UART_SetConfig+0x38c>)
 8007a20:	fba3 1302 	umull	r1, r3, r3, r2
 8007a24:	095b      	lsrs	r3, r3, #5
 8007a26:	2164      	movs	r1, #100	; 0x64
 8007a28:	fb01 f303 	mul.w	r3, r1, r3
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	3332      	adds	r3, #50	; 0x32
 8007a32:	4a87      	ldr	r2, [pc, #540]	; (8007c50 <UART_SetConfig+0x38c>)
 8007a34:	fba2 2303 	umull	r2, r3, r2, r3
 8007a38:	095b      	lsrs	r3, r3, #5
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a40:	441e      	add	r6, r3
 8007a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a44:	4618      	mov	r0, r3
 8007a46:	f04f 0100 	mov.w	r1, #0
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	1894      	adds	r4, r2, r2
 8007a50:	623c      	str	r4, [r7, #32]
 8007a52:	415b      	adcs	r3, r3
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
 8007a56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a5a:	1812      	adds	r2, r2, r0
 8007a5c:	eb41 0303 	adc.w	r3, r1, r3
 8007a60:	f04f 0400 	mov.w	r4, #0
 8007a64:	f04f 0500 	mov.w	r5, #0
 8007a68:	00dd      	lsls	r5, r3, #3
 8007a6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a6e:	00d4      	lsls	r4, r2, #3
 8007a70:	4622      	mov	r2, r4
 8007a72:	462b      	mov	r3, r5
 8007a74:	1814      	adds	r4, r2, r0
 8007a76:	653c      	str	r4, [r7, #80]	; 0x50
 8007a78:	414b      	adcs	r3, r1
 8007a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8007a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	461a      	mov	r2, r3
 8007a82:	f04f 0300 	mov.w	r3, #0
 8007a86:	1891      	adds	r1, r2, r2
 8007a88:	61b9      	str	r1, [r7, #24]
 8007a8a:	415b      	adcs	r3, r3
 8007a8c:	61fb      	str	r3, [r7, #28]
 8007a8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a92:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007a96:	f7f9 f8a9 	bl	8000bec <__aeabi_uldivmod>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4b6c      	ldr	r3, [pc, #432]	; (8007c50 <UART_SetConfig+0x38c>)
 8007aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8007aa4:	095b      	lsrs	r3, r3, #5
 8007aa6:	2164      	movs	r1, #100	; 0x64
 8007aa8:	fb01 f303 	mul.w	r3, r1, r3
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	3332      	adds	r3, #50	; 0x32
 8007ab2:	4a67      	ldr	r2, [pc, #412]	; (8007c50 <UART_SetConfig+0x38c>)
 8007ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	f003 0207 	and.w	r2, r3, #7
 8007abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4432      	add	r2, r6
 8007ac4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ac6:	e0b9      	b.n	8007c3c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aca:	461c      	mov	r4, r3
 8007acc:	f04f 0500 	mov.w	r5, #0
 8007ad0:	4622      	mov	r2, r4
 8007ad2:	462b      	mov	r3, r5
 8007ad4:	1891      	adds	r1, r2, r2
 8007ad6:	6139      	str	r1, [r7, #16]
 8007ad8:	415b      	adcs	r3, r3
 8007ada:	617b      	str	r3, [r7, #20]
 8007adc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ae0:	1912      	adds	r2, r2, r4
 8007ae2:	eb45 0303 	adc.w	r3, r5, r3
 8007ae6:	f04f 0000 	mov.w	r0, #0
 8007aea:	f04f 0100 	mov.w	r1, #0
 8007aee:	00d9      	lsls	r1, r3, #3
 8007af0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007af4:	00d0      	lsls	r0, r2, #3
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	eb12 0804 	adds.w	r8, r2, r4
 8007afe:	eb43 0905 	adc.w	r9, r3, r5
 8007b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f04f 0100 	mov.w	r1, #0
 8007b0c:	f04f 0200 	mov.w	r2, #0
 8007b10:	f04f 0300 	mov.w	r3, #0
 8007b14:	008b      	lsls	r3, r1, #2
 8007b16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b1a:	0082      	lsls	r2, r0, #2
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	4649      	mov	r1, r9
 8007b20:	f7f9 f864 	bl	8000bec <__aeabi_uldivmod>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4b49      	ldr	r3, [pc, #292]	; (8007c50 <UART_SetConfig+0x38c>)
 8007b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b2e:	095b      	lsrs	r3, r3, #5
 8007b30:	011e      	lsls	r6, r3, #4
 8007b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b34:	4618      	mov	r0, r3
 8007b36:	f04f 0100 	mov.w	r1, #0
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	1894      	adds	r4, r2, r2
 8007b40:	60bc      	str	r4, [r7, #8]
 8007b42:	415b      	adcs	r3, r3
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b4a:	1812      	adds	r2, r2, r0
 8007b4c:	eb41 0303 	adc.w	r3, r1, r3
 8007b50:	f04f 0400 	mov.w	r4, #0
 8007b54:	f04f 0500 	mov.w	r5, #0
 8007b58:	00dd      	lsls	r5, r3, #3
 8007b5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b5e:	00d4      	lsls	r4, r2, #3
 8007b60:	4622      	mov	r2, r4
 8007b62:	462b      	mov	r3, r5
 8007b64:	1814      	adds	r4, r2, r0
 8007b66:	64bc      	str	r4, [r7, #72]	; 0x48
 8007b68:	414b      	adcs	r3, r1
 8007b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f04f 0100 	mov.w	r1, #0
 8007b76:	f04f 0200 	mov.w	r2, #0
 8007b7a:	f04f 0300 	mov.w	r3, #0
 8007b7e:	008b      	lsls	r3, r1, #2
 8007b80:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b84:	0082      	lsls	r2, r0, #2
 8007b86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007b8a:	f7f9 f82f 	bl	8000bec <__aeabi_uldivmod>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	4b2f      	ldr	r3, [pc, #188]	; (8007c50 <UART_SetConfig+0x38c>)
 8007b94:	fba3 1302 	umull	r1, r3, r3, r2
 8007b98:	095b      	lsrs	r3, r3, #5
 8007b9a:	2164      	movs	r1, #100	; 0x64
 8007b9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	011b      	lsls	r3, r3, #4
 8007ba4:	3332      	adds	r3, #50	; 0x32
 8007ba6:	4a2a      	ldr	r2, [pc, #168]	; (8007c50 <UART_SetConfig+0x38c>)
 8007ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bac:	095b      	lsrs	r3, r3, #5
 8007bae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bb2:	441e      	add	r6, r3
 8007bb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f04f 0100 	mov.w	r1, #0
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	1894      	adds	r4, r2, r2
 8007bc2:	603c      	str	r4, [r7, #0]
 8007bc4:	415b      	adcs	r3, r3
 8007bc6:	607b      	str	r3, [r7, #4]
 8007bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bcc:	1812      	adds	r2, r2, r0
 8007bce:	eb41 0303 	adc.w	r3, r1, r3
 8007bd2:	f04f 0400 	mov.w	r4, #0
 8007bd6:	f04f 0500 	mov.w	r5, #0
 8007bda:	00dd      	lsls	r5, r3, #3
 8007bdc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007be0:	00d4      	lsls	r4, r2, #3
 8007be2:	4622      	mov	r2, r4
 8007be4:	462b      	mov	r3, r5
 8007be6:	eb12 0a00 	adds.w	sl, r2, r0
 8007bea:	eb43 0b01 	adc.w	fp, r3, r1
 8007bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f04f 0100 	mov.w	r1, #0
 8007bf8:	f04f 0200 	mov.w	r2, #0
 8007bfc:	f04f 0300 	mov.w	r3, #0
 8007c00:	008b      	lsls	r3, r1, #2
 8007c02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c06:	0082      	lsls	r2, r0, #2
 8007c08:	4650      	mov	r0, sl
 8007c0a:	4659      	mov	r1, fp
 8007c0c:	f7f8 ffee 	bl	8000bec <__aeabi_uldivmod>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4b0e      	ldr	r3, [pc, #56]	; (8007c50 <UART_SetConfig+0x38c>)
 8007c16:	fba3 1302 	umull	r1, r3, r3, r2
 8007c1a:	095b      	lsrs	r3, r3, #5
 8007c1c:	2164      	movs	r1, #100	; 0x64
 8007c1e:	fb01 f303 	mul.w	r3, r1, r3
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	011b      	lsls	r3, r3, #4
 8007c26:	3332      	adds	r3, #50	; 0x32
 8007c28:	4a09      	ldr	r2, [pc, #36]	; (8007c50 <UART_SetConfig+0x38c>)
 8007c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c2e:	095b      	lsrs	r3, r3, #5
 8007c30:	f003 020f 	and.w	r2, r3, #15
 8007c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4432      	add	r2, r6
 8007c3a:	609a      	str	r2, [r3, #8]
}
 8007c3c:	bf00      	nop
 8007c3e:	377c      	adds	r7, #124	; 0x7c
 8007c40:	46bd      	mov	sp, r7
 8007c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c46:	bf00      	nop
 8007c48:	40011000 	.word	0x40011000
 8007c4c:	40011400 	.word	0x40011400
 8007c50:	51eb851f 	.word	0x51eb851f

08007c54 <__NVIC_SetPriority>:
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	6039      	str	r1, [r7, #0]
 8007c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	db0a      	blt.n	8007c7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	490c      	ldr	r1, [pc, #48]	; (8007ca0 <__NVIC_SetPriority+0x4c>)
 8007c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c72:	0112      	lsls	r2, r2, #4
 8007c74:	b2d2      	uxtb	r2, r2
 8007c76:	440b      	add	r3, r1
 8007c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c7c:	e00a      	b.n	8007c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	4908      	ldr	r1, [pc, #32]	; (8007ca4 <__NVIC_SetPriority+0x50>)
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	f003 030f 	and.w	r3, r3, #15
 8007c8a:	3b04      	subs	r3, #4
 8007c8c:	0112      	lsls	r2, r2, #4
 8007c8e:	b2d2      	uxtb	r2, r2
 8007c90:	440b      	add	r3, r1
 8007c92:	761a      	strb	r2, [r3, #24]
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	e000e100 	.word	0xe000e100
 8007ca4:	e000ed00 	.word	0xe000ed00

08007ca8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007cac:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <SysTick_Handler+0x1c>)
 8007cae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007cb0:	f001 fe6c 	bl	800998c <xTaskGetSchedulerState>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d001      	beq.n	8007cbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007cba:	f002 fc55 	bl	800a568 <xPortSysTickHandler>
  }
}
 8007cbe:	bf00      	nop
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	e000e010 	.word	0xe000e010

08007cc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007ccc:	2100      	movs	r1, #0
 8007cce:	f06f 0004 	mvn.w	r0, #4
 8007cd2:	f7ff ffbf 	bl	8007c54 <__NVIC_SetPriority>
#endif
}
 8007cd6:	bf00      	nop
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ce2:	f3ef 8305 	mrs	r3, IPSR
 8007ce6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ce8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007cee:	f06f 0305 	mvn.w	r3, #5
 8007cf2:	607b      	str	r3, [r7, #4]
 8007cf4:	e00c      	b.n	8007d10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007cf6:	4b0a      	ldr	r3, [pc, #40]	; (8007d20 <osKernelInitialize+0x44>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d105      	bne.n	8007d0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007cfe:	4b08      	ldr	r3, [pc, #32]	; (8007d20 <osKernelInitialize+0x44>)
 8007d00:	2201      	movs	r2, #1
 8007d02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	607b      	str	r3, [r7, #4]
 8007d08:	e002      	b.n	8007d10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d10:	687b      	ldr	r3, [r7, #4]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	200000a0 	.word	0x200000a0

08007d24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d2a:	f3ef 8305 	mrs	r3, IPSR
 8007d2e:	603b      	str	r3, [r7, #0]
  return(result);
 8007d30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007d36:	f06f 0305 	mvn.w	r3, #5
 8007d3a:	607b      	str	r3, [r7, #4]
 8007d3c:	e010      	b.n	8007d60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d3e:	4b0b      	ldr	r3, [pc, #44]	; (8007d6c <osKernelStart+0x48>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d109      	bne.n	8007d5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d46:	f7ff ffbf 	bl	8007cc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d4a:	4b08      	ldr	r3, [pc, #32]	; (8007d6c <osKernelStart+0x48>)
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d50:	f001 f9c2 	bl	80090d8 <vTaskStartScheduler>
      stat = osOK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	607b      	str	r3, [r7, #4]
 8007d58:	e002      	b.n	8007d60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d60:	687b      	ldr	r3, [r7, #4]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	200000a0 	.word	0x200000a0

08007d70 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d76:	f3ef 8305 	mrs	r3, IPSR
 8007d7a:	603b      	str	r3, [r7, #0]
  return(result);
 8007d7c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8007d82:	f001 facb 	bl	800931c <xTaskGetTickCountFromISR>
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	e002      	b.n	8007d90 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8007d8a:	f001 fab7 	bl	80092fc <xTaskGetTickCount>
 8007d8e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8007d90:	687b      	ldr	r3, [r7, #4]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b08e      	sub	sp, #56	; 0x38
 8007d9e:	af04      	add	r7, sp, #16
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	60b9      	str	r1, [r7, #8]
 8007da4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007daa:	f3ef 8305 	mrs	r3, IPSR
 8007dae:	617b      	str	r3, [r7, #20]
  return(result);
 8007db0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d17e      	bne.n	8007eb4 <osThreadNew+0x11a>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d07b      	beq.n	8007eb4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007dbc:	2380      	movs	r3, #128	; 0x80
 8007dbe:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007dc0:	2318      	movs	r3, #24
 8007dc2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dcc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d045      	beq.n	8007e60 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <osThreadNew+0x48>
        name = attr->name;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d002      	beq.n	8007df0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d008      	beq.n	8007e08 <osThreadNew+0x6e>
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	2b38      	cmp	r3, #56	; 0x38
 8007dfa:	d805      	bhi.n	8007e08 <osThreadNew+0x6e>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <osThreadNew+0x72>
        return (NULL);
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e054      	b.n	8007eb6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	089b      	lsrs	r3, r3, #2
 8007e1a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00e      	beq.n	8007e42 <osThreadNew+0xa8>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	2b5b      	cmp	r3, #91	; 0x5b
 8007e2a:	d90a      	bls.n	8007e42 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d006      	beq.n	8007e42 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <osThreadNew+0xa8>
        mem = 1;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	61bb      	str	r3, [r7, #24]
 8007e40:	e010      	b.n	8007e64 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10c      	bne.n	8007e64 <osThreadNew+0xca>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d108      	bne.n	8007e64 <osThreadNew+0xca>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d104      	bne.n	8007e64 <osThreadNew+0xca>
          mem = 0;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	61bb      	str	r3, [r7, #24]
 8007e5e:	e001      	b.n	8007e64 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d110      	bne.n	8007e8c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e72:	9202      	str	r2, [sp, #8]
 8007e74:	9301      	str	r3, [sp, #4]
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	6a3a      	ldr	r2, [r7, #32]
 8007e7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f000 fe4d 	bl	8008b20 <xTaskCreateStatic>
 8007e86:	4603      	mov	r3, r0
 8007e88:	613b      	str	r3, [r7, #16]
 8007e8a:	e013      	b.n	8007eb4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d110      	bne.n	8007eb4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	f107 0310 	add.w	r3, r7, #16
 8007e9a:	9301      	str	r3, [sp, #4]
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 fe98 	bl	8008bda <xTaskCreate>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d001      	beq.n	8007eb4 <osThreadNew+0x11a>
            hTask = NULL;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007eb4:	693b      	ldr	r3, [r7, #16]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3728      	adds	r7, #40	; 0x28
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b086      	sub	sp, #24
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eca:	f3ef 8305 	mrs	r3, IPSR
 8007ece:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <osThreadSuspend+0x20>
    stat = osErrorISR;
 8007ed6:	f06f 0305 	mvn.w	r3, #5
 8007eda:	617b      	str	r3, [r7, #20]
 8007edc:	e00b      	b.n	8007ef6 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d103      	bne.n	8007eec <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8007ee4:	f06f 0303 	mvn.w	r3, #3
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	e004      	b.n	8007ef6 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8007ef0:	6938      	ldr	r0, [r7, #16]
 8007ef2:	f000 ffeb 	bl	8008ecc <vTaskSuspend>
  }

  return (stat);
 8007ef6:	697b      	ldr	r3, [r7, #20]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f0c:	f3ef 8305 	mrs	r3, IPSR
 8007f10:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f12:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <osThreadResume+0x20>
    stat = osErrorISR;
 8007f18:	f06f 0305 	mvn.w	r3, #5
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	e00b      	b.n	8007f38 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d103      	bne.n	8007f2e <osThreadResume+0x2e>
    stat = osErrorParameter;
 8007f26:	f06f 0303 	mvn.w	r3, #3
 8007f2a:	617b      	str	r3, [r7, #20]
 8007f2c:	e004      	b.n	8007f38 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8007f32:	6938      	ldr	r0, [r7, #16]
 8007f34:	f001 f872 	bl	800901c <vTaskResume>
  }

  return (stat);
 8007f38:	697b      	ldr	r3, [r7, #20]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3718      	adds	r7, #24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f4a:	f3ef 8305 	mrs	r3, IPSR
 8007f4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <osDelay+0x1c>
    stat = osErrorISR;
 8007f56:	f06f 0305 	mvn.w	r3, #5
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	e007      	b.n	8007f6e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d002      	beq.n	8007f6e <osDelay+0x2c>
      vTaskDelay(ticks);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 ff7b 	bl	8008e64 <vTaskDelay>
    }
  }

  return (stat);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4a07      	ldr	r2, [pc, #28]	; (8007fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	4a06      	ldr	r2, [pc, #24]	; (8007fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8007f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2280      	movs	r2, #128	; 0x80
 8007f94:	601a      	str	r2, [r3, #0]
}
 8007f96:	bf00      	nop
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	200000a4 	.word	0x200000a4
 8007fa8:	20000100 	.word	0x20000100

08007fac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4a07      	ldr	r2, [pc, #28]	; (8007fd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8007fbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	4a06      	ldr	r2, [pc, #24]	; (8007fdc <vApplicationGetTimerTaskMemory+0x30>)
 8007fc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fca:	601a      	str	r2, [r3, #0]
}
 8007fcc:	bf00      	nop
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	20000300 	.word	0x20000300
 8007fdc:	2000035c 	.word	0x2000035c

08007fe0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f103 0208 	add.w	r2, r3, #8
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ff8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f103 0208 	add.w	r2, r3, #8
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f103 0208 	add.w	r2, r3, #8
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800803a:	b480      	push	{r7}
 800803c:	b085      	sub	sp, #20
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	689a      	ldr	r2, [r3, #8]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	601a      	str	r2, [r3, #0]
}
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008082:	b480      	push	{r7}
 8008084:	b085      	sub	sp, #20
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008098:	d103      	bne.n	80080a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	e00c      	b.n	80080bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	3308      	adds	r3, #8
 80080a6:	60fb      	str	r3, [r7, #12]
 80080a8:	e002      	b.n	80080b0 <vListInsert+0x2e>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d2f6      	bcs.n	80080aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	1c5a      	adds	r2, r3, #1
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	601a      	str	r2, [r3, #0]
}
 80080e8:	bf00      	nop
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	6892      	ldr	r2, [r2, #8]
 800810a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	6852      	ldr	r2, [r2, #4]
 8008114:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	429a      	cmp	r2, r3
 800811e:	d103      	bne.n	8008128 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	1e5a      	subs	r2, r3, #1
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10a      	bne.n	8008172 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800816e:	bf00      	nop
 8008170:	e7fe      	b.n	8008170 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008172:	f002 f967 	bl	800a444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817e:	68f9      	ldr	r1, [r7, #12]
 8008180:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008182:	fb01 f303 	mul.w	r3, r1, r3
 8008186:	441a      	add	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a2:	3b01      	subs	r3, #1
 80081a4:	68f9      	ldr	r1, [r7, #12]
 80081a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081a8:	fb01 f303 	mul.w	r3, r1, r3
 80081ac:	441a      	add	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	22ff      	movs	r2, #255	; 0xff
 80081b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	22ff      	movs	r2, #255	; 0xff
 80081be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d114      	bne.n	80081f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d01a      	beq.n	8008206 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	3310      	adds	r3, #16
 80081d4:	4618      	mov	r0, r3
 80081d6:	f001 fa1b 	bl	8009610 <xTaskRemoveFromEventList>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d012      	beq.n	8008206 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80081e0:	4b0c      	ldr	r3, [pc, #48]	; (8008214 <xQueueGenericReset+0xcc>)
 80081e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	e009      	b.n	8008206 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3310      	adds	r3, #16
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7ff fef2 	bl	8007fe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	3324      	adds	r3, #36	; 0x24
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff feed 	bl	8007fe0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008206:	f002 f94d 	bl	800a4a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800820a:	2301      	movs	r3, #1
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	e000ed04 	.word	0xe000ed04

08008218 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08e      	sub	sp, #56	; 0x38
 800821c:	af02      	add	r7, sp, #8
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10a      	bne.n	8008242 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800823e:	bf00      	nop
 8008240:	e7fe      	b.n	8008240 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
}
 800825a:	bf00      	nop
 800825c:	e7fe      	b.n	800825c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d002      	beq.n	800826a <xQueueGenericCreateStatic+0x52>
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <xQueueGenericCreateStatic+0x56>
 800826a:	2301      	movs	r3, #1
 800826c:	e000      	b.n	8008270 <xQueueGenericCreateStatic+0x58>
 800826e:	2300      	movs	r3, #0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10a      	bne.n	800828a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	623b      	str	r3, [r7, #32]
}
 8008286:	bf00      	nop
 8008288:	e7fe      	b.n	8008288 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d102      	bne.n	8008296 <xQueueGenericCreateStatic+0x7e>
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <xQueueGenericCreateStatic+0x82>
 8008296:	2301      	movs	r3, #1
 8008298:	e000      	b.n	800829c <xQueueGenericCreateStatic+0x84>
 800829a:	2300      	movs	r3, #0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10a      	bne.n	80082b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	61fb      	str	r3, [r7, #28]
}
 80082b2:	bf00      	nop
 80082b4:	e7fe      	b.n	80082b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082b6:	2350      	movs	r3, #80	; 0x50
 80082b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2b50      	cmp	r3, #80	; 0x50
 80082be:	d00a      	beq.n	80082d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	61bb      	str	r3, [r7, #24]
}
 80082d2:	bf00      	nop
 80082d4:	e7fe      	b.n	80082d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80082d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80082dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00d      	beq.n	80082fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80082e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	4613      	mov	r3, r2
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	68b9      	ldr	r1, [r7, #8]
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 f805 	bl	8008308 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008300:	4618      	mov	r0, r3
 8008302:	3730      	adds	r7, #48	; 0x30
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
 8008314:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d103      	bne.n	8008324 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	69ba      	ldr	r2, [r7, #24]
 8008320:	601a      	str	r2, [r3, #0]
 8008322:	e002      	b.n	800832a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008336:	2101      	movs	r1, #1
 8008338:	69b8      	ldr	r0, [r7, #24]
 800833a:	f7ff ff05 	bl	8008148 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	78fa      	ldrb	r2, [r7, #3]
 8008342:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008346:	bf00      	nop
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
	...

08008350 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08e      	sub	sp, #56	; 0x38
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800835e:	2300      	movs	r3, #0
 8008360:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10a      	bne.n	8008382 <xQueueGenericSend+0x32>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800837e:	bf00      	nop
 8008380:	e7fe      	b.n	8008380 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d103      	bne.n	8008390 <xQueueGenericSend+0x40>
 8008388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <xQueueGenericSend+0x44>
 8008390:	2301      	movs	r3, #1
 8008392:	e000      	b.n	8008396 <xQueueGenericSend+0x46>
 8008394:	2300      	movs	r3, #0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10a      	bne.n	80083b0 <xQueueGenericSend+0x60>
	__asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083ac:	bf00      	nop
 80083ae:	e7fe      	b.n	80083ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d103      	bne.n	80083be <xQueueGenericSend+0x6e>
 80083b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d101      	bne.n	80083c2 <xQueueGenericSend+0x72>
 80083be:	2301      	movs	r3, #1
 80083c0:	e000      	b.n	80083c4 <xQueueGenericSend+0x74>
 80083c2:	2300      	movs	r3, #0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10a      	bne.n	80083de <xQueueGenericSend+0x8e>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	623b      	str	r3, [r7, #32]
}
 80083da:	bf00      	nop
 80083dc:	e7fe      	b.n	80083dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083de:	f001 fad5 	bl	800998c <xTaskGetSchedulerState>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d102      	bne.n	80083ee <xQueueGenericSend+0x9e>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <xQueueGenericSend+0xa2>
 80083ee:	2301      	movs	r3, #1
 80083f0:	e000      	b.n	80083f4 <xQueueGenericSend+0xa4>
 80083f2:	2300      	movs	r3, #0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10a      	bne.n	800840e <xQueueGenericSend+0xbe>
	__asm volatile
 80083f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	61fb      	str	r3, [r7, #28]
}
 800840a:	bf00      	nop
 800840c:	e7fe      	b.n	800840c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800840e:	f002 f819 	bl	800a444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841a:	429a      	cmp	r2, r3
 800841c:	d302      	bcc.n	8008424 <xQueueGenericSend+0xd4>
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b02      	cmp	r3, #2
 8008422:	d129      	bne.n	8008478 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	68b9      	ldr	r1, [r7, #8]
 8008428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800842a:	f000 fa0b 	bl	8008844 <prvCopyDataToQueue>
 800842e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	2b00      	cmp	r3, #0
 8008436:	d010      	beq.n	800845a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	3324      	adds	r3, #36	; 0x24
 800843c:	4618      	mov	r0, r3
 800843e:	f001 f8e7 	bl	8009610 <xTaskRemoveFromEventList>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d013      	beq.n	8008470 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008448:	4b3f      	ldr	r3, [pc, #252]	; (8008548 <xQueueGenericSend+0x1f8>)
 800844a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	e00a      	b.n	8008470 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800845a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845c:	2b00      	cmp	r3, #0
 800845e:	d007      	beq.n	8008470 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008460:	4b39      	ldr	r3, [pc, #228]	; (8008548 <xQueueGenericSend+0x1f8>)
 8008462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008470:	f002 f818 	bl	800a4a4 <vPortExitCritical>
				return pdPASS;
 8008474:	2301      	movs	r3, #1
 8008476:	e063      	b.n	8008540 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d103      	bne.n	8008486 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800847e:	f002 f811 	bl	800a4a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008482:	2300      	movs	r3, #0
 8008484:	e05c      	b.n	8008540 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008488:	2b00      	cmp	r3, #0
 800848a:	d106      	bne.n	800849a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800848c:	f107 0314 	add.w	r3, r7, #20
 8008490:	4618      	mov	r0, r3
 8008492:	f001 f921 	bl	80096d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008496:	2301      	movs	r3, #1
 8008498:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800849a:	f002 f803 	bl	800a4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800849e:	f000 fe81 	bl	80091a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084a2:	f001 ffcf 	bl	800a444 <vPortEnterCritical>
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084ac:	b25b      	sxtb	r3, r3
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084b2:	d103      	bne.n	80084bc <xQueueGenericSend+0x16c>
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084c2:	b25b      	sxtb	r3, r3
 80084c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084c8:	d103      	bne.n	80084d2 <xQueueGenericSend+0x182>
 80084ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084d2:	f001 ffe7 	bl	800a4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084d6:	1d3a      	adds	r2, r7, #4
 80084d8:	f107 0314 	add.w	r3, r7, #20
 80084dc:	4611      	mov	r1, r2
 80084de:	4618      	mov	r0, r3
 80084e0:	f001 f910 	bl	8009704 <xTaskCheckForTimeOut>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d124      	bne.n	8008534 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80084ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084ec:	f000 faa2 	bl	8008a34 <prvIsQueueFull>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d018      	beq.n	8008528 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	3310      	adds	r3, #16
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	4611      	mov	r1, r2
 80084fe:	4618      	mov	r0, r3
 8008500:	f001 f836 	bl	8009570 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008506:	f000 fa2d 	bl	8008964 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800850a:	f000 fe59 	bl	80091c0 <xTaskResumeAll>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	f47f af7c 	bne.w	800840e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008516:	4b0c      	ldr	r3, [pc, #48]	; (8008548 <xQueueGenericSend+0x1f8>)
 8008518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	e772      	b.n	800840e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800852a:	f000 fa1b 	bl	8008964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800852e:	f000 fe47 	bl	80091c0 <xTaskResumeAll>
 8008532:	e76c      	b.n	800840e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008536:	f000 fa15 	bl	8008964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800853a:	f000 fe41 	bl	80091c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800853e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008540:	4618      	mov	r0, r3
 8008542:	3738      	adds	r7, #56	; 0x38
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	e000ed04 	.word	0xe000ed04

0800854c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b090      	sub	sp, #64	; 0x40
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
 8008558:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800855e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10a      	bne.n	800857a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008576:	bf00      	nop
 8008578:	e7fe      	b.n	8008578 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d103      	bne.n	8008588 <xQueueGenericSendFromISR+0x3c>
 8008580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <xQueueGenericSendFromISR+0x40>
 8008588:	2301      	movs	r3, #1
 800858a:	e000      	b.n	800858e <xQueueGenericSendFromISR+0x42>
 800858c:	2300      	movs	r3, #0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10a      	bne.n	80085a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085a4:	bf00      	nop
 80085a6:	e7fe      	b.n	80085a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d103      	bne.n	80085b6 <xQueueGenericSendFromISR+0x6a>
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d101      	bne.n	80085ba <xQueueGenericSendFromISR+0x6e>
 80085b6:	2301      	movs	r3, #1
 80085b8:	e000      	b.n	80085bc <xQueueGenericSendFromISR+0x70>
 80085ba:	2300      	movs	r3, #0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10a      	bne.n	80085d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	623b      	str	r3, [r7, #32]
}
 80085d2:	bf00      	nop
 80085d4:	e7fe      	b.n	80085d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085d6:	f002 f817 	bl	800a608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80085da:	f3ef 8211 	mrs	r2, BASEPRI
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	61fa      	str	r2, [r7, #28]
 80085f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80085f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085fe:	429a      	cmp	r2, r3
 8008600:	d302      	bcc.n	8008608 <xQueueGenericSendFromISR+0xbc>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2b02      	cmp	r3, #2
 8008606:	d12f      	bne.n	8008668 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800860e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008616:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	68b9      	ldr	r1, [r7, #8]
 800861c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800861e:	f000 f911 	bl	8008844 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008622:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800862a:	d112      	bne.n	8008652 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	2b00      	cmp	r3, #0
 8008632:	d016      	beq.n	8008662 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008636:	3324      	adds	r3, #36	; 0x24
 8008638:	4618      	mov	r0, r3
 800863a:	f000 ffe9 	bl	8009610 <xTaskRemoveFromEventList>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00e      	beq.n	8008662 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00b      	beq.n	8008662 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	e007      	b.n	8008662 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008652:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008656:	3301      	adds	r3, #1
 8008658:	b2db      	uxtb	r3, r3
 800865a:	b25a      	sxtb	r2, r3
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008662:	2301      	movs	r3, #1
 8008664:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008666:	e001      	b.n	800866c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008668:	2300      	movs	r3, #0
 800866a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800866c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008676:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800867a:	4618      	mov	r0, r3
 800867c:	3740      	adds	r7, #64	; 0x40
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b08c      	sub	sp, #48	; 0x30
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008690:	2300      	movs	r3, #0
 8008692:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10a      	bne.n	80086b4 <xQueueReceive+0x30>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	623b      	str	r3, [r7, #32]
}
 80086b0:	bf00      	nop
 80086b2:	e7fe      	b.n	80086b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d103      	bne.n	80086c2 <xQueueReceive+0x3e>
 80086ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <xQueueReceive+0x42>
 80086c2:	2301      	movs	r3, #1
 80086c4:	e000      	b.n	80086c8 <xQueueReceive+0x44>
 80086c6:	2300      	movs	r3, #0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10a      	bne.n	80086e2 <xQueueReceive+0x5e>
	__asm volatile
 80086cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	61fb      	str	r3, [r7, #28]
}
 80086de:	bf00      	nop
 80086e0:	e7fe      	b.n	80086e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086e2:	f001 f953 	bl	800998c <xTaskGetSchedulerState>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d102      	bne.n	80086f2 <xQueueReceive+0x6e>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <xQueueReceive+0x72>
 80086f2:	2301      	movs	r3, #1
 80086f4:	e000      	b.n	80086f8 <xQueueReceive+0x74>
 80086f6:	2300      	movs	r3, #0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10a      	bne.n	8008712 <xQueueReceive+0x8e>
	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	61bb      	str	r3, [r7, #24]
}
 800870e:	bf00      	nop
 8008710:	e7fe      	b.n	8008710 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008712:	f001 fe97 	bl	800a444 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	2b00      	cmp	r3, #0
 8008720:	d01f      	beq.n	8008762 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008722:	68b9      	ldr	r1, [r7, #8]
 8008724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008726:	f000 f8f7 	bl	8008918 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	1e5a      	subs	r2, r3, #1
 800872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008730:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00f      	beq.n	800875a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873c:	3310      	adds	r3, #16
 800873e:	4618      	mov	r0, r3
 8008740:	f000 ff66 	bl	8009610 <xTaskRemoveFromEventList>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d007      	beq.n	800875a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800874a:	4b3d      	ldr	r3, [pc, #244]	; (8008840 <xQueueReceive+0x1bc>)
 800874c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800875a:	f001 fea3 	bl	800a4a4 <vPortExitCritical>
				return pdPASS;
 800875e:	2301      	movs	r3, #1
 8008760:	e069      	b.n	8008836 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d103      	bne.n	8008770 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008768:	f001 fe9c 	bl	800a4a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800876c:	2300      	movs	r3, #0
 800876e:	e062      	b.n	8008836 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008772:	2b00      	cmp	r3, #0
 8008774:	d106      	bne.n	8008784 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008776:	f107 0310 	add.w	r3, r7, #16
 800877a:	4618      	mov	r0, r3
 800877c:	f000 ffac 	bl	80096d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008780:	2301      	movs	r3, #1
 8008782:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008784:	f001 fe8e 	bl	800a4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008788:	f000 fd0c 	bl	80091a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800878c:	f001 fe5a 	bl	800a444 <vPortEnterCritical>
 8008790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008792:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008796:	b25b      	sxtb	r3, r3
 8008798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800879c:	d103      	bne.n	80087a6 <xQueueReceive+0x122>
 800879e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087ac:	b25b      	sxtb	r3, r3
 80087ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087b2:	d103      	bne.n	80087bc <xQueueReceive+0x138>
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087bc:	f001 fe72 	bl	800a4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087c0:	1d3a      	adds	r2, r7, #4
 80087c2:	f107 0310 	add.w	r3, r7, #16
 80087c6:	4611      	mov	r1, r2
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 ff9b 	bl	8009704 <xTaskCheckForTimeOut>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d123      	bne.n	800881c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087d6:	f000 f917 	bl	8008a08 <prvIsQueueEmpty>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d017      	beq.n	8008810 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	3324      	adds	r3, #36	; 0x24
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	4611      	mov	r1, r2
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 fec1 	bl	8009570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087f0:	f000 f8b8 	bl	8008964 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087f4:	f000 fce4 	bl	80091c0 <xTaskResumeAll>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d189      	bne.n	8008712 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80087fe:	4b10      	ldr	r3, [pc, #64]	; (8008840 <xQueueReceive+0x1bc>)
 8008800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008804:	601a      	str	r2, [r3, #0]
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	e780      	b.n	8008712 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008812:	f000 f8a7 	bl	8008964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008816:	f000 fcd3 	bl	80091c0 <xTaskResumeAll>
 800881a:	e77a      	b.n	8008712 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800881c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800881e:	f000 f8a1 	bl	8008964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008822:	f000 fccd 	bl	80091c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008828:	f000 f8ee 	bl	8008a08 <prvIsQueueEmpty>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	f43f af6f 	beq.w	8008712 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008834:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008836:	4618      	mov	r0, r3
 8008838:	3730      	adds	r7, #48	; 0x30
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	e000ed04 	.word	0xe000ed04

08008844 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008850:	2300      	movs	r3, #0
 8008852:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008858:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10d      	bne.n	800887e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d14d      	bne.n	8008906 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	4618      	mov	r0, r3
 8008870:	f001 f8aa 	bl	80099c8 <xTaskPriorityDisinherit>
 8008874:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	609a      	str	r2, [r3, #8]
 800887c:	e043      	b.n	8008906 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d119      	bne.n	80088b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6858      	ldr	r0, [r3, #4]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888c:	461a      	mov	r2, r3
 800888e:	68b9      	ldr	r1, [r7, #8]
 8008890:	f002 f91a 	bl	800aac8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889c:	441a      	add	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d32b      	bcc.n	8008906 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	605a      	str	r2, [r3, #4]
 80088b6:	e026      	b.n	8008906 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	68d8      	ldr	r0, [r3, #12]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c0:	461a      	mov	r2, r3
 80088c2:	68b9      	ldr	r1, [r7, #8]
 80088c4:	f002 f900 	bl	800aac8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	68da      	ldr	r2, [r3, #12]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d0:	425b      	negs	r3, r3
 80088d2:	441a      	add	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	68da      	ldr	r2, [r3, #12]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d207      	bcs.n	80088f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	689a      	ldr	r2, [r3, #8]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ec:	425b      	negs	r3, r3
 80088ee:	441a      	add	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d105      	bne.n	8008906 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	3b01      	subs	r3, #1
 8008904:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	1c5a      	adds	r2, r3, #1
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800890e:	697b      	ldr	r3, [r7, #20]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008926:	2b00      	cmp	r3, #0
 8008928:	d018      	beq.n	800895c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	68da      	ldr	r2, [r3, #12]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	441a      	add	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	429a      	cmp	r2, r3
 8008942:	d303      	bcc.n	800894c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	68d9      	ldr	r1, [r3, #12]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008954:	461a      	mov	r2, r3
 8008956:	6838      	ldr	r0, [r7, #0]
 8008958:	f002 f8b6 	bl	800aac8 <memcpy>
	}
}
 800895c:	bf00      	nop
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800896c:	f001 fd6a 	bl	800a444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008976:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008978:	e011      	b.n	800899e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897e:	2b00      	cmp	r3, #0
 8008980:	d012      	beq.n	80089a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	3324      	adds	r3, #36	; 0x24
 8008986:	4618      	mov	r0, r3
 8008988:	f000 fe42 	bl	8009610 <xTaskRemoveFromEventList>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008992:	f000 ff19 	bl	80097c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008996:	7bfb      	ldrb	r3, [r7, #15]
 8008998:	3b01      	subs	r3, #1
 800899a:	b2db      	uxtb	r3, r3
 800899c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800899e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	dce9      	bgt.n	800897a <prvUnlockQueue+0x16>
 80089a6:	e000      	b.n	80089aa <prvUnlockQueue+0x46>
					break;
 80089a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	22ff      	movs	r2, #255	; 0xff
 80089ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80089b2:	f001 fd77 	bl	800a4a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089b6:	f001 fd45 	bl	800a444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089c2:	e011      	b.n	80089e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d012      	beq.n	80089f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3310      	adds	r3, #16
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 fe1d 	bl	8009610 <xTaskRemoveFromEventList>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80089dc:	f000 fef4 	bl	80097c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	3b01      	subs	r3, #1
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	dce9      	bgt.n	80089c4 <prvUnlockQueue+0x60>
 80089f0:	e000      	b.n	80089f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80089f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	22ff      	movs	r2, #255	; 0xff
 80089f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80089fc:	f001 fd52 	bl	800a4a4 <vPortExitCritical>
}
 8008a00:	bf00      	nop
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a10:	f001 fd18 	bl	800a444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d102      	bne.n	8008a22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	e001      	b.n	8008a26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a22:	2300      	movs	r3, #0
 8008a24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a26:	f001 fd3d 	bl	800a4a4 <vPortExitCritical>

	return xReturn;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a3c:	f001 fd02 	bl	800a444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d102      	bne.n	8008a52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	e001      	b.n	8008a56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a52:	2300      	movs	r3, #0
 8008a54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a56:	f001 fd25 	bl	800a4a4 <vPortExitCritical>

	return xReturn;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60fb      	str	r3, [r7, #12]
 8008a72:	e014      	b.n	8008a9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a74:	4a0f      	ldr	r2, [pc, #60]	; (8008ab4 <vQueueAddToRegistry+0x50>)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10b      	bne.n	8008a98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a80:	490c      	ldr	r1, [pc, #48]	; (8008ab4 <vQueueAddToRegistry+0x50>)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a8a:	4a0a      	ldr	r2, [pc, #40]	; (8008ab4 <vQueueAddToRegistry+0x50>)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	00db      	lsls	r3, r3, #3
 8008a90:	4413      	add	r3, r2
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a96:	e006      	b.n	8008aa6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b07      	cmp	r3, #7
 8008aa2:	d9e7      	bls.n	8008a74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	2000510c 	.word	0x2000510c

08008ab8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ac8:	f001 fcbc 	bl	800a444 <vPortEnterCritical>
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ad2:	b25b      	sxtb	r3, r3
 8008ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ad8:	d103      	bne.n	8008ae2 <vQueueWaitForMessageRestricted+0x2a>
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ae8:	b25b      	sxtb	r3, r3
 8008aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aee:	d103      	bne.n	8008af8 <vQueueWaitForMessageRestricted+0x40>
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008af8:	f001 fcd4 	bl	800a4a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d106      	bne.n	8008b12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	3324      	adds	r3, #36	; 0x24
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	68b9      	ldr	r1, [r7, #8]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 fd53 	bl	80095b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b12:	6978      	ldr	r0, [r7, #20]
 8008b14:	f7ff ff26 	bl	8008964 <prvUnlockQueue>
	}
 8008b18:	bf00      	nop
 8008b1a:	3718      	adds	r7, #24
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b08e      	sub	sp, #56	; 0x38
 8008b24:	af04      	add	r7, sp, #16
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b38:	f383 8811 	msr	BASEPRI, r3
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	623b      	str	r3, [r7, #32]
}
 8008b46:	bf00      	nop
 8008b48:	e7fe      	b.n	8008b48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10a      	bne.n	8008b66 <xTaskCreateStatic+0x46>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	61fb      	str	r3, [r7, #28]
}
 8008b62:	bf00      	nop
 8008b64:	e7fe      	b.n	8008b64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b66:	235c      	movs	r3, #92	; 0x5c
 8008b68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	2b5c      	cmp	r3, #92	; 0x5c
 8008b6e:	d00a      	beq.n	8008b86 <xTaskCreateStatic+0x66>
	__asm volatile
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	61bb      	str	r3, [r7, #24]
}
 8008b82:	bf00      	nop
 8008b84:	e7fe      	b.n	8008b84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d01e      	beq.n	8008bcc <xTaskCreateStatic+0xac>
 8008b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d01b      	beq.n	8008bcc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba0:	2202      	movs	r2, #2
 8008ba2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9303      	str	r3, [sp, #12]
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	9302      	str	r3, [sp, #8]
 8008bae:	f107 0314 	add.w	r3, r7, #20
 8008bb2:	9301      	str	r3, [sp, #4]
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	68b9      	ldr	r1, [r7, #8]
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f000 f850 	bl	8008c64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bc6:	f000 f8dd 	bl	8008d84 <prvAddNewTaskToReadyList>
 8008bca:	e001      	b.n	8008bd0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008bd0:	697b      	ldr	r3, [r7, #20]
	}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3728      	adds	r7, #40	; 0x28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b08c      	sub	sp, #48	; 0x30
 8008bde:	af04      	add	r7, sp, #16
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	60b9      	str	r1, [r7, #8]
 8008be4:	603b      	str	r3, [r7, #0]
 8008be6:	4613      	mov	r3, r2
 8008be8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f001 fd4a 	bl	800a688 <pvPortMalloc>
 8008bf4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00e      	beq.n	8008c1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008bfc:	205c      	movs	r0, #92	; 0x5c
 8008bfe:	f001 fd43 	bl	800a688 <pvPortMalloc>
 8008c02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8008c10:	e005      	b.n	8008c1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c12:	6978      	ldr	r0, [r7, #20]
 8008c14:	f001 fe04 	bl	800a820 <vPortFree>
 8008c18:	e001      	b.n	8008c1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d017      	beq.n	8008c54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c2c:	88fa      	ldrh	r2, [r7, #6]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9303      	str	r3, [sp, #12]
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	9302      	str	r3, [sp, #8]
 8008c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	68b9      	ldr	r1, [r7, #8]
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 f80e 	bl	8008c64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c48:	69f8      	ldr	r0, [r7, #28]
 8008c4a:	f000 f89b 	bl	8008d84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	61bb      	str	r3, [r7, #24]
 8008c52:	e002      	b.n	8008c5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c5a:	69bb      	ldr	r3, [r7, #24]
	}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3720      	adds	r7, #32
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b088      	sub	sp, #32
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
 8008c70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	21a5      	movs	r1, #165	; 0xa5
 8008c7e:	f001 ff31 	bl	800aae4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4413      	add	r3, r2
 8008c92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	f023 0307 	bic.w	r3, r3, #7
 8008c9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	f003 0307 	and.w	r3, r3, #7
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00a      	beq.n	8008cbc <prvInitialiseNewTask+0x58>
	__asm volatile
 8008ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	617b      	str	r3, [r7, #20]
}
 8008cb8:	bf00      	nop
 8008cba:	e7fe      	b.n	8008cba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d01f      	beq.n	8008d02 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	61fb      	str	r3, [r7, #28]
 8008cc6:	e012      	b.n	8008cee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	4413      	add	r3, r2
 8008cce:	7819      	ldrb	r1, [r3, #0]
 8008cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	3334      	adds	r3, #52	; 0x34
 8008cd8:	460a      	mov	r2, r1
 8008cda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d006      	beq.n	8008cf6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	3301      	adds	r3, #1
 8008cec:	61fb      	str	r3, [r7, #28]
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	2b0f      	cmp	r3, #15
 8008cf2:	d9e9      	bls.n	8008cc8 <prvInitialiseNewTask+0x64>
 8008cf4:	e000      	b.n	8008cf8 <prvInitialiseNewTask+0x94>
			{
				break;
 8008cf6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d00:	e003      	b.n	8008d0a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	2b37      	cmp	r3, #55	; 0x37
 8008d0e:	d901      	bls.n	8008d14 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d10:	2337      	movs	r3, #55	; 0x37
 8008d12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	2200      	movs	r2, #0
 8008d24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d28:	3304      	adds	r3, #4
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7ff f978 	bl	8008020 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d32:	3318      	adds	r3, #24
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7ff f973 	bl	8008020 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d52:	2200      	movs	r2, #0
 8008d54:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	68f9      	ldr	r1, [r7, #12]
 8008d62:	69b8      	ldr	r0, [r7, #24]
 8008d64:	f001 fa40 	bl	800a1e8 <pxPortInitialiseStack>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d002      	beq.n	8008d7a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d7a:	bf00      	nop
 8008d7c:	3720      	adds	r7, #32
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
	...

08008d84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d8c:	f001 fb5a 	bl	800a444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d90:	4b2d      	ldr	r3, [pc, #180]	; (8008e48 <prvAddNewTaskToReadyList+0xc4>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3301      	adds	r3, #1
 8008d96:	4a2c      	ldr	r2, [pc, #176]	; (8008e48 <prvAddNewTaskToReadyList+0xc4>)
 8008d98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d9a:	4b2c      	ldr	r3, [pc, #176]	; (8008e4c <prvAddNewTaskToReadyList+0xc8>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d109      	bne.n	8008db6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008da2:	4a2a      	ldr	r2, [pc, #168]	; (8008e4c <prvAddNewTaskToReadyList+0xc8>)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008da8:	4b27      	ldr	r3, [pc, #156]	; (8008e48 <prvAddNewTaskToReadyList+0xc4>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d110      	bne.n	8008dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008db0:	f000 fd2e 	bl	8009810 <prvInitialiseTaskLists>
 8008db4:	e00d      	b.n	8008dd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008db6:	4b26      	ldr	r3, [pc, #152]	; (8008e50 <prvAddNewTaskToReadyList+0xcc>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d109      	bne.n	8008dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008dbe:	4b23      	ldr	r3, [pc, #140]	; (8008e4c <prvAddNewTaskToReadyList+0xc8>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d802      	bhi.n	8008dd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008dcc:	4a1f      	ldr	r2, [pc, #124]	; (8008e4c <prvAddNewTaskToReadyList+0xc8>)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008dd2:	4b20      	ldr	r3, [pc, #128]	; (8008e54 <prvAddNewTaskToReadyList+0xd0>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	4a1e      	ldr	r2, [pc, #120]	; (8008e54 <prvAddNewTaskToReadyList+0xd0>)
 8008dda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ddc:	4b1d      	ldr	r3, [pc, #116]	; (8008e54 <prvAddNewTaskToReadyList+0xd0>)
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de8:	4b1b      	ldr	r3, [pc, #108]	; (8008e58 <prvAddNewTaskToReadyList+0xd4>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d903      	bls.n	8008df8 <prvAddNewTaskToReadyList+0x74>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	4a18      	ldr	r2, [pc, #96]	; (8008e58 <prvAddNewTaskToReadyList+0xd4>)
 8008df6:	6013      	str	r3, [r2, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4a15      	ldr	r2, [pc, #84]	; (8008e5c <prvAddNewTaskToReadyList+0xd8>)
 8008e06:	441a      	add	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	3304      	adds	r3, #4
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	4610      	mov	r0, r2
 8008e10:	f7ff f913 	bl	800803a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e14:	f001 fb46 	bl	800a4a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e18:	4b0d      	ldr	r3, [pc, #52]	; (8008e50 <prvAddNewTaskToReadyList+0xcc>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00e      	beq.n	8008e3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e20:	4b0a      	ldr	r3, [pc, #40]	; (8008e4c <prvAddNewTaskToReadyList+0xc8>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d207      	bcs.n	8008e3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e2e:	4b0c      	ldr	r3, [pc, #48]	; (8008e60 <prvAddNewTaskToReadyList+0xdc>)
 8008e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e34:	601a      	str	r2, [r3, #0]
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e3e:	bf00      	nop
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	20000c30 	.word	0x20000c30
 8008e4c:	2000075c 	.word	0x2000075c
 8008e50:	20000c3c 	.word	0x20000c3c
 8008e54:	20000c4c 	.word	0x20000c4c
 8008e58:	20000c38 	.word	0x20000c38
 8008e5c:	20000760 	.word	0x20000760
 8008e60:	e000ed04 	.word	0xe000ed04

08008e64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d017      	beq.n	8008ea6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e76:	4b13      	ldr	r3, [pc, #76]	; (8008ec4 <vTaskDelay+0x60>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00a      	beq.n	8008e94 <vTaskDelay+0x30>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	60bb      	str	r3, [r7, #8]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e94:	f000 f986 	bl	80091a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e98:	2100      	movs	r1, #0
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fe02 	bl	8009aa4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ea0:	f000 f98e 	bl	80091c0 <xTaskResumeAll>
 8008ea4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d107      	bne.n	8008ebc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008eac:	4b06      	ldr	r3, [pc, #24]	; (8008ec8 <vTaskDelay+0x64>)
 8008eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ebc:	bf00      	nop
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	20000c58 	.word	0x20000c58
 8008ec8:	e000ed04 	.word	0xe000ed04

08008ecc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008ed4:	f001 fab6 	bl	800a444 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d102      	bne.n	8008ee4 <vTaskSuspend+0x18>
 8008ede:	4b30      	ldr	r3, [pc, #192]	; (8008fa0 <vTaskSuspend+0xd4>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	e000      	b.n	8008ee6 <vTaskSuspend+0x1a>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	3304      	adds	r3, #4
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7ff f901 	bl	80080f4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d004      	beq.n	8008f04 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3318      	adds	r3, #24
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7ff f8f8 	bl	80080f4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	3304      	adds	r3, #4
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4826      	ldr	r0, [pc, #152]	; (8008fa4 <vTaskSuspend+0xd8>)
 8008f0c:	f7ff f895 	bl	800803a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d103      	bne.n	8008f24 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008f24:	f001 fabe 	bl	800a4a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8008f28:	4b1f      	ldr	r3, [pc, #124]	; (8008fa8 <vTaskSuspend+0xdc>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d005      	beq.n	8008f3c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008f30:	f001 fa88 	bl	800a444 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008f34:	f000 fd0a 	bl	800994c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8008f38:	f001 fab4 	bl	800a4a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008f3c:	4b18      	ldr	r3, [pc, #96]	; (8008fa0 <vTaskSuspend+0xd4>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d127      	bne.n	8008f96 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8008f46:	4b18      	ldr	r3, [pc, #96]	; (8008fa8 <vTaskSuspend+0xdc>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d017      	beq.n	8008f7e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008f4e:	4b17      	ldr	r3, [pc, #92]	; (8008fac <vTaskSuspend+0xe0>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00a      	beq.n	8008f6c <vTaskSuspend+0xa0>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	60bb      	str	r3, [r7, #8]
}
 8008f68:	bf00      	nop
 8008f6a:	e7fe      	b.n	8008f6a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8008f6c:	4b10      	ldr	r3, [pc, #64]	; (8008fb0 <vTaskSuspend+0xe4>)
 8008f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f7c:	e00b      	b.n	8008f96 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008f7e:	4b09      	ldr	r3, [pc, #36]	; (8008fa4 <vTaskSuspend+0xd8>)
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	4b0c      	ldr	r3, [pc, #48]	; (8008fb4 <vTaskSuspend+0xe8>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d103      	bne.n	8008f92 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8008f8a:	4b05      	ldr	r3, [pc, #20]	; (8008fa0 <vTaskSuspend+0xd4>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	601a      	str	r2, [r3, #0]
	}
 8008f90:	e001      	b.n	8008f96 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8008f92:	f000 fa8f 	bl	80094b4 <vTaskSwitchContext>
	}
 8008f96:	bf00      	nop
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	2000075c 	.word	0x2000075c
 8008fa4:	20000c1c 	.word	0x20000c1c
 8008fa8:	20000c3c 	.word	0x20000c3c
 8008fac:	20000c58 	.word	0x20000c58
 8008fb0:	e000ed04 	.word	0xe000ed04
 8008fb4:	20000c30 	.word	0x20000c30

08008fb8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008fb8:	b480      	push	{r7}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	60fb      	str	r3, [r7, #12]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	4a0a      	ldr	r2, [pc, #40]	; (8009014 <prvTaskIsTaskSuspended+0x5c>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d10a      	bne.n	8009004 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff2:	4a09      	ldr	r2, [pc, #36]	; (8009018 <prvTaskIsTaskSuspended+0x60>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d005      	beq.n	8009004 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d101      	bne.n	8009004 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8009000:	2301      	movs	r3, #1
 8009002:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009004:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009006:	4618      	mov	r0, r3
 8009008:	371c      	adds	r7, #28
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	20000c1c 	.word	0x20000c1c
 8009018:	20000bf0 	.word	0x20000bf0

0800901c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10a      	bne.n	8009044 <vTaskResume+0x28>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	60bb      	str	r3, [r7, #8]
}
 8009040:	bf00      	nop
 8009042:	e7fe      	b.n	8009042 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009044:	4b20      	ldr	r3, [pc, #128]	; (80090c8 <vTaskResume+0xac>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	429a      	cmp	r2, r3
 800904c:	d038      	beq.n	80090c0 <vTaskResume+0xa4>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d035      	beq.n	80090c0 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8009054:	f001 f9f6 	bl	800a444 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f7ff ffad 	bl	8008fb8 <prvTaskIsTaskSuspended>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d02b      	beq.n	80090bc <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	3304      	adds	r3, #4
 8009068:	4618      	mov	r0, r3
 800906a:	f7ff f843 	bl	80080f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009072:	4b16      	ldr	r3, [pc, #88]	; (80090cc <vTaskResume+0xb0>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	429a      	cmp	r2, r3
 8009078:	d903      	bls.n	8009082 <vTaskResume+0x66>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907e:	4a13      	ldr	r2, [pc, #76]	; (80090cc <vTaskResume+0xb0>)
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009086:	4613      	mov	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	4a10      	ldr	r2, [pc, #64]	; (80090d0 <vTaskResume+0xb4>)
 8009090:	441a      	add	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	3304      	adds	r3, #4
 8009096:	4619      	mov	r1, r3
 8009098:	4610      	mov	r0, r2
 800909a:	f7fe ffce 	bl	800803a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a2:	4b09      	ldr	r3, [pc, #36]	; (80090c8 <vTaskResume+0xac>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d307      	bcc.n	80090bc <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80090ac:	4b09      	ldr	r3, [pc, #36]	; (80090d4 <vTaskResume+0xb8>)
 80090ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80090bc:	f001 f9f2 	bl	800a4a4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090c0:	bf00      	nop
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	2000075c 	.word	0x2000075c
 80090cc:	20000c38 	.word	0x20000c38
 80090d0:	20000760 	.word	0x20000760
 80090d4:	e000ed04 	.word	0xe000ed04

080090d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08a      	sub	sp, #40	; 0x28
 80090dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80090e2:	2300      	movs	r3, #0
 80090e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80090e6:	463a      	mov	r2, r7
 80090e8:	1d39      	adds	r1, r7, #4
 80090ea:	f107 0308 	add.w	r3, r7, #8
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe ff42 	bl	8007f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	9202      	str	r2, [sp, #8]
 80090fc:	9301      	str	r3, [sp, #4]
 80090fe:	2300      	movs	r3, #0
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	2300      	movs	r3, #0
 8009104:	460a      	mov	r2, r1
 8009106:	4921      	ldr	r1, [pc, #132]	; (800918c <vTaskStartScheduler+0xb4>)
 8009108:	4821      	ldr	r0, [pc, #132]	; (8009190 <vTaskStartScheduler+0xb8>)
 800910a:	f7ff fd09 	bl	8008b20 <xTaskCreateStatic>
 800910e:	4603      	mov	r3, r0
 8009110:	4a20      	ldr	r2, [pc, #128]	; (8009194 <vTaskStartScheduler+0xbc>)
 8009112:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009114:	4b1f      	ldr	r3, [pc, #124]	; (8009194 <vTaskStartScheduler+0xbc>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d002      	beq.n	8009122 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800911c:	2301      	movs	r3, #1
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	e001      	b.n	8009126 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009122:	2300      	movs	r3, #0
 8009124:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d102      	bne.n	8009132 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800912c:	f000 fd0e 	bl	8009b4c <xTimerCreateTimerTask>
 8009130:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d116      	bne.n	8009166 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	613b      	str	r3, [r7, #16]
}
 800914a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800914c:	4b12      	ldr	r3, [pc, #72]	; (8009198 <vTaskStartScheduler+0xc0>)
 800914e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009152:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009154:	4b11      	ldr	r3, [pc, #68]	; (800919c <vTaskStartScheduler+0xc4>)
 8009156:	2201      	movs	r2, #1
 8009158:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800915a:	4b11      	ldr	r3, [pc, #68]	; (80091a0 <vTaskStartScheduler+0xc8>)
 800915c:	2200      	movs	r2, #0
 800915e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009160:	f001 f8ce 	bl	800a300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009164:	e00e      	b.n	8009184 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800916c:	d10a      	bne.n	8009184 <vTaskStartScheduler+0xac>
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	60fb      	str	r3, [r7, #12]
}
 8009180:	bf00      	nop
 8009182:	e7fe      	b.n	8009182 <vTaskStartScheduler+0xaa>
}
 8009184:	bf00      	nop
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	0800be8c 	.word	0x0800be8c
 8009190:	080097e1 	.word	0x080097e1
 8009194:	20000c54 	.word	0x20000c54
 8009198:	20000c50 	.word	0x20000c50
 800919c:	20000c3c 	.word	0x20000c3c
 80091a0:	20000c34 	.word	0x20000c34

080091a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091a4:	b480      	push	{r7}
 80091a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80091a8:	4b04      	ldr	r3, [pc, #16]	; (80091bc <vTaskSuspendAll+0x18>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3301      	adds	r3, #1
 80091ae:	4a03      	ldr	r2, [pc, #12]	; (80091bc <vTaskSuspendAll+0x18>)
 80091b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80091b2:	bf00      	nop
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	20000c58 	.word	0x20000c58

080091c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80091ca:	2300      	movs	r3, #0
 80091cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80091ce:	4b42      	ldr	r3, [pc, #264]	; (80092d8 <xTaskResumeAll+0x118>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10a      	bne.n	80091ec <xTaskResumeAll+0x2c>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	603b      	str	r3, [r7, #0]
}
 80091e8:	bf00      	nop
 80091ea:	e7fe      	b.n	80091ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80091ec:	f001 f92a 	bl	800a444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80091f0:	4b39      	ldr	r3, [pc, #228]	; (80092d8 <xTaskResumeAll+0x118>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3b01      	subs	r3, #1
 80091f6:	4a38      	ldr	r2, [pc, #224]	; (80092d8 <xTaskResumeAll+0x118>)
 80091f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091fa:	4b37      	ldr	r3, [pc, #220]	; (80092d8 <xTaskResumeAll+0x118>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d162      	bne.n	80092c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009202:	4b36      	ldr	r3, [pc, #216]	; (80092dc <xTaskResumeAll+0x11c>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d05e      	beq.n	80092c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800920a:	e02f      	b.n	800926c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800920c:	4b34      	ldr	r3, [pc, #208]	; (80092e0 <xTaskResumeAll+0x120>)
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3318      	adds	r3, #24
 8009218:	4618      	mov	r0, r3
 800921a:	f7fe ff6b 	bl	80080f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3304      	adds	r3, #4
 8009222:	4618      	mov	r0, r3
 8009224:	f7fe ff66 	bl	80080f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800922c:	4b2d      	ldr	r3, [pc, #180]	; (80092e4 <xTaskResumeAll+0x124>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	429a      	cmp	r2, r3
 8009232:	d903      	bls.n	800923c <xTaskResumeAll+0x7c>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009238:	4a2a      	ldr	r2, [pc, #168]	; (80092e4 <xTaskResumeAll+0x124>)
 800923a:	6013      	str	r3, [r2, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009240:	4613      	mov	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4a27      	ldr	r2, [pc, #156]	; (80092e8 <xTaskResumeAll+0x128>)
 800924a:	441a      	add	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	3304      	adds	r3, #4
 8009250:	4619      	mov	r1, r3
 8009252:	4610      	mov	r0, r2
 8009254:	f7fe fef1 	bl	800803a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925c:	4b23      	ldr	r3, [pc, #140]	; (80092ec <xTaskResumeAll+0x12c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009262:	429a      	cmp	r2, r3
 8009264:	d302      	bcc.n	800926c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009266:	4b22      	ldr	r3, [pc, #136]	; (80092f0 <xTaskResumeAll+0x130>)
 8009268:	2201      	movs	r2, #1
 800926a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800926c:	4b1c      	ldr	r3, [pc, #112]	; (80092e0 <xTaskResumeAll+0x120>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1cb      	bne.n	800920c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d001      	beq.n	800927e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800927a:	f000 fb67 	bl	800994c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800927e:	4b1d      	ldr	r3, [pc, #116]	; (80092f4 <xTaskResumeAll+0x134>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d010      	beq.n	80092ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800928a:	f000 f859 	bl	8009340 <xTaskIncrementTick>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d002      	beq.n	800929a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009294:	4b16      	ldr	r3, [pc, #88]	; (80092f0 <xTaskResumeAll+0x130>)
 8009296:	2201      	movs	r2, #1
 8009298:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	3b01      	subs	r3, #1
 800929e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1f1      	bne.n	800928a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80092a6:	4b13      	ldr	r3, [pc, #76]	; (80092f4 <xTaskResumeAll+0x134>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092ac:	4b10      	ldr	r3, [pc, #64]	; (80092f0 <xTaskResumeAll+0x130>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d009      	beq.n	80092c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80092b4:	2301      	movs	r3, #1
 80092b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80092b8:	4b0f      	ldr	r3, [pc, #60]	; (80092f8 <xTaskResumeAll+0x138>)
 80092ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092be:	601a      	str	r2, [r3, #0]
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092c8:	f001 f8ec 	bl	800a4a4 <vPortExitCritical>

	return xAlreadyYielded;
 80092cc:	68bb      	ldr	r3, [r7, #8]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20000c58 	.word	0x20000c58
 80092dc:	20000c30 	.word	0x20000c30
 80092e0:	20000bf0 	.word	0x20000bf0
 80092e4:	20000c38 	.word	0x20000c38
 80092e8:	20000760 	.word	0x20000760
 80092ec:	2000075c 	.word	0x2000075c
 80092f0:	20000c44 	.word	0x20000c44
 80092f4:	20000c40 	.word	0x20000c40
 80092f8:	e000ed04 	.word	0xe000ed04

080092fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009302:	4b05      	ldr	r3, [pc, #20]	; (8009318 <xTaskGetTickCount+0x1c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009308:	687b      	ldr	r3, [r7, #4]
}
 800930a:	4618      	mov	r0, r3
 800930c:	370c      	adds	r7, #12
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	20000c34 	.word	0x20000c34

0800931c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009322:	f001 f971 	bl	800a608 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009326:	2300      	movs	r3, #0
 8009328:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800932a:	4b04      	ldr	r3, [pc, #16]	; (800933c <xTaskGetTickCountFromISR+0x20>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009330:	683b      	ldr	r3, [r7, #0]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	20000c34 	.word	0x20000c34

08009340 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009346:	2300      	movs	r3, #0
 8009348:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800934a:	4b4f      	ldr	r3, [pc, #316]	; (8009488 <xTaskIncrementTick+0x148>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	f040 808f 	bne.w	8009472 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009354:	4b4d      	ldr	r3, [pc, #308]	; (800948c <xTaskIncrementTick+0x14c>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	3301      	adds	r3, #1
 800935a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800935c:	4a4b      	ldr	r2, [pc, #300]	; (800948c <xTaskIncrementTick+0x14c>)
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d120      	bne.n	80093aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009368:	4b49      	ldr	r3, [pc, #292]	; (8009490 <xTaskIncrementTick+0x150>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00a      	beq.n	8009388 <xTaskIncrementTick+0x48>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	603b      	str	r3, [r7, #0]
}
 8009384:	bf00      	nop
 8009386:	e7fe      	b.n	8009386 <xTaskIncrementTick+0x46>
 8009388:	4b41      	ldr	r3, [pc, #260]	; (8009490 <xTaskIncrementTick+0x150>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	60fb      	str	r3, [r7, #12]
 800938e:	4b41      	ldr	r3, [pc, #260]	; (8009494 <xTaskIncrementTick+0x154>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a3f      	ldr	r2, [pc, #252]	; (8009490 <xTaskIncrementTick+0x150>)
 8009394:	6013      	str	r3, [r2, #0]
 8009396:	4a3f      	ldr	r2, [pc, #252]	; (8009494 <xTaskIncrementTick+0x154>)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	4b3e      	ldr	r3, [pc, #248]	; (8009498 <xTaskIncrementTick+0x158>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3301      	adds	r3, #1
 80093a2:	4a3d      	ldr	r2, [pc, #244]	; (8009498 <xTaskIncrementTick+0x158>)
 80093a4:	6013      	str	r3, [r2, #0]
 80093a6:	f000 fad1 	bl	800994c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093aa:	4b3c      	ldr	r3, [pc, #240]	; (800949c <xTaskIncrementTick+0x15c>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d349      	bcc.n	8009448 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093b4:	4b36      	ldr	r3, [pc, #216]	; (8009490 <xTaskIncrementTick+0x150>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d104      	bne.n	80093c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093be:	4b37      	ldr	r3, [pc, #220]	; (800949c <xTaskIncrementTick+0x15c>)
 80093c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093c4:	601a      	str	r2, [r3, #0]
					break;
 80093c6:	e03f      	b.n	8009448 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c8:	4b31      	ldr	r3, [pc, #196]	; (8009490 <xTaskIncrementTick+0x150>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d203      	bcs.n	80093e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80093e0:	4a2e      	ldr	r2, [pc, #184]	; (800949c <xTaskIncrementTick+0x15c>)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80093e6:	e02f      	b.n	8009448 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	3304      	adds	r3, #4
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fe fe81 	bl	80080f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d004      	beq.n	8009404 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	3318      	adds	r3, #24
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fe fe78 	bl	80080f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009408:	4b25      	ldr	r3, [pc, #148]	; (80094a0 <xTaskIncrementTick+0x160>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	429a      	cmp	r2, r3
 800940e:	d903      	bls.n	8009418 <xTaskIncrementTick+0xd8>
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009414:	4a22      	ldr	r2, [pc, #136]	; (80094a0 <xTaskIncrementTick+0x160>)
 8009416:	6013      	str	r3, [r2, #0]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941c:	4613      	mov	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4a1f      	ldr	r2, [pc, #124]	; (80094a4 <xTaskIncrementTick+0x164>)
 8009426:	441a      	add	r2, r3
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	3304      	adds	r3, #4
 800942c:	4619      	mov	r1, r3
 800942e:	4610      	mov	r0, r2
 8009430:	f7fe fe03 	bl	800803a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009438:	4b1b      	ldr	r3, [pc, #108]	; (80094a8 <xTaskIncrementTick+0x168>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943e:	429a      	cmp	r2, r3
 8009440:	d3b8      	bcc.n	80093b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009442:	2301      	movs	r3, #1
 8009444:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009446:	e7b5      	b.n	80093b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009448:	4b17      	ldr	r3, [pc, #92]	; (80094a8 <xTaskIncrementTick+0x168>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800944e:	4915      	ldr	r1, [pc, #84]	; (80094a4 <xTaskIncrementTick+0x164>)
 8009450:	4613      	mov	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	4413      	add	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	440b      	add	r3, r1
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d901      	bls.n	8009464 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009460:	2301      	movs	r3, #1
 8009462:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009464:	4b11      	ldr	r3, [pc, #68]	; (80094ac <xTaskIncrementTick+0x16c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d007      	beq.n	800947c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800946c:	2301      	movs	r3, #1
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	e004      	b.n	800947c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009472:	4b0f      	ldr	r3, [pc, #60]	; (80094b0 <xTaskIncrementTick+0x170>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3301      	adds	r3, #1
 8009478:	4a0d      	ldr	r2, [pc, #52]	; (80094b0 <xTaskIncrementTick+0x170>)
 800947a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800947c:	697b      	ldr	r3, [r7, #20]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20000c58 	.word	0x20000c58
 800948c:	20000c34 	.word	0x20000c34
 8009490:	20000be8 	.word	0x20000be8
 8009494:	20000bec 	.word	0x20000bec
 8009498:	20000c48 	.word	0x20000c48
 800949c:	20000c50 	.word	0x20000c50
 80094a0:	20000c38 	.word	0x20000c38
 80094a4:	20000760 	.word	0x20000760
 80094a8:	2000075c 	.word	0x2000075c
 80094ac:	20000c44 	.word	0x20000c44
 80094b0:	20000c40 	.word	0x20000c40

080094b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094ba:	4b28      	ldr	r3, [pc, #160]	; (800955c <vTaskSwitchContext+0xa8>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d003      	beq.n	80094ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80094c2:	4b27      	ldr	r3, [pc, #156]	; (8009560 <vTaskSwitchContext+0xac>)
 80094c4:	2201      	movs	r2, #1
 80094c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80094c8:	e041      	b.n	800954e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80094ca:	4b25      	ldr	r3, [pc, #148]	; (8009560 <vTaskSwitchContext+0xac>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094d0:	4b24      	ldr	r3, [pc, #144]	; (8009564 <vTaskSwitchContext+0xb0>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	60fb      	str	r3, [r7, #12]
 80094d6:	e010      	b.n	80094fa <vTaskSwitchContext+0x46>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10a      	bne.n	80094f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	607b      	str	r3, [r7, #4]
}
 80094f0:	bf00      	nop
 80094f2:	e7fe      	b.n	80094f2 <vTaskSwitchContext+0x3e>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	60fb      	str	r3, [r7, #12]
 80094fa:	491b      	ldr	r1, [pc, #108]	; (8009568 <vTaskSwitchContext+0xb4>)
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	4613      	mov	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	440b      	add	r3, r1
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d0e4      	beq.n	80094d8 <vTaskSwitchContext+0x24>
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4a13      	ldr	r2, [pc, #76]	; (8009568 <vTaskSwitchContext+0xb4>)
 800951a:	4413      	add	r3, r2
 800951c:	60bb      	str	r3, [r7, #8]
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	605a      	str	r2, [r3, #4]
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	3308      	adds	r3, #8
 8009530:	429a      	cmp	r2, r3
 8009532:	d104      	bne.n	800953e <vTaskSwitchContext+0x8a>
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	685a      	ldr	r2, [r3, #4]
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	605a      	str	r2, [r3, #4]
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	4a09      	ldr	r2, [pc, #36]	; (800956c <vTaskSwitchContext+0xb8>)
 8009546:	6013      	str	r3, [r2, #0]
 8009548:	4a06      	ldr	r2, [pc, #24]	; (8009564 <vTaskSwitchContext+0xb0>)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6013      	str	r3, [r2, #0]
}
 800954e:	bf00      	nop
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	20000c58 	.word	0x20000c58
 8009560:	20000c44 	.word	0x20000c44
 8009564:	20000c38 	.word	0x20000c38
 8009568:	20000760 	.word	0x20000760
 800956c:	2000075c 	.word	0x2000075c

08009570 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10a      	bne.n	8009596 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	60fb      	str	r3, [r7, #12]
}
 8009592:	bf00      	nop
 8009594:	e7fe      	b.n	8009594 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009596:	4b07      	ldr	r3, [pc, #28]	; (80095b4 <vTaskPlaceOnEventList+0x44>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3318      	adds	r3, #24
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f7fe fd6f 	bl	8008082 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095a4:	2101      	movs	r1, #1
 80095a6:	6838      	ldr	r0, [r7, #0]
 80095a8:	f000 fa7c 	bl	8009aa4 <prvAddCurrentTaskToDelayedList>
}
 80095ac:	bf00      	nop
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	2000075c 	.word	0x2000075c

080095b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10a      	bne.n	80095e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	617b      	str	r3, [r7, #20]
}
 80095dc:	bf00      	nop
 80095de:	e7fe      	b.n	80095de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095e0:	4b0a      	ldr	r3, [pc, #40]	; (800960c <vTaskPlaceOnEventListRestricted+0x54>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3318      	adds	r3, #24
 80095e6:	4619      	mov	r1, r3
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f7fe fd26 	bl	800803a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80095f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	68b8      	ldr	r0, [r7, #8]
 80095fe:	f000 fa51 	bl	8009aa4 <prvAddCurrentTaskToDelayedList>
	}
 8009602:	bf00      	nop
 8009604:	3718      	adds	r7, #24
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	2000075c 	.word	0x2000075c

08009610 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d10a      	bne.n	800963c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	60fb      	str	r3, [r7, #12]
}
 8009638:	bf00      	nop
 800963a:	e7fe      	b.n	800963a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	3318      	adds	r3, #24
 8009640:	4618      	mov	r0, r3
 8009642:	f7fe fd57 	bl	80080f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009646:	4b1e      	ldr	r3, [pc, #120]	; (80096c0 <xTaskRemoveFromEventList+0xb0>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d11d      	bne.n	800968a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	3304      	adds	r3, #4
 8009652:	4618      	mov	r0, r3
 8009654:	f7fe fd4e 	bl	80080f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965c:	4b19      	ldr	r3, [pc, #100]	; (80096c4 <xTaskRemoveFromEventList+0xb4>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	429a      	cmp	r2, r3
 8009662:	d903      	bls.n	800966c <xTaskRemoveFromEventList+0x5c>
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009668:	4a16      	ldr	r2, [pc, #88]	; (80096c4 <xTaskRemoveFromEventList+0xb4>)
 800966a:	6013      	str	r3, [r2, #0]
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009670:	4613      	mov	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4a13      	ldr	r2, [pc, #76]	; (80096c8 <xTaskRemoveFromEventList+0xb8>)
 800967a:	441a      	add	r2, r3
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	3304      	adds	r3, #4
 8009680:	4619      	mov	r1, r3
 8009682:	4610      	mov	r0, r2
 8009684:	f7fe fcd9 	bl	800803a <vListInsertEnd>
 8009688:	e005      	b.n	8009696 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	3318      	adds	r3, #24
 800968e:	4619      	mov	r1, r3
 8009690:	480e      	ldr	r0, [pc, #56]	; (80096cc <xTaskRemoveFromEventList+0xbc>)
 8009692:	f7fe fcd2 	bl	800803a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800969a:	4b0d      	ldr	r3, [pc, #52]	; (80096d0 <xTaskRemoveFromEventList+0xc0>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d905      	bls.n	80096b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80096a4:	2301      	movs	r3, #1
 80096a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80096a8:	4b0a      	ldr	r3, [pc, #40]	; (80096d4 <xTaskRemoveFromEventList+0xc4>)
 80096aa:	2201      	movs	r2, #1
 80096ac:	601a      	str	r2, [r3, #0]
 80096ae:	e001      	b.n	80096b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80096b0:	2300      	movs	r3, #0
 80096b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80096b4:	697b      	ldr	r3, [r7, #20]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20000c58 	.word	0x20000c58
 80096c4:	20000c38 	.word	0x20000c38
 80096c8:	20000760 	.word	0x20000760
 80096cc:	20000bf0 	.word	0x20000bf0
 80096d0:	2000075c 	.word	0x2000075c
 80096d4:	20000c44 	.word	0x20000c44

080096d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096e0:	4b06      	ldr	r3, [pc, #24]	; (80096fc <vTaskInternalSetTimeOutState+0x24>)
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096e8:	4b05      	ldr	r3, [pc, #20]	; (8009700 <vTaskInternalSetTimeOutState+0x28>)
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	605a      	str	r2, [r3, #4]
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr
 80096fc:	20000c48 	.word	0x20000c48
 8009700:	20000c34 	.word	0x20000c34

08009704 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b088      	sub	sp, #32
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10a      	bne.n	800972a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	613b      	str	r3, [r7, #16]
}
 8009726:	bf00      	nop
 8009728:	e7fe      	b.n	8009728 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10a      	bne.n	8009746 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	60fb      	str	r3, [r7, #12]
}
 8009742:	bf00      	nop
 8009744:	e7fe      	b.n	8009744 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009746:	f000 fe7d 	bl	800a444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800974a:	4b1d      	ldr	r3, [pc, #116]	; (80097c0 <xTaskCheckForTimeOut+0xbc>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	69ba      	ldr	r2, [r7, #24]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009762:	d102      	bne.n	800976a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009764:	2300      	movs	r3, #0
 8009766:	61fb      	str	r3, [r7, #28]
 8009768:	e023      	b.n	80097b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	4b15      	ldr	r3, [pc, #84]	; (80097c4 <xTaskCheckForTimeOut+0xc0>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	429a      	cmp	r2, r3
 8009774:	d007      	beq.n	8009786 <xTaskCheckForTimeOut+0x82>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	69ba      	ldr	r2, [r7, #24]
 800977c:	429a      	cmp	r2, r3
 800977e:	d302      	bcc.n	8009786 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009780:	2301      	movs	r3, #1
 8009782:	61fb      	str	r3, [r7, #28]
 8009784:	e015      	b.n	80097b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	429a      	cmp	r2, r3
 800978e:	d20b      	bcs.n	80097a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	1ad2      	subs	r2, r2, r3
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f7ff ff9b 	bl	80096d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80097a2:	2300      	movs	r3, #0
 80097a4:	61fb      	str	r3, [r7, #28]
 80097a6:	e004      	b.n	80097b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	2200      	movs	r2, #0
 80097ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80097ae:	2301      	movs	r3, #1
 80097b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80097b2:	f000 fe77 	bl	800a4a4 <vPortExitCritical>

	return xReturn;
 80097b6:	69fb      	ldr	r3, [r7, #28]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3720      	adds	r7, #32
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	20000c34 	.word	0x20000c34
 80097c4:	20000c48 	.word	0x20000c48

080097c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80097c8:	b480      	push	{r7}
 80097ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80097cc:	4b03      	ldr	r3, [pc, #12]	; (80097dc <vTaskMissedYield+0x14>)
 80097ce:	2201      	movs	r2, #1
 80097d0:	601a      	str	r2, [r3, #0]
}
 80097d2:	bf00      	nop
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	20000c44 	.word	0x20000c44

080097e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097e8:	f000 f852 	bl	8009890 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097ec:	4b06      	ldr	r3, [pc, #24]	; (8009808 <prvIdleTask+0x28>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d9f9      	bls.n	80097e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80097f4:	4b05      	ldr	r3, [pc, #20]	; (800980c <prvIdleTask+0x2c>)
 80097f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097fa:	601a      	str	r2, [r3, #0]
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009804:	e7f0      	b.n	80097e8 <prvIdleTask+0x8>
 8009806:	bf00      	nop
 8009808:	20000760 	.word	0x20000760
 800980c:	e000ed04 	.word	0xe000ed04

08009810 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009816:	2300      	movs	r3, #0
 8009818:	607b      	str	r3, [r7, #4]
 800981a:	e00c      	b.n	8009836 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	4613      	mov	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4a12      	ldr	r2, [pc, #72]	; (8009870 <prvInitialiseTaskLists+0x60>)
 8009828:	4413      	add	r3, r2
 800982a:	4618      	mov	r0, r3
 800982c:	f7fe fbd8 	bl	8007fe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	3301      	adds	r3, #1
 8009834:	607b      	str	r3, [r7, #4]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b37      	cmp	r3, #55	; 0x37
 800983a:	d9ef      	bls.n	800981c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800983c:	480d      	ldr	r0, [pc, #52]	; (8009874 <prvInitialiseTaskLists+0x64>)
 800983e:	f7fe fbcf 	bl	8007fe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009842:	480d      	ldr	r0, [pc, #52]	; (8009878 <prvInitialiseTaskLists+0x68>)
 8009844:	f7fe fbcc 	bl	8007fe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009848:	480c      	ldr	r0, [pc, #48]	; (800987c <prvInitialiseTaskLists+0x6c>)
 800984a:	f7fe fbc9 	bl	8007fe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800984e:	480c      	ldr	r0, [pc, #48]	; (8009880 <prvInitialiseTaskLists+0x70>)
 8009850:	f7fe fbc6 	bl	8007fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009854:	480b      	ldr	r0, [pc, #44]	; (8009884 <prvInitialiseTaskLists+0x74>)
 8009856:	f7fe fbc3 	bl	8007fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800985a:	4b0b      	ldr	r3, [pc, #44]	; (8009888 <prvInitialiseTaskLists+0x78>)
 800985c:	4a05      	ldr	r2, [pc, #20]	; (8009874 <prvInitialiseTaskLists+0x64>)
 800985e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009860:	4b0a      	ldr	r3, [pc, #40]	; (800988c <prvInitialiseTaskLists+0x7c>)
 8009862:	4a05      	ldr	r2, [pc, #20]	; (8009878 <prvInitialiseTaskLists+0x68>)
 8009864:	601a      	str	r2, [r3, #0]
}
 8009866:	bf00      	nop
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20000760 	.word	0x20000760
 8009874:	20000bc0 	.word	0x20000bc0
 8009878:	20000bd4 	.word	0x20000bd4
 800987c:	20000bf0 	.word	0x20000bf0
 8009880:	20000c04 	.word	0x20000c04
 8009884:	20000c1c 	.word	0x20000c1c
 8009888:	20000be8 	.word	0x20000be8
 800988c:	20000bec 	.word	0x20000bec

08009890 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009896:	e019      	b.n	80098cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009898:	f000 fdd4 	bl	800a444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800989c:	4b10      	ldr	r3, [pc, #64]	; (80098e0 <prvCheckTasksWaitingTermination+0x50>)
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	3304      	adds	r3, #4
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fe fc23 	bl	80080f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098ae:	4b0d      	ldr	r3, [pc, #52]	; (80098e4 <prvCheckTasksWaitingTermination+0x54>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3b01      	subs	r3, #1
 80098b4:	4a0b      	ldr	r2, [pc, #44]	; (80098e4 <prvCheckTasksWaitingTermination+0x54>)
 80098b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098b8:	4b0b      	ldr	r3, [pc, #44]	; (80098e8 <prvCheckTasksWaitingTermination+0x58>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	3b01      	subs	r3, #1
 80098be:	4a0a      	ldr	r2, [pc, #40]	; (80098e8 <prvCheckTasksWaitingTermination+0x58>)
 80098c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098c2:	f000 fdef 	bl	800a4a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f810 	bl	80098ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098cc:	4b06      	ldr	r3, [pc, #24]	; (80098e8 <prvCheckTasksWaitingTermination+0x58>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1e1      	bne.n	8009898 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098d4:	bf00      	nop
 80098d6:	bf00      	nop
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20000c04 	.word	0x20000c04
 80098e4:	20000c30 	.word	0x20000c30
 80098e8:	20000c18 	.word	0x20000c18

080098ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d108      	bne.n	8009910 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009902:	4618      	mov	r0, r3
 8009904:	f000 ff8c 	bl	800a820 <vPortFree>
				vPortFree( pxTCB );
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 ff89 	bl	800a820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800990e:	e018      	b.n	8009942 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009916:	2b01      	cmp	r3, #1
 8009918:	d103      	bne.n	8009922 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 ff80 	bl	800a820 <vPortFree>
	}
 8009920:	e00f      	b.n	8009942 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009928:	2b02      	cmp	r3, #2
 800992a:	d00a      	beq.n	8009942 <prvDeleteTCB+0x56>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	60fb      	str	r3, [r7, #12]
}
 800993e:	bf00      	nop
 8009940:	e7fe      	b.n	8009940 <prvDeleteTCB+0x54>
	}
 8009942:	bf00      	nop
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
	...

0800994c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009952:	4b0c      	ldr	r3, [pc, #48]	; (8009984 <prvResetNextTaskUnblockTime+0x38>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d104      	bne.n	8009966 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800995c:	4b0a      	ldr	r3, [pc, #40]	; (8009988 <prvResetNextTaskUnblockTime+0x3c>)
 800995e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009962:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009964:	e008      	b.n	8009978 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009966:	4b07      	ldr	r3, [pc, #28]	; (8009984 <prvResetNextTaskUnblockTime+0x38>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	4a04      	ldr	r2, [pc, #16]	; (8009988 <prvResetNextTaskUnblockTime+0x3c>)
 8009976:	6013      	str	r3, [r2, #0]
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	20000be8 	.word	0x20000be8
 8009988:	20000c50 	.word	0x20000c50

0800998c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009992:	4b0b      	ldr	r3, [pc, #44]	; (80099c0 <xTaskGetSchedulerState+0x34>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d102      	bne.n	80099a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800999a:	2301      	movs	r3, #1
 800999c:	607b      	str	r3, [r7, #4]
 800999e:	e008      	b.n	80099b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099a0:	4b08      	ldr	r3, [pc, #32]	; (80099c4 <xTaskGetSchedulerState+0x38>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d102      	bne.n	80099ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099a8:	2302      	movs	r3, #2
 80099aa:	607b      	str	r3, [r7, #4]
 80099ac:	e001      	b.n	80099b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099ae:	2300      	movs	r3, #0
 80099b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099b2:	687b      	ldr	r3, [r7, #4]
	}
 80099b4:	4618      	mov	r0, r3
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	20000c3c 	.word	0x20000c3c
 80099c4:	20000c58 	.word	0x20000c58

080099c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099d4:	2300      	movs	r3, #0
 80099d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d056      	beq.n	8009a8c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099de:	4b2e      	ldr	r3, [pc, #184]	; (8009a98 <xTaskPriorityDisinherit+0xd0>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d00a      	beq.n	80099fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80099e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	60fb      	str	r3, [r7, #12]
}
 80099fa:	bf00      	nop
 80099fc:	e7fe      	b.n	80099fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10a      	bne.n	8009a1c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0a:	f383 8811 	msr	BASEPRI, r3
 8009a0e:	f3bf 8f6f 	isb	sy
 8009a12:	f3bf 8f4f 	dsb	sy
 8009a16:	60bb      	str	r3, [r7, #8]
}
 8009a18:	bf00      	nop
 8009a1a:	e7fe      	b.n	8009a1a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a20:	1e5a      	subs	r2, r3, #1
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d02c      	beq.n	8009a8c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d128      	bne.n	8009a8c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe fb58 	bl	80080f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5c:	4b0f      	ldr	r3, [pc, #60]	; (8009a9c <xTaskPriorityDisinherit+0xd4>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d903      	bls.n	8009a6c <xTaskPriorityDisinherit+0xa4>
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a68:	4a0c      	ldr	r2, [pc, #48]	; (8009a9c <xTaskPriorityDisinherit+0xd4>)
 8009a6a:	6013      	str	r3, [r2, #0]
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a70:	4613      	mov	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4413      	add	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4a09      	ldr	r2, [pc, #36]	; (8009aa0 <xTaskPriorityDisinherit+0xd8>)
 8009a7a:	441a      	add	r2, r3
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	3304      	adds	r3, #4
 8009a80:	4619      	mov	r1, r3
 8009a82:	4610      	mov	r0, r2
 8009a84:	f7fe fad9 	bl	800803a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a8c:	697b      	ldr	r3, [r7, #20]
	}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3718      	adds	r7, #24
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	2000075c 	.word	0x2000075c
 8009a9c:	20000c38 	.word	0x20000c38
 8009aa0:	20000760 	.word	0x20000760

08009aa4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009aae:	4b21      	ldr	r3, [pc, #132]	; (8009b34 <prvAddCurrentTaskToDelayedList+0x90>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ab4:	4b20      	ldr	r3, [pc, #128]	; (8009b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	3304      	adds	r3, #4
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fe fb1a 	bl	80080f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ac6:	d10a      	bne.n	8009ade <prvAddCurrentTaskToDelayedList+0x3a>
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d007      	beq.n	8009ade <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ace:	4b1a      	ldr	r3, [pc, #104]	; (8009b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4819      	ldr	r0, [pc, #100]	; (8009b3c <prvAddCurrentTaskToDelayedList+0x98>)
 8009ad8:	f7fe faaf 	bl	800803a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009adc:	e026      	b.n	8009b2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ae6:	4b14      	ldr	r3, [pc, #80]	; (8009b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d209      	bcs.n	8009b0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009af6:	4b12      	ldr	r3, [pc, #72]	; (8009b40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	4b0f      	ldr	r3, [pc, #60]	; (8009b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3304      	adds	r3, #4
 8009b00:	4619      	mov	r1, r3
 8009b02:	4610      	mov	r0, r2
 8009b04:	f7fe fabd 	bl	8008082 <vListInsert>
}
 8009b08:	e010      	b.n	8009b2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b0a:	4b0e      	ldr	r3, [pc, #56]	; (8009b44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	4b0a      	ldr	r3, [pc, #40]	; (8009b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3304      	adds	r3, #4
 8009b14:	4619      	mov	r1, r3
 8009b16:	4610      	mov	r0, r2
 8009b18:	f7fe fab3 	bl	8008082 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b1c:	4b0a      	ldr	r3, [pc, #40]	; (8009b48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d202      	bcs.n	8009b2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b26:	4a08      	ldr	r2, [pc, #32]	; (8009b48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	6013      	str	r3, [r2, #0]
}
 8009b2c:	bf00      	nop
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	20000c34 	.word	0x20000c34
 8009b38:	2000075c 	.word	0x2000075c
 8009b3c:	20000c1c 	.word	0x20000c1c
 8009b40:	20000bec 	.word	0x20000bec
 8009b44:	20000be8 	.word	0x20000be8
 8009b48:	20000c50 	.word	0x20000c50

08009b4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b08a      	sub	sp, #40	; 0x28
 8009b50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b52:	2300      	movs	r3, #0
 8009b54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b56:	f000 fb07 	bl	800a168 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b5a:	4b1c      	ldr	r3, [pc, #112]	; (8009bcc <xTimerCreateTimerTask+0x80>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d021      	beq.n	8009ba6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b6a:	1d3a      	adds	r2, r7, #4
 8009b6c:	f107 0108 	add.w	r1, r7, #8
 8009b70:	f107 030c 	add.w	r3, r7, #12
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7fe fa19 	bl	8007fac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b7a:	6879      	ldr	r1, [r7, #4]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	9202      	str	r2, [sp, #8]
 8009b82:	9301      	str	r3, [sp, #4]
 8009b84:	2302      	movs	r3, #2
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	2300      	movs	r3, #0
 8009b8a:	460a      	mov	r2, r1
 8009b8c:	4910      	ldr	r1, [pc, #64]	; (8009bd0 <xTimerCreateTimerTask+0x84>)
 8009b8e:	4811      	ldr	r0, [pc, #68]	; (8009bd4 <xTimerCreateTimerTask+0x88>)
 8009b90:	f7fe ffc6 	bl	8008b20 <xTaskCreateStatic>
 8009b94:	4603      	mov	r3, r0
 8009b96:	4a10      	ldr	r2, [pc, #64]	; (8009bd8 <xTimerCreateTimerTask+0x8c>)
 8009b98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b9a:	4b0f      	ldr	r3, [pc, #60]	; (8009bd8 <xTimerCreateTimerTask+0x8c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d10a      	bne.n	8009bc2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb0:	f383 8811 	msr	BASEPRI, r3
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	613b      	str	r3, [r7, #16]
}
 8009bbe:	bf00      	nop
 8009bc0:	e7fe      	b.n	8009bc0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009bc2:	697b      	ldr	r3, [r7, #20]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3718      	adds	r7, #24
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	20000c8c 	.word	0x20000c8c
 8009bd0:	0800be94 	.word	0x0800be94
 8009bd4:	08009d11 	.word	0x08009d11
 8009bd8:	20000c90 	.word	0x20000c90

08009bdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08a      	sub	sp, #40	; 0x28
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
 8009be8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009bea:	2300      	movs	r3, #0
 8009bec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10a      	bne.n	8009c0a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	623b      	str	r3, [r7, #32]
}
 8009c06:	bf00      	nop
 8009c08:	e7fe      	b.n	8009c08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c0a:	4b1a      	ldr	r3, [pc, #104]	; (8009c74 <xTimerGenericCommand+0x98>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d02a      	beq.n	8009c68 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	2b05      	cmp	r3, #5
 8009c22:	dc18      	bgt.n	8009c56 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c24:	f7ff feb2 	bl	800998c <xTaskGetSchedulerState>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d109      	bne.n	8009c42 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c2e:	4b11      	ldr	r3, [pc, #68]	; (8009c74 <xTimerGenericCommand+0x98>)
 8009c30:	6818      	ldr	r0, [r3, #0]
 8009c32:	f107 0110 	add.w	r1, r7, #16
 8009c36:	2300      	movs	r3, #0
 8009c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c3a:	f7fe fb89 	bl	8008350 <xQueueGenericSend>
 8009c3e:	6278      	str	r0, [r7, #36]	; 0x24
 8009c40:	e012      	b.n	8009c68 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c42:	4b0c      	ldr	r3, [pc, #48]	; (8009c74 <xTimerGenericCommand+0x98>)
 8009c44:	6818      	ldr	r0, [r3, #0]
 8009c46:	f107 0110 	add.w	r1, r7, #16
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f7fe fb7f 	bl	8008350 <xQueueGenericSend>
 8009c52:	6278      	str	r0, [r7, #36]	; 0x24
 8009c54:	e008      	b.n	8009c68 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c56:	4b07      	ldr	r3, [pc, #28]	; (8009c74 <xTimerGenericCommand+0x98>)
 8009c58:	6818      	ldr	r0, [r3, #0]
 8009c5a:	f107 0110 	add.w	r1, r7, #16
 8009c5e:	2300      	movs	r3, #0
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	f7fe fc73 	bl	800854c <xQueueGenericSendFromISR>
 8009c66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3728      	adds	r7, #40	; 0x28
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20000c8c 	.word	0x20000c8c

08009c78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b088      	sub	sp, #32
 8009c7c:	af02      	add	r7, sp, #8
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c82:	4b22      	ldr	r3, [pc, #136]	; (8009d0c <prvProcessExpiredTimer+0x94>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	3304      	adds	r3, #4
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fe fa2f 	bl	80080f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c9c:	f003 0304 	and.w	r3, r3, #4
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d022      	beq.n	8009cea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	699a      	ldr	r2, [r3, #24]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	18d1      	adds	r1, r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	6978      	ldr	r0, [r7, #20]
 8009cb2:	f000 f8d1 	bl	8009e58 <prvInsertTimerInActiveList>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d01f      	beq.n	8009cfc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	6978      	ldr	r0, [r7, #20]
 8009cc8:	f7ff ff88 	bl	8009bdc <xTimerGenericCommand>
 8009ccc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d113      	bne.n	8009cfc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	60fb      	str	r3, [r7, #12]
}
 8009ce6:	bf00      	nop
 8009ce8:	e7fe      	b.n	8009ce8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cf0:	f023 0301 	bic.w	r3, r3, #1
 8009cf4:	b2da      	uxtb	r2, r3
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	6a1b      	ldr	r3, [r3, #32]
 8009d00:	6978      	ldr	r0, [r7, #20]
 8009d02:	4798      	blx	r3
}
 8009d04:	bf00      	nop
 8009d06:	3718      	adds	r7, #24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	20000c84 	.word	0x20000c84

08009d10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d18:	f107 0308 	add.w	r3, r7, #8
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f000 f857 	bl	8009dd0 <prvGetNextExpireTime>
 8009d22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	4619      	mov	r1, r3
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f000 f803 	bl	8009d34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d2e:	f000 f8d5 	bl	8009edc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d32:	e7f1      	b.n	8009d18 <prvTimerTask+0x8>

08009d34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d3e:	f7ff fa31 	bl	80091a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d42:	f107 0308 	add.w	r3, r7, #8
 8009d46:	4618      	mov	r0, r3
 8009d48:	f000 f866 	bl	8009e18 <prvSampleTimeNow>
 8009d4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d130      	bne.n	8009db6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10a      	bne.n	8009d70 <prvProcessTimerOrBlockTask+0x3c>
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d806      	bhi.n	8009d70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d62:	f7ff fa2d 	bl	80091c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d66:	68f9      	ldr	r1, [r7, #12]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7ff ff85 	bl	8009c78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d6e:	e024      	b.n	8009dba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d008      	beq.n	8009d88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d76:	4b13      	ldr	r3, [pc, #76]	; (8009dc4 <prvProcessTimerOrBlockTask+0x90>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d101      	bne.n	8009d84 <prvProcessTimerOrBlockTask+0x50>
 8009d80:	2301      	movs	r3, #1
 8009d82:	e000      	b.n	8009d86 <prvProcessTimerOrBlockTask+0x52>
 8009d84:	2300      	movs	r3, #0
 8009d86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d88:	4b0f      	ldr	r3, [pc, #60]	; (8009dc8 <prvProcessTimerOrBlockTask+0x94>)
 8009d8a:	6818      	ldr	r0, [r3, #0]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	4619      	mov	r1, r3
 8009d96:	f7fe fe8f 	bl	8008ab8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d9a:	f7ff fa11 	bl	80091c0 <xTaskResumeAll>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10a      	bne.n	8009dba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009da4:	4b09      	ldr	r3, [pc, #36]	; (8009dcc <prvProcessTimerOrBlockTask+0x98>)
 8009da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009daa:	601a      	str	r2, [r3, #0]
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	f3bf 8f6f 	isb	sy
}
 8009db4:	e001      	b.n	8009dba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009db6:	f7ff fa03 	bl	80091c0 <xTaskResumeAll>
}
 8009dba:	bf00      	nop
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20000c88 	.word	0x20000c88
 8009dc8:	20000c8c 	.word	0x20000c8c
 8009dcc:	e000ed04 	.word	0xe000ed04

08009dd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009dd8:	4b0e      	ldr	r3, [pc, #56]	; (8009e14 <prvGetNextExpireTime+0x44>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d101      	bne.n	8009de6 <prvGetNextExpireTime+0x16>
 8009de2:	2201      	movs	r2, #1
 8009de4:	e000      	b.n	8009de8 <prvGetNextExpireTime+0x18>
 8009de6:	2200      	movs	r2, #0
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d105      	bne.n	8009e00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009df4:	4b07      	ldr	r3, [pc, #28]	; (8009e14 <prvGetNextExpireTime+0x44>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	60fb      	str	r3, [r7, #12]
 8009dfe:	e001      	b.n	8009e04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e00:	2300      	movs	r3, #0
 8009e02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e04:	68fb      	ldr	r3, [r7, #12]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	20000c84 	.word	0x20000c84

08009e18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e20:	f7ff fa6c 	bl	80092fc <xTaskGetTickCount>
 8009e24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e26:	4b0b      	ldr	r3, [pc, #44]	; (8009e54 <prvSampleTimeNow+0x3c>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d205      	bcs.n	8009e3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e30:	f000 f936 	bl	800a0a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	601a      	str	r2, [r3, #0]
 8009e3a:	e002      	b.n	8009e42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e42:	4a04      	ldr	r2, [pc, #16]	; (8009e54 <prvSampleTimeNow+0x3c>)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e48:	68fb      	ldr	r3, [r7, #12]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20000c94 	.word	0x20000c94

08009e58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e66:	2300      	movs	r3, #0
 8009e68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d812      	bhi.n	8009ea4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	1ad2      	subs	r2, r2, r3
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d302      	bcc.n	8009e92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	617b      	str	r3, [r7, #20]
 8009e90:	e01b      	b.n	8009eca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e92:	4b10      	ldr	r3, [pc, #64]	; (8009ed4 <prvInsertTimerInActiveList+0x7c>)
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3304      	adds	r3, #4
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	f7fe f8f0 	bl	8008082 <vListInsert>
 8009ea2:	e012      	b.n	8009eca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d206      	bcs.n	8009eba <prvInsertTimerInActiveList+0x62>
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d302      	bcc.n	8009eba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	617b      	str	r3, [r7, #20]
 8009eb8:	e007      	b.n	8009eca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009eba:	4b07      	ldr	r3, [pc, #28]	; (8009ed8 <prvInsertTimerInActiveList+0x80>)
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	f7fe f8dc 	bl	8008082 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009eca:	697b      	ldr	r3, [r7, #20]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3718      	adds	r7, #24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	20000c88 	.word	0x20000c88
 8009ed8:	20000c84 	.word	0x20000c84

08009edc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b08e      	sub	sp, #56	; 0x38
 8009ee0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ee2:	e0ca      	b.n	800a07a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	da18      	bge.n	8009f1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009eea:	1d3b      	adds	r3, r7, #4
 8009eec:	3304      	adds	r3, #4
 8009eee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10a      	bne.n	8009f0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	61fb      	str	r3, [r7, #28]
}
 8009f08:	bf00      	nop
 8009f0a:	e7fe      	b.n	8009f0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f12:	6850      	ldr	r0, [r2, #4]
 8009f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f16:	6892      	ldr	r2, [r2, #8]
 8009f18:	4611      	mov	r1, r2
 8009f1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f2c0 80aa 	blt.w	800a078 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d004      	beq.n	8009f3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f32:	3304      	adds	r3, #4
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fe f8dd 	bl	80080f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f3a:	463b      	mov	r3, r7
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7ff ff6b 	bl	8009e18 <prvSampleTimeNow>
 8009f42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b09      	cmp	r3, #9
 8009f48:	f200 8097 	bhi.w	800a07a <prvProcessReceivedCommands+0x19e>
 8009f4c:	a201      	add	r2, pc, #4	; (adr r2, 8009f54 <prvProcessReceivedCommands+0x78>)
 8009f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f52:	bf00      	nop
 8009f54:	08009f7d 	.word	0x08009f7d
 8009f58:	08009f7d 	.word	0x08009f7d
 8009f5c:	08009f7d 	.word	0x08009f7d
 8009f60:	08009ff1 	.word	0x08009ff1
 8009f64:	0800a005 	.word	0x0800a005
 8009f68:	0800a04f 	.word	0x0800a04f
 8009f6c:	08009f7d 	.word	0x08009f7d
 8009f70:	08009f7d 	.word	0x08009f7d
 8009f74:	08009ff1 	.word	0x08009ff1
 8009f78:	0800a005 	.word	0x0800a005
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f82:	f043 0301 	orr.w	r3, r3, #1
 8009f86:	b2da      	uxtb	r2, r3
 8009f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	18d1      	adds	r1, r2, r3
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f9c:	f7ff ff5c 	bl	8009e58 <prvInsertTimerInActiveList>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d069      	beq.n	800a07a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fb4:	f003 0304 	and.w	r3, r3, #4
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d05e      	beq.n	800a07a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	441a      	add	r2, r3
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	2300      	movs	r3, #0
 8009fca:	2100      	movs	r1, #0
 8009fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fce:	f7ff fe05 	bl	8009bdc <xTimerGenericCommand>
 8009fd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d14f      	bne.n	800a07a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	61bb      	str	r3, [r7, #24]
}
 8009fec:	bf00      	nop
 8009fee:	e7fe      	b.n	8009fee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ff6:	f023 0301 	bic.w	r3, r3, #1
 8009ffa:	b2da      	uxtb	r2, r3
 8009ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a002:	e03a      	b.n	800a07a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a006:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a00a:	f043 0301 	orr.w	r3, r3, #1
 800a00e:	b2da      	uxtb	r2, r3
 800a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10a      	bne.n	800a03a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	617b      	str	r3, [r7, #20]
}
 800a036:	bf00      	nop
 800a038:	e7fe      	b.n	800a038 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03c:	699a      	ldr	r2, [r3, #24]
 800a03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a040:	18d1      	adds	r1, r2, r3
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a048:	f7ff ff06 	bl	8009e58 <prvInsertTimerInActiveList>
					break;
 800a04c:	e015      	b.n	800a07a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a054:	f003 0302 	and.w	r3, r3, #2
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d103      	bne.n	800a064 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a05c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a05e:	f000 fbdf 	bl	800a820 <vPortFree>
 800a062:	e00a      	b.n	800a07a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a066:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a06a:	f023 0301 	bic.w	r3, r3, #1
 800a06e:	b2da      	uxtb	r2, r3
 800a070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a072:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a076:	e000      	b.n	800a07a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a078:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a07a:	4b08      	ldr	r3, [pc, #32]	; (800a09c <prvProcessReceivedCommands+0x1c0>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	1d39      	adds	r1, r7, #4
 800a080:	2200      	movs	r2, #0
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe fafe 	bl	8008684 <xQueueReceive>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f47f af2a 	bne.w	8009ee4 <prvProcessReceivedCommands+0x8>
	}
}
 800a090:	bf00      	nop
 800a092:	bf00      	nop
 800a094:	3730      	adds	r7, #48	; 0x30
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	20000c8c 	.word	0x20000c8c

0800a0a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b088      	sub	sp, #32
 800a0a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0a6:	e048      	b.n	800a13a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0a8:	4b2d      	ldr	r3, [pc, #180]	; (800a160 <prvSwitchTimerLists+0xc0>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0b2:	4b2b      	ldr	r3, [pc, #172]	; (800a160 <prvSwitchTimerLists+0xc0>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	3304      	adds	r3, #4
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7fe f817 	bl	80080f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0d4:	f003 0304 	and.w	r3, r3, #4
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d02e      	beq.n	800a13a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0e6:	68ba      	ldr	r2, [r7, #8]
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d90e      	bls.n	800a10c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0fa:	4b19      	ldr	r3, [pc, #100]	; (800a160 <prvSwitchTimerLists+0xc0>)
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3304      	adds	r3, #4
 800a102:	4619      	mov	r1, r3
 800a104:	4610      	mov	r0, r2
 800a106:	f7fd ffbc 	bl	8008082 <vListInsert>
 800a10a:	e016      	b.n	800a13a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a10c:	2300      	movs	r3, #0
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	2300      	movs	r3, #0
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	2100      	movs	r1, #0
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f7ff fd60 	bl	8009bdc <xTimerGenericCommand>
 800a11c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10a      	bne.n	800a13a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	603b      	str	r3, [r7, #0]
}
 800a136:	bf00      	nop
 800a138:	e7fe      	b.n	800a138 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a13a:	4b09      	ldr	r3, [pc, #36]	; (800a160 <prvSwitchTimerLists+0xc0>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1b1      	bne.n	800a0a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a144:	4b06      	ldr	r3, [pc, #24]	; (800a160 <prvSwitchTimerLists+0xc0>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a14a:	4b06      	ldr	r3, [pc, #24]	; (800a164 <prvSwitchTimerLists+0xc4>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a04      	ldr	r2, [pc, #16]	; (800a160 <prvSwitchTimerLists+0xc0>)
 800a150:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a152:	4a04      	ldr	r2, [pc, #16]	; (800a164 <prvSwitchTimerLists+0xc4>)
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	6013      	str	r3, [r2, #0]
}
 800a158:	bf00      	nop
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	20000c84 	.word	0x20000c84
 800a164:	20000c88 	.word	0x20000c88

0800a168 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a16e:	f000 f969 	bl	800a444 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a172:	4b15      	ldr	r3, [pc, #84]	; (800a1c8 <prvCheckForValidListAndQueue+0x60>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d120      	bne.n	800a1bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a17a:	4814      	ldr	r0, [pc, #80]	; (800a1cc <prvCheckForValidListAndQueue+0x64>)
 800a17c:	f7fd ff30 	bl	8007fe0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a180:	4813      	ldr	r0, [pc, #76]	; (800a1d0 <prvCheckForValidListAndQueue+0x68>)
 800a182:	f7fd ff2d 	bl	8007fe0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a186:	4b13      	ldr	r3, [pc, #76]	; (800a1d4 <prvCheckForValidListAndQueue+0x6c>)
 800a188:	4a10      	ldr	r2, [pc, #64]	; (800a1cc <prvCheckForValidListAndQueue+0x64>)
 800a18a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a18c:	4b12      	ldr	r3, [pc, #72]	; (800a1d8 <prvCheckForValidListAndQueue+0x70>)
 800a18e:	4a10      	ldr	r2, [pc, #64]	; (800a1d0 <prvCheckForValidListAndQueue+0x68>)
 800a190:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a192:	2300      	movs	r3, #0
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	4b11      	ldr	r3, [pc, #68]	; (800a1dc <prvCheckForValidListAndQueue+0x74>)
 800a198:	4a11      	ldr	r2, [pc, #68]	; (800a1e0 <prvCheckForValidListAndQueue+0x78>)
 800a19a:	2110      	movs	r1, #16
 800a19c:	200a      	movs	r0, #10
 800a19e:	f7fe f83b 	bl	8008218 <xQueueGenericCreateStatic>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	4a08      	ldr	r2, [pc, #32]	; (800a1c8 <prvCheckForValidListAndQueue+0x60>)
 800a1a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a1a8:	4b07      	ldr	r3, [pc, #28]	; (800a1c8 <prvCheckForValidListAndQueue+0x60>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d005      	beq.n	800a1bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a1b0:	4b05      	ldr	r3, [pc, #20]	; (800a1c8 <prvCheckForValidListAndQueue+0x60>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	490b      	ldr	r1, [pc, #44]	; (800a1e4 <prvCheckForValidListAndQueue+0x7c>)
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fe fc54 	bl	8008a64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1bc:	f000 f972 	bl	800a4a4 <vPortExitCritical>
}
 800a1c0:	bf00      	nop
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20000c8c 	.word	0x20000c8c
 800a1cc:	20000c5c 	.word	0x20000c5c
 800a1d0:	20000c70 	.word	0x20000c70
 800a1d4:	20000c84 	.word	0x20000c84
 800a1d8:	20000c88 	.word	0x20000c88
 800a1dc:	20000d38 	.word	0x20000d38
 800a1e0:	20000c98 	.word	0x20000c98
 800a1e4:	0800be9c 	.word	0x0800be9c

0800a1e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	3b04      	subs	r3, #4
 800a1f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3b04      	subs	r3, #4
 800a206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	f023 0201 	bic.w	r2, r3, #1
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	3b04      	subs	r3, #4
 800a216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a218:	4a0c      	ldr	r2, [pc, #48]	; (800a24c <pxPortInitialiseStack+0x64>)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	3b14      	subs	r3, #20
 800a222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	3b04      	subs	r3, #4
 800a22e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f06f 0202 	mvn.w	r2, #2
 800a236:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	3b20      	subs	r3, #32
 800a23c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a23e:	68fb      	ldr	r3, [r7, #12]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	0800a251 	.word	0x0800a251

0800a250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a256:	2300      	movs	r3, #0
 800a258:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a25a:	4b12      	ldr	r3, [pc, #72]	; (800a2a4 <prvTaskExitError+0x54>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a262:	d00a      	beq.n	800a27a <prvTaskExitError+0x2a>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	60fb      	str	r3, [r7, #12]
}
 800a276:	bf00      	nop
 800a278:	e7fe      	b.n	800a278 <prvTaskExitError+0x28>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	60bb      	str	r3, [r7, #8]
}
 800a28c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a28e:	bf00      	nop
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d0fc      	beq.n	800a290 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a296:	bf00      	nop
 800a298:	bf00      	nop
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	2000000c 	.word	0x2000000c
	...

0800a2b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2b0:	4b07      	ldr	r3, [pc, #28]	; (800a2d0 <pxCurrentTCBConst2>)
 800a2b2:	6819      	ldr	r1, [r3, #0]
 800a2b4:	6808      	ldr	r0, [r1, #0]
 800a2b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ba:	f380 8809 	msr	PSP, r0
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f04f 0000 	mov.w	r0, #0
 800a2c6:	f380 8811 	msr	BASEPRI, r0
 800a2ca:	4770      	bx	lr
 800a2cc:	f3af 8000 	nop.w

0800a2d0 <pxCurrentTCBConst2>:
 800a2d0:	2000075c 	.word	0x2000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop

0800a2d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2d8:	4808      	ldr	r0, [pc, #32]	; (800a2fc <prvPortStartFirstTask+0x24>)
 800a2da:	6800      	ldr	r0, [r0, #0]
 800a2dc:	6800      	ldr	r0, [r0, #0]
 800a2de:	f380 8808 	msr	MSP, r0
 800a2e2:	f04f 0000 	mov.w	r0, #0
 800a2e6:	f380 8814 	msr	CONTROL, r0
 800a2ea:	b662      	cpsie	i
 800a2ec:	b661      	cpsie	f
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	df00      	svc	0
 800a2f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2fa:	bf00      	nop
 800a2fc:	e000ed08 	.word	0xe000ed08

0800a300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a306:	4b46      	ldr	r3, [pc, #280]	; (800a420 <xPortStartScheduler+0x120>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a46      	ldr	r2, [pc, #280]	; (800a424 <xPortStartScheduler+0x124>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d10a      	bne.n	800a326 <xPortStartScheduler+0x26>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	613b      	str	r3, [r7, #16]
}
 800a322:	bf00      	nop
 800a324:	e7fe      	b.n	800a324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a326:	4b3e      	ldr	r3, [pc, #248]	; (800a420 <xPortStartScheduler+0x120>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a3f      	ldr	r2, [pc, #252]	; (800a428 <xPortStartScheduler+0x128>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d10a      	bne.n	800a346 <xPortStartScheduler+0x46>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	60fb      	str	r3, [r7, #12]
}
 800a342:	bf00      	nop
 800a344:	e7fe      	b.n	800a344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a346:	4b39      	ldr	r3, [pc, #228]	; (800a42c <xPortStartScheduler+0x12c>)
 800a348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	22ff      	movs	r2, #255	; 0xff
 800a356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a360:	78fb      	ldrb	r3, [r7, #3]
 800a362:	b2db      	uxtb	r3, r3
 800a364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	4b31      	ldr	r3, [pc, #196]	; (800a430 <xPortStartScheduler+0x130>)
 800a36c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a36e:	4b31      	ldr	r3, [pc, #196]	; (800a434 <xPortStartScheduler+0x134>)
 800a370:	2207      	movs	r2, #7
 800a372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a374:	e009      	b.n	800a38a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a376:	4b2f      	ldr	r3, [pc, #188]	; (800a434 <xPortStartScheduler+0x134>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3b01      	subs	r3, #1
 800a37c:	4a2d      	ldr	r2, [pc, #180]	; (800a434 <xPortStartScheduler+0x134>)
 800a37e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a380:	78fb      	ldrb	r3, [r7, #3]
 800a382:	b2db      	uxtb	r3, r3
 800a384:	005b      	lsls	r3, r3, #1
 800a386:	b2db      	uxtb	r3, r3
 800a388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a38a:	78fb      	ldrb	r3, [r7, #3]
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a392:	2b80      	cmp	r3, #128	; 0x80
 800a394:	d0ef      	beq.n	800a376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a396:	4b27      	ldr	r3, [pc, #156]	; (800a434 <xPortStartScheduler+0x134>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f1c3 0307 	rsb	r3, r3, #7
 800a39e:	2b04      	cmp	r3, #4
 800a3a0:	d00a      	beq.n	800a3b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	60bb      	str	r3, [r7, #8]
}
 800a3b4:	bf00      	nop
 800a3b6:	e7fe      	b.n	800a3b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3b8:	4b1e      	ldr	r3, [pc, #120]	; (800a434 <xPortStartScheduler+0x134>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	021b      	lsls	r3, r3, #8
 800a3be:	4a1d      	ldr	r2, [pc, #116]	; (800a434 <xPortStartScheduler+0x134>)
 800a3c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3c2:	4b1c      	ldr	r3, [pc, #112]	; (800a434 <xPortStartScheduler+0x134>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3ca:	4a1a      	ldr	r2, [pc, #104]	; (800a434 <xPortStartScheduler+0x134>)
 800a3cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	b2da      	uxtb	r2, r3
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3d6:	4b18      	ldr	r3, [pc, #96]	; (800a438 <xPortStartScheduler+0x138>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a17      	ldr	r2, [pc, #92]	; (800a438 <xPortStartScheduler+0x138>)
 800a3dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a3e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3e2:	4b15      	ldr	r3, [pc, #84]	; (800a438 <xPortStartScheduler+0x138>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a14      	ldr	r2, [pc, #80]	; (800a438 <xPortStartScheduler+0x138>)
 800a3e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a3ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3ee:	f000 f8dd 	bl	800a5ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3f2:	4b12      	ldr	r3, [pc, #72]	; (800a43c <xPortStartScheduler+0x13c>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3f8:	f000 f8fc 	bl	800a5f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3fc:	4b10      	ldr	r3, [pc, #64]	; (800a440 <xPortStartScheduler+0x140>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a0f      	ldr	r2, [pc, #60]	; (800a440 <xPortStartScheduler+0x140>)
 800a402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a408:	f7ff ff66 	bl	800a2d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a40c:	f7ff f852 	bl	80094b4 <vTaskSwitchContext>
	prvTaskExitError();
 800a410:	f7ff ff1e 	bl	800a250 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3718      	adds	r7, #24
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	e000ed00 	.word	0xe000ed00
 800a424:	410fc271 	.word	0x410fc271
 800a428:	410fc270 	.word	0x410fc270
 800a42c:	e000e400 	.word	0xe000e400
 800a430:	20000d88 	.word	0x20000d88
 800a434:	20000d8c 	.word	0x20000d8c
 800a438:	e000ed20 	.word	0xe000ed20
 800a43c:	2000000c 	.word	0x2000000c
 800a440:	e000ef34 	.word	0xe000ef34

0800a444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
	__asm volatile
 800a44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	607b      	str	r3, [r7, #4]
}
 800a45c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a45e:	4b0f      	ldr	r3, [pc, #60]	; (800a49c <vPortEnterCritical+0x58>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	3301      	adds	r3, #1
 800a464:	4a0d      	ldr	r2, [pc, #52]	; (800a49c <vPortEnterCritical+0x58>)
 800a466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a468:	4b0c      	ldr	r3, [pc, #48]	; (800a49c <vPortEnterCritical+0x58>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d10f      	bne.n	800a490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a470:	4b0b      	ldr	r3, [pc, #44]	; (800a4a0 <vPortEnterCritical+0x5c>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00a      	beq.n	800a490 <vPortEnterCritical+0x4c>
	__asm volatile
 800a47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47e:	f383 8811 	msr	BASEPRI, r3
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	603b      	str	r3, [r7, #0]
}
 800a48c:	bf00      	nop
 800a48e:	e7fe      	b.n	800a48e <vPortEnterCritical+0x4a>
	}
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr
 800a49c:	2000000c 	.word	0x2000000c
 800a4a0:	e000ed04 	.word	0xe000ed04

0800a4a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4aa:	4b12      	ldr	r3, [pc, #72]	; (800a4f4 <vPortExitCritical+0x50>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d10a      	bne.n	800a4c8 <vPortExitCritical+0x24>
	__asm volatile
 800a4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b6:	f383 8811 	msr	BASEPRI, r3
 800a4ba:	f3bf 8f6f 	isb	sy
 800a4be:	f3bf 8f4f 	dsb	sy
 800a4c2:	607b      	str	r3, [r7, #4]
}
 800a4c4:	bf00      	nop
 800a4c6:	e7fe      	b.n	800a4c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a4c8:	4b0a      	ldr	r3, [pc, #40]	; (800a4f4 <vPortExitCritical+0x50>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	4a09      	ldr	r2, [pc, #36]	; (800a4f4 <vPortExitCritical+0x50>)
 800a4d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4d2:	4b08      	ldr	r3, [pc, #32]	; (800a4f4 <vPortExitCritical+0x50>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d105      	bne.n	800a4e6 <vPortExitCritical+0x42>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	f383 8811 	msr	BASEPRI, r3
}
 800a4e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4e6:	bf00      	nop
 800a4e8:	370c      	adds	r7, #12
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	2000000c 	.word	0x2000000c
	...

0800a500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a500:	f3ef 8009 	mrs	r0, PSP
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	4b15      	ldr	r3, [pc, #84]	; (800a560 <pxCurrentTCBConst>)
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	f01e 0f10 	tst.w	lr, #16
 800a510:	bf08      	it	eq
 800a512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51a:	6010      	str	r0, [r2, #0]
 800a51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a520:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a524:	f380 8811 	msr	BASEPRI, r0
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f7fe ffc0 	bl	80094b4 <vTaskSwitchContext>
 800a534:	f04f 0000 	mov.w	r0, #0
 800a538:	f380 8811 	msr	BASEPRI, r0
 800a53c:	bc09      	pop	{r0, r3}
 800a53e:	6819      	ldr	r1, [r3, #0]
 800a540:	6808      	ldr	r0, [r1, #0]
 800a542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a546:	f01e 0f10 	tst.w	lr, #16
 800a54a:	bf08      	it	eq
 800a54c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a550:	f380 8809 	msr	PSP, r0
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	f3af 8000 	nop.w

0800a560 <pxCurrentTCBConst>:
 800a560:	2000075c 	.word	0x2000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a564:	bf00      	nop
 800a566:	bf00      	nop

0800a568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	607b      	str	r3, [r7, #4]
}
 800a580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a582:	f7fe fedd 	bl	8009340 <xTaskIncrementTick>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d003      	beq.n	800a594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a58c:	4b06      	ldr	r3, [pc, #24]	; (800a5a8 <xPortSysTickHandler+0x40>)
 800a58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	2300      	movs	r3, #0
 800a596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	f383 8811 	msr	BASEPRI, r3
}
 800a59e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5a0:	bf00      	nop
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	e000ed04 	.word	0xe000ed04

0800a5ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5b0:	4b0b      	ldr	r3, [pc, #44]	; (800a5e0 <vPortSetupTimerInterrupt+0x34>)
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5b6:	4b0b      	ldr	r3, [pc, #44]	; (800a5e4 <vPortSetupTimerInterrupt+0x38>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5bc:	4b0a      	ldr	r3, [pc, #40]	; (800a5e8 <vPortSetupTimerInterrupt+0x3c>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a0a      	ldr	r2, [pc, #40]	; (800a5ec <vPortSetupTimerInterrupt+0x40>)
 800a5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c6:	099b      	lsrs	r3, r3, #6
 800a5c8:	4a09      	ldr	r2, [pc, #36]	; (800a5f0 <vPortSetupTimerInterrupt+0x44>)
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5ce:	4b04      	ldr	r3, [pc, #16]	; (800a5e0 <vPortSetupTimerInterrupt+0x34>)
 800a5d0:	2207      	movs	r2, #7
 800a5d2:	601a      	str	r2, [r3, #0]
}
 800a5d4:	bf00      	nop
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	e000e010 	.word	0xe000e010
 800a5e4:	e000e018 	.word	0xe000e018
 800a5e8:	20000000 	.word	0x20000000
 800a5ec:	10624dd3 	.word	0x10624dd3
 800a5f0:	e000e014 	.word	0xe000e014

0800a5f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a604 <vPortEnableVFP+0x10>
 800a5f8:	6801      	ldr	r1, [r0, #0]
 800a5fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a5fe:	6001      	str	r1, [r0, #0]
 800a600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a602:	bf00      	nop
 800a604:	e000ed88 	.word	0xe000ed88

0800a608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a60e:	f3ef 8305 	mrs	r3, IPSR
 800a612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2b0f      	cmp	r3, #15
 800a618:	d914      	bls.n	800a644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a61a:	4a17      	ldr	r2, [pc, #92]	; (800a678 <vPortValidateInterruptPriority+0x70>)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	4413      	add	r3, r2
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a624:	4b15      	ldr	r3, [pc, #84]	; (800a67c <vPortValidateInterruptPriority+0x74>)
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	7afa      	ldrb	r2, [r7, #11]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d20a      	bcs.n	800a644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	607b      	str	r3, [r7, #4]
}
 800a640:	bf00      	nop
 800a642:	e7fe      	b.n	800a642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a644:	4b0e      	ldr	r3, [pc, #56]	; (800a680 <vPortValidateInterruptPriority+0x78>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a64c:	4b0d      	ldr	r3, [pc, #52]	; (800a684 <vPortValidateInterruptPriority+0x7c>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	429a      	cmp	r2, r3
 800a652:	d90a      	bls.n	800a66a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	603b      	str	r3, [r7, #0]
}
 800a666:	bf00      	nop
 800a668:	e7fe      	b.n	800a668 <vPortValidateInterruptPriority+0x60>
	}
 800a66a:	bf00      	nop
 800a66c:	3714      	adds	r7, #20
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	e000e3f0 	.word	0xe000e3f0
 800a67c:	20000d88 	.word	0x20000d88
 800a680:	e000ed0c 	.word	0xe000ed0c
 800a684:	20000d8c 	.word	0x20000d8c

0800a688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08a      	sub	sp, #40	; 0x28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a690:	2300      	movs	r3, #0
 800a692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a694:	f7fe fd86 	bl	80091a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a698:	4b5b      	ldr	r3, [pc, #364]	; (800a808 <pvPortMalloc+0x180>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d101      	bne.n	800a6a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6a0:	f000 f920 	bl	800a8e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6a4:	4b59      	ldr	r3, [pc, #356]	; (800a80c <pvPortMalloc+0x184>)
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f040 8093 	bne.w	800a7d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d01d      	beq.n	800a6f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a6b8:	2208      	movs	r2, #8
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4413      	add	r3, r2
 800a6be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f003 0307 	and.w	r3, r3, #7
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d014      	beq.n	800a6f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f023 0307 	bic.w	r3, r3, #7
 800a6d0:	3308      	adds	r3, #8
 800a6d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f003 0307 	and.w	r3, r3, #7
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00a      	beq.n	800a6f4 <pvPortMalloc+0x6c>
	__asm volatile
 800a6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	617b      	str	r3, [r7, #20]
}
 800a6f0:	bf00      	nop
 800a6f2:	e7fe      	b.n	800a6f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d06e      	beq.n	800a7d8 <pvPortMalloc+0x150>
 800a6fa:	4b45      	ldr	r3, [pc, #276]	; (800a810 <pvPortMalloc+0x188>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	429a      	cmp	r2, r3
 800a702:	d869      	bhi.n	800a7d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a704:	4b43      	ldr	r3, [pc, #268]	; (800a814 <pvPortMalloc+0x18c>)
 800a706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a708:	4b42      	ldr	r3, [pc, #264]	; (800a814 <pvPortMalloc+0x18c>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a70e:	e004      	b.n	800a71a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	429a      	cmp	r2, r3
 800a722:	d903      	bls.n	800a72c <pvPortMalloc+0xa4>
 800a724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1f1      	bne.n	800a710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a72c:	4b36      	ldr	r3, [pc, #216]	; (800a808 <pvPortMalloc+0x180>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a732:	429a      	cmp	r2, r3
 800a734:	d050      	beq.n	800a7d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2208      	movs	r2, #8
 800a73c:	4413      	add	r3, r2
 800a73e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	6a3b      	ldr	r3, [r7, #32]
 800a746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74a:	685a      	ldr	r2, [r3, #4]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	1ad2      	subs	r2, r2, r3
 800a750:	2308      	movs	r3, #8
 800a752:	005b      	lsls	r3, r3, #1
 800a754:	429a      	cmp	r2, r3
 800a756:	d91f      	bls.n	800a798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4413      	add	r3, r2
 800a75e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	f003 0307 	and.w	r3, r3, #7
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00a      	beq.n	800a780 <pvPortMalloc+0xf8>
	__asm volatile
 800a76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76e:	f383 8811 	msr	BASEPRI, r3
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	f3bf 8f4f 	dsb	sy
 800a77a:	613b      	str	r3, [r7, #16]
}
 800a77c:	bf00      	nop
 800a77e:	e7fe      	b.n	800a77e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a782:	685a      	ldr	r2, [r3, #4]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	1ad2      	subs	r2, r2, r3
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a792:	69b8      	ldr	r0, [r7, #24]
 800a794:	f000 f908 	bl	800a9a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a798:	4b1d      	ldr	r3, [pc, #116]	; (800a810 <pvPortMalloc+0x188>)
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	4a1b      	ldr	r2, [pc, #108]	; (800a810 <pvPortMalloc+0x188>)
 800a7a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7a6:	4b1a      	ldr	r3, [pc, #104]	; (800a810 <pvPortMalloc+0x188>)
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	4b1b      	ldr	r3, [pc, #108]	; (800a818 <pvPortMalloc+0x190>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d203      	bcs.n	800a7ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7b2:	4b17      	ldr	r3, [pc, #92]	; (800a810 <pvPortMalloc+0x188>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a18      	ldr	r2, [pc, #96]	; (800a818 <pvPortMalloc+0x190>)
 800a7b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	685a      	ldr	r2, [r3, #4]
 800a7be:	4b13      	ldr	r3, [pc, #76]	; (800a80c <pvPortMalloc+0x184>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	431a      	orrs	r2, r3
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a7ce:	4b13      	ldr	r3, [pc, #76]	; (800a81c <pvPortMalloc+0x194>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	4a11      	ldr	r2, [pc, #68]	; (800a81c <pvPortMalloc+0x194>)
 800a7d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7d8:	f7fe fcf2 	bl	80091c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	f003 0307 	and.w	r3, r3, #7
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00a      	beq.n	800a7fc <pvPortMalloc+0x174>
	__asm volatile
 800a7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	60fb      	str	r3, [r7, #12]
}
 800a7f8:	bf00      	nop
 800a7fa:	e7fe      	b.n	800a7fa <pvPortMalloc+0x172>
	return pvReturn;
 800a7fc:	69fb      	ldr	r3, [r7, #28]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3728      	adds	r7, #40	; 0x28
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	20004998 	.word	0x20004998
 800a80c:	200049ac 	.word	0x200049ac
 800a810:	2000499c 	.word	0x2000499c
 800a814:	20004990 	.word	0x20004990
 800a818:	200049a0 	.word	0x200049a0
 800a81c:	200049a4 	.word	0x200049a4

0800a820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d04d      	beq.n	800a8ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a832:	2308      	movs	r3, #8
 800a834:	425b      	negs	r3, r3
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	4413      	add	r3, r2
 800a83a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	685a      	ldr	r2, [r3, #4]
 800a844:	4b24      	ldr	r3, [pc, #144]	; (800a8d8 <vPortFree+0xb8>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4013      	ands	r3, r2
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d10a      	bne.n	800a864 <vPortFree+0x44>
	__asm volatile
 800a84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	60fb      	str	r3, [r7, #12]
}
 800a860:	bf00      	nop
 800a862:	e7fe      	b.n	800a862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00a      	beq.n	800a882 <vPortFree+0x62>
	__asm volatile
 800a86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	60bb      	str	r3, [r7, #8]
}
 800a87e:	bf00      	nop
 800a880:	e7fe      	b.n	800a880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	685a      	ldr	r2, [r3, #4]
 800a886:	4b14      	ldr	r3, [pc, #80]	; (800a8d8 <vPortFree+0xb8>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4013      	ands	r3, r2
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d01e      	beq.n	800a8ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d11a      	bne.n	800a8ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	4b0e      	ldr	r3, [pc, #56]	; (800a8d8 <vPortFree+0xb8>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	43db      	mvns	r3, r3
 800a8a2:	401a      	ands	r2, r3
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8a8:	f7fe fc7c 	bl	80091a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	685a      	ldr	r2, [r3, #4]
 800a8b0:	4b0a      	ldr	r3, [pc, #40]	; (800a8dc <vPortFree+0xbc>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	4a09      	ldr	r2, [pc, #36]	; (800a8dc <vPortFree+0xbc>)
 800a8b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8ba:	6938      	ldr	r0, [r7, #16]
 800a8bc:	f000 f874 	bl	800a9a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a8c0:	4b07      	ldr	r3, [pc, #28]	; (800a8e0 <vPortFree+0xc0>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	4a06      	ldr	r2, [pc, #24]	; (800a8e0 <vPortFree+0xc0>)
 800a8c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a8ca:	f7fe fc79 	bl	80091c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8ce:	bf00      	nop
 800a8d0:	3718      	adds	r7, #24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	200049ac 	.word	0x200049ac
 800a8dc:	2000499c 	.word	0x2000499c
 800a8e0:	200049a8 	.word	0x200049a8

0800a8e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a8ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8f0:	4b27      	ldr	r3, [pc, #156]	; (800a990 <prvHeapInit+0xac>)
 800a8f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f003 0307 	and.w	r3, r3, #7
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00c      	beq.n	800a918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	3307      	adds	r3, #7
 800a902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f023 0307 	bic.w	r3, r3, #7
 800a90a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	4a1f      	ldr	r2, [pc, #124]	; (800a990 <prvHeapInit+0xac>)
 800a914:	4413      	add	r3, r2
 800a916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a91c:	4a1d      	ldr	r2, [pc, #116]	; (800a994 <prvHeapInit+0xb0>)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a922:	4b1c      	ldr	r3, [pc, #112]	; (800a994 <prvHeapInit+0xb0>)
 800a924:	2200      	movs	r2, #0
 800a926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	4413      	add	r3, r2
 800a92e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a930:	2208      	movs	r2, #8
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	1a9b      	subs	r3, r3, r2
 800a936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f023 0307 	bic.w	r3, r3, #7
 800a93e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	4a15      	ldr	r2, [pc, #84]	; (800a998 <prvHeapInit+0xb4>)
 800a944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a946:	4b14      	ldr	r3, [pc, #80]	; (800a998 <prvHeapInit+0xb4>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2200      	movs	r2, #0
 800a94c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a94e:	4b12      	ldr	r3, [pc, #72]	; (800a998 <prvHeapInit+0xb4>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2200      	movs	r2, #0
 800a954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	1ad2      	subs	r2, r2, r3
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a964:	4b0c      	ldr	r3, [pc, #48]	; (800a998 <prvHeapInit+0xb4>)
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	4a0a      	ldr	r2, [pc, #40]	; (800a99c <prvHeapInit+0xb8>)
 800a972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	4a09      	ldr	r2, [pc, #36]	; (800a9a0 <prvHeapInit+0xbc>)
 800a97a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a97c:	4b09      	ldr	r3, [pc, #36]	; (800a9a4 <prvHeapInit+0xc0>)
 800a97e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a982:	601a      	str	r2, [r3, #0]
}
 800a984:	bf00      	nop
 800a986:	3714      	adds	r7, #20
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	20000d90 	.word	0x20000d90
 800a994:	20004990 	.word	0x20004990
 800a998:	20004998 	.word	0x20004998
 800a99c:	200049a0 	.word	0x200049a0
 800a9a0:	2000499c 	.word	0x2000499c
 800a9a4:	200049ac 	.word	0x200049ac

0800a9a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9b0:	4b28      	ldr	r3, [pc, #160]	; (800aa54 <prvInsertBlockIntoFreeList+0xac>)
 800a9b2:	60fb      	str	r3, [r7, #12]
 800a9b4:	e002      	b.n	800a9bc <prvInsertBlockIntoFreeList+0x14>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	60fb      	str	r3, [r7, #12]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d8f7      	bhi.n	800a9b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d108      	bne.n	800a9ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	685a      	ldr	r2, [r3, #4]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	441a      	add	r2, r3
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	68ba      	ldr	r2, [r7, #8]
 800a9f4:	441a      	add	r2, r3
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d118      	bne.n	800aa30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	4b15      	ldr	r3, [pc, #84]	; (800aa58 <prvInsertBlockIntoFreeList+0xb0>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d00d      	beq.n	800aa26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	685a      	ldr	r2, [r3, #4]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	441a      	add	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	601a      	str	r2, [r3, #0]
 800aa24:	e008      	b.n	800aa38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa26:	4b0c      	ldr	r3, [pc, #48]	; (800aa58 <prvInsertBlockIntoFreeList+0xb0>)
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	601a      	str	r2, [r3, #0]
 800aa2e:	e003      	b.n	800aa38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d002      	beq.n	800aa46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa46:	bf00      	nop
 800aa48:	3714      	adds	r7, #20
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	20004990 	.word	0x20004990
 800aa58:	20004998 	.word	0x20004998

0800aa5c <atoi>:
 800aa5c:	220a      	movs	r2, #10
 800aa5e:	2100      	movs	r1, #0
 800aa60:	f000 b946 	b.w	800acf0 <strtol>

0800aa64 <calloc>:
 800aa64:	4b02      	ldr	r3, [pc, #8]	; (800aa70 <calloc+0xc>)
 800aa66:	460a      	mov	r2, r1
 800aa68:	4601      	mov	r1, r0
 800aa6a:	6818      	ldr	r0, [r3, #0]
 800aa6c:	f000 b842 	b.w	800aaf4 <_calloc_r>
 800aa70:	20000010 	.word	0x20000010

0800aa74 <__errno>:
 800aa74:	4b01      	ldr	r3, [pc, #4]	; (800aa7c <__errno+0x8>)
 800aa76:	6818      	ldr	r0, [r3, #0]
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	20000010 	.word	0x20000010

0800aa80 <__libc_init_array>:
 800aa80:	b570      	push	{r4, r5, r6, lr}
 800aa82:	4d0d      	ldr	r5, [pc, #52]	; (800aab8 <__libc_init_array+0x38>)
 800aa84:	4c0d      	ldr	r4, [pc, #52]	; (800aabc <__libc_init_array+0x3c>)
 800aa86:	1b64      	subs	r4, r4, r5
 800aa88:	10a4      	asrs	r4, r4, #2
 800aa8a:	2600      	movs	r6, #0
 800aa8c:	42a6      	cmp	r6, r4
 800aa8e:	d109      	bne.n	800aaa4 <__libc_init_array+0x24>
 800aa90:	4d0b      	ldr	r5, [pc, #44]	; (800aac0 <__libc_init_array+0x40>)
 800aa92:	4c0c      	ldr	r4, [pc, #48]	; (800aac4 <__libc_init_array+0x44>)
 800aa94:	f001 f9ca 	bl	800be2c <_init>
 800aa98:	1b64      	subs	r4, r4, r5
 800aa9a:	10a4      	asrs	r4, r4, #2
 800aa9c:	2600      	movs	r6, #0
 800aa9e:	42a6      	cmp	r6, r4
 800aaa0:	d105      	bne.n	800aaae <__libc_init_array+0x2e>
 800aaa2:	bd70      	pop	{r4, r5, r6, pc}
 800aaa4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaa8:	4798      	blx	r3
 800aaaa:	3601      	adds	r6, #1
 800aaac:	e7ee      	b.n	800aa8c <__libc_init_array+0xc>
 800aaae:	f855 3b04 	ldr.w	r3, [r5], #4
 800aab2:	4798      	blx	r3
 800aab4:	3601      	adds	r6, #1
 800aab6:	e7f2      	b.n	800aa9e <__libc_init_array+0x1e>
 800aab8:	0800c218 	.word	0x0800c218
 800aabc:	0800c218 	.word	0x0800c218
 800aac0:	0800c218 	.word	0x0800c218
 800aac4:	0800c21c 	.word	0x0800c21c

0800aac8 <memcpy>:
 800aac8:	440a      	add	r2, r1
 800aaca:	4291      	cmp	r1, r2
 800aacc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800aad0:	d100      	bne.n	800aad4 <memcpy+0xc>
 800aad2:	4770      	bx	lr
 800aad4:	b510      	push	{r4, lr}
 800aad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aada:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aade:	4291      	cmp	r1, r2
 800aae0:	d1f9      	bne.n	800aad6 <memcpy+0xe>
 800aae2:	bd10      	pop	{r4, pc}

0800aae4 <memset>:
 800aae4:	4402      	add	r2, r0
 800aae6:	4603      	mov	r3, r0
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d100      	bne.n	800aaee <memset+0xa>
 800aaec:	4770      	bx	lr
 800aaee:	f803 1b01 	strb.w	r1, [r3], #1
 800aaf2:	e7f9      	b.n	800aae8 <memset+0x4>

0800aaf4 <_calloc_r>:
 800aaf4:	b513      	push	{r0, r1, r4, lr}
 800aaf6:	434a      	muls	r2, r1
 800aaf8:	4611      	mov	r1, r2
 800aafa:	9201      	str	r2, [sp, #4]
 800aafc:	f000 f80a 	bl	800ab14 <_malloc_r>
 800ab00:	4604      	mov	r4, r0
 800ab02:	b118      	cbz	r0, 800ab0c <_calloc_r+0x18>
 800ab04:	9a01      	ldr	r2, [sp, #4]
 800ab06:	2100      	movs	r1, #0
 800ab08:	f7ff ffec 	bl	800aae4 <memset>
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	b002      	add	sp, #8
 800ab10:	bd10      	pop	{r4, pc}
	...

0800ab14 <_malloc_r>:
 800ab14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab16:	1ccd      	adds	r5, r1, #3
 800ab18:	f025 0503 	bic.w	r5, r5, #3
 800ab1c:	3508      	adds	r5, #8
 800ab1e:	2d0c      	cmp	r5, #12
 800ab20:	bf38      	it	cc
 800ab22:	250c      	movcc	r5, #12
 800ab24:	2d00      	cmp	r5, #0
 800ab26:	4606      	mov	r6, r0
 800ab28:	db01      	blt.n	800ab2e <_malloc_r+0x1a>
 800ab2a:	42a9      	cmp	r1, r5
 800ab2c:	d903      	bls.n	800ab36 <_malloc_r+0x22>
 800ab2e:	230c      	movs	r3, #12
 800ab30:	6033      	str	r3, [r6, #0]
 800ab32:	2000      	movs	r0, #0
 800ab34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab36:	f000 f8e5 	bl	800ad04 <__malloc_lock>
 800ab3a:	4921      	ldr	r1, [pc, #132]	; (800abc0 <_malloc_r+0xac>)
 800ab3c:	680a      	ldr	r2, [r1, #0]
 800ab3e:	4614      	mov	r4, r2
 800ab40:	b99c      	cbnz	r4, 800ab6a <_malloc_r+0x56>
 800ab42:	4f20      	ldr	r7, [pc, #128]	; (800abc4 <_malloc_r+0xb0>)
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	b923      	cbnz	r3, 800ab52 <_malloc_r+0x3e>
 800ab48:	4621      	mov	r1, r4
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	f000 f83c 	bl	800abc8 <_sbrk_r>
 800ab50:	6038      	str	r0, [r7, #0]
 800ab52:	4629      	mov	r1, r5
 800ab54:	4630      	mov	r0, r6
 800ab56:	f000 f837 	bl	800abc8 <_sbrk_r>
 800ab5a:	1c43      	adds	r3, r0, #1
 800ab5c:	d123      	bne.n	800aba6 <_malloc_r+0x92>
 800ab5e:	230c      	movs	r3, #12
 800ab60:	6033      	str	r3, [r6, #0]
 800ab62:	4630      	mov	r0, r6
 800ab64:	f000 f8d4 	bl	800ad10 <__malloc_unlock>
 800ab68:	e7e3      	b.n	800ab32 <_malloc_r+0x1e>
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	1b5b      	subs	r3, r3, r5
 800ab6e:	d417      	bmi.n	800aba0 <_malloc_r+0x8c>
 800ab70:	2b0b      	cmp	r3, #11
 800ab72:	d903      	bls.n	800ab7c <_malloc_r+0x68>
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	441c      	add	r4, r3
 800ab78:	6025      	str	r5, [r4, #0]
 800ab7a:	e004      	b.n	800ab86 <_malloc_r+0x72>
 800ab7c:	6863      	ldr	r3, [r4, #4]
 800ab7e:	42a2      	cmp	r2, r4
 800ab80:	bf0c      	ite	eq
 800ab82:	600b      	streq	r3, [r1, #0]
 800ab84:	6053      	strne	r3, [r2, #4]
 800ab86:	4630      	mov	r0, r6
 800ab88:	f000 f8c2 	bl	800ad10 <__malloc_unlock>
 800ab8c:	f104 000b 	add.w	r0, r4, #11
 800ab90:	1d23      	adds	r3, r4, #4
 800ab92:	f020 0007 	bic.w	r0, r0, #7
 800ab96:	1ac2      	subs	r2, r0, r3
 800ab98:	d0cc      	beq.n	800ab34 <_malloc_r+0x20>
 800ab9a:	1a1b      	subs	r3, r3, r0
 800ab9c:	50a3      	str	r3, [r4, r2]
 800ab9e:	e7c9      	b.n	800ab34 <_malloc_r+0x20>
 800aba0:	4622      	mov	r2, r4
 800aba2:	6864      	ldr	r4, [r4, #4]
 800aba4:	e7cc      	b.n	800ab40 <_malloc_r+0x2c>
 800aba6:	1cc4      	adds	r4, r0, #3
 800aba8:	f024 0403 	bic.w	r4, r4, #3
 800abac:	42a0      	cmp	r0, r4
 800abae:	d0e3      	beq.n	800ab78 <_malloc_r+0x64>
 800abb0:	1a21      	subs	r1, r4, r0
 800abb2:	4630      	mov	r0, r6
 800abb4:	f000 f808 	bl	800abc8 <_sbrk_r>
 800abb8:	3001      	adds	r0, #1
 800abba:	d1dd      	bne.n	800ab78 <_malloc_r+0x64>
 800abbc:	e7cf      	b.n	800ab5e <_malloc_r+0x4a>
 800abbe:	bf00      	nop
 800abc0:	200049b0 	.word	0x200049b0
 800abc4:	200049b4 	.word	0x200049b4

0800abc8 <_sbrk_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4d06      	ldr	r5, [pc, #24]	; (800abe4 <_sbrk_r+0x1c>)
 800abcc:	2300      	movs	r3, #0
 800abce:	4604      	mov	r4, r0
 800abd0:	4608      	mov	r0, r1
 800abd2:	602b      	str	r3, [r5, #0]
 800abd4:	f7f7 fb5a 	bl	800228c <_sbrk>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d102      	bne.n	800abe2 <_sbrk_r+0x1a>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	b103      	cbz	r3, 800abe2 <_sbrk_r+0x1a>
 800abe0:	6023      	str	r3, [r4, #0]
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	2000514c 	.word	0x2000514c

0800abe8 <_strtol_l.isra.0>:
 800abe8:	2b01      	cmp	r3, #1
 800abea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abee:	d001      	beq.n	800abf4 <_strtol_l.isra.0+0xc>
 800abf0:	2b24      	cmp	r3, #36	; 0x24
 800abf2:	d906      	bls.n	800ac02 <_strtol_l.isra.0+0x1a>
 800abf4:	f7ff ff3e 	bl	800aa74 <__errno>
 800abf8:	2316      	movs	r3, #22
 800abfa:	6003      	str	r3, [r0, #0]
 800abfc:	2000      	movs	r0, #0
 800abfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac02:	4f3a      	ldr	r7, [pc, #232]	; (800acec <_strtol_l.isra.0+0x104>)
 800ac04:	468e      	mov	lr, r1
 800ac06:	4676      	mov	r6, lr
 800ac08:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ac0c:	5de5      	ldrb	r5, [r4, r7]
 800ac0e:	f015 0508 	ands.w	r5, r5, #8
 800ac12:	d1f8      	bne.n	800ac06 <_strtol_l.isra.0+0x1e>
 800ac14:	2c2d      	cmp	r4, #45	; 0x2d
 800ac16:	d134      	bne.n	800ac82 <_strtol_l.isra.0+0x9a>
 800ac18:	f89e 4000 	ldrb.w	r4, [lr]
 800ac1c:	f04f 0801 	mov.w	r8, #1
 800ac20:	f106 0e02 	add.w	lr, r6, #2
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d05c      	beq.n	800ace2 <_strtol_l.isra.0+0xfa>
 800ac28:	2b10      	cmp	r3, #16
 800ac2a:	d10c      	bne.n	800ac46 <_strtol_l.isra.0+0x5e>
 800ac2c:	2c30      	cmp	r4, #48	; 0x30
 800ac2e:	d10a      	bne.n	800ac46 <_strtol_l.isra.0+0x5e>
 800ac30:	f89e 4000 	ldrb.w	r4, [lr]
 800ac34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ac38:	2c58      	cmp	r4, #88	; 0x58
 800ac3a:	d14d      	bne.n	800acd8 <_strtol_l.isra.0+0xf0>
 800ac3c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ac40:	2310      	movs	r3, #16
 800ac42:	f10e 0e02 	add.w	lr, lr, #2
 800ac46:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ac4a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800ac4e:	2600      	movs	r6, #0
 800ac50:	fbbc f9f3 	udiv	r9, ip, r3
 800ac54:	4635      	mov	r5, r6
 800ac56:	fb03 ca19 	mls	sl, r3, r9, ip
 800ac5a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ac5e:	2f09      	cmp	r7, #9
 800ac60:	d818      	bhi.n	800ac94 <_strtol_l.isra.0+0xac>
 800ac62:	463c      	mov	r4, r7
 800ac64:	42a3      	cmp	r3, r4
 800ac66:	dd24      	ble.n	800acb2 <_strtol_l.isra.0+0xca>
 800ac68:	2e00      	cmp	r6, #0
 800ac6a:	db1f      	blt.n	800acac <_strtol_l.isra.0+0xc4>
 800ac6c:	45a9      	cmp	r9, r5
 800ac6e:	d31d      	bcc.n	800acac <_strtol_l.isra.0+0xc4>
 800ac70:	d101      	bne.n	800ac76 <_strtol_l.isra.0+0x8e>
 800ac72:	45a2      	cmp	sl, r4
 800ac74:	db1a      	blt.n	800acac <_strtol_l.isra.0+0xc4>
 800ac76:	fb05 4503 	mla	r5, r5, r3, r4
 800ac7a:	2601      	movs	r6, #1
 800ac7c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ac80:	e7eb      	b.n	800ac5a <_strtol_l.isra.0+0x72>
 800ac82:	2c2b      	cmp	r4, #43	; 0x2b
 800ac84:	bf08      	it	eq
 800ac86:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ac8a:	46a8      	mov	r8, r5
 800ac8c:	bf08      	it	eq
 800ac8e:	f106 0e02 	addeq.w	lr, r6, #2
 800ac92:	e7c7      	b.n	800ac24 <_strtol_l.isra.0+0x3c>
 800ac94:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ac98:	2f19      	cmp	r7, #25
 800ac9a:	d801      	bhi.n	800aca0 <_strtol_l.isra.0+0xb8>
 800ac9c:	3c37      	subs	r4, #55	; 0x37
 800ac9e:	e7e1      	b.n	800ac64 <_strtol_l.isra.0+0x7c>
 800aca0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800aca4:	2f19      	cmp	r7, #25
 800aca6:	d804      	bhi.n	800acb2 <_strtol_l.isra.0+0xca>
 800aca8:	3c57      	subs	r4, #87	; 0x57
 800acaa:	e7db      	b.n	800ac64 <_strtol_l.isra.0+0x7c>
 800acac:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800acb0:	e7e4      	b.n	800ac7c <_strtol_l.isra.0+0x94>
 800acb2:	2e00      	cmp	r6, #0
 800acb4:	da05      	bge.n	800acc2 <_strtol_l.isra.0+0xda>
 800acb6:	2322      	movs	r3, #34	; 0x22
 800acb8:	6003      	str	r3, [r0, #0]
 800acba:	4665      	mov	r5, ip
 800acbc:	b942      	cbnz	r2, 800acd0 <_strtol_l.isra.0+0xe8>
 800acbe:	4628      	mov	r0, r5
 800acc0:	e79d      	b.n	800abfe <_strtol_l.isra.0+0x16>
 800acc2:	f1b8 0f00 	cmp.w	r8, #0
 800acc6:	d000      	beq.n	800acca <_strtol_l.isra.0+0xe2>
 800acc8:	426d      	negs	r5, r5
 800acca:	2a00      	cmp	r2, #0
 800accc:	d0f7      	beq.n	800acbe <_strtol_l.isra.0+0xd6>
 800acce:	b10e      	cbz	r6, 800acd4 <_strtol_l.isra.0+0xec>
 800acd0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800acd4:	6011      	str	r1, [r2, #0]
 800acd6:	e7f2      	b.n	800acbe <_strtol_l.isra.0+0xd6>
 800acd8:	2430      	movs	r4, #48	; 0x30
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1b3      	bne.n	800ac46 <_strtol_l.isra.0+0x5e>
 800acde:	2308      	movs	r3, #8
 800ace0:	e7b1      	b.n	800ac46 <_strtol_l.isra.0+0x5e>
 800ace2:	2c30      	cmp	r4, #48	; 0x30
 800ace4:	d0a4      	beq.n	800ac30 <_strtol_l.isra.0+0x48>
 800ace6:	230a      	movs	r3, #10
 800ace8:	e7ad      	b.n	800ac46 <_strtol_l.isra.0+0x5e>
 800acea:	bf00      	nop
 800acec:	0800bf31 	.word	0x0800bf31

0800acf0 <strtol>:
 800acf0:	4613      	mov	r3, r2
 800acf2:	460a      	mov	r2, r1
 800acf4:	4601      	mov	r1, r0
 800acf6:	4802      	ldr	r0, [pc, #8]	; (800ad00 <strtol+0x10>)
 800acf8:	6800      	ldr	r0, [r0, #0]
 800acfa:	f7ff bf75 	b.w	800abe8 <_strtol_l.isra.0>
 800acfe:	bf00      	nop
 800ad00:	20000010 	.word	0x20000010

0800ad04 <__malloc_lock>:
 800ad04:	4801      	ldr	r0, [pc, #4]	; (800ad0c <__malloc_lock+0x8>)
 800ad06:	f000 b809 	b.w	800ad1c <__retarget_lock_acquire_recursive>
 800ad0a:	bf00      	nop
 800ad0c:	20005154 	.word	0x20005154

0800ad10 <__malloc_unlock>:
 800ad10:	4801      	ldr	r0, [pc, #4]	; (800ad18 <__malloc_unlock+0x8>)
 800ad12:	f000 b804 	b.w	800ad1e <__retarget_lock_release_recursive>
 800ad16:	bf00      	nop
 800ad18:	20005154 	.word	0x20005154

0800ad1c <__retarget_lock_acquire_recursive>:
 800ad1c:	4770      	bx	lr

0800ad1e <__retarget_lock_release_recursive>:
 800ad1e:	4770      	bx	lr

0800ad20 <cos>:
 800ad20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad22:	ec53 2b10 	vmov	r2, r3, d0
 800ad26:	4824      	ldr	r0, [pc, #144]	; (800adb8 <cos+0x98>)
 800ad28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ad2c:	4281      	cmp	r1, r0
 800ad2e:	dc06      	bgt.n	800ad3e <cos+0x1e>
 800ad30:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800adb0 <cos+0x90>
 800ad34:	f000 faa4 	bl	800b280 <__kernel_cos>
 800ad38:	ec51 0b10 	vmov	r0, r1, d0
 800ad3c:	e007      	b.n	800ad4e <cos+0x2e>
 800ad3e:	481f      	ldr	r0, [pc, #124]	; (800adbc <cos+0x9c>)
 800ad40:	4281      	cmp	r1, r0
 800ad42:	dd09      	ble.n	800ad58 <cos+0x38>
 800ad44:	ee10 0a10 	vmov	r0, s0
 800ad48:	4619      	mov	r1, r3
 800ad4a:	f7f5 fa65 	bl	8000218 <__aeabi_dsub>
 800ad4e:	ec41 0b10 	vmov	d0, r0, r1
 800ad52:	b005      	add	sp, #20
 800ad54:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad58:	4668      	mov	r0, sp
 800ad5a:	f000 f885 	bl	800ae68 <__ieee754_rem_pio2>
 800ad5e:	f000 0003 	and.w	r0, r0, #3
 800ad62:	2801      	cmp	r0, #1
 800ad64:	d007      	beq.n	800ad76 <cos+0x56>
 800ad66:	2802      	cmp	r0, #2
 800ad68:	d012      	beq.n	800ad90 <cos+0x70>
 800ad6a:	b9c0      	cbnz	r0, 800ad9e <cos+0x7e>
 800ad6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad70:	ed9d 0b00 	vldr	d0, [sp]
 800ad74:	e7de      	b.n	800ad34 <cos+0x14>
 800ad76:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad7a:	ed9d 0b00 	vldr	d0, [sp]
 800ad7e:	f000 fe87 	bl	800ba90 <__kernel_sin>
 800ad82:	ec53 2b10 	vmov	r2, r3, d0
 800ad86:	ee10 0a10 	vmov	r0, s0
 800ad8a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ad8e:	e7de      	b.n	800ad4e <cos+0x2e>
 800ad90:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad94:	ed9d 0b00 	vldr	d0, [sp]
 800ad98:	f000 fa72 	bl	800b280 <__kernel_cos>
 800ad9c:	e7f1      	b.n	800ad82 <cos+0x62>
 800ad9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ada2:	ed9d 0b00 	vldr	d0, [sp]
 800ada6:	2001      	movs	r0, #1
 800ada8:	f000 fe72 	bl	800ba90 <__kernel_sin>
 800adac:	e7c4      	b.n	800ad38 <cos+0x18>
 800adae:	bf00      	nop
	...
 800adb8:	3fe921fb 	.word	0x3fe921fb
 800adbc:	7fefffff 	.word	0x7fefffff

0800adc0 <sin>:
 800adc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adc2:	ec53 2b10 	vmov	r2, r3, d0
 800adc6:	4826      	ldr	r0, [pc, #152]	; (800ae60 <sin+0xa0>)
 800adc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800adcc:	4281      	cmp	r1, r0
 800adce:	dc07      	bgt.n	800ade0 <sin+0x20>
 800add0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ae58 <sin+0x98>
 800add4:	2000      	movs	r0, #0
 800add6:	f000 fe5b 	bl	800ba90 <__kernel_sin>
 800adda:	ec51 0b10 	vmov	r0, r1, d0
 800adde:	e007      	b.n	800adf0 <sin+0x30>
 800ade0:	4820      	ldr	r0, [pc, #128]	; (800ae64 <sin+0xa4>)
 800ade2:	4281      	cmp	r1, r0
 800ade4:	dd09      	ble.n	800adfa <sin+0x3a>
 800ade6:	ee10 0a10 	vmov	r0, s0
 800adea:	4619      	mov	r1, r3
 800adec:	f7f5 fa14 	bl	8000218 <__aeabi_dsub>
 800adf0:	ec41 0b10 	vmov	d0, r0, r1
 800adf4:	b005      	add	sp, #20
 800adf6:	f85d fb04 	ldr.w	pc, [sp], #4
 800adfa:	4668      	mov	r0, sp
 800adfc:	f000 f834 	bl	800ae68 <__ieee754_rem_pio2>
 800ae00:	f000 0003 	and.w	r0, r0, #3
 800ae04:	2801      	cmp	r0, #1
 800ae06:	d008      	beq.n	800ae1a <sin+0x5a>
 800ae08:	2802      	cmp	r0, #2
 800ae0a:	d00d      	beq.n	800ae28 <sin+0x68>
 800ae0c:	b9d0      	cbnz	r0, 800ae44 <sin+0x84>
 800ae0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ae12:	ed9d 0b00 	vldr	d0, [sp]
 800ae16:	2001      	movs	r0, #1
 800ae18:	e7dd      	b.n	800add6 <sin+0x16>
 800ae1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ae1e:	ed9d 0b00 	vldr	d0, [sp]
 800ae22:	f000 fa2d 	bl	800b280 <__kernel_cos>
 800ae26:	e7d8      	b.n	800adda <sin+0x1a>
 800ae28:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ae2c:	ed9d 0b00 	vldr	d0, [sp]
 800ae30:	2001      	movs	r0, #1
 800ae32:	f000 fe2d 	bl	800ba90 <__kernel_sin>
 800ae36:	ec53 2b10 	vmov	r2, r3, d0
 800ae3a:	ee10 0a10 	vmov	r0, s0
 800ae3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ae42:	e7d5      	b.n	800adf0 <sin+0x30>
 800ae44:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ae48:	ed9d 0b00 	vldr	d0, [sp]
 800ae4c:	f000 fa18 	bl	800b280 <__kernel_cos>
 800ae50:	e7f1      	b.n	800ae36 <sin+0x76>
 800ae52:	bf00      	nop
 800ae54:	f3af 8000 	nop.w
	...
 800ae60:	3fe921fb 	.word	0x3fe921fb
 800ae64:	7fefffff 	.word	0x7fefffff

0800ae68 <__ieee754_rem_pio2>:
 800ae68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6c:	ed2d 8b02 	vpush	{d8}
 800ae70:	ec55 4b10 	vmov	r4, r5, d0
 800ae74:	4bca      	ldr	r3, [pc, #808]	; (800b1a0 <__ieee754_rem_pio2+0x338>)
 800ae76:	b08b      	sub	sp, #44	; 0x2c
 800ae78:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ae7c:	4598      	cmp	r8, r3
 800ae7e:	4682      	mov	sl, r0
 800ae80:	9502      	str	r5, [sp, #8]
 800ae82:	dc08      	bgt.n	800ae96 <__ieee754_rem_pio2+0x2e>
 800ae84:	2200      	movs	r2, #0
 800ae86:	2300      	movs	r3, #0
 800ae88:	ed80 0b00 	vstr	d0, [r0]
 800ae8c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ae90:	f04f 0b00 	mov.w	fp, #0
 800ae94:	e028      	b.n	800aee8 <__ieee754_rem_pio2+0x80>
 800ae96:	4bc3      	ldr	r3, [pc, #780]	; (800b1a4 <__ieee754_rem_pio2+0x33c>)
 800ae98:	4598      	cmp	r8, r3
 800ae9a:	dc78      	bgt.n	800af8e <__ieee754_rem_pio2+0x126>
 800ae9c:	9b02      	ldr	r3, [sp, #8]
 800ae9e:	4ec2      	ldr	r6, [pc, #776]	; (800b1a8 <__ieee754_rem_pio2+0x340>)
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	ee10 0a10 	vmov	r0, s0
 800aea6:	a3b0      	add	r3, pc, #704	; (adr r3, 800b168 <__ieee754_rem_pio2+0x300>)
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	4629      	mov	r1, r5
 800aeae:	dd39      	ble.n	800af24 <__ieee754_rem_pio2+0xbc>
 800aeb0:	f7f5 f9b2 	bl	8000218 <__aeabi_dsub>
 800aeb4:	45b0      	cmp	r8, r6
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	460d      	mov	r5, r1
 800aeba:	d01b      	beq.n	800aef4 <__ieee754_rem_pio2+0x8c>
 800aebc:	a3ac      	add	r3, pc, #688	; (adr r3, 800b170 <__ieee754_rem_pio2+0x308>)
 800aebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec2:	f7f5 f9a9 	bl	8000218 <__aeabi_dsub>
 800aec6:	4602      	mov	r2, r0
 800aec8:	460b      	mov	r3, r1
 800aeca:	e9ca 2300 	strd	r2, r3, [sl]
 800aece:	4620      	mov	r0, r4
 800aed0:	4629      	mov	r1, r5
 800aed2:	f7f5 f9a1 	bl	8000218 <__aeabi_dsub>
 800aed6:	a3a6      	add	r3, pc, #664	; (adr r3, 800b170 <__ieee754_rem_pio2+0x308>)
 800aed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aedc:	f7f5 f99c 	bl	8000218 <__aeabi_dsub>
 800aee0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aee4:	f04f 0b01 	mov.w	fp, #1
 800aee8:	4658      	mov	r0, fp
 800aeea:	b00b      	add	sp, #44	; 0x2c
 800aeec:	ecbd 8b02 	vpop	{d8}
 800aef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef4:	a3a0      	add	r3, pc, #640	; (adr r3, 800b178 <__ieee754_rem_pio2+0x310>)
 800aef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefa:	f7f5 f98d 	bl	8000218 <__aeabi_dsub>
 800aefe:	a3a0      	add	r3, pc, #640	; (adr r3, 800b180 <__ieee754_rem_pio2+0x318>)
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	4604      	mov	r4, r0
 800af06:	460d      	mov	r5, r1
 800af08:	f7f5 f986 	bl	8000218 <__aeabi_dsub>
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	e9ca 2300 	strd	r2, r3, [sl]
 800af14:	4620      	mov	r0, r4
 800af16:	4629      	mov	r1, r5
 800af18:	f7f5 f97e 	bl	8000218 <__aeabi_dsub>
 800af1c:	a398      	add	r3, pc, #608	; (adr r3, 800b180 <__ieee754_rem_pio2+0x318>)
 800af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af22:	e7db      	b.n	800aedc <__ieee754_rem_pio2+0x74>
 800af24:	f7f5 f97a 	bl	800021c <__adddf3>
 800af28:	45b0      	cmp	r8, r6
 800af2a:	4604      	mov	r4, r0
 800af2c:	460d      	mov	r5, r1
 800af2e:	d016      	beq.n	800af5e <__ieee754_rem_pio2+0xf6>
 800af30:	a38f      	add	r3, pc, #572	; (adr r3, 800b170 <__ieee754_rem_pio2+0x308>)
 800af32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af36:	f7f5 f971 	bl	800021c <__adddf3>
 800af3a:	4602      	mov	r2, r0
 800af3c:	460b      	mov	r3, r1
 800af3e:	e9ca 2300 	strd	r2, r3, [sl]
 800af42:	4620      	mov	r0, r4
 800af44:	4629      	mov	r1, r5
 800af46:	f7f5 f967 	bl	8000218 <__aeabi_dsub>
 800af4a:	a389      	add	r3, pc, #548	; (adr r3, 800b170 <__ieee754_rem_pio2+0x308>)
 800af4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af50:	f7f5 f964 	bl	800021c <__adddf3>
 800af54:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800af58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800af5c:	e7c4      	b.n	800aee8 <__ieee754_rem_pio2+0x80>
 800af5e:	a386      	add	r3, pc, #536	; (adr r3, 800b178 <__ieee754_rem_pio2+0x310>)
 800af60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af64:	f7f5 f95a 	bl	800021c <__adddf3>
 800af68:	a385      	add	r3, pc, #532	; (adr r3, 800b180 <__ieee754_rem_pio2+0x318>)
 800af6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6e:	4604      	mov	r4, r0
 800af70:	460d      	mov	r5, r1
 800af72:	f7f5 f953 	bl	800021c <__adddf3>
 800af76:	4602      	mov	r2, r0
 800af78:	460b      	mov	r3, r1
 800af7a:	e9ca 2300 	strd	r2, r3, [sl]
 800af7e:	4620      	mov	r0, r4
 800af80:	4629      	mov	r1, r5
 800af82:	f7f5 f949 	bl	8000218 <__aeabi_dsub>
 800af86:	a37e      	add	r3, pc, #504	; (adr r3, 800b180 <__ieee754_rem_pio2+0x318>)
 800af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8c:	e7e0      	b.n	800af50 <__ieee754_rem_pio2+0xe8>
 800af8e:	4b87      	ldr	r3, [pc, #540]	; (800b1ac <__ieee754_rem_pio2+0x344>)
 800af90:	4598      	cmp	r8, r3
 800af92:	f300 80d9 	bgt.w	800b148 <__ieee754_rem_pio2+0x2e0>
 800af96:	f000 fe39 	bl	800bc0c <fabs>
 800af9a:	ec55 4b10 	vmov	r4, r5, d0
 800af9e:	ee10 0a10 	vmov	r0, s0
 800afa2:	a379      	add	r3, pc, #484	; (adr r3, 800b188 <__ieee754_rem_pio2+0x320>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	4629      	mov	r1, r5
 800afaa:	f7f5 faed 	bl	8000588 <__aeabi_dmul>
 800afae:	4b80      	ldr	r3, [pc, #512]	; (800b1b0 <__ieee754_rem_pio2+0x348>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	f7f5 f933 	bl	800021c <__adddf3>
 800afb6:	f7f5 fd81 	bl	8000abc <__aeabi_d2iz>
 800afba:	4683      	mov	fp, r0
 800afbc:	f7f5 fa7a 	bl	80004b4 <__aeabi_i2d>
 800afc0:	4602      	mov	r2, r0
 800afc2:	460b      	mov	r3, r1
 800afc4:	ec43 2b18 	vmov	d8, r2, r3
 800afc8:	a367      	add	r3, pc, #412	; (adr r3, 800b168 <__ieee754_rem_pio2+0x300>)
 800afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afce:	f7f5 fadb 	bl	8000588 <__aeabi_dmul>
 800afd2:	4602      	mov	r2, r0
 800afd4:	460b      	mov	r3, r1
 800afd6:	4620      	mov	r0, r4
 800afd8:	4629      	mov	r1, r5
 800afda:	f7f5 f91d 	bl	8000218 <__aeabi_dsub>
 800afde:	a364      	add	r3, pc, #400	; (adr r3, 800b170 <__ieee754_rem_pio2+0x308>)
 800afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe4:	4606      	mov	r6, r0
 800afe6:	460f      	mov	r7, r1
 800afe8:	ec51 0b18 	vmov	r0, r1, d8
 800afec:	f7f5 facc 	bl	8000588 <__aeabi_dmul>
 800aff0:	f1bb 0f1f 	cmp.w	fp, #31
 800aff4:	4604      	mov	r4, r0
 800aff6:	460d      	mov	r5, r1
 800aff8:	dc0d      	bgt.n	800b016 <__ieee754_rem_pio2+0x1ae>
 800affa:	4b6e      	ldr	r3, [pc, #440]	; (800b1b4 <__ieee754_rem_pio2+0x34c>)
 800affc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800b000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b004:	4543      	cmp	r3, r8
 800b006:	d006      	beq.n	800b016 <__ieee754_rem_pio2+0x1ae>
 800b008:	4622      	mov	r2, r4
 800b00a:	462b      	mov	r3, r5
 800b00c:	4630      	mov	r0, r6
 800b00e:	4639      	mov	r1, r7
 800b010:	f7f5 f902 	bl	8000218 <__aeabi_dsub>
 800b014:	e00f      	b.n	800b036 <__ieee754_rem_pio2+0x1ce>
 800b016:	462b      	mov	r3, r5
 800b018:	4622      	mov	r2, r4
 800b01a:	4630      	mov	r0, r6
 800b01c:	4639      	mov	r1, r7
 800b01e:	f7f5 f8fb 	bl	8000218 <__aeabi_dsub>
 800b022:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b026:	9303      	str	r3, [sp, #12]
 800b028:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b02c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b030:	f1b8 0f10 	cmp.w	r8, #16
 800b034:	dc02      	bgt.n	800b03c <__ieee754_rem_pio2+0x1d4>
 800b036:	e9ca 0100 	strd	r0, r1, [sl]
 800b03a:	e039      	b.n	800b0b0 <__ieee754_rem_pio2+0x248>
 800b03c:	a34e      	add	r3, pc, #312	; (adr r3, 800b178 <__ieee754_rem_pio2+0x310>)
 800b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b042:	ec51 0b18 	vmov	r0, r1, d8
 800b046:	f7f5 fa9f 	bl	8000588 <__aeabi_dmul>
 800b04a:	4604      	mov	r4, r0
 800b04c:	460d      	mov	r5, r1
 800b04e:	4602      	mov	r2, r0
 800b050:	460b      	mov	r3, r1
 800b052:	4630      	mov	r0, r6
 800b054:	4639      	mov	r1, r7
 800b056:	f7f5 f8df 	bl	8000218 <__aeabi_dsub>
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	4680      	mov	r8, r0
 800b060:	4689      	mov	r9, r1
 800b062:	4630      	mov	r0, r6
 800b064:	4639      	mov	r1, r7
 800b066:	f7f5 f8d7 	bl	8000218 <__aeabi_dsub>
 800b06a:	4622      	mov	r2, r4
 800b06c:	462b      	mov	r3, r5
 800b06e:	f7f5 f8d3 	bl	8000218 <__aeabi_dsub>
 800b072:	a343      	add	r3, pc, #268	; (adr r3, 800b180 <__ieee754_rem_pio2+0x318>)
 800b074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b078:	4604      	mov	r4, r0
 800b07a:	460d      	mov	r5, r1
 800b07c:	ec51 0b18 	vmov	r0, r1, d8
 800b080:	f7f5 fa82 	bl	8000588 <__aeabi_dmul>
 800b084:	4622      	mov	r2, r4
 800b086:	462b      	mov	r3, r5
 800b088:	f7f5 f8c6 	bl	8000218 <__aeabi_dsub>
 800b08c:	4602      	mov	r2, r0
 800b08e:	460b      	mov	r3, r1
 800b090:	4604      	mov	r4, r0
 800b092:	460d      	mov	r5, r1
 800b094:	4640      	mov	r0, r8
 800b096:	4649      	mov	r1, r9
 800b098:	f7f5 f8be 	bl	8000218 <__aeabi_dsub>
 800b09c:	9a03      	ldr	r2, [sp, #12]
 800b09e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	2b31      	cmp	r3, #49	; 0x31
 800b0a6:	dc24      	bgt.n	800b0f2 <__ieee754_rem_pio2+0x28a>
 800b0a8:	e9ca 0100 	strd	r0, r1, [sl]
 800b0ac:	4646      	mov	r6, r8
 800b0ae:	464f      	mov	r7, r9
 800b0b0:	e9da 8900 	ldrd	r8, r9, [sl]
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	4642      	mov	r2, r8
 800b0b8:	464b      	mov	r3, r9
 800b0ba:	4639      	mov	r1, r7
 800b0bc:	f7f5 f8ac 	bl	8000218 <__aeabi_dsub>
 800b0c0:	462b      	mov	r3, r5
 800b0c2:	4622      	mov	r2, r4
 800b0c4:	f7f5 f8a8 	bl	8000218 <__aeabi_dsub>
 800b0c8:	9b02      	ldr	r3, [sp, #8]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b0d0:	f6bf af0a 	bge.w	800aee8 <__ieee754_rem_pio2+0x80>
 800b0d4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b0d8:	f8ca 3004 	str.w	r3, [sl, #4]
 800b0dc:	f8ca 8000 	str.w	r8, [sl]
 800b0e0:	f8ca 0008 	str.w	r0, [sl, #8]
 800b0e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0e8:	f8ca 300c 	str.w	r3, [sl, #12]
 800b0ec:	f1cb 0b00 	rsb	fp, fp, #0
 800b0f0:	e6fa      	b.n	800aee8 <__ieee754_rem_pio2+0x80>
 800b0f2:	a327      	add	r3, pc, #156	; (adr r3, 800b190 <__ieee754_rem_pio2+0x328>)
 800b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f8:	ec51 0b18 	vmov	r0, r1, d8
 800b0fc:	f7f5 fa44 	bl	8000588 <__aeabi_dmul>
 800b100:	4604      	mov	r4, r0
 800b102:	460d      	mov	r5, r1
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4640      	mov	r0, r8
 800b10a:	4649      	mov	r1, r9
 800b10c:	f7f5 f884 	bl	8000218 <__aeabi_dsub>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	4606      	mov	r6, r0
 800b116:	460f      	mov	r7, r1
 800b118:	4640      	mov	r0, r8
 800b11a:	4649      	mov	r1, r9
 800b11c:	f7f5 f87c 	bl	8000218 <__aeabi_dsub>
 800b120:	4622      	mov	r2, r4
 800b122:	462b      	mov	r3, r5
 800b124:	f7f5 f878 	bl	8000218 <__aeabi_dsub>
 800b128:	a31b      	add	r3, pc, #108	; (adr r3, 800b198 <__ieee754_rem_pio2+0x330>)
 800b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12e:	4604      	mov	r4, r0
 800b130:	460d      	mov	r5, r1
 800b132:	ec51 0b18 	vmov	r0, r1, d8
 800b136:	f7f5 fa27 	bl	8000588 <__aeabi_dmul>
 800b13a:	4622      	mov	r2, r4
 800b13c:	462b      	mov	r3, r5
 800b13e:	f7f5 f86b 	bl	8000218 <__aeabi_dsub>
 800b142:	4604      	mov	r4, r0
 800b144:	460d      	mov	r5, r1
 800b146:	e75f      	b.n	800b008 <__ieee754_rem_pio2+0x1a0>
 800b148:	4b1b      	ldr	r3, [pc, #108]	; (800b1b8 <__ieee754_rem_pio2+0x350>)
 800b14a:	4598      	cmp	r8, r3
 800b14c:	dd36      	ble.n	800b1bc <__ieee754_rem_pio2+0x354>
 800b14e:	ee10 2a10 	vmov	r2, s0
 800b152:	462b      	mov	r3, r5
 800b154:	4620      	mov	r0, r4
 800b156:	4629      	mov	r1, r5
 800b158:	f7f5 f85e 	bl	8000218 <__aeabi_dsub>
 800b15c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b160:	e9ca 0100 	strd	r0, r1, [sl]
 800b164:	e694      	b.n	800ae90 <__ieee754_rem_pio2+0x28>
 800b166:	bf00      	nop
 800b168:	54400000 	.word	0x54400000
 800b16c:	3ff921fb 	.word	0x3ff921fb
 800b170:	1a626331 	.word	0x1a626331
 800b174:	3dd0b461 	.word	0x3dd0b461
 800b178:	1a600000 	.word	0x1a600000
 800b17c:	3dd0b461 	.word	0x3dd0b461
 800b180:	2e037073 	.word	0x2e037073
 800b184:	3ba3198a 	.word	0x3ba3198a
 800b188:	6dc9c883 	.word	0x6dc9c883
 800b18c:	3fe45f30 	.word	0x3fe45f30
 800b190:	2e000000 	.word	0x2e000000
 800b194:	3ba3198a 	.word	0x3ba3198a
 800b198:	252049c1 	.word	0x252049c1
 800b19c:	397b839a 	.word	0x397b839a
 800b1a0:	3fe921fb 	.word	0x3fe921fb
 800b1a4:	4002d97b 	.word	0x4002d97b
 800b1a8:	3ff921fb 	.word	0x3ff921fb
 800b1ac:	413921fb 	.word	0x413921fb
 800b1b0:	3fe00000 	.word	0x3fe00000
 800b1b4:	0800c034 	.word	0x0800c034
 800b1b8:	7fefffff 	.word	0x7fefffff
 800b1bc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b1c0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b1c4:	ee10 0a10 	vmov	r0, s0
 800b1c8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b1cc:	ee10 6a10 	vmov	r6, s0
 800b1d0:	460f      	mov	r7, r1
 800b1d2:	f7f5 fc73 	bl	8000abc <__aeabi_d2iz>
 800b1d6:	f7f5 f96d 	bl	80004b4 <__aeabi_i2d>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	460b      	mov	r3, r1
 800b1de:	4630      	mov	r0, r6
 800b1e0:	4639      	mov	r1, r7
 800b1e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b1e6:	f7f5 f817 	bl	8000218 <__aeabi_dsub>
 800b1ea:	4b22      	ldr	r3, [pc, #136]	; (800b274 <__ieee754_rem_pio2+0x40c>)
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f7f5 f9cb 	bl	8000588 <__aeabi_dmul>
 800b1f2:	460f      	mov	r7, r1
 800b1f4:	4606      	mov	r6, r0
 800b1f6:	f7f5 fc61 	bl	8000abc <__aeabi_d2iz>
 800b1fa:	f7f5 f95b 	bl	80004b4 <__aeabi_i2d>
 800b1fe:	4602      	mov	r2, r0
 800b200:	460b      	mov	r3, r1
 800b202:	4630      	mov	r0, r6
 800b204:	4639      	mov	r1, r7
 800b206:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b20a:	f7f5 f805 	bl	8000218 <__aeabi_dsub>
 800b20e:	4b19      	ldr	r3, [pc, #100]	; (800b274 <__ieee754_rem_pio2+0x40c>)
 800b210:	2200      	movs	r2, #0
 800b212:	f7f5 f9b9 	bl	8000588 <__aeabi_dmul>
 800b216:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b21a:	ad04      	add	r5, sp, #16
 800b21c:	f04f 0803 	mov.w	r8, #3
 800b220:	46a9      	mov	r9, r5
 800b222:	2600      	movs	r6, #0
 800b224:	2700      	movs	r7, #0
 800b226:	4632      	mov	r2, r6
 800b228:	463b      	mov	r3, r7
 800b22a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b22e:	46c3      	mov	fp, r8
 800b230:	3d08      	subs	r5, #8
 800b232:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b236:	f7f5 fc0f 	bl	8000a58 <__aeabi_dcmpeq>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d1f3      	bne.n	800b226 <__ieee754_rem_pio2+0x3be>
 800b23e:	4b0e      	ldr	r3, [pc, #56]	; (800b278 <__ieee754_rem_pio2+0x410>)
 800b240:	9301      	str	r3, [sp, #4]
 800b242:	2302      	movs	r3, #2
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	4622      	mov	r2, r4
 800b248:	465b      	mov	r3, fp
 800b24a:	4651      	mov	r1, sl
 800b24c:	4648      	mov	r0, r9
 800b24e:	f000 f8df 	bl	800b410 <__kernel_rem_pio2>
 800b252:	9b02      	ldr	r3, [sp, #8]
 800b254:	2b00      	cmp	r3, #0
 800b256:	4683      	mov	fp, r0
 800b258:	f6bf ae46 	bge.w	800aee8 <__ieee754_rem_pio2+0x80>
 800b25c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b260:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b264:	f8ca 3004 	str.w	r3, [sl, #4]
 800b268:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b26c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b270:	e73a      	b.n	800b0e8 <__ieee754_rem_pio2+0x280>
 800b272:	bf00      	nop
 800b274:	41700000 	.word	0x41700000
 800b278:	0800c0b4 	.word	0x0800c0b4
 800b27c:	00000000 	.word	0x00000000

0800b280 <__kernel_cos>:
 800b280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b284:	ec57 6b10 	vmov	r6, r7, d0
 800b288:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b28c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b290:	ed8d 1b00 	vstr	d1, [sp]
 800b294:	da07      	bge.n	800b2a6 <__kernel_cos+0x26>
 800b296:	ee10 0a10 	vmov	r0, s0
 800b29a:	4639      	mov	r1, r7
 800b29c:	f7f5 fc0e 	bl	8000abc <__aeabi_d2iz>
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	f000 8088 	beq.w	800b3b6 <__kernel_cos+0x136>
 800b2a6:	4632      	mov	r2, r6
 800b2a8:	463b      	mov	r3, r7
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	4639      	mov	r1, r7
 800b2ae:	f7f5 f96b 	bl	8000588 <__aeabi_dmul>
 800b2b2:	4b51      	ldr	r3, [pc, #324]	; (800b3f8 <__kernel_cos+0x178>)
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	460d      	mov	r5, r1
 800b2ba:	f7f5 f965 	bl	8000588 <__aeabi_dmul>
 800b2be:	a340      	add	r3, pc, #256	; (adr r3, 800b3c0 <__kernel_cos+0x140>)
 800b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c4:	4682      	mov	sl, r0
 800b2c6:	468b      	mov	fp, r1
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	f7f5 f95c 	bl	8000588 <__aeabi_dmul>
 800b2d0:	a33d      	add	r3, pc, #244	; (adr r3, 800b3c8 <__kernel_cos+0x148>)
 800b2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d6:	f7f4 ffa1 	bl	800021c <__adddf3>
 800b2da:	4622      	mov	r2, r4
 800b2dc:	462b      	mov	r3, r5
 800b2de:	f7f5 f953 	bl	8000588 <__aeabi_dmul>
 800b2e2:	a33b      	add	r3, pc, #236	; (adr r3, 800b3d0 <__kernel_cos+0x150>)
 800b2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e8:	f7f4 ff96 	bl	8000218 <__aeabi_dsub>
 800b2ec:	4622      	mov	r2, r4
 800b2ee:	462b      	mov	r3, r5
 800b2f0:	f7f5 f94a 	bl	8000588 <__aeabi_dmul>
 800b2f4:	a338      	add	r3, pc, #224	; (adr r3, 800b3d8 <__kernel_cos+0x158>)
 800b2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fa:	f7f4 ff8f 	bl	800021c <__adddf3>
 800b2fe:	4622      	mov	r2, r4
 800b300:	462b      	mov	r3, r5
 800b302:	f7f5 f941 	bl	8000588 <__aeabi_dmul>
 800b306:	a336      	add	r3, pc, #216	; (adr r3, 800b3e0 <__kernel_cos+0x160>)
 800b308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30c:	f7f4 ff84 	bl	8000218 <__aeabi_dsub>
 800b310:	4622      	mov	r2, r4
 800b312:	462b      	mov	r3, r5
 800b314:	f7f5 f938 	bl	8000588 <__aeabi_dmul>
 800b318:	a333      	add	r3, pc, #204	; (adr r3, 800b3e8 <__kernel_cos+0x168>)
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	f7f4 ff7d 	bl	800021c <__adddf3>
 800b322:	4622      	mov	r2, r4
 800b324:	462b      	mov	r3, r5
 800b326:	f7f5 f92f 	bl	8000588 <__aeabi_dmul>
 800b32a:	4622      	mov	r2, r4
 800b32c:	462b      	mov	r3, r5
 800b32e:	f7f5 f92b 	bl	8000588 <__aeabi_dmul>
 800b332:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b336:	4604      	mov	r4, r0
 800b338:	460d      	mov	r5, r1
 800b33a:	4630      	mov	r0, r6
 800b33c:	4639      	mov	r1, r7
 800b33e:	f7f5 f923 	bl	8000588 <__aeabi_dmul>
 800b342:	460b      	mov	r3, r1
 800b344:	4602      	mov	r2, r0
 800b346:	4629      	mov	r1, r5
 800b348:	4620      	mov	r0, r4
 800b34a:	f7f4 ff65 	bl	8000218 <__aeabi_dsub>
 800b34e:	4b2b      	ldr	r3, [pc, #172]	; (800b3fc <__kernel_cos+0x17c>)
 800b350:	4598      	cmp	r8, r3
 800b352:	4606      	mov	r6, r0
 800b354:	460f      	mov	r7, r1
 800b356:	dc10      	bgt.n	800b37a <__kernel_cos+0xfa>
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	4650      	mov	r0, sl
 800b35e:	4659      	mov	r1, fp
 800b360:	f7f4 ff5a 	bl	8000218 <__aeabi_dsub>
 800b364:	460b      	mov	r3, r1
 800b366:	4926      	ldr	r1, [pc, #152]	; (800b400 <__kernel_cos+0x180>)
 800b368:	4602      	mov	r2, r0
 800b36a:	2000      	movs	r0, #0
 800b36c:	f7f4 ff54 	bl	8000218 <__aeabi_dsub>
 800b370:	ec41 0b10 	vmov	d0, r0, r1
 800b374:	b003      	add	sp, #12
 800b376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37a:	4b22      	ldr	r3, [pc, #136]	; (800b404 <__kernel_cos+0x184>)
 800b37c:	4920      	ldr	r1, [pc, #128]	; (800b400 <__kernel_cos+0x180>)
 800b37e:	4598      	cmp	r8, r3
 800b380:	bfcc      	ite	gt
 800b382:	4d21      	ldrgt	r5, [pc, #132]	; (800b408 <__kernel_cos+0x188>)
 800b384:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b388:	2400      	movs	r4, #0
 800b38a:	4622      	mov	r2, r4
 800b38c:	462b      	mov	r3, r5
 800b38e:	2000      	movs	r0, #0
 800b390:	f7f4 ff42 	bl	8000218 <__aeabi_dsub>
 800b394:	4622      	mov	r2, r4
 800b396:	4680      	mov	r8, r0
 800b398:	4689      	mov	r9, r1
 800b39a:	462b      	mov	r3, r5
 800b39c:	4650      	mov	r0, sl
 800b39e:	4659      	mov	r1, fp
 800b3a0:	f7f4 ff3a 	bl	8000218 <__aeabi_dsub>
 800b3a4:	4632      	mov	r2, r6
 800b3a6:	463b      	mov	r3, r7
 800b3a8:	f7f4 ff36 	bl	8000218 <__aeabi_dsub>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	4640      	mov	r0, r8
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	e7da      	b.n	800b36c <__kernel_cos+0xec>
 800b3b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b3f0 <__kernel_cos+0x170>
 800b3ba:	e7db      	b.n	800b374 <__kernel_cos+0xf4>
 800b3bc:	f3af 8000 	nop.w
 800b3c0:	be8838d4 	.word	0xbe8838d4
 800b3c4:	bda8fae9 	.word	0xbda8fae9
 800b3c8:	bdb4b1c4 	.word	0xbdb4b1c4
 800b3cc:	3e21ee9e 	.word	0x3e21ee9e
 800b3d0:	809c52ad 	.word	0x809c52ad
 800b3d4:	3e927e4f 	.word	0x3e927e4f
 800b3d8:	19cb1590 	.word	0x19cb1590
 800b3dc:	3efa01a0 	.word	0x3efa01a0
 800b3e0:	16c15177 	.word	0x16c15177
 800b3e4:	3f56c16c 	.word	0x3f56c16c
 800b3e8:	5555554c 	.word	0x5555554c
 800b3ec:	3fa55555 	.word	0x3fa55555
 800b3f0:	00000000 	.word	0x00000000
 800b3f4:	3ff00000 	.word	0x3ff00000
 800b3f8:	3fe00000 	.word	0x3fe00000
 800b3fc:	3fd33332 	.word	0x3fd33332
 800b400:	3ff00000 	.word	0x3ff00000
 800b404:	3fe90000 	.word	0x3fe90000
 800b408:	3fd20000 	.word	0x3fd20000
 800b40c:	00000000 	.word	0x00000000

0800b410 <__kernel_rem_pio2>:
 800b410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b414:	ed2d 8b02 	vpush	{d8}
 800b418:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b41c:	f112 0f14 	cmn.w	r2, #20
 800b420:	9308      	str	r3, [sp, #32]
 800b422:	9101      	str	r1, [sp, #4]
 800b424:	4bc6      	ldr	r3, [pc, #792]	; (800b740 <__kernel_rem_pio2+0x330>)
 800b426:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b428:	9009      	str	r0, [sp, #36]	; 0x24
 800b42a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b42e:	9304      	str	r3, [sp, #16]
 800b430:	9b08      	ldr	r3, [sp, #32]
 800b432:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b436:	bfa8      	it	ge
 800b438:	1ed4      	subge	r4, r2, #3
 800b43a:	9306      	str	r3, [sp, #24]
 800b43c:	bfb2      	itee	lt
 800b43e:	2400      	movlt	r4, #0
 800b440:	2318      	movge	r3, #24
 800b442:	fb94 f4f3 	sdivge	r4, r4, r3
 800b446:	f06f 0317 	mvn.w	r3, #23
 800b44a:	fb04 3303 	mla	r3, r4, r3, r3
 800b44e:	eb03 0a02 	add.w	sl, r3, r2
 800b452:	9b04      	ldr	r3, [sp, #16]
 800b454:	9a06      	ldr	r2, [sp, #24]
 800b456:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b730 <__kernel_rem_pio2+0x320>
 800b45a:	eb03 0802 	add.w	r8, r3, r2
 800b45e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b460:	1aa7      	subs	r7, r4, r2
 800b462:	ae20      	add	r6, sp, #128	; 0x80
 800b464:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b468:	2500      	movs	r5, #0
 800b46a:	4545      	cmp	r5, r8
 800b46c:	dd18      	ble.n	800b4a0 <__kernel_rem_pio2+0x90>
 800b46e:	9b08      	ldr	r3, [sp, #32]
 800b470:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b474:	aa20      	add	r2, sp, #128	; 0x80
 800b476:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800b730 <__kernel_rem_pio2+0x320>
 800b47a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b47e:	f1c3 0301 	rsb	r3, r3, #1
 800b482:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b486:	9307      	str	r3, [sp, #28]
 800b488:	9b07      	ldr	r3, [sp, #28]
 800b48a:	9a04      	ldr	r2, [sp, #16]
 800b48c:	4443      	add	r3, r8
 800b48e:	429a      	cmp	r2, r3
 800b490:	db2f      	blt.n	800b4f2 <__kernel_rem_pio2+0xe2>
 800b492:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b496:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b49a:	462f      	mov	r7, r5
 800b49c:	2600      	movs	r6, #0
 800b49e:	e01b      	b.n	800b4d8 <__kernel_rem_pio2+0xc8>
 800b4a0:	42ef      	cmn	r7, r5
 800b4a2:	d407      	bmi.n	800b4b4 <__kernel_rem_pio2+0xa4>
 800b4a4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b4a8:	f7f5 f804 	bl	80004b4 <__aeabi_i2d>
 800b4ac:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b4b0:	3501      	adds	r5, #1
 800b4b2:	e7da      	b.n	800b46a <__kernel_rem_pio2+0x5a>
 800b4b4:	ec51 0b18 	vmov	r0, r1, d8
 800b4b8:	e7f8      	b.n	800b4ac <__kernel_rem_pio2+0x9c>
 800b4ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4be:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b4c2:	f7f5 f861 	bl	8000588 <__aeabi_dmul>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4ce:	f7f4 fea5 	bl	800021c <__adddf3>
 800b4d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4d6:	3601      	adds	r6, #1
 800b4d8:	9b06      	ldr	r3, [sp, #24]
 800b4da:	429e      	cmp	r6, r3
 800b4dc:	f1a7 0708 	sub.w	r7, r7, #8
 800b4e0:	ddeb      	ble.n	800b4ba <__kernel_rem_pio2+0xaa>
 800b4e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4e6:	3508      	adds	r5, #8
 800b4e8:	ecab 7b02 	vstmia	fp!, {d7}
 800b4ec:	f108 0801 	add.w	r8, r8, #1
 800b4f0:	e7ca      	b.n	800b488 <__kernel_rem_pio2+0x78>
 800b4f2:	9b04      	ldr	r3, [sp, #16]
 800b4f4:	aa0c      	add	r2, sp, #48	; 0x30
 800b4f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b4fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4fc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b4fe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b502:	9c04      	ldr	r4, [sp, #16]
 800b504:	930a      	str	r3, [sp, #40]	; 0x28
 800b506:	ab98      	add	r3, sp, #608	; 0x260
 800b508:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b50c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b510:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800b514:	f8cd b008 	str.w	fp, [sp, #8]
 800b518:	4625      	mov	r5, r4
 800b51a:	2d00      	cmp	r5, #0
 800b51c:	dc78      	bgt.n	800b610 <__kernel_rem_pio2+0x200>
 800b51e:	ec47 6b10 	vmov	d0, r6, r7
 800b522:	4650      	mov	r0, sl
 800b524:	f000 fbfc 	bl	800bd20 <scalbn>
 800b528:	ec57 6b10 	vmov	r6, r7, d0
 800b52c:	2200      	movs	r2, #0
 800b52e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b532:	ee10 0a10 	vmov	r0, s0
 800b536:	4639      	mov	r1, r7
 800b538:	f7f5 f826 	bl	8000588 <__aeabi_dmul>
 800b53c:	ec41 0b10 	vmov	d0, r0, r1
 800b540:	f000 fb6e 	bl	800bc20 <floor>
 800b544:	4b7f      	ldr	r3, [pc, #508]	; (800b744 <__kernel_rem_pio2+0x334>)
 800b546:	ec51 0b10 	vmov	r0, r1, d0
 800b54a:	2200      	movs	r2, #0
 800b54c:	f7f5 f81c 	bl	8000588 <__aeabi_dmul>
 800b550:	4602      	mov	r2, r0
 800b552:	460b      	mov	r3, r1
 800b554:	4630      	mov	r0, r6
 800b556:	4639      	mov	r1, r7
 800b558:	f7f4 fe5e 	bl	8000218 <__aeabi_dsub>
 800b55c:	460f      	mov	r7, r1
 800b55e:	4606      	mov	r6, r0
 800b560:	f7f5 faac 	bl	8000abc <__aeabi_d2iz>
 800b564:	9007      	str	r0, [sp, #28]
 800b566:	f7f4 ffa5 	bl	80004b4 <__aeabi_i2d>
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	4630      	mov	r0, r6
 800b570:	4639      	mov	r1, r7
 800b572:	f7f4 fe51 	bl	8000218 <__aeabi_dsub>
 800b576:	f1ba 0f00 	cmp.w	sl, #0
 800b57a:	4606      	mov	r6, r0
 800b57c:	460f      	mov	r7, r1
 800b57e:	dd70      	ble.n	800b662 <__kernel_rem_pio2+0x252>
 800b580:	1e62      	subs	r2, r4, #1
 800b582:	ab0c      	add	r3, sp, #48	; 0x30
 800b584:	9d07      	ldr	r5, [sp, #28]
 800b586:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b58a:	f1ca 0118 	rsb	r1, sl, #24
 800b58e:	fa40 f301 	asr.w	r3, r0, r1
 800b592:	441d      	add	r5, r3
 800b594:	408b      	lsls	r3, r1
 800b596:	1ac0      	subs	r0, r0, r3
 800b598:	ab0c      	add	r3, sp, #48	; 0x30
 800b59a:	9507      	str	r5, [sp, #28]
 800b59c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b5a0:	f1ca 0317 	rsb	r3, sl, #23
 800b5a4:	fa40 f303 	asr.w	r3, r0, r3
 800b5a8:	9302      	str	r3, [sp, #8]
 800b5aa:	9b02      	ldr	r3, [sp, #8]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	dd66      	ble.n	800b67e <__kernel_rem_pio2+0x26e>
 800b5b0:	9b07      	ldr	r3, [sp, #28]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	9307      	str	r3, [sp, #28]
 800b5b8:	4615      	mov	r5, r2
 800b5ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b5be:	4294      	cmp	r4, r2
 800b5c0:	f300 8099 	bgt.w	800b6f6 <__kernel_rem_pio2+0x2e6>
 800b5c4:	f1ba 0f00 	cmp.w	sl, #0
 800b5c8:	dd07      	ble.n	800b5da <__kernel_rem_pio2+0x1ca>
 800b5ca:	f1ba 0f01 	cmp.w	sl, #1
 800b5ce:	f000 80a5 	beq.w	800b71c <__kernel_rem_pio2+0x30c>
 800b5d2:	f1ba 0f02 	cmp.w	sl, #2
 800b5d6:	f000 80c1 	beq.w	800b75c <__kernel_rem_pio2+0x34c>
 800b5da:	9b02      	ldr	r3, [sp, #8]
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d14e      	bne.n	800b67e <__kernel_rem_pio2+0x26e>
 800b5e0:	4632      	mov	r2, r6
 800b5e2:	463b      	mov	r3, r7
 800b5e4:	4958      	ldr	r1, [pc, #352]	; (800b748 <__kernel_rem_pio2+0x338>)
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	f7f4 fe16 	bl	8000218 <__aeabi_dsub>
 800b5ec:	4606      	mov	r6, r0
 800b5ee:	460f      	mov	r7, r1
 800b5f0:	2d00      	cmp	r5, #0
 800b5f2:	d044      	beq.n	800b67e <__kernel_rem_pio2+0x26e>
 800b5f4:	4650      	mov	r0, sl
 800b5f6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b738 <__kernel_rem_pio2+0x328>
 800b5fa:	f000 fb91 	bl	800bd20 <scalbn>
 800b5fe:	4630      	mov	r0, r6
 800b600:	4639      	mov	r1, r7
 800b602:	ec53 2b10 	vmov	r2, r3, d0
 800b606:	f7f4 fe07 	bl	8000218 <__aeabi_dsub>
 800b60a:	4606      	mov	r6, r0
 800b60c:	460f      	mov	r7, r1
 800b60e:	e036      	b.n	800b67e <__kernel_rem_pio2+0x26e>
 800b610:	4b4e      	ldr	r3, [pc, #312]	; (800b74c <__kernel_rem_pio2+0x33c>)
 800b612:	2200      	movs	r2, #0
 800b614:	4630      	mov	r0, r6
 800b616:	4639      	mov	r1, r7
 800b618:	f7f4 ffb6 	bl	8000588 <__aeabi_dmul>
 800b61c:	f7f5 fa4e 	bl	8000abc <__aeabi_d2iz>
 800b620:	f7f4 ff48 	bl	80004b4 <__aeabi_i2d>
 800b624:	4b4a      	ldr	r3, [pc, #296]	; (800b750 <__kernel_rem_pio2+0x340>)
 800b626:	2200      	movs	r2, #0
 800b628:	4680      	mov	r8, r0
 800b62a:	4689      	mov	r9, r1
 800b62c:	f7f4 ffac 	bl	8000588 <__aeabi_dmul>
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	4630      	mov	r0, r6
 800b636:	4639      	mov	r1, r7
 800b638:	f7f4 fdee 	bl	8000218 <__aeabi_dsub>
 800b63c:	f7f5 fa3e 	bl	8000abc <__aeabi_d2iz>
 800b640:	9b02      	ldr	r3, [sp, #8]
 800b642:	f843 0b04 	str.w	r0, [r3], #4
 800b646:	3d01      	subs	r5, #1
 800b648:	9302      	str	r3, [sp, #8]
 800b64a:	ab70      	add	r3, sp, #448	; 0x1c0
 800b64c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b654:	4640      	mov	r0, r8
 800b656:	4649      	mov	r1, r9
 800b658:	f7f4 fde0 	bl	800021c <__adddf3>
 800b65c:	4606      	mov	r6, r0
 800b65e:	460f      	mov	r7, r1
 800b660:	e75b      	b.n	800b51a <__kernel_rem_pio2+0x10a>
 800b662:	d105      	bne.n	800b670 <__kernel_rem_pio2+0x260>
 800b664:	1e63      	subs	r3, r4, #1
 800b666:	aa0c      	add	r2, sp, #48	; 0x30
 800b668:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b66c:	15c3      	asrs	r3, r0, #23
 800b66e:	e79b      	b.n	800b5a8 <__kernel_rem_pio2+0x198>
 800b670:	4b38      	ldr	r3, [pc, #224]	; (800b754 <__kernel_rem_pio2+0x344>)
 800b672:	2200      	movs	r2, #0
 800b674:	f7f5 fa0e 	bl	8000a94 <__aeabi_dcmpge>
 800b678:	2800      	cmp	r0, #0
 800b67a:	d139      	bne.n	800b6f0 <__kernel_rem_pio2+0x2e0>
 800b67c:	9002      	str	r0, [sp, #8]
 800b67e:	2200      	movs	r2, #0
 800b680:	2300      	movs	r3, #0
 800b682:	4630      	mov	r0, r6
 800b684:	4639      	mov	r1, r7
 800b686:	f7f5 f9e7 	bl	8000a58 <__aeabi_dcmpeq>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	f000 80b4 	beq.w	800b7f8 <__kernel_rem_pio2+0x3e8>
 800b690:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800b694:	465b      	mov	r3, fp
 800b696:	2200      	movs	r2, #0
 800b698:	9904      	ldr	r1, [sp, #16]
 800b69a:	428b      	cmp	r3, r1
 800b69c:	da65      	bge.n	800b76a <__kernel_rem_pio2+0x35a>
 800b69e:	2a00      	cmp	r2, #0
 800b6a0:	d07b      	beq.n	800b79a <__kernel_rem_pio2+0x38a>
 800b6a2:	ab0c      	add	r3, sp, #48	; 0x30
 800b6a4:	f1aa 0a18 	sub.w	sl, sl, #24
 800b6a8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f000 80a0 	beq.w	800b7f2 <__kernel_rem_pio2+0x3e2>
 800b6b2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800b738 <__kernel_rem_pio2+0x328>
 800b6b6:	4650      	mov	r0, sl
 800b6b8:	f000 fb32 	bl	800bd20 <scalbn>
 800b6bc:	4f23      	ldr	r7, [pc, #140]	; (800b74c <__kernel_rem_pio2+0x33c>)
 800b6be:	ec55 4b10 	vmov	r4, r5, d0
 800b6c2:	46d8      	mov	r8, fp
 800b6c4:	2600      	movs	r6, #0
 800b6c6:	f1b8 0f00 	cmp.w	r8, #0
 800b6ca:	f280 80cf 	bge.w	800b86c <__kernel_rem_pio2+0x45c>
 800b6ce:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800b730 <__kernel_rem_pio2+0x320>
 800b6d2:	465f      	mov	r7, fp
 800b6d4:	f04f 0800 	mov.w	r8, #0
 800b6d8:	2f00      	cmp	r7, #0
 800b6da:	f2c0 80fd 	blt.w	800b8d8 <__kernel_rem_pio2+0x4c8>
 800b6de:	ab70      	add	r3, sp, #448	; 0x1c0
 800b6e0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b758 <__kernel_rem_pio2+0x348>
 800b6e4:	ec55 4b18 	vmov	r4, r5, d8
 800b6e8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800b6ec:	2600      	movs	r6, #0
 800b6ee:	e0e5      	b.n	800b8bc <__kernel_rem_pio2+0x4ac>
 800b6f0:	2302      	movs	r3, #2
 800b6f2:	9302      	str	r3, [sp, #8]
 800b6f4:	e75c      	b.n	800b5b0 <__kernel_rem_pio2+0x1a0>
 800b6f6:	f8db 3000 	ldr.w	r3, [fp]
 800b6fa:	b955      	cbnz	r5, 800b712 <__kernel_rem_pio2+0x302>
 800b6fc:	b123      	cbz	r3, 800b708 <__kernel_rem_pio2+0x2f8>
 800b6fe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b702:	f8cb 3000 	str.w	r3, [fp]
 800b706:	2301      	movs	r3, #1
 800b708:	3201      	adds	r2, #1
 800b70a:	f10b 0b04 	add.w	fp, fp, #4
 800b70e:	461d      	mov	r5, r3
 800b710:	e755      	b.n	800b5be <__kernel_rem_pio2+0x1ae>
 800b712:	1acb      	subs	r3, r1, r3
 800b714:	f8cb 3000 	str.w	r3, [fp]
 800b718:	462b      	mov	r3, r5
 800b71a:	e7f5      	b.n	800b708 <__kernel_rem_pio2+0x2f8>
 800b71c:	1e62      	subs	r2, r4, #1
 800b71e:	ab0c      	add	r3, sp, #48	; 0x30
 800b720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b724:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b728:	a90c      	add	r1, sp, #48	; 0x30
 800b72a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b72e:	e754      	b.n	800b5da <__kernel_rem_pio2+0x1ca>
	...
 800b73c:	3ff00000 	.word	0x3ff00000
 800b740:	0800c200 	.word	0x0800c200
 800b744:	40200000 	.word	0x40200000
 800b748:	3ff00000 	.word	0x3ff00000
 800b74c:	3e700000 	.word	0x3e700000
 800b750:	41700000 	.word	0x41700000
 800b754:	3fe00000 	.word	0x3fe00000
 800b758:	0800c1c0 	.word	0x0800c1c0
 800b75c:	1e62      	subs	r2, r4, #1
 800b75e:	ab0c      	add	r3, sp, #48	; 0x30
 800b760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b764:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b768:	e7de      	b.n	800b728 <__kernel_rem_pio2+0x318>
 800b76a:	a90c      	add	r1, sp, #48	; 0x30
 800b76c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b770:	3b01      	subs	r3, #1
 800b772:	430a      	orrs	r2, r1
 800b774:	e790      	b.n	800b698 <__kernel_rem_pio2+0x288>
 800b776:	3301      	adds	r3, #1
 800b778:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b77c:	2900      	cmp	r1, #0
 800b77e:	d0fa      	beq.n	800b776 <__kernel_rem_pio2+0x366>
 800b780:	9a08      	ldr	r2, [sp, #32]
 800b782:	18e3      	adds	r3, r4, r3
 800b784:	18a6      	adds	r6, r4, r2
 800b786:	aa20      	add	r2, sp, #128	; 0x80
 800b788:	1c65      	adds	r5, r4, #1
 800b78a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b78e:	9302      	str	r3, [sp, #8]
 800b790:	9b02      	ldr	r3, [sp, #8]
 800b792:	42ab      	cmp	r3, r5
 800b794:	da04      	bge.n	800b7a0 <__kernel_rem_pio2+0x390>
 800b796:	461c      	mov	r4, r3
 800b798:	e6b5      	b.n	800b506 <__kernel_rem_pio2+0xf6>
 800b79a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b79c:	2301      	movs	r3, #1
 800b79e:	e7eb      	b.n	800b778 <__kernel_rem_pio2+0x368>
 800b7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7a6:	f7f4 fe85 	bl	80004b4 <__aeabi_i2d>
 800b7aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7b0:	46b3      	mov	fp, r6
 800b7b2:	461c      	mov	r4, r3
 800b7b4:	2700      	movs	r7, #0
 800b7b6:	f04f 0800 	mov.w	r8, #0
 800b7ba:	f04f 0900 	mov.w	r9, #0
 800b7be:	9b06      	ldr	r3, [sp, #24]
 800b7c0:	429f      	cmp	r7, r3
 800b7c2:	dd06      	ble.n	800b7d2 <__kernel_rem_pio2+0x3c2>
 800b7c4:	ab70      	add	r3, sp, #448	; 0x1c0
 800b7c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b7ca:	e9c3 8900 	strd	r8, r9, [r3]
 800b7ce:	3501      	adds	r5, #1
 800b7d0:	e7de      	b.n	800b790 <__kernel_rem_pio2+0x380>
 800b7d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b7d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b7da:	f7f4 fed5 	bl	8000588 <__aeabi_dmul>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	f7f4 fd19 	bl	800021c <__adddf3>
 800b7ea:	3701      	adds	r7, #1
 800b7ec:	4680      	mov	r8, r0
 800b7ee:	4689      	mov	r9, r1
 800b7f0:	e7e5      	b.n	800b7be <__kernel_rem_pio2+0x3ae>
 800b7f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b7f6:	e754      	b.n	800b6a2 <__kernel_rem_pio2+0x292>
 800b7f8:	ec47 6b10 	vmov	d0, r6, r7
 800b7fc:	f1ca 0000 	rsb	r0, sl, #0
 800b800:	f000 fa8e 	bl	800bd20 <scalbn>
 800b804:	ec57 6b10 	vmov	r6, r7, d0
 800b808:	4b9f      	ldr	r3, [pc, #636]	; (800ba88 <__kernel_rem_pio2+0x678>)
 800b80a:	ee10 0a10 	vmov	r0, s0
 800b80e:	2200      	movs	r2, #0
 800b810:	4639      	mov	r1, r7
 800b812:	f7f5 f93f 	bl	8000a94 <__aeabi_dcmpge>
 800b816:	b300      	cbz	r0, 800b85a <__kernel_rem_pio2+0x44a>
 800b818:	4b9c      	ldr	r3, [pc, #624]	; (800ba8c <__kernel_rem_pio2+0x67c>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	4630      	mov	r0, r6
 800b81e:	4639      	mov	r1, r7
 800b820:	f7f4 feb2 	bl	8000588 <__aeabi_dmul>
 800b824:	f7f5 f94a 	bl	8000abc <__aeabi_d2iz>
 800b828:	4605      	mov	r5, r0
 800b82a:	f7f4 fe43 	bl	80004b4 <__aeabi_i2d>
 800b82e:	4b96      	ldr	r3, [pc, #600]	; (800ba88 <__kernel_rem_pio2+0x678>)
 800b830:	2200      	movs	r2, #0
 800b832:	f7f4 fea9 	bl	8000588 <__aeabi_dmul>
 800b836:	460b      	mov	r3, r1
 800b838:	4602      	mov	r2, r0
 800b83a:	4639      	mov	r1, r7
 800b83c:	4630      	mov	r0, r6
 800b83e:	f7f4 fceb 	bl	8000218 <__aeabi_dsub>
 800b842:	f7f5 f93b 	bl	8000abc <__aeabi_d2iz>
 800b846:	f104 0b01 	add.w	fp, r4, #1
 800b84a:	ab0c      	add	r3, sp, #48	; 0x30
 800b84c:	f10a 0a18 	add.w	sl, sl, #24
 800b850:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b854:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800b858:	e72b      	b.n	800b6b2 <__kernel_rem_pio2+0x2a2>
 800b85a:	4630      	mov	r0, r6
 800b85c:	4639      	mov	r1, r7
 800b85e:	f7f5 f92d 	bl	8000abc <__aeabi_d2iz>
 800b862:	ab0c      	add	r3, sp, #48	; 0x30
 800b864:	46a3      	mov	fp, r4
 800b866:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b86a:	e722      	b.n	800b6b2 <__kernel_rem_pio2+0x2a2>
 800b86c:	ab70      	add	r3, sp, #448	; 0x1c0
 800b86e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800b872:	ab0c      	add	r3, sp, #48	; 0x30
 800b874:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b878:	f7f4 fe1c 	bl	80004b4 <__aeabi_i2d>
 800b87c:	4622      	mov	r2, r4
 800b87e:	462b      	mov	r3, r5
 800b880:	f7f4 fe82 	bl	8000588 <__aeabi_dmul>
 800b884:	4632      	mov	r2, r6
 800b886:	e9c9 0100 	strd	r0, r1, [r9]
 800b88a:	463b      	mov	r3, r7
 800b88c:	4620      	mov	r0, r4
 800b88e:	4629      	mov	r1, r5
 800b890:	f7f4 fe7a 	bl	8000588 <__aeabi_dmul>
 800b894:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b898:	4604      	mov	r4, r0
 800b89a:	460d      	mov	r5, r1
 800b89c:	e713      	b.n	800b6c6 <__kernel_rem_pio2+0x2b6>
 800b89e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b8a2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b8a6:	f7f4 fe6f 	bl	8000588 <__aeabi_dmul>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	f7f4 fcb3 	bl	800021c <__adddf3>
 800b8b6:	3601      	adds	r6, #1
 800b8b8:	4604      	mov	r4, r0
 800b8ba:	460d      	mov	r5, r1
 800b8bc:	9b04      	ldr	r3, [sp, #16]
 800b8be:	429e      	cmp	r6, r3
 800b8c0:	dc01      	bgt.n	800b8c6 <__kernel_rem_pio2+0x4b6>
 800b8c2:	45b0      	cmp	r8, r6
 800b8c4:	daeb      	bge.n	800b89e <__kernel_rem_pio2+0x48e>
 800b8c6:	ab48      	add	r3, sp, #288	; 0x120
 800b8c8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b8cc:	e9c3 4500 	strd	r4, r5, [r3]
 800b8d0:	3f01      	subs	r7, #1
 800b8d2:	f108 0801 	add.w	r8, r8, #1
 800b8d6:	e6ff      	b.n	800b6d8 <__kernel_rem_pio2+0x2c8>
 800b8d8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b8da:	2b02      	cmp	r3, #2
 800b8dc:	dc0b      	bgt.n	800b8f6 <__kernel_rem_pio2+0x4e6>
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	dc6e      	bgt.n	800b9c0 <__kernel_rem_pio2+0x5b0>
 800b8e2:	d045      	beq.n	800b970 <__kernel_rem_pio2+0x560>
 800b8e4:	9b07      	ldr	r3, [sp, #28]
 800b8e6:	f003 0007 	and.w	r0, r3, #7
 800b8ea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b8ee:	ecbd 8b02 	vpop	{d8}
 800b8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b8f8:	2b03      	cmp	r3, #3
 800b8fa:	d1f3      	bne.n	800b8e4 <__kernel_rem_pio2+0x4d4>
 800b8fc:	ab48      	add	r3, sp, #288	; 0x120
 800b8fe:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800b902:	46d0      	mov	r8, sl
 800b904:	46d9      	mov	r9, fp
 800b906:	f1b9 0f00 	cmp.w	r9, #0
 800b90a:	f1a8 0808 	sub.w	r8, r8, #8
 800b90e:	dc64      	bgt.n	800b9da <__kernel_rem_pio2+0x5ca>
 800b910:	465c      	mov	r4, fp
 800b912:	2c01      	cmp	r4, #1
 800b914:	f1aa 0a08 	sub.w	sl, sl, #8
 800b918:	dc7e      	bgt.n	800ba18 <__kernel_rem_pio2+0x608>
 800b91a:	2000      	movs	r0, #0
 800b91c:	2100      	movs	r1, #0
 800b91e:	f1bb 0f01 	cmp.w	fp, #1
 800b922:	f300 8097 	bgt.w	800ba54 <__kernel_rem_pio2+0x644>
 800b926:	9b02      	ldr	r3, [sp, #8]
 800b928:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800b92c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b930:	2b00      	cmp	r3, #0
 800b932:	f040 8099 	bne.w	800ba68 <__kernel_rem_pio2+0x658>
 800b936:	9b01      	ldr	r3, [sp, #4]
 800b938:	e9c3 5600 	strd	r5, r6, [r3]
 800b93c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b940:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b944:	e7ce      	b.n	800b8e4 <__kernel_rem_pio2+0x4d4>
 800b946:	ab48      	add	r3, sp, #288	; 0x120
 800b948:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	f7f4 fc64 	bl	800021c <__adddf3>
 800b954:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b958:	f1bb 0f00 	cmp.w	fp, #0
 800b95c:	daf3      	bge.n	800b946 <__kernel_rem_pio2+0x536>
 800b95e:	9b02      	ldr	r3, [sp, #8]
 800b960:	b113      	cbz	r3, 800b968 <__kernel_rem_pio2+0x558>
 800b962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b966:	4619      	mov	r1, r3
 800b968:	9b01      	ldr	r3, [sp, #4]
 800b96a:	e9c3 0100 	strd	r0, r1, [r3]
 800b96e:	e7b9      	b.n	800b8e4 <__kernel_rem_pio2+0x4d4>
 800b970:	2000      	movs	r0, #0
 800b972:	2100      	movs	r1, #0
 800b974:	e7f0      	b.n	800b958 <__kernel_rem_pio2+0x548>
 800b976:	ab48      	add	r3, sp, #288	; 0x120
 800b978:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b980:	f7f4 fc4c 	bl	800021c <__adddf3>
 800b984:	3c01      	subs	r4, #1
 800b986:	2c00      	cmp	r4, #0
 800b988:	daf5      	bge.n	800b976 <__kernel_rem_pio2+0x566>
 800b98a:	9b02      	ldr	r3, [sp, #8]
 800b98c:	b1e3      	cbz	r3, 800b9c8 <__kernel_rem_pio2+0x5b8>
 800b98e:	4602      	mov	r2, r0
 800b990:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b994:	9c01      	ldr	r4, [sp, #4]
 800b996:	e9c4 2300 	strd	r2, r3, [r4]
 800b99a:	4602      	mov	r2, r0
 800b99c:	460b      	mov	r3, r1
 800b99e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b9a2:	f7f4 fc39 	bl	8000218 <__aeabi_dsub>
 800b9a6:	ad4a      	add	r5, sp, #296	; 0x128
 800b9a8:	2401      	movs	r4, #1
 800b9aa:	45a3      	cmp	fp, r4
 800b9ac:	da0f      	bge.n	800b9ce <__kernel_rem_pio2+0x5be>
 800b9ae:	9b02      	ldr	r3, [sp, #8]
 800b9b0:	b113      	cbz	r3, 800b9b8 <__kernel_rem_pio2+0x5a8>
 800b9b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	9b01      	ldr	r3, [sp, #4]
 800b9ba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b9be:	e791      	b.n	800b8e4 <__kernel_rem_pio2+0x4d4>
 800b9c0:	465c      	mov	r4, fp
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	e7de      	b.n	800b986 <__kernel_rem_pio2+0x576>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	e7e2      	b.n	800b994 <__kernel_rem_pio2+0x584>
 800b9ce:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b9d2:	f7f4 fc23 	bl	800021c <__adddf3>
 800b9d6:	3401      	adds	r4, #1
 800b9d8:	e7e7      	b.n	800b9aa <__kernel_rem_pio2+0x59a>
 800b9da:	e9d8 4500 	ldrd	r4, r5, [r8]
 800b9de:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	4632      	mov	r2, r6
 800b9e6:	463b      	mov	r3, r7
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	f7f4 fc17 	bl	800021c <__adddf3>
 800b9ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	f7f4 fc0d 	bl	8000218 <__aeabi_dsub>
 800b9fe:	4632      	mov	r2, r6
 800ba00:	463b      	mov	r3, r7
 800ba02:	f7f4 fc0b 	bl	800021c <__adddf3>
 800ba06:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ba0a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800ba0e:	ed88 7b00 	vstr	d7, [r8]
 800ba12:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ba16:	e776      	b.n	800b906 <__kernel_rem_pio2+0x4f6>
 800ba18:	e9da 8900 	ldrd	r8, r9, [sl]
 800ba1c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ba20:	4640      	mov	r0, r8
 800ba22:	4632      	mov	r2, r6
 800ba24:	463b      	mov	r3, r7
 800ba26:	4649      	mov	r1, r9
 800ba28:	f7f4 fbf8 	bl	800021c <__adddf3>
 800ba2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba30:	4602      	mov	r2, r0
 800ba32:	460b      	mov	r3, r1
 800ba34:	4640      	mov	r0, r8
 800ba36:	4649      	mov	r1, r9
 800ba38:	f7f4 fbee 	bl	8000218 <__aeabi_dsub>
 800ba3c:	4632      	mov	r2, r6
 800ba3e:	463b      	mov	r3, r7
 800ba40:	f7f4 fbec 	bl	800021c <__adddf3>
 800ba44:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ba48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba4c:	ed8a 7b00 	vstr	d7, [sl]
 800ba50:	3c01      	subs	r4, #1
 800ba52:	e75e      	b.n	800b912 <__kernel_rem_pio2+0x502>
 800ba54:	ab48      	add	r3, sp, #288	; 0x120
 800ba56:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5e:	f7f4 fbdd 	bl	800021c <__adddf3>
 800ba62:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ba66:	e75a      	b.n	800b91e <__kernel_rem_pio2+0x50e>
 800ba68:	9b01      	ldr	r3, [sp, #4]
 800ba6a:	9a01      	ldr	r2, [sp, #4]
 800ba6c:	601d      	str	r5, [r3, #0]
 800ba6e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ba72:	605c      	str	r4, [r3, #4]
 800ba74:	609f      	str	r7, [r3, #8]
 800ba76:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ba7a:	60d3      	str	r3, [r2, #12]
 800ba7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba80:	6110      	str	r0, [r2, #16]
 800ba82:	6153      	str	r3, [r2, #20]
 800ba84:	e72e      	b.n	800b8e4 <__kernel_rem_pio2+0x4d4>
 800ba86:	bf00      	nop
 800ba88:	41700000 	.word	0x41700000
 800ba8c:	3e700000 	.word	0x3e700000

0800ba90 <__kernel_sin>:
 800ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba94:	ed2d 8b04 	vpush	{d8-d9}
 800ba98:	eeb0 8a41 	vmov.f32	s16, s2
 800ba9c:	eef0 8a61 	vmov.f32	s17, s3
 800baa0:	ec55 4b10 	vmov	r4, r5, d0
 800baa4:	b083      	sub	sp, #12
 800baa6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800baaa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800baae:	9001      	str	r0, [sp, #4]
 800bab0:	da06      	bge.n	800bac0 <__kernel_sin+0x30>
 800bab2:	ee10 0a10 	vmov	r0, s0
 800bab6:	4629      	mov	r1, r5
 800bab8:	f7f5 f800 	bl	8000abc <__aeabi_d2iz>
 800babc:	2800      	cmp	r0, #0
 800babe:	d051      	beq.n	800bb64 <__kernel_sin+0xd4>
 800bac0:	4622      	mov	r2, r4
 800bac2:	462b      	mov	r3, r5
 800bac4:	4620      	mov	r0, r4
 800bac6:	4629      	mov	r1, r5
 800bac8:	f7f4 fd5e 	bl	8000588 <__aeabi_dmul>
 800bacc:	4682      	mov	sl, r0
 800bace:	468b      	mov	fp, r1
 800bad0:	4602      	mov	r2, r0
 800bad2:	460b      	mov	r3, r1
 800bad4:	4620      	mov	r0, r4
 800bad6:	4629      	mov	r1, r5
 800bad8:	f7f4 fd56 	bl	8000588 <__aeabi_dmul>
 800badc:	a341      	add	r3, pc, #260	; (adr r3, 800bbe4 <__kernel_sin+0x154>)
 800bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae2:	4680      	mov	r8, r0
 800bae4:	4689      	mov	r9, r1
 800bae6:	4650      	mov	r0, sl
 800bae8:	4659      	mov	r1, fp
 800baea:	f7f4 fd4d 	bl	8000588 <__aeabi_dmul>
 800baee:	a33f      	add	r3, pc, #252	; (adr r3, 800bbec <__kernel_sin+0x15c>)
 800baf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf4:	f7f4 fb90 	bl	8000218 <__aeabi_dsub>
 800baf8:	4652      	mov	r2, sl
 800bafa:	465b      	mov	r3, fp
 800bafc:	f7f4 fd44 	bl	8000588 <__aeabi_dmul>
 800bb00:	a33c      	add	r3, pc, #240	; (adr r3, 800bbf4 <__kernel_sin+0x164>)
 800bb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb06:	f7f4 fb89 	bl	800021c <__adddf3>
 800bb0a:	4652      	mov	r2, sl
 800bb0c:	465b      	mov	r3, fp
 800bb0e:	f7f4 fd3b 	bl	8000588 <__aeabi_dmul>
 800bb12:	a33a      	add	r3, pc, #232	; (adr r3, 800bbfc <__kernel_sin+0x16c>)
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	f7f4 fb7e 	bl	8000218 <__aeabi_dsub>
 800bb1c:	4652      	mov	r2, sl
 800bb1e:	465b      	mov	r3, fp
 800bb20:	f7f4 fd32 	bl	8000588 <__aeabi_dmul>
 800bb24:	a337      	add	r3, pc, #220	; (adr r3, 800bc04 <__kernel_sin+0x174>)
 800bb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2a:	f7f4 fb77 	bl	800021c <__adddf3>
 800bb2e:	9b01      	ldr	r3, [sp, #4]
 800bb30:	4606      	mov	r6, r0
 800bb32:	460f      	mov	r7, r1
 800bb34:	b9eb      	cbnz	r3, 800bb72 <__kernel_sin+0xe2>
 800bb36:	4602      	mov	r2, r0
 800bb38:	460b      	mov	r3, r1
 800bb3a:	4650      	mov	r0, sl
 800bb3c:	4659      	mov	r1, fp
 800bb3e:	f7f4 fd23 	bl	8000588 <__aeabi_dmul>
 800bb42:	a325      	add	r3, pc, #148	; (adr r3, 800bbd8 <__kernel_sin+0x148>)
 800bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb48:	f7f4 fb66 	bl	8000218 <__aeabi_dsub>
 800bb4c:	4642      	mov	r2, r8
 800bb4e:	464b      	mov	r3, r9
 800bb50:	f7f4 fd1a 	bl	8000588 <__aeabi_dmul>
 800bb54:	4602      	mov	r2, r0
 800bb56:	460b      	mov	r3, r1
 800bb58:	4620      	mov	r0, r4
 800bb5a:	4629      	mov	r1, r5
 800bb5c:	f7f4 fb5e 	bl	800021c <__adddf3>
 800bb60:	4604      	mov	r4, r0
 800bb62:	460d      	mov	r5, r1
 800bb64:	ec45 4b10 	vmov	d0, r4, r5
 800bb68:	b003      	add	sp, #12
 800bb6a:	ecbd 8b04 	vpop	{d8-d9}
 800bb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb72:	4b1b      	ldr	r3, [pc, #108]	; (800bbe0 <__kernel_sin+0x150>)
 800bb74:	ec51 0b18 	vmov	r0, r1, d8
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f7f4 fd05 	bl	8000588 <__aeabi_dmul>
 800bb7e:	4632      	mov	r2, r6
 800bb80:	ec41 0b19 	vmov	d9, r0, r1
 800bb84:	463b      	mov	r3, r7
 800bb86:	4640      	mov	r0, r8
 800bb88:	4649      	mov	r1, r9
 800bb8a:	f7f4 fcfd 	bl	8000588 <__aeabi_dmul>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	460b      	mov	r3, r1
 800bb92:	ec51 0b19 	vmov	r0, r1, d9
 800bb96:	f7f4 fb3f 	bl	8000218 <__aeabi_dsub>
 800bb9a:	4652      	mov	r2, sl
 800bb9c:	465b      	mov	r3, fp
 800bb9e:	f7f4 fcf3 	bl	8000588 <__aeabi_dmul>
 800bba2:	ec53 2b18 	vmov	r2, r3, d8
 800bba6:	f7f4 fb37 	bl	8000218 <__aeabi_dsub>
 800bbaa:	a30b      	add	r3, pc, #44	; (adr r3, 800bbd8 <__kernel_sin+0x148>)
 800bbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb0:	4606      	mov	r6, r0
 800bbb2:	460f      	mov	r7, r1
 800bbb4:	4640      	mov	r0, r8
 800bbb6:	4649      	mov	r1, r9
 800bbb8:	f7f4 fce6 	bl	8000588 <__aeabi_dmul>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	4639      	mov	r1, r7
 800bbc4:	f7f4 fb2a 	bl	800021c <__adddf3>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	460b      	mov	r3, r1
 800bbcc:	4620      	mov	r0, r4
 800bbce:	4629      	mov	r1, r5
 800bbd0:	f7f4 fb22 	bl	8000218 <__aeabi_dsub>
 800bbd4:	e7c4      	b.n	800bb60 <__kernel_sin+0xd0>
 800bbd6:	bf00      	nop
 800bbd8:	55555549 	.word	0x55555549
 800bbdc:	3fc55555 	.word	0x3fc55555
 800bbe0:	3fe00000 	.word	0x3fe00000
 800bbe4:	5acfd57c 	.word	0x5acfd57c
 800bbe8:	3de5d93a 	.word	0x3de5d93a
 800bbec:	8a2b9ceb 	.word	0x8a2b9ceb
 800bbf0:	3e5ae5e6 	.word	0x3e5ae5e6
 800bbf4:	57b1fe7d 	.word	0x57b1fe7d
 800bbf8:	3ec71de3 	.word	0x3ec71de3
 800bbfc:	19c161d5 	.word	0x19c161d5
 800bc00:	3f2a01a0 	.word	0x3f2a01a0
 800bc04:	1110f8a6 	.word	0x1110f8a6
 800bc08:	3f811111 	.word	0x3f811111

0800bc0c <fabs>:
 800bc0c:	ec51 0b10 	vmov	r0, r1, d0
 800bc10:	ee10 2a10 	vmov	r2, s0
 800bc14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc18:	ec43 2b10 	vmov	d0, r2, r3
 800bc1c:	4770      	bx	lr
	...

0800bc20 <floor>:
 800bc20:	ec51 0b10 	vmov	r0, r1, d0
 800bc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc28:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bc2c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bc30:	2e13      	cmp	r6, #19
 800bc32:	ee10 5a10 	vmov	r5, s0
 800bc36:	ee10 8a10 	vmov	r8, s0
 800bc3a:	460c      	mov	r4, r1
 800bc3c:	dc32      	bgt.n	800bca4 <floor+0x84>
 800bc3e:	2e00      	cmp	r6, #0
 800bc40:	da14      	bge.n	800bc6c <floor+0x4c>
 800bc42:	a333      	add	r3, pc, #204	; (adr r3, 800bd10 <floor+0xf0>)
 800bc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc48:	f7f4 fae8 	bl	800021c <__adddf3>
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f7f4 ff2a 	bl	8000aa8 <__aeabi_dcmpgt>
 800bc54:	b138      	cbz	r0, 800bc66 <floor+0x46>
 800bc56:	2c00      	cmp	r4, #0
 800bc58:	da57      	bge.n	800bd0a <floor+0xea>
 800bc5a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bc5e:	431d      	orrs	r5, r3
 800bc60:	d001      	beq.n	800bc66 <floor+0x46>
 800bc62:	4c2d      	ldr	r4, [pc, #180]	; (800bd18 <floor+0xf8>)
 800bc64:	2500      	movs	r5, #0
 800bc66:	4621      	mov	r1, r4
 800bc68:	4628      	mov	r0, r5
 800bc6a:	e025      	b.n	800bcb8 <floor+0x98>
 800bc6c:	4f2b      	ldr	r7, [pc, #172]	; (800bd1c <floor+0xfc>)
 800bc6e:	4137      	asrs	r7, r6
 800bc70:	ea01 0307 	and.w	r3, r1, r7
 800bc74:	4303      	orrs	r3, r0
 800bc76:	d01f      	beq.n	800bcb8 <floor+0x98>
 800bc78:	a325      	add	r3, pc, #148	; (adr r3, 800bd10 <floor+0xf0>)
 800bc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7e:	f7f4 facd 	bl	800021c <__adddf3>
 800bc82:	2200      	movs	r2, #0
 800bc84:	2300      	movs	r3, #0
 800bc86:	f7f4 ff0f 	bl	8000aa8 <__aeabi_dcmpgt>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	d0eb      	beq.n	800bc66 <floor+0x46>
 800bc8e:	2c00      	cmp	r4, #0
 800bc90:	bfbe      	ittt	lt
 800bc92:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bc96:	fa43 f606 	asrlt.w	r6, r3, r6
 800bc9a:	19a4      	addlt	r4, r4, r6
 800bc9c:	ea24 0407 	bic.w	r4, r4, r7
 800bca0:	2500      	movs	r5, #0
 800bca2:	e7e0      	b.n	800bc66 <floor+0x46>
 800bca4:	2e33      	cmp	r6, #51	; 0x33
 800bca6:	dd0b      	ble.n	800bcc0 <floor+0xa0>
 800bca8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bcac:	d104      	bne.n	800bcb8 <floor+0x98>
 800bcae:	ee10 2a10 	vmov	r2, s0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	f7f4 fab2 	bl	800021c <__adddf3>
 800bcb8:	ec41 0b10 	vmov	d0, r0, r1
 800bcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcc0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bcc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcc8:	fa23 f707 	lsr.w	r7, r3, r7
 800bccc:	4207      	tst	r7, r0
 800bcce:	d0f3      	beq.n	800bcb8 <floor+0x98>
 800bcd0:	a30f      	add	r3, pc, #60	; (adr r3, 800bd10 <floor+0xf0>)
 800bcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd6:	f7f4 faa1 	bl	800021c <__adddf3>
 800bcda:	2200      	movs	r2, #0
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f7f4 fee3 	bl	8000aa8 <__aeabi_dcmpgt>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	d0bf      	beq.n	800bc66 <floor+0x46>
 800bce6:	2c00      	cmp	r4, #0
 800bce8:	da02      	bge.n	800bcf0 <floor+0xd0>
 800bcea:	2e14      	cmp	r6, #20
 800bcec:	d103      	bne.n	800bcf6 <floor+0xd6>
 800bcee:	3401      	adds	r4, #1
 800bcf0:	ea25 0507 	bic.w	r5, r5, r7
 800bcf4:	e7b7      	b.n	800bc66 <floor+0x46>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bcfc:	fa03 f606 	lsl.w	r6, r3, r6
 800bd00:	4435      	add	r5, r6
 800bd02:	4545      	cmp	r5, r8
 800bd04:	bf38      	it	cc
 800bd06:	18e4      	addcc	r4, r4, r3
 800bd08:	e7f2      	b.n	800bcf0 <floor+0xd0>
 800bd0a:	2500      	movs	r5, #0
 800bd0c:	462c      	mov	r4, r5
 800bd0e:	e7aa      	b.n	800bc66 <floor+0x46>
 800bd10:	8800759c 	.word	0x8800759c
 800bd14:	7e37e43c 	.word	0x7e37e43c
 800bd18:	bff00000 	.word	0xbff00000
 800bd1c:	000fffff 	.word	0x000fffff

0800bd20 <scalbn>:
 800bd20:	b570      	push	{r4, r5, r6, lr}
 800bd22:	ec55 4b10 	vmov	r4, r5, d0
 800bd26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bd2a:	4606      	mov	r6, r0
 800bd2c:	462b      	mov	r3, r5
 800bd2e:	b99a      	cbnz	r2, 800bd58 <scalbn+0x38>
 800bd30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bd34:	4323      	orrs	r3, r4
 800bd36:	d036      	beq.n	800bda6 <scalbn+0x86>
 800bd38:	4b39      	ldr	r3, [pc, #228]	; (800be20 <scalbn+0x100>)
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	ee10 0a10 	vmov	r0, s0
 800bd40:	2200      	movs	r2, #0
 800bd42:	f7f4 fc21 	bl	8000588 <__aeabi_dmul>
 800bd46:	4b37      	ldr	r3, [pc, #220]	; (800be24 <scalbn+0x104>)
 800bd48:	429e      	cmp	r6, r3
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	460d      	mov	r5, r1
 800bd4e:	da10      	bge.n	800bd72 <scalbn+0x52>
 800bd50:	a32b      	add	r3, pc, #172	; (adr r3, 800be00 <scalbn+0xe0>)
 800bd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd56:	e03a      	b.n	800bdce <scalbn+0xae>
 800bd58:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bd5c:	428a      	cmp	r2, r1
 800bd5e:	d10c      	bne.n	800bd7a <scalbn+0x5a>
 800bd60:	ee10 2a10 	vmov	r2, s0
 800bd64:	4620      	mov	r0, r4
 800bd66:	4629      	mov	r1, r5
 800bd68:	f7f4 fa58 	bl	800021c <__adddf3>
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	460d      	mov	r5, r1
 800bd70:	e019      	b.n	800bda6 <scalbn+0x86>
 800bd72:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bd76:	460b      	mov	r3, r1
 800bd78:	3a36      	subs	r2, #54	; 0x36
 800bd7a:	4432      	add	r2, r6
 800bd7c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bd80:	428a      	cmp	r2, r1
 800bd82:	dd08      	ble.n	800bd96 <scalbn+0x76>
 800bd84:	2d00      	cmp	r5, #0
 800bd86:	a120      	add	r1, pc, #128	; (adr r1, 800be08 <scalbn+0xe8>)
 800bd88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd8c:	da1c      	bge.n	800bdc8 <scalbn+0xa8>
 800bd8e:	a120      	add	r1, pc, #128	; (adr r1, 800be10 <scalbn+0xf0>)
 800bd90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd94:	e018      	b.n	800bdc8 <scalbn+0xa8>
 800bd96:	2a00      	cmp	r2, #0
 800bd98:	dd08      	ble.n	800bdac <scalbn+0x8c>
 800bd9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bd9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bda2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bda6:	ec45 4b10 	vmov	d0, r4, r5
 800bdaa:	bd70      	pop	{r4, r5, r6, pc}
 800bdac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bdb0:	da19      	bge.n	800bde6 <scalbn+0xc6>
 800bdb2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bdb6:	429e      	cmp	r6, r3
 800bdb8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bdbc:	dd0a      	ble.n	800bdd4 <scalbn+0xb4>
 800bdbe:	a112      	add	r1, pc, #72	; (adr r1, 800be08 <scalbn+0xe8>)
 800bdc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d1e2      	bne.n	800bd8e <scalbn+0x6e>
 800bdc8:	a30f      	add	r3, pc, #60	; (adr r3, 800be08 <scalbn+0xe8>)
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	f7f4 fbdb 	bl	8000588 <__aeabi_dmul>
 800bdd2:	e7cb      	b.n	800bd6c <scalbn+0x4c>
 800bdd4:	a10a      	add	r1, pc, #40	; (adr r1, 800be00 <scalbn+0xe0>)
 800bdd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d0b8      	beq.n	800bd50 <scalbn+0x30>
 800bdde:	a10e      	add	r1, pc, #56	; (adr r1, 800be18 <scalbn+0xf8>)
 800bde0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bde4:	e7b4      	b.n	800bd50 <scalbn+0x30>
 800bde6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bdea:	3236      	adds	r2, #54	; 0x36
 800bdec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bdf0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	4b0c      	ldr	r3, [pc, #48]	; (800be28 <scalbn+0x108>)
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	e7e8      	b.n	800bdce <scalbn+0xae>
 800bdfc:	f3af 8000 	nop.w
 800be00:	c2f8f359 	.word	0xc2f8f359
 800be04:	01a56e1f 	.word	0x01a56e1f
 800be08:	8800759c 	.word	0x8800759c
 800be0c:	7e37e43c 	.word	0x7e37e43c
 800be10:	8800759c 	.word	0x8800759c
 800be14:	fe37e43c 	.word	0xfe37e43c
 800be18:	c2f8f359 	.word	0xc2f8f359
 800be1c:	81a56e1f 	.word	0x81a56e1f
 800be20:	43500000 	.word	0x43500000
 800be24:	ffff3cb0 	.word	0xffff3cb0
 800be28:	3c900000 	.word	0x3c900000

0800be2c <_init>:
 800be2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2e:	bf00      	nop
 800be30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be32:	bc08      	pop	{r3}
 800be34:	469e      	mov	lr, r3
 800be36:	4770      	bx	lr

0800be38 <_fini>:
 800be38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be3a:	bf00      	nop
 800be3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be3e:	bc08      	pop	{r3}
 800be40:	469e      	mov	lr, r3
 800be42:	4770      	bx	lr
