
Remote_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  0800d670  0800d670  0001d670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd38  0800dd38  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd38  0800dd38  0001dd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd40  0800dd40  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd40  0800dd40  0001dd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd44  0800dd44  0001dd44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800dd48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  200001e0  0800df28  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  0800df28  00020840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001760b  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc8  00000000  00000000  0003781b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  0003a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  0003b428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023dce  00000000  00000000  0003c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ae8  00000000  00000000  0006001e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4eaf  00000000  00000000  00073b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001489b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000574c  00000000  00000000  00148a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0014e154  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0014e190  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d658 	.word	0x0800d658

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800d658 	.word	0x0800d658

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool data_received= false;

void UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	data_received = true;
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <UART_RxCpltCallback+0x1c>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	200001fc 	.word	0x200001fc
 800104c:	00000000 	.word	0x00000000

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001056:	f003 f847 	bl	80040e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105a:	f000 f98b 	bl	8001374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105e:	f000 fbdf 	bl	8001820 <MX_GPIO_Init>
  MX_DMA_Init();
 8001062:	f000 fbbd 	bl	80017e0 <MX_DMA_Init>
  MX_TIM2_Init();
 8001066:	f000 fa9b 	bl	80015a0 <MX_TIM2_Init>
  MX_TIM1_Init();
 800106a:	f000 f9f1 	bl	8001450 <MX_TIM1_Init>
  MX_TIM3_Init();
 800106e:	f000 faeb 	bl	8001648 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001072:	f000 fb37 	bl	80016e4 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8001076:	f000 fb89 	bl	800178c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  DATASTREAM_Init(&huart3);
 800107a:	48b5      	ldr	r0, [pc, #724]	; (8001350 <main+0x300>)
 800107c:	f000 ffb2 	bl	8001fe4 <DATASTREAM_Init>

  MAIN_DIFFDRIVE_Init();
 8001080:	f000 fc5e 	bl	8001940 <MAIN_DIFFDRIVE_Init>
  MAIN_MAF_Init();
 8001084:	f000 fd2e 	bl	8001ae4 <MAIN_MAF_Init>

  // Assign uart Rx complete callback
  huart3.RxCpltCallback= UART_RxCpltCallback;
 8001088:	4bb1      	ldr	r3, [pc, #708]	; (8001350 <main+0x300>)
 800108a:	4ab2      	ldr	r2, [pc, #712]	; (8001354 <main+0x304>)
 800108c:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  float delta_a=0, delta_th=0;
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	613b      	str	r3, [r7, #16]

  float delta_a_max= 3e-3, delta_th_max= 4e-2;
 800109a:	4baf      	ldr	r3, [pc, #700]	; (8001358 <main+0x308>)
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	4baf      	ldr	r3, [pc, #700]	; (800135c <main+0x30c>)
 80010a0:	607b      	str	r3, [r7, #4]

  uint8_t cmd[1];
  bool stop_flag= true;
 80010a2:	2301      	movs	r3, #1
 80010a4:	73fb      	strb	r3, [r7, #15]

  // Wait until a message is received
  HAL_UART_Receive_DMA(&huart3, cmd, sizeof(uint8_t));
 80010a6:	463b      	mov	r3, r7
 80010a8:	2201      	movs	r2, #1
 80010aa:	4619      	mov	r1, r3
 80010ac:	48a8      	ldr	r0, [pc, #672]	; (8001350 <main+0x300>)
 80010ae:	f006 f8bf 	bl	8007230 <HAL_UART_Receive_DMA>
  while( !data_received )
 80010b2:	e000      	b.n	80010b6 <main+0x66>
	  __NOP();
 80010b4:	bf00      	nop
  while( !data_received )
 80010b6:	4baa      	ldr	r3, [pc, #680]	; (8001360 <main+0x310>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	f083 0301 	eor.w	r3, r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1f7      	bne.n	80010b4 <main+0x64>

  HAL_Delay(1000);
 80010c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c8:	f003 f880 	bl	80041cc <HAL_Delay>

  // Start receive a data
  data_received= false;
 80010cc:	4ba4      	ldr	r3, [pc, #656]	; (8001360 <main+0x310>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart3, cmd, sizeof(uint8_t));
 80010d2:	463b      	mov	r3, r7
 80010d4:	2201      	movs	r2, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	489d      	ldr	r0, [pc, #628]	; (8001350 <main+0x300>)
 80010da:	f006 f8a9 	bl	8007230 <HAL_UART_Receive_DMA>

  while (1)
  {

	  if( data_received ){
 80010de:	4ba0      	ldr	r3, [pc, #640]	; (8001360 <main+0x310>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 80cf 	beq.w	8001286 <main+0x236>

		  if( stop_flag ){
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <main+0xa6>
			  DIFFDRIVE_TrackingStart();
 80010ee:	f002 fb53 	bl	8003798 <DIFFDRIVE_TrackingStart>
			  stop_flag= false;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
		  }

		  switch (cmd[0]){
 80010f6:	783b      	ldrb	r3, [r7, #0]
 80010f8:	3b69      	subs	r3, #105	; 0x69
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	f200 80b5 	bhi.w	800126a <main+0x21a>
 8001100:	a201      	add	r2, pc, #4	; (adr r2, 8001108 <main+0xb8>)
 8001102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001106:	bf00      	nop
 8001108:	0800111d 	.word	0x0800111d
 800110c:	080011d7 	.word	0x080011d7
 8001110:	08001145 	.word	0x08001145
 8001114:	0800116d 	.word	0x0800116d
 8001118:	08001241 	.word	0x08001241
		  	  case 'i':
		  		  delta_a +=  30e-4;
 800111c:	6978      	ldr	r0, [r7, #20]
 800111e:	f7ff fa33 	bl	8000588 <__aeabi_f2d>
 8001122:	a385      	add	r3, pc, #532	; (adr r3, 8001338 <main+0x2e8>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff f8d0 	bl	80002cc <__adddf3>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fd78 	bl	8000c28 <__aeabi_d2f>
 8001138:	4603      	mov	r3, r0
 800113a:	617b      	str	r3, [r7, #20]
		  		  delta_th = 0;
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
		  		  break;
 8001142:	e093      	b.n	800126c <main+0x21c>
		  	  case 'k':
		  		  delta_a += -30e-4;
 8001144:	6978      	ldr	r0, [r7, #20]
 8001146:	f7ff fa1f 	bl	8000588 <__aeabi_f2d>
 800114a:	a37b      	add	r3, pc, #492	; (adr r3, 8001338 <main+0x2e8>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff f8ba 	bl	80002c8 <__aeabi_dsub>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff fd64 	bl	8000c28 <__aeabi_d2f>
 8001160:	4603      	mov	r3, r0
 8001162:	617b      	str	r3, [r7, #20]
		  		  delta_th = 0;
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
		  		  break;
 800116a:	e07f      	b.n	800126c <main+0x21c>
		  	  case 'l':
		  		  if( delta_a >= delta_a_max || delta_a <= -delta_a_max )
 800116c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001170:	edd7 7a02 	vldr	s15, [r7, #8]
 8001174:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117c:	da0a      	bge.n	8001194 <main+0x144>
 800117e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001182:	eef1 7a67 	vneg.f32	s15, s15
 8001186:	ed97 7a05 	vldr	s14, [r7, #20]
 800118a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001192:	d80f      	bhi.n	80011b4 <main+0x164>
		  			  delta_a *= 0.4;
 8001194:	6978      	ldr	r0, [r7, #20]
 8001196:	f7ff f9f7 	bl	8000588 <__aeabi_f2d>
 800119a:	a369      	add	r3, pc, #420	; (adr r3, 8001340 <main+0x2f0>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fa4a 	bl	8000638 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fd3c 	bl	8000c28 <__aeabi_d2f>
 80011b0:	4603      	mov	r3, r0
 80011b2:	617b      	str	r3, [r7, #20]
		  		  delta_th += -5e-3;
 80011b4:	6938      	ldr	r0, [r7, #16]
 80011b6:	f7ff f9e7 	bl	8000588 <__aeabi_f2d>
 80011ba:	a363      	add	r3, pc, #396	; (adr r3, 8001348 <main+0x2f8>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff f882 	bl	80002c8 <__aeabi_dsub>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fd2c 	bl	8000c28 <__aeabi_d2f>
 80011d0:	4603      	mov	r3, r0
 80011d2:	613b      	str	r3, [r7, #16]
		  		  break;
 80011d4:	e04a      	b.n	800126c <main+0x21c>
		  	  case 'j':
		  		if( delta_a >= delta_a_max || delta_a <= -delta_a_max )
 80011d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80011da:	edd7 7a02 	vldr	s15, [r7, #8]
 80011de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e6:	da0a      	bge.n	80011fe <main+0x1ae>
 80011e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ec:	eef1 7a67 	vneg.f32	s15, s15
 80011f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80011f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	d80f      	bhi.n	800121e <main+0x1ce>
		  			delta_a *= 0.4;
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff f9c2 	bl	8000588 <__aeabi_f2d>
 8001204:	a34e      	add	r3, pc, #312	; (adr r3, 8001340 <main+0x2f0>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f7ff fa15 	bl	8000638 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fd07 	bl	8000c28 <__aeabi_d2f>
 800121a:	4603      	mov	r3, r0
 800121c:	617b      	str	r3, [r7, #20]
		  		  delta_th +=  5e-3;
 800121e:	6938      	ldr	r0, [r7, #16]
 8001220:	f7ff f9b2 	bl	8000588 <__aeabi_f2d>
 8001224:	a348      	add	r3, pc, #288	; (adr r3, 8001348 <main+0x2f8>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f84f 	bl	80002cc <__adddf3>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fcf7 	bl	8000c28 <__aeabi_d2f>
 800123a:	4603      	mov	r3, r0
 800123c:	613b      	str	r3, [r7, #16]
		  		  break;
 800123e:	e015      	b.n	800126c <main+0x21c>
		  	  case 'm':
		  		  DIFFDRIVE_TrackingStop();
 8001240:	f002 fab8 	bl	80037b4 <DIFFDRIVE_TrackingStop>
		  		  MAF_Reset(&hfilter_a, 0);
 8001244:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8001364 <main+0x314>
 8001248:	4847      	ldr	r0, [pc, #284]	; (8001368 <main+0x318>)
 800124a:	f002 fb30 	bl	80038ae <MAF_Reset>
		  		  MAF_Reset(&hfilter_th, 0);
 800124e:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8001364 <main+0x314>
 8001252:	4846      	ldr	r0, [pc, #280]	; (800136c <main+0x31c>)
 8001254:	f002 fb2b 	bl	80038ae <MAF_Reset>

		  		  stop_flag= true;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]

		  		  delta_a=  0;
 800125c:	f04f 0300 	mov.w	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
		  		  delta_th= 0;
 8001262:	f04f 0300 	mov.w	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
		  		  break;
 8001268:	e000      	b.n	800126c <main+0x21c>
		  	  default:
		  		  break;
 800126a:	bf00      	nop
		  }

		  // Receive a new data
		  data_received= false;
 800126c:	4b3c      	ldr	r3, [pc, #240]	; (8001360 <main+0x310>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(&huart3, cmd, sizeof(uint8_t));
 8001272:	463b      	mov	r3, r7
 8001274:	2201      	movs	r2, #1
 8001276:	4619      	mov	r1, r3
 8001278:	4835      	ldr	r0, [pc, #212]	; (8001350 <main+0x300>)
 800127a:	f005 ffd9 	bl	8007230 <HAL_UART_Receive_DMA>

		  // Toggle built in led
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800127e:	2120      	movs	r1, #32
 8001280:	483b      	ldr	r0, [pc, #236]	; (8001370 <main+0x320>)
 8001282:	f003 fdf6 	bl	8004e72 <HAL_GPIO_TogglePin>
	  }

	  // Enroll values
	  if( delta_a > delta_a_max )
 8001286:	ed97 7a05 	vldr	s14, [r7, #20]
 800128a:	edd7 7a02 	vldr	s15, [r7, #8]
 800128e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001296:	dd02      	ble.n	800129e <main+0x24e>
		  delta_a = delta_a_max;
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e010      	b.n	80012c0 <main+0x270>
	  else
	  if( delta_a < -delta_a_max )
 800129e:	edd7 7a02 	vldr	s15, [r7, #8]
 80012a2:	eef1 7a67 	vneg.f32	s15, s15
 80012a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80012aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b2:	d505      	bpl.n	80012c0 <main+0x270>
		  delta_a = -delta_a_max;
 80012b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012b8:	eef1 7a67 	vneg.f32	s15, s15
 80012bc:	edc7 7a05 	vstr	s15, [r7, #20]

	  if( delta_th > delta_th_max )
 80012c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80012c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d0:	dd02      	ble.n	80012d8 <main+0x288>
		  delta_th = delta_th_max;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	e010      	b.n	80012fa <main+0x2aa>
	  else
	  if( delta_th < -delta_th_max )
 80012d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012dc:	eef1 7a67 	vneg.f32	s15, s15
 80012e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80012e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ec:	d505      	bpl.n	80012fa <main+0x2aa>
		  delta_th = -delta_th_max;
 80012ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f2:	eef1 7a67 	vneg.f32	s15, s15
 80012f6:	edc7 7a04 	vstr	s15, [r7, #16]

	  // Update filters
	  MAF_Update(&hfilter_a,  delta_a);
 80012fa:	ed97 0a05 	vldr	s0, [r7, #20]
 80012fe:	481a      	ldr	r0, [pc, #104]	; (8001368 <main+0x318>)
 8001300:	f002 fafd 	bl	80038fe <MAF_Update>
	  MAF_Update(&hfilter_th, delta_th);
 8001304:	ed97 0a04 	vldr	s0, [r7, #16]
 8001308:	4818      	ldr	r0, [pc, #96]	; (800136c <main+0x31c>)
 800130a:	f002 faf8 	bl	80038fe <MAF_Update>

	  // Get current values
	  delta_a=  __MAF_GET_VAL(&hfilter_a);
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <main+0x318>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	617b      	str	r3, [r7, #20]
	  delta_th= __MAF_GET_VAL(&hfilter_th);
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <main+0x31c>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	613b      	str	r3, [r7, #16]

	  // Make step control
	  if( !stop_flag )
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	f083 0301 	eor.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	f43f aedb 	beq.w	80010de <main+0x8e>
		  DIFFDRIVE_TrackingStep(delta_a, delta_th);
 8001328:	edd7 0a04 	vldr	s1, [r7, #16]
 800132c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001330:	f002 fa46 	bl	80037c0 <DIFFDRIVE_TrackingStep>
	  if( data_received ){
 8001334:	e6d3      	b.n	80010de <main+0x8e>
 8001336:	bf00      	nop
 8001338:	bc6a7efa 	.word	0xbc6a7efa
 800133c:	3f689374 	.word	0x3f689374
 8001340:	9999999a 	.word	0x9999999a
 8001344:	3fd99999 	.word	0x3fd99999
 8001348:	47ae147b 	.word	0x47ae147b
 800134c:	3f747ae1 	.word	0x3f747ae1
 8001350:	2000026c 	.word	0x2000026c
 8001354:	0800102d 	.word	0x0800102d
 8001358:	3b449ba6 	.word	0x3b449ba6
 800135c:	3d23d70a 	.word	0x3d23d70a
 8001360:	200001fc 	.word	0x200001fc
 8001364:	00000000 	.word	0x00000000
 8001368:	20000808 	.word	0x20000808
 800136c:	20000448 	.word	0x20000448
 8001370:	40020000 	.word	0x40020000

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b094      	sub	sp, #80	; 0x50
 8001378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	2234      	movs	r2, #52	; 0x34
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f006 fcac 	bl	8007ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <SystemClock_Config+0xd4>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	4a29      	ldr	r2, [pc, #164]	; (8001448 <SystemClock_Config+0xd4>)
 80013a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a6:	6413      	str	r3, [r2, #64]	; 0x40
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <SystemClock_Config+0xd4>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013b4:	2300      	movs	r3, #0
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <SystemClock_Config+0xd8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013c0:	4a22      	ldr	r2, [pc, #136]	; (800144c <SystemClock_Config+0xd8>)
 80013c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <SystemClock_Config+0xd8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d4:	2302      	movs	r3, #2
 80013d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d8:	2301      	movs	r3, #1
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013dc:	2310      	movs	r3, #16
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e0:	2302      	movs	r3, #2
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e4:	2300      	movs	r3, #0
 80013e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013e8:	2310      	movs	r3, #16
 80013ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013f2:	2304      	movs	r3, #4
 80013f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	4618      	mov	r0, r3
 8001404:	f004 f81c 	bl	8005440 <HAL_RCC_OscConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800140e:	f000 fb99 	bl	8001b44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001412:	230f      	movs	r3, #15
 8001414:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001416:	2302      	movs	r3, #2
 8001418:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001422:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	2102      	movs	r1, #2
 800142e:	4618      	mov	r0, r3
 8001430:	f003 fd3a 	bl	8004ea8 <HAL_RCC_ClockConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800143a:	f000 fb83 	bl	8001b44 <Error_Handler>
  }
}
 800143e:	bf00      	nop
 8001440:	3750      	adds	r7, #80	; 0x50
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40007000 	.word	0x40007000

08001450 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b092      	sub	sp, #72	; 0x48
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001456:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	615a      	str	r2, [r3, #20]
 8001472:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2220      	movs	r2, #32
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f006 fc30 	bl	8007ce0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001480:	4b45      	ldr	r3, [pc, #276]	; (8001598 <MX_TIM1_Init+0x148>)
 8001482:	4a46      	ldr	r2, [pc, #280]	; (800159c <MX_TIM1_Init+0x14c>)
 8001484:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8001486:	4b44      	ldr	r3, [pc, #272]	; (8001598 <MX_TIM1_Init+0x148>)
 8001488:	2208      	movs	r2, #8
 800148a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148c:	4b42      	ldr	r3, [pc, #264]	; (8001598 <MX_TIM1_Init+0x148>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8001492:	4b41      	ldr	r3, [pc, #260]	; (8001598 <MX_TIM1_Init+0x148>)
 8001494:	f242 7210 	movw	r2, #10000	; 0x2710
 8001498:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149a:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <MX_TIM1_Init+0x148>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014a0:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <MX_TIM1_Init+0x148>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <MX_TIM1_Init+0x148>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014ac:	483a      	ldr	r0, [pc, #232]	; (8001598 <MX_TIM1_Init+0x148>)
 80014ae:	f004 fb61 	bl	8005b74 <HAL_TIM_PWM_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80014b8:	f000 fb44 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014c8:	4619      	mov	r1, r3
 80014ca:	4833      	ldr	r0, [pc, #204]	; (8001598 <MX_TIM1_Init+0x148>)
 80014cc:	f005 fc36 	bl	8006d3c <HAL_TIMEx_MasterConfigSynchronization>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80014d6:	f000 fb35 	bl	8001b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014da:	2360      	movs	r3, #96	; 0x60
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014e6:	2300      	movs	r3, #0
 80014e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fa:	2200      	movs	r2, #0
 80014fc:	4619      	mov	r1, r3
 80014fe:	4826      	ldr	r0, [pc, #152]	; (8001598 <MX_TIM1_Init+0x148>)
 8001500:	f004 fec6 	bl	8006290 <HAL_TIM_PWM_ConfigChannel>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800150a:	f000 fb1b 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	2204      	movs	r2, #4
 8001514:	4619      	mov	r1, r3
 8001516:	4820      	ldr	r0, [pc, #128]	; (8001598 <MX_TIM1_Init+0x148>)
 8001518:	f004 feba 	bl	8006290 <HAL_TIM_PWM_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001522:	f000 fb0f 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152a:	2208      	movs	r2, #8
 800152c:	4619      	mov	r1, r3
 800152e:	481a      	ldr	r0, [pc, #104]	; (8001598 <MX_TIM1_Init+0x148>)
 8001530:	f004 feae 	bl	8006290 <HAL_TIM_PWM_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800153a:	f000 fb03 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800153e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001542:	220c      	movs	r2, #12
 8001544:	4619      	mov	r1, r3
 8001546:	4814      	ldr	r0, [pc, #80]	; (8001598 <MX_TIM1_Init+0x148>)
 8001548:	f004 fea2 	bl	8006290 <HAL_TIM_PWM_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001552:	f000 faf7 	bl	8001b44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800156a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4619      	mov	r1, r3
 8001578:	4807      	ldr	r0, [pc, #28]	; (8001598 <MX_TIM1_Init+0x148>)
 800157a:	f005 fc5b 	bl	8006e34 <HAL_TIMEx_ConfigBreakDeadTime>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001584:	f000 fade 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001588:	4803      	ldr	r0, [pc, #12]	; (8001598 <MX_TIM1_Init+0x148>)
 800158a:	f000 fbcf 	bl	8001d2c <HAL_TIM_MspPostInit>

}
 800158e:	bf00      	nop
 8001590:	3748      	adds	r7, #72	; 0x48
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000460 	.word	0x20000460
 800159c:	40010000 	.word	0x40010000

080015a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	2224      	movs	r2, #36	; 0x24
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f006 fb96 	bl	8007ce0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015bc:	4b21      	ldr	r3, [pc, #132]	; (8001644 <MX_TIM2_Init+0xa4>)
 80015be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_TIM2_Init+0xa4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_TIM2_Init+0xa4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MX_TIM2_Init+0xa4>)
 80015d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_TIM2_Init+0xa4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_TIM2_Init+0xa4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015ec:	2301      	movs	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80015f4:	230f      	movs	r3, #15
 80015f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015fc:	2301      	movs	r3, #1
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001604:	230f      	movs	r3, #15
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	4619      	mov	r1, r3
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <MX_TIM2_Init+0xa4>)
 8001610:	f004 fbd4 	bl	8005dbc <HAL_TIM_Encoder_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800161a:	f000 fa93 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	4619      	mov	r1, r3
 800162a:	4806      	ldr	r0, [pc, #24]	; (8001644 <MX_TIM2_Init+0xa4>)
 800162c:	f005 fb86 	bl	8006d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001636:	f000 fa85 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	3730      	adds	r7, #48	; 0x30
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000514 	.word	0x20000514

08001648 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <MX_TIM3_Init+0x94>)
 8001666:	4a1e      	ldr	r2, [pc, #120]	; (80016e0 <MX_TIM3_Init+0x98>)
 8001668:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <MX_TIM3_Init+0x94>)
 800166c:	f240 3247 	movw	r2, #839	; 0x347
 8001670:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <MX_TIM3_Init+0x94>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <MX_TIM3_Init+0x94>)
 800167a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800167e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <MX_TIM3_Init+0x94>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <MX_TIM3_Init+0x94>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800168c:	4813      	ldr	r0, [pc, #76]	; (80016dc <MX_TIM3_Init+0x94>)
 800168e:	f004 f975 	bl	800597c <HAL_TIM_Base_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001698:	f000 fa54 	bl	8001b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	4619      	mov	r1, r3
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <MX_TIM3_Init+0x94>)
 80016aa:	f004 feb3 	bl	8006414 <HAL_TIM_ConfigClockSource>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016b4:	f000 fa46 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_TIM3_Init+0x94>)
 80016c6:	f005 fb39 	bl	8006d3c <HAL_TIMEx_MasterConfigSynchronization>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80016d0:	f000 fa38 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000394 	.word	0x20000394
 80016e0:	40000400 	.word	0x40000400

080016e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	; 0x30
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	2224      	movs	r2, #36	; 0x24
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f006 faf4 	bl	8007ce0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001700:	4b20      	ldr	r3, [pc, #128]	; (8001784 <MX_TIM5_Init+0xa0>)
 8001702:	4a21      	ldr	r2, [pc, #132]	; (8001788 <MX_TIM5_Init+0xa4>)
 8001704:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001706:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <MX_TIM5_Init+0xa0>)
 8001708:	2200      	movs	r2, #0
 800170a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <MX_TIM5_Init+0xa0>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <MX_TIM5_Init+0xa0>)
 8001714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001718:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_TIM5_Init+0xa0>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_TIM5_Init+0xa0>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001726:	2301      	movs	r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800172e:	2301      	movs	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001736:	230f      	movs	r3, #15
 8001738:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800173e:	2301      	movs	r3, #1
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001742:	2300      	movs	r3, #0
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001746:	230f      	movs	r3, #15
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	4619      	mov	r1, r3
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <MX_TIM5_Init+0xa0>)
 8001752:	f004 fb33 	bl	8005dbc <HAL_TIM_Encoder_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800175c:	f000 f9f2 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_TIM5_Init+0xa0>)
 800176e:	f005 fae5 	bl	8006d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001778:	f000 f9e4 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	3730      	adds	r7, #48	; 0x30
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200002e0 	.word	0x200002e0
 8001788:	40000c00 	.word	0x40000c00

0800178c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <MX_USART3_UART_Init+0x50>)
 8001794:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 8001798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800179c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_USART3_UART_Init+0x4c>)
 80017c4:	f005 fba6 	bl	8006f14 <HAL_UART_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017ce:	f000 f9b9 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000026c 	.word	0x2000026c
 80017dc:	40004800 	.word	0x40004800

080017e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_DMA_Init+0x3c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a0b      	ldr	r2, [pc, #44]	; (800181c <MX_DMA_Init+0x3c>)
 80017f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_DMA_Init+0x3c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	200c      	movs	r0, #12
 8001808:	f002 fddf 	bl	80043ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800180c:	200c      	movs	r0, #12
 800180e:	f002 fdf8 	bl	8004402 <HAL_NVIC_EnableIRQ>

}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800

08001820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <MX_GPIO_Init+0x114>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a3d      	ldr	r2, [pc, #244]	; (8001934 <MX_GPIO_Init+0x114>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <MX_GPIO_Init+0x114>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b37      	ldr	r3, [pc, #220]	; (8001934 <MX_GPIO_Init+0x114>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a36      	ldr	r2, [pc, #216]	; (8001934 <MX_GPIO_Init+0x114>)
 800185c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b34      	ldr	r3, [pc, #208]	; (8001934 <MX_GPIO_Init+0x114>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b30      	ldr	r3, [pc, #192]	; (8001934 <MX_GPIO_Init+0x114>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a2f      	ldr	r2, [pc, #188]	; (8001934 <MX_GPIO_Init+0x114>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <MX_GPIO_Init+0x114>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	4b29      	ldr	r3, [pc, #164]	; (8001934 <MX_GPIO_Init+0x114>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a28      	ldr	r2, [pc, #160]	; (8001934 <MX_GPIO_Init+0x114>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b26      	ldr	r3, [pc, #152]	; (8001934 <MX_GPIO_Init+0x114>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SUPPLY_ENABLE_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2130      	movs	r1, #48	; 0x30
 80018aa:	4823      	ldr	r0, [pc, #140]	; (8001938 <MX_GPIO_Init+0x118>)
 80018ac:	f003 fac8 	bl	8004e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	481d      	ldr	r0, [pc, #116]	; (800193c <MX_GPIO_Init+0x11c>)
 80018c8:	f003 f926 	bl	8004b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018cc:	230c      	movs	r3, #12
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018dc:	2307      	movs	r3, #7
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	4814      	ldr	r0, [pc, #80]	; (8001938 <MX_GPIO_Init+0x118>)
 80018e8:	f003 f916 	bl	8004b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SUPPLY_ENABLE_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SUPPLY_ENABLE_Pin|LD2_Pin;
 80018ec:	2330      	movs	r3, #48	; 0x30
 80018ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	480d      	ldr	r0, [pc, #52]	; (8001938 <MX_GPIO_Init+0x118>)
 8001904:	f003 f908 	bl	8004b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800190c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800191a:	2308      	movs	r3, #8
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <MX_GPIO_Init+0x118>)
 8001926:	f003 f8f7 	bl	8004b18 <HAL_GPIO_Init>

}
 800192a:	bf00      	nop
 800192c:	3728      	adds	r7, #40	; 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000
 800193c:	40020800 	.word	0x40020800

08001940 <MAIN_DIFFDRIVE_Init>:

/* USER CODE BEGIN 4 */

static void MAIN_DIFFDRIVE_Init(void){
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0

	float Ts= 0.01;
 8001946:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <MAIN_DIFFDRIVE_Init+0x164>)
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
	int max_sample= 1400;
 800194a:	f44f 63af 	mov.w	r3, #1400	; 0x578
 800194e:	623b      	str	r3, [r7, #32]

	hdiffdrive.Init.timing_htim= &htim3;
 8001950:	4b55      	ldr	r3, [pc, #340]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001952:	4a56      	ldr	r2, [pc, #344]	; (8001aac <MAIN_DIFFDRIVE_Init+0x16c>)
 8001954:	649a      	str	r2, [r3, #72]	; 0x48
	hdiffdrive.Init.timing_time_step= Ts;
 8001956:	4a54      	ldr	r2, [pc, #336]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	64d3      	str	r3, [r2, #76]	; 0x4c

	hdiffdrive.Init.encoder_htim[left ]= &htim2;
 800195c:	4b52      	ldr	r3, [pc, #328]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 800195e:	4a54      	ldr	r2, [pc, #336]	; (8001ab0 <MAIN_DIFFDRIVE_Init+0x170>)
 8001960:	639a      	str	r2, [r3, #56]	; 0x38
	hdiffdrive.Init.encoder_htim[right]= &htim5;
 8001962:	4b51      	ldr	r3, [pc, #324]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001964:	4a53      	ldr	r2, [pc, #332]	; (8001ab4 <MAIN_DIFFDRIVE_Init+0x174>)
 8001966:	63da      	str	r2, [r3, #60]	; 0x3c
	hdiffdrive.Init.encoder_channel[left ]= TIM_CHANNEL_1;
 8001968:	4b4f      	ldr	r3, [pc, #316]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 800196a:	2200      	movs	r2, #0
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
	hdiffdrive.Init.encoder_channel[right]= TIM_CHANNEL_1;
 800196e:	4b4e      	ldr	r3, [pc, #312]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001970:	2200      	movs	r2, #0
 8001972:	645a      	str	r2, [r3, #68]	; 0x44

	hdiffdrive.Init.encoder_resolution[left ]= 1900; //1920; // Number of step each wheel revolution
 8001974:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001976:	4a50      	ldr	r2, [pc, #320]	; (8001ab8 <MAIN_DIFFDRIVE_Init+0x178>)
 8001978:	65da      	str	r2, [r3, #92]	; 0x5c
	hdiffdrive.Init.encoder_resolution[right]= 1900; //1920;
 800197a:	4b4b      	ldr	r3, [pc, #300]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 800197c:	4a4e      	ldr	r2, [pc, #312]	; (8001ab8 <MAIN_DIFFDRIVE_Init+0x178>)
 800197e:	661a      	str	r2, [r3, #96]	; 0x60

	hdiffdrive.Init.motor_htim[left ][forward ]= &htim1;
 8001980:	4b49      	ldr	r3, [pc, #292]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001982:	4a4e      	ldr	r2, [pc, #312]	; (8001abc <MAIN_DIFFDRIVE_Init+0x17c>)
 8001984:	601a      	str	r2, [r3, #0]
	hdiffdrive.Init.motor_htim[left ][backward]= &htim1;
 8001986:	4b48      	ldr	r3, [pc, #288]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001988:	4a4c      	ldr	r2, [pc, #304]	; (8001abc <MAIN_DIFFDRIVE_Init+0x17c>)
 800198a:	605a      	str	r2, [r3, #4]
	hdiffdrive.Init.motor_htim[right][forward ]= &htim1;
 800198c:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 800198e:	4a4b      	ldr	r2, [pc, #300]	; (8001abc <MAIN_DIFFDRIVE_Init+0x17c>)
 8001990:	609a      	str	r2, [r3, #8]
	hdiffdrive.Init.motor_htim[right][backward]= &htim1;
 8001992:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001994:	4a49      	ldr	r2, [pc, #292]	; (8001abc <MAIN_DIFFDRIVE_Init+0x17c>)
 8001996:	60da      	str	r2, [r3, #12]

	hdiffdrive.Init.motor_pwm_channel[left ][forward ]= TIM_CHANNEL_1;
 8001998:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
	hdiffdrive.Init.motor_pwm_channel[left ][backward]= TIM_CHANNEL_2;
 800199e:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 80019a0:	2204      	movs	r2, #4
 80019a2:	615a      	str	r2, [r3, #20]
	hdiffdrive.Init.motor_pwm_channel[right][forward ]= TIM_CHANNEL_3;
 80019a4:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 80019a6:	2208      	movs	r2, #8
 80019a8:	619a      	str	r2, [r3, #24]
	hdiffdrive.Init.motor_pwm_channel[right][backward]= TIM_CHANNEL_4;
 80019aa:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 80019ac:	220c      	movs	r2, #12
 80019ae:	61da      	str	r2, [r3, #28]

	hdiffdrive.Init.motor_max_voltage[left ]= 	  MOTOR_MAX_VOLTAGE;
 80019b0:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 80019b2:	4a43      	ldr	r2, [pc, #268]	; (8001ac0 <MAIN_DIFFDRIVE_Init+0x180>)
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
	hdiffdrive.Init.motor_max_voltage[right]= 	  MOTOR_MAX_VOLTAGE;
 80019b6:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 80019b8:	4a41      	ldr	r2, [pc, #260]	; (8001ac0 <MAIN_DIFFDRIVE_Init+0x180>)
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c
	hdiffdrive.Init.motor_min_voltage[left ]= 	  MOTOR_MIN_VOLTAGE;
 80019bc:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 80019be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
	hdiffdrive.Init.motor_min_voltage[right]= 	  MOTOR_MIN_VOLTAGE;
 80019c4:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 80019c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019ca:	635a      	str	r2, [r3, #52]	; 0x34
	hdiffdrive.Init.motor_supply_voltage[left]=   SUPPLY_VOLTAGE;
 80019cc:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 80019ce:	4a3c      	ldr	r2, [pc, #240]	; (8001ac0 <MAIN_DIFFDRIVE_Init+0x180>)
 80019d0:	621a      	str	r2, [r3, #32]
	hdiffdrive.Init.motor_supply_voltage[right]=  SUPPLY_VOLTAGE;
 80019d2:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 80019d4:	4a3a      	ldr	r2, [pc, #232]	; (8001ac0 <MAIN_DIFFDRIVE_Init+0x180>)
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24

	hdiffdrive.Init.control_fdfrwrd_arma_AR[left ]= AR_L;
 80019d8:	4a3a      	ldr	r2, [pc, #232]	; (8001ac4 <MAIN_DIFFDRIVE_Init+0x184>)
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	ca07      	ldmia	r2, {r0, r1, r2}
 80019e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019e4:	4a30      	ldr	r2, [pc, #192]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	6713      	str	r3, [r2, #112]	; 0x70
	hdiffdrive.Init.control_fdfrwrd_arma_AR[right]= AR_R;
 80019ec:	4a36      	ldr	r2, [pc, #216]	; (8001ac8 <MAIN_DIFFDRIVE_Init+0x188>)
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80019f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019f8:	4a2b      	ldr	r2, [pc, #172]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 80019fa:	f107 0308 	add.w	r3, r7, #8
 80019fe:	6753      	str	r3, [r2, #116]	; 0x74
	hdiffdrive.Init.control_fdfrwrd_arma_MA[left ]= MA_L;
 8001a00:	4b32      	ldr	r3, [pc, #200]	; (8001acc <MAIN_DIFFDRIVE_Init+0x18c>)
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	4a28      	ldr	r2, [pc, #160]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	6793      	str	r3, [r2, #120]	; 0x78
	hdiffdrive.Init.control_fdfrwrd_arma_MA[right]= MA_R;
 8001a0a:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <MAIN_DIFFDRIVE_Init+0x190>)
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a10:	463b      	mov	r3, r7
 8001a12:	67d3      	str	r3, [r2, #124]	; 0x7c
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[left ]= N_AR_L;
 8001a14:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a16:	2203      	movs	r2, #3
 8001a18:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[right]= N_AR_R;
 8001a1c:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a1e:	2203      	movs	r2, #3
 8001a20:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[left ]= N_MA_L;
 8001a24:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[right]= N_MA_R;
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	hdiffdrive.Init.control_fdfrwrd_arma_tau[left ]= TAU_L;
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a36:	2202      	movs	r2, #2
 8001a38:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	hdiffdrive.Init.control_fdfrwrd_arma_tau[right]= TAU_R;
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	hdiffdrive.Init.control_pid_P[left ]= 33.3;
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a46:	4a23      	ldr	r2, [pc, #140]	; (8001ad4 <MAIN_DIFFDRIVE_Init+0x194>)
 8001a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	hdiffdrive.Init.control_pid_P[right]= 33.3;
 8001a4c:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a4e:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <MAIN_DIFFDRIVE_Init+0x194>)
 8001a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	hdiffdrive.Init.control_pid_I[left ]= 7.6;
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a56:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <MAIN_DIFFDRIVE_Init+0x198>)
 8001a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	hdiffdrive.Init.control_pid_I[right]= 7.6;
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a5e:	4a1e      	ldr	r2, [pc, #120]	; (8001ad8 <MAIN_DIFFDRIVE_Init+0x198>)
 8001a60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	hdiffdrive.Init.control_pid_D[left ]= 0;
 8001a64:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	hdiffdrive.Init.control_pid_D[right]= 0;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	hdiffdrive.Init.history_max_sample= max_sample;
 8001a78:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	hdiffdrive.Init.mech_prmtr_l=               0.155/2;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a82:	4a16      	ldr	r2, [pc, #88]	; (8001adc <MAIN_DIFFDRIVE_Init+0x19c>)
 8001a84:	655a      	str	r2, [r3, #84]	; 0x54
	hdiffdrive.Init.mech_prmtr_r=               0.069/2;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a88:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <MAIN_DIFFDRIVE_Init+0x1a0>)
 8001a8a:	651a      	str	r2, [r3, #80]	; 0x50
	hdiffdrive.Init.mech_prmtr_max_wheel_speed= 16;      // 16 rad/s, from DC motor specifics
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a8e:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8001a92:	659a      	str	r2, [r3, #88]	; 0x58


	DIFFDRIVE_Init(&hdiffdrive);
 8001a94:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <MAIN_DIFFDRIVE_Init+0x168>)
 8001a96:	f000 fab7 	bl	8002008 <DIFFDRIVE_Init>

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	; 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	3c23d70a 	.word	0x3c23d70a
 8001aa8:	200005c8 	.word	0x200005c8
 8001aac:	20000394 	.word	0x20000394
 8001ab0:	20000514 	.word	0x20000514
 8001ab4:	200002e0 	.word	0x200002e0
 8001ab8:	44ed8000 	.word	0x44ed8000
 8001abc:	20000460 	.word	0x20000460
 8001ac0:	40f00000 	.word	0x40f00000
 8001ac4:	0800d670 	.word	0x0800d670
 8001ac8:	0800d67c 	.word	0x0800d67c
 8001acc:	3a486a06 	.word	0x3a486a06
 8001ad0:	3a4330b9 	.word	0x3a4330b9
 8001ad4:	42053333 	.word	0x42053333
 8001ad8:	40f33333 	.word	0x40f33333
 8001adc:	3d9eb852 	.word	0x3d9eb852
 8001ae0:	3d0d4fdf 	.word	0x3d0d4fdf

08001ae4 <MAIN_MAF_Init>:

// Moving Average Filter initialization --------------------------------------------- //
static void MAIN_MAF_Init(void){
 8001ae4:	b5b0      	push	{r4, r5, r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0

	int filtr_a_size=  15;
 8001aea:	230f      	movs	r3, #15
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
	int filtr_th_size= 4;
 8001aee:	2304      	movs	r3, #4
 8001af0:	623b      	str	r3, [r7, #32]

	// Null pointer to use a MAF without weights
	void* weights_buff= NULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]

	// Creating filters
	hfilter_a  = MAF_Create(filtr_a_size,  weights_buff);
 8001af6:	4c11      	ldr	r4, [pc, #68]	; (8001b3c <MAIN_MAF_Init+0x58>)
 8001af8:	463b      	mov	r3, r7
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001afe:	4618      	mov	r0, r3
 8001b00:	f001 feae 	bl	8003860 <MAF_Create>
 8001b04:	4625      	mov	r5, r4
 8001b06:	463c      	mov	r4, r7
 8001b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b10:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_th = MAF_Create(filtr_th_size, weights_buff);
 8001b14:	4c0a      	ldr	r4, [pc, #40]	; (8001b40 <MAIN_MAF_Init+0x5c>)
 8001b16:	463b      	mov	r3, r7
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	6a39      	ldr	r1, [r7, #32]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 fe9f 	bl	8003860 <MAF_Create>
 8001b22:	4625      	mov	r5, r4
 8001b24:	463c      	mov	r4, r7
 8001b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b2e:	e885 0003 	stmia.w	r5, {r0, r1}

}
 8001b32:	bf00      	nop
 8001b34:	3728      	adds	r7, #40	; 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000808 	.word	0x20000808
 8001b40:	20000448 	.word	0x20000448

08001b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <Error_Handler+0x8>
	...

08001b50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_MspInit+0x4c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <HAL_MspInit+0x4c>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_MspInit+0x4c>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	4a08      	ldr	r2, [pc, #32]	; (8001b9c <HAL_MspInit+0x4c>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	; 0x40
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_MspInit+0x4c>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <HAL_TIM_PWM_MspInit+0x3c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d10d      	bne.n	8001bce <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_TIM_PWM_MspInit+0x40>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <HAL_TIM_PWM_MspInit+0x40>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <HAL_TIM_PWM_MspInit+0x40>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40010000 	.word	0x40010000
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	; 0x30
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c04:	d12d      	bne.n	8001c62 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	4a2f      	ldr	r2, [pc, #188]	; (8001ccc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
 8001c16:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a28      	ldr	r2, [pc, #160]	; (8001ccc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 8001c3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c50:	2301      	movs	r3, #1
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	481d      	ldr	r0, [pc, #116]	; (8001cd0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001c5c:	f002 ff5c 	bl	8004b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c60:	e030      	b.n	8001cc4 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a1b      	ldr	r2, [pc, #108]	; (8001cd4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d12b      	bne.n	8001cc4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	4a15      	ldr	r2, [pc, #84]	; (8001ccc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c76:	f043 0308 	orr.w	r3, r3, #8
 8001c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6313      	str	r3, [r2, #48]	; 0x30
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_RIGHT_B_Pin|ENCODER_RIGHT_A_Pin;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4806      	ldr	r0, [pc, #24]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001cc0:	f002 ff2a 	bl	8004b18 <HAL_GPIO_Init>
}
 8001cc4:	bf00      	nop
 8001cc6:	3730      	adds	r7, #48	; 0x30
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40000c00 	.word	0x40000c00
 8001cd8:	40020000 	.word	0x40020000

08001cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0e      	ldr	r2, [pc, #56]	; (8001d24 <HAL_TIM_Base_MspInit+0x48>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d115      	bne.n	8001d1a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <HAL_TIM_Base_MspInit+0x4c>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <HAL_TIM_Base_MspInit+0x4c>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_TIM_Base_MspInit+0x4c>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	201d      	movs	r0, #29
 8001d10:	f002 fb5b 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d14:	201d      	movs	r0, #29
 8001d16:	f002 fb74 	bl	8004402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40000400 	.word	0x40000400
 8001d28:	40023800 	.word	0x40023800

08001d2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <HAL_TIM_MspPostInit+0x68>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d11e      	bne.n	8001d8c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_TIM_MspPostInit+0x6c>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a10      	ldr	r2, [pc, #64]	; (8001d98 <HAL_TIM_MspPostInit+0x6c>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <HAL_TIM_MspPostInit+0x6c>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_FORWARD_Pin|LEFT_MOTOR_BACKWARD_Pin|RIGHT_MOTOR_FORWARD_Pin|RIGHT_MOTOR_BACKWARD_Pin;
 8001d6a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001d6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	4619      	mov	r1, r3
 8001d86:	4805      	ldr	r0, [pc, #20]	; (8001d9c <HAL_TIM_MspPostInit+0x70>)
 8001d88:	f002 fec6 	bl	8004b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d8c:	bf00      	nop
 8001d8e:	3720      	adds	r7, #32
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40010000 	.word	0x40010000
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020000 	.word	0x40020000

08001da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	; 0x28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a40      	ldr	r2, [pc, #256]	; (8001ec0 <HAL_UART_MspInit+0x120>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d179      	bne.n	8001eb6 <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <HAL_UART_MspInit+0x124>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a3e      	ldr	r2, [pc, #248]	; (8001ec4 <HAL_UART_MspInit+0x124>)
 8001dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd2:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <HAL_UART_MspInit+0x124>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <HAL_UART_MspInit+0x124>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a37      	ldr	r2, [pc, #220]	; (8001ec4 <HAL_UART_MspInit+0x124>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <HAL_UART_MspInit+0x124>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <HAL_UART_MspInit+0x124>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a30      	ldr	r2, [pc, #192]	; (8001ec4 <HAL_UART_MspInit+0x124>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <HAL_UART_MspInit+0x124>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e16:	2320      	movs	r3, #32
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e26:	2307      	movs	r3, #7
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4825      	ldr	r0, [pc, #148]	; (8001ec8 <HAL_UART_MspInit+0x128>)
 8001e32:	f002 fe71 	bl	8004b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e48:	2307      	movs	r3, #7
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	481e      	ldr	r0, [pc, #120]	; (8001ecc <HAL_UART_MspInit+0x12c>)
 8001e54:	f002 fe60 	bl	8004b18 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_UART_MspInit+0x130>)
 8001e5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <HAL_UART_MspInit+0x134>)
 8001e5c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <HAL_UART_MspInit+0x130>)
 8001e60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e64:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e66:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <HAL_UART_MspInit+0x130>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_UART_MspInit+0x130>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_UART_MspInit+0x130>)
 8001e74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e78:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_UART_MspInit+0x130>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_UART_MspInit+0x130>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_UART_MspInit+0x130>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_UART_MspInit+0x130>)
 8001e8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e92:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_UART_MspInit+0x130>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001e9a:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <HAL_UART_MspInit+0x130>)
 8001e9c:	f002 facc 	bl	8004438 <HAL_DMA_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8001ea6:	f7ff fe4d 	bl	8001b44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <HAL_UART_MspInit+0x130>)
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38
 8001eb0:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <HAL_UART_MspInit+0x130>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40004800 	.word	0x40004800
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	2000020c 	.word	0x2000020c
 8001ed4:	40026028 	.word	0x40026028

08001ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <NMI_Handler+0x4>

08001ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <HardFault_Handler+0x4>

08001ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <MemManage_Handler+0x4>

08001eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eee:	e7fe      	b.n	8001eee <BusFault_Handler+0x4>

08001ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <UsageFault_Handler+0x4>

08001ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f24:	f002 f932 	bl	800418c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <DMA1_Stream1_IRQHandler+0x10>)
 8001f32:	f002 fb87 	bl	8004644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2000020c 	.word	0x2000020c

08001f40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <TIM3_IRQHandler+0x10>)
 8001f46:	f004 f87b 	bl	8006040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000394 	.word	0x20000394

08001f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <_sbrk+0x5c>)
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <_sbrk+0x60>)
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <_sbrk+0x64>)
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <_sbrk+0x68>)
 8001f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <_sbrk+0x64>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d207      	bcs.n	8001f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f84:	f005 fe7a 	bl	8007c7c <__errno>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f92:	e009      	b.n	8001fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9a:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <_sbrk+0x64>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <_sbrk+0x64>)
 8001fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20020000 	.word	0x20020000
 8001fb4:	00000400 	.word	0x00000400
 8001fb8:	20000200 	.word	0x20000200
 8001fbc:	20000840 	.word	0x20000840

08001fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <SystemInit+0x20>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fca:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <SystemInit+0x20>)
 8001fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <DATASTREAM_Init>:
// Global handle
UART_HandleTypeDef* huart;


// Setting up streaming
void DATASTREAM_Init(UART_HandleTypeDef *huart_init){
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

	// Local UART handle
	huart= huart_init;
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <DATASTREAM_Init+0x1c>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]

}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000820 	.word	0x20000820
 8002004:	00000000 	.word	0x00000000

08002008 <DIFFDRIVE_Init>:


/* Functions Implementation */

// Initialization
void DIFFDRIVE_Init(DIFFDRIVE_HandleTypeDef* init_hdiffdrv){
 8002008:	b5b0      	push	{r4, r5, r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

	// Initializing global handle
	hdiffdrv= init_hdiffdrv;
 8002010:	4aa0      	ldr	r2, [pc, #640]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6013      	str	r3, [r2, #0]

	// Assigning control struct
	DIFFDRIVE_CONTROL_TypeDef *hctrl= hdiffdrv->control;
 8002016:	4b9f      	ldr	r3, [pc, #636]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800201e:	623b      	str	r3, [r7, #32]

	// Initializing handle structure values from Init field
	hdiffdrv->timing.htim=       		   hdiffdrv->Init.timing_htim;
 8002020:	4b9c      	ldr	r3, [pc, #624]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b9b      	ldr	r3, [pc, #620]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800202a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	hdiffdrv->timing.time_step=   		   hdiffdrv->Init.timing_time_step;
 800202e:	4b99      	ldr	r3, [pc, #612]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4b98      	ldr	r3, [pc, #608]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002038:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	hdiffdrv->mech_prmtr.r=     		   hdiffdrv->Init.mech_prmtr_r;
 800203c:	4b95      	ldr	r3, [pc, #596]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b94      	ldr	r3, [pc, #592]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002046:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	hdiffdrv->mech_prmtr.l=    			   hdiffdrv->Init.mech_prmtr_l;
 800204a:	4b92      	ldr	r3, [pc, #584]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	4b91      	ldr	r3, [pc, #580]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002054:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	hdiffdrv->mech_prmtr.max_wheel_speed=  hdiffdrv->Init.mech_prmtr_max_wheel_speed;
 8002058:	4b8e      	ldr	r3, [pc, #568]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b8d      	ldr	r3, [pc, #564]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002062:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002066:	2300      	movs	r3, #0
 8002068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800206c:	e201      	b.n	8002472 <DIFFDRIVE_Init+0x46a>

		// Initializing feedforward Control handle structure values from Init field
		hctrl[side].fdfrwrd.Init.arma_n_ar=  hdiffdrv->Init.control_fdfrwrd_arma_n_ar[side];
 800206e:	4b89      	ldr	r3, [pc, #548]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 8002070:	6819      	ldr	r1, [r3, #0]
 8002072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002076:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800207a:	2068      	movs	r0, #104	; 0x68
 800207c:	fb00 f202 	mul.w	r2, r0, r2
 8002080:	6a38      	ldr	r0, [r7, #32]
 8002082:	4402      	add	r2, r0
 8002084:	3330      	adds	r3, #48	; 0x30
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	440b      	add	r3, r1
 800208a:	889b      	ldrh	r3, [r3, #4]
 800208c:	8013      	strh	r3, [r2, #0]
		hctrl[side].fdfrwrd.Init.arma_n_ma=  hdiffdrv->Init.control_fdfrwrd_arma_n_ma[side];
 800208e:	4b81      	ldr	r3, [pc, #516]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800209a:	2068      	movs	r0, #104	; 0x68
 800209c:	fb00 f303 	mul.w	r3, r0, r3
 80020a0:	6a38      	ldr	r0, [r7, #32]
 80020a2:	4403      	add	r3, r0
 80020a4:	3134      	adds	r1, #52	; 0x34
 80020a6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80020aa:	805a      	strh	r2, [r3, #2]
		hctrl[side].fdfrwrd.Init.arma_AR=    hdiffdrv->Init.control_fdfrwrd_arma_AR[side];
 80020ac:	4b79      	ldr	r3, [pc, #484]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80020b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020b8:	2068      	movs	r0, #104	; 0x68
 80020ba:	fb00 f303 	mul.w	r3, r0, r3
 80020be:	6a38      	ldr	r0, [r7, #32]
 80020c0:	4403      	add	r3, r0
 80020c2:	311c      	adds	r1, #28
 80020c4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80020c8:	609a      	str	r2, [r3, #8]
		hctrl[side].fdfrwrd.Init.arma_MA=    hdiffdrv->Init.control_fdfrwrd_arma_MA[side];
 80020ca:	4b72      	ldr	r3, [pc, #456]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80020d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020d6:	2068      	movs	r0, #104	; 0x68
 80020d8:	fb00 f303 	mul.w	r3, r0, r3
 80020dc:	6a38      	ldr	r0, [r7, #32]
 80020de:	4403      	add	r3, r0
 80020e0:	311e      	adds	r1, #30
 80020e2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80020e6:	60da      	str	r2, [r3, #12]
		hctrl[side].fdfrwrd.Init.arma_tau=   hdiffdrv->Init.control_fdfrwrd_arma_tau[side];
 80020e8:	4b6a      	ldr	r3, [pc, #424]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 80020ea:	6819      	ldr	r1, [r3, #0]
 80020ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80020f4:	2068      	movs	r0, #104	; 0x68
 80020f6:	fb00 f202 	mul.w	r2, r0, r2
 80020fa:	6a38      	ldr	r0, [r7, #32]
 80020fc:	4402      	add	r2, r0
 80020fe:	3334      	adds	r3, #52	; 0x34
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	440b      	add	r3, r1
 8002104:	889b      	ldrh	r3, [r3, #4]
 8002106:	8093      	strh	r3, [r2, #4]

		// Init feedforward struct
		FEEDFORWARD_Init(&hctrl[side].fdfrwrd);
 8002108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800210c:	2268      	movs	r2, #104	; 0x68
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	6a3a      	ldr	r2, [r7, #32]
 8002114:	4413      	add	r3, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f001 fc7c 	bl	8003a14 <FEEDFORWARD_Init>

		// Initializing pid Control handle structure values from Init field
		hctrl[side].pid.Init.P=  hdiffdrv->Init.control_pid_P[side];
 800211c:	4b5d      	ldr	r3, [pc, #372]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 800211e:	6819      	ldr	r1, [r3, #0]
 8002120:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002128:	2068      	movs	r0, #104	; 0x68
 800212a:	fb00 f303 	mul.w	r3, r0, r3
 800212e:	6a38      	ldr	r0, [r7, #32]
 8002130:	4403      	add	r3, r0
 8002132:	3220      	adds	r2, #32
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	440a      	add	r2, r1
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	635a      	str	r2, [r3, #52]	; 0x34
		hctrl[side].pid.Init.I=  hdiffdrv->Init.control_pid_I[side];
 800213c:	4b55      	ldr	r3, [pc, #340]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 800213e:	6819      	ldr	r1, [r3, #0]
 8002140:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002148:	2068      	movs	r0, #104	; 0x68
 800214a:	fb00 f303 	mul.w	r3, r0, r3
 800214e:	6a38      	ldr	r0, [r7, #32]
 8002150:	4403      	add	r3, r0
 8002152:	3222      	adds	r2, #34	; 0x22
 8002154:	0092      	lsls	r2, r2, #2
 8002156:	440a      	add	r2, r1
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	639a      	str	r2, [r3, #56]	; 0x38
		hctrl[side].pid.Init.D=  hdiffdrv->Init.control_pid_D[side];
 800215c:	4b4d      	ldr	r3, [pc, #308]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 800215e:	6819      	ldr	r1, [r3, #0]
 8002160:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002168:	2068      	movs	r0, #104	; 0x68
 800216a:	fb00 f303 	mul.w	r3, r0, r3
 800216e:	6a38      	ldr	r0, [r7, #32]
 8002170:	4403      	add	r3, r0
 8002172:	3224      	adds	r2, #36	; 0x24
 8002174:	0092      	lsls	r2, r2, #2
 8002176:	440a      	add	r2, r1
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	63da      	str	r2, [r3, #60]	; 0x3c
		hctrl[side].pid.Init.Ts= hdiffdrv->timing.time_step;
 800217c:	4b45      	ldr	r3, [pc, #276]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002184:	2168      	movs	r1, #104	; 0x68
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	6a39      	ldr	r1, [r7, #32]
 800218c:	440b      	add	r3, r1
 800218e:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8002192:	641a      	str	r2, [r3, #64]	; 0x40

		// Init feedforward struct
		PID_Init(&hctrl[side].pid);
 8002194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002198:	2268      	movs	r2, #104	; 0x68
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	6a3a      	ldr	r2, [r7, #32]
 80021a0:	4413      	add	r3, r2
 80021a2:	3334      	adds	r3, #52	; 0x34
 80021a4:	4618      	mov	r0, r3
 80021a6:	f001 fe16 	bl	8003dd6 <PID_Init>

		// Sensors
		hdiffdrv->encoder[side].htim=       hdiffdrv->Init.encoder_htim[side];
 80021aa:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80021b2:	4a38      	ldr	r2, [pc, #224]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 80021b4:	6810      	ldr	r0, [r2, #0]
 80021b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80021ba:	310e      	adds	r1, #14
 80021bc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4403      	add	r3, r0
 80021ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80021ce:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].channel=    hdiffdrv->Init.encoder_channel[side];
 80021d0:	4b30      	ldr	r3, [pc, #192]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80021d8:	4a2e      	ldr	r2, [pc, #184]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 80021da:	6810      	ldr	r0, [r2, #0]
 80021dc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80021e0:	3110      	adds	r1, #16
 80021e2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4403      	add	r3, r0
 80021f0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80021f4:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].resolution= hdiffdrv->Init.encoder_resolution[side];
 80021f6:	4b27      	ldr	r3, [pc, #156]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 80021f8:	6819      	ldr	r1, [r3, #0]
 80021fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021fe:	4a25      	ldr	r2, [pc, #148]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 8002200:	6810      	ldr	r0, [r2, #0]
 8002202:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002206:	3316      	adds	r3, #22
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	3304      	adds	r3, #4
 800220e:	6819      	ldr	r1, [r3, #0]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4403      	add	r3, r0
 800221a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800221e:	6019      	str	r1, [r3, #0]

		// Motors
		hdiffdrv->motor[side].supply_voltage= hdiffdrv->Init.motor_supply_voltage[side];
 8002220:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 800222a:	6819      	ldr	r1, [r3, #0]
 800222c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002230:	3208      	adds	r2, #8
 8002232:	0092      	lsls	r2, r2, #2
 8002234:	4402      	add	r2, r0
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	202c      	movs	r0, #44	; 0x2c
 800223a:	fb00 f303 	mul.w	r3, r0, r3
 800223e:	440b      	add	r3, r1
 8002240:	33b8      	adds	r3, #184	; 0xb8
 8002242:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].max_voltage=    hdiffdrv->Init.motor_max_voltage[side];
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 800224e:	6819      	ldr	r1, [r3, #0]
 8002250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002254:	320a      	adds	r2, #10
 8002256:	0092      	lsls	r2, r2, #2
 8002258:	4402      	add	r2, r0
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	202c      	movs	r0, #44	; 0x2c
 800225e:	fb00 f303 	mul.w	r3, r0, r3
 8002262:	440b      	add	r3, r1
 8002264:	33bc      	adds	r3, #188	; 0xbc
 8002266:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].min_voltage=    hdiffdrv->Init.motor_min_voltage[side];
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <DIFFDRIVE_Init+0x28c>)
 8002272:	6819      	ldr	r1, [r3, #0]
 8002274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002278:	320c      	adds	r2, #12
 800227a:	0092      	lsls	r2, r2, #2
 800227c:	4402      	add	r2, r0
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	202c      	movs	r0, #44	; 0x2c
 8002282:	fb00 f303 	mul.w	r3, r0, r3
 8002286:	440b      	add	r3, r1
 8002288:	33c0      	adds	r3, #192	; 0xc0
 800228a:	601a      	str	r2, [r3, #0]

		// Starting Motor Timer
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 800228c:	2300      	movs	r3, #0
 800228e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002292:	e05d      	b.n	8002350 <DIFFDRIVE_Init+0x348>
 8002294:	20000824 	.word	0x20000824
			hdiffdrv->motor[side].htim[dir]= hdiffdrv->Init.motor_htim[side][dir];
 8002298:	4bbf      	ldr	r3, [pc, #764]	; (8002598 <DIFFDRIVE_Init+0x590>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 80022a0:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 80022a4:	4abc      	ldr	r2, [pc, #752]	; (8002598 <DIFFDRIVE_Init+0x590>)
 80022a6:	6811      	ldr	r1, [r2, #0]
 80022a8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80022ac:	f997 4026 	ldrsb.w	r4, [r7, #38]	; 0x26
 80022b0:	006d      	lsls	r5, r5, #1
 80022b2:	4428      	add	r0, r5
 80022b4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	4423      	add	r3, r4
 80022c4:	332a      	adds	r3, #42	; 0x2a
 80022c6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

			hdiffdrv->motor[side].pwm_channel[dir]= hdiffdrv->Init.motor_pwm_channel[side][dir];
 80022ca:	4bb3      	ldr	r3, [pc, #716]	; (8002598 <DIFFDRIVE_Init+0x590>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 80022d2:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 80022d6:	4ab0      	ldr	r2, [pc, #704]	; (8002598 <DIFFDRIVE_Init+0x590>)
 80022d8:	6811      	ldr	r1, [r2, #0]
 80022da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80022de:	f997 4026 	ldrsb.w	r4, [r7, #38]	; 0x26
 80022e2:	006d      	lsls	r5, r5, #1
 80022e4:	4428      	add	r0, r5
 80022e6:	3004      	adds	r0, #4
 80022e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	4423      	add	r3, r4
 80022f8:	332c      	adds	r3, #44	; 0x2c
 80022fa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
			HAL_TIM_PWM_Start(hdiffdrv->motor[side].htim[dir], hdiffdrv->motor[side].pwm_channel[dir]);
 80022fe:	4ba6      	ldr	r3, [pc, #664]	; (8002598 <DIFFDRIVE_Init+0x590>)
 8002300:	6819      	ldr	r1, [r3, #0]
 8002302:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002306:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	4403      	add	r3, r0
 8002316:	332a      	adds	r3, #42	; 0x2a
 8002318:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800231c:	4b9e      	ldr	r3, [pc, #632]	; (8002598 <DIFFDRIVE_Init+0x590>)
 800231e:	6819      	ldr	r1, [r3, #0]
 8002320:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002324:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	4403      	add	r3, r0
 8002334:	332c      	adds	r3, #44	; 0x2c
 8002336:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800233a:	4619      	mov	r1, r3
 800233c:	4620      	mov	r0, r4
 800233e:	f003 fc75 	bl	8005c2c <HAL_TIM_PWM_Start>
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 8002342:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002350:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8002354:	2b01      	cmp	r3, #1
 8002356:	dd9f      	ble.n	8002298 <DIFFDRIVE_Init+0x290>
		}

	    // Computing duty beat ranges
		float supply_volt= hdiffdrv->motor[side].supply_voltage;
 8002358:	4b8f      	ldr	r3, [pc, #572]	; (8002598 <DIFFDRIVE_Init+0x590>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002360:	212c      	movs	r1, #44	; 0x2c
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	33b8      	adds	r3, #184	; 0xb8
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	617b      	str	r3, [r7, #20]
		float min_volt=	   hdiffdrv->motor[side].min_voltage;
 800236e:	4b8a      	ldr	r3, [pc, #552]	; (8002598 <DIFFDRIVE_Init+0x590>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	33c0      	adds	r3, #192	; 0xc0
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	613b      	str	r3, [r7, #16]
		float max_volt=    hdiffdrv->motor[side].max_voltage;
 8002384:	4b84      	ldr	r3, [pc, #528]	; (8002598 <DIFFDRIVE_Init+0x590>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800238c:	212c      	movs	r1, #44	; 0x2c
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	33bc      	adds	r3, #188	; 0xbc
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]

		// Forward or backward are the same in this case, I use timers with the same parameters
		hdiffdrv->motor[side].duty_beat_min= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*min_volt/supply_volt;
 800239a:	4b7f      	ldr	r3, [pc, #508]	; (8002598 <DIFFDRIVE_Init+0x590>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023a2:	212c      	movs	r1, #44	; 0x2c
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	33a8      	adds	r3, #168	; 0xa8
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80023be:	ee67 6a27 	vmul.f32	s13, s14, s15
 80023c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80023c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ca:	4b73      	ldr	r3, [pc, #460]	; (8002598 <DIFFDRIVE_Init+0x590>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d6:	ee17 0a90 	vmov	r0, s15
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	33c4      	adds	r3, #196	; 0xc4
 80023e4:	6018      	str	r0, [r3, #0]
		hdiffdrv->motor[side].duty_beat_max= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*max_volt/supply_volt;
 80023e6:	4b6c      	ldr	r3, [pc, #432]	; (8002598 <DIFFDRIVE_Init+0x590>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023ee:	212c      	movs	r1, #44	; 0x2c
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	33a8      	adds	r3, #168	; 0xa8
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	ee07 3a90 	vmov	s15, r3
 8002402:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002406:	edd7 7a03 	vldr	s15, [r7, #12]
 800240a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800240e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002416:	4b60      	ldr	r3, [pc, #384]	; (8002598 <DIFFDRIVE_Init+0x590>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800241e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002422:	ee17 0a90 	vmov	r0, s15
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	33c8      	adds	r3, #200	; 0xc8
 8002430:	6018      	str	r0, [r3, #0]

		// Starting Sensors
		HAL_TIM_Encoder_Start(hdiffdrv->encoder[side].htim, hdiffdrv->encoder[side].channel);
 8002432:	4b59      	ldr	r3, [pc, #356]	; (8002598 <DIFFDRIVE_Init+0x590>)
 8002434:	6819      	ldr	r1, [r3, #0]
 8002436:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	4b53      	ldr	r3, [pc, #332]	; (8002598 <DIFFDRIVE_Init+0x590>)
 800244c:	6819      	ldr	r1, [r3, #0]
 800244e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4619      	mov	r1, r3
 8002464:	f003 fd5e 	bl	8005f24 <HAL_TIM_Encoder_Start>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800246c:	3301      	adds	r3, #1
 800246e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002476:	2b01      	cmp	r3, #1
 8002478:	f67f adf9 	bls.w	800206e <DIFFDRIVE_Init+0x66>

	}

	// Initialize pose
	hdiffdrv->state.pose.x_a   +=  0;
 800247c:	4b46      	ldr	r3, [pc, #280]	; (8002598 <DIFFDRIVE_Init+0x590>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	edd3 7a7e 	vldr	s15, [r3, #504]	; 0x1f8
 8002484:	4b44      	ldr	r3, [pc, #272]	; (8002598 <DIFFDRIVE_Init+0x590>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800259c <DIFFDRIVE_Init+0x594>
 800248c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002490:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
	hdiffdrv->state.pose.y_a   +=  0;
 8002494:	4b40      	ldr	r3, [pc, #256]	; (8002598 <DIFFDRIVE_Init+0x590>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	edd3 7a7f 	vldr	s15, [r3, #508]	; 0x1fc
 800249c:	4b3e      	ldr	r3, [pc, #248]	; (8002598 <DIFFDRIVE_Init+0x590>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800259c <DIFFDRIVE_Init+0x594>
 80024a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024a8:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
	hdiffdrv->state.pose.theta +=  0;
 80024ac:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <DIFFDRIVE_Init+0x590>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80024b4:	4b38      	ldr	r3, [pc, #224]	; (8002598 <DIFFDRIVE_Init+0x590>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800259c <DIFFDRIVE_Init+0x594>
 80024bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024c0:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200

	// Allocating history' arrays
	hdiffdrv->history.max_sample= hdiffdrv->Init.history_max_sample;
 80024c4:	4b34      	ldr	r3, [pc, #208]	; (8002598 <DIFFDRIVE_Init+0x590>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80024cc:	4b32      	ldr	r3, [pc, #200]	; (8002598 <DIFFDRIVE_Init+0x590>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230

	hdiffdrv->history.state_target=  (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 80024d4:	4b30      	ldr	r3, [pc, #192]	; (8002598 <DIFFDRIVE_Init+0x590>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80024dc:	4a2e      	ldr	r2, [pc, #184]	; (8002598 <DIFFDRIVE_Init+0x590>)
 80024de:	6814      	ldr	r4, [r2, #0]
 80024e0:	2124      	movs	r1, #36	; 0x24
 80024e2:	4618      	mov	r0, r3
 80024e4:	f005 fbc2 	bl	8007c6c <calloc>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
	hdiffdrv->history.state_measure= (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 80024ee:	4b2a      	ldr	r3, [pc, #168]	; (8002598 <DIFFDRIVE_Init+0x590>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80024f6:	4a28      	ldr	r2, [pc, #160]	; (8002598 <DIFFDRIVE_Init+0x590>)
 80024f8:	6814      	ldr	r4, [r2, #0]
 80024fa:	2124      	movs	r1, #36	; 0x24
 80024fc:	4618      	mov	r0, r3
 80024fe:	f005 fbb5 	bl	8007c6c <calloc>
 8002502:	4603      	mov	r3, r0
 8002504:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c

	// Initializing time index
	hdiffdrv->history.sample_cnt= 0;
 8002508:	4b23      	ldr	r3, [pc, #140]	; (8002598 <DIFFDRIVE_Init+0x590>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2200      	movs	r2, #0
 800250e:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

	// Reset timing flag
	hdiffdrv->timing.flag= false;
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <DIFFDRIVE_Init+0x590>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4


	/* Computing prescaler ad autoreload period to obtain an update event with frequency 1/timing.time_step Hertz */

	DIFFDRIVE_TIMING_TypeDef* timing= &(hdiffdrv->timing);
 800251c:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <DIFFDRIVE_Init+0x590>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	339c      	adds	r3, #156	; 0x9c
 8002522:	61fb      	str	r3, [r7, #28]

	uint16_t prescaler=  __MYLIB_GET_TIMER_CLK(timing->htim)*10/1e6 - 1;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1d      	ldr	r2, [pc, #116]	; (80025a0 <DIFFDRIVE_Init+0x598>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d017      	beq.n	8002560 <DIFFDRIVE_Init+0x558>
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a1b      	ldr	r2, [pc, #108]	; (80025a4 <DIFFDRIVE_Init+0x59c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d011      	beq.n	8002560 <DIFFDRIVE_Init+0x558>
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a19      	ldr	r2, [pc, #100]	; (80025a8 <DIFFDRIVE_Init+0x5a0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00b      	beq.n	8002560 <DIFFDRIVE_Init+0x558>
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a17      	ldr	r2, [pc, #92]	; (80025ac <DIFFDRIVE_Init+0x5a4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d005      	beq.n	8002560 <DIFFDRIVE_Init+0x558>
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a15      	ldr	r2, [pc, #84]	; (80025b0 <DIFFDRIVE_Init+0x5a8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d12b      	bne.n	80025b8 <DIFFDRIVE_Init+0x5b0>
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <DIFFDRIVE_Init+0x5ac>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10a      	bne.n	8002582 <DIFFDRIVE_Init+0x57a>
 800256c:	f002 fda2 	bl	80050b4 <HAL_RCC_GetPCLK2Freq>
 8002570:	4602      	mov	r2, r0
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	4618      	mov	r0, r3
 800257c:	f7fd ffe2 	bl	8000544 <__aeabi_ui2d>
 8002580:	e035      	b.n	80025ee <DIFFDRIVE_Init+0x5e6>
 8002582:	f002 fd97 	bl	80050b4 <HAL_RCC_GetPCLK2Freq>
 8002586:	4602      	mov	r2, r0
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4618      	mov	r0, r3
 8002592:	f7fd ffd7 	bl	8000544 <__aeabi_ui2d>
 8002596:	e02a      	b.n	80025ee <DIFFDRIVE_Init+0x5e6>
 8002598:	20000824 	.word	0x20000824
 800259c:	00000000 	.word	0x00000000
 80025a0:	40010000 	.word	0x40010000
 80025a4:	40010400 	.word	0x40010400
 80025a8:	40014000 	.word	0x40014000
 80025ac:	40014400 	.word	0x40014400
 80025b0:	40014800 	.word	0x40014800
 80025b4:	40023800 	.word	0x40023800
 80025b8:	4b57      	ldr	r3, [pc, #348]	; (8002718 <DIFFDRIVE_Init+0x710>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10a      	bne.n	80025da <DIFFDRIVE_Init+0x5d2>
 80025c4:	f002 fd62 	bl	800508c <HAL_RCC_GetPCLK1Freq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ffb6 	bl	8000544 <__aeabi_ui2d>
 80025d8:	e009      	b.n	80025ee <DIFFDRIVE_Init+0x5e6>
 80025da:	f002 fd57 	bl	800508c <HAL_RCC_GetPCLK1Freq>
 80025de:	4602      	mov	r2, r0
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd ffab 	bl	8000544 <__aeabi_ui2d>
 80025ee:	a348      	add	r3, pc, #288	; (adr r3, 8002710 <DIFFDRIVE_Init+0x708>)
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	f7fe f94a 	bl	800088c <__aeabi_ddiv>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4610      	mov	r0, r2
 80025fe:	4619      	mov	r1, r3
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	4b45      	ldr	r3, [pc, #276]	; (800271c <DIFFDRIVE_Init+0x714>)
 8002606:	f7fd fe5f 	bl	80002c8 <__aeabi_dsub>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	f7fe fae9 	bl	8000be8 <__aeabi_d2uiz>
 8002616:	4603      	mov	r3, r0
 8002618:	837b      	strh	r3, [r7, #26]
	// Guessing is a 16bit autoreload timer to avoid troubles
	uint16_t autoreload= __MYLIB_GET_TIMER_CLK(timing->htim)/( (prescaler+1)*1/timing->time_step ) - 1;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a3f      	ldr	r2, [pc, #252]	; (8002720 <DIFFDRIVE_Init+0x718>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d017      	beq.n	8002656 <DIFFDRIVE_Init+0x64e>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a3d      	ldr	r2, [pc, #244]	; (8002724 <DIFFDRIVE_Init+0x71c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d011      	beq.n	8002656 <DIFFDRIVE_Init+0x64e>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a3b      	ldr	r2, [pc, #236]	; (8002728 <DIFFDRIVE_Init+0x720>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00b      	beq.n	8002656 <DIFFDRIVE_Init+0x64e>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a39      	ldr	r2, [pc, #228]	; (800272c <DIFFDRIVE_Init+0x724>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d005      	beq.n	8002656 <DIFFDRIVE_Init+0x64e>
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a37      	ldr	r2, [pc, #220]	; (8002730 <DIFFDRIVE_Init+0x728>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d115      	bne.n	8002682 <DIFFDRIVE_Init+0x67a>
 8002656:	4b30      	ldr	r3, [pc, #192]	; (8002718 <DIFFDRIVE_Init+0x710>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <DIFFDRIVE_Init+0x668>
 8002662:	f002 fd27 	bl	80050b4 <HAL_RCC_GetPCLK2Freq>
 8002666:	ee07 0a90 	vmov	s15, r0
 800266a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800266e:	e01d      	b.n	80026ac <DIFFDRIVE_Init+0x6a4>
 8002670:	f002 fd20 	bl	80050b4 <HAL_RCC_GetPCLK2Freq>
 8002674:	4603      	mov	r3, r0
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	ee07 3a90 	vmov	s15, r3
 800267c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002680:	e014      	b.n	80026ac <DIFFDRIVE_Init+0x6a4>
 8002682:	4b25      	ldr	r3, [pc, #148]	; (8002718 <DIFFDRIVE_Init+0x710>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <DIFFDRIVE_Init+0x694>
 800268e:	f002 fcfd 	bl	800508c <HAL_RCC_GetPCLK1Freq>
 8002692:	ee07 0a90 	vmov	s15, r0
 8002696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800269a:	e007      	b.n	80026ac <DIFFDRIVE_Init+0x6a4>
 800269c:	f002 fcf6 	bl	800508c <HAL_RCC_GetPCLK1Freq>
 80026a0:	4603      	mov	r3, r0
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ac:	8b7b      	ldrh	r3, [r7, #26]
 80026ae:	3301      	adds	r3, #1
 80026b0:	ee07 3a10 	vmov	s14, r3
 80026b4:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80026be:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80026c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80026ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d2:	ee17 3a90 	vmov	r3, s15
 80026d6:	833b      	strh	r3, [r7, #24]

	// Set counter with computed prescaler and autoreload period
	__HAL_TIM_SET_PRESCALER(timing->htim, prescaler);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	8b7a      	ldrh	r2, [r7, #26]
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(timing->htim, autoreload);
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	8b3a      	ldrh	r2, [r7, #24]
 80026ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	8b3a      	ldrh	r2, [r7, #24]
 80026f2:	60da      	str	r2, [r3, #12]

	// Assigning callback for timing purpose
	timing->htim->PeriodElapsedCallback= DIFFDRIVE_TIMING_Callback;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0e      	ldr	r2, [pc, #56]	; (8002734 <DIFFDRIVE_Init+0x72c>)
 80026fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	// Reset timing flag
	timing->flag= false;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	2200      	movs	r2, #0
 8002702:	721a      	strb	r2, [r3, #8]

}
 8002704:	bf00      	nop
 8002706:	3728      	adds	r7, #40	; 0x28
 8002708:	46bd      	mov	sp, r7
 800270a:	bdb0      	pop	{r4, r5, r7, pc}
 800270c:	f3af 8000 	nop.w
 8002710:	00000000 	.word	0x00000000
 8002714:	412e8480 	.word	0x412e8480
 8002718:	40023800 	.word	0x40023800
 800271c:	3ff00000 	.word	0x3ff00000
 8002720:	40010000 	.word	0x40010000
 8002724:	40010400 	.word	0x40010400
 8002728:	40014000 	.word	0x40014000
 800272c:	40014400 	.word	0x40014400
 8002730:	40014800 	.word	0x40014800
 8002734:	0800383d 	.word	0x0800383d

08002738 <DIFFDRIVE_MOTOR_Stop>:
	free(hdiffdrv->history.state_target);

}


void DIFFDRIVE_MOTOR_Stop(){
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0

	// Set motors to 0 volt
	DIFFDRIVE_MOTOR_SetPWMs((float[2]){0,0});
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	463b      	mov	r3, r7
 800274c:	4618      	mov	r0, r3
 800274e:	f000 f805 	bl	800275c <DIFFDRIVE_MOTOR_SetPWMs>

}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <DIFFDRIVE_MOTOR_SetPWMs>:


void DIFFDRIVE_MOTOR_SetPWMs(float* input){
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_MOTOR_TypeDef *tmp_mtr= hdiffdrv->motor;
 8002764:	4bb4      	ldr	r3, [pc, #720]	; (8002a38 <DIFFDRIVE_MOTOR_SetPWMs+0x2dc>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	33a8      	adds	r3, #168	; 0xa8
 800276a:	61bb      	str	r3, [r7, #24]
	float tmp_input[2];
	float supply_volt;

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800276c:	2300      	movs	r3, #0
 800276e:	77fb      	strb	r3, [r7, #31]
 8002770:	e0c8      	b.n	8002904 <DIFFDRIVE_MOTOR_SetPWMs+0x1a8>

		tmp_input[side]= input[side];
 8002772:	7ffb      	ldrb	r3, [r7, #31]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	441a      	add	r2, r3
 800277a:	7ffb      	ldrb	r3, [r7, #31]
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	f107 0120 	add.w	r1, r7, #32
 8002784:	440b      	add	r3, r1
 8002786:	3b14      	subs	r3, #20
 8002788:	601a      	str	r2, [r3, #0]

		supply_volt= tmp_mtr[side].supply_voltage;
 800278a:	7ffb      	ldrb	r3, [r7, #31]
 800278c:	222c      	movs	r2, #44	; 0x2c
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4413      	add	r3, r2
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	617b      	str	r3, [r7, #20]

		if(tmp_input[side] > 0){
 800279a:	7ffb      	ldrb	r3, [r7, #31]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	f107 0220 	add.w	r2, r7, #32
 80027a2:	4413      	add	r3, r2
 80027a4:	3b14      	subs	r3, #20
 80027a6:	edd3 7a00 	vldr	s15, [r3]
 80027aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b2:	dd09      	ble.n	80027c8 <DIFFDRIVE_MOTOR_SetPWMs+0x6c>
			// Set direction
			tmp_mtr[side].direction= forward;
 80027b4:	7ffb      	ldrb	r3, [r7, #31]
 80027b6:	222c      	movs	r2, #44	; 0x2c
 80027b8:	fb02 f303 	mul.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4413      	add	r3, r2
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80027c6:	e027      	b.n	8002818 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
		}
		else
		if(tmp_input[side] < 0){
 80027c8:	7ffb      	ldrb	r3, [r7, #31]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	f107 0220 	add.w	r2, r7, #32
 80027d0:	4413      	add	r3, r2
 80027d2:	3b14      	subs	r3, #20
 80027d4:	edd3 7a00 	vldr	s15, [r3]
 80027d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e0:	d51a      	bpl.n	8002818 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
			// Set direction
			tmp_mtr[side].direction= backward;
 80027e2:	7ffb      	ldrb	r3, [r7, #31]
 80027e4:	222c      	movs	r2, #44	; 0x2c
 80027e6:	fb02 f303 	mul.w	r3, r2, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4413      	add	r3, r2
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			// Abs of input
			tmp_input[side]= -tmp_input[side];
 80027f4:	7ffb      	ldrb	r3, [r7, #31]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	f107 0220 	add.w	r2, r7, #32
 80027fc:	4413      	add	r3, r2
 80027fe:	3b14      	subs	r3, #20
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	7ffb      	ldrb	r3, [r7, #31]
 8002806:	eef1 7a67 	vneg.f32	s15, s15
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	f107 0220 	add.w	r2, r7, #32
 8002810:	4413      	add	r3, r2
 8002812:	3b14      	subs	r3, #20
 8002814:	edc3 7a00 	vstr	s15, [r3]
		}

		// Duty beat proportional to input voltage plus a minimum duty beat (so, if input is near zero
		// duty beat is near its minimum. DC motors need to reach a tension threshold before moving)
		// Also: forward or backward are the same in this case, I use timers with the same parameters
		tmp_mtr[side].duty_beat  = __HAL_TIM_GET_AUTORELOAD(tmp_mtr[side].htim[forward])*tmp_input[side]/supply_volt;
 8002818:	7ffb      	ldrb	r3, [r7, #31]
 800281a:	222c      	movs	r2, #44	; 0x2c
 800281c:	fb02 f303 	mul.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4413      	add	r3, r2
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002832:	7ffb      	ldrb	r3, [r7, #31]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	f107 0220 	add.w	r2, r7, #32
 800283a:	4413      	add	r3, r2
 800283c:	3b14      	subs	r3, #20
 800283e:	edd3 7a00 	vldr	s15, [r3]
 8002842:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002846:	ed97 7a05 	vldr	s14, [r7, #20]
 800284a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800284e:	7ffb      	ldrb	r3, [r7, #31]
 8002850:	222c      	movs	r2, #44	; 0x2c
 8002852:	fb02 f303 	mul.w	r3, r2, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4413      	add	r3, r2
 800285a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800285e:	ee17 2a90 	vmov	r2, s15
 8002862:	625a      	str	r2, [r3, #36]	; 0x24
		tmp_mtr[side].duty_beat += tmp_mtr[side].duty_beat_min;
 8002864:	7ffb      	ldrb	r3, [r7, #31]
 8002866:	222c      	movs	r2, #44	; 0x2c
 8002868:	fb02 f303 	mul.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4413      	add	r3, r2
 8002870:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002872:	7ffb      	ldrb	r3, [r7, #31]
 8002874:	222c      	movs	r2, #44	; 0x2c
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4413      	add	r3, r2
 800287e:	69da      	ldr	r2, [r3, #28]
 8002880:	7ffb      	ldrb	r3, [r7, #31]
 8002882:	202c      	movs	r0, #44	; 0x2c
 8002884:	fb00 f303 	mul.w	r3, r0, r3
 8002888:	69b8      	ldr	r0, [r7, #24]
 800288a:	4403      	add	r3, r0
 800288c:	440a      	add	r2, r1
 800288e:	625a      	str	r2, [r3, #36]	; 0x24

		// Upper Saturation of duty cycle
		if( tmp_mtr[side].duty_beat > tmp_mtr[side].duty_beat_max )
 8002890:	7ffb      	ldrb	r3, [r7, #31]
 8002892:	222c      	movs	r2, #44	; 0x2c
 8002894:	fb02 f303 	mul.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4413      	add	r3, r2
 800289c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800289e:	7ffb      	ldrb	r3, [r7, #31]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	69b9      	ldr	r1, [r7, #24]
 80028a8:	440b      	add	r3, r1
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d90e      	bls.n	80028ce <DIFFDRIVE_MOTOR_SetPWMs+0x172>
			tmp_mtr[side].duty_beat= tmp_mtr[side].duty_beat_max;
 80028b0:	7ffb      	ldrb	r3, [r7, #31]
 80028b2:	222c      	movs	r2, #44	; 0x2c
 80028b4:	fb02 f303 	mul.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	441a      	add	r2, r3
 80028bc:	7ffb      	ldrb	r3, [r7, #31]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	69b9      	ldr	r1, [r7, #24]
 80028c6:	440b      	add	r3, r1
 80028c8:	6a12      	ldr	r2, [r2, #32]
 80028ca:	625a      	str	r2, [r3, #36]	; 0x24
 80028cc:	e017      	b.n	80028fe <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
		else
		// Lower Saturation of duty cycle. If reach lower bound, set to zero to be sure to stop motors
		if( tmp_mtr[side].duty_beat == tmp_mtr[side].duty_beat_min )
 80028ce:	7ffb      	ldrb	r3, [r7, #31]
 80028d0:	222c      	movs	r2, #44	; 0x2c
 80028d2:	fb02 f303 	mul.w	r3, r2, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4413      	add	r3, r2
 80028da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028dc:	7ffb      	ldrb	r3, [r7, #31]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	69b9      	ldr	r1, [r7, #24]
 80028e6:	440b      	add	r3, r1
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d107      	bne.n	80028fe <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
			tmp_mtr[side].duty_beat= 0;
 80028ee:	7ffb      	ldrb	r3, [r7, #31]
 80028f0:	222c      	movs	r2, #44	; 0x2c
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4413      	add	r3, r2
 80028fa:	2200      	movs	r2, #0
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80028fe:	7ffb      	ldrb	r3, [r7, #31]
 8002900:	3301      	adds	r3, #1
 8002902:	77fb      	strb	r3, [r7, #31]
 8002904:	7ffb      	ldrb	r3, [r7, #31]
 8002906:	2b01      	cmp	r3, #1
 8002908:	f67f af33 	bls.w	8002772 <DIFFDRIVE_MOTOR_SetPWMs+0x16>
	}

	// Set PWM signal
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800290c:	2300      	movs	r3, #0
 800290e:	77bb      	strb	r3, [r7, #30]
 8002910:	e14f      	b.n	8002bb2 <DIFFDRIVE_MOTOR_SetPWMs+0x456>

		// Set opposite direction (!direction) pin to 0
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[!(tmp_mtr[side].direction)],
 8002912:	7fbb      	ldrb	r3, [r7, #30]
 8002914:	222c      	movs	r2, #44	; 0x2c
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4413      	add	r3, r2
 800291e:	7fba      	ldrb	r2, [r7, #30]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f202 	mul.w	r2, r1, r2
 8002926:	69b9      	ldr	r1, [r7, #24]
 8002928:	440a      	add	r2, r1
 800292a:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 800292e:	2a00      	cmp	r2, #0
 8002930:	bf0c      	ite	eq
 8002932:	2201      	moveq	r2, #1
 8002934:	2200      	movne	r2, #0
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	3202      	adds	r2, #2
 800293a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d118      	bne.n	8002974 <DIFFDRIVE_MOTOR_SetPWMs+0x218>
 8002942:	7fbb      	ldrb	r3, [r7, #30]
 8002944:	222c      	movs	r2, #44	; 0x2c
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4413      	add	r3, r2
 800294e:	7fba      	ldrb	r2, [r7, #30]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f202 	mul.w	r2, r1, r2
 8002956:	69b9      	ldr	r1, [r7, #24]
 8002958:	440a      	add	r2, r1
 800295a:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 800295e:	2a00      	cmp	r2, #0
 8002960:	bf0c      	ite	eq
 8002962:	2201      	moveq	r2, #1
 8002964:	2200      	movne	r2, #0
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	635a      	str	r2, [r3, #52]	; 0x34
 8002972:	e07b      	b.n	8002a6c <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8002974:	7fbb      	ldrb	r3, [r7, #30]
 8002976:	222c      	movs	r2, #44	; 0x2c
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4413      	add	r3, r2
 8002980:	7fba      	ldrb	r2, [r7, #30]
 8002982:	212c      	movs	r1, #44	; 0x2c
 8002984:	fb01 f202 	mul.w	r2, r1, r2
 8002988:	69b9      	ldr	r1, [r7, #24]
 800298a:	440a      	add	r2, r1
 800298c:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002990:	2a00      	cmp	r2, #0
 8002992:	bf0c      	ite	eq
 8002994:	2201      	moveq	r2, #1
 8002996:	2200      	movne	r2, #0
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	3202      	adds	r2, #2
 800299c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d118      	bne.n	80029d6 <DIFFDRIVE_MOTOR_SetPWMs+0x27a>
 80029a4:	7fbb      	ldrb	r3, [r7, #30]
 80029a6:	222c      	movs	r2, #44	; 0x2c
 80029a8:	fb02 f303 	mul.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4413      	add	r3, r2
 80029b0:	7fba      	ldrb	r2, [r7, #30]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f202 	mul.w	r2, r1, r2
 80029b8:	69b9      	ldr	r1, [r7, #24]
 80029ba:	440a      	add	r2, r1
 80029bc:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 80029c0:	2a00      	cmp	r2, #0
 80029c2:	bf0c      	ite	eq
 80029c4:	2201      	moveq	r2, #1
 80029c6:	2200      	movne	r2, #0
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2300      	movs	r3, #0
 80029d2:	6393      	str	r3, [r2, #56]	; 0x38
 80029d4:	e04a      	b.n	8002a6c <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 80029d6:	7fbb      	ldrb	r3, [r7, #30]
 80029d8:	222c      	movs	r2, #44	; 0x2c
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4413      	add	r3, r2
 80029e2:	7fba      	ldrb	r2, [r7, #30]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f202 	mul.w	r2, r1, r2
 80029ea:	69b9      	ldr	r1, [r7, #24]
 80029ec:	440a      	add	r2, r1
 80029ee:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 80029f2:	2a00      	cmp	r2, #0
 80029f4:	bf0c      	ite	eq
 80029f6:	2201      	moveq	r2, #1
 80029f8:	2200      	movne	r2, #0
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	3202      	adds	r2, #2
 80029fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d11a      	bne.n	8002a3c <DIFFDRIVE_MOTOR_SetPWMs+0x2e0>
 8002a06:	7fbb      	ldrb	r3, [r7, #30]
 8002a08:	222c      	movs	r2, #44	; 0x2c
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4413      	add	r3, r2
 8002a12:	7fba      	ldrb	r2, [r7, #30]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f202 	mul.w	r2, r1, r2
 8002a1a:	69b9      	ldr	r1, [r7, #24]
 8002a1c:	440a      	add	r2, r1
 8002a1e:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002a22:	2a00      	cmp	r2, #0
 8002a24:	bf0c      	ite	eq
 8002a26:	2201      	moveq	r2, #1
 8002a28:	2200      	movne	r2, #0
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	2300      	movs	r3, #0
 8002a34:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002a36:	e019      	b.n	8002a6c <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8002a38:	20000824 	.word	0x20000824
 8002a3c:	7fbb      	ldrb	r3, [r7, #30]
 8002a3e:	222c      	movs	r2, #44	; 0x2c
 8002a40:	fb02 f303 	mul.w	r3, r2, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4413      	add	r3, r2
 8002a48:	7fba      	ldrb	r2, [r7, #30]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f202 	mul.w	r2, r1, r2
 8002a50:	69b9      	ldr	r1, [r7, #24]
 8002a52:	440a      	add	r2, r1
 8002a54:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002a58:	2a00      	cmp	r2, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2201      	moveq	r2, #1
 8002a5e:	2200      	movne	r2, #0
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	6413      	str	r3, [r2, #64]	; 0x40
							  tmp_mtr[side].pwm_channel[!(tmp_mtr[side].direction)],
							  0  );

		// Set direction pin with the current duty cycle on PWM signal
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[(tmp_mtr[side].direction)],
 8002a6c:	7fbb      	ldrb	r3, [r7, #30]
 8002a6e:	222c      	movs	r2, #44	; 0x2c
 8002a70:	fb02 f303 	mul.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	7fba      	ldrb	r2, [r7, #30]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f202 	mul.w	r2, r1, r2
 8002a80:	69b9      	ldr	r1, [r7, #24]
 8002a82:	440a      	add	r2, r1
 8002a84:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002a88:	3202      	adds	r2, #2
 8002a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d119      	bne.n	8002ac6 <DIFFDRIVE_MOTOR_SetPWMs+0x36a>
 8002a92:	7fbb      	ldrb	r3, [r7, #30]
 8002a94:	222c      	movs	r2, #44	; 0x2c
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	441a      	add	r2, r3
 8002a9e:	7fbb      	ldrb	r3, [r7, #30]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	69b9      	ldr	r1, [r7, #24]
 8002aa8:	440b      	add	r3, r1
 8002aaa:	7fb9      	ldrb	r1, [r7, #30]
 8002aac:	202c      	movs	r0, #44	; 0x2c
 8002aae:	fb00 f101 	mul.w	r1, r0, r1
 8002ab2:	69b8      	ldr	r0, [r7, #24]
 8002ab4:	4401      	add	r1, r0
 8002ab6:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 8002aba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ac2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ac4:	e072      	b.n	8002bac <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8002ac6:	7fbb      	ldrb	r3, [r7, #30]
 8002ac8:	222c      	movs	r2, #44	; 0x2c
 8002aca:	fb02 f303 	mul.w	r3, r2, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	7fba      	ldrb	r2, [r7, #30]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f202 	mul.w	r2, r1, r2
 8002ada:	69b9      	ldr	r1, [r7, #24]
 8002adc:	440a      	add	r2, r1
 8002ade:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002ae2:	3202      	adds	r2, #2
 8002ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d119      	bne.n	8002b20 <DIFFDRIVE_MOTOR_SetPWMs+0x3c4>
 8002aec:	7fbb      	ldrb	r3, [r7, #30]
 8002aee:	222c      	movs	r2, #44	; 0x2c
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4413      	add	r3, r2
 8002af8:	7fba      	ldrb	r2, [r7, #30]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f202 	mul.w	r2, r1, r2
 8002b00:	69b9      	ldr	r1, [r7, #24]
 8002b02:	440a      	add	r2, r1
 8002b04:	7fb9      	ldrb	r1, [r7, #30]
 8002b06:	202c      	movs	r0, #44	; 0x2c
 8002b08:	fb00 f101 	mul.w	r1, r0, r1
 8002b0c:	69b8      	ldr	r0, [r7, #24]
 8002b0e:	4401      	add	r1, r0
 8002b10:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 8002b14:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	6393      	str	r3, [r2, #56]	; 0x38
 8002b1e:	e045      	b.n	8002bac <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8002b20:	7fbb      	ldrb	r3, [r7, #30]
 8002b22:	222c      	movs	r2, #44	; 0x2c
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	7fba      	ldrb	r2, [r7, #30]
 8002b2e:	212c      	movs	r1, #44	; 0x2c
 8002b30:	fb01 f202 	mul.w	r2, r1, r2
 8002b34:	69b9      	ldr	r1, [r7, #24]
 8002b36:	440a      	add	r2, r1
 8002b38:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002b3c:	3202      	adds	r2, #2
 8002b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d119      	bne.n	8002b7a <DIFFDRIVE_MOTOR_SetPWMs+0x41e>
 8002b46:	7fbb      	ldrb	r3, [r7, #30]
 8002b48:	222c      	movs	r2, #44	; 0x2c
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4413      	add	r3, r2
 8002b52:	7fba      	ldrb	r2, [r7, #30]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f202 	mul.w	r2, r1, r2
 8002b5a:	69b9      	ldr	r1, [r7, #24]
 8002b5c:	440a      	add	r2, r1
 8002b5e:	7fb9      	ldrb	r1, [r7, #30]
 8002b60:	202c      	movs	r0, #44	; 0x2c
 8002b62:	fb00 f101 	mul.w	r1, r0, r1
 8002b66:	69b8      	ldr	r0, [r7, #24]
 8002b68:	4401      	add	r1, r0
 8002b6a:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 8002b6e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002b78:	e018      	b.n	8002bac <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8002b7a:	7fbb      	ldrb	r3, [r7, #30]
 8002b7c:	222c      	movs	r2, #44	; 0x2c
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4413      	add	r3, r2
 8002b86:	7fba      	ldrb	r2, [r7, #30]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f202 	mul.w	r2, r1, r2
 8002b8e:	69b9      	ldr	r1, [r7, #24]
 8002b90:	440a      	add	r2, r1
 8002b92:	7fb9      	ldrb	r1, [r7, #30]
 8002b94:	202c      	movs	r0, #44	; 0x2c
 8002b96:	fb00 f101 	mul.w	r1, r0, r1
 8002b9a:	69b8      	ldr	r0, [r7, #24]
 8002b9c:	4401      	add	r1, r0
 8002b9e:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 8002ba2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	6413      	str	r3, [r2, #64]	; 0x40
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002bac:	7fbb      	ldrb	r3, [r7, #30]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	77bb      	strb	r3, [r7, #30]
 8002bb2:	7fbb      	ldrb	r3, [r7, #30]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	f67f aeac 	bls.w	8002912 <DIFFDRIVE_MOTOR_SetPWMs+0x1b6>
							  tmp_mtr[side].pwm_channel[(tmp_mtr[side].direction)],
							  tmp_mtr[side].duty_beat  );

		}

}
 8002bba:	bf00      	nop
 8002bbc:	bf00      	nop
 8002bbe:	3724      	adds	r7, #36	; 0x24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <DIFFDRIVE_ENCODER_CaptureMeasure>:


DIFFDRIVE_StatusTypeDef DIFFDRIVE_ENCODER_CaptureMeasure(void){
 8002bc8:	b5b0      	push	{r4, r5, r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens=  hdiffdrv->encoder;
 8002bce:	4b54      	ldr	r3, [pc, #336]	; (8002d20 <DIFFDRIVE_ENCODER_CaptureMeasure+0x158>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002bd6:	60bb      	str	r3, [r7, #8]

	// int32 max value, minus a secure threshold of 100
	uint32_t counter_max= (pow(2,31)-1)-100;
 8002bd8:	4b52      	ldr	r3, [pc, #328]	; (8002d24 <DIFFDRIVE_ENCODER_CaptureMeasure+0x15c>)
 8002bda:	607b      	str	r3, [r7, #4]

	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8002bdc:	2300      	movs	r3, #0
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	e090      	b.n	8002d04 <DIFFDRIVE_ENCODER_CaptureMeasure+0x13c>

		// Saving previous value
		tmpsens[side].previous_value= tmpsens[side].current_value;
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	1899      	adds	r1, r3, r2
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4413      	add	r3, r2
 8002c02:	68ca      	ldr	r2, [r1, #12]
 8002c04:	611a      	str	r2, [r3, #16]

		// Updating value. The counter connected to sensor are 32 bit unsigned integer so I cast in
		// 32 bit integer (signed) to have positive and negative values. Then, using encoder resolution,
		tmpsens[side].current_value  = (int32_t)__HAL_TIM_GET_COUNTER(tmpsens[side].htim);
 8002c06:	7bfa      	ldrb	r2, [r7, #15]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	461a      	mov	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4413      	add	r3, r2
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4413      	add	r3, r2
 8002c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c34:	edc3 7a03 	vstr	s15, [r3, #12]

		// If counter reach a threshold value return an exception
		if( tmpsens[side].current_value < -(int32_t)counter_max || tmpsens[side].current_value > (int32_t)counter_max  )
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	461a      	mov	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4413      	add	r3, r2
 8002c48:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	425b      	negs	r3, r3
 8002c50:	ee07 3a90 	vmov	s15, r3
 8002c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c60:	d413      	bmi.n	8002c8a <DIFFDRIVE_ENCODER_CaptureMeasure+0xc2>
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4413      	add	r3, r2
 8002c72:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c88:	dd02      	ble.n	8002c90 <DIFFDRIVE_ENCODER_CaptureMeasure+0xc8>
			return DIFFDRIVE_ERROR;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c8e:	e03e      	b.n	8002d0e <DIFFDRIVE_ENCODER_CaptureMeasure+0x146>

		// Else convert integer in radiant
		tmpsens[side].current_value *= (2*M_PI)/tmpsens[side].resolution;
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fc70 	bl	8000588 <__aeabi_f2d>
 8002ca8:	4604      	mov	r4, r0
 8002caa:	460d      	mov	r5, r1
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4413      	add	r3, r2
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fc62 	bl	8000588 <__aeabi_f2d>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	a113      	add	r1, pc, #76	; (adr r1, 8002d18 <DIFFDRIVE_ENCODER_CaptureMeasure+0x150>)
 8002cca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cce:	f7fd fddd 	bl	800088c <__aeabi_ddiv>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	4629      	mov	r1, r5
 8002cda:	f7fd fcad 	bl	8000638 <__aeabi_dmul>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	7bfa      	ldrb	r2, [r7, #15]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	189c      	adds	r4, r3, r2
 8002cf6:	f7fd ff97 	bl	8000c28 <__aeabi_d2f>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	60e3      	str	r3, [r4, #12]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	3301      	adds	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	f67f af6b 	bls.w	8002be2 <DIFFDRIVE_ENCODER_CaptureMeasure+0x1a>

	}

	return DIFFDRIVE_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bdb0      	pop	{r4, r5, r7, pc}
 8002d16:	bf00      	nop
 8002d18:	54442d18 	.word	0x54442d18
 8002d1c:	401921fb 	.word	0x401921fb
 8002d20:	20000824 	.word	0x20000824
 8002d24:	7fffff9b 	.word	0x7fffff9b

08002d28 <DIFFDRIVE_ENCODER_Reset>:


void DIFFDRIVE_ENCODER_Reset(void){
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens= hdiffdrv->encoder;
 8002d2e:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <DIFFDRIVE_ENCODER_Reset+0x60>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d36:	603b      	str	r3, [r7, #0]

	// Reset Wheel encoders
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8002d38:	2300      	movs	r3, #0
 8002d3a:	71fb      	strb	r3, [r7, #7]
 8002d3c:	e019      	b.n	8002d72 <DIFFDRIVE_ENCODER_Reset+0x4a>
		__HAL_TIM_SET_COUNTER(tmpsens[side].htim,0);
 8002d3e:	79fa      	ldrb	r2, [r7, #7]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2200      	movs	r2, #0
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24
		tmpsens[side].current_value= 0;
 8002d56:	79fa      	ldrb	r2, [r7, #7]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	461a      	mov	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	4413      	add	r3, r2
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	60da      	str	r2, [r3, #12]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	71fb      	strb	r3, [r7, #7]
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d9e2      	bls.n	8002d3e <DIFFDRIVE_ENCODER_Reset+0x16>
	}

}
 8002d78:	bf00      	nop
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000824 	.word	0x20000824

08002d8c <DIFFDRIVE_HISTORY_Start>:


void DIFFDRIVE_HISTORY_Start(void){
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0

	// Enable history saving and reset time_index counter
	hdiffdrv->history.sample_cnt= 0;
 8002d90:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <DIFFDRIVE_HISTORY_Start+0x24>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	hdiffdrv->history.Enabled= true;
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <DIFFDRIVE_HISTORY_Start+0x24>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000824 	.word	0x20000824

08002db4 <DIFFDRIVE_HISTORY_Update>:

}


/* ---- Saving only a fixed number of samples in a circular buffer, if history is enabled  ------------------- */
void DIFFDRIVE_HISTORY_Update(float delta_a_target, float delta_th_target){
 8002db4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002db8:	b096      	sub	sp, #88	; 0x58
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	ed87 0a01 	vstr	s0, [r7, #4]
 8002dc0:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_HISTORY_TypeDef* tmphist  = &(hdiffdrv->history);
 8002dc4:	4bad      	ldr	r3, [pc, #692]	; (800307c <DIFFDRIVE_HISTORY_Update+0x2c8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002dcc:	653b      	str	r3, [r7, #80]	; 0x50
	DIFFDRIVE_CONTROL_TypeDef* tmpctrl  =   hdiffdrv->control;
 8002dce:	4bab      	ldr	r3, [pc, #684]	; (800307c <DIFFDRIVE_HISTORY_Update+0x2c8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
	DIFFDRIVE_STATE_TypeDef    tmpstate =   hdiffdrv->state;
 8002dd8:	4ba8      	ldr	r3, [pc, #672]	; (800307c <DIFFDRIVE_HISTORY_Update+0x2c8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f107 0418 	add.w	r4, r7, #24
 8002de0:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 8002de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dec:	682b      	ldr	r3, [r5, #0]
 8002dee:	6023      	str	r3, [r4, #0]
	float min_volt;
	float max_volt;

	float theta, wheel_target[2], input[2];

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002df0:	2300      	movs	r3, #0
 8002df2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002df6:	e025      	b.n	8002e44 <DIFFDRIVE_HISTORY_Update+0x90>
		wheel_target[side] = __FEEDFORWARD_GET_CURRENT_TARGET(&(tmpctrl[side].fdfrwrd));
 8002df8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dfc:	2268      	movs	r2, #104	; 0x68
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e04:	441a      	add	r2, r3
 8002e06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002e12:	440b      	add	r3, r1
 8002e14:	3b48      	subs	r3, #72	; 0x48
 8002e16:	601a      	str	r2, [r3, #0]
		input[side] = tmpstate.input[side];
 8002e18:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002e1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e20:	3206      	adds	r2, #6
 8002e22:	0092      	lsls	r2, r2, #2
 8002e24:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002e28:	440a      	add	r2, r1
 8002e2a:	3a3c      	subs	r2, #60	; 0x3c
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002e34:	440b      	add	r3, r1
 8002e36:	3b50      	subs	r3, #80	; 0x50
 8002e38:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002e3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002e44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d9d5      	bls.n	8002df8 <DIFFDRIVE_HISTORY_Update+0x44>
	}

	// Current index (using operator % to enroll k between 0 and max_sample; last_time_index is unbounded)
	uint32_t k= tmphist->sample_cnt%tmphist->max_sample;
 8002e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e52:	6892      	ldr	r2, [r2, #8]
 8002e54:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e58:	fb02 f201 	mul.w	r2, r2, r1
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	64bb      	str	r3, [r7, #72]	; 0x48

	// Update history if is enabled
	if( tmphist->Enabled ){
 8002e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8210 	beq.w	800328a <DIFFDRIVE_HISTORY_Update+0x4d6>
		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002e70:	e133      	b.n	80030da <DIFFDRIVE_HISTORY_Update+0x326>

			min_volt= hdiffdrv->motor[side].min_voltage;
 8002e72:	4b82      	ldr	r3, [pc, #520]	; (800307c <DIFFDRIVE_HISTORY_Update+0x2c8>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e7a:	212c      	movs	r1, #44	; 0x2c
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	33c0      	adds	r3, #192	; 0xc0
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	643b      	str	r3, [r7, #64]	; 0x40
			max_volt= hdiffdrv->motor[side].max_voltage;
 8002e88:	4b7c      	ldr	r3, [pc, #496]	; (800307c <DIFFDRIVE_HISTORY_Update+0x2c8>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e90:	212c      	movs	r1, #44	; 0x2c
 8002e92:	fb01 f303 	mul.w	r3, r1, r3
 8002e96:	4413      	add	r3, r2
 8002e98:	33bc      	adds	r3, #188	; 0xbc
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	63fb      	str	r3, [r7, #60]	; 0x3c

			// Input Saturation limits, for "measured" tension-------------------------
			if( input[side] > (max_volt-min_volt))
 8002e9e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3b50      	subs	r3, #80	; 0x50
 8002eac:	ed93 7a00 	vldr	s14, [r3]
 8002eb0:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002eb4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002eb8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ebc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec4:	dd16      	ble.n	8002ef4 <DIFFDRIVE_HISTORY_Update+0x140>
				tmphist->state_measure[k].input[side]= max_volt-min_volt;
 8002ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec8:	6959      	ldr	r1, [r3, #20]
 8002eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	18ca      	adds	r2, r1, r3
 8002ed6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002eda:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002ede:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee6:	3306      	adds	r3, #6
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	3304      	adds	r3, #4
 8002eee:	edc3 7a00 	vstr	s15, [r3]
 8002ef2:	e045      	b.n	8002f80 <DIFFDRIVE_HISTORY_Update+0x1cc>
			else
			if( input[side] < -(max_volt-min_volt))
 8002ef4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002efe:	4413      	add	r3, r2
 8002f00:	3b50      	subs	r3, #80	; 0x50
 8002f02:	ed93 7a00 	vldr	s14, [r3]
 8002f06:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002f0a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002f0e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f12:	eef1 7a67 	vneg.f32	s15, s15
 8002f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1e:	d518      	bpl.n	8002f52 <DIFFDRIVE_HISTORY_Update+0x19e>
				tmphist->state_measure[k].input[side]= -(max_volt-min_volt);
 8002f20:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002f24:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f2e:	6959      	ldr	r1, [r3, #20]
 8002f30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	18ca      	adds	r2, r1, r3
 8002f3c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002f40:	eef1 7a67 	vneg.f32	s15, s15
 8002f44:	3306      	adds	r3, #6
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	edc3 7a00 	vstr	s15, [r3]
 8002f50:	e016      	b.n	8002f80 <DIFFDRIVE_HISTORY_Update+0x1cc>
			else
				tmphist->state_measure[k].input[side]= input[side];
 8002f52:	f897 0056 	ldrb.w	r0, [r7, #86]	; 0x56
 8002f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f58:	6959      	ldr	r1, [r3, #20]
 8002f5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4419      	add	r1, r3
 8002f66:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002f6a:	0082      	lsls	r2, r0, #2
 8002f6c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002f70:	4402      	add	r2, r0
 8002f72:	3a50      	subs	r2, #80	; 0x50
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	3306      	adds	r3, #6
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	601a      	str	r2, [r3, #0]
			// ------------------------------------------------------------------------

			// Target input, without PID contribute and saturation limits
			tmphist->state_target[k].input[side]= hdiffdrv->control[side].fdfrwrd.current_input;
 8002f80:	4b3e      	ldr	r3, [pc, #248]	; (800307c <DIFFDRIVE_HISTORY_Update+0x2c8>)
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	f897 4056 	ldrb.w	r4, [r7, #86]	; 0x56
 8002f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f8a:	6919      	ldr	r1, [r3, #16]
 8002f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4419      	add	r1, r3
 8002f98:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002f9c:	2268      	movs	r2, #104	; 0x68
 8002f9e:	fb02 f204 	mul.w	r2, r2, r4
 8002fa2:	4402      	add	r2, r0
 8002fa4:	f502 72a8 	add.w	r2, r2, #336	; 0x150
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	3306      	adds	r3, #6
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	601a      	str	r2, [r3, #0]

			// Wheels measured and target
			tmphist->state_measure[k].wheel[side]= __DIFFDRIVE_ENCODER_GET_CURRENT_VALUE(hdiffdrv,side);
 8002fb4:	4b31      	ldr	r3, [pc, #196]	; (800307c <DIFFDRIVE_HISTORY_Update+0x2c8>)
 8002fb6:	681c      	ldr	r4, [r3, #0]
 8002fb8:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fbe:	6958      	ldr	r0, [r3, #20]
 8002fc0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	440b      	add	r3, r1
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	18c1      	adds	r1, r0, r3
 8002fcc:	f897 0056 	ldrb.w	r0, [r7, #86]	; 0x56
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4423      	add	r3, r4
 8002fda:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	1c83      	adds	r3, r0, #2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	601a      	str	r2, [r3, #0]
			tmphist->state_measure[k].delta_wheel[side]= hdiffdrv->state.delta_wheel[side];
 8002fea:	4b24      	ldr	r3, [pc, #144]	; (800307c <DIFFDRIVE_HISTORY_Update+0x2c8>)
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	f897 4056 	ldrb.w	r4, [r7, #86]	; 0x56
 8002ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff4:	6959      	ldr	r1, [r3, #20]
 8002ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4419      	add	r1, r3
 8003002:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003006:	f104 0282 	add.w	r2, r4, #130	; 0x82
 800300a:	0092      	lsls	r2, r2, #2
 800300c:	4402      	add	r2, r0
 800300e:	3204      	adds	r2, #4
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	3304      	adds	r3, #4
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	3304      	adds	r3, #4
 800301a:	601a      	str	r2, [r3, #0]

			if(k > 0)
 800301c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800301e:	2b00      	cmp	r3, #0
 8003020:	d02e      	beq.n	8003080 <DIFFDRIVE_HISTORY_Update+0x2cc>
				tmphist->state_target[k].delta_wheel[side]= wheel_target[side]-tmphist->state_target[k-1].wheel[side];
 8003022:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800302c:	4413      	add	r3, r2
 800302e:	3b48      	subs	r3, #72	; 0x48
 8003030:	ed93 7a00 	vldr	s14, [r3]
 8003034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003036:	6919      	ldr	r1, [r3, #16]
 8003038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	3b24      	subs	r3, #36	; 0x24
 8003044:	18ca      	adds	r2, r1, r3
 8003046:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800304a:	3302      	adds	r3, #2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	3304      	adds	r3, #4
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003058:	6919      	ldr	r1, [r3, #16]
 800305a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	18ca      	adds	r2, r1, r3
 8003066:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800306a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800306e:	3304      	adds	r3, #4
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	3304      	adds	r3, #4
 8003076:	edc3 7a00 	vstr	s15, [r3]
 800307a:	e012      	b.n	80030a2 <DIFFDRIVE_HISTORY_Update+0x2ee>
 800307c:	20000824 	.word	0x20000824
			else
				tmphist->state_target[k].delta_wheel[side]= 0;
 8003080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003082:	6919      	ldr	r1, [r3, #16]
 8003084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	18ca      	adds	r2, r1, r3
 8003090:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003094:	3304      	adds	r3, #4
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	3304      	adds	r3, #4
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
			tmphist->state_target[k].wheel[side]= wheel_target[side];
 80030a2:	f897 0056 	ldrb.w	r0, [r7, #86]	; 0x56
 80030a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a8:	6919      	ldr	r1, [r3, #16]
 80030aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4419      	add	r1, r3
 80030b6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80030ba:	0082      	lsls	r2, r0, #2
 80030bc:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80030c0:	4402      	add	r2, r0
 80030c2:	3a48      	subs	r2, #72	; 0x48
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	3302      	adds	r3, #2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	3304      	adds	r3, #4
 80030ce:	601a      	str	r2, [r3, #0]
		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80030d0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80030d4:	3301      	adds	r3, #1
 80030d6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80030da:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80030de:	2b01      	cmp	r3, #1
 80030e0:	f67f aec7 	bls.w	8002e72 <DIFFDRIVE_HISTORY_Update+0xbe>

		}

		// Pose measure, extracted from state register
		tmphist->state_measure[k].pose= tmpstate.pose;
 80030e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e6:	6959      	ldr	r1, [r3, #20]
 80030e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	461c      	mov	r4, r3
 80030f6:	f107 0318 	add.w	r3, r7, #24
 80030fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		// Compute current target pose
		if( k > 0){
 8003102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 809b 	beq.w	8003240 <DIFFDRIVE_HISTORY_Update+0x48c>
			theta= tmphist->state_target[k-1].pose.theta;
 800310a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310c:	6919      	ldr	r1, [r3, #16]
 800310e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	3b24      	subs	r3, #36	; 0x24
 800311a:	440b      	add	r3, r1
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	647b      	str	r3, [r7, #68]	; 0x44
			tmphist->state_target[k].pose.x_a   =  tmphist->state_target[k-1].pose.x_a   + delta_a_target*cos(theta);
 8003120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003122:	6919      	ldr	r1, [r3, #16]
 8003124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	3b24      	subs	r3, #36	; 0x24
 8003130:	440b      	add	r3, r1
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd fa27 	bl	8000588 <__aeabi_f2d>
 800313a:	4604      	mov	r4, r0
 800313c:	460d      	mov	r5, r1
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fd fa22 	bl	8000588 <__aeabi_f2d>
 8003144:	4680      	mov	r8, r0
 8003146:	4689      	mov	r9, r1
 8003148:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800314a:	f7fd fa1d 	bl	8000588 <__aeabi_f2d>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	ec43 2b10 	vmov	d0, r2, r3
 8003156:	f009 f9e7 	bl	800c528 <cos>
 800315a:	ec53 2b10 	vmov	r2, r3, d0
 800315e:	4640      	mov	r0, r8
 8003160:	4649      	mov	r1, r9
 8003162:	f7fd fa69 	bl	8000638 <__aeabi_dmul>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4620      	mov	r0, r4
 800316c:	4629      	mov	r1, r5
 800316e:	f7fd f8ad 	bl	80002cc <__adddf3>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4690      	mov	r8, r2
 8003178:	4699      	mov	r9, r3
 800317a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800317c:	6919      	ldr	r1, [r3, #16]
 800317e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	18cc      	adds	r4, r1, r3
 800318a:	4640      	mov	r0, r8
 800318c:	4649      	mov	r1, r9
 800318e:	f7fd fd4b 	bl	8000c28 <__aeabi_d2f>
 8003192:	4603      	mov	r3, r0
 8003194:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k].pose.y_a   =  tmphist->state_target[k-1].pose.y_a   + delta_a_target*sin(theta);
 8003196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003198:	6919      	ldr	r1, [r3, #16]
 800319a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	3b24      	subs	r3, #36	; 0x24
 80031a6:	440b      	add	r3, r1
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd f9ec 	bl	8000588 <__aeabi_f2d>
 80031b0:	4604      	mov	r4, r0
 80031b2:	460d      	mov	r5, r1
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7fd f9e7 	bl	8000588 <__aeabi_f2d>
 80031ba:	4680      	mov	r8, r0
 80031bc:	4689      	mov	r9, r1
 80031be:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80031c0:	f7fd f9e2 	bl	8000588 <__aeabi_f2d>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	ec43 2b10 	vmov	d0, r2, r3
 80031cc:	f009 f9fc 	bl	800c5c8 <sin>
 80031d0:	ec53 2b10 	vmov	r2, r3, d0
 80031d4:	4640      	mov	r0, r8
 80031d6:	4649      	mov	r1, r9
 80031d8:	f7fd fa2e 	bl	8000638 <__aeabi_dmul>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4620      	mov	r0, r4
 80031e2:	4629      	mov	r1, r5
 80031e4:	f7fd f872 	bl	80002cc <__adddf3>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4690      	mov	r8, r2
 80031ee:	4699      	mov	r9, r3
 80031f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f2:	6919      	ldr	r1, [r3, #16]
 80031f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	18cc      	adds	r4, r1, r3
 8003200:	4640      	mov	r0, r8
 8003202:	4649      	mov	r1, r9
 8003204:	f7fd fd10 	bl	8000c28 <__aeabi_d2f>
 8003208:	4603      	mov	r3, r0
 800320a:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k].pose.theta =  tmphist->state_target[k-1].pose.theta + delta_th_target;
 800320c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800320e:	6919      	ldr	r1, [r3, #16]
 8003210:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	3b24      	subs	r3, #36	; 0x24
 800321c:	440b      	add	r3, r1
 800321e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003224:	6919      	ldr	r1, [r3, #16]
 8003226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	edd7 7a00 	vldr	s15, [r7]
 8003236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800323a:	edc3 7a02 	vstr	s15, [r3, #8]
 800323e:	e020      	b.n	8003282 <DIFFDRIVE_HISTORY_Update+0x4ce>
		}
		else{
			tmphist->state_target[k].pose.x_a   =  0;
 8003240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003242:	6919      	ldr	r1, [r3, #16]
 8003244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
			tmphist->state_target[k].pose.y_a   =  0;
 8003256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003258:	6919      	ldr	r1, [r3, #16]
 800325a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	605a      	str	r2, [r3, #4]
			tmphist->state_target[k].pose.theta =  0;
 800326c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800326e:	6919      	ldr	r1, [r3, #16]
 8003270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
		}

		// Increment time index
		tmphist->sample_cnt = k+1;
 8003282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003288:	605a      	str	r2, [r3, #4]
	}
}
 800328a:	bf00      	nop
 800328c:	3758      	adds	r7, #88	; 0x58
 800328e:	46bd      	mov	sp, r7
 8003290:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003294 <DIFFDRIVE_CONTROL_Start>:
	else
		tmphist->index= (tmphist->index+1)%tmphist->sample_cnt;
}


void DIFFDRIVE_CONTROL_Start(void){
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0

	// Reset Control
	DIFFDRIVE_CONTROL_Reset();
 8003298:	f000 f80e 	bl	80032b8 <DIFFDRIVE_CONTROL_Reset>

	// Starting and enabling history
	DIFFDRIVE_HISTORY_Start();
 800329c:	f7ff fd76 	bl	8002d8c <DIFFDRIVE_HISTORY_Start>

	// Start control timing
	DIFFDRIVE_TIMING_Start();
 80032a0:	f000 f838 	bl	8003314 <DIFFDRIVE_TIMING_Start>

}
 80032a4:	bf00      	nop
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <DIFFDRIVE_CONTROL_Stop>:


void DIFFDRIVE_CONTROL_Stop(void){
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0

	// Stop timing, control finished
	DIFFDRIVE_TIMING_Stop();
 80032ac:	f000 f840 	bl	8003330 <DIFFDRIVE_TIMING_Stop>

	// Set motor to 0 volt
	DIFFDRIVE_MOTOR_Stop();
 80032b0:	f7ff fa42 	bl	8002738 <DIFFDRIVE_MOTOR_Stop>

}
 80032b4:	bf00      	nop
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <DIFFDRIVE_CONTROL_Reset>:


void DIFFDRIVE_CONTROL_Reset(void){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0

	DIFFDRIVE_CONTROL_TypeDef* hctrl= hdiffdrv->control;
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <DIFFDRIVE_CONTROL_Reset+0x58>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80032c6:	603b      	str	r3, [r7, #0]

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80032c8:	2300      	movs	r3, #0
 80032ca:	71fb      	strb	r3, [r7, #7]
 80032cc:	e016      	b.n	80032fc <DIFFDRIVE_CONTROL_Reset+0x44>
		// Reset feed-forward buffer (with NULL value in second argument the buffers are initialized with zeros)
		FEEDFORWARD_BufferInit(&hctrl[side].fdfrwrd, NULL);
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	2268      	movs	r2, #104	; 0x68
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	4413      	add	r3, r2
 80032da:	2100      	movs	r1, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fc05 	bl	8003aec <FEEDFORWARD_BufferInit>
		// Reset PID
		PID_Reset(&hctrl[side].pid);
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	2268      	movs	r2, #104	; 0x68
 80032e6:	fb02 f303 	mul.w	r3, r2, r3
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	4413      	add	r3, r2
 80032ee:	3334      	adds	r3, #52	; 0x34
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fd9e 	bl	8003e32 <PID_Reset>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	3301      	adds	r3, #1
 80032fa:	71fb      	strb	r3, [r7, #7]
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d9e5      	bls.n	80032ce <DIFFDRIVE_CONTROL_Reset+0x16>
	}

	// Reset encoder sensors
	DIFFDRIVE_ENCODER_Reset();
 8003302:	f7ff fd11 	bl	8002d28 <DIFFDRIVE_ENCODER_Reset>

}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000824 	.word	0x20000824

08003314 <DIFFDRIVE_TIMING_Start>:


void DIFFDRIVE_TIMING_Start(void){
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0

	// Starting timer in interrupt mode. It serve for control law timing
	HAL_TIM_Base_Start_IT(hdiffdrv->timing.htim);
 8003318:	4b04      	ldr	r3, [pc, #16]	; (800332c <DIFFDRIVE_TIMING_Start+0x18>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003320:	4618      	mov	r0, r3
 8003322:	f002 fb87 	bl	8005a34 <HAL_TIM_Base_Start_IT>

}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000824 	.word	0x20000824

08003330 <DIFFDRIVE_TIMING_Stop>:


void DIFFDRIVE_TIMING_Stop(void){
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0

	// Stop timer in interrupt mode
	HAL_TIM_Base_Stop_IT(hdiffdrv->timing.htim);
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <DIFFDRIVE_TIMING_Stop+0x18>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800333c:	4618      	mov	r0, r3
 800333e:	f002 fbe9 	bl	8005b14 <HAL_TIM_Base_Stop_IT>

}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000824 	.word	0x20000824

0800334c <DIFFDRIVE_TIMING_Wait>:


void DIFFDRIVE_TIMING_Wait(void){
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0

	// Wait until the timing flag is true
	while( !(hdiffdrv->timing.flag) )
 8003350:	e000      	b.n	8003354 <DIFFDRIVE_TIMING_Wait+0x8>
		__NOP();
 8003352:	bf00      	nop
	while( !(hdiffdrv->timing.flag) )
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <DIFFDRIVE_TIMING_Wait+0x30>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f083 0301 	eor.w	r3, r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f4      	bne.n	8003352 <DIFFDRIVE_TIMING_Wait+0x6>

	// Reset timing flag
	hdiffdrv->timing.flag= false;
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <DIFFDRIVE_TIMING_Wait+0x30>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

}
 8003372:	bf00      	nop
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	20000824 	.word	0x20000824

08003380 <DIFFDRIVE_STATE_Update>:


void DIFFDRIVE_STATE_Update(float* input){
 8003380:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003384:	b088      	sub	sp, #32
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_STATE_TypeDef* tmpstate= &(hdiffdrv->state);
 800338a:	4b60      	ldr	r3, [pc, #384]	; (800350c <DIFFDRIVE_STATE_Update+0x18c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003392:	61bb      	str	r3, [r7, #24]

	float delta_a, delta_th, theta;

	// Updating state
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 8003394:	2300      	movs	r3, #0
 8003396:	77fb      	strb	r3, [r7, #31]
 8003398:	e042      	b.n	8003420 <DIFFDRIVE_STATE_Update+0xa0>
		tmpstate->wheel[side]=       hdiffdrv->encoder[side].current_value;
 800339a:	4b5c      	ldr	r3, [pc, #368]	; (800350c <DIFFDRIVE_STATE_Update+0x18c>)
 800339c:	6819      	ldr	r1, [r3, #0]
 800339e:	7ffa      	ldrb	r2, [r7, #31]
 80033a0:	7ff8      	ldrb	r0, [r7, #31]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	69b9      	ldr	r1, [r7, #24]
 80033b4:	1c83      	adds	r3, r0, #2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3304      	adds	r3, #4
 80033bc:	601a      	str	r2, [r3, #0]
		tmpstate->delta_wheel[side]= hdiffdrv->encoder[side].current_value-hdiffdrv->encoder[side].previous_value;
 80033be:	4b53      	ldr	r3, [pc, #332]	; (800350c <DIFFDRIVE_STATE_Update+0x18c>)
 80033c0:	6819      	ldr	r1, [r3, #0]
 80033c2:	7ffa      	ldrb	r2, [r7, #31]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80033d2:	ed93 7a00 	vldr	s14, [r3]
 80033d6:	4b4d      	ldr	r3, [pc, #308]	; (800350c <DIFFDRIVE_STATE_Update+0x18c>)
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	7ffa      	ldrb	r2, [r7, #31]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80033ea:	edd3 7a00 	vldr	s15, [r3]
 80033ee:	7ffb      	ldrb	r3, [r7, #31]
 80033f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	3304      	adds	r3, #4
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	3304      	adds	r3, #4
 80033fe:	edc3 7a00 	vstr	s15, [r3]
		tmpstate->input[side]=       input[side];
 8003402:	7ffb      	ldrb	r3, [r7, #31]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	441a      	add	r2, r3
 800340a:	7ffb      	ldrb	r3, [r7, #31]
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	69b9      	ldr	r1, [r7, #24]
 8003410:	3306      	adds	r3, #6
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	3304      	adds	r3, #4
 8003418:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 800341a:	7ffb      	ldrb	r3, [r7, #31]
 800341c:	3301      	adds	r3, #1
 800341e:	77fb      	strb	r3, [r7, #31]
 8003420:	7ffb      	ldrb	r3, [r7, #31]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d9b9      	bls.n	800339a <DIFFDRIVE_STATE_Update+0x1a>
	}

	// Compute and update current pose
	DIFFDRIVE_DeltaWheel2DeltaTrajectory(&delta_a, &delta_th,  tmpstate->delta_wheel);
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f103 0214 	add.w	r2, r3, #20
 800342c:	f107 010c 	add.w	r1, r7, #12
 8003430:	f107 0310 	add.w	r3, r7, #16
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f8bf 	bl	80035b8 <DIFFDRIVE_DeltaWheel2DeltaTrajectory>

	theta= tmpstate->pose.theta;
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	617b      	str	r3, [r7, #20]
	tmpstate->pose.x_a   +=  delta_a*cos(theta);
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd f89f 	bl	8000588 <__aeabi_f2d>
 800344a:	4604      	mov	r4, r0
 800344c:	460d      	mov	r5, r1
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd f899 	bl	8000588 <__aeabi_f2d>
 8003456:	4680      	mov	r8, r0
 8003458:	4689      	mov	r9, r1
 800345a:	6978      	ldr	r0, [r7, #20]
 800345c:	f7fd f894 	bl	8000588 <__aeabi_f2d>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	ec43 2b10 	vmov	d0, r2, r3
 8003468:	f009 f85e 	bl	800c528 <cos>
 800346c:	ec53 2b10 	vmov	r2, r3, d0
 8003470:	4640      	mov	r0, r8
 8003472:	4649      	mov	r1, r9
 8003474:	f7fd f8e0 	bl	8000638 <__aeabi_dmul>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4620      	mov	r0, r4
 800347e:	4629      	mov	r1, r5
 8003480:	f7fc ff24 	bl	80002cc <__adddf3>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4610      	mov	r0, r2
 800348a:	4619      	mov	r1, r3
 800348c:	f7fd fbcc 	bl	8000c28 <__aeabi_d2f>
 8003490:	4602      	mov	r2, r0
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	601a      	str	r2, [r3, #0]
	tmpstate->pose.y_a   +=  delta_a*sin(theta);
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd f874 	bl	8000588 <__aeabi_f2d>
 80034a0:	4604      	mov	r4, r0
 80034a2:	460d      	mov	r5, r1
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd f86e 	bl	8000588 <__aeabi_f2d>
 80034ac:	4680      	mov	r8, r0
 80034ae:	4689      	mov	r9, r1
 80034b0:	6978      	ldr	r0, [r7, #20]
 80034b2:	f7fd f869 	bl	8000588 <__aeabi_f2d>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	ec43 2b10 	vmov	d0, r2, r3
 80034be:	f009 f883 	bl	800c5c8 <sin>
 80034c2:	ec53 2b10 	vmov	r2, r3, d0
 80034c6:	4640      	mov	r0, r8
 80034c8:	4649      	mov	r1, r9
 80034ca:	f7fd f8b5 	bl	8000638 <__aeabi_dmul>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4620      	mov	r0, r4
 80034d4:	4629      	mov	r1, r5
 80034d6:	f7fc fef9 	bl	80002cc <__adddf3>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4610      	mov	r0, r2
 80034e0:	4619      	mov	r1, r3
 80034e2:	f7fd fba1 	bl	8000c28 <__aeabi_d2f>
 80034e6:	4602      	mov	r2, r0
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	605a      	str	r2, [r3, #4]
	tmpstate->pose.theta +=  delta_th;
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80034f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80034f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003500:	bf00      	nop
 8003502:	3720      	adds	r7, #32
 8003504:	46bd      	mov	sp, r7
 8003506:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800350a:	bf00      	nop
 800350c:	20000824 	.word	0x20000824

08003510 <DIFFDRIVE_DeltaTrajectory2WheelAngle>:


void DIFFDRIVE_DeltaTrajectory2WheelAngle(float* wheel, float delta_a, float delta_theta){
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	ed87 0a02 	vstr	s0, [r7, #8]
 800351c:	edc7 0a01 	vstr	s1, [r7, #4]

	float r= hdiffdrv->mech_prmtr.r;
 8003520:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <DIFFDRIVE_DeltaTrajectory2WheelAngle+0xa4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003528:	617b      	str	r3, [r7, #20]
	float l= hdiffdrv->mech_prmtr.l;
 800352a:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <DIFFDRIVE_DeltaTrajectory2WheelAngle+0xa4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8003532:	613b      	str	r3, [r7, #16]

	// Target computation (it's affect input var "wheel" because is a pointer.
	// Also note the "+=" symbol and not "=")
	if( wheel != NULL){
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d035      	beq.n	80035a6 <DIFFDRIVE_DeltaTrajectory2WheelAngle+0x96>
		wheel[left ] +=  delta_a/r - l*delta_theta/r;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	ed93 7a00 	vldr	s14, [r3]
 8003540:	ed97 6a02 	vldr	s12, [r7, #8]
 8003544:	edd7 7a05 	vldr	s15, [r7, #20]
 8003548:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800354c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003550:	edd7 7a01 	vldr	s15, [r7, #4]
 8003554:	ee66 5a27 	vmul.f32	s11, s12, s15
 8003558:	ed97 6a05 	vldr	s12, [r7, #20]
 800355c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003560:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	edc3 7a00 	vstr	s15, [r3]
		wheel[right] +=  delta_a/r + l*delta_theta/r;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3304      	adds	r3, #4
 8003572:	ed93 7a00 	vldr	s14, [r3]
 8003576:	ed97 6a02 	vldr	s12, [r7, #8]
 800357a:	edd7 7a05 	vldr	s15, [r7, #20]
 800357e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003582:	ed97 6a04 	vldr	s12, [r7, #16]
 8003586:	edd7 7a01 	vldr	s15, [r7, #4]
 800358a:	ee66 5a27 	vmul.f32	s11, s12, s15
 800358e:	ed97 6a05 	vldr	s12, [r7, #20]
 8003592:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3304      	adds	r3, #4
 800359e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a2:	edc3 7a00 	vstr	s15, [r3]
	}

}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20000824 	.word	0x20000824

080035b8 <DIFFDRIVE_DeltaWheel2DeltaTrajectory>:

void DIFFDRIVE_DeltaWheel2DeltaTrajectory(float* delta_a_p, float* delta_theta_p, float* delta_wheel){
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]

	float r= hdiffdrv->mech_prmtr.r;
 80035c4:	4b1f      	ldr	r3, [pc, #124]	; (8003644 <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x8c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80035cc:	617b      	str	r3, [r7, #20]
	float l= hdiffdrv->mech_prmtr.l;
 80035ce:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x8c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80035d6:	613b      	str	r3, [r7, #16]

	// Trajectory Variations computation (it's affect input vars delta_a_p and delta_theta_p because are pointers)

	if( delta_a_p != NULL)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d013      	beq.n	8003606 <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x4e>
		*delta_a_p= (delta_wheel[right] + delta_wheel[left])*r/2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3304      	adds	r3, #4
 80035e2:	ed93 7a00 	vldr	s14, [r3]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	edd3 7a00 	vldr	s15, [r3]
 80035ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80035f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80035fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	edc3 7a00 	vstr	s15, [r3]

	if( delta_theta_p != NULL )
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d015      	beq.n	8003638 <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x80>
		*delta_theta_p= (delta_wheel[right] - delta_wheel[left])*r/(2*l);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	ed93 7a00 	vldr	s14, [r3]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	edd3 7a00 	vldr	s15, [r3]
 800361a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800361e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003622:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003626:	edd7 7a04 	vldr	s15, [r7, #16]
 800362a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800362e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	edc3 7a00 	vstr	s15, [r3]

}
 8003638:	bf00      	nop
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	20000824 	.word	0x20000824

08003648 <DIFFDRIVE_CONTROL_WheelStep>:


void DIFFDRIVE_CONTROL_WheelStep(float* newest_target){
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b08b      	sub	sp, #44	; 0x2c
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_CONTROL_TypeDef* hctrl=  hdiffdrv->control;
 8003650:	4b50      	ldr	r3, [pc, #320]	; (8003794 <DIFFDRIVE_CONTROL_WheelStep+0x14c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003658:	623b      	str	r3, [r7, #32]
	float curr_target[2], curr_measure, input[2];

	/* Do control wheels */

	// Waiting for step control enabling
	DIFFDRIVE_TIMING_Wait();
 800365a:	f7ff fe77 	bl	800334c <DIFFDRIVE_TIMING_Wait>

	// Then get wheel step measure If counters are not near overflow (look at CaptureMeasure function)
	if( (status= DIFFDRIVE_ENCODER_CaptureMeasure()) == DIFFDRIVE_ERROR ){
 800365e:	f7ff fab3 	bl	8002bc8 <DIFFDRIVE_ENCODER_CaptureMeasure>
 8003662:	4603      	mov	r3, r0
 8003664:	77fb      	strb	r3, [r7, #31]
 8003666:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800366e:	d10a      	bne.n	8003686 <DIFFDRIVE_CONTROL_WheelStep+0x3e>
		// If exception, reset control
		DIFFDRIVE_CONTROL_Reset();
 8003670:	f7ff fe22 	bl	80032b8 <DIFFDRIVE_CONTROL_Reset>
		// Reset target temporary variable
		newest_target[left ]= 0;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
		newest_target[right]= 0;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3304      	adds	r3, #4
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
	}

	// Compute input
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003686:	2300      	movs	r3, #0
 8003688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800368c:	e06f      	b.n	800376e <DIFFDRIVE_CONTROL_WheelStep+0x126>

		// Computing input using inversion control
		input[side]  = FEEDFORWARD_InversionControl(&(hctrl[side].fdfrwrd), newest_target[side]);
 800368e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003692:	2268      	movs	r2, #104	; 0x68
 8003694:	fb02 f303 	mul.w	r3, r2, r3
 8003698:	6a3a      	ldr	r2, [r7, #32]
 800369a:	4413      	add	r3, r2
 800369c:	4619      	mov	r1, r3
 800369e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	4413      	add	r3, r2
 80036a8:	edd3 7a00 	vldr	s15, [r3]
 80036ac:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 80036b0:	eeb0 0a67 	vmov.f32	s0, s15
 80036b4:	4608      	mov	r0, r1
 80036b6:	f000 faac 	bl	8003c12 <FEEDFORWARD_InversionControl>
 80036ba:	eef0 7a40 	vmov.f32	s15, s0
 80036be:	00a3      	lsls	r3, r4, #2
 80036c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036c4:	4413      	add	r3, r2
 80036c6:	3b20      	subs	r3, #32
 80036c8:	edc3 7a00 	vstr	s15, [r3]

		// Wheel angle read from sensor
		curr_measure= __DIFFDRIVE_ENCODER_GET_CURRENT_VALUE(hdiffdrv,side);
 80036cc:	4b31      	ldr	r3, [pc, #196]	; (8003794 <DIFFDRIVE_CONTROL_WheelStep+0x14c>)
 80036ce:	6819      	ldr	r1, [r3, #0]
 80036d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	61bb      	str	r3, [r7, #24]

		// Current target value saved in the feed-forward controller struct (you must call before the
		// Inversion Control function and then to extract this value. Look at feed-forward library to
		// better understand why)
		curr_target[side]= __FEEDFORWARD_GET_CURRENT_TARGET(&(hctrl[side].fdfrwrd));
 80036e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036ea:	2268      	movs	r2, #104	; 0x68
 80036ec:	fb02 f303 	mul.w	r3, r2, r3
 80036f0:	6a3a      	ldr	r2, [r7, #32]
 80036f2:	441a      	add	r2, r3
 80036f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003700:	440b      	add	r3, r1
 8003702:	3b18      	subs	r3, #24
 8003704:	601a      	str	r2, [r3, #0]

		// Computing PID input
		input[side] += PID_Control(&(hctrl[side].pid), curr_target[side], curr_measure);
 8003706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800370a:	2268      	movs	r2, #104	; 0x68
 800370c:	fb02 f303 	mul.w	r3, r2, r3
 8003710:	6a3a      	ldr	r2, [r7, #32]
 8003712:	4413      	add	r3, r2
 8003714:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003722:	440b      	add	r3, r1
 8003724:	3b18      	subs	r3, #24
 8003726:	edd3 7a00 	vldr	s15, [r3]
 800372a:	edd7 0a06 	vldr	s1, [r7, #24]
 800372e:	eeb0 0a67 	vmov.f32	s0, s15
 8003732:	4610      	mov	r0, r2
 8003734:	f000 fb9b 	bl	8003e6e <PID_Control>
 8003738:	eeb0 7a40 	vmov.f32	s14, s0
 800373c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003746:	4413      	add	r3, r2
 8003748:	3b20      	subs	r3, #32
 800374a:	edd3 7a00 	vldr	s15, [r3]
 800374e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800375c:	4413      	add	r3, r2
 800375e:	3b20      	subs	r3, #32
 8003760:	edc3 7a00 	vstr	s15, [r3]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003768:	3301      	adds	r3, #1
 800376a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800376e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003772:	2b01      	cmp	r3, #1
 8003774:	d98b      	bls.n	800368e <DIFFDRIVE_CONTROL_WheelStep+0x46>

	}

	// Set new PWMs signals
	DIFFDRIVE_MOTOR_SetPWMs(input);
 8003776:	f107 0308 	add.w	r3, r7, #8
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe ffee 	bl	800275c <DIFFDRIVE_MOTOR_SetPWMs>

	// Update differential drive state structure
	DIFFDRIVE_STATE_Update(input);
 8003780:	f107 0308 	add.w	r3, r7, #8
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fdfb 	bl	8003380 <DIFFDRIVE_STATE_Update>

}
 800378a:	bf00      	nop
 800378c:	372c      	adds	r7, #44	; 0x2c
 800378e:	46bd      	mov	sp, r7
 8003790:	bd90      	pop	{r4, r7, pc}
 8003792:	bf00      	nop
 8003794:	20000824 	.word	0x20000824

08003798 <DIFFDRIVE_TrackingStart>:

void DIFFDRIVE_TrackingStart(void){
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0

	// Start control
	DIFFDRIVE_CONTROL_Start();
 800379c:	f7ff fd7a 	bl	8003294 <DIFFDRIVE_CONTROL_Start>

	// First step wheels control (starts with zeros, robot still)
	DIFFDRIVE_TrackingStep(0,0);
 80037a0:	eddf 0a03 	vldr	s1, [pc, #12]	; 80037b0 <DIFFDRIVE_TrackingStart+0x18>
 80037a4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80037b0 <DIFFDRIVE_TrackingStart+0x18>
 80037a8:	f000 f80a 	bl	80037c0 <DIFFDRIVE_TrackingStep>

}
 80037ac:	bf00      	nop
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	00000000 	.word	0x00000000

080037b4 <DIFFDRIVE_TrackingStop>:


void DIFFDRIVE_TrackingStop(void){
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0

	// Stop control
	DIFFDRIVE_CONTROL_Stop();
 80037b8:	f7ff fd76 	bl	80032a8 <DIFFDRIVE_CONTROL_Stop>

}
 80037bc:	bf00      	nop
 80037be:	bd80      	pop	{r7, pc}

080037c0 <DIFFDRIVE_TrackingStep>:


void DIFFDRIVE_TrackingStep(float delta_a, float delta_theta){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80037ca:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_CONTROL_TypeDef* tmpctrl= hdiffdrv->control;
 80037ce:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <DIFFDRIVE_TrackingStep+0x78>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80037d6:	613b      	str	r3, [r7, #16]
	float newest_target[2];

	// Extracting previous target
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 80037d8:	2300      	movs	r3, #0
 80037da:	75fb      	strb	r3, [r7, #23]
 80037dc:	e010      	b.n	8003800 <DIFFDRIVE_TrackingStep+0x40>
		newest_target[side]= __FEEDFORWARD_GET_NEWEST_TARGET(&tmpctrl[side].fdfrwrd);
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	2268      	movs	r2, #104	; 0x68
 80037e2:	fb02 f303 	mul.w	r3, r2, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	441a      	add	r2, r3
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	f107 0118 	add.w	r1, r7, #24
 80037f4:	440b      	add	r3, r1
 80037f6:	3b10      	subs	r3, #16
 80037f8:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	3301      	adds	r3, #1
 80037fe:	75fb      	strb	r3, [r7, #23]
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d9eb      	bls.n	80037de <DIFFDRIVE_TrackingStep+0x1e>


	// Computing newest target
	DIFFDRIVE_DeltaTrajectory2WheelAngle(newest_target, delta_a, delta_theta);
 8003806:	f107 0308 	add.w	r3, r7, #8
 800380a:	edd7 0a00 	vldr	s1, [r7]
 800380e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff fe7c 	bl	8003510 <DIFFDRIVE_DeltaTrajectory2WheelAngle>

	// Make a wheel step motion
	DIFFDRIVE_CONTROL_WheelStep(newest_target);
 8003818:	f107 0308 	add.w	r3, r7, #8
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ff13 	bl	8003648 <DIFFDRIVE_CONTROL_WheelStep>

	// Updating History
	DIFFDRIVE_HISTORY_Update(delta_a, delta_theta);
 8003822:	edd7 0a00 	vldr	s1, [r7]
 8003826:	ed97 0a01 	vldr	s0, [r7, #4]
 800382a:	f7ff fac3 	bl	8002db4 <DIFFDRIVE_HISTORY_Update>


}
 800382e:	bf00      	nop
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000824 	.word	0x20000824

0800383c <DIFFDRIVE_TIMING_Callback>:
	DIFFDRIVE_MOTOR_Stop();

}


void DIFFDRIVE_TIMING_Callback(TIM_HandleTypeDef* htim){
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

	// Enabling timing flag
	hdiffdrv->timing.flag= true;
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <DIFFDRIVE_TIMING_Callback+0x20>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4


}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000824 	.word	0x20000824

08003860 <MAF_Create>:
#include <stdlib.h>

// Moving Average Filter Methods --------------------------------------------------------------------- //

// MAF Create
MAF_HandleTypeDef MAF_Create(const int buffsize, float *weights){
 8003860:	b5b0      	push	{r4, r5, r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
	MAF_HandleTypeDef tmp;

	tmp.buffsize = buffsize;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	613b      	str	r3, [r7, #16]
	tmp.buffer = (float*)calloc(buffsize,sizeof(float));
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2104      	movs	r1, #4
 8003874:	4618      	mov	r0, r3
 8003876:	f004 f9f9 	bl	8007c6c <calloc>
 800387a:	4603      	mov	r3, r0
 800387c:	623b      	str	r3, [r7, #32]
	tmp.sum = 0;
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
	tmp.avg = 0;
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
	tmp.idx = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
	tmp.weights= weights;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	627b      	str	r3, [r7, #36]	; 0x24


	return tmp;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	461d      	mov	r5, r3
 8003896:	f107 0410 	add.w	r4, r7, #16
 800389a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800389c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800389e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038a2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	3728      	adds	r7, #40	; 0x28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bdb0      	pop	{r4, r5, r7, pc}

080038ae <MAF_Reset>:

void MAF_Reset(MAF_HandleTypeDef* filter, float init_val){
 80038ae:	b480      	push	{r7}
 80038b0:	b085      	sub	sp, #20
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	ed87 0a00 	vstr	s0, [r7]

	filter->sum = init_val;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	605a      	str	r2, [r3, #4]
	filter->avg = init_val;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	609a      	str	r2, [r3, #8]
	filter->idx = 0;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	60da      	str	r2, [r3, #12]

	for(int i=0; i < filter->buffsize; i++)
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	e009      	b.n	80038e6 <MAF_Reset+0x38>
		filter->buffer[i]= init_val;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691a      	ldr	r2, [r3, #16]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	601a      	str	r2, [r3, #0]
	for(int i=0; i < filter->buffsize; i++)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3301      	adds	r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	dbf0      	blt.n	80038d2 <MAF_Reset+0x24>
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <MAF_Update>:

// Maf update. Arithmetic or Weighted. If latter the weights array are ordered from oldest to newest
void MAF_Update(MAF_HandleTypeDef* filter, const float data){
 80038fe:	b480      	push	{r7}
 8003900:	b087      	sub	sp, #28
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	ed87 0a00 	vstr	s0, [r7]

	// Weighted
	if(filter->weights != NULL){
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d03e      	beq.n	8003990 <MAF_Update+0x92>
		// Store current measure
		filter->buffer[filter->idx] = data;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	601a      	str	r2, [r3, #0]

		// Sum variable
		float sum_tmp = 0;
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	617b      	str	r3, [r7, #20]
		// Index variable to scan the circular buffer
		int idx_tmp;

		// Computing average from oldest to newest (from 1 to size+1), in circular buffer
		// the oldest are the next value from the current
		for(int i=1; i<filter->buffsize+1; i++){
 8003928:	2301      	movs	r3, #1
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	e027      	b.n	800397e <MAF_Update+0x80>
			// Current buffer index in the for loop (the mod '%' serve for the circular index)
			idx_tmp = (filter->idx+i)%(filter->buffsize);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4413      	add	r3, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	fb93 f1f2 	sdiv	r1, r3, r2
 800393e:	fb02 f201 	mul.w	r2, r2, r1
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
			// Current sum
			sum_tmp += (filter->buffer[idx_tmp])*(filter->weights[i-1]) 	;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	ed93 7a00 	vldr	s14, [r3]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800395e:	3b01      	subs	r3, #1
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	edd3 7a00 	vldr	s15, [r3]
 8003968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003974:	edc7 7a05 	vstr	s15, [r7, #20]
		for(int i=1; i<filter->buffsize+1; i++){
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	3301      	adds	r3, #1
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	429a      	cmp	r2, r3
 8003986:	ddd2      	ble.n	800392e <MAF_Update+0x30>
		}
		filter->avg = sum_tmp;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	609a      	str	r2, [r3, #8]
 800398e:	e02f      	b.n	80039f0 <MAF_Update+0xf2>
	}
	// Arithmetic
	else{
		// Remove oldest value from circular buffer
		filter->sum -= filter->buffer[filter->idx];
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	ed93 7a01 	vldr	s14, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	edd3 7a00 	vldr	s15, [r3]
 80039a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	edc3 7a01 	vstr	s15, [r3, #4]

		// Add current measure
		filter->sum += data;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80039b6:	edd7 7a00 	vldr	s15, [r7]
 80039ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	edc3 7a01 	vstr	s15, [r3, #4]

		// Calculate Average
		filter->avg = (float) filter->sum/filter->buffsize;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	edc3 7a02 	vstr	s15, [r3, #8]

		// Store current measure
		filter->buffer[filter->idx] = data;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	601a      	str	r2, [r3, #0]
	}

	// Increase index (the mod '%' serve for the circular buffer)
	filter->idx = (filter->idx+1)%(filter->buffsize);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	3301      	adds	r3, #1
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80039fe:	fb02 f201 	mul.w	r2, r2, r1
 8003a02:	1a9a      	subs	r2, r3, r2
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	60da      	str	r2, [r3, #12]

}
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <FEEDFORWARD_Init>:

#include <stdlib.h>
#include "my_lib/feedforward_controller.h"


void FEEDFORWARD_Init(FEEDFORWARD_HandleTypeDef* hctrl){
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]

	// Initializing handle structure values from Init field
	hctrl->arma.n_ar=  hctrl->Init.arma_n_ar;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	881a      	ldrh	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	821a      	strh	r2, [r3, #16]
	hctrl->arma.n_ma=  hctrl->Init.arma_n_ma;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	885a      	ldrh	r2, [r3, #2]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	825a      	strh	r2, [r3, #18]
	hctrl->arma.tau=   hctrl->Init.arma_tau;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	889a      	ldrh	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	829a      	strh	r2, [r3, #20]

	hctrl->arma.AR= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8a1b      	ldrh	r3, [r3, #16]
 8003a38:	2104      	movs	r1, #4
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f004 f916 	bl	8007c6c <calloc>
 8003a40:	4603      	mov	r3, r0
 8003a42:	461a      	mov	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	619a      	str	r2, [r3, #24]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	e00e      	b.n	8003a6c <FEEDFORWARD_Init+0x58>
		hctrl->arma.AR[i]= hctrl->Init.arma_AR[i];
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	441a      	add	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6999      	ldr	r1, [r3, #24]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	8a1b      	ldrh	r3, [r3, #16]
 8003a70:	461a      	mov	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4293      	cmp	r3, r2
 8003a76:	dbea      	blt.n	8003a4e <FEEDFORWARD_Init+0x3a>

	hctrl->arma.MA= (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8a5b      	ldrh	r3, [r3, #18]
 8003a7c:	2104      	movs	r1, #4
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f004 f8f4 	bl	8007c6c <calloc>
 8003a84:	4603      	mov	r3, r0
 8003a86:	461a      	mov	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	61da      	str	r2, [r3, #28]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60bb      	str	r3, [r7, #8]
 8003a90:	e00e      	b.n	8003ab0 <FEEDFORWARD_Init+0x9c>
		hctrl->arma.MA[i]= hctrl->Init.arma_MA[i];
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	441a      	add	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69d9      	ldr	r1, [r3, #28]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	3301      	adds	r3, #1
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8a5b      	ldrh	r3, [r3, #18]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	dbea      	blt.n	8003a92 <FEEDFORWARD_Init+0x7e>

	// Allocating history' arrays
	hctrl->target_buffer= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8a1b      	ldrh	r3, [r3, #16]
 8003ac0:	2104      	movs	r1, #4
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f004 f8d2 	bl	8007c6c <calloc>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	461a      	mov	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24
	hctrl->input_buffer=  (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8a5b      	ldrh	r3, [r3, #18]
 8003ad4:	2104      	movs	r1, #4
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f004 f8c8 	bl	8007c6c <calloc>
 8003adc:	4603      	mov	r3, r0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	621a      	str	r2, [r3, #32]

}
 8003ae4:	bf00      	nop
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <FEEDFORWARD_BufferInit>:
	// Reset feed-forward buffer (with NULL value in second argument the buffers are initialized with zeros)
	FEEDFORWARD_BufferInit(hctrl, NULL);

}

void FEEDFORWARD_BufferInit(FEEDFORWARD_HandleTypeDef* hctrl, float *target_init){
 8003aec:	b490      	push	{r4, r7}
 8003aee:	b08c      	sub	sp, #48	; 0x30
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f107 0408 	add.w	r4, r7, #8
 8003afc:	3310      	adds	r3, #16
 8003afe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint16_t n_ar= arma.n_ar;
 8003b04:	893b      	ldrh	r3, [r7, #8]
 8003b06:	83fb      	strh	r3, [r7, #30]
	uint16_t n_ma= arma.n_ma;
 8003b08:	897b      	ldrh	r3, [r7, #10]
 8003b0a:	83bb      	strh	r3, [r7, #28]
	uint16_t  tau= arma.tau;
 8003b0c:	89bb      	ldrh	r3, [r7, #12]
 8003b0e:	837b      	strh	r3, [r7, #26]

	// If target pointer is equal to NULL the buffers take zero values
	if( (void *)target_init == NULL ){
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d129      	bne.n	8003b6a <FEEDFORWARD_BufferInit+0x7e>

		for(int i= 0; i < tau; i++)
 8003b16:	2300      	movs	r3, #0
 8003b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1a:	e00d      	b.n	8003b38 <FEEDFORWARD_BufferInit+0x4c>
			hctrl->target_buffer[(n_ar-1)-i]= 0;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b20:	8bfb      	ldrh	r3, [r7, #30]
 8003b22:	1e59      	subs	r1, r3, #1
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b26:	1acb      	subs	r3, r1, r3
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
		for(int i= 0; i < tau; i++)
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	3301      	adds	r3, #1
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b38:	8b7b      	ldrh	r3, [r7, #26]
 8003b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	dbed      	blt.n	8003b1c <FEEDFORWARD_BufferInit+0x30>

		// Complete first values with the same initial value
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 8003b40:	8bfb      	ldrh	r3, [r7, #30]
 8003b42:	1e5a      	subs	r2, r3, #1
 8003b44:	8b7b      	ldrh	r3, [r7, #26]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b4a:	e00a      	b.n	8003b62 <FEEDFORWARD_BufferInit+0x76>
			hctrl->target_buffer[i]= 0;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	daf1      	bge.n	8003b4c <FEEDFORWARD_BufferInit+0x60>
 8003b68:	e02d      	b.n	8003bc6 <FEEDFORWARD_BufferInit+0xda>

	}
	// Else I use the input values
	else{
		for(int i= 0; i < tau; i++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6e:	e012      	b.n	8003b96 <FEEDFORWARD_BufferInit+0xaa>
			hctrl->target_buffer[(n_ar-1)-i]= target_init[tau-i];
 8003b70:	8b7a      	ldrh	r2, [r7, #26]
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	441a      	add	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b80:	8bfb      	ldrh	r3, [r7, #30]
 8003b82:	1e58      	subs	r0, r3, #1
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	1ac3      	subs	r3, r0, r3
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	601a      	str	r2, [r3, #0]
		for(int i= 0; i < tau; i++)
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	3301      	adds	r3, #1
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
 8003b96:	8b7b      	ldrh	r3, [r7, #26]
 8003b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	dbe8      	blt.n	8003b70 <FEEDFORWARD_BufferInit+0x84>

		// Complete first values with the same initial value
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 8003b9e:	8bfb      	ldrh	r3, [r7, #30]
 8003ba0:	1e5a      	subs	r2, r3, #1
 8003ba2:	8b7b      	ldrh	r3, [r7, #26]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	623b      	str	r3, [r7, #32]
 8003ba8:	e00a      	b.n	8003bc0 <FEEDFORWARD_BufferInit+0xd4>
			hctrl->target_buffer[i]= target_init[0];
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	601a      	str	r2, [r3, #0]
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	623b      	str	r3, [r7, #32]
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	daf1      	bge.n	8003baa <FEEDFORWARD_BufferInit+0xbe>
	}

	// Set current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[n_ar-1-tau];
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bca:	8bfb      	ldrh	r3, [r7, #30]
 8003bcc:	1e59      	subs	r1, r3, #1
 8003bce:	8b7b      	ldrh	r3, [r7, #26]
 8003bd0:	1acb      	subs	r3, r1, r3
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[n_ma-1];
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1a      	ldr	r2, [r3, #32]
 8003be0:	8bbb      	ldrh	r3, [r7, #28]
 8003be2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003be6:	3b01      	subs	r3, #1
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bf6:	893b      	ldrh	r3, [r7, #8]
 8003bf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c08:	bf00      	nop
 8003c0a:	3730      	adds	r7, #48	; 0x30
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc90      	pop	{r4, r7}
 8003c10:	4770      	bx	lr

08003c12 <FEEDFORWARD_InversionControl>:


float FEEDFORWARD_InversionControl(FEEDFORWARD_HandleTypeDef* hctrl, float newest_target){
 8003c12:	b590      	push	{r4, r7, lr}
 8003c14:	b08f      	sub	sp, #60	; 0x3c
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	ed87 0a00 	vstr	s0, [r7]

	float input= 0;
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	637b      	str	r3, [r7, #52]	; 0x34
	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f107 040c 	add.w	r4, r7, #12
 8003c2a:	3310      	adds	r3, #16
 8003c2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int oldest_ar_sample= 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	62bb      	str	r3, [r7, #40]	; 0x28
	int newest_ar_sample= arma.n_ar-1;  // Last minus one because
 8003c36:	89bb      	ldrh	r3, [r7, #12]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
								    	//
	int oldest_ma_sample= 0;			//
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	623b      	str	r3, [r7, #32]
	int newest_ma_sample= arma.n_ma-1;  // C arrays start from 0
 8003c40:	89fb      	ldrh	r3, [r7, #14]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	61fb      	str	r3, [r7, #28]

	// Assigning the newest target value
	hctrl->target_buffer[newest_ar_sample]= newest_target;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	601a      	str	r2, [r3, #0]

	// Compute feed-forward input (inversion control)
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	633b      	str	r3, [r7, #48]	; 0x30
 8003c58:	e019      	b.n	8003c8e <FEEDFORWARD_InversionControl+0x7c>
		input += arma.AR[newest_ar_sample-i]*hctrl->target_buffer[i];
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	1acb      	subs	r3, r1, r3
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	ed93 7a00 	vldr	s14, [r3]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	edd3 7a00 	vldr	s15, [r3]
 8003c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c84:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	429a      	cmp	r2, r3
 8003c94:	dde1      	ble.n	8003c5a <FEEDFORWARD_InversionControl+0x48>
	// I know inputs until the newest_ma_sample-1
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c9a:	e01b      	b.n	8003cd4 <FEEDFORWARD_InversionControl+0xc2>
		input += -arma.MA[newest_ma_sample-j]*hctrl->input_buffer[j];
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	69f9      	ldr	r1, [r7, #28]
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	1acb      	subs	r3, r1, r3
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	eeb1 7a67 	vneg.f32	s14, s15
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1a      	ldr	r2, [r3, #32]
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	edd3 7a00 	vldr	s15, [r3]
 8003cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cca:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	dcdf      	bgt.n	8003c9c <FEEDFORWARD_InversionControl+0x8a>
	// Last input is computed here
	input /= arma.MA[0];
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	ed93 7a00 	vldr	s14, [r3]
 8003ce2:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8003ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cea:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Saving newest input
	hctrl->input_buffer[newest_ma_sample]= input;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1a      	ldr	r2, [r3, #32]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cfa:	601a      	str	r2, [r3, #0]

	// Updating Buffer for next step
	FEEDFORWARD_BufferUpdate(hctrl);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f808 	bl	8003d12 <FEEDFORWARD_BufferUpdate>

	return input;
 8003d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d04:	ee07 3a90 	vmov	s15, r3
}
 8003d08:	eeb0 0a67 	vmov.f32	s0, s15
 8003d0c:	373c      	adds	r7, #60	; 0x3c
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd90      	pop	{r4, r7, pc}

08003d12 <FEEDFORWARD_BufferUpdate>:


void FEEDFORWARD_BufferUpdate(FEEDFORWARD_HandleTypeDef* hctrl){
 8003d12:	b490      	push	{r4, r7}
 8003d14:	b088      	sub	sp, #32
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f107 0408 	add.w	r4, r7, #8
 8003d20:	3310      	adds	r3, #16
 8003d22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Updating current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[arma.n_ar-1-arma.tau];
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d2c:	893b      	ldrh	r3, [r7, #8]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	89b9      	ldrh	r1, [r7, #12]
 8003d32:	1a5b      	subs	r3, r3, r1
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[arma.n_ma-1];
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1a      	ldr	r2, [r3, #32]
 8003d42:	897b      	ldrh	r3, [r7, #10]
 8003d44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d58:	893b      	ldrh	r3, [r7, #8]
 8003d5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30

	// Then slide buffers ( look, loops go from idx=0 to idx=n-2 )
	for(int i=0; i < arma.n_ar-1; i++)
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	e00f      	b.n	8003d90 <FEEDFORWARD_BufferUpdate+0x7e>
		hctrl->target_buffer[i]= hctrl->target_buffer[i+1];
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	3301      	adds	r3, #1
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	441a      	add	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ar-1; i++)
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	893b      	ldrh	r3, [r7, #8]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	dbea      	blt.n	8003d70 <FEEDFORWARD_BufferUpdate+0x5e>
	for(int i=0; i < arma.n_ma-1; i++)
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	e00f      	b.n	8003dc0 <FEEDFORWARD_BufferUpdate+0xae>
		hctrl->input_buffer[i]= hctrl->input_buffer[i+1];
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1a      	ldr	r2, [r3, #32]
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	3301      	adds	r3, #1
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	441a      	add	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a19      	ldr	r1, [r3, #32]
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ma-1; i++)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	897b      	ldrh	r3, [r7, #10]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	dbea      	blt.n	8003da0 <FEEDFORWARD_BufferUpdate+0x8e>

}
 8003dca:	bf00      	nop
 8003dcc:	bf00      	nop
 8003dce:	3720      	adds	r7, #32
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc90      	pop	{r4, r7}
 8003dd4:	4770      	bx	lr

08003dd6 <PID_Init>:
 */

#include "my_lib/pid_controller.h"


void PID_Init(PID_HandleTypeDef* hpid){
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]

	// Init parameters
	hpid->P=  hpid->Init.P;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	611a      	str	r2, [r3, #16]
	hpid->I=  hpid->Init.I;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	615a      	str	r2, [r3, #20]
	hpid->D=  hpid->Init.D;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	619a      	str	r2, [r3, #24]
	hpid->Ts= hpid->Init.Ts;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30

	// Init Input contributes variables
	hpid->u_I= 0;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	625a      	str	r2, [r3, #36]	; 0x24
	hpid->u_P= 0;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	61da      	str	r2, [r3, #28]

	// Init Previous variables
	hpid->u_prev= 0;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <PID_Reset>:



// Reset input buffer and the contributes variables
void PID_Reset(PID_HandleTypeDef* hpid){
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]

	hpid->u_I= 0;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24
	hpid->u_P= 0;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	61da      	str	r2, [r3, #28]

	hpid->u_prev= 0;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	62da      	str	r2, [r3, #44]	; 0x2c



}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <PID_Control>:

float PID_Control(PID_HandleTypeDef* hpid, float target, float measure){
 8003e6e:	b480      	push	{r7}
 8003e70:	b089      	sub	sp, #36	; 0x24
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e7a:	edc7 0a01 	vstr	s1, [r7, #4]

	float e_prev,e_curr, Ts, u;

	// Time step
	Ts= hpid->Ts;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	61fb      	str	r3, [r7, #28]

	// Following error
	e_curr= target-measure;
 8003e84:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e88:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e90:	edc7 7a06 	vstr	s15, [r7, #24]
	e_prev= hpid->e_prev;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	617b      	str	r3, [r7, #20]

	// Proportional
	hpid->u_P= hpid->P*e_curr;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003ea0:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	edc3 7a07 	vstr	s15, [r3, #28]

	// Integral
	hpid->u_I += hpid->I*e_prev*Ts;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	ed93 7a08 	vldr	s14, [r3, #32]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	edd3 6a05 	vldr	s13, [r3, #20]
 8003eba:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ebe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ec2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	edc3 7a08 	vstr	s15, [r3, #32]

	// Derivative
	hpid->u_D = hpid->D*(e_curr-e_prev)/Ts;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	ed93 7a06 	vldr	s14, [r3, #24]
 8003eda:	edd7 6a06 	vldr	s13, [r7, #24]
 8003ede:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ee2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003ee6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003eea:	ed97 7a07 	vldr	s14, [r7, #28]
 8003eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Input
	u= hpid->u_P + hpid->u_I + hpid->u_D;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	ed93 7a07 	vldr	s14, [r3, #28]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	edd3 7a08 	vldr	s15, [r3, #32]
 8003f04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f12:	edc7 7a04 	vstr	s15, [r7, #16]

	// Updating struct
	hpid->u_prev= u;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= e_curr;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	62da      	str	r2, [r3, #44]	; 0x2c

	return u;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	ee07 3a90 	vmov	s15, r3

}
 8003f28:	eeb0 0a67 	vmov.f32	s0, s15
 8003f2c:	3724      	adds	r7, #36	; 0x24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	db04      	blt.n	8003f4e <_isatty+0x18>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	dc01      	bgt.n	8003f4e <_isatty+0x18>
    return 1;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e005      	b.n	8003f5a <_isatty+0x24>

  errno = EBADF;
 8003f4e:	f003 fe95 	bl	8007c7c <__errno>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2209      	movs	r2, #9
 8003f56:	601a      	str	r2, [r3, #0]
  return 0;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <_write>:

int _write(int fd, char* ptr, int len) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d002      	beq.n	8003f7c <_write+0x18>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d111      	bne.n	8003fa0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003f7c:	4b0e      	ldr	r3, [pc, #56]	; (8003fb8 <_write+0x54>)
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	f003 f81d 	bl	8006fc8 <HAL_UART_Transmit>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <_write+0x38>
      return len;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	e008      	b.n	8003fae <_write+0x4a>
    else
      return EIO;
 8003f9c:	2305      	movs	r3, #5
 8003f9e:	e006      	b.n	8003fae <_write+0x4a>
  }
  errno = EBADF;
 8003fa0:	f003 fe6c 	bl	8007c7c <__errno>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2209      	movs	r2, #9
 8003fa8:	601a      	str	r2, [r3, #0]
  return -1;
 8003faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000828 	.word	0x20000828

08003fbc <_close>:

int _close(int fd) {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	db04      	blt.n	8003fd4 <_close+0x18>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	dc01      	bgt.n	8003fd4 <_close+0x18>
    return 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e006      	b.n	8003fe2 <_close+0x26>

  errno = EBADF;
 8003fd4:	f003 fe52 	bl	8007c7c <__errno>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2209      	movs	r2, #9
 8003fdc:	601a      	str	r2, [r3, #0]
  return -1;
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8003ff6:	f003 fe41 	bl	8007c7c <__errno>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2209      	movs	r2, #9
 8003ffe:	601a      	str	r2, [r3, #0]
  return -1;
 8004000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <_read>:

int _read(int fd, char* ptr, int len) {
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d110      	bne.n	8004040 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800401e:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <_read+0x4c>)
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004026:	2201      	movs	r2, #1
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	f003 f85f 	bl	80070ec <HAL_UART_Receive>
 800402e:	4603      	mov	r3, r0
 8004030:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8004032:	7dfb      	ldrb	r3, [r7, #23]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <_read+0x30>
      return 1;
 8004038:	2301      	movs	r3, #1
 800403a:	e008      	b.n	800404e <_read+0x42>
    else
      return EIO;
 800403c:	2305      	movs	r3, #5
 800403e:	e006      	b.n	800404e <_read+0x42>
  }
  errno = EBADF;
 8004040:	f003 fe1c 	bl	8007c7c <__errno>
 8004044:	4603      	mov	r3, r0
 8004046:	2209      	movs	r2, #9
 8004048:	601a      	str	r2, [r3, #0]
  return -1;
 800404a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20000828 	.word	0x20000828

0800405c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	db08      	blt.n	800407e <_fstat+0x22>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b02      	cmp	r3, #2
 8004070:	dc05      	bgt.n	800407e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004078:	605a      	str	r2, [r3, #4]
    return 0;
 800407a:	2300      	movs	r3, #0
 800407c:	e005      	b.n	800408a <_fstat+0x2e>
  }

  errno = EBADF;
 800407e:	f003 fdfd 	bl	8007c7c <__errno>
 8004082:	4603      	mov	r3, r0
 8004084:	2209      	movs	r2, #9
 8004086:	601a      	str	r2, [r3, #0]
  return 0;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004098:	480d      	ldr	r0, [pc, #52]	; (80040d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800409a:	490e      	ldr	r1, [pc, #56]	; (80040d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800409c:	4a0e      	ldr	r2, [pc, #56]	; (80040d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800409e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040a0:	e002      	b.n	80040a8 <LoopCopyDataInit>

080040a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040a6:	3304      	adds	r3, #4

080040a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040ac:	d3f9      	bcc.n	80040a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ae:	4a0b      	ldr	r2, [pc, #44]	; (80040dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80040b0:	4c0b      	ldr	r4, [pc, #44]	; (80040e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80040b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040b4:	e001      	b.n	80040ba <LoopFillZerobss>

080040b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040b8:	3204      	adds	r2, #4

080040ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040bc:	d3fb      	bcc.n	80040b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80040be:	f7fd ff7f 	bl	8001fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040c2:	f003 fde1 	bl	8007c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040c6:	f7fc ffc3 	bl	8001050 <main>
  bx  lr    
 80040ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80040d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040d4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80040d8:	0800dd48 	.word	0x0800dd48
  ldr r2, =_sbss
 80040dc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80040e0:	20000840 	.word	0x20000840

080040e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040e4:	e7fe      	b.n	80040e4 <ADC_IRQHandler>
	...

080040e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040ec:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <HAL_Init+0x40>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a0d      	ldr	r2, [pc, #52]	; (8004128 <HAL_Init+0x40>)
 80040f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_Init+0x40>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <HAL_Init+0x40>)
 80040fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004102:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004104:	4b08      	ldr	r3, [pc, #32]	; (8004128 <HAL_Init+0x40>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a07      	ldr	r2, [pc, #28]	; (8004128 <HAL_Init+0x40>)
 800410a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004110:	2003      	movs	r0, #3
 8004112:	f000 f94f 	bl	80043b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004116:	2000      	movs	r0, #0
 8004118:	f000 f808 	bl	800412c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800411c:	f7fd fd18 	bl	8001b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40023c00 	.word	0x40023c00

0800412c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004134:	4b12      	ldr	r3, [pc, #72]	; (8004180 <HAL_InitTick+0x54>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4b12      	ldr	r3, [pc, #72]	; (8004184 <HAL_InitTick+0x58>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	4619      	mov	r1, r3
 800413e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004142:	fbb3 f3f1 	udiv	r3, r3, r1
 8004146:	fbb2 f3f3 	udiv	r3, r2, r3
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f967 	bl	800441e <HAL_SYSTICK_Config>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e00e      	b.n	8004178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b0f      	cmp	r3, #15
 800415e:	d80a      	bhi.n	8004176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004160:	2200      	movs	r2, #0
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004168:	f000 f92f 	bl	80043ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800416c:	4a06      	ldr	r2, [pc, #24]	; (8004188 <HAL_InitTick+0x5c>)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e000      	b.n	8004178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000000 	.word	0x20000000
 8004184:	20000008 	.word	0x20000008
 8004188:	20000004 	.word	0x20000004

0800418c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <HAL_IncTick+0x20>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	461a      	mov	r2, r3
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <HAL_IncTick+0x24>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4413      	add	r3, r2
 800419c:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <HAL_IncTick+0x24>)
 800419e:	6013      	str	r3, [r2, #0]
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000008 	.word	0x20000008
 80041b0:	2000082c 	.word	0x2000082c

080041b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return uwTick;
 80041b8:	4b03      	ldr	r3, [pc, #12]	; (80041c8 <HAL_GetTick+0x14>)
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	2000082c 	.word	0x2000082c

080041cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041d4:	f7ff ffee 	bl	80041b4 <HAL_GetTick>
 80041d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041e4:	d005      	beq.n	80041f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <HAL_Delay+0x44>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4413      	add	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041f2:	bf00      	nop
 80041f4:	f7ff ffde 	bl	80041b4 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	429a      	cmp	r2, r3
 8004202:	d8f7      	bhi.n	80041f4 <HAL_Delay+0x28>
  {
  }
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000008 	.word	0x20000008

08004214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004224:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <__NVIC_SetPriorityGrouping+0x44>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004230:	4013      	ands	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800423c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004246:	4a04      	ldr	r2, [pc, #16]	; (8004258 <__NVIC_SetPriorityGrouping+0x44>)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	60d3      	str	r3, [r2, #12]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004260:	4b04      	ldr	r3, [pc, #16]	; (8004274 <__NVIC_GetPriorityGrouping+0x18>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	f003 0307 	and.w	r3, r3, #7
}
 800426a:	4618      	mov	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004286:	2b00      	cmp	r3, #0
 8004288:	db0b      	blt.n	80042a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	f003 021f 	and.w	r2, r3, #31
 8004290:	4907      	ldr	r1, [pc, #28]	; (80042b0 <__NVIC_EnableIRQ+0x38>)
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	2001      	movs	r0, #1
 800429a:	fa00 f202 	lsl.w	r2, r0, r2
 800429e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	e000e100 	.word	0xe000e100

080042b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	6039      	str	r1, [r7, #0]
 80042be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	db0a      	blt.n	80042de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	490c      	ldr	r1, [pc, #48]	; (8004300 <__NVIC_SetPriority+0x4c>)
 80042ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d2:	0112      	lsls	r2, r2, #4
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	440b      	add	r3, r1
 80042d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042dc:	e00a      	b.n	80042f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	4908      	ldr	r1, [pc, #32]	; (8004304 <__NVIC_SetPriority+0x50>)
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	3b04      	subs	r3, #4
 80042ec:	0112      	lsls	r2, r2, #4
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	440b      	add	r3, r1
 80042f2:	761a      	strb	r2, [r3, #24]
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	e000e100 	.word	0xe000e100
 8004304:	e000ed00 	.word	0xe000ed00

08004308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004308:	b480      	push	{r7}
 800430a:	b089      	sub	sp, #36	; 0x24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f1c3 0307 	rsb	r3, r3, #7
 8004322:	2b04      	cmp	r3, #4
 8004324:	bf28      	it	cs
 8004326:	2304      	movcs	r3, #4
 8004328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	3304      	adds	r3, #4
 800432e:	2b06      	cmp	r3, #6
 8004330:	d902      	bls.n	8004338 <NVIC_EncodePriority+0x30>
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	3b03      	subs	r3, #3
 8004336:	e000      	b.n	800433a <NVIC_EncodePriority+0x32>
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800433c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43da      	mvns	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	401a      	ands	r2, r3
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004350:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	43d9      	mvns	r1, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004360:	4313      	orrs	r3, r2
         );
}
 8004362:	4618      	mov	r0, r3
 8004364:	3724      	adds	r7, #36	; 0x24
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
	...

08004370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3b01      	subs	r3, #1
 800437c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004380:	d301      	bcc.n	8004386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004382:	2301      	movs	r3, #1
 8004384:	e00f      	b.n	80043a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004386:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <SysTick_Config+0x40>)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3b01      	subs	r3, #1
 800438c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800438e:	210f      	movs	r1, #15
 8004390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004394:	f7ff ff8e 	bl	80042b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <SysTick_Config+0x40>)
 800439a:	2200      	movs	r2, #0
 800439c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800439e:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <SysTick_Config+0x40>)
 80043a0:	2207      	movs	r2, #7
 80043a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	e000e010 	.word	0xe000e010

080043b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff ff29 	bl	8004214 <__NVIC_SetPriorityGrouping>
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b086      	sub	sp, #24
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	4603      	mov	r3, r0
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043dc:	f7ff ff3e 	bl	800425c <__NVIC_GetPriorityGrouping>
 80043e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	6978      	ldr	r0, [r7, #20]
 80043e8:	f7ff ff8e 	bl	8004308 <NVIC_EncodePriority>
 80043ec:	4602      	mov	r2, r0
 80043ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f2:	4611      	mov	r1, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff ff5d 	bl	80042b4 <__NVIC_SetPriority>
}
 80043fa:	bf00      	nop
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	4603      	mov	r3, r0
 800440a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800440c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff31 	bl	8004278 <__NVIC_EnableIRQ>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ffa2 	bl	8004370 <SysTick_Config>
 800442c:	4603      	mov	r3, r0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004444:	f7ff feb6 	bl	80041b4 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e099      	b.n	8004588 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0201 	bic.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004474:	e00f      	b.n	8004496 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004476:	f7ff fe9d 	bl	80041b4 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b05      	cmp	r3, #5
 8004482:	d908      	bls.n	8004496 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2203      	movs	r2, #3
 800448e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e078      	b.n	8004588 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e8      	bne.n	8004476 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	4b38      	ldr	r3, [pc, #224]	; (8004590 <HAL_DMA_Init+0x158>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d107      	bne.n	8004500 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	4313      	orrs	r3, r2
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f023 0307 	bic.w	r3, r3, #7
 8004516:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	2b04      	cmp	r3, #4
 8004528:	d117      	bne.n	800455a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00e      	beq.n	800455a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fa6f 	bl	8004a20 <DMA_CheckFifoParam>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2240      	movs	r2, #64	; 0x40
 800454c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004556:	2301      	movs	r3, #1
 8004558:	e016      	b.n	8004588 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fa26 	bl	80049b4 <DMA_CalcBaseAndBitshift>
 8004568:	4603      	mov	r3, r0
 800456a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	223f      	movs	r2, #63	; 0x3f
 8004572:	409a      	lsls	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	f010803f 	.word	0xf010803f

08004594 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_DMA_Start_IT+0x26>
 80045b6:	2302      	movs	r3, #2
 80045b8:	e040      	b.n	800463c <HAL_DMA_Start_IT+0xa8>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d12f      	bne.n	800462e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2202      	movs	r2, #2
 80045d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f9b8 	bl	8004958 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ec:	223f      	movs	r2, #63	; 0x3f
 80045ee:	409a      	lsls	r2, r3
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0216 	orr.w	r2, r2, #22
 8004602:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	2b00      	cmp	r3, #0
 800460a:	d007      	beq.n	800461c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0208 	orr.w	r2, r2, #8
 800461a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	e005      	b.n	800463a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004636:	2302      	movs	r3, #2
 8004638:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800463a:	7dfb      	ldrb	r3, [r7, #23]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004650:	4b92      	ldr	r3, [pc, #584]	; (800489c <HAL_DMA_IRQHandler+0x258>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a92      	ldr	r2, [pc, #584]	; (80048a0 <HAL_DMA_IRQHandler+0x25c>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	0a9b      	lsrs	r3, r3, #10
 800465c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004662:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466e:	2208      	movs	r2, #8
 8004670:	409a      	lsls	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4013      	ands	r3, r2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d01a      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d013      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0204 	bic.w	r2, r2, #4
 8004696:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469c:	2208      	movs	r2, #8
 800469e:	409a      	lsls	r2, r3
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a8:	f043 0201 	orr.w	r2, r3, #1
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b4:	2201      	movs	r2, #1
 80046b6:	409a      	lsls	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d012      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d2:	2201      	movs	r2, #1
 80046d4:	409a      	lsls	r2, r3
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046de:	f043 0202 	orr.w	r2, r3, #2
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ea:	2204      	movs	r2, #4
 80046ec:	409a      	lsls	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d012      	beq.n	800471c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00b      	beq.n	800471c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004708:	2204      	movs	r2, #4
 800470a:	409a      	lsls	r2, r3
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004714:	f043 0204 	orr.w	r2, r3, #4
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004720:	2210      	movs	r2, #16
 8004722:	409a      	lsls	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4013      	ands	r3, r2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d043      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d03c      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473e:	2210      	movs	r2, #16
 8004740:	409a      	lsls	r2, r3
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d018      	beq.n	8004786 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d108      	bne.n	8004774 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d024      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
 8004772:	e01f      	b.n	80047b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01b      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	4798      	blx	r3
 8004784:	e016      	b.n	80047b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d107      	bne.n	80047a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0208 	bic.w	r2, r2, #8
 80047a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b8:	2220      	movs	r2, #32
 80047ba:	409a      	lsls	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 808e 	beq.w	80048e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8086 	beq.w	80048e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047da:	2220      	movs	r2, #32
 80047dc:	409a      	lsls	r2, r3
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b05      	cmp	r3, #5
 80047ec:	d136      	bne.n	800485c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0216 	bic.w	r2, r2, #22
 80047fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695a      	ldr	r2, [r3, #20]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800480c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d103      	bne.n	800481e <HAL_DMA_IRQHandler+0x1da>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0208 	bic.w	r2, r2, #8
 800482c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004832:	223f      	movs	r2, #63	; 0x3f
 8004834:	409a      	lsls	r2, r3
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484e:	2b00      	cmp	r3, #0
 8004850:	d07d      	beq.n	800494e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	4798      	blx	r3
        }
        return;
 800485a:	e078      	b.n	800494e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d01c      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d108      	bne.n	800488a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487c:	2b00      	cmp	r3, #0
 800487e:	d030      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	4798      	blx	r3
 8004888:	e02b      	b.n	80048e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d027      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4798      	blx	r3
 800489a:	e022      	b.n	80048e2 <HAL_DMA_IRQHandler+0x29e>
 800489c:	20000000 	.word	0x20000000
 80048a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10f      	bne.n	80048d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0210 	bic.w	r2, r2, #16
 80048c0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d032      	beq.n	8004950 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d022      	beq.n	800493c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2205      	movs	r2, #5
 80048fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0201 	bic.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	3301      	adds	r3, #1
 8004912:	60bb      	str	r3, [r7, #8]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	429a      	cmp	r2, r3
 8004918:	d307      	bcc.n	800492a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f2      	bne.n	800490e <HAL_DMA_IRQHandler+0x2ca>
 8004928:	e000      	b.n	800492c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800492a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	4798      	blx	r3
 800494c:	e000      	b.n	8004950 <HAL_DMA_IRQHandler+0x30c>
        return;
 800494e:	bf00      	nop
    }
  }
}
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop

08004958 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004974:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2b40      	cmp	r3, #64	; 0x40
 8004984:	d108      	bne.n	8004998 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004996:	e007      	b.n	80049a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	60da      	str	r2, [r3, #12]
}
 80049a8:	bf00      	nop
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	3b10      	subs	r3, #16
 80049c4:	4a14      	ldr	r2, [pc, #80]	; (8004a18 <DMA_CalcBaseAndBitshift+0x64>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	091b      	lsrs	r3, r3, #4
 80049cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049ce:	4a13      	ldr	r2, [pc, #76]	; (8004a1c <DMA_CalcBaseAndBitshift+0x68>)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4413      	add	r3, r2
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d909      	bls.n	80049f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049ea:	f023 0303 	bic.w	r3, r3, #3
 80049ee:	1d1a      	adds	r2, r3, #4
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	659a      	str	r2, [r3, #88]	; 0x58
 80049f4:	e007      	b.n	8004a06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	aaaaaaab 	.word	0xaaaaaaab
 8004a1c:	0800d6a0 	.word	0x0800d6a0

08004a20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d11f      	bne.n	8004a7a <DMA_CheckFifoParam+0x5a>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d856      	bhi.n	8004aee <DMA_CheckFifoParam+0xce>
 8004a40:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <DMA_CheckFifoParam+0x28>)
 8004a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a46:	bf00      	nop
 8004a48:	08004a59 	.word	0x08004a59
 8004a4c:	08004a6b 	.word	0x08004a6b
 8004a50:	08004a59 	.word	0x08004a59
 8004a54:	08004aef 	.word	0x08004aef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d046      	beq.n	8004af2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a68:	e043      	b.n	8004af2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a72:	d140      	bne.n	8004af6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a78:	e03d      	b.n	8004af6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a82:	d121      	bne.n	8004ac8 <DMA_CheckFifoParam+0xa8>
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d837      	bhi.n	8004afa <DMA_CheckFifoParam+0xda>
 8004a8a:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <DMA_CheckFifoParam+0x70>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004aa1 	.word	0x08004aa1
 8004a94:	08004aa7 	.word	0x08004aa7
 8004a98:	08004aa1 	.word	0x08004aa1
 8004a9c:	08004ab9 	.word	0x08004ab9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa4:	e030      	b.n	8004b08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d025      	beq.n	8004afe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ab6:	e022      	b.n	8004afe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ac0:	d11f      	bne.n	8004b02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ac6:	e01c      	b.n	8004b02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d903      	bls.n	8004ad6 <DMA_CheckFifoParam+0xb6>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d003      	beq.n	8004adc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ad4:	e018      	b.n	8004b08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8004ada:	e015      	b.n	8004b08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00e      	beq.n	8004b06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	73fb      	strb	r3, [r7, #15]
      break;
 8004aec:	e00b      	b.n	8004b06 <DMA_CheckFifoParam+0xe6>
      break;
 8004aee:	bf00      	nop
 8004af0:	e00a      	b.n	8004b08 <DMA_CheckFifoParam+0xe8>
      break;
 8004af2:	bf00      	nop
 8004af4:	e008      	b.n	8004b08 <DMA_CheckFifoParam+0xe8>
      break;
 8004af6:	bf00      	nop
 8004af8:	e006      	b.n	8004b08 <DMA_CheckFifoParam+0xe8>
      break;
 8004afa:	bf00      	nop
 8004afc:	e004      	b.n	8004b08 <DMA_CheckFifoParam+0xe8>
      break;
 8004afe:	bf00      	nop
 8004b00:	e002      	b.n	8004b08 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b02:	bf00      	nop
 8004b04:	e000      	b.n	8004b08 <DMA_CheckFifoParam+0xe8>
      break;
 8004b06:	bf00      	nop
    }
  } 
  
  return status; 
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop

08004b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b089      	sub	sp, #36	; 0x24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	e165      	b.n	8004e00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b34:	2201      	movs	r2, #1
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4013      	ands	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	f040 8154 	bne.w	8004dfa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d005      	beq.n	8004b6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d130      	bne.n	8004bcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	2203      	movs	r2, #3
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4013      	ands	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	091b      	lsrs	r3, r3, #4
 8004bb6:	f003 0201 	and.w	r2, r3, #1
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d017      	beq.n	8004c08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	2203      	movs	r2, #3
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	43db      	mvns	r3, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4013      	ands	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d123      	bne.n	8004c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	08da      	lsrs	r2, r3, #3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3208      	adds	r2, #8
 8004c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	220f      	movs	r2, #15
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	43db      	mvns	r3, r3
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	4013      	ands	r3, r2
 8004c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	08da      	lsrs	r2, r3, #3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3208      	adds	r2, #8
 8004c56:	69b9      	ldr	r1, [r7, #24]
 8004c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	2203      	movs	r2, #3
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	4013      	ands	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f003 0203 	and.w	r2, r3, #3
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 80ae 	beq.w	8004dfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	4b5d      	ldr	r3, [pc, #372]	; (8004e18 <HAL_GPIO_Init+0x300>)
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca6:	4a5c      	ldr	r2, [pc, #368]	; (8004e18 <HAL_GPIO_Init+0x300>)
 8004ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cac:	6453      	str	r3, [r2, #68]	; 0x44
 8004cae:	4b5a      	ldr	r3, [pc, #360]	; (8004e18 <HAL_GPIO_Init+0x300>)
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cba:	4a58      	ldr	r2, [pc, #352]	; (8004e1c <HAL_GPIO_Init+0x304>)
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	089b      	lsrs	r3, r3, #2
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	220f      	movs	r2, #15
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a4f      	ldr	r2, [pc, #316]	; (8004e20 <HAL_GPIO_Init+0x308>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d025      	beq.n	8004d32 <HAL_GPIO_Init+0x21a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a4e      	ldr	r2, [pc, #312]	; (8004e24 <HAL_GPIO_Init+0x30c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01f      	beq.n	8004d2e <HAL_GPIO_Init+0x216>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a4d      	ldr	r2, [pc, #308]	; (8004e28 <HAL_GPIO_Init+0x310>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d019      	beq.n	8004d2a <HAL_GPIO_Init+0x212>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a4c      	ldr	r2, [pc, #304]	; (8004e2c <HAL_GPIO_Init+0x314>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d013      	beq.n	8004d26 <HAL_GPIO_Init+0x20e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a4b      	ldr	r2, [pc, #300]	; (8004e30 <HAL_GPIO_Init+0x318>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00d      	beq.n	8004d22 <HAL_GPIO_Init+0x20a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a4a      	ldr	r2, [pc, #296]	; (8004e34 <HAL_GPIO_Init+0x31c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d007      	beq.n	8004d1e <HAL_GPIO_Init+0x206>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a49      	ldr	r2, [pc, #292]	; (8004e38 <HAL_GPIO_Init+0x320>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d101      	bne.n	8004d1a <HAL_GPIO_Init+0x202>
 8004d16:	2306      	movs	r3, #6
 8004d18:	e00c      	b.n	8004d34 <HAL_GPIO_Init+0x21c>
 8004d1a:	2307      	movs	r3, #7
 8004d1c:	e00a      	b.n	8004d34 <HAL_GPIO_Init+0x21c>
 8004d1e:	2305      	movs	r3, #5
 8004d20:	e008      	b.n	8004d34 <HAL_GPIO_Init+0x21c>
 8004d22:	2304      	movs	r3, #4
 8004d24:	e006      	b.n	8004d34 <HAL_GPIO_Init+0x21c>
 8004d26:	2303      	movs	r3, #3
 8004d28:	e004      	b.n	8004d34 <HAL_GPIO_Init+0x21c>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e002      	b.n	8004d34 <HAL_GPIO_Init+0x21c>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <HAL_GPIO_Init+0x21c>
 8004d32:	2300      	movs	r3, #0
 8004d34:	69fa      	ldr	r2, [r7, #28]
 8004d36:	f002 0203 	and.w	r2, r2, #3
 8004d3a:	0092      	lsls	r2, r2, #2
 8004d3c:	4093      	lsls	r3, r2
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d44:	4935      	ldr	r1, [pc, #212]	; (8004e1c <HAL_GPIO_Init+0x304>)
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	089b      	lsrs	r3, r3, #2
 8004d4a:	3302      	adds	r3, #2
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d52:	4b3a      	ldr	r3, [pc, #232]	; (8004e3c <HAL_GPIO_Init+0x324>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d76:	4a31      	ldr	r2, [pc, #196]	; (8004e3c <HAL_GPIO_Init+0x324>)
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d7c:	4b2f      	ldr	r3, [pc, #188]	; (8004e3c <HAL_GPIO_Init+0x324>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	43db      	mvns	r3, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004da0:	4a26      	ldr	r2, [pc, #152]	; (8004e3c <HAL_GPIO_Init+0x324>)
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004da6:	4b25      	ldr	r3, [pc, #148]	; (8004e3c <HAL_GPIO_Init+0x324>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	43db      	mvns	r3, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4013      	ands	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004dca:	4a1c      	ldr	r2, [pc, #112]	; (8004e3c <HAL_GPIO_Init+0x324>)
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004dd0:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <HAL_GPIO_Init+0x324>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004df4:	4a11      	ldr	r2, [pc, #68]	; (8004e3c <HAL_GPIO_Init+0x324>)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	61fb      	str	r3, [r7, #28]
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	2b0f      	cmp	r3, #15
 8004e04:	f67f ae96 	bls.w	8004b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	3724      	adds	r7, #36	; 0x24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	40013800 	.word	0x40013800
 8004e20:	40020000 	.word	0x40020000
 8004e24:	40020400 	.word	0x40020400
 8004e28:	40020800 	.word	0x40020800
 8004e2c:	40020c00 	.word	0x40020c00
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40021400 	.word	0x40021400
 8004e38:	40021800 	.word	0x40021800
 8004e3c:	40013c00 	.word	0x40013c00

08004e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	807b      	strh	r3, [r7, #2]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e50:	787b      	ldrb	r3, [r7, #1]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e56:	887a      	ldrh	r2, [r7, #2]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e5c:	e003      	b.n	8004e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e5e:	887b      	ldrh	r3, [r7, #2]
 8004e60:	041a      	lsls	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	619a      	str	r2, [r3, #24]
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b085      	sub	sp, #20
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e84:	887a      	ldrh	r2, [r7, #2]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	041a      	lsls	r2, r3, #16
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	43d9      	mvns	r1, r3
 8004e90:	887b      	ldrh	r3, [r7, #2]
 8004e92:	400b      	ands	r3, r1
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	619a      	str	r2, [r3, #24]
}
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0cc      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ebc:	4b68      	ldr	r3, [pc, #416]	; (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d90c      	bls.n	8004ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eca:	4b65      	ldr	r3, [pc, #404]	; (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed2:	4b63      	ldr	r3, [pc, #396]	; (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0b8      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d020      	beq.n	8004f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004efc:	4b59      	ldr	r3, [pc, #356]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4a58      	ldr	r2, [pc, #352]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f14:	4b53      	ldr	r3, [pc, #332]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4a52      	ldr	r2, [pc, #328]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f20:	4b50      	ldr	r3, [pc, #320]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	494d      	ldr	r1, [pc, #308]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d044      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d107      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f46:	4b47      	ldr	r3, [pc, #284]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d119      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e07f      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d003      	beq.n	8004f66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d107      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f66:	4b3f      	ldr	r3, [pc, #252]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d109      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e06f      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f76:	4b3b      	ldr	r3, [pc, #236]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e067      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f86:	4b37      	ldr	r3, [pc, #220]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f023 0203 	bic.w	r2, r3, #3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	4934      	ldr	r1, [pc, #208]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f98:	f7ff f90c 	bl	80041b4 <HAL_GetTick>
 8004f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9e:	e00a      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa0:	f7ff f908 	bl	80041b4 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e04f      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb6:	4b2b      	ldr	r3, [pc, #172]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 020c 	and.w	r2, r3, #12
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d1eb      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc8:	4b25      	ldr	r3, [pc, #148]	; (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d20c      	bcs.n	8004ff0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd6:	4b22      	ldr	r3, [pc, #136]	; (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fde:	4b20      	ldr	r3, [pc, #128]	; (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d001      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e032      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d008      	beq.n	800500e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ffc:	4b19      	ldr	r3, [pc, #100]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4916      	ldr	r1, [pc, #88]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 800500a:	4313      	orrs	r3, r2
 800500c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800501a:	4b12      	ldr	r3, [pc, #72]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	490e      	ldr	r1, [pc, #56]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	4313      	orrs	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800502e:	f000 f855 	bl	80050dc <HAL_RCC_GetSysClockFreq>
 8005032:	4602      	mov	r2, r0
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	490a      	ldr	r1, [pc, #40]	; (8005068 <HAL_RCC_ClockConfig+0x1c0>)
 8005040:	5ccb      	ldrb	r3, [r1, r3]
 8005042:	fa22 f303 	lsr.w	r3, r2, r3
 8005046:	4a09      	ldr	r2, [pc, #36]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8005048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800504a:	4b09      	ldr	r3, [pc, #36]	; (8005070 <HAL_RCC_ClockConfig+0x1c8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff f86c 	bl	800412c <HAL_InitTick>

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40023c00 	.word	0x40023c00
 8005064:	40023800 	.word	0x40023800
 8005068:	0800d688 	.word	0x0800d688
 800506c:	20000000 	.word	0x20000000
 8005070:	20000004 	.word	0x20000004

08005074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005078:	4b03      	ldr	r3, [pc, #12]	; (8005088 <HAL_RCC_GetHCLKFreq+0x14>)
 800507a:	681b      	ldr	r3, [r3, #0]
}
 800507c:	4618      	mov	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	20000000 	.word	0x20000000

0800508c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005090:	f7ff fff0 	bl	8005074 <HAL_RCC_GetHCLKFreq>
 8005094:	4602      	mov	r2, r0
 8005096:	4b05      	ldr	r3, [pc, #20]	; (80050ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	0a9b      	lsrs	r3, r3, #10
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	4903      	ldr	r1, [pc, #12]	; (80050b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050a2:	5ccb      	ldrb	r3, [r1, r3]
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40023800 	.word	0x40023800
 80050b0:	0800d698 	.word	0x0800d698

080050b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050b8:	f7ff ffdc 	bl	8005074 <HAL_RCC_GetHCLKFreq>
 80050bc:	4602      	mov	r2, r0
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	0b5b      	lsrs	r3, r3, #13
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	4903      	ldr	r1, [pc, #12]	; (80050d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ca:	5ccb      	ldrb	r3, [r1, r3]
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40023800 	.word	0x40023800
 80050d8:	0800d698 	.word	0x0800d698

080050dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050e0:	b088      	sub	sp, #32
 80050e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050f8:	4bce      	ldr	r3, [pc, #824]	; (8005434 <HAL_RCC_GetSysClockFreq+0x358>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 030c 	and.w	r3, r3, #12
 8005100:	2b0c      	cmp	r3, #12
 8005102:	f200 818d 	bhi.w	8005420 <HAL_RCC_GetSysClockFreq+0x344>
 8005106:	a201      	add	r2, pc, #4	; (adr r2, 800510c <HAL_RCC_GetSysClockFreq+0x30>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	08005141 	.word	0x08005141
 8005110:	08005421 	.word	0x08005421
 8005114:	08005421 	.word	0x08005421
 8005118:	08005421 	.word	0x08005421
 800511c:	08005147 	.word	0x08005147
 8005120:	08005421 	.word	0x08005421
 8005124:	08005421 	.word	0x08005421
 8005128:	08005421 	.word	0x08005421
 800512c:	0800514d 	.word	0x0800514d
 8005130:	08005421 	.word	0x08005421
 8005134:	08005421 	.word	0x08005421
 8005138:	08005421 	.word	0x08005421
 800513c:	080052c1 	.word	0x080052c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005140:	4bbd      	ldr	r3, [pc, #756]	; (8005438 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005142:	61bb      	str	r3, [r7, #24]
       break;
 8005144:	e16f      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005146:	4bbd      	ldr	r3, [pc, #756]	; (800543c <HAL_RCC_GetSysClockFreq+0x360>)
 8005148:	61bb      	str	r3, [r7, #24]
      break;
 800514a:	e16c      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800514c:	4bb9      	ldr	r3, [pc, #740]	; (8005434 <HAL_RCC_GetSysClockFreq+0x358>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005154:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005156:	4bb7      	ldr	r3, [pc, #732]	; (8005434 <HAL_RCC_GetSysClockFreq+0x358>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d053      	beq.n	800520a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005162:	4bb4      	ldr	r3, [pc, #720]	; (8005434 <HAL_RCC_GetSysClockFreq+0x358>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	099b      	lsrs	r3, r3, #6
 8005168:	461a      	mov	r2, r3
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005172:	f04f 0100 	mov.w	r1, #0
 8005176:	ea02 0400 	and.w	r4, r2, r0
 800517a:	603c      	str	r4, [r7, #0]
 800517c:	400b      	ands	r3, r1
 800517e:	607b      	str	r3, [r7, #4]
 8005180:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005184:	4620      	mov	r0, r4
 8005186:	4629      	mov	r1, r5
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	014b      	lsls	r3, r1, #5
 8005192:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005196:	0142      	lsls	r2, r0, #5
 8005198:	4610      	mov	r0, r2
 800519a:	4619      	mov	r1, r3
 800519c:	4623      	mov	r3, r4
 800519e:	1ac0      	subs	r0, r0, r3
 80051a0:	462b      	mov	r3, r5
 80051a2:	eb61 0103 	sbc.w	r1, r1, r3
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	018b      	lsls	r3, r1, #6
 80051b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051b4:	0182      	lsls	r2, r0, #6
 80051b6:	1a12      	subs	r2, r2, r0
 80051b8:	eb63 0301 	sbc.w	r3, r3, r1
 80051bc:	f04f 0000 	mov.w	r0, #0
 80051c0:	f04f 0100 	mov.w	r1, #0
 80051c4:	00d9      	lsls	r1, r3, #3
 80051c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051ca:	00d0      	lsls	r0, r2, #3
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4621      	mov	r1, r4
 80051d2:	1852      	adds	r2, r2, r1
 80051d4:	4629      	mov	r1, r5
 80051d6:	eb43 0101 	adc.w	r1, r3, r1
 80051da:	460b      	mov	r3, r1
 80051dc:	f04f 0000 	mov.w	r0, #0
 80051e0:	f04f 0100 	mov.w	r1, #0
 80051e4:	0259      	lsls	r1, r3, #9
 80051e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80051ea:	0250      	lsls	r0, r2, #9
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4610      	mov	r0, r2
 80051f2:	4619      	mov	r1, r3
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	f7fb fd64 	bl	8000cc8 <__aeabi_uldivmod>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4613      	mov	r3, r2
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	e04c      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800520a:	4b8a      	ldr	r3, [pc, #552]	; (8005434 <HAL_RCC_GetSysClockFreq+0x358>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	099b      	lsrs	r3, r3, #6
 8005210:	461a      	mov	r2, r3
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	f240 10ff 	movw	r0, #511	; 0x1ff
 800521a:	f04f 0100 	mov.w	r1, #0
 800521e:	ea02 0a00 	and.w	sl, r2, r0
 8005222:	ea03 0b01 	and.w	fp, r3, r1
 8005226:	4650      	mov	r0, sl
 8005228:	4659      	mov	r1, fp
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	014b      	lsls	r3, r1, #5
 8005234:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005238:	0142      	lsls	r2, r0, #5
 800523a:	4610      	mov	r0, r2
 800523c:	4619      	mov	r1, r3
 800523e:	ebb0 000a 	subs.w	r0, r0, sl
 8005242:	eb61 010b 	sbc.w	r1, r1, fp
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	018b      	lsls	r3, r1, #6
 8005250:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005254:	0182      	lsls	r2, r0, #6
 8005256:	1a12      	subs	r2, r2, r0
 8005258:	eb63 0301 	sbc.w	r3, r3, r1
 800525c:	f04f 0000 	mov.w	r0, #0
 8005260:	f04f 0100 	mov.w	r1, #0
 8005264:	00d9      	lsls	r1, r3, #3
 8005266:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800526a:	00d0      	lsls	r0, r2, #3
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	eb12 020a 	adds.w	r2, r2, sl
 8005274:	eb43 030b 	adc.w	r3, r3, fp
 8005278:	f04f 0000 	mov.w	r0, #0
 800527c:	f04f 0100 	mov.w	r1, #0
 8005280:	0299      	lsls	r1, r3, #10
 8005282:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005286:	0290      	lsls	r0, r2, #10
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4610      	mov	r0, r2
 800528e:	4619      	mov	r1, r3
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	461a      	mov	r2, r3
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	f7fb fd16 	bl	8000cc8 <__aeabi_uldivmod>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4613      	mov	r3, r2
 80052a2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052a4:	4b63      	ldr	r3, [pc, #396]	; (8005434 <HAL_RCC_GetSysClockFreq+0x358>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	0c1b      	lsrs	r3, r3, #16
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	3301      	adds	r3, #1
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052bc:	61bb      	str	r3, [r7, #24]
      break;
 80052be:	e0b2      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052c0:	4b5c      	ldr	r3, [pc, #368]	; (8005434 <HAL_RCC_GetSysClockFreq+0x358>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052c8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052ca:	4b5a      	ldr	r3, [pc, #360]	; (8005434 <HAL_RCC_GetSysClockFreq+0x358>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d04d      	beq.n	8005372 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052d6:	4b57      	ldr	r3, [pc, #348]	; (8005434 <HAL_RCC_GetSysClockFreq+0x358>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	099b      	lsrs	r3, r3, #6
 80052dc:	461a      	mov	r2, r3
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052e6:	f04f 0100 	mov.w	r1, #0
 80052ea:	ea02 0800 	and.w	r8, r2, r0
 80052ee:	ea03 0901 	and.w	r9, r3, r1
 80052f2:	4640      	mov	r0, r8
 80052f4:	4649      	mov	r1, r9
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	f04f 0300 	mov.w	r3, #0
 80052fe:	014b      	lsls	r3, r1, #5
 8005300:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005304:	0142      	lsls	r2, r0, #5
 8005306:	4610      	mov	r0, r2
 8005308:	4619      	mov	r1, r3
 800530a:	ebb0 0008 	subs.w	r0, r0, r8
 800530e:	eb61 0109 	sbc.w	r1, r1, r9
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	018b      	lsls	r3, r1, #6
 800531c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005320:	0182      	lsls	r2, r0, #6
 8005322:	1a12      	subs	r2, r2, r0
 8005324:	eb63 0301 	sbc.w	r3, r3, r1
 8005328:	f04f 0000 	mov.w	r0, #0
 800532c:	f04f 0100 	mov.w	r1, #0
 8005330:	00d9      	lsls	r1, r3, #3
 8005332:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005336:	00d0      	lsls	r0, r2, #3
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	eb12 0208 	adds.w	r2, r2, r8
 8005340:	eb43 0309 	adc.w	r3, r3, r9
 8005344:	f04f 0000 	mov.w	r0, #0
 8005348:	f04f 0100 	mov.w	r1, #0
 800534c:	0259      	lsls	r1, r3, #9
 800534e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005352:	0250      	lsls	r0, r2, #9
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4610      	mov	r0, r2
 800535a:	4619      	mov	r1, r3
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	461a      	mov	r2, r3
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	f7fb fcb0 	bl	8000cc8 <__aeabi_uldivmod>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4613      	mov	r3, r2
 800536e:	61fb      	str	r3, [r7, #28]
 8005370:	e04a      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005372:	4b30      	ldr	r3, [pc, #192]	; (8005434 <HAL_RCC_GetSysClockFreq+0x358>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	099b      	lsrs	r3, r3, #6
 8005378:	461a      	mov	r2, r3
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005382:	f04f 0100 	mov.w	r1, #0
 8005386:	ea02 0400 	and.w	r4, r2, r0
 800538a:	ea03 0501 	and.w	r5, r3, r1
 800538e:	4620      	mov	r0, r4
 8005390:	4629      	mov	r1, r5
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	014b      	lsls	r3, r1, #5
 800539c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053a0:	0142      	lsls	r2, r0, #5
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	1b00      	subs	r0, r0, r4
 80053a8:	eb61 0105 	sbc.w	r1, r1, r5
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	018b      	lsls	r3, r1, #6
 80053b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053ba:	0182      	lsls	r2, r0, #6
 80053bc:	1a12      	subs	r2, r2, r0
 80053be:	eb63 0301 	sbc.w	r3, r3, r1
 80053c2:	f04f 0000 	mov.w	r0, #0
 80053c6:	f04f 0100 	mov.w	r1, #0
 80053ca:	00d9      	lsls	r1, r3, #3
 80053cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053d0:	00d0      	lsls	r0, r2, #3
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	1912      	adds	r2, r2, r4
 80053d8:	eb45 0303 	adc.w	r3, r5, r3
 80053dc:	f04f 0000 	mov.w	r0, #0
 80053e0:	f04f 0100 	mov.w	r1, #0
 80053e4:	0299      	lsls	r1, r3, #10
 80053e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80053ea:	0290      	lsls	r0, r2, #10
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4610      	mov	r0, r2
 80053f2:	4619      	mov	r1, r3
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	f7fb fc64 	bl	8000cc8 <__aeabi_uldivmod>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4613      	mov	r3, r2
 8005406:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005408:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <HAL_RCC_GetSysClockFreq+0x358>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	0f1b      	lsrs	r3, r3, #28
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	fbb2 f3f3 	udiv	r3, r2, r3
 800541c:	61bb      	str	r3, [r7, #24]
      break;
 800541e:	e002      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005420:	4b05      	ldr	r3, [pc, #20]	; (8005438 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005422:	61bb      	str	r3, [r7, #24]
      break;
 8005424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005426:	69bb      	ldr	r3, [r7, #24]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3720      	adds	r7, #32
 800542c:	46bd      	mov	sp, r7
 800542e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005432:	bf00      	nop
 8005434:	40023800 	.word	0x40023800
 8005438:	00f42400 	.word	0x00f42400
 800543c:	007a1200 	.word	0x007a1200

08005440 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e28d      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 8083 	beq.w	8005566 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005460:	4b94      	ldr	r3, [pc, #592]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 030c 	and.w	r3, r3, #12
 8005468:	2b04      	cmp	r3, #4
 800546a:	d019      	beq.n	80054a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800546c:	4b91      	ldr	r3, [pc, #580]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005474:	2b08      	cmp	r3, #8
 8005476:	d106      	bne.n	8005486 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005478:	4b8e      	ldr	r3, [pc, #568]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005484:	d00c      	beq.n	80054a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005486:	4b8b      	ldr	r3, [pc, #556]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800548e:	2b0c      	cmp	r3, #12
 8005490:	d112      	bne.n	80054b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005492:	4b88      	ldr	r3, [pc, #544]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800549a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800549e:	d10b      	bne.n	80054b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a0:	4b84      	ldr	r3, [pc, #528]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d05b      	beq.n	8005564 <HAL_RCC_OscConfig+0x124>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d157      	bne.n	8005564 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e25a      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c0:	d106      	bne.n	80054d0 <HAL_RCC_OscConfig+0x90>
 80054c2:	4b7c      	ldr	r3, [pc, #496]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a7b      	ldr	r2, [pc, #492]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 80054c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e01d      	b.n	800550c <HAL_RCC_OscConfig+0xcc>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054d8:	d10c      	bne.n	80054f4 <HAL_RCC_OscConfig+0xb4>
 80054da:	4b76      	ldr	r3, [pc, #472]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a75      	ldr	r2, [pc, #468]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 80054e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	4b73      	ldr	r3, [pc, #460]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a72      	ldr	r2, [pc, #456]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 80054ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	e00b      	b.n	800550c <HAL_RCC_OscConfig+0xcc>
 80054f4:	4b6f      	ldr	r3, [pc, #444]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a6e      	ldr	r2, [pc, #440]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 80054fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	4b6c      	ldr	r3, [pc, #432]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a6b      	ldr	r2, [pc, #428]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 8005506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800550a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d013      	beq.n	800553c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005514:	f7fe fe4e 	bl	80041b4 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800551c:	f7fe fe4a 	bl	80041b4 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b64      	cmp	r3, #100	; 0x64
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e21f      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552e:	4b61      	ldr	r3, [pc, #388]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0f0      	beq.n	800551c <HAL_RCC_OscConfig+0xdc>
 800553a:	e014      	b.n	8005566 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553c:	f7fe fe3a 	bl	80041b4 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005544:	f7fe fe36 	bl	80041b4 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b64      	cmp	r3, #100	; 0x64
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e20b      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005556:	4b57      	ldr	r3, [pc, #348]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f0      	bne.n	8005544 <HAL_RCC_OscConfig+0x104>
 8005562:	e000      	b.n	8005566 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d06f      	beq.n	8005652 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005572:	4b50      	ldr	r3, [pc, #320]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 030c 	and.w	r3, r3, #12
 800557a:	2b00      	cmp	r3, #0
 800557c:	d017      	beq.n	80055ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800557e:	4b4d      	ldr	r3, [pc, #308]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005586:	2b08      	cmp	r3, #8
 8005588:	d105      	bne.n	8005596 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800558a:	4b4a      	ldr	r3, [pc, #296]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005596:	4b47      	ldr	r3, [pc, #284]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800559e:	2b0c      	cmp	r3, #12
 80055a0:	d11c      	bne.n	80055dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055a2:	4b44      	ldr	r3, [pc, #272]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d116      	bne.n	80055dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ae:	4b41      	ldr	r3, [pc, #260]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d005      	beq.n	80055c6 <HAL_RCC_OscConfig+0x186>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d001      	beq.n	80055c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e1d3      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c6:	4b3b      	ldr	r3, [pc, #236]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	4937      	ldr	r1, [pc, #220]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055da:	e03a      	b.n	8005652 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d020      	beq.n	8005626 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055e4:	4b34      	ldr	r3, [pc, #208]	; (80056b8 <HAL_RCC_OscConfig+0x278>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ea:	f7fe fde3 	bl	80041b4 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055f2:	f7fe fddf 	bl	80041b4 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e1b4      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005604:	4b2b      	ldr	r3, [pc, #172]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f0      	beq.n	80055f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005610:	4b28      	ldr	r3, [pc, #160]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	4925      	ldr	r1, [pc, #148]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 8005620:	4313      	orrs	r3, r2
 8005622:	600b      	str	r3, [r1, #0]
 8005624:	e015      	b.n	8005652 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005626:	4b24      	ldr	r3, [pc, #144]	; (80056b8 <HAL_RCC_OscConfig+0x278>)
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fe fdc2 	bl	80041b4 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005634:	f7fe fdbe 	bl	80041b4 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e193      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005646:	4b1b      	ldr	r3, [pc, #108]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d036      	beq.n	80056cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d016      	beq.n	8005694 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005666:	4b15      	ldr	r3, [pc, #84]	; (80056bc <HAL_RCC_OscConfig+0x27c>)
 8005668:	2201      	movs	r2, #1
 800566a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566c:	f7fe fda2 	bl	80041b4 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005674:	f7fe fd9e 	bl	80041b4 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e173      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005686:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <HAL_RCC_OscConfig+0x274>)
 8005688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f0      	beq.n	8005674 <HAL_RCC_OscConfig+0x234>
 8005692:	e01b      	b.n	80056cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005694:	4b09      	ldr	r3, [pc, #36]	; (80056bc <HAL_RCC_OscConfig+0x27c>)
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569a:	f7fe fd8b 	bl	80041b4 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a0:	e00e      	b.n	80056c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056a2:	f7fe fd87 	bl	80041b4 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d907      	bls.n	80056c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e15c      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
 80056b4:	40023800 	.word	0x40023800
 80056b8:	42470000 	.word	0x42470000
 80056bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c0:	4b8a      	ldr	r3, [pc, #552]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 80056c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1ea      	bne.n	80056a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8097 	beq.w	8005808 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056da:	2300      	movs	r3, #0
 80056dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056de:	4b83      	ldr	r3, [pc, #524]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10f      	bne.n	800570a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ea:	2300      	movs	r3, #0
 80056ec:	60bb      	str	r3, [r7, #8]
 80056ee:	4b7f      	ldr	r3, [pc, #508]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	4a7e      	ldr	r2, [pc, #504]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 80056f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f8:	6413      	str	r3, [r2, #64]	; 0x40
 80056fa:	4b7c      	ldr	r3, [pc, #496]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005702:	60bb      	str	r3, [r7, #8]
 8005704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005706:	2301      	movs	r3, #1
 8005708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570a:	4b79      	ldr	r3, [pc, #484]	; (80058f0 <HAL_RCC_OscConfig+0x4b0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d118      	bne.n	8005748 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005716:	4b76      	ldr	r3, [pc, #472]	; (80058f0 <HAL_RCC_OscConfig+0x4b0>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a75      	ldr	r2, [pc, #468]	; (80058f0 <HAL_RCC_OscConfig+0x4b0>)
 800571c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005722:	f7fe fd47 	bl	80041b4 <HAL_GetTick>
 8005726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005728:	e008      	b.n	800573c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572a:	f7fe fd43 	bl	80041b4 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e118      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800573c:	4b6c      	ldr	r3, [pc, #432]	; (80058f0 <HAL_RCC_OscConfig+0x4b0>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0f0      	beq.n	800572a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d106      	bne.n	800575e <HAL_RCC_OscConfig+0x31e>
 8005750:	4b66      	ldr	r3, [pc, #408]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 8005752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005754:	4a65      	ldr	r2, [pc, #404]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 8005756:	f043 0301 	orr.w	r3, r3, #1
 800575a:	6713      	str	r3, [r2, #112]	; 0x70
 800575c:	e01c      	b.n	8005798 <HAL_RCC_OscConfig+0x358>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2b05      	cmp	r3, #5
 8005764:	d10c      	bne.n	8005780 <HAL_RCC_OscConfig+0x340>
 8005766:	4b61      	ldr	r3, [pc, #388]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	4a60      	ldr	r2, [pc, #384]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 800576c:	f043 0304 	orr.w	r3, r3, #4
 8005770:	6713      	str	r3, [r2, #112]	; 0x70
 8005772:	4b5e      	ldr	r3, [pc, #376]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	4a5d      	ldr	r2, [pc, #372]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 8005778:	f043 0301 	orr.w	r3, r3, #1
 800577c:	6713      	str	r3, [r2, #112]	; 0x70
 800577e:	e00b      	b.n	8005798 <HAL_RCC_OscConfig+0x358>
 8005780:	4b5a      	ldr	r3, [pc, #360]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 8005782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005784:	4a59      	ldr	r2, [pc, #356]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 8005786:	f023 0301 	bic.w	r3, r3, #1
 800578a:	6713      	str	r3, [r2, #112]	; 0x70
 800578c:	4b57      	ldr	r3, [pc, #348]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 800578e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005790:	4a56      	ldr	r2, [pc, #344]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 8005792:	f023 0304 	bic.w	r3, r3, #4
 8005796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d015      	beq.n	80057cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a0:	f7fe fd08 	bl	80041b4 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a6:	e00a      	b.n	80057be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a8:	f7fe fd04 	bl	80041b4 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e0d7      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057be:	4b4b      	ldr	r3, [pc, #300]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 80057c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0ee      	beq.n	80057a8 <HAL_RCC_OscConfig+0x368>
 80057ca:	e014      	b.n	80057f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057cc:	f7fe fcf2 	bl	80041b4 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057d2:	e00a      	b.n	80057ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057d4:	f7fe fcee 	bl	80041b4 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e0c1      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ea:	4b40      	ldr	r3, [pc, #256]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1ee      	bne.n	80057d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057f6:	7dfb      	ldrb	r3, [r7, #23]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d105      	bne.n	8005808 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057fc:	4b3b      	ldr	r3, [pc, #236]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	4a3a      	ldr	r2, [pc, #232]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 8005802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005806:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 80ad 	beq.w	800596c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005812:	4b36      	ldr	r3, [pc, #216]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 030c 	and.w	r3, r3, #12
 800581a:	2b08      	cmp	r3, #8
 800581c:	d060      	beq.n	80058e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d145      	bne.n	80058b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005826:	4b33      	ldr	r3, [pc, #204]	; (80058f4 <HAL_RCC_OscConfig+0x4b4>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582c:	f7fe fcc2 	bl	80041b4 <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005834:	f7fe fcbe 	bl	80041b4 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e093      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005846:	4b29      	ldr	r3, [pc, #164]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1f0      	bne.n	8005834 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	019b      	lsls	r3, r3, #6
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005868:	085b      	lsrs	r3, r3, #1
 800586a:	3b01      	subs	r3, #1
 800586c:	041b      	lsls	r3, r3, #16
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	061b      	lsls	r3, r3, #24
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587c:	071b      	lsls	r3, r3, #28
 800587e:	491b      	ldr	r1, [pc, #108]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 8005880:	4313      	orrs	r3, r2
 8005882:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005884:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <HAL_RCC_OscConfig+0x4b4>)
 8005886:	2201      	movs	r2, #1
 8005888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588a:	f7fe fc93 	bl	80041b4 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005890:	e008      	b.n	80058a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005892:	f7fe fc8f 	bl	80041b4 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e064      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a4:	4b11      	ldr	r3, [pc, #68]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0f0      	beq.n	8005892 <HAL_RCC_OscConfig+0x452>
 80058b0:	e05c      	b.n	800596c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b2:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <HAL_RCC_OscConfig+0x4b4>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b8:	f7fe fc7c 	bl	80041b4 <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058c0:	f7fe fc78 	bl	80041b4 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e04d      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d2:	4b06      	ldr	r3, [pc, #24]	; (80058ec <HAL_RCC_OscConfig+0x4ac>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f0      	bne.n	80058c0 <HAL_RCC_OscConfig+0x480>
 80058de:	e045      	b.n	800596c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d107      	bne.n	80058f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e040      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
 80058ec:	40023800 	.word	0x40023800
 80058f0:	40007000 	.word	0x40007000
 80058f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058f8:	4b1f      	ldr	r3, [pc, #124]	; (8005978 <HAL_RCC_OscConfig+0x538>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d030      	beq.n	8005968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005910:	429a      	cmp	r2, r3
 8005912:	d129      	bne.n	8005968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591e:	429a      	cmp	r2, r3
 8005920:	d122      	bne.n	8005968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005928:	4013      	ands	r3, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800592e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005930:	4293      	cmp	r3, r2
 8005932:	d119      	bne.n	8005968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	085b      	lsrs	r3, r3, #1
 8005940:	3b01      	subs	r3, #1
 8005942:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005944:	429a      	cmp	r2, r3
 8005946:	d10f      	bne.n	8005968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005954:	429a      	cmp	r2, r3
 8005956:	d107      	bne.n	8005968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005964:	429a      	cmp	r2, r3
 8005966:	d001      	beq.n	800596c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e000      	b.n	800596e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800

0800597c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e04c      	b.n	8005a28 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d111      	bne.n	80059be <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 f972 	bl	8006c8c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a1f      	ldr	r2, [pc, #124]	; (8005a30 <HAL_TIM_Base_Init+0xb4>)
 80059b4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2202      	movs	r2, #2
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	3304      	adds	r3, #4
 80059ce:	4619      	mov	r1, r3
 80059d0:	4610      	mov	r0, r2
 80059d2:	f000 fe4b 	bl	800666c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	08001cdd 	.word	0x08001cdd

08005a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d001      	beq.n	8005a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e04e      	b.n	8005aea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a23      	ldr	r2, [pc, #140]	; (8005af8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d022      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x80>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a76:	d01d      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x80>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1f      	ldr	r2, [pc, #124]	; (8005afc <HAL_TIM_Base_Start_IT+0xc8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d018      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x80>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1e      	ldr	r2, [pc, #120]	; (8005b00 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d013      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x80>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1c      	ldr	r2, [pc, #112]	; (8005b04 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00e      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x80>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1b      	ldr	r2, [pc, #108]	; (8005b08 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d009      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x80>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a19      	ldr	r2, [pc, #100]	; (8005b0c <HAL_TIM_Base_Start_IT+0xd8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d004      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x80>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a18      	ldr	r2, [pc, #96]	; (8005b10 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d111      	bne.n	8005ad8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b06      	cmp	r3, #6
 8005ac4:	d010      	beq.n	8005ae8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0201 	orr.w	r2, r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad6:	e007      	b.n	8005ae8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0201 	orr.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	40010000 	.word	0x40010000
 8005afc:	40000400 	.word	0x40000400
 8005b00:	40000800 	.word	0x40000800
 8005b04:	40000c00 	.word	0x40000c00
 8005b08:	40010400 	.word	0x40010400
 8005b0c:	40014000 	.word	0x40014000
 8005b10:	40001800 	.word	0x40001800

08005b14 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0201 	bic.w	r2, r2, #1
 8005b2a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6a1a      	ldr	r2, [r3, #32]
 8005b32:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b36:	4013      	ands	r3, r2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10f      	bne.n	8005b5c <HAL_TIM_Base_Stop_IT+0x48>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6a1a      	ldr	r2, [r3, #32]
 8005b42:	f240 4344 	movw	r3, #1092	; 0x444
 8005b46:	4013      	ands	r3, r2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d107      	bne.n	8005b5c <HAL_TIM_Base_Stop_IT+0x48>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0201 	bic.w	r2, r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
	...

08005b74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e04c      	b.n	8005c20 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d111      	bne.n	8005bb6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f001 f876 	bl	8006c8c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d102      	bne.n	8005bae <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a1f      	ldr	r2, [pc, #124]	; (8005c28 <HAL_TIM_PWM_Init+0xb4>)
 8005bac:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	4610      	mov	r0, r2
 8005bca:	f000 fd4f 	bl	800666c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	08001ba1 	.word	0x08001ba1

08005c2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d109      	bne.n	8005c50 <HAL_TIM_PWM_Start+0x24>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	bf14      	ite	ne
 8005c48:	2301      	movne	r3, #1
 8005c4a:	2300      	moveq	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	e022      	b.n	8005c96 <HAL_TIM_PWM_Start+0x6a>
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d109      	bne.n	8005c6a <HAL_TIM_PWM_Start+0x3e>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	bf14      	ite	ne
 8005c62:	2301      	movne	r3, #1
 8005c64:	2300      	moveq	r3, #0
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	e015      	b.n	8005c96 <HAL_TIM_PWM_Start+0x6a>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d109      	bne.n	8005c84 <HAL_TIM_PWM_Start+0x58>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	bf14      	ite	ne
 8005c7c:	2301      	movne	r3, #1
 8005c7e:	2300      	moveq	r3, #0
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	e008      	b.n	8005c96 <HAL_TIM_PWM_Start+0x6a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	bf14      	ite	ne
 8005c90:	2301      	movne	r3, #1
 8005c92:	2300      	moveq	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e07c      	b.n	8005d98 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d104      	bne.n	8005cae <HAL_TIM_PWM_Start+0x82>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cac:	e013      	b.n	8005cd6 <HAL_TIM_PWM_Start+0xaa>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d104      	bne.n	8005cbe <HAL_TIM_PWM_Start+0x92>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cbc:	e00b      	b.n	8005cd6 <HAL_TIM_PWM_Start+0xaa>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d104      	bne.n	8005cce <HAL_TIM_PWM_Start+0xa2>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ccc:	e003      	b.n	8005cd6 <HAL_TIM_PWM_Start+0xaa>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 ffae 	bl	8006c40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a2d      	ldr	r2, [pc, #180]	; (8005da0 <HAL_TIM_PWM_Start+0x174>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <HAL_TIM_PWM_Start+0xcc>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a2c      	ldr	r2, [pc, #176]	; (8005da4 <HAL_TIM_PWM_Start+0x178>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d101      	bne.n	8005cfc <HAL_TIM_PWM_Start+0xd0>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e000      	b.n	8005cfe <HAL_TIM_PWM_Start+0xd2>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a22      	ldr	r2, [pc, #136]	; (8005da0 <HAL_TIM_PWM_Start+0x174>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d022      	beq.n	8005d62 <HAL_TIM_PWM_Start+0x136>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d24:	d01d      	beq.n	8005d62 <HAL_TIM_PWM_Start+0x136>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1f      	ldr	r2, [pc, #124]	; (8005da8 <HAL_TIM_PWM_Start+0x17c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d018      	beq.n	8005d62 <HAL_TIM_PWM_Start+0x136>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1d      	ldr	r2, [pc, #116]	; (8005dac <HAL_TIM_PWM_Start+0x180>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d013      	beq.n	8005d62 <HAL_TIM_PWM_Start+0x136>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1c      	ldr	r2, [pc, #112]	; (8005db0 <HAL_TIM_PWM_Start+0x184>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00e      	beq.n	8005d62 <HAL_TIM_PWM_Start+0x136>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a16      	ldr	r2, [pc, #88]	; (8005da4 <HAL_TIM_PWM_Start+0x178>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d009      	beq.n	8005d62 <HAL_TIM_PWM_Start+0x136>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a18      	ldr	r2, [pc, #96]	; (8005db4 <HAL_TIM_PWM_Start+0x188>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d004      	beq.n	8005d62 <HAL_TIM_PWM_Start+0x136>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a16      	ldr	r2, [pc, #88]	; (8005db8 <HAL_TIM_PWM_Start+0x18c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d111      	bne.n	8005d86 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b06      	cmp	r3, #6
 8005d72:	d010      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0201 	orr.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d84:	e007      	b.n	8005d96 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f042 0201 	orr.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40010000 	.word	0x40010000
 8005da4:	40010400 	.word	0x40010400
 8005da8:	40000400 	.word	0x40000400
 8005dac:	40000800 	.word	0x40000800
 8005db0:	40000c00 	.word	0x40000c00
 8005db4:	40014000 	.word	0x40014000
 8005db8:	40001800 	.word	0x40001800

08005dbc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e0a2      	b.n	8005f16 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d111      	bne.n	8005e00 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 ff51 	bl	8006c8c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d102      	bne.n	8005df8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a4a      	ldr	r2, [pc, #296]	; (8005f20 <HAL_TIM_Encoder_Init+0x164>)
 8005df6:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6812      	ldr	r2, [r2, #0]
 8005e12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e16:	f023 0307 	bic.w	r3, r3, #7
 8005e1a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3304      	adds	r3, #4
 8005e24:	4619      	mov	r1, r3
 8005e26:	4610      	mov	r0, r2
 8005e28:	f000 fc20 	bl	800666c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e54:	f023 0303 	bic.w	r3, r3, #3
 8005e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	689a      	ldr	r2, [r3, #8]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	4313      	orrs	r3, r2
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005e72:	f023 030c 	bic.w	r3, r3, #12
 8005e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	021b      	lsls	r3, r3, #8
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	011a      	lsls	r2, r3, #4
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	031b      	lsls	r3, r3, #12
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005eb0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005eb8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	08001be5 	.word	0x08001be5

08005f24 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f34:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f3c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f44:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f4c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d110      	bne.n	8005f76 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d102      	bne.n	8005f60 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f5a:	7b7b      	ldrb	r3, [r7, #13]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d001      	beq.n	8005f64 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e069      	b.n	8006038 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f74:	e031      	b.n	8005fda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d110      	bne.n	8005f9e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d102      	bne.n	8005f88 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f82:	7b3b      	ldrb	r3, [r7, #12]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d001      	beq.n	8005f8c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e055      	b.n	8006038 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f9c:	e01d      	b.n	8005fda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d108      	bne.n	8005fb6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fa4:	7bbb      	ldrb	r3, [r7, #14]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d105      	bne.n	8005fb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005faa:	7b7b      	ldrb	r3, [r7, #13]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d102      	bne.n	8005fb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fb0:	7b3b      	ldrb	r3, [r7, #12]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d001      	beq.n	8005fba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e03e      	b.n	8006038 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d003      	beq.n	8005fe8 <HAL_TIM_Encoder_Start+0xc4>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d008      	beq.n	8005ff8 <HAL_TIM_Encoder_Start+0xd4>
 8005fe6:	e00f      	b.n	8006008 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2201      	movs	r2, #1
 8005fee:	2100      	movs	r1, #0
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 fe25 	bl	8006c40 <TIM_CCxChannelCmd>
      break;
 8005ff6:	e016      	b.n	8006026 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	2104      	movs	r1, #4
 8006000:	4618      	mov	r0, r3
 8006002:	f000 fe1d 	bl	8006c40 <TIM_CCxChannelCmd>
      break;
 8006006:	e00e      	b.n	8006026 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2201      	movs	r2, #1
 800600e:	2100      	movs	r1, #0
 8006010:	4618      	mov	r0, r3
 8006012:	f000 fe15 	bl	8006c40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2201      	movs	r2, #1
 800601c:	2104      	movs	r1, #4
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fe0e 	bl	8006c40 <TIM_CCxChannelCmd>
      break;
 8006024:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f042 0201 	orr.w	r2, r2, #1
 8006034:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b02      	cmp	r3, #2
 8006054:	d128      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b02      	cmp	r3, #2
 8006062:	d121      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0202 	mvn.w	r2, #2
 800606c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d005      	beq.n	800608e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	4798      	blx	r3
 800608c:	e009      	b.n	80060a2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d128      	bne.n	8006108 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d121      	bne.n	8006108 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0204 	mvn.w	r2, #4
 80060cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2202      	movs	r2, #2
 80060d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d005      	beq.n	80060ee <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	4798      	blx	r3
 80060ec:	e009      	b.n	8006102 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b08      	cmp	r3, #8
 8006114:	d128      	bne.n	8006168 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b08      	cmp	r3, #8
 8006122:	d121      	bne.n	8006168 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0208 	mvn.w	r2, #8
 800612c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2204      	movs	r2, #4
 8006132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	4798      	blx	r3
 800614c:	e009      	b.n	8006162 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0310 	and.w	r3, r3, #16
 8006172:	2b10      	cmp	r3, #16
 8006174:	d128      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0310 	and.w	r3, r3, #16
 8006180:	2b10      	cmp	r3, #16
 8006182:	d121      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0210 	mvn.w	r2, #16
 800618c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2208      	movs	r2, #8
 8006192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	4798      	blx	r3
 80061ac:	e009      	b.n	80061c2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d110      	bne.n	80061f8 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d109      	bne.n	80061f8 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f06f 0201 	mvn.w	r2, #1
 80061ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006202:	2b80      	cmp	r3, #128	; 0x80
 8006204:	d110      	bne.n	8006228 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006210:	2b80      	cmp	r3, #128	; 0x80
 8006212:	d109      	bne.n	8006228 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800621c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006232:	2b40      	cmp	r3, #64	; 0x40
 8006234:	d110      	bne.n	8006258 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b40      	cmp	r3, #64	; 0x40
 8006242:	d109      	bne.n	8006258 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800624c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b20      	cmp	r3, #32
 8006264:	d110      	bne.n	8006288 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b20      	cmp	r3, #32
 8006272:	d109      	bne.n	8006288 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0220 	mvn.w	r2, #32
 800627c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006288:	bf00      	nop
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062aa:	2302      	movs	r3, #2
 80062ac:	e0ae      	b.n	800640c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b0c      	cmp	r3, #12
 80062ba:	f200 809f 	bhi.w	80063fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062be:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c4:	080062f9 	.word	0x080062f9
 80062c8:	080063fd 	.word	0x080063fd
 80062cc:	080063fd 	.word	0x080063fd
 80062d0:	080063fd 	.word	0x080063fd
 80062d4:	08006339 	.word	0x08006339
 80062d8:	080063fd 	.word	0x080063fd
 80062dc:	080063fd 	.word	0x080063fd
 80062e0:	080063fd 	.word	0x080063fd
 80062e4:	0800637b 	.word	0x0800637b
 80062e8:	080063fd 	.word	0x080063fd
 80062ec:	080063fd 	.word	0x080063fd
 80062f0:	080063fd 	.word	0x080063fd
 80062f4:	080063bb 	.word	0x080063bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fa54 	bl	80067ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699a      	ldr	r2, [r3, #24]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0208 	orr.w	r2, r2, #8
 8006312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0204 	bic.w	r2, r2, #4
 8006322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6999      	ldr	r1, [r3, #24]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	691a      	ldr	r2, [r3, #16]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	619a      	str	r2, [r3, #24]
      break;
 8006336:	e064      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 faa4 	bl	800688c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6999      	ldr	r1, [r3, #24]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	021a      	lsls	r2, r3, #8
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	619a      	str	r2, [r3, #24]
      break;
 8006378:	e043      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	4618      	mov	r0, r3
 8006382:	f000 faf9 	bl	8006978 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69da      	ldr	r2, [r3, #28]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f042 0208 	orr.w	r2, r2, #8
 8006394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69da      	ldr	r2, [r3, #28]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0204 	bic.w	r2, r2, #4
 80063a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69d9      	ldr	r1, [r3, #28]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	691a      	ldr	r2, [r3, #16]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	61da      	str	r2, [r3, #28]
      break;
 80063b8:	e023      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fb4d 	bl	8006a60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69da      	ldr	r2, [r3, #28]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69da      	ldr	r2, [r3, #28]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69d9      	ldr	r1, [r3, #28]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	021a      	lsls	r2, r3, #8
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	61da      	str	r2, [r3, #28]
      break;
 80063fa:	e002      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800640a:	7dfb      	ldrb	r3, [r7, #23]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3718      	adds	r7, #24
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_TIM_ConfigClockSource+0x1c>
 800642c:	2302      	movs	r3, #2
 800642e:	e0b4      	b.n	800659a <HAL_TIM_ConfigClockSource+0x186>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800644e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006468:	d03e      	beq.n	80064e8 <HAL_TIM_ConfigClockSource+0xd4>
 800646a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800646e:	f200 8087 	bhi.w	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 8006472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006476:	f000 8086 	beq.w	8006586 <HAL_TIM_ConfigClockSource+0x172>
 800647a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800647e:	d87f      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 8006480:	2b70      	cmp	r3, #112	; 0x70
 8006482:	d01a      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0xa6>
 8006484:	2b70      	cmp	r3, #112	; 0x70
 8006486:	d87b      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 8006488:	2b60      	cmp	r3, #96	; 0x60
 800648a:	d050      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x11a>
 800648c:	2b60      	cmp	r3, #96	; 0x60
 800648e:	d877      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 8006490:	2b50      	cmp	r3, #80	; 0x50
 8006492:	d03c      	beq.n	800650e <HAL_TIM_ConfigClockSource+0xfa>
 8006494:	2b50      	cmp	r3, #80	; 0x50
 8006496:	d873      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 8006498:	2b40      	cmp	r3, #64	; 0x40
 800649a:	d058      	beq.n	800654e <HAL_TIM_ConfigClockSource+0x13a>
 800649c:	2b40      	cmp	r3, #64	; 0x40
 800649e:	d86f      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 80064a0:	2b30      	cmp	r3, #48	; 0x30
 80064a2:	d064      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x15a>
 80064a4:	2b30      	cmp	r3, #48	; 0x30
 80064a6:	d86b      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d060      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x15a>
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d867      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d05c      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x15a>
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d05a      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x15a>
 80064b8:	e062      	b.n	8006580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6818      	ldr	r0, [r3, #0]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	6899      	ldr	r1, [r3, #8]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f000 fb99 	bl	8006c00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	609a      	str	r2, [r3, #8]
      break;
 80064e6:	e04f      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6818      	ldr	r0, [r3, #0]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	6899      	ldr	r1, [r3, #8]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f000 fb82 	bl	8006c00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800650a:	609a      	str	r2, [r3, #8]
      break;
 800650c:	e03c      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6859      	ldr	r1, [r3, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	461a      	mov	r2, r3
 800651c:	f000 faf6 	bl	8006b0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2150      	movs	r1, #80	; 0x50
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fb4f 	bl	8006bca <TIM_ITRx_SetConfig>
      break;
 800652c:	e02c      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6818      	ldr	r0, [r3, #0]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	6859      	ldr	r1, [r3, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	461a      	mov	r2, r3
 800653c:	f000 fb15 	bl	8006b6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2160      	movs	r1, #96	; 0x60
 8006546:	4618      	mov	r0, r3
 8006548:	f000 fb3f 	bl	8006bca <TIM_ITRx_SetConfig>
      break;
 800654c:	e01c      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6818      	ldr	r0, [r3, #0]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	6859      	ldr	r1, [r3, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	461a      	mov	r2, r3
 800655c:	f000 fad6 	bl	8006b0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2140      	movs	r1, #64	; 0x40
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fb2f 	bl	8006bca <TIM_ITRx_SetConfig>
      break;
 800656c:	e00c      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4619      	mov	r1, r3
 8006578:	4610      	mov	r0, r2
 800657a:	f000 fb26 	bl	8006bca <TIM_ITRx_SetConfig>
      break;
 800657e:	e003      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	73fb      	strb	r3, [r7, #15]
      break;
 8006584:	e000      	b.n	8006588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006598:	7bfb      	ldrb	r3, [r7, #15]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80065aa:	bf00      	nop
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
	...

0800666c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a40      	ldr	r2, [pc, #256]	; (8006780 <TIM_Base_SetConfig+0x114>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d013      	beq.n	80066ac <TIM_Base_SetConfig+0x40>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668a:	d00f      	beq.n	80066ac <TIM_Base_SetConfig+0x40>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a3d      	ldr	r2, [pc, #244]	; (8006784 <TIM_Base_SetConfig+0x118>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00b      	beq.n	80066ac <TIM_Base_SetConfig+0x40>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a3c      	ldr	r2, [pc, #240]	; (8006788 <TIM_Base_SetConfig+0x11c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d007      	beq.n	80066ac <TIM_Base_SetConfig+0x40>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a3b      	ldr	r2, [pc, #236]	; (800678c <TIM_Base_SetConfig+0x120>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_Base_SetConfig+0x40>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a3a      	ldr	r2, [pc, #232]	; (8006790 <TIM_Base_SetConfig+0x124>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d108      	bne.n	80066be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a2f      	ldr	r2, [pc, #188]	; (8006780 <TIM_Base_SetConfig+0x114>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d02b      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066cc:	d027      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a2c      	ldr	r2, [pc, #176]	; (8006784 <TIM_Base_SetConfig+0x118>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d023      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a2b      	ldr	r2, [pc, #172]	; (8006788 <TIM_Base_SetConfig+0x11c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d01f      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a2a      	ldr	r2, [pc, #168]	; (800678c <TIM_Base_SetConfig+0x120>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d01b      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a29      	ldr	r2, [pc, #164]	; (8006790 <TIM_Base_SetConfig+0x124>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d017      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a28      	ldr	r2, [pc, #160]	; (8006794 <TIM_Base_SetConfig+0x128>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d013      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a27      	ldr	r2, [pc, #156]	; (8006798 <TIM_Base_SetConfig+0x12c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00f      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a26      	ldr	r2, [pc, #152]	; (800679c <TIM_Base_SetConfig+0x130>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00b      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a25      	ldr	r2, [pc, #148]	; (80067a0 <TIM_Base_SetConfig+0x134>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d007      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a24      	ldr	r2, [pc, #144]	; (80067a4 <TIM_Base_SetConfig+0x138>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d003      	beq.n	800671e <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a23      	ldr	r2, [pc, #140]	; (80067a8 <TIM_Base_SetConfig+0x13c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d108      	bne.n	8006730 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a0a      	ldr	r2, [pc, #40]	; (8006780 <TIM_Base_SetConfig+0x114>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d003      	beq.n	8006764 <TIM_Base_SetConfig+0xf8>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a0c      	ldr	r2, [pc, #48]	; (8006790 <TIM_Base_SetConfig+0x124>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d103      	bne.n	800676c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	691a      	ldr	r2, [r3, #16]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	615a      	str	r2, [r3, #20]
}
 8006772:	bf00      	nop
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	40010000 	.word	0x40010000
 8006784:	40000400 	.word	0x40000400
 8006788:	40000800 	.word	0x40000800
 800678c:	40000c00 	.word	0x40000c00
 8006790:	40010400 	.word	0x40010400
 8006794:	40014000 	.word	0x40014000
 8006798:	40014400 	.word	0x40014400
 800679c:	40014800 	.word	0x40014800
 80067a0:	40001800 	.word	0x40001800
 80067a4:	40001c00 	.word	0x40001c00
 80067a8:	40002000 	.word	0x40002000

080067ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f023 0201 	bic.w	r2, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0303 	bic.w	r3, r3, #3
 80067e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f023 0302 	bic.w	r3, r3, #2
 80067f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a20      	ldr	r2, [pc, #128]	; (8006884 <TIM_OC1_SetConfig+0xd8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d003      	beq.n	8006810 <TIM_OC1_SetConfig+0x64>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a1f      	ldr	r2, [pc, #124]	; (8006888 <TIM_OC1_SetConfig+0xdc>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d10c      	bne.n	800682a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f023 0308 	bic.w	r3, r3, #8
 8006816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f023 0304 	bic.w	r3, r3, #4
 8006828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a15      	ldr	r2, [pc, #84]	; (8006884 <TIM_OC1_SetConfig+0xd8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d003      	beq.n	800683a <TIM_OC1_SetConfig+0x8e>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a14      	ldr	r2, [pc, #80]	; (8006888 <TIM_OC1_SetConfig+0xdc>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d111      	bne.n	800685e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	4313      	orrs	r3, r2
 8006852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	621a      	str	r2, [r3, #32]
}
 8006878:	bf00      	nop
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	40010000 	.word	0x40010000
 8006888:	40010400 	.word	0x40010400

0800688c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	f023 0210 	bic.w	r2, r3, #16
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	021b      	lsls	r3, r3, #8
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f023 0320 	bic.w	r3, r3, #32
 80068d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a22      	ldr	r2, [pc, #136]	; (8006970 <TIM_OC2_SetConfig+0xe4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d003      	beq.n	80068f4 <TIM_OC2_SetConfig+0x68>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a21      	ldr	r2, [pc, #132]	; (8006974 <TIM_OC2_SetConfig+0xe8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d10d      	bne.n	8006910 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	4313      	orrs	r3, r2
 8006906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800690e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a17      	ldr	r2, [pc, #92]	; (8006970 <TIM_OC2_SetConfig+0xe4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d003      	beq.n	8006920 <TIM_OC2_SetConfig+0x94>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a16      	ldr	r2, [pc, #88]	; (8006974 <TIM_OC2_SetConfig+0xe8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d113      	bne.n	8006948 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006926:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800692e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	621a      	str	r2, [r3, #32]
}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	40010000 	.word	0x40010000
 8006974:	40010400 	.word	0x40010400

08006978 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 0303 	bic.w	r3, r3, #3
 80069ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	021b      	lsls	r3, r3, #8
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a21      	ldr	r2, [pc, #132]	; (8006a58 <TIM_OC3_SetConfig+0xe0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d003      	beq.n	80069de <TIM_OC3_SetConfig+0x66>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a20      	ldr	r2, [pc, #128]	; (8006a5c <TIM_OC3_SetConfig+0xe4>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d10d      	bne.n	80069fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	021b      	lsls	r3, r3, #8
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a16      	ldr	r2, [pc, #88]	; (8006a58 <TIM_OC3_SetConfig+0xe0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d003      	beq.n	8006a0a <TIM_OC3_SetConfig+0x92>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a15      	ldr	r2, [pc, #84]	; (8006a5c <TIM_OC3_SetConfig+0xe4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d113      	bne.n	8006a32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	011b      	lsls	r3, r3, #4
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	621a      	str	r2, [r3, #32]
}
 8006a4c:	bf00      	nop
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	40010000 	.word	0x40010000
 8006a5c:	40010400 	.word	0x40010400

08006a60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	021b      	lsls	r3, r3, #8
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006aaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	031b      	lsls	r3, r3, #12
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a12      	ldr	r2, [pc, #72]	; (8006b04 <TIM_OC4_SetConfig+0xa4>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d003      	beq.n	8006ac8 <TIM_OC4_SetConfig+0x68>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a11      	ldr	r2, [pc, #68]	; (8006b08 <TIM_OC4_SetConfig+0xa8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d109      	bne.n	8006adc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ace:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	019b      	lsls	r3, r3, #6
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	621a      	str	r2, [r3, #32]
}
 8006af6:	bf00      	nop
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	40010000 	.word	0x40010000
 8006b08:	40010400 	.word	0x40010400

08006b0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	f023 0201 	bic.w	r2, r3, #1
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	011b      	lsls	r3, r3, #4
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f023 030a 	bic.w	r3, r3, #10
 8006b48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	621a      	str	r2, [r3, #32]
}
 8006b5e:	bf00      	nop
 8006b60:	371c      	adds	r7, #28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b087      	sub	sp, #28
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f023 0210 	bic.w	r2, r3, #16
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	031b      	lsls	r3, r3, #12
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ba6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	621a      	str	r2, [r3, #32]
}
 8006bbe:	bf00      	nop
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	f043 0307 	orr.w	r3, r3, #7
 8006bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	609a      	str	r2, [r3, #8]
}
 8006bf4:	bf00      	nop
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
 8006c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	021a      	lsls	r2, r3, #8
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	609a      	str	r2, [r3, #8]
}
 8006c34:	bf00      	nop
 8006c36:	371c      	adds	r7, #28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f003 031f 	and.w	r3, r3, #31
 8006c52:	2201      	movs	r2, #1
 8006c54:	fa02 f303 	lsl.w	r3, r2, r3
 8006c58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1a      	ldr	r2, [r3, #32]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	43db      	mvns	r3, r3
 8006c62:	401a      	ands	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a1a      	ldr	r2, [r3, #32]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f003 031f 	and.w	r3, r3, #31
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	fa01 f303 	lsl.w	r3, r1, r3
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	621a      	str	r2, [r3, #32]
}
 8006c7e:	bf00      	nop
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
	...

08006c8c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a1c      	ldr	r2, [pc, #112]	; (8006d08 <TIM_ResetCallback+0x7c>)
 8006c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a1b      	ldr	r2, [pc, #108]	; (8006d0c <TIM_ResetCallback+0x80>)
 8006ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a1a      	ldr	r2, [pc, #104]	; (8006d10 <TIM_ResetCallback+0x84>)
 8006ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a19      	ldr	r2, [pc, #100]	; (8006d14 <TIM_ResetCallback+0x88>)
 8006cb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a18      	ldr	r2, [pc, #96]	; (8006d18 <TIM_ResetCallback+0x8c>)
 8006cb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a17      	ldr	r2, [pc, #92]	; (8006d1c <TIM_ResetCallback+0x90>)
 8006cc0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a16      	ldr	r2, [pc, #88]	; (8006d20 <TIM_ResetCallback+0x94>)
 8006cc8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a15      	ldr	r2, [pc, #84]	; (8006d24 <TIM_ResetCallback+0x98>)
 8006cd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a14      	ldr	r2, [pc, #80]	; (8006d28 <TIM_ResetCallback+0x9c>)
 8006cd8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a13      	ldr	r2, [pc, #76]	; (8006d2c <TIM_ResetCallback+0xa0>)
 8006ce0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a12      	ldr	r2, [pc, #72]	; (8006d30 <TIM_ResetCallback+0xa4>)
 8006ce8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a11      	ldr	r2, [pc, #68]	; (8006d34 <TIM_ResetCallback+0xa8>)
 8006cf0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a10      	ldr	r2, [pc, #64]	; (8006d38 <TIM_ResetCallback+0xac>)
 8006cf8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	080065a3 	.word	0x080065a3
 8006d0c:	080065b7 	.word	0x080065b7
 8006d10:	0800662f 	.word	0x0800662f
 8006d14:	08006643 	.word	0x08006643
 8006d18:	080065df 	.word	0x080065df
 8006d1c:	080065f3 	.word	0x080065f3
 8006d20:	080065cb 	.word	0x080065cb
 8006d24:	08006607 	.word	0x08006607
 8006d28:	0800661b 	.word	0x0800661b
 8006d2c:	08006657 	.word	0x08006657
 8006d30:	08006ed9 	.word	0x08006ed9
 8006d34:	08006eed 	.word	0x08006eed
 8006d38:	08006f01 	.word	0x08006f01

08006d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e05a      	b.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a21      	ldr	r2, [pc, #132]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d022      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da0:	d01d      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1d      	ldr	r2, [pc, #116]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d018      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a1b      	ldr	r2, [pc, #108]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d013      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a1a      	ldr	r2, [pc, #104]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00e      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a18      	ldr	r2, [pc, #96]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d009      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a17      	ldr	r2, [pc, #92]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d004      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a15      	ldr	r2, [pc, #84]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d10c      	bne.n	8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40010000 	.word	0x40010000
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40000800 	.word	0x40000800
 8006e24:	40000c00 	.word	0x40000c00
 8006e28:	40010400 	.word	0x40010400
 8006e2c:	40014000 	.word	0x40014000
 8006e30:	40001800 	.word	0x40001800

08006e34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d101      	bne.n	8006e50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	e03d      	b.n	8006ecc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e04a      	b.n	8006fbc <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d111      	bne.n	8006f56 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa04 	bl	8007348 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d102      	bne.n	8006f4e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a1e      	ldr	r2, [pc, #120]	; (8006fc4 <HAL_UART_Init+0xb0>)
 8006f4c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2224      	movs	r2, #36	; 0x24
 8006f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f6c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fcb4 	bl	80078dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	695a      	ldr	r2, [r3, #20]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f92:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fa2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	08001da1 	.word	0x08001da1

08006fc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	; 0x28
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	603b      	str	r3, [r7, #0]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b20      	cmp	r3, #32
 8006fe6:	d17c      	bne.n	80070e2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <HAL_UART_Transmit+0x2c>
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e075      	b.n	80070e4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d101      	bne.n	8007006 <HAL_UART_Transmit+0x3e>
 8007002:	2302      	movs	r3, #2
 8007004:	e06e      	b.n	80070e4 <HAL_UART_Transmit+0x11c>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2221      	movs	r2, #33	; 0x21
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800701c:	f7fd f8ca 	bl	80041b4 <HAL_GetTick>
 8007020:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	88fa      	ldrh	r2, [r7, #6]
 8007026:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	88fa      	ldrh	r2, [r7, #6]
 800702c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007036:	d108      	bne.n	800704a <HAL_UART_Transmit+0x82>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d104      	bne.n	800704a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007040:	2300      	movs	r3, #0
 8007042:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	61bb      	str	r3, [r7, #24]
 8007048:	e003      	b.n	8007052 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800704e:	2300      	movs	r3, #0
 8007050:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800705a:	e02a      	b.n	80070b2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2200      	movs	r2, #0
 8007064:	2180      	movs	r1, #128	; 0x80
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 faa3 	bl	80075b2 <UART_WaitOnFlagUntilTimeout>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e036      	b.n	80070e4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10b      	bne.n	8007094 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800708a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	3302      	adds	r3, #2
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	e007      	b.n	80070a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	781a      	ldrb	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	3301      	adds	r3, #1
 80070a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	3b01      	subs	r3, #1
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1cf      	bne.n	800705c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2200      	movs	r2, #0
 80070c4:	2140      	movs	r1, #64	; 0x40
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 fa73 	bl	80075b2 <UART_WaitOnFlagUntilTimeout>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e006      	b.n	80070e4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2220      	movs	r2, #32
 80070da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	e000      	b.n	80070e4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80070e2:	2302      	movs	r3, #2
  }
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3720      	adds	r7, #32
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08a      	sub	sp, #40	; 0x28
 80070f0:	af02      	add	r7, sp, #8
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	4613      	mov	r3, r2
 80070fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b20      	cmp	r3, #32
 800710a:	f040 808c 	bne.w	8007226 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <HAL_UART_Receive+0x2e>
 8007114:	88fb      	ldrh	r3, [r7, #6]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e084      	b.n	8007228 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_UART_Receive+0x40>
 8007128:	2302      	movs	r3, #2
 800712a:	e07d      	b.n	8007228 <HAL_UART_Receive+0x13c>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2222      	movs	r2, #34	; 0x22
 800713e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007148:	f7fd f834 	bl	80041b4 <HAL_GetTick>
 800714c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	88fa      	ldrh	r2, [r7, #6]
 8007152:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	88fa      	ldrh	r2, [r7, #6]
 8007158:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007162:	d108      	bne.n	8007176 <HAL_UART_Receive+0x8a>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d104      	bne.n	8007176 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800716c:	2300      	movs	r3, #0
 800716e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	61bb      	str	r3, [r7, #24]
 8007174:	e003      	b.n	800717e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800717a:	2300      	movs	r3, #0
 800717c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007186:	e043      	b.n	8007210 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	2200      	movs	r2, #0
 8007190:	2120      	movs	r1, #32
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 fa0d 	bl	80075b2 <UART_WaitOnFlagUntilTimeout>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e042      	b.n	8007228 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10c      	bne.n	80071c2 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	3302      	adds	r3, #2
 80071be:	61bb      	str	r3, [r7, #24]
 80071c0:	e01f      	b.n	8007202 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ca:	d007      	beq.n	80071dc <HAL_UART_Receive+0xf0>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <HAL_UART_Receive+0xfe>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d106      	bne.n	80071ea <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	701a      	strb	r2, [r3, #0]
 80071e8:	e008      	b.n	80071fc <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	3301      	adds	r3, #1
 8007200:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007206:	b29b      	uxth	r3, r3
 8007208:	3b01      	subs	r3, #1
 800720a:	b29a      	uxth	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007214:	b29b      	uxth	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1b6      	bne.n	8007188 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2220      	movs	r2, #32
 800721e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	e000      	b.n	8007228 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007226:	2302      	movs	r3, #2
  }
}
 8007228:	4618      	mov	r0, r3
 800722a:	3720      	adds	r7, #32
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	4613      	mov	r3, r2
 800723c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b20      	cmp	r3, #32
 8007248:	d11d      	bne.n	8007286 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <HAL_UART_Receive_DMA+0x26>
 8007250:	88fb      	ldrh	r3, [r7, #6]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e016      	b.n	8007288 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_UART_Receive_DMA+0x38>
 8007264:	2302      	movs	r3, #2
 8007266:	e00f      	b.n	8007288 <HAL_UART_Receive_DMA+0x58>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007276:	88fb      	ldrh	r3, [r7, #6]
 8007278:	461a      	mov	r2, r3
 800727a:	68b9      	ldr	r1, [r7, #8]
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 fa07 	bl	8007690 <UART_Start_Receive_DMA>
 8007282:	4603      	mov	r3, r0
 8007284:	e000      	b.n	8007288 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007286:	2302      	movs	r3, #2
  }
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a10      	ldr	r2, [pc, #64]	; (8007394 <UART_InitCallbacksToDefault+0x4c>)
 8007354:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a0f      	ldr	r2, [pc, #60]	; (8007398 <UART_InitCallbacksToDefault+0x50>)
 800735a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a0f      	ldr	r2, [pc, #60]	; (800739c <UART_InitCallbacksToDefault+0x54>)
 8007360:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a0e      	ldr	r2, [pc, #56]	; (80073a0 <UART_InitCallbacksToDefault+0x58>)
 8007366:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a0e      	ldr	r2, [pc, #56]	; (80073a4 <UART_InitCallbacksToDefault+0x5c>)
 800736c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a0d      	ldr	r2, [pc, #52]	; (80073a8 <UART_InitCallbacksToDefault+0x60>)
 8007372:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a0d      	ldr	r2, [pc, #52]	; (80073ac <UART_InitCallbacksToDefault+0x64>)
 8007378:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a0c      	ldr	r2, [pc, #48]	; (80073b0 <UART_InitCallbacksToDefault+0x68>)
 800737e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a0c      	ldr	r2, [pc, #48]	; (80073b4 <UART_InitCallbacksToDefault+0x6c>)
 8007384:	669a      	str	r2, [r3, #104]	; 0x68

}
 8007386:	bf00      	nop
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	080072a5 	.word	0x080072a5
 8007398:	08007291 	.word	0x08007291
 800739c:	080072cd 	.word	0x080072cd
 80073a0:	080072b9 	.word	0x080072b9
 80073a4:	080072e1 	.word	0x080072e1
 80073a8:	080072f5 	.word	0x080072f5
 80073ac:	08007309 	.word	0x08007309
 80073b0:	0800731d 	.word	0x0800731d
 80073b4:	08007331 	.word	0x08007331

080073b8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b09c      	sub	sp, #112	; 0x70
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d172      	bne.n	80074ba <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80073d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d6:	2200      	movs	r2, #0
 80073d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	330c      	adds	r3, #12
 80073e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80073f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	330c      	adds	r3, #12
 80073f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80073fc:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007400:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e5      	bne.n	80073da <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3314      	adds	r3, #20
 8007414:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800741e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007420:	f023 0301 	bic.w	r3, r3, #1
 8007424:	667b      	str	r3, [r7, #100]	; 0x64
 8007426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3314      	adds	r3, #20
 800742c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800742e:	647a      	str	r2, [r7, #68]	; 0x44
 8007430:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800743c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e5      	bne.n	800740e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3314      	adds	r3, #20
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	e853 3f00 	ldrex	r3, [r3]
 8007450:	623b      	str	r3, [r7, #32]
   return(result);
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007458:	663b      	str	r3, [r7, #96]	; 0x60
 800745a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3314      	adds	r3, #20
 8007460:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007462:	633a      	str	r2, [r7, #48]	; 0x30
 8007464:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e5      	bne.n	8007442 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007478:	2220      	movs	r2, #32
 800747a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800747e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007482:	2b01      	cmp	r3, #1
 8007484:	d119      	bne.n	80074ba <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	330c      	adds	r3, #12
 800748c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	60fb      	str	r3, [r7, #12]
   return(result);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f023 0310 	bic.w	r3, r3, #16
 800749c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800749e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	330c      	adds	r3, #12
 80074a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074a6:	61fa      	str	r2, [r7, #28]
 80074a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074aa:	69b9      	ldr	r1, [r7, #24]
 80074ac:	69fa      	ldr	r2, [r7, #28]
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	617b      	str	r3, [r7, #20]
   return(result);
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e5      	bne.n	8007486 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d107      	bne.n	80074d2 <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80074c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074c8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80074ca:	4611      	mov	r1, r2
 80074cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80074ce:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074d0:	e003      	b.n	80074da <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 80074d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80074d8:	4798      	blx	r3
}
 80074da:	bf00      	nop
 80074dc:	3770      	adds	r7, #112	; 0x70
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d109      	bne.n	800750c <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007500:	0852      	lsrs	r2, r2, #1
 8007502:	b292      	uxth	r2, r2
 8007504:	4611      	mov	r1, r2
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800750a:	e003      	b.n	8007514 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	4798      	blx	r3
}
 8007514:	bf00      	nop
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007524:	2300      	movs	r3, #0
 8007526:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007538:	2b80      	cmp	r3, #128	; 0x80
 800753a:	bf0c      	ite	eq
 800753c:	2301      	moveq	r3, #1
 800753e:	2300      	movne	r3, #0
 8007540:	b2db      	uxtb	r3, r3
 8007542:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b21      	cmp	r3, #33	; 0x21
 800754e:	d108      	bne.n	8007562 <UART_DMAError+0x46>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d005      	beq.n	8007562 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2200      	movs	r2, #0
 800755a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800755c:	68b8      	ldr	r0, [r7, #8]
 800755e:	f000 f931 	bl	80077c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756c:	2b40      	cmp	r3, #64	; 0x40
 800756e:	bf0c      	ite	eq
 8007570:	2301      	moveq	r3, #1
 8007572:	2300      	movne	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b22      	cmp	r3, #34	; 0x22
 8007582:	d108      	bne.n	8007596 <UART_DMAError+0x7a>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d005      	beq.n	8007596 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2200      	movs	r2, #0
 800758e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007590:	68b8      	ldr	r0, [r7, #8]
 8007592:	f000 f93f 	bl	8007814 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	f043 0210 	orr.w	r2, r3, #16
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a6:	68b8      	ldr	r0, [r7, #8]
 80075a8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075aa:	bf00      	nop
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b090      	sub	sp, #64	; 0x40
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	603b      	str	r3, [r7, #0]
 80075be:	4613      	mov	r3, r2
 80075c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075c2:	e050      	b.n	8007666 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075ca:	d04c      	beq.n	8007666 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80075cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d007      	beq.n	80075e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80075d2:	f7fc fdef 	bl	80041b4 <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075de:	429a      	cmp	r2, r3
 80075e0:	d241      	bcs.n	8007666 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	330c      	adds	r3, #12
 80075e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	330c      	adds	r3, #12
 8007600:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007602:	637a      	str	r2, [r7, #52]	; 0x34
 8007604:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007606:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1e5      	bne.n	80075e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3314      	adds	r3, #20
 800761c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	613b      	str	r3, [r7, #16]
   return(result);
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	f023 0301 	bic.w	r3, r3, #1
 800762c:	63bb      	str	r3, [r7, #56]	; 0x38
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3314      	adds	r3, #20
 8007634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007636:	623a      	str	r2, [r7, #32]
 8007638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	69f9      	ldr	r1, [r7, #28]
 800763c:	6a3a      	ldr	r2, [r7, #32]
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	61bb      	str	r3, [r7, #24]
   return(result);
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e5      	bne.n	8007616 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2220      	movs	r2, #32
 800764e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2220      	movs	r2, #32
 8007656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e00f      	b.n	8007686 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	4013      	ands	r3, r2
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	429a      	cmp	r2, r3
 8007674:	bf0c      	ite	eq
 8007676:	2301      	moveq	r3, #1
 8007678:	2300      	movne	r3, #0
 800767a:	b2db      	uxtb	r3, r3
 800767c:	461a      	mov	r2, r3
 800767e:	79fb      	ldrb	r3, [r7, #7]
 8007680:	429a      	cmp	r2, r3
 8007682:	d09f      	beq.n	80075c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3740      	adds	r7, #64	; 0x40
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
	...

08007690 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b098      	sub	sp, #96	; 0x60
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	4613      	mov	r3, r2
 800769c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	88fa      	ldrh	r2, [r7, #6]
 80076a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2222      	movs	r2, #34	; 0x22
 80076b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	4a3e      	ldr	r2, [pc, #248]	; (80077b8 <UART_Start_Receive_DMA+0x128>)
 80076be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c4:	4a3d      	ldr	r2, [pc, #244]	; (80077bc <UART_Start_Receive_DMA+0x12c>)
 80076c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076cc:	4a3c      	ldr	r2, [pc, #240]	; (80077c0 <UART_Start_Receive_DMA+0x130>)
 80076ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d4:	2200      	movs	r2, #0
 80076d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80076d8:	f107 0308 	add.w	r3, r7, #8
 80076dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3304      	adds	r3, #4
 80076e8:	4619      	mov	r1, r3
 80076ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	88fb      	ldrh	r3, [r7, #6]
 80076f0:	f7fc ff50 	bl	8004594 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80076f4:	2300      	movs	r3, #0
 80076f6:	613b      	str	r3, [r7, #16]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	613b      	str	r3, [r7, #16]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	613b      	str	r3, [r7, #16]
 8007708:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	330c      	adds	r3, #12
 8007718:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007728:	65bb      	str	r3, [r7, #88]	; 0x58
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	330c      	adds	r3, #12
 8007730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007732:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007734:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007736:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1e5      	bne.n	8007712 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3314      	adds	r3, #20
 800774c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007750:	e853 3f00 	ldrex	r3, [r3]
 8007754:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	f043 0301 	orr.w	r3, r3, #1
 800775c:	657b      	str	r3, [r7, #84]	; 0x54
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3314      	adds	r3, #20
 8007764:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007766:	63ba      	str	r2, [r7, #56]	; 0x38
 8007768:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800776c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800776e:	e841 2300 	strex	r3, r2, [r1]
 8007772:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1e5      	bne.n	8007746 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3314      	adds	r3, #20
 8007780:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	617b      	str	r3, [r7, #20]
   return(result);
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007790:	653b      	str	r3, [r7, #80]	; 0x50
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3314      	adds	r3, #20
 8007798:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800779a:	627a      	str	r2, [r7, #36]	; 0x24
 800779c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779e:	6a39      	ldr	r1, [r7, #32]
 80077a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1e5      	bne.n	800777a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3760      	adds	r7, #96	; 0x60
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	080073b9 	.word	0x080073b9
 80077bc:	080074e3 	.word	0x080074e3
 80077c0:	0800751d 	.word	0x0800751d

080077c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b089      	sub	sp, #36	; 0x24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	330c      	adds	r3, #12
 80077d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	e853 3f00 	ldrex	r3, [r3]
 80077da:	60bb      	str	r3, [r7, #8]
   return(result);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80077e2:	61fb      	str	r3, [r7, #28]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	330c      	adds	r3, #12
 80077ea:	69fa      	ldr	r2, [r7, #28]
 80077ec:	61ba      	str	r2, [r7, #24]
 80077ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f0:	6979      	ldr	r1, [r7, #20]
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	e841 2300 	strex	r3, r2, [r1]
 80077f8:	613b      	str	r3, [r7, #16]
   return(result);
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1e5      	bne.n	80077cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2220      	movs	r2, #32
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007808:	bf00      	nop
 800780a:	3724      	adds	r7, #36	; 0x24
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007814:	b480      	push	{r7}
 8007816:	b095      	sub	sp, #84	; 0x54
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	330c      	adds	r3, #12
 8007822:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	330c      	adds	r3, #12
 800783a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800783c:	643a      	str	r2, [r7, #64]	; 0x40
 800783e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007842:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e5      	bne.n	800781c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3314      	adds	r3, #20
 8007856:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	f023 0301 	bic.w	r3, r3, #1
 8007866:	64bb      	str	r3, [r7, #72]	; 0x48
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3314      	adds	r3, #20
 800786e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007870:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007878:	e841 2300 	strex	r3, r2, [r1]
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e5      	bne.n	8007850 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007888:	2b01      	cmp	r3, #1
 800788a:	d119      	bne.n	80078c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	330c      	adds	r3, #12
 8007892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	60bb      	str	r3, [r7, #8]
   return(result);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f023 0310 	bic.w	r3, r3, #16
 80078a2:	647b      	str	r3, [r7, #68]	; 0x44
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	330c      	adds	r3, #12
 80078aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078ac:	61ba      	str	r2, [r7, #24]
 80078ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6979      	ldr	r1, [r7, #20]
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	613b      	str	r3, [r7, #16]
   return(result);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e5      	bne.n	800788c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078ce:	bf00      	nop
 80078d0:	3754      	adds	r7, #84	; 0x54
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
	...

080078dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e0:	b09f      	sub	sp, #124	; 0x7c
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80078f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f2:	68d9      	ldr	r1, [r3, #12]
 80078f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	ea40 0301 	orr.w	r3, r0, r1
 80078fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	431a      	orrs	r2, r3
 8007908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	431a      	orrs	r2, r3
 800790e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	4313      	orrs	r3, r2
 8007914:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007920:	f021 010c 	bic.w	r1, r1, #12
 8007924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800792a:	430b      	orrs	r3, r1
 800792c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800792e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800793a:	6999      	ldr	r1, [r3, #24]
 800793c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	ea40 0301 	orr.w	r3, r0, r1
 8007944:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	4bc5      	ldr	r3, [pc, #788]	; (8007c60 <UART_SetConfig+0x384>)
 800794c:	429a      	cmp	r2, r3
 800794e:	d004      	beq.n	800795a <UART_SetConfig+0x7e>
 8007950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	4bc3      	ldr	r3, [pc, #780]	; (8007c64 <UART_SetConfig+0x388>)
 8007956:	429a      	cmp	r2, r3
 8007958:	d103      	bne.n	8007962 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800795a:	f7fd fbab 	bl	80050b4 <HAL_RCC_GetPCLK2Freq>
 800795e:	6778      	str	r0, [r7, #116]	; 0x74
 8007960:	e002      	b.n	8007968 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007962:	f7fd fb93 	bl	800508c <HAL_RCC_GetPCLK1Freq>
 8007966:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800796a:	69db      	ldr	r3, [r3, #28]
 800796c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007970:	f040 80b6 	bne.w	8007ae0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007976:	461c      	mov	r4, r3
 8007978:	f04f 0500 	mov.w	r5, #0
 800797c:	4622      	mov	r2, r4
 800797e:	462b      	mov	r3, r5
 8007980:	1891      	adds	r1, r2, r2
 8007982:	6439      	str	r1, [r7, #64]	; 0x40
 8007984:	415b      	adcs	r3, r3
 8007986:	647b      	str	r3, [r7, #68]	; 0x44
 8007988:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800798c:	1912      	adds	r2, r2, r4
 800798e:	eb45 0303 	adc.w	r3, r5, r3
 8007992:	f04f 0000 	mov.w	r0, #0
 8007996:	f04f 0100 	mov.w	r1, #0
 800799a:	00d9      	lsls	r1, r3, #3
 800799c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80079a0:	00d0      	lsls	r0, r2, #3
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	1911      	adds	r1, r2, r4
 80079a8:	6639      	str	r1, [r7, #96]	; 0x60
 80079aa:	416b      	adcs	r3, r5
 80079ac:	667b      	str	r3, [r7, #100]	; 0x64
 80079ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	461a      	mov	r2, r3
 80079b4:	f04f 0300 	mov.w	r3, #0
 80079b8:	1891      	adds	r1, r2, r2
 80079ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80079bc:	415b      	adcs	r3, r3
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80079c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80079c8:	f7f9 f97e 	bl	8000cc8 <__aeabi_uldivmod>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4ba5      	ldr	r3, [pc, #660]	; (8007c68 <UART_SetConfig+0x38c>)
 80079d2:	fba3 2302 	umull	r2, r3, r3, r2
 80079d6:	095b      	lsrs	r3, r3, #5
 80079d8:	011e      	lsls	r6, r3, #4
 80079da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079dc:	461c      	mov	r4, r3
 80079de:	f04f 0500 	mov.w	r5, #0
 80079e2:	4622      	mov	r2, r4
 80079e4:	462b      	mov	r3, r5
 80079e6:	1891      	adds	r1, r2, r2
 80079e8:	6339      	str	r1, [r7, #48]	; 0x30
 80079ea:	415b      	adcs	r3, r3
 80079ec:	637b      	str	r3, [r7, #52]	; 0x34
 80079ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80079f2:	1912      	adds	r2, r2, r4
 80079f4:	eb45 0303 	adc.w	r3, r5, r3
 80079f8:	f04f 0000 	mov.w	r0, #0
 80079fc:	f04f 0100 	mov.w	r1, #0
 8007a00:	00d9      	lsls	r1, r3, #3
 8007a02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a06:	00d0      	lsls	r0, r2, #3
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	1911      	adds	r1, r2, r4
 8007a0e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a10:	416b      	adcs	r3, r5
 8007a12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	f04f 0300 	mov.w	r3, #0
 8007a1e:	1891      	adds	r1, r2, r2
 8007a20:	62b9      	str	r1, [r7, #40]	; 0x28
 8007a22:	415b      	adcs	r3, r3
 8007a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a2a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007a2e:	f7f9 f94b 	bl	8000cc8 <__aeabi_uldivmod>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4b8c      	ldr	r3, [pc, #560]	; (8007c68 <UART_SetConfig+0x38c>)
 8007a38:	fba3 1302 	umull	r1, r3, r3, r2
 8007a3c:	095b      	lsrs	r3, r3, #5
 8007a3e:	2164      	movs	r1, #100	; 0x64
 8007a40:	fb01 f303 	mul.w	r3, r1, r3
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	00db      	lsls	r3, r3, #3
 8007a48:	3332      	adds	r3, #50	; 0x32
 8007a4a:	4a87      	ldr	r2, [pc, #540]	; (8007c68 <UART_SetConfig+0x38c>)
 8007a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a50:	095b      	lsrs	r3, r3, #5
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a58:	441e      	add	r6, r3
 8007a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f04f 0100 	mov.w	r1, #0
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	1894      	adds	r4, r2, r2
 8007a68:	623c      	str	r4, [r7, #32]
 8007a6a:	415b      	adcs	r3, r3
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a72:	1812      	adds	r2, r2, r0
 8007a74:	eb41 0303 	adc.w	r3, r1, r3
 8007a78:	f04f 0400 	mov.w	r4, #0
 8007a7c:	f04f 0500 	mov.w	r5, #0
 8007a80:	00dd      	lsls	r5, r3, #3
 8007a82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a86:	00d4      	lsls	r4, r2, #3
 8007a88:	4622      	mov	r2, r4
 8007a8a:	462b      	mov	r3, r5
 8007a8c:	1814      	adds	r4, r2, r0
 8007a8e:	653c      	str	r4, [r7, #80]	; 0x50
 8007a90:	414b      	adcs	r3, r1
 8007a92:	657b      	str	r3, [r7, #84]	; 0x54
 8007a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	1891      	adds	r1, r2, r2
 8007aa0:	61b9      	str	r1, [r7, #24]
 8007aa2:	415b      	adcs	r3, r3
 8007aa4:	61fb      	str	r3, [r7, #28]
 8007aa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007aaa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007aae:	f7f9 f90b 	bl	8000cc8 <__aeabi_uldivmod>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4b6c      	ldr	r3, [pc, #432]	; (8007c68 <UART_SetConfig+0x38c>)
 8007ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8007abc:	095b      	lsrs	r3, r3, #5
 8007abe:	2164      	movs	r1, #100	; 0x64
 8007ac0:	fb01 f303 	mul.w	r3, r1, r3
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	3332      	adds	r3, #50	; 0x32
 8007aca:	4a67      	ldr	r2, [pc, #412]	; (8007c68 <UART_SetConfig+0x38c>)
 8007acc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad0:	095b      	lsrs	r3, r3, #5
 8007ad2:	f003 0207 	and.w	r2, r3, #7
 8007ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4432      	add	r2, r6
 8007adc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ade:	e0b9      	b.n	8007c54 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ae2:	461c      	mov	r4, r3
 8007ae4:	f04f 0500 	mov.w	r5, #0
 8007ae8:	4622      	mov	r2, r4
 8007aea:	462b      	mov	r3, r5
 8007aec:	1891      	adds	r1, r2, r2
 8007aee:	6139      	str	r1, [r7, #16]
 8007af0:	415b      	adcs	r3, r3
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007af8:	1912      	adds	r2, r2, r4
 8007afa:	eb45 0303 	adc.w	r3, r5, r3
 8007afe:	f04f 0000 	mov.w	r0, #0
 8007b02:	f04f 0100 	mov.w	r1, #0
 8007b06:	00d9      	lsls	r1, r3, #3
 8007b08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b0c:	00d0      	lsls	r0, r2, #3
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	eb12 0804 	adds.w	r8, r2, r4
 8007b16:	eb43 0905 	adc.w	r9, r3, r5
 8007b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f04f 0100 	mov.w	r1, #0
 8007b24:	f04f 0200 	mov.w	r2, #0
 8007b28:	f04f 0300 	mov.w	r3, #0
 8007b2c:	008b      	lsls	r3, r1, #2
 8007b2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b32:	0082      	lsls	r2, r0, #2
 8007b34:	4640      	mov	r0, r8
 8007b36:	4649      	mov	r1, r9
 8007b38:	f7f9 f8c6 	bl	8000cc8 <__aeabi_uldivmod>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4b49      	ldr	r3, [pc, #292]	; (8007c68 <UART_SetConfig+0x38c>)
 8007b42:	fba3 2302 	umull	r2, r3, r3, r2
 8007b46:	095b      	lsrs	r3, r3, #5
 8007b48:	011e      	lsls	r6, r3, #4
 8007b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f04f 0100 	mov.w	r1, #0
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	1894      	adds	r4, r2, r2
 8007b58:	60bc      	str	r4, [r7, #8]
 8007b5a:	415b      	adcs	r3, r3
 8007b5c:	60fb      	str	r3, [r7, #12]
 8007b5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b62:	1812      	adds	r2, r2, r0
 8007b64:	eb41 0303 	adc.w	r3, r1, r3
 8007b68:	f04f 0400 	mov.w	r4, #0
 8007b6c:	f04f 0500 	mov.w	r5, #0
 8007b70:	00dd      	lsls	r5, r3, #3
 8007b72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b76:	00d4      	lsls	r4, r2, #3
 8007b78:	4622      	mov	r2, r4
 8007b7a:	462b      	mov	r3, r5
 8007b7c:	1814      	adds	r4, r2, r0
 8007b7e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007b80:	414b      	adcs	r3, r1
 8007b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f04f 0100 	mov.w	r1, #0
 8007b8e:	f04f 0200 	mov.w	r2, #0
 8007b92:	f04f 0300 	mov.w	r3, #0
 8007b96:	008b      	lsls	r3, r1, #2
 8007b98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b9c:	0082      	lsls	r2, r0, #2
 8007b9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007ba2:	f7f9 f891 	bl	8000cc8 <__aeabi_uldivmod>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4b2f      	ldr	r3, [pc, #188]	; (8007c68 <UART_SetConfig+0x38c>)
 8007bac:	fba3 1302 	umull	r1, r3, r3, r2
 8007bb0:	095b      	lsrs	r3, r3, #5
 8007bb2:	2164      	movs	r1, #100	; 0x64
 8007bb4:	fb01 f303 	mul.w	r3, r1, r3
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	3332      	adds	r3, #50	; 0x32
 8007bbe:	4a2a      	ldr	r2, [pc, #168]	; (8007c68 <UART_SetConfig+0x38c>)
 8007bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc4:	095b      	lsrs	r3, r3, #5
 8007bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bca:	441e      	add	r6, r3
 8007bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f04f 0100 	mov.w	r1, #0
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	1894      	adds	r4, r2, r2
 8007bda:	603c      	str	r4, [r7, #0]
 8007bdc:	415b      	adcs	r3, r3
 8007bde:	607b      	str	r3, [r7, #4]
 8007be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be4:	1812      	adds	r2, r2, r0
 8007be6:	eb41 0303 	adc.w	r3, r1, r3
 8007bea:	f04f 0400 	mov.w	r4, #0
 8007bee:	f04f 0500 	mov.w	r5, #0
 8007bf2:	00dd      	lsls	r5, r3, #3
 8007bf4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007bf8:	00d4      	lsls	r4, r2, #3
 8007bfa:	4622      	mov	r2, r4
 8007bfc:	462b      	mov	r3, r5
 8007bfe:	eb12 0a00 	adds.w	sl, r2, r0
 8007c02:	eb43 0b01 	adc.w	fp, r3, r1
 8007c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f04f 0100 	mov.w	r1, #0
 8007c10:	f04f 0200 	mov.w	r2, #0
 8007c14:	f04f 0300 	mov.w	r3, #0
 8007c18:	008b      	lsls	r3, r1, #2
 8007c1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c1e:	0082      	lsls	r2, r0, #2
 8007c20:	4650      	mov	r0, sl
 8007c22:	4659      	mov	r1, fp
 8007c24:	f7f9 f850 	bl	8000cc8 <__aeabi_uldivmod>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4b0e      	ldr	r3, [pc, #56]	; (8007c68 <UART_SetConfig+0x38c>)
 8007c2e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c32:	095b      	lsrs	r3, r3, #5
 8007c34:	2164      	movs	r1, #100	; 0x64
 8007c36:	fb01 f303 	mul.w	r3, r1, r3
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	3332      	adds	r3, #50	; 0x32
 8007c40:	4a09      	ldr	r2, [pc, #36]	; (8007c68 <UART_SetConfig+0x38c>)
 8007c42:	fba2 2303 	umull	r2, r3, r2, r3
 8007c46:	095b      	lsrs	r3, r3, #5
 8007c48:	f003 020f 	and.w	r2, r3, #15
 8007c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4432      	add	r2, r6
 8007c52:	609a      	str	r2, [r3, #8]
}
 8007c54:	bf00      	nop
 8007c56:	377c      	adds	r7, #124	; 0x7c
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5e:	bf00      	nop
 8007c60:	40011000 	.word	0x40011000
 8007c64:	40011400 	.word	0x40011400
 8007c68:	51eb851f 	.word	0x51eb851f

08007c6c <calloc>:
 8007c6c:	4b02      	ldr	r3, [pc, #8]	; (8007c78 <calloc+0xc>)
 8007c6e:	460a      	mov	r2, r1
 8007c70:	4601      	mov	r1, r0
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	f000 b83c 	b.w	8007cf0 <_calloc_r>
 8007c78:	2000000c 	.word	0x2000000c

08007c7c <__errno>:
 8007c7c:	4b01      	ldr	r3, [pc, #4]	; (8007c84 <__errno+0x8>)
 8007c7e:	6818      	ldr	r0, [r3, #0]
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	2000000c 	.word	0x2000000c

08007c88 <__libc_init_array>:
 8007c88:	b570      	push	{r4, r5, r6, lr}
 8007c8a:	4d0d      	ldr	r5, [pc, #52]	; (8007cc0 <__libc_init_array+0x38>)
 8007c8c:	4c0d      	ldr	r4, [pc, #52]	; (8007cc4 <__libc_init_array+0x3c>)
 8007c8e:	1b64      	subs	r4, r4, r5
 8007c90:	10a4      	asrs	r4, r4, #2
 8007c92:	2600      	movs	r6, #0
 8007c94:	42a6      	cmp	r6, r4
 8007c96:	d109      	bne.n	8007cac <__libc_init_array+0x24>
 8007c98:	4d0b      	ldr	r5, [pc, #44]	; (8007cc8 <__libc_init_array+0x40>)
 8007c9a:	4c0c      	ldr	r4, [pc, #48]	; (8007ccc <__libc_init_array+0x44>)
 8007c9c:	f005 fcdc 	bl	800d658 <_init>
 8007ca0:	1b64      	subs	r4, r4, r5
 8007ca2:	10a4      	asrs	r4, r4, #2
 8007ca4:	2600      	movs	r6, #0
 8007ca6:	42a6      	cmp	r6, r4
 8007ca8:	d105      	bne.n	8007cb6 <__libc_init_array+0x2e>
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb0:	4798      	blx	r3
 8007cb2:	3601      	adds	r6, #1
 8007cb4:	e7ee      	b.n	8007c94 <__libc_init_array+0xc>
 8007cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cba:	4798      	blx	r3
 8007cbc:	3601      	adds	r6, #1
 8007cbe:	e7f2      	b.n	8007ca6 <__libc_init_array+0x1e>
 8007cc0:	0800dd40 	.word	0x0800dd40
 8007cc4:	0800dd40 	.word	0x0800dd40
 8007cc8:	0800dd40 	.word	0x0800dd40
 8007ccc:	0800dd44 	.word	0x0800dd44

08007cd0 <malloc>:
 8007cd0:	4b02      	ldr	r3, [pc, #8]	; (8007cdc <malloc+0xc>)
 8007cd2:	4601      	mov	r1, r0
 8007cd4:	6818      	ldr	r0, [r3, #0]
 8007cd6:	f000 b86b 	b.w	8007db0 <_malloc_r>
 8007cda:	bf00      	nop
 8007cdc:	2000000c 	.word	0x2000000c

08007ce0 <memset>:
 8007ce0:	4402      	add	r2, r0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d100      	bne.n	8007cea <memset+0xa>
 8007ce8:	4770      	bx	lr
 8007cea:	f803 1b01 	strb.w	r1, [r3], #1
 8007cee:	e7f9      	b.n	8007ce4 <memset+0x4>

08007cf0 <_calloc_r>:
 8007cf0:	b513      	push	{r0, r1, r4, lr}
 8007cf2:	434a      	muls	r2, r1
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	9201      	str	r2, [sp, #4]
 8007cf8:	f000 f85a 	bl	8007db0 <_malloc_r>
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	b118      	cbz	r0, 8007d08 <_calloc_r+0x18>
 8007d00:	9a01      	ldr	r2, [sp, #4]
 8007d02:	2100      	movs	r1, #0
 8007d04:	f7ff ffec 	bl	8007ce0 <memset>
 8007d08:	4620      	mov	r0, r4
 8007d0a:	b002      	add	sp, #8
 8007d0c:	bd10      	pop	{r4, pc}
	...

08007d10 <_free_r>:
 8007d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d12:	2900      	cmp	r1, #0
 8007d14:	d048      	beq.n	8007da8 <_free_r+0x98>
 8007d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d1a:	9001      	str	r0, [sp, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f1a1 0404 	sub.w	r4, r1, #4
 8007d22:	bfb8      	it	lt
 8007d24:	18e4      	addlt	r4, r4, r3
 8007d26:	f003 fa2d 	bl	800b184 <__malloc_lock>
 8007d2a:	4a20      	ldr	r2, [pc, #128]	; (8007dac <_free_r+0x9c>)
 8007d2c:	9801      	ldr	r0, [sp, #4]
 8007d2e:	6813      	ldr	r3, [r2, #0]
 8007d30:	4615      	mov	r5, r2
 8007d32:	b933      	cbnz	r3, 8007d42 <_free_r+0x32>
 8007d34:	6063      	str	r3, [r4, #4]
 8007d36:	6014      	str	r4, [r2, #0]
 8007d38:	b003      	add	sp, #12
 8007d3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d3e:	f003 ba27 	b.w	800b190 <__malloc_unlock>
 8007d42:	42a3      	cmp	r3, r4
 8007d44:	d90b      	bls.n	8007d5e <_free_r+0x4e>
 8007d46:	6821      	ldr	r1, [r4, #0]
 8007d48:	1862      	adds	r2, r4, r1
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	bf04      	itt	eq
 8007d4e:	681a      	ldreq	r2, [r3, #0]
 8007d50:	685b      	ldreq	r3, [r3, #4]
 8007d52:	6063      	str	r3, [r4, #4]
 8007d54:	bf04      	itt	eq
 8007d56:	1852      	addeq	r2, r2, r1
 8007d58:	6022      	streq	r2, [r4, #0]
 8007d5a:	602c      	str	r4, [r5, #0]
 8007d5c:	e7ec      	b.n	8007d38 <_free_r+0x28>
 8007d5e:	461a      	mov	r2, r3
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	b10b      	cbz	r3, 8007d68 <_free_r+0x58>
 8007d64:	42a3      	cmp	r3, r4
 8007d66:	d9fa      	bls.n	8007d5e <_free_r+0x4e>
 8007d68:	6811      	ldr	r1, [r2, #0]
 8007d6a:	1855      	adds	r5, r2, r1
 8007d6c:	42a5      	cmp	r5, r4
 8007d6e:	d10b      	bne.n	8007d88 <_free_r+0x78>
 8007d70:	6824      	ldr	r4, [r4, #0]
 8007d72:	4421      	add	r1, r4
 8007d74:	1854      	adds	r4, r2, r1
 8007d76:	42a3      	cmp	r3, r4
 8007d78:	6011      	str	r1, [r2, #0]
 8007d7a:	d1dd      	bne.n	8007d38 <_free_r+0x28>
 8007d7c:	681c      	ldr	r4, [r3, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	6053      	str	r3, [r2, #4]
 8007d82:	4421      	add	r1, r4
 8007d84:	6011      	str	r1, [r2, #0]
 8007d86:	e7d7      	b.n	8007d38 <_free_r+0x28>
 8007d88:	d902      	bls.n	8007d90 <_free_r+0x80>
 8007d8a:	230c      	movs	r3, #12
 8007d8c:	6003      	str	r3, [r0, #0]
 8007d8e:	e7d3      	b.n	8007d38 <_free_r+0x28>
 8007d90:	6825      	ldr	r5, [r4, #0]
 8007d92:	1961      	adds	r1, r4, r5
 8007d94:	428b      	cmp	r3, r1
 8007d96:	bf04      	itt	eq
 8007d98:	6819      	ldreq	r1, [r3, #0]
 8007d9a:	685b      	ldreq	r3, [r3, #4]
 8007d9c:	6063      	str	r3, [r4, #4]
 8007d9e:	bf04      	itt	eq
 8007da0:	1949      	addeq	r1, r1, r5
 8007da2:	6021      	streq	r1, [r4, #0]
 8007da4:	6054      	str	r4, [r2, #4]
 8007da6:	e7c7      	b.n	8007d38 <_free_r+0x28>
 8007da8:	b003      	add	sp, #12
 8007daa:	bd30      	pop	{r4, r5, pc}
 8007dac:	20000204 	.word	0x20000204

08007db0 <_malloc_r>:
 8007db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db2:	1ccd      	adds	r5, r1, #3
 8007db4:	f025 0503 	bic.w	r5, r5, #3
 8007db8:	3508      	adds	r5, #8
 8007dba:	2d0c      	cmp	r5, #12
 8007dbc:	bf38      	it	cc
 8007dbe:	250c      	movcc	r5, #12
 8007dc0:	2d00      	cmp	r5, #0
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	db01      	blt.n	8007dca <_malloc_r+0x1a>
 8007dc6:	42a9      	cmp	r1, r5
 8007dc8:	d903      	bls.n	8007dd2 <_malloc_r+0x22>
 8007dca:	230c      	movs	r3, #12
 8007dcc:	6033      	str	r3, [r6, #0]
 8007dce:	2000      	movs	r0, #0
 8007dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dd2:	f003 f9d7 	bl	800b184 <__malloc_lock>
 8007dd6:	4921      	ldr	r1, [pc, #132]	; (8007e5c <_malloc_r+0xac>)
 8007dd8:	680a      	ldr	r2, [r1, #0]
 8007dda:	4614      	mov	r4, r2
 8007ddc:	b99c      	cbnz	r4, 8007e06 <_malloc_r+0x56>
 8007dde:	4f20      	ldr	r7, [pc, #128]	; (8007e60 <_malloc_r+0xb0>)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	b923      	cbnz	r3, 8007dee <_malloc_r+0x3e>
 8007de4:	4621      	mov	r1, r4
 8007de6:	4630      	mov	r0, r6
 8007de8:	f000 feb6 	bl	8008b58 <_sbrk_r>
 8007dec:	6038      	str	r0, [r7, #0]
 8007dee:	4629      	mov	r1, r5
 8007df0:	4630      	mov	r0, r6
 8007df2:	f000 feb1 	bl	8008b58 <_sbrk_r>
 8007df6:	1c43      	adds	r3, r0, #1
 8007df8:	d123      	bne.n	8007e42 <_malloc_r+0x92>
 8007dfa:	230c      	movs	r3, #12
 8007dfc:	6033      	str	r3, [r6, #0]
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f003 f9c6 	bl	800b190 <__malloc_unlock>
 8007e04:	e7e3      	b.n	8007dce <_malloc_r+0x1e>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	1b5b      	subs	r3, r3, r5
 8007e0a:	d417      	bmi.n	8007e3c <_malloc_r+0x8c>
 8007e0c:	2b0b      	cmp	r3, #11
 8007e0e:	d903      	bls.n	8007e18 <_malloc_r+0x68>
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	441c      	add	r4, r3
 8007e14:	6025      	str	r5, [r4, #0]
 8007e16:	e004      	b.n	8007e22 <_malloc_r+0x72>
 8007e18:	6863      	ldr	r3, [r4, #4]
 8007e1a:	42a2      	cmp	r2, r4
 8007e1c:	bf0c      	ite	eq
 8007e1e:	600b      	streq	r3, [r1, #0]
 8007e20:	6053      	strne	r3, [r2, #4]
 8007e22:	4630      	mov	r0, r6
 8007e24:	f003 f9b4 	bl	800b190 <__malloc_unlock>
 8007e28:	f104 000b 	add.w	r0, r4, #11
 8007e2c:	1d23      	adds	r3, r4, #4
 8007e2e:	f020 0007 	bic.w	r0, r0, #7
 8007e32:	1ac2      	subs	r2, r0, r3
 8007e34:	d0cc      	beq.n	8007dd0 <_malloc_r+0x20>
 8007e36:	1a1b      	subs	r3, r3, r0
 8007e38:	50a3      	str	r3, [r4, r2]
 8007e3a:	e7c9      	b.n	8007dd0 <_malloc_r+0x20>
 8007e3c:	4622      	mov	r2, r4
 8007e3e:	6864      	ldr	r4, [r4, #4]
 8007e40:	e7cc      	b.n	8007ddc <_malloc_r+0x2c>
 8007e42:	1cc4      	adds	r4, r0, #3
 8007e44:	f024 0403 	bic.w	r4, r4, #3
 8007e48:	42a0      	cmp	r0, r4
 8007e4a:	d0e3      	beq.n	8007e14 <_malloc_r+0x64>
 8007e4c:	1a21      	subs	r1, r4, r0
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f000 fe82 	bl	8008b58 <_sbrk_r>
 8007e54:	3001      	adds	r0, #1
 8007e56:	d1dd      	bne.n	8007e14 <_malloc_r+0x64>
 8007e58:	e7cf      	b.n	8007dfa <_malloc_r+0x4a>
 8007e5a:	bf00      	nop
 8007e5c:	20000204 	.word	0x20000204
 8007e60:	20000208 	.word	0x20000208

08007e64 <__cvt>:
 8007e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e68:	ec55 4b10 	vmov	r4, r5, d0
 8007e6c:	2d00      	cmp	r5, #0
 8007e6e:	460e      	mov	r6, r1
 8007e70:	4619      	mov	r1, r3
 8007e72:	462b      	mov	r3, r5
 8007e74:	bfbb      	ittet	lt
 8007e76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007e7a:	461d      	movlt	r5, r3
 8007e7c:	2300      	movge	r3, #0
 8007e7e:	232d      	movlt	r3, #45	; 0x2d
 8007e80:	700b      	strb	r3, [r1, #0]
 8007e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007e88:	4691      	mov	r9, r2
 8007e8a:	f023 0820 	bic.w	r8, r3, #32
 8007e8e:	bfbc      	itt	lt
 8007e90:	4622      	movlt	r2, r4
 8007e92:	4614      	movlt	r4, r2
 8007e94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e98:	d005      	beq.n	8007ea6 <__cvt+0x42>
 8007e9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e9e:	d100      	bne.n	8007ea2 <__cvt+0x3e>
 8007ea0:	3601      	adds	r6, #1
 8007ea2:	2102      	movs	r1, #2
 8007ea4:	e000      	b.n	8007ea8 <__cvt+0x44>
 8007ea6:	2103      	movs	r1, #3
 8007ea8:	ab03      	add	r3, sp, #12
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	ab02      	add	r3, sp, #8
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	ec45 4b10 	vmov	d0, r4, r5
 8007eb4:	4653      	mov	r3, sl
 8007eb6:	4632      	mov	r2, r6
 8007eb8:	f001 fdc6 	bl	8009a48 <_dtoa_r>
 8007ebc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ec0:	4607      	mov	r7, r0
 8007ec2:	d102      	bne.n	8007eca <__cvt+0x66>
 8007ec4:	f019 0f01 	tst.w	r9, #1
 8007ec8:	d022      	beq.n	8007f10 <__cvt+0xac>
 8007eca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ece:	eb07 0906 	add.w	r9, r7, r6
 8007ed2:	d110      	bne.n	8007ef6 <__cvt+0x92>
 8007ed4:	783b      	ldrb	r3, [r7, #0]
 8007ed6:	2b30      	cmp	r3, #48	; 0x30
 8007ed8:	d10a      	bne.n	8007ef0 <__cvt+0x8c>
 8007eda:	2200      	movs	r2, #0
 8007edc:	2300      	movs	r3, #0
 8007ede:	4620      	mov	r0, r4
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	f7f8 fe11 	bl	8000b08 <__aeabi_dcmpeq>
 8007ee6:	b918      	cbnz	r0, 8007ef0 <__cvt+0x8c>
 8007ee8:	f1c6 0601 	rsb	r6, r6, #1
 8007eec:	f8ca 6000 	str.w	r6, [sl]
 8007ef0:	f8da 3000 	ldr.w	r3, [sl]
 8007ef4:	4499      	add	r9, r3
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2300      	movs	r3, #0
 8007efa:	4620      	mov	r0, r4
 8007efc:	4629      	mov	r1, r5
 8007efe:	f7f8 fe03 	bl	8000b08 <__aeabi_dcmpeq>
 8007f02:	b108      	cbz	r0, 8007f08 <__cvt+0xa4>
 8007f04:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f08:	2230      	movs	r2, #48	; 0x30
 8007f0a:	9b03      	ldr	r3, [sp, #12]
 8007f0c:	454b      	cmp	r3, r9
 8007f0e:	d307      	bcc.n	8007f20 <__cvt+0xbc>
 8007f10:	9b03      	ldr	r3, [sp, #12]
 8007f12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f14:	1bdb      	subs	r3, r3, r7
 8007f16:	4638      	mov	r0, r7
 8007f18:	6013      	str	r3, [r2, #0]
 8007f1a:	b004      	add	sp, #16
 8007f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f20:	1c59      	adds	r1, r3, #1
 8007f22:	9103      	str	r1, [sp, #12]
 8007f24:	701a      	strb	r2, [r3, #0]
 8007f26:	e7f0      	b.n	8007f0a <__cvt+0xa6>

08007f28 <__exponent>:
 8007f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2900      	cmp	r1, #0
 8007f2e:	bfb8      	it	lt
 8007f30:	4249      	neglt	r1, r1
 8007f32:	f803 2b02 	strb.w	r2, [r3], #2
 8007f36:	bfb4      	ite	lt
 8007f38:	222d      	movlt	r2, #45	; 0x2d
 8007f3a:	222b      	movge	r2, #43	; 0x2b
 8007f3c:	2909      	cmp	r1, #9
 8007f3e:	7042      	strb	r2, [r0, #1]
 8007f40:	dd2a      	ble.n	8007f98 <__exponent+0x70>
 8007f42:	f10d 0407 	add.w	r4, sp, #7
 8007f46:	46a4      	mov	ip, r4
 8007f48:	270a      	movs	r7, #10
 8007f4a:	46a6      	mov	lr, r4
 8007f4c:	460a      	mov	r2, r1
 8007f4e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007f52:	fb07 1516 	mls	r5, r7, r6, r1
 8007f56:	3530      	adds	r5, #48	; 0x30
 8007f58:	2a63      	cmp	r2, #99	; 0x63
 8007f5a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007f5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007f62:	4631      	mov	r1, r6
 8007f64:	dcf1      	bgt.n	8007f4a <__exponent+0x22>
 8007f66:	3130      	adds	r1, #48	; 0x30
 8007f68:	f1ae 0502 	sub.w	r5, lr, #2
 8007f6c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007f70:	1c44      	adds	r4, r0, #1
 8007f72:	4629      	mov	r1, r5
 8007f74:	4561      	cmp	r1, ip
 8007f76:	d30a      	bcc.n	8007f8e <__exponent+0x66>
 8007f78:	f10d 0209 	add.w	r2, sp, #9
 8007f7c:	eba2 020e 	sub.w	r2, r2, lr
 8007f80:	4565      	cmp	r5, ip
 8007f82:	bf88      	it	hi
 8007f84:	2200      	movhi	r2, #0
 8007f86:	4413      	add	r3, r2
 8007f88:	1a18      	subs	r0, r3, r0
 8007f8a:	b003      	add	sp, #12
 8007f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f92:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007f96:	e7ed      	b.n	8007f74 <__exponent+0x4c>
 8007f98:	2330      	movs	r3, #48	; 0x30
 8007f9a:	3130      	adds	r1, #48	; 0x30
 8007f9c:	7083      	strb	r3, [r0, #2]
 8007f9e:	70c1      	strb	r1, [r0, #3]
 8007fa0:	1d03      	adds	r3, r0, #4
 8007fa2:	e7f1      	b.n	8007f88 <__exponent+0x60>

08007fa4 <_printf_float>:
 8007fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa8:	ed2d 8b02 	vpush	{d8}
 8007fac:	b08d      	sub	sp, #52	; 0x34
 8007fae:	460c      	mov	r4, r1
 8007fb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007fb4:	4616      	mov	r6, r2
 8007fb6:	461f      	mov	r7, r3
 8007fb8:	4605      	mov	r5, r0
 8007fba:	f003 f857 	bl	800b06c <_localeconv_r>
 8007fbe:	f8d0 a000 	ldr.w	sl, [r0]
 8007fc2:	4650      	mov	r0, sl
 8007fc4:	f7f8 f924 	bl	8000210 <strlen>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	930a      	str	r3, [sp, #40]	; 0x28
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	9305      	str	r3, [sp, #20]
 8007fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8007fd4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007fd8:	3307      	adds	r3, #7
 8007fda:	f023 0307 	bic.w	r3, r3, #7
 8007fde:	f103 0208 	add.w	r2, r3, #8
 8007fe2:	f8c8 2000 	str.w	r2, [r8]
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007fee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007ff2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ff6:	9307      	str	r3, [sp, #28]
 8007ff8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ffc:	ee08 0a10 	vmov	s16, r0
 8008000:	4b9f      	ldr	r3, [pc, #636]	; (8008280 <_printf_float+0x2dc>)
 8008002:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800800a:	f7f8 fdaf 	bl	8000b6c <__aeabi_dcmpun>
 800800e:	bb88      	cbnz	r0, 8008074 <_printf_float+0xd0>
 8008010:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008014:	4b9a      	ldr	r3, [pc, #616]	; (8008280 <_printf_float+0x2dc>)
 8008016:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800801a:	f7f8 fd89 	bl	8000b30 <__aeabi_dcmple>
 800801e:	bb48      	cbnz	r0, 8008074 <_printf_float+0xd0>
 8008020:	2200      	movs	r2, #0
 8008022:	2300      	movs	r3, #0
 8008024:	4640      	mov	r0, r8
 8008026:	4649      	mov	r1, r9
 8008028:	f7f8 fd78 	bl	8000b1c <__aeabi_dcmplt>
 800802c:	b110      	cbz	r0, 8008034 <_printf_float+0x90>
 800802e:	232d      	movs	r3, #45	; 0x2d
 8008030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008034:	4b93      	ldr	r3, [pc, #588]	; (8008284 <_printf_float+0x2e0>)
 8008036:	4894      	ldr	r0, [pc, #592]	; (8008288 <_printf_float+0x2e4>)
 8008038:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800803c:	bf94      	ite	ls
 800803e:	4698      	movls	r8, r3
 8008040:	4680      	movhi	r8, r0
 8008042:	2303      	movs	r3, #3
 8008044:	6123      	str	r3, [r4, #16]
 8008046:	9b05      	ldr	r3, [sp, #20]
 8008048:	f023 0204 	bic.w	r2, r3, #4
 800804c:	6022      	str	r2, [r4, #0]
 800804e:	f04f 0900 	mov.w	r9, #0
 8008052:	9700      	str	r7, [sp, #0]
 8008054:	4633      	mov	r3, r6
 8008056:	aa0b      	add	r2, sp, #44	; 0x2c
 8008058:	4621      	mov	r1, r4
 800805a:	4628      	mov	r0, r5
 800805c:	f000 f9d8 	bl	8008410 <_printf_common>
 8008060:	3001      	adds	r0, #1
 8008062:	f040 8090 	bne.w	8008186 <_printf_float+0x1e2>
 8008066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800806a:	b00d      	add	sp, #52	; 0x34
 800806c:	ecbd 8b02 	vpop	{d8}
 8008070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008074:	4642      	mov	r2, r8
 8008076:	464b      	mov	r3, r9
 8008078:	4640      	mov	r0, r8
 800807a:	4649      	mov	r1, r9
 800807c:	f7f8 fd76 	bl	8000b6c <__aeabi_dcmpun>
 8008080:	b140      	cbz	r0, 8008094 <_printf_float+0xf0>
 8008082:	464b      	mov	r3, r9
 8008084:	2b00      	cmp	r3, #0
 8008086:	bfbc      	itt	lt
 8008088:	232d      	movlt	r3, #45	; 0x2d
 800808a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800808e:	487f      	ldr	r0, [pc, #508]	; (800828c <_printf_float+0x2e8>)
 8008090:	4b7f      	ldr	r3, [pc, #508]	; (8008290 <_printf_float+0x2ec>)
 8008092:	e7d1      	b.n	8008038 <_printf_float+0x94>
 8008094:	6863      	ldr	r3, [r4, #4]
 8008096:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800809a:	9206      	str	r2, [sp, #24]
 800809c:	1c5a      	adds	r2, r3, #1
 800809e:	d13f      	bne.n	8008120 <_printf_float+0x17c>
 80080a0:	2306      	movs	r3, #6
 80080a2:	6063      	str	r3, [r4, #4]
 80080a4:	9b05      	ldr	r3, [sp, #20]
 80080a6:	6861      	ldr	r1, [r4, #4]
 80080a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80080ac:	2300      	movs	r3, #0
 80080ae:	9303      	str	r3, [sp, #12]
 80080b0:	ab0a      	add	r3, sp, #40	; 0x28
 80080b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80080b6:	ab09      	add	r3, sp, #36	; 0x24
 80080b8:	ec49 8b10 	vmov	d0, r8, r9
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	6022      	str	r2, [r4, #0]
 80080c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80080c4:	4628      	mov	r0, r5
 80080c6:	f7ff fecd 	bl	8007e64 <__cvt>
 80080ca:	9b06      	ldr	r3, [sp, #24]
 80080cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080ce:	2b47      	cmp	r3, #71	; 0x47
 80080d0:	4680      	mov	r8, r0
 80080d2:	d108      	bne.n	80080e6 <_printf_float+0x142>
 80080d4:	1cc8      	adds	r0, r1, #3
 80080d6:	db02      	blt.n	80080de <_printf_float+0x13a>
 80080d8:	6863      	ldr	r3, [r4, #4]
 80080da:	4299      	cmp	r1, r3
 80080dc:	dd41      	ble.n	8008162 <_printf_float+0x1be>
 80080de:	f1ab 0b02 	sub.w	fp, fp, #2
 80080e2:	fa5f fb8b 	uxtb.w	fp, fp
 80080e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080ea:	d820      	bhi.n	800812e <_printf_float+0x18a>
 80080ec:	3901      	subs	r1, #1
 80080ee:	465a      	mov	r2, fp
 80080f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80080f4:	9109      	str	r1, [sp, #36]	; 0x24
 80080f6:	f7ff ff17 	bl	8007f28 <__exponent>
 80080fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080fc:	1813      	adds	r3, r2, r0
 80080fe:	2a01      	cmp	r2, #1
 8008100:	4681      	mov	r9, r0
 8008102:	6123      	str	r3, [r4, #16]
 8008104:	dc02      	bgt.n	800810c <_printf_float+0x168>
 8008106:	6822      	ldr	r2, [r4, #0]
 8008108:	07d2      	lsls	r2, r2, #31
 800810a:	d501      	bpl.n	8008110 <_printf_float+0x16c>
 800810c:	3301      	adds	r3, #1
 800810e:	6123      	str	r3, [r4, #16]
 8008110:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008114:	2b00      	cmp	r3, #0
 8008116:	d09c      	beq.n	8008052 <_printf_float+0xae>
 8008118:	232d      	movs	r3, #45	; 0x2d
 800811a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800811e:	e798      	b.n	8008052 <_printf_float+0xae>
 8008120:	9a06      	ldr	r2, [sp, #24]
 8008122:	2a47      	cmp	r2, #71	; 0x47
 8008124:	d1be      	bne.n	80080a4 <_printf_float+0x100>
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1bc      	bne.n	80080a4 <_printf_float+0x100>
 800812a:	2301      	movs	r3, #1
 800812c:	e7b9      	b.n	80080a2 <_printf_float+0xfe>
 800812e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008132:	d118      	bne.n	8008166 <_printf_float+0x1c2>
 8008134:	2900      	cmp	r1, #0
 8008136:	6863      	ldr	r3, [r4, #4]
 8008138:	dd0b      	ble.n	8008152 <_printf_float+0x1ae>
 800813a:	6121      	str	r1, [r4, #16]
 800813c:	b913      	cbnz	r3, 8008144 <_printf_float+0x1a0>
 800813e:	6822      	ldr	r2, [r4, #0]
 8008140:	07d0      	lsls	r0, r2, #31
 8008142:	d502      	bpl.n	800814a <_printf_float+0x1a6>
 8008144:	3301      	adds	r3, #1
 8008146:	440b      	add	r3, r1
 8008148:	6123      	str	r3, [r4, #16]
 800814a:	65a1      	str	r1, [r4, #88]	; 0x58
 800814c:	f04f 0900 	mov.w	r9, #0
 8008150:	e7de      	b.n	8008110 <_printf_float+0x16c>
 8008152:	b913      	cbnz	r3, 800815a <_printf_float+0x1b6>
 8008154:	6822      	ldr	r2, [r4, #0]
 8008156:	07d2      	lsls	r2, r2, #31
 8008158:	d501      	bpl.n	800815e <_printf_float+0x1ba>
 800815a:	3302      	adds	r3, #2
 800815c:	e7f4      	b.n	8008148 <_printf_float+0x1a4>
 800815e:	2301      	movs	r3, #1
 8008160:	e7f2      	b.n	8008148 <_printf_float+0x1a4>
 8008162:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008168:	4299      	cmp	r1, r3
 800816a:	db05      	blt.n	8008178 <_printf_float+0x1d4>
 800816c:	6823      	ldr	r3, [r4, #0]
 800816e:	6121      	str	r1, [r4, #16]
 8008170:	07d8      	lsls	r0, r3, #31
 8008172:	d5ea      	bpl.n	800814a <_printf_float+0x1a6>
 8008174:	1c4b      	adds	r3, r1, #1
 8008176:	e7e7      	b.n	8008148 <_printf_float+0x1a4>
 8008178:	2900      	cmp	r1, #0
 800817a:	bfd4      	ite	le
 800817c:	f1c1 0202 	rsble	r2, r1, #2
 8008180:	2201      	movgt	r2, #1
 8008182:	4413      	add	r3, r2
 8008184:	e7e0      	b.n	8008148 <_printf_float+0x1a4>
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	055a      	lsls	r2, r3, #21
 800818a:	d407      	bmi.n	800819c <_printf_float+0x1f8>
 800818c:	6923      	ldr	r3, [r4, #16]
 800818e:	4642      	mov	r2, r8
 8008190:	4631      	mov	r1, r6
 8008192:	4628      	mov	r0, r5
 8008194:	47b8      	blx	r7
 8008196:	3001      	adds	r0, #1
 8008198:	d12c      	bne.n	80081f4 <_printf_float+0x250>
 800819a:	e764      	b.n	8008066 <_printf_float+0xc2>
 800819c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80081a0:	f240 80e0 	bls.w	8008364 <_printf_float+0x3c0>
 80081a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081a8:	2200      	movs	r2, #0
 80081aa:	2300      	movs	r3, #0
 80081ac:	f7f8 fcac 	bl	8000b08 <__aeabi_dcmpeq>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d034      	beq.n	800821e <_printf_float+0x27a>
 80081b4:	4a37      	ldr	r2, [pc, #220]	; (8008294 <_printf_float+0x2f0>)
 80081b6:	2301      	movs	r3, #1
 80081b8:	4631      	mov	r1, r6
 80081ba:	4628      	mov	r0, r5
 80081bc:	47b8      	blx	r7
 80081be:	3001      	adds	r0, #1
 80081c0:	f43f af51 	beq.w	8008066 <_printf_float+0xc2>
 80081c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081c8:	429a      	cmp	r2, r3
 80081ca:	db02      	blt.n	80081d2 <_printf_float+0x22e>
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	07d8      	lsls	r0, r3, #31
 80081d0:	d510      	bpl.n	80081f4 <_printf_float+0x250>
 80081d2:	ee18 3a10 	vmov	r3, s16
 80081d6:	4652      	mov	r2, sl
 80081d8:	4631      	mov	r1, r6
 80081da:	4628      	mov	r0, r5
 80081dc:	47b8      	blx	r7
 80081de:	3001      	adds	r0, #1
 80081e0:	f43f af41 	beq.w	8008066 <_printf_float+0xc2>
 80081e4:	f04f 0800 	mov.w	r8, #0
 80081e8:	f104 091a 	add.w	r9, r4, #26
 80081ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ee:	3b01      	subs	r3, #1
 80081f0:	4543      	cmp	r3, r8
 80081f2:	dc09      	bgt.n	8008208 <_printf_float+0x264>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	079b      	lsls	r3, r3, #30
 80081f8:	f100 8105 	bmi.w	8008406 <_printf_float+0x462>
 80081fc:	68e0      	ldr	r0, [r4, #12]
 80081fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008200:	4298      	cmp	r0, r3
 8008202:	bfb8      	it	lt
 8008204:	4618      	movlt	r0, r3
 8008206:	e730      	b.n	800806a <_printf_float+0xc6>
 8008208:	2301      	movs	r3, #1
 800820a:	464a      	mov	r2, r9
 800820c:	4631      	mov	r1, r6
 800820e:	4628      	mov	r0, r5
 8008210:	47b8      	blx	r7
 8008212:	3001      	adds	r0, #1
 8008214:	f43f af27 	beq.w	8008066 <_printf_float+0xc2>
 8008218:	f108 0801 	add.w	r8, r8, #1
 800821c:	e7e6      	b.n	80081ec <_printf_float+0x248>
 800821e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008220:	2b00      	cmp	r3, #0
 8008222:	dc39      	bgt.n	8008298 <_printf_float+0x2f4>
 8008224:	4a1b      	ldr	r2, [pc, #108]	; (8008294 <_printf_float+0x2f0>)
 8008226:	2301      	movs	r3, #1
 8008228:	4631      	mov	r1, r6
 800822a:	4628      	mov	r0, r5
 800822c:	47b8      	blx	r7
 800822e:	3001      	adds	r0, #1
 8008230:	f43f af19 	beq.w	8008066 <_printf_float+0xc2>
 8008234:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008238:	4313      	orrs	r3, r2
 800823a:	d102      	bne.n	8008242 <_printf_float+0x29e>
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	07d9      	lsls	r1, r3, #31
 8008240:	d5d8      	bpl.n	80081f4 <_printf_float+0x250>
 8008242:	ee18 3a10 	vmov	r3, s16
 8008246:	4652      	mov	r2, sl
 8008248:	4631      	mov	r1, r6
 800824a:	4628      	mov	r0, r5
 800824c:	47b8      	blx	r7
 800824e:	3001      	adds	r0, #1
 8008250:	f43f af09 	beq.w	8008066 <_printf_float+0xc2>
 8008254:	f04f 0900 	mov.w	r9, #0
 8008258:	f104 0a1a 	add.w	sl, r4, #26
 800825c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825e:	425b      	negs	r3, r3
 8008260:	454b      	cmp	r3, r9
 8008262:	dc01      	bgt.n	8008268 <_printf_float+0x2c4>
 8008264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008266:	e792      	b.n	800818e <_printf_float+0x1ea>
 8008268:	2301      	movs	r3, #1
 800826a:	4652      	mov	r2, sl
 800826c:	4631      	mov	r1, r6
 800826e:	4628      	mov	r0, r5
 8008270:	47b8      	blx	r7
 8008272:	3001      	adds	r0, #1
 8008274:	f43f aef7 	beq.w	8008066 <_printf_float+0xc2>
 8008278:	f109 0901 	add.w	r9, r9, #1
 800827c:	e7ee      	b.n	800825c <_printf_float+0x2b8>
 800827e:	bf00      	nop
 8008280:	7fefffff 	.word	0x7fefffff
 8008284:	0800d6ac 	.word	0x0800d6ac
 8008288:	0800d6b0 	.word	0x0800d6b0
 800828c:	0800d6b8 	.word	0x0800d6b8
 8008290:	0800d6b4 	.word	0x0800d6b4
 8008294:	0800d6bc 	.word	0x0800d6bc
 8008298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800829a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800829c:	429a      	cmp	r2, r3
 800829e:	bfa8      	it	ge
 80082a0:	461a      	movge	r2, r3
 80082a2:	2a00      	cmp	r2, #0
 80082a4:	4691      	mov	r9, r2
 80082a6:	dc37      	bgt.n	8008318 <_printf_float+0x374>
 80082a8:	f04f 0b00 	mov.w	fp, #0
 80082ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082b0:	f104 021a 	add.w	r2, r4, #26
 80082b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082b6:	9305      	str	r3, [sp, #20]
 80082b8:	eba3 0309 	sub.w	r3, r3, r9
 80082bc:	455b      	cmp	r3, fp
 80082be:	dc33      	bgt.n	8008328 <_printf_float+0x384>
 80082c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082c4:	429a      	cmp	r2, r3
 80082c6:	db3b      	blt.n	8008340 <_printf_float+0x39c>
 80082c8:	6823      	ldr	r3, [r4, #0]
 80082ca:	07da      	lsls	r2, r3, #31
 80082cc:	d438      	bmi.n	8008340 <_printf_float+0x39c>
 80082ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082d0:	9b05      	ldr	r3, [sp, #20]
 80082d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	eba2 0901 	sub.w	r9, r2, r1
 80082da:	4599      	cmp	r9, r3
 80082dc:	bfa8      	it	ge
 80082de:	4699      	movge	r9, r3
 80082e0:	f1b9 0f00 	cmp.w	r9, #0
 80082e4:	dc35      	bgt.n	8008352 <_printf_float+0x3ae>
 80082e6:	f04f 0800 	mov.w	r8, #0
 80082ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082ee:	f104 0a1a 	add.w	sl, r4, #26
 80082f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082f6:	1a9b      	subs	r3, r3, r2
 80082f8:	eba3 0309 	sub.w	r3, r3, r9
 80082fc:	4543      	cmp	r3, r8
 80082fe:	f77f af79 	ble.w	80081f4 <_printf_float+0x250>
 8008302:	2301      	movs	r3, #1
 8008304:	4652      	mov	r2, sl
 8008306:	4631      	mov	r1, r6
 8008308:	4628      	mov	r0, r5
 800830a:	47b8      	blx	r7
 800830c:	3001      	adds	r0, #1
 800830e:	f43f aeaa 	beq.w	8008066 <_printf_float+0xc2>
 8008312:	f108 0801 	add.w	r8, r8, #1
 8008316:	e7ec      	b.n	80082f2 <_printf_float+0x34e>
 8008318:	4613      	mov	r3, r2
 800831a:	4631      	mov	r1, r6
 800831c:	4642      	mov	r2, r8
 800831e:	4628      	mov	r0, r5
 8008320:	47b8      	blx	r7
 8008322:	3001      	adds	r0, #1
 8008324:	d1c0      	bne.n	80082a8 <_printf_float+0x304>
 8008326:	e69e      	b.n	8008066 <_printf_float+0xc2>
 8008328:	2301      	movs	r3, #1
 800832a:	4631      	mov	r1, r6
 800832c:	4628      	mov	r0, r5
 800832e:	9205      	str	r2, [sp, #20]
 8008330:	47b8      	blx	r7
 8008332:	3001      	adds	r0, #1
 8008334:	f43f ae97 	beq.w	8008066 <_printf_float+0xc2>
 8008338:	9a05      	ldr	r2, [sp, #20]
 800833a:	f10b 0b01 	add.w	fp, fp, #1
 800833e:	e7b9      	b.n	80082b4 <_printf_float+0x310>
 8008340:	ee18 3a10 	vmov	r3, s16
 8008344:	4652      	mov	r2, sl
 8008346:	4631      	mov	r1, r6
 8008348:	4628      	mov	r0, r5
 800834a:	47b8      	blx	r7
 800834c:	3001      	adds	r0, #1
 800834e:	d1be      	bne.n	80082ce <_printf_float+0x32a>
 8008350:	e689      	b.n	8008066 <_printf_float+0xc2>
 8008352:	9a05      	ldr	r2, [sp, #20]
 8008354:	464b      	mov	r3, r9
 8008356:	4442      	add	r2, r8
 8008358:	4631      	mov	r1, r6
 800835a:	4628      	mov	r0, r5
 800835c:	47b8      	blx	r7
 800835e:	3001      	adds	r0, #1
 8008360:	d1c1      	bne.n	80082e6 <_printf_float+0x342>
 8008362:	e680      	b.n	8008066 <_printf_float+0xc2>
 8008364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008366:	2a01      	cmp	r2, #1
 8008368:	dc01      	bgt.n	800836e <_printf_float+0x3ca>
 800836a:	07db      	lsls	r3, r3, #31
 800836c:	d538      	bpl.n	80083e0 <_printf_float+0x43c>
 800836e:	2301      	movs	r3, #1
 8008370:	4642      	mov	r2, r8
 8008372:	4631      	mov	r1, r6
 8008374:	4628      	mov	r0, r5
 8008376:	47b8      	blx	r7
 8008378:	3001      	adds	r0, #1
 800837a:	f43f ae74 	beq.w	8008066 <_printf_float+0xc2>
 800837e:	ee18 3a10 	vmov	r3, s16
 8008382:	4652      	mov	r2, sl
 8008384:	4631      	mov	r1, r6
 8008386:	4628      	mov	r0, r5
 8008388:	47b8      	blx	r7
 800838a:	3001      	adds	r0, #1
 800838c:	f43f ae6b 	beq.w	8008066 <_printf_float+0xc2>
 8008390:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008394:	2200      	movs	r2, #0
 8008396:	2300      	movs	r3, #0
 8008398:	f7f8 fbb6 	bl	8000b08 <__aeabi_dcmpeq>
 800839c:	b9d8      	cbnz	r0, 80083d6 <_printf_float+0x432>
 800839e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a0:	f108 0201 	add.w	r2, r8, #1
 80083a4:	3b01      	subs	r3, #1
 80083a6:	4631      	mov	r1, r6
 80083a8:	4628      	mov	r0, r5
 80083aa:	47b8      	blx	r7
 80083ac:	3001      	adds	r0, #1
 80083ae:	d10e      	bne.n	80083ce <_printf_float+0x42a>
 80083b0:	e659      	b.n	8008066 <_printf_float+0xc2>
 80083b2:	2301      	movs	r3, #1
 80083b4:	4652      	mov	r2, sl
 80083b6:	4631      	mov	r1, r6
 80083b8:	4628      	mov	r0, r5
 80083ba:	47b8      	blx	r7
 80083bc:	3001      	adds	r0, #1
 80083be:	f43f ae52 	beq.w	8008066 <_printf_float+0xc2>
 80083c2:	f108 0801 	add.w	r8, r8, #1
 80083c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c8:	3b01      	subs	r3, #1
 80083ca:	4543      	cmp	r3, r8
 80083cc:	dcf1      	bgt.n	80083b2 <_printf_float+0x40e>
 80083ce:	464b      	mov	r3, r9
 80083d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80083d4:	e6dc      	b.n	8008190 <_printf_float+0x1ec>
 80083d6:	f04f 0800 	mov.w	r8, #0
 80083da:	f104 0a1a 	add.w	sl, r4, #26
 80083de:	e7f2      	b.n	80083c6 <_printf_float+0x422>
 80083e0:	2301      	movs	r3, #1
 80083e2:	4642      	mov	r2, r8
 80083e4:	e7df      	b.n	80083a6 <_printf_float+0x402>
 80083e6:	2301      	movs	r3, #1
 80083e8:	464a      	mov	r2, r9
 80083ea:	4631      	mov	r1, r6
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b8      	blx	r7
 80083f0:	3001      	adds	r0, #1
 80083f2:	f43f ae38 	beq.w	8008066 <_printf_float+0xc2>
 80083f6:	f108 0801 	add.w	r8, r8, #1
 80083fa:	68e3      	ldr	r3, [r4, #12]
 80083fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083fe:	1a5b      	subs	r3, r3, r1
 8008400:	4543      	cmp	r3, r8
 8008402:	dcf0      	bgt.n	80083e6 <_printf_float+0x442>
 8008404:	e6fa      	b.n	80081fc <_printf_float+0x258>
 8008406:	f04f 0800 	mov.w	r8, #0
 800840a:	f104 0919 	add.w	r9, r4, #25
 800840e:	e7f4      	b.n	80083fa <_printf_float+0x456>

08008410 <_printf_common>:
 8008410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008414:	4616      	mov	r6, r2
 8008416:	4699      	mov	r9, r3
 8008418:	688a      	ldr	r2, [r1, #8]
 800841a:	690b      	ldr	r3, [r1, #16]
 800841c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008420:	4293      	cmp	r3, r2
 8008422:	bfb8      	it	lt
 8008424:	4613      	movlt	r3, r2
 8008426:	6033      	str	r3, [r6, #0]
 8008428:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800842c:	4607      	mov	r7, r0
 800842e:	460c      	mov	r4, r1
 8008430:	b10a      	cbz	r2, 8008436 <_printf_common+0x26>
 8008432:	3301      	adds	r3, #1
 8008434:	6033      	str	r3, [r6, #0]
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	0699      	lsls	r1, r3, #26
 800843a:	bf42      	ittt	mi
 800843c:	6833      	ldrmi	r3, [r6, #0]
 800843e:	3302      	addmi	r3, #2
 8008440:	6033      	strmi	r3, [r6, #0]
 8008442:	6825      	ldr	r5, [r4, #0]
 8008444:	f015 0506 	ands.w	r5, r5, #6
 8008448:	d106      	bne.n	8008458 <_printf_common+0x48>
 800844a:	f104 0a19 	add.w	sl, r4, #25
 800844e:	68e3      	ldr	r3, [r4, #12]
 8008450:	6832      	ldr	r2, [r6, #0]
 8008452:	1a9b      	subs	r3, r3, r2
 8008454:	42ab      	cmp	r3, r5
 8008456:	dc26      	bgt.n	80084a6 <_printf_common+0x96>
 8008458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800845c:	1e13      	subs	r3, r2, #0
 800845e:	6822      	ldr	r2, [r4, #0]
 8008460:	bf18      	it	ne
 8008462:	2301      	movne	r3, #1
 8008464:	0692      	lsls	r2, r2, #26
 8008466:	d42b      	bmi.n	80084c0 <_printf_common+0xb0>
 8008468:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800846c:	4649      	mov	r1, r9
 800846e:	4638      	mov	r0, r7
 8008470:	47c0      	blx	r8
 8008472:	3001      	adds	r0, #1
 8008474:	d01e      	beq.n	80084b4 <_printf_common+0xa4>
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	68e5      	ldr	r5, [r4, #12]
 800847a:	6832      	ldr	r2, [r6, #0]
 800847c:	f003 0306 	and.w	r3, r3, #6
 8008480:	2b04      	cmp	r3, #4
 8008482:	bf08      	it	eq
 8008484:	1aad      	subeq	r5, r5, r2
 8008486:	68a3      	ldr	r3, [r4, #8]
 8008488:	6922      	ldr	r2, [r4, #16]
 800848a:	bf0c      	ite	eq
 800848c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008490:	2500      	movne	r5, #0
 8008492:	4293      	cmp	r3, r2
 8008494:	bfc4      	itt	gt
 8008496:	1a9b      	subgt	r3, r3, r2
 8008498:	18ed      	addgt	r5, r5, r3
 800849a:	2600      	movs	r6, #0
 800849c:	341a      	adds	r4, #26
 800849e:	42b5      	cmp	r5, r6
 80084a0:	d11a      	bne.n	80084d8 <_printf_common+0xc8>
 80084a2:	2000      	movs	r0, #0
 80084a4:	e008      	b.n	80084b8 <_printf_common+0xa8>
 80084a6:	2301      	movs	r3, #1
 80084a8:	4652      	mov	r2, sl
 80084aa:	4649      	mov	r1, r9
 80084ac:	4638      	mov	r0, r7
 80084ae:	47c0      	blx	r8
 80084b0:	3001      	adds	r0, #1
 80084b2:	d103      	bne.n	80084bc <_printf_common+0xac>
 80084b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084bc:	3501      	adds	r5, #1
 80084be:	e7c6      	b.n	800844e <_printf_common+0x3e>
 80084c0:	18e1      	adds	r1, r4, r3
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	2030      	movs	r0, #48	; 0x30
 80084c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084ca:	4422      	add	r2, r4
 80084cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084d4:	3302      	adds	r3, #2
 80084d6:	e7c7      	b.n	8008468 <_printf_common+0x58>
 80084d8:	2301      	movs	r3, #1
 80084da:	4622      	mov	r2, r4
 80084dc:	4649      	mov	r1, r9
 80084de:	4638      	mov	r0, r7
 80084e0:	47c0      	blx	r8
 80084e2:	3001      	adds	r0, #1
 80084e4:	d0e6      	beq.n	80084b4 <_printf_common+0xa4>
 80084e6:	3601      	adds	r6, #1
 80084e8:	e7d9      	b.n	800849e <_printf_common+0x8e>
	...

080084ec <_printf_i>:
 80084ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084f0:	460c      	mov	r4, r1
 80084f2:	4691      	mov	r9, r2
 80084f4:	7e27      	ldrb	r7, [r4, #24]
 80084f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80084f8:	2f78      	cmp	r7, #120	; 0x78
 80084fa:	4680      	mov	r8, r0
 80084fc:	469a      	mov	sl, r3
 80084fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008502:	d807      	bhi.n	8008514 <_printf_i+0x28>
 8008504:	2f62      	cmp	r7, #98	; 0x62
 8008506:	d80a      	bhi.n	800851e <_printf_i+0x32>
 8008508:	2f00      	cmp	r7, #0
 800850a:	f000 80d8 	beq.w	80086be <_printf_i+0x1d2>
 800850e:	2f58      	cmp	r7, #88	; 0x58
 8008510:	f000 80a3 	beq.w	800865a <_printf_i+0x16e>
 8008514:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008518:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800851c:	e03a      	b.n	8008594 <_printf_i+0xa8>
 800851e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008522:	2b15      	cmp	r3, #21
 8008524:	d8f6      	bhi.n	8008514 <_printf_i+0x28>
 8008526:	a001      	add	r0, pc, #4	; (adr r0, 800852c <_printf_i+0x40>)
 8008528:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800852c:	08008585 	.word	0x08008585
 8008530:	08008599 	.word	0x08008599
 8008534:	08008515 	.word	0x08008515
 8008538:	08008515 	.word	0x08008515
 800853c:	08008515 	.word	0x08008515
 8008540:	08008515 	.word	0x08008515
 8008544:	08008599 	.word	0x08008599
 8008548:	08008515 	.word	0x08008515
 800854c:	08008515 	.word	0x08008515
 8008550:	08008515 	.word	0x08008515
 8008554:	08008515 	.word	0x08008515
 8008558:	080086a5 	.word	0x080086a5
 800855c:	080085c9 	.word	0x080085c9
 8008560:	08008687 	.word	0x08008687
 8008564:	08008515 	.word	0x08008515
 8008568:	08008515 	.word	0x08008515
 800856c:	080086c7 	.word	0x080086c7
 8008570:	08008515 	.word	0x08008515
 8008574:	080085c9 	.word	0x080085c9
 8008578:	08008515 	.word	0x08008515
 800857c:	08008515 	.word	0x08008515
 8008580:	0800868f 	.word	0x0800868f
 8008584:	680b      	ldr	r3, [r1, #0]
 8008586:	1d1a      	adds	r2, r3, #4
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	600a      	str	r2, [r1, #0]
 800858c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008594:	2301      	movs	r3, #1
 8008596:	e0a3      	b.n	80086e0 <_printf_i+0x1f4>
 8008598:	6825      	ldr	r5, [r4, #0]
 800859a:	6808      	ldr	r0, [r1, #0]
 800859c:	062e      	lsls	r6, r5, #24
 800859e:	f100 0304 	add.w	r3, r0, #4
 80085a2:	d50a      	bpl.n	80085ba <_printf_i+0xce>
 80085a4:	6805      	ldr	r5, [r0, #0]
 80085a6:	600b      	str	r3, [r1, #0]
 80085a8:	2d00      	cmp	r5, #0
 80085aa:	da03      	bge.n	80085b4 <_printf_i+0xc8>
 80085ac:	232d      	movs	r3, #45	; 0x2d
 80085ae:	426d      	negs	r5, r5
 80085b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085b4:	485e      	ldr	r0, [pc, #376]	; (8008730 <_printf_i+0x244>)
 80085b6:	230a      	movs	r3, #10
 80085b8:	e019      	b.n	80085ee <_printf_i+0x102>
 80085ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80085be:	6805      	ldr	r5, [r0, #0]
 80085c0:	600b      	str	r3, [r1, #0]
 80085c2:	bf18      	it	ne
 80085c4:	b22d      	sxthne	r5, r5
 80085c6:	e7ef      	b.n	80085a8 <_printf_i+0xbc>
 80085c8:	680b      	ldr	r3, [r1, #0]
 80085ca:	6825      	ldr	r5, [r4, #0]
 80085cc:	1d18      	adds	r0, r3, #4
 80085ce:	6008      	str	r0, [r1, #0]
 80085d0:	0628      	lsls	r0, r5, #24
 80085d2:	d501      	bpl.n	80085d8 <_printf_i+0xec>
 80085d4:	681d      	ldr	r5, [r3, #0]
 80085d6:	e002      	b.n	80085de <_printf_i+0xf2>
 80085d8:	0669      	lsls	r1, r5, #25
 80085da:	d5fb      	bpl.n	80085d4 <_printf_i+0xe8>
 80085dc:	881d      	ldrh	r5, [r3, #0]
 80085de:	4854      	ldr	r0, [pc, #336]	; (8008730 <_printf_i+0x244>)
 80085e0:	2f6f      	cmp	r7, #111	; 0x6f
 80085e2:	bf0c      	ite	eq
 80085e4:	2308      	moveq	r3, #8
 80085e6:	230a      	movne	r3, #10
 80085e8:	2100      	movs	r1, #0
 80085ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085ee:	6866      	ldr	r6, [r4, #4]
 80085f0:	60a6      	str	r6, [r4, #8]
 80085f2:	2e00      	cmp	r6, #0
 80085f4:	bfa2      	ittt	ge
 80085f6:	6821      	ldrge	r1, [r4, #0]
 80085f8:	f021 0104 	bicge.w	r1, r1, #4
 80085fc:	6021      	strge	r1, [r4, #0]
 80085fe:	b90d      	cbnz	r5, 8008604 <_printf_i+0x118>
 8008600:	2e00      	cmp	r6, #0
 8008602:	d04d      	beq.n	80086a0 <_printf_i+0x1b4>
 8008604:	4616      	mov	r6, r2
 8008606:	fbb5 f1f3 	udiv	r1, r5, r3
 800860a:	fb03 5711 	mls	r7, r3, r1, r5
 800860e:	5dc7      	ldrb	r7, [r0, r7]
 8008610:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008614:	462f      	mov	r7, r5
 8008616:	42bb      	cmp	r3, r7
 8008618:	460d      	mov	r5, r1
 800861a:	d9f4      	bls.n	8008606 <_printf_i+0x11a>
 800861c:	2b08      	cmp	r3, #8
 800861e:	d10b      	bne.n	8008638 <_printf_i+0x14c>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	07df      	lsls	r7, r3, #31
 8008624:	d508      	bpl.n	8008638 <_printf_i+0x14c>
 8008626:	6923      	ldr	r3, [r4, #16]
 8008628:	6861      	ldr	r1, [r4, #4]
 800862a:	4299      	cmp	r1, r3
 800862c:	bfde      	ittt	le
 800862e:	2330      	movle	r3, #48	; 0x30
 8008630:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008634:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008638:	1b92      	subs	r2, r2, r6
 800863a:	6122      	str	r2, [r4, #16]
 800863c:	f8cd a000 	str.w	sl, [sp]
 8008640:	464b      	mov	r3, r9
 8008642:	aa03      	add	r2, sp, #12
 8008644:	4621      	mov	r1, r4
 8008646:	4640      	mov	r0, r8
 8008648:	f7ff fee2 	bl	8008410 <_printf_common>
 800864c:	3001      	adds	r0, #1
 800864e:	d14c      	bne.n	80086ea <_printf_i+0x1fe>
 8008650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008654:	b004      	add	sp, #16
 8008656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800865a:	4835      	ldr	r0, [pc, #212]	; (8008730 <_printf_i+0x244>)
 800865c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	680e      	ldr	r6, [r1, #0]
 8008664:	061f      	lsls	r7, r3, #24
 8008666:	f856 5b04 	ldr.w	r5, [r6], #4
 800866a:	600e      	str	r6, [r1, #0]
 800866c:	d514      	bpl.n	8008698 <_printf_i+0x1ac>
 800866e:	07d9      	lsls	r1, r3, #31
 8008670:	bf44      	itt	mi
 8008672:	f043 0320 	orrmi.w	r3, r3, #32
 8008676:	6023      	strmi	r3, [r4, #0]
 8008678:	b91d      	cbnz	r5, 8008682 <_printf_i+0x196>
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	f023 0320 	bic.w	r3, r3, #32
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	2310      	movs	r3, #16
 8008684:	e7b0      	b.n	80085e8 <_printf_i+0xfc>
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	f043 0320 	orr.w	r3, r3, #32
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	2378      	movs	r3, #120	; 0x78
 8008690:	4828      	ldr	r0, [pc, #160]	; (8008734 <_printf_i+0x248>)
 8008692:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008696:	e7e3      	b.n	8008660 <_printf_i+0x174>
 8008698:	065e      	lsls	r6, r3, #25
 800869a:	bf48      	it	mi
 800869c:	b2ad      	uxthmi	r5, r5
 800869e:	e7e6      	b.n	800866e <_printf_i+0x182>
 80086a0:	4616      	mov	r6, r2
 80086a2:	e7bb      	b.n	800861c <_printf_i+0x130>
 80086a4:	680b      	ldr	r3, [r1, #0]
 80086a6:	6826      	ldr	r6, [r4, #0]
 80086a8:	6960      	ldr	r0, [r4, #20]
 80086aa:	1d1d      	adds	r5, r3, #4
 80086ac:	600d      	str	r5, [r1, #0]
 80086ae:	0635      	lsls	r5, r6, #24
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	d501      	bpl.n	80086b8 <_printf_i+0x1cc>
 80086b4:	6018      	str	r0, [r3, #0]
 80086b6:	e002      	b.n	80086be <_printf_i+0x1d2>
 80086b8:	0671      	lsls	r1, r6, #25
 80086ba:	d5fb      	bpl.n	80086b4 <_printf_i+0x1c8>
 80086bc:	8018      	strh	r0, [r3, #0]
 80086be:	2300      	movs	r3, #0
 80086c0:	6123      	str	r3, [r4, #16]
 80086c2:	4616      	mov	r6, r2
 80086c4:	e7ba      	b.n	800863c <_printf_i+0x150>
 80086c6:	680b      	ldr	r3, [r1, #0]
 80086c8:	1d1a      	adds	r2, r3, #4
 80086ca:	600a      	str	r2, [r1, #0]
 80086cc:	681e      	ldr	r6, [r3, #0]
 80086ce:	6862      	ldr	r2, [r4, #4]
 80086d0:	2100      	movs	r1, #0
 80086d2:	4630      	mov	r0, r6
 80086d4:	f7f7 fda4 	bl	8000220 <memchr>
 80086d8:	b108      	cbz	r0, 80086de <_printf_i+0x1f2>
 80086da:	1b80      	subs	r0, r0, r6
 80086dc:	6060      	str	r0, [r4, #4]
 80086de:	6863      	ldr	r3, [r4, #4]
 80086e0:	6123      	str	r3, [r4, #16]
 80086e2:	2300      	movs	r3, #0
 80086e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086e8:	e7a8      	b.n	800863c <_printf_i+0x150>
 80086ea:	6923      	ldr	r3, [r4, #16]
 80086ec:	4632      	mov	r2, r6
 80086ee:	4649      	mov	r1, r9
 80086f0:	4640      	mov	r0, r8
 80086f2:	47d0      	blx	sl
 80086f4:	3001      	adds	r0, #1
 80086f6:	d0ab      	beq.n	8008650 <_printf_i+0x164>
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	079b      	lsls	r3, r3, #30
 80086fc:	d413      	bmi.n	8008726 <_printf_i+0x23a>
 80086fe:	68e0      	ldr	r0, [r4, #12]
 8008700:	9b03      	ldr	r3, [sp, #12]
 8008702:	4298      	cmp	r0, r3
 8008704:	bfb8      	it	lt
 8008706:	4618      	movlt	r0, r3
 8008708:	e7a4      	b.n	8008654 <_printf_i+0x168>
 800870a:	2301      	movs	r3, #1
 800870c:	4632      	mov	r2, r6
 800870e:	4649      	mov	r1, r9
 8008710:	4640      	mov	r0, r8
 8008712:	47d0      	blx	sl
 8008714:	3001      	adds	r0, #1
 8008716:	d09b      	beq.n	8008650 <_printf_i+0x164>
 8008718:	3501      	adds	r5, #1
 800871a:	68e3      	ldr	r3, [r4, #12]
 800871c:	9903      	ldr	r1, [sp, #12]
 800871e:	1a5b      	subs	r3, r3, r1
 8008720:	42ab      	cmp	r3, r5
 8008722:	dcf2      	bgt.n	800870a <_printf_i+0x21e>
 8008724:	e7eb      	b.n	80086fe <_printf_i+0x212>
 8008726:	2500      	movs	r5, #0
 8008728:	f104 0619 	add.w	r6, r4, #25
 800872c:	e7f5      	b.n	800871a <_printf_i+0x22e>
 800872e:	bf00      	nop
 8008730:	0800d6be 	.word	0x0800d6be
 8008734:	0800d6cf 	.word	0x0800d6cf

08008738 <_scanf_float>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	b087      	sub	sp, #28
 800873e:	4617      	mov	r7, r2
 8008740:	9303      	str	r3, [sp, #12]
 8008742:	688b      	ldr	r3, [r1, #8]
 8008744:	1e5a      	subs	r2, r3, #1
 8008746:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800874a:	bf83      	ittte	hi
 800874c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008750:	195b      	addhi	r3, r3, r5
 8008752:	9302      	strhi	r3, [sp, #8]
 8008754:	2300      	movls	r3, #0
 8008756:	bf86      	itte	hi
 8008758:	f240 135d 	movwhi	r3, #349	; 0x15d
 800875c:	608b      	strhi	r3, [r1, #8]
 800875e:	9302      	strls	r3, [sp, #8]
 8008760:	680b      	ldr	r3, [r1, #0]
 8008762:	468b      	mov	fp, r1
 8008764:	2500      	movs	r5, #0
 8008766:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800876a:	f84b 3b1c 	str.w	r3, [fp], #28
 800876e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008772:	4680      	mov	r8, r0
 8008774:	460c      	mov	r4, r1
 8008776:	465e      	mov	r6, fp
 8008778:	46aa      	mov	sl, r5
 800877a:	46a9      	mov	r9, r5
 800877c:	9501      	str	r5, [sp, #4]
 800877e:	68a2      	ldr	r2, [r4, #8]
 8008780:	b152      	cbz	r2, 8008798 <_scanf_float+0x60>
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b4e      	cmp	r3, #78	; 0x4e
 8008788:	d864      	bhi.n	8008854 <_scanf_float+0x11c>
 800878a:	2b40      	cmp	r3, #64	; 0x40
 800878c:	d83c      	bhi.n	8008808 <_scanf_float+0xd0>
 800878e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008792:	b2c8      	uxtb	r0, r1
 8008794:	280e      	cmp	r0, #14
 8008796:	d93a      	bls.n	800880e <_scanf_float+0xd6>
 8008798:	f1b9 0f00 	cmp.w	r9, #0
 800879c:	d003      	beq.n	80087a6 <_scanf_float+0x6e>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80087aa:	f1ba 0f01 	cmp.w	sl, #1
 80087ae:	f200 8113 	bhi.w	80089d8 <_scanf_float+0x2a0>
 80087b2:	455e      	cmp	r6, fp
 80087b4:	f200 8105 	bhi.w	80089c2 <_scanf_float+0x28a>
 80087b8:	2501      	movs	r5, #1
 80087ba:	4628      	mov	r0, r5
 80087bc:	b007      	add	sp, #28
 80087be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80087c6:	2a0d      	cmp	r2, #13
 80087c8:	d8e6      	bhi.n	8008798 <_scanf_float+0x60>
 80087ca:	a101      	add	r1, pc, #4	; (adr r1, 80087d0 <_scanf_float+0x98>)
 80087cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80087d0:	0800890f 	.word	0x0800890f
 80087d4:	08008799 	.word	0x08008799
 80087d8:	08008799 	.word	0x08008799
 80087dc:	08008799 	.word	0x08008799
 80087e0:	0800896f 	.word	0x0800896f
 80087e4:	08008947 	.word	0x08008947
 80087e8:	08008799 	.word	0x08008799
 80087ec:	08008799 	.word	0x08008799
 80087f0:	0800891d 	.word	0x0800891d
 80087f4:	08008799 	.word	0x08008799
 80087f8:	08008799 	.word	0x08008799
 80087fc:	08008799 	.word	0x08008799
 8008800:	08008799 	.word	0x08008799
 8008804:	080088d5 	.word	0x080088d5
 8008808:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800880c:	e7db      	b.n	80087c6 <_scanf_float+0x8e>
 800880e:	290e      	cmp	r1, #14
 8008810:	d8c2      	bhi.n	8008798 <_scanf_float+0x60>
 8008812:	a001      	add	r0, pc, #4	; (adr r0, 8008818 <_scanf_float+0xe0>)
 8008814:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008818:	080088c7 	.word	0x080088c7
 800881c:	08008799 	.word	0x08008799
 8008820:	080088c7 	.word	0x080088c7
 8008824:	0800895b 	.word	0x0800895b
 8008828:	08008799 	.word	0x08008799
 800882c:	08008875 	.word	0x08008875
 8008830:	080088b1 	.word	0x080088b1
 8008834:	080088b1 	.word	0x080088b1
 8008838:	080088b1 	.word	0x080088b1
 800883c:	080088b1 	.word	0x080088b1
 8008840:	080088b1 	.word	0x080088b1
 8008844:	080088b1 	.word	0x080088b1
 8008848:	080088b1 	.word	0x080088b1
 800884c:	080088b1 	.word	0x080088b1
 8008850:	080088b1 	.word	0x080088b1
 8008854:	2b6e      	cmp	r3, #110	; 0x6e
 8008856:	d809      	bhi.n	800886c <_scanf_float+0x134>
 8008858:	2b60      	cmp	r3, #96	; 0x60
 800885a:	d8b2      	bhi.n	80087c2 <_scanf_float+0x8a>
 800885c:	2b54      	cmp	r3, #84	; 0x54
 800885e:	d077      	beq.n	8008950 <_scanf_float+0x218>
 8008860:	2b59      	cmp	r3, #89	; 0x59
 8008862:	d199      	bne.n	8008798 <_scanf_float+0x60>
 8008864:	2d07      	cmp	r5, #7
 8008866:	d197      	bne.n	8008798 <_scanf_float+0x60>
 8008868:	2508      	movs	r5, #8
 800886a:	e029      	b.n	80088c0 <_scanf_float+0x188>
 800886c:	2b74      	cmp	r3, #116	; 0x74
 800886e:	d06f      	beq.n	8008950 <_scanf_float+0x218>
 8008870:	2b79      	cmp	r3, #121	; 0x79
 8008872:	e7f6      	b.n	8008862 <_scanf_float+0x12a>
 8008874:	6821      	ldr	r1, [r4, #0]
 8008876:	05c8      	lsls	r0, r1, #23
 8008878:	d51a      	bpl.n	80088b0 <_scanf_float+0x178>
 800887a:	9b02      	ldr	r3, [sp, #8]
 800887c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008880:	6021      	str	r1, [r4, #0]
 8008882:	f109 0901 	add.w	r9, r9, #1
 8008886:	b11b      	cbz	r3, 8008890 <_scanf_float+0x158>
 8008888:	3b01      	subs	r3, #1
 800888a:	3201      	adds	r2, #1
 800888c:	9302      	str	r3, [sp, #8]
 800888e:	60a2      	str	r2, [r4, #8]
 8008890:	68a3      	ldr	r3, [r4, #8]
 8008892:	3b01      	subs	r3, #1
 8008894:	60a3      	str	r3, [r4, #8]
 8008896:	6923      	ldr	r3, [r4, #16]
 8008898:	3301      	adds	r3, #1
 800889a:	6123      	str	r3, [r4, #16]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3b01      	subs	r3, #1
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	607b      	str	r3, [r7, #4]
 80088a4:	f340 8084 	ble.w	80089b0 <_scanf_float+0x278>
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	3301      	adds	r3, #1
 80088ac:	603b      	str	r3, [r7, #0]
 80088ae:	e766      	b.n	800877e <_scanf_float+0x46>
 80088b0:	eb1a 0f05 	cmn.w	sl, r5
 80088b4:	f47f af70 	bne.w	8008798 <_scanf_float+0x60>
 80088b8:	6822      	ldr	r2, [r4, #0]
 80088ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80088be:	6022      	str	r2, [r4, #0]
 80088c0:	f806 3b01 	strb.w	r3, [r6], #1
 80088c4:	e7e4      	b.n	8008890 <_scanf_float+0x158>
 80088c6:	6822      	ldr	r2, [r4, #0]
 80088c8:	0610      	lsls	r0, r2, #24
 80088ca:	f57f af65 	bpl.w	8008798 <_scanf_float+0x60>
 80088ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088d2:	e7f4      	b.n	80088be <_scanf_float+0x186>
 80088d4:	f1ba 0f00 	cmp.w	sl, #0
 80088d8:	d10e      	bne.n	80088f8 <_scanf_float+0x1c0>
 80088da:	f1b9 0f00 	cmp.w	r9, #0
 80088de:	d10e      	bne.n	80088fe <_scanf_float+0x1c6>
 80088e0:	6822      	ldr	r2, [r4, #0]
 80088e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80088e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80088ea:	d108      	bne.n	80088fe <_scanf_float+0x1c6>
 80088ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80088f0:	6022      	str	r2, [r4, #0]
 80088f2:	f04f 0a01 	mov.w	sl, #1
 80088f6:	e7e3      	b.n	80088c0 <_scanf_float+0x188>
 80088f8:	f1ba 0f02 	cmp.w	sl, #2
 80088fc:	d055      	beq.n	80089aa <_scanf_float+0x272>
 80088fe:	2d01      	cmp	r5, #1
 8008900:	d002      	beq.n	8008908 <_scanf_float+0x1d0>
 8008902:	2d04      	cmp	r5, #4
 8008904:	f47f af48 	bne.w	8008798 <_scanf_float+0x60>
 8008908:	3501      	adds	r5, #1
 800890a:	b2ed      	uxtb	r5, r5
 800890c:	e7d8      	b.n	80088c0 <_scanf_float+0x188>
 800890e:	f1ba 0f01 	cmp.w	sl, #1
 8008912:	f47f af41 	bne.w	8008798 <_scanf_float+0x60>
 8008916:	f04f 0a02 	mov.w	sl, #2
 800891a:	e7d1      	b.n	80088c0 <_scanf_float+0x188>
 800891c:	b97d      	cbnz	r5, 800893e <_scanf_float+0x206>
 800891e:	f1b9 0f00 	cmp.w	r9, #0
 8008922:	f47f af3c 	bne.w	800879e <_scanf_float+0x66>
 8008926:	6822      	ldr	r2, [r4, #0]
 8008928:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800892c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008930:	f47f af39 	bne.w	80087a6 <_scanf_float+0x6e>
 8008934:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008938:	6022      	str	r2, [r4, #0]
 800893a:	2501      	movs	r5, #1
 800893c:	e7c0      	b.n	80088c0 <_scanf_float+0x188>
 800893e:	2d03      	cmp	r5, #3
 8008940:	d0e2      	beq.n	8008908 <_scanf_float+0x1d0>
 8008942:	2d05      	cmp	r5, #5
 8008944:	e7de      	b.n	8008904 <_scanf_float+0x1cc>
 8008946:	2d02      	cmp	r5, #2
 8008948:	f47f af26 	bne.w	8008798 <_scanf_float+0x60>
 800894c:	2503      	movs	r5, #3
 800894e:	e7b7      	b.n	80088c0 <_scanf_float+0x188>
 8008950:	2d06      	cmp	r5, #6
 8008952:	f47f af21 	bne.w	8008798 <_scanf_float+0x60>
 8008956:	2507      	movs	r5, #7
 8008958:	e7b2      	b.n	80088c0 <_scanf_float+0x188>
 800895a:	6822      	ldr	r2, [r4, #0]
 800895c:	0591      	lsls	r1, r2, #22
 800895e:	f57f af1b 	bpl.w	8008798 <_scanf_float+0x60>
 8008962:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008966:	6022      	str	r2, [r4, #0]
 8008968:	f8cd 9004 	str.w	r9, [sp, #4]
 800896c:	e7a8      	b.n	80088c0 <_scanf_float+0x188>
 800896e:	6822      	ldr	r2, [r4, #0]
 8008970:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008974:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008978:	d006      	beq.n	8008988 <_scanf_float+0x250>
 800897a:	0550      	lsls	r0, r2, #21
 800897c:	f57f af0c 	bpl.w	8008798 <_scanf_float+0x60>
 8008980:	f1b9 0f00 	cmp.w	r9, #0
 8008984:	f43f af0f 	beq.w	80087a6 <_scanf_float+0x6e>
 8008988:	0591      	lsls	r1, r2, #22
 800898a:	bf58      	it	pl
 800898c:	9901      	ldrpl	r1, [sp, #4]
 800898e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008992:	bf58      	it	pl
 8008994:	eba9 0101 	subpl.w	r1, r9, r1
 8008998:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800899c:	bf58      	it	pl
 800899e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80089a2:	6022      	str	r2, [r4, #0]
 80089a4:	f04f 0900 	mov.w	r9, #0
 80089a8:	e78a      	b.n	80088c0 <_scanf_float+0x188>
 80089aa:	f04f 0a03 	mov.w	sl, #3
 80089ae:	e787      	b.n	80088c0 <_scanf_float+0x188>
 80089b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80089b4:	4639      	mov	r1, r7
 80089b6:	4640      	mov	r0, r8
 80089b8:	4798      	blx	r3
 80089ba:	2800      	cmp	r0, #0
 80089bc:	f43f aedf 	beq.w	800877e <_scanf_float+0x46>
 80089c0:	e6ea      	b.n	8008798 <_scanf_float+0x60>
 80089c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80089c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80089ca:	463a      	mov	r2, r7
 80089cc:	4640      	mov	r0, r8
 80089ce:	4798      	blx	r3
 80089d0:	6923      	ldr	r3, [r4, #16]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	6123      	str	r3, [r4, #16]
 80089d6:	e6ec      	b.n	80087b2 <_scanf_float+0x7a>
 80089d8:	1e6b      	subs	r3, r5, #1
 80089da:	2b06      	cmp	r3, #6
 80089dc:	d825      	bhi.n	8008a2a <_scanf_float+0x2f2>
 80089de:	2d02      	cmp	r5, #2
 80089e0:	d836      	bhi.n	8008a50 <_scanf_float+0x318>
 80089e2:	455e      	cmp	r6, fp
 80089e4:	f67f aee8 	bls.w	80087b8 <_scanf_float+0x80>
 80089e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80089ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80089f0:	463a      	mov	r2, r7
 80089f2:	4640      	mov	r0, r8
 80089f4:	4798      	blx	r3
 80089f6:	6923      	ldr	r3, [r4, #16]
 80089f8:	3b01      	subs	r3, #1
 80089fa:	6123      	str	r3, [r4, #16]
 80089fc:	e7f1      	b.n	80089e2 <_scanf_float+0x2aa>
 80089fe:	9802      	ldr	r0, [sp, #8]
 8008a00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a04:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008a08:	9002      	str	r0, [sp, #8]
 8008a0a:	463a      	mov	r2, r7
 8008a0c:	4640      	mov	r0, r8
 8008a0e:	4798      	blx	r3
 8008a10:	6923      	ldr	r3, [r4, #16]
 8008a12:	3b01      	subs	r3, #1
 8008a14:	6123      	str	r3, [r4, #16]
 8008a16:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008a1a:	fa5f fa8a 	uxtb.w	sl, sl
 8008a1e:	f1ba 0f02 	cmp.w	sl, #2
 8008a22:	d1ec      	bne.n	80089fe <_scanf_float+0x2c6>
 8008a24:	3d03      	subs	r5, #3
 8008a26:	b2ed      	uxtb	r5, r5
 8008a28:	1b76      	subs	r6, r6, r5
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	05da      	lsls	r2, r3, #23
 8008a2e:	d52f      	bpl.n	8008a90 <_scanf_float+0x358>
 8008a30:	055b      	lsls	r3, r3, #21
 8008a32:	d510      	bpl.n	8008a56 <_scanf_float+0x31e>
 8008a34:	455e      	cmp	r6, fp
 8008a36:	f67f aebf 	bls.w	80087b8 <_scanf_float+0x80>
 8008a3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a42:	463a      	mov	r2, r7
 8008a44:	4640      	mov	r0, r8
 8008a46:	4798      	blx	r3
 8008a48:	6923      	ldr	r3, [r4, #16]
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	6123      	str	r3, [r4, #16]
 8008a4e:	e7f1      	b.n	8008a34 <_scanf_float+0x2fc>
 8008a50:	46aa      	mov	sl, r5
 8008a52:	9602      	str	r6, [sp, #8]
 8008a54:	e7df      	b.n	8008a16 <_scanf_float+0x2de>
 8008a56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008a5a:	6923      	ldr	r3, [r4, #16]
 8008a5c:	2965      	cmp	r1, #101	; 0x65
 8008a5e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008a62:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8008a66:	6123      	str	r3, [r4, #16]
 8008a68:	d00c      	beq.n	8008a84 <_scanf_float+0x34c>
 8008a6a:	2945      	cmp	r1, #69	; 0x45
 8008a6c:	d00a      	beq.n	8008a84 <_scanf_float+0x34c>
 8008a6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a72:	463a      	mov	r2, r7
 8008a74:	4640      	mov	r0, r8
 8008a76:	4798      	blx	r3
 8008a78:	6923      	ldr	r3, [r4, #16]
 8008a7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	1eb5      	subs	r5, r6, #2
 8008a82:	6123      	str	r3, [r4, #16]
 8008a84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a88:	463a      	mov	r2, r7
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	4798      	blx	r3
 8008a8e:	462e      	mov	r6, r5
 8008a90:	6825      	ldr	r5, [r4, #0]
 8008a92:	f015 0510 	ands.w	r5, r5, #16
 8008a96:	d158      	bne.n	8008b4a <_scanf_float+0x412>
 8008a98:	7035      	strb	r5, [r6, #0]
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aa4:	d11c      	bne.n	8008ae0 <_scanf_float+0x3a8>
 8008aa6:	9b01      	ldr	r3, [sp, #4]
 8008aa8:	454b      	cmp	r3, r9
 8008aaa:	eba3 0209 	sub.w	r2, r3, r9
 8008aae:	d124      	bne.n	8008afa <_scanf_float+0x3c2>
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	4659      	mov	r1, fp
 8008ab4:	4640      	mov	r0, r8
 8008ab6:	f000 fead 	bl	8009814 <_strtod_r>
 8008aba:	9b03      	ldr	r3, [sp, #12]
 8008abc:	6821      	ldr	r1, [r4, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f011 0f02 	tst.w	r1, #2
 8008ac4:	ec57 6b10 	vmov	r6, r7, d0
 8008ac8:	f103 0204 	add.w	r2, r3, #4
 8008acc:	d020      	beq.n	8008b10 <_scanf_float+0x3d8>
 8008ace:	9903      	ldr	r1, [sp, #12]
 8008ad0:	600a      	str	r2, [r1, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	e9c3 6700 	strd	r6, r7, [r3]
 8008ad8:	68e3      	ldr	r3, [r4, #12]
 8008ada:	3301      	adds	r3, #1
 8008adc:	60e3      	str	r3, [r4, #12]
 8008ade:	e66c      	b.n	80087ba <_scanf_float+0x82>
 8008ae0:	9b04      	ldr	r3, [sp, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d0e4      	beq.n	8008ab0 <_scanf_float+0x378>
 8008ae6:	9905      	ldr	r1, [sp, #20]
 8008ae8:	230a      	movs	r3, #10
 8008aea:	462a      	mov	r2, r5
 8008aec:	3101      	adds	r1, #1
 8008aee:	4640      	mov	r0, r8
 8008af0:	f000 ff1a 	bl	8009928 <_strtol_r>
 8008af4:	9b04      	ldr	r3, [sp, #16]
 8008af6:	9e05      	ldr	r6, [sp, #20]
 8008af8:	1ac2      	subs	r2, r0, r3
 8008afa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008afe:	429e      	cmp	r6, r3
 8008b00:	bf28      	it	cs
 8008b02:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008b06:	4912      	ldr	r1, [pc, #72]	; (8008b50 <_scanf_float+0x418>)
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f000 f83b 	bl	8008b84 <siprintf>
 8008b0e:	e7cf      	b.n	8008ab0 <_scanf_float+0x378>
 8008b10:	f011 0f04 	tst.w	r1, #4
 8008b14:	9903      	ldr	r1, [sp, #12]
 8008b16:	600a      	str	r2, [r1, #0]
 8008b18:	d1db      	bne.n	8008ad2 <_scanf_float+0x39a>
 8008b1a:	f8d3 8000 	ldr.w	r8, [r3]
 8008b1e:	ee10 2a10 	vmov	r2, s0
 8008b22:	ee10 0a10 	vmov	r0, s0
 8008b26:	463b      	mov	r3, r7
 8008b28:	4639      	mov	r1, r7
 8008b2a:	f7f8 f81f 	bl	8000b6c <__aeabi_dcmpun>
 8008b2e:	b128      	cbz	r0, 8008b3c <_scanf_float+0x404>
 8008b30:	4808      	ldr	r0, [pc, #32]	; (8008b54 <_scanf_float+0x41c>)
 8008b32:	f000 f821 	bl	8008b78 <nanf>
 8008b36:	ed88 0a00 	vstr	s0, [r8]
 8008b3a:	e7cd      	b.n	8008ad8 <_scanf_float+0x3a0>
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	4639      	mov	r1, r7
 8008b40:	f7f8 f872 	bl	8000c28 <__aeabi_d2f>
 8008b44:	f8c8 0000 	str.w	r0, [r8]
 8008b48:	e7c6      	b.n	8008ad8 <_scanf_float+0x3a0>
 8008b4a:	2500      	movs	r5, #0
 8008b4c:	e635      	b.n	80087ba <_scanf_float+0x82>
 8008b4e:	bf00      	nop
 8008b50:	0800d6e0 	.word	0x0800d6e0
 8008b54:	0800db58 	.word	0x0800db58

08008b58 <_sbrk_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4d06      	ldr	r5, [pc, #24]	; (8008b74 <_sbrk_r+0x1c>)
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	4604      	mov	r4, r0
 8008b60:	4608      	mov	r0, r1
 8008b62:	602b      	str	r3, [r5, #0]
 8008b64:	f7f9 f9f6 	bl	8001f54 <_sbrk>
 8008b68:	1c43      	adds	r3, r0, #1
 8008b6a:	d102      	bne.n	8008b72 <_sbrk_r+0x1a>
 8008b6c:	682b      	ldr	r3, [r5, #0]
 8008b6e:	b103      	cbz	r3, 8008b72 <_sbrk_r+0x1a>
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	bd38      	pop	{r3, r4, r5, pc}
 8008b74:	2000083c 	.word	0x2000083c

08008b78 <nanf>:
 8008b78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008b80 <nanf+0x8>
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	7fc00000 	.word	0x7fc00000

08008b84 <siprintf>:
 8008b84:	b40e      	push	{r1, r2, r3}
 8008b86:	b500      	push	{lr}
 8008b88:	b09c      	sub	sp, #112	; 0x70
 8008b8a:	ab1d      	add	r3, sp, #116	; 0x74
 8008b8c:	9002      	str	r0, [sp, #8]
 8008b8e:	9006      	str	r0, [sp, #24]
 8008b90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b94:	4809      	ldr	r0, [pc, #36]	; (8008bbc <siprintf+0x38>)
 8008b96:	9107      	str	r1, [sp, #28]
 8008b98:	9104      	str	r1, [sp, #16]
 8008b9a:	4909      	ldr	r1, [pc, #36]	; (8008bc0 <siprintf+0x3c>)
 8008b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ba0:	9105      	str	r1, [sp, #20]
 8008ba2:	6800      	ldr	r0, [r0, #0]
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	a902      	add	r1, sp, #8
 8008ba8:	f003 f80e 	bl	800bbc8 <_svfiprintf_r>
 8008bac:	9b02      	ldr	r3, [sp, #8]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	b01c      	add	sp, #112	; 0x70
 8008bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bb8:	b003      	add	sp, #12
 8008bba:	4770      	bx	lr
 8008bbc:	2000000c 	.word	0x2000000c
 8008bc0:	ffff0208 	.word	0xffff0208

08008bc4 <sulp>:
 8008bc4:	b570      	push	{r4, r5, r6, lr}
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	460d      	mov	r5, r1
 8008bca:	ec45 4b10 	vmov	d0, r4, r5
 8008bce:	4616      	mov	r6, r2
 8008bd0:	f002 fe50 	bl	800b874 <__ulp>
 8008bd4:	ec51 0b10 	vmov	r0, r1, d0
 8008bd8:	b17e      	cbz	r6, 8008bfa <sulp+0x36>
 8008bda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008bde:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	dd09      	ble.n	8008bfa <sulp+0x36>
 8008be6:	051b      	lsls	r3, r3, #20
 8008be8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008bec:	2400      	movs	r4, #0
 8008bee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008bf2:	4622      	mov	r2, r4
 8008bf4:	462b      	mov	r3, r5
 8008bf6:	f7f7 fd1f 	bl	8000638 <__aeabi_dmul>
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}
 8008bfc:	0000      	movs	r0, r0
	...

08008c00 <_strtod_l>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	b0a3      	sub	sp, #140	; 0x8c
 8008c06:	461f      	mov	r7, r3
 8008c08:	2300      	movs	r3, #0
 8008c0a:	931e      	str	r3, [sp, #120]	; 0x78
 8008c0c:	4ba4      	ldr	r3, [pc, #656]	; (8008ea0 <_strtod_l+0x2a0>)
 8008c0e:	9219      	str	r2, [sp, #100]	; 0x64
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	9307      	str	r3, [sp, #28]
 8008c14:	4604      	mov	r4, r0
 8008c16:	4618      	mov	r0, r3
 8008c18:	4688      	mov	r8, r1
 8008c1a:	f7f7 faf9 	bl	8000210 <strlen>
 8008c1e:	f04f 0a00 	mov.w	sl, #0
 8008c22:	4605      	mov	r5, r0
 8008c24:	f04f 0b00 	mov.w	fp, #0
 8008c28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008c2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c2e:	781a      	ldrb	r2, [r3, #0]
 8008c30:	2a2b      	cmp	r2, #43	; 0x2b
 8008c32:	d04c      	beq.n	8008cce <_strtod_l+0xce>
 8008c34:	d839      	bhi.n	8008caa <_strtod_l+0xaa>
 8008c36:	2a0d      	cmp	r2, #13
 8008c38:	d832      	bhi.n	8008ca0 <_strtod_l+0xa0>
 8008c3a:	2a08      	cmp	r2, #8
 8008c3c:	d832      	bhi.n	8008ca4 <_strtod_l+0xa4>
 8008c3e:	2a00      	cmp	r2, #0
 8008c40:	d03c      	beq.n	8008cbc <_strtod_l+0xbc>
 8008c42:	2300      	movs	r3, #0
 8008c44:	930e      	str	r3, [sp, #56]	; 0x38
 8008c46:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008c48:	7833      	ldrb	r3, [r6, #0]
 8008c4a:	2b30      	cmp	r3, #48	; 0x30
 8008c4c:	f040 80b4 	bne.w	8008db8 <_strtod_l+0x1b8>
 8008c50:	7873      	ldrb	r3, [r6, #1]
 8008c52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c56:	2b58      	cmp	r3, #88	; 0x58
 8008c58:	d16c      	bne.n	8008d34 <_strtod_l+0x134>
 8008c5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	ab1e      	add	r3, sp, #120	; 0x78
 8008c60:	9702      	str	r7, [sp, #8]
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	4a8f      	ldr	r2, [pc, #572]	; (8008ea4 <_strtod_l+0x2a4>)
 8008c66:	ab1f      	add	r3, sp, #124	; 0x7c
 8008c68:	a91d      	add	r1, sp, #116	; 0x74
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f001 fef6 	bl	800aa5c <__gethex>
 8008c70:	f010 0707 	ands.w	r7, r0, #7
 8008c74:	4605      	mov	r5, r0
 8008c76:	d005      	beq.n	8008c84 <_strtod_l+0x84>
 8008c78:	2f06      	cmp	r7, #6
 8008c7a:	d12a      	bne.n	8008cd2 <_strtod_l+0xd2>
 8008c7c:	3601      	adds	r6, #1
 8008c7e:	2300      	movs	r3, #0
 8008c80:	961d      	str	r6, [sp, #116]	; 0x74
 8008c82:	930e      	str	r3, [sp, #56]	; 0x38
 8008c84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f040 8596 	bne.w	80097b8 <_strtod_l+0xbb8>
 8008c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c8e:	b1db      	cbz	r3, 8008cc8 <_strtod_l+0xc8>
 8008c90:	4652      	mov	r2, sl
 8008c92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008c96:	ec43 2b10 	vmov	d0, r2, r3
 8008c9a:	b023      	add	sp, #140	; 0x8c
 8008c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca0:	2a20      	cmp	r2, #32
 8008ca2:	d1ce      	bne.n	8008c42 <_strtod_l+0x42>
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	931d      	str	r3, [sp, #116]	; 0x74
 8008ca8:	e7c0      	b.n	8008c2c <_strtod_l+0x2c>
 8008caa:	2a2d      	cmp	r2, #45	; 0x2d
 8008cac:	d1c9      	bne.n	8008c42 <_strtod_l+0x42>
 8008cae:	2201      	movs	r2, #1
 8008cb0:	920e      	str	r2, [sp, #56]	; 0x38
 8008cb2:	1c5a      	adds	r2, r3, #1
 8008cb4:	921d      	str	r2, [sp, #116]	; 0x74
 8008cb6:	785b      	ldrb	r3, [r3, #1]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1c4      	bne.n	8008c46 <_strtod_l+0x46>
 8008cbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cbe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f040 8576 	bne.w	80097b4 <_strtod_l+0xbb4>
 8008cc8:	4652      	mov	r2, sl
 8008cca:	465b      	mov	r3, fp
 8008ccc:	e7e3      	b.n	8008c96 <_strtod_l+0x96>
 8008cce:	2200      	movs	r2, #0
 8008cd0:	e7ee      	b.n	8008cb0 <_strtod_l+0xb0>
 8008cd2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008cd4:	b13a      	cbz	r2, 8008ce6 <_strtod_l+0xe6>
 8008cd6:	2135      	movs	r1, #53	; 0x35
 8008cd8:	a820      	add	r0, sp, #128	; 0x80
 8008cda:	f002 fed6 	bl	800ba8a <__copybits>
 8008cde:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f002 fa9b 	bl	800b21c <_Bfree>
 8008ce6:	3f01      	subs	r7, #1
 8008ce8:	2f05      	cmp	r7, #5
 8008cea:	d807      	bhi.n	8008cfc <_strtod_l+0xfc>
 8008cec:	e8df f007 	tbb	[pc, r7]
 8008cf0:	1d180b0e 	.word	0x1d180b0e
 8008cf4:	030e      	.short	0x030e
 8008cf6:	f04f 0b00 	mov.w	fp, #0
 8008cfa:	46da      	mov	sl, fp
 8008cfc:	0728      	lsls	r0, r5, #28
 8008cfe:	d5c1      	bpl.n	8008c84 <_strtod_l+0x84>
 8008d00:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008d04:	e7be      	b.n	8008c84 <_strtod_l+0x84>
 8008d06:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008d0a:	e7f7      	b.n	8008cfc <_strtod_l+0xfc>
 8008d0c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008d10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008d12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d1e:	e7ed      	b.n	8008cfc <_strtod_l+0xfc>
 8008d20:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008ea8 <_strtod_l+0x2a8>
 8008d24:	f04f 0a00 	mov.w	sl, #0
 8008d28:	e7e8      	b.n	8008cfc <_strtod_l+0xfc>
 8008d2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008d2e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008d32:	e7e3      	b.n	8008cfc <_strtod_l+0xfc>
 8008d34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d36:	1c5a      	adds	r2, r3, #1
 8008d38:	921d      	str	r2, [sp, #116]	; 0x74
 8008d3a:	785b      	ldrb	r3, [r3, #1]
 8008d3c:	2b30      	cmp	r3, #48	; 0x30
 8008d3e:	d0f9      	beq.n	8008d34 <_strtod_l+0x134>
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d09f      	beq.n	8008c84 <_strtod_l+0x84>
 8008d44:	2301      	movs	r3, #1
 8008d46:	f04f 0900 	mov.w	r9, #0
 8008d4a:	9304      	str	r3, [sp, #16]
 8008d4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008d54:	464f      	mov	r7, r9
 8008d56:	220a      	movs	r2, #10
 8008d58:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008d5a:	7806      	ldrb	r6, [r0, #0]
 8008d5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008d60:	b2d9      	uxtb	r1, r3
 8008d62:	2909      	cmp	r1, #9
 8008d64:	d92a      	bls.n	8008dbc <_strtod_l+0x1bc>
 8008d66:	9907      	ldr	r1, [sp, #28]
 8008d68:	462a      	mov	r2, r5
 8008d6a:	f003 f878 	bl	800be5e <strncmp>
 8008d6e:	b398      	cbz	r0, 8008dd8 <_strtod_l+0x1d8>
 8008d70:	2000      	movs	r0, #0
 8008d72:	4633      	mov	r3, r6
 8008d74:	463d      	mov	r5, r7
 8008d76:	9007      	str	r0, [sp, #28]
 8008d78:	4602      	mov	r2, r0
 8008d7a:	2b65      	cmp	r3, #101	; 0x65
 8008d7c:	d001      	beq.n	8008d82 <_strtod_l+0x182>
 8008d7e:	2b45      	cmp	r3, #69	; 0x45
 8008d80:	d118      	bne.n	8008db4 <_strtod_l+0x1b4>
 8008d82:	b91d      	cbnz	r5, 8008d8c <_strtod_l+0x18c>
 8008d84:	9b04      	ldr	r3, [sp, #16]
 8008d86:	4303      	orrs	r3, r0
 8008d88:	d098      	beq.n	8008cbc <_strtod_l+0xbc>
 8008d8a:	2500      	movs	r5, #0
 8008d8c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008d90:	f108 0301 	add.w	r3, r8, #1
 8008d94:	931d      	str	r3, [sp, #116]	; 0x74
 8008d96:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008d9a:	2b2b      	cmp	r3, #43	; 0x2b
 8008d9c:	d075      	beq.n	8008e8a <_strtod_l+0x28a>
 8008d9e:	2b2d      	cmp	r3, #45	; 0x2d
 8008da0:	d07b      	beq.n	8008e9a <_strtod_l+0x29a>
 8008da2:	f04f 0c00 	mov.w	ip, #0
 8008da6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008daa:	2909      	cmp	r1, #9
 8008dac:	f240 8082 	bls.w	8008eb4 <_strtod_l+0x2b4>
 8008db0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008db4:	2600      	movs	r6, #0
 8008db6:	e09d      	b.n	8008ef4 <_strtod_l+0x2f4>
 8008db8:	2300      	movs	r3, #0
 8008dba:	e7c4      	b.n	8008d46 <_strtod_l+0x146>
 8008dbc:	2f08      	cmp	r7, #8
 8008dbe:	bfd8      	it	le
 8008dc0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008dc2:	f100 0001 	add.w	r0, r0, #1
 8008dc6:	bfda      	itte	le
 8008dc8:	fb02 3301 	mlale	r3, r2, r1, r3
 8008dcc:	9309      	strle	r3, [sp, #36]	; 0x24
 8008dce:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008dd2:	3701      	adds	r7, #1
 8008dd4:	901d      	str	r0, [sp, #116]	; 0x74
 8008dd6:	e7bf      	b.n	8008d58 <_strtod_l+0x158>
 8008dd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008dda:	195a      	adds	r2, r3, r5
 8008ddc:	921d      	str	r2, [sp, #116]	; 0x74
 8008dde:	5d5b      	ldrb	r3, [r3, r5]
 8008de0:	2f00      	cmp	r7, #0
 8008de2:	d037      	beq.n	8008e54 <_strtod_l+0x254>
 8008de4:	9007      	str	r0, [sp, #28]
 8008de6:	463d      	mov	r5, r7
 8008de8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008dec:	2a09      	cmp	r2, #9
 8008dee:	d912      	bls.n	8008e16 <_strtod_l+0x216>
 8008df0:	2201      	movs	r2, #1
 8008df2:	e7c2      	b.n	8008d7a <_strtod_l+0x17a>
 8008df4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	921d      	str	r2, [sp, #116]	; 0x74
 8008dfa:	785b      	ldrb	r3, [r3, #1]
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	2b30      	cmp	r3, #48	; 0x30
 8008e00:	d0f8      	beq.n	8008df4 <_strtod_l+0x1f4>
 8008e02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008e06:	2a08      	cmp	r2, #8
 8008e08:	f200 84db 	bhi.w	80097c2 <_strtod_l+0xbc2>
 8008e0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008e0e:	9007      	str	r0, [sp, #28]
 8008e10:	2000      	movs	r0, #0
 8008e12:	920a      	str	r2, [sp, #40]	; 0x28
 8008e14:	4605      	mov	r5, r0
 8008e16:	3b30      	subs	r3, #48	; 0x30
 8008e18:	f100 0201 	add.w	r2, r0, #1
 8008e1c:	d014      	beq.n	8008e48 <_strtod_l+0x248>
 8008e1e:	9907      	ldr	r1, [sp, #28]
 8008e20:	4411      	add	r1, r2
 8008e22:	9107      	str	r1, [sp, #28]
 8008e24:	462a      	mov	r2, r5
 8008e26:	eb00 0e05 	add.w	lr, r0, r5
 8008e2a:	210a      	movs	r1, #10
 8008e2c:	4572      	cmp	r2, lr
 8008e2e:	d113      	bne.n	8008e58 <_strtod_l+0x258>
 8008e30:	182a      	adds	r2, r5, r0
 8008e32:	2a08      	cmp	r2, #8
 8008e34:	f105 0501 	add.w	r5, r5, #1
 8008e38:	4405      	add	r5, r0
 8008e3a:	dc1c      	bgt.n	8008e76 <_strtod_l+0x276>
 8008e3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e3e:	220a      	movs	r2, #10
 8008e40:	fb02 3301 	mla	r3, r2, r1, r3
 8008e44:	9309      	str	r3, [sp, #36]	; 0x24
 8008e46:	2200      	movs	r2, #0
 8008e48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e4a:	1c59      	adds	r1, r3, #1
 8008e4c:	911d      	str	r1, [sp, #116]	; 0x74
 8008e4e:	785b      	ldrb	r3, [r3, #1]
 8008e50:	4610      	mov	r0, r2
 8008e52:	e7c9      	b.n	8008de8 <_strtod_l+0x1e8>
 8008e54:	4638      	mov	r0, r7
 8008e56:	e7d2      	b.n	8008dfe <_strtod_l+0x1fe>
 8008e58:	2a08      	cmp	r2, #8
 8008e5a:	dc04      	bgt.n	8008e66 <_strtod_l+0x266>
 8008e5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e5e:	434e      	muls	r6, r1
 8008e60:	9609      	str	r6, [sp, #36]	; 0x24
 8008e62:	3201      	adds	r2, #1
 8008e64:	e7e2      	b.n	8008e2c <_strtod_l+0x22c>
 8008e66:	f102 0c01 	add.w	ip, r2, #1
 8008e6a:	f1bc 0f10 	cmp.w	ip, #16
 8008e6e:	bfd8      	it	le
 8008e70:	fb01 f909 	mulle.w	r9, r1, r9
 8008e74:	e7f5      	b.n	8008e62 <_strtod_l+0x262>
 8008e76:	2d10      	cmp	r5, #16
 8008e78:	bfdc      	itt	le
 8008e7a:	220a      	movle	r2, #10
 8008e7c:	fb02 3909 	mlale	r9, r2, r9, r3
 8008e80:	e7e1      	b.n	8008e46 <_strtod_l+0x246>
 8008e82:	2300      	movs	r3, #0
 8008e84:	9307      	str	r3, [sp, #28]
 8008e86:	2201      	movs	r2, #1
 8008e88:	e77c      	b.n	8008d84 <_strtod_l+0x184>
 8008e8a:	f04f 0c00 	mov.w	ip, #0
 8008e8e:	f108 0302 	add.w	r3, r8, #2
 8008e92:	931d      	str	r3, [sp, #116]	; 0x74
 8008e94:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008e98:	e785      	b.n	8008da6 <_strtod_l+0x1a6>
 8008e9a:	f04f 0c01 	mov.w	ip, #1
 8008e9e:	e7f6      	b.n	8008e8e <_strtod_l+0x28e>
 8008ea0:	0800d99c 	.word	0x0800d99c
 8008ea4:	0800d6e8 	.word	0x0800d6e8
 8008ea8:	7ff00000 	.word	0x7ff00000
 8008eac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008eae:	1c59      	adds	r1, r3, #1
 8008eb0:	911d      	str	r1, [sp, #116]	; 0x74
 8008eb2:	785b      	ldrb	r3, [r3, #1]
 8008eb4:	2b30      	cmp	r3, #48	; 0x30
 8008eb6:	d0f9      	beq.n	8008eac <_strtod_l+0x2ac>
 8008eb8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008ebc:	2908      	cmp	r1, #8
 8008ebe:	f63f af79 	bhi.w	8008db4 <_strtod_l+0x1b4>
 8008ec2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008ec6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ec8:	9308      	str	r3, [sp, #32]
 8008eca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ecc:	1c59      	adds	r1, r3, #1
 8008ece:	911d      	str	r1, [sp, #116]	; 0x74
 8008ed0:	785b      	ldrb	r3, [r3, #1]
 8008ed2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008ed6:	2e09      	cmp	r6, #9
 8008ed8:	d937      	bls.n	8008f4a <_strtod_l+0x34a>
 8008eda:	9e08      	ldr	r6, [sp, #32]
 8008edc:	1b89      	subs	r1, r1, r6
 8008ede:	2908      	cmp	r1, #8
 8008ee0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008ee4:	dc02      	bgt.n	8008eec <_strtod_l+0x2ec>
 8008ee6:	4576      	cmp	r6, lr
 8008ee8:	bfa8      	it	ge
 8008eea:	4676      	movge	r6, lr
 8008eec:	f1bc 0f00 	cmp.w	ip, #0
 8008ef0:	d000      	beq.n	8008ef4 <_strtod_l+0x2f4>
 8008ef2:	4276      	negs	r6, r6
 8008ef4:	2d00      	cmp	r5, #0
 8008ef6:	d14f      	bne.n	8008f98 <_strtod_l+0x398>
 8008ef8:	9904      	ldr	r1, [sp, #16]
 8008efa:	4301      	orrs	r1, r0
 8008efc:	f47f aec2 	bne.w	8008c84 <_strtod_l+0x84>
 8008f00:	2a00      	cmp	r2, #0
 8008f02:	f47f aedb 	bne.w	8008cbc <_strtod_l+0xbc>
 8008f06:	2b69      	cmp	r3, #105	; 0x69
 8008f08:	d027      	beq.n	8008f5a <_strtod_l+0x35a>
 8008f0a:	dc24      	bgt.n	8008f56 <_strtod_l+0x356>
 8008f0c:	2b49      	cmp	r3, #73	; 0x49
 8008f0e:	d024      	beq.n	8008f5a <_strtod_l+0x35a>
 8008f10:	2b4e      	cmp	r3, #78	; 0x4e
 8008f12:	f47f aed3 	bne.w	8008cbc <_strtod_l+0xbc>
 8008f16:	499e      	ldr	r1, [pc, #632]	; (8009190 <_strtod_l+0x590>)
 8008f18:	a81d      	add	r0, sp, #116	; 0x74
 8008f1a:	f001 fff7 	bl	800af0c <__match>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f43f aecc 	beq.w	8008cbc <_strtod_l+0xbc>
 8008f24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2b28      	cmp	r3, #40	; 0x28
 8008f2a:	d12d      	bne.n	8008f88 <_strtod_l+0x388>
 8008f2c:	4999      	ldr	r1, [pc, #612]	; (8009194 <_strtod_l+0x594>)
 8008f2e:	aa20      	add	r2, sp, #128	; 0x80
 8008f30:	a81d      	add	r0, sp, #116	; 0x74
 8008f32:	f001 ffff 	bl	800af34 <__hexnan>
 8008f36:	2805      	cmp	r0, #5
 8008f38:	d126      	bne.n	8008f88 <_strtod_l+0x388>
 8008f3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f3c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008f40:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008f44:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008f48:	e69c      	b.n	8008c84 <_strtod_l+0x84>
 8008f4a:	210a      	movs	r1, #10
 8008f4c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008f50:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008f54:	e7b9      	b.n	8008eca <_strtod_l+0x2ca>
 8008f56:	2b6e      	cmp	r3, #110	; 0x6e
 8008f58:	e7db      	b.n	8008f12 <_strtod_l+0x312>
 8008f5a:	498f      	ldr	r1, [pc, #572]	; (8009198 <_strtod_l+0x598>)
 8008f5c:	a81d      	add	r0, sp, #116	; 0x74
 8008f5e:	f001 ffd5 	bl	800af0c <__match>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	f43f aeaa 	beq.w	8008cbc <_strtod_l+0xbc>
 8008f68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f6a:	498c      	ldr	r1, [pc, #560]	; (800919c <_strtod_l+0x59c>)
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	a81d      	add	r0, sp, #116	; 0x74
 8008f70:	931d      	str	r3, [sp, #116]	; 0x74
 8008f72:	f001 ffcb 	bl	800af0c <__match>
 8008f76:	b910      	cbnz	r0, 8008f7e <_strtod_l+0x37e>
 8008f78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	931d      	str	r3, [sp, #116]	; 0x74
 8008f7e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80091ac <_strtod_l+0x5ac>
 8008f82:	f04f 0a00 	mov.w	sl, #0
 8008f86:	e67d      	b.n	8008c84 <_strtod_l+0x84>
 8008f88:	4885      	ldr	r0, [pc, #532]	; (80091a0 <_strtod_l+0x5a0>)
 8008f8a:	f002 ff1d 	bl	800bdc8 <nan>
 8008f8e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008f92:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008f96:	e675      	b.n	8008c84 <_strtod_l+0x84>
 8008f98:	9b07      	ldr	r3, [sp, #28]
 8008f9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f9c:	1af3      	subs	r3, r6, r3
 8008f9e:	2f00      	cmp	r7, #0
 8008fa0:	bf08      	it	eq
 8008fa2:	462f      	moveq	r7, r5
 8008fa4:	2d10      	cmp	r5, #16
 8008fa6:	9308      	str	r3, [sp, #32]
 8008fa8:	46a8      	mov	r8, r5
 8008faa:	bfa8      	it	ge
 8008fac:	f04f 0810 	movge.w	r8, #16
 8008fb0:	f7f7 fac8 	bl	8000544 <__aeabi_ui2d>
 8008fb4:	2d09      	cmp	r5, #9
 8008fb6:	4682      	mov	sl, r0
 8008fb8:	468b      	mov	fp, r1
 8008fba:	dd13      	ble.n	8008fe4 <_strtod_l+0x3e4>
 8008fbc:	4b79      	ldr	r3, [pc, #484]	; (80091a4 <_strtod_l+0x5a4>)
 8008fbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008fc2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008fc6:	f7f7 fb37 	bl	8000638 <__aeabi_dmul>
 8008fca:	4682      	mov	sl, r0
 8008fcc:	4648      	mov	r0, r9
 8008fce:	468b      	mov	fp, r1
 8008fd0:	f7f7 fab8 	bl	8000544 <__aeabi_ui2d>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4650      	mov	r0, sl
 8008fda:	4659      	mov	r1, fp
 8008fdc:	f7f7 f976 	bl	80002cc <__adddf3>
 8008fe0:	4682      	mov	sl, r0
 8008fe2:	468b      	mov	fp, r1
 8008fe4:	2d0f      	cmp	r5, #15
 8008fe6:	dc38      	bgt.n	800905a <_strtod_l+0x45a>
 8008fe8:	9b08      	ldr	r3, [sp, #32]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f43f ae4a 	beq.w	8008c84 <_strtod_l+0x84>
 8008ff0:	dd24      	ble.n	800903c <_strtod_l+0x43c>
 8008ff2:	2b16      	cmp	r3, #22
 8008ff4:	dc0b      	bgt.n	800900e <_strtod_l+0x40e>
 8008ff6:	4d6b      	ldr	r5, [pc, #428]	; (80091a4 <_strtod_l+0x5a4>)
 8008ff8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008ffc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009000:	4652      	mov	r2, sl
 8009002:	465b      	mov	r3, fp
 8009004:	f7f7 fb18 	bl	8000638 <__aeabi_dmul>
 8009008:	4682      	mov	sl, r0
 800900a:	468b      	mov	fp, r1
 800900c:	e63a      	b.n	8008c84 <_strtod_l+0x84>
 800900e:	9a08      	ldr	r2, [sp, #32]
 8009010:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009014:	4293      	cmp	r3, r2
 8009016:	db20      	blt.n	800905a <_strtod_l+0x45a>
 8009018:	4c62      	ldr	r4, [pc, #392]	; (80091a4 <_strtod_l+0x5a4>)
 800901a:	f1c5 050f 	rsb	r5, r5, #15
 800901e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009022:	4652      	mov	r2, sl
 8009024:	465b      	mov	r3, fp
 8009026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800902a:	f7f7 fb05 	bl	8000638 <__aeabi_dmul>
 800902e:	9b08      	ldr	r3, [sp, #32]
 8009030:	1b5d      	subs	r5, r3, r5
 8009032:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009036:	e9d4 2300 	ldrd	r2, r3, [r4]
 800903a:	e7e3      	b.n	8009004 <_strtod_l+0x404>
 800903c:	9b08      	ldr	r3, [sp, #32]
 800903e:	3316      	adds	r3, #22
 8009040:	db0b      	blt.n	800905a <_strtod_l+0x45a>
 8009042:	9b07      	ldr	r3, [sp, #28]
 8009044:	4a57      	ldr	r2, [pc, #348]	; (80091a4 <_strtod_l+0x5a4>)
 8009046:	1b9e      	subs	r6, r3, r6
 8009048:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800904c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009050:	4650      	mov	r0, sl
 8009052:	4659      	mov	r1, fp
 8009054:	f7f7 fc1a 	bl	800088c <__aeabi_ddiv>
 8009058:	e7d6      	b.n	8009008 <_strtod_l+0x408>
 800905a:	9b08      	ldr	r3, [sp, #32]
 800905c:	eba5 0808 	sub.w	r8, r5, r8
 8009060:	4498      	add	r8, r3
 8009062:	f1b8 0f00 	cmp.w	r8, #0
 8009066:	dd71      	ble.n	800914c <_strtod_l+0x54c>
 8009068:	f018 030f 	ands.w	r3, r8, #15
 800906c:	d00a      	beq.n	8009084 <_strtod_l+0x484>
 800906e:	494d      	ldr	r1, [pc, #308]	; (80091a4 <_strtod_l+0x5a4>)
 8009070:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009074:	4652      	mov	r2, sl
 8009076:	465b      	mov	r3, fp
 8009078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800907c:	f7f7 fadc 	bl	8000638 <__aeabi_dmul>
 8009080:	4682      	mov	sl, r0
 8009082:	468b      	mov	fp, r1
 8009084:	f038 080f 	bics.w	r8, r8, #15
 8009088:	d04d      	beq.n	8009126 <_strtod_l+0x526>
 800908a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800908e:	dd22      	ble.n	80090d6 <_strtod_l+0x4d6>
 8009090:	2500      	movs	r5, #0
 8009092:	462e      	mov	r6, r5
 8009094:	9509      	str	r5, [sp, #36]	; 0x24
 8009096:	9507      	str	r5, [sp, #28]
 8009098:	2322      	movs	r3, #34	; 0x22
 800909a:	f8df b110 	ldr.w	fp, [pc, #272]	; 80091ac <_strtod_l+0x5ac>
 800909e:	6023      	str	r3, [r4, #0]
 80090a0:	f04f 0a00 	mov.w	sl, #0
 80090a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f43f adec 	beq.w	8008c84 <_strtod_l+0x84>
 80090ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80090ae:	4620      	mov	r0, r4
 80090b0:	f002 f8b4 	bl	800b21c <_Bfree>
 80090b4:	9907      	ldr	r1, [sp, #28]
 80090b6:	4620      	mov	r0, r4
 80090b8:	f002 f8b0 	bl	800b21c <_Bfree>
 80090bc:	4631      	mov	r1, r6
 80090be:	4620      	mov	r0, r4
 80090c0:	f002 f8ac 	bl	800b21c <_Bfree>
 80090c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090c6:	4620      	mov	r0, r4
 80090c8:	f002 f8a8 	bl	800b21c <_Bfree>
 80090cc:	4629      	mov	r1, r5
 80090ce:	4620      	mov	r0, r4
 80090d0:	f002 f8a4 	bl	800b21c <_Bfree>
 80090d4:	e5d6      	b.n	8008c84 <_strtod_l+0x84>
 80090d6:	2300      	movs	r3, #0
 80090d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80090dc:	4650      	mov	r0, sl
 80090de:	4659      	mov	r1, fp
 80090e0:	4699      	mov	r9, r3
 80090e2:	f1b8 0f01 	cmp.w	r8, #1
 80090e6:	dc21      	bgt.n	800912c <_strtod_l+0x52c>
 80090e8:	b10b      	cbz	r3, 80090ee <_strtod_l+0x4ee>
 80090ea:	4682      	mov	sl, r0
 80090ec:	468b      	mov	fp, r1
 80090ee:	4b2e      	ldr	r3, [pc, #184]	; (80091a8 <_strtod_l+0x5a8>)
 80090f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80090f4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80090f8:	4652      	mov	r2, sl
 80090fa:	465b      	mov	r3, fp
 80090fc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009100:	f7f7 fa9a 	bl	8000638 <__aeabi_dmul>
 8009104:	4b29      	ldr	r3, [pc, #164]	; (80091ac <_strtod_l+0x5ac>)
 8009106:	460a      	mov	r2, r1
 8009108:	400b      	ands	r3, r1
 800910a:	4929      	ldr	r1, [pc, #164]	; (80091b0 <_strtod_l+0x5b0>)
 800910c:	428b      	cmp	r3, r1
 800910e:	4682      	mov	sl, r0
 8009110:	d8be      	bhi.n	8009090 <_strtod_l+0x490>
 8009112:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009116:	428b      	cmp	r3, r1
 8009118:	bf86      	itte	hi
 800911a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80091b4 <_strtod_l+0x5b4>
 800911e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8009122:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009126:	2300      	movs	r3, #0
 8009128:	9304      	str	r3, [sp, #16]
 800912a:	e081      	b.n	8009230 <_strtod_l+0x630>
 800912c:	f018 0f01 	tst.w	r8, #1
 8009130:	d007      	beq.n	8009142 <_strtod_l+0x542>
 8009132:	4b1d      	ldr	r3, [pc, #116]	; (80091a8 <_strtod_l+0x5a8>)
 8009134:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913c:	f7f7 fa7c 	bl	8000638 <__aeabi_dmul>
 8009140:	2301      	movs	r3, #1
 8009142:	f109 0901 	add.w	r9, r9, #1
 8009146:	ea4f 0868 	mov.w	r8, r8, asr #1
 800914a:	e7ca      	b.n	80090e2 <_strtod_l+0x4e2>
 800914c:	d0eb      	beq.n	8009126 <_strtod_l+0x526>
 800914e:	f1c8 0800 	rsb	r8, r8, #0
 8009152:	f018 020f 	ands.w	r2, r8, #15
 8009156:	d00a      	beq.n	800916e <_strtod_l+0x56e>
 8009158:	4b12      	ldr	r3, [pc, #72]	; (80091a4 <_strtod_l+0x5a4>)
 800915a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800915e:	4650      	mov	r0, sl
 8009160:	4659      	mov	r1, fp
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	f7f7 fb91 	bl	800088c <__aeabi_ddiv>
 800916a:	4682      	mov	sl, r0
 800916c:	468b      	mov	fp, r1
 800916e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009172:	d0d8      	beq.n	8009126 <_strtod_l+0x526>
 8009174:	f1b8 0f1f 	cmp.w	r8, #31
 8009178:	dd1e      	ble.n	80091b8 <_strtod_l+0x5b8>
 800917a:	2500      	movs	r5, #0
 800917c:	462e      	mov	r6, r5
 800917e:	9509      	str	r5, [sp, #36]	; 0x24
 8009180:	9507      	str	r5, [sp, #28]
 8009182:	2322      	movs	r3, #34	; 0x22
 8009184:	f04f 0a00 	mov.w	sl, #0
 8009188:	f04f 0b00 	mov.w	fp, #0
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	e789      	b.n	80090a4 <_strtod_l+0x4a4>
 8009190:	0800d6b9 	.word	0x0800d6b9
 8009194:	0800d6fc 	.word	0x0800d6fc
 8009198:	0800d6b1 	.word	0x0800d6b1
 800919c:	0800d83c 	.word	0x0800d83c
 80091a0:	0800db58 	.word	0x0800db58
 80091a4:	0800da38 	.word	0x0800da38
 80091a8:	0800da10 	.word	0x0800da10
 80091ac:	7ff00000 	.word	0x7ff00000
 80091b0:	7ca00000 	.word	0x7ca00000
 80091b4:	7fefffff 	.word	0x7fefffff
 80091b8:	f018 0310 	ands.w	r3, r8, #16
 80091bc:	bf18      	it	ne
 80091be:	236a      	movne	r3, #106	; 0x6a
 80091c0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009578 <_strtod_l+0x978>
 80091c4:	9304      	str	r3, [sp, #16]
 80091c6:	4650      	mov	r0, sl
 80091c8:	4659      	mov	r1, fp
 80091ca:	2300      	movs	r3, #0
 80091cc:	f018 0f01 	tst.w	r8, #1
 80091d0:	d004      	beq.n	80091dc <_strtod_l+0x5dc>
 80091d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80091d6:	f7f7 fa2f 	bl	8000638 <__aeabi_dmul>
 80091da:	2301      	movs	r3, #1
 80091dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80091e0:	f109 0908 	add.w	r9, r9, #8
 80091e4:	d1f2      	bne.n	80091cc <_strtod_l+0x5cc>
 80091e6:	b10b      	cbz	r3, 80091ec <_strtod_l+0x5ec>
 80091e8:	4682      	mov	sl, r0
 80091ea:	468b      	mov	fp, r1
 80091ec:	9b04      	ldr	r3, [sp, #16]
 80091ee:	b1bb      	cbz	r3, 8009220 <_strtod_l+0x620>
 80091f0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80091f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	4659      	mov	r1, fp
 80091fc:	dd10      	ble.n	8009220 <_strtod_l+0x620>
 80091fe:	2b1f      	cmp	r3, #31
 8009200:	f340 8128 	ble.w	8009454 <_strtod_l+0x854>
 8009204:	2b34      	cmp	r3, #52	; 0x34
 8009206:	bfde      	ittt	le
 8009208:	3b20      	suble	r3, #32
 800920a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800920e:	fa02 f303 	lslle.w	r3, r2, r3
 8009212:	f04f 0a00 	mov.w	sl, #0
 8009216:	bfcc      	ite	gt
 8009218:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800921c:	ea03 0b01 	andle.w	fp, r3, r1
 8009220:	2200      	movs	r2, #0
 8009222:	2300      	movs	r3, #0
 8009224:	4650      	mov	r0, sl
 8009226:	4659      	mov	r1, fp
 8009228:	f7f7 fc6e 	bl	8000b08 <__aeabi_dcmpeq>
 800922c:	2800      	cmp	r0, #0
 800922e:	d1a4      	bne.n	800917a <_strtod_l+0x57a>
 8009230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009236:	462b      	mov	r3, r5
 8009238:	463a      	mov	r2, r7
 800923a:	4620      	mov	r0, r4
 800923c:	f002 f85a 	bl	800b2f4 <__s2b>
 8009240:	9009      	str	r0, [sp, #36]	; 0x24
 8009242:	2800      	cmp	r0, #0
 8009244:	f43f af24 	beq.w	8009090 <_strtod_l+0x490>
 8009248:	9b07      	ldr	r3, [sp, #28]
 800924a:	1b9e      	subs	r6, r3, r6
 800924c:	9b08      	ldr	r3, [sp, #32]
 800924e:	2b00      	cmp	r3, #0
 8009250:	bfb4      	ite	lt
 8009252:	4633      	movlt	r3, r6
 8009254:	2300      	movge	r3, #0
 8009256:	9310      	str	r3, [sp, #64]	; 0x40
 8009258:	9b08      	ldr	r3, [sp, #32]
 800925a:	2500      	movs	r5, #0
 800925c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009260:	9318      	str	r3, [sp, #96]	; 0x60
 8009262:	462e      	mov	r6, r5
 8009264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009266:	4620      	mov	r0, r4
 8009268:	6859      	ldr	r1, [r3, #4]
 800926a:	f001 ff97 	bl	800b19c <_Balloc>
 800926e:	9007      	str	r0, [sp, #28]
 8009270:	2800      	cmp	r0, #0
 8009272:	f43f af11 	beq.w	8009098 <_strtod_l+0x498>
 8009276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009278:	691a      	ldr	r2, [r3, #16]
 800927a:	3202      	adds	r2, #2
 800927c:	f103 010c 	add.w	r1, r3, #12
 8009280:	0092      	lsls	r2, r2, #2
 8009282:	300c      	adds	r0, #12
 8009284:	f001 ff70 	bl	800b168 <memcpy>
 8009288:	ec4b ab10 	vmov	d0, sl, fp
 800928c:	aa20      	add	r2, sp, #128	; 0x80
 800928e:	a91f      	add	r1, sp, #124	; 0x7c
 8009290:	4620      	mov	r0, r4
 8009292:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009296:	f002 fb69 	bl	800b96c <__d2b>
 800929a:	901e      	str	r0, [sp, #120]	; 0x78
 800929c:	2800      	cmp	r0, #0
 800929e:	f43f aefb 	beq.w	8009098 <_strtod_l+0x498>
 80092a2:	2101      	movs	r1, #1
 80092a4:	4620      	mov	r0, r4
 80092a6:	f002 f8bf 	bl	800b428 <__i2b>
 80092aa:	4606      	mov	r6, r0
 80092ac:	2800      	cmp	r0, #0
 80092ae:	f43f aef3 	beq.w	8009098 <_strtod_l+0x498>
 80092b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80092b4:	9904      	ldr	r1, [sp, #16]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	bfab      	itete	ge
 80092ba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80092bc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80092be:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80092c0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80092c4:	bfac      	ite	ge
 80092c6:	eb03 0902 	addge.w	r9, r3, r2
 80092ca:	1ad7      	sublt	r7, r2, r3
 80092cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80092ce:	eba3 0801 	sub.w	r8, r3, r1
 80092d2:	4490      	add	r8, r2
 80092d4:	4ba3      	ldr	r3, [pc, #652]	; (8009564 <_strtod_l+0x964>)
 80092d6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80092da:	4598      	cmp	r8, r3
 80092dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80092e0:	f280 80cc 	bge.w	800947c <_strtod_l+0x87c>
 80092e4:	eba3 0308 	sub.w	r3, r3, r8
 80092e8:	2b1f      	cmp	r3, #31
 80092ea:	eba2 0203 	sub.w	r2, r2, r3
 80092ee:	f04f 0101 	mov.w	r1, #1
 80092f2:	f300 80b6 	bgt.w	8009462 <_strtod_l+0x862>
 80092f6:	fa01 f303 	lsl.w	r3, r1, r3
 80092fa:	9311      	str	r3, [sp, #68]	; 0x44
 80092fc:	2300      	movs	r3, #0
 80092fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009300:	eb09 0802 	add.w	r8, r9, r2
 8009304:	9b04      	ldr	r3, [sp, #16]
 8009306:	45c1      	cmp	r9, r8
 8009308:	4417      	add	r7, r2
 800930a:	441f      	add	r7, r3
 800930c:	464b      	mov	r3, r9
 800930e:	bfa8      	it	ge
 8009310:	4643      	movge	r3, r8
 8009312:	42bb      	cmp	r3, r7
 8009314:	bfa8      	it	ge
 8009316:	463b      	movge	r3, r7
 8009318:	2b00      	cmp	r3, #0
 800931a:	bfc2      	ittt	gt
 800931c:	eba8 0803 	subgt.w	r8, r8, r3
 8009320:	1aff      	subgt	r7, r7, r3
 8009322:	eba9 0903 	subgt.w	r9, r9, r3
 8009326:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009328:	2b00      	cmp	r3, #0
 800932a:	dd17      	ble.n	800935c <_strtod_l+0x75c>
 800932c:	4631      	mov	r1, r6
 800932e:	461a      	mov	r2, r3
 8009330:	4620      	mov	r0, r4
 8009332:	f002 f935 	bl	800b5a0 <__pow5mult>
 8009336:	4606      	mov	r6, r0
 8009338:	2800      	cmp	r0, #0
 800933a:	f43f aead 	beq.w	8009098 <_strtod_l+0x498>
 800933e:	4601      	mov	r1, r0
 8009340:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009342:	4620      	mov	r0, r4
 8009344:	f002 f886 	bl	800b454 <__multiply>
 8009348:	900f      	str	r0, [sp, #60]	; 0x3c
 800934a:	2800      	cmp	r0, #0
 800934c:	f43f aea4 	beq.w	8009098 <_strtod_l+0x498>
 8009350:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009352:	4620      	mov	r0, r4
 8009354:	f001 ff62 	bl	800b21c <_Bfree>
 8009358:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800935a:	931e      	str	r3, [sp, #120]	; 0x78
 800935c:	f1b8 0f00 	cmp.w	r8, #0
 8009360:	f300 8091 	bgt.w	8009486 <_strtod_l+0x886>
 8009364:	9b08      	ldr	r3, [sp, #32]
 8009366:	2b00      	cmp	r3, #0
 8009368:	dd08      	ble.n	800937c <_strtod_l+0x77c>
 800936a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800936c:	9907      	ldr	r1, [sp, #28]
 800936e:	4620      	mov	r0, r4
 8009370:	f002 f916 	bl	800b5a0 <__pow5mult>
 8009374:	9007      	str	r0, [sp, #28]
 8009376:	2800      	cmp	r0, #0
 8009378:	f43f ae8e 	beq.w	8009098 <_strtod_l+0x498>
 800937c:	2f00      	cmp	r7, #0
 800937e:	dd08      	ble.n	8009392 <_strtod_l+0x792>
 8009380:	9907      	ldr	r1, [sp, #28]
 8009382:	463a      	mov	r2, r7
 8009384:	4620      	mov	r0, r4
 8009386:	f002 f965 	bl	800b654 <__lshift>
 800938a:	9007      	str	r0, [sp, #28]
 800938c:	2800      	cmp	r0, #0
 800938e:	f43f ae83 	beq.w	8009098 <_strtod_l+0x498>
 8009392:	f1b9 0f00 	cmp.w	r9, #0
 8009396:	dd08      	ble.n	80093aa <_strtod_l+0x7aa>
 8009398:	4631      	mov	r1, r6
 800939a:	464a      	mov	r2, r9
 800939c:	4620      	mov	r0, r4
 800939e:	f002 f959 	bl	800b654 <__lshift>
 80093a2:	4606      	mov	r6, r0
 80093a4:	2800      	cmp	r0, #0
 80093a6:	f43f ae77 	beq.w	8009098 <_strtod_l+0x498>
 80093aa:	9a07      	ldr	r2, [sp, #28]
 80093ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80093ae:	4620      	mov	r0, r4
 80093b0:	f002 f9d8 	bl	800b764 <__mdiff>
 80093b4:	4605      	mov	r5, r0
 80093b6:	2800      	cmp	r0, #0
 80093b8:	f43f ae6e 	beq.w	8009098 <_strtod_l+0x498>
 80093bc:	68c3      	ldr	r3, [r0, #12]
 80093be:	930f      	str	r3, [sp, #60]	; 0x3c
 80093c0:	2300      	movs	r3, #0
 80093c2:	60c3      	str	r3, [r0, #12]
 80093c4:	4631      	mov	r1, r6
 80093c6:	f002 f9b1 	bl	800b72c <__mcmp>
 80093ca:	2800      	cmp	r0, #0
 80093cc:	da65      	bge.n	800949a <_strtod_l+0x89a>
 80093ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093d0:	ea53 030a 	orrs.w	r3, r3, sl
 80093d4:	f040 8087 	bne.w	80094e6 <_strtod_l+0x8e6>
 80093d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f040 8082 	bne.w	80094e6 <_strtod_l+0x8e6>
 80093e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093e6:	0d1b      	lsrs	r3, r3, #20
 80093e8:	051b      	lsls	r3, r3, #20
 80093ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80093ee:	d97a      	bls.n	80094e6 <_strtod_l+0x8e6>
 80093f0:	696b      	ldr	r3, [r5, #20]
 80093f2:	b913      	cbnz	r3, 80093fa <_strtod_l+0x7fa>
 80093f4:	692b      	ldr	r3, [r5, #16]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	dd75      	ble.n	80094e6 <_strtod_l+0x8e6>
 80093fa:	4629      	mov	r1, r5
 80093fc:	2201      	movs	r2, #1
 80093fe:	4620      	mov	r0, r4
 8009400:	f002 f928 	bl	800b654 <__lshift>
 8009404:	4631      	mov	r1, r6
 8009406:	4605      	mov	r5, r0
 8009408:	f002 f990 	bl	800b72c <__mcmp>
 800940c:	2800      	cmp	r0, #0
 800940e:	dd6a      	ble.n	80094e6 <_strtod_l+0x8e6>
 8009410:	9904      	ldr	r1, [sp, #16]
 8009412:	4a55      	ldr	r2, [pc, #340]	; (8009568 <_strtod_l+0x968>)
 8009414:	465b      	mov	r3, fp
 8009416:	2900      	cmp	r1, #0
 8009418:	f000 8085 	beq.w	8009526 <_strtod_l+0x926>
 800941c:	ea02 010b 	and.w	r1, r2, fp
 8009420:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009424:	dc7f      	bgt.n	8009526 <_strtod_l+0x926>
 8009426:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800942a:	f77f aeaa 	ble.w	8009182 <_strtod_l+0x582>
 800942e:	4a4f      	ldr	r2, [pc, #316]	; (800956c <_strtod_l+0x96c>)
 8009430:	2300      	movs	r3, #0
 8009432:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009436:	4650      	mov	r0, sl
 8009438:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800943c:	4659      	mov	r1, fp
 800943e:	f7f7 f8fb 	bl	8000638 <__aeabi_dmul>
 8009442:	460b      	mov	r3, r1
 8009444:	4303      	orrs	r3, r0
 8009446:	bf08      	it	eq
 8009448:	2322      	moveq	r3, #34	; 0x22
 800944a:	4682      	mov	sl, r0
 800944c:	468b      	mov	fp, r1
 800944e:	bf08      	it	eq
 8009450:	6023      	streq	r3, [r4, #0]
 8009452:	e62b      	b.n	80090ac <_strtod_l+0x4ac>
 8009454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009458:	fa02 f303 	lsl.w	r3, r2, r3
 800945c:	ea03 0a0a 	and.w	sl, r3, sl
 8009460:	e6de      	b.n	8009220 <_strtod_l+0x620>
 8009462:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009466:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800946a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800946e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009472:	fa01 f308 	lsl.w	r3, r1, r8
 8009476:	930c      	str	r3, [sp, #48]	; 0x30
 8009478:	9111      	str	r1, [sp, #68]	; 0x44
 800947a:	e741      	b.n	8009300 <_strtod_l+0x700>
 800947c:	2300      	movs	r3, #0
 800947e:	930c      	str	r3, [sp, #48]	; 0x30
 8009480:	2301      	movs	r3, #1
 8009482:	9311      	str	r3, [sp, #68]	; 0x44
 8009484:	e73c      	b.n	8009300 <_strtod_l+0x700>
 8009486:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009488:	4642      	mov	r2, r8
 800948a:	4620      	mov	r0, r4
 800948c:	f002 f8e2 	bl	800b654 <__lshift>
 8009490:	901e      	str	r0, [sp, #120]	; 0x78
 8009492:	2800      	cmp	r0, #0
 8009494:	f47f af66 	bne.w	8009364 <_strtod_l+0x764>
 8009498:	e5fe      	b.n	8009098 <_strtod_l+0x498>
 800949a:	465f      	mov	r7, fp
 800949c:	d16e      	bne.n	800957c <_strtod_l+0x97c>
 800949e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094a4:	b342      	cbz	r2, 80094f8 <_strtod_l+0x8f8>
 80094a6:	4a32      	ldr	r2, [pc, #200]	; (8009570 <_strtod_l+0x970>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d128      	bne.n	80094fe <_strtod_l+0x8fe>
 80094ac:	9b04      	ldr	r3, [sp, #16]
 80094ae:	4650      	mov	r0, sl
 80094b0:	b1eb      	cbz	r3, 80094ee <_strtod_l+0x8ee>
 80094b2:	4a2d      	ldr	r2, [pc, #180]	; (8009568 <_strtod_l+0x968>)
 80094b4:	403a      	ands	r2, r7
 80094b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80094ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80094be:	d819      	bhi.n	80094f4 <_strtod_l+0x8f4>
 80094c0:	0d12      	lsrs	r2, r2, #20
 80094c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80094c6:	fa01 f303 	lsl.w	r3, r1, r3
 80094ca:	4298      	cmp	r0, r3
 80094cc:	d117      	bne.n	80094fe <_strtod_l+0x8fe>
 80094ce:	4b29      	ldr	r3, [pc, #164]	; (8009574 <_strtod_l+0x974>)
 80094d0:	429f      	cmp	r7, r3
 80094d2:	d102      	bne.n	80094da <_strtod_l+0x8da>
 80094d4:	3001      	adds	r0, #1
 80094d6:	f43f addf 	beq.w	8009098 <_strtod_l+0x498>
 80094da:	4b23      	ldr	r3, [pc, #140]	; (8009568 <_strtod_l+0x968>)
 80094dc:	403b      	ands	r3, r7
 80094de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80094e2:	f04f 0a00 	mov.w	sl, #0
 80094e6:	9b04      	ldr	r3, [sp, #16]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1a0      	bne.n	800942e <_strtod_l+0x82e>
 80094ec:	e5de      	b.n	80090ac <_strtod_l+0x4ac>
 80094ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094f2:	e7ea      	b.n	80094ca <_strtod_l+0x8ca>
 80094f4:	460b      	mov	r3, r1
 80094f6:	e7e8      	b.n	80094ca <_strtod_l+0x8ca>
 80094f8:	ea53 030a 	orrs.w	r3, r3, sl
 80094fc:	d088      	beq.n	8009410 <_strtod_l+0x810>
 80094fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009500:	b1db      	cbz	r3, 800953a <_strtod_l+0x93a>
 8009502:	423b      	tst	r3, r7
 8009504:	d0ef      	beq.n	80094e6 <_strtod_l+0x8e6>
 8009506:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009508:	9a04      	ldr	r2, [sp, #16]
 800950a:	4650      	mov	r0, sl
 800950c:	4659      	mov	r1, fp
 800950e:	b1c3      	cbz	r3, 8009542 <_strtod_l+0x942>
 8009510:	f7ff fb58 	bl	8008bc4 <sulp>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800951c:	f7f6 fed6 	bl	80002cc <__adddf3>
 8009520:	4682      	mov	sl, r0
 8009522:	468b      	mov	fp, r1
 8009524:	e7df      	b.n	80094e6 <_strtod_l+0x8e6>
 8009526:	4013      	ands	r3, r2
 8009528:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800952c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009530:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009534:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009538:	e7d5      	b.n	80094e6 <_strtod_l+0x8e6>
 800953a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800953c:	ea13 0f0a 	tst.w	r3, sl
 8009540:	e7e0      	b.n	8009504 <_strtod_l+0x904>
 8009542:	f7ff fb3f 	bl	8008bc4 <sulp>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800954e:	f7f6 febb 	bl	80002c8 <__aeabi_dsub>
 8009552:	2200      	movs	r2, #0
 8009554:	2300      	movs	r3, #0
 8009556:	4682      	mov	sl, r0
 8009558:	468b      	mov	fp, r1
 800955a:	f7f7 fad5 	bl	8000b08 <__aeabi_dcmpeq>
 800955e:	2800      	cmp	r0, #0
 8009560:	d0c1      	beq.n	80094e6 <_strtod_l+0x8e6>
 8009562:	e60e      	b.n	8009182 <_strtod_l+0x582>
 8009564:	fffffc02 	.word	0xfffffc02
 8009568:	7ff00000 	.word	0x7ff00000
 800956c:	39500000 	.word	0x39500000
 8009570:	000fffff 	.word	0x000fffff
 8009574:	7fefffff 	.word	0x7fefffff
 8009578:	0800d710 	.word	0x0800d710
 800957c:	4631      	mov	r1, r6
 800957e:	4628      	mov	r0, r5
 8009580:	f002 fa50 	bl	800ba24 <__ratio>
 8009584:	ec59 8b10 	vmov	r8, r9, d0
 8009588:	ee10 0a10 	vmov	r0, s0
 800958c:	2200      	movs	r2, #0
 800958e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009592:	4649      	mov	r1, r9
 8009594:	f7f7 facc 	bl	8000b30 <__aeabi_dcmple>
 8009598:	2800      	cmp	r0, #0
 800959a:	d07c      	beq.n	8009696 <_strtod_l+0xa96>
 800959c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d04c      	beq.n	800963c <_strtod_l+0xa3c>
 80095a2:	4b95      	ldr	r3, [pc, #596]	; (80097f8 <_strtod_l+0xbf8>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80095aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80097f8 <_strtod_l+0xbf8>
 80095ae:	f04f 0800 	mov.w	r8, #0
 80095b2:	4b92      	ldr	r3, [pc, #584]	; (80097fc <_strtod_l+0xbfc>)
 80095b4:	403b      	ands	r3, r7
 80095b6:	9311      	str	r3, [sp, #68]	; 0x44
 80095b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80095ba:	4b91      	ldr	r3, [pc, #580]	; (8009800 <_strtod_l+0xc00>)
 80095bc:	429a      	cmp	r2, r3
 80095be:	f040 80b2 	bne.w	8009726 <_strtod_l+0xb26>
 80095c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80095c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80095ce:	ec4b ab10 	vmov	d0, sl, fp
 80095d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80095d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80095da:	f002 f94b 	bl	800b874 <__ulp>
 80095de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095e2:	ec53 2b10 	vmov	r2, r3, d0
 80095e6:	f7f7 f827 	bl	8000638 <__aeabi_dmul>
 80095ea:	4652      	mov	r2, sl
 80095ec:	465b      	mov	r3, fp
 80095ee:	f7f6 fe6d 	bl	80002cc <__adddf3>
 80095f2:	460b      	mov	r3, r1
 80095f4:	4981      	ldr	r1, [pc, #516]	; (80097fc <_strtod_l+0xbfc>)
 80095f6:	4a83      	ldr	r2, [pc, #524]	; (8009804 <_strtod_l+0xc04>)
 80095f8:	4019      	ands	r1, r3
 80095fa:	4291      	cmp	r1, r2
 80095fc:	4682      	mov	sl, r0
 80095fe:	d95e      	bls.n	80096be <_strtod_l+0xabe>
 8009600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009602:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009606:	4293      	cmp	r3, r2
 8009608:	d103      	bne.n	8009612 <_strtod_l+0xa12>
 800960a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800960c:	3301      	adds	r3, #1
 800960e:	f43f ad43 	beq.w	8009098 <_strtod_l+0x498>
 8009612:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009810 <_strtod_l+0xc10>
 8009616:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800961a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800961c:	4620      	mov	r0, r4
 800961e:	f001 fdfd 	bl	800b21c <_Bfree>
 8009622:	9907      	ldr	r1, [sp, #28]
 8009624:	4620      	mov	r0, r4
 8009626:	f001 fdf9 	bl	800b21c <_Bfree>
 800962a:	4631      	mov	r1, r6
 800962c:	4620      	mov	r0, r4
 800962e:	f001 fdf5 	bl	800b21c <_Bfree>
 8009632:	4629      	mov	r1, r5
 8009634:	4620      	mov	r0, r4
 8009636:	f001 fdf1 	bl	800b21c <_Bfree>
 800963a:	e613      	b.n	8009264 <_strtod_l+0x664>
 800963c:	f1ba 0f00 	cmp.w	sl, #0
 8009640:	d11b      	bne.n	800967a <_strtod_l+0xa7a>
 8009642:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009646:	b9f3      	cbnz	r3, 8009686 <_strtod_l+0xa86>
 8009648:	4b6b      	ldr	r3, [pc, #428]	; (80097f8 <_strtod_l+0xbf8>)
 800964a:	2200      	movs	r2, #0
 800964c:	4640      	mov	r0, r8
 800964e:	4649      	mov	r1, r9
 8009650:	f7f7 fa64 	bl	8000b1c <__aeabi_dcmplt>
 8009654:	b9d0      	cbnz	r0, 800968c <_strtod_l+0xa8c>
 8009656:	4640      	mov	r0, r8
 8009658:	4649      	mov	r1, r9
 800965a:	4b6b      	ldr	r3, [pc, #428]	; (8009808 <_strtod_l+0xc08>)
 800965c:	2200      	movs	r2, #0
 800965e:	f7f6 ffeb 	bl	8000638 <__aeabi_dmul>
 8009662:	4680      	mov	r8, r0
 8009664:	4689      	mov	r9, r1
 8009666:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800966a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800966e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009670:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009674:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009678:	e79b      	b.n	80095b2 <_strtod_l+0x9b2>
 800967a:	f1ba 0f01 	cmp.w	sl, #1
 800967e:	d102      	bne.n	8009686 <_strtod_l+0xa86>
 8009680:	2f00      	cmp	r7, #0
 8009682:	f43f ad7e 	beq.w	8009182 <_strtod_l+0x582>
 8009686:	4b61      	ldr	r3, [pc, #388]	; (800980c <_strtod_l+0xc0c>)
 8009688:	2200      	movs	r2, #0
 800968a:	e78c      	b.n	80095a6 <_strtod_l+0x9a6>
 800968c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009808 <_strtod_l+0xc08>
 8009690:	f04f 0800 	mov.w	r8, #0
 8009694:	e7e7      	b.n	8009666 <_strtod_l+0xa66>
 8009696:	4b5c      	ldr	r3, [pc, #368]	; (8009808 <_strtod_l+0xc08>)
 8009698:	4640      	mov	r0, r8
 800969a:	4649      	mov	r1, r9
 800969c:	2200      	movs	r2, #0
 800969e:	f7f6 ffcb 	bl	8000638 <__aeabi_dmul>
 80096a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096a4:	4680      	mov	r8, r0
 80096a6:	4689      	mov	r9, r1
 80096a8:	b933      	cbnz	r3, 80096b8 <_strtod_l+0xab8>
 80096aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096ae:	9012      	str	r0, [sp, #72]	; 0x48
 80096b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80096b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80096b6:	e7dd      	b.n	8009674 <_strtod_l+0xa74>
 80096b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80096bc:	e7f9      	b.n	80096b2 <_strtod_l+0xab2>
 80096be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80096c2:	9b04      	ldr	r3, [sp, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1a8      	bne.n	800961a <_strtod_l+0xa1a>
 80096c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80096ce:	0d1b      	lsrs	r3, r3, #20
 80096d0:	051b      	lsls	r3, r3, #20
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d1a1      	bne.n	800961a <_strtod_l+0xa1a>
 80096d6:	4640      	mov	r0, r8
 80096d8:	4649      	mov	r1, r9
 80096da:	f7f7 fb0d 	bl	8000cf8 <__aeabi_d2lz>
 80096de:	f7f6 ff7d 	bl	80005dc <__aeabi_l2d>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	4640      	mov	r0, r8
 80096e8:	4649      	mov	r1, r9
 80096ea:	f7f6 fded 	bl	80002c8 <__aeabi_dsub>
 80096ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096f4:	ea43 030a 	orr.w	r3, r3, sl
 80096f8:	4313      	orrs	r3, r2
 80096fa:	4680      	mov	r8, r0
 80096fc:	4689      	mov	r9, r1
 80096fe:	d053      	beq.n	80097a8 <_strtod_l+0xba8>
 8009700:	a335      	add	r3, pc, #212	; (adr r3, 80097d8 <_strtod_l+0xbd8>)
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	f7f7 fa09 	bl	8000b1c <__aeabi_dcmplt>
 800970a:	2800      	cmp	r0, #0
 800970c:	f47f acce 	bne.w	80090ac <_strtod_l+0x4ac>
 8009710:	a333      	add	r3, pc, #204	; (adr r3, 80097e0 <_strtod_l+0xbe0>)
 8009712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009716:	4640      	mov	r0, r8
 8009718:	4649      	mov	r1, r9
 800971a:	f7f7 fa1d 	bl	8000b58 <__aeabi_dcmpgt>
 800971e:	2800      	cmp	r0, #0
 8009720:	f43f af7b 	beq.w	800961a <_strtod_l+0xa1a>
 8009724:	e4c2      	b.n	80090ac <_strtod_l+0x4ac>
 8009726:	9b04      	ldr	r3, [sp, #16]
 8009728:	b333      	cbz	r3, 8009778 <_strtod_l+0xb78>
 800972a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800972c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009730:	d822      	bhi.n	8009778 <_strtod_l+0xb78>
 8009732:	a32d      	add	r3, pc, #180	; (adr r3, 80097e8 <_strtod_l+0xbe8>)
 8009734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009738:	4640      	mov	r0, r8
 800973a:	4649      	mov	r1, r9
 800973c:	f7f7 f9f8 	bl	8000b30 <__aeabi_dcmple>
 8009740:	b1a0      	cbz	r0, 800976c <_strtod_l+0xb6c>
 8009742:	4649      	mov	r1, r9
 8009744:	4640      	mov	r0, r8
 8009746:	f7f7 fa4f 	bl	8000be8 <__aeabi_d2uiz>
 800974a:	2801      	cmp	r0, #1
 800974c:	bf38      	it	cc
 800974e:	2001      	movcc	r0, #1
 8009750:	f7f6 fef8 	bl	8000544 <__aeabi_ui2d>
 8009754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009756:	4680      	mov	r8, r0
 8009758:	4689      	mov	r9, r1
 800975a:	bb13      	cbnz	r3, 80097a2 <_strtod_l+0xba2>
 800975c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009760:	9014      	str	r0, [sp, #80]	; 0x50
 8009762:	9315      	str	r3, [sp, #84]	; 0x54
 8009764:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009768:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800976c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800976e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009770:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009774:	1a9b      	subs	r3, r3, r2
 8009776:	930d      	str	r3, [sp, #52]	; 0x34
 8009778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800977c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009780:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009784:	f002 f876 	bl	800b874 <__ulp>
 8009788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800978c:	ec53 2b10 	vmov	r2, r3, d0
 8009790:	f7f6 ff52 	bl	8000638 <__aeabi_dmul>
 8009794:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009798:	f7f6 fd98 	bl	80002cc <__adddf3>
 800979c:	4682      	mov	sl, r0
 800979e:	468b      	mov	fp, r1
 80097a0:	e78f      	b.n	80096c2 <_strtod_l+0xac2>
 80097a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80097a6:	e7dd      	b.n	8009764 <_strtod_l+0xb64>
 80097a8:	a311      	add	r3, pc, #68	; (adr r3, 80097f0 <_strtod_l+0xbf0>)
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	f7f7 f9b5 	bl	8000b1c <__aeabi_dcmplt>
 80097b2:	e7b4      	b.n	800971e <_strtod_l+0xb1e>
 80097b4:	2300      	movs	r3, #0
 80097b6:	930e      	str	r3, [sp, #56]	; 0x38
 80097b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80097ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	f7ff ba65 	b.w	8008c8c <_strtod_l+0x8c>
 80097c2:	2b65      	cmp	r3, #101	; 0x65
 80097c4:	f43f ab5d 	beq.w	8008e82 <_strtod_l+0x282>
 80097c8:	2b45      	cmp	r3, #69	; 0x45
 80097ca:	f43f ab5a 	beq.w	8008e82 <_strtod_l+0x282>
 80097ce:	2201      	movs	r2, #1
 80097d0:	f7ff bb92 	b.w	8008ef8 <_strtod_l+0x2f8>
 80097d4:	f3af 8000 	nop.w
 80097d8:	94a03595 	.word	0x94a03595
 80097dc:	3fdfffff 	.word	0x3fdfffff
 80097e0:	35afe535 	.word	0x35afe535
 80097e4:	3fe00000 	.word	0x3fe00000
 80097e8:	ffc00000 	.word	0xffc00000
 80097ec:	41dfffff 	.word	0x41dfffff
 80097f0:	94a03595 	.word	0x94a03595
 80097f4:	3fcfffff 	.word	0x3fcfffff
 80097f8:	3ff00000 	.word	0x3ff00000
 80097fc:	7ff00000 	.word	0x7ff00000
 8009800:	7fe00000 	.word	0x7fe00000
 8009804:	7c9fffff 	.word	0x7c9fffff
 8009808:	3fe00000 	.word	0x3fe00000
 800980c:	bff00000 	.word	0xbff00000
 8009810:	7fefffff 	.word	0x7fefffff

08009814 <_strtod_r>:
 8009814:	4b01      	ldr	r3, [pc, #4]	; (800981c <_strtod_r+0x8>)
 8009816:	f7ff b9f3 	b.w	8008c00 <_strtod_l>
 800981a:	bf00      	nop
 800981c:	20000074 	.word	0x20000074

08009820 <_strtol_l.isra.0>:
 8009820:	2b01      	cmp	r3, #1
 8009822:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009826:	d001      	beq.n	800982c <_strtol_l.isra.0+0xc>
 8009828:	2b24      	cmp	r3, #36	; 0x24
 800982a:	d906      	bls.n	800983a <_strtol_l.isra.0+0x1a>
 800982c:	f7fe fa26 	bl	8007c7c <__errno>
 8009830:	2316      	movs	r3, #22
 8009832:	6003      	str	r3, [r0, #0]
 8009834:	2000      	movs	r0, #0
 8009836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800983a:	4f3a      	ldr	r7, [pc, #232]	; (8009924 <_strtol_l.isra.0+0x104>)
 800983c:	468e      	mov	lr, r1
 800983e:	4676      	mov	r6, lr
 8009840:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009844:	5de5      	ldrb	r5, [r4, r7]
 8009846:	f015 0508 	ands.w	r5, r5, #8
 800984a:	d1f8      	bne.n	800983e <_strtol_l.isra.0+0x1e>
 800984c:	2c2d      	cmp	r4, #45	; 0x2d
 800984e:	d134      	bne.n	80098ba <_strtol_l.isra.0+0x9a>
 8009850:	f89e 4000 	ldrb.w	r4, [lr]
 8009854:	f04f 0801 	mov.w	r8, #1
 8009858:	f106 0e02 	add.w	lr, r6, #2
 800985c:	2b00      	cmp	r3, #0
 800985e:	d05c      	beq.n	800991a <_strtol_l.isra.0+0xfa>
 8009860:	2b10      	cmp	r3, #16
 8009862:	d10c      	bne.n	800987e <_strtol_l.isra.0+0x5e>
 8009864:	2c30      	cmp	r4, #48	; 0x30
 8009866:	d10a      	bne.n	800987e <_strtol_l.isra.0+0x5e>
 8009868:	f89e 4000 	ldrb.w	r4, [lr]
 800986c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009870:	2c58      	cmp	r4, #88	; 0x58
 8009872:	d14d      	bne.n	8009910 <_strtol_l.isra.0+0xf0>
 8009874:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009878:	2310      	movs	r3, #16
 800987a:	f10e 0e02 	add.w	lr, lr, #2
 800987e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009882:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8009886:	2600      	movs	r6, #0
 8009888:	fbbc f9f3 	udiv	r9, ip, r3
 800988c:	4635      	mov	r5, r6
 800988e:	fb03 ca19 	mls	sl, r3, r9, ip
 8009892:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009896:	2f09      	cmp	r7, #9
 8009898:	d818      	bhi.n	80098cc <_strtol_l.isra.0+0xac>
 800989a:	463c      	mov	r4, r7
 800989c:	42a3      	cmp	r3, r4
 800989e:	dd24      	ble.n	80098ea <_strtol_l.isra.0+0xca>
 80098a0:	2e00      	cmp	r6, #0
 80098a2:	db1f      	blt.n	80098e4 <_strtol_l.isra.0+0xc4>
 80098a4:	45a9      	cmp	r9, r5
 80098a6:	d31d      	bcc.n	80098e4 <_strtol_l.isra.0+0xc4>
 80098a8:	d101      	bne.n	80098ae <_strtol_l.isra.0+0x8e>
 80098aa:	45a2      	cmp	sl, r4
 80098ac:	db1a      	blt.n	80098e4 <_strtol_l.isra.0+0xc4>
 80098ae:	fb05 4503 	mla	r5, r5, r3, r4
 80098b2:	2601      	movs	r6, #1
 80098b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80098b8:	e7eb      	b.n	8009892 <_strtol_l.isra.0+0x72>
 80098ba:	2c2b      	cmp	r4, #43	; 0x2b
 80098bc:	bf08      	it	eq
 80098be:	f89e 4000 	ldrbeq.w	r4, [lr]
 80098c2:	46a8      	mov	r8, r5
 80098c4:	bf08      	it	eq
 80098c6:	f106 0e02 	addeq.w	lr, r6, #2
 80098ca:	e7c7      	b.n	800985c <_strtol_l.isra.0+0x3c>
 80098cc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80098d0:	2f19      	cmp	r7, #25
 80098d2:	d801      	bhi.n	80098d8 <_strtol_l.isra.0+0xb8>
 80098d4:	3c37      	subs	r4, #55	; 0x37
 80098d6:	e7e1      	b.n	800989c <_strtol_l.isra.0+0x7c>
 80098d8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80098dc:	2f19      	cmp	r7, #25
 80098de:	d804      	bhi.n	80098ea <_strtol_l.isra.0+0xca>
 80098e0:	3c57      	subs	r4, #87	; 0x57
 80098e2:	e7db      	b.n	800989c <_strtol_l.isra.0+0x7c>
 80098e4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80098e8:	e7e4      	b.n	80098b4 <_strtol_l.isra.0+0x94>
 80098ea:	2e00      	cmp	r6, #0
 80098ec:	da05      	bge.n	80098fa <_strtol_l.isra.0+0xda>
 80098ee:	2322      	movs	r3, #34	; 0x22
 80098f0:	6003      	str	r3, [r0, #0]
 80098f2:	4665      	mov	r5, ip
 80098f4:	b942      	cbnz	r2, 8009908 <_strtol_l.isra.0+0xe8>
 80098f6:	4628      	mov	r0, r5
 80098f8:	e79d      	b.n	8009836 <_strtol_l.isra.0+0x16>
 80098fa:	f1b8 0f00 	cmp.w	r8, #0
 80098fe:	d000      	beq.n	8009902 <_strtol_l.isra.0+0xe2>
 8009900:	426d      	negs	r5, r5
 8009902:	2a00      	cmp	r2, #0
 8009904:	d0f7      	beq.n	80098f6 <_strtol_l.isra.0+0xd6>
 8009906:	b10e      	cbz	r6, 800990c <_strtol_l.isra.0+0xec>
 8009908:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800990c:	6011      	str	r1, [r2, #0]
 800990e:	e7f2      	b.n	80098f6 <_strtol_l.isra.0+0xd6>
 8009910:	2430      	movs	r4, #48	; 0x30
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1b3      	bne.n	800987e <_strtol_l.isra.0+0x5e>
 8009916:	2308      	movs	r3, #8
 8009918:	e7b1      	b.n	800987e <_strtol_l.isra.0+0x5e>
 800991a:	2c30      	cmp	r4, #48	; 0x30
 800991c:	d0a4      	beq.n	8009868 <_strtol_l.isra.0+0x48>
 800991e:	230a      	movs	r3, #10
 8009920:	e7ad      	b.n	800987e <_strtol_l.isra.0+0x5e>
 8009922:	bf00      	nop
 8009924:	0800d739 	.word	0x0800d739

08009928 <_strtol_r>:
 8009928:	f7ff bf7a 	b.w	8009820 <_strtol_l.isra.0>

0800992c <quorem>:
 800992c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009930:	6903      	ldr	r3, [r0, #16]
 8009932:	690c      	ldr	r4, [r1, #16]
 8009934:	42a3      	cmp	r3, r4
 8009936:	4607      	mov	r7, r0
 8009938:	f2c0 8081 	blt.w	8009a3e <quorem+0x112>
 800993c:	3c01      	subs	r4, #1
 800993e:	f101 0814 	add.w	r8, r1, #20
 8009942:	f100 0514 	add.w	r5, r0, #20
 8009946:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800994a:	9301      	str	r3, [sp, #4]
 800994c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009950:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009954:	3301      	adds	r3, #1
 8009956:	429a      	cmp	r2, r3
 8009958:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800995c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009960:	fbb2 f6f3 	udiv	r6, r2, r3
 8009964:	d331      	bcc.n	80099ca <quorem+0x9e>
 8009966:	f04f 0e00 	mov.w	lr, #0
 800996a:	4640      	mov	r0, r8
 800996c:	46ac      	mov	ip, r5
 800996e:	46f2      	mov	sl, lr
 8009970:	f850 2b04 	ldr.w	r2, [r0], #4
 8009974:	b293      	uxth	r3, r2
 8009976:	fb06 e303 	mla	r3, r6, r3, lr
 800997a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800997e:	b29b      	uxth	r3, r3
 8009980:	ebaa 0303 	sub.w	r3, sl, r3
 8009984:	0c12      	lsrs	r2, r2, #16
 8009986:	f8dc a000 	ldr.w	sl, [ip]
 800998a:	fb06 e202 	mla	r2, r6, r2, lr
 800998e:	fa13 f38a 	uxtah	r3, r3, sl
 8009992:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009996:	fa1f fa82 	uxth.w	sl, r2
 800999a:	f8dc 2000 	ldr.w	r2, [ip]
 800999e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80099a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099ac:	4581      	cmp	r9, r0
 80099ae:	f84c 3b04 	str.w	r3, [ip], #4
 80099b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80099b6:	d2db      	bcs.n	8009970 <quorem+0x44>
 80099b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80099bc:	b92b      	cbnz	r3, 80099ca <quorem+0x9e>
 80099be:	9b01      	ldr	r3, [sp, #4]
 80099c0:	3b04      	subs	r3, #4
 80099c2:	429d      	cmp	r5, r3
 80099c4:	461a      	mov	r2, r3
 80099c6:	d32e      	bcc.n	8009a26 <quorem+0xfa>
 80099c8:	613c      	str	r4, [r7, #16]
 80099ca:	4638      	mov	r0, r7
 80099cc:	f001 feae 	bl	800b72c <__mcmp>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	db24      	blt.n	8009a1e <quorem+0xf2>
 80099d4:	3601      	adds	r6, #1
 80099d6:	4628      	mov	r0, r5
 80099d8:	f04f 0c00 	mov.w	ip, #0
 80099dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80099e0:	f8d0 e000 	ldr.w	lr, [r0]
 80099e4:	b293      	uxth	r3, r2
 80099e6:	ebac 0303 	sub.w	r3, ip, r3
 80099ea:	0c12      	lsrs	r2, r2, #16
 80099ec:	fa13 f38e 	uxtah	r3, r3, lr
 80099f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80099f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099fe:	45c1      	cmp	r9, r8
 8009a00:	f840 3b04 	str.w	r3, [r0], #4
 8009a04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009a08:	d2e8      	bcs.n	80099dc <quorem+0xb0>
 8009a0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a12:	b922      	cbnz	r2, 8009a1e <quorem+0xf2>
 8009a14:	3b04      	subs	r3, #4
 8009a16:	429d      	cmp	r5, r3
 8009a18:	461a      	mov	r2, r3
 8009a1a:	d30a      	bcc.n	8009a32 <quorem+0x106>
 8009a1c:	613c      	str	r4, [r7, #16]
 8009a1e:	4630      	mov	r0, r6
 8009a20:	b003      	add	sp, #12
 8009a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a26:	6812      	ldr	r2, [r2, #0]
 8009a28:	3b04      	subs	r3, #4
 8009a2a:	2a00      	cmp	r2, #0
 8009a2c:	d1cc      	bne.n	80099c8 <quorem+0x9c>
 8009a2e:	3c01      	subs	r4, #1
 8009a30:	e7c7      	b.n	80099c2 <quorem+0x96>
 8009a32:	6812      	ldr	r2, [r2, #0]
 8009a34:	3b04      	subs	r3, #4
 8009a36:	2a00      	cmp	r2, #0
 8009a38:	d1f0      	bne.n	8009a1c <quorem+0xf0>
 8009a3a:	3c01      	subs	r4, #1
 8009a3c:	e7eb      	b.n	8009a16 <quorem+0xea>
 8009a3e:	2000      	movs	r0, #0
 8009a40:	e7ee      	b.n	8009a20 <quorem+0xf4>
 8009a42:	0000      	movs	r0, r0
 8009a44:	0000      	movs	r0, r0
	...

08009a48 <_dtoa_r>:
 8009a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	ed2d 8b02 	vpush	{d8}
 8009a50:	ec57 6b10 	vmov	r6, r7, d0
 8009a54:	b095      	sub	sp, #84	; 0x54
 8009a56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a5c:	9105      	str	r1, [sp, #20]
 8009a5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009a62:	4604      	mov	r4, r0
 8009a64:	9209      	str	r2, [sp, #36]	; 0x24
 8009a66:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a68:	b975      	cbnz	r5, 8009a88 <_dtoa_r+0x40>
 8009a6a:	2010      	movs	r0, #16
 8009a6c:	f7fe f930 	bl	8007cd0 <malloc>
 8009a70:	4602      	mov	r2, r0
 8009a72:	6260      	str	r0, [r4, #36]	; 0x24
 8009a74:	b920      	cbnz	r0, 8009a80 <_dtoa_r+0x38>
 8009a76:	4bb2      	ldr	r3, [pc, #712]	; (8009d40 <_dtoa_r+0x2f8>)
 8009a78:	21ea      	movs	r1, #234	; 0xea
 8009a7a:	48b2      	ldr	r0, [pc, #712]	; (8009d44 <_dtoa_r+0x2fc>)
 8009a7c:	f002 fa20 	bl	800bec0 <__assert_func>
 8009a80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a84:	6005      	str	r5, [r0, #0]
 8009a86:	60c5      	str	r5, [r0, #12]
 8009a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a8a:	6819      	ldr	r1, [r3, #0]
 8009a8c:	b151      	cbz	r1, 8009aa4 <_dtoa_r+0x5c>
 8009a8e:	685a      	ldr	r2, [r3, #4]
 8009a90:	604a      	str	r2, [r1, #4]
 8009a92:	2301      	movs	r3, #1
 8009a94:	4093      	lsls	r3, r2
 8009a96:	608b      	str	r3, [r1, #8]
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f001 fbbf 	bl	800b21c <_Bfree>
 8009a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	1e3b      	subs	r3, r7, #0
 8009aa6:	bfb9      	ittee	lt
 8009aa8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009aac:	9303      	strlt	r3, [sp, #12]
 8009aae:	2300      	movge	r3, #0
 8009ab0:	f8c8 3000 	strge.w	r3, [r8]
 8009ab4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009ab8:	4ba3      	ldr	r3, [pc, #652]	; (8009d48 <_dtoa_r+0x300>)
 8009aba:	bfbc      	itt	lt
 8009abc:	2201      	movlt	r2, #1
 8009abe:	f8c8 2000 	strlt.w	r2, [r8]
 8009ac2:	ea33 0309 	bics.w	r3, r3, r9
 8009ac6:	d11b      	bne.n	8009b00 <_dtoa_r+0xb8>
 8009ac8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009aca:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ace:	6013      	str	r3, [r2, #0]
 8009ad0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ad4:	4333      	orrs	r3, r6
 8009ad6:	f000 857a 	beq.w	800a5ce <_dtoa_r+0xb86>
 8009ada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009adc:	b963      	cbnz	r3, 8009af8 <_dtoa_r+0xb0>
 8009ade:	4b9b      	ldr	r3, [pc, #620]	; (8009d4c <_dtoa_r+0x304>)
 8009ae0:	e024      	b.n	8009b2c <_dtoa_r+0xe4>
 8009ae2:	4b9b      	ldr	r3, [pc, #620]	; (8009d50 <_dtoa_r+0x308>)
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	3308      	adds	r3, #8
 8009ae8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009aea:	6013      	str	r3, [r2, #0]
 8009aec:	9800      	ldr	r0, [sp, #0]
 8009aee:	b015      	add	sp, #84	; 0x54
 8009af0:	ecbd 8b02 	vpop	{d8}
 8009af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af8:	4b94      	ldr	r3, [pc, #592]	; (8009d4c <_dtoa_r+0x304>)
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	3303      	adds	r3, #3
 8009afe:	e7f3      	b.n	8009ae8 <_dtoa_r+0xa0>
 8009b00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b04:	2200      	movs	r2, #0
 8009b06:	ec51 0b17 	vmov	r0, r1, d7
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009b10:	f7f6 fffa 	bl	8000b08 <__aeabi_dcmpeq>
 8009b14:	4680      	mov	r8, r0
 8009b16:	b158      	cbz	r0, 8009b30 <_dtoa_r+0xe8>
 8009b18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	6013      	str	r3, [r2, #0]
 8009b1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 8551 	beq.w	800a5c8 <_dtoa_r+0xb80>
 8009b26:	488b      	ldr	r0, [pc, #556]	; (8009d54 <_dtoa_r+0x30c>)
 8009b28:	6018      	str	r0, [r3, #0]
 8009b2a:	1e43      	subs	r3, r0, #1
 8009b2c:	9300      	str	r3, [sp, #0]
 8009b2e:	e7dd      	b.n	8009aec <_dtoa_r+0xa4>
 8009b30:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009b34:	aa12      	add	r2, sp, #72	; 0x48
 8009b36:	a913      	add	r1, sp, #76	; 0x4c
 8009b38:	4620      	mov	r0, r4
 8009b3a:	f001 ff17 	bl	800b96c <__d2b>
 8009b3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009b42:	4683      	mov	fp, r0
 8009b44:	2d00      	cmp	r5, #0
 8009b46:	d07c      	beq.n	8009c42 <_dtoa_r+0x1fa>
 8009b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009b4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b52:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009b56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009b5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009b5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b62:	4b7d      	ldr	r3, [pc, #500]	; (8009d58 <_dtoa_r+0x310>)
 8009b64:	2200      	movs	r2, #0
 8009b66:	4630      	mov	r0, r6
 8009b68:	4639      	mov	r1, r7
 8009b6a:	f7f6 fbad 	bl	80002c8 <__aeabi_dsub>
 8009b6e:	a36e      	add	r3, pc, #440	; (adr r3, 8009d28 <_dtoa_r+0x2e0>)
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	f7f6 fd60 	bl	8000638 <__aeabi_dmul>
 8009b78:	a36d      	add	r3, pc, #436	; (adr r3, 8009d30 <_dtoa_r+0x2e8>)
 8009b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7e:	f7f6 fba5 	bl	80002cc <__adddf3>
 8009b82:	4606      	mov	r6, r0
 8009b84:	4628      	mov	r0, r5
 8009b86:	460f      	mov	r7, r1
 8009b88:	f7f6 fcec 	bl	8000564 <__aeabi_i2d>
 8009b8c:	a36a      	add	r3, pc, #424	; (adr r3, 8009d38 <_dtoa_r+0x2f0>)
 8009b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b92:	f7f6 fd51 	bl	8000638 <__aeabi_dmul>
 8009b96:	4602      	mov	r2, r0
 8009b98:	460b      	mov	r3, r1
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	4639      	mov	r1, r7
 8009b9e:	f7f6 fb95 	bl	80002cc <__adddf3>
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	460f      	mov	r7, r1
 8009ba6:	f7f6 fff7 	bl	8000b98 <__aeabi_d2iz>
 8009baa:	2200      	movs	r2, #0
 8009bac:	4682      	mov	sl, r0
 8009bae:	2300      	movs	r3, #0
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	f7f6 ffb2 	bl	8000b1c <__aeabi_dcmplt>
 8009bb8:	b148      	cbz	r0, 8009bce <_dtoa_r+0x186>
 8009bba:	4650      	mov	r0, sl
 8009bbc:	f7f6 fcd2 	bl	8000564 <__aeabi_i2d>
 8009bc0:	4632      	mov	r2, r6
 8009bc2:	463b      	mov	r3, r7
 8009bc4:	f7f6 ffa0 	bl	8000b08 <__aeabi_dcmpeq>
 8009bc8:	b908      	cbnz	r0, 8009bce <_dtoa_r+0x186>
 8009bca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009bce:	f1ba 0f16 	cmp.w	sl, #22
 8009bd2:	d854      	bhi.n	8009c7e <_dtoa_r+0x236>
 8009bd4:	4b61      	ldr	r3, [pc, #388]	; (8009d5c <_dtoa_r+0x314>)
 8009bd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009be2:	f7f6 ff9b 	bl	8000b1c <__aeabi_dcmplt>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d04b      	beq.n	8009c82 <_dtoa_r+0x23a>
 8009bea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009bee:	2300      	movs	r3, #0
 8009bf0:	930e      	str	r3, [sp, #56]	; 0x38
 8009bf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bf4:	1b5d      	subs	r5, r3, r5
 8009bf6:	1e6b      	subs	r3, r5, #1
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	bf43      	ittte	mi
 8009bfc:	2300      	movmi	r3, #0
 8009bfe:	f1c5 0801 	rsbmi	r8, r5, #1
 8009c02:	9304      	strmi	r3, [sp, #16]
 8009c04:	f04f 0800 	movpl.w	r8, #0
 8009c08:	f1ba 0f00 	cmp.w	sl, #0
 8009c0c:	db3b      	blt.n	8009c86 <_dtoa_r+0x23e>
 8009c0e:	9b04      	ldr	r3, [sp, #16]
 8009c10:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009c14:	4453      	add	r3, sl
 8009c16:	9304      	str	r3, [sp, #16]
 8009c18:	2300      	movs	r3, #0
 8009c1a:	9306      	str	r3, [sp, #24]
 8009c1c:	9b05      	ldr	r3, [sp, #20]
 8009c1e:	2b09      	cmp	r3, #9
 8009c20:	d869      	bhi.n	8009cf6 <_dtoa_r+0x2ae>
 8009c22:	2b05      	cmp	r3, #5
 8009c24:	bfc4      	itt	gt
 8009c26:	3b04      	subgt	r3, #4
 8009c28:	9305      	strgt	r3, [sp, #20]
 8009c2a:	9b05      	ldr	r3, [sp, #20]
 8009c2c:	f1a3 0302 	sub.w	r3, r3, #2
 8009c30:	bfcc      	ite	gt
 8009c32:	2500      	movgt	r5, #0
 8009c34:	2501      	movle	r5, #1
 8009c36:	2b03      	cmp	r3, #3
 8009c38:	d869      	bhi.n	8009d0e <_dtoa_r+0x2c6>
 8009c3a:	e8df f003 	tbb	[pc, r3]
 8009c3e:	4e2c      	.short	0x4e2c
 8009c40:	5a4c      	.short	0x5a4c
 8009c42:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009c46:	441d      	add	r5, r3
 8009c48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c4c:	2b20      	cmp	r3, #32
 8009c4e:	bfc1      	itttt	gt
 8009c50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c54:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009c58:	fa09 f303 	lslgt.w	r3, r9, r3
 8009c5c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c60:	bfda      	itte	le
 8009c62:	f1c3 0320 	rsble	r3, r3, #32
 8009c66:	fa06 f003 	lslle.w	r0, r6, r3
 8009c6a:	4318      	orrgt	r0, r3
 8009c6c:	f7f6 fc6a 	bl	8000544 <__aeabi_ui2d>
 8009c70:	2301      	movs	r3, #1
 8009c72:	4606      	mov	r6, r0
 8009c74:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c78:	3d01      	subs	r5, #1
 8009c7a:	9310      	str	r3, [sp, #64]	; 0x40
 8009c7c:	e771      	b.n	8009b62 <_dtoa_r+0x11a>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e7b6      	b.n	8009bf0 <_dtoa_r+0x1a8>
 8009c82:	900e      	str	r0, [sp, #56]	; 0x38
 8009c84:	e7b5      	b.n	8009bf2 <_dtoa_r+0x1aa>
 8009c86:	f1ca 0300 	rsb	r3, sl, #0
 8009c8a:	9306      	str	r3, [sp, #24]
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	eba8 080a 	sub.w	r8, r8, sl
 8009c92:	930d      	str	r3, [sp, #52]	; 0x34
 8009c94:	e7c2      	b.n	8009c1c <_dtoa_r+0x1d4>
 8009c96:	2300      	movs	r3, #0
 8009c98:	9308      	str	r3, [sp, #32]
 8009c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	dc39      	bgt.n	8009d14 <_dtoa_r+0x2cc>
 8009ca0:	f04f 0901 	mov.w	r9, #1
 8009ca4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ca8:	464b      	mov	r3, r9
 8009caa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009cae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	6042      	str	r2, [r0, #4]
 8009cb4:	2204      	movs	r2, #4
 8009cb6:	f102 0614 	add.w	r6, r2, #20
 8009cba:	429e      	cmp	r6, r3
 8009cbc:	6841      	ldr	r1, [r0, #4]
 8009cbe:	d92f      	bls.n	8009d20 <_dtoa_r+0x2d8>
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f001 fa6b 	bl	800b19c <_Balloc>
 8009cc6:	9000      	str	r0, [sp, #0]
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d14b      	bne.n	8009d64 <_dtoa_r+0x31c>
 8009ccc:	4b24      	ldr	r3, [pc, #144]	; (8009d60 <_dtoa_r+0x318>)
 8009cce:	4602      	mov	r2, r0
 8009cd0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009cd4:	e6d1      	b.n	8009a7a <_dtoa_r+0x32>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e7de      	b.n	8009c98 <_dtoa_r+0x250>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	9308      	str	r3, [sp, #32]
 8009cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce0:	eb0a 0903 	add.w	r9, sl, r3
 8009ce4:	f109 0301 	add.w	r3, r9, #1
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	9301      	str	r3, [sp, #4]
 8009cec:	bfb8      	it	lt
 8009cee:	2301      	movlt	r3, #1
 8009cf0:	e7dd      	b.n	8009cae <_dtoa_r+0x266>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e7f2      	b.n	8009cdc <_dtoa_r+0x294>
 8009cf6:	2501      	movs	r5, #1
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	9305      	str	r3, [sp, #20]
 8009cfc:	9508      	str	r5, [sp, #32]
 8009cfe:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009d02:	2200      	movs	r2, #0
 8009d04:	f8cd 9004 	str.w	r9, [sp, #4]
 8009d08:	2312      	movs	r3, #18
 8009d0a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d0c:	e7cf      	b.n	8009cae <_dtoa_r+0x266>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	9308      	str	r3, [sp, #32]
 8009d12:	e7f4      	b.n	8009cfe <_dtoa_r+0x2b6>
 8009d14:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009d18:	f8cd 9004 	str.w	r9, [sp, #4]
 8009d1c:	464b      	mov	r3, r9
 8009d1e:	e7c6      	b.n	8009cae <_dtoa_r+0x266>
 8009d20:	3101      	adds	r1, #1
 8009d22:	6041      	str	r1, [r0, #4]
 8009d24:	0052      	lsls	r2, r2, #1
 8009d26:	e7c6      	b.n	8009cb6 <_dtoa_r+0x26e>
 8009d28:	636f4361 	.word	0x636f4361
 8009d2c:	3fd287a7 	.word	0x3fd287a7
 8009d30:	8b60c8b3 	.word	0x8b60c8b3
 8009d34:	3fc68a28 	.word	0x3fc68a28
 8009d38:	509f79fb 	.word	0x509f79fb
 8009d3c:	3fd34413 	.word	0x3fd34413
 8009d40:	0800d846 	.word	0x0800d846
 8009d44:	0800d85d 	.word	0x0800d85d
 8009d48:	7ff00000 	.word	0x7ff00000
 8009d4c:	0800d842 	.word	0x0800d842
 8009d50:	0800d839 	.word	0x0800d839
 8009d54:	0800d6bd 	.word	0x0800d6bd
 8009d58:	3ff80000 	.word	0x3ff80000
 8009d5c:	0800da38 	.word	0x0800da38
 8009d60:	0800d8bc 	.word	0x0800d8bc
 8009d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d66:	9a00      	ldr	r2, [sp, #0]
 8009d68:	601a      	str	r2, [r3, #0]
 8009d6a:	9b01      	ldr	r3, [sp, #4]
 8009d6c:	2b0e      	cmp	r3, #14
 8009d6e:	f200 80ad 	bhi.w	8009ecc <_dtoa_r+0x484>
 8009d72:	2d00      	cmp	r5, #0
 8009d74:	f000 80aa 	beq.w	8009ecc <_dtoa_r+0x484>
 8009d78:	f1ba 0f00 	cmp.w	sl, #0
 8009d7c:	dd36      	ble.n	8009dec <_dtoa_r+0x3a4>
 8009d7e:	4ac3      	ldr	r2, [pc, #780]	; (800a08c <_dtoa_r+0x644>)
 8009d80:	f00a 030f 	and.w	r3, sl, #15
 8009d84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d88:	ed93 7b00 	vldr	d7, [r3]
 8009d8c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009d90:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009d94:	eeb0 8a47 	vmov.f32	s16, s14
 8009d98:	eef0 8a67 	vmov.f32	s17, s15
 8009d9c:	d016      	beq.n	8009dcc <_dtoa_r+0x384>
 8009d9e:	4bbc      	ldr	r3, [pc, #752]	; (800a090 <_dtoa_r+0x648>)
 8009da0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009da4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009da8:	f7f6 fd70 	bl	800088c <__aeabi_ddiv>
 8009dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009db0:	f007 070f 	and.w	r7, r7, #15
 8009db4:	2503      	movs	r5, #3
 8009db6:	4eb6      	ldr	r6, [pc, #728]	; (800a090 <_dtoa_r+0x648>)
 8009db8:	b957      	cbnz	r7, 8009dd0 <_dtoa_r+0x388>
 8009dba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dbe:	ec53 2b18 	vmov	r2, r3, d8
 8009dc2:	f7f6 fd63 	bl	800088c <__aeabi_ddiv>
 8009dc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dca:	e029      	b.n	8009e20 <_dtoa_r+0x3d8>
 8009dcc:	2502      	movs	r5, #2
 8009dce:	e7f2      	b.n	8009db6 <_dtoa_r+0x36e>
 8009dd0:	07f9      	lsls	r1, r7, #31
 8009dd2:	d508      	bpl.n	8009de6 <_dtoa_r+0x39e>
 8009dd4:	ec51 0b18 	vmov	r0, r1, d8
 8009dd8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ddc:	f7f6 fc2c 	bl	8000638 <__aeabi_dmul>
 8009de0:	ec41 0b18 	vmov	d8, r0, r1
 8009de4:	3501      	adds	r5, #1
 8009de6:	107f      	asrs	r7, r7, #1
 8009de8:	3608      	adds	r6, #8
 8009dea:	e7e5      	b.n	8009db8 <_dtoa_r+0x370>
 8009dec:	f000 80a6 	beq.w	8009f3c <_dtoa_r+0x4f4>
 8009df0:	f1ca 0600 	rsb	r6, sl, #0
 8009df4:	4ba5      	ldr	r3, [pc, #660]	; (800a08c <_dtoa_r+0x644>)
 8009df6:	4fa6      	ldr	r7, [pc, #664]	; (800a090 <_dtoa_r+0x648>)
 8009df8:	f006 020f 	and.w	r2, r6, #15
 8009dfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e08:	f7f6 fc16 	bl	8000638 <__aeabi_dmul>
 8009e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e10:	1136      	asrs	r6, r6, #4
 8009e12:	2300      	movs	r3, #0
 8009e14:	2502      	movs	r5, #2
 8009e16:	2e00      	cmp	r6, #0
 8009e18:	f040 8085 	bne.w	8009f26 <_dtoa_r+0x4de>
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1d2      	bne.n	8009dc6 <_dtoa_r+0x37e>
 8009e20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 808c 	beq.w	8009f40 <_dtoa_r+0x4f8>
 8009e28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e2c:	4b99      	ldr	r3, [pc, #612]	; (800a094 <_dtoa_r+0x64c>)
 8009e2e:	2200      	movs	r2, #0
 8009e30:	4630      	mov	r0, r6
 8009e32:	4639      	mov	r1, r7
 8009e34:	f7f6 fe72 	bl	8000b1c <__aeabi_dcmplt>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	f000 8081 	beq.w	8009f40 <_dtoa_r+0x4f8>
 8009e3e:	9b01      	ldr	r3, [sp, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d07d      	beq.n	8009f40 <_dtoa_r+0x4f8>
 8009e44:	f1b9 0f00 	cmp.w	r9, #0
 8009e48:	dd3c      	ble.n	8009ec4 <_dtoa_r+0x47c>
 8009e4a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009e4e:	9307      	str	r3, [sp, #28]
 8009e50:	2200      	movs	r2, #0
 8009e52:	4b91      	ldr	r3, [pc, #580]	; (800a098 <_dtoa_r+0x650>)
 8009e54:	4630      	mov	r0, r6
 8009e56:	4639      	mov	r1, r7
 8009e58:	f7f6 fbee 	bl	8000638 <__aeabi_dmul>
 8009e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e60:	3501      	adds	r5, #1
 8009e62:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009e66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	f7f6 fb7a 	bl	8000564 <__aeabi_i2d>
 8009e70:	4632      	mov	r2, r6
 8009e72:	463b      	mov	r3, r7
 8009e74:	f7f6 fbe0 	bl	8000638 <__aeabi_dmul>
 8009e78:	4b88      	ldr	r3, [pc, #544]	; (800a09c <_dtoa_r+0x654>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f7f6 fa26 	bl	80002cc <__adddf3>
 8009e80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e88:	9303      	str	r3, [sp, #12]
 8009e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d15c      	bne.n	8009f4a <_dtoa_r+0x502>
 8009e90:	4b83      	ldr	r3, [pc, #524]	; (800a0a0 <_dtoa_r+0x658>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	4630      	mov	r0, r6
 8009e96:	4639      	mov	r1, r7
 8009e98:	f7f6 fa16 	bl	80002c8 <__aeabi_dsub>
 8009e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ea0:	4606      	mov	r6, r0
 8009ea2:	460f      	mov	r7, r1
 8009ea4:	f7f6 fe58 	bl	8000b58 <__aeabi_dcmpgt>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	f040 8296 	bne.w	800a3da <_dtoa_r+0x992>
 8009eae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009eb8:	4639      	mov	r1, r7
 8009eba:	f7f6 fe2f 	bl	8000b1c <__aeabi_dcmplt>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	f040 8288 	bne.w	800a3d4 <_dtoa_r+0x98c>
 8009ec4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009ec8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ecc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f2c0 8158 	blt.w	800a184 <_dtoa_r+0x73c>
 8009ed4:	f1ba 0f0e 	cmp.w	sl, #14
 8009ed8:	f300 8154 	bgt.w	800a184 <_dtoa_r+0x73c>
 8009edc:	4b6b      	ldr	r3, [pc, #428]	; (800a08c <_dtoa_r+0x644>)
 8009ede:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009ee2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f280 80e3 	bge.w	800a0b4 <_dtoa_r+0x66c>
 8009eee:	9b01      	ldr	r3, [sp, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f300 80df 	bgt.w	800a0b4 <_dtoa_r+0x66c>
 8009ef6:	f040 826d 	bne.w	800a3d4 <_dtoa_r+0x98c>
 8009efa:	4b69      	ldr	r3, [pc, #420]	; (800a0a0 <_dtoa_r+0x658>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	4640      	mov	r0, r8
 8009f00:	4649      	mov	r1, r9
 8009f02:	f7f6 fb99 	bl	8000638 <__aeabi_dmul>
 8009f06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f0a:	f7f6 fe1b 	bl	8000b44 <__aeabi_dcmpge>
 8009f0e:	9e01      	ldr	r6, [sp, #4]
 8009f10:	4637      	mov	r7, r6
 8009f12:	2800      	cmp	r0, #0
 8009f14:	f040 8243 	bne.w	800a39e <_dtoa_r+0x956>
 8009f18:	9d00      	ldr	r5, [sp, #0]
 8009f1a:	2331      	movs	r3, #49	; 0x31
 8009f1c:	f805 3b01 	strb.w	r3, [r5], #1
 8009f20:	f10a 0a01 	add.w	sl, sl, #1
 8009f24:	e23f      	b.n	800a3a6 <_dtoa_r+0x95e>
 8009f26:	07f2      	lsls	r2, r6, #31
 8009f28:	d505      	bpl.n	8009f36 <_dtoa_r+0x4ee>
 8009f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f2e:	f7f6 fb83 	bl	8000638 <__aeabi_dmul>
 8009f32:	3501      	adds	r5, #1
 8009f34:	2301      	movs	r3, #1
 8009f36:	1076      	asrs	r6, r6, #1
 8009f38:	3708      	adds	r7, #8
 8009f3a:	e76c      	b.n	8009e16 <_dtoa_r+0x3ce>
 8009f3c:	2502      	movs	r5, #2
 8009f3e:	e76f      	b.n	8009e20 <_dtoa_r+0x3d8>
 8009f40:	9b01      	ldr	r3, [sp, #4]
 8009f42:	f8cd a01c 	str.w	sl, [sp, #28]
 8009f46:	930c      	str	r3, [sp, #48]	; 0x30
 8009f48:	e78d      	b.n	8009e66 <_dtoa_r+0x41e>
 8009f4a:	9900      	ldr	r1, [sp, #0]
 8009f4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009f4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f50:	4b4e      	ldr	r3, [pc, #312]	; (800a08c <_dtoa_r+0x644>)
 8009f52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f56:	4401      	add	r1, r0
 8009f58:	9102      	str	r1, [sp, #8]
 8009f5a:	9908      	ldr	r1, [sp, #32]
 8009f5c:	eeb0 8a47 	vmov.f32	s16, s14
 8009f60:	eef0 8a67 	vmov.f32	s17, s15
 8009f64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f6c:	2900      	cmp	r1, #0
 8009f6e:	d045      	beq.n	8009ffc <_dtoa_r+0x5b4>
 8009f70:	494c      	ldr	r1, [pc, #304]	; (800a0a4 <_dtoa_r+0x65c>)
 8009f72:	2000      	movs	r0, #0
 8009f74:	f7f6 fc8a 	bl	800088c <__aeabi_ddiv>
 8009f78:	ec53 2b18 	vmov	r2, r3, d8
 8009f7c:	f7f6 f9a4 	bl	80002c8 <__aeabi_dsub>
 8009f80:	9d00      	ldr	r5, [sp, #0]
 8009f82:	ec41 0b18 	vmov	d8, r0, r1
 8009f86:	4639      	mov	r1, r7
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f7f6 fe05 	bl	8000b98 <__aeabi_d2iz>
 8009f8e:	900c      	str	r0, [sp, #48]	; 0x30
 8009f90:	f7f6 fae8 	bl	8000564 <__aeabi_i2d>
 8009f94:	4602      	mov	r2, r0
 8009f96:	460b      	mov	r3, r1
 8009f98:	4630      	mov	r0, r6
 8009f9a:	4639      	mov	r1, r7
 8009f9c:	f7f6 f994 	bl	80002c8 <__aeabi_dsub>
 8009fa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fa2:	3330      	adds	r3, #48	; 0x30
 8009fa4:	f805 3b01 	strb.w	r3, [r5], #1
 8009fa8:	ec53 2b18 	vmov	r2, r3, d8
 8009fac:	4606      	mov	r6, r0
 8009fae:	460f      	mov	r7, r1
 8009fb0:	f7f6 fdb4 	bl	8000b1c <__aeabi_dcmplt>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d165      	bne.n	800a084 <_dtoa_r+0x63c>
 8009fb8:	4632      	mov	r2, r6
 8009fba:	463b      	mov	r3, r7
 8009fbc:	4935      	ldr	r1, [pc, #212]	; (800a094 <_dtoa_r+0x64c>)
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	f7f6 f982 	bl	80002c8 <__aeabi_dsub>
 8009fc4:	ec53 2b18 	vmov	r2, r3, d8
 8009fc8:	f7f6 fda8 	bl	8000b1c <__aeabi_dcmplt>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	f040 80b9 	bne.w	800a144 <_dtoa_r+0x6fc>
 8009fd2:	9b02      	ldr	r3, [sp, #8]
 8009fd4:	429d      	cmp	r5, r3
 8009fd6:	f43f af75 	beq.w	8009ec4 <_dtoa_r+0x47c>
 8009fda:	4b2f      	ldr	r3, [pc, #188]	; (800a098 <_dtoa_r+0x650>)
 8009fdc:	ec51 0b18 	vmov	r0, r1, d8
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f7f6 fb29 	bl	8000638 <__aeabi_dmul>
 8009fe6:	4b2c      	ldr	r3, [pc, #176]	; (800a098 <_dtoa_r+0x650>)
 8009fe8:	ec41 0b18 	vmov	d8, r0, r1
 8009fec:	2200      	movs	r2, #0
 8009fee:	4630      	mov	r0, r6
 8009ff0:	4639      	mov	r1, r7
 8009ff2:	f7f6 fb21 	bl	8000638 <__aeabi_dmul>
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	460f      	mov	r7, r1
 8009ffa:	e7c4      	b.n	8009f86 <_dtoa_r+0x53e>
 8009ffc:	ec51 0b17 	vmov	r0, r1, d7
 800a000:	f7f6 fb1a 	bl	8000638 <__aeabi_dmul>
 800a004:	9b02      	ldr	r3, [sp, #8]
 800a006:	9d00      	ldr	r5, [sp, #0]
 800a008:	930c      	str	r3, [sp, #48]	; 0x30
 800a00a:	ec41 0b18 	vmov	d8, r0, r1
 800a00e:	4639      	mov	r1, r7
 800a010:	4630      	mov	r0, r6
 800a012:	f7f6 fdc1 	bl	8000b98 <__aeabi_d2iz>
 800a016:	9011      	str	r0, [sp, #68]	; 0x44
 800a018:	f7f6 faa4 	bl	8000564 <__aeabi_i2d>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4630      	mov	r0, r6
 800a022:	4639      	mov	r1, r7
 800a024:	f7f6 f950 	bl	80002c8 <__aeabi_dsub>
 800a028:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a02a:	3330      	adds	r3, #48	; 0x30
 800a02c:	f805 3b01 	strb.w	r3, [r5], #1
 800a030:	9b02      	ldr	r3, [sp, #8]
 800a032:	429d      	cmp	r5, r3
 800a034:	4606      	mov	r6, r0
 800a036:	460f      	mov	r7, r1
 800a038:	f04f 0200 	mov.w	r2, #0
 800a03c:	d134      	bne.n	800a0a8 <_dtoa_r+0x660>
 800a03e:	4b19      	ldr	r3, [pc, #100]	; (800a0a4 <_dtoa_r+0x65c>)
 800a040:	ec51 0b18 	vmov	r0, r1, d8
 800a044:	f7f6 f942 	bl	80002cc <__adddf3>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	4630      	mov	r0, r6
 800a04e:	4639      	mov	r1, r7
 800a050:	f7f6 fd82 	bl	8000b58 <__aeabi_dcmpgt>
 800a054:	2800      	cmp	r0, #0
 800a056:	d175      	bne.n	800a144 <_dtoa_r+0x6fc>
 800a058:	ec53 2b18 	vmov	r2, r3, d8
 800a05c:	4911      	ldr	r1, [pc, #68]	; (800a0a4 <_dtoa_r+0x65c>)
 800a05e:	2000      	movs	r0, #0
 800a060:	f7f6 f932 	bl	80002c8 <__aeabi_dsub>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4630      	mov	r0, r6
 800a06a:	4639      	mov	r1, r7
 800a06c:	f7f6 fd56 	bl	8000b1c <__aeabi_dcmplt>
 800a070:	2800      	cmp	r0, #0
 800a072:	f43f af27 	beq.w	8009ec4 <_dtoa_r+0x47c>
 800a076:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a078:	1e6b      	subs	r3, r5, #1
 800a07a:	930c      	str	r3, [sp, #48]	; 0x30
 800a07c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a080:	2b30      	cmp	r3, #48	; 0x30
 800a082:	d0f8      	beq.n	800a076 <_dtoa_r+0x62e>
 800a084:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a088:	e04a      	b.n	800a120 <_dtoa_r+0x6d8>
 800a08a:	bf00      	nop
 800a08c:	0800da38 	.word	0x0800da38
 800a090:	0800da10 	.word	0x0800da10
 800a094:	3ff00000 	.word	0x3ff00000
 800a098:	40240000 	.word	0x40240000
 800a09c:	401c0000 	.word	0x401c0000
 800a0a0:	40140000 	.word	0x40140000
 800a0a4:	3fe00000 	.word	0x3fe00000
 800a0a8:	4baf      	ldr	r3, [pc, #700]	; (800a368 <_dtoa_r+0x920>)
 800a0aa:	f7f6 fac5 	bl	8000638 <__aeabi_dmul>
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	460f      	mov	r7, r1
 800a0b2:	e7ac      	b.n	800a00e <_dtoa_r+0x5c6>
 800a0b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a0b8:	9d00      	ldr	r5, [sp, #0]
 800a0ba:	4642      	mov	r2, r8
 800a0bc:	464b      	mov	r3, r9
 800a0be:	4630      	mov	r0, r6
 800a0c0:	4639      	mov	r1, r7
 800a0c2:	f7f6 fbe3 	bl	800088c <__aeabi_ddiv>
 800a0c6:	f7f6 fd67 	bl	8000b98 <__aeabi_d2iz>
 800a0ca:	9002      	str	r0, [sp, #8]
 800a0cc:	f7f6 fa4a 	bl	8000564 <__aeabi_i2d>
 800a0d0:	4642      	mov	r2, r8
 800a0d2:	464b      	mov	r3, r9
 800a0d4:	f7f6 fab0 	bl	8000638 <__aeabi_dmul>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4630      	mov	r0, r6
 800a0de:	4639      	mov	r1, r7
 800a0e0:	f7f6 f8f2 	bl	80002c8 <__aeabi_dsub>
 800a0e4:	9e02      	ldr	r6, [sp, #8]
 800a0e6:	9f01      	ldr	r7, [sp, #4]
 800a0e8:	3630      	adds	r6, #48	; 0x30
 800a0ea:	f805 6b01 	strb.w	r6, [r5], #1
 800a0ee:	9e00      	ldr	r6, [sp, #0]
 800a0f0:	1bae      	subs	r6, r5, r6
 800a0f2:	42b7      	cmp	r7, r6
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	d137      	bne.n	800a16a <_dtoa_r+0x722>
 800a0fa:	f7f6 f8e7 	bl	80002cc <__adddf3>
 800a0fe:	4642      	mov	r2, r8
 800a100:	464b      	mov	r3, r9
 800a102:	4606      	mov	r6, r0
 800a104:	460f      	mov	r7, r1
 800a106:	f7f6 fd27 	bl	8000b58 <__aeabi_dcmpgt>
 800a10a:	b9c8      	cbnz	r0, 800a140 <_dtoa_r+0x6f8>
 800a10c:	4642      	mov	r2, r8
 800a10e:	464b      	mov	r3, r9
 800a110:	4630      	mov	r0, r6
 800a112:	4639      	mov	r1, r7
 800a114:	f7f6 fcf8 	bl	8000b08 <__aeabi_dcmpeq>
 800a118:	b110      	cbz	r0, 800a120 <_dtoa_r+0x6d8>
 800a11a:	9b02      	ldr	r3, [sp, #8]
 800a11c:	07d9      	lsls	r1, r3, #31
 800a11e:	d40f      	bmi.n	800a140 <_dtoa_r+0x6f8>
 800a120:	4620      	mov	r0, r4
 800a122:	4659      	mov	r1, fp
 800a124:	f001 f87a 	bl	800b21c <_Bfree>
 800a128:	2300      	movs	r3, #0
 800a12a:	702b      	strb	r3, [r5, #0]
 800a12c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a12e:	f10a 0001 	add.w	r0, sl, #1
 800a132:	6018      	str	r0, [r3, #0]
 800a134:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a136:	2b00      	cmp	r3, #0
 800a138:	f43f acd8 	beq.w	8009aec <_dtoa_r+0xa4>
 800a13c:	601d      	str	r5, [r3, #0]
 800a13e:	e4d5      	b.n	8009aec <_dtoa_r+0xa4>
 800a140:	f8cd a01c 	str.w	sl, [sp, #28]
 800a144:	462b      	mov	r3, r5
 800a146:	461d      	mov	r5, r3
 800a148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a14c:	2a39      	cmp	r2, #57	; 0x39
 800a14e:	d108      	bne.n	800a162 <_dtoa_r+0x71a>
 800a150:	9a00      	ldr	r2, [sp, #0]
 800a152:	429a      	cmp	r2, r3
 800a154:	d1f7      	bne.n	800a146 <_dtoa_r+0x6fe>
 800a156:	9a07      	ldr	r2, [sp, #28]
 800a158:	9900      	ldr	r1, [sp, #0]
 800a15a:	3201      	adds	r2, #1
 800a15c:	9207      	str	r2, [sp, #28]
 800a15e:	2230      	movs	r2, #48	; 0x30
 800a160:	700a      	strb	r2, [r1, #0]
 800a162:	781a      	ldrb	r2, [r3, #0]
 800a164:	3201      	adds	r2, #1
 800a166:	701a      	strb	r2, [r3, #0]
 800a168:	e78c      	b.n	800a084 <_dtoa_r+0x63c>
 800a16a:	4b7f      	ldr	r3, [pc, #508]	; (800a368 <_dtoa_r+0x920>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	f7f6 fa63 	bl	8000638 <__aeabi_dmul>
 800a172:	2200      	movs	r2, #0
 800a174:	2300      	movs	r3, #0
 800a176:	4606      	mov	r6, r0
 800a178:	460f      	mov	r7, r1
 800a17a:	f7f6 fcc5 	bl	8000b08 <__aeabi_dcmpeq>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d09b      	beq.n	800a0ba <_dtoa_r+0x672>
 800a182:	e7cd      	b.n	800a120 <_dtoa_r+0x6d8>
 800a184:	9a08      	ldr	r2, [sp, #32]
 800a186:	2a00      	cmp	r2, #0
 800a188:	f000 80c4 	beq.w	800a314 <_dtoa_r+0x8cc>
 800a18c:	9a05      	ldr	r2, [sp, #20]
 800a18e:	2a01      	cmp	r2, #1
 800a190:	f300 80a8 	bgt.w	800a2e4 <_dtoa_r+0x89c>
 800a194:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a196:	2a00      	cmp	r2, #0
 800a198:	f000 80a0 	beq.w	800a2dc <_dtoa_r+0x894>
 800a19c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a1a0:	9e06      	ldr	r6, [sp, #24]
 800a1a2:	4645      	mov	r5, r8
 800a1a4:	9a04      	ldr	r2, [sp, #16]
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	441a      	add	r2, r3
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	4498      	add	r8, r3
 800a1ae:	9204      	str	r2, [sp, #16]
 800a1b0:	f001 f93a 	bl	800b428 <__i2b>
 800a1b4:	4607      	mov	r7, r0
 800a1b6:	2d00      	cmp	r5, #0
 800a1b8:	dd0b      	ble.n	800a1d2 <_dtoa_r+0x78a>
 800a1ba:	9b04      	ldr	r3, [sp, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	dd08      	ble.n	800a1d2 <_dtoa_r+0x78a>
 800a1c0:	42ab      	cmp	r3, r5
 800a1c2:	9a04      	ldr	r2, [sp, #16]
 800a1c4:	bfa8      	it	ge
 800a1c6:	462b      	movge	r3, r5
 800a1c8:	eba8 0803 	sub.w	r8, r8, r3
 800a1cc:	1aed      	subs	r5, r5, r3
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	9304      	str	r3, [sp, #16]
 800a1d2:	9b06      	ldr	r3, [sp, #24]
 800a1d4:	b1fb      	cbz	r3, 800a216 <_dtoa_r+0x7ce>
 800a1d6:	9b08      	ldr	r3, [sp, #32]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f000 809f 	beq.w	800a31c <_dtoa_r+0x8d4>
 800a1de:	2e00      	cmp	r6, #0
 800a1e0:	dd11      	ble.n	800a206 <_dtoa_r+0x7be>
 800a1e2:	4639      	mov	r1, r7
 800a1e4:	4632      	mov	r2, r6
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f001 f9da 	bl	800b5a0 <__pow5mult>
 800a1ec:	465a      	mov	r2, fp
 800a1ee:	4601      	mov	r1, r0
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f001 f92e 	bl	800b454 <__multiply>
 800a1f8:	4659      	mov	r1, fp
 800a1fa:	9007      	str	r0, [sp, #28]
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f001 f80d 	bl	800b21c <_Bfree>
 800a202:	9b07      	ldr	r3, [sp, #28]
 800a204:	469b      	mov	fp, r3
 800a206:	9b06      	ldr	r3, [sp, #24]
 800a208:	1b9a      	subs	r2, r3, r6
 800a20a:	d004      	beq.n	800a216 <_dtoa_r+0x7ce>
 800a20c:	4659      	mov	r1, fp
 800a20e:	4620      	mov	r0, r4
 800a210:	f001 f9c6 	bl	800b5a0 <__pow5mult>
 800a214:	4683      	mov	fp, r0
 800a216:	2101      	movs	r1, #1
 800a218:	4620      	mov	r0, r4
 800a21a:	f001 f905 	bl	800b428 <__i2b>
 800a21e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a220:	2b00      	cmp	r3, #0
 800a222:	4606      	mov	r6, r0
 800a224:	dd7c      	ble.n	800a320 <_dtoa_r+0x8d8>
 800a226:	461a      	mov	r2, r3
 800a228:	4601      	mov	r1, r0
 800a22a:	4620      	mov	r0, r4
 800a22c:	f001 f9b8 	bl	800b5a0 <__pow5mult>
 800a230:	9b05      	ldr	r3, [sp, #20]
 800a232:	2b01      	cmp	r3, #1
 800a234:	4606      	mov	r6, r0
 800a236:	dd76      	ble.n	800a326 <_dtoa_r+0x8de>
 800a238:	2300      	movs	r3, #0
 800a23a:	9306      	str	r3, [sp, #24]
 800a23c:	6933      	ldr	r3, [r6, #16]
 800a23e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a242:	6918      	ldr	r0, [r3, #16]
 800a244:	f001 f8a0 	bl	800b388 <__hi0bits>
 800a248:	f1c0 0020 	rsb	r0, r0, #32
 800a24c:	9b04      	ldr	r3, [sp, #16]
 800a24e:	4418      	add	r0, r3
 800a250:	f010 001f 	ands.w	r0, r0, #31
 800a254:	f000 8086 	beq.w	800a364 <_dtoa_r+0x91c>
 800a258:	f1c0 0320 	rsb	r3, r0, #32
 800a25c:	2b04      	cmp	r3, #4
 800a25e:	dd7f      	ble.n	800a360 <_dtoa_r+0x918>
 800a260:	f1c0 001c 	rsb	r0, r0, #28
 800a264:	9b04      	ldr	r3, [sp, #16]
 800a266:	4403      	add	r3, r0
 800a268:	4480      	add	r8, r0
 800a26a:	4405      	add	r5, r0
 800a26c:	9304      	str	r3, [sp, #16]
 800a26e:	f1b8 0f00 	cmp.w	r8, #0
 800a272:	dd05      	ble.n	800a280 <_dtoa_r+0x838>
 800a274:	4659      	mov	r1, fp
 800a276:	4642      	mov	r2, r8
 800a278:	4620      	mov	r0, r4
 800a27a:	f001 f9eb 	bl	800b654 <__lshift>
 800a27e:	4683      	mov	fp, r0
 800a280:	9b04      	ldr	r3, [sp, #16]
 800a282:	2b00      	cmp	r3, #0
 800a284:	dd05      	ble.n	800a292 <_dtoa_r+0x84a>
 800a286:	4631      	mov	r1, r6
 800a288:	461a      	mov	r2, r3
 800a28a:	4620      	mov	r0, r4
 800a28c:	f001 f9e2 	bl	800b654 <__lshift>
 800a290:	4606      	mov	r6, r0
 800a292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a294:	2b00      	cmp	r3, #0
 800a296:	d069      	beq.n	800a36c <_dtoa_r+0x924>
 800a298:	4631      	mov	r1, r6
 800a29a:	4658      	mov	r0, fp
 800a29c:	f001 fa46 	bl	800b72c <__mcmp>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	da63      	bge.n	800a36c <_dtoa_r+0x924>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	4659      	mov	r1, fp
 800a2a8:	220a      	movs	r2, #10
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f000 ffd8 	bl	800b260 <__multadd>
 800a2b0:	9b08      	ldr	r3, [sp, #32]
 800a2b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a2b6:	4683      	mov	fp, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 818f 	beq.w	800a5dc <_dtoa_r+0xb94>
 800a2be:	4639      	mov	r1, r7
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	220a      	movs	r2, #10
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f000 ffcb 	bl	800b260 <__multadd>
 800a2ca:	f1b9 0f00 	cmp.w	r9, #0
 800a2ce:	4607      	mov	r7, r0
 800a2d0:	f300 808e 	bgt.w	800a3f0 <_dtoa_r+0x9a8>
 800a2d4:	9b05      	ldr	r3, [sp, #20]
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	dc50      	bgt.n	800a37c <_dtoa_r+0x934>
 800a2da:	e089      	b.n	800a3f0 <_dtoa_r+0x9a8>
 800a2dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2e2:	e75d      	b.n	800a1a0 <_dtoa_r+0x758>
 800a2e4:	9b01      	ldr	r3, [sp, #4]
 800a2e6:	1e5e      	subs	r6, r3, #1
 800a2e8:	9b06      	ldr	r3, [sp, #24]
 800a2ea:	42b3      	cmp	r3, r6
 800a2ec:	bfbf      	itttt	lt
 800a2ee:	9b06      	ldrlt	r3, [sp, #24]
 800a2f0:	9606      	strlt	r6, [sp, #24]
 800a2f2:	1af2      	sublt	r2, r6, r3
 800a2f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a2f6:	bfb6      	itet	lt
 800a2f8:	189b      	addlt	r3, r3, r2
 800a2fa:	1b9e      	subge	r6, r3, r6
 800a2fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a2fe:	9b01      	ldr	r3, [sp, #4]
 800a300:	bfb8      	it	lt
 800a302:	2600      	movlt	r6, #0
 800a304:	2b00      	cmp	r3, #0
 800a306:	bfb5      	itete	lt
 800a308:	eba8 0503 	sublt.w	r5, r8, r3
 800a30c:	9b01      	ldrge	r3, [sp, #4]
 800a30e:	2300      	movlt	r3, #0
 800a310:	4645      	movge	r5, r8
 800a312:	e747      	b.n	800a1a4 <_dtoa_r+0x75c>
 800a314:	9e06      	ldr	r6, [sp, #24]
 800a316:	9f08      	ldr	r7, [sp, #32]
 800a318:	4645      	mov	r5, r8
 800a31a:	e74c      	b.n	800a1b6 <_dtoa_r+0x76e>
 800a31c:	9a06      	ldr	r2, [sp, #24]
 800a31e:	e775      	b.n	800a20c <_dtoa_r+0x7c4>
 800a320:	9b05      	ldr	r3, [sp, #20]
 800a322:	2b01      	cmp	r3, #1
 800a324:	dc18      	bgt.n	800a358 <_dtoa_r+0x910>
 800a326:	9b02      	ldr	r3, [sp, #8]
 800a328:	b9b3      	cbnz	r3, 800a358 <_dtoa_r+0x910>
 800a32a:	9b03      	ldr	r3, [sp, #12]
 800a32c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a330:	b9a3      	cbnz	r3, 800a35c <_dtoa_r+0x914>
 800a332:	9b03      	ldr	r3, [sp, #12]
 800a334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a338:	0d1b      	lsrs	r3, r3, #20
 800a33a:	051b      	lsls	r3, r3, #20
 800a33c:	b12b      	cbz	r3, 800a34a <_dtoa_r+0x902>
 800a33e:	9b04      	ldr	r3, [sp, #16]
 800a340:	3301      	adds	r3, #1
 800a342:	9304      	str	r3, [sp, #16]
 800a344:	f108 0801 	add.w	r8, r8, #1
 800a348:	2301      	movs	r3, #1
 800a34a:	9306      	str	r3, [sp, #24]
 800a34c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f47f af74 	bne.w	800a23c <_dtoa_r+0x7f4>
 800a354:	2001      	movs	r0, #1
 800a356:	e779      	b.n	800a24c <_dtoa_r+0x804>
 800a358:	2300      	movs	r3, #0
 800a35a:	e7f6      	b.n	800a34a <_dtoa_r+0x902>
 800a35c:	9b02      	ldr	r3, [sp, #8]
 800a35e:	e7f4      	b.n	800a34a <_dtoa_r+0x902>
 800a360:	d085      	beq.n	800a26e <_dtoa_r+0x826>
 800a362:	4618      	mov	r0, r3
 800a364:	301c      	adds	r0, #28
 800a366:	e77d      	b.n	800a264 <_dtoa_r+0x81c>
 800a368:	40240000 	.word	0x40240000
 800a36c:	9b01      	ldr	r3, [sp, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	dc38      	bgt.n	800a3e4 <_dtoa_r+0x99c>
 800a372:	9b05      	ldr	r3, [sp, #20]
 800a374:	2b02      	cmp	r3, #2
 800a376:	dd35      	ble.n	800a3e4 <_dtoa_r+0x99c>
 800a378:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a37c:	f1b9 0f00 	cmp.w	r9, #0
 800a380:	d10d      	bne.n	800a39e <_dtoa_r+0x956>
 800a382:	4631      	mov	r1, r6
 800a384:	464b      	mov	r3, r9
 800a386:	2205      	movs	r2, #5
 800a388:	4620      	mov	r0, r4
 800a38a:	f000 ff69 	bl	800b260 <__multadd>
 800a38e:	4601      	mov	r1, r0
 800a390:	4606      	mov	r6, r0
 800a392:	4658      	mov	r0, fp
 800a394:	f001 f9ca 	bl	800b72c <__mcmp>
 800a398:	2800      	cmp	r0, #0
 800a39a:	f73f adbd 	bgt.w	8009f18 <_dtoa_r+0x4d0>
 800a39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a0:	9d00      	ldr	r5, [sp, #0]
 800a3a2:	ea6f 0a03 	mvn.w	sl, r3
 800a3a6:	f04f 0800 	mov.w	r8, #0
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f000 ff35 	bl	800b21c <_Bfree>
 800a3b2:	2f00      	cmp	r7, #0
 800a3b4:	f43f aeb4 	beq.w	800a120 <_dtoa_r+0x6d8>
 800a3b8:	f1b8 0f00 	cmp.w	r8, #0
 800a3bc:	d005      	beq.n	800a3ca <_dtoa_r+0x982>
 800a3be:	45b8      	cmp	r8, r7
 800a3c0:	d003      	beq.n	800a3ca <_dtoa_r+0x982>
 800a3c2:	4641      	mov	r1, r8
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f000 ff29 	bl	800b21c <_Bfree>
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f000 ff25 	bl	800b21c <_Bfree>
 800a3d2:	e6a5      	b.n	800a120 <_dtoa_r+0x6d8>
 800a3d4:	2600      	movs	r6, #0
 800a3d6:	4637      	mov	r7, r6
 800a3d8:	e7e1      	b.n	800a39e <_dtoa_r+0x956>
 800a3da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a3dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a3e0:	4637      	mov	r7, r6
 800a3e2:	e599      	b.n	8009f18 <_dtoa_r+0x4d0>
 800a3e4:	9b08      	ldr	r3, [sp, #32]
 800a3e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f000 80fd 	beq.w	800a5ea <_dtoa_r+0xba2>
 800a3f0:	2d00      	cmp	r5, #0
 800a3f2:	dd05      	ble.n	800a400 <_dtoa_r+0x9b8>
 800a3f4:	4639      	mov	r1, r7
 800a3f6:	462a      	mov	r2, r5
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f001 f92b 	bl	800b654 <__lshift>
 800a3fe:	4607      	mov	r7, r0
 800a400:	9b06      	ldr	r3, [sp, #24]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d05c      	beq.n	800a4c0 <_dtoa_r+0xa78>
 800a406:	6879      	ldr	r1, [r7, #4]
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 fec7 	bl	800b19c <_Balloc>
 800a40e:	4605      	mov	r5, r0
 800a410:	b928      	cbnz	r0, 800a41e <_dtoa_r+0x9d6>
 800a412:	4b80      	ldr	r3, [pc, #512]	; (800a614 <_dtoa_r+0xbcc>)
 800a414:	4602      	mov	r2, r0
 800a416:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a41a:	f7ff bb2e 	b.w	8009a7a <_dtoa_r+0x32>
 800a41e:	693a      	ldr	r2, [r7, #16]
 800a420:	3202      	adds	r2, #2
 800a422:	0092      	lsls	r2, r2, #2
 800a424:	f107 010c 	add.w	r1, r7, #12
 800a428:	300c      	adds	r0, #12
 800a42a:	f000 fe9d 	bl	800b168 <memcpy>
 800a42e:	2201      	movs	r2, #1
 800a430:	4629      	mov	r1, r5
 800a432:	4620      	mov	r0, r4
 800a434:	f001 f90e 	bl	800b654 <__lshift>
 800a438:	9b00      	ldr	r3, [sp, #0]
 800a43a:	3301      	adds	r3, #1
 800a43c:	9301      	str	r3, [sp, #4]
 800a43e:	9b00      	ldr	r3, [sp, #0]
 800a440:	444b      	add	r3, r9
 800a442:	9307      	str	r3, [sp, #28]
 800a444:	9b02      	ldr	r3, [sp, #8]
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	46b8      	mov	r8, r7
 800a44c:	9306      	str	r3, [sp, #24]
 800a44e:	4607      	mov	r7, r0
 800a450:	9b01      	ldr	r3, [sp, #4]
 800a452:	4631      	mov	r1, r6
 800a454:	3b01      	subs	r3, #1
 800a456:	4658      	mov	r0, fp
 800a458:	9302      	str	r3, [sp, #8]
 800a45a:	f7ff fa67 	bl	800992c <quorem>
 800a45e:	4603      	mov	r3, r0
 800a460:	3330      	adds	r3, #48	; 0x30
 800a462:	9004      	str	r0, [sp, #16]
 800a464:	4641      	mov	r1, r8
 800a466:	4658      	mov	r0, fp
 800a468:	9308      	str	r3, [sp, #32]
 800a46a:	f001 f95f 	bl	800b72c <__mcmp>
 800a46e:	463a      	mov	r2, r7
 800a470:	4681      	mov	r9, r0
 800a472:	4631      	mov	r1, r6
 800a474:	4620      	mov	r0, r4
 800a476:	f001 f975 	bl	800b764 <__mdiff>
 800a47a:	68c2      	ldr	r2, [r0, #12]
 800a47c:	9b08      	ldr	r3, [sp, #32]
 800a47e:	4605      	mov	r5, r0
 800a480:	bb02      	cbnz	r2, 800a4c4 <_dtoa_r+0xa7c>
 800a482:	4601      	mov	r1, r0
 800a484:	4658      	mov	r0, fp
 800a486:	f001 f951 	bl	800b72c <__mcmp>
 800a48a:	9b08      	ldr	r3, [sp, #32]
 800a48c:	4602      	mov	r2, r0
 800a48e:	4629      	mov	r1, r5
 800a490:	4620      	mov	r0, r4
 800a492:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a496:	f000 fec1 	bl	800b21c <_Bfree>
 800a49a:	9b05      	ldr	r3, [sp, #20]
 800a49c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a49e:	9d01      	ldr	r5, [sp, #4]
 800a4a0:	ea43 0102 	orr.w	r1, r3, r2
 800a4a4:	9b06      	ldr	r3, [sp, #24]
 800a4a6:	430b      	orrs	r3, r1
 800a4a8:	9b08      	ldr	r3, [sp, #32]
 800a4aa:	d10d      	bne.n	800a4c8 <_dtoa_r+0xa80>
 800a4ac:	2b39      	cmp	r3, #57	; 0x39
 800a4ae:	d029      	beq.n	800a504 <_dtoa_r+0xabc>
 800a4b0:	f1b9 0f00 	cmp.w	r9, #0
 800a4b4:	dd01      	ble.n	800a4ba <_dtoa_r+0xa72>
 800a4b6:	9b04      	ldr	r3, [sp, #16]
 800a4b8:	3331      	adds	r3, #49	; 0x31
 800a4ba:	9a02      	ldr	r2, [sp, #8]
 800a4bc:	7013      	strb	r3, [r2, #0]
 800a4be:	e774      	b.n	800a3aa <_dtoa_r+0x962>
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	e7b9      	b.n	800a438 <_dtoa_r+0x9f0>
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	e7e2      	b.n	800a48e <_dtoa_r+0xa46>
 800a4c8:	f1b9 0f00 	cmp.w	r9, #0
 800a4cc:	db06      	blt.n	800a4dc <_dtoa_r+0xa94>
 800a4ce:	9905      	ldr	r1, [sp, #20]
 800a4d0:	ea41 0909 	orr.w	r9, r1, r9
 800a4d4:	9906      	ldr	r1, [sp, #24]
 800a4d6:	ea59 0101 	orrs.w	r1, r9, r1
 800a4da:	d120      	bne.n	800a51e <_dtoa_r+0xad6>
 800a4dc:	2a00      	cmp	r2, #0
 800a4de:	ddec      	ble.n	800a4ba <_dtoa_r+0xa72>
 800a4e0:	4659      	mov	r1, fp
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	9301      	str	r3, [sp, #4]
 800a4e8:	f001 f8b4 	bl	800b654 <__lshift>
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	4683      	mov	fp, r0
 800a4f0:	f001 f91c 	bl	800b72c <__mcmp>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	9b01      	ldr	r3, [sp, #4]
 800a4f8:	dc02      	bgt.n	800a500 <_dtoa_r+0xab8>
 800a4fa:	d1de      	bne.n	800a4ba <_dtoa_r+0xa72>
 800a4fc:	07da      	lsls	r2, r3, #31
 800a4fe:	d5dc      	bpl.n	800a4ba <_dtoa_r+0xa72>
 800a500:	2b39      	cmp	r3, #57	; 0x39
 800a502:	d1d8      	bne.n	800a4b6 <_dtoa_r+0xa6e>
 800a504:	9a02      	ldr	r2, [sp, #8]
 800a506:	2339      	movs	r3, #57	; 0x39
 800a508:	7013      	strb	r3, [r2, #0]
 800a50a:	462b      	mov	r3, r5
 800a50c:	461d      	mov	r5, r3
 800a50e:	3b01      	subs	r3, #1
 800a510:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a514:	2a39      	cmp	r2, #57	; 0x39
 800a516:	d050      	beq.n	800a5ba <_dtoa_r+0xb72>
 800a518:	3201      	adds	r2, #1
 800a51a:	701a      	strb	r2, [r3, #0]
 800a51c:	e745      	b.n	800a3aa <_dtoa_r+0x962>
 800a51e:	2a00      	cmp	r2, #0
 800a520:	dd03      	ble.n	800a52a <_dtoa_r+0xae2>
 800a522:	2b39      	cmp	r3, #57	; 0x39
 800a524:	d0ee      	beq.n	800a504 <_dtoa_r+0xabc>
 800a526:	3301      	adds	r3, #1
 800a528:	e7c7      	b.n	800a4ba <_dtoa_r+0xa72>
 800a52a:	9a01      	ldr	r2, [sp, #4]
 800a52c:	9907      	ldr	r1, [sp, #28]
 800a52e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a532:	428a      	cmp	r2, r1
 800a534:	d02a      	beq.n	800a58c <_dtoa_r+0xb44>
 800a536:	4659      	mov	r1, fp
 800a538:	2300      	movs	r3, #0
 800a53a:	220a      	movs	r2, #10
 800a53c:	4620      	mov	r0, r4
 800a53e:	f000 fe8f 	bl	800b260 <__multadd>
 800a542:	45b8      	cmp	r8, r7
 800a544:	4683      	mov	fp, r0
 800a546:	f04f 0300 	mov.w	r3, #0
 800a54a:	f04f 020a 	mov.w	r2, #10
 800a54e:	4641      	mov	r1, r8
 800a550:	4620      	mov	r0, r4
 800a552:	d107      	bne.n	800a564 <_dtoa_r+0xb1c>
 800a554:	f000 fe84 	bl	800b260 <__multadd>
 800a558:	4680      	mov	r8, r0
 800a55a:	4607      	mov	r7, r0
 800a55c:	9b01      	ldr	r3, [sp, #4]
 800a55e:	3301      	adds	r3, #1
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	e775      	b.n	800a450 <_dtoa_r+0xa08>
 800a564:	f000 fe7c 	bl	800b260 <__multadd>
 800a568:	4639      	mov	r1, r7
 800a56a:	4680      	mov	r8, r0
 800a56c:	2300      	movs	r3, #0
 800a56e:	220a      	movs	r2, #10
 800a570:	4620      	mov	r0, r4
 800a572:	f000 fe75 	bl	800b260 <__multadd>
 800a576:	4607      	mov	r7, r0
 800a578:	e7f0      	b.n	800a55c <_dtoa_r+0xb14>
 800a57a:	f1b9 0f00 	cmp.w	r9, #0
 800a57e:	9a00      	ldr	r2, [sp, #0]
 800a580:	bfcc      	ite	gt
 800a582:	464d      	movgt	r5, r9
 800a584:	2501      	movle	r5, #1
 800a586:	4415      	add	r5, r2
 800a588:	f04f 0800 	mov.w	r8, #0
 800a58c:	4659      	mov	r1, fp
 800a58e:	2201      	movs	r2, #1
 800a590:	4620      	mov	r0, r4
 800a592:	9301      	str	r3, [sp, #4]
 800a594:	f001 f85e 	bl	800b654 <__lshift>
 800a598:	4631      	mov	r1, r6
 800a59a:	4683      	mov	fp, r0
 800a59c:	f001 f8c6 	bl	800b72c <__mcmp>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	dcb2      	bgt.n	800a50a <_dtoa_r+0xac2>
 800a5a4:	d102      	bne.n	800a5ac <_dtoa_r+0xb64>
 800a5a6:	9b01      	ldr	r3, [sp, #4]
 800a5a8:	07db      	lsls	r3, r3, #31
 800a5aa:	d4ae      	bmi.n	800a50a <_dtoa_r+0xac2>
 800a5ac:	462b      	mov	r3, r5
 800a5ae:	461d      	mov	r5, r3
 800a5b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5b4:	2a30      	cmp	r2, #48	; 0x30
 800a5b6:	d0fa      	beq.n	800a5ae <_dtoa_r+0xb66>
 800a5b8:	e6f7      	b.n	800a3aa <_dtoa_r+0x962>
 800a5ba:	9a00      	ldr	r2, [sp, #0]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d1a5      	bne.n	800a50c <_dtoa_r+0xac4>
 800a5c0:	f10a 0a01 	add.w	sl, sl, #1
 800a5c4:	2331      	movs	r3, #49	; 0x31
 800a5c6:	e779      	b.n	800a4bc <_dtoa_r+0xa74>
 800a5c8:	4b13      	ldr	r3, [pc, #76]	; (800a618 <_dtoa_r+0xbd0>)
 800a5ca:	f7ff baaf 	b.w	8009b2c <_dtoa_r+0xe4>
 800a5ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f47f aa86 	bne.w	8009ae2 <_dtoa_r+0x9a>
 800a5d6:	4b11      	ldr	r3, [pc, #68]	; (800a61c <_dtoa_r+0xbd4>)
 800a5d8:	f7ff baa8 	b.w	8009b2c <_dtoa_r+0xe4>
 800a5dc:	f1b9 0f00 	cmp.w	r9, #0
 800a5e0:	dc03      	bgt.n	800a5ea <_dtoa_r+0xba2>
 800a5e2:	9b05      	ldr	r3, [sp, #20]
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	f73f aec9 	bgt.w	800a37c <_dtoa_r+0x934>
 800a5ea:	9d00      	ldr	r5, [sp, #0]
 800a5ec:	4631      	mov	r1, r6
 800a5ee:	4658      	mov	r0, fp
 800a5f0:	f7ff f99c 	bl	800992c <quorem>
 800a5f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a5f8:	f805 3b01 	strb.w	r3, [r5], #1
 800a5fc:	9a00      	ldr	r2, [sp, #0]
 800a5fe:	1aaa      	subs	r2, r5, r2
 800a600:	4591      	cmp	r9, r2
 800a602:	ddba      	ble.n	800a57a <_dtoa_r+0xb32>
 800a604:	4659      	mov	r1, fp
 800a606:	2300      	movs	r3, #0
 800a608:	220a      	movs	r2, #10
 800a60a:	4620      	mov	r0, r4
 800a60c:	f000 fe28 	bl	800b260 <__multadd>
 800a610:	4683      	mov	fp, r0
 800a612:	e7eb      	b.n	800a5ec <_dtoa_r+0xba4>
 800a614:	0800d8bc 	.word	0x0800d8bc
 800a618:	0800d6bc 	.word	0x0800d6bc
 800a61c:	0800d839 	.word	0x0800d839

0800a620 <__sflush_r>:
 800a620:	898a      	ldrh	r2, [r1, #12]
 800a622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a626:	4605      	mov	r5, r0
 800a628:	0710      	lsls	r0, r2, #28
 800a62a:	460c      	mov	r4, r1
 800a62c:	d458      	bmi.n	800a6e0 <__sflush_r+0xc0>
 800a62e:	684b      	ldr	r3, [r1, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	dc05      	bgt.n	800a640 <__sflush_r+0x20>
 800a634:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a636:	2b00      	cmp	r3, #0
 800a638:	dc02      	bgt.n	800a640 <__sflush_r+0x20>
 800a63a:	2000      	movs	r0, #0
 800a63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a642:	2e00      	cmp	r6, #0
 800a644:	d0f9      	beq.n	800a63a <__sflush_r+0x1a>
 800a646:	2300      	movs	r3, #0
 800a648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a64c:	682f      	ldr	r7, [r5, #0]
 800a64e:	602b      	str	r3, [r5, #0]
 800a650:	d032      	beq.n	800a6b8 <__sflush_r+0x98>
 800a652:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a654:	89a3      	ldrh	r3, [r4, #12]
 800a656:	075a      	lsls	r2, r3, #29
 800a658:	d505      	bpl.n	800a666 <__sflush_r+0x46>
 800a65a:	6863      	ldr	r3, [r4, #4]
 800a65c:	1ac0      	subs	r0, r0, r3
 800a65e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a660:	b10b      	cbz	r3, 800a666 <__sflush_r+0x46>
 800a662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a664:	1ac0      	subs	r0, r0, r3
 800a666:	2300      	movs	r3, #0
 800a668:	4602      	mov	r2, r0
 800a66a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a66c:	6a21      	ldr	r1, [r4, #32]
 800a66e:	4628      	mov	r0, r5
 800a670:	47b0      	blx	r6
 800a672:	1c43      	adds	r3, r0, #1
 800a674:	89a3      	ldrh	r3, [r4, #12]
 800a676:	d106      	bne.n	800a686 <__sflush_r+0x66>
 800a678:	6829      	ldr	r1, [r5, #0]
 800a67a:	291d      	cmp	r1, #29
 800a67c:	d82c      	bhi.n	800a6d8 <__sflush_r+0xb8>
 800a67e:	4a2a      	ldr	r2, [pc, #168]	; (800a728 <__sflush_r+0x108>)
 800a680:	40ca      	lsrs	r2, r1
 800a682:	07d6      	lsls	r6, r2, #31
 800a684:	d528      	bpl.n	800a6d8 <__sflush_r+0xb8>
 800a686:	2200      	movs	r2, #0
 800a688:	6062      	str	r2, [r4, #4]
 800a68a:	04d9      	lsls	r1, r3, #19
 800a68c:	6922      	ldr	r2, [r4, #16]
 800a68e:	6022      	str	r2, [r4, #0]
 800a690:	d504      	bpl.n	800a69c <__sflush_r+0x7c>
 800a692:	1c42      	adds	r2, r0, #1
 800a694:	d101      	bne.n	800a69a <__sflush_r+0x7a>
 800a696:	682b      	ldr	r3, [r5, #0]
 800a698:	b903      	cbnz	r3, 800a69c <__sflush_r+0x7c>
 800a69a:	6560      	str	r0, [r4, #84]	; 0x54
 800a69c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a69e:	602f      	str	r7, [r5, #0]
 800a6a0:	2900      	cmp	r1, #0
 800a6a2:	d0ca      	beq.n	800a63a <__sflush_r+0x1a>
 800a6a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6a8:	4299      	cmp	r1, r3
 800a6aa:	d002      	beq.n	800a6b2 <__sflush_r+0x92>
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	f7fd fb2f 	bl	8007d10 <_free_r>
 800a6b2:	2000      	movs	r0, #0
 800a6b4:	6360      	str	r0, [r4, #52]	; 0x34
 800a6b6:	e7c1      	b.n	800a63c <__sflush_r+0x1c>
 800a6b8:	6a21      	ldr	r1, [r4, #32]
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	4628      	mov	r0, r5
 800a6be:	47b0      	blx	r6
 800a6c0:	1c41      	adds	r1, r0, #1
 800a6c2:	d1c7      	bne.n	800a654 <__sflush_r+0x34>
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d0c4      	beq.n	800a654 <__sflush_r+0x34>
 800a6ca:	2b1d      	cmp	r3, #29
 800a6cc:	d001      	beq.n	800a6d2 <__sflush_r+0xb2>
 800a6ce:	2b16      	cmp	r3, #22
 800a6d0:	d101      	bne.n	800a6d6 <__sflush_r+0xb6>
 800a6d2:	602f      	str	r7, [r5, #0]
 800a6d4:	e7b1      	b.n	800a63a <__sflush_r+0x1a>
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6dc:	81a3      	strh	r3, [r4, #12]
 800a6de:	e7ad      	b.n	800a63c <__sflush_r+0x1c>
 800a6e0:	690f      	ldr	r7, [r1, #16]
 800a6e2:	2f00      	cmp	r7, #0
 800a6e4:	d0a9      	beq.n	800a63a <__sflush_r+0x1a>
 800a6e6:	0793      	lsls	r3, r2, #30
 800a6e8:	680e      	ldr	r6, [r1, #0]
 800a6ea:	bf08      	it	eq
 800a6ec:	694b      	ldreq	r3, [r1, #20]
 800a6ee:	600f      	str	r7, [r1, #0]
 800a6f0:	bf18      	it	ne
 800a6f2:	2300      	movne	r3, #0
 800a6f4:	eba6 0807 	sub.w	r8, r6, r7
 800a6f8:	608b      	str	r3, [r1, #8]
 800a6fa:	f1b8 0f00 	cmp.w	r8, #0
 800a6fe:	dd9c      	ble.n	800a63a <__sflush_r+0x1a>
 800a700:	6a21      	ldr	r1, [r4, #32]
 800a702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a704:	4643      	mov	r3, r8
 800a706:	463a      	mov	r2, r7
 800a708:	4628      	mov	r0, r5
 800a70a:	47b0      	blx	r6
 800a70c:	2800      	cmp	r0, #0
 800a70e:	dc06      	bgt.n	800a71e <__sflush_r+0xfe>
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a716:	81a3      	strh	r3, [r4, #12]
 800a718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a71c:	e78e      	b.n	800a63c <__sflush_r+0x1c>
 800a71e:	4407      	add	r7, r0
 800a720:	eba8 0800 	sub.w	r8, r8, r0
 800a724:	e7e9      	b.n	800a6fa <__sflush_r+0xda>
 800a726:	bf00      	nop
 800a728:	20400001 	.word	0x20400001

0800a72c <_fflush_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	690b      	ldr	r3, [r1, #16]
 800a730:	4605      	mov	r5, r0
 800a732:	460c      	mov	r4, r1
 800a734:	b913      	cbnz	r3, 800a73c <_fflush_r+0x10>
 800a736:	2500      	movs	r5, #0
 800a738:	4628      	mov	r0, r5
 800a73a:	bd38      	pop	{r3, r4, r5, pc}
 800a73c:	b118      	cbz	r0, 800a746 <_fflush_r+0x1a>
 800a73e:	6983      	ldr	r3, [r0, #24]
 800a740:	b90b      	cbnz	r3, 800a746 <_fflush_r+0x1a>
 800a742:	f000 f887 	bl	800a854 <__sinit>
 800a746:	4b14      	ldr	r3, [pc, #80]	; (800a798 <_fflush_r+0x6c>)
 800a748:	429c      	cmp	r4, r3
 800a74a:	d11b      	bne.n	800a784 <_fflush_r+0x58>
 800a74c:	686c      	ldr	r4, [r5, #4]
 800a74e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d0ef      	beq.n	800a736 <_fflush_r+0xa>
 800a756:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a758:	07d0      	lsls	r0, r2, #31
 800a75a:	d404      	bmi.n	800a766 <_fflush_r+0x3a>
 800a75c:	0599      	lsls	r1, r3, #22
 800a75e:	d402      	bmi.n	800a766 <_fflush_r+0x3a>
 800a760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a762:	f000 fc88 	bl	800b076 <__retarget_lock_acquire_recursive>
 800a766:	4628      	mov	r0, r5
 800a768:	4621      	mov	r1, r4
 800a76a:	f7ff ff59 	bl	800a620 <__sflush_r>
 800a76e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a770:	07da      	lsls	r2, r3, #31
 800a772:	4605      	mov	r5, r0
 800a774:	d4e0      	bmi.n	800a738 <_fflush_r+0xc>
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	059b      	lsls	r3, r3, #22
 800a77a:	d4dd      	bmi.n	800a738 <_fflush_r+0xc>
 800a77c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a77e:	f000 fc7b 	bl	800b078 <__retarget_lock_release_recursive>
 800a782:	e7d9      	b.n	800a738 <_fflush_r+0xc>
 800a784:	4b05      	ldr	r3, [pc, #20]	; (800a79c <_fflush_r+0x70>)
 800a786:	429c      	cmp	r4, r3
 800a788:	d101      	bne.n	800a78e <_fflush_r+0x62>
 800a78a:	68ac      	ldr	r4, [r5, #8]
 800a78c:	e7df      	b.n	800a74e <_fflush_r+0x22>
 800a78e:	4b04      	ldr	r3, [pc, #16]	; (800a7a0 <_fflush_r+0x74>)
 800a790:	429c      	cmp	r4, r3
 800a792:	bf08      	it	eq
 800a794:	68ec      	ldreq	r4, [r5, #12]
 800a796:	e7da      	b.n	800a74e <_fflush_r+0x22>
 800a798:	0800d8f0 	.word	0x0800d8f0
 800a79c:	0800d910 	.word	0x0800d910
 800a7a0:	0800d8d0 	.word	0x0800d8d0

0800a7a4 <std>:
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	b510      	push	{r4, lr}
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	e9c0 3300 	strd	r3, r3, [r0]
 800a7ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7b2:	6083      	str	r3, [r0, #8]
 800a7b4:	8181      	strh	r1, [r0, #12]
 800a7b6:	6643      	str	r3, [r0, #100]	; 0x64
 800a7b8:	81c2      	strh	r2, [r0, #14]
 800a7ba:	6183      	str	r3, [r0, #24]
 800a7bc:	4619      	mov	r1, r3
 800a7be:	2208      	movs	r2, #8
 800a7c0:	305c      	adds	r0, #92	; 0x5c
 800a7c2:	f7fd fa8d 	bl	8007ce0 <memset>
 800a7c6:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <std+0x38>)
 800a7c8:	6263      	str	r3, [r4, #36]	; 0x24
 800a7ca:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <std+0x3c>)
 800a7cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7ce:	4b05      	ldr	r3, [pc, #20]	; (800a7e4 <std+0x40>)
 800a7d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7d2:	4b05      	ldr	r3, [pc, #20]	; (800a7e8 <std+0x44>)
 800a7d4:	6224      	str	r4, [r4, #32]
 800a7d6:	6323      	str	r3, [r4, #48]	; 0x30
 800a7d8:	bd10      	pop	{r4, pc}
 800a7da:	bf00      	nop
 800a7dc:	0800bdd9 	.word	0x0800bdd9
 800a7e0:	0800bdfb 	.word	0x0800bdfb
 800a7e4:	0800be33 	.word	0x0800be33
 800a7e8:	0800be57 	.word	0x0800be57

0800a7ec <_cleanup_r>:
 800a7ec:	4901      	ldr	r1, [pc, #4]	; (800a7f4 <_cleanup_r+0x8>)
 800a7ee:	f000 b8af 	b.w	800a950 <_fwalk_reent>
 800a7f2:	bf00      	nop
 800a7f4:	0800a72d 	.word	0x0800a72d

0800a7f8 <__sfmoreglue>:
 800a7f8:	b570      	push	{r4, r5, r6, lr}
 800a7fa:	1e4a      	subs	r2, r1, #1
 800a7fc:	2568      	movs	r5, #104	; 0x68
 800a7fe:	4355      	muls	r5, r2
 800a800:	460e      	mov	r6, r1
 800a802:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a806:	f7fd fad3 	bl	8007db0 <_malloc_r>
 800a80a:	4604      	mov	r4, r0
 800a80c:	b140      	cbz	r0, 800a820 <__sfmoreglue+0x28>
 800a80e:	2100      	movs	r1, #0
 800a810:	e9c0 1600 	strd	r1, r6, [r0]
 800a814:	300c      	adds	r0, #12
 800a816:	60a0      	str	r0, [r4, #8]
 800a818:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a81c:	f7fd fa60 	bl	8007ce0 <memset>
 800a820:	4620      	mov	r0, r4
 800a822:	bd70      	pop	{r4, r5, r6, pc}

0800a824 <__sfp_lock_acquire>:
 800a824:	4801      	ldr	r0, [pc, #4]	; (800a82c <__sfp_lock_acquire+0x8>)
 800a826:	f000 bc26 	b.w	800b076 <__retarget_lock_acquire_recursive>
 800a82a:	bf00      	nop
 800a82c:	20000838 	.word	0x20000838

0800a830 <__sfp_lock_release>:
 800a830:	4801      	ldr	r0, [pc, #4]	; (800a838 <__sfp_lock_release+0x8>)
 800a832:	f000 bc21 	b.w	800b078 <__retarget_lock_release_recursive>
 800a836:	bf00      	nop
 800a838:	20000838 	.word	0x20000838

0800a83c <__sinit_lock_acquire>:
 800a83c:	4801      	ldr	r0, [pc, #4]	; (800a844 <__sinit_lock_acquire+0x8>)
 800a83e:	f000 bc1a 	b.w	800b076 <__retarget_lock_acquire_recursive>
 800a842:	bf00      	nop
 800a844:	20000833 	.word	0x20000833

0800a848 <__sinit_lock_release>:
 800a848:	4801      	ldr	r0, [pc, #4]	; (800a850 <__sinit_lock_release+0x8>)
 800a84a:	f000 bc15 	b.w	800b078 <__retarget_lock_release_recursive>
 800a84e:	bf00      	nop
 800a850:	20000833 	.word	0x20000833

0800a854 <__sinit>:
 800a854:	b510      	push	{r4, lr}
 800a856:	4604      	mov	r4, r0
 800a858:	f7ff fff0 	bl	800a83c <__sinit_lock_acquire>
 800a85c:	69a3      	ldr	r3, [r4, #24]
 800a85e:	b11b      	cbz	r3, 800a868 <__sinit+0x14>
 800a860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a864:	f7ff bff0 	b.w	800a848 <__sinit_lock_release>
 800a868:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a86c:	6523      	str	r3, [r4, #80]	; 0x50
 800a86e:	4b13      	ldr	r3, [pc, #76]	; (800a8bc <__sinit+0x68>)
 800a870:	4a13      	ldr	r2, [pc, #76]	; (800a8c0 <__sinit+0x6c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	62a2      	str	r2, [r4, #40]	; 0x28
 800a876:	42a3      	cmp	r3, r4
 800a878:	bf04      	itt	eq
 800a87a:	2301      	moveq	r3, #1
 800a87c:	61a3      	streq	r3, [r4, #24]
 800a87e:	4620      	mov	r0, r4
 800a880:	f000 f820 	bl	800a8c4 <__sfp>
 800a884:	6060      	str	r0, [r4, #4]
 800a886:	4620      	mov	r0, r4
 800a888:	f000 f81c 	bl	800a8c4 <__sfp>
 800a88c:	60a0      	str	r0, [r4, #8]
 800a88e:	4620      	mov	r0, r4
 800a890:	f000 f818 	bl	800a8c4 <__sfp>
 800a894:	2200      	movs	r2, #0
 800a896:	60e0      	str	r0, [r4, #12]
 800a898:	2104      	movs	r1, #4
 800a89a:	6860      	ldr	r0, [r4, #4]
 800a89c:	f7ff ff82 	bl	800a7a4 <std>
 800a8a0:	68a0      	ldr	r0, [r4, #8]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	2109      	movs	r1, #9
 800a8a6:	f7ff ff7d 	bl	800a7a4 <std>
 800a8aa:	68e0      	ldr	r0, [r4, #12]
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	2112      	movs	r1, #18
 800a8b0:	f7ff ff78 	bl	800a7a4 <std>
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	61a3      	str	r3, [r4, #24]
 800a8b8:	e7d2      	b.n	800a860 <__sinit+0xc>
 800a8ba:	bf00      	nop
 800a8bc:	0800d6a8 	.word	0x0800d6a8
 800a8c0:	0800a7ed 	.word	0x0800a7ed

0800a8c4 <__sfp>:
 800a8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c6:	4607      	mov	r7, r0
 800a8c8:	f7ff ffac 	bl	800a824 <__sfp_lock_acquire>
 800a8cc:	4b1e      	ldr	r3, [pc, #120]	; (800a948 <__sfp+0x84>)
 800a8ce:	681e      	ldr	r6, [r3, #0]
 800a8d0:	69b3      	ldr	r3, [r6, #24]
 800a8d2:	b913      	cbnz	r3, 800a8da <__sfp+0x16>
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	f7ff ffbd 	bl	800a854 <__sinit>
 800a8da:	3648      	adds	r6, #72	; 0x48
 800a8dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	d503      	bpl.n	800a8ec <__sfp+0x28>
 800a8e4:	6833      	ldr	r3, [r6, #0]
 800a8e6:	b30b      	cbz	r3, 800a92c <__sfp+0x68>
 800a8e8:	6836      	ldr	r6, [r6, #0]
 800a8ea:	e7f7      	b.n	800a8dc <__sfp+0x18>
 800a8ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a8f0:	b9d5      	cbnz	r5, 800a928 <__sfp+0x64>
 800a8f2:	4b16      	ldr	r3, [pc, #88]	; (800a94c <__sfp+0x88>)
 800a8f4:	60e3      	str	r3, [r4, #12]
 800a8f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8fa:	6665      	str	r5, [r4, #100]	; 0x64
 800a8fc:	f000 fbba 	bl	800b074 <__retarget_lock_init_recursive>
 800a900:	f7ff ff96 	bl	800a830 <__sfp_lock_release>
 800a904:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a908:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a90c:	6025      	str	r5, [r4, #0]
 800a90e:	61a5      	str	r5, [r4, #24]
 800a910:	2208      	movs	r2, #8
 800a912:	4629      	mov	r1, r5
 800a914:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a918:	f7fd f9e2 	bl	8007ce0 <memset>
 800a91c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a920:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a924:	4620      	mov	r0, r4
 800a926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a928:	3468      	adds	r4, #104	; 0x68
 800a92a:	e7d9      	b.n	800a8e0 <__sfp+0x1c>
 800a92c:	2104      	movs	r1, #4
 800a92e:	4638      	mov	r0, r7
 800a930:	f7ff ff62 	bl	800a7f8 <__sfmoreglue>
 800a934:	4604      	mov	r4, r0
 800a936:	6030      	str	r0, [r6, #0]
 800a938:	2800      	cmp	r0, #0
 800a93a:	d1d5      	bne.n	800a8e8 <__sfp+0x24>
 800a93c:	f7ff ff78 	bl	800a830 <__sfp_lock_release>
 800a940:	230c      	movs	r3, #12
 800a942:	603b      	str	r3, [r7, #0]
 800a944:	e7ee      	b.n	800a924 <__sfp+0x60>
 800a946:	bf00      	nop
 800a948:	0800d6a8 	.word	0x0800d6a8
 800a94c:	ffff0001 	.word	0xffff0001

0800a950 <_fwalk_reent>:
 800a950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a954:	4606      	mov	r6, r0
 800a956:	4688      	mov	r8, r1
 800a958:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a95c:	2700      	movs	r7, #0
 800a95e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a962:	f1b9 0901 	subs.w	r9, r9, #1
 800a966:	d505      	bpl.n	800a974 <_fwalk_reent+0x24>
 800a968:	6824      	ldr	r4, [r4, #0]
 800a96a:	2c00      	cmp	r4, #0
 800a96c:	d1f7      	bne.n	800a95e <_fwalk_reent+0xe>
 800a96e:	4638      	mov	r0, r7
 800a970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a974:	89ab      	ldrh	r3, [r5, #12]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d907      	bls.n	800a98a <_fwalk_reent+0x3a>
 800a97a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a97e:	3301      	adds	r3, #1
 800a980:	d003      	beq.n	800a98a <_fwalk_reent+0x3a>
 800a982:	4629      	mov	r1, r5
 800a984:	4630      	mov	r0, r6
 800a986:	47c0      	blx	r8
 800a988:	4307      	orrs	r7, r0
 800a98a:	3568      	adds	r5, #104	; 0x68
 800a98c:	e7e9      	b.n	800a962 <_fwalk_reent+0x12>

0800a98e <rshift>:
 800a98e:	6903      	ldr	r3, [r0, #16]
 800a990:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a998:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a99c:	f100 0414 	add.w	r4, r0, #20
 800a9a0:	dd45      	ble.n	800aa2e <rshift+0xa0>
 800a9a2:	f011 011f 	ands.w	r1, r1, #31
 800a9a6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a9aa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9ae:	d10c      	bne.n	800a9ca <rshift+0x3c>
 800a9b0:	f100 0710 	add.w	r7, r0, #16
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	42b1      	cmp	r1, r6
 800a9b8:	d334      	bcc.n	800aa24 <rshift+0x96>
 800a9ba:	1a9b      	subs	r3, r3, r2
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	1eea      	subs	r2, r5, #3
 800a9c0:	4296      	cmp	r6, r2
 800a9c2:	bf38      	it	cc
 800a9c4:	2300      	movcc	r3, #0
 800a9c6:	4423      	add	r3, r4
 800a9c8:	e015      	b.n	800a9f6 <rshift+0x68>
 800a9ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a9ce:	f1c1 0820 	rsb	r8, r1, #32
 800a9d2:	40cf      	lsrs	r7, r1
 800a9d4:	f105 0e04 	add.w	lr, r5, #4
 800a9d8:	46a1      	mov	r9, r4
 800a9da:	4576      	cmp	r6, lr
 800a9dc:	46f4      	mov	ip, lr
 800a9de:	d815      	bhi.n	800aa0c <rshift+0x7e>
 800a9e0:	1a9b      	subs	r3, r3, r2
 800a9e2:	009a      	lsls	r2, r3, #2
 800a9e4:	3a04      	subs	r2, #4
 800a9e6:	3501      	adds	r5, #1
 800a9e8:	42ae      	cmp	r6, r5
 800a9ea:	bf38      	it	cc
 800a9ec:	2200      	movcc	r2, #0
 800a9ee:	18a3      	adds	r3, r4, r2
 800a9f0:	50a7      	str	r7, [r4, r2]
 800a9f2:	b107      	cbz	r7, 800a9f6 <rshift+0x68>
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	1b1a      	subs	r2, r3, r4
 800a9f8:	42a3      	cmp	r3, r4
 800a9fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a9fe:	bf08      	it	eq
 800aa00:	2300      	moveq	r3, #0
 800aa02:	6102      	str	r2, [r0, #16]
 800aa04:	bf08      	it	eq
 800aa06:	6143      	streq	r3, [r0, #20]
 800aa08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa0c:	f8dc c000 	ldr.w	ip, [ip]
 800aa10:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa14:	ea4c 0707 	orr.w	r7, ip, r7
 800aa18:	f849 7b04 	str.w	r7, [r9], #4
 800aa1c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa20:	40cf      	lsrs	r7, r1
 800aa22:	e7da      	b.n	800a9da <rshift+0x4c>
 800aa24:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa28:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa2c:	e7c3      	b.n	800a9b6 <rshift+0x28>
 800aa2e:	4623      	mov	r3, r4
 800aa30:	e7e1      	b.n	800a9f6 <rshift+0x68>

0800aa32 <__hexdig_fun>:
 800aa32:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aa36:	2b09      	cmp	r3, #9
 800aa38:	d802      	bhi.n	800aa40 <__hexdig_fun+0xe>
 800aa3a:	3820      	subs	r0, #32
 800aa3c:	b2c0      	uxtb	r0, r0
 800aa3e:	4770      	bx	lr
 800aa40:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aa44:	2b05      	cmp	r3, #5
 800aa46:	d801      	bhi.n	800aa4c <__hexdig_fun+0x1a>
 800aa48:	3847      	subs	r0, #71	; 0x47
 800aa4a:	e7f7      	b.n	800aa3c <__hexdig_fun+0xa>
 800aa4c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aa50:	2b05      	cmp	r3, #5
 800aa52:	d801      	bhi.n	800aa58 <__hexdig_fun+0x26>
 800aa54:	3827      	subs	r0, #39	; 0x27
 800aa56:	e7f1      	b.n	800aa3c <__hexdig_fun+0xa>
 800aa58:	2000      	movs	r0, #0
 800aa5a:	4770      	bx	lr

0800aa5c <__gethex>:
 800aa5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa60:	ed2d 8b02 	vpush	{d8}
 800aa64:	b089      	sub	sp, #36	; 0x24
 800aa66:	ee08 0a10 	vmov	s16, r0
 800aa6a:	9304      	str	r3, [sp, #16]
 800aa6c:	4bbc      	ldr	r3, [pc, #752]	; (800ad60 <__gethex+0x304>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	9301      	str	r3, [sp, #4]
 800aa72:	4618      	mov	r0, r3
 800aa74:	468b      	mov	fp, r1
 800aa76:	4690      	mov	r8, r2
 800aa78:	f7f5 fbca 	bl	8000210 <strlen>
 800aa7c:	9b01      	ldr	r3, [sp, #4]
 800aa7e:	f8db 2000 	ldr.w	r2, [fp]
 800aa82:	4403      	add	r3, r0
 800aa84:	4682      	mov	sl, r0
 800aa86:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aa8a:	9305      	str	r3, [sp, #20]
 800aa8c:	1c93      	adds	r3, r2, #2
 800aa8e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aa92:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aa96:	32fe      	adds	r2, #254	; 0xfe
 800aa98:	18d1      	adds	r1, r2, r3
 800aa9a:	461f      	mov	r7, r3
 800aa9c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aaa0:	9100      	str	r1, [sp, #0]
 800aaa2:	2830      	cmp	r0, #48	; 0x30
 800aaa4:	d0f8      	beq.n	800aa98 <__gethex+0x3c>
 800aaa6:	f7ff ffc4 	bl	800aa32 <__hexdig_fun>
 800aaaa:	4604      	mov	r4, r0
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d13a      	bne.n	800ab26 <__gethex+0xca>
 800aab0:	9901      	ldr	r1, [sp, #4]
 800aab2:	4652      	mov	r2, sl
 800aab4:	4638      	mov	r0, r7
 800aab6:	f001 f9d2 	bl	800be5e <strncmp>
 800aaba:	4605      	mov	r5, r0
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d168      	bne.n	800ab92 <__gethex+0x136>
 800aac0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800aac4:	eb07 060a 	add.w	r6, r7, sl
 800aac8:	f7ff ffb3 	bl	800aa32 <__hexdig_fun>
 800aacc:	2800      	cmp	r0, #0
 800aace:	d062      	beq.n	800ab96 <__gethex+0x13a>
 800aad0:	4633      	mov	r3, r6
 800aad2:	7818      	ldrb	r0, [r3, #0]
 800aad4:	2830      	cmp	r0, #48	; 0x30
 800aad6:	461f      	mov	r7, r3
 800aad8:	f103 0301 	add.w	r3, r3, #1
 800aadc:	d0f9      	beq.n	800aad2 <__gethex+0x76>
 800aade:	f7ff ffa8 	bl	800aa32 <__hexdig_fun>
 800aae2:	2301      	movs	r3, #1
 800aae4:	fab0 f480 	clz	r4, r0
 800aae8:	0964      	lsrs	r4, r4, #5
 800aaea:	4635      	mov	r5, r6
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	463a      	mov	r2, r7
 800aaf0:	4616      	mov	r6, r2
 800aaf2:	3201      	adds	r2, #1
 800aaf4:	7830      	ldrb	r0, [r6, #0]
 800aaf6:	f7ff ff9c 	bl	800aa32 <__hexdig_fun>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d1f8      	bne.n	800aaf0 <__gethex+0x94>
 800aafe:	9901      	ldr	r1, [sp, #4]
 800ab00:	4652      	mov	r2, sl
 800ab02:	4630      	mov	r0, r6
 800ab04:	f001 f9ab 	bl	800be5e <strncmp>
 800ab08:	b980      	cbnz	r0, 800ab2c <__gethex+0xd0>
 800ab0a:	b94d      	cbnz	r5, 800ab20 <__gethex+0xc4>
 800ab0c:	eb06 050a 	add.w	r5, r6, sl
 800ab10:	462a      	mov	r2, r5
 800ab12:	4616      	mov	r6, r2
 800ab14:	3201      	adds	r2, #1
 800ab16:	7830      	ldrb	r0, [r6, #0]
 800ab18:	f7ff ff8b 	bl	800aa32 <__hexdig_fun>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d1f8      	bne.n	800ab12 <__gethex+0xb6>
 800ab20:	1bad      	subs	r5, r5, r6
 800ab22:	00ad      	lsls	r5, r5, #2
 800ab24:	e004      	b.n	800ab30 <__gethex+0xd4>
 800ab26:	2400      	movs	r4, #0
 800ab28:	4625      	mov	r5, r4
 800ab2a:	e7e0      	b.n	800aaee <__gethex+0x92>
 800ab2c:	2d00      	cmp	r5, #0
 800ab2e:	d1f7      	bne.n	800ab20 <__gethex+0xc4>
 800ab30:	7833      	ldrb	r3, [r6, #0]
 800ab32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab36:	2b50      	cmp	r3, #80	; 0x50
 800ab38:	d13b      	bne.n	800abb2 <__gethex+0x156>
 800ab3a:	7873      	ldrb	r3, [r6, #1]
 800ab3c:	2b2b      	cmp	r3, #43	; 0x2b
 800ab3e:	d02c      	beq.n	800ab9a <__gethex+0x13e>
 800ab40:	2b2d      	cmp	r3, #45	; 0x2d
 800ab42:	d02e      	beq.n	800aba2 <__gethex+0x146>
 800ab44:	1c71      	adds	r1, r6, #1
 800ab46:	f04f 0900 	mov.w	r9, #0
 800ab4a:	7808      	ldrb	r0, [r1, #0]
 800ab4c:	f7ff ff71 	bl	800aa32 <__hexdig_fun>
 800ab50:	1e43      	subs	r3, r0, #1
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	2b18      	cmp	r3, #24
 800ab56:	d82c      	bhi.n	800abb2 <__gethex+0x156>
 800ab58:	f1a0 0210 	sub.w	r2, r0, #16
 800ab5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab60:	f7ff ff67 	bl	800aa32 <__hexdig_fun>
 800ab64:	1e43      	subs	r3, r0, #1
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b18      	cmp	r3, #24
 800ab6a:	d91d      	bls.n	800aba8 <__gethex+0x14c>
 800ab6c:	f1b9 0f00 	cmp.w	r9, #0
 800ab70:	d000      	beq.n	800ab74 <__gethex+0x118>
 800ab72:	4252      	negs	r2, r2
 800ab74:	4415      	add	r5, r2
 800ab76:	f8cb 1000 	str.w	r1, [fp]
 800ab7a:	b1e4      	cbz	r4, 800abb6 <__gethex+0x15a>
 800ab7c:	9b00      	ldr	r3, [sp, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	bf14      	ite	ne
 800ab82:	2700      	movne	r7, #0
 800ab84:	2706      	moveq	r7, #6
 800ab86:	4638      	mov	r0, r7
 800ab88:	b009      	add	sp, #36	; 0x24
 800ab8a:	ecbd 8b02 	vpop	{d8}
 800ab8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab92:	463e      	mov	r6, r7
 800ab94:	4625      	mov	r5, r4
 800ab96:	2401      	movs	r4, #1
 800ab98:	e7ca      	b.n	800ab30 <__gethex+0xd4>
 800ab9a:	f04f 0900 	mov.w	r9, #0
 800ab9e:	1cb1      	adds	r1, r6, #2
 800aba0:	e7d3      	b.n	800ab4a <__gethex+0xee>
 800aba2:	f04f 0901 	mov.w	r9, #1
 800aba6:	e7fa      	b.n	800ab9e <__gethex+0x142>
 800aba8:	230a      	movs	r3, #10
 800abaa:	fb03 0202 	mla	r2, r3, r2, r0
 800abae:	3a10      	subs	r2, #16
 800abb0:	e7d4      	b.n	800ab5c <__gethex+0x100>
 800abb2:	4631      	mov	r1, r6
 800abb4:	e7df      	b.n	800ab76 <__gethex+0x11a>
 800abb6:	1bf3      	subs	r3, r6, r7
 800abb8:	3b01      	subs	r3, #1
 800abba:	4621      	mov	r1, r4
 800abbc:	2b07      	cmp	r3, #7
 800abbe:	dc0b      	bgt.n	800abd8 <__gethex+0x17c>
 800abc0:	ee18 0a10 	vmov	r0, s16
 800abc4:	f000 faea 	bl	800b19c <_Balloc>
 800abc8:	4604      	mov	r4, r0
 800abca:	b940      	cbnz	r0, 800abde <__gethex+0x182>
 800abcc:	4b65      	ldr	r3, [pc, #404]	; (800ad64 <__gethex+0x308>)
 800abce:	4602      	mov	r2, r0
 800abd0:	21de      	movs	r1, #222	; 0xde
 800abd2:	4865      	ldr	r0, [pc, #404]	; (800ad68 <__gethex+0x30c>)
 800abd4:	f001 f974 	bl	800bec0 <__assert_func>
 800abd8:	3101      	adds	r1, #1
 800abda:	105b      	asrs	r3, r3, #1
 800abdc:	e7ee      	b.n	800abbc <__gethex+0x160>
 800abde:	f100 0914 	add.w	r9, r0, #20
 800abe2:	f04f 0b00 	mov.w	fp, #0
 800abe6:	f1ca 0301 	rsb	r3, sl, #1
 800abea:	f8cd 9008 	str.w	r9, [sp, #8]
 800abee:	f8cd b000 	str.w	fp, [sp]
 800abf2:	9306      	str	r3, [sp, #24]
 800abf4:	42b7      	cmp	r7, r6
 800abf6:	d340      	bcc.n	800ac7a <__gethex+0x21e>
 800abf8:	9802      	ldr	r0, [sp, #8]
 800abfa:	9b00      	ldr	r3, [sp, #0]
 800abfc:	f840 3b04 	str.w	r3, [r0], #4
 800ac00:	eba0 0009 	sub.w	r0, r0, r9
 800ac04:	1080      	asrs	r0, r0, #2
 800ac06:	0146      	lsls	r6, r0, #5
 800ac08:	6120      	str	r0, [r4, #16]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 fbbc 	bl	800b388 <__hi0bits>
 800ac10:	1a30      	subs	r0, r6, r0
 800ac12:	f8d8 6000 	ldr.w	r6, [r8]
 800ac16:	42b0      	cmp	r0, r6
 800ac18:	dd63      	ble.n	800ace2 <__gethex+0x286>
 800ac1a:	1b87      	subs	r7, r0, r6
 800ac1c:	4639      	mov	r1, r7
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f000 ff56 	bl	800bad0 <__any_on>
 800ac24:	4682      	mov	sl, r0
 800ac26:	b1a8      	cbz	r0, 800ac54 <__gethex+0x1f8>
 800ac28:	1e7b      	subs	r3, r7, #1
 800ac2a:	1159      	asrs	r1, r3, #5
 800ac2c:	f003 021f 	and.w	r2, r3, #31
 800ac30:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ac34:	f04f 0a01 	mov.w	sl, #1
 800ac38:	fa0a f202 	lsl.w	r2, sl, r2
 800ac3c:	420a      	tst	r2, r1
 800ac3e:	d009      	beq.n	800ac54 <__gethex+0x1f8>
 800ac40:	4553      	cmp	r3, sl
 800ac42:	dd05      	ble.n	800ac50 <__gethex+0x1f4>
 800ac44:	1eb9      	subs	r1, r7, #2
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 ff42 	bl	800bad0 <__any_on>
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	d145      	bne.n	800acdc <__gethex+0x280>
 800ac50:	f04f 0a02 	mov.w	sl, #2
 800ac54:	4639      	mov	r1, r7
 800ac56:	4620      	mov	r0, r4
 800ac58:	f7ff fe99 	bl	800a98e <rshift>
 800ac5c:	443d      	add	r5, r7
 800ac5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac62:	42ab      	cmp	r3, r5
 800ac64:	da4c      	bge.n	800ad00 <__gethex+0x2a4>
 800ac66:	ee18 0a10 	vmov	r0, s16
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	f000 fad6 	bl	800b21c <_Bfree>
 800ac70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac72:	2300      	movs	r3, #0
 800ac74:	6013      	str	r3, [r2, #0]
 800ac76:	27a3      	movs	r7, #163	; 0xa3
 800ac78:	e785      	b.n	800ab86 <__gethex+0x12a>
 800ac7a:	1e73      	subs	r3, r6, #1
 800ac7c:	9a05      	ldr	r2, [sp, #20]
 800ac7e:	9303      	str	r3, [sp, #12]
 800ac80:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d019      	beq.n	800acbc <__gethex+0x260>
 800ac88:	f1bb 0f20 	cmp.w	fp, #32
 800ac8c:	d107      	bne.n	800ac9e <__gethex+0x242>
 800ac8e:	9b02      	ldr	r3, [sp, #8]
 800ac90:	9a00      	ldr	r2, [sp, #0]
 800ac92:	f843 2b04 	str.w	r2, [r3], #4
 800ac96:	9302      	str	r3, [sp, #8]
 800ac98:	2300      	movs	r3, #0
 800ac9a:	9300      	str	r3, [sp, #0]
 800ac9c:	469b      	mov	fp, r3
 800ac9e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aca2:	f7ff fec6 	bl	800aa32 <__hexdig_fun>
 800aca6:	9b00      	ldr	r3, [sp, #0]
 800aca8:	f000 000f 	and.w	r0, r0, #15
 800acac:	fa00 f00b 	lsl.w	r0, r0, fp
 800acb0:	4303      	orrs	r3, r0
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	f10b 0b04 	add.w	fp, fp, #4
 800acb8:	9b03      	ldr	r3, [sp, #12]
 800acba:	e00d      	b.n	800acd8 <__gethex+0x27c>
 800acbc:	9b03      	ldr	r3, [sp, #12]
 800acbe:	9a06      	ldr	r2, [sp, #24]
 800acc0:	4413      	add	r3, r2
 800acc2:	42bb      	cmp	r3, r7
 800acc4:	d3e0      	bcc.n	800ac88 <__gethex+0x22c>
 800acc6:	4618      	mov	r0, r3
 800acc8:	9901      	ldr	r1, [sp, #4]
 800acca:	9307      	str	r3, [sp, #28]
 800accc:	4652      	mov	r2, sl
 800acce:	f001 f8c6 	bl	800be5e <strncmp>
 800acd2:	9b07      	ldr	r3, [sp, #28]
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d1d7      	bne.n	800ac88 <__gethex+0x22c>
 800acd8:	461e      	mov	r6, r3
 800acda:	e78b      	b.n	800abf4 <__gethex+0x198>
 800acdc:	f04f 0a03 	mov.w	sl, #3
 800ace0:	e7b8      	b.n	800ac54 <__gethex+0x1f8>
 800ace2:	da0a      	bge.n	800acfa <__gethex+0x29e>
 800ace4:	1a37      	subs	r7, r6, r0
 800ace6:	4621      	mov	r1, r4
 800ace8:	ee18 0a10 	vmov	r0, s16
 800acec:	463a      	mov	r2, r7
 800acee:	f000 fcb1 	bl	800b654 <__lshift>
 800acf2:	1bed      	subs	r5, r5, r7
 800acf4:	4604      	mov	r4, r0
 800acf6:	f100 0914 	add.w	r9, r0, #20
 800acfa:	f04f 0a00 	mov.w	sl, #0
 800acfe:	e7ae      	b.n	800ac5e <__gethex+0x202>
 800ad00:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ad04:	42a8      	cmp	r0, r5
 800ad06:	dd72      	ble.n	800adee <__gethex+0x392>
 800ad08:	1b45      	subs	r5, r0, r5
 800ad0a:	42ae      	cmp	r6, r5
 800ad0c:	dc36      	bgt.n	800ad7c <__gethex+0x320>
 800ad0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d02a      	beq.n	800ad6c <__gethex+0x310>
 800ad16:	2b03      	cmp	r3, #3
 800ad18:	d02c      	beq.n	800ad74 <__gethex+0x318>
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d115      	bne.n	800ad4a <__gethex+0x2ee>
 800ad1e:	42ae      	cmp	r6, r5
 800ad20:	d113      	bne.n	800ad4a <__gethex+0x2ee>
 800ad22:	2e01      	cmp	r6, #1
 800ad24:	d10b      	bne.n	800ad3e <__gethex+0x2e2>
 800ad26:	9a04      	ldr	r2, [sp, #16]
 800ad28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ad2c:	6013      	str	r3, [r2, #0]
 800ad2e:	2301      	movs	r3, #1
 800ad30:	6123      	str	r3, [r4, #16]
 800ad32:	f8c9 3000 	str.w	r3, [r9]
 800ad36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad38:	2762      	movs	r7, #98	; 0x62
 800ad3a:	601c      	str	r4, [r3, #0]
 800ad3c:	e723      	b.n	800ab86 <__gethex+0x12a>
 800ad3e:	1e71      	subs	r1, r6, #1
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 fec5 	bl	800bad0 <__any_on>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d1ed      	bne.n	800ad26 <__gethex+0x2ca>
 800ad4a:	ee18 0a10 	vmov	r0, s16
 800ad4e:	4621      	mov	r1, r4
 800ad50:	f000 fa64 	bl	800b21c <_Bfree>
 800ad54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad56:	2300      	movs	r3, #0
 800ad58:	6013      	str	r3, [r2, #0]
 800ad5a:	2750      	movs	r7, #80	; 0x50
 800ad5c:	e713      	b.n	800ab86 <__gethex+0x12a>
 800ad5e:	bf00      	nop
 800ad60:	0800d99c 	.word	0x0800d99c
 800ad64:	0800d8bc 	.word	0x0800d8bc
 800ad68:	0800d930 	.word	0x0800d930
 800ad6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1eb      	bne.n	800ad4a <__gethex+0x2ee>
 800ad72:	e7d8      	b.n	800ad26 <__gethex+0x2ca>
 800ad74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1d5      	bne.n	800ad26 <__gethex+0x2ca>
 800ad7a:	e7e6      	b.n	800ad4a <__gethex+0x2ee>
 800ad7c:	1e6f      	subs	r7, r5, #1
 800ad7e:	f1ba 0f00 	cmp.w	sl, #0
 800ad82:	d131      	bne.n	800ade8 <__gethex+0x38c>
 800ad84:	b127      	cbz	r7, 800ad90 <__gethex+0x334>
 800ad86:	4639      	mov	r1, r7
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f000 fea1 	bl	800bad0 <__any_on>
 800ad8e:	4682      	mov	sl, r0
 800ad90:	117b      	asrs	r3, r7, #5
 800ad92:	2101      	movs	r1, #1
 800ad94:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ad98:	f007 071f 	and.w	r7, r7, #31
 800ad9c:	fa01 f707 	lsl.w	r7, r1, r7
 800ada0:	421f      	tst	r7, r3
 800ada2:	4629      	mov	r1, r5
 800ada4:	4620      	mov	r0, r4
 800ada6:	bf18      	it	ne
 800ada8:	f04a 0a02 	orrne.w	sl, sl, #2
 800adac:	1b76      	subs	r6, r6, r5
 800adae:	f7ff fdee 	bl	800a98e <rshift>
 800adb2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800adb6:	2702      	movs	r7, #2
 800adb8:	f1ba 0f00 	cmp.w	sl, #0
 800adbc:	d048      	beq.n	800ae50 <__gethex+0x3f4>
 800adbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d015      	beq.n	800adf2 <__gethex+0x396>
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	d017      	beq.n	800adfa <__gethex+0x39e>
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d109      	bne.n	800ade2 <__gethex+0x386>
 800adce:	f01a 0f02 	tst.w	sl, #2
 800add2:	d006      	beq.n	800ade2 <__gethex+0x386>
 800add4:	f8d9 0000 	ldr.w	r0, [r9]
 800add8:	ea4a 0a00 	orr.w	sl, sl, r0
 800addc:	f01a 0f01 	tst.w	sl, #1
 800ade0:	d10e      	bne.n	800ae00 <__gethex+0x3a4>
 800ade2:	f047 0710 	orr.w	r7, r7, #16
 800ade6:	e033      	b.n	800ae50 <__gethex+0x3f4>
 800ade8:	f04f 0a01 	mov.w	sl, #1
 800adec:	e7d0      	b.n	800ad90 <__gethex+0x334>
 800adee:	2701      	movs	r7, #1
 800adf0:	e7e2      	b.n	800adb8 <__gethex+0x35c>
 800adf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adf4:	f1c3 0301 	rsb	r3, r3, #1
 800adf8:	9315      	str	r3, [sp, #84]	; 0x54
 800adfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d0f0      	beq.n	800ade2 <__gethex+0x386>
 800ae00:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ae04:	f104 0314 	add.w	r3, r4, #20
 800ae08:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ae0c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ae10:	f04f 0c00 	mov.w	ip, #0
 800ae14:	4618      	mov	r0, r3
 800ae16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae1a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800ae1e:	d01c      	beq.n	800ae5a <__gethex+0x3fe>
 800ae20:	3201      	adds	r2, #1
 800ae22:	6002      	str	r2, [r0, #0]
 800ae24:	2f02      	cmp	r7, #2
 800ae26:	f104 0314 	add.w	r3, r4, #20
 800ae2a:	d13f      	bne.n	800aeac <__gethex+0x450>
 800ae2c:	f8d8 2000 	ldr.w	r2, [r8]
 800ae30:	3a01      	subs	r2, #1
 800ae32:	42b2      	cmp	r2, r6
 800ae34:	d10a      	bne.n	800ae4c <__gethex+0x3f0>
 800ae36:	1171      	asrs	r1, r6, #5
 800ae38:	2201      	movs	r2, #1
 800ae3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae3e:	f006 061f 	and.w	r6, r6, #31
 800ae42:	fa02 f606 	lsl.w	r6, r2, r6
 800ae46:	421e      	tst	r6, r3
 800ae48:	bf18      	it	ne
 800ae4a:	4617      	movne	r7, r2
 800ae4c:	f047 0720 	orr.w	r7, r7, #32
 800ae50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae52:	601c      	str	r4, [r3, #0]
 800ae54:	9b04      	ldr	r3, [sp, #16]
 800ae56:	601d      	str	r5, [r3, #0]
 800ae58:	e695      	b.n	800ab86 <__gethex+0x12a>
 800ae5a:	4299      	cmp	r1, r3
 800ae5c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae60:	d8d8      	bhi.n	800ae14 <__gethex+0x3b8>
 800ae62:	68a3      	ldr	r3, [r4, #8]
 800ae64:	459b      	cmp	fp, r3
 800ae66:	db19      	blt.n	800ae9c <__gethex+0x440>
 800ae68:	6861      	ldr	r1, [r4, #4]
 800ae6a:	ee18 0a10 	vmov	r0, s16
 800ae6e:	3101      	adds	r1, #1
 800ae70:	f000 f994 	bl	800b19c <_Balloc>
 800ae74:	4681      	mov	r9, r0
 800ae76:	b918      	cbnz	r0, 800ae80 <__gethex+0x424>
 800ae78:	4b1a      	ldr	r3, [pc, #104]	; (800aee4 <__gethex+0x488>)
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	2184      	movs	r1, #132	; 0x84
 800ae7e:	e6a8      	b.n	800abd2 <__gethex+0x176>
 800ae80:	6922      	ldr	r2, [r4, #16]
 800ae82:	3202      	adds	r2, #2
 800ae84:	f104 010c 	add.w	r1, r4, #12
 800ae88:	0092      	lsls	r2, r2, #2
 800ae8a:	300c      	adds	r0, #12
 800ae8c:	f000 f96c 	bl	800b168 <memcpy>
 800ae90:	4621      	mov	r1, r4
 800ae92:	ee18 0a10 	vmov	r0, s16
 800ae96:	f000 f9c1 	bl	800b21c <_Bfree>
 800ae9a:	464c      	mov	r4, r9
 800ae9c:	6923      	ldr	r3, [r4, #16]
 800ae9e:	1c5a      	adds	r2, r3, #1
 800aea0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aea4:	6122      	str	r2, [r4, #16]
 800aea6:	2201      	movs	r2, #1
 800aea8:	615a      	str	r2, [r3, #20]
 800aeaa:	e7bb      	b.n	800ae24 <__gethex+0x3c8>
 800aeac:	6922      	ldr	r2, [r4, #16]
 800aeae:	455a      	cmp	r2, fp
 800aeb0:	dd0b      	ble.n	800aeca <__gethex+0x46e>
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f7ff fd6a 	bl	800a98e <rshift>
 800aeba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aebe:	3501      	adds	r5, #1
 800aec0:	42ab      	cmp	r3, r5
 800aec2:	f6ff aed0 	blt.w	800ac66 <__gethex+0x20a>
 800aec6:	2701      	movs	r7, #1
 800aec8:	e7c0      	b.n	800ae4c <__gethex+0x3f0>
 800aeca:	f016 061f 	ands.w	r6, r6, #31
 800aece:	d0fa      	beq.n	800aec6 <__gethex+0x46a>
 800aed0:	449a      	add	sl, r3
 800aed2:	f1c6 0620 	rsb	r6, r6, #32
 800aed6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800aeda:	f000 fa55 	bl	800b388 <__hi0bits>
 800aede:	42b0      	cmp	r0, r6
 800aee0:	dbe7      	blt.n	800aeb2 <__gethex+0x456>
 800aee2:	e7f0      	b.n	800aec6 <__gethex+0x46a>
 800aee4:	0800d8bc 	.word	0x0800d8bc

0800aee8 <L_shift>:
 800aee8:	f1c2 0208 	rsb	r2, r2, #8
 800aeec:	0092      	lsls	r2, r2, #2
 800aeee:	b570      	push	{r4, r5, r6, lr}
 800aef0:	f1c2 0620 	rsb	r6, r2, #32
 800aef4:	6843      	ldr	r3, [r0, #4]
 800aef6:	6804      	ldr	r4, [r0, #0]
 800aef8:	fa03 f506 	lsl.w	r5, r3, r6
 800aefc:	432c      	orrs	r4, r5
 800aefe:	40d3      	lsrs	r3, r2
 800af00:	6004      	str	r4, [r0, #0]
 800af02:	f840 3f04 	str.w	r3, [r0, #4]!
 800af06:	4288      	cmp	r0, r1
 800af08:	d3f4      	bcc.n	800aef4 <L_shift+0xc>
 800af0a:	bd70      	pop	{r4, r5, r6, pc}

0800af0c <__match>:
 800af0c:	b530      	push	{r4, r5, lr}
 800af0e:	6803      	ldr	r3, [r0, #0]
 800af10:	3301      	adds	r3, #1
 800af12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af16:	b914      	cbnz	r4, 800af1e <__match+0x12>
 800af18:	6003      	str	r3, [r0, #0]
 800af1a:	2001      	movs	r0, #1
 800af1c:	bd30      	pop	{r4, r5, pc}
 800af1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800af26:	2d19      	cmp	r5, #25
 800af28:	bf98      	it	ls
 800af2a:	3220      	addls	r2, #32
 800af2c:	42a2      	cmp	r2, r4
 800af2e:	d0f0      	beq.n	800af12 <__match+0x6>
 800af30:	2000      	movs	r0, #0
 800af32:	e7f3      	b.n	800af1c <__match+0x10>

0800af34 <__hexnan>:
 800af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	680b      	ldr	r3, [r1, #0]
 800af3a:	6801      	ldr	r1, [r0, #0]
 800af3c:	115e      	asrs	r6, r3, #5
 800af3e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af42:	f013 031f 	ands.w	r3, r3, #31
 800af46:	b087      	sub	sp, #28
 800af48:	bf18      	it	ne
 800af4a:	3604      	addne	r6, #4
 800af4c:	2500      	movs	r5, #0
 800af4e:	1f37      	subs	r7, r6, #4
 800af50:	4682      	mov	sl, r0
 800af52:	4690      	mov	r8, r2
 800af54:	9301      	str	r3, [sp, #4]
 800af56:	f846 5c04 	str.w	r5, [r6, #-4]
 800af5a:	46b9      	mov	r9, r7
 800af5c:	463c      	mov	r4, r7
 800af5e:	9502      	str	r5, [sp, #8]
 800af60:	46ab      	mov	fp, r5
 800af62:	784a      	ldrb	r2, [r1, #1]
 800af64:	1c4b      	adds	r3, r1, #1
 800af66:	9303      	str	r3, [sp, #12]
 800af68:	b342      	cbz	r2, 800afbc <__hexnan+0x88>
 800af6a:	4610      	mov	r0, r2
 800af6c:	9105      	str	r1, [sp, #20]
 800af6e:	9204      	str	r2, [sp, #16]
 800af70:	f7ff fd5f 	bl	800aa32 <__hexdig_fun>
 800af74:	2800      	cmp	r0, #0
 800af76:	d14f      	bne.n	800b018 <__hexnan+0xe4>
 800af78:	9a04      	ldr	r2, [sp, #16]
 800af7a:	9905      	ldr	r1, [sp, #20]
 800af7c:	2a20      	cmp	r2, #32
 800af7e:	d818      	bhi.n	800afb2 <__hexnan+0x7e>
 800af80:	9b02      	ldr	r3, [sp, #8]
 800af82:	459b      	cmp	fp, r3
 800af84:	dd13      	ble.n	800afae <__hexnan+0x7a>
 800af86:	454c      	cmp	r4, r9
 800af88:	d206      	bcs.n	800af98 <__hexnan+0x64>
 800af8a:	2d07      	cmp	r5, #7
 800af8c:	dc04      	bgt.n	800af98 <__hexnan+0x64>
 800af8e:	462a      	mov	r2, r5
 800af90:	4649      	mov	r1, r9
 800af92:	4620      	mov	r0, r4
 800af94:	f7ff ffa8 	bl	800aee8 <L_shift>
 800af98:	4544      	cmp	r4, r8
 800af9a:	d950      	bls.n	800b03e <__hexnan+0x10a>
 800af9c:	2300      	movs	r3, #0
 800af9e:	f1a4 0904 	sub.w	r9, r4, #4
 800afa2:	f844 3c04 	str.w	r3, [r4, #-4]
 800afa6:	f8cd b008 	str.w	fp, [sp, #8]
 800afaa:	464c      	mov	r4, r9
 800afac:	461d      	mov	r5, r3
 800afae:	9903      	ldr	r1, [sp, #12]
 800afb0:	e7d7      	b.n	800af62 <__hexnan+0x2e>
 800afb2:	2a29      	cmp	r2, #41	; 0x29
 800afb4:	d156      	bne.n	800b064 <__hexnan+0x130>
 800afb6:	3102      	adds	r1, #2
 800afb8:	f8ca 1000 	str.w	r1, [sl]
 800afbc:	f1bb 0f00 	cmp.w	fp, #0
 800afc0:	d050      	beq.n	800b064 <__hexnan+0x130>
 800afc2:	454c      	cmp	r4, r9
 800afc4:	d206      	bcs.n	800afd4 <__hexnan+0xa0>
 800afc6:	2d07      	cmp	r5, #7
 800afc8:	dc04      	bgt.n	800afd4 <__hexnan+0xa0>
 800afca:	462a      	mov	r2, r5
 800afcc:	4649      	mov	r1, r9
 800afce:	4620      	mov	r0, r4
 800afd0:	f7ff ff8a 	bl	800aee8 <L_shift>
 800afd4:	4544      	cmp	r4, r8
 800afd6:	d934      	bls.n	800b042 <__hexnan+0x10e>
 800afd8:	f1a8 0204 	sub.w	r2, r8, #4
 800afdc:	4623      	mov	r3, r4
 800afde:	f853 1b04 	ldr.w	r1, [r3], #4
 800afe2:	f842 1f04 	str.w	r1, [r2, #4]!
 800afe6:	429f      	cmp	r7, r3
 800afe8:	d2f9      	bcs.n	800afde <__hexnan+0xaa>
 800afea:	1b3b      	subs	r3, r7, r4
 800afec:	f023 0303 	bic.w	r3, r3, #3
 800aff0:	3304      	adds	r3, #4
 800aff2:	3401      	adds	r4, #1
 800aff4:	3e03      	subs	r6, #3
 800aff6:	42b4      	cmp	r4, r6
 800aff8:	bf88      	it	hi
 800affa:	2304      	movhi	r3, #4
 800affc:	4443      	add	r3, r8
 800affe:	2200      	movs	r2, #0
 800b000:	f843 2b04 	str.w	r2, [r3], #4
 800b004:	429f      	cmp	r7, r3
 800b006:	d2fb      	bcs.n	800b000 <__hexnan+0xcc>
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	b91b      	cbnz	r3, 800b014 <__hexnan+0xe0>
 800b00c:	4547      	cmp	r7, r8
 800b00e:	d127      	bne.n	800b060 <__hexnan+0x12c>
 800b010:	2301      	movs	r3, #1
 800b012:	603b      	str	r3, [r7, #0]
 800b014:	2005      	movs	r0, #5
 800b016:	e026      	b.n	800b066 <__hexnan+0x132>
 800b018:	3501      	adds	r5, #1
 800b01a:	2d08      	cmp	r5, #8
 800b01c:	f10b 0b01 	add.w	fp, fp, #1
 800b020:	dd06      	ble.n	800b030 <__hexnan+0xfc>
 800b022:	4544      	cmp	r4, r8
 800b024:	d9c3      	bls.n	800afae <__hexnan+0x7a>
 800b026:	2300      	movs	r3, #0
 800b028:	f844 3c04 	str.w	r3, [r4, #-4]
 800b02c:	2501      	movs	r5, #1
 800b02e:	3c04      	subs	r4, #4
 800b030:	6822      	ldr	r2, [r4, #0]
 800b032:	f000 000f 	and.w	r0, r0, #15
 800b036:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b03a:	6022      	str	r2, [r4, #0]
 800b03c:	e7b7      	b.n	800afae <__hexnan+0x7a>
 800b03e:	2508      	movs	r5, #8
 800b040:	e7b5      	b.n	800afae <__hexnan+0x7a>
 800b042:	9b01      	ldr	r3, [sp, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d0df      	beq.n	800b008 <__hexnan+0xd4>
 800b048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b04c:	f1c3 0320 	rsb	r3, r3, #32
 800b050:	fa22 f303 	lsr.w	r3, r2, r3
 800b054:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b058:	401a      	ands	r2, r3
 800b05a:	f846 2c04 	str.w	r2, [r6, #-4]
 800b05e:	e7d3      	b.n	800b008 <__hexnan+0xd4>
 800b060:	3f04      	subs	r7, #4
 800b062:	e7d1      	b.n	800b008 <__hexnan+0xd4>
 800b064:	2004      	movs	r0, #4
 800b066:	b007      	add	sp, #28
 800b068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b06c <_localeconv_r>:
 800b06c:	4800      	ldr	r0, [pc, #0]	; (800b070 <_localeconv_r+0x4>)
 800b06e:	4770      	bx	lr
 800b070:	20000164 	.word	0x20000164

0800b074 <__retarget_lock_init_recursive>:
 800b074:	4770      	bx	lr

0800b076 <__retarget_lock_acquire_recursive>:
 800b076:	4770      	bx	lr

0800b078 <__retarget_lock_release_recursive>:
 800b078:	4770      	bx	lr

0800b07a <__swhatbuf_r>:
 800b07a:	b570      	push	{r4, r5, r6, lr}
 800b07c:	460e      	mov	r6, r1
 800b07e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b082:	2900      	cmp	r1, #0
 800b084:	b096      	sub	sp, #88	; 0x58
 800b086:	4614      	mov	r4, r2
 800b088:	461d      	mov	r5, r3
 800b08a:	da07      	bge.n	800b09c <__swhatbuf_r+0x22>
 800b08c:	2300      	movs	r3, #0
 800b08e:	602b      	str	r3, [r5, #0]
 800b090:	89b3      	ldrh	r3, [r6, #12]
 800b092:	061a      	lsls	r2, r3, #24
 800b094:	d410      	bmi.n	800b0b8 <__swhatbuf_r+0x3e>
 800b096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b09a:	e00e      	b.n	800b0ba <__swhatbuf_r+0x40>
 800b09c:	466a      	mov	r2, sp
 800b09e:	f000 ff4f 	bl	800bf40 <_fstat_r>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	dbf2      	blt.n	800b08c <__swhatbuf_r+0x12>
 800b0a6:	9a01      	ldr	r2, [sp, #4]
 800b0a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0b0:	425a      	negs	r2, r3
 800b0b2:	415a      	adcs	r2, r3
 800b0b4:	602a      	str	r2, [r5, #0]
 800b0b6:	e7ee      	b.n	800b096 <__swhatbuf_r+0x1c>
 800b0b8:	2340      	movs	r3, #64	; 0x40
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	6023      	str	r3, [r4, #0]
 800b0be:	b016      	add	sp, #88	; 0x58
 800b0c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b0c4 <__smakebuf_r>:
 800b0c4:	898b      	ldrh	r3, [r1, #12]
 800b0c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0c8:	079d      	lsls	r5, r3, #30
 800b0ca:	4606      	mov	r6, r0
 800b0cc:	460c      	mov	r4, r1
 800b0ce:	d507      	bpl.n	800b0e0 <__smakebuf_r+0x1c>
 800b0d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	6123      	str	r3, [r4, #16]
 800b0d8:	2301      	movs	r3, #1
 800b0da:	6163      	str	r3, [r4, #20]
 800b0dc:	b002      	add	sp, #8
 800b0de:	bd70      	pop	{r4, r5, r6, pc}
 800b0e0:	ab01      	add	r3, sp, #4
 800b0e2:	466a      	mov	r2, sp
 800b0e4:	f7ff ffc9 	bl	800b07a <__swhatbuf_r>
 800b0e8:	9900      	ldr	r1, [sp, #0]
 800b0ea:	4605      	mov	r5, r0
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f7fc fe5f 	bl	8007db0 <_malloc_r>
 800b0f2:	b948      	cbnz	r0, 800b108 <__smakebuf_r+0x44>
 800b0f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0f8:	059a      	lsls	r2, r3, #22
 800b0fa:	d4ef      	bmi.n	800b0dc <__smakebuf_r+0x18>
 800b0fc:	f023 0303 	bic.w	r3, r3, #3
 800b100:	f043 0302 	orr.w	r3, r3, #2
 800b104:	81a3      	strh	r3, [r4, #12]
 800b106:	e7e3      	b.n	800b0d0 <__smakebuf_r+0xc>
 800b108:	4b0d      	ldr	r3, [pc, #52]	; (800b140 <__smakebuf_r+0x7c>)
 800b10a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b10c:	89a3      	ldrh	r3, [r4, #12]
 800b10e:	6020      	str	r0, [r4, #0]
 800b110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b114:	81a3      	strh	r3, [r4, #12]
 800b116:	9b00      	ldr	r3, [sp, #0]
 800b118:	6163      	str	r3, [r4, #20]
 800b11a:	9b01      	ldr	r3, [sp, #4]
 800b11c:	6120      	str	r0, [r4, #16]
 800b11e:	b15b      	cbz	r3, 800b138 <__smakebuf_r+0x74>
 800b120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b124:	4630      	mov	r0, r6
 800b126:	f000 ff1d 	bl	800bf64 <_isatty_r>
 800b12a:	b128      	cbz	r0, 800b138 <__smakebuf_r+0x74>
 800b12c:	89a3      	ldrh	r3, [r4, #12]
 800b12e:	f023 0303 	bic.w	r3, r3, #3
 800b132:	f043 0301 	orr.w	r3, r3, #1
 800b136:	81a3      	strh	r3, [r4, #12]
 800b138:	89a0      	ldrh	r0, [r4, #12]
 800b13a:	4305      	orrs	r5, r0
 800b13c:	81a5      	strh	r5, [r4, #12]
 800b13e:	e7cd      	b.n	800b0dc <__smakebuf_r+0x18>
 800b140:	0800a7ed 	.word	0x0800a7ed

0800b144 <__ascii_mbtowc>:
 800b144:	b082      	sub	sp, #8
 800b146:	b901      	cbnz	r1, 800b14a <__ascii_mbtowc+0x6>
 800b148:	a901      	add	r1, sp, #4
 800b14a:	b142      	cbz	r2, 800b15e <__ascii_mbtowc+0x1a>
 800b14c:	b14b      	cbz	r3, 800b162 <__ascii_mbtowc+0x1e>
 800b14e:	7813      	ldrb	r3, [r2, #0]
 800b150:	600b      	str	r3, [r1, #0]
 800b152:	7812      	ldrb	r2, [r2, #0]
 800b154:	1e10      	subs	r0, r2, #0
 800b156:	bf18      	it	ne
 800b158:	2001      	movne	r0, #1
 800b15a:	b002      	add	sp, #8
 800b15c:	4770      	bx	lr
 800b15e:	4610      	mov	r0, r2
 800b160:	e7fb      	b.n	800b15a <__ascii_mbtowc+0x16>
 800b162:	f06f 0001 	mvn.w	r0, #1
 800b166:	e7f8      	b.n	800b15a <__ascii_mbtowc+0x16>

0800b168 <memcpy>:
 800b168:	440a      	add	r2, r1
 800b16a:	4291      	cmp	r1, r2
 800b16c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b170:	d100      	bne.n	800b174 <memcpy+0xc>
 800b172:	4770      	bx	lr
 800b174:	b510      	push	{r4, lr}
 800b176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b17a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b17e:	4291      	cmp	r1, r2
 800b180:	d1f9      	bne.n	800b176 <memcpy+0xe>
 800b182:	bd10      	pop	{r4, pc}

0800b184 <__malloc_lock>:
 800b184:	4801      	ldr	r0, [pc, #4]	; (800b18c <__malloc_lock+0x8>)
 800b186:	f7ff bf76 	b.w	800b076 <__retarget_lock_acquire_recursive>
 800b18a:	bf00      	nop
 800b18c:	20000834 	.word	0x20000834

0800b190 <__malloc_unlock>:
 800b190:	4801      	ldr	r0, [pc, #4]	; (800b198 <__malloc_unlock+0x8>)
 800b192:	f7ff bf71 	b.w	800b078 <__retarget_lock_release_recursive>
 800b196:	bf00      	nop
 800b198:	20000834 	.word	0x20000834

0800b19c <_Balloc>:
 800b19c:	b570      	push	{r4, r5, r6, lr}
 800b19e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	460d      	mov	r5, r1
 800b1a4:	b976      	cbnz	r6, 800b1c4 <_Balloc+0x28>
 800b1a6:	2010      	movs	r0, #16
 800b1a8:	f7fc fd92 	bl	8007cd0 <malloc>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	6260      	str	r0, [r4, #36]	; 0x24
 800b1b0:	b920      	cbnz	r0, 800b1bc <_Balloc+0x20>
 800b1b2:	4b18      	ldr	r3, [pc, #96]	; (800b214 <_Balloc+0x78>)
 800b1b4:	4818      	ldr	r0, [pc, #96]	; (800b218 <_Balloc+0x7c>)
 800b1b6:	2166      	movs	r1, #102	; 0x66
 800b1b8:	f000 fe82 	bl	800bec0 <__assert_func>
 800b1bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1c0:	6006      	str	r6, [r0, #0]
 800b1c2:	60c6      	str	r6, [r0, #12]
 800b1c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1c6:	68f3      	ldr	r3, [r6, #12]
 800b1c8:	b183      	cbz	r3, 800b1ec <_Balloc+0x50>
 800b1ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1d2:	b9b8      	cbnz	r0, 800b204 <_Balloc+0x68>
 800b1d4:	2101      	movs	r1, #1
 800b1d6:	fa01 f605 	lsl.w	r6, r1, r5
 800b1da:	1d72      	adds	r2, r6, #5
 800b1dc:	0092      	lsls	r2, r2, #2
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f7fc fd86 	bl	8007cf0 <_calloc_r>
 800b1e4:	b160      	cbz	r0, 800b200 <_Balloc+0x64>
 800b1e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1ea:	e00e      	b.n	800b20a <_Balloc+0x6e>
 800b1ec:	2221      	movs	r2, #33	; 0x21
 800b1ee:	2104      	movs	r1, #4
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f7fc fd7d 	bl	8007cf0 <_calloc_r>
 800b1f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1f8:	60f0      	str	r0, [r6, #12]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1e4      	bne.n	800b1ca <_Balloc+0x2e>
 800b200:	2000      	movs	r0, #0
 800b202:	bd70      	pop	{r4, r5, r6, pc}
 800b204:	6802      	ldr	r2, [r0, #0]
 800b206:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b20a:	2300      	movs	r3, #0
 800b20c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b210:	e7f7      	b.n	800b202 <_Balloc+0x66>
 800b212:	bf00      	nop
 800b214:	0800d846 	.word	0x0800d846
 800b218:	0800d9b0 	.word	0x0800d9b0

0800b21c <_Bfree>:
 800b21c:	b570      	push	{r4, r5, r6, lr}
 800b21e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b220:	4605      	mov	r5, r0
 800b222:	460c      	mov	r4, r1
 800b224:	b976      	cbnz	r6, 800b244 <_Bfree+0x28>
 800b226:	2010      	movs	r0, #16
 800b228:	f7fc fd52 	bl	8007cd0 <malloc>
 800b22c:	4602      	mov	r2, r0
 800b22e:	6268      	str	r0, [r5, #36]	; 0x24
 800b230:	b920      	cbnz	r0, 800b23c <_Bfree+0x20>
 800b232:	4b09      	ldr	r3, [pc, #36]	; (800b258 <_Bfree+0x3c>)
 800b234:	4809      	ldr	r0, [pc, #36]	; (800b25c <_Bfree+0x40>)
 800b236:	218a      	movs	r1, #138	; 0x8a
 800b238:	f000 fe42 	bl	800bec0 <__assert_func>
 800b23c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b240:	6006      	str	r6, [r0, #0]
 800b242:	60c6      	str	r6, [r0, #12]
 800b244:	b13c      	cbz	r4, 800b256 <_Bfree+0x3a>
 800b246:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b248:	6862      	ldr	r2, [r4, #4]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b250:	6021      	str	r1, [r4, #0]
 800b252:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b256:	bd70      	pop	{r4, r5, r6, pc}
 800b258:	0800d846 	.word	0x0800d846
 800b25c:	0800d9b0 	.word	0x0800d9b0

0800b260 <__multadd>:
 800b260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b264:	690e      	ldr	r6, [r1, #16]
 800b266:	4607      	mov	r7, r0
 800b268:	4698      	mov	r8, r3
 800b26a:	460c      	mov	r4, r1
 800b26c:	f101 0014 	add.w	r0, r1, #20
 800b270:	2300      	movs	r3, #0
 800b272:	6805      	ldr	r5, [r0, #0]
 800b274:	b2a9      	uxth	r1, r5
 800b276:	fb02 8101 	mla	r1, r2, r1, r8
 800b27a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b27e:	0c2d      	lsrs	r5, r5, #16
 800b280:	fb02 c505 	mla	r5, r2, r5, ip
 800b284:	b289      	uxth	r1, r1
 800b286:	3301      	adds	r3, #1
 800b288:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b28c:	429e      	cmp	r6, r3
 800b28e:	f840 1b04 	str.w	r1, [r0], #4
 800b292:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b296:	dcec      	bgt.n	800b272 <__multadd+0x12>
 800b298:	f1b8 0f00 	cmp.w	r8, #0
 800b29c:	d022      	beq.n	800b2e4 <__multadd+0x84>
 800b29e:	68a3      	ldr	r3, [r4, #8]
 800b2a0:	42b3      	cmp	r3, r6
 800b2a2:	dc19      	bgt.n	800b2d8 <__multadd+0x78>
 800b2a4:	6861      	ldr	r1, [r4, #4]
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	3101      	adds	r1, #1
 800b2aa:	f7ff ff77 	bl	800b19c <_Balloc>
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	b928      	cbnz	r0, 800b2be <__multadd+0x5e>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	4b0d      	ldr	r3, [pc, #52]	; (800b2ec <__multadd+0x8c>)
 800b2b6:	480e      	ldr	r0, [pc, #56]	; (800b2f0 <__multadd+0x90>)
 800b2b8:	21b5      	movs	r1, #181	; 0xb5
 800b2ba:	f000 fe01 	bl	800bec0 <__assert_func>
 800b2be:	6922      	ldr	r2, [r4, #16]
 800b2c0:	3202      	adds	r2, #2
 800b2c2:	f104 010c 	add.w	r1, r4, #12
 800b2c6:	0092      	lsls	r2, r2, #2
 800b2c8:	300c      	adds	r0, #12
 800b2ca:	f7ff ff4d 	bl	800b168 <memcpy>
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	4638      	mov	r0, r7
 800b2d2:	f7ff ffa3 	bl	800b21c <_Bfree>
 800b2d6:	462c      	mov	r4, r5
 800b2d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b2dc:	3601      	adds	r6, #1
 800b2de:	f8c3 8014 	str.w	r8, [r3, #20]
 800b2e2:	6126      	str	r6, [r4, #16]
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ea:	bf00      	nop
 800b2ec:	0800d8bc 	.word	0x0800d8bc
 800b2f0:	0800d9b0 	.word	0x0800d9b0

0800b2f4 <__s2b>:
 800b2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	4615      	mov	r5, r2
 800b2fc:	461f      	mov	r7, r3
 800b2fe:	2209      	movs	r2, #9
 800b300:	3308      	adds	r3, #8
 800b302:	4606      	mov	r6, r0
 800b304:	fb93 f3f2 	sdiv	r3, r3, r2
 800b308:	2100      	movs	r1, #0
 800b30a:	2201      	movs	r2, #1
 800b30c:	429a      	cmp	r2, r3
 800b30e:	db09      	blt.n	800b324 <__s2b+0x30>
 800b310:	4630      	mov	r0, r6
 800b312:	f7ff ff43 	bl	800b19c <_Balloc>
 800b316:	b940      	cbnz	r0, 800b32a <__s2b+0x36>
 800b318:	4602      	mov	r2, r0
 800b31a:	4b19      	ldr	r3, [pc, #100]	; (800b380 <__s2b+0x8c>)
 800b31c:	4819      	ldr	r0, [pc, #100]	; (800b384 <__s2b+0x90>)
 800b31e:	21ce      	movs	r1, #206	; 0xce
 800b320:	f000 fdce 	bl	800bec0 <__assert_func>
 800b324:	0052      	lsls	r2, r2, #1
 800b326:	3101      	adds	r1, #1
 800b328:	e7f0      	b.n	800b30c <__s2b+0x18>
 800b32a:	9b08      	ldr	r3, [sp, #32]
 800b32c:	6143      	str	r3, [r0, #20]
 800b32e:	2d09      	cmp	r5, #9
 800b330:	f04f 0301 	mov.w	r3, #1
 800b334:	6103      	str	r3, [r0, #16]
 800b336:	dd16      	ble.n	800b366 <__s2b+0x72>
 800b338:	f104 0909 	add.w	r9, r4, #9
 800b33c:	46c8      	mov	r8, r9
 800b33e:	442c      	add	r4, r5
 800b340:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b344:	4601      	mov	r1, r0
 800b346:	3b30      	subs	r3, #48	; 0x30
 800b348:	220a      	movs	r2, #10
 800b34a:	4630      	mov	r0, r6
 800b34c:	f7ff ff88 	bl	800b260 <__multadd>
 800b350:	45a0      	cmp	r8, r4
 800b352:	d1f5      	bne.n	800b340 <__s2b+0x4c>
 800b354:	f1a5 0408 	sub.w	r4, r5, #8
 800b358:	444c      	add	r4, r9
 800b35a:	1b2d      	subs	r5, r5, r4
 800b35c:	1963      	adds	r3, r4, r5
 800b35e:	42bb      	cmp	r3, r7
 800b360:	db04      	blt.n	800b36c <__s2b+0x78>
 800b362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b366:	340a      	adds	r4, #10
 800b368:	2509      	movs	r5, #9
 800b36a:	e7f6      	b.n	800b35a <__s2b+0x66>
 800b36c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b370:	4601      	mov	r1, r0
 800b372:	3b30      	subs	r3, #48	; 0x30
 800b374:	220a      	movs	r2, #10
 800b376:	4630      	mov	r0, r6
 800b378:	f7ff ff72 	bl	800b260 <__multadd>
 800b37c:	e7ee      	b.n	800b35c <__s2b+0x68>
 800b37e:	bf00      	nop
 800b380:	0800d8bc 	.word	0x0800d8bc
 800b384:	0800d9b0 	.word	0x0800d9b0

0800b388 <__hi0bits>:
 800b388:	0c03      	lsrs	r3, r0, #16
 800b38a:	041b      	lsls	r3, r3, #16
 800b38c:	b9d3      	cbnz	r3, 800b3c4 <__hi0bits+0x3c>
 800b38e:	0400      	lsls	r0, r0, #16
 800b390:	2310      	movs	r3, #16
 800b392:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b396:	bf04      	itt	eq
 800b398:	0200      	lsleq	r0, r0, #8
 800b39a:	3308      	addeq	r3, #8
 800b39c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3a0:	bf04      	itt	eq
 800b3a2:	0100      	lsleq	r0, r0, #4
 800b3a4:	3304      	addeq	r3, #4
 800b3a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3aa:	bf04      	itt	eq
 800b3ac:	0080      	lsleq	r0, r0, #2
 800b3ae:	3302      	addeq	r3, #2
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	db05      	blt.n	800b3c0 <__hi0bits+0x38>
 800b3b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b3b8:	f103 0301 	add.w	r3, r3, #1
 800b3bc:	bf08      	it	eq
 800b3be:	2320      	moveq	r3, #32
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	4770      	bx	lr
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	e7e4      	b.n	800b392 <__hi0bits+0xa>

0800b3c8 <__lo0bits>:
 800b3c8:	6803      	ldr	r3, [r0, #0]
 800b3ca:	f013 0207 	ands.w	r2, r3, #7
 800b3ce:	4601      	mov	r1, r0
 800b3d0:	d00b      	beq.n	800b3ea <__lo0bits+0x22>
 800b3d2:	07da      	lsls	r2, r3, #31
 800b3d4:	d424      	bmi.n	800b420 <__lo0bits+0x58>
 800b3d6:	0798      	lsls	r0, r3, #30
 800b3d8:	bf49      	itett	mi
 800b3da:	085b      	lsrmi	r3, r3, #1
 800b3dc:	089b      	lsrpl	r3, r3, #2
 800b3de:	2001      	movmi	r0, #1
 800b3e0:	600b      	strmi	r3, [r1, #0]
 800b3e2:	bf5c      	itt	pl
 800b3e4:	600b      	strpl	r3, [r1, #0]
 800b3e6:	2002      	movpl	r0, #2
 800b3e8:	4770      	bx	lr
 800b3ea:	b298      	uxth	r0, r3
 800b3ec:	b9b0      	cbnz	r0, 800b41c <__lo0bits+0x54>
 800b3ee:	0c1b      	lsrs	r3, r3, #16
 800b3f0:	2010      	movs	r0, #16
 800b3f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b3f6:	bf04      	itt	eq
 800b3f8:	0a1b      	lsreq	r3, r3, #8
 800b3fa:	3008      	addeq	r0, #8
 800b3fc:	071a      	lsls	r2, r3, #28
 800b3fe:	bf04      	itt	eq
 800b400:	091b      	lsreq	r3, r3, #4
 800b402:	3004      	addeq	r0, #4
 800b404:	079a      	lsls	r2, r3, #30
 800b406:	bf04      	itt	eq
 800b408:	089b      	lsreq	r3, r3, #2
 800b40a:	3002      	addeq	r0, #2
 800b40c:	07da      	lsls	r2, r3, #31
 800b40e:	d403      	bmi.n	800b418 <__lo0bits+0x50>
 800b410:	085b      	lsrs	r3, r3, #1
 800b412:	f100 0001 	add.w	r0, r0, #1
 800b416:	d005      	beq.n	800b424 <__lo0bits+0x5c>
 800b418:	600b      	str	r3, [r1, #0]
 800b41a:	4770      	bx	lr
 800b41c:	4610      	mov	r0, r2
 800b41e:	e7e8      	b.n	800b3f2 <__lo0bits+0x2a>
 800b420:	2000      	movs	r0, #0
 800b422:	4770      	bx	lr
 800b424:	2020      	movs	r0, #32
 800b426:	4770      	bx	lr

0800b428 <__i2b>:
 800b428:	b510      	push	{r4, lr}
 800b42a:	460c      	mov	r4, r1
 800b42c:	2101      	movs	r1, #1
 800b42e:	f7ff feb5 	bl	800b19c <_Balloc>
 800b432:	4602      	mov	r2, r0
 800b434:	b928      	cbnz	r0, 800b442 <__i2b+0x1a>
 800b436:	4b05      	ldr	r3, [pc, #20]	; (800b44c <__i2b+0x24>)
 800b438:	4805      	ldr	r0, [pc, #20]	; (800b450 <__i2b+0x28>)
 800b43a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b43e:	f000 fd3f 	bl	800bec0 <__assert_func>
 800b442:	2301      	movs	r3, #1
 800b444:	6144      	str	r4, [r0, #20]
 800b446:	6103      	str	r3, [r0, #16]
 800b448:	bd10      	pop	{r4, pc}
 800b44a:	bf00      	nop
 800b44c:	0800d8bc 	.word	0x0800d8bc
 800b450:	0800d9b0 	.word	0x0800d9b0

0800b454 <__multiply>:
 800b454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b458:	4614      	mov	r4, r2
 800b45a:	690a      	ldr	r2, [r1, #16]
 800b45c:	6923      	ldr	r3, [r4, #16]
 800b45e:	429a      	cmp	r2, r3
 800b460:	bfb8      	it	lt
 800b462:	460b      	movlt	r3, r1
 800b464:	460d      	mov	r5, r1
 800b466:	bfbc      	itt	lt
 800b468:	4625      	movlt	r5, r4
 800b46a:	461c      	movlt	r4, r3
 800b46c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b470:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b474:	68ab      	ldr	r3, [r5, #8]
 800b476:	6869      	ldr	r1, [r5, #4]
 800b478:	eb0a 0709 	add.w	r7, sl, r9
 800b47c:	42bb      	cmp	r3, r7
 800b47e:	b085      	sub	sp, #20
 800b480:	bfb8      	it	lt
 800b482:	3101      	addlt	r1, #1
 800b484:	f7ff fe8a 	bl	800b19c <_Balloc>
 800b488:	b930      	cbnz	r0, 800b498 <__multiply+0x44>
 800b48a:	4602      	mov	r2, r0
 800b48c:	4b42      	ldr	r3, [pc, #264]	; (800b598 <__multiply+0x144>)
 800b48e:	4843      	ldr	r0, [pc, #268]	; (800b59c <__multiply+0x148>)
 800b490:	f240 115d 	movw	r1, #349	; 0x15d
 800b494:	f000 fd14 	bl	800bec0 <__assert_func>
 800b498:	f100 0614 	add.w	r6, r0, #20
 800b49c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b4a0:	4633      	mov	r3, r6
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	4543      	cmp	r3, r8
 800b4a6:	d31e      	bcc.n	800b4e6 <__multiply+0x92>
 800b4a8:	f105 0c14 	add.w	ip, r5, #20
 800b4ac:	f104 0314 	add.w	r3, r4, #20
 800b4b0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b4b4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b4b8:	9202      	str	r2, [sp, #8]
 800b4ba:	ebac 0205 	sub.w	r2, ip, r5
 800b4be:	3a15      	subs	r2, #21
 800b4c0:	f022 0203 	bic.w	r2, r2, #3
 800b4c4:	3204      	adds	r2, #4
 800b4c6:	f105 0115 	add.w	r1, r5, #21
 800b4ca:	458c      	cmp	ip, r1
 800b4cc:	bf38      	it	cc
 800b4ce:	2204      	movcc	r2, #4
 800b4d0:	9201      	str	r2, [sp, #4]
 800b4d2:	9a02      	ldr	r2, [sp, #8]
 800b4d4:	9303      	str	r3, [sp, #12]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d808      	bhi.n	800b4ec <__multiply+0x98>
 800b4da:	2f00      	cmp	r7, #0
 800b4dc:	dc55      	bgt.n	800b58a <__multiply+0x136>
 800b4de:	6107      	str	r7, [r0, #16]
 800b4e0:	b005      	add	sp, #20
 800b4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e6:	f843 2b04 	str.w	r2, [r3], #4
 800b4ea:	e7db      	b.n	800b4a4 <__multiply+0x50>
 800b4ec:	f8b3 a000 	ldrh.w	sl, [r3]
 800b4f0:	f1ba 0f00 	cmp.w	sl, #0
 800b4f4:	d020      	beq.n	800b538 <__multiply+0xe4>
 800b4f6:	f105 0e14 	add.w	lr, r5, #20
 800b4fa:	46b1      	mov	r9, r6
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b502:	f8d9 b000 	ldr.w	fp, [r9]
 800b506:	b2a1      	uxth	r1, r4
 800b508:	fa1f fb8b 	uxth.w	fp, fp
 800b50c:	fb0a b101 	mla	r1, sl, r1, fp
 800b510:	4411      	add	r1, r2
 800b512:	f8d9 2000 	ldr.w	r2, [r9]
 800b516:	0c24      	lsrs	r4, r4, #16
 800b518:	0c12      	lsrs	r2, r2, #16
 800b51a:	fb0a 2404 	mla	r4, sl, r4, r2
 800b51e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b522:	b289      	uxth	r1, r1
 800b524:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b528:	45f4      	cmp	ip, lr
 800b52a:	f849 1b04 	str.w	r1, [r9], #4
 800b52e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b532:	d8e4      	bhi.n	800b4fe <__multiply+0xaa>
 800b534:	9901      	ldr	r1, [sp, #4]
 800b536:	5072      	str	r2, [r6, r1]
 800b538:	9a03      	ldr	r2, [sp, #12]
 800b53a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b53e:	3304      	adds	r3, #4
 800b540:	f1b9 0f00 	cmp.w	r9, #0
 800b544:	d01f      	beq.n	800b586 <__multiply+0x132>
 800b546:	6834      	ldr	r4, [r6, #0]
 800b548:	f105 0114 	add.w	r1, r5, #20
 800b54c:	46b6      	mov	lr, r6
 800b54e:	f04f 0a00 	mov.w	sl, #0
 800b552:	880a      	ldrh	r2, [r1, #0]
 800b554:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b558:	fb09 b202 	mla	r2, r9, r2, fp
 800b55c:	4492      	add	sl, r2
 800b55e:	b2a4      	uxth	r4, r4
 800b560:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b564:	f84e 4b04 	str.w	r4, [lr], #4
 800b568:	f851 4b04 	ldr.w	r4, [r1], #4
 800b56c:	f8be 2000 	ldrh.w	r2, [lr]
 800b570:	0c24      	lsrs	r4, r4, #16
 800b572:	fb09 2404 	mla	r4, r9, r4, r2
 800b576:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b57a:	458c      	cmp	ip, r1
 800b57c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b580:	d8e7      	bhi.n	800b552 <__multiply+0xfe>
 800b582:	9a01      	ldr	r2, [sp, #4]
 800b584:	50b4      	str	r4, [r6, r2]
 800b586:	3604      	adds	r6, #4
 800b588:	e7a3      	b.n	800b4d2 <__multiply+0x7e>
 800b58a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1a5      	bne.n	800b4de <__multiply+0x8a>
 800b592:	3f01      	subs	r7, #1
 800b594:	e7a1      	b.n	800b4da <__multiply+0x86>
 800b596:	bf00      	nop
 800b598:	0800d8bc 	.word	0x0800d8bc
 800b59c:	0800d9b0 	.word	0x0800d9b0

0800b5a0 <__pow5mult>:
 800b5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5a4:	4615      	mov	r5, r2
 800b5a6:	f012 0203 	ands.w	r2, r2, #3
 800b5aa:	4606      	mov	r6, r0
 800b5ac:	460f      	mov	r7, r1
 800b5ae:	d007      	beq.n	800b5c0 <__pow5mult+0x20>
 800b5b0:	4c25      	ldr	r4, [pc, #148]	; (800b648 <__pow5mult+0xa8>)
 800b5b2:	3a01      	subs	r2, #1
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5ba:	f7ff fe51 	bl	800b260 <__multadd>
 800b5be:	4607      	mov	r7, r0
 800b5c0:	10ad      	asrs	r5, r5, #2
 800b5c2:	d03d      	beq.n	800b640 <__pow5mult+0xa0>
 800b5c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5c6:	b97c      	cbnz	r4, 800b5e8 <__pow5mult+0x48>
 800b5c8:	2010      	movs	r0, #16
 800b5ca:	f7fc fb81 	bl	8007cd0 <malloc>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	6270      	str	r0, [r6, #36]	; 0x24
 800b5d2:	b928      	cbnz	r0, 800b5e0 <__pow5mult+0x40>
 800b5d4:	4b1d      	ldr	r3, [pc, #116]	; (800b64c <__pow5mult+0xac>)
 800b5d6:	481e      	ldr	r0, [pc, #120]	; (800b650 <__pow5mult+0xb0>)
 800b5d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b5dc:	f000 fc70 	bl	800bec0 <__assert_func>
 800b5e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5e4:	6004      	str	r4, [r0, #0]
 800b5e6:	60c4      	str	r4, [r0, #12]
 800b5e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5f0:	b94c      	cbnz	r4, 800b606 <__pow5mult+0x66>
 800b5f2:	f240 2171 	movw	r1, #625	; 0x271
 800b5f6:	4630      	mov	r0, r6
 800b5f8:	f7ff ff16 	bl	800b428 <__i2b>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800b602:	4604      	mov	r4, r0
 800b604:	6003      	str	r3, [r0, #0]
 800b606:	f04f 0900 	mov.w	r9, #0
 800b60a:	07eb      	lsls	r3, r5, #31
 800b60c:	d50a      	bpl.n	800b624 <__pow5mult+0x84>
 800b60e:	4639      	mov	r1, r7
 800b610:	4622      	mov	r2, r4
 800b612:	4630      	mov	r0, r6
 800b614:	f7ff ff1e 	bl	800b454 <__multiply>
 800b618:	4639      	mov	r1, r7
 800b61a:	4680      	mov	r8, r0
 800b61c:	4630      	mov	r0, r6
 800b61e:	f7ff fdfd 	bl	800b21c <_Bfree>
 800b622:	4647      	mov	r7, r8
 800b624:	106d      	asrs	r5, r5, #1
 800b626:	d00b      	beq.n	800b640 <__pow5mult+0xa0>
 800b628:	6820      	ldr	r0, [r4, #0]
 800b62a:	b938      	cbnz	r0, 800b63c <__pow5mult+0x9c>
 800b62c:	4622      	mov	r2, r4
 800b62e:	4621      	mov	r1, r4
 800b630:	4630      	mov	r0, r6
 800b632:	f7ff ff0f 	bl	800b454 <__multiply>
 800b636:	6020      	str	r0, [r4, #0]
 800b638:	f8c0 9000 	str.w	r9, [r0]
 800b63c:	4604      	mov	r4, r0
 800b63e:	e7e4      	b.n	800b60a <__pow5mult+0x6a>
 800b640:	4638      	mov	r0, r7
 800b642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b646:	bf00      	nop
 800b648:	0800db00 	.word	0x0800db00
 800b64c:	0800d846 	.word	0x0800d846
 800b650:	0800d9b0 	.word	0x0800d9b0

0800b654 <__lshift>:
 800b654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b658:	460c      	mov	r4, r1
 800b65a:	6849      	ldr	r1, [r1, #4]
 800b65c:	6923      	ldr	r3, [r4, #16]
 800b65e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b662:	68a3      	ldr	r3, [r4, #8]
 800b664:	4607      	mov	r7, r0
 800b666:	4691      	mov	r9, r2
 800b668:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b66c:	f108 0601 	add.w	r6, r8, #1
 800b670:	42b3      	cmp	r3, r6
 800b672:	db0b      	blt.n	800b68c <__lshift+0x38>
 800b674:	4638      	mov	r0, r7
 800b676:	f7ff fd91 	bl	800b19c <_Balloc>
 800b67a:	4605      	mov	r5, r0
 800b67c:	b948      	cbnz	r0, 800b692 <__lshift+0x3e>
 800b67e:	4602      	mov	r2, r0
 800b680:	4b28      	ldr	r3, [pc, #160]	; (800b724 <__lshift+0xd0>)
 800b682:	4829      	ldr	r0, [pc, #164]	; (800b728 <__lshift+0xd4>)
 800b684:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b688:	f000 fc1a 	bl	800bec0 <__assert_func>
 800b68c:	3101      	adds	r1, #1
 800b68e:	005b      	lsls	r3, r3, #1
 800b690:	e7ee      	b.n	800b670 <__lshift+0x1c>
 800b692:	2300      	movs	r3, #0
 800b694:	f100 0114 	add.w	r1, r0, #20
 800b698:	f100 0210 	add.w	r2, r0, #16
 800b69c:	4618      	mov	r0, r3
 800b69e:	4553      	cmp	r3, sl
 800b6a0:	db33      	blt.n	800b70a <__lshift+0xb6>
 800b6a2:	6920      	ldr	r0, [r4, #16]
 800b6a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6a8:	f104 0314 	add.w	r3, r4, #20
 800b6ac:	f019 091f 	ands.w	r9, r9, #31
 800b6b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6b8:	d02b      	beq.n	800b712 <__lshift+0xbe>
 800b6ba:	f1c9 0e20 	rsb	lr, r9, #32
 800b6be:	468a      	mov	sl, r1
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	6818      	ldr	r0, [r3, #0]
 800b6c4:	fa00 f009 	lsl.w	r0, r0, r9
 800b6c8:	4302      	orrs	r2, r0
 800b6ca:	f84a 2b04 	str.w	r2, [sl], #4
 800b6ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6d2:	459c      	cmp	ip, r3
 800b6d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b6d8:	d8f3      	bhi.n	800b6c2 <__lshift+0x6e>
 800b6da:	ebac 0304 	sub.w	r3, ip, r4
 800b6de:	3b15      	subs	r3, #21
 800b6e0:	f023 0303 	bic.w	r3, r3, #3
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	f104 0015 	add.w	r0, r4, #21
 800b6ea:	4584      	cmp	ip, r0
 800b6ec:	bf38      	it	cc
 800b6ee:	2304      	movcc	r3, #4
 800b6f0:	50ca      	str	r2, [r1, r3]
 800b6f2:	b10a      	cbz	r2, 800b6f8 <__lshift+0xa4>
 800b6f4:	f108 0602 	add.w	r6, r8, #2
 800b6f8:	3e01      	subs	r6, #1
 800b6fa:	4638      	mov	r0, r7
 800b6fc:	612e      	str	r6, [r5, #16]
 800b6fe:	4621      	mov	r1, r4
 800b700:	f7ff fd8c 	bl	800b21c <_Bfree>
 800b704:	4628      	mov	r0, r5
 800b706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b70a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b70e:	3301      	adds	r3, #1
 800b710:	e7c5      	b.n	800b69e <__lshift+0x4a>
 800b712:	3904      	subs	r1, #4
 800b714:	f853 2b04 	ldr.w	r2, [r3], #4
 800b718:	f841 2f04 	str.w	r2, [r1, #4]!
 800b71c:	459c      	cmp	ip, r3
 800b71e:	d8f9      	bhi.n	800b714 <__lshift+0xc0>
 800b720:	e7ea      	b.n	800b6f8 <__lshift+0xa4>
 800b722:	bf00      	nop
 800b724:	0800d8bc 	.word	0x0800d8bc
 800b728:	0800d9b0 	.word	0x0800d9b0

0800b72c <__mcmp>:
 800b72c:	b530      	push	{r4, r5, lr}
 800b72e:	6902      	ldr	r2, [r0, #16]
 800b730:	690c      	ldr	r4, [r1, #16]
 800b732:	1b12      	subs	r2, r2, r4
 800b734:	d10e      	bne.n	800b754 <__mcmp+0x28>
 800b736:	f100 0314 	add.w	r3, r0, #20
 800b73a:	3114      	adds	r1, #20
 800b73c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b740:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b744:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b748:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b74c:	42a5      	cmp	r5, r4
 800b74e:	d003      	beq.n	800b758 <__mcmp+0x2c>
 800b750:	d305      	bcc.n	800b75e <__mcmp+0x32>
 800b752:	2201      	movs	r2, #1
 800b754:	4610      	mov	r0, r2
 800b756:	bd30      	pop	{r4, r5, pc}
 800b758:	4283      	cmp	r3, r0
 800b75a:	d3f3      	bcc.n	800b744 <__mcmp+0x18>
 800b75c:	e7fa      	b.n	800b754 <__mcmp+0x28>
 800b75e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b762:	e7f7      	b.n	800b754 <__mcmp+0x28>

0800b764 <__mdiff>:
 800b764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b768:	460c      	mov	r4, r1
 800b76a:	4606      	mov	r6, r0
 800b76c:	4611      	mov	r1, r2
 800b76e:	4620      	mov	r0, r4
 800b770:	4617      	mov	r7, r2
 800b772:	f7ff ffdb 	bl	800b72c <__mcmp>
 800b776:	1e05      	subs	r5, r0, #0
 800b778:	d110      	bne.n	800b79c <__mdiff+0x38>
 800b77a:	4629      	mov	r1, r5
 800b77c:	4630      	mov	r0, r6
 800b77e:	f7ff fd0d 	bl	800b19c <_Balloc>
 800b782:	b930      	cbnz	r0, 800b792 <__mdiff+0x2e>
 800b784:	4b39      	ldr	r3, [pc, #228]	; (800b86c <__mdiff+0x108>)
 800b786:	4602      	mov	r2, r0
 800b788:	f240 2132 	movw	r1, #562	; 0x232
 800b78c:	4838      	ldr	r0, [pc, #224]	; (800b870 <__mdiff+0x10c>)
 800b78e:	f000 fb97 	bl	800bec0 <__assert_func>
 800b792:	2301      	movs	r3, #1
 800b794:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b79c:	bfa4      	itt	ge
 800b79e:	463b      	movge	r3, r7
 800b7a0:	4627      	movge	r7, r4
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	6879      	ldr	r1, [r7, #4]
 800b7a6:	bfa6      	itte	ge
 800b7a8:	461c      	movge	r4, r3
 800b7aa:	2500      	movge	r5, #0
 800b7ac:	2501      	movlt	r5, #1
 800b7ae:	f7ff fcf5 	bl	800b19c <_Balloc>
 800b7b2:	b920      	cbnz	r0, 800b7be <__mdiff+0x5a>
 800b7b4:	4b2d      	ldr	r3, [pc, #180]	; (800b86c <__mdiff+0x108>)
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b7bc:	e7e6      	b.n	800b78c <__mdiff+0x28>
 800b7be:	693e      	ldr	r6, [r7, #16]
 800b7c0:	60c5      	str	r5, [r0, #12]
 800b7c2:	6925      	ldr	r5, [r4, #16]
 800b7c4:	f107 0114 	add.w	r1, r7, #20
 800b7c8:	f104 0914 	add.w	r9, r4, #20
 800b7cc:	f100 0e14 	add.w	lr, r0, #20
 800b7d0:	f107 0210 	add.w	r2, r7, #16
 800b7d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b7d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b7dc:	46f2      	mov	sl, lr
 800b7de:	2700      	movs	r7, #0
 800b7e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b7e8:	fa1f f883 	uxth.w	r8, r3
 800b7ec:	fa17 f78b 	uxtah	r7, r7, fp
 800b7f0:	0c1b      	lsrs	r3, r3, #16
 800b7f2:	eba7 0808 	sub.w	r8, r7, r8
 800b7f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b7fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b7fe:	fa1f f888 	uxth.w	r8, r8
 800b802:	141f      	asrs	r7, r3, #16
 800b804:	454d      	cmp	r5, r9
 800b806:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b80a:	f84a 3b04 	str.w	r3, [sl], #4
 800b80e:	d8e7      	bhi.n	800b7e0 <__mdiff+0x7c>
 800b810:	1b2b      	subs	r3, r5, r4
 800b812:	3b15      	subs	r3, #21
 800b814:	f023 0303 	bic.w	r3, r3, #3
 800b818:	3304      	adds	r3, #4
 800b81a:	3415      	adds	r4, #21
 800b81c:	42a5      	cmp	r5, r4
 800b81e:	bf38      	it	cc
 800b820:	2304      	movcc	r3, #4
 800b822:	4419      	add	r1, r3
 800b824:	4473      	add	r3, lr
 800b826:	469e      	mov	lr, r3
 800b828:	460d      	mov	r5, r1
 800b82a:	4565      	cmp	r5, ip
 800b82c:	d30e      	bcc.n	800b84c <__mdiff+0xe8>
 800b82e:	f10c 0203 	add.w	r2, ip, #3
 800b832:	1a52      	subs	r2, r2, r1
 800b834:	f022 0203 	bic.w	r2, r2, #3
 800b838:	3903      	subs	r1, #3
 800b83a:	458c      	cmp	ip, r1
 800b83c:	bf38      	it	cc
 800b83e:	2200      	movcc	r2, #0
 800b840:	441a      	add	r2, r3
 800b842:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b846:	b17b      	cbz	r3, 800b868 <__mdiff+0x104>
 800b848:	6106      	str	r6, [r0, #16]
 800b84a:	e7a5      	b.n	800b798 <__mdiff+0x34>
 800b84c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b850:	fa17 f488 	uxtah	r4, r7, r8
 800b854:	1422      	asrs	r2, r4, #16
 800b856:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b85a:	b2a4      	uxth	r4, r4
 800b85c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b860:	f84e 4b04 	str.w	r4, [lr], #4
 800b864:	1417      	asrs	r7, r2, #16
 800b866:	e7e0      	b.n	800b82a <__mdiff+0xc6>
 800b868:	3e01      	subs	r6, #1
 800b86a:	e7ea      	b.n	800b842 <__mdiff+0xde>
 800b86c:	0800d8bc 	.word	0x0800d8bc
 800b870:	0800d9b0 	.word	0x0800d9b0

0800b874 <__ulp>:
 800b874:	b082      	sub	sp, #8
 800b876:	ed8d 0b00 	vstr	d0, [sp]
 800b87a:	9b01      	ldr	r3, [sp, #4]
 800b87c:	4912      	ldr	r1, [pc, #72]	; (800b8c8 <__ulp+0x54>)
 800b87e:	4019      	ands	r1, r3
 800b880:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b884:	2900      	cmp	r1, #0
 800b886:	dd05      	ble.n	800b894 <__ulp+0x20>
 800b888:	2200      	movs	r2, #0
 800b88a:	460b      	mov	r3, r1
 800b88c:	ec43 2b10 	vmov	d0, r2, r3
 800b890:	b002      	add	sp, #8
 800b892:	4770      	bx	lr
 800b894:	4249      	negs	r1, r1
 800b896:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b89a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b89e:	f04f 0200 	mov.w	r2, #0
 800b8a2:	f04f 0300 	mov.w	r3, #0
 800b8a6:	da04      	bge.n	800b8b2 <__ulp+0x3e>
 800b8a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b8ac:	fa41 f300 	asr.w	r3, r1, r0
 800b8b0:	e7ec      	b.n	800b88c <__ulp+0x18>
 800b8b2:	f1a0 0114 	sub.w	r1, r0, #20
 800b8b6:	291e      	cmp	r1, #30
 800b8b8:	bfda      	itte	le
 800b8ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b8be:	fa20 f101 	lsrle.w	r1, r0, r1
 800b8c2:	2101      	movgt	r1, #1
 800b8c4:	460a      	mov	r2, r1
 800b8c6:	e7e1      	b.n	800b88c <__ulp+0x18>
 800b8c8:	7ff00000 	.word	0x7ff00000

0800b8cc <__b2d>:
 800b8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ce:	6905      	ldr	r5, [r0, #16]
 800b8d0:	f100 0714 	add.w	r7, r0, #20
 800b8d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b8d8:	1f2e      	subs	r6, r5, #4
 800b8da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f7ff fd52 	bl	800b388 <__hi0bits>
 800b8e4:	f1c0 0320 	rsb	r3, r0, #32
 800b8e8:	280a      	cmp	r0, #10
 800b8ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b968 <__b2d+0x9c>
 800b8ee:	600b      	str	r3, [r1, #0]
 800b8f0:	dc14      	bgt.n	800b91c <__b2d+0x50>
 800b8f2:	f1c0 0e0b 	rsb	lr, r0, #11
 800b8f6:	fa24 f10e 	lsr.w	r1, r4, lr
 800b8fa:	42b7      	cmp	r7, r6
 800b8fc:	ea41 030c 	orr.w	r3, r1, ip
 800b900:	bf34      	ite	cc
 800b902:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b906:	2100      	movcs	r1, #0
 800b908:	3015      	adds	r0, #21
 800b90a:	fa04 f000 	lsl.w	r0, r4, r0
 800b90e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b912:	ea40 0201 	orr.w	r2, r0, r1
 800b916:	ec43 2b10 	vmov	d0, r2, r3
 800b91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b91c:	42b7      	cmp	r7, r6
 800b91e:	bf3a      	itte	cc
 800b920:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b924:	f1a5 0608 	subcc.w	r6, r5, #8
 800b928:	2100      	movcs	r1, #0
 800b92a:	380b      	subs	r0, #11
 800b92c:	d017      	beq.n	800b95e <__b2d+0x92>
 800b92e:	f1c0 0c20 	rsb	ip, r0, #32
 800b932:	fa04 f500 	lsl.w	r5, r4, r0
 800b936:	42be      	cmp	r6, r7
 800b938:	fa21 f40c 	lsr.w	r4, r1, ip
 800b93c:	ea45 0504 	orr.w	r5, r5, r4
 800b940:	bf8c      	ite	hi
 800b942:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b946:	2400      	movls	r4, #0
 800b948:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b94c:	fa01 f000 	lsl.w	r0, r1, r0
 800b950:	fa24 f40c 	lsr.w	r4, r4, ip
 800b954:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b958:	ea40 0204 	orr.w	r2, r0, r4
 800b95c:	e7db      	b.n	800b916 <__b2d+0x4a>
 800b95e:	ea44 030c 	orr.w	r3, r4, ip
 800b962:	460a      	mov	r2, r1
 800b964:	e7d7      	b.n	800b916 <__b2d+0x4a>
 800b966:	bf00      	nop
 800b968:	3ff00000 	.word	0x3ff00000

0800b96c <__d2b>:
 800b96c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b970:	4689      	mov	r9, r1
 800b972:	2101      	movs	r1, #1
 800b974:	ec57 6b10 	vmov	r6, r7, d0
 800b978:	4690      	mov	r8, r2
 800b97a:	f7ff fc0f 	bl	800b19c <_Balloc>
 800b97e:	4604      	mov	r4, r0
 800b980:	b930      	cbnz	r0, 800b990 <__d2b+0x24>
 800b982:	4602      	mov	r2, r0
 800b984:	4b25      	ldr	r3, [pc, #148]	; (800ba1c <__d2b+0xb0>)
 800b986:	4826      	ldr	r0, [pc, #152]	; (800ba20 <__d2b+0xb4>)
 800b988:	f240 310a 	movw	r1, #778	; 0x30a
 800b98c:	f000 fa98 	bl	800bec0 <__assert_func>
 800b990:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b994:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b998:	bb35      	cbnz	r5, 800b9e8 <__d2b+0x7c>
 800b99a:	2e00      	cmp	r6, #0
 800b99c:	9301      	str	r3, [sp, #4]
 800b99e:	d028      	beq.n	800b9f2 <__d2b+0x86>
 800b9a0:	4668      	mov	r0, sp
 800b9a2:	9600      	str	r6, [sp, #0]
 800b9a4:	f7ff fd10 	bl	800b3c8 <__lo0bits>
 800b9a8:	9900      	ldr	r1, [sp, #0]
 800b9aa:	b300      	cbz	r0, 800b9ee <__d2b+0x82>
 800b9ac:	9a01      	ldr	r2, [sp, #4]
 800b9ae:	f1c0 0320 	rsb	r3, r0, #32
 800b9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9b6:	430b      	orrs	r3, r1
 800b9b8:	40c2      	lsrs	r2, r0
 800b9ba:	6163      	str	r3, [r4, #20]
 800b9bc:	9201      	str	r2, [sp, #4]
 800b9be:	9b01      	ldr	r3, [sp, #4]
 800b9c0:	61a3      	str	r3, [r4, #24]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	bf14      	ite	ne
 800b9c6:	2202      	movne	r2, #2
 800b9c8:	2201      	moveq	r2, #1
 800b9ca:	6122      	str	r2, [r4, #16]
 800b9cc:	b1d5      	cbz	r5, 800ba04 <__d2b+0x98>
 800b9ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b9d2:	4405      	add	r5, r0
 800b9d4:	f8c9 5000 	str.w	r5, [r9]
 800b9d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b9dc:	f8c8 0000 	str.w	r0, [r8]
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	b003      	add	sp, #12
 800b9e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9ec:	e7d5      	b.n	800b99a <__d2b+0x2e>
 800b9ee:	6161      	str	r1, [r4, #20]
 800b9f0:	e7e5      	b.n	800b9be <__d2b+0x52>
 800b9f2:	a801      	add	r0, sp, #4
 800b9f4:	f7ff fce8 	bl	800b3c8 <__lo0bits>
 800b9f8:	9b01      	ldr	r3, [sp, #4]
 800b9fa:	6163      	str	r3, [r4, #20]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	6122      	str	r2, [r4, #16]
 800ba00:	3020      	adds	r0, #32
 800ba02:	e7e3      	b.n	800b9cc <__d2b+0x60>
 800ba04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba0c:	f8c9 0000 	str.w	r0, [r9]
 800ba10:	6918      	ldr	r0, [r3, #16]
 800ba12:	f7ff fcb9 	bl	800b388 <__hi0bits>
 800ba16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba1a:	e7df      	b.n	800b9dc <__d2b+0x70>
 800ba1c:	0800d8bc 	.word	0x0800d8bc
 800ba20:	0800d9b0 	.word	0x0800d9b0

0800ba24 <__ratio>:
 800ba24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba28:	4688      	mov	r8, r1
 800ba2a:	4669      	mov	r1, sp
 800ba2c:	4681      	mov	r9, r0
 800ba2e:	f7ff ff4d 	bl	800b8cc <__b2d>
 800ba32:	a901      	add	r1, sp, #4
 800ba34:	4640      	mov	r0, r8
 800ba36:	ec55 4b10 	vmov	r4, r5, d0
 800ba3a:	f7ff ff47 	bl	800b8cc <__b2d>
 800ba3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba42:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ba46:	eba3 0c02 	sub.w	ip, r3, r2
 800ba4a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba4e:	1a9b      	subs	r3, r3, r2
 800ba50:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ba54:	ec51 0b10 	vmov	r0, r1, d0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	bfd6      	itet	le
 800ba5c:	460a      	movle	r2, r1
 800ba5e:	462a      	movgt	r2, r5
 800ba60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba64:	468b      	mov	fp, r1
 800ba66:	462f      	mov	r7, r5
 800ba68:	bfd4      	ite	le
 800ba6a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ba6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ba72:	4620      	mov	r0, r4
 800ba74:	ee10 2a10 	vmov	r2, s0
 800ba78:	465b      	mov	r3, fp
 800ba7a:	4639      	mov	r1, r7
 800ba7c:	f7f4 ff06 	bl	800088c <__aeabi_ddiv>
 800ba80:	ec41 0b10 	vmov	d0, r0, r1
 800ba84:	b003      	add	sp, #12
 800ba86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba8a <__copybits>:
 800ba8a:	3901      	subs	r1, #1
 800ba8c:	b570      	push	{r4, r5, r6, lr}
 800ba8e:	1149      	asrs	r1, r1, #5
 800ba90:	6914      	ldr	r4, [r2, #16]
 800ba92:	3101      	adds	r1, #1
 800ba94:	f102 0314 	add.w	r3, r2, #20
 800ba98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800baa0:	1f05      	subs	r5, r0, #4
 800baa2:	42a3      	cmp	r3, r4
 800baa4:	d30c      	bcc.n	800bac0 <__copybits+0x36>
 800baa6:	1aa3      	subs	r3, r4, r2
 800baa8:	3b11      	subs	r3, #17
 800baaa:	f023 0303 	bic.w	r3, r3, #3
 800baae:	3211      	adds	r2, #17
 800bab0:	42a2      	cmp	r2, r4
 800bab2:	bf88      	it	hi
 800bab4:	2300      	movhi	r3, #0
 800bab6:	4418      	add	r0, r3
 800bab8:	2300      	movs	r3, #0
 800baba:	4288      	cmp	r0, r1
 800babc:	d305      	bcc.n	800baca <__copybits+0x40>
 800babe:	bd70      	pop	{r4, r5, r6, pc}
 800bac0:	f853 6b04 	ldr.w	r6, [r3], #4
 800bac4:	f845 6f04 	str.w	r6, [r5, #4]!
 800bac8:	e7eb      	b.n	800baa2 <__copybits+0x18>
 800baca:	f840 3b04 	str.w	r3, [r0], #4
 800bace:	e7f4      	b.n	800baba <__copybits+0x30>

0800bad0 <__any_on>:
 800bad0:	f100 0214 	add.w	r2, r0, #20
 800bad4:	6900      	ldr	r0, [r0, #16]
 800bad6:	114b      	asrs	r3, r1, #5
 800bad8:	4298      	cmp	r0, r3
 800bada:	b510      	push	{r4, lr}
 800badc:	db11      	blt.n	800bb02 <__any_on+0x32>
 800bade:	dd0a      	ble.n	800baf6 <__any_on+0x26>
 800bae0:	f011 011f 	ands.w	r1, r1, #31
 800bae4:	d007      	beq.n	800baf6 <__any_on+0x26>
 800bae6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800baea:	fa24 f001 	lsr.w	r0, r4, r1
 800baee:	fa00 f101 	lsl.w	r1, r0, r1
 800baf2:	428c      	cmp	r4, r1
 800baf4:	d10b      	bne.n	800bb0e <__any_on+0x3e>
 800baf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d803      	bhi.n	800bb06 <__any_on+0x36>
 800bafe:	2000      	movs	r0, #0
 800bb00:	bd10      	pop	{r4, pc}
 800bb02:	4603      	mov	r3, r0
 800bb04:	e7f7      	b.n	800baf6 <__any_on+0x26>
 800bb06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb0a:	2900      	cmp	r1, #0
 800bb0c:	d0f5      	beq.n	800bafa <__any_on+0x2a>
 800bb0e:	2001      	movs	r0, #1
 800bb10:	e7f6      	b.n	800bb00 <__any_on+0x30>

0800bb12 <__ssputs_r>:
 800bb12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb16:	688e      	ldr	r6, [r1, #8]
 800bb18:	429e      	cmp	r6, r3
 800bb1a:	4682      	mov	sl, r0
 800bb1c:	460c      	mov	r4, r1
 800bb1e:	4690      	mov	r8, r2
 800bb20:	461f      	mov	r7, r3
 800bb22:	d838      	bhi.n	800bb96 <__ssputs_r+0x84>
 800bb24:	898a      	ldrh	r2, [r1, #12]
 800bb26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb2a:	d032      	beq.n	800bb92 <__ssputs_r+0x80>
 800bb2c:	6825      	ldr	r5, [r4, #0]
 800bb2e:	6909      	ldr	r1, [r1, #16]
 800bb30:	eba5 0901 	sub.w	r9, r5, r1
 800bb34:	6965      	ldr	r5, [r4, #20]
 800bb36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb3e:	3301      	adds	r3, #1
 800bb40:	444b      	add	r3, r9
 800bb42:	106d      	asrs	r5, r5, #1
 800bb44:	429d      	cmp	r5, r3
 800bb46:	bf38      	it	cc
 800bb48:	461d      	movcc	r5, r3
 800bb4a:	0553      	lsls	r3, r2, #21
 800bb4c:	d531      	bpl.n	800bbb2 <__ssputs_r+0xa0>
 800bb4e:	4629      	mov	r1, r5
 800bb50:	f7fc f92e 	bl	8007db0 <_malloc_r>
 800bb54:	4606      	mov	r6, r0
 800bb56:	b950      	cbnz	r0, 800bb6e <__ssputs_r+0x5c>
 800bb58:	230c      	movs	r3, #12
 800bb5a:	f8ca 3000 	str.w	r3, [sl]
 800bb5e:	89a3      	ldrh	r3, [r4, #12]
 800bb60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb64:	81a3      	strh	r3, [r4, #12]
 800bb66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb6e:	6921      	ldr	r1, [r4, #16]
 800bb70:	464a      	mov	r2, r9
 800bb72:	f7ff faf9 	bl	800b168 <memcpy>
 800bb76:	89a3      	ldrh	r3, [r4, #12]
 800bb78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb80:	81a3      	strh	r3, [r4, #12]
 800bb82:	6126      	str	r6, [r4, #16]
 800bb84:	6165      	str	r5, [r4, #20]
 800bb86:	444e      	add	r6, r9
 800bb88:	eba5 0509 	sub.w	r5, r5, r9
 800bb8c:	6026      	str	r6, [r4, #0]
 800bb8e:	60a5      	str	r5, [r4, #8]
 800bb90:	463e      	mov	r6, r7
 800bb92:	42be      	cmp	r6, r7
 800bb94:	d900      	bls.n	800bb98 <__ssputs_r+0x86>
 800bb96:	463e      	mov	r6, r7
 800bb98:	4632      	mov	r2, r6
 800bb9a:	6820      	ldr	r0, [r4, #0]
 800bb9c:	4641      	mov	r1, r8
 800bb9e:	f000 fa03 	bl	800bfa8 <memmove>
 800bba2:	68a3      	ldr	r3, [r4, #8]
 800bba4:	6822      	ldr	r2, [r4, #0]
 800bba6:	1b9b      	subs	r3, r3, r6
 800bba8:	4432      	add	r2, r6
 800bbaa:	60a3      	str	r3, [r4, #8]
 800bbac:	6022      	str	r2, [r4, #0]
 800bbae:	2000      	movs	r0, #0
 800bbb0:	e7db      	b.n	800bb6a <__ssputs_r+0x58>
 800bbb2:	462a      	mov	r2, r5
 800bbb4:	f000 fa12 	bl	800bfdc <_realloc_r>
 800bbb8:	4606      	mov	r6, r0
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	d1e1      	bne.n	800bb82 <__ssputs_r+0x70>
 800bbbe:	6921      	ldr	r1, [r4, #16]
 800bbc0:	4650      	mov	r0, sl
 800bbc2:	f7fc f8a5 	bl	8007d10 <_free_r>
 800bbc6:	e7c7      	b.n	800bb58 <__ssputs_r+0x46>

0800bbc8 <_svfiprintf_r>:
 800bbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbcc:	4698      	mov	r8, r3
 800bbce:	898b      	ldrh	r3, [r1, #12]
 800bbd0:	061b      	lsls	r3, r3, #24
 800bbd2:	b09d      	sub	sp, #116	; 0x74
 800bbd4:	4607      	mov	r7, r0
 800bbd6:	460d      	mov	r5, r1
 800bbd8:	4614      	mov	r4, r2
 800bbda:	d50e      	bpl.n	800bbfa <_svfiprintf_r+0x32>
 800bbdc:	690b      	ldr	r3, [r1, #16]
 800bbde:	b963      	cbnz	r3, 800bbfa <_svfiprintf_r+0x32>
 800bbe0:	2140      	movs	r1, #64	; 0x40
 800bbe2:	f7fc f8e5 	bl	8007db0 <_malloc_r>
 800bbe6:	6028      	str	r0, [r5, #0]
 800bbe8:	6128      	str	r0, [r5, #16]
 800bbea:	b920      	cbnz	r0, 800bbf6 <_svfiprintf_r+0x2e>
 800bbec:	230c      	movs	r3, #12
 800bbee:	603b      	str	r3, [r7, #0]
 800bbf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbf4:	e0d1      	b.n	800bd9a <_svfiprintf_r+0x1d2>
 800bbf6:	2340      	movs	r3, #64	; 0x40
 800bbf8:	616b      	str	r3, [r5, #20]
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	9309      	str	r3, [sp, #36]	; 0x24
 800bbfe:	2320      	movs	r3, #32
 800bc00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc04:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc08:	2330      	movs	r3, #48	; 0x30
 800bc0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bdb4 <_svfiprintf_r+0x1ec>
 800bc0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc12:	f04f 0901 	mov.w	r9, #1
 800bc16:	4623      	mov	r3, r4
 800bc18:	469a      	mov	sl, r3
 800bc1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc1e:	b10a      	cbz	r2, 800bc24 <_svfiprintf_r+0x5c>
 800bc20:	2a25      	cmp	r2, #37	; 0x25
 800bc22:	d1f9      	bne.n	800bc18 <_svfiprintf_r+0x50>
 800bc24:	ebba 0b04 	subs.w	fp, sl, r4
 800bc28:	d00b      	beq.n	800bc42 <_svfiprintf_r+0x7a>
 800bc2a:	465b      	mov	r3, fp
 800bc2c:	4622      	mov	r2, r4
 800bc2e:	4629      	mov	r1, r5
 800bc30:	4638      	mov	r0, r7
 800bc32:	f7ff ff6e 	bl	800bb12 <__ssputs_r>
 800bc36:	3001      	adds	r0, #1
 800bc38:	f000 80aa 	beq.w	800bd90 <_svfiprintf_r+0x1c8>
 800bc3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc3e:	445a      	add	r2, fp
 800bc40:	9209      	str	r2, [sp, #36]	; 0x24
 800bc42:	f89a 3000 	ldrb.w	r3, [sl]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f000 80a2 	beq.w	800bd90 <_svfiprintf_r+0x1c8>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc56:	f10a 0a01 	add.w	sl, sl, #1
 800bc5a:	9304      	str	r3, [sp, #16]
 800bc5c:	9307      	str	r3, [sp, #28]
 800bc5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc62:	931a      	str	r3, [sp, #104]	; 0x68
 800bc64:	4654      	mov	r4, sl
 800bc66:	2205      	movs	r2, #5
 800bc68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc6c:	4851      	ldr	r0, [pc, #324]	; (800bdb4 <_svfiprintf_r+0x1ec>)
 800bc6e:	f7f4 fad7 	bl	8000220 <memchr>
 800bc72:	9a04      	ldr	r2, [sp, #16]
 800bc74:	b9d8      	cbnz	r0, 800bcae <_svfiprintf_r+0xe6>
 800bc76:	06d0      	lsls	r0, r2, #27
 800bc78:	bf44      	itt	mi
 800bc7a:	2320      	movmi	r3, #32
 800bc7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc80:	0711      	lsls	r1, r2, #28
 800bc82:	bf44      	itt	mi
 800bc84:	232b      	movmi	r3, #43	; 0x2b
 800bc86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc8a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc8e:	2b2a      	cmp	r3, #42	; 0x2a
 800bc90:	d015      	beq.n	800bcbe <_svfiprintf_r+0xf6>
 800bc92:	9a07      	ldr	r2, [sp, #28]
 800bc94:	4654      	mov	r4, sl
 800bc96:	2000      	movs	r0, #0
 800bc98:	f04f 0c0a 	mov.w	ip, #10
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bca2:	3b30      	subs	r3, #48	; 0x30
 800bca4:	2b09      	cmp	r3, #9
 800bca6:	d94e      	bls.n	800bd46 <_svfiprintf_r+0x17e>
 800bca8:	b1b0      	cbz	r0, 800bcd8 <_svfiprintf_r+0x110>
 800bcaa:	9207      	str	r2, [sp, #28]
 800bcac:	e014      	b.n	800bcd8 <_svfiprintf_r+0x110>
 800bcae:	eba0 0308 	sub.w	r3, r0, r8
 800bcb2:	fa09 f303 	lsl.w	r3, r9, r3
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	9304      	str	r3, [sp, #16]
 800bcba:	46a2      	mov	sl, r4
 800bcbc:	e7d2      	b.n	800bc64 <_svfiprintf_r+0x9c>
 800bcbe:	9b03      	ldr	r3, [sp, #12]
 800bcc0:	1d19      	adds	r1, r3, #4
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	9103      	str	r1, [sp, #12]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	bfbb      	ittet	lt
 800bcca:	425b      	neglt	r3, r3
 800bccc:	f042 0202 	orrlt.w	r2, r2, #2
 800bcd0:	9307      	strge	r3, [sp, #28]
 800bcd2:	9307      	strlt	r3, [sp, #28]
 800bcd4:	bfb8      	it	lt
 800bcd6:	9204      	strlt	r2, [sp, #16]
 800bcd8:	7823      	ldrb	r3, [r4, #0]
 800bcda:	2b2e      	cmp	r3, #46	; 0x2e
 800bcdc:	d10c      	bne.n	800bcf8 <_svfiprintf_r+0x130>
 800bcde:	7863      	ldrb	r3, [r4, #1]
 800bce0:	2b2a      	cmp	r3, #42	; 0x2a
 800bce2:	d135      	bne.n	800bd50 <_svfiprintf_r+0x188>
 800bce4:	9b03      	ldr	r3, [sp, #12]
 800bce6:	1d1a      	adds	r2, r3, #4
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	9203      	str	r2, [sp, #12]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	bfb8      	it	lt
 800bcf0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bcf4:	3402      	adds	r4, #2
 800bcf6:	9305      	str	r3, [sp, #20]
 800bcf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bdc4 <_svfiprintf_r+0x1fc>
 800bcfc:	7821      	ldrb	r1, [r4, #0]
 800bcfe:	2203      	movs	r2, #3
 800bd00:	4650      	mov	r0, sl
 800bd02:	f7f4 fa8d 	bl	8000220 <memchr>
 800bd06:	b140      	cbz	r0, 800bd1a <_svfiprintf_r+0x152>
 800bd08:	2340      	movs	r3, #64	; 0x40
 800bd0a:	eba0 000a 	sub.w	r0, r0, sl
 800bd0e:	fa03 f000 	lsl.w	r0, r3, r0
 800bd12:	9b04      	ldr	r3, [sp, #16]
 800bd14:	4303      	orrs	r3, r0
 800bd16:	3401      	adds	r4, #1
 800bd18:	9304      	str	r3, [sp, #16]
 800bd1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd1e:	4826      	ldr	r0, [pc, #152]	; (800bdb8 <_svfiprintf_r+0x1f0>)
 800bd20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd24:	2206      	movs	r2, #6
 800bd26:	f7f4 fa7b 	bl	8000220 <memchr>
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d038      	beq.n	800bda0 <_svfiprintf_r+0x1d8>
 800bd2e:	4b23      	ldr	r3, [pc, #140]	; (800bdbc <_svfiprintf_r+0x1f4>)
 800bd30:	bb1b      	cbnz	r3, 800bd7a <_svfiprintf_r+0x1b2>
 800bd32:	9b03      	ldr	r3, [sp, #12]
 800bd34:	3307      	adds	r3, #7
 800bd36:	f023 0307 	bic.w	r3, r3, #7
 800bd3a:	3308      	adds	r3, #8
 800bd3c:	9303      	str	r3, [sp, #12]
 800bd3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd40:	4433      	add	r3, r6
 800bd42:	9309      	str	r3, [sp, #36]	; 0x24
 800bd44:	e767      	b.n	800bc16 <_svfiprintf_r+0x4e>
 800bd46:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	2001      	movs	r0, #1
 800bd4e:	e7a5      	b.n	800bc9c <_svfiprintf_r+0xd4>
 800bd50:	2300      	movs	r3, #0
 800bd52:	3401      	adds	r4, #1
 800bd54:	9305      	str	r3, [sp, #20]
 800bd56:	4619      	mov	r1, r3
 800bd58:	f04f 0c0a 	mov.w	ip, #10
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd62:	3a30      	subs	r2, #48	; 0x30
 800bd64:	2a09      	cmp	r2, #9
 800bd66:	d903      	bls.n	800bd70 <_svfiprintf_r+0x1a8>
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d0c5      	beq.n	800bcf8 <_svfiprintf_r+0x130>
 800bd6c:	9105      	str	r1, [sp, #20]
 800bd6e:	e7c3      	b.n	800bcf8 <_svfiprintf_r+0x130>
 800bd70:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd74:	4604      	mov	r4, r0
 800bd76:	2301      	movs	r3, #1
 800bd78:	e7f0      	b.n	800bd5c <_svfiprintf_r+0x194>
 800bd7a:	ab03      	add	r3, sp, #12
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	462a      	mov	r2, r5
 800bd80:	4b0f      	ldr	r3, [pc, #60]	; (800bdc0 <_svfiprintf_r+0x1f8>)
 800bd82:	a904      	add	r1, sp, #16
 800bd84:	4638      	mov	r0, r7
 800bd86:	f7fc f90d 	bl	8007fa4 <_printf_float>
 800bd8a:	1c42      	adds	r2, r0, #1
 800bd8c:	4606      	mov	r6, r0
 800bd8e:	d1d6      	bne.n	800bd3e <_svfiprintf_r+0x176>
 800bd90:	89ab      	ldrh	r3, [r5, #12]
 800bd92:	065b      	lsls	r3, r3, #25
 800bd94:	f53f af2c 	bmi.w	800bbf0 <_svfiprintf_r+0x28>
 800bd98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd9a:	b01d      	add	sp, #116	; 0x74
 800bd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda0:	ab03      	add	r3, sp, #12
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	462a      	mov	r2, r5
 800bda6:	4b06      	ldr	r3, [pc, #24]	; (800bdc0 <_svfiprintf_r+0x1f8>)
 800bda8:	a904      	add	r1, sp, #16
 800bdaa:	4638      	mov	r0, r7
 800bdac:	f7fc fb9e 	bl	80084ec <_printf_i>
 800bdb0:	e7eb      	b.n	800bd8a <_svfiprintf_r+0x1c2>
 800bdb2:	bf00      	nop
 800bdb4:	0800db0c 	.word	0x0800db0c
 800bdb8:	0800db16 	.word	0x0800db16
 800bdbc:	08007fa5 	.word	0x08007fa5
 800bdc0:	0800bb13 	.word	0x0800bb13
 800bdc4:	0800db12 	.word	0x0800db12

0800bdc8 <nan>:
 800bdc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bdd0 <nan+0x8>
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	00000000 	.word	0x00000000
 800bdd4:	7ff80000 	.word	0x7ff80000

0800bdd8 <__sread>:
 800bdd8:	b510      	push	{r4, lr}
 800bdda:	460c      	mov	r4, r1
 800bddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bde0:	f000 fa7c 	bl	800c2dc <_read_r>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	bfab      	itete	ge
 800bde8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdea:	89a3      	ldrhlt	r3, [r4, #12]
 800bdec:	181b      	addge	r3, r3, r0
 800bdee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdf2:	bfac      	ite	ge
 800bdf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bdf6:	81a3      	strhlt	r3, [r4, #12]
 800bdf8:	bd10      	pop	{r4, pc}

0800bdfa <__swrite>:
 800bdfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfe:	461f      	mov	r7, r3
 800be00:	898b      	ldrh	r3, [r1, #12]
 800be02:	05db      	lsls	r3, r3, #23
 800be04:	4605      	mov	r5, r0
 800be06:	460c      	mov	r4, r1
 800be08:	4616      	mov	r6, r2
 800be0a:	d505      	bpl.n	800be18 <__swrite+0x1e>
 800be0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be10:	2302      	movs	r3, #2
 800be12:	2200      	movs	r2, #0
 800be14:	f000 f8b6 	bl	800bf84 <_lseek_r>
 800be18:	89a3      	ldrh	r3, [r4, #12]
 800be1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be22:	81a3      	strh	r3, [r4, #12]
 800be24:	4632      	mov	r2, r6
 800be26:	463b      	mov	r3, r7
 800be28:	4628      	mov	r0, r5
 800be2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be2e:	f000 b835 	b.w	800be9c <_write_r>

0800be32 <__sseek>:
 800be32:	b510      	push	{r4, lr}
 800be34:	460c      	mov	r4, r1
 800be36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be3a:	f000 f8a3 	bl	800bf84 <_lseek_r>
 800be3e:	1c43      	adds	r3, r0, #1
 800be40:	89a3      	ldrh	r3, [r4, #12]
 800be42:	bf15      	itete	ne
 800be44:	6560      	strne	r0, [r4, #84]	; 0x54
 800be46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be4e:	81a3      	strheq	r3, [r4, #12]
 800be50:	bf18      	it	ne
 800be52:	81a3      	strhne	r3, [r4, #12]
 800be54:	bd10      	pop	{r4, pc}

0800be56 <__sclose>:
 800be56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be5a:	f000 b84f 	b.w	800befc <_close_r>

0800be5e <strncmp>:
 800be5e:	b510      	push	{r4, lr}
 800be60:	b16a      	cbz	r2, 800be7e <strncmp+0x20>
 800be62:	3901      	subs	r1, #1
 800be64:	1884      	adds	r4, r0, r2
 800be66:	f810 3b01 	ldrb.w	r3, [r0], #1
 800be6a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800be6e:	4293      	cmp	r3, r2
 800be70:	d103      	bne.n	800be7a <strncmp+0x1c>
 800be72:	42a0      	cmp	r0, r4
 800be74:	d001      	beq.n	800be7a <strncmp+0x1c>
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1f5      	bne.n	800be66 <strncmp+0x8>
 800be7a:	1a98      	subs	r0, r3, r2
 800be7c:	bd10      	pop	{r4, pc}
 800be7e:	4610      	mov	r0, r2
 800be80:	e7fc      	b.n	800be7c <strncmp+0x1e>

0800be82 <__ascii_wctomb>:
 800be82:	b149      	cbz	r1, 800be98 <__ascii_wctomb+0x16>
 800be84:	2aff      	cmp	r2, #255	; 0xff
 800be86:	bf85      	ittet	hi
 800be88:	238a      	movhi	r3, #138	; 0x8a
 800be8a:	6003      	strhi	r3, [r0, #0]
 800be8c:	700a      	strbls	r2, [r1, #0]
 800be8e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800be92:	bf98      	it	ls
 800be94:	2001      	movls	r0, #1
 800be96:	4770      	bx	lr
 800be98:	4608      	mov	r0, r1
 800be9a:	4770      	bx	lr

0800be9c <_write_r>:
 800be9c:	b538      	push	{r3, r4, r5, lr}
 800be9e:	4d07      	ldr	r5, [pc, #28]	; (800bebc <_write_r+0x20>)
 800bea0:	4604      	mov	r4, r0
 800bea2:	4608      	mov	r0, r1
 800bea4:	4611      	mov	r1, r2
 800bea6:	2200      	movs	r2, #0
 800bea8:	602a      	str	r2, [r5, #0]
 800beaa:	461a      	mov	r2, r3
 800beac:	f7f8 f85a 	bl	8003f64 <_write>
 800beb0:	1c43      	adds	r3, r0, #1
 800beb2:	d102      	bne.n	800beba <_write_r+0x1e>
 800beb4:	682b      	ldr	r3, [r5, #0]
 800beb6:	b103      	cbz	r3, 800beba <_write_r+0x1e>
 800beb8:	6023      	str	r3, [r4, #0]
 800beba:	bd38      	pop	{r3, r4, r5, pc}
 800bebc:	2000083c 	.word	0x2000083c

0800bec0 <__assert_func>:
 800bec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bec2:	4614      	mov	r4, r2
 800bec4:	461a      	mov	r2, r3
 800bec6:	4b09      	ldr	r3, [pc, #36]	; (800beec <__assert_func+0x2c>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4605      	mov	r5, r0
 800becc:	68d8      	ldr	r0, [r3, #12]
 800bece:	b14c      	cbz	r4, 800bee4 <__assert_func+0x24>
 800bed0:	4b07      	ldr	r3, [pc, #28]	; (800bef0 <__assert_func+0x30>)
 800bed2:	9100      	str	r1, [sp, #0]
 800bed4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bed8:	4906      	ldr	r1, [pc, #24]	; (800bef4 <__assert_func+0x34>)
 800beda:	462b      	mov	r3, r5
 800bedc:	f000 f81e 	bl	800bf1c <fiprintf>
 800bee0:	f000 face 	bl	800c480 <abort>
 800bee4:	4b04      	ldr	r3, [pc, #16]	; (800bef8 <__assert_func+0x38>)
 800bee6:	461c      	mov	r4, r3
 800bee8:	e7f3      	b.n	800bed2 <__assert_func+0x12>
 800beea:	bf00      	nop
 800beec:	2000000c 	.word	0x2000000c
 800bef0:	0800db1d 	.word	0x0800db1d
 800bef4:	0800db2a 	.word	0x0800db2a
 800bef8:	0800db58 	.word	0x0800db58

0800befc <_close_r>:
 800befc:	b538      	push	{r3, r4, r5, lr}
 800befe:	4d06      	ldr	r5, [pc, #24]	; (800bf18 <_close_r+0x1c>)
 800bf00:	2300      	movs	r3, #0
 800bf02:	4604      	mov	r4, r0
 800bf04:	4608      	mov	r0, r1
 800bf06:	602b      	str	r3, [r5, #0]
 800bf08:	f7f8 f858 	bl	8003fbc <_close>
 800bf0c:	1c43      	adds	r3, r0, #1
 800bf0e:	d102      	bne.n	800bf16 <_close_r+0x1a>
 800bf10:	682b      	ldr	r3, [r5, #0]
 800bf12:	b103      	cbz	r3, 800bf16 <_close_r+0x1a>
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	bd38      	pop	{r3, r4, r5, pc}
 800bf18:	2000083c 	.word	0x2000083c

0800bf1c <fiprintf>:
 800bf1c:	b40e      	push	{r1, r2, r3}
 800bf1e:	b503      	push	{r0, r1, lr}
 800bf20:	4601      	mov	r1, r0
 800bf22:	ab03      	add	r3, sp, #12
 800bf24:	4805      	ldr	r0, [pc, #20]	; (800bf3c <fiprintf+0x20>)
 800bf26:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf2a:	6800      	ldr	r0, [r0, #0]
 800bf2c:	9301      	str	r3, [sp, #4]
 800bf2e:	f000 f8a5 	bl	800c07c <_vfiprintf_r>
 800bf32:	b002      	add	sp, #8
 800bf34:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf38:	b003      	add	sp, #12
 800bf3a:	4770      	bx	lr
 800bf3c:	2000000c 	.word	0x2000000c

0800bf40 <_fstat_r>:
 800bf40:	b538      	push	{r3, r4, r5, lr}
 800bf42:	4d07      	ldr	r5, [pc, #28]	; (800bf60 <_fstat_r+0x20>)
 800bf44:	2300      	movs	r3, #0
 800bf46:	4604      	mov	r4, r0
 800bf48:	4608      	mov	r0, r1
 800bf4a:	4611      	mov	r1, r2
 800bf4c:	602b      	str	r3, [r5, #0]
 800bf4e:	f7f8 f885 	bl	800405c <_fstat>
 800bf52:	1c43      	adds	r3, r0, #1
 800bf54:	d102      	bne.n	800bf5c <_fstat_r+0x1c>
 800bf56:	682b      	ldr	r3, [r5, #0]
 800bf58:	b103      	cbz	r3, 800bf5c <_fstat_r+0x1c>
 800bf5a:	6023      	str	r3, [r4, #0]
 800bf5c:	bd38      	pop	{r3, r4, r5, pc}
 800bf5e:	bf00      	nop
 800bf60:	2000083c 	.word	0x2000083c

0800bf64 <_isatty_r>:
 800bf64:	b538      	push	{r3, r4, r5, lr}
 800bf66:	4d06      	ldr	r5, [pc, #24]	; (800bf80 <_isatty_r+0x1c>)
 800bf68:	2300      	movs	r3, #0
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	4608      	mov	r0, r1
 800bf6e:	602b      	str	r3, [r5, #0]
 800bf70:	f7f7 ffe1 	bl	8003f36 <_isatty>
 800bf74:	1c43      	adds	r3, r0, #1
 800bf76:	d102      	bne.n	800bf7e <_isatty_r+0x1a>
 800bf78:	682b      	ldr	r3, [r5, #0]
 800bf7a:	b103      	cbz	r3, 800bf7e <_isatty_r+0x1a>
 800bf7c:	6023      	str	r3, [r4, #0]
 800bf7e:	bd38      	pop	{r3, r4, r5, pc}
 800bf80:	2000083c 	.word	0x2000083c

0800bf84 <_lseek_r>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	4d07      	ldr	r5, [pc, #28]	; (800bfa4 <_lseek_r+0x20>)
 800bf88:	4604      	mov	r4, r0
 800bf8a:	4608      	mov	r0, r1
 800bf8c:	4611      	mov	r1, r2
 800bf8e:	2200      	movs	r2, #0
 800bf90:	602a      	str	r2, [r5, #0]
 800bf92:	461a      	mov	r2, r3
 800bf94:	f7f8 f829 	bl	8003fea <_lseek>
 800bf98:	1c43      	adds	r3, r0, #1
 800bf9a:	d102      	bne.n	800bfa2 <_lseek_r+0x1e>
 800bf9c:	682b      	ldr	r3, [r5, #0]
 800bf9e:	b103      	cbz	r3, 800bfa2 <_lseek_r+0x1e>
 800bfa0:	6023      	str	r3, [r4, #0]
 800bfa2:	bd38      	pop	{r3, r4, r5, pc}
 800bfa4:	2000083c 	.word	0x2000083c

0800bfa8 <memmove>:
 800bfa8:	4288      	cmp	r0, r1
 800bfaa:	b510      	push	{r4, lr}
 800bfac:	eb01 0402 	add.w	r4, r1, r2
 800bfb0:	d902      	bls.n	800bfb8 <memmove+0x10>
 800bfb2:	4284      	cmp	r4, r0
 800bfb4:	4623      	mov	r3, r4
 800bfb6:	d807      	bhi.n	800bfc8 <memmove+0x20>
 800bfb8:	1e43      	subs	r3, r0, #1
 800bfba:	42a1      	cmp	r1, r4
 800bfbc:	d008      	beq.n	800bfd0 <memmove+0x28>
 800bfbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfc6:	e7f8      	b.n	800bfba <memmove+0x12>
 800bfc8:	4402      	add	r2, r0
 800bfca:	4601      	mov	r1, r0
 800bfcc:	428a      	cmp	r2, r1
 800bfce:	d100      	bne.n	800bfd2 <memmove+0x2a>
 800bfd0:	bd10      	pop	{r4, pc}
 800bfd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfda:	e7f7      	b.n	800bfcc <memmove+0x24>

0800bfdc <_realloc_r>:
 800bfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfde:	4607      	mov	r7, r0
 800bfe0:	4614      	mov	r4, r2
 800bfe2:	460e      	mov	r6, r1
 800bfe4:	b921      	cbnz	r1, 800bff0 <_realloc_r+0x14>
 800bfe6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bfea:	4611      	mov	r1, r2
 800bfec:	f7fb bee0 	b.w	8007db0 <_malloc_r>
 800bff0:	b922      	cbnz	r2, 800bffc <_realloc_r+0x20>
 800bff2:	f7fb fe8d 	bl	8007d10 <_free_r>
 800bff6:	4625      	mov	r5, r4
 800bff8:	4628      	mov	r0, r5
 800bffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bffc:	f000 fa47 	bl	800c48e <_malloc_usable_size_r>
 800c000:	42a0      	cmp	r0, r4
 800c002:	d20f      	bcs.n	800c024 <_realloc_r+0x48>
 800c004:	4621      	mov	r1, r4
 800c006:	4638      	mov	r0, r7
 800c008:	f7fb fed2 	bl	8007db0 <_malloc_r>
 800c00c:	4605      	mov	r5, r0
 800c00e:	2800      	cmp	r0, #0
 800c010:	d0f2      	beq.n	800bff8 <_realloc_r+0x1c>
 800c012:	4631      	mov	r1, r6
 800c014:	4622      	mov	r2, r4
 800c016:	f7ff f8a7 	bl	800b168 <memcpy>
 800c01a:	4631      	mov	r1, r6
 800c01c:	4638      	mov	r0, r7
 800c01e:	f7fb fe77 	bl	8007d10 <_free_r>
 800c022:	e7e9      	b.n	800bff8 <_realloc_r+0x1c>
 800c024:	4635      	mov	r5, r6
 800c026:	e7e7      	b.n	800bff8 <_realloc_r+0x1c>

0800c028 <__sfputc_r>:
 800c028:	6893      	ldr	r3, [r2, #8]
 800c02a:	3b01      	subs	r3, #1
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	b410      	push	{r4}
 800c030:	6093      	str	r3, [r2, #8]
 800c032:	da08      	bge.n	800c046 <__sfputc_r+0x1e>
 800c034:	6994      	ldr	r4, [r2, #24]
 800c036:	42a3      	cmp	r3, r4
 800c038:	db01      	blt.n	800c03e <__sfputc_r+0x16>
 800c03a:	290a      	cmp	r1, #10
 800c03c:	d103      	bne.n	800c046 <__sfputc_r+0x1e>
 800c03e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c042:	f000 b95d 	b.w	800c300 <__swbuf_r>
 800c046:	6813      	ldr	r3, [r2, #0]
 800c048:	1c58      	adds	r0, r3, #1
 800c04a:	6010      	str	r0, [r2, #0]
 800c04c:	7019      	strb	r1, [r3, #0]
 800c04e:	4608      	mov	r0, r1
 800c050:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c054:	4770      	bx	lr

0800c056 <__sfputs_r>:
 800c056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c058:	4606      	mov	r6, r0
 800c05a:	460f      	mov	r7, r1
 800c05c:	4614      	mov	r4, r2
 800c05e:	18d5      	adds	r5, r2, r3
 800c060:	42ac      	cmp	r4, r5
 800c062:	d101      	bne.n	800c068 <__sfputs_r+0x12>
 800c064:	2000      	movs	r0, #0
 800c066:	e007      	b.n	800c078 <__sfputs_r+0x22>
 800c068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c06c:	463a      	mov	r2, r7
 800c06e:	4630      	mov	r0, r6
 800c070:	f7ff ffda 	bl	800c028 <__sfputc_r>
 800c074:	1c43      	adds	r3, r0, #1
 800c076:	d1f3      	bne.n	800c060 <__sfputs_r+0xa>
 800c078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c07c <_vfiprintf_r>:
 800c07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c080:	460d      	mov	r5, r1
 800c082:	b09d      	sub	sp, #116	; 0x74
 800c084:	4614      	mov	r4, r2
 800c086:	4698      	mov	r8, r3
 800c088:	4606      	mov	r6, r0
 800c08a:	b118      	cbz	r0, 800c094 <_vfiprintf_r+0x18>
 800c08c:	6983      	ldr	r3, [r0, #24]
 800c08e:	b90b      	cbnz	r3, 800c094 <_vfiprintf_r+0x18>
 800c090:	f7fe fbe0 	bl	800a854 <__sinit>
 800c094:	4b89      	ldr	r3, [pc, #548]	; (800c2bc <_vfiprintf_r+0x240>)
 800c096:	429d      	cmp	r5, r3
 800c098:	d11b      	bne.n	800c0d2 <_vfiprintf_r+0x56>
 800c09a:	6875      	ldr	r5, [r6, #4]
 800c09c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c09e:	07d9      	lsls	r1, r3, #31
 800c0a0:	d405      	bmi.n	800c0ae <_vfiprintf_r+0x32>
 800c0a2:	89ab      	ldrh	r3, [r5, #12]
 800c0a4:	059a      	lsls	r2, r3, #22
 800c0a6:	d402      	bmi.n	800c0ae <_vfiprintf_r+0x32>
 800c0a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0aa:	f7fe ffe4 	bl	800b076 <__retarget_lock_acquire_recursive>
 800c0ae:	89ab      	ldrh	r3, [r5, #12]
 800c0b0:	071b      	lsls	r3, r3, #28
 800c0b2:	d501      	bpl.n	800c0b8 <_vfiprintf_r+0x3c>
 800c0b4:	692b      	ldr	r3, [r5, #16]
 800c0b6:	b9eb      	cbnz	r3, 800c0f4 <_vfiprintf_r+0x78>
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	f000 f972 	bl	800c3a4 <__swsetup_r>
 800c0c0:	b1c0      	cbz	r0, 800c0f4 <_vfiprintf_r+0x78>
 800c0c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0c4:	07dc      	lsls	r4, r3, #31
 800c0c6:	d50e      	bpl.n	800c0e6 <_vfiprintf_r+0x6a>
 800c0c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0cc:	b01d      	add	sp, #116	; 0x74
 800c0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d2:	4b7b      	ldr	r3, [pc, #492]	; (800c2c0 <_vfiprintf_r+0x244>)
 800c0d4:	429d      	cmp	r5, r3
 800c0d6:	d101      	bne.n	800c0dc <_vfiprintf_r+0x60>
 800c0d8:	68b5      	ldr	r5, [r6, #8]
 800c0da:	e7df      	b.n	800c09c <_vfiprintf_r+0x20>
 800c0dc:	4b79      	ldr	r3, [pc, #484]	; (800c2c4 <_vfiprintf_r+0x248>)
 800c0de:	429d      	cmp	r5, r3
 800c0e0:	bf08      	it	eq
 800c0e2:	68f5      	ldreq	r5, [r6, #12]
 800c0e4:	e7da      	b.n	800c09c <_vfiprintf_r+0x20>
 800c0e6:	89ab      	ldrh	r3, [r5, #12]
 800c0e8:	0598      	lsls	r0, r3, #22
 800c0ea:	d4ed      	bmi.n	800c0c8 <_vfiprintf_r+0x4c>
 800c0ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0ee:	f7fe ffc3 	bl	800b078 <__retarget_lock_release_recursive>
 800c0f2:	e7e9      	b.n	800c0c8 <_vfiprintf_r+0x4c>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c0f8:	2320      	movs	r3, #32
 800c0fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800c102:	2330      	movs	r3, #48	; 0x30
 800c104:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c2c8 <_vfiprintf_r+0x24c>
 800c108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c10c:	f04f 0901 	mov.w	r9, #1
 800c110:	4623      	mov	r3, r4
 800c112:	469a      	mov	sl, r3
 800c114:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c118:	b10a      	cbz	r2, 800c11e <_vfiprintf_r+0xa2>
 800c11a:	2a25      	cmp	r2, #37	; 0x25
 800c11c:	d1f9      	bne.n	800c112 <_vfiprintf_r+0x96>
 800c11e:	ebba 0b04 	subs.w	fp, sl, r4
 800c122:	d00b      	beq.n	800c13c <_vfiprintf_r+0xc0>
 800c124:	465b      	mov	r3, fp
 800c126:	4622      	mov	r2, r4
 800c128:	4629      	mov	r1, r5
 800c12a:	4630      	mov	r0, r6
 800c12c:	f7ff ff93 	bl	800c056 <__sfputs_r>
 800c130:	3001      	adds	r0, #1
 800c132:	f000 80aa 	beq.w	800c28a <_vfiprintf_r+0x20e>
 800c136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c138:	445a      	add	r2, fp
 800c13a:	9209      	str	r2, [sp, #36]	; 0x24
 800c13c:	f89a 3000 	ldrb.w	r3, [sl]
 800c140:	2b00      	cmp	r3, #0
 800c142:	f000 80a2 	beq.w	800c28a <_vfiprintf_r+0x20e>
 800c146:	2300      	movs	r3, #0
 800c148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c14c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c150:	f10a 0a01 	add.w	sl, sl, #1
 800c154:	9304      	str	r3, [sp, #16]
 800c156:	9307      	str	r3, [sp, #28]
 800c158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c15c:	931a      	str	r3, [sp, #104]	; 0x68
 800c15e:	4654      	mov	r4, sl
 800c160:	2205      	movs	r2, #5
 800c162:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c166:	4858      	ldr	r0, [pc, #352]	; (800c2c8 <_vfiprintf_r+0x24c>)
 800c168:	f7f4 f85a 	bl	8000220 <memchr>
 800c16c:	9a04      	ldr	r2, [sp, #16]
 800c16e:	b9d8      	cbnz	r0, 800c1a8 <_vfiprintf_r+0x12c>
 800c170:	06d1      	lsls	r1, r2, #27
 800c172:	bf44      	itt	mi
 800c174:	2320      	movmi	r3, #32
 800c176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c17a:	0713      	lsls	r3, r2, #28
 800c17c:	bf44      	itt	mi
 800c17e:	232b      	movmi	r3, #43	; 0x2b
 800c180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c184:	f89a 3000 	ldrb.w	r3, [sl]
 800c188:	2b2a      	cmp	r3, #42	; 0x2a
 800c18a:	d015      	beq.n	800c1b8 <_vfiprintf_r+0x13c>
 800c18c:	9a07      	ldr	r2, [sp, #28]
 800c18e:	4654      	mov	r4, sl
 800c190:	2000      	movs	r0, #0
 800c192:	f04f 0c0a 	mov.w	ip, #10
 800c196:	4621      	mov	r1, r4
 800c198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c19c:	3b30      	subs	r3, #48	; 0x30
 800c19e:	2b09      	cmp	r3, #9
 800c1a0:	d94e      	bls.n	800c240 <_vfiprintf_r+0x1c4>
 800c1a2:	b1b0      	cbz	r0, 800c1d2 <_vfiprintf_r+0x156>
 800c1a4:	9207      	str	r2, [sp, #28]
 800c1a6:	e014      	b.n	800c1d2 <_vfiprintf_r+0x156>
 800c1a8:	eba0 0308 	sub.w	r3, r0, r8
 800c1ac:	fa09 f303 	lsl.w	r3, r9, r3
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	9304      	str	r3, [sp, #16]
 800c1b4:	46a2      	mov	sl, r4
 800c1b6:	e7d2      	b.n	800c15e <_vfiprintf_r+0xe2>
 800c1b8:	9b03      	ldr	r3, [sp, #12]
 800c1ba:	1d19      	adds	r1, r3, #4
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	9103      	str	r1, [sp, #12]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	bfbb      	ittet	lt
 800c1c4:	425b      	neglt	r3, r3
 800c1c6:	f042 0202 	orrlt.w	r2, r2, #2
 800c1ca:	9307      	strge	r3, [sp, #28]
 800c1cc:	9307      	strlt	r3, [sp, #28]
 800c1ce:	bfb8      	it	lt
 800c1d0:	9204      	strlt	r2, [sp, #16]
 800c1d2:	7823      	ldrb	r3, [r4, #0]
 800c1d4:	2b2e      	cmp	r3, #46	; 0x2e
 800c1d6:	d10c      	bne.n	800c1f2 <_vfiprintf_r+0x176>
 800c1d8:	7863      	ldrb	r3, [r4, #1]
 800c1da:	2b2a      	cmp	r3, #42	; 0x2a
 800c1dc:	d135      	bne.n	800c24a <_vfiprintf_r+0x1ce>
 800c1de:	9b03      	ldr	r3, [sp, #12]
 800c1e0:	1d1a      	adds	r2, r3, #4
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	9203      	str	r2, [sp, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	bfb8      	it	lt
 800c1ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c1ee:	3402      	adds	r4, #2
 800c1f0:	9305      	str	r3, [sp, #20]
 800c1f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c2d8 <_vfiprintf_r+0x25c>
 800c1f6:	7821      	ldrb	r1, [r4, #0]
 800c1f8:	2203      	movs	r2, #3
 800c1fa:	4650      	mov	r0, sl
 800c1fc:	f7f4 f810 	bl	8000220 <memchr>
 800c200:	b140      	cbz	r0, 800c214 <_vfiprintf_r+0x198>
 800c202:	2340      	movs	r3, #64	; 0x40
 800c204:	eba0 000a 	sub.w	r0, r0, sl
 800c208:	fa03 f000 	lsl.w	r0, r3, r0
 800c20c:	9b04      	ldr	r3, [sp, #16]
 800c20e:	4303      	orrs	r3, r0
 800c210:	3401      	adds	r4, #1
 800c212:	9304      	str	r3, [sp, #16]
 800c214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c218:	482c      	ldr	r0, [pc, #176]	; (800c2cc <_vfiprintf_r+0x250>)
 800c21a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c21e:	2206      	movs	r2, #6
 800c220:	f7f3 fffe 	bl	8000220 <memchr>
 800c224:	2800      	cmp	r0, #0
 800c226:	d03f      	beq.n	800c2a8 <_vfiprintf_r+0x22c>
 800c228:	4b29      	ldr	r3, [pc, #164]	; (800c2d0 <_vfiprintf_r+0x254>)
 800c22a:	bb1b      	cbnz	r3, 800c274 <_vfiprintf_r+0x1f8>
 800c22c:	9b03      	ldr	r3, [sp, #12]
 800c22e:	3307      	adds	r3, #7
 800c230:	f023 0307 	bic.w	r3, r3, #7
 800c234:	3308      	adds	r3, #8
 800c236:	9303      	str	r3, [sp, #12]
 800c238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c23a:	443b      	add	r3, r7
 800c23c:	9309      	str	r3, [sp, #36]	; 0x24
 800c23e:	e767      	b.n	800c110 <_vfiprintf_r+0x94>
 800c240:	fb0c 3202 	mla	r2, ip, r2, r3
 800c244:	460c      	mov	r4, r1
 800c246:	2001      	movs	r0, #1
 800c248:	e7a5      	b.n	800c196 <_vfiprintf_r+0x11a>
 800c24a:	2300      	movs	r3, #0
 800c24c:	3401      	adds	r4, #1
 800c24e:	9305      	str	r3, [sp, #20]
 800c250:	4619      	mov	r1, r3
 800c252:	f04f 0c0a 	mov.w	ip, #10
 800c256:	4620      	mov	r0, r4
 800c258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c25c:	3a30      	subs	r2, #48	; 0x30
 800c25e:	2a09      	cmp	r2, #9
 800c260:	d903      	bls.n	800c26a <_vfiprintf_r+0x1ee>
 800c262:	2b00      	cmp	r3, #0
 800c264:	d0c5      	beq.n	800c1f2 <_vfiprintf_r+0x176>
 800c266:	9105      	str	r1, [sp, #20]
 800c268:	e7c3      	b.n	800c1f2 <_vfiprintf_r+0x176>
 800c26a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c26e:	4604      	mov	r4, r0
 800c270:	2301      	movs	r3, #1
 800c272:	e7f0      	b.n	800c256 <_vfiprintf_r+0x1da>
 800c274:	ab03      	add	r3, sp, #12
 800c276:	9300      	str	r3, [sp, #0]
 800c278:	462a      	mov	r2, r5
 800c27a:	4b16      	ldr	r3, [pc, #88]	; (800c2d4 <_vfiprintf_r+0x258>)
 800c27c:	a904      	add	r1, sp, #16
 800c27e:	4630      	mov	r0, r6
 800c280:	f7fb fe90 	bl	8007fa4 <_printf_float>
 800c284:	4607      	mov	r7, r0
 800c286:	1c78      	adds	r0, r7, #1
 800c288:	d1d6      	bne.n	800c238 <_vfiprintf_r+0x1bc>
 800c28a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c28c:	07d9      	lsls	r1, r3, #31
 800c28e:	d405      	bmi.n	800c29c <_vfiprintf_r+0x220>
 800c290:	89ab      	ldrh	r3, [r5, #12]
 800c292:	059a      	lsls	r2, r3, #22
 800c294:	d402      	bmi.n	800c29c <_vfiprintf_r+0x220>
 800c296:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c298:	f7fe feee 	bl	800b078 <__retarget_lock_release_recursive>
 800c29c:	89ab      	ldrh	r3, [r5, #12]
 800c29e:	065b      	lsls	r3, r3, #25
 800c2a0:	f53f af12 	bmi.w	800c0c8 <_vfiprintf_r+0x4c>
 800c2a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2a6:	e711      	b.n	800c0cc <_vfiprintf_r+0x50>
 800c2a8:	ab03      	add	r3, sp, #12
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	462a      	mov	r2, r5
 800c2ae:	4b09      	ldr	r3, [pc, #36]	; (800c2d4 <_vfiprintf_r+0x258>)
 800c2b0:	a904      	add	r1, sp, #16
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	f7fc f91a 	bl	80084ec <_printf_i>
 800c2b8:	e7e4      	b.n	800c284 <_vfiprintf_r+0x208>
 800c2ba:	bf00      	nop
 800c2bc:	0800d8f0 	.word	0x0800d8f0
 800c2c0:	0800d910 	.word	0x0800d910
 800c2c4:	0800d8d0 	.word	0x0800d8d0
 800c2c8:	0800db0c 	.word	0x0800db0c
 800c2cc:	0800db16 	.word	0x0800db16
 800c2d0:	08007fa5 	.word	0x08007fa5
 800c2d4:	0800c057 	.word	0x0800c057
 800c2d8:	0800db12 	.word	0x0800db12

0800c2dc <_read_r>:
 800c2dc:	b538      	push	{r3, r4, r5, lr}
 800c2de:	4d07      	ldr	r5, [pc, #28]	; (800c2fc <_read_r+0x20>)
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	4608      	mov	r0, r1
 800c2e4:	4611      	mov	r1, r2
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	602a      	str	r2, [r5, #0]
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	f7f7 fe8e 	bl	800400c <_read>
 800c2f0:	1c43      	adds	r3, r0, #1
 800c2f2:	d102      	bne.n	800c2fa <_read_r+0x1e>
 800c2f4:	682b      	ldr	r3, [r5, #0]
 800c2f6:	b103      	cbz	r3, 800c2fa <_read_r+0x1e>
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	bd38      	pop	{r3, r4, r5, pc}
 800c2fc:	2000083c 	.word	0x2000083c

0800c300 <__swbuf_r>:
 800c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c302:	460e      	mov	r6, r1
 800c304:	4614      	mov	r4, r2
 800c306:	4605      	mov	r5, r0
 800c308:	b118      	cbz	r0, 800c312 <__swbuf_r+0x12>
 800c30a:	6983      	ldr	r3, [r0, #24]
 800c30c:	b90b      	cbnz	r3, 800c312 <__swbuf_r+0x12>
 800c30e:	f7fe faa1 	bl	800a854 <__sinit>
 800c312:	4b21      	ldr	r3, [pc, #132]	; (800c398 <__swbuf_r+0x98>)
 800c314:	429c      	cmp	r4, r3
 800c316:	d12b      	bne.n	800c370 <__swbuf_r+0x70>
 800c318:	686c      	ldr	r4, [r5, #4]
 800c31a:	69a3      	ldr	r3, [r4, #24]
 800c31c:	60a3      	str	r3, [r4, #8]
 800c31e:	89a3      	ldrh	r3, [r4, #12]
 800c320:	071a      	lsls	r2, r3, #28
 800c322:	d52f      	bpl.n	800c384 <__swbuf_r+0x84>
 800c324:	6923      	ldr	r3, [r4, #16]
 800c326:	b36b      	cbz	r3, 800c384 <__swbuf_r+0x84>
 800c328:	6923      	ldr	r3, [r4, #16]
 800c32a:	6820      	ldr	r0, [r4, #0]
 800c32c:	1ac0      	subs	r0, r0, r3
 800c32e:	6963      	ldr	r3, [r4, #20]
 800c330:	b2f6      	uxtb	r6, r6
 800c332:	4283      	cmp	r3, r0
 800c334:	4637      	mov	r7, r6
 800c336:	dc04      	bgt.n	800c342 <__swbuf_r+0x42>
 800c338:	4621      	mov	r1, r4
 800c33a:	4628      	mov	r0, r5
 800c33c:	f7fe f9f6 	bl	800a72c <_fflush_r>
 800c340:	bb30      	cbnz	r0, 800c390 <__swbuf_r+0x90>
 800c342:	68a3      	ldr	r3, [r4, #8]
 800c344:	3b01      	subs	r3, #1
 800c346:	60a3      	str	r3, [r4, #8]
 800c348:	6823      	ldr	r3, [r4, #0]
 800c34a:	1c5a      	adds	r2, r3, #1
 800c34c:	6022      	str	r2, [r4, #0]
 800c34e:	701e      	strb	r6, [r3, #0]
 800c350:	6963      	ldr	r3, [r4, #20]
 800c352:	3001      	adds	r0, #1
 800c354:	4283      	cmp	r3, r0
 800c356:	d004      	beq.n	800c362 <__swbuf_r+0x62>
 800c358:	89a3      	ldrh	r3, [r4, #12]
 800c35a:	07db      	lsls	r3, r3, #31
 800c35c:	d506      	bpl.n	800c36c <__swbuf_r+0x6c>
 800c35e:	2e0a      	cmp	r6, #10
 800c360:	d104      	bne.n	800c36c <__swbuf_r+0x6c>
 800c362:	4621      	mov	r1, r4
 800c364:	4628      	mov	r0, r5
 800c366:	f7fe f9e1 	bl	800a72c <_fflush_r>
 800c36a:	b988      	cbnz	r0, 800c390 <__swbuf_r+0x90>
 800c36c:	4638      	mov	r0, r7
 800c36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c370:	4b0a      	ldr	r3, [pc, #40]	; (800c39c <__swbuf_r+0x9c>)
 800c372:	429c      	cmp	r4, r3
 800c374:	d101      	bne.n	800c37a <__swbuf_r+0x7a>
 800c376:	68ac      	ldr	r4, [r5, #8]
 800c378:	e7cf      	b.n	800c31a <__swbuf_r+0x1a>
 800c37a:	4b09      	ldr	r3, [pc, #36]	; (800c3a0 <__swbuf_r+0xa0>)
 800c37c:	429c      	cmp	r4, r3
 800c37e:	bf08      	it	eq
 800c380:	68ec      	ldreq	r4, [r5, #12]
 800c382:	e7ca      	b.n	800c31a <__swbuf_r+0x1a>
 800c384:	4621      	mov	r1, r4
 800c386:	4628      	mov	r0, r5
 800c388:	f000 f80c 	bl	800c3a4 <__swsetup_r>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	d0cb      	beq.n	800c328 <__swbuf_r+0x28>
 800c390:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c394:	e7ea      	b.n	800c36c <__swbuf_r+0x6c>
 800c396:	bf00      	nop
 800c398:	0800d8f0 	.word	0x0800d8f0
 800c39c:	0800d910 	.word	0x0800d910
 800c3a0:	0800d8d0 	.word	0x0800d8d0

0800c3a4 <__swsetup_r>:
 800c3a4:	4b32      	ldr	r3, [pc, #200]	; (800c470 <__swsetup_r+0xcc>)
 800c3a6:	b570      	push	{r4, r5, r6, lr}
 800c3a8:	681d      	ldr	r5, [r3, #0]
 800c3aa:	4606      	mov	r6, r0
 800c3ac:	460c      	mov	r4, r1
 800c3ae:	b125      	cbz	r5, 800c3ba <__swsetup_r+0x16>
 800c3b0:	69ab      	ldr	r3, [r5, #24]
 800c3b2:	b913      	cbnz	r3, 800c3ba <__swsetup_r+0x16>
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	f7fe fa4d 	bl	800a854 <__sinit>
 800c3ba:	4b2e      	ldr	r3, [pc, #184]	; (800c474 <__swsetup_r+0xd0>)
 800c3bc:	429c      	cmp	r4, r3
 800c3be:	d10f      	bne.n	800c3e0 <__swsetup_r+0x3c>
 800c3c0:	686c      	ldr	r4, [r5, #4]
 800c3c2:	89a3      	ldrh	r3, [r4, #12]
 800c3c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3c8:	0719      	lsls	r1, r3, #28
 800c3ca:	d42c      	bmi.n	800c426 <__swsetup_r+0x82>
 800c3cc:	06dd      	lsls	r5, r3, #27
 800c3ce:	d411      	bmi.n	800c3f4 <__swsetup_r+0x50>
 800c3d0:	2309      	movs	r3, #9
 800c3d2:	6033      	str	r3, [r6, #0]
 800c3d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c3d8:	81a3      	strh	r3, [r4, #12]
 800c3da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3de:	e03e      	b.n	800c45e <__swsetup_r+0xba>
 800c3e0:	4b25      	ldr	r3, [pc, #148]	; (800c478 <__swsetup_r+0xd4>)
 800c3e2:	429c      	cmp	r4, r3
 800c3e4:	d101      	bne.n	800c3ea <__swsetup_r+0x46>
 800c3e6:	68ac      	ldr	r4, [r5, #8]
 800c3e8:	e7eb      	b.n	800c3c2 <__swsetup_r+0x1e>
 800c3ea:	4b24      	ldr	r3, [pc, #144]	; (800c47c <__swsetup_r+0xd8>)
 800c3ec:	429c      	cmp	r4, r3
 800c3ee:	bf08      	it	eq
 800c3f0:	68ec      	ldreq	r4, [r5, #12]
 800c3f2:	e7e6      	b.n	800c3c2 <__swsetup_r+0x1e>
 800c3f4:	0758      	lsls	r0, r3, #29
 800c3f6:	d512      	bpl.n	800c41e <__swsetup_r+0x7a>
 800c3f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3fa:	b141      	cbz	r1, 800c40e <__swsetup_r+0x6a>
 800c3fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c400:	4299      	cmp	r1, r3
 800c402:	d002      	beq.n	800c40a <__swsetup_r+0x66>
 800c404:	4630      	mov	r0, r6
 800c406:	f7fb fc83 	bl	8007d10 <_free_r>
 800c40a:	2300      	movs	r3, #0
 800c40c:	6363      	str	r3, [r4, #52]	; 0x34
 800c40e:	89a3      	ldrh	r3, [r4, #12]
 800c410:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c414:	81a3      	strh	r3, [r4, #12]
 800c416:	2300      	movs	r3, #0
 800c418:	6063      	str	r3, [r4, #4]
 800c41a:	6923      	ldr	r3, [r4, #16]
 800c41c:	6023      	str	r3, [r4, #0]
 800c41e:	89a3      	ldrh	r3, [r4, #12]
 800c420:	f043 0308 	orr.w	r3, r3, #8
 800c424:	81a3      	strh	r3, [r4, #12]
 800c426:	6923      	ldr	r3, [r4, #16]
 800c428:	b94b      	cbnz	r3, 800c43e <__swsetup_r+0x9a>
 800c42a:	89a3      	ldrh	r3, [r4, #12]
 800c42c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c434:	d003      	beq.n	800c43e <__swsetup_r+0x9a>
 800c436:	4621      	mov	r1, r4
 800c438:	4630      	mov	r0, r6
 800c43a:	f7fe fe43 	bl	800b0c4 <__smakebuf_r>
 800c43e:	89a0      	ldrh	r0, [r4, #12]
 800c440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c444:	f010 0301 	ands.w	r3, r0, #1
 800c448:	d00a      	beq.n	800c460 <__swsetup_r+0xbc>
 800c44a:	2300      	movs	r3, #0
 800c44c:	60a3      	str	r3, [r4, #8]
 800c44e:	6963      	ldr	r3, [r4, #20]
 800c450:	425b      	negs	r3, r3
 800c452:	61a3      	str	r3, [r4, #24]
 800c454:	6923      	ldr	r3, [r4, #16]
 800c456:	b943      	cbnz	r3, 800c46a <__swsetup_r+0xc6>
 800c458:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c45c:	d1ba      	bne.n	800c3d4 <__swsetup_r+0x30>
 800c45e:	bd70      	pop	{r4, r5, r6, pc}
 800c460:	0781      	lsls	r1, r0, #30
 800c462:	bf58      	it	pl
 800c464:	6963      	ldrpl	r3, [r4, #20]
 800c466:	60a3      	str	r3, [r4, #8]
 800c468:	e7f4      	b.n	800c454 <__swsetup_r+0xb0>
 800c46a:	2000      	movs	r0, #0
 800c46c:	e7f7      	b.n	800c45e <__swsetup_r+0xba>
 800c46e:	bf00      	nop
 800c470:	2000000c 	.word	0x2000000c
 800c474:	0800d8f0 	.word	0x0800d8f0
 800c478:	0800d910 	.word	0x0800d910
 800c47c:	0800d8d0 	.word	0x0800d8d0

0800c480 <abort>:
 800c480:	b508      	push	{r3, lr}
 800c482:	2006      	movs	r0, #6
 800c484:	f000 f834 	bl	800c4f0 <raise>
 800c488:	2001      	movs	r0, #1
 800c48a:	f001 f8e3 	bl	800d654 <_exit>

0800c48e <_malloc_usable_size_r>:
 800c48e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c492:	1f18      	subs	r0, r3, #4
 800c494:	2b00      	cmp	r3, #0
 800c496:	bfbc      	itt	lt
 800c498:	580b      	ldrlt	r3, [r1, r0]
 800c49a:	18c0      	addlt	r0, r0, r3
 800c49c:	4770      	bx	lr

0800c49e <_raise_r>:
 800c49e:	291f      	cmp	r1, #31
 800c4a0:	b538      	push	{r3, r4, r5, lr}
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	460d      	mov	r5, r1
 800c4a6:	d904      	bls.n	800c4b2 <_raise_r+0x14>
 800c4a8:	2316      	movs	r3, #22
 800c4aa:	6003      	str	r3, [r0, #0]
 800c4ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4b0:	bd38      	pop	{r3, r4, r5, pc}
 800c4b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c4b4:	b112      	cbz	r2, 800c4bc <_raise_r+0x1e>
 800c4b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4ba:	b94b      	cbnz	r3, 800c4d0 <_raise_r+0x32>
 800c4bc:	4620      	mov	r0, r4
 800c4be:	f000 f831 	bl	800c524 <_getpid_r>
 800c4c2:	462a      	mov	r2, r5
 800c4c4:	4601      	mov	r1, r0
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4cc:	f000 b818 	b.w	800c500 <_kill_r>
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d00a      	beq.n	800c4ea <_raise_r+0x4c>
 800c4d4:	1c59      	adds	r1, r3, #1
 800c4d6:	d103      	bne.n	800c4e0 <_raise_r+0x42>
 800c4d8:	2316      	movs	r3, #22
 800c4da:	6003      	str	r3, [r0, #0]
 800c4dc:	2001      	movs	r0, #1
 800c4de:	e7e7      	b.n	800c4b0 <_raise_r+0x12>
 800c4e0:	2400      	movs	r4, #0
 800c4e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	4798      	blx	r3
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	e7e0      	b.n	800c4b0 <_raise_r+0x12>
	...

0800c4f0 <raise>:
 800c4f0:	4b02      	ldr	r3, [pc, #8]	; (800c4fc <raise+0xc>)
 800c4f2:	4601      	mov	r1, r0
 800c4f4:	6818      	ldr	r0, [r3, #0]
 800c4f6:	f7ff bfd2 	b.w	800c49e <_raise_r>
 800c4fa:	bf00      	nop
 800c4fc:	2000000c 	.word	0x2000000c

0800c500 <_kill_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	4d07      	ldr	r5, [pc, #28]	; (800c520 <_kill_r+0x20>)
 800c504:	2300      	movs	r3, #0
 800c506:	4604      	mov	r4, r0
 800c508:	4608      	mov	r0, r1
 800c50a:	4611      	mov	r1, r2
 800c50c:	602b      	str	r3, [r5, #0]
 800c50e:	f001 f899 	bl	800d644 <_kill>
 800c512:	1c43      	adds	r3, r0, #1
 800c514:	d102      	bne.n	800c51c <_kill_r+0x1c>
 800c516:	682b      	ldr	r3, [r5, #0]
 800c518:	b103      	cbz	r3, 800c51c <_kill_r+0x1c>
 800c51a:	6023      	str	r3, [r4, #0]
 800c51c:	bd38      	pop	{r3, r4, r5, pc}
 800c51e:	bf00      	nop
 800c520:	2000083c 	.word	0x2000083c

0800c524 <_getpid_r>:
 800c524:	f001 b886 	b.w	800d634 <_getpid>

0800c528 <cos>:
 800c528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c52a:	ec53 2b10 	vmov	r2, r3, d0
 800c52e:	4824      	ldr	r0, [pc, #144]	; (800c5c0 <cos+0x98>)
 800c530:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c534:	4281      	cmp	r1, r0
 800c536:	dc06      	bgt.n	800c546 <cos+0x1e>
 800c538:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800c5b8 <cos+0x90>
 800c53c:	f000 faa4 	bl	800ca88 <__kernel_cos>
 800c540:	ec51 0b10 	vmov	r0, r1, d0
 800c544:	e007      	b.n	800c556 <cos+0x2e>
 800c546:	481f      	ldr	r0, [pc, #124]	; (800c5c4 <cos+0x9c>)
 800c548:	4281      	cmp	r1, r0
 800c54a:	dd09      	ble.n	800c560 <cos+0x38>
 800c54c:	ee10 0a10 	vmov	r0, s0
 800c550:	4619      	mov	r1, r3
 800c552:	f7f3 feb9 	bl	80002c8 <__aeabi_dsub>
 800c556:	ec41 0b10 	vmov	d0, r0, r1
 800c55a:	b005      	add	sp, #20
 800c55c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c560:	4668      	mov	r0, sp
 800c562:	f000 f885 	bl	800c670 <__ieee754_rem_pio2>
 800c566:	f000 0003 	and.w	r0, r0, #3
 800c56a:	2801      	cmp	r0, #1
 800c56c:	d007      	beq.n	800c57e <cos+0x56>
 800c56e:	2802      	cmp	r0, #2
 800c570:	d012      	beq.n	800c598 <cos+0x70>
 800c572:	b9c0      	cbnz	r0, 800c5a6 <cos+0x7e>
 800c574:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c578:	ed9d 0b00 	vldr	d0, [sp]
 800c57c:	e7de      	b.n	800c53c <cos+0x14>
 800c57e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c582:	ed9d 0b00 	vldr	d0, [sp]
 800c586:	f000 fe87 	bl	800d298 <__kernel_sin>
 800c58a:	ec53 2b10 	vmov	r2, r3, d0
 800c58e:	ee10 0a10 	vmov	r0, s0
 800c592:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c596:	e7de      	b.n	800c556 <cos+0x2e>
 800c598:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c59c:	ed9d 0b00 	vldr	d0, [sp]
 800c5a0:	f000 fa72 	bl	800ca88 <__kernel_cos>
 800c5a4:	e7f1      	b.n	800c58a <cos+0x62>
 800c5a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c5aa:	ed9d 0b00 	vldr	d0, [sp]
 800c5ae:	2001      	movs	r0, #1
 800c5b0:	f000 fe72 	bl	800d298 <__kernel_sin>
 800c5b4:	e7c4      	b.n	800c540 <cos+0x18>
 800c5b6:	bf00      	nop
	...
 800c5c0:	3fe921fb 	.word	0x3fe921fb
 800c5c4:	7fefffff 	.word	0x7fefffff

0800c5c8 <sin>:
 800c5c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5ca:	ec53 2b10 	vmov	r2, r3, d0
 800c5ce:	4826      	ldr	r0, [pc, #152]	; (800c668 <sin+0xa0>)
 800c5d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c5d4:	4281      	cmp	r1, r0
 800c5d6:	dc07      	bgt.n	800c5e8 <sin+0x20>
 800c5d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c660 <sin+0x98>
 800c5dc:	2000      	movs	r0, #0
 800c5de:	f000 fe5b 	bl	800d298 <__kernel_sin>
 800c5e2:	ec51 0b10 	vmov	r0, r1, d0
 800c5e6:	e007      	b.n	800c5f8 <sin+0x30>
 800c5e8:	4820      	ldr	r0, [pc, #128]	; (800c66c <sin+0xa4>)
 800c5ea:	4281      	cmp	r1, r0
 800c5ec:	dd09      	ble.n	800c602 <sin+0x3a>
 800c5ee:	ee10 0a10 	vmov	r0, s0
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	f7f3 fe68 	bl	80002c8 <__aeabi_dsub>
 800c5f8:	ec41 0b10 	vmov	d0, r0, r1
 800c5fc:	b005      	add	sp, #20
 800c5fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800c602:	4668      	mov	r0, sp
 800c604:	f000 f834 	bl	800c670 <__ieee754_rem_pio2>
 800c608:	f000 0003 	and.w	r0, r0, #3
 800c60c:	2801      	cmp	r0, #1
 800c60e:	d008      	beq.n	800c622 <sin+0x5a>
 800c610:	2802      	cmp	r0, #2
 800c612:	d00d      	beq.n	800c630 <sin+0x68>
 800c614:	b9d0      	cbnz	r0, 800c64c <sin+0x84>
 800c616:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c61a:	ed9d 0b00 	vldr	d0, [sp]
 800c61e:	2001      	movs	r0, #1
 800c620:	e7dd      	b.n	800c5de <sin+0x16>
 800c622:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c626:	ed9d 0b00 	vldr	d0, [sp]
 800c62a:	f000 fa2d 	bl	800ca88 <__kernel_cos>
 800c62e:	e7d8      	b.n	800c5e2 <sin+0x1a>
 800c630:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c634:	ed9d 0b00 	vldr	d0, [sp]
 800c638:	2001      	movs	r0, #1
 800c63a:	f000 fe2d 	bl	800d298 <__kernel_sin>
 800c63e:	ec53 2b10 	vmov	r2, r3, d0
 800c642:	ee10 0a10 	vmov	r0, s0
 800c646:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c64a:	e7d5      	b.n	800c5f8 <sin+0x30>
 800c64c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c650:	ed9d 0b00 	vldr	d0, [sp]
 800c654:	f000 fa18 	bl	800ca88 <__kernel_cos>
 800c658:	e7f1      	b.n	800c63e <sin+0x76>
 800c65a:	bf00      	nop
 800c65c:	f3af 8000 	nop.w
	...
 800c668:	3fe921fb 	.word	0x3fe921fb
 800c66c:	7fefffff 	.word	0x7fefffff

0800c670 <__ieee754_rem_pio2>:
 800c670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c674:	ed2d 8b02 	vpush	{d8}
 800c678:	ec55 4b10 	vmov	r4, r5, d0
 800c67c:	4bca      	ldr	r3, [pc, #808]	; (800c9a8 <__ieee754_rem_pio2+0x338>)
 800c67e:	b08b      	sub	sp, #44	; 0x2c
 800c680:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c684:	4598      	cmp	r8, r3
 800c686:	4682      	mov	sl, r0
 800c688:	9502      	str	r5, [sp, #8]
 800c68a:	dc08      	bgt.n	800c69e <__ieee754_rem_pio2+0x2e>
 800c68c:	2200      	movs	r2, #0
 800c68e:	2300      	movs	r3, #0
 800c690:	ed80 0b00 	vstr	d0, [r0]
 800c694:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c698:	f04f 0b00 	mov.w	fp, #0
 800c69c:	e028      	b.n	800c6f0 <__ieee754_rem_pio2+0x80>
 800c69e:	4bc3      	ldr	r3, [pc, #780]	; (800c9ac <__ieee754_rem_pio2+0x33c>)
 800c6a0:	4598      	cmp	r8, r3
 800c6a2:	dc78      	bgt.n	800c796 <__ieee754_rem_pio2+0x126>
 800c6a4:	9b02      	ldr	r3, [sp, #8]
 800c6a6:	4ec2      	ldr	r6, [pc, #776]	; (800c9b0 <__ieee754_rem_pio2+0x340>)
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	ee10 0a10 	vmov	r0, s0
 800c6ae:	a3b0      	add	r3, pc, #704	; (adr r3, 800c970 <__ieee754_rem_pio2+0x300>)
 800c6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	dd39      	ble.n	800c72c <__ieee754_rem_pio2+0xbc>
 800c6b8:	f7f3 fe06 	bl	80002c8 <__aeabi_dsub>
 800c6bc:	45b0      	cmp	r8, r6
 800c6be:	4604      	mov	r4, r0
 800c6c0:	460d      	mov	r5, r1
 800c6c2:	d01b      	beq.n	800c6fc <__ieee754_rem_pio2+0x8c>
 800c6c4:	a3ac      	add	r3, pc, #688	; (adr r3, 800c978 <__ieee754_rem_pio2+0x308>)
 800c6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ca:	f7f3 fdfd 	bl	80002c8 <__aeabi_dsub>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	e9ca 2300 	strd	r2, r3, [sl]
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	4629      	mov	r1, r5
 800c6da:	f7f3 fdf5 	bl	80002c8 <__aeabi_dsub>
 800c6de:	a3a6      	add	r3, pc, #664	; (adr r3, 800c978 <__ieee754_rem_pio2+0x308>)
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	f7f3 fdf0 	bl	80002c8 <__aeabi_dsub>
 800c6e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c6ec:	f04f 0b01 	mov.w	fp, #1
 800c6f0:	4658      	mov	r0, fp
 800c6f2:	b00b      	add	sp, #44	; 0x2c
 800c6f4:	ecbd 8b02 	vpop	{d8}
 800c6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6fc:	a3a0      	add	r3, pc, #640	; (adr r3, 800c980 <__ieee754_rem_pio2+0x310>)
 800c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c702:	f7f3 fde1 	bl	80002c8 <__aeabi_dsub>
 800c706:	a3a0      	add	r3, pc, #640	; (adr r3, 800c988 <__ieee754_rem_pio2+0x318>)
 800c708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70c:	4604      	mov	r4, r0
 800c70e:	460d      	mov	r5, r1
 800c710:	f7f3 fdda 	bl	80002c8 <__aeabi_dsub>
 800c714:	4602      	mov	r2, r0
 800c716:	460b      	mov	r3, r1
 800c718:	e9ca 2300 	strd	r2, r3, [sl]
 800c71c:	4620      	mov	r0, r4
 800c71e:	4629      	mov	r1, r5
 800c720:	f7f3 fdd2 	bl	80002c8 <__aeabi_dsub>
 800c724:	a398      	add	r3, pc, #608	; (adr r3, 800c988 <__ieee754_rem_pio2+0x318>)
 800c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72a:	e7db      	b.n	800c6e4 <__ieee754_rem_pio2+0x74>
 800c72c:	f7f3 fdce 	bl	80002cc <__adddf3>
 800c730:	45b0      	cmp	r8, r6
 800c732:	4604      	mov	r4, r0
 800c734:	460d      	mov	r5, r1
 800c736:	d016      	beq.n	800c766 <__ieee754_rem_pio2+0xf6>
 800c738:	a38f      	add	r3, pc, #572	; (adr r3, 800c978 <__ieee754_rem_pio2+0x308>)
 800c73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73e:	f7f3 fdc5 	bl	80002cc <__adddf3>
 800c742:	4602      	mov	r2, r0
 800c744:	460b      	mov	r3, r1
 800c746:	e9ca 2300 	strd	r2, r3, [sl]
 800c74a:	4620      	mov	r0, r4
 800c74c:	4629      	mov	r1, r5
 800c74e:	f7f3 fdbb 	bl	80002c8 <__aeabi_dsub>
 800c752:	a389      	add	r3, pc, #548	; (adr r3, 800c978 <__ieee754_rem_pio2+0x308>)
 800c754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c758:	f7f3 fdb8 	bl	80002cc <__adddf3>
 800c75c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800c760:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c764:	e7c4      	b.n	800c6f0 <__ieee754_rem_pio2+0x80>
 800c766:	a386      	add	r3, pc, #536	; (adr r3, 800c980 <__ieee754_rem_pio2+0x310>)
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	f7f3 fdae 	bl	80002cc <__adddf3>
 800c770:	a385      	add	r3, pc, #532	; (adr r3, 800c988 <__ieee754_rem_pio2+0x318>)
 800c772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c776:	4604      	mov	r4, r0
 800c778:	460d      	mov	r5, r1
 800c77a:	f7f3 fda7 	bl	80002cc <__adddf3>
 800c77e:	4602      	mov	r2, r0
 800c780:	460b      	mov	r3, r1
 800c782:	e9ca 2300 	strd	r2, r3, [sl]
 800c786:	4620      	mov	r0, r4
 800c788:	4629      	mov	r1, r5
 800c78a:	f7f3 fd9d 	bl	80002c8 <__aeabi_dsub>
 800c78e:	a37e      	add	r3, pc, #504	; (adr r3, 800c988 <__ieee754_rem_pio2+0x318>)
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	e7e0      	b.n	800c758 <__ieee754_rem_pio2+0xe8>
 800c796:	4b87      	ldr	r3, [pc, #540]	; (800c9b4 <__ieee754_rem_pio2+0x344>)
 800c798:	4598      	cmp	r8, r3
 800c79a:	f300 80d9 	bgt.w	800c950 <__ieee754_rem_pio2+0x2e0>
 800c79e:	f000 fe39 	bl	800d414 <fabs>
 800c7a2:	ec55 4b10 	vmov	r4, r5, d0
 800c7a6:	ee10 0a10 	vmov	r0, s0
 800c7aa:	a379      	add	r3, pc, #484	; (adr r3, 800c990 <__ieee754_rem_pio2+0x320>)
 800c7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	f7f3 ff41 	bl	8000638 <__aeabi_dmul>
 800c7b6:	4b80      	ldr	r3, [pc, #512]	; (800c9b8 <__ieee754_rem_pio2+0x348>)
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f7f3 fd87 	bl	80002cc <__adddf3>
 800c7be:	f7f4 f9eb 	bl	8000b98 <__aeabi_d2iz>
 800c7c2:	4683      	mov	fp, r0
 800c7c4:	f7f3 fece 	bl	8000564 <__aeabi_i2d>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	ec43 2b18 	vmov	d8, r2, r3
 800c7d0:	a367      	add	r3, pc, #412	; (adr r3, 800c970 <__ieee754_rem_pio2+0x300>)
 800c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d6:	f7f3 ff2f 	bl	8000638 <__aeabi_dmul>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4620      	mov	r0, r4
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	f7f3 fd71 	bl	80002c8 <__aeabi_dsub>
 800c7e6:	a364      	add	r3, pc, #400	; (adr r3, 800c978 <__ieee754_rem_pio2+0x308>)
 800c7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ec:	4606      	mov	r6, r0
 800c7ee:	460f      	mov	r7, r1
 800c7f0:	ec51 0b18 	vmov	r0, r1, d8
 800c7f4:	f7f3 ff20 	bl	8000638 <__aeabi_dmul>
 800c7f8:	f1bb 0f1f 	cmp.w	fp, #31
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	460d      	mov	r5, r1
 800c800:	dc0d      	bgt.n	800c81e <__ieee754_rem_pio2+0x1ae>
 800c802:	4b6e      	ldr	r3, [pc, #440]	; (800c9bc <__ieee754_rem_pio2+0x34c>)
 800c804:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800c808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c80c:	4543      	cmp	r3, r8
 800c80e:	d006      	beq.n	800c81e <__ieee754_rem_pio2+0x1ae>
 800c810:	4622      	mov	r2, r4
 800c812:	462b      	mov	r3, r5
 800c814:	4630      	mov	r0, r6
 800c816:	4639      	mov	r1, r7
 800c818:	f7f3 fd56 	bl	80002c8 <__aeabi_dsub>
 800c81c:	e00f      	b.n	800c83e <__ieee754_rem_pio2+0x1ce>
 800c81e:	462b      	mov	r3, r5
 800c820:	4622      	mov	r2, r4
 800c822:	4630      	mov	r0, r6
 800c824:	4639      	mov	r1, r7
 800c826:	f7f3 fd4f 	bl	80002c8 <__aeabi_dsub>
 800c82a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c82e:	9303      	str	r3, [sp, #12]
 800c830:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c834:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c838:	f1b8 0f10 	cmp.w	r8, #16
 800c83c:	dc02      	bgt.n	800c844 <__ieee754_rem_pio2+0x1d4>
 800c83e:	e9ca 0100 	strd	r0, r1, [sl]
 800c842:	e039      	b.n	800c8b8 <__ieee754_rem_pio2+0x248>
 800c844:	a34e      	add	r3, pc, #312	; (adr r3, 800c980 <__ieee754_rem_pio2+0x310>)
 800c846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84a:	ec51 0b18 	vmov	r0, r1, d8
 800c84e:	f7f3 fef3 	bl	8000638 <__aeabi_dmul>
 800c852:	4604      	mov	r4, r0
 800c854:	460d      	mov	r5, r1
 800c856:	4602      	mov	r2, r0
 800c858:	460b      	mov	r3, r1
 800c85a:	4630      	mov	r0, r6
 800c85c:	4639      	mov	r1, r7
 800c85e:	f7f3 fd33 	bl	80002c8 <__aeabi_dsub>
 800c862:	4602      	mov	r2, r0
 800c864:	460b      	mov	r3, r1
 800c866:	4680      	mov	r8, r0
 800c868:	4689      	mov	r9, r1
 800c86a:	4630      	mov	r0, r6
 800c86c:	4639      	mov	r1, r7
 800c86e:	f7f3 fd2b 	bl	80002c8 <__aeabi_dsub>
 800c872:	4622      	mov	r2, r4
 800c874:	462b      	mov	r3, r5
 800c876:	f7f3 fd27 	bl	80002c8 <__aeabi_dsub>
 800c87a:	a343      	add	r3, pc, #268	; (adr r3, 800c988 <__ieee754_rem_pio2+0x318>)
 800c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c880:	4604      	mov	r4, r0
 800c882:	460d      	mov	r5, r1
 800c884:	ec51 0b18 	vmov	r0, r1, d8
 800c888:	f7f3 fed6 	bl	8000638 <__aeabi_dmul>
 800c88c:	4622      	mov	r2, r4
 800c88e:	462b      	mov	r3, r5
 800c890:	f7f3 fd1a 	bl	80002c8 <__aeabi_dsub>
 800c894:	4602      	mov	r2, r0
 800c896:	460b      	mov	r3, r1
 800c898:	4604      	mov	r4, r0
 800c89a:	460d      	mov	r5, r1
 800c89c:	4640      	mov	r0, r8
 800c89e:	4649      	mov	r1, r9
 800c8a0:	f7f3 fd12 	bl	80002c8 <__aeabi_dsub>
 800c8a4:	9a03      	ldr	r2, [sp, #12]
 800c8a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	2b31      	cmp	r3, #49	; 0x31
 800c8ae:	dc24      	bgt.n	800c8fa <__ieee754_rem_pio2+0x28a>
 800c8b0:	e9ca 0100 	strd	r0, r1, [sl]
 800c8b4:	4646      	mov	r6, r8
 800c8b6:	464f      	mov	r7, r9
 800c8b8:	e9da 8900 	ldrd	r8, r9, [sl]
 800c8bc:	4630      	mov	r0, r6
 800c8be:	4642      	mov	r2, r8
 800c8c0:	464b      	mov	r3, r9
 800c8c2:	4639      	mov	r1, r7
 800c8c4:	f7f3 fd00 	bl	80002c8 <__aeabi_dsub>
 800c8c8:	462b      	mov	r3, r5
 800c8ca:	4622      	mov	r2, r4
 800c8cc:	f7f3 fcfc 	bl	80002c8 <__aeabi_dsub>
 800c8d0:	9b02      	ldr	r3, [sp, #8]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c8d8:	f6bf af0a 	bge.w	800c6f0 <__ieee754_rem_pio2+0x80>
 800c8dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c8e0:	f8ca 3004 	str.w	r3, [sl, #4]
 800c8e4:	f8ca 8000 	str.w	r8, [sl]
 800c8e8:	f8ca 0008 	str.w	r0, [sl, #8]
 800c8ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8f0:	f8ca 300c 	str.w	r3, [sl, #12]
 800c8f4:	f1cb 0b00 	rsb	fp, fp, #0
 800c8f8:	e6fa      	b.n	800c6f0 <__ieee754_rem_pio2+0x80>
 800c8fa:	a327      	add	r3, pc, #156	; (adr r3, 800c998 <__ieee754_rem_pio2+0x328>)
 800c8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c900:	ec51 0b18 	vmov	r0, r1, d8
 800c904:	f7f3 fe98 	bl	8000638 <__aeabi_dmul>
 800c908:	4604      	mov	r4, r0
 800c90a:	460d      	mov	r5, r1
 800c90c:	4602      	mov	r2, r0
 800c90e:	460b      	mov	r3, r1
 800c910:	4640      	mov	r0, r8
 800c912:	4649      	mov	r1, r9
 800c914:	f7f3 fcd8 	bl	80002c8 <__aeabi_dsub>
 800c918:	4602      	mov	r2, r0
 800c91a:	460b      	mov	r3, r1
 800c91c:	4606      	mov	r6, r0
 800c91e:	460f      	mov	r7, r1
 800c920:	4640      	mov	r0, r8
 800c922:	4649      	mov	r1, r9
 800c924:	f7f3 fcd0 	bl	80002c8 <__aeabi_dsub>
 800c928:	4622      	mov	r2, r4
 800c92a:	462b      	mov	r3, r5
 800c92c:	f7f3 fccc 	bl	80002c8 <__aeabi_dsub>
 800c930:	a31b      	add	r3, pc, #108	; (adr r3, 800c9a0 <__ieee754_rem_pio2+0x330>)
 800c932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c936:	4604      	mov	r4, r0
 800c938:	460d      	mov	r5, r1
 800c93a:	ec51 0b18 	vmov	r0, r1, d8
 800c93e:	f7f3 fe7b 	bl	8000638 <__aeabi_dmul>
 800c942:	4622      	mov	r2, r4
 800c944:	462b      	mov	r3, r5
 800c946:	f7f3 fcbf 	bl	80002c8 <__aeabi_dsub>
 800c94a:	4604      	mov	r4, r0
 800c94c:	460d      	mov	r5, r1
 800c94e:	e75f      	b.n	800c810 <__ieee754_rem_pio2+0x1a0>
 800c950:	4b1b      	ldr	r3, [pc, #108]	; (800c9c0 <__ieee754_rem_pio2+0x350>)
 800c952:	4598      	cmp	r8, r3
 800c954:	dd36      	ble.n	800c9c4 <__ieee754_rem_pio2+0x354>
 800c956:	ee10 2a10 	vmov	r2, s0
 800c95a:	462b      	mov	r3, r5
 800c95c:	4620      	mov	r0, r4
 800c95e:	4629      	mov	r1, r5
 800c960:	f7f3 fcb2 	bl	80002c8 <__aeabi_dsub>
 800c964:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c968:	e9ca 0100 	strd	r0, r1, [sl]
 800c96c:	e694      	b.n	800c698 <__ieee754_rem_pio2+0x28>
 800c96e:	bf00      	nop
 800c970:	54400000 	.word	0x54400000
 800c974:	3ff921fb 	.word	0x3ff921fb
 800c978:	1a626331 	.word	0x1a626331
 800c97c:	3dd0b461 	.word	0x3dd0b461
 800c980:	1a600000 	.word	0x1a600000
 800c984:	3dd0b461 	.word	0x3dd0b461
 800c988:	2e037073 	.word	0x2e037073
 800c98c:	3ba3198a 	.word	0x3ba3198a
 800c990:	6dc9c883 	.word	0x6dc9c883
 800c994:	3fe45f30 	.word	0x3fe45f30
 800c998:	2e000000 	.word	0x2e000000
 800c99c:	3ba3198a 	.word	0x3ba3198a
 800c9a0:	252049c1 	.word	0x252049c1
 800c9a4:	397b839a 	.word	0x397b839a
 800c9a8:	3fe921fb 	.word	0x3fe921fb
 800c9ac:	4002d97b 	.word	0x4002d97b
 800c9b0:	3ff921fb 	.word	0x3ff921fb
 800c9b4:	413921fb 	.word	0x413921fb
 800c9b8:	3fe00000 	.word	0x3fe00000
 800c9bc:	0800db5c 	.word	0x0800db5c
 800c9c0:	7fefffff 	.word	0x7fefffff
 800c9c4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c9c8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c9cc:	ee10 0a10 	vmov	r0, s0
 800c9d0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c9d4:	ee10 6a10 	vmov	r6, s0
 800c9d8:	460f      	mov	r7, r1
 800c9da:	f7f4 f8dd 	bl	8000b98 <__aeabi_d2iz>
 800c9de:	f7f3 fdc1 	bl	8000564 <__aeabi_i2d>
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	4639      	mov	r1, r7
 800c9ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c9ee:	f7f3 fc6b 	bl	80002c8 <__aeabi_dsub>
 800c9f2:	4b22      	ldr	r3, [pc, #136]	; (800ca7c <__ieee754_rem_pio2+0x40c>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f7f3 fe1f 	bl	8000638 <__aeabi_dmul>
 800c9fa:	460f      	mov	r7, r1
 800c9fc:	4606      	mov	r6, r0
 800c9fe:	f7f4 f8cb 	bl	8000b98 <__aeabi_d2iz>
 800ca02:	f7f3 fdaf 	bl	8000564 <__aeabi_i2d>
 800ca06:	4602      	mov	r2, r0
 800ca08:	460b      	mov	r3, r1
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	4639      	mov	r1, r7
 800ca0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ca12:	f7f3 fc59 	bl	80002c8 <__aeabi_dsub>
 800ca16:	4b19      	ldr	r3, [pc, #100]	; (800ca7c <__ieee754_rem_pio2+0x40c>)
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f7f3 fe0d 	bl	8000638 <__aeabi_dmul>
 800ca1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca22:	ad04      	add	r5, sp, #16
 800ca24:	f04f 0803 	mov.w	r8, #3
 800ca28:	46a9      	mov	r9, r5
 800ca2a:	2600      	movs	r6, #0
 800ca2c:	2700      	movs	r7, #0
 800ca2e:	4632      	mov	r2, r6
 800ca30:	463b      	mov	r3, r7
 800ca32:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ca36:	46c3      	mov	fp, r8
 800ca38:	3d08      	subs	r5, #8
 800ca3a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ca3e:	f7f4 f863 	bl	8000b08 <__aeabi_dcmpeq>
 800ca42:	2800      	cmp	r0, #0
 800ca44:	d1f3      	bne.n	800ca2e <__ieee754_rem_pio2+0x3be>
 800ca46:	4b0e      	ldr	r3, [pc, #56]	; (800ca80 <__ieee754_rem_pio2+0x410>)
 800ca48:	9301      	str	r3, [sp, #4]
 800ca4a:	2302      	movs	r3, #2
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	4622      	mov	r2, r4
 800ca50:	465b      	mov	r3, fp
 800ca52:	4651      	mov	r1, sl
 800ca54:	4648      	mov	r0, r9
 800ca56:	f000 f8df 	bl	800cc18 <__kernel_rem_pio2>
 800ca5a:	9b02      	ldr	r3, [sp, #8]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	4683      	mov	fp, r0
 800ca60:	f6bf ae46 	bge.w	800c6f0 <__ieee754_rem_pio2+0x80>
 800ca64:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ca68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ca6c:	f8ca 3004 	str.w	r3, [sl, #4]
 800ca70:	f8da 300c 	ldr.w	r3, [sl, #12]
 800ca74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ca78:	e73a      	b.n	800c8f0 <__ieee754_rem_pio2+0x280>
 800ca7a:	bf00      	nop
 800ca7c:	41700000 	.word	0x41700000
 800ca80:	0800dbdc 	.word	0x0800dbdc
 800ca84:	00000000 	.word	0x00000000

0800ca88 <__kernel_cos>:
 800ca88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca8c:	ec57 6b10 	vmov	r6, r7, d0
 800ca90:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ca94:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ca98:	ed8d 1b00 	vstr	d1, [sp]
 800ca9c:	da07      	bge.n	800caae <__kernel_cos+0x26>
 800ca9e:	ee10 0a10 	vmov	r0, s0
 800caa2:	4639      	mov	r1, r7
 800caa4:	f7f4 f878 	bl	8000b98 <__aeabi_d2iz>
 800caa8:	2800      	cmp	r0, #0
 800caaa:	f000 8088 	beq.w	800cbbe <__kernel_cos+0x136>
 800caae:	4632      	mov	r2, r6
 800cab0:	463b      	mov	r3, r7
 800cab2:	4630      	mov	r0, r6
 800cab4:	4639      	mov	r1, r7
 800cab6:	f7f3 fdbf 	bl	8000638 <__aeabi_dmul>
 800caba:	4b51      	ldr	r3, [pc, #324]	; (800cc00 <__kernel_cos+0x178>)
 800cabc:	2200      	movs	r2, #0
 800cabe:	4604      	mov	r4, r0
 800cac0:	460d      	mov	r5, r1
 800cac2:	f7f3 fdb9 	bl	8000638 <__aeabi_dmul>
 800cac6:	a340      	add	r3, pc, #256	; (adr r3, 800cbc8 <__kernel_cos+0x140>)
 800cac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cacc:	4682      	mov	sl, r0
 800cace:	468b      	mov	fp, r1
 800cad0:	4620      	mov	r0, r4
 800cad2:	4629      	mov	r1, r5
 800cad4:	f7f3 fdb0 	bl	8000638 <__aeabi_dmul>
 800cad8:	a33d      	add	r3, pc, #244	; (adr r3, 800cbd0 <__kernel_cos+0x148>)
 800cada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cade:	f7f3 fbf5 	bl	80002cc <__adddf3>
 800cae2:	4622      	mov	r2, r4
 800cae4:	462b      	mov	r3, r5
 800cae6:	f7f3 fda7 	bl	8000638 <__aeabi_dmul>
 800caea:	a33b      	add	r3, pc, #236	; (adr r3, 800cbd8 <__kernel_cos+0x150>)
 800caec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf0:	f7f3 fbea 	bl	80002c8 <__aeabi_dsub>
 800caf4:	4622      	mov	r2, r4
 800caf6:	462b      	mov	r3, r5
 800caf8:	f7f3 fd9e 	bl	8000638 <__aeabi_dmul>
 800cafc:	a338      	add	r3, pc, #224	; (adr r3, 800cbe0 <__kernel_cos+0x158>)
 800cafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb02:	f7f3 fbe3 	bl	80002cc <__adddf3>
 800cb06:	4622      	mov	r2, r4
 800cb08:	462b      	mov	r3, r5
 800cb0a:	f7f3 fd95 	bl	8000638 <__aeabi_dmul>
 800cb0e:	a336      	add	r3, pc, #216	; (adr r3, 800cbe8 <__kernel_cos+0x160>)
 800cb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb14:	f7f3 fbd8 	bl	80002c8 <__aeabi_dsub>
 800cb18:	4622      	mov	r2, r4
 800cb1a:	462b      	mov	r3, r5
 800cb1c:	f7f3 fd8c 	bl	8000638 <__aeabi_dmul>
 800cb20:	a333      	add	r3, pc, #204	; (adr r3, 800cbf0 <__kernel_cos+0x168>)
 800cb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb26:	f7f3 fbd1 	bl	80002cc <__adddf3>
 800cb2a:	4622      	mov	r2, r4
 800cb2c:	462b      	mov	r3, r5
 800cb2e:	f7f3 fd83 	bl	8000638 <__aeabi_dmul>
 800cb32:	4622      	mov	r2, r4
 800cb34:	462b      	mov	r3, r5
 800cb36:	f7f3 fd7f 	bl	8000638 <__aeabi_dmul>
 800cb3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb3e:	4604      	mov	r4, r0
 800cb40:	460d      	mov	r5, r1
 800cb42:	4630      	mov	r0, r6
 800cb44:	4639      	mov	r1, r7
 800cb46:	f7f3 fd77 	bl	8000638 <__aeabi_dmul>
 800cb4a:	460b      	mov	r3, r1
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	4629      	mov	r1, r5
 800cb50:	4620      	mov	r0, r4
 800cb52:	f7f3 fbb9 	bl	80002c8 <__aeabi_dsub>
 800cb56:	4b2b      	ldr	r3, [pc, #172]	; (800cc04 <__kernel_cos+0x17c>)
 800cb58:	4598      	cmp	r8, r3
 800cb5a:	4606      	mov	r6, r0
 800cb5c:	460f      	mov	r7, r1
 800cb5e:	dc10      	bgt.n	800cb82 <__kernel_cos+0xfa>
 800cb60:	4602      	mov	r2, r0
 800cb62:	460b      	mov	r3, r1
 800cb64:	4650      	mov	r0, sl
 800cb66:	4659      	mov	r1, fp
 800cb68:	f7f3 fbae 	bl	80002c8 <__aeabi_dsub>
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	4926      	ldr	r1, [pc, #152]	; (800cc08 <__kernel_cos+0x180>)
 800cb70:	4602      	mov	r2, r0
 800cb72:	2000      	movs	r0, #0
 800cb74:	f7f3 fba8 	bl	80002c8 <__aeabi_dsub>
 800cb78:	ec41 0b10 	vmov	d0, r0, r1
 800cb7c:	b003      	add	sp, #12
 800cb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb82:	4b22      	ldr	r3, [pc, #136]	; (800cc0c <__kernel_cos+0x184>)
 800cb84:	4920      	ldr	r1, [pc, #128]	; (800cc08 <__kernel_cos+0x180>)
 800cb86:	4598      	cmp	r8, r3
 800cb88:	bfcc      	ite	gt
 800cb8a:	4d21      	ldrgt	r5, [pc, #132]	; (800cc10 <__kernel_cos+0x188>)
 800cb8c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800cb90:	2400      	movs	r4, #0
 800cb92:	4622      	mov	r2, r4
 800cb94:	462b      	mov	r3, r5
 800cb96:	2000      	movs	r0, #0
 800cb98:	f7f3 fb96 	bl	80002c8 <__aeabi_dsub>
 800cb9c:	4622      	mov	r2, r4
 800cb9e:	4680      	mov	r8, r0
 800cba0:	4689      	mov	r9, r1
 800cba2:	462b      	mov	r3, r5
 800cba4:	4650      	mov	r0, sl
 800cba6:	4659      	mov	r1, fp
 800cba8:	f7f3 fb8e 	bl	80002c8 <__aeabi_dsub>
 800cbac:	4632      	mov	r2, r6
 800cbae:	463b      	mov	r3, r7
 800cbb0:	f7f3 fb8a 	bl	80002c8 <__aeabi_dsub>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	4640      	mov	r0, r8
 800cbba:	4649      	mov	r1, r9
 800cbbc:	e7da      	b.n	800cb74 <__kernel_cos+0xec>
 800cbbe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800cbf8 <__kernel_cos+0x170>
 800cbc2:	e7db      	b.n	800cb7c <__kernel_cos+0xf4>
 800cbc4:	f3af 8000 	nop.w
 800cbc8:	be8838d4 	.word	0xbe8838d4
 800cbcc:	bda8fae9 	.word	0xbda8fae9
 800cbd0:	bdb4b1c4 	.word	0xbdb4b1c4
 800cbd4:	3e21ee9e 	.word	0x3e21ee9e
 800cbd8:	809c52ad 	.word	0x809c52ad
 800cbdc:	3e927e4f 	.word	0x3e927e4f
 800cbe0:	19cb1590 	.word	0x19cb1590
 800cbe4:	3efa01a0 	.word	0x3efa01a0
 800cbe8:	16c15177 	.word	0x16c15177
 800cbec:	3f56c16c 	.word	0x3f56c16c
 800cbf0:	5555554c 	.word	0x5555554c
 800cbf4:	3fa55555 	.word	0x3fa55555
 800cbf8:	00000000 	.word	0x00000000
 800cbfc:	3ff00000 	.word	0x3ff00000
 800cc00:	3fe00000 	.word	0x3fe00000
 800cc04:	3fd33332 	.word	0x3fd33332
 800cc08:	3ff00000 	.word	0x3ff00000
 800cc0c:	3fe90000 	.word	0x3fe90000
 800cc10:	3fd20000 	.word	0x3fd20000
 800cc14:	00000000 	.word	0x00000000

0800cc18 <__kernel_rem_pio2>:
 800cc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1c:	ed2d 8b02 	vpush	{d8}
 800cc20:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800cc24:	f112 0f14 	cmn.w	r2, #20
 800cc28:	9308      	str	r3, [sp, #32]
 800cc2a:	9101      	str	r1, [sp, #4]
 800cc2c:	4bc6      	ldr	r3, [pc, #792]	; (800cf48 <__kernel_rem_pio2+0x330>)
 800cc2e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800cc30:	9009      	str	r0, [sp, #36]	; 0x24
 800cc32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc36:	9304      	str	r3, [sp, #16]
 800cc38:	9b08      	ldr	r3, [sp, #32]
 800cc3a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800cc3e:	bfa8      	it	ge
 800cc40:	1ed4      	subge	r4, r2, #3
 800cc42:	9306      	str	r3, [sp, #24]
 800cc44:	bfb2      	itee	lt
 800cc46:	2400      	movlt	r4, #0
 800cc48:	2318      	movge	r3, #24
 800cc4a:	fb94 f4f3 	sdivge	r4, r4, r3
 800cc4e:	f06f 0317 	mvn.w	r3, #23
 800cc52:	fb04 3303 	mla	r3, r4, r3, r3
 800cc56:	eb03 0a02 	add.w	sl, r3, r2
 800cc5a:	9b04      	ldr	r3, [sp, #16]
 800cc5c:	9a06      	ldr	r2, [sp, #24]
 800cc5e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800cf38 <__kernel_rem_pio2+0x320>
 800cc62:	eb03 0802 	add.w	r8, r3, r2
 800cc66:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800cc68:	1aa7      	subs	r7, r4, r2
 800cc6a:	ae20      	add	r6, sp, #128	; 0x80
 800cc6c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cc70:	2500      	movs	r5, #0
 800cc72:	4545      	cmp	r5, r8
 800cc74:	dd18      	ble.n	800cca8 <__kernel_rem_pio2+0x90>
 800cc76:	9b08      	ldr	r3, [sp, #32]
 800cc78:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800cc7c:	aa20      	add	r2, sp, #128	; 0x80
 800cc7e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800cf38 <__kernel_rem_pio2+0x320>
 800cc82:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cc86:	f1c3 0301 	rsb	r3, r3, #1
 800cc8a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800cc8e:	9307      	str	r3, [sp, #28]
 800cc90:	9b07      	ldr	r3, [sp, #28]
 800cc92:	9a04      	ldr	r2, [sp, #16]
 800cc94:	4443      	add	r3, r8
 800cc96:	429a      	cmp	r2, r3
 800cc98:	db2f      	blt.n	800ccfa <__kernel_rem_pio2+0xe2>
 800cc9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cc9e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cca2:	462f      	mov	r7, r5
 800cca4:	2600      	movs	r6, #0
 800cca6:	e01b      	b.n	800cce0 <__kernel_rem_pio2+0xc8>
 800cca8:	42ef      	cmn	r7, r5
 800ccaa:	d407      	bmi.n	800ccbc <__kernel_rem_pio2+0xa4>
 800ccac:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ccb0:	f7f3 fc58 	bl	8000564 <__aeabi_i2d>
 800ccb4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ccb8:	3501      	adds	r5, #1
 800ccba:	e7da      	b.n	800cc72 <__kernel_rem_pio2+0x5a>
 800ccbc:	ec51 0b18 	vmov	r0, r1, d8
 800ccc0:	e7f8      	b.n	800ccb4 <__kernel_rem_pio2+0x9c>
 800ccc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccc6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ccca:	f7f3 fcb5 	bl	8000638 <__aeabi_dmul>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccd6:	f7f3 faf9 	bl	80002cc <__adddf3>
 800ccda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccde:	3601      	adds	r6, #1
 800cce0:	9b06      	ldr	r3, [sp, #24]
 800cce2:	429e      	cmp	r6, r3
 800cce4:	f1a7 0708 	sub.w	r7, r7, #8
 800cce8:	ddeb      	ble.n	800ccc2 <__kernel_rem_pio2+0xaa>
 800ccea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccee:	3508      	adds	r5, #8
 800ccf0:	ecab 7b02 	vstmia	fp!, {d7}
 800ccf4:	f108 0801 	add.w	r8, r8, #1
 800ccf8:	e7ca      	b.n	800cc90 <__kernel_rem_pio2+0x78>
 800ccfa:	9b04      	ldr	r3, [sp, #16]
 800ccfc:	aa0c      	add	r2, sp, #48	; 0x30
 800ccfe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd02:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd04:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800cd06:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cd0a:	9c04      	ldr	r4, [sp, #16]
 800cd0c:	930a      	str	r3, [sp, #40]	; 0x28
 800cd0e:	ab98      	add	r3, sp, #608	; 0x260
 800cd10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cd14:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800cd18:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800cd1c:	f8cd b008 	str.w	fp, [sp, #8]
 800cd20:	4625      	mov	r5, r4
 800cd22:	2d00      	cmp	r5, #0
 800cd24:	dc78      	bgt.n	800ce18 <__kernel_rem_pio2+0x200>
 800cd26:	ec47 6b10 	vmov	d0, r6, r7
 800cd2a:	4650      	mov	r0, sl
 800cd2c:	f000 fbfc 	bl	800d528 <scalbn>
 800cd30:	ec57 6b10 	vmov	r6, r7, d0
 800cd34:	2200      	movs	r2, #0
 800cd36:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cd3a:	ee10 0a10 	vmov	r0, s0
 800cd3e:	4639      	mov	r1, r7
 800cd40:	f7f3 fc7a 	bl	8000638 <__aeabi_dmul>
 800cd44:	ec41 0b10 	vmov	d0, r0, r1
 800cd48:	f000 fb6e 	bl	800d428 <floor>
 800cd4c:	4b7f      	ldr	r3, [pc, #508]	; (800cf4c <__kernel_rem_pio2+0x334>)
 800cd4e:	ec51 0b10 	vmov	r0, r1, d0
 800cd52:	2200      	movs	r2, #0
 800cd54:	f7f3 fc70 	bl	8000638 <__aeabi_dmul>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	460b      	mov	r3, r1
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	4639      	mov	r1, r7
 800cd60:	f7f3 fab2 	bl	80002c8 <__aeabi_dsub>
 800cd64:	460f      	mov	r7, r1
 800cd66:	4606      	mov	r6, r0
 800cd68:	f7f3 ff16 	bl	8000b98 <__aeabi_d2iz>
 800cd6c:	9007      	str	r0, [sp, #28]
 800cd6e:	f7f3 fbf9 	bl	8000564 <__aeabi_i2d>
 800cd72:	4602      	mov	r2, r0
 800cd74:	460b      	mov	r3, r1
 800cd76:	4630      	mov	r0, r6
 800cd78:	4639      	mov	r1, r7
 800cd7a:	f7f3 faa5 	bl	80002c8 <__aeabi_dsub>
 800cd7e:	f1ba 0f00 	cmp.w	sl, #0
 800cd82:	4606      	mov	r6, r0
 800cd84:	460f      	mov	r7, r1
 800cd86:	dd70      	ble.n	800ce6a <__kernel_rem_pio2+0x252>
 800cd88:	1e62      	subs	r2, r4, #1
 800cd8a:	ab0c      	add	r3, sp, #48	; 0x30
 800cd8c:	9d07      	ldr	r5, [sp, #28]
 800cd8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cd92:	f1ca 0118 	rsb	r1, sl, #24
 800cd96:	fa40 f301 	asr.w	r3, r0, r1
 800cd9a:	441d      	add	r5, r3
 800cd9c:	408b      	lsls	r3, r1
 800cd9e:	1ac0      	subs	r0, r0, r3
 800cda0:	ab0c      	add	r3, sp, #48	; 0x30
 800cda2:	9507      	str	r5, [sp, #28]
 800cda4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cda8:	f1ca 0317 	rsb	r3, sl, #23
 800cdac:	fa40 f303 	asr.w	r3, r0, r3
 800cdb0:	9302      	str	r3, [sp, #8]
 800cdb2:	9b02      	ldr	r3, [sp, #8]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	dd66      	ble.n	800ce86 <__kernel_rem_pio2+0x26e>
 800cdb8:	9b07      	ldr	r3, [sp, #28]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	9307      	str	r3, [sp, #28]
 800cdc0:	4615      	mov	r5, r2
 800cdc2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cdc6:	4294      	cmp	r4, r2
 800cdc8:	f300 8099 	bgt.w	800cefe <__kernel_rem_pio2+0x2e6>
 800cdcc:	f1ba 0f00 	cmp.w	sl, #0
 800cdd0:	dd07      	ble.n	800cde2 <__kernel_rem_pio2+0x1ca>
 800cdd2:	f1ba 0f01 	cmp.w	sl, #1
 800cdd6:	f000 80a5 	beq.w	800cf24 <__kernel_rem_pio2+0x30c>
 800cdda:	f1ba 0f02 	cmp.w	sl, #2
 800cdde:	f000 80c1 	beq.w	800cf64 <__kernel_rem_pio2+0x34c>
 800cde2:	9b02      	ldr	r3, [sp, #8]
 800cde4:	2b02      	cmp	r3, #2
 800cde6:	d14e      	bne.n	800ce86 <__kernel_rem_pio2+0x26e>
 800cde8:	4632      	mov	r2, r6
 800cdea:	463b      	mov	r3, r7
 800cdec:	4958      	ldr	r1, [pc, #352]	; (800cf50 <__kernel_rem_pio2+0x338>)
 800cdee:	2000      	movs	r0, #0
 800cdf0:	f7f3 fa6a 	bl	80002c8 <__aeabi_dsub>
 800cdf4:	4606      	mov	r6, r0
 800cdf6:	460f      	mov	r7, r1
 800cdf8:	2d00      	cmp	r5, #0
 800cdfa:	d044      	beq.n	800ce86 <__kernel_rem_pio2+0x26e>
 800cdfc:	4650      	mov	r0, sl
 800cdfe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800cf40 <__kernel_rem_pio2+0x328>
 800ce02:	f000 fb91 	bl	800d528 <scalbn>
 800ce06:	4630      	mov	r0, r6
 800ce08:	4639      	mov	r1, r7
 800ce0a:	ec53 2b10 	vmov	r2, r3, d0
 800ce0e:	f7f3 fa5b 	bl	80002c8 <__aeabi_dsub>
 800ce12:	4606      	mov	r6, r0
 800ce14:	460f      	mov	r7, r1
 800ce16:	e036      	b.n	800ce86 <__kernel_rem_pio2+0x26e>
 800ce18:	4b4e      	ldr	r3, [pc, #312]	; (800cf54 <__kernel_rem_pio2+0x33c>)
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	4639      	mov	r1, r7
 800ce20:	f7f3 fc0a 	bl	8000638 <__aeabi_dmul>
 800ce24:	f7f3 feb8 	bl	8000b98 <__aeabi_d2iz>
 800ce28:	f7f3 fb9c 	bl	8000564 <__aeabi_i2d>
 800ce2c:	4b4a      	ldr	r3, [pc, #296]	; (800cf58 <__kernel_rem_pio2+0x340>)
 800ce2e:	2200      	movs	r2, #0
 800ce30:	4680      	mov	r8, r0
 800ce32:	4689      	mov	r9, r1
 800ce34:	f7f3 fc00 	bl	8000638 <__aeabi_dmul>
 800ce38:	4602      	mov	r2, r0
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	4639      	mov	r1, r7
 800ce40:	f7f3 fa42 	bl	80002c8 <__aeabi_dsub>
 800ce44:	f7f3 fea8 	bl	8000b98 <__aeabi_d2iz>
 800ce48:	9b02      	ldr	r3, [sp, #8]
 800ce4a:	f843 0b04 	str.w	r0, [r3], #4
 800ce4e:	3d01      	subs	r5, #1
 800ce50:	9302      	str	r3, [sp, #8]
 800ce52:	ab70      	add	r3, sp, #448	; 0x1c0
 800ce54:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ce58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5c:	4640      	mov	r0, r8
 800ce5e:	4649      	mov	r1, r9
 800ce60:	f7f3 fa34 	bl	80002cc <__adddf3>
 800ce64:	4606      	mov	r6, r0
 800ce66:	460f      	mov	r7, r1
 800ce68:	e75b      	b.n	800cd22 <__kernel_rem_pio2+0x10a>
 800ce6a:	d105      	bne.n	800ce78 <__kernel_rem_pio2+0x260>
 800ce6c:	1e63      	subs	r3, r4, #1
 800ce6e:	aa0c      	add	r2, sp, #48	; 0x30
 800ce70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ce74:	15c3      	asrs	r3, r0, #23
 800ce76:	e79b      	b.n	800cdb0 <__kernel_rem_pio2+0x198>
 800ce78:	4b38      	ldr	r3, [pc, #224]	; (800cf5c <__kernel_rem_pio2+0x344>)
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f7f3 fe62 	bl	8000b44 <__aeabi_dcmpge>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d139      	bne.n	800cef8 <__kernel_rem_pio2+0x2e0>
 800ce84:	9002      	str	r0, [sp, #8]
 800ce86:	2200      	movs	r2, #0
 800ce88:	2300      	movs	r3, #0
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	4639      	mov	r1, r7
 800ce8e:	f7f3 fe3b 	bl	8000b08 <__aeabi_dcmpeq>
 800ce92:	2800      	cmp	r0, #0
 800ce94:	f000 80b4 	beq.w	800d000 <__kernel_rem_pio2+0x3e8>
 800ce98:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800ce9c:	465b      	mov	r3, fp
 800ce9e:	2200      	movs	r2, #0
 800cea0:	9904      	ldr	r1, [sp, #16]
 800cea2:	428b      	cmp	r3, r1
 800cea4:	da65      	bge.n	800cf72 <__kernel_rem_pio2+0x35a>
 800cea6:	2a00      	cmp	r2, #0
 800cea8:	d07b      	beq.n	800cfa2 <__kernel_rem_pio2+0x38a>
 800ceaa:	ab0c      	add	r3, sp, #48	; 0x30
 800ceac:	f1aa 0a18 	sub.w	sl, sl, #24
 800ceb0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	f000 80a0 	beq.w	800cffa <__kernel_rem_pio2+0x3e2>
 800ceba:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800cf40 <__kernel_rem_pio2+0x328>
 800cebe:	4650      	mov	r0, sl
 800cec0:	f000 fb32 	bl	800d528 <scalbn>
 800cec4:	4f23      	ldr	r7, [pc, #140]	; (800cf54 <__kernel_rem_pio2+0x33c>)
 800cec6:	ec55 4b10 	vmov	r4, r5, d0
 800ceca:	46d8      	mov	r8, fp
 800cecc:	2600      	movs	r6, #0
 800cece:	f1b8 0f00 	cmp.w	r8, #0
 800ced2:	f280 80cf 	bge.w	800d074 <__kernel_rem_pio2+0x45c>
 800ced6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800cf38 <__kernel_rem_pio2+0x320>
 800ceda:	465f      	mov	r7, fp
 800cedc:	f04f 0800 	mov.w	r8, #0
 800cee0:	2f00      	cmp	r7, #0
 800cee2:	f2c0 80fd 	blt.w	800d0e0 <__kernel_rem_pio2+0x4c8>
 800cee6:	ab70      	add	r3, sp, #448	; 0x1c0
 800cee8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800cf60 <__kernel_rem_pio2+0x348>
 800ceec:	ec55 4b18 	vmov	r4, r5, d8
 800cef0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800cef4:	2600      	movs	r6, #0
 800cef6:	e0e5      	b.n	800d0c4 <__kernel_rem_pio2+0x4ac>
 800cef8:	2302      	movs	r3, #2
 800cefa:	9302      	str	r3, [sp, #8]
 800cefc:	e75c      	b.n	800cdb8 <__kernel_rem_pio2+0x1a0>
 800cefe:	f8db 3000 	ldr.w	r3, [fp]
 800cf02:	b955      	cbnz	r5, 800cf1a <__kernel_rem_pio2+0x302>
 800cf04:	b123      	cbz	r3, 800cf10 <__kernel_rem_pio2+0x2f8>
 800cf06:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cf0a:	f8cb 3000 	str.w	r3, [fp]
 800cf0e:	2301      	movs	r3, #1
 800cf10:	3201      	adds	r2, #1
 800cf12:	f10b 0b04 	add.w	fp, fp, #4
 800cf16:	461d      	mov	r5, r3
 800cf18:	e755      	b.n	800cdc6 <__kernel_rem_pio2+0x1ae>
 800cf1a:	1acb      	subs	r3, r1, r3
 800cf1c:	f8cb 3000 	str.w	r3, [fp]
 800cf20:	462b      	mov	r3, r5
 800cf22:	e7f5      	b.n	800cf10 <__kernel_rem_pio2+0x2f8>
 800cf24:	1e62      	subs	r2, r4, #1
 800cf26:	ab0c      	add	r3, sp, #48	; 0x30
 800cf28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf2c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cf30:	a90c      	add	r1, sp, #48	; 0x30
 800cf32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cf36:	e754      	b.n	800cde2 <__kernel_rem_pio2+0x1ca>
	...
 800cf44:	3ff00000 	.word	0x3ff00000
 800cf48:	0800dd28 	.word	0x0800dd28
 800cf4c:	40200000 	.word	0x40200000
 800cf50:	3ff00000 	.word	0x3ff00000
 800cf54:	3e700000 	.word	0x3e700000
 800cf58:	41700000 	.word	0x41700000
 800cf5c:	3fe00000 	.word	0x3fe00000
 800cf60:	0800dce8 	.word	0x0800dce8
 800cf64:	1e62      	subs	r2, r4, #1
 800cf66:	ab0c      	add	r3, sp, #48	; 0x30
 800cf68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf6c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cf70:	e7de      	b.n	800cf30 <__kernel_rem_pio2+0x318>
 800cf72:	a90c      	add	r1, sp, #48	; 0x30
 800cf74:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	430a      	orrs	r2, r1
 800cf7c:	e790      	b.n	800cea0 <__kernel_rem_pio2+0x288>
 800cf7e:	3301      	adds	r3, #1
 800cf80:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cf84:	2900      	cmp	r1, #0
 800cf86:	d0fa      	beq.n	800cf7e <__kernel_rem_pio2+0x366>
 800cf88:	9a08      	ldr	r2, [sp, #32]
 800cf8a:	18e3      	adds	r3, r4, r3
 800cf8c:	18a6      	adds	r6, r4, r2
 800cf8e:	aa20      	add	r2, sp, #128	; 0x80
 800cf90:	1c65      	adds	r5, r4, #1
 800cf92:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800cf96:	9302      	str	r3, [sp, #8]
 800cf98:	9b02      	ldr	r3, [sp, #8]
 800cf9a:	42ab      	cmp	r3, r5
 800cf9c:	da04      	bge.n	800cfa8 <__kernel_rem_pio2+0x390>
 800cf9e:	461c      	mov	r4, r3
 800cfa0:	e6b5      	b.n	800cd0e <__kernel_rem_pio2+0xf6>
 800cfa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e7eb      	b.n	800cf80 <__kernel_rem_pio2+0x368>
 800cfa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cfae:	f7f3 fad9 	bl	8000564 <__aeabi_i2d>
 800cfb2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cfb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfb8:	46b3      	mov	fp, r6
 800cfba:	461c      	mov	r4, r3
 800cfbc:	2700      	movs	r7, #0
 800cfbe:	f04f 0800 	mov.w	r8, #0
 800cfc2:	f04f 0900 	mov.w	r9, #0
 800cfc6:	9b06      	ldr	r3, [sp, #24]
 800cfc8:	429f      	cmp	r7, r3
 800cfca:	dd06      	ble.n	800cfda <__kernel_rem_pio2+0x3c2>
 800cfcc:	ab70      	add	r3, sp, #448	; 0x1c0
 800cfce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cfd2:	e9c3 8900 	strd	r8, r9, [r3]
 800cfd6:	3501      	adds	r5, #1
 800cfd8:	e7de      	b.n	800cf98 <__kernel_rem_pio2+0x380>
 800cfda:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800cfde:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800cfe2:	f7f3 fb29 	bl	8000638 <__aeabi_dmul>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	460b      	mov	r3, r1
 800cfea:	4640      	mov	r0, r8
 800cfec:	4649      	mov	r1, r9
 800cfee:	f7f3 f96d 	bl	80002cc <__adddf3>
 800cff2:	3701      	adds	r7, #1
 800cff4:	4680      	mov	r8, r0
 800cff6:	4689      	mov	r9, r1
 800cff8:	e7e5      	b.n	800cfc6 <__kernel_rem_pio2+0x3ae>
 800cffa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cffe:	e754      	b.n	800ceaa <__kernel_rem_pio2+0x292>
 800d000:	ec47 6b10 	vmov	d0, r6, r7
 800d004:	f1ca 0000 	rsb	r0, sl, #0
 800d008:	f000 fa8e 	bl	800d528 <scalbn>
 800d00c:	ec57 6b10 	vmov	r6, r7, d0
 800d010:	4b9f      	ldr	r3, [pc, #636]	; (800d290 <__kernel_rem_pio2+0x678>)
 800d012:	ee10 0a10 	vmov	r0, s0
 800d016:	2200      	movs	r2, #0
 800d018:	4639      	mov	r1, r7
 800d01a:	f7f3 fd93 	bl	8000b44 <__aeabi_dcmpge>
 800d01e:	b300      	cbz	r0, 800d062 <__kernel_rem_pio2+0x44a>
 800d020:	4b9c      	ldr	r3, [pc, #624]	; (800d294 <__kernel_rem_pio2+0x67c>)
 800d022:	2200      	movs	r2, #0
 800d024:	4630      	mov	r0, r6
 800d026:	4639      	mov	r1, r7
 800d028:	f7f3 fb06 	bl	8000638 <__aeabi_dmul>
 800d02c:	f7f3 fdb4 	bl	8000b98 <__aeabi_d2iz>
 800d030:	4605      	mov	r5, r0
 800d032:	f7f3 fa97 	bl	8000564 <__aeabi_i2d>
 800d036:	4b96      	ldr	r3, [pc, #600]	; (800d290 <__kernel_rem_pio2+0x678>)
 800d038:	2200      	movs	r2, #0
 800d03a:	f7f3 fafd 	bl	8000638 <__aeabi_dmul>
 800d03e:	460b      	mov	r3, r1
 800d040:	4602      	mov	r2, r0
 800d042:	4639      	mov	r1, r7
 800d044:	4630      	mov	r0, r6
 800d046:	f7f3 f93f 	bl	80002c8 <__aeabi_dsub>
 800d04a:	f7f3 fda5 	bl	8000b98 <__aeabi_d2iz>
 800d04e:	f104 0b01 	add.w	fp, r4, #1
 800d052:	ab0c      	add	r3, sp, #48	; 0x30
 800d054:	f10a 0a18 	add.w	sl, sl, #24
 800d058:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d05c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800d060:	e72b      	b.n	800ceba <__kernel_rem_pio2+0x2a2>
 800d062:	4630      	mov	r0, r6
 800d064:	4639      	mov	r1, r7
 800d066:	f7f3 fd97 	bl	8000b98 <__aeabi_d2iz>
 800d06a:	ab0c      	add	r3, sp, #48	; 0x30
 800d06c:	46a3      	mov	fp, r4
 800d06e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d072:	e722      	b.n	800ceba <__kernel_rem_pio2+0x2a2>
 800d074:	ab70      	add	r3, sp, #448	; 0x1c0
 800d076:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800d07a:	ab0c      	add	r3, sp, #48	; 0x30
 800d07c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d080:	f7f3 fa70 	bl	8000564 <__aeabi_i2d>
 800d084:	4622      	mov	r2, r4
 800d086:	462b      	mov	r3, r5
 800d088:	f7f3 fad6 	bl	8000638 <__aeabi_dmul>
 800d08c:	4632      	mov	r2, r6
 800d08e:	e9c9 0100 	strd	r0, r1, [r9]
 800d092:	463b      	mov	r3, r7
 800d094:	4620      	mov	r0, r4
 800d096:	4629      	mov	r1, r5
 800d098:	f7f3 face 	bl	8000638 <__aeabi_dmul>
 800d09c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d0a0:	4604      	mov	r4, r0
 800d0a2:	460d      	mov	r5, r1
 800d0a4:	e713      	b.n	800cece <__kernel_rem_pio2+0x2b6>
 800d0a6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d0aa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d0ae:	f7f3 fac3 	bl	8000638 <__aeabi_dmul>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	f7f3 f907 	bl	80002cc <__adddf3>
 800d0be:	3601      	adds	r6, #1
 800d0c0:	4604      	mov	r4, r0
 800d0c2:	460d      	mov	r5, r1
 800d0c4:	9b04      	ldr	r3, [sp, #16]
 800d0c6:	429e      	cmp	r6, r3
 800d0c8:	dc01      	bgt.n	800d0ce <__kernel_rem_pio2+0x4b6>
 800d0ca:	45b0      	cmp	r8, r6
 800d0cc:	daeb      	bge.n	800d0a6 <__kernel_rem_pio2+0x48e>
 800d0ce:	ab48      	add	r3, sp, #288	; 0x120
 800d0d0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d0d4:	e9c3 4500 	strd	r4, r5, [r3]
 800d0d8:	3f01      	subs	r7, #1
 800d0da:	f108 0801 	add.w	r8, r8, #1
 800d0de:	e6ff      	b.n	800cee0 <__kernel_rem_pio2+0x2c8>
 800d0e0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d0e2:	2b02      	cmp	r3, #2
 800d0e4:	dc0b      	bgt.n	800d0fe <__kernel_rem_pio2+0x4e6>
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	dc6e      	bgt.n	800d1c8 <__kernel_rem_pio2+0x5b0>
 800d0ea:	d045      	beq.n	800d178 <__kernel_rem_pio2+0x560>
 800d0ec:	9b07      	ldr	r3, [sp, #28]
 800d0ee:	f003 0007 	and.w	r0, r3, #7
 800d0f2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d0f6:	ecbd 8b02 	vpop	{d8}
 800d0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0fe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d100:	2b03      	cmp	r3, #3
 800d102:	d1f3      	bne.n	800d0ec <__kernel_rem_pio2+0x4d4>
 800d104:	ab48      	add	r3, sp, #288	; 0x120
 800d106:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800d10a:	46d0      	mov	r8, sl
 800d10c:	46d9      	mov	r9, fp
 800d10e:	f1b9 0f00 	cmp.w	r9, #0
 800d112:	f1a8 0808 	sub.w	r8, r8, #8
 800d116:	dc64      	bgt.n	800d1e2 <__kernel_rem_pio2+0x5ca>
 800d118:	465c      	mov	r4, fp
 800d11a:	2c01      	cmp	r4, #1
 800d11c:	f1aa 0a08 	sub.w	sl, sl, #8
 800d120:	dc7e      	bgt.n	800d220 <__kernel_rem_pio2+0x608>
 800d122:	2000      	movs	r0, #0
 800d124:	2100      	movs	r1, #0
 800d126:	f1bb 0f01 	cmp.w	fp, #1
 800d12a:	f300 8097 	bgt.w	800d25c <__kernel_rem_pio2+0x644>
 800d12e:	9b02      	ldr	r3, [sp, #8]
 800d130:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800d134:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f040 8099 	bne.w	800d270 <__kernel_rem_pio2+0x658>
 800d13e:	9b01      	ldr	r3, [sp, #4]
 800d140:	e9c3 5600 	strd	r5, r6, [r3]
 800d144:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d148:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d14c:	e7ce      	b.n	800d0ec <__kernel_rem_pio2+0x4d4>
 800d14e:	ab48      	add	r3, sp, #288	; 0x120
 800d150:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d158:	f7f3 f8b8 	bl	80002cc <__adddf3>
 800d15c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d160:	f1bb 0f00 	cmp.w	fp, #0
 800d164:	daf3      	bge.n	800d14e <__kernel_rem_pio2+0x536>
 800d166:	9b02      	ldr	r3, [sp, #8]
 800d168:	b113      	cbz	r3, 800d170 <__kernel_rem_pio2+0x558>
 800d16a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d16e:	4619      	mov	r1, r3
 800d170:	9b01      	ldr	r3, [sp, #4]
 800d172:	e9c3 0100 	strd	r0, r1, [r3]
 800d176:	e7b9      	b.n	800d0ec <__kernel_rem_pio2+0x4d4>
 800d178:	2000      	movs	r0, #0
 800d17a:	2100      	movs	r1, #0
 800d17c:	e7f0      	b.n	800d160 <__kernel_rem_pio2+0x548>
 800d17e:	ab48      	add	r3, sp, #288	; 0x120
 800d180:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d188:	f7f3 f8a0 	bl	80002cc <__adddf3>
 800d18c:	3c01      	subs	r4, #1
 800d18e:	2c00      	cmp	r4, #0
 800d190:	daf5      	bge.n	800d17e <__kernel_rem_pio2+0x566>
 800d192:	9b02      	ldr	r3, [sp, #8]
 800d194:	b1e3      	cbz	r3, 800d1d0 <__kernel_rem_pio2+0x5b8>
 800d196:	4602      	mov	r2, r0
 800d198:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d19c:	9c01      	ldr	r4, [sp, #4]
 800d19e:	e9c4 2300 	strd	r2, r3, [r4]
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d1aa:	f7f3 f88d 	bl	80002c8 <__aeabi_dsub>
 800d1ae:	ad4a      	add	r5, sp, #296	; 0x128
 800d1b0:	2401      	movs	r4, #1
 800d1b2:	45a3      	cmp	fp, r4
 800d1b4:	da0f      	bge.n	800d1d6 <__kernel_rem_pio2+0x5be>
 800d1b6:	9b02      	ldr	r3, [sp, #8]
 800d1b8:	b113      	cbz	r3, 800d1c0 <__kernel_rem_pio2+0x5a8>
 800d1ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1be:	4619      	mov	r1, r3
 800d1c0:	9b01      	ldr	r3, [sp, #4]
 800d1c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d1c6:	e791      	b.n	800d0ec <__kernel_rem_pio2+0x4d4>
 800d1c8:	465c      	mov	r4, fp
 800d1ca:	2000      	movs	r0, #0
 800d1cc:	2100      	movs	r1, #0
 800d1ce:	e7de      	b.n	800d18e <__kernel_rem_pio2+0x576>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	e7e2      	b.n	800d19c <__kernel_rem_pio2+0x584>
 800d1d6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d1da:	f7f3 f877 	bl	80002cc <__adddf3>
 800d1de:	3401      	adds	r4, #1
 800d1e0:	e7e7      	b.n	800d1b2 <__kernel_rem_pio2+0x59a>
 800d1e2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800d1e6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	4632      	mov	r2, r6
 800d1ee:	463b      	mov	r3, r7
 800d1f0:	4629      	mov	r1, r5
 800d1f2:	f7f3 f86b 	bl	80002cc <__adddf3>
 800d1f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	4620      	mov	r0, r4
 800d200:	4629      	mov	r1, r5
 800d202:	f7f3 f861 	bl	80002c8 <__aeabi_dsub>
 800d206:	4632      	mov	r2, r6
 800d208:	463b      	mov	r3, r7
 800d20a:	f7f3 f85f 	bl	80002cc <__adddf3>
 800d20e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d212:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800d216:	ed88 7b00 	vstr	d7, [r8]
 800d21a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d21e:	e776      	b.n	800d10e <__kernel_rem_pio2+0x4f6>
 800d220:	e9da 8900 	ldrd	r8, r9, [sl]
 800d224:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d228:	4640      	mov	r0, r8
 800d22a:	4632      	mov	r2, r6
 800d22c:	463b      	mov	r3, r7
 800d22e:	4649      	mov	r1, r9
 800d230:	f7f3 f84c 	bl	80002cc <__adddf3>
 800d234:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d238:	4602      	mov	r2, r0
 800d23a:	460b      	mov	r3, r1
 800d23c:	4640      	mov	r0, r8
 800d23e:	4649      	mov	r1, r9
 800d240:	f7f3 f842 	bl	80002c8 <__aeabi_dsub>
 800d244:	4632      	mov	r2, r6
 800d246:	463b      	mov	r3, r7
 800d248:	f7f3 f840 	bl	80002cc <__adddf3>
 800d24c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d250:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d254:	ed8a 7b00 	vstr	d7, [sl]
 800d258:	3c01      	subs	r4, #1
 800d25a:	e75e      	b.n	800d11a <__kernel_rem_pio2+0x502>
 800d25c:	ab48      	add	r3, sp, #288	; 0x120
 800d25e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d266:	f7f3 f831 	bl	80002cc <__adddf3>
 800d26a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d26e:	e75a      	b.n	800d126 <__kernel_rem_pio2+0x50e>
 800d270:	9b01      	ldr	r3, [sp, #4]
 800d272:	9a01      	ldr	r2, [sp, #4]
 800d274:	601d      	str	r5, [r3, #0]
 800d276:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d27a:	605c      	str	r4, [r3, #4]
 800d27c:	609f      	str	r7, [r3, #8]
 800d27e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d282:	60d3      	str	r3, [r2, #12]
 800d284:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d288:	6110      	str	r0, [r2, #16]
 800d28a:	6153      	str	r3, [r2, #20]
 800d28c:	e72e      	b.n	800d0ec <__kernel_rem_pio2+0x4d4>
 800d28e:	bf00      	nop
 800d290:	41700000 	.word	0x41700000
 800d294:	3e700000 	.word	0x3e700000

0800d298 <__kernel_sin>:
 800d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d29c:	ed2d 8b04 	vpush	{d8-d9}
 800d2a0:	eeb0 8a41 	vmov.f32	s16, s2
 800d2a4:	eef0 8a61 	vmov.f32	s17, s3
 800d2a8:	ec55 4b10 	vmov	r4, r5, d0
 800d2ac:	b083      	sub	sp, #12
 800d2ae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d2b2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d2b6:	9001      	str	r0, [sp, #4]
 800d2b8:	da06      	bge.n	800d2c8 <__kernel_sin+0x30>
 800d2ba:	ee10 0a10 	vmov	r0, s0
 800d2be:	4629      	mov	r1, r5
 800d2c0:	f7f3 fc6a 	bl	8000b98 <__aeabi_d2iz>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	d051      	beq.n	800d36c <__kernel_sin+0xd4>
 800d2c8:	4622      	mov	r2, r4
 800d2ca:	462b      	mov	r3, r5
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	4629      	mov	r1, r5
 800d2d0:	f7f3 f9b2 	bl	8000638 <__aeabi_dmul>
 800d2d4:	4682      	mov	sl, r0
 800d2d6:	468b      	mov	fp, r1
 800d2d8:	4602      	mov	r2, r0
 800d2da:	460b      	mov	r3, r1
 800d2dc:	4620      	mov	r0, r4
 800d2de:	4629      	mov	r1, r5
 800d2e0:	f7f3 f9aa 	bl	8000638 <__aeabi_dmul>
 800d2e4:	a341      	add	r3, pc, #260	; (adr r3, 800d3ec <__kernel_sin+0x154>)
 800d2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ea:	4680      	mov	r8, r0
 800d2ec:	4689      	mov	r9, r1
 800d2ee:	4650      	mov	r0, sl
 800d2f0:	4659      	mov	r1, fp
 800d2f2:	f7f3 f9a1 	bl	8000638 <__aeabi_dmul>
 800d2f6:	a33f      	add	r3, pc, #252	; (adr r3, 800d3f4 <__kernel_sin+0x15c>)
 800d2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fc:	f7f2 ffe4 	bl	80002c8 <__aeabi_dsub>
 800d300:	4652      	mov	r2, sl
 800d302:	465b      	mov	r3, fp
 800d304:	f7f3 f998 	bl	8000638 <__aeabi_dmul>
 800d308:	a33c      	add	r3, pc, #240	; (adr r3, 800d3fc <__kernel_sin+0x164>)
 800d30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30e:	f7f2 ffdd 	bl	80002cc <__adddf3>
 800d312:	4652      	mov	r2, sl
 800d314:	465b      	mov	r3, fp
 800d316:	f7f3 f98f 	bl	8000638 <__aeabi_dmul>
 800d31a:	a33a      	add	r3, pc, #232	; (adr r3, 800d404 <__kernel_sin+0x16c>)
 800d31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d320:	f7f2 ffd2 	bl	80002c8 <__aeabi_dsub>
 800d324:	4652      	mov	r2, sl
 800d326:	465b      	mov	r3, fp
 800d328:	f7f3 f986 	bl	8000638 <__aeabi_dmul>
 800d32c:	a337      	add	r3, pc, #220	; (adr r3, 800d40c <__kernel_sin+0x174>)
 800d32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d332:	f7f2 ffcb 	bl	80002cc <__adddf3>
 800d336:	9b01      	ldr	r3, [sp, #4]
 800d338:	4606      	mov	r6, r0
 800d33a:	460f      	mov	r7, r1
 800d33c:	b9eb      	cbnz	r3, 800d37a <__kernel_sin+0xe2>
 800d33e:	4602      	mov	r2, r0
 800d340:	460b      	mov	r3, r1
 800d342:	4650      	mov	r0, sl
 800d344:	4659      	mov	r1, fp
 800d346:	f7f3 f977 	bl	8000638 <__aeabi_dmul>
 800d34a:	a325      	add	r3, pc, #148	; (adr r3, 800d3e0 <__kernel_sin+0x148>)
 800d34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d350:	f7f2 ffba 	bl	80002c8 <__aeabi_dsub>
 800d354:	4642      	mov	r2, r8
 800d356:	464b      	mov	r3, r9
 800d358:	f7f3 f96e 	bl	8000638 <__aeabi_dmul>
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	4620      	mov	r0, r4
 800d362:	4629      	mov	r1, r5
 800d364:	f7f2 ffb2 	bl	80002cc <__adddf3>
 800d368:	4604      	mov	r4, r0
 800d36a:	460d      	mov	r5, r1
 800d36c:	ec45 4b10 	vmov	d0, r4, r5
 800d370:	b003      	add	sp, #12
 800d372:	ecbd 8b04 	vpop	{d8-d9}
 800d376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d37a:	4b1b      	ldr	r3, [pc, #108]	; (800d3e8 <__kernel_sin+0x150>)
 800d37c:	ec51 0b18 	vmov	r0, r1, d8
 800d380:	2200      	movs	r2, #0
 800d382:	f7f3 f959 	bl	8000638 <__aeabi_dmul>
 800d386:	4632      	mov	r2, r6
 800d388:	ec41 0b19 	vmov	d9, r0, r1
 800d38c:	463b      	mov	r3, r7
 800d38e:	4640      	mov	r0, r8
 800d390:	4649      	mov	r1, r9
 800d392:	f7f3 f951 	bl	8000638 <__aeabi_dmul>
 800d396:	4602      	mov	r2, r0
 800d398:	460b      	mov	r3, r1
 800d39a:	ec51 0b19 	vmov	r0, r1, d9
 800d39e:	f7f2 ff93 	bl	80002c8 <__aeabi_dsub>
 800d3a2:	4652      	mov	r2, sl
 800d3a4:	465b      	mov	r3, fp
 800d3a6:	f7f3 f947 	bl	8000638 <__aeabi_dmul>
 800d3aa:	ec53 2b18 	vmov	r2, r3, d8
 800d3ae:	f7f2 ff8b 	bl	80002c8 <__aeabi_dsub>
 800d3b2:	a30b      	add	r3, pc, #44	; (adr r3, 800d3e0 <__kernel_sin+0x148>)
 800d3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b8:	4606      	mov	r6, r0
 800d3ba:	460f      	mov	r7, r1
 800d3bc:	4640      	mov	r0, r8
 800d3be:	4649      	mov	r1, r9
 800d3c0:	f7f3 f93a 	bl	8000638 <__aeabi_dmul>
 800d3c4:	4602      	mov	r2, r0
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	4639      	mov	r1, r7
 800d3cc:	f7f2 ff7e 	bl	80002cc <__adddf3>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	4629      	mov	r1, r5
 800d3d8:	f7f2 ff76 	bl	80002c8 <__aeabi_dsub>
 800d3dc:	e7c4      	b.n	800d368 <__kernel_sin+0xd0>
 800d3de:	bf00      	nop
 800d3e0:	55555549 	.word	0x55555549
 800d3e4:	3fc55555 	.word	0x3fc55555
 800d3e8:	3fe00000 	.word	0x3fe00000
 800d3ec:	5acfd57c 	.word	0x5acfd57c
 800d3f0:	3de5d93a 	.word	0x3de5d93a
 800d3f4:	8a2b9ceb 	.word	0x8a2b9ceb
 800d3f8:	3e5ae5e6 	.word	0x3e5ae5e6
 800d3fc:	57b1fe7d 	.word	0x57b1fe7d
 800d400:	3ec71de3 	.word	0x3ec71de3
 800d404:	19c161d5 	.word	0x19c161d5
 800d408:	3f2a01a0 	.word	0x3f2a01a0
 800d40c:	1110f8a6 	.word	0x1110f8a6
 800d410:	3f811111 	.word	0x3f811111

0800d414 <fabs>:
 800d414:	ec51 0b10 	vmov	r0, r1, d0
 800d418:	ee10 2a10 	vmov	r2, s0
 800d41c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d420:	ec43 2b10 	vmov	d0, r2, r3
 800d424:	4770      	bx	lr
	...

0800d428 <floor>:
 800d428:	ec51 0b10 	vmov	r0, r1, d0
 800d42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d430:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d434:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d438:	2e13      	cmp	r6, #19
 800d43a:	ee10 5a10 	vmov	r5, s0
 800d43e:	ee10 8a10 	vmov	r8, s0
 800d442:	460c      	mov	r4, r1
 800d444:	dc32      	bgt.n	800d4ac <floor+0x84>
 800d446:	2e00      	cmp	r6, #0
 800d448:	da14      	bge.n	800d474 <floor+0x4c>
 800d44a:	a333      	add	r3, pc, #204	; (adr r3, 800d518 <floor+0xf0>)
 800d44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d450:	f7f2 ff3c 	bl	80002cc <__adddf3>
 800d454:	2200      	movs	r2, #0
 800d456:	2300      	movs	r3, #0
 800d458:	f7f3 fb7e 	bl	8000b58 <__aeabi_dcmpgt>
 800d45c:	b138      	cbz	r0, 800d46e <floor+0x46>
 800d45e:	2c00      	cmp	r4, #0
 800d460:	da57      	bge.n	800d512 <floor+0xea>
 800d462:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d466:	431d      	orrs	r5, r3
 800d468:	d001      	beq.n	800d46e <floor+0x46>
 800d46a:	4c2d      	ldr	r4, [pc, #180]	; (800d520 <floor+0xf8>)
 800d46c:	2500      	movs	r5, #0
 800d46e:	4621      	mov	r1, r4
 800d470:	4628      	mov	r0, r5
 800d472:	e025      	b.n	800d4c0 <floor+0x98>
 800d474:	4f2b      	ldr	r7, [pc, #172]	; (800d524 <floor+0xfc>)
 800d476:	4137      	asrs	r7, r6
 800d478:	ea01 0307 	and.w	r3, r1, r7
 800d47c:	4303      	orrs	r3, r0
 800d47e:	d01f      	beq.n	800d4c0 <floor+0x98>
 800d480:	a325      	add	r3, pc, #148	; (adr r3, 800d518 <floor+0xf0>)
 800d482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d486:	f7f2 ff21 	bl	80002cc <__adddf3>
 800d48a:	2200      	movs	r2, #0
 800d48c:	2300      	movs	r3, #0
 800d48e:	f7f3 fb63 	bl	8000b58 <__aeabi_dcmpgt>
 800d492:	2800      	cmp	r0, #0
 800d494:	d0eb      	beq.n	800d46e <floor+0x46>
 800d496:	2c00      	cmp	r4, #0
 800d498:	bfbe      	ittt	lt
 800d49a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d49e:	fa43 f606 	asrlt.w	r6, r3, r6
 800d4a2:	19a4      	addlt	r4, r4, r6
 800d4a4:	ea24 0407 	bic.w	r4, r4, r7
 800d4a8:	2500      	movs	r5, #0
 800d4aa:	e7e0      	b.n	800d46e <floor+0x46>
 800d4ac:	2e33      	cmp	r6, #51	; 0x33
 800d4ae:	dd0b      	ble.n	800d4c8 <floor+0xa0>
 800d4b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d4b4:	d104      	bne.n	800d4c0 <floor+0x98>
 800d4b6:	ee10 2a10 	vmov	r2, s0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	f7f2 ff06 	bl	80002cc <__adddf3>
 800d4c0:	ec41 0b10 	vmov	d0, r0, r1
 800d4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d4cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4d0:	fa23 f707 	lsr.w	r7, r3, r7
 800d4d4:	4207      	tst	r7, r0
 800d4d6:	d0f3      	beq.n	800d4c0 <floor+0x98>
 800d4d8:	a30f      	add	r3, pc, #60	; (adr r3, 800d518 <floor+0xf0>)
 800d4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4de:	f7f2 fef5 	bl	80002cc <__adddf3>
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	f7f3 fb37 	bl	8000b58 <__aeabi_dcmpgt>
 800d4ea:	2800      	cmp	r0, #0
 800d4ec:	d0bf      	beq.n	800d46e <floor+0x46>
 800d4ee:	2c00      	cmp	r4, #0
 800d4f0:	da02      	bge.n	800d4f8 <floor+0xd0>
 800d4f2:	2e14      	cmp	r6, #20
 800d4f4:	d103      	bne.n	800d4fe <floor+0xd6>
 800d4f6:	3401      	adds	r4, #1
 800d4f8:	ea25 0507 	bic.w	r5, r5, r7
 800d4fc:	e7b7      	b.n	800d46e <floor+0x46>
 800d4fe:	2301      	movs	r3, #1
 800d500:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d504:	fa03 f606 	lsl.w	r6, r3, r6
 800d508:	4435      	add	r5, r6
 800d50a:	4545      	cmp	r5, r8
 800d50c:	bf38      	it	cc
 800d50e:	18e4      	addcc	r4, r4, r3
 800d510:	e7f2      	b.n	800d4f8 <floor+0xd0>
 800d512:	2500      	movs	r5, #0
 800d514:	462c      	mov	r4, r5
 800d516:	e7aa      	b.n	800d46e <floor+0x46>
 800d518:	8800759c 	.word	0x8800759c
 800d51c:	7e37e43c 	.word	0x7e37e43c
 800d520:	bff00000 	.word	0xbff00000
 800d524:	000fffff 	.word	0x000fffff

0800d528 <scalbn>:
 800d528:	b570      	push	{r4, r5, r6, lr}
 800d52a:	ec55 4b10 	vmov	r4, r5, d0
 800d52e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d532:	4606      	mov	r6, r0
 800d534:	462b      	mov	r3, r5
 800d536:	b99a      	cbnz	r2, 800d560 <scalbn+0x38>
 800d538:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d53c:	4323      	orrs	r3, r4
 800d53e:	d036      	beq.n	800d5ae <scalbn+0x86>
 800d540:	4b39      	ldr	r3, [pc, #228]	; (800d628 <scalbn+0x100>)
 800d542:	4629      	mov	r1, r5
 800d544:	ee10 0a10 	vmov	r0, s0
 800d548:	2200      	movs	r2, #0
 800d54a:	f7f3 f875 	bl	8000638 <__aeabi_dmul>
 800d54e:	4b37      	ldr	r3, [pc, #220]	; (800d62c <scalbn+0x104>)
 800d550:	429e      	cmp	r6, r3
 800d552:	4604      	mov	r4, r0
 800d554:	460d      	mov	r5, r1
 800d556:	da10      	bge.n	800d57a <scalbn+0x52>
 800d558:	a32b      	add	r3, pc, #172	; (adr r3, 800d608 <scalbn+0xe0>)
 800d55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55e:	e03a      	b.n	800d5d6 <scalbn+0xae>
 800d560:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d564:	428a      	cmp	r2, r1
 800d566:	d10c      	bne.n	800d582 <scalbn+0x5a>
 800d568:	ee10 2a10 	vmov	r2, s0
 800d56c:	4620      	mov	r0, r4
 800d56e:	4629      	mov	r1, r5
 800d570:	f7f2 feac 	bl	80002cc <__adddf3>
 800d574:	4604      	mov	r4, r0
 800d576:	460d      	mov	r5, r1
 800d578:	e019      	b.n	800d5ae <scalbn+0x86>
 800d57a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d57e:	460b      	mov	r3, r1
 800d580:	3a36      	subs	r2, #54	; 0x36
 800d582:	4432      	add	r2, r6
 800d584:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d588:	428a      	cmp	r2, r1
 800d58a:	dd08      	ble.n	800d59e <scalbn+0x76>
 800d58c:	2d00      	cmp	r5, #0
 800d58e:	a120      	add	r1, pc, #128	; (adr r1, 800d610 <scalbn+0xe8>)
 800d590:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d594:	da1c      	bge.n	800d5d0 <scalbn+0xa8>
 800d596:	a120      	add	r1, pc, #128	; (adr r1, 800d618 <scalbn+0xf0>)
 800d598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d59c:	e018      	b.n	800d5d0 <scalbn+0xa8>
 800d59e:	2a00      	cmp	r2, #0
 800d5a0:	dd08      	ble.n	800d5b4 <scalbn+0x8c>
 800d5a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d5a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d5aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d5ae:	ec45 4b10 	vmov	d0, r4, r5
 800d5b2:	bd70      	pop	{r4, r5, r6, pc}
 800d5b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d5b8:	da19      	bge.n	800d5ee <scalbn+0xc6>
 800d5ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d5be:	429e      	cmp	r6, r3
 800d5c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d5c4:	dd0a      	ble.n	800d5dc <scalbn+0xb4>
 800d5c6:	a112      	add	r1, pc, #72	; (adr r1, 800d610 <scalbn+0xe8>)
 800d5c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d1e2      	bne.n	800d596 <scalbn+0x6e>
 800d5d0:	a30f      	add	r3, pc, #60	; (adr r3, 800d610 <scalbn+0xe8>)
 800d5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d6:	f7f3 f82f 	bl	8000638 <__aeabi_dmul>
 800d5da:	e7cb      	b.n	800d574 <scalbn+0x4c>
 800d5dc:	a10a      	add	r1, pc, #40	; (adr r1, 800d608 <scalbn+0xe0>)
 800d5de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d0b8      	beq.n	800d558 <scalbn+0x30>
 800d5e6:	a10e      	add	r1, pc, #56	; (adr r1, 800d620 <scalbn+0xf8>)
 800d5e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5ec:	e7b4      	b.n	800d558 <scalbn+0x30>
 800d5ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d5f2:	3236      	adds	r2, #54	; 0x36
 800d5f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d5f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	4b0c      	ldr	r3, [pc, #48]	; (800d630 <scalbn+0x108>)
 800d600:	2200      	movs	r2, #0
 800d602:	e7e8      	b.n	800d5d6 <scalbn+0xae>
 800d604:	f3af 8000 	nop.w
 800d608:	c2f8f359 	.word	0xc2f8f359
 800d60c:	01a56e1f 	.word	0x01a56e1f
 800d610:	8800759c 	.word	0x8800759c
 800d614:	7e37e43c 	.word	0x7e37e43c
 800d618:	8800759c 	.word	0x8800759c
 800d61c:	fe37e43c 	.word	0xfe37e43c
 800d620:	c2f8f359 	.word	0xc2f8f359
 800d624:	81a56e1f 	.word	0x81a56e1f
 800d628:	43500000 	.word	0x43500000
 800d62c:	ffff3cb0 	.word	0xffff3cb0
 800d630:	3c900000 	.word	0x3c900000

0800d634 <_getpid>:
 800d634:	4b02      	ldr	r3, [pc, #8]	; (800d640 <_getpid+0xc>)
 800d636:	2258      	movs	r2, #88	; 0x58
 800d638:	601a      	str	r2, [r3, #0]
 800d63a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d63e:	4770      	bx	lr
 800d640:	2000083c 	.word	0x2000083c

0800d644 <_kill>:
 800d644:	4b02      	ldr	r3, [pc, #8]	; (800d650 <_kill+0xc>)
 800d646:	2258      	movs	r2, #88	; 0x58
 800d648:	601a      	str	r2, [r3, #0]
 800d64a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d64e:	4770      	bx	lr
 800d650:	2000083c 	.word	0x2000083c

0800d654 <_exit>:
 800d654:	e7fe      	b.n	800d654 <_exit>
	...

0800d658 <_init>:
 800d658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65a:	bf00      	nop
 800d65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d65e:	bc08      	pop	{r3}
 800d660:	469e      	mov	lr, r3
 800d662:	4770      	bx	lr

0800d664 <_fini>:
 800d664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d666:	bf00      	nop
 800d668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d66a:	bc08      	pop	{r3}
 800d66c:	469e      	mov	lr, r3
 800d66e:	4770      	bx	lr
