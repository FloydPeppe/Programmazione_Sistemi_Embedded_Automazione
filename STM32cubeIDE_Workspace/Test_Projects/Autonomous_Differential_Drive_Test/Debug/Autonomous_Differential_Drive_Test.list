
Autonomous_Differential_Drive_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000138a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  08013a70  08013a70  00023a70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080142f0  080142f0  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  080142f0  080142f0  000242f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080142f8  080142f8  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080142f8  080142f8  000242f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080142fc  080142fc  000242fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08014300  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007228  200001ec  080144ec  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007414  080144ec  00037414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000285c6  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b20  00000000  00000000  000587e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001870  00000000  00000000  0005d308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  0005eb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000678b  00000000  00000000  00060220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e018  00000000  00000000  000669ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bbd6  00000000  00000000  000849c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00190599  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ed4  00000000  00000000  001905ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  001984c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  001984fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013a58 	.word	0x08013a58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	08013a58 	.word	0x08013a58

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001030:	f004 fefe 	bl	8005e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001034:	f000 f86c 	bl	8001110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001038:	f000 fbee 	bl	8001818 <MX_GPIO_Init>
  MX_TIM2_Init();
 800103c:	f000 f99a 	bl	8001374 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001040:	f000 f8d4 	bl	80011ec <MX_TIM1_Init>
  MX_TIM3_Init();
 8001044:	f000 f9ea 	bl	800141c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001048:	f000 fa36 	bl	80014b8 <MX_TIM5_Init>
  MX_TIM12_Init();
 800104c:	f000 fb5e 	bl	800170c <MX_TIM12_Init>
  MX_TIM7_Init();
 8001050:	f000 fa86 	bl	8001560 <MX_TIM7_Init>
  MX_TIM8_Init();
 8001054:	f000 faba 	bl	80015cc <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001058:	f000 fbb4 	bl	80017c4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize
  DATASTREAM_Init(&huart3);
 800105c:	481e      	ldr	r0, [pc, #120]	; (80010d8 <main+0xac>)
 800105e:	f001 ff9b 	bl	8002f98 <DATASTREAM_Init>
  MAIN_DIFFDRIVE_Init();
 8001062:	f000 fc77 	bl	8001954 <MAIN_DIFFDRIVE_Init>
  MAIN_ULTRASONIC_Init();
 8001066:	f000 fd47 	bl	8001af8 <MAIN_ULTRASONIC_Init>
  MAIN_MAF_Init();
 800106a:	f000 fd6b 	bl	8001b44 <MAIN_MAF_Init>
  MAIN_SERVO_Init();
 800106e:	f000 fdd1 	bl	8001c14 <MAIN_SERVO_Init>

  // LED on
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
*/
  // Wait until the blue button is pressed again
   while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) );
 8001072:	bf00      	nop
 8001074:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001078:	4818      	ldr	r0, [pc, #96]	; (80010dc <main+0xb0>)
 800107a:	f005 facd 	bl	8006618 <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1f7      	bne.n	8001074 <main+0x48>
   		;

  // Wait a bit
  HAL_Delay(1000);
 8001084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001088:	f004 ff14 	bl	8005eb4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800108c:	f009 fa24 	bl	800a4d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ControlDiffDriv */
  ControlDiffDrivHandle = osThreadNew(StartControlDiffDrive, NULL, &ControlDiffDriv_attributes);
 8001090:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <main+0xb4>)
 8001092:	2100      	movs	r1, #0
 8001094:	4813      	ldr	r0, [pc, #76]	; (80010e4 <main+0xb8>)
 8001096:	f009 fa69 	bl	800a56c <osThreadNew>
 800109a:	4603      	mov	r3, r0
 800109c:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <main+0xbc>)
 800109e:	6013      	str	r3, [r2, #0]

  /* creation of DistanceSensor */
  DistanceSensorHandle = osThreadNew(StartDistanceSensor, NULL, &DistanceSensor_attributes);
 80010a0:	4a12      	ldr	r2, [pc, #72]	; (80010ec <main+0xc0>)
 80010a2:	2100      	movs	r1, #0
 80010a4:	4812      	ldr	r0, [pc, #72]	; (80010f0 <main+0xc4>)
 80010a6:	f009 fa61 	bl	800a56c <osThreadNew>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <main+0xc8>)
 80010ae:	6013      	str	r3, [r2, #0]

  /* creation of InfraredSensor */
  InfraredSensorHandle = osThreadNew(StartInfraredSensor, NULL, &InfraredSensor_attributes);
 80010b0:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <main+0xcc>)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4811      	ldr	r0, [pc, #68]	; (80010fc <main+0xd0>)
 80010b6:	f009 fa59 	bl	800a56c <osThreadNew>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a10      	ldr	r2, [pc, #64]	; (8001100 <main+0xd4>)
 80010be:	6013      	str	r3, [r2, #0]

  /* creation of Communication */
  CommunicationHandle = osThreadNew(SerialCommunication, NULL, &Communication_attributes);
 80010c0:	4a10      	ldr	r2, [pc, #64]	; (8001104 <main+0xd8>)
 80010c2:	2100      	movs	r1, #0
 80010c4:	4810      	ldr	r0, [pc, #64]	; (8001108 <main+0xdc>)
 80010c6:	f009 fa51 	bl	800a56c <osThreadNew>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a0f      	ldr	r2, [pc, #60]	; (800110c <main+0xe0>)
 80010ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010d0:	f009 fa26 	bl	800a520 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <main+0xa8>
 80010d6:	bf00      	nop
 80010d8:	20005ba0 	.word	0x20005ba0
 80010dc:	40020800 	.word	0x40020800
 80010e0:	08013b74 	.word	0x08013b74
 80010e4:	08001c39 	.word	0x08001c39
 80010e8:	20005c2c 	.word	0x20005c2c
 80010ec:	08013b98 	.word	0x08013b98
 80010f0:	080023d1 	.word	0x080023d1
 80010f4:	20005c30 	.word	0x20005c30
 80010f8:	08013bbc 	.word	0x08013bbc
 80010fc:	080028c5 	.word	0x080028c5
 8001100:	20005db4 	.word	0x20005db4
 8001104:	08013be0 	.word	0x08013be0
 8001108:	08002905 	.word	0x08002905
 800110c:	20005db8 	.word	0x20005db8

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b094      	sub	sp, #80	; 0x50
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	2234      	movs	r2, #52	; 0x34
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f00c f8bc 	bl	800d29c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <SystemClock_Config+0xd4>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <SystemClock_Config+0xd4>)
 800113e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001142:	6413      	str	r3, [r2, #64]	; 0x40
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <SystemClock_Config+0xd4>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001150:	2300      	movs	r3, #0
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <SystemClock_Config+0xd8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800115c:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <SystemClock_Config+0xd8>)
 800115e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <SystemClock_Config+0xd8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001170:	2302      	movs	r3, #2
 8001172:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001174:	2301      	movs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001178:	2310      	movs	r3, #16
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117c:	2302      	movs	r3, #2
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001180:	2300      	movs	r3, #0
 8001182:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001184:	2310      	movs	r3, #16
 8001186:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001188:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800118c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800118e:	2304      	movs	r3, #4
 8001190:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001192:	2302      	movs	r3, #2
 8001194:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001196:	2302      	movs	r3, #2
 8001198:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4618      	mov	r0, r3
 80011a0:	f005 fd84 	bl	8006cac <HAL_RCC_OscConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011aa:	f001 fbc9 	bl	8002940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ae:	230f      	movs	r3, #15
 80011b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b2:	2302      	movs	r3, #2
 80011b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c4:	f107 0308 	add.w	r3, r7, #8
 80011c8:	2102      	movs	r1, #2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f005 fa70 	bl	80066b0 <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011d6:	f001 fbb3 	bl	8002940 <Error_Handler>
  }
}
 80011da:	bf00      	nop
 80011dc:	3750      	adds	r7, #80	; 0x50
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40007000 	.word	0x40007000

080011ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b096      	sub	sp, #88	; 0x58
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001200:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]
 800121a:	615a      	str	r2, [r3, #20]
 800121c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2220      	movs	r2, #32
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f00c f839 	bl	800d29c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800122a:	4b50      	ldr	r3, [pc, #320]	; (800136c <MX_TIM1_Init+0x180>)
 800122c:	4a50      	ldr	r2, [pc, #320]	; (8001370 <MX_TIM1_Init+0x184>)
 800122e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8001230:	4b4e      	ldr	r3, [pc, #312]	; (800136c <MX_TIM1_Init+0x180>)
 8001232:	2208      	movs	r2, #8
 8001234:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b4d      	ldr	r3, [pc, #308]	; (800136c <MX_TIM1_Init+0x180>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800123c:	4b4b      	ldr	r3, [pc, #300]	; (800136c <MX_TIM1_Init+0x180>)
 800123e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001242:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001244:	4b49      	ldr	r3, [pc, #292]	; (800136c <MX_TIM1_Init+0x180>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800124a:	4b48      	ldr	r3, [pc, #288]	; (800136c <MX_TIM1_Init+0x180>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001250:	4b46      	ldr	r3, [pc, #280]	; (800136c <MX_TIM1_Init+0x180>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001256:	4845      	ldr	r0, [pc, #276]	; (800136c <MX_TIM1_Init+0x180>)
 8001258:	f005 ffc6 	bl	80071e8 <HAL_TIM_Base_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001262:	f001 fb6d 	bl	8002940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800126c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001270:	4619      	mov	r1, r3
 8001272:	483e      	ldr	r0, [pc, #248]	; (800136c <MX_TIM1_Init+0x180>)
 8001274:	f007 f876 	bl	8008364 <HAL_TIM_ConfigClockSource>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800127e:	f001 fb5f 	bl	8002940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001282:	483a      	ldr	r0, [pc, #232]	; (800136c <MX_TIM1_Init+0x180>)
 8001284:	f006 f93c 	bl	8007500 <HAL_TIM_PWM_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800128e:	f001 fb57 	bl	8002940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800129e:	4619      	mov	r1, r3
 80012a0:	4832      	ldr	r0, [pc, #200]	; (800136c <MX_TIM1_Init+0x180>)
 80012a2:	f007 fe13 	bl	8008ecc <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012ac:	f001 fb48 	bl	8002940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b0:	2360      	movs	r3, #96	; 0x60
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	2200      	movs	r2, #0
 80012d2:	4619      	mov	r1, r3
 80012d4:	4825      	ldr	r0, [pc, #148]	; (800136c <MX_TIM1_Init+0x180>)
 80012d6:	f006 ff83 	bl	80081e0 <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012e0:	f001 fb2e 	bl	8002940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	2204      	movs	r2, #4
 80012ea:	4619      	mov	r1, r3
 80012ec:	481f      	ldr	r0, [pc, #124]	; (800136c <MX_TIM1_Init+0x180>)
 80012ee:	f006 ff77 	bl	80081e0 <HAL_TIM_PWM_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80012f8:	f001 fb22 	bl	8002940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001300:	2208      	movs	r2, #8
 8001302:	4619      	mov	r1, r3
 8001304:	4819      	ldr	r0, [pc, #100]	; (800136c <MX_TIM1_Init+0x180>)
 8001306:	f006 ff6b 	bl	80081e0 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001310:	f001 fb16 	bl	8002940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001318:	220c      	movs	r2, #12
 800131a:	4619      	mov	r1, r3
 800131c:	4813      	ldr	r0, [pc, #76]	; (800136c <MX_TIM1_Init+0x180>)
 800131e:	f006 ff5f 	bl	80081e0 <HAL_TIM_PWM_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001328:	f001 fb0a 	bl	8002940 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001344:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4807      	ldr	r0, [pc, #28]	; (800136c <MX_TIM1_Init+0x180>)
 8001350:	f007 fe38 	bl	8008fc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800135a:	f001 faf1 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800135e:	4803      	ldr	r0, [pc, #12]	; (800136c <MX_TIM1_Init+0x180>)
 8001360:	f001 fc54 	bl	8002c0c <HAL_TIM_MspPostInit>

}
 8001364:	bf00      	nop
 8001366:	3758      	adds	r7, #88	; 0x58
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20005dbc 	.word	0x20005dbc
 8001370:	40010000 	.word	0x40010000

08001374 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	; 0x30
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2224      	movs	r2, #36	; 0x24
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f00b ff8a 	bl	800d29c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <MX_TIM2_Init+0xa4>)
 8001392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001396:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <MX_TIM2_Init+0xa4>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <MX_TIM2_Init+0xa4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013a4:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <MX_TIM2_Init+0xa4>)
 80013a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_TIM2_Init+0xa4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <MX_TIM2_Init+0xa4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c0:	2301      	movs	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80013c8:	230f      	movs	r3, #15
 80013ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d0:	2301      	movs	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80013d8:	230f      	movs	r3, #15
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4619      	mov	r1, r3
 80013e2:	480d      	ldr	r0, [pc, #52]	; (8001418 <MX_TIM2_Init+0xa4>)
 80013e4:	f006 fbf6 	bl	8007bd4 <HAL_TIM_Encoder_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013ee:	f001 faa7 	bl	8002940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4619      	mov	r1, r3
 80013fe:	4806      	ldr	r0, [pc, #24]	; (8001418 <MX_TIM2_Init+0xa4>)
 8001400:	f007 fd64 	bl	8008ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800140a:	f001 fa99 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	3730      	adds	r7, #48	; 0x30
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20005ee0 	.word	0x20005ee0

0800141c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <MX_TIM3_Init+0x94>)
 800143a:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <MX_TIM3_Init+0x98>)
 800143c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <MX_TIM3_Init+0x94>)
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_TIM3_Init+0x94>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <MX_TIM3_Init+0x94>)
 800144c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001450:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <MX_TIM3_Init+0x94>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <MX_TIM3_Init+0x94>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800145e:	4814      	ldr	r0, [pc, #80]	; (80014b0 <MX_TIM3_Init+0x94>)
 8001460:	f005 fec2 	bl	80071e8 <HAL_TIM_Base_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800146a:	f001 fa69 	bl	8002940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <MX_TIM3_Init+0x94>)
 800147c:	f006 ff72 	bl	8008364 <HAL_TIM_ConfigClockSource>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001486:	f001 fa5b 	bl	8002940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_TIM3_Init+0x94>)
 8001498:	f007 fd18 	bl	8008ecc <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014a2:	f001 fa4d 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20005ce8 	.word	0x20005ce8
 80014b4:	40000400 	.word	0x40000400

080014b8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	2224      	movs	r2, #36	; 0x24
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f00b fee8 	bl	800d29c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <MX_TIM5_Init+0xa0>)
 80014d6:	4a21      	ldr	r2, [pc, #132]	; (800155c <MX_TIM5_Init+0xa4>)
 80014d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <MX_TIM5_Init+0xa0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <MX_TIM5_Init+0xa0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <MX_TIM5_Init+0xa0>)
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014ec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_TIM5_Init+0xa0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <MX_TIM5_Init+0xa0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014fa:	2301      	movs	r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001502:	2301      	movs	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800150a:	230f      	movs	r3, #15
 800150c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001512:	2301      	movs	r3, #1
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800151a:	230f      	movs	r3, #15
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <MX_TIM5_Init+0xa0>)
 8001526:	f006 fb55 	bl	8007bd4 <HAL_TIM_Encoder_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001530:	f001 fa06 	bl	8002940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_TIM5_Init+0xa0>)
 8001542:	f007 fcc3 	bl	8008ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800154c:	f001 f9f8 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3730      	adds	r7, #48	; 0x30
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20005c34 	.word	0x20005c34
 800155c:	40000c00 	.word	0x40000c00

08001560 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001566:	463b      	mov	r3, r7
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <MX_TIM7_Init+0x64>)
 8001570:	4a15      	ldr	r2, [pc, #84]	; (80015c8 <MX_TIM7_Init+0x68>)
 8001572:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 840;
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <MX_TIM7_Init+0x64>)
 8001576:	f44f 7252 	mov.w	r2, #840	; 0x348
 800157a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_TIM7_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <MX_TIM7_Init+0x64>)
 8001584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001588:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_TIM7_Init+0x64>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <MX_TIM7_Init+0x64>)
 8001592:	f005 fe29 	bl	80071e8 <HAL_TIM_Base_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800159c:	f001 f9d0 	bl	8002940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a0:	2300      	movs	r3, #0
 80015a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015a8:	463b      	mov	r3, r7
 80015aa:	4619      	mov	r1, r3
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_TIM7_Init+0x64>)
 80015ae:	f007 fc8d 	bl	8008ecc <HAL_TIMEx_MasterConfigSynchronization>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80015b8:	f001 f9c2 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20007228 	.word	0x20007228
 80015c8:	40001400 	.word	0x40001400

080015cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b096      	sub	sp, #88	; 0x58
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2220      	movs	r2, #32
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f00b fe49 	bl	800d29c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800160a:	4b3e      	ldr	r3, [pc, #248]	; (8001704 <MX_TIM8_Init+0x138>)
 800160c:	4a3e      	ldr	r2, [pc, #248]	; (8001708 <MX_TIM8_Init+0x13c>)
 800160e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001610:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <MX_TIM8_Init+0x138>)
 8001612:	2200      	movs	r2, #0
 8001614:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b3b      	ldr	r3, [pc, #236]	; (8001704 <MX_TIM8_Init+0x138>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800161c:	4b39      	ldr	r3, [pc, #228]	; (8001704 <MX_TIM8_Init+0x138>)
 800161e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001622:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001624:	4b37      	ldr	r3, [pc, #220]	; (8001704 <MX_TIM8_Init+0x138>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800162a:	4b36      	ldr	r3, [pc, #216]	; (8001704 <MX_TIM8_Init+0x138>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001630:	4b34      	ldr	r3, [pc, #208]	; (8001704 <MX_TIM8_Init+0x138>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001636:	4833      	ldr	r0, [pc, #204]	; (8001704 <MX_TIM8_Init+0x138>)
 8001638:	f005 fdd6 	bl	80071e8 <HAL_TIM_Base_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001642:	f001 f97d 	bl	8002940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800164c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001650:	4619      	mov	r1, r3
 8001652:	482c      	ldr	r0, [pc, #176]	; (8001704 <MX_TIM8_Init+0x138>)
 8001654:	f006 fe86 	bl	8008364 <HAL_TIM_ConfigClockSource>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800165e:	f001 f96f 	bl	8002940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001662:	4828      	ldr	r0, [pc, #160]	; (8001704 <MX_TIM8_Init+0x138>)
 8001664:	f005 ff4c 	bl	8007500 <HAL_TIM_PWM_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800166e:	f001 f967 	bl	8002940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800167a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800167e:	4619      	mov	r1, r3
 8001680:	4820      	ldr	r0, [pc, #128]	; (8001704 <MX_TIM8_Init+0x138>)
 8001682:	f007 fc23 	bl	8008ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800168c:	f001 f958 	bl	8002940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001690:	2360      	movs	r3, #96	; 0x60
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001698:	2300      	movs	r3, #0
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800169c:	2300      	movs	r3, #0
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	2200      	movs	r2, #0
 80016b2:	4619      	mov	r1, r3
 80016b4:	4813      	ldr	r0, [pc, #76]	; (8001704 <MX_TIM8_Init+0x138>)
 80016b6:	f006 fd93 	bl	80081e0 <HAL_TIM_PWM_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80016c0:	f001 f93e 	bl	8002940 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	4619      	mov	r1, r3
 80016e6:	4807      	ldr	r0, [pc, #28]	; (8001704 <MX_TIM8_Init+0x138>)
 80016e8:	f007 fc6c 	bl	8008fc4 <HAL_TIMEx_ConfigBreakDeadTime>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80016f2:	f001 f925 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80016f6:	4803      	ldr	r0, [pc, #12]	; (8001704 <MX_TIM8_Init+0x138>)
 80016f8:	f001 fa88 	bl	8002c0c <HAL_TIM_MspPostInit>

}
 80016fc:	bf00      	nop
 80016fe:	3758      	adds	r7, #88	; 0x58
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20004b4c 	.word	0x20004b4c
 8001708:	40010400 	.word	0x40010400

0800170c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001720:	463b      	mov	r3, r7
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <MX_TIM12_Init+0xb0>)
 800172e:	4a24      	ldr	r2, [pc, #144]	; (80017c0 <MX_TIM12_Init+0xb4>)
 8001730:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <MX_TIM12_Init+0xb0>)
 8001734:	2253      	movs	r2, #83	; 0x53
 8001736:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b20      	ldr	r3, [pc, #128]	; (80017bc <MX_TIM12_Init+0xb0>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0xffff;
 800173e:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <MX_TIM12_Init+0xb0>)
 8001740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001744:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MX_TIM12_Init+0xb0>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MX_TIM12_Init+0xb0>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001752:	481a      	ldr	r0, [pc, #104]	; (80017bc <MX_TIM12_Init+0xb0>)
 8001754:	f005 fd48 	bl	80071e8 <HAL_TIM_Base_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM12_Init+0x56>
  {
    Error_Handler();
 800175e:	f001 f8ef 	bl	8002940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001766:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4619      	mov	r1, r3
 800176e:	4813      	ldr	r0, [pc, #76]	; (80017bc <MX_TIM12_Init+0xb0>)
 8001770:	f006 fdf8 	bl	8008364 <HAL_TIM_ConfigClockSource>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800177a:	f001 f8e1 	bl	8002940 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 800177e:	480f      	ldr	r0, [pc, #60]	; (80017bc <MX_TIM12_Init+0xb0>)
 8001780:	f005 ffec 	bl	800775c <HAL_TIM_IC_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 800178a:	f001 f8d9 	bl	8002940 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800178e:	2302      	movs	r3, #2
 8001790:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001792:	2301      	movs	r3, #1
 8001794:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800179e:	463b      	mov	r3, r7
 80017a0:	2200      	movs	r2, #0
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_TIM12_Init+0xb0>)
 80017a6:	f006 fc7f 	bl	80080a8 <HAL_TIM_IC_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM12_Init+0xa8>
  {
    Error_Handler();
 80017b0:	f001 f8c6 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	3720      	adds	r7, #32
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20006f34 	.word	0x20006f34
 80017c0:	40001800 	.word	0x40001800

080017c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_USART3_UART_Init+0x4c>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <MX_USART3_UART_Init+0x50>)
 80017cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <MX_USART3_UART_Init+0x4c>)
 80017d0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80017d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_USART3_UART_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_USART3_UART_Init+0x4c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_USART3_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_USART3_UART_Init+0x4c>)
 80017ea:	220c      	movs	r2, #12
 80017ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <MX_USART3_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_USART3_UART_Init+0x4c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_USART3_UART_Init+0x4c>)
 80017fc:	f007 fc52 	bl	80090a4 <HAL_UART_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001806:	f001 f89b 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20005ba0 	.word	0x20005ba0
 8001814:	40004800 	.word	0x40004800

08001818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	4b45      	ldr	r3, [pc, #276]	; (8001948 <MX_GPIO_Init+0x130>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a44      	ldr	r2, [pc, #272]	; (8001948 <MX_GPIO_Init+0x130>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b42      	ldr	r3, [pc, #264]	; (8001948 <MX_GPIO_Init+0x130>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b3e      	ldr	r3, [pc, #248]	; (8001948 <MX_GPIO_Init+0x130>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a3d      	ldr	r2, [pc, #244]	; (8001948 <MX_GPIO_Init+0x130>)
 8001854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <MX_GPIO_Init+0x130>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b37      	ldr	r3, [pc, #220]	; (8001948 <MX_GPIO_Init+0x130>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a36      	ldr	r2, [pc, #216]	; (8001948 <MX_GPIO_Init+0x130>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b34      	ldr	r3, [pc, #208]	; (8001948 <MX_GPIO_Init+0x130>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	4b30      	ldr	r3, [pc, #192]	; (8001948 <MX_GPIO_Init+0x130>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a2f      	ldr	r2, [pc, #188]	; (8001948 <MX_GPIO_Init+0x130>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <MX_GPIO_Init+0x130>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	2101      	movs	r1, #1
 80018a2:	482a      	ldr	r0, [pc, #168]	; (800194c <MX_GPIO_Init+0x134>)
 80018a4:	f004 fed0 	bl	8006648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2160      	movs	r1, #96	; 0x60
 80018ac:	4828      	ldr	r0, [pc, #160]	; (8001950 <MX_GPIO_Init+0x138>)
 80018ae:	f004 fecb 	bl	8006648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4820      	ldr	r0, [pc, #128]	; (800194c <MX_GPIO_Init+0x134>)
 80018ca:	f004 fd11 	bl	80062f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_ENABLE_Pin */
  GPIO_InitStruct.Pin = WIFI_ENABLE_Pin;
 80018ce:	2301      	movs	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4819      	ldr	r0, [pc, #100]	; (800194c <MX_GPIO_Init+0x134>)
 80018e6:	f004 fd03 	bl	80062f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ea:	230c      	movs	r3, #12
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018fa:	2307      	movs	r3, #7
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4812      	ldr	r0, [pc, #72]	; (8001950 <MX_GPIO_Init+0x138>)
 8001906:	f004 fcf3 	bl	80062f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ULTRASONIC_TRIGGER_Pin;
 800190a:	2360      	movs	r3, #96	; 0x60
 800190c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	480b      	ldr	r0, [pc, #44]	; (8001950 <MX_GPIO_Init+0x138>)
 8001922:	f004 fce5 	bl	80062f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INFRARED_SENSOR_Pin */
  GPIO_InitStruct.Pin = INFRARED_SENSOR_Pin;
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INFRARED_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <MX_GPIO_Init+0x134>)
 800193a:	f004 fcd9 	bl	80062f0 <HAL_GPIO_Init>

}
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	; 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40020800 	.word	0x40020800
 8001950:	40020000 	.word	0x40020000

08001954 <MAIN_DIFFDRIVE_Init>:

/* USER CODE BEGIN 4 */

static void MAIN_DIFFDRIVE_Init(void){
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0

	float Ts= 0.01;
 800195a:	4b57      	ldr	r3, [pc, #348]	; (8001ab8 <MAIN_DIFFDRIVE_Init+0x164>)
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
	int max_sample= 1000;
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	623b      	str	r3, [r7, #32]

	/* Timing parameters */
	hdiffdrive.Init.timing_htim= &htim3;
 8001964:	4b55      	ldr	r3, [pc, #340]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001966:	4a56      	ldr	r2, [pc, #344]	; (8001ac0 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001968:	649a      	str	r2, [r3, #72]	; 0x48
	hdiffdrive.Init.timing_time_step= Ts;
 800196a:	4a54      	ldr	r2, [pc, #336]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	64d3      	str	r3, [r2, #76]	; 0x4c

	/* Sensors parameters */
	hdiffdrive.Init.encoder_htim[left ]= &htim2;
 8001970:	4b52      	ldr	r3, [pc, #328]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001972:	4a54      	ldr	r2, [pc, #336]	; (8001ac4 <MAIN_DIFFDRIVE_Init+0x170>)
 8001974:	639a      	str	r2, [r3, #56]	; 0x38
	hdiffdrive.Init.encoder_htim[right]= &htim5;
 8001976:	4b51      	ldr	r3, [pc, #324]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001978:	4a53      	ldr	r2, [pc, #332]	; (8001ac8 <MAIN_DIFFDRIVE_Init+0x174>)
 800197a:	63da      	str	r2, [r3, #60]	; 0x3c
	hdiffdrive.Init.encoder_channel[left ]= TIM_CHANNEL_1;
 800197c:	4b4f      	ldr	r3, [pc, #316]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 800197e:	2200      	movs	r2, #0
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
	hdiffdrive.Init.encoder_channel[right]= TIM_CHANNEL_1;
 8001982:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001984:	2200      	movs	r2, #0
 8001986:	645a      	str	r2, [r3, #68]	; 0x44

	hdiffdrive.Init.encoder_resolution[left ]= 1900; //1920; // Number of step each wheel revolution
 8001988:	4b4c      	ldr	r3, [pc, #304]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 800198a:	4a50      	ldr	r2, [pc, #320]	; (8001acc <MAIN_DIFFDRIVE_Init+0x178>)
 800198c:	65da      	str	r2, [r3, #92]	; 0x5c
	hdiffdrive.Init.encoder_resolution[right]= 1900; //1920;
 800198e:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001990:	4a4e      	ldr	r2, [pc, #312]	; (8001acc <MAIN_DIFFDRIVE_Init+0x178>)
 8001992:	661a      	str	r2, [r3, #96]	; 0x60

	/* Motors parameters */
	hdiffdrive.Init.motor_htim[left ][forward ]= &htim1;
 8001994:	4b49      	ldr	r3, [pc, #292]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001996:	4a4e      	ldr	r2, [pc, #312]	; (8001ad0 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001998:	601a      	str	r2, [r3, #0]
	hdiffdrive.Init.motor_htim[left ][backward]= &htim1;
 800199a:	4b48      	ldr	r3, [pc, #288]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 800199c:	4a4c      	ldr	r2, [pc, #304]	; (8001ad0 <MAIN_DIFFDRIVE_Init+0x17c>)
 800199e:	605a      	str	r2, [r3, #4]
	hdiffdrive.Init.motor_htim[right][forward ]= &htim1;
 80019a0:	4b46      	ldr	r3, [pc, #280]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 80019a2:	4a4b      	ldr	r2, [pc, #300]	; (8001ad0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80019a4:	609a      	str	r2, [r3, #8]
	hdiffdrive.Init.motor_htim[right][backward]= &htim1;
 80019a6:	4b45      	ldr	r3, [pc, #276]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 80019a8:	4a49      	ldr	r2, [pc, #292]	; (8001ad0 <MAIN_DIFFDRIVE_Init+0x17c>)
 80019aa:	60da      	str	r2, [r3, #12]

	hdiffdrive.Init.motor_pwm_channel[left ][forward ]= TIM_CHANNEL_1;
 80019ac:	4b43      	ldr	r3, [pc, #268]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
	hdiffdrive.Init.motor_pwm_channel[left ][backward]= TIM_CHANNEL_2;
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 80019b4:	2204      	movs	r2, #4
 80019b6:	615a      	str	r2, [r3, #20]
	hdiffdrive.Init.motor_pwm_channel[right][forward ]= TIM_CHANNEL_3;
 80019b8:	4b40      	ldr	r3, [pc, #256]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 80019ba:	2208      	movs	r2, #8
 80019bc:	619a      	str	r2, [r3, #24]
	hdiffdrive.Init.motor_pwm_channel[right][backward]= TIM_CHANNEL_4;
 80019be:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 80019c0:	220c      	movs	r2, #12
 80019c2:	61da      	str	r2, [r3, #28]

	hdiffdrive.Init.motor_max_voltage[left ]= 	  MOTOR_MAX_VOLTAGE;
 80019c4:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 80019c6:	4a43      	ldr	r2, [pc, #268]	; (8001ad4 <MAIN_DIFFDRIVE_Init+0x180>)
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
	hdiffdrive.Init.motor_max_voltage[right]= 	  MOTOR_MAX_VOLTAGE;
 80019ca:	4b3c      	ldr	r3, [pc, #240]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 80019cc:	4a41      	ldr	r2, [pc, #260]	; (8001ad4 <MAIN_DIFFDRIVE_Init+0x180>)
 80019ce:	62da      	str	r2, [r3, #44]	; 0x2c
	hdiffdrive.Init.motor_min_voltage[left ]= 	  MOTOR_MIN_VOLTAGE;
 80019d0:	4b3a      	ldr	r3, [pc, #232]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 80019d2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019d6:	631a      	str	r2, [r3, #48]	; 0x30
	hdiffdrive.Init.motor_min_voltage[right]= 	  MOTOR_MIN_VOLTAGE;
 80019d8:	4b38      	ldr	r3, [pc, #224]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 80019da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019de:	635a      	str	r2, [r3, #52]	; 0x34
	hdiffdrive.Init.motor_supply_voltage[left]=   SUPPLY_VOLTAGE;
 80019e0:	4b36      	ldr	r3, [pc, #216]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 80019e2:	4a3c      	ldr	r2, [pc, #240]	; (8001ad4 <MAIN_DIFFDRIVE_Init+0x180>)
 80019e4:	621a      	str	r2, [r3, #32]
	hdiffdrive.Init.motor_supply_voltage[right]=  SUPPLY_VOLTAGE;
 80019e6:	4b35      	ldr	r3, [pc, #212]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 80019e8:	4a3a      	ldr	r2, [pc, #232]	; (8001ad4 <MAIN_DIFFDRIVE_Init+0x180>)
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24

	/* Feed-forward law parameters */
	hdiffdrive.Init.control_fdfrwrd_arma_AR[left ]= AR_L;
 80019ec:	4a3a      	ldr	r2, [pc, #232]	; (8001ad8 <MAIN_DIFFDRIVE_Init+0x184>)
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80019f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019f8:	4a30      	ldr	r2, [pc, #192]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	6713      	str	r3, [r2, #112]	; 0x70
	hdiffdrive.Init.control_fdfrwrd_arma_AR[right]= AR_R;
 8001a00:	4a36      	ldr	r2, [pc, #216]	; (8001adc <MAIN_DIFFDRIVE_Init+0x188>)
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a0c:	4a2b      	ldr	r2, [pc, #172]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	6753      	str	r3, [r2, #116]	; 0x74
	hdiffdrive.Init.control_fdfrwrd_arma_MA[left ]= MA_L;
 8001a14:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <MAIN_DIFFDRIVE_Init+0x18c>)
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	4a28      	ldr	r2, [pc, #160]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	6793      	str	r3, [r2, #120]	; 0x78
	hdiffdrive.Init.control_fdfrwrd_arma_MA[right]= MA_R;
 8001a1e:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <MAIN_DIFFDRIVE_Init+0x190>)
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	4a26      	ldr	r2, [pc, #152]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a24:	463b      	mov	r3, r7
 8001a26:	67d3      	str	r3, [r2, #124]	; 0x7c
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[left ]= N_AR_L;
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[right]= N_AR_R;
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a32:	2203      	movs	r2, #3
 8001a34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[left ]= N_MA_L;
 8001a38:	4b20      	ldr	r3, [pc, #128]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[right]= N_MA_R;
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	hdiffdrive.Init.control_fdfrwrd_arma_tau[left ]= TAU_L;
 8001a48:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	hdiffdrive.Init.control_fdfrwrd_arma_tau[right]= TAU_R;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a52:	2202      	movs	r2, #2
 8001a54:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	/* PID law parameters */
	hdiffdrive.Init.control_pid_P[left ]= 5*0.00133180775219883*1e1*5e2;   // 0.50835*0.08; // 0.40835;
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a5a:	4a23      	ldr	r2, [pc, #140]	; (8001ae8 <MAIN_DIFFDRIVE_Init+0x194>)
 8001a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	hdiffdrive.Init.control_pid_P[right]= 5*0.00133180775219883*1e1*5e2;   // 0.50835*0.08; // 0.40835
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a62:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <MAIN_DIFFDRIVE_Init+0x194>)
 8001a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	hdiffdrive.Init.control_pid_I[left ]= 15.64986485011565*1e-3*5e2; // 0.57005*0.004; // 0.27005;
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a6a:	4a20      	ldr	r2, [pc, #128]	; (8001aec <MAIN_DIFFDRIVE_Init+0x198>)
 8001a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	hdiffdrive.Init.control_pid_I[right]= 15.64986485011565*1e-3*5e2; // 0.57005*0.004; // 0.27005;
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a72:	4a1e      	ldr	r2, [pc, #120]	; (8001aec <MAIN_DIFFDRIVE_Init+0x198>)
 8001a74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	hdiffdrive.Init.control_pid_D[left ]= 0.5*0;
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	hdiffdrive.Init.control_pid_D[right]= 0.5*0;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	/* History parameters */
	hdiffdrive.Init.history_max_sample= max_sample;
 8001a8c:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	/* Mechanical parameters (from real model) */
	hdiffdrive.Init.mech_prmtr_l=                 0.155/2;	// Distance between wheels
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a96:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <MAIN_DIFFDRIVE_Init+0x19c>)
 8001a98:	655a      	str	r2, [r3, #84]	; 0x54
	hdiffdrive.Init.mech_prmtr_r=                 0.069/2; // Wheels radius
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001a9c:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <MAIN_DIFFDRIVE_Init+0x1a0>)
 8001a9e:	651a      	str	r2, [r3, #80]	; 0x50
	hdiffdrive.Init.mech_prmtr_max_wheel_speed=   16;//20;  // Radiant each seconds (rad/s), DC motor and gears specifics
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001aa2:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8001aa6:	659a      	str	r2, [r3, #88]	; 0x58

	DIFFDRIVE_Init(&hdiffdrive);
 8001aa8:	4804      	ldr	r0, [pc, #16]	; (8001abc <MAIN_DIFFDRIVE_Init+0x168>)
 8001aaa:	f001 fca1 	bl	80033f0 <DIFFDRIVE_Init>

}
 8001aae:	bf00      	nop
 8001ab0:	3728      	adds	r7, #40	; 0x28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	3c23d70a 	.word	0x3c23d70a
 8001abc:	20006fe8 	.word	0x20006fe8
 8001ac0:	20005ce8 	.word	0x20005ce8
 8001ac4:	20005ee0 	.word	0x20005ee0
 8001ac8:	20005c34 	.word	0x20005c34
 8001acc:	44ed8000 	.word	0x44ed8000
 8001ad0:	20005dbc 	.word	0x20005dbc
 8001ad4:	40e66666 	.word	0x40e66666
 8001ad8:	08013ab0 	.word	0x08013ab0
 8001adc:	08013abc 	.word	0x08013abc
 8001ae0:	3a486a06 	.word	0x3a486a06
 8001ae4:	3a4330b9 	.word	0x3a4330b9
 8001ae8:	42052e47 	.word	0x42052e47
 8001aec:	40fa65d9 	.word	0x40fa65d9
 8001af0:	3d9eb852 	.word	0x3d9eb852
 8001af4:	3d0d4fdf 	.word	0x3d0d4fdf

08001af8 <MAIN_ULTRASONIC_Init>:


static void MAIN_ULTRASONIC_Init(void){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0

	hultra.Init.htim=           		&htim12;
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <MAIN_ULTRASONIC_Init+0x3c>)
 8001afe:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <MAIN_ULTRASONIC_Init+0x40>)
 8001b00:	601a      	str	r2, [r3, #0]
	hultra.Init.history_lenght= 		100;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MAIN_ULTRASONIC_Init+0x3c>)
 8001b04:	2264      	movs	r2, #100	; 0x64
 8001b06:	809a      	strh	r2, [r3, #4]
	hultra.Init.io_trig_GPIOx=   	    ULTRASONIC_TRIGGER_GPIO_Port;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <MAIN_ULTRASONIC_Init+0x3c>)
 8001b0a:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <MAIN_ULTRASONIC_Init+0x44>)
 8001b0c:	609a      	str	r2, [r3, #8]
	hultra.Init.io_trig_Pin=   			ULTRASONIC_TRIGGER_Pin;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MAIN_ULTRASONIC_Init+0x3c>)
 8001b10:	2240      	movs	r2, #64	; 0x40
 8001b12:	60da      	str	r2, [r3, #12]
	hultra.Init.io_echo_GPIOx=  		ULTRASONIC_ECHO_GPIO_Port;
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <MAIN_ULTRASONIC_Init+0x3c>)
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <MAIN_ULTRASONIC_Init+0x48>)
 8001b18:	611a      	str	r2, [r3, #16]
	hultra.Init.io_echo_Pin=			ULTRASONIC_ECHO_Pin;
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MAIN_ULTRASONIC_Init+0x3c>)
 8001b1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b20:	615a      	str	r2, [r3, #20]
	hultra.Init.io_echo_IC_tim_channel= TIM_CHANNEL_1;
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <MAIN_ULTRASONIC_Init+0x3c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]

	ULTRASONIC_Init(&hultra);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <MAIN_ULTRASONIC_Init+0x3c>)
 8001b2a:	f003 ff21 	bl	8005970 <ULTRASONIC_Init>

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20005e88 	.word	0x20005e88
 8001b38:	20006f34 	.word	0x20006f34
 8001b3c:	40020000 	.word	0x40020000
 8001b40:	40020400 	.word	0x40020400

08001b44 <MAIN_MAF_Init>:


// Moving Average Filter initialization --------------------------------------------- //
static void MAIN_MAF_Init(void){
 8001b44:	b5b0      	push	{r4, r5, r7, lr}
 8001b46:	b08c      	sub	sp, #48	; 0x30
 8001b48:	af00      	add	r7, sp, #0

	int filtr_a_size=  15; // 15;
 8001b4a:	230f      	movs	r3, #15
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int filtr_th_size= 7; // 7;
 8001b4e:	2307      	movs	r3, #7
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28

	int filtr_a_size_2=  12;//50;
 8001b52:	230c      	movs	r3, #12
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
	int filtr_th_size_2= 12;//50;
 8001b56:	230c      	movs	r3, #12
 8001b58:	623b      	str	r3, [r7, #32]

	int filtr_infrared_size= 100;
 8001b5a:	2364      	movs	r3, #100	; 0x64
 8001b5c:	61fb      	str	r3, [r7, #28]

	// Null pointer to use a MAF without weights
	void* weights_buff= NULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]

	// Creating filters
	hfilter_a		 = MAF_Create(filtr_a_size, 	   weights_buff);
 8001b62:	4c27      	ldr	r4, [pc, #156]	; (8001c00 <MAIN_MAF_Init+0xbc>)
 8001b64:	463b      	mov	r3, r7
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 f96c 	bl	8004e48 <MAF_Create>
 8001b70:	4625      	mov	r5, r4
 8001b72:	463c      	mov	r4, r7
 8001b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b7c:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_th		 = MAF_Create(filtr_th_size, 	   weights_buff);
 8001b80:	4c20      	ldr	r4, [pc, #128]	; (8001c04 <MAIN_MAF_Init+0xc0>)
 8001b82:	463b      	mov	r3, r7
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 f95d 	bl	8004e48 <MAF_Create>
 8001b8e:	4625      	mov	r5, r4
 8001b90:	463c      	mov	r4, r7
 8001b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b9a:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_a_2		 = MAF_Create(filtr_a_size_2,	   weights_buff);
 8001b9e:	4c1a      	ldr	r4, [pc, #104]	; (8001c08 <MAIN_MAF_Init+0xc4>)
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 f94e 	bl	8004e48 <MAF_Create>
 8001bac:	4625      	mov	r5, r4
 8001bae:	463c      	mov	r4, r7
 8001bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bb8:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_th_2     = MAF_Create(filtr_th_size_2,     weights_buff);
 8001bbc:	4c13      	ldr	r4, [pc, #76]	; (8001c0c <MAIN_MAF_Init+0xc8>)
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	6a39      	ldr	r1, [r7, #32]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 f93f 	bl	8004e48 <MAF_Create>
 8001bca:	4625      	mov	r5, r4
 8001bcc:	463c      	mov	r4, r7
 8001bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bd6:	e885 0003 	stmia.w	r5, {r0, r1}
	hfilter_infrared = MAF_Create(filtr_infrared_size, weights_buff);
 8001bda:	4c0d      	ldr	r4, [pc, #52]	; (8001c10 <MAIN_MAF_Init+0xcc>)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	69f9      	ldr	r1, [r7, #28]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 f930 	bl	8004e48 <MAF_Create>
 8001be8:	4625      	mov	r5, r4
 8001bea:	463c      	mov	r4, r7
 8001bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bf0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bf4:	e885 0003 	stmia.w	r5, {r0, r1}

}
 8001bf8:	bf00      	nop
 8001bfa:	3730      	adds	r7, #48	; 0x30
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8001c00:	200072dc 	.word	0x200072dc
 8001c04:	20005d9c 	.word	0x20005d9c
 8001c08:	20005ec8 	.word	0x20005ec8
 8001c0c:	20005e70 	.word	0x20005e70
 8001c10:	20004b34 	.word	0x20004b34

08001c14 <MAIN_SERVO_Init>:


static void MAIN_SERVO_Init(void){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0

	hservo.Init.htim=        &htim8;
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <MAIN_SERVO_Init+0x1c>)
 8001c1a:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <MAIN_SERVO_Init+0x20>)
 8001c1c:	601a      	str	r2, [r3, #0]
	hservo.Init.pwm_channel= TIM_CHANNEL_1;
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <MAIN_SERVO_Init+0x1c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]

	SERVO_Init(&hservo);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <MAIN_SERVO_Init+0x1c>)
 8001c26:	f003 fd2b 	bl	8005680 <SERVO_Init>

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20005c14 	.word	0x20005c14
 8001c34:	20004b4c 	.word	0x20004b4c

08001c38 <StartControlDiffDrive>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartControlDiffDrive */
void StartControlDiffDrive(void *argument)
{
 8001c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c3c:	b0e0      	sub	sp, #384	; 0x180
 8001c3e:	af1e      	add	r7, sp, #120	; 0x78
 8001c40:	6678      	str	r0, [r7, #100]	; 0x64

	__HAL_TIM_SET_COUNTER(&htim7,0);

#endif

	bool first= true;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	float tmp_P= hdiffdrive.control[left].pid.P;
 8001c48:	4bc5      	ldr	r3, [pc, #788]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001c4a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	float tmp_I= hdiffdrive.control[left].pid.I;
 8001c52:	4bc3      	ldr	r3, [pc, #780]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001c54:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8001c58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	float delta_a_loc, delta_th_loc;

	// Tracking error threshold
	float e_thr= 35*3e-2;
 8001c5c:	4bc1      	ldr	r3, [pc, #772]	; (8001f64 <StartControlDiffDrive+0x32c>)
 8001c5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	// Start control
	DIFFDRIVE_TrackingStart();
 8001c62:	f003 f88d 	bl	8004d80 <DIFFDRIVE_TrackingStart>
#ifdef TEST_TIMING
	  __HAL_TIM_SET_COUNTER(&htim7,0);
#endif

	  // Tracking error flag enabled
	  if( tracking_error_flag ){
 8001c66:	4bc0      	ldr	r3, [pc, #768]	; (8001f68 <StartControlDiffDrive+0x330>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 8197 	beq.w	8001fa0 <StartControlDiffDrive+0x368>

		  // DO SOMETHING AT EXCEPTION END
		  if( !first ){
 8001c72:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001c76:	f083 0301 	eor.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d02f      	beq.n	8001ce0 <StartControlDiffDrive+0xa8>
			  DIFFDRIVE_MOTOR_Stop();
 8001c80:	f001 ff52 	bl	8003b28 <DIFFDRIVE_MOTOR_Stop>
			  osThreadSuspend(DistanceSensorHandle);
 8001c84:	4bb9      	ldr	r3, [pc, #740]	; (8001f6c <StartControlDiffDrive+0x334>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f008 fd01 	bl	800a690 <osThreadSuspend>
			  osDelay(400);
 8001c8e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001c92:	f008 fd3f 	bl	800a714 <osDelay>
			  osThreadResume(DistanceSensorHandle);
 8001c96:	4bb5      	ldr	r3, [pc, #724]	; (8001f6c <StartControlDiffDrive+0x334>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f008 fd19 	bl	800a6d2 <osThreadResume>

			  DIFFDRIVE_CONTROL_Reset();
 8001ca0:	f002 fdbe 	bl	8004820 <DIFFDRIVE_CONTROL_Reset>

			  //MAF_Reset(&hfilter_a, 0);
			  //MAF_Reset(&hfilter_th, 0);
			  MAF_Reset(&hfilter_a_2, 0);
 8001ca4:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8001f70 <StartControlDiffDrive+0x338>
 8001ca8:	48b2      	ldr	r0, [pc, #712]	; (8001f74 <StartControlDiffDrive+0x33c>)
 8001caa:	f003 f8f4 	bl	8004e96 <MAF_Reset>
			  MAF_Reset(&hfilter_th_2, 0);
 8001cae:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8001f70 <StartControlDiffDrive+0x338>
 8001cb2:	48b1      	ldr	r0, [pc, #708]	; (8001f78 <StartControlDiffDrive+0x340>)
 8001cb4:	f003 f8ef 	bl	8004e96 <MAF_Reset>
			  //MAF_Reset(&hfilter_infrared, 0);

			  hdiffdrive.control[left ].pid.P= tmp_P;
 8001cb8:	4aa9      	ldr	r2, [pc, #676]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001cba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001cbe:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
			  hdiffdrive.control[right].pid.P= tmp_P;
 8001cc2:	4aa7      	ldr	r2, [pc, #668]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001cc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001cc8:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
			  hdiffdrive.control[left ].pid.I= tmp_I;
 8001ccc:	4aa4      	ldr	r2, [pc, #656]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cd2:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
			  hdiffdrive.control[right].pid.I= tmp_I;
 8001cd6:	4aa2      	ldr	r2, [pc, #648]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cdc:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
		  }

		  // Then set first = true
		  first= true;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		  MAF_Update(&hfilter_a_2, delta_a);
 8001ce6:	4ba5      	ldr	r3, [pc, #660]	; (8001f7c <StartControlDiffDrive+0x344>)
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf0:	48a0      	ldr	r0, [pc, #640]	; (8001f74 <StartControlDiffDrive+0x33c>)
 8001cf2:	f003 f8f8 	bl	8004ee6 <MAF_Update>
		  delta_a_loc= __MAF_GET_VAL(&hfilter_a_2);
 8001cf6:	4b9f      	ldr	r3, [pc, #636]	; (8001f74 <StartControlDiffDrive+0x33c>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

		  MAF_Update(&hfilter_th_2, delta_th);
 8001cfe:	4ba0      	ldr	r3, [pc, #640]	; (8001f80 <StartControlDiffDrive+0x348>)
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	eeb0 0a67 	vmov.f32	s0, s15
 8001d08:	489b      	ldr	r0, [pc, #620]	; (8001f78 <StartControlDiffDrive+0x340>)
 8001d0a:	f003 f8ec 	bl	8004ee6 <MAF_Update>
		  delta_th_loc= __MAF_GET_VAL(&hfilter_th_2);
 8001d0e:	4b9a      	ldr	r3, [pc, #616]	; (8001f78 <StartControlDiffDrive+0x340>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

		  // Manage exception when the robot is stuck somehow and cannot keep following the target
		  if( hdiffdrive.control[left].pid.e_prev  >  e_thr || hdiffdrive.control[right].pid.e_prev >  e_thr ||
 8001d16:	4b92      	ldr	r3, [pc, #584]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001d18:	edd3 7a62 	vldr	s15, [r3, #392]	; 0x188
 8001d1c:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001d20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d28:	d422      	bmi.n	8001d70 <StartControlDiffDrive+0x138>
 8001d2a:	4b8d      	ldr	r3, [pc, #564]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001d2c:	edd3 7a7c 	vldr	s15, [r3, #496]	; 0x1f0
 8001d30:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001d34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3c:	d418      	bmi.n	8001d70 <StartControlDiffDrive+0x138>
			  hdiffdrive.control[left].pid.e_prev  < -e_thr || hdiffdrive.control[right].pid.e_prev < -e_thr    ){
 8001d3e:	4b88      	ldr	r3, [pc, #544]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001d40:	ed93 7a62 	vldr	s14, [r3, #392]	; 0x188
 8001d44:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001d48:	eef1 7a67 	vneg.f32	s15, s15
		  if( hdiffdrive.control[left].pid.e_prev  >  e_thr || hdiffdrive.control[right].pid.e_prev >  e_thr ||
 8001d4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d54:	d40c      	bmi.n	8001d70 <StartControlDiffDrive+0x138>
			  hdiffdrive.control[left].pid.e_prev  < -e_thr || hdiffdrive.control[right].pid.e_prev < -e_thr    ){
 8001d56:	4b82      	ldr	r3, [pc, #520]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001d58:	ed93 7a7c 	vldr	s14, [r3, #496]	; 0x1f0
 8001d5c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001d60:	eef1 7a67 	vneg.f32	s15, s15
 8001d64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6c:	f140 8183 	bpl.w	8002076 <StartControlDiffDrive+0x43e>

			  // Stop other thread
			//  osThreadSuspend(DistanceSensorHandle);

			  /* Move in back direction */
			  float delta_a_tmp=  -delta_a;
 8001d70:	4b82      	ldr	r3, [pc, #520]	; (8001f7c <StartControlDiffDrive+0x344>)
 8001d72:	edd3 7a00 	vldr	s15, [r3]
 8001d76:	eef1 7a67 	vneg.f32	s15, s15
 8001d7a:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
			  float delta_th_tmp= -delta_th;
 8001d7e:	4b80      	ldr	r3, [pc, #512]	; (8001f80 <StartControlDiffDrive+0x348>)
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	eef1 7a67 	vneg.f32	s15, s15
 8001d88:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8

			  hdiffdrive.control[left ].pid.P= tmp_P*0.1;
 8001d8c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001d90:	f7fe fbfa 	bl	8000588 <__aeabi_f2d>
 8001d94:	a370      	add	r3, pc, #448	; (adr r3, 8001f58 <StartControlDiffDrive+0x320>)
 8001d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9a:	f7fe fc4d 	bl	8000638 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f7fe ff3f 	bl	8000c28 <__aeabi_d2f>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4a6c      	ldr	r2, [pc, #432]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001dae:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
			  hdiffdrive.control[right].pid.P= tmp_P*0.1;
 8001db2:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001db6:	f7fe fbe7 	bl	8000588 <__aeabi_f2d>
 8001dba:	a367      	add	r3, pc, #412	; (adr r3, 8001f58 <StartControlDiffDrive+0x320>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fc3a 	bl	8000638 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f7fe ff2c 	bl	8000c28 <__aeabi_d2f>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4a63      	ldr	r2, [pc, #396]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001dd4:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
			  hdiffdrive.control[left ].pid.I= tmp_I*0.1;
 8001dd8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8001ddc:	f7fe fbd4 	bl	8000588 <__aeabi_f2d>
 8001de0:	a35d      	add	r3, pc, #372	; (adr r3, 8001f58 <StartControlDiffDrive+0x320>)
 8001de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de6:	f7fe fc27 	bl	8000638 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	f7fe ff19 	bl	8000c28 <__aeabi_d2f>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4a59      	ldr	r2, [pc, #356]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001dfa:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
			  hdiffdrive.control[right].pid.I= tmp_I*0.1;
 8001dfe:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8001e02:	f7fe fbc1 	bl	8000588 <__aeabi_f2d>
 8001e06:	a354      	add	r3, pc, #336	; (adr r3, 8001f58 <StartControlDiffDrive+0x320>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fc14 	bl	8000638 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f7fe ff06 	bl	8000c28 <__aeabi_d2f>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4a50      	ldr	r2, [pc, #320]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001e20:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8

			  for(int j=0; j<100; j++){
 8001e24:	2300      	movs	r3, #0
 8001e26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001e2a:	e04d      	b.n	8001ec8 <StartControlDiffDrive+0x290>

				  delta_th_tmp= delta_th;
 8001e2c:	4b54      	ldr	r3, [pc, #336]	; (8001f80 <StartControlDiffDrive+0x348>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

				  // Keep use filters to smooth trajectory
				  MAF_Update(&hfilter_a_2,  delta_a_tmp);
 8001e34:	ed97 0a37 	vldr	s0, [r7, #220]	; 0xdc
 8001e38:	484e      	ldr	r0, [pc, #312]	; (8001f74 <StartControlDiffDrive+0x33c>)
 8001e3a:	f003 f854 	bl	8004ee6 <MAF_Update>
				  MAF_Update(&hfilter_th_2, delta_th_tmp);
 8001e3e:	ed97 0a36 	vldr	s0, [r7, #216]	; 0xd8
 8001e42:	484d      	ldr	r0, [pc, #308]	; (8001f78 <StartControlDiffDrive+0x340>)
 8001e44:	f003 f84f 	bl	8004ee6 <MAF_Update>

				  delta_a_loc=  __MAF_GET_VAL(&hfilter_a_2);
 8001e48:	4b4a      	ldr	r3, [pc, #296]	; (8001f74 <StartControlDiffDrive+0x33c>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
				  delta_th_loc= __MAF_GET_VAL(&hfilter_th_2);
 8001e50:	4b49      	ldr	r3, [pc, #292]	; (8001f78 <StartControlDiffDrive+0x340>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

				  if( k_ < 1000 ){
 8001e58:	4b4a      	ldr	r3, [pc, #296]	; (8001f84 <StartControlDiffDrive+0x34c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e60:	da14      	bge.n	8001e8c <StartControlDiffDrive+0x254>
					  delta_a_hist[k_]=  delta_a_tmp;
 8001e62:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <StartControlDiffDrive+0x34c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a48      	ldr	r2, [pc, #288]	; (8001f88 <StartControlDiffDrive+0x350>)
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001e70:	601a      	str	r2, [r3, #0]
				  	  delta_th_hist[k_]= delta_th_tmp;
 8001e72:	4b44      	ldr	r3, [pc, #272]	; (8001f84 <StartControlDiffDrive+0x34c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a45      	ldr	r2, [pc, #276]	; (8001f8c <StartControlDiffDrive+0x354>)
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001e80:	601a      	str	r2, [r3, #0]
				  	  k_++;
 8001e82:	4b40      	ldr	r3, [pc, #256]	; (8001f84 <StartControlDiffDrive+0x34c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3301      	adds	r3, #1
 8001e88:	4a3e      	ldr	r2, [pc, #248]	; (8001f84 <StartControlDiffDrive+0x34c>)
 8001e8a:	6013      	str	r3, [r2, #0]
				  }

				  // Make Tracking step
				  DIFFDRIVE_TrackingStep(delta_a_loc, delta_th_loc);
 8001e8c:	edd7 0a3f 	vldr	s1, [r7, #252]	; 0xfc
 8001e90:	ed97 0a40 	vldr	s0, [r7, #256]	; 0x100
 8001e94:	f002 ff88 	bl	8004da8 <DIFFDRIVE_TrackingStep>

				  if( !(j%10) )
 8001e98:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001e9c:	4b3c      	ldr	r3, [pc, #240]	; (8001f90 <StartControlDiffDrive+0x358>)
 8001e9e:	fb83 2301 	smull	r2, r3, r3, r1
 8001ea2:	109a      	asrs	r2, r3, #2
 8001ea4:	17cb      	asrs	r3, r1, #31
 8001ea6:	1ad2      	subs	r2, r2, r3
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	1aca      	subs	r2, r1, r3
 8001eb2:	2a00      	cmp	r2, #0
 8001eb4:	d103      	bne.n	8001ebe <StartControlDiffDrive+0x286>
					  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001eb6:	2120      	movs	r1, #32
 8001eb8:	4836      	ldr	r0, [pc, #216]	; (8001f94 <StartControlDiffDrive+0x35c>)
 8001eba:	f004 fbde 	bl	800667a <HAL_GPIO_TogglePin>
			  for(int j=0; j<100; j++){
 8001ebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001ec8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ecc:	2b63      	cmp	r3, #99	; 0x63
 8001ece:	ddad      	ble.n	8001e2c <StartControlDiffDrive+0x1f4>

			  }

			  osThreadSuspend(DistanceSensorHandle);
 8001ed0:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <StartControlDiffDrive+0x334>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f008 fbdb 	bl	800a690 <osThreadSuspend>
			  // Then stop motors and reset
			  DIFFDRIVE_MOTOR_Stop();
 8001eda:	f001 fe25 	bl	8003b28 <DIFFDRIVE_MOTOR_Stop>

			  hdiffdrive.control[left ].pid.P= tmp_P;
 8001ede:	4a20      	ldr	r2, [pc, #128]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001ee0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001ee4:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
			  hdiffdrive.control[right].pid.P= tmp_P;
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001eea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001eee:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
			  hdiffdrive.control[left ].pid.I= tmp_I;
 8001ef2:	4a1b      	ldr	r2, [pc, #108]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ef8:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
			  hdiffdrive.control[right].pid.I= tmp_I;
 8001efc:	4a18      	ldr	r2, [pc, #96]	; (8001f60 <StartControlDiffDrive+0x328>)
 8001efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f02:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8

			  osDelay(460);
 8001f06:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8001f0a:	f008 fc03 	bl	800a714 <osDelay>

			  MAF_Reset(&hfilter_a, 0);
 8001f0e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001f70 <StartControlDiffDrive+0x338>
 8001f12:	4821      	ldr	r0, [pc, #132]	; (8001f98 <StartControlDiffDrive+0x360>)
 8001f14:	f002 ffbf 	bl	8004e96 <MAF_Reset>
			  MAF_Reset(&hfilter_th, 0);
 8001f18:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001f70 <StartControlDiffDrive+0x338>
 8001f1c:	481f      	ldr	r0, [pc, #124]	; (8001f9c <StartControlDiffDrive+0x364>)
 8001f1e:	f002 ffba 	bl	8004e96 <MAF_Reset>
			  MAF_Reset(&hfilter_a_2, 0);
 8001f22:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8001f70 <StartControlDiffDrive+0x338>
 8001f26:	4813      	ldr	r0, [pc, #76]	; (8001f74 <StartControlDiffDrive+0x33c>)
 8001f28:	f002 ffb5 	bl	8004e96 <MAF_Reset>
			  MAF_Reset(&hfilter_th_2, 0);
 8001f2c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001f70 <StartControlDiffDrive+0x338>
 8001f30:	4811      	ldr	r0, [pc, #68]	; (8001f78 <StartControlDiffDrive+0x340>)
 8001f32:	f002 ffb0 	bl	8004e96 <MAF_Reset>

			  delta_a_loc= 0;
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			  delta_th_loc= 0;
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

			  // Reset Control
			  DIFFDRIVE_CONTROL_Reset();
 8001f46:	f002 fc6b 	bl	8004820 <DIFFDRIVE_CONTROL_Reset>

			  // Restart other thread
			  osThreadResume(DistanceSensorHandle);
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <StartControlDiffDrive+0x334>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f008 fbbf 	bl	800a6d2 <osThreadResume>
 8001f54:	e08f      	b.n	8002076 <StartControlDiffDrive+0x43e>
 8001f56:	bf00      	nop
 8001f58:	9999999a 	.word	0x9999999a
 8001f5c:	3fb99999 	.word	0x3fb99999
 8001f60:	20006fe8 	.word	0x20006fe8
 8001f64:	3f866666 	.word	0x3f866666
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20005c30 	.word	0x20005c30
 8001f70:	00000000 	.word	0x00000000
 8001f74:	20005ec8 	.word	0x20005ec8
 8001f78:	20005e70 	.word	0x20005e70
 8001f7c:	20000208 	.word	0x20000208
 8001f80:	2000020c 	.word	0x2000020c
 8001f84:	20000210 	.word	0x20000210
 8001f88:	20004c00 	.word	0x20004c00
 8001f8c:	20005f94 	.word	0x20005f94
 8001f90:	66666667 	.word	0x66666667
 8001f94:	40020000 	.word	0x40020000
 8001f98:	200072dc 	.word	0x200072dc
 8001f9c:	20005d9c 	.word	0x20005d9c
		  }
	  }
	  // Tracking error flag disabled, when robot is really near an obstacle
	  else{
		  // DO SOMETHING AT EXCEPTION START
		  if(first){
 8001fa0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d04b      	beq.n	8002040 <StartControlDiffDrive+0x408>

			  hdiffdrive.control[left ].pid.P= tmp_P*0.1;
 8001fa8:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001fac:	f7fe faec 	bl	8000588 <__aeabi_f2d>
 8001fb0:	a37d      	add	r3, pc, #500	; (adr r3, 80021a8 <StartControlDiffDrive+0x570>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	f7fe fb3f 	bl	8000638 <__aeabi_dmul>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7fe fe31 	bl	8000c28 <__aeabi_d2f>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4a79      	ldr	r2, [pc, #484]	; (80021b0 <StartControlDiffDrive+0x578>)
 8001fca:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
			  hdiffdrive.control[right].pid.P= tmp_P*0.1;
 8001fce:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001fd2:	f7fe fad9 	bl	8000588 <__aeabi_f2d>
 8001fd6:	a374      	add	r3, pc, #464	; (adr r3, 80021a8 <StartControlDiffDrive+0x570>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	f7fe fb2c 	bl	8000638 <__aeabi_dmul>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fe1e 	bl	8000c28 <__aeabi_d2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a70      	ldr	r2, [pc, #448]	; (80021b0 <StartControlDiffDrive+0x578>)
 8001ff0:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
			  hdiffdrive.control[left ].pid.I= tmp_I*0.1;
 8001ff4:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8001ff8:	f7fe fac6 	bl	8000588 <__aeabi_f2d>
 8001ffc:	a36a      	add	r3, pc, #424	; (adr r3, 80021a8 <StartControlDiffDrive+0x570>)
 8001ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002002:	f7fe fb19 	bl	8000638 <__aeabi_dmul>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	f7fe fe0b 	bl	8000c28 <__aeabi_d2f>
 8002012:	4603      	mov	r3, r0
 8002014:	4a66      	ldr	r2, [pc, #408]	; (80021b0 <StartControlDiffDrive+0x578>)
 8002016:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
			  hdiffdrive.control[right].pid.I= tmp_I*0.1;
 800201a:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800201e:	f7fe fab3 	bl	8000588 <__aeabi_f2d>
 8002022:	a361      	add	r3, pc, #388	; (adr r3, 80021a8 <StartControlDiffDrive+0x570>)
 8002024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002028:	f7fe fb06 	bl	8000638 <__aeabi_dmul>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fdf8 	bl	8000c28 <__aeabi_d2f>
 8002038:	4603      	mov	r3, r0
 800203a:	4a5d      	ldr	r2, [pc, #372]	; (80021b0 <StartControlDiffDrive+0x578>)
 800203c:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
		  }

		  // Then set first = false
		  first= false;
 8002040:	2300      	movs	r3, #0
 8002042:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		  MAF_Update(&hfilter_a_2,  delta_a);
 8002046:	4b5b      	ldr	r3, [pc, #364]	; (80021b4 <StartControlDiffDrive+0x57c>)
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	eeb0 0a67 	vmov.f32	s0, s15
 8002050:	4859      	ldr	r0, [pc, #356]	; (80021b8 <StartControlDiffDrive+0x580>)
 8002052:	f002 ff48 	bl	8004ee6 <MAF_Update>
		  MAF_Update(&hfilter_th_2, delta_th);
 8002056:	4b59      	ldr	r3, [pc, #356]	; (80021bc <StartControlDiffDrive+0x584>)
 8002058:	edd3 7a00 	vldr	s15, [r3]
 800205c:	eeb0 0a67 	vmov.f32	s0, s15
 8002060:	4857      	ldr	r0, [pc, #348]	; (80021c0 <StartControlDiffDrive+0x588>)
 8002062:	f002 ff40 	bl	8004ee6 <MAF_Update>

		  delta_a_loc=  __MAF_GET_VAL(&hfilter_a_2);
 8002066:	4b54      	ldr	r3, [pc, #336]	; (80021b8 <StartControlDiffDrive+0x580>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		  delta_th_loc= __MAF_GET_VAL(&hfilter_th_2);
 800206e:	4b54      	ldr	r3, [pc, #336]	; (80021c0 <StartControlDiffDrive+0x588>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  }


	  delta_a_hist [k_%1000]= delta_a;
 8002076:	4b53      	ldr	r3, [pc, #332]	; (80021c4 <StartControlDiffDrive+0x58c>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <StartControlDiffDrive+0x590>)
 800207c:	fb83 1302 	smull	r1, r3, r3, r2
 8002080:	1199      	asrs	r1, r3, #6
 8002082:	17d3      	asrs	r3, r2, #31
 8002084:	1acb      	subs	r3, r1, r3
 8002086:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	4a48      	ldr	r2, [pc, #288]	; (80021b4 <StartControlDiffDrive+0x57c>)
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	494d      	ldr	r1, [pc, #308]	; (80021cc <StartControlDiffDrive+0x594>)
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	601a      	str	r2, [r3, #0]
	  delta_th_hist[k_%1000]= delta_th;
 800209c:	4b49      	ldr	r3, [pc, #292]	; (80021c4 <StartControlDiffDrive+0x58c>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <StartControlDiffDrive+0x590>)
 80020a2:	fb83 1302 	smull	r1, r3, r3, r2
 80020a6:	1199      	asrs	r1, r3, #6
 80020a8:	17d3      	asrs	r3, r2, #31
 80020aa:	1acb      	subs	r3, r1, r3
 80020ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020b0:	fb01 f303 	mul.w	r3, r1, r3
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	4a41      	ldr	r2, [pc, #260]	; (80021bc <StartControlDiffDrive+0x584>)
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	4945      	ldr	r1, [pc, #276]	; (80021d0 <StartControlDiffDrive+0x598>)
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	601a      	str	r2, [r3, #0]
	  k_++;
 80020c2:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <StartControlDiffDrive+0x58c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	4a3e      	ldr	r2, [pc, #248]	; (80021c4 <StartControlDiffDrive+0x58c>)
 80020ca:	6013      	str	r3, [r2, #0]

	  // Make normal step of trajectory tracking
	  DIFFDRIVE_TrackingStep(delta_a_loc, delta_th_loc);
 80020cc:	edd7 0a3f 	vldr	s1, [r7, #252]	; 0xfc
 80020d0:	ed97 0a40 	vldr	s0, [r7, #256]	; 0x100
 80020d4:	f002 fe68 	bl	8004da8 <DIFFDRIVE_TrackingStep>
	  if( i<20 )
		  tmp_var[i++]= __HAL_TIM_GET_COUNTER(&htim7);
#endif

	  // If blue button is pressed
	  if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 80020d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020dc:	483d      	ldr	r0, [pc, #244]	; (80021d4 <StartControlDiffDrive+0x59c>)
 80020de:	f004 fa9b 	bl	8006618 <HAL_GPIO_ReadPin>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f47f adbe 	bne.w	8001c66 <StartControlDiffDrive+0x2e>

		  // Stop other thread while sending values
		  osThreadSuspend(DistanceSensorHandle);
 80020ea:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <StartControlDiffDrive+0x5a0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f008 face 	bl	800a690 <osThreadSuspend>

		  DIFFDRIVE_HISTORY_TypeDef tmphist= hdiffdrive.history;
 80020f4:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <StartControlDiffDrive+0x578>)
 80020f6:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 80020fa:	f503 750a 	add.w	r5, r3, #552	; 0x228
 80020fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002102:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002106:	e884 0003 	stmia.w	r4, {r0, r1}

		  // Stop control
		  DIFFDRIVE_TrackingStop();
 800210a:	f002 fe47 	bl	8004d9c <DIFFDRIVE_TrackingStop>

		  // Repeat forever
		  for(;;){
			  // Enable WIFI to send/receive values
			  HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_SET);
 800210e:	2201      	movs	r2, #1
 8002110:	2101      	movs	r1, #1
 8002112:	4830      	ldr	r0, [pc, #192]	; (80021d4 <StartControlDiffDrive+0x59c>)
 8002114:	f004 fa98 	bl	8006648 <HAL_GPIO_WritePin>

			  // Wait for ESP boot
			  HAL_Delay(3000);
 8002118:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800211c:	f003 feca 	bl	8005eb4 <HAL_Delay>

			  // Rapidly flash led to show MCU ready to send values
			  for(int i=0; i<20; i++){
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002126:	e00b      	b.n	8002140 <StartControlDiffDrive+0x508>
				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002128:	2120      	movs	r1, #32
 800212a:	482c      	ldr	r0, [pc, #176]	; (80021dc <StartControlDiffDrive+0x5a4>)
 800212c:	f004 faa5 	bl	800667a <HAL_GPIO_TogglePin>
				  HAL_Delay(50);
 8002130:	2032      	movs	r0, #50	; 0x32
 8002132:	f003 febf 	bl	8005eb4 <HAL_Delay>
			  for(int i=0; i<20; i++){
 8002136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800213a:	3301      	adds	r3, #1
 800213c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002144:	2b13      	cmp	r3, #19
 8002146:	ddef      	ble.n	8002128 <StartControlDiffDrive+0x4f0>
			  }

			  // Wait for 10 received chars
			  char ch[10];
			  HAL_UART_Receive(&huart3, (uint8_t*) ch, sizeof(ch), HAL_MAX_DELAY);
 8002148:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800214c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002150:	220a      	movs	r2, #10
 8002152:	4823      	ldr	r0, [pc, #140]	; (80021e0 <StartControlDiffDrive+0x5a8>)
 8002154:	f007 f892 	bl	800927c <HAL_UART_Receive>
			  // Wait until button is pressed again
			  //while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) )
			  //		;

			  // Wait a bit
			  osDelay(2000);
 8002158:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800215c:	f008 fada 	bl	800a714 <osDelay>

			  // Number of saved samples
			  uint32_t N_sample;
			  if( tmphist.sample_cnt < tmphist.max_sample )
 8002160:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002164:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002168:	429a      	cmp	r2, r3
 800216a:	d204      	bcs.n	8002176 <StartControlDiffDrive+0x53e>
				  N_sample=  tmphist.sample_cnt;
 800216c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002170:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002174:	e003      	b.n	800217e <StartControlDiffDrive+0x546>
			  else
				  N_sample=  tmphist.max_sample;
 8002176:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800217a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

			  // First values send is the actual number of samples
			  DATASTREAM_RTOS_SendValue(stream_on_matlab, 1, (double)N_sample);
 800217e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8002182:	f7fe f9df 	bl	8000544 <__aeabi_ui2d>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	2101      	movs	r1, #1
 800218c:	2000      	movs	r0, #0
 800218e:	f000 ff19 	bl	8002fc4 <DATASTREAM_RTOS_SendValue>
			  // Bit of transfer delay
			  osDelay(8);
 8002192:	2008      	movs	r0, #8
 8002194:	f008 fabe 	bl	800a714 <osDelay>

			  // Init History Get function
			  DIFFDRIVE_HISTORY_Get_Init();
 8002198:	f002 faba 	bl	8004710 <DIFFDRIVE_HISTORY_Get_Init>

			  for(int k= 0; k < N_sample; k++){
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80021a2:	e0ee      	b.n	8002382 <StartControlDiffDrive+0x74a>
 80021a4:	f3af 8000 	nop.w
 80021a8:	9999999a 	.word	0x9999999a
 80021ac:	3fb99999 	.word	0x3fb99999
 80021b0:	20006fe8 	.word	0x20006fe8
 80021b4:	20000208 	.word	0x20000208
 80021b8:	20005ec8 	.word	0x20005ec8
 80021bc:	2000020c 	.word	0x2000020c
 80021c0:	20005e70 	.word	0x20005e70
 80021c4:	20000210 	.word	0x20000210
 80021c8:	10624dd3 	.word	0x10624dd3
 80021cc:	20004c00 	.word	0x20004c00
 80021d0:	20005f94 	.word	0x20005f94
 80021d4:	40020800 	.word	0x40020800
 80021d8:	20005c30 	.word	0x20005c30
 80021dc:	40020000 	.word	0x40020000
 80021e0:	20005ba0 	.word	0x20005ba0
				  // Temporary variables
				  DIFFDRIVE_STATE_TypeDef state_measure, state_target;

				  // Get one state sample from history
				  DIFFDRIVE_HISTORY_Get_Sample(&state_measure, &state_target);
 80021e4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80021e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f002 fab6 	bl	8004760 <DIFFDRIVE_HISTORY_Get_Sample>

				  // Send values to serial connected to ESP WiFi module
				  DATASTREAM_RTOS_SendValue(
						  stream_on_matlab, 16,
						  state_measure.input[left], state_measure.input[right],
 80021f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
				  DATASTREAM_RTOS_SendValue(
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f9c5 	bl	8000588 <__aeabi_f2d>
 80021fe:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
						  state_measure.input[left], state_measure.input[right],
 8002202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
				  DATASTREAM_RTOS_SendValue(
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe f9be 	bl	8000588 <__aeabi_f2d>
 800220c:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
						  state_target .input[left], state_target .input[right],
 8002210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
				  DATASTREAM_RTOS_SendValue(
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe f9b7 	bl	8000588 <__aeabi_f2d>
 800221a:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
						  state_target .input[left], state_target .input[right],
 800221e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
				  DATASTREAM_RTOS_SendValue(
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe f9b0 	bl	8000588 <__aeabi_f2d>
 8002228:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
						  state_measure.wheel[left], state_measure.wheel[right],
 800222c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
				  DATASTREAM_RTOS_SendValue(
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f9aa 	bl	8000588 <__aeabi_f2d>
 8002234:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
						  state_measure.wheel[left], state_measure.wheel[right],
 8002238:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
				  DATASTREAM_RTOS_SendValue(
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe f9a4 	bl	8000588 <__aeabi_f2d>
 8002240:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
						  state_target .wheel[left], state_target .wheel[right],
 8002244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
				  DATASTREAM_RTOS_SendValue(
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f99d 	bl	8000588 <__aeabi_f2d>
 800224e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						  state_target .wheel[left], state_target .wheel[right],
 8002252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
				  DATASTREAM_RTOS_SendValue(
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe f996 	bl	8000588 <__aeabi_f2d>
 800225c:	e9c7 0108 	strd	r0, r1, [r7, #32]
						  state_measure.pose.x_a,    state_measure.pose.y_a,
 8002260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
				  DATASTREAM_RTOS_SendValue(
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe f990 	bl	8000588 <__aeabi_f2d>
 8002268:	e9c7 0106 	strd	r0, r1, [r7, #24]
						  state_measure.pose.x_a,    state_measure.pose.y_a,
 800226c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
				  DATASTREAM_RTOS_SendValue(
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe f98a 	bl	8000588 <__aeabi_f2d>
 8002274:	e9c7 0104 	strd	r0, r1, [r7, #16]
						  state_measure.pose.theta,
 8002278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
				  DATASTREAM_RTOS_SendValue(
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f984 	bl	8000588 <__aeabi_f2d>
 8002280:	e9c7 0102 	strd	r0, r1, [r7, #8]
						  state_target .pose.x_a,    state_target.pose.y_a,
 8002284:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
				  DATASTREAM_RTOS_SendValue(
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe f97d 	bl	8000588 <__aeabi_f2d>
 800228e:	e9c7 0100 	strd	r0, r1, [r7]
						  state_target .pose.x_a,    state_target.pose.y_a,
 8002292:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
				  DATASTREAM_RTOS_SendValue(
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe f976 	bl	8000588 <__aeabi_f2d>
 800229c:	4682      	mov	sl, r0
 800229e:	468b      	mov	fp, r1
						  state_target .pose.theta,
 80022a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
				  DATASTREAM_RTOS_SendValue(
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe f96f 	bl	8000588 <__aeabi_f2d>
 80022aa:	4680      	mov	r8, r0
 80022ac:	4689      	mov	r9, r1
						  delta_a_hist[k],		     delta_th_hist[k]
 80022ae:	4a42      	ldr	r2, [pc, #264]	; (80023b8 <StartControlDiffDrive+0x780>)
 80022b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	681b      	ldr	r3, [r3, #0]
				  DATASTREAM_RTOS_SendValue(
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe f964 	bl	8000588 <__aeabi_f2d>
 80022c0:	4604      	mov	r4, r0
 80022c2:	460d      	mov	r5, r1
						  delta_a_hist[k],		     delta_th_hist[k]
 80022c4:	4a3d      	ldr	r2, [pc, #244]	; (80023bc <StartControlDiffDrive+0x784>)
 80022c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	681b      	ldr	r3, [r3, #0]
				  DATASTREAM_RTOS_SendValue(
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe f959 	bl	8000588 <__aeabi_f2d>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 80022de:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 80022e2:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
 80022e6:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
 80022ea:	ed97 7b00 	vldr	d7, [r7]
 80022ee:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80022f2:	ed97 7b02 	vldr	d7, [r7, #8]
 80022f6:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80022fa:	ed97 7b04 	vldr	d7, [r7, #16]
 80022fe:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002302:	ed97 7b06 	vldr	d7, [r7, #24]
 8002306:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800230a:	ed97 7b08 	vldr	d7, [r7, #32]
 800230e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002312:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002316:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800231a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800231e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002322:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002326:	ed8d 7b06 	vstr	d7, [sp, #24]
 800232a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800232e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002332:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002336:	ed8d 7b02 	vstr	d7, [sp, #8]
 800233a:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800233e:	ed8d 7b00 	vstr	d7, [sp]
 8002342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002346:	2110      	movs	r1, #16
 8002348:	2000      	movs	r0, #0
 800234a:	f000 fe3b 	bl	8002fc4 <DATASTREAM_RTOS_SendValue>
				  );
				  // Bit of transfer delay
				  osDelay(8);
 800234e:	2008      	movs	r0, #8
 8002350:	f008 f9e0 	bl	800a714 <osDelay>
				  // Toggling led to show data transfer operation
				  if( !(k%50) )
 8002354:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <StartControlDiffDrive+0x788>)
 800235a:	fb83 1302 	smull	r1, r3, r3, r2
 800235e:	1119      	asrs	r1, r3, #4
 8002360:	17d3      	asrs	r3, r2, #31
 8002362:	1acb      	subs	r3, r1, r3
 8002364:	2132      	movs	r1, #50	; 0x32
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d103      	bne.n	8002378 <StartControlDiffDrive+0x740>
					  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002370:	2120      	movs	r1, #32
 8002372:	4814      	ldr	r0, [pc, #80]	; (80023c4 <StartControlDiffDrive+0x78c>)
 8002374:	f004 f981 	bl	800667a <HAL_GPIO_TogglePin>
			  for(int k= 0; k < N_sample; k++){
 8002378:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800237c:	3301      	adds	r3, #1
 800237e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002382:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002386:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800238a:	429a      	cmp	r2, r3
 800238c:	f63f af2a 	bhi.w	80021e4 <StartControlDiffDrive+0x5ac>
			  }

			  // Turn off LED
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002390:	2200      	movs	r2, #0
 8002392:	2120      	movs	r1, #32
 8002394:	480b      	ldr	r0, [pc, #44]	; (80023c4 <StartControlDiffDrive+0x78c>)
 8002396:	f004 f957 	bl	8006648 <HAL_GPIO_WritePin>

			  // Disable WiFi
			  HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 800239a:	2200      	movs	r2, #0
 800239c:	2101      	movs	r1, #1
 800239e:	480a      	ldr	r0, [pc, #40]	; (80023c8 <StartControlDiffDrive+0x790>)
 80023a0:	f004 f952 	bl	8006648 <HAL_GPIO_WritePin>

			  // Wait for blue button pressed again
			  while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) )
 80023a4:	bf00      	nop
 80023a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023aa:	4807      	ldr	r0, [pc, #28]	; (80023c8 <StartControlDiffDrive+0x790>)
 80023ac:	f004 f934 	bl	8006618 <HAL_GPIO_ReadPin>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f7      	bne.n	80023a6 <StartControlDiffDrive+0x76e>
		  for(;;){
 80023b6:	e6aa      	b.n	800210e <StartControlDiffDrive+0x4d6>
 80023b8:	20004c00 	.word	0x20004c00
 80023bc:	20005f94 	.word	0x20005f94
 80023c0:	51eb851f 	.word	0x51eb851f
 80023c4:	40020000 	.word	0x40020000
 80023c8:	40020800 	.word	0x40020800
 80023cc:	00000000 	.word	0x00000000

080023d0 <StartDistanceSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDistanceSensor */
void StartDistanceSensor(void *argument)
{
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b0b2      	sub	sp, #200	; 0xc8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDistanceSensor */

	ULTRASONIC_StatusTypeDef status;

	float deg_eq= 82;
 80023d8:	4bd7      	ldr	r3, [pc, #860]	; (8002738 <StartDistanceSensor+0x368>)
 80023da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float deg_array[30]= {-8,12,22,32,42,52,62,72,82,92,102,112,122,142,152,172,152,142,122,112,102,92,82,72,62,52,42,32,22,12};
 80023de:	4ad7      	ldr	r2, [pc, #860]	; (800273c <StartDistanceSensor+0x36c>)
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	4611      	mov	r1, r2
 80023e6:	2278      	movs	r2, #120	; 0x78
 80023e8:	4618      	mov	r0, r3
 80023ea:	f00a ff49 	bl	800d280 <memcpy>
	int n= sizeof(deg_array)/sizeof(float);
 80023ee:	231e      	movs	r3, #30
 80023f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	float distance;
	float distance_threshold= 15;
 80023f4:	4bd2      	ldr	r3, [pc, #840]	; (8002740 <StartDistanceSensor+0x370>)
 80023f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	float max_distance= ULTRASONIC_MAX_DISTANCE*0.5;
 80023fa:	4bd2      	ldr	r3, [pc, #840]	; (8002744 <StartDistanceSensor+0x374>)
 80023fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	float min_distance= ULTRASONIC_MIN_DISTANCE;
 8002400:	4bd1      	ldr	r3, [pc, #836]	; (8002748 <StartDistanceSensor+0x378>)
 8002402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float delta_th_tmp;
	float delta_th_max; //= 0.025;

	float IR_val;

	int k=0, k2=0;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	(void)k; // Suppress unused variable warning


	float delta_wheel_max[2];
	delta_wheel_max[left ]= hdiffdrive.mech_prmtr.max_wheel_speed*hdiffdrive.timing.time_step;
 8002412:	4bce      	ldr	r3, [pc, #824]	; (800274c <StartDistanceSensor+0x37c>)
 8002414:	ed93 7a89 	vldr	s14, [r3, #548]	; 0x224
 8002418:	4bcc      	ldr	r3, [pc, #816]	; (800274c <StartDistanceSensor+0x37c>)
 800241a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800241e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002422:	edc7 7a03 	vstr	s15, [r7, #12]
	delta_wheel_max[right]= hdiffdrive.mech_prmtr.max_wheel_speed*hdiffdrive.timing.time_step;
 8002426:	4bc9      	ldr	r3, [pc, #804]	; (800274c <StartDistanceSensor+0x37c>)
 8002428:	ed93 7a89 	vldr	s14, [r3, #548]	; 0x224
 800242c:	4bc7      	ldr	r3, [pc, #796]	; (800274c <StartDistanceSensor+0x37c>)
 800242e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002436:	edc7 7a04 	vstr	s15, [r7, #16]

	// Delta_a_max computation
	DIFFDRIVE_DeltaWheel2DeltaTrajectory(&delta_a_max, NULL, delta_wheel_max);
 800243a:	f107 020c 	add.w	r2, r7, #12
 800243e:	f107 0318 	add.w	r3, r7, #24
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f002 fbab 	bl	8004ba0 <DIFFDRIVE_DeltaWheel2DeltaTrajectory>
	delta_a_max *= 0.6; //0.6
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f89b 	bl	8000588 <__aeabi_f2d>
 8002452:	a3ab      	add	r3, pc, #684	; (adr r3, 8002700 <StartDistanceSensor+0x330>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe f8ee 	bl	8000638 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f7fe fbe0 	bl	8000c28 <__aeabi_d2f>
 8002468:	4603      	mov	r3, r0
 800246a:	61bb      	str	r3, [r7, #24]

	// Delta_th_max computation
	delta_wheel_max[left]= -delta_wheel_max[left];
 800246c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002470:	eef1 7a67 	vneg.f32	s15, s15
 8002474:	edc7 7a03 	vstr	s15, [r7, #12]
	DIFFDRIVE_DeltaWheel2DeltaTrajectory(NULL, &delta_th_max, delta_wheel_max);
 8002478:	f107 020c 	add.w	r2, r7, #12
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	4619      	mov	r1, r3
 8002482:	2000      	movs	r0, #0
 8002484:	f002 fb8c 	bl	8004ba0 <DIFFDRIVE_DeltaWheel2DeltaTrajectory>
	delta_th_max *= 0.25;
 8002488:	edd7 7a05 	vldr	s15, [r7, #20]
 800248c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002494:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Infinite loop */
  for(;;)
  {

	  for(int j=0; j<n; j++){
 8002498:	2300      	movs	r3, #0
 800249a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800249e:	e1fb      	b.n	8002898 <StartDistanceSensor+0x4c8>

		  // Setting up sensor direction using a servo
		  SERVO_SetDegree(&hservo, deg_array[j]);
 80024a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80024aa:	4413      	add	r3, r2
 80024ac:	3bac      	subs	r3, #172	; 0xac
 80024ae:	edd3 7a00 	vldr	s15, [r3]
 80024b2:	eeb0 0a67 	vmov.f32	s0, s15
 80024b6:	48a6      	ldr	r0, [pc, #664]	; (8002750 <StartDistanceSensor+0x380>)
 80024b8:	f003 f9ec 	bl	8005894 <SERVO_SetDegree>

		  // Wait a bit for servo settlement and between ultrasonic acquisition
		  osDelay(120);
 80024bc:	2078      	movs	r0, #120	; 0x78
 80024be:	f008 f929 	bl	800a714 <osDelay>


		  /* Capture measured distance */

		  status= ULTRASONIC_CaptureMeasure(&hultra);
 80024c2:	48a4      	ldr	r0, [pc, #656]	; (8002754 <StartDistanceSensor+0x384>)
 80024c4:	f003 fb28 	bl	8005b18 <ULTRASONIC_CaptureMeasure>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

		  // If there is an error set max distance (an error can occur when a sensor timeout
		  // take place, because the ultrasonic signal is lost)
		  if( status == ULTRASONIC_OK )
 80024ce:	f997 309b 	ldrsb.w	r3, [r7, #155]	; 0x9b
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d104      	bne.n	80024e0 <StartDistanceSensor+0x110>
			  distance= __ULTRASONIC_GET_DISTANCE(&hultra);
 80024d6:	4b9f      	ldr	r3, [pc, #636]	; (8002754 <StartDistanceSensor+0x384>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80024de:	e003      	b.n	80024e8 <StartDistanceSensor+0x118>
		  else
			  distance= max_distance;
 80024e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

		  // Sensor fusion with IR Sensor
		  IR_val = __MAF_GET_VAL(&hfilter_infrared);
 80024e8:	4b9b      	ldr	r3, [pc, #620]	; (8002758 <StartDistanceSensor+0x388>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		  distance *= IR_val;
 80024f0:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80024f4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80024f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fc:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4

		  // Set minimum distance
		  if( distance < min_distance)
 8002500:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002504:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800250c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002510:	d503      	bpl.n	800251a <StartDistanceSensor+0x14a>
			  distance = min_distance;
 8002512:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002516:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4


		  /* Using measured distance and servo angular position to generate a trajectory */

		  // Robot linear position variation (direct proportional to distance) and negative below a distance threshold
		  delta_a_tmp= (distance-distance_threshold)*4*1e-5;
 800251a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800251e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002526:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800252a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800252e:	ee17 0a90 	vmov	r0, s15
 8002532:	f7fe f829 	bl	8000588 <__aeabi_f2d>
 8002536:	a374      	add	r3, pc, #464	; (adr r3, 8002708 <StartDistanceSensor+0x338>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f87c 	bl	8000638 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f7fe fb6e 	bl	8000c28 <__aeabi_d2f>
 800254c:	4603      	mov	r3, r0
 800254e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		  if( distance < distance_threshold)
 8002552:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002556:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800255a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	d507      	bpl.n	8002574 <StartDistanceSensor+0x1a4>
			  delta_a_tmp *= 1.5;
 8002564:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002568:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800256c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002570:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0

		  // Robot angular position (yaw) variation (inversely proportional to distance with sign that
		  // depends on servo degree position)
		  if( deg_array[j] > deg_eq )
 8002574:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800257e:	4413      	add	r3, r2
 8002580:	3bac      	subs	r3, #172	; 0xac
 8002582:	edd3 7a00 	vldr	s15, [r3]
 8002586:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800258a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800258e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002592:	d51d      	bpl.n	80025d0 <StartDistanceSensor+0x200>
			  delta_th_tmp= -0.48/distance*0.9;//*1.5;
 8002594:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002598:	f7fd fff6 	bl	8000588 <__aeabi_f2d>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	a15b      	add	r1, pc, #364	; (adr r1, 8002710 <StartDistanceSensor+0x340>)
 80025a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025a6:	f7fe f971 	bl	800088c <__aeabi_ddiv>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4610      	mov	r0, r2
 80025b0:	4619      	mov	r1, r3
 80025b2:	a359      	add	r3, pc, #356	; (adr r3, 8002718 <StartDistanceSensor+0x348>)
 80025b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b8:	f7fe f83e 	bl	8000638 <__aeabi_dmul>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	f7fe fb30 	bl	8000c28 <__aeabi_d2f>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80025ce:	e01c      	b.n	800260a <StartDistanceSensor+0x23a>
		  else
			  delta_th_tmp=  0.48/distance*0.9;//*1.5;
 80025d0:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80025d4:	f7fd ffd8 	bl	8000588 <__aeabi_f2d>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	a150      	add	r1, pc, #320	; (adr r1, 8002720 <StartDistanceSensor+0x350>)
 80025de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025e2:	f7fe f953 	bl	800088c <__aeabi_ddiv>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	a34a      	add	r3, pc, #296	; (adr r3, 8002718 <StartDistanceSensor+0x348>)
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	f7fe f820 	bl	8000638 <__aeabi_dmul>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4610      	mov	r0, r2
 80025fe:	4619      	mov	r1, r3
 8002600:	f7fe fb12 	bl	8000c28 <__aeabi_d2f>
 8002604:	4603      	mov	r3, r0
 8002606:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc


		  // Enroll angular variations
		  if( delta_th_tmp > delta_th_max )
 800260a:	edd7 7a05 	vldr	s15, [r7, #20]
 800260e:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8002612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261a:	dd03      	ble.n	8002624 <StartDistanceSensor+0x254>
			  delta_th_tmp= delta_th_max;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002622:	e010      	b.n	8002646 <StartDistanceSensor+0x276>
		  else
		  if( delta_th_tmp < -delta_th_max )
 8002624:	edd7 7a05 	vldr	s15, [r7, #20]
 8002628:	eef1 7a67 	vneg.f32	s15, s15
 800262c:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8002630:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002638:	d505      	bpl.n	8002646 <StartDistanceSensor+0x276>
			  delta_th_tmp= -delta_th_max;
 800263a:	edd7 7a05 	vldr	s15, [r7, #20]
 800263e:	eef1 7a67 	vneg.f32	s15, s15
 8002642:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc

		  if( delta_th_tmp < 0.01 && delta_th_tmp > -0.01 )
 8002646:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800264a:	f7fd ff9d 	bl	8000588 <__aeabi_f2d>
 800264e:	a336      	add	r3, pc, #216	; (adr r3, 8002728 <StartDistanceSensor+0x358>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f7fe fa62 	bl	8000b1c <__aeabi_dcmplt>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00f      	beq.n	800267e <StartDistanceSensor+0x2ae>
 800265e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8002662:	f7fd ff91 	bl	8000588 <__aeabi_f2d>
 8002666:	a332      	add	r3, pc, #200	; (adr r3, 8002730 <StartDistanceSensor+0x360>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fe fa74 	bl	8000b58 <__aeabi_dcmpgt>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <StartDistanceSensor+0x2ae>
			  delta_th_tmp= 0;
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		  // Enroll position variationstype filter text
		  if ( delta_a_tmp > delta_a_max)
 800267e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002682:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8002686:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	dd02      	ble.n	8002696 <StartDistanceSensor+0x2c6>
			  delta_a_tmp= delta_a_max;
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

		  if ( delta_a_tmp < -delta_a_max)
 8002696:	edd7 7a06 	vldr	s15, [r7, #24]
 800269a:	eef1 7a67 	vneg.f32	s15, s15
 800269e:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80026a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026aa:	d505      	bpl.n	80026b8 <StartDistanceSensor+0x2e8>
			  delta_a_tmp= -delta_a_max;
 80026ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80026b0:	eef1 7a67 	vneg.f32	s15, s15
 80026b4:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0

		  // If distance is above a fixed threshold use the generated trajectory variation
		  if( distance > distance_threshold ){
 80026b8:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80026bc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80026c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c8:	dd52      	ble.n	8002770 <StartDistanceSensor+0x3a0>

			  k= 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

			  // Tracking error control enabling
			  tracking_error_flag= true;
 80026d0:	4b22      	ldr	r3, [pc, #136]	; (800275c <StartDistanceSensor+0x38c>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]

		  	  // Smoothing measure using a Moving Average Filter

		  	  MAF_Update(&hfilter_a, delta_a_tmp);
 80026d6:	ed97 0a30 	vldr	s0, [r7, #192]	; 0xc0
 80026da:	4821      	ldr	r0, [pc, #132]	; (8002760 <StartDistanceSensor+0x390>)
 80026dc:	f002 fc03 	bl	8004ee6 <MAF_Update>
		  	  delta_a= __MAF_GET_VAL(&hfilter_a);
 80026e0:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <StartDistanceSensor+0x390>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <StartDistanceSensor+0x394>)
 80026e6:	6013      	str	r3, [r2, #0]

		  	  MAF_Update(&hfilter_th, delta_th_tmp);
 80026e8:	ed97 0a2f 	vldr	s0, [r7, #188]	; 0xbc
 80026ec:	481e      	ldr	r0, [pc, #120]	; (8002768 <StartDistanceSensor+0x398>)
 80026ee:	f002 fbfa 	bl	8004ee6 <MAF_Update>
		  	  delta_th= __MAF_GET_VAL(&hfilter_th);
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <StartDistanceSensor+0x398>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	4a1d      	ldr	r2, [pc, #116]	; (800276c <StartDistanceSensor+0x39c>)
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e09e      	b.n	800283a <StartDistanceSensor+0x46a>
 80026fc:	f3af 8000 	nop.w
 8002700:	33333333 	.word	0x33333333
 8002704:	3fe33333 	.word	0x3fe33333
 8002708:	88e368f1 	.word	0x88e368f1
 800270c:	3ee4f8b5 	.word	0x3ee4f8b5
 8002710:	eb851eb8 	.word	0xeb851eb8
 8002714:	bfdeb851 	.word	0xbfdeb851
 8002718:	cccccccd 	.word	0xcccccccd
 800271c:	3feccccc 	.word	0x3feccccc
 8002720:	eb851eb8 	.word	0xeb851eb8
 8002724:	3fdeb851 	.word	0x3fdeb851
 8002728:	47ae147b 	.word	0x47ae147b
 800272c:	3f847ae1 	.word	0x3f847ae1
 8002730:	47ae147b 	.word	0x47ae147b
 8002734:	bf847ae1 	.word	0xbf847ae1
 8002738:	42a40000 	.word	0x42a40000
 800273c:	08013ac8 	.word	0x08013ac8
 8002740:	41700000 	.word	0x41700000
 8002744:	43480000 	.word	0x43480000
 8002748:	40400000 	.word	0x40400000
 800274c:	20006fe8 	.word	0x20006fe8
 8002750:	20005c14 	.word	0x20005c14
 8002754:	20005e88 	.word	0x20005e88
 8002758:	20004b34 	.word	0x20004b34
 800275c:	20000000 	.word	0x20000000
 8002760:	200072dc 	.word	0x200072dc
 8002764:	20000208 	.word	0x20000208
 8002768:	20005d9c 	.word	0x20005d9c
 800276c:	2000020c 	.word	0x2000020c

	  	  }
		  // Otherwise, if distance is below a fixed threshold freeze servo in that position and move 'way from obstacle
	  	  else{
	  		  // This do freeze servo
	  		  j--;
 8002770:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002774:	3b01      	subs	r3, #1
 8002776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			  if( ++k > 1 || IR_val <= 0.5 ){
 800277a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800277e:	3301      	adds	r3, #1
 8002780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002784:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002788:	2b01      	cmp	r3, #1
 800278a:	dc08      	bgt.n	800279e <StartDistanceSensor+0x3ce>
 800278c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002790:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002794:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279c:	d84d      	bhi.n	800283a <StartDistanceSensor+0x46a>

				  // Following error control disabling (it doesn't need to follow the trajectory perfectly, it just
				  // need to move away from a really near obstacle)
				  tracking_error_flag= false;
 800279e:	4b44      	ldr	r3, [pc, #272]	; (80028b0 <StartDistanceSensor+0x4e0>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]

				  /* Avoiding the use of filtered values to have a fast response near an obstacle. Anyway,
					 keep  update filters just to not have discontinuities after this exception ends.       */

				  // Force a minimum Delta_a value, otherwise, near threshold, sometimes robot stand still
				  delta_a=  (delta_a_tmp - delta_a_max*0.1)*1;
 80027a4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80027a8:	f7fd feee 	bl	8000588 <__aeabi_f2d>
 80027ac:	4604      	mov	r4, r0
 80027ae:	460d      	mov	r5, r1
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fd fee8 	bl	8000588 <__aeabi_f2d>
 80027b8:	a33b      	add	r3, pc, #236	; (adr r3, 80028a8 <StartDistanceSensor+0x4d8>)
 80027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027be:	f7fd ff3b 	bl	8000638 <__aeabi_dmul>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4620      	mov	r0, r4
 80027c8:	4629      	mov	r1, r5
 80027ca:	f7fd fd7d 	bl	80002c8 <__aeabi_dsub>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	f7fe fa27 	bl	8000c28 <__aeabi_d2f>
 80027da:	4603      	mov	r3, r0
 80027dc:	4a35      	ldr	r2, [pc, #212]	; (80028b4 <StartDistanceSensor+0x4e4>)
 80027de:	6013      	str	r3, [r2, #0]

				  if( delta_a > 0)
 80027e0:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <StartDistanceSensor+0x4e4>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ee:	dd07      	ble.n	8002800 <StartDistanceSensor+0x430>
				  	  delta_a= -delta_a;
 80027f0:	4b30      	ldr	r3, [pc, #192]	; (80028b4 <StartDistanceSensor+0x4e4>)
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	eef1 7a67 	vneg.f32	s15, s15
 80027fa:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <StartDistanceSensor+0x4e4>)
 80027fc:	edc3 7a00 	vstr	s15, [r3]

				  // Set current Delta_theta angle
				  delta_th= delta_th_tmp;
 8002800:	4a2d      	ldr	r2, [pc, #180]	; (80028b8 <StartDistanceSensor+0x4e8>)
 8002802:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002806:	6013      	str	r3, [r2, #0]

				  // Filters updates
				  MAF_Update(&hfilter_a,  delta_a_tmp);
 8002808:	ed97 0a30 	vldr	s0, [r7, #192]	; 0xc0
 800280c:	482b      	ldr	r0, [pc, #172]	; (80028bc <StartDistanceSensor+0x4ec>)
 800280e:	f002 fb6a 	bl	8004ee6 <MAF_Update>
				  //delta_a= __MAF_GET_VAL(&hfilter_a);
				  MAF_Update(&hfilter_th, delta_th_tmp);
 8002812:	ed97 0a2f 	vldr	s0, [r7, #188]	; 0xbc
 8002816:	482a      	ldr	r0, [pc, #168]	; (80028c0 <StartDistanceSensor+0x4f0>)
 8002818:	f002 fb65 	bl	8004ee6 <MAF_Update>
				  //delta_th= __MAF_GET_VAL(&hfilter_th);

				  // Freeze servo just for a fixed time
				  if( k++ > 30 ){
 800281c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8002826:	2b1e      	cmp	r3, #30
 8002828:	dd07      	ble.n	800283a <StartDistanceSensor+0x46a>
					  k= 0;
 800282a:	2300      	movs	r3, #0
 800282c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
					  j++;
 8002830:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002834:	3301      	adds	r3, #1
 8002836:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
					  //delta_a_tmp= -delta_a_tmp;
				  }
			  }
	  	  }

		  if( distance > distance_threshold && distance < distance_threshold*4){
 800283a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800283e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284a:	dd20      	ble.n	800288e <StartDistanceSensor+0x4be>
 800284c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002850:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002858:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800285c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002864:	d513      	bpl.n	800288e <StartDistanceSensor+0x4be>
			  j--;
 8002866:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800286a:	3b01      	subs	r3, #1
 800286c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			  if( k2++ > 10 ){
 8002870:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800287a:	2b0a      	cmp	r3, #10
 800287c:	dd07      	ble.n	800288e <StartDistanceSensor+0x4be>
				  k2= 0;
 800287e:	2300      	movs	r3, #0
 8002880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
				  j++;
 8002884:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002888:	3301      	adds	r3, #1
 800288a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	  for(int j=0; j<n; j++){
 800288e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002892:	3301      	adds	r3, #1
 8002894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002898:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800289c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028a0:	429a      	cmp	r2, r3
 80028a2:	f6ff adfd 	blt.w	80024a0 <StartDistanceSensor+0xd0>
 80028a6:	e5f7      	b.n	8002498 <StartDistanceSensor+0xc8>
 80028a8:	9999999a 	.word	0x9999999a
 80028ac:	3fb99999 	.word	0x3fb99999
 80028b0:	20000000 	.word	0x20000000
 80028b4:	20000208 	.word	0x20000208
 80028b8:	2000020c 	.word	0x2000020c
 80028bc:	200072dc 	.word	0x200072dc
 80028c0:	20005d9c 	.word	0x20005d9c

080028c4 <StartInfraredSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInfraredSensor */
void StartInfraredSensor(void *argument)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInfraredSensor */
  /* Infinite loop */

	int sens=0, k=0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	2300      	movs	r3, #0
 80028d2:	60bb      	str	r3, [r7, #8]
//	osThreadSuspend(DistanceSensorHandle);
//	osThreadSuspend(ControlDiffDrivHandle);

	for(;;){

		sens= HAL_GPIO_ReadPin(INFRARED_SENSOR_GPIO_Port, INFRARED_SENSOR_Pin);
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	4809      	ldr	r0, [pc, #36]	; (80028fc <StartInfraredSensor+0x38>)
 80028d8:	f003 fe9e 	bl	8006618 <HAL_GPIO_ReadPin>
 80028dc:	4603      	mov	r3, r0
 80028de:	60fb      	str	r3, [r7, #12]

		MAF_Update(&hfilter_infrared, sens);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	ee07 3a90 	vmov	s15, r3
 80028e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ea:	eeb0 0a67 	vmov.f32	s0, s15
 80028ee:	4804      	ldr	r0, [pc, #16]	; (8002900 <StartInfraredSensor+0x3c>)
 80028f0:	f002 faf9 	bl	8004ee6 <MAF_Update>
		if( !(k%10000) ){
			printf("%f\t\n",3*__MAF_GET_VAL(&hfilter_infrared));
			k= 0;
		}
*/
		osDelay(1);
 80028f4:	2001      	movs	r0, #1
 80028f6:	f007 ff0d 	bl	800a714 <osDelay>
		sens= HAL_GPIO_ReadPin(INFRARED_SENSOR_GPIO_Port, INFRARED_SENSOR_Pin);
 80028fa:	e7eb      	b.n	80028d4 <StartInfraredSensor+0x10>
 80028fc:	40020800 	.word	0x40020800
 8002900:	20004b34 	.word	0x20004b34

08002904 <SerialCommunication>:
* @retval None
*/

/* USER CODE END Header_SerialCommunication */
void SerialCommunication(void *argument)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SerialCommunication */

  uint32_t curr_sample_cnt= 0, prev_sample_cnt= 0;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	2300      	movs	r3, #0
 8002912:	60bb      	str	r3, [r7, #8]
				  state_target .pose.x_a,    state_target.pose.y_a,
				  state_target .pose.theta
		  );
	  }
*/
	  osDelay(1);
 8002914:	2001      	movs	r0, #1
 8002916:	f007 fefd 	bl	800a714 <osDelay>
 800291a:	e7fb      	b.n	8002914 <SerialCommunication+0x10>

0800291c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800292e:	f003 faa1 	bl	8005e74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40001000 	.word	0x40001000

08002940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002944:	b672      	cpsid	i
}
 8002946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002948:	e7fe      	b.n	8002948 <Error_Handler+0x8>
	...

0800294c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_MspInit+0x54>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <HAL_MspInit+0x54>)
 800295c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002960:	6453      	str	r3, [r2, #68]	; 0x44
 8002962:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <HAL_MspInit+0x54>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_MspInit+0x54>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <HAL_MspInit+0x54>)
 8002978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297c:	6413      	str	r3, [r2, #64]	; 0x40
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_MspInit+0x54>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	210f      	movs	r1, #15
 800298e:	f06f 0001 	mvn.w	r0, #1
 8002992:	f003 fb6b 	bl	800606c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800

080029a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08e      	sub	sp, #56	; 0x38
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a4d      	ldr	r2, [pc, #308]	; (8002af8 <HAL_TIM_Base_MspInit+0x154>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d10e      	bne.n	80029e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]
 80029ca:	4b4c      	ldr	r3, [pc, #304]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	4a4b      	ldr	r2, [pc, #300]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6453      	str	r3, [r2, #68]	; 0x44
 80029d6:	4b49      	ldr	r3, [pc, #292]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80029e2:	e085      	b.n	8002af0 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM3)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a45      	ldr	r2, [pc, #276]	; (8002b00 <HAL_TIM_Base_MspInit+0x15c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d116      	bne.n	8002a1c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	4b42      	ldr	r3, [pc, #264]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	4a41      	ldr	r2, [pc, #260]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	6413      	str	r3, [r2, #64]	; 0x40
 80029fe:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	61fb      	str	r3, [r7, #28]
 8002a08:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2105      	movs	r1, #5
 8002a0e:	201d      	movs	r0, #29
 8002a10:	f003 fb2c 	bl	800606c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a14:	201d      	movs	r0, #29
 8002a16:	f003 fb45 	bl	80060a4 <HAL_NVIC_EnableIRQ>
}
 8002a1a:	e069      	b.n	8002af0 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM7)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a38      	ldr	r2, [pc, #224]	; (8002b04 <HAL_TIM_Base_MspInit+0x160>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d10e      	bne.n	8002a44 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	61bb      	str	r3, [r7, #24]
 8002a2a:	4b34      	ldr	r3, [pc, #208]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	4a33      	ldr	r2, [pc, #204]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 8002a30:	f043 0320 	orr.w	r3, r3, #32
 8002a34:	6413      	str	r3, [r2, #64]	; 0x40
 8002a36:	4b31      	ldr	r3, [pc, #196]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	61bb      	str	r3, [r7, #24]
 8002a40:	69bb      	ldr	r3, [r7, #24]
}
 8002a42:	e055      	b.n	8002af0 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM8)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a2f      	ldr	r2, [pc, #188]	; (8002b08 <HAL_TIM_Base_MspInit+0x164>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d116      	bne.n	8002a7c <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	4a29      	ldr	r2, [pc, #164]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 8002a58:	f043 0302 	orr.w	r3, r3, #2
 8002a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5e:	4b27      	ldr	r3, [pc, #156]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2105      	movs	r1, #5
 8002a6e:	202b      	movs	r0, #43	; 0x2b
 8002a70:	f003 fafc 	bl	800606c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002a74:	202b      	movs	r0, #43	; 0x2b
 8002a76:	f003 fb15 	bl	80060a4 <HAL_NVIC_EnableIRQ>
}
 8002a7a:	e039      	b.n	8002af0 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM12)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a22      	ldr	r2, [pc, #136]	; (8002b0c <HAL_TIM_Base_MspInit+0x168>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d134      	bne.n	8002af0 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	4b1c      	ldr	r3, [pc, #112]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a1b      	ldr	r2, [pc, #108]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 8002a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b19      	ldr	r3, [pc, #100]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a14      	ldr	r2, [pc, #80]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 8002aac:	f043 0302 	orr.w	r3, r3, #2
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_TIM_Base_MspInit+0x158>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ULTRASONIC_ECHO_Pin;
 8002abe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	2300      	movs	r3, #0
 8002ace:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002ad0:	2309      	movs	r3, #9
 8002ad2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULTRASONIC_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad8:	4619      	mov	r1, r3
 8002ada:	480d      	ldr	r0, [pc, #52]	; (8002b10 <HAL_TIM_Base_MspInit+0x16c>)
 8002adc:	f003 fc08 	bl	80062f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2105      	movs	r1, #5
 8002ae4:	202b      	movs	r0, #43	; 0x2b
 8002ae6:	f003 fac1 	bl	800606c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002aea:	202b      	movs	r0, #43	; 0x2b
 8002aec:	f003 fada 	bl	80060a4 <HAL_NVIC_EnableIRQ>
}
 8002af0:	bf00      	nop
 8002af2:	3738      	adds	r7, #56	; 0x38
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40010000 	.word	0x40010000
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40000400 	.word	0x40000400
 8002b04:	40001400 	.word	0x40001400
 8002b08:	40010400 	.word	0x40010400
 8002b0c:	40001800 	.word	0x40001800
 8002b10:	40020400 	.word	0x40020400

08002b14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08c      	sub	sp, #48	; 0x30
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	f107 031c 	add.w	r3, r7, #28
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b34:	d12d      	bne.n	8002b92 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	4b30      	ldr	r3, [pc, #192]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a2f      	ldr	r2, [pc, #188]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
 8002b46:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	4a28      	ldr	r2, [pc, #160]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	6313      	str	r3, [r2, #48]	; 0x30
 8002b62:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 8002b6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b80:	2301      	movs	r3, #1
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b84:	f107 031c 	add.w	r3, r7, #28
 8002b88:	4619      	mov	r1, r3
 8002b8a:	481d      	ldr	r0, [pc, #116]	; (8002c00 <HAL_TIM_Encoder_MspInit+0xec>)
 8002b8c:	f003 fbb0 	bl	80062f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002b90:	e030      	b.n	8002bf4 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a1b      	ldr	r2, [pc, #108]	; (8002c04 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d12b      	bne.n	8002bf4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	4a15      	ldr	r2, [pc, #84]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002ba6:	f043 0308 	orr.w	r3, r3, #8
 8002baa:	6413      	str	r3, [r2, #64]	; 0x40
 8002bac:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_RIGHT_B_Pin|ENCODER_RIGHT_A_Pin;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002be4:	2302      	movs	r3, #2
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be8:	f107 031c 	add.w	r3, r7, #28
 8002bec:	4619      	mov	r1, r3
 8002bee:	4806      	ldr	r0, [pc, #24]	; (8002c08 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002bf0:	f003 fb7e 	bl	80062f0 <HAL_GPIO_Init>
}
 8002bf4:	bf00      	nop
 8002bf6:	3730      	adds	r7, #48	; 0x30
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40020400 	.word	0x40020400
 8002c04:	40000c00 	.word	0x40000c00
 8002c08:	40020000 	.word	0x40020000

08002c0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a24      	ldr	r2, [pc, #144]	; (8002cbc <HAL_TIM_MspPostInit+0xb0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d11f      	bne.n	8002c6e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <HAL_TIM_MspPostInit+0xb4>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a22      	ldr	r2, [pc, #136]	; (8002cc0 <HAL_TIM_MspPostInit+0xb4>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_TIM_MspPostInit+0xb4>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_LEFT_FORWARD_Pin|MOTOR_LEFT_BACKWARD_Pin|MOTOR_RIGHT_FORWARD_Pin|MOTOR_RIGHT_BACKWARD_Pin;
 8002c4a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	2302      	movs	r3, #2
 8002c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	4619      	mov	r1, r3
 8002c66:	4817      	ldr	r0, [pc, #92]	; (8002cc4 <HAL_TIM_MspPostInit+0xb8>)
 8002c68:	f003 fb42 	bl	80062f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002c6c:	e022      	b.n	8002cb4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a15      	ldr	r2, [pc, #84]	; (8002cc8 <HAL_TIM_MspPostInit+0xbc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d11d      	bne.n	8002cb4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <HAL_TIM_MspPostInit+0xb4>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <HAL_TIM_MspPostInit+0xb4>)
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	6313      	str	r3, [r2, #48]	; 0x30
 8002c88:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <HAL_TIM_MspPostInit+0xb4>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_MOTOR_Pin;
 8002c94:	2340      	movs	r3, #64	; 0x40
 8002c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	4619      	mov	r1, r3
 8002cae:	4807      	ldr	r0, [pc, #28]	; (8002ccc <HAL_TIM_MspPostInit+0xc0>)
 8002cb0:	f003 fb1e 	bl	80062f0 <HAL_GPIO_Init>
}
 8002cb4:	bf00      	nop
 8002cb6:	3728      	adds	r7, #40	; 0x28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40010000 	.word	0x40010000
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40020000 	.word	0x40020000
 8002cc8:	40010400 	.word	0x40010400
 8002ccc:	40020800 	.word	0x40020800

08002cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a2c      	ldr	r2, [pc, #176]	; (8002da0 <HAL_UART_MspInit+0xd0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d152      	bne.n	8002d98 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <HAL_UART_MspInit+0xd4>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a2a      	ldr	r2, [pc, #168]	; (8002da4 <HAL_UART_MspInit+0xd4>)
 8002cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <HAL_UART_MspInit+0xd4>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_UART_MspInit+0xd4>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4a23      	ldr	r2, [pc, #140]	; (8002da4 <HAL_UART_MspInit+0xd4>)
 8002d18:	f043 0304 	orr.w	r3, r3, #4
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <HAL_UART_MspInit+0xd4>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_UART_MspInit+0xd4>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <HAL_UART_MspInit+0xd4>)
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_UART_MspInit+0xd4>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d46:	2320      	movs	r3, #32
 8002d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d52:	2303      	movs	r3, #3
 8002d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d56:	2307      	movs	r3, #7
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d5a:	f107 0314 	add.w	r3, r7, #20
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4811      	ldr	r0, [pc, #68]	; (8002da8 <HAL_UART_MspInit+0xd8>)
 8002d62:	f003 fac5 	bl	80062f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d74:	2303      	movs	r3, #3
 8002d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d78:	2307      	movs	r3, #7
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	4619      	mov	r1, r3
 8002d82:	480a      	ldr	r0, [pc, #40]	; (8002dac <HAL_UART_MspInit+0xdc>)
 8002d84:	f003 fab4 	bl	80062f0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2105      	movs	r1, #5
 8002d8c:	2027      	movs	r0, #39	; 0x27
 8002d8e:	f003 f96d 	bl	800606c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d92:	2027      	movs	r0, #39	; 0x27
 8002d94:	f003 f986 	bl	80060a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d98:	bf00      	nop
 8002d9a:	3728      	adds	r7, #40	; 0x28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40004800 	.word	0x40004800
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40020800 	.word	0x40020800
 8002dac:	40020400 	.word	0x40020400

08002db0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08c      	sub	sp, #48	; 0x30
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	2036      	movs	r0, #54	; 0x36
 8002dc6:	f003 f951 	bl	800606c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002dca:	2036      	movs	r0, #54	; 0x36
 8002dcc:	f003 f96a 	bl	80060a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <HAL_InitTick+0xa4>)
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	4a1e      	ldr	r2, [pc, #120]	; (8002e54 <HAL_InitTick+0xa4>)
 8002dda:	f043 0310 	orr.w	r3, r3, #16
 8002dde:	6413      	str	r3, [r2, #64]	; 0x40
 8002de0:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <HAL_InitTick+0xa4>)
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002dec:	f107 0210 	add.w	r2, r7, #16
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f003 fd74 	bl	80068e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002dfc:	f003 fd4a 	bl	8006894 <HAL_RCC_GetPCLK1Freq>
 8002e00:	4603      	mov	r3, r0
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <HAL_InitTick+0xa8>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	0c9b      	lsrs	r3, r3, #18
 8002e10:	3b01      	subs	r3, #1
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_InitTick+0xac>)
 8002e16:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <HAL_InitTick+0xb0>)
 8002e18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e1a:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <HAL_InitTick+0xac>)
 8002e1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e20:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e22:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <HAL_InitTick+0xac>)
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <HAL_InitTick+0xac>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_InitTick+0xac>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e34:	4809      	ldr	r0, [pc, #36]	; (8002e5c <HAL_InitTick+0xac>)
 8002e36:	f004 f9d7 	bl	80071e8 <HAL_TIM_Base_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d104      	bne.n	8002e4a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e40:	4806      	ldr	r0, [pc, #24]	; (8002e5c <HAL_InitTick+0xac>)
 8002e42:	f004 fabd 	bl	80073c0 <HAL_TIM_Base_Start_IT>
 8002e46:	4603      	mov	r3, r0
 8002e48:	e000      	b.n	8002e4c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3730      	adds	r7, #48	; 0x30
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	431bde83 	.word	0x431bde83
 8002e5c:	200072f4 	.word	0x200072f4
 8002e60:	40001000 	.word	0x40001000

08002e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <NMI_Handler+0x4>

08002e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e6e:	e7fe      	b.n	8002e6e <HardFault_Handler+0x4>

08002e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e74:	e7fe      	b.n	8002e74 <MemManage_Handler+0x4>

08002e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e7a:	e7fe      	b.n	8002e7a <BusFault_Handler+0x4>

08002e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e80:	e7fe      	b.n	8002e80 <UsageFault_Handler+0x4>

08002e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e94:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <TIM3_IRQHandler+0x10>)
 8002e96:	f004 ffdf 	bl	8007e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20005ce8 	.word	0x20005ce8

08002ea4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ea8:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <USART3_IRQHandler+0x10>)
 8002eaa:	f006 fb07 	bl	80094bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20005ba0 	.word	0x20005ba0

08002eb8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002ebc:	4803      	ldr	r0, [pc, #12]	; (8002ecc <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8002ebe:	f004 ffcb 	bl	8007e58 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8002ec2:	4803      	ldr	r0, [pc, #12]	; (8002ed0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002ec4:	f004 ffc8 	bl	8007e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20004b4c 	.word	0x20004b4c
 8002ed0:	20006f34 	.word	0x20006f34

08002ed4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <TIM6_DAC_IRQHandler+0x10>)
 8002eda:	f004 ffbd 	bl	8007e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200072f4 	.word	0x200072f4

08002ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ef0:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <_sbrk+0x5c>)
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <_sbrk+0x60>)
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002efc:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <_sbrk+0x64>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <_sbrk+0x64>)
 8002f06:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <_sbrk+0x68>)
 8002f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <_sbrk+0x64>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d207      	bcs.n	8002f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f18:	f00a f980 	bl	800d21c <__errno>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	220c      	movs	r2, #12
 8002f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f26:	e009      	b.n	8002f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <_sbrk+0x64>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <_sbrk+0x64>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	4a05      	ldr	r2, [pc, #20]	; (8002f4c <_sbrk+0x64>)
 8002f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20020000 	.word	0x20020000
 8002f48:	00000400 	.word	0x00000400
 8002f4c:	20000214 	.word	0x20000214
 8002f50:	20007418 	.word	0x20007418

08002f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <SystemInit+0x20>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	4a05      	ldr	r2, [pc, #20]	; (8002f74 <SystemInit+0x20>)
 8002f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <UART_TxCpltCallback>:

UART_HandleTypeDef* huart;

volatile bool data_transmitted= false;

void UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	data_transmitted = true;
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <UART_TxCpltCallback+0x1c>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000218 	.word	0x20000218

08002f98 <DATASTREAM_Init>:


// Setting up streaming
void DATASTREAM_Init(UART_HandleTypeDef *huart_init){
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

	// Setting StdIO Stream
	//RetargetInit(huart_init);

	// Local UART handle
	huart= huart_init;
 8002fa0:	4a06      	ldr	r2, [pc, #24]	; (8002fbc <DATASTREAM_Init+0x24>)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6013      	str	r3, [r2, #0]

	huart->TxCpltCallback= UART_TxCpltCallback;
 8002fa6:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <DATASTREAM_Init+0x24>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a05      	ldr	r2, [pc, #20]	; (8002fc0 <DATASTREAM_Init+0x28>)
 8002fac:	649a      	str	r2, [r3, #72]	; 0x48


}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	200073a8 	.word	0x200073a8
 8002fc0:	08002f79 	.word	0x08002f79

08002fc4 <DATASTREAM_RTOS_SendValue>:

}

// Do send values into serial, using a Variadic function. This version is for freeRTOS tha doesn't support
// printf and sprintf
void DATASTREAM_RTOS_SendValue(DATASTREAM_mode mode, int vargn, ...){
 8002fc4:	b40e      	push	{r1, r2, r3}
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b093      	sub	sp, #76	; 0x4c
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	4603      	mov	r3, r0
 8002fce:	71fb      	strb	r3, [r7, #7]

	// Initializing variadic arguments, using "stdarg.h" macros
	va_list vargp;
	va_start( vargp, vargn );
 8002fd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fd4:	637b      	str	r3, [r7, #52]	; 0x34

	char tmp_buff[15], tmp_char[1]= {'\t'};
 8002fd6:	2309      	movs	r3, #9
 8002fd8:	f887 3020 	strb.w	r3, [r7, #32]

	switch(mode){
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <DATASTREAM_RTOS_SendValue+0x24>
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d050      	beq.n	8003088 <DATASTREAM_RTOS_SendValue+0xc4>
	}

	// DeInit variables arguments
	va_end( vargp );

}
 8002fe6:	e0c9      	b.n	800317c <DATASTREAM_RTOS_SendValue+0x1b8>
			for(int i=0; i<vargn; i++){
 8002fe8:	2300      	movs	r3, #0
 8002fea:	647b      	str	r3, [r7, #68]	; 0x44
 8002fec:	e03b      	b.n	8003066 <DATASTREAM_RTOS_SendValue+0xa2>
				for(int k=0; k<sizeof(uart_data_buff); k++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff2:	e008      	b.n	8003006 <DATASTREAM_RTOS_SendValue+0x42>
					uart_data_buff[k]= '\0';
 8002ff4:	f107 020c 	add.w	r2, r7, #12
 8002ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ffa:	4413      	add	r3, r2
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
				for(int k=0; k<sizeof(uart_data_buff); k++)
 8003000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003002:	3301      	adds	r3, #1
 8003004:	643b      	str	r3, [r7, #64]	; 0x40
 8003006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003008:	2b0e      	cmp	r3, #14
 800300a:	d9f3      	bls.n	8002ff4 <DATASTREAM_RTOS_SendValue+0x30>
				ftoa((float)va_arg(vargp, double), uart_data_buff, 7);
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	3307      	adds	r3, #7
 8003010:	f023 0307 	bic.w	r3, r3, #7
 8003014:	f103 0208 	add.w	r2, r3, #8
 8003018:	637a      	str	r2, [r7, #52]	; 0x34
 800301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	f7fd fe01 	bl	8000c28 <__aeabi_d2f>
 8003026:	4602      	mov	r2, r0
 8003028:	f107 030c 	add.w	r3, r7, #12
 800302c:	2107      	movs	r1, #7
 800302e:	4618      	mov	r0, r3
 8003030:	ee00 2a10 	vmov	s0, r2
 8003034:	f000 f93c 	bl	80032b0 <ftoa>
				HAL_UART_Transmit(huart, (uint8_t *)uart_data_buff,   15*sizeof(char), HAL_MAX_DELAY);
 8003038:	4b54      	ldr	r3, [pc, #336]	; (800318c <DATASTREAM_RTOS_SendValue+0x1c8>)
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	f107 010c 	add.w	r1, r7, #12
 8003040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003044:	220f      	movs	r2, #15
 8003046:	f006 f887 	bl	8009158 <HAL_UART_Transmit>
				HAL_UART_Transmit(huart, (uint8_t *)((char[1]){'\t'}),   sizeof(char), HAL_MAX_DELAY);
 800304a:	4b50      	ldr	r3, [pc, #320]	; (800318c <DATASTREAM_RTOS_SendValue+0x1c8>)
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	2309      	movs	r3, #9
 8003050:	723b      	strb	r3, [r7, #8]
 8003052:	f107 0108 	add.w	r1, r7, #8
 8003056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800305a:	2201      	movs	r2, #1
 800305c:	f006 f87c 	bl	8009158 <HAL_UART_Transmit>
			for(int i=0; i<vargn; i++){
 8003060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003062:	3301      	adds	r3, #1
 8003064:	647b      	str	r3, [r7, #68]	; 0x44
 8003066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800306a:	429a      	cmp	r2, r3
 800306c:	dbbf      	blt.n	8002fee <DATASTREAM_RTOS_SendValue+0x2a>
			HAL_UART_Transmit(huart, (uint8_t *)((char[2]){'\b','\n'}), 2*sizeof(char),HAL_MAX_DELAY);
 800306e:	4b47      	ldr	r3, [pc, #284]	; (800318c <DATASTREAM_RTOS_SendValue+0x1c8>)
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	4b47      	ldr	r3, [pc, #284]	; (8003190 <DATASTREAM_RTOS_SendValue+0x1cc>)
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	83bb      	strh	r3, [r7, #28]
 8003078:	f107 011c 	add.w	r1, r7, #28
 800307c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003080:	2202      	movs	r2, #2
 8003082:	f006 f869 	bl	8009158 <HAL_UART_Transmit>
			break;
 8003086:	e079      	b.n	800317c <DATASTREAM_RTOS_SendValue+0x1b8>
			for(int i=0; i<vargn; i++){
 8003088:	2300      	movs	r3, #0
 800308a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800308c:	e043      	b.n	8003116 <DATASTREAM_RTOS_SendValue+0x152>
				for(int k=0; k<sizeof(tmp_buff); k++)
 800308e:	2300      	movs	r3, #0
 8003090:	63bb      	str	r3, [r7, #56]	; 0x38
 8003092:	e008      	b.n	80030a6 <DATASTREAM_RTOS_SendValue+0xe2>
					tmp_buff[k]= '\0';
 8003094:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309a:	4413      	add	r3, r2
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
				for(int k=0; k<sizeof(tmp_buff); k++)
 80030a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a2:	3301      	adds	r3, #1
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80030a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a8:	2b0e      	cmp	r3, #14
 80030aa:	d9f3      	bls.n	8003094 <DATASTREAM_RTOS_SendValue+0xd0>
				ftoa((float)va_arg(vargp, double), tmp_buff, 7);
 80030ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ae:	3307      	adds	r3, #7
 80030b0:	f023 0307 	bic.w	r3, r3, #7
 80030b4:	f103 0208 	add.w	r2, r3, #8
 80030b8:	637a      	str	r2, [r7, #52]	; 0x34
 80030ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030be:	4610      	mov	r0, r2
 80030c0:	4619      	mov	r1, r3
 80030c2:	f7fd fdb1 	bl	8000c28 <__aeabi_d2f>
 80030c6:	4602      	mov	r2, r0
 80030c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030cc:	2107      	movs	r1, #7
 80030ce:	4618      	mov	r0, r3
 80030d0:	ee00 2a10 	vmov	s0, r2
 80030d4:	f000 f8ec 	bl	80032b0 <ftoa>
				strcat(tmp_buff,tmp_char);
 80030d8:	f107 0220 	add.w	r2, r7, #32
 80030dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f00b f84c 	bl	800e180 <strcat>
				data_transmitted= false;
 80030e8:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <DATASTREAM_RTOS_SendValue+0x1d0>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(huart, (uint8_t *)tmp_buff, sizeof(tmp_buff));
 80030ee:	4b27      	ldr	r3, [pc, #156]	; (800318c <DATASTREAM_RTOS_SendValue+0x1c8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80030f6:	220f      	movs	r2, #15
 80030f8:	4618      	mov	r0, r3
 80030fa:	f006 f961 	bl	80093c0 <HAL_UART_Transmit_DMA>
				while( !data_transmitted )
 80030fe:	bf00      	nop
 8003100:	4b24      	ldr	r3, [pc, #144]	; (8003194 <DATASTREAM_RTOS_SendValue+0x1d0>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f083 0301 	eor.w	r3, r3, #1
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f7      	bne.n	8003100 <DATASTREAM_RTOS_SendValue+0x13c>
			for(int i=0; i<vargn; i++){
 8003110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003112:	3301      	adds	r3, #1
 8003114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003116:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800311a:	429a      	cmp	r2, r3
 800311c:	dbb7      	blt.n	800308e <DATASTREAM_RTOS_SendValue+0xca>
			tmp_char[0]= '\b';
 800311e:	2308      	movs	r3, #8
 8003120:	f887 3020 	strb.w	r3, [r7, #32]
			data_transmitted= false;
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <DATASTREAM_RTOS_SendValue+0x1d0>)
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(huart, (uint8_t *)tmp_char, sizeof(tmp_char));
 800312a:	4b18      	ldr	r3, [pc, #96]	; (800318c <DATASTREAM_RTOS_SendValue+0x1c8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f107 0120 	add.w	r1, r7, #32
 8003132:	2201      	movs	r2, #1
 8003134:	4618      	mov	r0, r3
 8003136:	f006 f943 	bl	80093c0 <HAL_UART_Transmit_DMA>
			while( !data_transmitted )
 800313a:	bf00      	nop
 800313c:	4b15      	ldr	r3, [pc, #84]	; (8003194 <DATASTREAM_RTOS_SendValue+0x1d0>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	f083 0301 	eor.w	r3, r3, #1
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f7      	bne.n	800313c <DATASTREAM_RTOS_SendValue+0x178>
			tmp_char[0]= '\n';
 800314c:	230a      	movs	r3, #10
 800314e:	f887 3020 	strb.w	r3, [r7, #32]
			data_transmitted= false;
 8003152:	4b10      	ldr	r3, [pc, #64]	; (8003194 <DATASTREAM_RTOS_SendValue+0x1d0>)
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(huart, (uint8_t *)tmp_char, sizeof(tmp_char));
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <DATASTREAM_RTOS_SendValue+0x1c8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f107 0120 	add.w	r1, r7, #32
 8003160:	2201      	movs	r2, #1
 8003162:	4618      	mov	r0, r3
 8003164:	f006 f92c 	bl	80093c0 <HAL_UART_Transmit_DMA>
			while( !data_transmitted )
 8003168:	bf00      	nop
 800316a:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <DATASTREAM_RTOS_SendValue+0x1d0>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f083 0301 	eor.w	r3, r3, #1
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f7      	bne.n	800316a <DATASTREAM_RTOS_SendValue+0x1a6>
			break;
 800317a:	bf00      	nop
}
 800317c:	bf00      	nop
 800317e:	374c      	adds	r7, #76	; 0x4c
 8003180:	46bd      	mov	sp, r7
 8003182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003186:	b003      	add	sp, #12
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	200073a8 	.word	0x200073a8
 8003190:	08013b58 	.word	0x08013b58
 8003194:	20000218 	.word	0x20000218

08003198 <reverse>:
 */

#include <my_lib/datastream_utils.h>


void reverse(char* str, int len){
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80031ac:	e018      	b.n	80031e0 <reverse+0x48>
        temp = str[i];
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4413      	add	r3, r2
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	441a      	add	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	440b      	add	r3, r1
 80031c4:	7812      	ldrb	r2, [r2, #0]
 80031c6:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	4413      	add	r3, r2
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	701a      	strb	r2, [r3, #0]
        i++;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	3301      	adds	r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
        j--;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	3b01      	subs	r3, #1
 80031de:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	dbe2      	blt.n	80031ae <reverse+0x16>
    }
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <itostr>:

int itostr(int x, char str[], int d){
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
    int i = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
    int neg= 0;
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]

    if( x<0 ){
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	da23      	bge.n	800325a <itostr+0x62>
    	x= -x;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	425b      	negs	r3, r3
 8003216:	60fb      	str	r3, [r7, #12]
    	neg= 1;
 8003218:	2301      	movs	r3, #1
 800321a:	613b      	str	r3, [r7, #16]
    }

    while (x) {
 800321c:	e01d      	b.n	800325a <itostr+0x62>
        str[i++] = (x % 10) + '0';
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4b22      	ldr	r3, [pc, #136]	; (80032ac <itostr+0xb4>)
 8003222:	fb83 1302 	smull	r1, r3, r3, r2
 8003226:	1099      	asrs	r1, r3, #2
 8003228:	17d3      	asrs	r3, r2, #31
 800322a:	1ac9      	subs	r1, r1, r3
 800322c:	460b      	mov	r3, r1
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	1ad1      	subs	r1, r2, r3
 8003236:	b2ca      	uxtb	r2, r1
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	1c59      	adds	r1, r3, #1
 800323c:	6179      	str	r1, [r7, #20]
 800323e:	4619      	mov	r1, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	440b      	add	r3, r1
 8003244:	3230      	adds	r2, #48	; 0x30
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a17      	ldr	r2, [pc, #92]	; (80032ac <itostr+0xb4>)
 800324e:	fb82 1203 	smull	r1, r2, r2, r3
 8003252:	1092      	asrs	r2, r2, #2
 8003254:	17db      	asrs	r3, r3, #31
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	60fb      	str	r3, [r7, #12]
    while (x) {
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1de      	bne.n	800321e <itostr+0x26>
    }

    while (i < d)
 8003260:	e007      	b.n	8003272 <itostr+0x7a>
        str[i++] = '0';
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	617a      	str	r2, [r7, #20]
 8003268:	461a      	mov	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4413      	add	r3, r2
 800326e:	2230      	movs	r2, #48	; 0x30
 8003270:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	429a      	cmp	r2, r3
 8003278:	dbf3      	blt.n	8003262 <itostr+0x6a>

    if(neg)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d007      	beq.n	8003290 <itostr+0x98>
    	str[i++]= '-';
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	617a      	str	r2, [r7, #20]
 8003286:	461a      	mov	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4413      	add	r3, r2
 800328c:	222d      	movs	r2, #45	; 0x2d
 800328e:	701a      	strb	r2, [r3, #0]

    reverse(str, i);
 8003290:	6979      	ldr	r1, [r7, #20]
 8003292:	68b8      	ldr	r0, [r7, #8]
 8003294:	f7ff ff80 	bl	8003198 <reverse>

    str[i] = '\0';
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	4413      	add	r3, r2
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]

    return i;
 80032a2:	697b      	ldr	r3, [r7, #20]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	66666667 	.word	0x66666667

080032b0 <ftoa>:

void ftoa(float n, char* res, int afterpoint){
 80032b0:	b5b0      	push	{r4, r5, r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80032ba:	60b8      	str	r0, [r7, #8]
 80032bc:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 80032be:	edd7 7a03 	vldr	s15, [r7, #12]
 80032c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032c6:	ee17 3a90 	vmov	r3, s15
 80032ca:	617b      	str	r3, [r7, #20]
    float fpart;

    int i;

    if( n < 0 )
 80032cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80032d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d8:	d50d      	bpl.n	80032f6 <ftoa+0x46>
    	// Extract floating part
    	fpart = -(n - (float)ipart);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	ee07 3a90 	vmov	s15, r3
 80032e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80032e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ec:	eef1 7a67 	vneg.f32	s15, s15
 80032f0:	edc7 7a07 	vstr	s15, [r7, #28]
 80032f4:	e00a      	b.n	800330c <ftoa+0x5c>
    else
    	// Extract floating part
    	fpart = n - (float)ipart;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	ee07 3a90 	vmov	s15, r3
 80032fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003300:	ed97 7a03 	vldr	s14, [r7, #12]
 8003304:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003308:	edc7 7a07 	vstr	s15, [r7, #28]

    // convert integer part to string when ipart is 0
    if( n < 1 && n > 0){
 800330c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331c:	d50c      	bpl.n	8003338 <ftoa+0x88>
 800331e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003322:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332a:	dd05      	ble.n	8003338 <ftoa+0x88>
    	res[0]= '0';
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2230      	movs	r2, #48	; 0x30
 8003330:	701a      	strb	r2, [r3, #0]
    	i= 1;
 8003332:	2301      	movs	r3, #1
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	e01f      	b.n	8003378 <ftoa+0xc8>
    }
    else
    if( n < 0 && n > -1){
 8003338:	edd7 7a03 	vldr	s15, [r7, #12]
 800333c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003344:	d512      	bpl.n	800336c <ftoa+0xbc>
 8003346:	edd7 7a03 	vldr	s15, [r7, #12]
 800334a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800334e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003356:	dd09      	ble.n	800336c <ftoa+0xbc>
    	res[0]= '-';
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	222d      	movs	r2, #45	; 0x2d
 800335c:	701a      	strb	r2, [r3, #0]
    	res[1]= '0';
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	3301      	adds	r3, #1
 8003362:	2230      	movs	r2, #48	; 0x30
 8003364:	701a      	strb	r2, [r3, #0]
    	i= 2;
 8003366:	2302      	movs	r3, #2
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	e005      	b.n	8003378 <ftoa+0xc8>
    }
    else
    	// convert integer part to string
    	i = itostr(ipart, res, 0);
 800336c:	2200      	movs	r2, #0
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	6978      	ldr	r0, [r7, #20]
 8003372:	f7ff ff41 	bl	80031f8 <itostr>
 8003376:	61b8      	str	r0, [r7, #24]

    // check for display option after point
    if (afterpoint != 0) {
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d030      	beq.n	80033e0 <ftoa+0x130>
        res[i] = '.';
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	4413      	add	r3, r2
 8003384:	222e      	movs	r2, #46	; 0x2e
 8003386:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 8003388:	69f8      	ldr	r0, [r7, #28]
 800338a:	f7fd f8fd 	bl	8000588 <__aeabi_f2d>
 800338e:	4604      	mov	r4, r0
 8003390:	460d      	mov	r5, r1
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd f8e6 	bl	8000564 <__aeabi_i2d>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	ec43 2b11 	vmov	d1, r2, r3
 80033a0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80033e8 <ftoa+0x138>
 80033a4:	f00e fc44 	bl	8011c30 <pow>
 80033a8:	ec53 2b10 	vmov	r2, r3, d0
 80033ac:	4620      	mov	r0, r4
 80033ae:	4629      	mov	r1, r5
 80033b0:	f7fd f942 	bl	8000638 <__aeabi_dmul>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	f7fd fc34 	bl	8000c28 <__aeabi_d2f>
 80033c0:	4603      	mov	r3, r0
 80033c2:	61fb      	str	r3, [r7, #28]
        itostr((int)fpart, res + i + 1, afterpoint);
 80033c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80033c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	3301      	adds	r3, #1
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	4413      	add	r3, r2
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4619      	mov	r1, r3
 80033d8:	ee17 0a90 	vmov	r0, s15
 80033dc:	f7ff ff0c 	bl	80031f8 <itostr>
    }
}
 80033e0:	bf00      	nop
 80033e2:	3720      	adds	r7, #32
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bdb0      	pop	{r4, r5, r7, pc}
 80033e8:	00000000 	.word	0x00000000
 80033ec:	40240000 	.word	0x40240000

080033f0 <DIFFDRIVE_Init>:


/* Functions Implementation */

// Initialization
void DIFFDRIVE_Init(DIFFDRIVE_HandleTypeDef* init_hdiffdrv){
 80033f0:	b5b0      	push	{r4, r5, r7, lr}
 80033f2:	b08a      	sub	sp, #40	; 0x28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]

	// Initializing global handle
	hdiffdrv= init_hdiffdrv;
 80033f8:	4aa0      	ldr	r2, [pc, #640]	; (800367c <DIFFDRIVE_Init+0x28c>)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6013      	str	r3, [r2, #0]

	// Assigning control struct
	DIFFDRIVE_CONTROL_TypeDef *hctrl= hdiffdrv->control;
 80033fe:	4b9f      	ldr	r3, [pc, #636]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003406:	623b      	str	r3, [r7, #32]

	// Initializing handle structure values from Init field
	hdiffdrv->timing.htim=       		   hdiffdrv->Init.timing_htim;
 8003408:	4b9c      	ldr	r3, [pc, #624]	; (800367c <DIFFDRIVE_Init+0x28c>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4b9b      	ldr	r3, [pc, #620]	; (800367c <DIFFDRIVE_Init+0x28c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003412:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	hdiffdrv->timing.time_step=   		   hdiffdrv->Init.timing_time_step;
 8003416:	4b99      	ldr	r3, [pc, #612]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b98      	ldr	r3, [pc, #608]	; (800367c <DIFFDRIVE_Init+0x28c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003420:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	hdiffdrv->mech_prmtr.r=     		   hdiffdrv->Init.mech_prmtr_r;
 8003424:	4b95      	ldr	r3, [pc, #596]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b94      	ldr	r3, [pc, #592]	; (800367c <DIFFDRIVE_Init+0x28c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800342e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	hdiffdrv->mech_prmtr.l=    			   hdiffdrv->Init.mech_prmtr_l;
 8003432:	4b92      	ldr	r3, [pc, #584]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4b91      	ldr	r3, [pc, #580]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800343c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	hdiffdrv->mech_prmtr.max_wheel_speed=  hdiffdrv->Init.mech_prmtr_max_wheel_speed;
 8003440:	4b8e      	ldr	r3, [pc, #568]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4b8d      	ldr	r3, [pc, #564]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800344a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800344e:	2300      	movs	r3, #0
 8003450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003454:	e201      	b.n	800385a <DIFFDRIVE_Init+0x46a>

		// Initializing feedforward Control handle structure values from Init field
		hctrl[side].fdfrwrd.Init.arma_n_ar=  hdiffdrv->Init.control_fdfrwrd_arma_n_ar[side];
 8003456:	4b89      	ldr	r3, [pc, #548]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003458:	6819      	ldr	r1, [r3, #0]
 800345a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800345e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003462:	2068      	movs	r0, #104	; 0x68
 8003464:	fb00 f202 	mul.w	r2, r0, r2
 8003468:	6a38      	ldr	r0, [r7, #32]
 800346a:	4402      	add	r2, r0
 800346c:	3330      	adds	r3, #48	; 0x30
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	440b      	add	r3, r1
 8003472:	889b      	ldrh	r3, [r3, #4]
 8003474:	8013      	strh	r3, [r2, #0]
		hctrl[side].fdfrwrd.Init.arma_n_ma=  hdiffdrv->Init.control_fdfrwrd_arma_n_ma[side];
 8003476:	4b81      	ldr	r3, [pc, #516]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800347e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003482:	2068      	movs	r0, #104	; 0x68
 8003484:	fb00 f303 	mul.w	r3, r0, r3
 8003488:	6a38      	ldr	r0, [r7, #32]
 800348a:	4403      	add	r3, r0
 800348c:	3134      	adds	r1, #52	; 0x34
 800348e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003492:	805a      	strh	r2, [r3, #2]
		hctrl[side].fdfrwrd.Init.arma_AR=    hdiffdrv->Init.control_fdfrwrd_arma_AR[side];
 8003494:	4b79      	ldr	r3, [pc, #484]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800349c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034a0:	2068      	movs	r0, #104	; 0x68
 80034a2:	fb00 f303 	mul.w	r3, r0, r3
 80034a6:	6a38      	ldr	r0, [r7, #32]
 80034a8:	4403      	add	r3, r0
 80034aa:	311c      	adds	r1, #28
 80034ac:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80034b0:	609a      	str	r2, [r3, #8]
		hctrl[side].fdfrwrd.Init.arma_MA=    hdiffdrv->Init.control_fdfrwrd_arma_MA[side];
 80034b2:	4b72      	ldr	r3, [pc, #456]	; (800367c <DIFFDRIVE_Init+0x28c>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80034ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034be:	2068      	movs	r0, #104	; 0x68
 80034c0:	fb00 f303 	mul.w	r3, r0, r3
 80034c4:	6a38      	ldr	r0, [r7, #32]
 80034c6:	4403      	add	r3, r0
 80034c8:	311e      	adds	r1, #30
 80034ca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80034ce:	60da      	str	r2, [r3, #12]
		hctrl[side].fdfrwrd.Init.arma_tau=   hdiffdrv->Init.control_fdfrwrd_arma_tau[side];
 80034d0:	4b6a      	ldr	r3, [pc, #424]	; (800367c <DIFFDRIVE_Init+0x28c>)
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80034dc:	2068      	movs	r0, #104	; 0x68
 80034de:	fb00 f202 	mul.w	r2, r0, r2
 80034e2:	6a38      	ldr	r0, [r7, #32]
 80034e4:	4402      	add	r2, r0
 80034e6:	3334      	adds	r3, #52	; 0x34
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	440b      	add	r3, r1
 80034ec:	889b      	ldrh	r3, [r3, #4]
 80034ee:	8093      	strh	r3, [r2, #4]

		// Init feedforward struct
		FEEDFORWARD_Init(&hctrl[side].fdfrwrd);
 80034f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034f4:	2268      	movs	r2, #104	; 0x68
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	6a3a      	ldr	r2, [r7, #32]
 80034fc:	4413      	add	r3, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 fd7c 	bl	8004ffc <FEEDFORWARD_Init>

		// Initializing pid Control handle structure values from Init field
		hctrl[side].pid.Init.P=  hdiffdrv->Init.control_pid_P[side];
 8003504:	4b5d      	ldr	r3, [pc, #372]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003506:	6819      	ldr	r1, [r3, #0]
 8003508:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800350c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003510:	2068      	movs	r0, #104	; 0x68
 8003512:	fb00 f303 	mul.w	r3, r0, r3
 8003516:	6a38      	ldr	r0, [r7, #32]
 8003518:	4403      	add	r3, r0
 800351a:	3220      	adds	r2, #32
 800351c:	0092      	lsls	r2, r2, #2
 800351e:	440a      	add	r2, r1
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	635a      	str	r2, [r3, #52]	; 0x34
		hctrl[side].pid.Init.I=  hdiffdrv->Init.control_pid_I[side];
 8003524:	4b55      	ldr	r3, [pc, #340]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003526:	6819      	ldr	r1, [r3, #0]
 8003528:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800352c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003530:	2068      	movs	r0, #104	; 0x68
 8003532:	fb00 f303 	mul.w	r3, r0, r3
 8003536:	6a38      	ldr	r0, [r7, #32]
 8003538:	4403      	add	r3, r0
 800353a:	3222      	adds	r2, #34	; 0x22
 800353c:	0092      	lsls	r2, r2, #2
 800353e:	440a      	add	r2, r1
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	639a      	str	r2, [r3, #56]	; 0x38
		hctrl[side].pid.Init.D=  hdiffdrv->Init.control_pid_D[side];
 8003544:	4b4d      	ldr	r3, [pc, #308]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003546:	6819      	ldr	r1, [r3, #0]
 8003548:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800354c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003550:	2068      	movs	r0, #104	; 0x68
 8003552:	fb00 f303 	mul.w	r3, r0, r3
 8003556:	6a38      	ldr	r0, [r7, #32]
 8003558:	4403      	add	r3, r0
 800355a:	3224      	adds	r2, #36	; 0x24
 800355c:	0092      	lsls	r2, r2, #2
 800355e:	440a      	add	r2, r1
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	63da      	str	r2, [r3, #60]	; 0x3c
		hctrl[side].pid.Init.Ts= hdiffdrv->timing.time_step;
 8003564:	4b45      	ldr	r3, [pc, #276]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800356c:	2168      	movs	r1, #104	; 0x68
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	6a39      	ldr	r1, [r7, #32]
 8003574:	440b      	add	r3, r1
 8003576:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 800357a:	641a      	str	r2, [r3, #64]	; 0x40

		// Init feedforward struct
		PID_Init(&hctrl[side].pid);
 800357c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003580:	2268      	movs	r2, #104	; 0x68
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	6a3a      	ldr	r2, [r7, #32]
 8003588:	4413      	add	r3, r2
 800358a:	3334      	adds	r3, #52	; 0x34
 800358c:	4618      	mov	r0, r3
 800358e:	f001 ff16 	bl	80053be <PID_Init>

		// Sensors
		hdiffdrv->encoder[side].htim=       hdiffdrv->Init.encoder_htim[side];
 8003592:	4b3a      	ldr	r3, [pc, #232]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800359a:	4a38      	ldr	r2, [pc, #224]	; (800367c <DIFFDRIVE_Init+0x28c>)
 800359c:	6810      	ldr	r0, [r2, #0]
 800359e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80035a2:	310e      	adds	r1, #14
 80035a4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4403      	add	r3, r0
 80035b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80035b6:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].channel=    hdiffdrv->Init.encoder_channel[side];
 80035b8:	4b30      	ldr	r3, [pc, #192]	; (800367c <DIFFDRIVE_Init+0x28c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80035c0:	4a2e      	ldr	r2, [pc, #184]	; (800367c <DIFFDRIVE_Init+0x28c>)
 80035c2:	6810      	ldr	r0, [r2, #0]
 80035c4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80035c8:	3110      	adds	r1, #16
 80035ca:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4403      	add	r3, r0
 80035d8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80035dc:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].resolution= hdiffdrv->Init.encoder_resolution[side];
 80035de:	4b27      	ldr	r3, [pc, #156]	; (800367c <DIFFDRIVE_Init+0x28c>)
 80035e0:	6819      	ldr	r1, [r3, #0]
 80035e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035e6:	4a25      	ldr	r2, [pc, #148]	; (800367c <DIFFDRIVE_Init+0x28c>)
 80035e8:	6810      	ldr	r0, [r2, #0]
 80035ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80035ee:	3316      	adds	r3, #22
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	3304      	adds	r3, #4
 80035f6:	6819      	ldr	r1, [r3, #0]
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4403      	add	r3, r0
 8003602:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003606:	6019      	str	r1, [r3, #0]

		// Motors
		hdiffdrv->motor[side].supply_voltage= hdiffdrv->Init.motor_supply_voltage[side];
 8003608:	4b1c      	ldr	r3, [pc, #112]	; (800367c <DIFFDRIVE_Init+0x28c>)
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003610:	4b1a      	ldr	r3, [pc, #104]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003612:	6819      	ldr	r1, [r3, #0]
 8003614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003618:	3208      	adds	r2, #8
 800361a:	0092      	lsls	r2, r2, #2
 800361c:	4402      	add	r2, r0
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	202c      	movs	r0, #44	; 0x2c
 8003622:	fb00 f303 	mul.w	r3, r0, r3
 8003626:	440b      	add	r3, r1
 8003628:	33b8      	adds	r3, #184	; 0xb8
 800362a:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].max_voltage=    hdiffdrv->Init.motor_max_voltage[side];
 800362c:	4b13      	ldr	r3, [pc, #76]	; (800367c <DIFFDRIVE_Init+0x28c>)
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800363c:	320a      	adds	r2, #10
 800363e:	0092      	lsls	r2, r2, #2
 8003640:	4402      	add	r2, r0
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	202c      	movs	r0, #44	; 0x2c
 8003646:	fb00 f303 	mul.w	r3, r0, r3
 800364a:	440b      	add	r3, r1
 800364c:	33bc      	adds	r3, #188	; 0xbc
 800364e:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].min_voltage=    hdiffdrv->Init.motor_min_voltage[side];
 8003650:	4b0a      	ldr	r3, [pc, #40]	; (800367c <DIFFDRIVE_Init+0x28c>)
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003658:	4b08      	ldr	r3, [pc, #32]	; (800367c <DIFFDRIVE_Init+0x28c>)
 800365a:	6819      	ldr	r1, [r3, #0]
 800365c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003660:	320c      	adds	r2, #12
 8003662:	0092      	lsls	r2, r2, #2
 8003664:	4402      	add	r2, r0
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	202c      	movs	r0, #44	; 0x2c
 800366a:	fb00 f303 	mul.w	r3, r0, r3
 800366e:	440b      	add	r3, r1
 8003670:	33c0      	adds	r3, #192	; 0xc0
 8003672:	601a      	str	r2, [r3, #0]

		// Starting Motor Timer
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 8003674:	2300      	movs	r3, #0
 8003676:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800367a:	e05d      	b.n	8003738 <DIFFDRIVE_Init+0x348>
 800367c:	200073ac 	.word	0x200073ac
			hdiffdrv->motor[side].htim[dir]= hdiffdrv->Init.motor_htim[side][dir];
 8003680:	4bc2      	ldr	r3, [pc, #776]	; (800398c <DIFFDRIVE_Init+0x59c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 8003688:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 800368c:	4abf      	ldr	r2, [pc, #764]	; (800398c <DIFFDRIVE_Init+0x59c>)
 800368e:	6811      	ldr	r1, [r2, #0]
 8003690:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003694:	f997 4026 	ldrsb.w	r4, [r7, #38]	; 0x26
 8003698:	006d      	lsls	r5, r5, #1
 800369a:	4428      	add	r0, r5
 800369c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	4413      	add	r3, r2
 80036aa:	4423      	add	r3, r4
 80036ac:	332a      	adds	r3, #42	; 0x2a
 80036ae:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

			hdiffdrv->motor[side].pwm_channel[dir]= hdiffdrv->Init.motor_pwm_channel[side][dir];
 80036b2:	4bb6      	ldr	r3, [pc, #728]	; (800398c <DIFFDRIVE_Init+0x59c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 80036ba:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 80036be:	4ab3      	ldr	r2, [pc, #716]	; (800398c <DIFFDRIVE_Init+0x59c>)
 80036c0:	6811      	ldr	r1, [r2, #0]
 80036c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80036c6:	f997 4026 	ldrsb.w	r4, [r7, #38]	; 0x26
 80036ca:	006d      	lsls	r5, r5, #1
 80036cc:	4428      	add	r0, r5
 80036ce:	3004      	adds	r0, #4
 80036d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4413      	add	r3, r2
 80036de:	4423      	add	r3, r4
 80036e0:	332c      	adds	r3, #44	; 0x2c
 80036e2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
			HAL_TIM_PWM_Start(hdiffdrv->motor[side].htim[dir], hdiffdrv->motor[side].pwm_channel[dir]);
 80036e6:	4ba9      	ldr	r3, [pc, #676]	; (800398c <DIFFDRIVE_Init+0x59c>)
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80036ee:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4413      	add	r3, r2
 80036fc:	4403      	add	r3, r0
 80036fe:	332a      	adds	r3, #42	; 0x2a
 8003700:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8003704:	4ba1      	ldr	r3, [pc, #644]	; (800398c <DIFFDRIVE_Init+0x59c>)
 8003706:	6819      	ldr	r1, [r3, #0]
 8003708:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800370c:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	4413      	add	r3, r2
 800371a:	4403      	add	r3, r0
 800371c:	332c      	adds	r3, #44	; 0x2c
 800371e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003722:	4619      	mov	r1, r3
 8003724:	4620      	mov	r0, r4
 8003726:	f003 ff51 	bl	80075cc <HAL_TIM_PWM_Start>
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 800372a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800372e:	b2db      	uxtb	r3, r3
 8003730:	3301      	adds	r3, #1
 8003732:	b2db      	uxtb	r3, r3
 8003734:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003738:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800373c:	2b01      	cmp	r3, #1
 800373e:	dd9f      	ble.n	8003680 <DIFFDRIVE_Init+0x290>
		}

	    // Computing duty beat ranges
		float supply_volt= hdiffdrv->motor[side].supply_voltage;
 8003740:	4b92      	ldr	r3, [pc, #584]	; (800398c <DIFFDRIVE_Init+0x59c>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003748:	212c      	movs	r1, #44	; 0x2c
 800374a:	fb01 f303 	mul.w	r3, r1, r3
 800374e:	4413      	add	r3, r2
 8003750:	33b8      	adds	r3, #184	; 0xb8
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	617b      	str	r3, [r7, #20]
		float min_volt=	   hdiffdrv->motor[side].min_voltage;
 8003756:	4b8d      	ldr	r3, [pc, #564]	; (800398c <DIFFDRIVE_Init+0x59c>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800375e:	212c      	movs	r1, #44	; 0x2c
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	4413      	add	r3, r2
 8003766:	33c0      	adds	r3, #192	; 0xc0
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	613b      	str	r3, [r7, #16]
		float max_volt=    hdiffdrv->motor[side].max_voltage;
 800376c:	4b87      	ldr	r3, [pc, #540]	; (800398c <DIFFDRIVE_Init+0x59c>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003774:	212c      	movs	r1, #44	; 0x2c
 8003776:	fb01 f303 	mul.w	r3, r1, r3
 800377a:	4413      	add	r3, r2
 800377c:	33bc      	adds	r3, #188	; 0xbc
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60fb      	str	r3, [r7, #12]

		// Forward or backward are the same in this case, I use timers with the same parameters
		hdiffdrv->motor[side].duty_beat_min= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*min_volt/supply_volt;
 8003782:	4b82      	ldr	r3, [pc, #520]	; (800398c <DIFFDRIVE_Init+0x59c>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800378a:	212c      	movs	r1, #44	; 0x2c
 800378c:	fb01 f303 	mul.w	r3, r1, r3
 8003790:	4413      	add	r3, r2
 8003792:	33a8      	adds	r3, #168	; 0xa8
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	ee07 3a90 	vmov	s15, r3
 800379e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80037a6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80037aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80037ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037b2:	4b76      	ldr	r3, [pc, #472]	; (800398c <DIFFDRIVE_Init+0x59c>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037be:	ee17 0a90 	vmov	r0, s15
 80037c2:	212c      	movs	r1, #44	; 0x2c
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	33c4      	adds	r3, #196	; 0xc4
 80037cc:	6018      	str	r0, [r3, #0]
		hdiffdrv->motor[side].duty_beat_max= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*max_volt/supply_volt;
 80037ce:	4b6f      	ldr	r3, [pc, #444]	; (800398c <DIFFDRIVE_Init+0x59c>)
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037d6:	212c      	movs	r1, #44	; 0x2c
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	4413      	add	r3, r2
 80037de:	33a8      	adds	r3, #168	; 0xa8
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80037f2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80037f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80037fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037fe:	4b63      	ldr	r3, [pc, #396]	; (800398c <DIFFDRIVE_Init+0x59c>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800380a:	ee17 0a90 	vmov	r0, s15
 800380e:	212c      	movs	r1, #44	; 0x2c
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	4413      	add	r3, r2
 8003816:	33c8      	adds	r3, #200	; 0xc8
 8003818:	6018      	str	r0, [r3, #0]

		// Starting Sensors
		HAL_TIM_Encoder_Start(hdiffdrv->encoder[side].htim, hdiffdrv->encoder[side].channel);
 800381a:	4b5c      	ldr	r3, [pc, #368]	; (800398c <DIFFDRIVE_Init+0x59c>)
 800381c:	6819      	ldr	r1, [r3, #0]
 800381e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	4b56      	ldr	r3, [pc, #344]	; (800398c <DIFFDRIVE_Init+0x59c>)
 8003834:	6819      	ldr	r1, [r3, #0]
 8003836:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4619      	mov	r1, r3
 800384c:	f004 fa76 	bl	8007d3c <HAL_TIM_Encoder_Start>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003854:	3301      	adds	r3, #1
 8003856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800385a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800385e:	2b01      	cmp	r3, #1
 8003860:	f67f adf9 	bls.w	8003456 <DIFFDRIVE_Init+0x66>

	}

	// Initialize pose
	hdiffdrv->state.pose.x_a   +=  0;
 8003864:	4b49      	ldr	r3, [pc, #292]	; (800398c <DIFFDRIVE_Init+0x59c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	edd3 7a7e 	vldr	s15, [r3, #504]	; 0x1f8
 800386c:	4b47      	ldr	r3, [pc, #284]	; (800398c <DIFFDRIVE_Init+0x59c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003990 <DIFFDRIVE_Init+0x5a0>
 8003874:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003878:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
	hdiffdrv->state.pose.y_a   +=  0;
 800387c:	4b43      	ldr	r3, [pc, #268]	; (800398c <DIFFDRIVE_Init+0x59c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	edd3 7a7f 	vldr	s15, [r3, #508]	; 0x1fc
 8003884:	4b41      	ldr	r3, [pc, #260]	; (800398c <DIFFDRIVE_Init+0x59c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003990 <DIFFDRIVE_Init+0x5a0>
 800388c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003890:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
	hdiffdrv->state.pose.theta +=  0;
 8003894:	4b3d      	ldr	r3, [pc, #244]	; (800398c <DIFFDRIVE_Init+0x59c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800389c:	4b3b      	ldr	r3, [pc, #236]	; (800398c <DIFFDRIVE_Init+0x59c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003990 <DIFFDRIVE_Init+0x5a0>
 80038a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038a8:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200

	// Allocating history' arrays
	hdiffdrv->history.max_sample= hdiffdrv->Init.history_max_sample;
 80038ac:	4b37      	ldr	r3, [pc, #220]	; (800398c <DIFFDRIVE_Init+0x59c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80038b4:	4b35      	ldr	r3, [pc, #212]	; (800398c <DIFFDRIVE_Init+0x59c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230

	// Allocate all variables with zeros (calloc)
	hdiffdrv->history.state_target=  (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 80038bc:	4b33      	ldr	r3, [pc, #204]	; (800398c <DIFFDRIVE_Init+0x59c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80038c4:	4a31      	ldr	r2, [pc, #196]	; (800398c <DIFFDRIVE_Init+0x59c>)
 80038c6:	6814      	ldr	r4, [r2, #0]
 80038c8:	2124      	movs	r1, #36	; 0x24
 80038ca:	4618      	mov	r0, r3
 80038cc:	f009 fc9e 	bl	800d20c <calloc>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
	hdiffdrv->history.state_measure= (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 80038d6:	4b2d      	ldr	r3, [pc, #180]	; (800398c <DIFFDRIVE_Init+0x59c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80038de:	4a2b      	ldr	r2, [pc, #172]	; (800398c <DIFFDRIVE_Init+0x59c>)
 80038e0:	6814      	ldr	r4, [r2, #0]
 80038e2:	2124      	movs	r1, #36	; 0x24
 80038e4:	4618      	mov	r0, r3
 80038e6:	f009 fc91 	bl	800d20c <calloc>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c

	// Initializing time index
	hdiffdrv->history.index= 0;
 80038f0:	4b26      	ldr	r3, [pc, #152]	; (800398c <DIFFDRIVE_Init+0x59c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	hdiffdrv->history.sample_cnt= 0;
 80038fa:	4b24      	ldr	r3, [pc, #144]	; (800398c <DIFFDRIVE_Init+0x59c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2200      	movs	r2, #0
 8003900:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

	// Reset timing flag
	hdiffdrv->timing.flag= false;
 8003904:	4b21      	ldr	r3, [pc, #132]	; (800398c <DIFFDRIVE_Init+0x59c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4


	/* Computing prescaler ad autoreload period to obtain an update event with frequency 1/timing.time_step Hertz */

	DIFFDRIVE_TIMING_TypeDef* timing= &(hdiffdrv->timing);
 800390e:	4b1f      	ldr	r3, [pc, #124]	; (800398c <DIFFDRIVE_Init+0x59c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	339c      	adds	r3, #156	; 0x9c
 8003914:	61fb      	str	r3, [r7, #28]

	uint16_t prescaler=  __MYLIB_GET_TIMER_CLK(timing->htim)*10/1e6 - 1;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <DIFFDRIVE_Init+0x5a4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d017      	beq.n	8003952 <DIFFDRIVE_Init+0x562>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <DIFFDRIVE_Init+0x5a8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d011      	beq.n	8003952 <DIFFDRIVE_Init+0x562>
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a19      	ldr	r2, [pc, #100]	; (800399c <DIFFDRIVE_Init+0x5ac>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00b      	beq.n	8003952 <DIFFDRIVE_Init+0x562>
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a17      	ldr	r2, [pc, #92]	; (80039a0 <DIFFDRIVE_Init+0x5b0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d005      	beq.n	8003952 <DIFFDRIVE_Init+0x562>
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a15      	ldr	r2, [pc, #84]	; (80039a4 <DIFFDRIVE_Init+0x5b4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d12c      	bne.n	80039ac <DIFFDRIVE_Init+0x5bc>
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <DIFFDRIVE_Init+0x5b8>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <DIFFDRIVE_Init+0x584>
 800395e:	f002 ffad 	bl	80068bc <HAL_RCC_GetPCLK2Freq>
 8003962:	4602      	mov	r2, r0
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fde9 	bl	8000544 <__aeabi_ui2d>
 8003972:	e036      	b.n	80039e2 <DIFFDRIVE_Init+0x5f2>
 8003974:	f002 ffa2 	bl	80068bc <HAL_RCC_GetPCLK2Freq>
 8003978:	4602      	mov	r2, r0
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4618      	mov	r0, r3
 8003984:	f7fc fdde 	bl	8000544 <__aeabi_ui2d>
 8003988:	e02b      	b.n	80039e2 <DIFFDRIVE_Init+0x5f2>
 800398a:	bf00      	nop
 800398c:	200073ac 	.word	0x200073ac
 8003990:	00000000 	.word	0x00000000
 8003994:	40010000 	.word	0x40010000
 8003998:	40010400 	.word	0x40010400
 800399c:	40014000 	.word	0x40014000
 80039a0:	40014400 	.word	0x40014400
 80039a4:	40014800 	.word	0x40014800
 80039a8:	40023800 	.word	0x40023800
 80039ac:	4b56      	ldr	r3, [pc, #344]	; (8003b08 <DIFFDRIVE_Init+0x718>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <DIFFDRIVE_Init+0x5de>
 80039b8:	f002 ff6c 	bl	8006894 <HAL_RCC_GetPCLK1Freq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fc fdbc 	bl	8000544 <__aeabi_ui2d>
 80039cc:	e009      	b.n	80039e2 <DIFFDRIVE_Init+0x5f2>
 80039ce:	f002 ff61 	bl	8006894 <HAL_RCC_GetPCLK1Freq>
 80039d2:	4602      	mov	r2, r0
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fc fdb1 	bl	8000544 <__aeabi_ui2d>
 80039e2:	a347      	add	r3, pc, #284	; (adr r3, 8003b00 <DIFFDRIVE_Init+0x710>)
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f7fc ff50 	bl	800088c <__aeabi_ddiv>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	4b44      	ldr	r3, [pc, #272]	; (8003b0c <DIFFDRIVE_Init+0x71c>)
 80039fa:	f7fc fc65 	bl	80002c8 <__aeabi_dsub>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4610      	mov	r0, r2
 8003a04:	4619      	mov	r1, r3
 8003a06:	f7fd f8ef 	bl	8000be8 <__aeabi_d2uiz>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	837b      	strh	r3, [r7, #26]
	// Guessing is a 16bit autoreload timer to avoid troubles
	uint16_t autoreload= __MYLIB_GET_TIMER_CLK(timing->htim)/( (prescaler+1)*1/timing->time_step ) - 1;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a3e      	ldr	r2, [pc, #248]	; (8003b10 <DIFFDRIVE_Init+0x720>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d017      	beq.n	8003a4a <DIFFDRIVE_Init+0x65a>
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a3c      	ldr	r2, [pc, #240]	; (8003b14 <DIFFDRIVE_Init+0x724>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d011      	beq.n	8003a4a <DIFFDRIVE_Init+0x65a>
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a3a      	ldr	r2, [pc, #232]	; (8003b18 <DIFFDRIVE_Init+0x728>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00b      	beq.n	8003a4a <DIFFDRIVE_Init+0x65a>
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a38      	ldr	r2, [pc, #224]	; (8003b1c <DIFFDRIVE_Init+0x72c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d005      	beq.n	8003a4a <DIFFDRIVE_Init+0x65a>
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a36      	ldr	r2, [pc, #216]	; (8003b20 <DIFFDRIVE_Init+0x730>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d115      	bne.n	8003a76 <DIFFDRIVE_Init+0x686>
 8003a4a:	4b2f      	ldr	r3, [pc, #188]	; (8003b08 <DIFFDRIVE_Init+0x718>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <DIFFDRIVE_Init+0x674>
 8003a56:	f002 ff31 	bl	80068bc <HAL_RCC_GetPCLK2Freq>
 8003a5a:	ee07 0a90 	vmov	s15, r0
 8003a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a62:	e01d      	b.n	8003aa0 <DIFFDRIVE_Init+0x6b0>
 8003a64:	f002 ff2a 	bl	80068bc <HAL_RCC_GetPCLK2Freq>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	ee07 3a90 	vmov	s15, r3
 8003a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a74:	e014      	b.n	8003aa0 <DIFFDRIVE_Init+0x6b0>
 8003a76:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <DIFFDRIVE_Init+0x718>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <DIFFDRIVE_Init+0x6a0>
 8003a82:	f002 ff07 	bl	8006894 <HAL_RCC_GetPCLK1Freq>
 8003a86:	ee07 0a90 	vmov	s15, r0
 8003a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8e:	e007      	b.n	8003aa0 <DIFFDRIVE_Init+0x6b0>
 8003a90:	f002 ff00 	bl	8006894 <HAL_RCC_GetPCLK1Freq>
 8003a94:	4603      	mov	r3, r0
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	ee07 3a90 	vmov	s15, r3
 8003a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa0:	8b7b      	ldrh	r3, [r7, #26]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	ee07 3a10 	vmov	s14, r3
 8003aa8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ab2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003ab6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003aba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ac6:	ee17 3a90 	vmov	r3, s15
 8003aca:	833b      	strh	r3, [r7, #24]

	// Set counter with computed prescaler and autoreload period
	__HAL_TIM_SET_PRESCALER(timing->htim, prescaler);
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	8b7a      	ldrh	r2, [r7, #26]
 8003ad4:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(timing->htim, autoreload);
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	8b3a      	ldrh	r2, [r7, #24]
 8003ade:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	8b3a      	ldrh	r2, [r7, #24]
 8003ae6:	60da      	str	r2, [r3, #12]

	// Assigning callback for timing purpose
	timing->htim->PeriodElapsedCallback= DIFFDRIVE_TIMING_Callback;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a0d      	ldr	r2, [pc, #52]	; (8003b24 <DIFFDRIVE_Init+0x734>)
 8003aee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	// Reset timing flag
	timing->flag= false;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2200      	movs	r2, #0
 8003af6:	721a      	strb	r2, [r3, #8]

}
 8003af8:	bf00      	nop
 8003afa:	3728      	adds	r7, #40	; 0x28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bdb0      	pop	{r4, r5, r7, pc}
 8003b00:	00000000 	.word	0x00000000
 8003b04:	412e8480 	.word	0x412e8480
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	3ff00000 	.word	0x3ff00000
 8003b10:	40010000 	.word	0x40010000
 8003b14:	40010400 	.word	0x40010400
 8003b18:	40014000 	.word	0x40014000
 8003b1c:	40014400 	.word	0x40014400
 8003b20:	40014800 	.word	0x40014800
 8003b24:	08004e25 	.word	0x08004e25

08003b28 <DIFFDRIVE_MOTOR_Stop>:
	free(hdiffdrv->history.state_target);

}


void DIFFDRIVE_MOTOR_Stop(){
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0

	// Set motors to 0 volt
	DIFFDRIVE_MOTOR_SetPWMs((float[2]){0,0});
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	607b      	str	r3, [r7, #4]
 8003b3a:	463b      	mov	r3, r7
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 f805 	bl	8003b4c <DIFFDRIVE_MOTOR_SetPWMs>

}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <DIFFDRIVE_MOTOR_SetPWMs>:


void DIFFDRIVE_MOTOR_SetPWMs(float* input){
 8003b4c:	b480      	push	{r7}
 8003b4e:	b089      	sub	sp, #36	; 0x24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_MOTOR_TypeDef *tmp_mtr= hdiffdrv->motor;
 8003b54:	4bb4      	ldr	r3, [pc, #720]	; (8003e28 <DIFFDRIVE_MOTOR_SetPWMs+0x2dc>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	33a8      	adds	r3, #168	; 0xa8
 8003b5a:	61bb      	str	r3, [r7, #24]
	float tmp_input[2];
	float supply_volt;

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	e0c8      	b.n	8003cf4 <DIFFDRIVE_MOTOR_SetPWMs+0x1a8>

		tmp_input[side]= input[side];
 8003b62:	7ffb      	ldrb	r3, [r7, #31]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	441a      	add	r2, r3
 8003b6a:	7ffb      	ldrb	r3, [r7, #31]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	f107 0120 	add.w	r1, r7, #32
 8003b74:	440b      	add	r3, r1
 8003b76:	3b14      	subs	r3, #20
 8003b78:	601a      	str	r2, [r3, #0]

		supply_volt= tmp_mtr[side].supply_voltage;
 8003b7a:	7ffb      	ldrb	r3, [r7, #31]
 8003b7c:	222c      	movs	r2, #44	; 0x2c
 8003b7e:	fb02 f303 	mul.w	r3, r2, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4413      	add	r3, r2
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	617b      	str	r3, [r7, #20]

		if(tmp_input[side] > 0){
 8003b8a:	7ffb      	ldrb	r3, [r7, #31]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	f107 0220 	add.w	r2, r7, #32
 8003b92:	4413      	add	r3, r2
 8003b94:	3b14      	subs	r3, #20
 8003b96:	edd3 7a00 	vldr	s15, [r3]
 8003b9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba2:	dd09      	ble.n	8003bb8 <DIFFDRIVE_MOTOR_SetPWMs+0x6c>
			// Set direction
			tmp_mtr[side].direction= forward;
 8003ba4:	7ffb      	ldrb	r3, [r7, #31]
 8003ba6:	222c      	movs	r2, #44	; 0x2c
 8003ba8:	fb02 f303 	mul.w	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4413      	add	r3, r2
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003bb6:	e027      	b.n	8003c08 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
		}
		else
		if(tmp_input[side] < 0){
 8003bb8:	7ffb      	ldrb	r3, [r7, #31]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	f107 0220 	add.w	r2, r7, #32
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3b14      	subs	r3, #20
 8003bc4:	edd3 7a00 	vldr	s15, [r3]
 8003bc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd0:	d51a      	bpl.n	8003c08 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
			// Set direction
			tmp_mtr[side].direction= backward;
 8003bd2:	7ffb      	ldrb	r3, [r7, #31]
 8003bd4:	222c      	movs	r2, #44	; 0x2c
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4413      	add	r3, r2
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			// Abs of input
			tmp_input[side]= -tmp_input[side];
 8003be4:	7ffb      	ldrb	r3, [r7, #31]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	f107 0220 	add.w	r2, r7, #32
 8003bec:	4413      	add	r3, r2
 8003bee:	3b14      	subs	r3, #20
 8003bf0:	edd3 7a00 	vldr	s15, [r3]
 8003bf4:	7ffb      	ldrb	r3, [r7, #31]
 8003bf6:	eef1 7a67 	vneg.f32	s15, s15
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	f107 0220 	add.w	r2, r7, #32
 8003c00:	4413      	add	r3, r2
 8003c02:	3b14      	subs	r3, #20
 8003c04:	edc3 7a00 	vstr	s15, [r3]
		}

		// Duty beat proportional to input voltage plus a minimum duty beat (so, if input is near zero
		// duty beat is near its minimum. DC motors need to reach a tension threshold before moving)
		// Also: forward or backward are the same in this case, I use timers with the same parameters
		tmp_mtr[side].duty_beat  = __HAL_TIM_GET_AUTORELOAD(tmp_mtr[side].htim[forward])*tmp_input[side]/supply_volt;
 8003c08:	7ffb      	ldrb	r3, [r7, #31]
 8003c0a:	222c      	movs	r2, #44	; 0x2c
 8003c0c:	fb02 f303 	mul.w	r3, r2, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4413      	add	r3, r2
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c22:	7ffb      	ldrb	r3, [r7, #31]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	f107 0220 	add.w	r2, r7, #32
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3b14      	subs	r3, #20
 8003c2e:	edd3 7a00 	vldr	s15, [r3]
 8003c32:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003c36:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c3e:	7ffb      	ldrb	r3, [r7, #31]
 8003c40:	222c      	movs	r2, #44	; 0x2c
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4413      	add	r3, r2
 8003c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c4e:	ee17 2a90 	vmov	r2, s15
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24
		tmp_mtr[side].duty_beat += tmp_mtr[side].duty_beat_min;
 8003c54:	7ffb      	ldrb	r3, [r7, #31]
 8003c56:	222c      	movs	r2, #44	; 0x2c
 8003c58:	fb02 f303 	mul.w	r3, r2, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4413      	add	r3, r2
 8003c60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c62:	7ffb      	ldrb	r3, [r7, #31]
 8003c64:	222c      	movs	r2, #44	; 0x2c
 8003c66:	fb02 f303 	mul.w	r3, r2, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	7ffb      	ldrb	r3, [r7, #31]
 8003c72:	202c      	movs	r0, #44	; 0x2c
 8003c74:	fb00 f303 	mul.w	r3, r0, r3
 8003c78:	69b8      	ldr	r0, [r7, #24]
 8003c7a:	4403      	add	r3, r0
 8003c7c:	440a      	add	r2, r1
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24

		// Upper Saturation of duty cycle
		if( tmp_mtr[side].duty_beat > tmp_mtr[side].duty_beat_max )
 8003c80:	7ffb      	ldrb	r3, [r7, #31]
 8003c82:	222c      	movs	r2, #44	; 0x2c
 8003c84:	fb02 f303 	mul.w	r3, r2, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c8e:	7ffb      	ldrb	r3, [r7, #31]
 8003c90:	212c      	movs	r1, #44	; 0x2c
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	69b9      	ldr	r1, [r7, #24]
 8003c98:	440b      	add	r3, r1
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d90e      	bls.n	8003cbe <DIFFDRIVE_MOTOR_SetPWMs+0x172>
			tmp_mtr[side].duty_beat= tmp_mtr[side].duty_beat_max;
 8003ca0:	7ffb      	ldrb	r3, [r7, #31]
 8003ca2:	222c      	movs	r2, #44	; 0x2c
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	441a      	add	r2, r3
 8003cac:	7ffb      	ldrb	r3, [r7, #31]
 8003cae:	212c      	movs	r1, #44	; 0x2c
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	69b9      	ldr	r1, [r7, #24]
 8003cb6:	440b      	add	r3, r1
 8003cb8:	6a12      	ldr	r2, [r2, #32]
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24
 8003cbc:	e017      	b.n	8003cee <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
		else
		// Lower Saturation of duty cycle. If reach lower bound, set to zero to be sure to stop motors
		if( tmp_mtr[side].duty_beat == tmp_mtr[side].duty_beat_min )
 8003cbe:	7ffb      	ldrb	r3, [r7, #31]
 8003cc0:	222c      	movs	r2, #44	; 0x2c
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4413      	add	r3, r2
 8003cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ccc:	7ffb      	ldrb	r3, [r7, #31]
 8003cce:	212c      	movs	r1, #44	; 0x2c
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	69b9      	ldr	r1, [r7, #24]
 8003cd6:	440b      	add	r3, r1
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d107      	bne.n	8003cee <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
			tmp_mtr[side].duty_beat= 0;
 8003cde:	7ffb      	ldrb	r3, [r7, #31]
 8003ce0:	222c      	movs	r2, #44	; 0x2c
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4413      	add	r3, r2
 8003cea:	2200      	movs	r2, #0
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003cee:	7ffb      	ldrb	r3, [r7, #31]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	7ffb      	ldrb	r3, [r7, #31]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	f67f af33 	bls.w	8003b62 <DIFFDRIVE_MOTOR_SetPWMs+0x16>
	}

	// Set PWM signal
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	77bb      	strb	r3, [r7, #30]
 8003d00:	e14f      	b.n	8003fa2 <DIFFDRIVE_MOTOR_SetPWMs+0x456>

		// Set opposite direction (!direction) pin to 0
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[!(tmp_mtr[side].direction)],
 8003d02:	7fbb      	ldrb	r3, [r7, #30]
 8003d04:	222c      	movs	r2, #44	; 0x2c
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	7fba      	ldrb	r2, [r7, #30]
 8003d10:	212c      	movs	r1, #44	; 0x2c
 8003d12:	fb01 f202 	mul.w	r2, r1, r2
 8003d16:	69b9      	ldr	r1, [r7, #24]
 8003d18:	440a      	add	r2, r1
 8003d1a:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003d1e:	2a00      	cmp	r2, #0
 8003d20:	bf0c      	ite	eq
 8003d22:	2201      	moveq	r2, #1
 8003d24:	2200      	movne	r2, #0
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	3202      	adds	r2, #2
 8003d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d118      	bne.n	8003d64 <DIFFDRIVE_MOTOR_SetPWMs+0x218>
 8003d32:	7fbb      	ldrb	r3, [r7, #30]
 8003d34:	222c      	movs	r2, #44	; 0x2c
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	7fba      	ldrb	r2, [r7, #30]
 8003d40:	212c      	movs	r1, #44	; 0x2c
 8003d42:	fb01 f202 	mul.w	r2, r1, r2
 8003d46:	69b9      	ldr	r1, [r7, #24]
 8003d48:	440a      	add	r2, r1
 8003d4a:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003d4e:	2a00      	cmp	r2, #0
 8003d50:	bf0c      	ite	eq
 8003d52:	2201      	moveq	r2, #1
 8003d54:	2200      	movne	r2, #0
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	635a      	str	r2, [r3, #52]	; 0x34
 8003d62:	e07b      	b.n	8003e5c <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003d64:	7fbb      	ldrb	r3, [r7, #30]
 8003d66:	222c      	movs	r2, #44	; 0x2c
 8003d68:	fb02 f303 	mul.w	r3, r2, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4413      	add	r3, r2
 8003d70:	7fba      	ldrb	r2, [r7, #30]
 8003d72:	212c      	movs	r1, #44	; 0x2c
 8003d74:	fb01 f202 	mul.w	r2, r1, r2
 8003d78:	69b9      	ldr	r1, [r7, #24]
 8003d7a:	440a      	add	r2, r1
 8003d7c:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003d80:	2a00      	cmp	r2, #0
 8003d82:	bf0c      	ite	eq
 8003d84:	2201      	moveq	r2, #1
 8003d86:	2200      	movne	r2, #0
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	3202      	adds	r2, #2
 8003d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d118      	bne.n	8003dc6 <DIFFDRIVE_MOTOR_SetPWMs+0x27a>
 8003d94:	7fbb      	ldrb	r3, [r7, #30]
 8003d96:	222c      	movs	r2, #44	; 0x2c
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4413      	add	r3, r2
 8003da0:	7fba      	ldrb	r2, [r7, #30]
 8003da2:	212c      	movs	r1, #44	; 0x2c
 8003da4:	fb01 f202 	mul.w	r2, r1, r2
 8003da8:	69b9      	ldr	r1, [r7, #24]
 8003daa:	440a      	add	r2, r1
 8003dac:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003db0:	2a00      	cmp	r2, #0
 8003db2:	bf0c      	ite	eq
 8003db4:	2201      	moveq	r2, #1
 8003db6:	2200      	movne	r2, #0
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	6393      	str	r3, [r2, #56]	; 0x38
 8003dc4:	e04a      	b.n	8003e5c <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003dc6:	7fbb      	ldrb	r3, [r7, #30]
 8003dc8:	222c      	movs	r2, #44	; 0x2c
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	7fba      	ldrb	r2, [r7, #30]
 8003dd4:	212c      	movs	r1, #44	; 0x2c
 8003dd6:	fb01 f202 	mul.w	r2, r1, r2
 8003dda:	69b9      	ldr	r1, [r7, #24]
 8003ddc:	440a      	add	r2, r1
 8003dde:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003de2:	2a00      	cmp	r2, #0
 8003de4:	bf0c      	ite	eq
 8003de6:	2201      	moveq	r2, #1
 8003de8:	2200      	movne	r2, #0
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	3202      	adds	r2, #2
 8003dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d11a      	bne.n	8003e2c <DIFFDRIVE_MOTOR_SetPWMs+0x2e0>
 8003df6:	7fbb      	ldrb	r3, [r7, #30]
 8003df8:	222c      	movs	r2, #44	; 0x2c
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4413      	add	r3, r2
 8003e02:	7fba      	ldrb	r2, [r7, #30]
 8003e04:	212c      	movs	r1, #44	; 0x2c
 8003e06:	fb01 f202 	mul.w	r2, r1, r2
 8003e0a:	69b9      	ldr	r1, [r7, #24]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003e12:	2a00      	cmp	r2, #0
 8003e14:	bf0c      	ite	eq
 8003e16:	2201      	moveq	r2, #1
 8003e18:	2200      	movne	r2, #0
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	2300      	movs	r3, #0
 8003e24:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003e26:	e019      	b.n	8003e5c <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003e28:	200073ac 	.word	0x200073ac
 8003e2c:	7fbb      	ldrb	r3, [r7, #30]
 8003e2e:	222c      	movs	r2, #44	; 0x2c
 8003e30:	fb02 f303 	mul.w	r3, r2, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4413      	add	r3, r2
 8003e38:	7fba      	ldrb	r2, [r7, #30]
 8003e3a:	212c      	movs	r1, #44	; 0x2c
 8003e3c:	fb01 f202 	mul.w	r2, r1, r2
 8003e40:	69b9      	ldr	r1, [r7, #24]
 8003e42:	440a      	add	r2, r1
 8003e44:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003e48:	2a00      	cmp	r2, #0
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2201      	moveq	r2, #1
 8003e4e:	2200      	movne	r2, #0
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	6413      	str	r3, [r2, #64]	; 0x40
							  tmp_mtr[side].pwm_channel[!(tmp_mtr[side].direction)],
							  0  );

		// Set direction pin with the current duty cycle on PWM signal
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[(tmp_mtr[side].direction)],
 8003e5c:	7fbb      	ldrb	r3, [r7, #30]
 8003e5e:	222c      	movs	r2, #44	; 0x2c
 8003e60:	fb02 f303 	mul.w	r3, r2, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4413      	add	r3, r2
 8003e68:	7fba      	ldrb	r2, [r7, #30]
 8003e6a:	212c      	movs	r1, #44	; 0x2c
 8003e6c:	fb01 f202 	mul.w	r2, r1, r2
 8003e70:	69b9      	ldr	r1, [r7, #24]
 8003e72:	440a      	add	r2, r1
 8003e74:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003e78:	3202      	adds	r2, #2
 8003e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d119      	bne.n	8003eb6 <DIFFDRIVE_MOTOR_SetPWMs+0x36a>
 8003e82:	7fbb      	ldrb	r3, [r7, #30]
 8003e84:	222c      	movs	r2, #44	; 0x2c
 8003e86:	fb02 f303 	mul.w	r3, r2, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	441a      	add	r2, r3
 8003e8e:	7fbb      	ldrb	r3, [r7, #30]
 8003e90:	212c      	movs	r1, #44	; 0x2c
 8003e92:	fb01 f303 	mul.w	r3, r1, r3
 8003e96:	69b9      	ldr	r1, [r7, #24]
 8003e98:	440b      	add	r3, r1
 8003e9a:	7fb9      	ldrb	r1, [r7, #30]
 8003e9c:	202c      	movs	r0, #44	; 0x2c
 8003e9e:	fb00 f101 	mul.w	r1, r0, r1
 8003ea2:	69b8      	ldr	r0, [r7, #24]
 8003ea4:	4401      	add	r1, r0
 8003ea6:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 8003eaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eb2:	635a      	str	r2, [r3, #52]	; 0x34
 8003eb4:	e072      	b.n	8003f9c <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8003eb6:	7fbb      	ldrb	r3, [r7, #30]
 8003eb8:	222c      	movs	r2, #44	; 0x2c
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	7fba      	ldrb	r2, [r7, #30]
 8003ec4:	212c      	movs	r1, #44	; 0x2c
 8003ec6:	fb01 f202 	mul.w	r2, r1, r2
 8003eca:	69b9      	ldr	r1, [r7, #24]
 8003ecc:	440a      	add	r2, r1
 8003ece:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003ed2:	3202      	adds	r2, #2
 8003ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d119      	bne.n	8003f10 <DIFFDRIVE_MOTOR_SetPWMs+0x3c4>
 8003edc:	7fbb      	ldrb	r3, [r7, #30]
 8003ede:	222c      	movs	r2, #44	; 0x2c
 8003ee0:	fb02 f303 	mul.w	r3, r2, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	7fba      	ldrb	r2, [r7, #30]
 8003eea:	212c      	movs	r1, #44	; 0x2c
 8003eec:	fb01 f202 	mul.w	r2, r1, r2
 8003ef0:	69b9      	ldr	r1, [r7, #24]
 8003ef2:	440a      	add	r2, r1
 8003ef4:	7fb9      	ldrb	r1, [r7, #30]
 8003ef6:	202c      	movs	r0, #44	; 0x2c
 8003ef8:	fb00 f101 	mul.w	r1, r0, r1
 8003efc:	69b8      	ldr	r0, [r7, #24]
 8003efe:	4401      	add	r1, r0
 8003f00:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 8003f04:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	6393      	str	r3, [r2, #56]	; 0x38
 8003f0e:	e045      	b.n	8003f9c <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8003f10:	7fbb      	ldrb	r3, [r7, #30]
 8003f12:	222c      	movs	r2, #44	; 0x2c
 8003f14:	fb02 f303 	mul.w	r3, r2, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	7fba      	ldrb	r2, [r7, #30]
 8003f1e:	212c      	movs	r1, #44	; 0x2c
 8003f20:	fb01 f202 	mul.w	r2, r1, r2
 8003f24:	69b9      	ldr	r1, [r7, #24]
 8003f26:	440a      	add	r2, r1
 8003f28:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003f2c:	3202      	adds	r2, #2
 8003f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d119      	bne.n	8003f6a <DIFFDRIVE_MOTOR_SetPWMs+0x41e>
 8003f36:	7fbb      	ldrb	r3, [r7, #30]
 8003f38:	222c      	movs	r2, #44	; 0x2c
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4413      	add	r3, r2
 8003f42:	7fba      	ldrb	r2, [r7, #30]
 8003f44:	212c      	movs	r1, #44	; 0x2c
 8003f46:	fb01 f202 	mul.w	r2, r1, r2
 8003f4a:	69b9      	ldr	r1, [r7, #24]
 8003f4c:	440a      	add	r2, r1
 8003f4e:	7fb9      	ldrb	r1, [r7, #30]
 8003f50:	202c      	movs	r0, #44	; 0x2c
 8003f52:	fb00 f101 	mul.w	r1, r0, r1
 8003f56:	69b8      	ldr	r0, [r7, #24]
 8003f58:	4401      	add	r1, r0
 8003f5a:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 8003f5e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003f68:	e018      	b.n	8003f9c <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8003f6a:	7fbb      	ldrb	r3, [r7, #30]
 8003f6c:	222c      	movs	r2, #44	; 0x2c
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4413      	add	r3, r2
 8003f76:	7fba      	ldrb	r2, [r7, #30]
 8003f78:	212c      	movs	r1, #44	; 0x2c
 8003f7a:	fb01 f202 	mul.w	r2, r1, r2
 8003f7e:	69b9      	ldr	r1, [r7, #24]
 8003f80:	440a      	add	r2, r1
 8003f82:	7fb9      	ldrb	r1, [r7, #30]
 8003f84:	202c      	movs	r0, #44	; 0x2c
 8003f86:	fb00 f101 	mul.w	r1, r0, r1
 8003f8a:	69b8      	ldr	r0, [r7, #24]
 8003f8c:	4401      	add	r1, r0
 8003f8e:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 8003f92:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	6413      	str	r3, [r2, #64]	; 0x40
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003f9c:	7fbb      	ldrb	r3, [r7, #30]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	77bb      	strb	r3, [r7, #30]
 8003fa2:	7fbb      	ldrb	r3, [r7, #30]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	f67f aeac 	bls.w	8003d02 <DIFFDRIVE_MOTOR_SetPWMs+0x1b6>
							  tmp_mtr[side].pwm_channel[(tmp_mtr[side].direction)],
							  tmp_mtr[side].duty_beat  );

		}

}
 8003faa:	bf00      	nop
 8003fac:	bf00      	nop
 8003fae:	3724      	adds	r7, #36	; 0x24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <DIFFDRIVE_ENCODER_CaptureMeasure>:


DIFFDRIVE_StatusTypeDef DIFFDRIVE_ENCODER_CaptureMeasure(void){
 8003fb8:	b5b0      	push	{r4, r5, r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens=  hdiffdrv->encoder;
 8003fbe:	4b54      	ldr	r3, [pc, #336]	; (8004110 <DIFFDRIVE_ENCODER_CaptureMeasure+0x158>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003fc6:	60bb      	str	r3, [r7, #8]

	// int32 max value, minus a secure threshold of 100
	uint32_t counter_max= (pow(2,31)-1)-100;
 8003fc8:	4b52      	ldr	r3, [pc, #328]	; (8004114 <DIFFDRIVE_ENCODER_CaptureMeasure+0x15c>)
 8003fca:	607b      	str	r3, [r7, #4]

	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	e090      	b.n	80040f4 <DIFFDRIVE_ENCODER_CaptureMeasure+0x13c>

		// Saving previous value
		tmpsens[side].previous_value= tmpsens[side].current_value;
 8003fd2:	7bfa      	ldrb	r2, [r7, #15]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	1899      	adds	r1, r3, r2
 8003fe2:	7bfa      	ldrb	r2, [r7, #15]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	461a      	mov	r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	68ca      	ldr	r2, [r1, #12]
 8003ff4:	611a      	str	r2, [r3, #16]

		// Updating value. The counter connected to sensor are 32 bit unsigned integer so I cast in
		// 32 bit integer (signed) to have positive and negative values. Then, using encoder resolution,
		tmpsens[side].current_value  = (int32_t)__HAL_TIM_GET_COUNTER(tmpsens[side].htim);
 8003ff6:	7bfa      	ldrb	r2, [r7, #15]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	461a      	mov	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4413      	add	r3, r2
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	ee07 3a90 	vmov	s15, r3
 8004010:	7bfa      	ldrb	r2, [r7, #15]
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	461a      	mov	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4413      	add	r3, r2
 8004020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004024:	edc3 7a03 	vstr	s15, [r3, #12]

		// If counter reach a threshold value return an exception
		if( tmpsens[side].current_value < -(int32_t)counter_max || tmpsens[side].current_value > (int32_t)counter_max  )
 8004028:	7bfa      	ldrb	r2, [r7, #15]
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	461a      	mov	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4413      	add	r3, r2
 8004038:	ed93 7a03 	vldr	s14, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	425b      	negs	r3, r3
 8004040:	ee07 3a90 	vmov	s15, r3
 8004044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800404c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004050:	d413      	bmi.n	800407a <DIFFDRIVE_ENCODER_CaptureMeasure+0xc2>
 8004052:	7bfa      	ldrb	r2, [r7, #15]
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	461a      	mov	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4413      	add	r3, r2
 8004062:	ed93 7a03 	vldr	s14, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	ee07 3a90 	vmov	s15, r3
 800406c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004078:	dd02      	ble.n	8004080 <DIFFDRIVE_ENCODER_CaptureMeasure+0xc8>
			return DIFFDRIVE_ERROR;
 800407a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800407e:	e03e      	b.n	80040fe <DIFFDRIVE_ENCODER_CaptureMeasure+0x146>

		// Else convert integer in radiant
		tmpsens[side].current_value *= (2*M_PI)/tmpsens[side].resolution;
 8004080:	7bfa      	ldrb	r2, [r7, #15]
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	461a      	mov	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4413      	add	r3, r2
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc fa78 	bl	8000588 <__aeabi_f2d>
 8004098:	4604      	mov	r4, r0
 800409a:	460d      	mov	r5, r1
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	461a      	mov	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4413      	add	r3, r2
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc fa6a 	bl	8000588 <__aeabi_f2d>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	a113      	add	r1, pc, #76	; (adr r1, 8004108 <DIFFDRIVE_ENCODER_CaptureMeasure+0x150>)
 80040ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040be:	f7fc fbe5 	bl	800088c <__aeabi_ddiv>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4620      	mov	r0, r4
 80040c8:	4629      	mov	r1, r5
 80040ca:	f7fc fab5 	bl	8000638 <__aeabi_dmul>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4610      	mov	r0, r2
 80040d4:	4619      	mov	r1, r3
 80040d6:	7bfa      	ldrb	r2, [r7, #15]
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	461a      	mov	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	189c      	adds	r4, r3, r2
 80040e6:	f7fc fd9f 	bl	8000c28 <__aeabi_d2f>
 80040ea:	4603      	mov	r3, r0
 80040ec:	60e3      	str	r3, [r4, #12]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	3301      	adds	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	f67f af6b 	bls.w	8003fd2 <DIFFDRIVE_ENCODER_CaptureMeasure+0x1a>

	}

	return DIFFDRIVE_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bdb0      	pop	{r4, r5, r7, pc}
 8004106:	bf00      	nop
 8004108:	54442d18 	.word	0x54442d18
 800410c:	401921fb 	.word	0x401921fb
 8004110:	200073ac 	.word	0x200073ac
 8004114:	7fffff9b 	.word	0x7fffff9b

08004118 <DIFFDRIVE_ENCODER_Reset>:


void DIFFDRIVE_ENCODER_Reset(void){
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens= hdiffdrv->encoder;
 800411e:	4b16      	ldr	r3, [pc, #88]	; (8004178 <DIFFDRIVE_ENCODER_Reset+0x60>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004126:	603b      	str	r3, [r7, #0]

	// Reset Wheel encoders
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8004128:	2300      	movs	r3, #0
 800412a:	71fb      	strb	r3, [r7, #7]
 800412c:	e019      	b.n	8004162 <DIFFDRIVE_ENCODER_Reset+0x4a>
		__HAL_TIM_SET_COUNTER(tmpsens[side].htim,0);
 800412e:	79fa      	ldrb	r2, [r7, #7]
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	461a      	mov	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	4413      	add	r3, r2
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2200      	movs	r2, #0
 8004144:	625a      	str	r2, [r3, #36]	; 0x24
		tmpsens[side].current_value= 0;
 8004146:	79fa      	ldrb	r2, [r7, #7]
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	461a      	mov	r2, r3
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	4413      	add	r3, r2
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	60da      	str	r2, [r3, #12]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	3301      	adds	r3, #1
 8004160:	71fb      	strb	r3, [r7, #7]
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d9e2      	bls.n	800412e <DIFFDRIVE_ENCODER_Reset+0x16>
	}

}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	200073ac 	.word	0x200073ac

0800417c <DIFFDRIVE_HISTORY_Start>:


void DIFFDRIVE_HISTORY_Start(void){
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0

	// Enable history saving and reset time_index counter
	hdiffdrv->history.sample_cnt= 0;
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <DIFFDRIVE_HISTORY_Start+0x24>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2200      	movs	r2, #0
 8004186:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	hdiffdrv->history.Enabled= true;
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <DIFFDRIVE_HISTORY_Start+0x24>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

}
 8004194:	bf00      	nop
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	200073ac 	.word	0x200073ac

080041a4 <DIFFDRIVE_HISTORY_Update>:

}


/* ---- Saving only a fixed number of samples in a circular buffer, if history is enabled  ------------------- */
void DIFFDRIVE_HISTORY_Update(float delta_a_target, float delta_th_target){
 80041a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80041a8:	b098      	sub	sp, #96	; 0x60
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	ed87 0a01 	vstr	s0, [r7, #4]
 80041b0:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_HISTORY_TypeDef* tmphist  = &(hdiffdrv->history);
 80041b4:	4baf      	ldr	r3, [pc, #700]	; (8004474 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80041bc:	65bb      	str	r3, [r7, #88]	; 0x58
	DIFFDRIVE_CONTROL_TypeDef* tmpctrl  =   hdiffdrv->control;
 80041be:	4bad      	ldr	r3, [pc, #692]	; (8004474 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80041c6:	657b      	str	r3, [r7, #84]	; 0x54
	DIFFDRIVE_STATE_TypeDef    tmpstate =   hdiffdrv->state;
 80041c8:	4baa      	ldr	r3, [pc, #680]	; (8004474 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f107 041c 	add.w	r4, r7, #28
 80041d0:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 80041d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	6023      	str	r3, [r4, #0]
	float min_volt;
	float max_volt;

	float theta, wheel_target[2], input[2];

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80041e0:	2300      	movs	r3, #0
 80041e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80041e6:	e025      	b.n	8004234 <DIFFDRIVE_HISTORY_Update+0x90>
		wheel_target[side] = __FEEDFORWARD_GET_CURRENT_TARGET(&(tmpctrl[side].fdfrwrd));
 80041e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80041ec:	2268      	movs	r2, #104	; 0x68
 80041ee:	fb02 f303 	mul.w	r3, r2, r3
 80041f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041f4:	441a      	add	r2, r3
 80041f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80041fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004202:	440b      	add	r3, r1
 8004204:	3b4c      	subs	r3, #76	; 0x4c
 8004206:	601a      	str	r2, [r3, #0]
		input[side] = tmpstate.input[side];
 8004208:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800420c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004210:	3206      	adds	r2, #6
 8004212:	0092      	lsls	r2, r2, #2
 8004214:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004218:	440a      	add	r2, r1
 800421a:	3a40      	subs	r2, #64	; 0x40
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004224:	440b      	add	r3, r1
 8004226:	3b54      	subs	r3, #84	; 0x54
 8004228:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800422a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800422e:	3301      	adds	r3, #1
 8004230:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004234:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004238:	2b01      	cmp	r3, #1
 800423a:	d9d5      	bls.n	80041e8 <DIFFDRIVE_HISTORY_Update+0x44>
	}

	// Current index (using operator % to enroll k between 0 and max_sample; last_time_index is unbounded)
	uint32_t k= tmphist->sample_cnt%tmphist->max_sample;
 800423c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004242:	6892      	ldr	r2, [r2, #8]
 8004244:	fbb3 f1f2 	udiv	r1, r3, r2
 8004248:	fb02 f201 	mul.w	r2, r2, r1
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	653b      	str	r3, [r7, #80]	; 0x50

	tmphist->index= k;
 8004250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004252:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004254:	60da      	str	r2, [r3, #12]

	// Update history if is enabled
	if( tmphist->Enabled ){
 8004256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8252 	beq.w	8004704 <DIFFDRIVE_HISTORY_Update+0x560>
		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004260:	2300      	movs	r3, #0
 8004262:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8004266:	e134      	b.n	80044d2 <DIFFDRIVE_HISTORY_Update+0x32e>

			min_volt= hdiffdrv->motor[side].min_voltage;
 8004268:	4b82      	ldr	r3, [pc, #520]	; (8004474 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004270:	212c      	movs	r1, #44	; 0x2c
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	4413      	add	r3, r2
 8004278:	33c0      	adds	r3, #192	; 0xc0
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	647b      	str	r3, [r7, #68]	; 0x44
			max_volt= hdiffdrv->motor[side].max_voltage;
 800427e:	4b7d      	ldr	r3, [pc, #500]	; (8004474 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004286:	212c      	movs	r1, #44	; 0x2c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	33bc      	adds	r3, #188	; 0xbc
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	643b      	str	r3, [r7, #64]	; 0x40

			// Input Saturation limits, for "measured" tension-------------------------
			if( input[side] > (max_volt-min_volt))
 8004294:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800429e:	4413      	add	r3, r2
 80042a0:	3b54      	subs	r3, #84	; 0x54
 80042a2:	ed93 7a00 	vldr	s14, [r3]
 80042a6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80042aa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80042ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80042b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ba:	dd16      	ble.n	80042ea <DIFFDRIVE_HISTORY_Update+0x146>
				tmphist->state_measure[k].input[side]= max_volt-min_volt;
 80042bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042be:	6959      	ldr	r1, [r3, #20]
 80042c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80042c2:	4613      	mov	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	18ca      	adds	r2, r1, r3
 80042cc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80042d0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80042d4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80042d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042dc:	3306      	adds	r3, #6
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	3304      	adds	r3, #4
 80042e4:	edc3 7a00 	vstr	s15, [r3]
 80042e8:	e045      	b.n	8004376 <DIFFDRIVE_HISTORY_Update+0x1d2>
			else
			if( input[side] < -(max_volt-min_volt))
 80042ea:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80042f4:	4413      	add	r3, r2
 80042f6:	3b54      	subs	r3, #84	; 0x54
 80042f8:	ed93 7a00 	vldr	s14, [r3]
 80042fc:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8004300:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004304:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004308:	eef1 7a67 	vneg.f32	s15, s15
 800430c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004314:	d518      	bpl.n	8004348 <DIFFDRIVE_HISTORY_Update+0x1a4>
				tmphist->state_measure[k].input[side]= -(max_volt-min_volt);
 8004316:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800431a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800431e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004324:	6959      	ldr	r1, [r3, #20]
 8004326:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	18ca      	adds	r2, r1, r3
 8004332:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004336:	eef1 7a67 	vneg.f32	s15, s15
 800433a:	3306      	adds	r3, #6
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	3304      	adds	r3, #4
 8004342:	edc3 7a00 	vstr	s15, [r3]
 8004346:	e016      	b.n	8004376 <DIFFDRIVE_HISTORY_Update+0x1d2>
			else
				tmphist->state_measure[k].input[side]= input[side];
 8004348:	f897 005e 	ldrb.w	r0, [r7, #94]	; 0x5e
 800434c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800434e:	6959      	ldr	r1, [r3, #20]
 8004350:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004352:	4613      	mov	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4419      	add	r1, r3
 800435c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004360:	0082      	lsls	r2, r0, #2
 8004362:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004366:	4402      	add	r2, r0
 8004368:	3a54      	subs	r2, #84	; 0x54
 800436a:	6812      	ldr	r2, [r2, #0]
 800436c:	3306      	adds	r3, #6
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	3304      	adds	r3, #4
 8004374:	601a      	str	r2, [r3, #0]
			// ------------------------------------------------------------------------

			// Target input, without PID contribute and saturation limits
			tmphist->state_target[k].input[side]= hdiffdrv->control[side].fdfrwrd.current_input;
 8004376:	4b3f      	ldr	r3, [pc, #252]	; (8004474 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 800437e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004380:	6919      	ldr	r1, [r3, #16]
 8004382:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004384:	4613      	mov	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4419      	add	r1, r3
 800438e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004392:	2268      	movs	r2, #104	; 0x68
 8004394:	fb02 f204 	mul.w	r2, r2, r4
 8004398:	4402      	add	r2, r0
 800439a:	f502 72a8 	add.w	r2, r2, #336	; 0x150
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	3306      	adds	r3, #6
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	3304      	adds	r3, #4
 80043a8:	601a      	str	r2, [r3, #0]

			// Wheels measured and target
			tmphist->state_measure[k].wheel[side]= __DIFFDRIVE_ENCODER_GET_CURRENT_VALUE(hdiffdrv,side);
 80043aa:	4b32      	ldr	r3, [pc, #200]	; (8004474 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 80043ac:	681c      	ldr	r4, [r3, #0]
 80043ae:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80043b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043b4:	6958      	ldr	r0, [r3, #20]
 80043b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80043b8:	460b      	mov	r3, r1
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	440b      	add	r3, r1
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	18c1      	adds	r1, r0, r3
 80043c2:	f897 005e 	ldrb.w	r0, [r7, #94]	; 0x5e
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4423      	add	r3, r4
 80043d0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	1c83      	adds	r3, r0, #2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	3304      	adds	r3, #4
 80043de:	601a      	str	r2, [r3, #0]
			tmphist->state_measure[k].delta_wheel[side]= hdiffdrv->state.delta_wheel[side];
 80043e0:	4b24      	ldr	r3, [pc, #144]	; (8004474 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 80043e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ea:	6959      	ldr	r1, [r3, #20]
 80043ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043ee:	4613      	mov	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4419      	add	r1, r3
 80043f8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80043fc:	f104 0282 	add.w	r2, r4, #130	; 0x82
 8004400:	0092      	lsls	r2, r2, #2
 8004402:	4402      	add	r2, r0
 8004404:	3204      	adds	r2, #4
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	3304      	adds	r3, #4
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	3304      	adds	r3, #4
 8004410:	601a      	str	r2, [r3, #0]

			if(k > 0)
 8004412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02f      	beq.n	8004478 <DIFFDRIVE_HISTORY_Update+0x2d4>
				tmphist->state_target[k].delta_wheel[side]= wheel_target[side]-tmphist->state_target[k-1].wheel[side];
 8004418:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004422:	4413      	add	r3, r2
 8004424:	3b4c      	subs	r3, #76	; 0x4c
 8004426:	ed93 7a00 	vldr	s14, [r3]
 800442a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800442c:	6919      	ldr	r1, [r3, #16]
 800442e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004430:	4613      	mov	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	3b24      	subs	r3, #36	; 0x24
 800443a:	18ca      	adds	r2, r1, r3
 800443c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004440:	3302      	adds	r3, #2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	3304      	adds	r3, #4
 8004448:	edd3 7a00 	vldr	s15, [r3]
 800444c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800444e:	6919      	ldr	r1, [r3, #16]
 8004450:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004452:	4613      	mov	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	18ca      	adds	r2, r1, r3
 800445c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004464:	3304      	adds	r3, #4
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	3304      	adds	r3, #4
 800446c:	edc3 7a00 	vstr	s15, [r3]
 8004470:	e013      	b.n	800449a <DIFFDRIVE_HISTORY_Update+0x2f6>
 8004472:	bf00      	nop
 8004474:	200073ac 	.word	0x200073ac
			else
				tmphist->state_target[k].delta_wheel[side]= 0;
 8004478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800447a:	6919      	ldr	r1, [r3, #16]
 800447c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800447e:	4613      	mov	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	18ca      	adds	r2, r1, r3
 8004488:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800448c:	3304      	adds	r3, #4
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	3304      	adds	r3, #4
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
			tmphist->state_target[k].wheel[side]= wheel_target[side];
 800449a:	f897 005e 	ldrb.w	r0, [r7, #94]	; 0x5e
 800449e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044a0:	6919      	ldr	r1, [r3, #16]
 80044a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044a4:	4613      	mov	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4419      	add	r1, r3
 80044ae:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80044b2:	0082      	lsls	r2, r0, #2
 80044b4:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80044b8:	4402      	add	r2, r0
 80044ba:	3a4c      	subs	r2, #76	; 0x4c
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	3302      	adds	r3, #2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	3304      	adds	r3, #4
 80044c6:	601a      	str	r2, [r3, #0]
		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80044c8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80044cc:	3301      	adds	r3, #1
 80044ce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80044d2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	f67f aec6 	bls.w	8004268 <DIFFDRIVE_HISTORY_Update+0xc4>

		}

		// Pose measure, extracted from state register
		tmphist->state_measure[k].pose= tmpstate.pose;
 80044dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044de:	6959      	ldr	r1, [r3, #20]
 80044e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044e2:	4613      	mov	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4413      	add	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	461c      	mov	r4, r3
 80044ee:	f107 031c 	add.w	r3, r7, #28
 80044f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80044f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		// Compute current target pose
		if( tmphist->sample_cnt != 0 ){
 80044fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80a2 	beq.w	8004648 <DIFFDRIVE_HISTORY_Update+0x4a4>
			uint32_t k_prev= (tmphist->sample_cnt-1)%tmphist->max_sample;
 8004504:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	3b01      	subs	r3, #1
 800450a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800450c:	6892      	ldr	r2, [r2, #8]
 800450e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004512:	fb02 f201 	mul.w	r2, r2, r1
 8004516:	1a9b      	subs	r3, r3, r2
 8004518:	64bb      	str	r3, [r7, #72]	; 0x48

			theta= tmphist->state_target[k_prev].pose.theta;
 800451a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800451c:	6919      	ldr	r1, [r3, #16]
 800451e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004520:	4613      	mov	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	64fb      	str	r3, [r7, #76]	; 0x4c
			tmphist->state_target[k].pose.x_a   =  tmphist->state_target[k_prev].pose.x_a   + delta_a_target*cos(theta);
 800452e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004530:	6919      	ldr	r1, [r3, #16]
 8004532:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004534:	4613      	mov	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f7fc f821 	bl	8000588 <__aeabi_f2d>
 8004546:	4604      	mov	r4, r0
 8004548:	460d      	mov	r5, r1
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fc f81c 	bl	8000588 <__aeabi_f2d>
 8004550:	4680      	mov	r8, r0
 8004552:	4689      	mov	r9, r1
 8004554:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004556:	f7fc f817 	bl	8000588 <__aeabi_f2d>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	ec43 2b10 	vmov	d0, r2, r3
 8004562:	f00d fac1 	bl	8011ae8 <cos>
 8004566:	ec53 2b10 	vmov	r2, r3, d0
 800456a:	4640      	mov	r0, r8
 800456c:	4649      	mov	r1, r9
 800456e:	f7fc f863 	bl	8000638 <__aeabi_dmul>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4620      	mov	r0, r4
 8004578:	4629      	mov	r1, r5
 800457a:	f7fb fea7 	bl	80002cc <__adddf3>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4690      	mov	r8, r2
 8004584:	4699      	mov	r9, r3
 8004586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004588:	6919      	ldr	r1, [r3, #16]
 800458a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	18cc      	adds	r4, r1, r3
 8004596:	4640      	mov	r0, r8
 8004598:	4649      	mov	r1, r9
 800459a:	f7fc fb45 	bl	8000c28 <__aeabi_d2f>
 800459e:	4603      	mov	r3, r0
 80045a0:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k].pose.y_a   =  tmphist->state_target[k_prev].pose.y_a   + delta_a_target*sin(theta);
 80045a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045a4:	6919      	ldr	r1, [r3, #16]
 80045a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fb ffe7 	bl	8000588 <__aeabi_f2d>
 80045ba:	4604      	mov	r4, r0
 80045bc:	460d      	mov	r5, r1
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fb ffe2 	bl	8000588 <__aeabi_f2d>
 80045c4:	4680      	mov	r8, r0
 80045c6:	4689      	mov	r9, r1
 80045c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80045ca:	f7fb ffdd 	bl	8000588 <__aeabi_f2d>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	ec43 2b10 	vmov	d0, r2, r3
 80045d6:	f00d fad7 	bl	8011b88 <sin>
 80045da:	ec53 2b10 	vmov	r2, r3, d0
 80045de:	4640      	mov	r0, r8
 80045e0:	4649      	mov	r1, r9
 80045e2:	f7fc f829 	bl	8000638 <__aeabi_dmul>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4620      	mov	r0, r4
 80045ec:	4629      	mov	r1, r5
 80045ee:	f7fb fe6d 	bl	80002cc <__adddf3>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4690      	mov	r8, r2
 80045f8:	4699      	mov	r9, r3
 80045fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045fc:	6919      	ldr	r1, [r3, #16]
 80045fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004600:	4613      	mov	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	18cc      	adds	r4, r1, r3
 800460a:	4640      	mov	r0, r8
 800460c:	4649      	mov	r1, r9
 800460e:	f7fc fb0b 	bl	8000c28 <__aeabi_d2f>
 8004612:	4603      	mov	r3, r0
 8004614:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k].pose.theta =  tmphist->state_target[k_prev].pose.theta + delta_th_target;
 8004616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004618:	6919      	ldr	r1, [r3, #16]
 800461a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800461c:	4613      	mov	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	ed93 7a02 	vldr	s14, [r3, #8]
 800462a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800462c:	6919      	ldr	r1, [r3, #16]
 800462e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004630:	4613      	mov	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	edd7 7a00 	vldr	s15, [r7]
 800463e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004642:	edc3 7a02 	vstr	s15, [r3, #8]
 8004646:	e058      	b.n	80046fa <DIFFDRIVE_HISTORY_Update+0x556>
		}else{
			theta= 0;
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	64fb      	str	r3, [r7, #76]	; 0x4c
			tmphist->state_target[k].pose.x_a   =  delta_a_target*cos(theta);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fb ff9a 	bl	8000588 <__aeabi_f2d>
 8004654:	4604      	mov	r4, r0
 8004656:	460d      	mov	r5, r1
 8004658:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800465a:	f7fb ff95 	bl	8000588 <__aeabi_f2d>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	ec43 2b10 	vmov	d0, r2, r3
 8004666:	f00d fa3f 	bl	8011ae8 <cos>
 800466a:	ec53 2b10 	vmov	r2, r3, d0
 800466e:	4620      	mov	r0, r4
 8004670:	4629      	mov	r1, r5
 8004672:	f7fb ffe1 	bl	8000638 <__aeabi_dmul>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4690      	mov	r8, r2
 800467c:	4699      	mov	r9, r3
 800467e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004680:	6919      	ldr	r1, [r3, #16]
 8004682:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	18cc      	adds	r4, r1, r3
 800468e:	4640      	mov	r0, r8
 8004690:	4649      	mov	r1, r9
 8004692:	f7fc fac9 	bl	8000c28 <__aeabi_d2f>
 8004696:	4603      	mov	r3, r0
 8004698:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k].pose.y_a   =  delta_a_target*sin(theta);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fb ff74 	bl	8000588 <__aeabi_f2d>
 80046a0:	4604      	mov	r4, r0
 80046a2:	460d      	mov	r5, r1
 80046a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80046a6:	f7fb ff6f 	bl	8000588 <__aeabi_f2d>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	ec43 2b10 	vmov	d0, r2, r3
 80046b2:	f00d fa69 	bl	8011b88 <sin>
 80046b6:	ec53 2b10 	vmov	r2, r3, d0
 80046ba:	4620      	mov	r0, r4
 80046bc:	4629      	mov	r1, r5
 80046be:	f7fb ffbb 	bl	8000638 <__aeabi_dmul>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4690      	mov	r8, r2
 80046c8:	4699      	mov	r9, r3
 80046ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046cc:	6919      	ldr	r1, [r3, #16]
 80046ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	18cc      	adds	r4, r1, r3
 80046da:	4640      	mov	r0, r8
 80046dc:	4649      	mov	r1, r9
 80046de:	f7fc faa3 	bl	8000c28 <__aeabi_d2f>
 80046e2:	4603      	mov	r3, r0
 80046e4:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k].pose.theta =  delta_th_target;
 80046e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046e8:	6919      	ldr	r1, [r3, #16]
 80046ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046ec:	4613      	mov	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	609a      	str	r2, [r3, #8]

		}

		// Increment sample counter
		tmphist->sample_cnt++;
 80046fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004702:	605a      	str	r2, [r3, #4]
	}
}
 8004704:	bf00      	nop
 8004706:	3760      	adds	r7, #96	; 0x60
 8004708:	46bd      	mov	sp, r7
 800470a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800470e:	bf00      	nop

08004710 <DIFFDRIVE_HISTORY_Get_Init>:


/* ---- Init time index to properly read the history circular buffer ----- */
void DIFFDRIVE_HISTORY_Get_Init(void){
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0

	DIFFDRIVE_HISTORY_TypeDef* tmphist= &(hdiffdrv->history);
 8004716:	4b11      	ldr	r3, [pc, #68]	; (800475c <DIFFDRIVE_HISTORY_Get_Init+0x4c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800471e:	607b      	str	r3, [r7, #4]

	// Initialize current time index to start read from oldest saved values
	if( tmphist->sample_cnt >= tmphist->max_sample )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	429a      	cmp	r2, r3
 800472a:	d30e      	bcc.n	800474a <DIFFDRIVE_HISTORY_Get_Init+0x3a>
		tmphist->index= (tmphist->sample_cnt-tmphist->max_sample)%tmphist->max_sample;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6892      	ldr	r2, [r2, #8]
 800473a:	fbb3 f1f2 	udiv	r1, r3, r2
 800473e:	fb02 f201 	mul.w	r2, r2, r1
 8004742:	1a9a      	subs	r2, r3, r2
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	60da      	str	r2, [r3, #12]
	else
		tmphist->index= 0;
}
 8004748:	e002      	b.n	8004750 <DIFFDRIVE_HISTORY_Get_Init+0x40>
		tmphist->index= 0;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	60da      	str	r2, [r3, #12]
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	200073ac 	.word	0x200073ac

08004760 <DIFFDRIVE_HISTORY_Get_Sample>:


/* --- Read state sample from History --- */
void DIFFDRIVE_HISTORY_Get_Sample(DIFFDRIVE_STATE_TypeDef* state_measure, DIFFDRIVE_STATE_TypeDef* state_target){
 8004760:	b4b0      	push	{r4, r5, r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]

	DIFFDRIVE_HISTORY_TypeDef* tmphist= &(hdiffdrv->history);
 800476a:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <DIFFDRIVE_HISTORY_Get_Sample+0x98>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004772:	60fb      	str	r3, [r7, #12]

	*state_measure= tmphist->state_measure[tmphist->index];
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6959      	ldr	r1, [r3, #20]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	4614      	mov	r4, r2
 800478a:	461d      	mov	r5, r3
 800478c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800478e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	6023      	str	r3, [r4, #0]
	*state_target = tmphist->state_target [tmphist->index];
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6919      	ldr	r1, [r3, #16]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	4613      	mov	r3, r2
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	4614      	mov	r4, r2
 80047ae:	461d      	mov	r5, r3
 80047b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	6023      	str	r3, [r4, #0]

	// Update index for next step
	if( tmphist->sample_cnt >= tmphist->max_sample )
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d30c      	bcc.n	80047e2 <DIFFDRIVE_HISTORY_Get_Sample+0x82>
		tmphist->index= (tmphist->index+1)%tmphist->max_sample;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	3301      	adds	r3, #1
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	6892      	ldr	r2, [r2, #8]
 80047d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80047d6:	fb02 f201 	mul.w	r2, r2, r1
 80047da:	1a9a      	subs	r2, r3, r2
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	60da      	str	r2, [r3, #12]
	else
		tmphist->index++;
}
 80047e0:	e004      	b.n	80047ec <DIFFDRIVE_HISTORY_Get_Sample+0x8c>
		tmphist->index++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	60da      	str	r2, [r3, #12]
}
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bcb0      	pop	{r4, r5, r7}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	200073ac 	.word	0x200073ac

080047fc <DIFFDRIVE_CONTROL_Start>:


void DIFFDRIVE_CONTROL_Start(void){
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0

	// Reset Control
	DIFFDRIVE_CONTROL_Reset();
 8004800:	f000 f80e 	bl	8004820 <DIFFDRIVE_CONTROL_Reset>

	// Starting and enabling history
	DIFFDRIVE_HISTORY_Start();
 8004804:	f7ff fcba 	bl	800417c <DIFFDRIVE_HISTORY_Start>

	// Start control timing
	DIFFDRIVE_TIMING_Start();
 8004808:	f000 f878 	bl	80048fc <DIFFDRIVE_TIMING_Start>

}
 800480c:	bf00      	nop
 800480e:	bd80      	pop	{r7, pc}

08004810 <DIFFDRIVE_CONTROL_Stop>:


void DIFFDRIVE_CONTROL_Stop(void){
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0

	// Stop timing, control finished
	DIFFDRIVE_TIMING_Stop();
 8004814:	f000 f880 	bl	8004918 <DIFFDRIVE_TIMING_Stop>

	// Set motor to 0 volt
	DIFFDRIVE_MOTOR_Stop();
 8004818:	f7ff f986 	bl	8003b28 <DIFFDRIVE_MOTOR_Stop>

}
 800481c:	bf00      	nop
 800481e:	bd80      	pop	{r7, pc}

08004820 <DIFFDRIVE_CONTROL_Reset>:


void DIFFDRIVE_CONTROL_Reset(void){
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0

	DIFFDRIVE_CONTROL_TypeDef* hctrl=    hdiffdrv->control;
 8004826:	4b34      	ldr	r3, [pc, #208]	; (80048f8 <DIFFDRIVE_CONTROL_Reset+0xd8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800482e:	60bb      	str	r3, [r7, #8]
	DIFFDRIVE_HISTORY_TypeDef* tmphist= &hdiffdrv->history;
 8004830:	4b31      	ldr	r3, [pc, #196]	; (80048f8 <DIFFDRIVE_CONTROL_Reset+0xd8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004838:	607b      	str	r3, [r7, #4]

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
 800483e:	e016      	b.n	800486e <DIFFDRIVE_CONTROL_Reset+0x4e>
		// Reset feed-forward buffer (with NULL value in second argument the buffers are initialized with zeros)
		FEEDFORWARD_BufferInit(&hctrl[side].fdfrwrd, NULL);
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2268      	movs	r2, #104	; 0x68
 8004844:	fb02 f303 	mul.w	r3, r2, r3
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	4413      	add	r3, r2
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fc40 	bl	80050d4 <FEEDFORWARD_BufferInit>
		// Reset PID
		PID_Reset(&hctrl[side].pid);
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	2268      	movs	r2, #104	; 0x68
 8004858:	fb02 f303 	mul.w	r3, r2, r3
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	4413      	add	r3, r2
 8004860:	3334      	adds	r3, #52	; 0x34
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fdd9 	bl	800541a <PID_Reset>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	3301      	adds	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d9e5      	bls.n	8004840 <DIFFDRIVE_CONTROL_Reset+0x20>
	}

	// Reset encoder sensors
	DIFFDRIVE_ENCODER_Reset();
 8004874:	f7ff fc50 	bl	8004118 <DIFFDRIVE_ENCODER_Reset>

	// If a reset occurred let converge pose target and pose measure, 'cause they are cumulative variables,
	// in order to not have excessive divergences between these two trajectories
	tmphist->state_target[tmphist->index].pose.theta= tmphist->state_measure[tmphist->index].pose.theta;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6959      	ldr	r1, [r3, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	4613      	mov	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4419      	add	r1, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6918      	ldr	r0, [r3, #16]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	4613      	mov	r3, r2
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	4413      	add	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4403      	add	r3, r0
 800489c:	688a      	ldr	r2, [r1, #8]
 800489e:	609a      	str	r2, [r3, #8]
	tmphist->state_target[tmphist->index].pose.x_a=   tmphist->state_measure[tmphist->index].pose.x_a;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6959      	ldr	r1, [r3, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4419      	add	r1, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6918      	ldr	r0, [r3, #16]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	4613      	mov	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4403      	add	r3, r0
 80048c4:	680a      	ldr	r2, [r1, #0]
 80048c6:	601a      	str	r2, [r3, #0]
	tmphist->state_target[tmphist->index].pose.y_a=   tmphist->state_measure[tmphist->index].pose.y_a;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6959      	ldr	r1, [r3, #20]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	4613      	mov	r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4419      	add	r1, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6918      	ldr	r0, [r3, #16]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	4613      	mov	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4403      	add	r3, r0
 80048ec:	684a      	ldr	r2, [r1, #4]
 80048ee:	605a      	str	r2, [r3, #4]

}
 80048f0:	bf00      	nop
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	200073ac 	.word	0x200073ac

080048fc <DIFFDRIVE_TIMING_Start>:


void DIFFDRIVE_TIMING_Start(void){
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0

	// Starting timer in interrupt mode. It serve for control law timing
	HAL_TIM_Base_Start_IT(hdiffdrv->timing.htim);
 8004900:	4b04      	ldr	r3, [pc, #16]	; (8004914 <DIFFDRIVE_TIMING_Start+0x18>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004908:	4618      	mov	r0, r3
 800490a:	f002 fd59 	bl	80073c0 <HAL_TIM_Base_Start_IT>

}
 800490e:	bf00      	nop
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	200073ac 	.word	0x200073ac

08004918 <DIFFDRIVE_TIMING_Stop>:


void DIFFDRIVE_TIMING_Stop(void){
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0

	// Stop timer in interrupt mode
	HAL_TIM_Base_Stop_IT(hdiffdrv->timing.htim);
 800491c:	4b04      	ldr	r3, [pc, #16]	; (8004930 <DIFFDRIVE_TIMING_Stop+0x18>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004924:	4618      	mov	r0, r3
 8004926:	f002 fdbb 	bl	80074a0 <HAL_TIM_Base_Stop_IT>

}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	200073ac 	.word	0x200073ac

08004934 <DIFFDRIVE_TIMING_Wait>:


void DIFFDRIVE_TIMING_Wait(void){
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0

	// Wait until the timing flag is true
	while( !(hdiffdrv->timing.flag) )
 8004938:	e000      	b.n	800493c <DIFFDRIVE_TIMING_Wait+0x8>
		__NOP();
 800493a:	bf00      	nop
	while( !(hdiffdrv->timing.flag) )
 800493c:	4b09      	ldr	r3, [pc, #36]	; (8004964 <DIFFDRIVE_TIMING_Wait+0x30>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8004944:	b2db      	uxtb	r3, r3
 8004946:	f083 0301 	eor.w	r3, r3, #1
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f4      	bne.n	800493a <DIFFDRIVE_TIMING_Wait+0x6>

	// Reset timing flag
	hdiffdrv->timing.flag= false;
 8004950:	4b04      	ldr	r3, [pc, #16]	; (8004964 <DIFFDRIVE_TIMING_Wait+0x30>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

}
 800495a:	bf00      	nop
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	200073ac 	.word	0x200073ac

08004968 <DIFFDRIVE_STATE_Update>:


void DIFFDRIVE_STATE_Update(float* input){
 8004968:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800496c:	b088      	sub	sp, #32
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_STATE_TypeDef* tmpstate= &(hdiffdrv->state);
 8004972:	4b60      	ldr	r3, [pc, #384]	; (8004af4 <DIFFDRIVE_STATE_Update+0x18c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800497a:	61bb      	str	r3, [r7, #24]

	float delta_a, delta_th, theta;

	// Updating state
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 800497c:	2300      	movs	r3, #0
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e042      	b.n	8004a08 <DIFFDRIVE_STATE_Update+0xa0>
		tmpstate->wheel[side]=       hdiffdrv->encoder[side].current_value;
 8004982:	4b5c      	ldr	r3, [pc, #368]	; (8004af4 <DIFFDRIVE_STATE_Update+0x18c>)
 8004984:	6819      	ldr	r1, [r3, #0]
 8004986:	7ffa      	ldrb	r2, [r7, #31]
 8004988:	7ff8      	ldrb	r0, [r7, #31]
 800498a:	4613      	mov	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	69b9      	ldr	r1, [r7, #24]
 800499c:	1c83      	adds	r3, r0, #2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	3304      	adds	r3, #4
 80049a4:	601a      	str	r2, [r3, #0]
		tmpstate->delta_wheel[side]= hdiffdrv->encoder[side].current_value-hdiffdrv->encoder[side].previous_value;
 80049a6:	4b53      	ldr	r3, [pc, #332]	; (8004af4 <DIFFDRIVE_STATE_Update+0x18c>)
 80049a8:	6819      	ldr	r1, [r3, #0]
 80049aa:	7ffa      	ldrb	r2, [r7, #31]
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80049ba:	ed93 7a00 	vldr	s14, [r3]
 80049be:	4b4d      	ldr	r3, [pc, #308]	; (8004af4 <DIFFDRIVE_STATE_Update+0x18c>)
 80049c0:	6819      	ldr	r1, [r3, #0]
 80049c2:	7ffa      	ldrb	r2, [r7, #31]
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80049d2:	edd3 7a00 	vldr	s15, [r3]
 80049d6:	7ffb      	ldrb	r3, [r7, #31]
 80049d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	3304      	adds	r3, #4
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	3304      	adds	r3, #4
 80049e6:	edc3 7a00 	vstr	s15, [r3]
		tmpstate->input[side]=       input[side];
 80049ea:	7ffb      	ldrb	r3, [r7, #31]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	441a      	add	r2, r3
 80049f2:	7ffb      	ldrb	r3, [r7, #31]
 80049f4:	6812      	ldr	r2, [r2, #0]
 80049f6:	69b9      	ldr	r1, [r7, #24]
 80049f8:	3306      	adds	r3, #6
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	3304      	adds	r3, #4
 8004a00:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 8004a02:	7ffb      	ldrb	r3, [r7, #31]
 8004a04:	3301      	adds	r3, #1
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	7ffb      	ldrb	r3, [r7, #31]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d9b9      	bls.n	8004982 <DIFFDRIVE_STATE_Update+0x1a>
	}

	// Compute and update current pose
	DIFFDRIVE_DeltaWheel2DeltaTrajectory(&delta_a, &delta_th,  tmpstate->delta_wheel);
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	f103 0214 	add.w	r2, r3, #20
 8004a14:	f107 010c 	add.w	r1, r7, #12
 8004a18:	f107 0310 	add.w	r3, r7, #16
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 f8bf 	bl	8004ba0 <DIFFDRIVE_DeltaWheel2DeltaTrajectory>

	theta= tmpstate->pose.theta;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	617b      	str	r3, [r7, #20]
	tmpstate->pose.x_a   +=  delta_a*cos(theta);
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fb fdab 	bl	8000588 <__aeabi_f2d>
 8004a32:	4604      	mov	r4, r0
 8004a34:	460d      	mov	r5, r1
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fb fda5 	bl	8000588 <__aeabi_f2d>
 8004a3e:	4680      	mov	r8, r0
 8004a40:	4689      	mov	r9, r1
 8004a42:	6978      	ldr	r0, [r7, #20]
 8004a44:	f7fb fda0 	bl	8000588 <__aeabi_f2d>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	ec43 2b10 	vmov	d0, r2, r3
 8004a50:	f00d f84a 	bl	8011ae8 <cos>
 8004a54:	ec53 2b10 	vmov	r2, r3, d0
 8004a58:	4640      	mov	r0, r8
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	f7fb fdec 	bl	8000638 <__aeabi_dmul>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4620      	mov	r0, r4
 8004a66:	4629      	mov	r1, r5
 8004a68:	f7fb fc30 	bl	80002cc <__adddf3>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	f7fc f8d8 	bl	8000c28 <__aeabi_d2f>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	601a      	str	r2, [r3, #0]
	tmpstate->pose.y_a   +=  delta_a*sin(theta);
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fb fd80 	bl	8000588 <__aeabi_f2d>
 8004a88:	4604      	mov	r4, r0
 8004a8a:	460d      	mov	r5, r1
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fb fd7a 	bl	8000588 <__aeabi_f2d>
 8004a94:	4680      	mov	r8, r0
 8004a96:	4689      	mov	r9, r1
 8004a98:	6978      	ldr	r0, [r7, #20]
 8004a9a:	f7fb fd75 	bl	8000588 <__aeabi_f2d>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	ec43 2b10 	vmov	d0, r2, r3
 8004aa6:	f00d f86f 	bl	8011b88 <sin>
 8004aaa:	ec53 2b10 	vmov	r2, r3, d0
 8004aae:	4640      	mov	r0, r8
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	f7fb fdc1 	bl	8000638 <__aeabi_dmul>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4620      	mov	r0, r4
 8004abc:	4629      	mov	r1, r5
 8004abe:	f7fb fc05 	bl	80002cc <__adddf3>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	4619      	mov	r1, r3
 8004aca:	f7fc f8ad 	bl	8000c28 <__aeabi_d2f>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	605a      	str	r2, [r3, #4]
	tmpstate->pose.theta +=  delta_th;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	ed93 7a02 	vldr	s14, [r3, #8]
 8004ada:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004ae8:	bf00      	nop
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004af2:	bf00      	nop
 8004af4:	200073ac 	.word	0x200073ac

08004af8 <DIFFDRIVE_DeltaTrajectory2WheelAngle>:


void DIFFDRIVE_DeltaTrajectory2WheelAngle(float* wheel, float delta_a, float delta_theta){
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b04:	edc7 0a01 	vstr	s1, [r7, #4]

	float r= hdiffdrv->mech_prmtr.r;
 8004b08:	4b24      	ldr	r3, [pc, #144]	; (8004b9c <DIFFDRIVE_DeltaTrajectory2WheelAngle+0xa4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004b10:	617b      	str	r3, [r7, #20]
	float l= hdiffdrv->mech_prmtr.l;
 8004b12:	4b22      	ldr	r3, [pc, #136]	; (8004b9c <DIFFDRIVE_DeltaTrajectory2WheelAngle+0xa4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8004b1a:	613b      	str	r3, [r7, #16]

	// Target computation (it's affect input var "wheel" because is a pointer.
	// Also note the "+=" symbol and not "=")
	if( wheel != NULL){
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d035      	beq.n	8004b8e <DIFFDRIVE_DeltaTrajectory2WheelAngle+0x96>
		wheel[left ] +=  delta_a/r - l*delta_theta/r;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	ed93 7a00 	vldr	s14, [r3]
 8004b28:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b30:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004b34:	ed97 6a04 	vldr	s12, [r7, #16]
 8004b38:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b3c:	ee66 5a27 	vmul.f32	s11, s12, s15
 8004b40:	ed97 6a05 	vldr	s12, [r7, #20]
 8004b44:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004b48:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	edc3 7a00 	vstr	s15, [r3]
		wheel[right] +=  delta_a/r + l*delta_theta/r;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	ed93 7a00 	vldr	s14, [r3]
 8004b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b62:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b66:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8004b6a:	ed97 6a04 	vldr	s12, [r7, #16]
 8004b6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b72:	ee66 5a27 	vmul.f32	s11, s12, s15
 8004b76:	ed97 6a05 	vldr	s12, [r7, #20]
 8004b7a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3304      	adds	r3, #4
 8004b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b8a:	edc3 7a00 	vstr	s15, [r3]
	}

}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	200073ac 	.word	0x200073ac

08004ba0 <DIFFDRIVE_DeltaWheel2DeltaTrajectory>:

void DIFFDRIVE_DeltaWheel2DeltaTrajectory(float* delta_a_p, float* delta_theta_p, float* delta_wheel){
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]

	float r= hdiffdrv->mech_prmtr.r;
 8004bac:	4b1f      	ldr	r3, [pc, #124]	; (8004c2c <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x8c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004bb4:	617b      	str	r3, [r7, #20]
	float l= hdiffdrv->mech_prmtr.l;
 8004bb6:	4b1d      	ldr	r3, [pc, #116]	; (8004c2c <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x8c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8004bbe:	613b      	str	r3, [r7, #16]

	// Trajectory Variations computation (it's affect input vars delta_a_p and delta_theta_p because are pointers)

	if( delta_a_p != NULL)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d013      	beq.n	8004bee <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x4e>
		*delta_a_p= (delta_wheel[right] + delta_wheel[left])*r/2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	ed93 7a00 	vldr	s14, [r3]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	edd3 7a00 	vldr	s15, [r3]
 8004bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004be0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004be4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	edc3 7a00 	vstr	s15, [r3]

	if( delta_theta_p != NULL )
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d015      	beq.n	8004c20 <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x80>
		*delta_theta_p= (delta_wheel[right] - delta_wheel[left])*r/(2*l);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	ed93 7a00 	vldr	s14, [r3]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	edd3 7a00 	vldr	s15, [r3]
 8004c02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c06:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c0a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004c0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c12:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	edc3 7a00 	vstr	s15, [r3]

}
 8004c20:	bf00      	nop
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	200073ac 	.word	0x200073ac

08004c30 <DIFFDRIVE_CONTROL_WheelStep>:


void DIFFDRIVE_CONTROL_WheelStep(float* newest_target){
 8004c30:	b590      	push	{r4, r7, lr}
 8004c32:	b08b      	sub	sp, #44	; 0x2c
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_CONTROL_TypeDef* hctrl=  hdiffdrv->control;
 8004c38:	4b50      	ldr	r3, [pc, #320]	; (8004d7c <DIFFDRIVE_CONTROL_WheelStep+0x14c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004c40:	623b      	str	r3, [r7, #32]
	float curr_target[2], curr_measure, input[2];

	/* Do control wheels */

	// Waiting for step control enabling
	DIFFDRIVE_TIMING_Wait();
 8004c42:	f7ff fe77 	bl	8004934 <DIFFDRIVE_TIMING_Wait>

	// Then get wheel step measure If counters are not near overflow (look at CaptureMeasure function)
	if( (status= DIFFDRIVE_ENCODER_CaptureMeasure()) == DIFFDRIVE_ERROR ){
 8004c46:	f7ff f9b7 	bl	8003fb8 <DIFFDRIVE_ENCODER_CaptureMeasure>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	77fb      	strb	r3, [r7, #31]
 8004c4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c56:	d10a      	bne.n	8004c6e <DIFFDRIVE_CONTROL_WheelStep+0x3e>
		// If exception, reset control
		DIFFDRIVE_CONTROL_Reset();
 8004c58:	f7ff fde2 	bl	8004820 <DIFFDRIVE_CONTROL_Reset>
		// Reset target temporary variable
		newest_target[left ]= 0;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
		newest_target[right]= 0;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3304      	adds	r3, #4
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
	}

	// Compute input
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004c74:	e06f      	b.n	8004d56 <DIFFDRIVE_CONTROL_WheelStep+0x126>

		// Computing input using inversion control
		input[side]  = FEEDFORWARD_InversionControl(&(hctrl[side].fdfrwrd), newest_target[side]);
 8004c76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c7a:	2268      	movs	r2, #104	; 0x68
 8004c7c:	fb02 f303 	mul.w	r3, r2, r3
 8004c80:	6a3a      	ldr	r2, [r7, #32]
 8004c82:	4413      	add	r3, r2
 8004c84:	4619      	mov	r1, r3
 8004c86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	4413      	add	r3, r2
 8004c90:	edd3 7a00 	vldr	s15, [r3]
 8004c94:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8004c98:	eeb0 0a67 	vmov.f32	s0, s15
 8004c9c:	4608      	mov	r0, r1
 8004c9e:	f000 faac 	bl	80051fa <FEEDFORWARD_InversionControl>
 8004ca2:	eef0 7a40 	vmov.f32	s15, s0
 8004ca6:	00a3      	lsls	r3, r4, #2
 8004ca8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cac:	4413      	add	r3, r2
 8004cae:	3b20      	subs	r3, #32
 8004cb0:	edc3 7a00 	vstr	s15, [r3]

		// Wheel angle read from sensor
		curr_measure= __DIFFDRIVE_ENCODER_GET_CURRENT_VALUE(hdiffdrv,side);
 8004cb4:	4b31      	ldr	r3, [pc, #196]	; (8004d7c <DIFFDRIVE_CONTROL_WheelStep+0x14c>)
 8004cb6:	6819      	ldr	r1, [r3, #0]
 8004cb8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	61bb      	str	r3, [r7, #24]

		// Current target value saved in the feed-forward controller struct (you must call before the
		// Inversion Control function and then to extract this value. Look at feed-forward library to
		// better understand why)
		curr_target[side]= __FEEDFORWARD_GET_CURRENT_TARGET(&(hctrl[side].fdfrwrd));
 8004cce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cd2:	2268      	movs	r2, #104	; 0x68
 8004cd4:	fb02 f303 	mul.w	r3, r2, r3
 8004cd8:	6a3a      	ldr	r2, [r7, #32]
 8004cda:	441a      	add	r2, r3
 8004cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ce0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004ce8:	440b      	add	r3, r1
 8004cea:	3b18      	subs	r3, #24
 8004cec:	601a      	str	r2, [r3, #0]

		// Computing PID input
		input[side] += PID_Control(&(hctrl[side].pid), curr_target[side], curr_measure);
 8004cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cf2:	2268      	movs	r2, #104	; 0x68
 8004cf4:	fb02 f303 	mul.w	r3, r2, r3
 8004cf8:	6a3a      	ldr	r2, [r7, #32]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004d0a:	440b      	add	r3, r1
 8004d0c:	3b18      	subs	r3, #24
 8004d0e:	edd3 7a00 	vldr	s15, [r3]
 8004d12:	edd7 0a06 	vldr	s1, [r7, #24]
 8004d16:	eeb0 0a67 	vmov.f32	s0, s15
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f000 fb9b 	bl	8005456 <PID_Control>
 8004d20:	eeb0 7a40 	vmov.f32	s14, s0
 8004d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004d2e:	4413      	add	r3, r2
 8004d30:	3b20      	subs	r3, #32
 8004d32:	edd3 7a00 	vldr	s15, [r3]
 8004d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004d44:	4413      	add	r3, r2
 8004d46:	3b20      	subs	r3, #32
 8004d48:	edc3 7a00 	vstr	s15, [r3]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8004d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d50:	3301      	adds	r3, #1
 8004d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d98b      	bls.n	8004c76 <DIFFDRIVE_CONTROL_WheelStep+0x46>

	}

	// Set new PWMs signals
	DIFFDRIVE_MOTOR_SetPWMs(input);
 8004d5e:	f107 0308 	add.w	r3, r7, #8
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe fef2 	bl	8003b4c <DIFFDRIVE_MOTOR_SetPWMs>

	// Update differential drive state structure
	DIFFDRIVE_STATE_Update(input);
 8004d68:	f107 0308 	add.w	r3, r7, #8
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff fdfb 	bl	8004968 <DIFFDRIVE_STATE_Update>

}
 8004d72:	bf00      	nop
 8004d74:	372c      	adds	r7, #44	; 0x2c
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd90      	pop	{r4, r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	200073ac 	.word	0x200073ac

08004d80 <DIFFDRIVE_TrackingStart>:

void DIFFDRIVE_TrackingStart(void){
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0

	// Start control
	DIFFDRIVE_CONTROL_Start();
 8004d84:	f7ff fd3a 	bl	80047fc <DIFFDRIVE_CONTROL_Start>

	// First step wheels control (starts with zeros, robot still)
	DIFFDRIVE_TrackingStep(0,0);
 8004d88:	eddf 0a03 	vldr	s1, [pc, #12]	; 8004d98 <DIFFDRIVE_TrackingStart+0x18>
 8004d8c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8004d98 <DIFFDRIVE_TrackingStart+0x18>
 8004d90:	f000 f80a 	bl	8004da8 <DIFFDRIVE_TrackingStep>

}
 8004d94:	bf00      	nop
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	00000000 	.word	0x00000000

08004d9c <DIFFDRIVE_TrackingStop>:


void DIFFDRIVE_TrackingStop(void){
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0

	// Stop control
	DIFFDRIVE_CONTROL_Stop();
 8004da0:	f7ff fd36 	bl	8004810 <DIFFDRIVE_CONTROL_Stop>

}
 8004da4:	bf00      	nop
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <DIFFDRIVE_TrackingStep>:


void DIFFDRIVE_TrackingStep(float delta_a, float delta_theta){
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	ed87 0a01 	vstr	s0, [r7, #4]
 8004db2:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_CONTROL_TypeDef* tmpctrl= hdiffdrv->control;
 8004db6:	4b1a      	ldr	r3, [pc, #104]	; (8004e20 <DIFFDRIVE_TrackingStep+0x78>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004dbe:	613b      	str	r3, [r7, #16]
	float newest_target[2];

	// Extracting previous target
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	75fb      	strb	r3, [r7, #23]
 8004dc4:	e010      	b.n	8004de8 <DIFFDRIVE_TrackingStep+0x40>
		newest_target[side]= __FEEDFORWARD_GET_NEWEST_TARGET(&tmpctrl[side].fdfrwrd);
 8004dc6:	7dfb      	ldrb	r3, [r7, #23]
 8004dc8:	2268      	movs	r2, #104	; 0x68
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	441a      	add	r2, r3
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
 8004dd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	f107 0118 	add.w	r1, r7, #24
 8004ddc:	440b      	add	r3, r1
 8004dde:	3b10      	subs	r3, #16
 8004de0:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8004de2:	7dfb      	ldrb	r3, [r7, #23]
 8004de4:	3301      	adds	r3, #1
 8004de6:	75fb      	strb	r3, [r7, #23]
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d9eb      	bls.n	8004dc6 <DIFFDRIVE_TrackingStep+0x1e>


	// Computing newest target
	DIFFDRIVE_DeltaTrajectory2WheelAngle(newest_target, delta_a, delta_theta);
 8004dee:	f107 0308 	add.w	r3, r7, #8
 8004df2:	edd7 0a00 	vldr	s1, [r7]
 8004df6:	ed97 0a01 	vldr	s0, [r7, #4]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff fe7c 	bl	8004af8 <DIFFDRIVE_DeltaTrajectory2WheelAngle>

	// Make a wheel step motion
	DIFFDRIVE_CONTROL_WheelStep(newest_target);
 8004e00:	f107 0308 	add.w	r3, r7, #8
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ff13 	bl	8004c30 <DIFFDRIVE_CONTROL_WheelStep>

	// Updating History
	DIFFDRIVE_HISTORY_Update(delta_a, delta_theta);
 8004e0a:	edd7 0a00 	vldr	s1, [r7]
 8004e0e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004e12:	f7ff f9c7 	bl	80041a4 <DIFFDRIVE_HISTORY_Update>


}
 8004e16:	bf00      	nop
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	200073ac 	.word	0x200073ac

08004e24 <DIFFDRIVE_TIMING_Callback>:
	DIFFDRIVE_MOTOR_Stop();

}


void DIFFDRIVE_TIMING_Callback(TIM_HandleTypeDef* htim){
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]

	// Enabling timing flag
	hdiffdrv->timing.flag= true;
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <DIFFDRIVE_TIMING_Callback+0x20>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4


}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	200073ac 	.word	0x200073ac

08004e48 <MAF_Create>:
#include <stdlib.h>

// Moving Average Filter Methods --------------------------------------------------------------------- //

// MAF Create
MAF_HandleTypeDef MAF_Create(const int buffsize, float *weights){
 8004e48:	b5b0      	push	{r4, r5, r7, lr}
 8004e4a:	b08a      	sub	sp, #40	; 0x28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
	MAF_HandleTypeDef tmp;

	tmp.buffsize = buffsize;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	613b      	str	r3, [r7, #16]
	tmp.buffer = (float*)calloc(buffsize,sizeof(float));
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2104      	movs	r1, #4
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f008 f9d5 	bl	800d20c <calloc>
 8004e62:	4603      	mov	r3, r0
 8004e64:	623b      	str	r3, [r7, #32]
	tmp.sum = 0;
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
	tmp.avg = 0;
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	61bb      	str	r3, [r7, #24]
	tmp.idx = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	61fb      	str	r3, [r7, #28]
	tmp.weights= weights;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24


	return tmp;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	461d      	mov	r5, r3
 8004e7e:	f107 0410 	add.w	r4, r7, #16
 8004e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e8a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	3728      	adds	r7, #40	; 0x28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bdb0      	pop	{r4, r5, r7, pc}

08004e96 <MAF_Reset>:

void MAF_Reset(MAF_HandleTypeDef* filter, float init_val){
 8004e96:	b480      	push	{r7}
 8004e98:	b085      	sub	sp, #20
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	ed87 0a00 	vstr	s0, [r7]

	filter->sum = init_val;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	605a      	str	r2, [r3, #4]
	filter->avg = init_val;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	609a      	str	r2, [r3, #8]
	filter->idx = 0;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	60da      	str	r2, [r3, #12]

	for(int i=0; i < filter->buffsize; i++)
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	e009      	b.n	8004ece <MAF_Reset+0x38>
		filter->buffer[i]= init_val;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	601a      	str	r2, [r3, #0]
	for(int i=0; i < filter->buffsize; i++)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	dbf0      	blt.n	8004eba <MAF_Reset+0x24>
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <MAF_Update>:

// Maf update. Arithmetic or Weighted. If latter the weights array are ordered from oldest to newest
void MAF_Update(MAF_HandleTypeDef* filter, const float data){
 8004ee6:	b480      	push	{r7}
 8004ee8:	b087      	sub	sp, #28
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	ed87 0a00 	vstr	s0, [r7]

	// Weighted
	if(filter->weights != NULL){
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d03e      	beq.n	8004f78 <MAF_Update+0x92>
		// Store current measure
		filter->buffer[filter->idx] = data;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	601a      	str	r2, [r3, #0]

		// Sum variable
		float sum_tmp = 0;
 8004f0a:	f04f 0300 	mov.w	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
		// Index variable to scan the circular buffer
		int idx_tmp;

		// Computing average from oldest to newest (from 1 to size+1), in circular buffer
		// the oldest are the next value from the current
		for(int i=1; i<filter->buffsize+1; i++){
 8004f10:	2301      	movs	r3, #1
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	e027      	b.n	8004f66 <MAF_Update+0x80>
			// Current buffer index in the for loop (the mod '%' serve for the circular index)
			idx_tmp = (filter->idx+i)%(filter->buffsize);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	fb93 f1f2 	sdiv	r1, r3, r2
 8004f26:	fb02 f201 	mul.w	r2, r2, r1
 8004f2a:	1a9b      	subs	r3, r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
			// Current sum
			sum_tmp += (filter->buffer[idx_tmp])*(filter->weights[i-1]) 	;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	ed93 7a00 	vldr	s14, [r3]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f46:	3b01      	subs	r3, #1
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	edd3 7a00 	vldr	s15, [r3]
 8004f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f54:	ed97 7a05 	vldr	s14, [r7, #20]
 8004f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f5c:	edc7 7a05 	vstr	s15, [r7, #20]
		for(int i=1; i<filter->buffsize+1; i++){
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	3301      	adds	r3, #1
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	ddd2      	ble.n	8004f16 <MAF_Update+0x30>
		}
		filter->avg = sum_tmp;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	609a      	str	r2, [r3, #8]
 8004f76:	e02f      	b.n	8004fd8 <MAF_Update+0xf2>
	}
	// Arithmetic
	else{
		// Remove oldest value from circular buffer
		filter->sum -= filter->buffer[filter->idx];
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	edd3 7a00 	vldr	s15, [r3]
 8004f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	edc3 7a01 	vstr	s15, [r3, #4]

		// Add current measure
		filter->sum += data;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f9e:	edd7 7a00 	vldr	s15, [r7]
 8004fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	edc3 7a01 	vstr	s15, [r3, #4]

		// Calculate Average
		filter->avg = (float) filter->sum/filter->buffsize;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	edd3 6a01 	vldr	s13, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	edc3 7a02 	vstr	s15, [r3, #8]

		// Store current measure
		filter->buffer[filter->idx] = data;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	601a      	str	r2, [r3, #0]
	}

	// Increase index (the mod '%' serve for the circular buffer)
	filter->idx = (filter->idx+1)%(filter->buffsize);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6812      	ldr	r2, [r2, #0]
 8004fe2:	fb93 f1f2 	sdiv	r1, r3, r2
 8004fe6:	fb02 f201 	mul.w	r2, r2, r1
 8004fea:	1a9a      	subs	r2, r3, r2
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	60da      	str	r2, [r3, #12]

}
 8004ff0:	bf00      	nop
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <FEEDFORWARD_Init>:

#include <stdlib.h>
#include "my_lib/feedforward_controller.h"


void FEEDFORWARD_Init(FEEDFORWARD_HandleTypeDef* hctrl){
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]

	// Initializing handle structure values from Init field
	hctrl->arma.n_ar=  hctrl->Init.arma_n_ar;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	881a      	ldrh	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	821a      	strh	r2, [r3, #16]
	hctrl->arma.n_ma=  hctrl->Init.arma_n_ma;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	885a      	ldrh	r2, [r3, #2]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	825a      	strh	r2, [r3, #18]
	hctrl->arma.tau=   hctrl->Init.arma_tau;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	889a      	ldrh	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	829a      	strh	r2, [r3, #20]

	hctrl->arma.AR= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	8a1b      	ldrh	r3, [r3, #16]
 8005020:	2104      	movs	r1, #4
 8005022:	4618      	mov	r0, r3
 8005024:	f008 f8f2 	bl	800d20c <calloc>
 8005028:	4603      	mov	r3, r0
 800502a:	461a      	mov	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	619a      	str	r2, [r3, #24]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	e00e      	b.n	8005054 <FEEDFORWARD_Init+0x58>
		hctrl->arma.AR[i]= hctrl->Init.arma_AR[i];
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	441a      	add	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6999      	ldr	r1, [r3, #24]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3301      	adds	r3, #1
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	8a1b      	ldrh	r3, [r3, #16]
 8005058:	461a      	mov	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4293      	cmp	r3, r2
 800505e:	dbea      	blt.n	8005036 <FEEDFORWARD_Init+0x3a>

	hctrl->arma.MA= (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	8a5b      	ldrh	r3, [r3, #18]
 8005064:	2104      	movs	r1, #4
 8005066:	4618      	mov	r0, r3
 8005068:	f008 f8d0 	bl	800d20c <calloc>
 800506c:	4603      	mov	r3, r0
 800506e:	461a      	mov	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	61da      	str	r2, [r3, #28]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8005074:	2300      	movs	r3, #0
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	e00e      	b.n	8005098 <FEEDFORWARD_Init+0x9c>
		hctrl->arma.MA[i]= hctrl->Init.arma_MA[i];
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	441a      	add	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	69d9      	ldr	r1, [r3, #28]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	3301      	adds	r3, #1
 8005096:	60bb      	str	r3, [r7, #8]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8a5b      	ldrh	r3, [r3, #18]
 800509c:	461a      	mov	r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	4293      	cmp	r3, r2
 80050a2:	dbea      	blt.n	800507a <FEEDFORWARD_Init+0x7e>

	// Allocating history' arrays
	hctrl->target_buffer= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8a1b      	ldrh	r3, [r3, #16]
 80050a8:	2104      	movs	r1, #4
 80050aa:	4618      	mov	r0, r3
 80050ac:	f008 f8ae 	bl	800d20c <calloc>
 80050b0:	4603      	mov	r3, r0
 80050b2:	461a      	mov	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	625a      	str	r2, [r3, #36]	; 0x24
	hctrl->input_buffer=  (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	8a5b      	ldrh	r3, [r3, #18]
 80050bc:	2104      	movs	r1, #4
 80050be:	4618      	mov	r0, r3
 80050c0:	f008 f8a4 	bl	800d20c <calloc>
 80050c4:	4603      	mov	r3, r0
 80050c6:	461a      	mov	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	621a      	str	r2, [r3, #32]

}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <FEEDFORWARD_BufferInit>:
	// Reset feed-forward buffer (with NULL value in second argument the buffers are initialized with zeros)
	FEEDFORWARD_BufferInit(hctrl, NULL);

}

void FEEDFORWARD_BufferInit(FEEDFORWARD_HandleTypeDef* hctrl, float *target_init){
 80050d4:	b490      	push	{r4, r7}
 80050d6:	b08c      	sub	sp, #48	; 0x30
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f107 0408 	add.w	r4, r7, #8
 80050e4:	3310      	adds	r3, #16
 80050e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint16_t n_ar= arma.n_ar;
 80050ec:	893b      	ldrh	r3, [r7, #8]
 80050ee:	83fb      	strh	r3, [r7, #30]
	uint16_t n_ma= arma.n_ma;
 80050f0:	897b      	ldrh	r3, [r7, #10]
 80050f2:	83bb      	strh	r3, [r7, #28]
	uint16_t  tau= arma.tau;
 80050f4:	89bb      	ldrh	r3, [r7, #12]
 80050f6:	837b      	strh	r3, [r7, #26]

	// If target pointer is equal to NULL the buffers take zero values
	if( (void *)target_init == NULL ){
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d129      	bne.n	8005152 <FEEDFORWARD_BufferInit+0x7e>

		for(int i= 0; i < tau; i++)
 80050fe:	2300      	movs	r3, #0
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005102:	e00d      	b.n	8005120 <FEEDFORWARD_BufferInit+0x4c>
			hctrl->target_buffer[(n_ar-1)-i]= 0;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005108:	8bfb      	ldrh	r3, [r7, #30]
 800510a:	1e59      	subs	r1, r3, #1
 800510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510e:	1acb      	subs	r3, r1, r3
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
		for(int i= 0; i < tau; i++)
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	3301      	adds	r3, #1
 800511e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005120:	8b7b      	ldrh	r3, [r7, #26]
 8005122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005124:	429a      	cmp	r2, r3
 8005126:	dbed      	blt.n	8005104 <FEEDFORWARD_BufferInit+0x30>

		// Complete first values with the same initial value
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 8005128:	8bfb      	ldrh	r3, [r7, #30]
 800512a:	1e5a      	subs	r2, r3, #1
 800512c:	8b7b      	ldrh	r3, [r7, #26]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	62bb      	str	r3, [r7, #40]	; 0x28
 8005132:	e00a      	b.n	800514a <FEEDFORWARD_BufferInit+0x76>
			hctrl->target_buffer[i]= 0;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	3b01      	subs	r3, #1
 8005148:	62bb      	str	r3, [r7, #40]	; 0x28
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	2b00      	cmp	r3, #0
 800514e:	daf1      	bge.n	8005134 <FEEDFORWARD_BufferInit+0x60>
 8005150:	e02d      	b.n	80051ae <FEEDFORWARD_BufferInit+0xda>

	}
	// Else I use the input values
	else{
		for(int i= 0; i < tau; i++)
 8005152:	2300      	movs	r3, #0
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
 8005156:	e012      	b.n	800517e <FEEDFORWARD_BufferInit+0xaa>
			hctrl->target_buffer[(n_ar-1)-i]= target_init[tau-i];
 8005158:	8b7a      	ldrh	r2, [r7, #26]
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	441a      	add	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005168:	8bfb      	ldrh	r3, [r7, #30]
 800516a:	1e58      	subs	r0, r3, #1
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	1ac3      	subs	r3, r0, r3
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	601a      	str	r2, [r3, #0]
		for(int i= 0; i < tau; i++)
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	3301      	adds	r3, #1
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
 800517e:	8b7b      	ldrh	r3, [r7, #26]
 8005180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005182:	429a      	cmp	r2, r3
 8005184:	dbe8      	blt.n	8005158 <FEEDFORWARD_BufferInit+0x84>

		// Complete first values with the same initial value
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 8005186:	8bfb      	ldrh	r3, [r7, #30]
 8005188:	1e5a      	subs	r2, r3, #1
 800518a:	8b7b      	ldrh	r3, [r7, #26]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	623b      	str	r3, [r7, #32]
 8005190:	e00a      	b.n	80051a8 <FEEDFORWARD_BufferInit+0xd4>
			hctrl->target_buffer[i]= target_init[0];
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	601a      	str	r2, [r3, #0]
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	3b01      	subs	r3, #1
 80051a6:	623b      	str	r3, [r7, #32]
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	daf1      	bge.n	8005192 <FEEDFORWARD_BufferInit+0xbe>
	}

	// Set current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[n_ar-1-tau];
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051b2:	8bfb      	ldrh	r3, [r7, #30]
 80051b4:	1e59      	subs	r1, r3, #1
 80051b6:	8b7b      	ldrh	r3, [r7, #26]
 80051b8:	1acb      	subs	r3, r1, r3
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[n_ma-1];
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1a      	ldr	r2, [r3, #32]
 80051c8:	8bbb      	ldrh	r3, [r7, #28]
 80051ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051ce:	3b01      	subs	r3, #1
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051de:	893b      	ldrh	r3, [r7, #8]
 80051e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051e4:	3b01      	subs	r3, #1
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051f0:	bf00      	nop
 80051f2:	3730      	adds	r7, #48	; 0x30
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc90      	pop	{r4, r7}
 80051f8:	4770      	bx	lr

080051fa <FEEDFORWARD_InversionControl>:


float FEEDFORWARD_InversionControl(FEEDFORWARD_HandleTypeDef* hctrl, float newest_target){
 80051fa:	b590      	push	{r4, r7, lr}
 80051fc:	b08f      	sub	sp, #60	; 0x3c
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	ed87 0a00 	vstr	s0, [r7]

	float input= 0;
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	637b      	str	r3, [r7, #52]	; 0x34
	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f107 040c 	add.w	r4, r7, #12
 8005212:	3310      	adds	r3, #16
 8005214:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005216:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int oldest_ar_sample= 0;
 800521a:	2300      	movs	r3, #0
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
	int newest_ar_sample= arma.n_ar-1;  // Last minus one because
 800521e:	89bb      	ldrh	r3, [r7, #12]
 8005220:	3b01      	subs	r3, #1
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
								    	//
	int oldest_ma_sample= 0;			//
 8005224:	2300      	movs	r3, #0
 8005226:	623b      	str	r3, [r7, #32]
	int newest_ma_sample= arma.n_ma-1;  // C arrays start from 0
 8005228:	89fb      	ldrh	r3, [r7, #14]
 800522a:	3b01      	subs	r3, #1
 800522c:	61fb      	str	r3, [r7, #28]

	// Assigning the newest target value
	hctrl->target_buffer[newest_ar_sample]= newest_target;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	601a      	str	r2, [r3, #0]

	// Compute feed-forward input (inversion control)
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	633b      	str	r3, [r7, #48]	; 0x30
 8005240:	e019      	b.n	8005276 <FEEDFORWARD_InversionControl+0x7c>
		input += arma.AR[newest_ar_sample-i]*hctrl->target_buffer[i];
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	1acb      	subs	r3, r1, r3
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	ed93 7a00 	vldr	s14, [r3]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	edd3 7a00 	vldr	s15, [r3]
 8005260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005264:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800526c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	3301      	adds	r3, #1
 8005274:	633b      	str	r3, [r7, #48]	; 0x30
 8005276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	429a      	cmp	r2, r3
 800527c:	dde1      	ble.n	8005242 <FEEDFORWARD_InversionControl+0x48>
	// I know inputs until the newest_ma_sample-1
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005282:	e01b      	b.n	80052bc <FEEDFORWARD_InversionControl+0xc2>
		input += -arma.MA[newest_ma_sample-j]*hctrl->input_buffer[j];
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	69f9      	ldr	r1, [r7, #28]
 8005288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528a:	1acb      	subs	r3, r1, r3
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	edd3 7a00 	vldr	s15, [r3]
 8005294:	eeb1 7a67 	vneg.f32	s14, s15
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a1a      	ldr	r2, [r3, #32]
 800529c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	edd3 7a00 	vldr	s15, [r3]
 80052a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052aa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80052ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052b2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 80052b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b8:	3301      	adds	r3, #1
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	429a      	cmp	r2, r3
 80052c2:	dcdf      	bgt.n	8005284 <FEEDFORWARD_InversionControl+0x8a>
	// Last input is computed here
	input /= arma.MA[0];
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	ed93 7a00 	vldr	s14, [r3]
 80052ca:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80052ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052d2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Saving newest input
	hctrl->input_buffer[newest_ma_sample]= input;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1a      	ldr	r2, [r3, #32]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052e2:	601a      	str	r2, [r3, #0]

	// Updating Buffer for next step
	FEEDFORWARD_BufferUpdate(hctrl);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f808 	bl	80052fa <FEEDFORWARD_BufferUpdate>

	return input;
 80052ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ec:	ee07 3a90 	vmov	s15, r3
}
 80052f0:	eeb0 0a67 	vmov.f32	s0, s15
 80052f4:	373c      	adds	r7, #60	; 0x3c
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd90      	pop	{r4, r7, pc}

080052fa <FEEDFORWARD_BufferUpdate>:


void FEEDFORWARD_BufferUpdate(FEEDFORWARD_HandleTypeDef* hctrl){
 80052fa:	b490      	push	{r4, r7}
 80052fc:	b088      	sub	sp, #32
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f107 0408 	add.w	r4, r7, #8
 8005308:	3310      	adds	r3, #16
 800530a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800530c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Updating current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[arma.n_ar-1-arma.tau];
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005314:	893b      	ldrh	r3, [r7, #8]
 8005316:	3b01      	subs	r3, #1
 8005318:	89b9      	ldrh	r1, [r7, #12]
 800531a:	1a5b      	subs	r3, r3, r1
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[arma.n_ma-1];
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1a      	ldr	r2, [r3, #32]
 800532a:	897b      	ldrh	r3, [r7, #10]
 800532c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005330:	3b01      	subs	r3, #1
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005340:	893b      	ldrh	r3, [r7, #8]
 8005342:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005346:	3b01      	subs	r3, #1
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	631a      	str	r2, [r3, #48]	; 0x30

	// Then slide buffers ( look, loops go from idx=0 to idx=n-2 )
	for(int i=0; i < arma.n_ar-1; i++)
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	e00f      	b.n	8005378 <FEEDFORWARD_BufferUpdate+0x7e>
		hctrl->target_buffer[i]= hctrl->target_buffer[i+1];
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	3301      	adds	r3, #1
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	441a      	add	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ar-1; i++)
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	3301      	adds	r3, #1
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	893b      	ldrh	r3, [r7, #8]
 800537a:	3b01      	subs	r3, #1
 800537c:	69fa      	ldr	r2, [r7, #28]
 800537e:	429a      	cmp	r2, r3
 8005380:	dbea      	blt.n	8005358 <FEEDFORWARD_BufferUpdate+0x5e>
	for(int i=0; i < arma.n_ma-1; i++)
 8005382:	2300      	movs	r3, #0
 8005384:	61bb      	str	r3, [r7, #24]
 8005386:	e00f      	b.n	80053a8 <FEEDFORWARD_BufferUpdate+0xae>
		hctrl->input_buffer[i]= hctrl->input_buffer[i+1];
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a1a      	ldr	r2, [r3, #32]
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	3301      	adds	r3, #1
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	441a      	add	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a19      	ldr	r1, [r3, #32]
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	6812      	ldr	r2, [r2, #0]
 80053a0:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ma-1; i++)
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	3301      	adds	r3, #1
 80053a6:	61bb      	str	r3, [r7, #24]
 80053a8:	897b      	ldrh	r3, [r7, #10]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	dbea      	blt.n	8005388 <FEEDFORWARD_BufferUpdate+0x8e>

}
 80053b2:	bf00      	nop
 80053b4:	bf00      	nop
 80053b6:	3720      	adds	r7, #32
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc90      	pop	{r4, r7}
 80053bc:	4770      	bx	lr

080053be <PID_Init>:
 */

#include "my_lib/pid_controller.h"


void PID_Init(PID_HandleTypeDef* hpid){
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]

	// Init parameters
	hpid->P=  hpid->Init.P;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	611a      	str	r2, [r3, #16]
	hpid->I=  hpid->Init.I;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	615a      	str	r2, [r3, #20]
	hpid->D=  hpid->Init.D;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	619a      	str	r2, [r3, #24]
	hpid->Ts= hpid->Init.Ts;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	631a      	str	r2, [r3, #48]	; 0x30

	// Init Input contributes variables
	hpid->u_P= 0;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	61da      	str	r2, [r3, #28]
	hpid->u_I= 0;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24

	// Init Previous variables
	hpid->u_prev= 0;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <PID_Reset>:



// Reset previous state and contributes variables
void PID_Reset(PID_HandleTypeDef* hpid){
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]

	hpid->u_P= 0;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	61da      	str	r2, [r3, #28]
	hpid->u_I= 0;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	625a      	str	r2, [r3, #36]	; 0x24

	hpid->u_prev= 0;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	62da      	str	r2, [r3, #44]	; 0x2c

}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <PID_Control>:


float PID_Control(PID_HandleTypeDef* hpid, float target, float measure){
 8005456:	b480      	push	{r7}
 8005458:	b089      	sub	sp, #36	; 0x24
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	ed87 0a02 	vstr	s0, [r7, #8]
 8005462:	edc7 0a01 	vstr	s1, [r7, #4]

	float e_prev,e_curr, Ts, u;

	// Time step
	Ts= hpid->Ts;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	61fb      	str	r3, [r7, #28]

	// Following error
	e_curr= target-measure;
 800546c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005470:	edd7 7a01 	vldr	s15, [r7, #4]
 8005474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005478:	edc7 7a06 	vstr	s15, [r7, #24]
	e_prev= hpid->e_prev;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	617b      	str	r3, [r7, #20]

	// Proportional
	hpid->u_P= hpid->P*e_curr;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	ed93 7a04 	vldr	s14, [r3, #16]
 8005488:	edd7 7a06 	vldr	s15, [r7, #24]
 800548c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	edc3 7a07 	vstr	s15, [r3, #28]

	// Integral
	hpid->u_I += hpid->I*e_prev*Ts;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	ed93 7a08 	vldr	s14, [r3, #32]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	edd3 6a05 	vldr	s13, [r3, #20]
 80054a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80054a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80054aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80054ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	edc3 7a08 	vstr	s15, [r3, #32]

	// Derivative
	hpid->u_D = hpid->D*(e_curr-e_prev)/Ts;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	ed93 7a06 	vldr	s14, [r3, #24]
 80054c2:	edd7 6a06 	vldr	s13, [r7, #24]
 80054c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80054ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80054ce:	ee67 6a27 	vmul.f32	s13, s14, s15
 80054d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80054d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Control Input
	u= hpid->u_P + hpid->u_I + hpid->u_D;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	ed93 7a07 	vldr	s14, [r3, #28]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80054ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80054f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054fa:	edc7 7a04 	vstr	s15, [r7, #16]

	// Updating struct
	hpid->u_prev= u;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= e_curr;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	62da      	str	r2, [r3, #44]	; 0x2c

	return u;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	ee07 3a90 	vmov	s15, r3

}
 8005510:	eeb0 0a67 	vmov.f32	s0, s15
 8005514:	3724      	adds	r7, #36	; 0x24
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	db04      	blt.n	8005536 <_isatty+0x18>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b02      	cmp	r3, #2
 8005530:	dc01      	bgt.n	8005536 <_isatty+0x18>
    return 1;
 8005532:	2301      	movs	r3, #1
 8005534:	e005      	b.n	8005542 <_isatty+0x24>

  errno = EBADF;
 8005536:	f007 fe71 	bl	800d21c <__errno>
 800553a:	4603      	mov	r3, r0
 800553c:	2209      	movs	r2, #9
 800553e:	601a      	str	r2, [r3, #0]
  return 0;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <_write>:

int _write(int fd, char* ptr, int len) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d002      	beq.n	8005564 <_write+0x18>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d111      	bne.n	8005588 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8005564:	4b0e      	ldr	r3, [pc, #56]	; (80055a0 <_write+0x54>)
 8005566:	6818      	ldr	r0, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	b29a      	uxth	r2, r3
 800556c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	f003 fdf1 	bl	8009158 <HAL_UART_Transmit>
 8005576:	4603      	mov	r3, r0
 8005578:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800557a:	7dfb      	ldrb	r3, [r7, #23]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <_write+0x38>
      return len;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	e008      	b.n	8005596 <_write+0x4a>
    else
      return EIO;
 8005584:	2305      	movs	r3, #5
 8005586:	e006      	b.n	8005596 <_write+0x4a>
  }
  errno = EBADF;
 8005588:	f007 fe48 	bl	800d21c <__errno>
 800558c:	4603      	mov	r3, r0
 800558e:	2209      	movs	r2, #9
 8005590:	601a      	str	r2, [r3, #0]
  return -1;
 8005592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	200073b0 	.word	0x200073b0

080055a4 <_close>:

int _close(int fd) {
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	db04      	blt.n	80055bc <_close+0x18>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	dc01      	bgt.n	80055bc <_close+0x18>
    return 0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	e006      	b.n	80055ca <_close+0x26>

  errno = EBADF;
 80055bc:	f007 fe2e 	bl	800d21c <__errno>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2209      	movs	r2, #9
 80055c4:	601a      	str	r2, [r3, #0]
  return -1;
 80055c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80055de:	f007 fe1d 	bl	800d21c <__errno>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2209      	movs	r2, #9
 80055e6:	601a      	str	r2, [r3, #0]
  return -1;
 80055e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <_read>:

int _read(int fd, char* ptr, int len) {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d110      	bne.n	8005628 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8005606:	4b0e      	ldr	r3, [pc, #56]	; (8005640 <_read+0x4c>)
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800560e:	2201      	movs	r2, #1
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	f003 fe33 	bl	800927c <HAL_UART_Receive>
 8005616:	4603      	mov	r3, r0
 8005618:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <_read+0x30>
      return 1;
 8005620:	2301      	movs	r3, #1
 8005622:	e008      	b.n	8005636 <_read+0x42>
    else
      return EIO;
 8005624:	2305      	movs	r3, #5
 8005626:	e006      	b.n	8005636 <_read+0x42>
  }
  errno = EBADF;
 8005628:	f007 fdf8 	bl	800d21c <__errno>
 800562c:	4603      	mov	r3, r0
 800562e:	2209      	movs	r2, #9
 8005630:	601a      	str	r2, [r3, #0]
  return -1;
 8005632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	200073b0 	.word	0x200073b0

08005644 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	db08      	blt.n	8005666 <_fstat+0x22>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b02      	cmp	r3, #2
 8005658:	dc05      	bgt.n	8005666 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005660:	605a      	str	r2, [r3, #4]
    return 0;
 8005662:	2300      	movs	r3, #0
 8005664:	e005      	b.n	8005672 <_fstat+0x2e>
  }

  errno = EBADF;
 8005666:	f007 fdd9 	bl	800d21c <__errno>
 800566a:	4603      	mov	r3, r0
 800566c:	2209      	movs	r2, #9
 800566e:	601a      	str	r2, [r3, #0]
  return 0;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	0000      	movs	r0, r0
 800567c:	0000      	movs	r0, r0
	...

08005680 <SERVO_Init>:


/*
 * Initialization
 */
void SERVO_Init(SERVO_HandleTypeDef* hservo){
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]

	// Assign timer handler
	hservo->htim = hservo->Init.htim;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	609a      	str	r2, [r3, #8]

	/* Computing prescaler ad autoreload period to obtain an update event with frequency of SERVO_FREQ Hertz */

	uint16_t prescaler=  __MYLIB_GET_TIMER_CLK(hservo->htim)*1/1e6 - 1;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a76      	ldr	r2, [pc, #472]	; (8005870 <SERVO_Init+0x1f0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d017      	beq.n	80056cc <SERVO_Init+0x4c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a74      	ldr	r2, [pc, #464]	; (8005874 <SERVO_Init+0x1f4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d011      	beq.n	80056cc <SERVO_Init+0x4c>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a72      	ldr	r2, [pc, #456]	; (8005878 <SERVO_Init+0x1f8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00b      	beq.n	80056cc <SERVO_Init+0x4c>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a70      	ldr	r2, [pc, #448]	; (800587c <SERVO_Init+0x1fc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d005      	beq.n	80056cc <SERVO_Init+0x4c>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a6e      	ldr	r2, [pc, #440]	; (8005880 <SERVO_Init+0x200>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d114      	bne.n	80056f6 <SERVO_Init+0x76>
 80056cc:	4b6d      	ldr	r3, [pc, #436]	; (8005884 <SERVO_Init+0x204>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d106      	bne.n	80056e6 <SERVO_Init+0x66>
 80056d8:	f001 f8f0 	bl	80068bc <HAL_RCC_GetPCLK2Freq>
 80056dc:	4603      	mov	r3, r0
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fa ff30 	bl	8000544 <__aeabi_ui2d>
 80056e4:	e01b      	b.n	800571e <SERVO_Init+0x9e>
 80056e6:	f001 f8e9 	bl	80068bc <HAL_RCC_GetPCLK2Freq>
 80056ea:	4603      	mov	r3, r0
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fa ff28 	bl	8000544 <__aeabi_ui2d>
 80056f4:	e013      	b.n	800571e <SERVO_Init+0x9e>
 80056f6:	4b63      	ldr	r3, [pc, #396]	; (8005884 <SERVO_Init+0x204>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <SERVO_Init+0x90>
 8005702:	f001 f8c7 	bl	8006894 <HAL_RCC_GetPCLK1Freq>
 8005706:	4603      	mov	r3, r0
 8005708:	4618      	mov	r0, r3
 800570a:	f7fa ff1b 	bl	8000544 <__aeabi_ui2d>
 800570e:	e006      	b.n	800571e <SERVO_Init+0x9e>
 8005710:	f001 f8c0 	bl	8006894 <HAL_RCC_GetPCLK1Freq>
 8005714:	4603      	mov	r3, r0
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	4618      	mov	r0, r3
 800571a:	f7fa ff13 	bl	8000544 <__aeabi_ui2d>
 800571e:	a352      	add	r3, pc, #328	; (adr r3, 8005868 <SERVO_Init+0x1e8>)
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f7fb f8b2 	bl	800088c <__aeabi_ddiv>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4610      	mov	r0, r2
 800572e:	4619      	mov	r1, r3
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	4b54      	ldr	r3, [pc, #336]	; (8005888 <SERVO_Init+0x208>)
 8005736:	f7fa fdc7 	bl	80002c8 <__aeabi_dsub>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4610      	mov	r0, r2
 8005740:	4619      	mov	r1, r3
 8005742:	f7fb fa51 	bl	8000be8 <__aeabi_d2uiz>
 8005746:	4603      	mov	r3, r0
 8005748:	81fb      	strh	r3, [r7, #14]
	uint16_t autoreload= __MYLIB_GET_TIMER_CLK(hservo->htim)/( (prescaler+1)*SERVO_FREQ ) - 1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a47      	ldr	r2, [pc, #284]	; (8005870 <SERVO_Init+0x1f0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d017      	beq.n	8005786 <SERVO_Init+0x106>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a45      	ldr	r2, [pc, #276]	; (8005874 <SERVO_Init+0x1f4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d011      	beq.n	8005786 <SERVO_Init+0x106>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a43      	ldr	r2, [pc, #268]	; (8005878 <SERVO_Init+0x1f8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00b      	beq.n	8005786 <SERVO_Init+0x106>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a41      	ldr	r2, [pc, #260]	; (800587c <SERVO_Init+0x1fc>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d005      	beq.n	8005786 <SERVO_Init+0x106>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a3f      	ldr	r2, [pc, #252]	; (8005880 <SERVO_Init+0x200>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d10e      	bne.n	80057a4 <SERVO_Init+0x124>
 8005786:	4b3f      	ldr	r3, [pc, #252]	; (8005884 <SERVO_Init+0x204>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d103      	bne.n	800579a <SERVO_Init+0x11a>
 8005792:	f001 f893 	bl	80068bc <HAL_RCC_GetPCLK2Freq>
 8005796:	4603      	mov	r3, r0
 8005798:	e012      	b.n	80057c0 <SERVO_Init+0x140>
 800579a:	f001 f88f 	bl	80068bc <HAL_RCC_GetPCLK2Freq>
 800579e:	4603      	mov	r3, r0
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	e00d      	b.n	80057c0 <SERVO_Init+0x140>
 80057a4:	4b37      	ldr	r3, [pc, #220]	; (8005884 <SERVO_Init+0x204>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d103      	bne.n	80057b8 <SERVO_Init+0x138>
 80057b0:	f001 f870 	bl	8006894 <HAL_RCC_GetPCLK1Freq>
 80057b4:	4603      	mov	r3, r0
 80057b6:	e003      	b.n	80057c0 <SERVO_Init+0x140>
 80057b8:	f001 f86c 	bl	8006894 <HAL_RCC_GetPCLK1Freq>
 80057bc:	4603      	mov	r3, r0
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	89fa      	ldrh	r2, [r7, #14]
 80057c2:	3201      	adds	r2, #1
 80057c4:	2132      	movs	r1, #50	; 0x32
 80057c6:	fb01 f202 	mul.w	r2, r1, r2
 80057ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	81bb      	strh	r3, [r7, #12]

	// Set counter with computed prescaler and autoreload period
	__HAL_TIM_SET_PRESCALER(hservo->htim, prescaler);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	89fa      	ldrh	r2, [r7, #14]
 80057dc:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(hservo->htim, autoreload);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	89ba      	ldrh	r2, [r7, #12]
 80057e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	89ba      	ldrh	r2, [r7, #12]
 80057ee:	60da      	str	r2, [r3, #12]

	// Compute min and max duty beats
	// min =  0  degree
	// max = 180 degree
	hservo->min_duty_beats= (__HAL_TIM_GET_AUTORELOAD(hservo->htim)+1)*SERVO_MIN_PERC/100;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	3301      	adds	r3, #1
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005802:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8005806:	ee27 7a87 	vmul.f32	s14, s15, s14
 800580a:	eddf 6a20 	vldr	s13, [pc, #128]	; 800588c <SERVO_Init+0x20c>
 800580e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005816:	ee17 2a90 	vmov	r2, s15
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	611a      	str	r2, [r3, #16]
	hservo->max_duty_beats= (__HAL_TIM_GET_AUTORELOAD(hservo->htim)+1)*SERVO_MAX_PERC/100;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	3301      	adds	r3, #1
 8005828:	ee07 3a90 	vmov	s15, r3
 800582c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005830:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005890 <SERVO_Init+0x210>
 8005834:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005838:	eddf 6a14 	vldr	s13, [pc, #80]	; 800588c <SERVO_Init+0x20c>
 800583c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005844:	ee17 2a90 	vmov	r2, s15
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	615a      	str	r2, [r3, #20]

	HAL_TIM_PWM_Start(hservo->htim, hservo->pwm_channel);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	4619      	mov	r1, r3
 8005856:	4610      	mov	r0, r2
 8005858:	f001 feb8 	bl	80075cc <HAL_TIM_PWM_Start>

}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	f3af 8000 	nop.w
 8005868:	00000000 	.word	0x00000000
 800586c:	412e8480 	.word	0x412e8480
 8005870:	40010000 	.word	0x40010000
 8005874:	40010400 	.word	0x40010400
 8005878:	40014000 	.word	0x40014000
 800587c:	40014400 	.word	0x40014400
 8005880:	40014800 	.word	0x40014800
 8005884:	40023800 	.word	0x40023800
 8005888:	3ff00000 	.word	0x3ff00000
 800588c:	42c80000 	.word	0x42c80000
 8005890:	4151999a 	.word	0x4151999a

08005894 <SERVO_SetDegree>:
 * Set degree for SERVO (it can move from 0 to 180 degree):
 *
 * num_duty_beats = (max – min)*deg/180 + min
 *
 */
void SERVO_SetDegree(SERVO_HandleTypeDef* hservo, float degree){
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	ed87 0a00 	vstr	s0, [r7]
	int num_beats = (hservo->max_duty_beats - hservo->min_duty_beats)*degree/180 + hservo->min_duty_beats;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	695a      	ldr	r2, [r3, #20]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058b2:	edd7 7a00 	vldr	s15, [r7]
 80058b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ba:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80058ec <SERVO_SetDegree+0x58>
 80058be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058d6:	ee17 3a90 	vmov	r3, s15
 80058da:	60fb      	str	r3, [r7, #12]
	SERVO_SetBeats(hservo, num_beats);
 80058dc:	68f9      	ldr	r1, [r7, #12]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f806 	bl	80058f0 <SERVO_SetBeats>
}
 80058e4:	bf00      	nop
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	43340000 	.word	0x43340000

080058f0 <SERVO_SetBeats>:

/*
 * Set duty cycle beats for SERVO
 * 	  num_beats must be between MIN and MAX
 */
void SERVO_SetBeats(SERVO_HandleTypeDef* hservo, int num_beats){
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]

	// Avoiding to set num_beats outside ranges
	if( num_beats < hservo->min_duty_beats )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	da03      	bge.n	800590c <SERVO_SetBeats+0x1c>
		num_beats = hservo->min_duty_beats;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	603b      	str	r3, [r7, #0]
 800590a:	e007      	b.n	800591c <SERVO_SetBeats+0x2c>
	else
	if( num_beats > hservo->max_duty_beats )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	dd02      	ble.n	800591c <SERVO_SetBeats+0x2c>
		num_beats = hservo->max_duty_beats;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	603b      	str	r3, [r7, #0]


	// Setting current PWM duty cycle (via CCR: Capture/Compare TIM's Register)
	__HAL_TIM_SET_COMPARE(hservo->htim,hservo->pwm_channel,num_beats);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d105      	bne.n	8005930 <SERVO_SetBeats+0x40>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	635a      	str	r2, [r3, #52]	; 0x34

}
 800592e:	e018      	b.n	8005962 <SERVO_SetBeats+0x72>
	__HAL_TIM_SET_COMPARE(hservo->htim,hservo->pwm_channel,num_beats);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	2b04      	cmp	r3, #4
 8005936:	d105      	bne.n	8005944 <SERVO_SetBeats+0x54>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005942:	e00e      	b.n	8005962 <SERVO_SetBeats+0x72>
	__HAL_TIM_SET_COMPARE(hservo->htim,hservo->pwm_channel,num_beats);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d105      	bne.n	8005958 <SERVO_SetBeats+0x68>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8005956:	e004      	b.n	8005962 <SERVO_SetBeats+0x72>
	__HAL_TIM_SET_COMPARE(hservo->htim,hservo->pwm_channel,num_beats);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6413      	str	r3, [r2, #64]	; 0x40
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
	...

08005970 <ULTRASONIC_Init>:

// Global index associated with each sensor
int8_t glbl_idx= 0;


ULTRASONIC_StatusTypeDef ULTRASONIC_Init(ULTRASONIC_HandleTypeDef* hultrsnc){
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]

	// Check if it's possible to initialize a new sensor
	if( glbl_idx < MAX_SENSORS )
 8005978:	4b5d      	ldr	r3, [pc, #372]	; (8005af0 <ULTRASONIC_Init+0x180>)
 800597a:	f993 3000 	ldrsb.w	r3, [r3]
 800597e:	2b03      	cmp	r3, #3
 8005980:	dc41      	bgt.n	8005a06 <ULTRASONIC_Init+0x96>
		// Assign sensor index and increment global index
		hultrsnc->sensor_idx= glbl_idx++;
 8005982:	4b5b      	ldr	r3, [pc, #364]	; (8005af0 <ULTRASONIC_Init+0x180>)
 8005984:	f993 2000 	ldrsb.w	r2, [r3]
 8005988:	b2d3      	uxtb	r3, r2
 800598a:	3301      	adds	r3, #1
 800598c:	b2db      	uxtb	r3, r3
 800598e:	b259      	sxtb	r1, r3
 8005990:	4b57      	ldr	r3, [pc, #348]	; (8005af0 <ULTRASONIC_Init+0x180>)
 8005992:	7019      	strb	r1, [r3, #0]
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	else
		// Return exception
		return ULTRASONIC_ERROR;

	// Init fields
	hultrsnc->htim=		  		      hultrsnc->Init.htim;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	61da      	str	r2, [r3, #28]
	hultrsnc->io.trig_GPIOx= 		  hultrsnc->Init.io_trig_GPIOx;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	629a      	str	r2, [r3, #40]	; 0x28
	hultrsnc->io.trig_Pin=  		  hultrsnc->Init.io_trig_Pin;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	62da      	str	r2, [r3, #44]	; 0x2c
	hultrsnc->io.echo_GPIOx= 		  hultrsnc->Init.io_echo_GPIOx;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	631a      	str	r2, [r3, #48]	; 0x30
	hultrsnc->io.echo_Pin=  		  hultrsnc->Init.io_echo_Pin;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	695a      	ldr	r2, [r3, #20]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	635a      	str	r2, [r3, #52]	; 0x34
	hultrsnc->io.echo_IC_tim_channel= hultrsnc->Init.io_echo_IC_tim_channel;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699a      	ldr	r2, [r3, #24]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38
	uint16_t n=          			  hultrsnc->Init.history_lenght;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	889b      	ldrh	r3, [r3, #4]
 80059d0:	81fb      	strh	r3, [r7, #14]

	// Allocating history array
	hultrsnc->distance_history= (float*)calloc(n,sizeof(float));
 80059d2:	89fb      	ldrh	r3, [r7, #14]
 80059d4:	2104      	movs	r1, #4
 80059d6:	4618      	mov	r0, r3
 80059d8:	f007 fc18 	bl	800d20c <calloc>
 80059dc:	4603      	mov	r3, r0
 80059de:	461a      	mov	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	625a      	str	r2, [r3, #36]	; 0x24

	// Assigning timer callback
	hultrsnc->htim->PeriodElapsedCallback= ULTRASONIC_Timeout_Callback;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	4a42      	ldr	r2, [pc, #264]	; (8005af4 <ULTRASONIC_Init+0x184>)
 80059ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	hultrsnc->htim->IC_CaptureCallback=    ULTRASONIC_IC_Callback;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	4a41      	ldr	r2, [pc, #260]	; (8005af8 <ULTRASONIC_Init+0x188>)
 80059f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	// Computing prescaler to obtain a timer with frequency of 1MHz
	uint32_t prescaler= __MYLIB_GET_TIMER_CLK(hultrsnc->htim)/1e6 - 1;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a3f      	ldr	r2, [pc, #252]	; (8005afc <ULTRASONIC_Init+0x18c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d01b      	beq.n	8005a3c <ULTRASONIC_Init+0xcc>
 8005a04:	e002      	b.n	8005a0c <ULTRASONIC_Init+0x9c>
		return ULTRASONIC_ERROR;
 8005a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a0a:	e067      	b.n	8005adc <ULTRASONIC_Init+0x16c>
	uint32_t prescaler= __MYLIB_GET_TIMER_CLK(hultrsnc->htim)/1e6 - 1;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a3b      	ldr	r2, [pc, #236]	; (8005b00 <ULTRASONIC_Init+0x190>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d011      	beq.n	8005a3c <ULTRASONIC_Init+0xcc>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a39      	ldr	r2, [pc, #228]	; (8005b04 <ULTRASONIC_Init+0x194>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00b      	beq.n	8005a3c <ULTRASONIC_Init+0xcc>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a37      	ldr	r2, [pc, #220]	; (8005b08 <ULTRASONIC_Init+0x198>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d005      	beq.n	8005a3c <ULTRASONIC_Init+0xcc>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a35      	ldr	r2, [pc, #212]	; (8005b0c <ULTRASONIC_Init+0x19c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d114      	bne.n	8005a66 <ULTRASONIC_Init+0xf6>
 8005a3c:	4b34      	ldr	r3, [pc, #208]	; (8005b10 <ULTRASONIC_Init+0x1a0>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <ULTRASONIC_Init+0xe6>
 8005a48:	f000 ff38 	bl	80068bc <HAL_RCC_GetPCLK2Freq>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fa fd78 	bl	8000544 <__aeabi_ui2d>
 8005a54:	e01b      	b.n	8005a8e <ULTRASONIC_Init+0x11e>
 8005a56:	f000 ff31 	bl	80068bc <HAL_RCC_GetPCLK2Freq>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fa fd70 	bl	8000544 <__aeabi_ui2d>
 8005a64:	e013      	b.n	8005a8e <ULTRASONIC_Init+0x11e>
 8005a66:	4b2a      	ldr	r3, [pc, #168]	; (8005b10 <ULTRASONIC_Init+0x1a0>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <ULTRASONIC_Init+0x110>
 8005a72:	f000 ff0f 	bl	8006894 <HAL_RCC_GetPCLK1Freq>
 8005a76:	4603      	mov	r3, r0
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fa fd63 	bl	8000544 <__aeabi_ui2d>
 8005a7e:	e006      	b.n	8005a8e <ULTRASONIC_Init+0x11e>
 8005a80:	f000 ff08 	bl	8006894 <HAL_RCC_GetPCLK1Freq>
 8005a84:	4603      	mov	r3, r0
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fa fd5b 	bl	8000544 <__aeabi_ui2d>
 8005a8e:	a316      	add	r3, pc, #88	; (adr r3, 8005ae8 <ULTRASONIC_Init+0x178>)
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	f7fa fefa 	bl	800088c <__aeabi_ddiv>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	4b1b      	ldr	r3, [pc, #108]	; (8005b14 <ULTRASONIC_Init+0x1a4>)
 8005aa6:	f7fa fc0f 	bl	80002c8 <__aeabi_dsub>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4610      	mov	r0, r2
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f7fb f899 	bl	8000be8 <__aeabi_d2uiz>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	60bb      	str	r3, [r7, #8]

	// Set counter with 1MHz frequency (period of one microsecond)
	__HAL_TIM_SET_PRESCALER(hultrsnc->htim,prescaler);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	629a      	str	r2, [r3, #40]	; 0x28

	// Set counter autoreload period (is the maximum microsecond echo time allowed by sensor (11662),
	// plus a small margin )
	__HAL_TIM_SET_AUTORELOAD(hultrsnc->htim,11662+1000);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f243 1276 	movw	r2, #12662	; 0x3176
 8005ace:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	f243 1276 	movw	r2, #12662	; 0x3176
 8005ad8:	60da      	str	r2, [r3, #12]

	return ULTRASONIC_OK;
 8005ada:	2300      	movs	r3, #0

}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	f3af 8000 	nop.w
 8005ae8:	00000000 	.word	0x00000000
 8005aec:	412e8480 	.word	0x412e8480
 8005af0:	20000219 	.word	0x20000219
 8005af4:	08005d89 	.word	0x08005d89
 8005af8:	08005d35 	.word	0x08005d35
 8005afc:	40010000 	.word	0x40010000
 8005b00:	40010400 	.word	0x40010400
 8005b04:	40014000 	.word	0x40014000
 8005b08:	40014400 	.word	0x40014400
 8005b0c:	40014800 	.word	0x40014800
 8005b10:	40023800 	.word	0x40023800
 8005b14:	3ff00000 	.word	0x3ff00000

08005b18 <ULTRASONIC_CaptureMeasure>:
	free(hultrsnc->distance_history);

}


ULTRASONIC_StatusTypeDef ULTRASONIC_CaptureMeasure(ULTRASONIC_HandleTypeDef* hultrsnc){
 8005b18:	b5b0      	push	{r4, r5, r7, lr}
 8005b1a:	b08c      	sub	sp, #48	; 0x30
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]

	TIM_HandleTypeDef* htim= hultrsnc->htim;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c

	ULTRASONIC_IO_TypeDef io= hultrsnc->io;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f107 040c 	add.w	r4, r7, #12
 8005b2c:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8005b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	6023      	str	r3, [r4, #0]

	uint32_t echo_time = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Starting Ultrasonic Sensor measure */

	// Start Timer
	HAL_TIM_Base_Start(htim);
 8005b3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b3e:	f001 fbaf 	bl	80072a0 <HAL_TIM_Base_Start>

	// Pull TRIG pin low for at least 2 us
	HAL_GPIO_WritePin(io.trig_GPIOx, io.trig_Pin, GPIO_PIN_RESET);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	b291      	uxth	r1, r2
 8005b48:	2200      	movs	r2, #0
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fd7c 	bl	8006648 <HAL_GPIO_WritePin>
	ULTRASONIC_Delay_us(hultrsnc, 2);
 8005b50:	2102      	movs	r1, #2
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f8d2 	bl	8005cfc <ULTRASONIC_Delay_us>

	// Keep TRIG pin High for 10 us to start sensor
	HAL_GPIO_WritePin(io.trig_GPIOx, io.trig_Pin, GPIO_PIN_SET);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	b291      	uxth	r1, r2
 8005b5e:	2201      	movs	r2, #1
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fd71 	bl	8006648 <HAL_GPIO_WritePin>
	ULTRASONIC_Delay_us(hultrsnc, 10);
 8005b66:	210a      	movs	r1, #10
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f8c7 	bl	8005cfc <ULTRASONIC_Delay_us>

	// Then keep low
	HAL_GPIO_WritePin(io.trig_GPIOx, io.trig_Pin, GPIO_PIN_RESET);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	b291      	uxth	r1, r2
 8005b74:	2200      	movs	r2, #0
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fd66 	bl	8006648 <HAL_GPIO_WritePin>

	// Stop Timer
	HAL_TIM_Base_Stop(htim);
 8005b7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b7e:	f001 fbf7 	bl	8007370 <HAL_TIM_Base_Stop>

	/* Measure time for which the ECHO pin is high */

	// Index of current sensor
	uint8_t idx= hultrsnc->sensor_idx;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Reset input_capture flag
	flag[idx].input_capture= false;
 8005b8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b90:	4958      	ldr	r1, [pc, #352]	; (8005cf4 <ULTRASONIC_CaptureMeasure+0x1dc>)
 8005b92:	4613      	mov	r3, r2
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	4413      	add	r3, r2
 8005b98:	440b      	add	r3, r1
 8005b9a:	3302      	adds	r3, #2
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	701a      	strb	r2, [r3, #0]
	flag[idx].timeout= false;
 8005ba0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005ba4:	4953      	ldr	r1, [pc, #332]	; (8005cf4 <ULTRASONIC_CaptureMeasure+0x1dc>)
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	4413      	add	r3, r2
 8005bac:	440b      	add	r3, r1
 8005bae:	3301      	adds	r3, #1
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	701a      	strb	r2, [r3, #0]

	// Start period elapsed interrupt to handle timeout events
	HAL_TIM_Base_Start_IT(htim);
 8005bb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bb6:	f001 fc03 	bl	80073c0 <HAL_TIM_Base_Start_IT>

	// Enabling current callback flag
	flag[idx].callback_enable= true;
 8005bba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005bbe:	494d      	ldr	r1, [pc, #308]	; (8005cf4 <ULTRASONIC_CaptureMeasure+0x1dc>)
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	4413      	add	r3, r2
 8005bc6:	440b      	add	r3, r1
 8005bc8:	2201      	movs	r2, #1
 8005bca:	701a      	strb	r2, [r3, #0]

	// Wait for the ECHO pin to go high
	while( !HAL_GPIO_ReadPin(io.echo_GPIOx, io.echo_Pin) && !flag[idx].timeout )
 8005bcc:	e000      	b.n	8005bd0 <ULTRASONIC_CaptureMeasure+0xb8>
		__NOP();
 8005bce:	bf00      	nop
	while( !HAL_GPIO_ReadPin(io.echo_GPIOx, io.echo_Pin) && !flag[idx].timeout )
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	b292      	uxth	r2, r2
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 fd1d 	bl	8006618 <HAL_GPIO_ReadPin>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10e      	bne.n	8005c02 <ULTRASONIC_CaptureMeasure+0xea>
 8005be4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005be8:	4942      	ldr	r1, [pc, #264]	; (8005cf4 <ULTRASONIC_CaptureMeasure+0x1dc>)
 8005bea:	4613      	mov	r3, r2
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	4413      	add	r3, r2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f083 0301 	eor.w	r3, r3, #1
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1e5      	bne.n	8005bce <ULTRASONIC_CaptureMeasure+0xb6>

	// Reset counter
	__HAL_TIM_SET_COUNTER(htim, 0);
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2200      	movs	r2, #0
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24

	// Start input capture interrupt
	HAL_TIM_IC_Start_IT(htim, io.echo_IC_tim_channel);
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c10:	f001 fe0a 	bl	8007828 <HAL_TIM_IC_Start_IT>

	// Wait for capture input interrupt
	while ( !(flag[idx].input_capture) && !flag[idx].timeout )
 8005c14:	e000      	b.n	8005c18 <ULTRASONIC_CaptureMeasure+0x100>
			__NOP();
 8005c16:	bf00      	nop
	while ( !(flag[idx].input_capture) && !flag[idx].timeout )
 8005c18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005c1c:	4935      	ldr	r1, [pc, #212]	; (8005cf4 <ULTRASONIC_CaptureMeasure+0x1dc>)
 8005c1e:	4613      	mov	r3, r2
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	4413      	add	r3, r2
 8005c24:	440b      	add	r3, r1
 8005c26:	3302      	adds	r3, #2
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f083 0301 	eor.w	r3, r3, #1
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00e      	beq.n	8005c54 <ULTRASONIC_CaptureMeasure+0x13c>
 8005c36:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005c3a:	492e      	ldr	r1, [pc, #184]	; (8005cf4 <ULTRASONIC_CaptureMeasure+0x1dc>)
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	4413      	add	r3, r2
 8005c42:	440b      	add	r3, r1
 8005c44:	3301      	adds	r3, #1
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	f083 0301 	eor.w	r3, r3, #1
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e0      	bne.n	8005c16 <ULTRASONIC_CaptureMeasure+0xfe>

	// Stop IC interruot
	HAL_TIM_IC_Stop_IT(htim, io.echo_IC_tim_channel);
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	4619      	mov	r1, r3
 8005c58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c5a:	f001 ff0d 	bl	8007a78 <HAL_TIM_IC_Stop_IT>

	// Stop Base interrupt
	HAL_TIM_Base_Stop_IT(htim);
 8005c5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c60:	f001 fc1e 	bl	80074a0 <HAL_TIM_Base_Stop_IT>

	// Disabling current callback flag
	flag[idx].callback_enable= false;
 8005c64:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005c68:	4922      	ldr	r1, [pc, #136]	; (8005cf4 <ULTRASONIC_CaptureMeasure+0x1dc>)
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	4413      	add	r3, r2
 8005c70:	440b      	add	r3, r1
 8005c72:	2200      	movs	r2, #0
 8005c74:	701a      	strb	r2, [r3, #0]

	// Measured Time
	if( flag[idx].timeout )
 8005c76:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005c7a:	491e      	ldr	r1, [pc, #120]	; (8005cf4 <ULTRASONIC_CaptureMeasure+0x1dc>)
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	4413      	add	r3, r2
 8005c82:	440b      	add	r3, r1
 8005c84:	3301      	adds	r3, #1
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <ULTRASONIC_CaptureMeasure+0x17c>
		// If timeout occurred return a sensor error
		return ULTRASONIC_ERROR;
 8005c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c92:	e02b      	b.n	8005cec <ULTRASONIC_CaptureMeasure+0x1d4>
	else
		// Else get the measured time from timer Compare Register
		echo_time= __HAL_TIM_GET_COMPARE(htim, io.echo_IC_tim_channel);
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d103      	bne.n	8005ca2 <ULTRASONIC_CaptureMeasure+0x18a>
 8005c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca0:	e010      	b.n	8005cc4 <ULTRASONIC_CaptureMeasure+0x1ac>
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d103      	bne.n	8005cb0 <ULTRASONIC_CaptureMeasure+0x198>
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	e009      	b.n	8005cc4 <ULTRASONIC_CaptureMeasure+0x1ac>
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d103      	bne.n	8005cbe <ULTRASONIC_CaptureMeasure+0x1a6>
 8005cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbc:	e002      	b.n	8005cc4 <ULTRASONIC_CaptureMeasure+0x1ac>
 8005cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	62bb      	str	r3, [r7, #40]	; 0x28


	// Computing distance in cm (sound speed on air is about 0.0343 cm/us, us := microseconds)
	float distance  = (float)echo_time * (float)(0.0343)/2;
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	ee07 3a90 	vmov	s15, r3
 8005ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005cf8 <ULTRASONIC_CaptureMeasure+0x1e0>
 8005cd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005cd8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005cdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ce0:	edc7 7a08 	vstr	s15, [r7, #32]

	// Saving current distance
	hultrsnc->distance= distance;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a3a      	ldr	r2, [r7, #32]
 8005ce8:	621a      	str	r2, [r3, #32]

	return ULTRASONIC_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3730      	adds	r7, #48	; 0x30
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8005cf4:	200073b4 	.word	0x200073b4
 8005cf8:	3d0c7e28 	.word	0x3d0c7e28

08005cfc <ULTRASONIC_Delay_us>:


void ULTRASONIC_Delay_us(ULTRASONIC_HandleTypeDef* hultrsnc, uint16_t us){
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	807b      	strh	r3, [r7, #2]

	TIM_HandleTypeDef* htim= hultrsnc->htim;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	60fb      	str	r3, [r7, #12]

	// Reset Counter
	__HAL_TIM_SET_COUNTER(htim, 0);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2200      	movs	r2, #0
 8005d14:	625a      	str	r2, [r3, #36]	; 0x24

	// Wait until timer reach target delay (counter frequency is 1Mhz, so 1us every time step)
	while ((__HAL_TIM_GET_COUNTER(htim)) < us)
 8005d16:	bf00      	nop
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d1e:	887b      	ldrh	r3, [r7, #2]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d3f9      	bcc.n	8005d18 <ULTRASONIC_Delay_us+0x1c>
		;

}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
	...

08005d34 <ULTRASONIC_IC_Callback>:


void ULTRASONIC_IC_Callback(TIM_HandleTypeDef* htim){
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]

	// Checking which sensor is enabled
	for(int idx= 0; idx<MAX_SENSORS; idx++)
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e015      	b.n	8005d6e <ULTRASONIC_IC_Callback+0x3a>
		if( flag[idx].callback_enable )
 8005d42:	4910      	ldr	r1, [pc, #64]	; (8005d84 <ULTRASONIC_IC_Callback+0x50>)
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4613      	mov	r3, r2
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	4413      	add	r3, r2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d008      	beq.n	8005d68 <ULTRASONIC_IC_Callback+0x34>
			flag[idx].input_capture= true;
 8005d56:	490b      	ldr	r1, [pc, #44]	; (8005d84 <ULTRASONIC_IC_Callback+0x50>)
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	4413      	add	r3, r2
 8005d60:	440b      	add	r3, r1
 8005d62:	3302      	adds	r3, #2
 8005d64:	2201      	movs	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]
	for(int idx= 0; idx<MAX_SENSORS; idx++)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	dde6      	ble.n	8005d42 <ULTRASONIC_IC_Callback+0xe>

}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	200073b4 	.word	0x200073b4

08005d88 <ULTRASONIC_Timeout_Callback>:

void ULTRASONIC_Timeout_Callback(TIM_HandleTypeDef* htim){
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]

	// Checking which sensor is enabled
	for(int idx= 0; idx<MAX_SENSORS; idx++)
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	e015      	b.n	8005dc2 <ULTRASONIC_Timeout_Callback+0x3a>
		if( flag[idx].callback_enable )
 8005d96:	4910      	ldr	r1, [pc, #64]	; (8005dd8 <ULTRASONIC_Timeout_Callback+0x50>)
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	4413      	add	r3, r2
 8005da0:	440b      	add	r3, r1
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d008      	beq.n	8005dbc <ULTRASONIC_Timeout_Callback+0x34>
			flag[idx].timeout= true;
 8005daa:	490b      	ldr	r1, [pc, #44]	; (8005dd8 <ULTRASONIC_Timeout_Callback+0x50>)
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4613      	mov	r3, r2
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	4413      	add	r3, r2
 8005db4:	440b      	add	r3, r1
 8005db6:	3301      	adds	r3, #1
 8005db8:	2201      	movs	r2, #1
 8005dba:	701a      	strb	r2, [r3, #0]
	for(int idx= 0; idx<MAX_SENSORS; idx++)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	dde6      	ble.n	8005d96 <ULTRASONIC_Timeout_Callback+0xe>

}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	200073b4 	.word	0x200073b4

08005ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005de0:	480d      	ldr	r0, [pc, #52]	; (8005e18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005de2:	490e      	ldr	r1, [pc, #56]	; (8005e1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005de4:	4a0e      	ldr	r2, [pc, #56]	; (8005e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005de8:	e002      	b.n	8005df0 <LoopCopyDataInit>

08005dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dee:	3304      	adds	r3, #4

08005df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005df4:	d3f9      	bcc.n	8005dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005df6:	4a0b      	ldr	r2, [pc, #44]	; (8005e24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005df8:	4c0b      	ldr	r4, [pc, #44]	; (8005e28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005dfc:	e001      	b.n	8005e02 <LoopFillZerobss>

08005dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e00:	3204      	adds	r2, #4

08005e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e04:	d3fb      	bcc.n	8005dfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005e06:	f7fd f8a5 	bl	8002f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e0a:	f007 fa0d 	bl	800d228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e0e:	f7fb f90d 	bl	800102c <main>
  bx  lr    
 8005e12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e1c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8005e20:	08014300 	.word	0x08014300
  ldr r2, =_sbss
 8005e24:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8005e28:	20007414 	.word	0x20007414

08005e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e2c:	e7fe      	b.n	8005e2c <ADC_IRQHandler>
	...

08005e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e34:	4b0e      	ldr	r3, [pc, #56]	; (8005e70 <HAL_Init+0x40>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a0d      	ldr	r2, [pc, #52]	; (8005e70 <HAL_Init+0x40>)
 8005e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e40:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <HAL_Init+0x40>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <HAL_Init+0x40>)
 8005e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e4c:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <HAL_Init+0x40>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a07      	ldr	r2, [pc, #28]	; (8005e70 <HAL_Init+0x40>)
 8005e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e58:	2003      	movs	r0, #3
 8005e5a:	f000 f8fc 	bl	8006056 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e5e:	2000      	movs	r0, #0
 8005e60:	f7fc ffa6 	bl	8002db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e64:	f7fc fd72 	bl	800294c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40023c00 	.word	0x40023c00

08005e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e78:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <HAL_IncTick+0x20>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <HAL_IncTick+0x24>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4413      	add	r3, r2
 8005e84:	4a04      	ldr	r2, [pc, #16]	; (8005e98 <HAL_IncTick+0x24>)
 8005e86:	6013      	str	r3, [r2, #0]
}
 8005e88:	bf00      	nop
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	2000000c 	.word	0x2000000c
 8005e98:	200073c0 	.word	0x200073c0

08005e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8005ea0:	4b03      	ldr	r3, [pc, #12]	; (8005eb0 <HAL_GetTick+0x14>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	200073c0 	.word	0x200073c0

08005eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ebc:	f7ff ffee 	bl	8005e9c <HAL_GetTick>
 8005ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ecc:	d005      	beq.n	8005eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ece:	4b0a      	ldr	r3, [pc, #40]	; (8005ef8 <HAL_Delay+0x44>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005eda:	bf00      	nop
 8005edc:	f7ff ffde 	bl	8005e9c <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d8f7      	bhi.n	8005edc <HAL_Delay+0x28>
  {
  }
}
 8005eec:	bf00      	nop
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	2000000c 	.word	0x2000000c

08005efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f0c:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <__NVIC_SetPriorityGrouping+0x44>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f18:	4013      	ands	r3, r2
 8005f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f2e:	4a04      	ldr	r2, [pc, #16]	; (8005f40 <__NVIC_SetPriorityGrouping+0x44>)
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	60d3      	str	r3, [r2, #12]
}
 8005f34:	bf00      	nop
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	e000ed00 	.word	0xe000ed00

08005f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f48:	4b04      	ldr	r3, [pc, #16]	; (8005f5c <__NVIC_GetPriorityGrouping+0x18>)
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	0a1b      	lsrs	r3, r3, #8
 8005f4e:	f003 0307 	and.w	r3, r3, #7
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	e000ed00 	.word	0xe000ed00

08005f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	4603      	mov	r3, r0
 8005f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	db0b      	blt.n	8005f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f72:	79fb      	ldrb	r3, [r7, #7]
 8005f74:	f003 021f 	and.w	r2, r3, #31
 8005f78:	4907      	ldr	r1, [pc, #28]	; (8005f98 <__NVIC_EnableIRQ+0x38>)
 8005f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	2001      	movs	r0, #1
 8005f82:	fa00 f202 	lsl.w	r2, r0, r2
 8005f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	e000e100 	.word	0xe000e100

08005f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	6039      	str	r1, [r7, #0]
 8005fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	db0a      	blt.n	8005fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	490c      	ldr	r1, [pc, #48]	; (8005fe8 <__NVIC_SetPriority+0x4c>)
 8005fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fba:	0112      	lsls	r2, r2, #4
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fc4:	e00a      	b.n	8005fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	4908      	ldr	r1, [pc, #32]	; (8005fec <__NVIC_SetPriority+0x50>)
 8005fcc:	79fb      	ldrb	r3, [r7, #7]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	3b04      	subs	r3, #4
 8005fd4:	0112      	lsls	r2, r2, #4
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	440b      	add	r3, r1
 8005fda:	761a      	strb	r2, [r3, #24]
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	e000e100 	.word	0xe000e100
 8005fec:	e000ed00 	.word	0xe000ed00

08005ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b089      	sub	sp, #36	; 0x24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f1c3 0307 	rsb	r3, r3, #7
 800600a:	2b04      	cmp	r3, #4
 800600c:	bf28      	it	cs
 800600e:	2304      	movcs	r3, #4
 8006010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	3304      	adds	r3, #4
 8006016:	2b06      	cmp	r3, #6
 8006018:	d902      	bls.n	8006020 <NVIC_EncodePriority+0x30>
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	3b03      	subs	r3, #3
 800601e:	e000      	b.n	8006022 <NVIC_EncodePriority+0x32>
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	fa02 f303 	lsl.w	r3, r2, r3
 800602e:	43da      	mvns	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	401a      	ands	r2, r3
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006038:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	fa01 f303 	lsl.w	r3, r1, r3
 8006042:	43d9      	mvns	r1, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006048:	4313      	orrs	r3, r2
         );
}
 800604a:	4618      	mov	r0, r3
 800604c:	3724      	adds	r7, #36	; 0x24
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b082      	sub	sp, #8
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff ff4c 	bl	8005efc <__NVIC_SetPriorityGrouping>
}
 8006064:	bf00      	nop
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	4603      	mov	r3, r0
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800607a:	2300      	movs	r3, #0
 800607c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800607e:	f7ff ff61 	bl	8005f44 <__NVIC_GetPriorityGrouping>
 8006082:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	6978      	ldr	r0, [r7, #20]
 800608a:	f7ff ffb1 	bl	8005ff0 <NVIC_EncodePriority>
 800608e:	4602      	mov	r2, r0
 8006090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006094:	4611      	mov	r1, r2
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff ff80 	bl	8005f9c <__NVIC_SetPriority>
}
 800609c:	bf00      	nop
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	4603      	mov	r3, r0
 80060ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7ff ff54 	bl	8005f60 <__NVIC_EnableIRQ>
}
 80060b8:	bf00      	nop
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d101      	bne.n	80060e6 <HAL_DMA_Start_IT+0x26>
 80060e2:	2302      	movs	r3, #2
 80060e4:	e040      	b.n	8006168 <HAL_DMA_Start_IT+0xa8>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d12f      	bne.n	800615a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2202      	movs	r2, #2
 80060fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 f8c0 	bl	8006294 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006118:	223f      	movs	r2, #63	; 0x3f
 800611a:	409a      	lsls	r2, r3
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0216 	orr.w	r2, r2, #22
 800612e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0208 	orr.w	r2, r2, #8
 8006146:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	e005      	b.n	8006166 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006162:	2302      	movs	r3, #2
 8006164:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006166:	7dfb      	ldrb	r3, [r7, #23]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800617e:	f7ff fe8d 	bl	8005e9c <HAL_GetTick>
 8006182:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d008      	beq.n	80061a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2280      	movs	r2, #128	; 0x80
 8006194:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e052      	b.n	8006248 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0216 	bic.w	r2, r2, #22
 80061b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695a      	ldr	r2, [r3, #20]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d103      	bne.n	80061d2 <HAL_DMA_Abort+0x62>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d007      	beq.n	80061e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0208 	bic.w	r2, r2, #8
 80061e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0201 	bic.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061f2:	e013      	b.n	800621c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061f4:	f7ff fe52 	bl	8005e9c <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b05      	cmp	r3, #5
 8006200:	d90c      	bls.n	800621c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2203      	movs	r2, #3
 800620c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e015      	b.n	8006248 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e4      	bne.n	80061f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800622e:	223f      	movs	r2, #63	; 0x3f
 8006230:	409a      	lsls	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d004      	beq.n	800626e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2280      	movs	r2, #128	; 0x80
 8006268:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e00c      	b.n	8006288 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2205      	movs	r2, #5
 8006272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0201 	bic.w	r2, r2, #1
 8006284:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b40      	cmp	r3, #64	; 0x40
 80062c0:	d108      	bne.n	80062d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80062d2:	e007      	b.n	80062e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	60da      	str	r2, [r3, #12]
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b089      	sub	sp, #36	; 0x24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062fe:	2300      	movs	r3, #0
 8006300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006302:	2300      	movs	r3, #0
 8006304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006306:	2300      	movs	r3, #0
 8006308:	61fb      	str	r3, [r7, #28]
 800630a:	e165      	b.n	80065d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800630c:	2201      	movs	r2, #1
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4013      	ands	r3, r2
 800631e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	429a      	cmp	r2, r3
 8006326:	f040 8154 	bne.w	80065d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	2b01      	cmp	r3, #1
 8006334:	d005      	beq.n	8006342 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800633e:	2b02      	cmp	r3, #2
 8006340:	d130      	bne.n	80063a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	2203      	movs	r2, #3
 800634e:	fa02 f303 	lsl.w	r3, r2, r3
 8006352:	43db      	mvns	r3, r3
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	4013      	ands	r3, r2
 8006358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	4313      	orrs	r3, r2
 800636a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006378:	2201      	movs	r2, #1
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	43db      	mvns	r3, r3
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	4013      	ands	r3, r2
 8006386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	091b      	lsrs	r3, r3, #4
 800638e:	f003 0201 	and.w	r2, r3, #1
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	fa02 f303 	lsl.w	r3, r2, r3
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	4313      	orrs	r3, r2
 800639c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d017      	beq.n	80063e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	2203      	movs	r2, #3
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	43db      	mvns	r3, r3
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	4013      	ands	r3, r2
 80063c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f003 0303 	and.w	r3, r3, #3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d123      	bne.n	8006434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	08da      	lsrs	r2, r3, #3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3208      	adds	r2, #8
 80063f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	220f      	movs	r2, #15
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	43db      	mvns	r3, r3
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	4013      	ands	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	fa02 f303 	lsl.w	r3, r2, r3
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	4313      	orrs	r3, r2
 8006424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	08da      	lsrs	r2, r3, #3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3208      	adds	r2, #8
 800642e:	69b9      	ldr	r1, [r7, #24]
 8006430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	2203      	movs	r2, #3
 8006440:	fa02 f303 	lsl.w	r3, r2, r3
 8006444:	43db      	mvns	r3, r3
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	4013      	ands	r3, r2
 800644a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f003 0203 	and.w	r2, r3, #3
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	fa02 f303 	lsl.w	r3, r2, r3
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	4313      	orrs	r3, r2
 8006460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 80ae 	beq.w	80065d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006476:	2300      	movs	r3, #0
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	4b5d      	ldr	r3, [pc, #372]	; (80065f0 <HAL_GPIO_Init+0x300>)
 800647c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647e:	4a5c      	ldr	r2, [pc, #368]	; (80065f0 <HAL_GPIO_Init+0x300>)
 8006480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006484:	6453      	str	r3, [r2, #68]	; 0x44
 8006486:	4b5a      	ldr	r3, [pc, #360]	; (80065f0 <HAL_GPIO_Init+0x300>)
 8006488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006492:	4a58      	ldr	r2, [pc, #352]	; (80065f4 <HAL_GPIO_Init+0x304>)
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	089b      	lsrs	r3, r3, #2
 8006498:	3302      	adds	r3, #2
 800649a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800649e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	220f      	movs	r2, #15
 80064aa:	fa02 f303 	lsl.w	r3, r2, r3
 80064ae:	43db      	mvns	r3, r3
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	4013      	ands	r3, r2
 80064b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a4f      	ldr	r2, [pc, #316]	; (80065f8 <HAL_GPIO_Init+0x308>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d025      	beq.n	800650a <HAL_GPIO_Init+0x21a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a4e      	ldr	r2, [pc, #312]	; (80065fc <HAL_GPIO_Init+0x30c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d01f      	beq.n	8006506 <HAL_GPIO_Init+0x216>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a4d      	ldr	r2, [pc, #308]	; (8006600 <HAL_GPIO_Init+0x310>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d019      	beq.n	8006502 <HAL_GPIO_Init+0x212>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a4c      	ldr	r2, [pc, #304]	; (8006604 <HAL_GPIO_Init+0x314>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d013      	beq.n	80064fe <HAL_GPIO_Init+0x20e>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a4b      	ldr	r2, [pc, #300]	; (8006608 <HAL_GPIO_Init+0x318>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00d      	beq.n	80064fa <HAL_GPIO_Init+0x20a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a4a      	ldr	r2, [pc, #296]	; (800660c <HAL_GPIO_Init+0x31c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d007      	beq.n	80064f6 <HAL_GPIO_Init+0x206>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a49      	ldr	r2, [pc, #292]	; (8006610 <HAL_GPIO_Init+0x320>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d101      	bne.n	80064f2 <HAL_GPIO_Init+0x202>
 80064ee:	2306      	movs	r3, #6
 80064f0:	e00c      	b.n	800650c <HAL_GPIO_Init+0x21c>
 80064f2:	2307      	movs	r3, #7
 80064f4:	e00a      	b.n	800650c <HAL_GPIO_Init+0x21c>
 80064f6:	2305      	movs	r3, #5
 80064f8:	e008      	b.n	800650c <HAL_GPIO_Init+0x21c>
 80064fa:	2304      	movs	r3, #4
 80064fc:	e006      	b.n	800650c <HAL_GPIO_Init+0x21c>
 80064fe:	2303      	movs	r3, #3
 8006500:	e004      	b.n	800650c <HAL_GPIO_Init+0x21c>
 8006502:	2302      	movs	r3, #2
 8006504:	e002      	b.n	800650c <HAL_GPIO_Init+0x21c>
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <HAL_GPIO_Init+0x21c>
 800650a:	2300      	movs	r3, #0
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	f002 0203 	and.w	r2, r2, #3
 8006512:	0092      	lsls	r2, r2, #2
 8006514:	4093      	lsls	r3, r2
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	4313      	orrs	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800651c:	4935      	ldr	r1, [pc, #212]	; (80065f4 <HAL_GPIO_Init+0x304>)
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	089b      	lsrs	r3, r3, #2
 8006522:	3302      	adds	r3, #2
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800652a:	4b3a      	ldr	r3, [pc, #232]	; (8006614 <HAL_GPIO_Init+0x324>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	43db      	mvns	r3, r3
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	4013      	ands	r3, r2
 8006538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	4313      	orrs	r3, r2
 800654c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800654e:	4a31      	ldr	r2, [pc, #196]	; (8006614 <HAL_GPIO_Init+0x324>)
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006554:	4b2f      	ldr	r3, [pc, #188]	; (8006614 <HAL_GPIO_Init+0x324>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	43db      	mvns	r3, r3
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	4013      	ands	r3, r2
 8006562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006578:	4a26      	ldr	r2, [pc, #152]	; (8006614 <HAL_GPIO_Init+0x324>)
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800657e:	4b25      	ldr	r3, [pc, #148]	; (8006614 <HAL_GPIO_Init+0x324>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	43db      	mvns	r3, r3
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	4013      	ands	r3, r2
 800658c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065a2:	4a1c      	ldr	r2, [pc, #112]	; (8006614 <HAL_GPIO_Init+0x324>)
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065a8:	4b1a      	ldr	r3, [pc, #104]	; (8006614 <HAL_GPIO_Init+0x324>)
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	43db      	mvns	r3, r3
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	4013      	ands	r3, r2
 80065b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80065c4:	69ba      	ldr	r2, [r7, #24]
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065cc:	4a11      	ldr	r2, [pc, #68]	; (8006614 <HAL_GPIO_Init+0x324>)
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	3301      	adds	r3, #1
 80065d6:	61fb      	str	r3, [r7, #28]
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	2b0f      	cmp	r3, #15
 80065dc:	f67f ae96 	bls.w	800630c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
 80065e4:	3724      	adds	r7, #36	; 0x24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	40023800 	.word	0x40023800
 80065f4:	40013800 	.word	0x40013800
 80065f8:	40020000 	.word	0x40020000
 80065fc:	40020400 	.word	0x40020400
 8006600:	40020800 	.word	0x40020800
 8006604:	40020c00 	.word	0x40020c00
 8006608:	40021000 	.word	0x40021000
 800660c:	40021400 	.word	0x40021400
 8006610:	40021800 	.word	0x40021800
 8006614:	40013c00 	.word	0x40013c00

08006618 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	887b      	ldrh	r3, [r7, #2]
 800662a:	4013      	ands	r3, r2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006630:	2301      	movs	r3, #1
 8006632:	73fb      	strb	r3, [r7, #15]
 8006634:	e001      	b.n	800663a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006636:	2300      	movs	r3, #0
 8006638:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800663a:	7bfb      	ldrb	r3, [r7, #15]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	807b      	strh	r3, [r7, #2]
 8006654:	4613      	mov	r3, r2
 8006656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006658:	787b      	ldrb	r3, [r7, #1]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800665e:	887a      	ldrh	r2, [r7, #2]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006664:	e003      	b.n	800666e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006666:	887b      	ldrh	r3, [r7, #2]
 8006668:	041a      	lsls	r2, r3, #16
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	619a      	str	r2, [r3, #24]
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800667a:	b480      	push	{r7}
 800667c:	b085      	sub	sp, #20
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	460b      	mov	r3, r1
 8006684:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800668c:	887a      	ldrh	r2, [r7, #2]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4013      	ands	r3, r2
 8006692:	041a      	lsls	r2, r3, #16
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	43d9      	mvns	r1, r3
 8006698:	887b      	ldrh	r3, [r7, #2]
 800669a:	400b      	ands	r3, r1
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	619a      	str	r2, [r3, #24]
}
 80066a2:	bf00      	nop
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
	...

080066b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e0cc      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066c4:	4b68      	ldr	r3, [pc, #416]	; (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 030f 	and.w	r3, r3, #15
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d90c      	bls.n	80066ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066d2:	4b65      	ldr	r3, [pc, #404]	; (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066da:	4b63      	ldr	r3, [pc, #396]	; (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d001      	beq.n	80066ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e0b8      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d020      	beq.n	800673a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006704:	4b59      	ldr	r3, [pc, #356]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	4a58      	ldr	r2, [pc, #352]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800670e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0308 	and.w	r3, r3, #8
 8006718:	2b00      	cmp	r3, #0
 800671a:	d005      	beq.n	8006728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800671c:	4b53      	ldr	r3, [pc, #332]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	4a52      	ldr	r2, [pc, #328]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006728:	4b50      	ldr	r3, [pc, #320]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	494d      	ldr	r1, [pc, #308]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	4313      	orrs	r3, r2
 8006738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d044      	beq.n	80067d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d107      	bne.n	800675e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800674e:	4b47      	ldr	r3, [pc, #284]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d119      	bne.n	800678e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e07f      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d003      	beq.n	800676e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800676a:	2b03      	cmp	r3, #3
 800676c:	d107      	bne.n	800677e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800676e:	4b3f      	ldr	r3, [pc, #252]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d109      	bne.n	800678e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e06f      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800677e:	4b3b      	ldr	r3, [pc, #236]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e067      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800678e:	4b37      	ldr	r3, [pc, #220]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f023 0203 	bic.w	r2, r3, #3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	4934      	ldr	r1, [pc, #208]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 800679c:	4313      	orrs	r3, r2
 800679e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067a0:	f7ff fb7c 	bl	8005e9c <HAL_GetTick>
 80067a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a6:	e00a      	b.n	80067be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067a8:	f7ff fb78 	bl	8005e9c <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e04f      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067be:	4b2b      	ldr	r3, [pc, #172]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 020c 	and.w	r2, r3, #12
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d1eb      	bne.n	80067a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067d0:	4b25      	ldr	r3, [pc, #148]	; (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d20c      	bcs.n	80067f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067de:	4b22      	ldr	r3, [pc, #136]	; (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067e6:	4b20      	ldr	r3, [pc, #128]	; (8006868 <HAL_RCC_ClockConfig+0x1b8>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d001      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e032      	b.n	800685e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b00      	cmp	r3, #0
 8006802:	d008      	beq.n	8006816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006804:	4b19      	ldr	r3, [pc, #100]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	4916      	ldr	r1, [pc, #88]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006812:	4313      	orrs	r3, r2
 8006814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006822:	4b12      	ldr	r3, [pc, #72]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	490e      	ldr	r1, [pc, #56]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 8006832:	4313      	orrs	r3, r2
 8006834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006836:	f000 f887 	bl	8006948 <HAL_RCC_GetSysClockFreq>
 800683a:	4602      	mov	r2, r0
 800683c:	4b0b      	ldr	r3, [pc, #44]	; (800686c <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	091b      	lsrs	r3, r3, #4
 8006842:	f003 030f 	and.w	r3, r3, #15
 8006846:	490a      	ldr	r1, [pc, #40]	; (8006870 <HAL_RCC_ClockConfig+0x1c0>)
 8006848:	5ccb      	ldrb	r3, [r1, r3]
 800684a:	fa22 f303 	lsr.w	r3, r2, r3
 800684e:	4a09      	ldr	r2, [pc, #36]	; (8006874 <HAL_RCC_ClockConfig+0x1c4>)
 8006850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006852:	4b09      	ldr	r3, [pc, #36]	; (8006878 <HAL_RCC_ClockConfig+0x1c8>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f7fc faaa 	bl	8002db0 <HAL_InitTick>

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	40023c00 	.word	0x40023c00
 800686c:	40023800 	.word	0x40023800
 8006870:	08013c04 	.word	0x08013c04
 8006874:	20000004 	.word	0x20000004
 8006878:	20000008 	.word	0x20000008

0800687c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006880:	4b03      	ldr	r3, [pc, #12]	; (8006890 <HAL_RCC_GetHCLKFreq+0x14>)
 8006882:	681b      	ldr	r3, [r3, #0]
}
 8006884:	4618      	mov	r0, r3
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	20000004 	.word	0x20000004

08006894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006898:	f7ff fff0 	bl	800687c <HAL_RCC_GetHCLKFreq>
 800689c:	4602      	mov	r2, r0
 800689e:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	0a9b      	lsrs	r3, r3, #10
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	4903      	ldr	r1, [pc, #12]	; (80068b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068aa:	5ccb      	ldrb	r3, [r1, r3]
 80068ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	40023800 	.word	0x40023800
 80068b8:	08013c14 	.word	0x08013c14

080068bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80068c0:	f7ff ffdc 	bl	800687c <HAL_RCC_GetHCLKFreq>
 80068c4:	4602      	mov	r2, r0
 80068c6:	4b05      	ldr	r3, [pc, #20]	; (80068dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	0b5b      	lsrs	r3, r3, #13
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	4903      	ldr	r1, [pc, #12]	; (80068e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068d2:	5ccb      	ldrb	r3, [r1, r3]
 80068d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068d8:	4618      	mov	r0, r3
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	40023800 	.word	0x40023800
 80068e0:	08013c14 	.word	0x08013c14

080068e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	220f      	movs	r2, #15
 80068f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80068f4:	4b12      	ldr	r3, [pc, #72]	; (8006940 <HAL_RCC_GetClockConfig+0x5c>)
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f003 0203 	and.w	r2, r3, #3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006900:	4b0f      	ldr	r3, [pc, #60]	; (8006940 <HAL_RCC_GetClockConfig+0x5c>)
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800690c:	4b0c      	ldr	r3, [pc, #48]	; (8006940 <HAL_RCC_GetClockConfig+0x5c>)
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006918:	4b09      	ldr	r3, [pc, #36]	; (8006940 <HAL_RCC_GetClockConfig+0x5c>)
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	08db      	lsrs	r3, r3, #3
 800691e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006926:	4b07      	ldr	r3, [pc, #28]	; (8006944 <HAL_RCC_GetClockConfig+0x60>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 020f 	and.w	r2, r3, #15
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	601a      	str	r2, [r3, #0]
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40023800 	.word	0x40023800
 8006944:	40023c00 	.word	0x40023c00

08006948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800694c:	b088      	sub	sp, #32
 800694e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006964:	4bce      	ldr	r3, [pc, #824]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f003 030c 	and.w	r3, r3, #12
 800696c:	2b0c      	cmp	r3, #12
 800696e:	f200 818d 	bhi.w	8006c8c <HAL_RCC_GetSysClockFreq+0x344>
 8006972:	a201      	add	r2, pc, #4	; (adr r2, 8006978 <HAL_RCC_GetSysClockFreq+0x30>)
 8006974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006978:	080069ad 	.word	0x080069ad
 800697c:	08006c8d 	.word	0x08006c8d
 8006980:	08006c8d 	.word	0x08006c8d
 8006984:	08006c8d 	.word	0x08006c8d
 8006988:	080069b3 	.word	0x080069b3
 800698c:	08006c8d 	.word	0x08006c8d
 8006990:	08006c8d 	.word	0x08006c8d
 8006994:	08006c8d 	.word	0x08006c8d
 8006998:	080069b9 	.word	0x080069b9
 800699c:	08006c8d 	.word	0x08006c8d
 80069a0:	08006c8d 	.word	0x08006c8d
 80069a4:	08006c8d 	.word	0x08006c8d
 80069a8:	08006b2d 	.word	0x08006b2d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069ac:	4bbd      	ldr	r3, [pc, #756]	; (8006ca4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80069ae:	61bb      	str	r3, [r7, #24]
       break;
 80069b0:	e16f      	b.n	8006c92 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069b2:	4bbd      	ldr	r3, [pc, #756]	; (8006ca8 <HAL_RCC_GetSysClockFreq+0x360>)
 80069b4:	61bb      	str	r3, [r7, #24]
      break;
 80069b6:	e16c      	b.n	8006c92 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069b8:	4bb9      	ldr	r3, [pc, #740]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0x358>)
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069c0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069c2:	4bb7      	ldr	r3, [pc, #732]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0x358>)
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d053      	beq.n	8006a76 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ce:	4bb4      	ldr	r3, [pc, #720]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0x358>)
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	099b      	lsrs	r3, r3, #6
 80069d4:	461a      	mov	r2, r3
 80069d6:	f04f 0300 	mov.w	r3, #0
 80069da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80069de:	f04f 0100 	mov.w	r1, #0
 80069e2:	ea02 0400 	and.w	r4, r2, r0
 80069e6:	603c      	str	r4, [r7, #0]
 80069e8:	400b      	ands	r3, r1
 80069ea:	607b      	str	r3, [r7, #4]
 80069ec:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069f0:	4620      	mov	r0, r4
 80069f2:	4629      	mov	r1, r5
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	014b      	lsls	r3, r1, #5
 80069fe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006a02:	0142      	lsls	r2, r0, #5
 8006a04:	4610      	mov	r0, r2
 8006a06:	4619      	mov	r1, r3
 8006a08:	4623      	mov	r3, r4
 8006a0a:	1ac0      	subs	r0, r0, r3
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	eb61 0103 	sbc.w	r1, r1, r3
 8006a12:	f04f 0200 	mov.w	r2, #0
 8006a16:	f04f 0300 	mov.w	r3, #0
 8006a1a:	018b      	lsls	r3, r1, #6
 8006a1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006a20:	0182      	lsls	r2, r0, #6
 8006a22:	1a12      	subs	r2, r2, r0
 8006a24:	eb63 0301 	sbc.w	r3, r3, r1
 8006a28:	f04f 0000 	mov.w	r0, #0
 8006a2c:	f04f 0100 	mov.w	r1, #0
 8006a30:	00d9      	lsls	r1, r3, #3
 8006a32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a36:	00d0      	lsls	r0, r2, #3
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	1852      	adds	r2, r2, r1
 8006a40:	4629      	mov	r1, r5
 8006a42:	eb43 0101 	adc.w	r1, r3, r1
 8006a46:	460b      	mov	r3, r1
 8006a48:	f04f 0000 	mov.w	r0, #0
 8006a4c:	f04f 0100 	mov.w	r1, #0
 8006a50:	0259      	lsls	r1, r3, #9
 8006a52:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006a56:	0250      	lsls	r0, r2, #9
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	4619      	mov	r1, r3
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	461a      	mov	r2, r3
 8006a64:	f04f 0300 	mov.w	r3, #0
 8006a68:	f7fa f92e 	bl	8000cc8 <__aeabi_uldivmod>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4613      	mov	r3, r2
 8006a72:	61fb      	str	r3, [r7, #28]
 8006a74:	e04c      	b.n	8006b10 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a76:	4b8a      	ldr	r3, [pc, #552]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	099b      	lsrs	r3, r3, #6
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	f04f 0300 	mov.w	r3, #0
 8006a82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006a86:	f04f 0100 	mov.w	r1, #0
 8006a8a:	ea02 0a00 	and.w	sl, r2, r0
 8006a8e:	ea03 0b01 	and.w	fp, r3, r1
 8006a92:	4650      	mov	r0, sl
 8006a94:	4659      	mov	r1, fp
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	014b      	lsls	r3, r1, #5
 8006aa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006aa4:	0142      	lsls	r2, r0, #5
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	ebb0 000a 	subs.w	r0, r0, sl
 8006aae:	eb61 010b 	sbc.w	r1, r1, fp
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	018b      	lsls	r3, r1, #6
 8006abc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006ac0:	0182      	lsls	r2, r0, #6
 8006ac2:	1a12      	subs	r2, r2, r0
 8006ac4:	eb63 0301 	sbc.w	r3, r3, r1
 8006ac8:	f04f 0000 	mov.w	r0, #0
 8006acc:	f04f 0100 	mov.w	r1, #0
 8006ad0:	00d9      	lsls	r1, r3, #3
 8006ad2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ad6:	00d0      	lsls	r0, r2, #3
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	eb12 020a 	adds.w	r2, r2, sl
 8006ae0:	eb43 030b 	adc.w	r3, r3, fp
 8006ae4:	f04f 0000 	mov.w	r0, #0
 8006ae8:	f04f 0100 	mov.w	r1, #0
 8006aec:	0299      	lsls	r1, r3, #10
 8006aee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006af2:	0290      	lsls	r0, r2, #10
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4610      	mov	r0, r2
 8006afa:	4619      	mov	r1, r3
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	461a      	mov	r2, r3
 8006b00:	f04f 0300 	mov.w	r3, #0
 8006b04:	f7fa f8e0 	bl	8000cc8 <__aeabi_uldivmod>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b10:	4b63      	ldr	r3, [pc, #396]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	0c1b      	lsrs	r3, r3, #16
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8006b20:	69fa      	ldr	r2, [r7, #28]
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b28:	61bb      	str	r3, [r7, #24]
      break;
 8006b2a:	e0b2      	b.n	8006c92 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b2c:	4b5c      	ldr	r3, [pc, #368]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b34:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b36:	4b5a      	ldr	r3, [pc, #360]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d04d      	beq.n	8006bde <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b42:	4b57      	ldr	r3, [pc, #348]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	099b      	lsrs	r3, r3, #6
 8006b48:	461a      	mov	r2, r3
 8006b4a:	f04f 0300 	mov.w	r3, #0
 8006b4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b52:	f04f 0100 	mov.w	r1, #0
 8006b56:	ea02 0800 	and.w	r8, r2, r0
 8006b5a:	ea03 0901 	and.w	r9, r3, r1
 8006b5e:	4640      	mov	r0, r8
 8006b60:	4649      	mov	r1, r9
 8006b62:	f04f 0200 	mov.w	r2, #0
 8006b66:	f04f 0300 	mov.w	r3, #0
 8006b6a:	014b      	lsls	r3, r1, #5
 8006b6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006b70:	0142      	lsls	r2, r0, #5
 8006b72:	4610      	mov	r0, r2
 8006b74:	4619      	mov	r1, r3
 8006b76:	ebb0 0008 	subs.w	r0, r0, r8
 8006b7a:	eb61 0109 	sbc.w	r1, r1, r9
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	f04f 0300 	mov.w	r3, #0
 8006b86:	018b      	lsls	r3, r1, #6
 8006b88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006b8c:	0182      	lsls	r2, r0, #6
 8006b8e:	1a12      	subs	r2, r2, r0
 8006b90:	eb63 0301 	sbc.w	r3, r3, r1
 8006b94:	f04f 0000 	mov.w	r0, #0
 8006b98:	f04f 0100 	mov.w	r1, #0
 8006b9c:	00d9      	lsls	r1, r3, #3
 8006b9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ba2:	00d0      	lsls	r0, r2, #3
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	eb12 0208 	adds.w	r2, r2, r8
 8006bac:	eb43 0309 	adc.w	r3, r3, r9
 8006bb0:	f04f 0000 	mov.w	r0, #0
 8006bb4:	f04f 0100 	mov.w	r1, #0
 8006bb8:	0259      	lsls	r1, r3, #9
 8006bba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006bbe:	0250      	lsls	r0, r2, #9
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f04f 0300 	mov.w	r3, #0
 8006bd0:	f7fa f87a 	bl	8000cc8 <__aeabi_uldivmod>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4613      	mov	r3, r2
 8006bda:	61fb      	str	r3, [r7, #28]
 8006bdc:	e04a      	b.n	8006c74 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bde:	4b30      	ldr	r3, [pc, #192]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	099b      	lsrs	r3, r3, #6
 8006be4:	461a      	mov	r2, r3
 8006be6:	f04f 0300 	mov.w	r3, #0
 8006bea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006bee:	f04f 0100 	mov.w	r1, #0
 8006bf2:	ea02 0400 	and.w	r4, r2, r0
 8006bf6:	ea03 0501 	and.w	r5, r3, r1
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	f04f 0200 	mov.w	r2, #0
 8006c02:	f04f 0300 	mov.w	r3, #0
 8006c06:	014b      	lsls	r3, r1, #5
 8006c08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006c0c:	0142      	lsls	r2, r0, #5
 8006c0e:	4610      	mov	r0, r2
 8006c10:	4619      	mov	r1, r3
 8006c12:	1b00      	subs	r0, r0, r4
 8006c14:	eb61 0105 	sbc.w	r1, r1, r5
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	f04f 0300 	mov.w	r3, #0
 8006c20:	018b      	lsls	r3, r1, #6
 8006c22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006c26:	0182      	lsls	r2, r0, #6
 8006c28:	1a12      	subs	r2, r2, r0
 8006c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8006c2e:	f04f 0000 	mov.w	r0, #0
 8006c32:	f04f 0100 	mov.w	r1, #0
 8006c36:	00d9      	lsls	r1, r3, #3
 8006c38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c3c:	00d0      	lsls	r0, r2, #3
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	1912      	adds	r2, r2, r4
 8006c44:	eb45 0303 	adc.w	r3, r5, r3
 8006c48:	f04f 0000 	mov.w	r0, #0
 8006c4c:	f04f 0100 	mov.w	r1, #0
 8006c50:	0299      	lsls	r1, r3, #10
 8006c52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006c56:	0290      	lsls	r0, r2, #10
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	4619      	mov	r1, r3
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	461a      	mov	r2, r3
 8006c64:	f04f 0300 	mov.w	r3, #0
 8006c68:	f7fa f82e 	bl	8000cc8 <__aeabi_uldivmod>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4613      	mov	r3, r2
 8006c72:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006c74:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	0f1b      	lsrs	r3, r3, #28
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8006c80:	69fa      	ldr	r2, [r7, #28]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c88:	61bb      	str	r3, [r7, #24]
      break;
 8006c8a:	e002      	b.n	8006c92 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c8c:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006c8e:	61bb      	str	r3, [r7, #24]
      break;
 8006c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c92:	69bb      	ldr	r3, [r7, #24]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3720      	adds	r7, #32
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c9e:	bf00      	nop
 8006ca0:	40023800 	.word	0x40023800
 8006ca4:	00f42400 	.word	0x00f42400
 8006ca8:	007a1200 	.word	0x007a1200

08006cac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e28d      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 8083 	beq.w	8006dd2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ccc:	4b94      	ldr	r3, [pc, #592]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f003 030c 	and.w	r3, r3, #12
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	d019      	beq.n	8006d0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006cd8:	4b91      	ldr	r3, [pc, #580]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	d106      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006ce4:	4b8e      	ldr	r3, [pc, #568]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cf0:	d00c      	beq.n	8006d0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cf2:	4b8b      	ldr	r3, [pc, #556]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006cfa:	2b0c      	cmp	r3, #12
 8006cfc:	d112      	bne.n	8006d24 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cfe:	4b88      	ldr	r3, [pc, #544]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d0a:	d10b      	bne.n	8006d24 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d0c:	4b84      	ldr	r3, [pc, #528]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d05b      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x124>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d157      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e25a      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d2c:	d106      	bne.n	8006d3c <HAL_RCC_OscConfig+0x90>
 8006d2e:	4b7c      	ldr	r3, [pc, #496]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a7b      	ldr	r2, [pc, #492]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	e01d      	b.n	8006d78 <HAL_RCC_OscConfig+0xcc>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d44:	d10c      	bne.n	8006d60 <HAL_RCC_OscConfig+0xb4>
 8006d46:	4b76      	ldr	r3, [pc, #472]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a75      	ldr	r2, [pc, #468]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	4b73      	ldr	r3, [pc, #460]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a72      	ldr	r2, [pc, #456]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	e00b      	b.n	8006d78 <HAL_RCC_OscConfig+0xcc>
 8006d60:	4b6f      	ldr	r3, [pc, #444]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a6e      	ldr	r2, [pc, #440]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	4b6c      	ldr	r3, [pc, #432]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a6b      	ldr	r2, [pc, #428]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d013      	beq.n	8006da8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d80:	f7ff f88c 	bl	8005e9c <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d86:	e008      	b.n	8006d9a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d88:	f7ff f888 	bl	8005e9c <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b64      	cmp	r3, #100	; 0x64
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e21f      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9a:	4b61      	ldr	r3, [pc, #388]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0f0      	beq.n	8006d88 <HAL_RCC_OscConfig+0xdc>
 8006da6:	e014      	b.n	8006dd2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da8:	f7ff f878 	bl	8005e9c <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006db0:	f7ff f874 	bl	8005e9c <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b64      	cmp	r3, #100	; 0x64
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e20b      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dc2:	4b57      	ldr	r3, [pc, #348]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f0      	bne.n	8006db0 <HAL_RCC_OscConfig+0x104>
 8006dce:	e000      	b.n	8006dd2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d06f      	beq.n	8006ebe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006dde:	4b50      	ldr	r3, [pc, #320]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f003 030c 	and.w	r3, r3, #12
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d017      	beq.n	8006e1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006dea:	4b4d      	ldr	r3, [pc, #308]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006df2:	2b08      	cmp	r3, #8
 8006df4:	d105      	bne.n	8006e02 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006df6:	4b4a      	ldr	r3, [pc, #296]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00b      	beq.n	8006e1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e02:	4b47      	ldr	r3, [pc, #284]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006e0a:	2b0c      	cmp	r3, #12
 8006e0c:	d11c      	bne.n	8006e48 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e0e:	4b44      	ldr	r3, [pc, #272]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d116      	bne.n	8006e48 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e1a:	4b41      	ldr	r3, [pc, #260]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <HAL_RCC_OscConfig+0x186>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d001      	beq.n	8006e32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e1d3      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e32:	4b3b      	ldr	r3, [pc, #236]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	4937      	ldr	r1, [pc, #220]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e46:	e03a      	b.n	8006ebe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d020      	beq.n	8006e92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e50:	4b34      	ldr	r3, [pc, #208]	; (8006f24 <HAL_RCC_OscConfig+0x278>)
 8006e52:	2201      	movs	r2, #1
 8006e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e56:	f7ff f821 	bl	8005e9c <HAL_GetTick>
 8006e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e5c:	e008      	b.n	8006e70 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e5e:	f7ff f81d 	bl	8005e9c <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d901      	bls.n	8006e70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e1b4      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e70:	4b2b      	ldr	r3, [pc, #172]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0f0      	beq.n	8006e5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e7c:	4b28      	ldr	r3, [pc, #160]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	00db      	lsls	r3, r3, #3
 8006e8a:	4925      	ldr	r1, [pc, #148]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	600b      	str	r3, [r1, #0]
 8006e90:	e015      	b.n	8006ebe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e92:	4b24      	ldr	r3, [pc, #144]	; (8006f24 <HAL_RCC_OscConfig+0x278>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e98:	f7ff f800 	bl	8005e9c <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ea0:	f7fe fffc 	bl	8005e9c <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e193      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eb2:	4b1b      	ldr	r3, [pc, #108]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1f0      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d036      	beq.n	8006f38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d016      	beq.n	8006f00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ed2:	4b15      	ldr	r3, [pc, #84]	; (8006f28 <HAL_RCC_OscConfig+0x27c>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed8:	f7fe ffe0 	bl	8005e9c <HAL_GetTick>
 8006edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ee0:	f7fe ffdc 	bl	8005e9c <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e173      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ef2:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0f0      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x234>
 8006efe:	e01b      	b.n	8006f38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f00:	4b09      	ldr	r3, [pc, #36]	; (8006f28 <HAL_RCC_OscConfig+0x27c>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f06:	f7fe ffc9 	bl	8005e9c <HAL_GetTick>
 8006f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f0c:	e00e      	b.n	8006f2c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f0e:	f7fe ffc5 	bl	8005e9c <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d907      	bls.n	8006f2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e15c      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
 8006f20:	40023800 	.word	0x40023800
 8006f24:	42470000 	.word	0x42470000
 8006f28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f2c:	4b8a      	ldr	r3, [pc, #552]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8006f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1ea      	bne.n	8006f0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 8097 	beq.w	8007074 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f46:	2300      	movs	r3, #0
 8006f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f4a:	4b83      	ldr	r3, [pc, #524]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10f      	bne.n	8006f76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f56:	2300      	movs	r3, #0
 8006f58:	60bb      	str	r3, [r7, #8]
 8006f5a:	4b7f      	ldr	r3, [pc, #508]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	4a7e      	ldr	r2, [pc, #504]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8006f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f64:	6413      	str	r3, [r2, #64]	; 0x40
 8006f66:	4b7c      	ldr	r3, [pc, #496]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f6e:	60bb      	str	r3, [r7, #8]
 8006f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f72:	2301      	movs	r3, #1
 8006f74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f76:	4b79      	ldr	r3, [pc, #484]	; (800715c <HAL_RCC_OscConfig+0x4b0>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d118      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f82:	4b76      	ldr	r3, [pc, #472]	; (800715c <HAL_RCC_OscConfig+0x4b0>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a75      	ldr	r2, [pc, #468]	; (800715c <HAL_RCC_OscConfig+0x4b0>)
 8006f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f8e:	f7fe ff85 	bl	8005e9c <HAL_GetTick>
 8006f92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f94:	e008      	b.n	8006fa8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f96:	f7fe ff81 	bl	8005e9c <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d901      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e118      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fa8:	4b6c      	ldr	r3, [pc, #432]	; (800715c <HAL_RCC_OscConfig+0x4b0>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d0f0      	beq.n	8006f96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d106      	bne.n	8006fca <HAL_RCC_OscConfig+0x31e>
 8006fbc:	4b66      	ldr	r3, [pc, #408]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8006fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc0:	4a65      	ldr	r2, [pc, #404]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8006fc2:	f043 0301 	orr.w	r3, r3, #1
 8006fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fc8:	e01c      	b.n	8007004 <HAL_RCC_OscConfig+0x358>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	2b05      	cmp	r3, #5
 8006fd0:	d10c      	bne.n	8006fec <HAL_RCC_OscConfig+0x340>
 8006fd2:	4b61      	ldr	r3, [pc, #388]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd6:	4a60      	ldr	r2, [pc, #384]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8006fd8:	f043 0304 	orr.w	r3, r3, #4
 8006fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8006fde:	4b5e      	ldr	r3, [pc, #376]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8006fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe2:	4a5d      	ldr	r2, [pc, #372]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8006fe4:	f043 0301 	orr.w	r3, r3, #1
 8006fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8006fea:	e00b      	b.n	8007004 <HAL_RCC_OscConfig+0x358>
 8006fec:	4b5a      	ldr	r3, [pc, #360]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8006fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff0:	4a59      	ldr	r2, [pc, #356]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8006ff2:	f023 0301 	bic.w	r3, r3, #1
 8006ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ff8:	4b57      	ldr	r3, [pc, #348]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8006ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffc:	4a56      	ldr	r2, [pc, #344]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8006ffe:	f023 0304 	bic.w	r3, r3, #4
 8007002:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d015      	beq.n	8007038 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800700c:	f7fe ff46 	bl	8005e9c <HAL_GetTick>
 8007010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007012:	e00a      	b.n	800702a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007014:	f7fe ff42 	bl	8005e9c <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007022:	4293      	cmp	r3, r2
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e0d7      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800702a:	4b4b      	ldr	r3, [pc, #300]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 800702c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0ee      	beq.n	8007014 <HAL_RCC_OscConfig+0x368>
 8007036:	e014      	b.n	8007062 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007038:	f7fe ff30 	bl	8005e9c <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800703e:	e00a      	b.n	8007056 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007040:	f7fe ff2c 	bl	8005e9c <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	f241 3288 	movw	r2, #5000	; 0x1388
 800704e:	4293      	cmp	r3, r2
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e0c1      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007056:	4b40      	ldr	r3, [pc, #256]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8007058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1ee      	bne.n	8007040 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d105      	bne.n	8007074 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007068:	4b3b      	ldr	r3, [pc, #236]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 800706a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706c:	4a3a      	ldr	r2, [pc, #232]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 800706e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007072:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 80ad 	beq.w	80071d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800707e:	4b36      	ldr	r3, [pc, #216]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 030c 	and.w	r3, r3, #12
 8007086:	2b08      	cmp	r3, #8
 8007088:	d060      	beq.n	800714c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	2b02      	cmp	r3, #2
 8007090:	d145      	bne.n	800711e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007092:	4b33      	ldr	r3, [pc, #204]	; (8007160 <HAL_RCC_OscConfig+0x4b4>)
 8007094:	2200      	movs	r2, #0
 8007096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007098:	f7fe ff00 	bl	8005e9c <HAL_GetTick>
 800709c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800709e:	e008      	b.n	80070b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070a0:	f7fe fefc 	bl	8005e9c <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e093      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070b2:	4b29      	ldr	r3, [pc, #164]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1f0      	bne.n	80070a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	69da      	ldr	r2, [r3, #28]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	019b      	lsls	r3, r3, #6
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d4:	085b      	lsrs	r3, r3, #1
 80070d6:	3b01      	subs	r3, #1
 80070d8:	041b      	lsls	r3, r3, #16
 80070da:	431a      	orrs	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e0:	061b      	lsls	r3, r3, #24
 80070e2:	431a      	orrs	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e8:	071b      	lsls	r3, r3, #28
 80070ea:	491b      	ldr	r1, [pc, #108]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070f0:	4b1b      	ldr	r3, [pc, #108]	; (8007160 <HAL_RCC_OscConfig+0x4b4>)
 80070f2:	2201      	movs	r2, #1
 80070f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f6:	f7fe fed1 	bl	8005e9c <HAL_GetTick>
 80070fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070fc:	e008      	b.n	8007110 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070fe:	f7fe fecd 	bl	8005e9c <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b02      	cmp	r3, #2
 800710a:	d901      	bls.n	8007110 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e064      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007110:	4b11      	ldr	r3, [pc, #68]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d0f0      	beq.n	80070fe <HAL_RCC_OscConfig+0x452>
 800711c:	e05c      	b.n	80071d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800711e:	4b10      	ldr	r3, [pc, #64]	; (8007160 <HAL_RCC_OscConfig+0x4b4>)
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007124:	f7fe feba 	bl	8005e9c <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800712a:	e008      	b.n	800713e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800712c:	f7fe feb6 	bl	8005e9c <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e04d      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800713e:	4b06      	ldr	r3, [pc, #24]	; (8007158 <HAL_RCC_OscConfig+0x4ac>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1f0      	bne.n	800712c <HAL_RCC_OscConfig+0x480>
 800714a:	e045      	b.n	80071d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d107      	bne.n	8007164 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e040      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
 8007158:	40023800 	.word	0x40023800
 800715c:	40007000 	.word	0x40007000
 8007160:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007164:	4b1f      	ldr	r3, [pc, #124]	; (80071e4 <HAL_RCC_OscConfig+0x538>)
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d030      	beq.n	80071d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800717c:	429a      	cmp	r2, r3
 800717e:	d129      	bne.n	80071d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800718a:	429a      	cmp	r2, r3
 800718c:	d122      	bne.n	80071d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007194:	4013      	ands	r3, r2
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800719a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800719c:	4293      	cmp	r3, r2
 800719e:	d119      	bne.n	80071d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071aa:	085b      	lsrs	r3, r3, #1
 80071ac:	3b01      	subs	r3, #1
 80071ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d10f      	bne.n	80071d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d107      	bne.n	80071d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d001      	beq.n	80071d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e000      	b.n	80071da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	40023800 	.word	0x40023800

080071e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e04c      	b.n	8007294 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d111      	bne.n	800722a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 fe04 	bl	8008e1c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007218:	2b00      	cmp	r3, #0
 800721a:	d102      	bne.n	8007222 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a1f      	ldr	r2, [pc, #124]	; (800729c <HAL_TIM_Base_Init+0xb4>)
 8007220:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2202      	movs	r2, #2
 800722e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3304      	adds	r3, #4
 800723a:	4619      	mov	r1, r3
 800723c:	4610      	mov	r0, r2
 800723e:	f001 f9b3 	bl	80085a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	080029a5 	.word	0x080029a5

080072a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d001      	beq.n	80072b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e046      	b.n	8007346 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a23      	ldr	r2, [pc, #140]	; (8007354 <HAL_TIM_Base_Start+0xb4>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d022      	beq.n	8007310 <HAL_TIM_Base_Start+0x70>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d2:	d01d      	beq.n	8007310 <HAL_TIM_Base_Start+0x70>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a1f      	ldr	r2, [pc, #124]	; (8007358 <HAL_TIM_Base_Start+0xb8>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d018      	beq.n	8007310 <HAL_TIM_Base_Start+0x70>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a1e      	ldr	r2, [pc, #120]	; (800735c <HAL_TIM_Base_Start+0xbc>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d013      	beq.n	8007310 <HAL_TIM_Base_Start+0x70>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a1c      	ldr	r2, [pc, #112]	; (8007360 <HAL_TIM_Base_Start+0xc0>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d00e      	beq.n	8007310 <HAL_TIM_Base_Start+0x70>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a1b      	ldr	r2, [pc, #108]	; (8007364 <HAL_TIM_Base_Start+0xc4>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d009      	beq.n	8007310 <HAL_TIM_Base_Start+0x70>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a19      	ldr	r2, [pc, #100]	; (8007368 <HAL_TIM_Base_Start+0xc8>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d004      	beq.n	8007310 <HAL_TIM_Base_Start+0x70>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a18      	ldr	r2, [pc, #96]	; (800736c <HAL_TIM_Base_Start+0xcc>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d111      	bne.n	8007334 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f003 0307 	and.w	r3, r3, #7
 800731a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b06      	cmp	r3, #6
 8007320:	d010      	beq.n	8007344 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f042 0201 	orr.w	r2, r2, #1
 8007330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007332:	e007      	b.n	8007344 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0201 	orr.w	r2, r2, #1
 8007342:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	40010000 	.word	0x40010000
 8007358:	40000400 	.word	0x40000400
 800735c:	40000800 	.word	0x40000800
 8007360:	40000c00 	.word	0x40000c00
 8007364:	40010400 	.word	0x40010400
 8007368:	40014000 	.word	0x40014000
 800736c:	40001800 	.word	0x40001800

08007370 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6a1a      	ldr	r2, [r3, #32]
 800737e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007382:	4013      	ands	r3, r2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10f      	bne.n	80073a8 <HAL_TIM_Base_Stop+0x38>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6a1a      	ldr	r2, [r3, #32]
 800738e:	f240 4344 	movw	r3, #1092	; 0x444
 8007392:	4013      	ands	r3, r2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d107      	bne.n	80073a8 <HAL_TIM_Base_Stop+0x38>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0201 	bic.w	r2, r2, #1
 80073a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
	...

080073c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d001      	beq.n	80073d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e04e      	b.n	8007476 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f042 0201 	orr.w	r2, r2, #1
 80073ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a23      	ldr	r2, [pc, #140]	; (8007484 <HAL_TIM_Base_Start_IT+0xc4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d022      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x80>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007402:	d01d      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x80>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a1f      	ldr	r2, [pc, #124]	; (8007488 <HAL_TIM_Base_Start_IT+0xc8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d018      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x80>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a1e      	ldr	r2, [pc, #120]	; (800748c <HAL_TIM_Base_Start_IT+0xcc>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d013      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x80>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a1c      	ldr	r2, [pc, #112]	; (8007490 <HAL_TIM_Base_Start_IT+0xd0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00e      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x80>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a1b      	ldr	r2, [pc, #108]	; (8007494 <HAL_TIM_Base_Start_IT+0xd4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d009      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x80>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a19      	ldr	r2, [pc, #100]	; (8007498 <HAL_TIM_Base_Start_IT+0xd8>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d004      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x80>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a18      	ldr	r2, [pc, #96]	; (800749c <HAL_TIM_Base_Start_IT+0xdc>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d111      	bne.n	8007464 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b06      	cmp	r3, #6
 8007450:	d010      	beq.n	8007474 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f042 0201 	orr.w	r2, r2, #1
 8007460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007462:	e007      	b.n	8007474 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 0201 	orr.w	r2, r2, #1
 8007472:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	40010000 	.word	0x40010000
 8007488:	40000400 	.word	0x40000400
 800748c:	40000800 	.word	0x40000800
 8007490:	40000c00 	.word	0x40000c00
 8007494:	40010400 	.word	0x40010400
 8007498:	40014000 	.word	0x40014000
 800749c:	40001800 	.word	0x40001800

080074a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f022 0201 	bic.w	r2, r2, #1
 80074b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6a1a      	ldr	r2, [r3, #32]
 80074be:	f241 1311 	movw	r3, #4369	; 0x1111
 80074c2:	4013      	ands	r3, r2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10f      	bne.n	80074e8 <HAL_TIM_Base_Stop_IT+0x48>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6a1a      	ldr	r2, [r3, #32]
 80074ce:	f240 4344 	movw	r3, #1092	; 0x444
 80074d2:	4013      	ands	r3, r2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d107      	bne.n	80074e8 <HAL_TIM_Base_Stop_IT+0x48>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0201 	bic.w	r2, r2, #1
 80074e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
	...

08007500 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e04c      	b.n	80075ac <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d111      	bne.n	8007542 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 fc78 	bl	8008e1c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007530:	2b00      	cmp	r3, #0
 8007532:	d102      	bne.n	800753a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a1f      	ldr	r2, [pc, #124]	; (80075b4 <HAL_TIM_PWM_Init+0xb4>)
 8007538:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3304      	adds	r3, #4
 8007552:	4619      	mov	r1, r3
 8007554:	4610      	mov	r0, r2
 8007556:	f001 f827 	bl	80085a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	080075b9 	.word	0x080075b9

080075b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d109      	bne.n	80075f0 <HAL_TIM_PWM_Start+0x24>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	bf14      	ite	ne
 80075e8:	2301      	movne	r3, #1
 80075ea:	2300      	moveq	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	e022      	b.n	8007636 <HAL_TIM_PWM_Start+0x6a>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d109      	bne.n	800760a <HAL_TIM_PWM_Start+0x3e>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b01      	cmp	r3, #1
 8007600:	bf14      	ite	ne
 8007602:	2301      	movne	r3, #1
 8007604:	2300      	moveq	r3, #0
 8007606:	b2db      	uxtb	r3, r3
 8007608:	e015      	b.n	8007636 <HAL_TIM_PWM_Start+0x6a>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b08      	cmp	r3, #8
 800760e:	d109      	bne.n	8007624 <HAL_TIM_PWM_Start+0x58>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b01      	cmp	r3, #1
 800761a:	bf14      	ite	ne
 800761c:	2301      	movne	r3, #1
 800761e:	2300      	moveq	r3, #0
 8007620:	b2db      	uxtb	r3, r3
 8007622:	e008      	b.n	8007636 <HAL_TIM_PWM_Start+0x6a>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b01      	cmp	r3, #1
 800762e:	bf14      	ite	ne
 8007630:	2301      	movne	r3, #1
 8007632:	2300      	moveq	r3, #0
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e07c      	b.n	8007738 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d104      	bne.n	800764e <HAL_TIM_PWM_Start+0x82>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800764c:	e013      	b.n	8007676 <HAL_TIM_PWM_Start+0xaa>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b04      	cmp	r3, #4
 8007652:	d104      	bne.n	800765e <HAL_TIM_PWM_Start+0x92>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800765c:	e00b      	b.n	8007676 <HAL_TIM_PWM_Start+0xaa>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b08      	cmp	r3, #8
 8007662:	d104      	bne.n	800766e <HAL_TIM_PWM_Start+0xa2>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2202      	movs	r2, #2
 8007668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800766c:	e003      	b.n	8007676 <HAL_TIM_PWM_Start+0xaa>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2202      	movs	r2, #2
 8007672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2201      	movs	r2, #1
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	4618      	mov	r0, r3
 8007680:	f001 fba6 	bl	8008dd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a2d      	ldr	r2, [pc, #180]	; (8007740 <HAL_TIM_PWM_Start+0x174>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d004      	beq.n	8007698 <HAL_TIM_PWM_Start+0xcc>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a2c      	ldr	r2, [pc, #176]	; (8007744 <HAL_TIM_PWM_Start+0x178>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d101      	bne.n	800769c <HAL_TIM_PWM_Start+0xd0>
 8007698:	2301      	movs	r3, #1
 800769a:	e000      	b.n	800769e <HAL_TIM_PWM_Start+0xd2>
 800769c:	2300      	movs	r3, #0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d007      	beq.n	80076b2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a22      	ldr	r2, [pc, #136]	; (8007740 <HAL_TIM_PWM_Start+0x174>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d022      	beq.n	8007702 <HAL_TIM_PWM_Start+0x136>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c4:	d01d      	beq.n	8007702 <HAL_TIM_PWM_Start+0x136>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a1f      	ldr	r2, [pc, #124]	; (8007748 <HAL_TIM_PWM_Start+0x17c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d018      	beq.n	8007702 <HAL_TIM_PWM_Start+0x136>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a1d      	ldr	r2, [pc, #116]	; (800774c <HAL_TIM_PWM_Start+0x180>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d013      	beq.n	8007702 <HAL_TIM_PWM_Start+0x136>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a1c      	ldr	r2, [pc, #112]	; (8007750 <HAL_TIM_PWM_Start+0x184>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d00e      	beq.n	8007702 <HAL_TIM_PWM_Start+0x136>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a16      	ldr	r2, [pc, #88]	; (8007744 <HAL_TIM_PWM_Start+0x178>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d009      	beq.n	8007702 <HAL_TIM_PWM_Start+0x136>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a18      	ldr	r2, [pc, #96]	; (8007754 <HAL_TIM_PWM_Start+0x188>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d004      	beq.n	8007702 <HAL_TIM_PWM_Start+0x136>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a16      	ldr	r2, [pc, #88]	; (8007758 <HAL_TIM_PWM_Start+0x18c>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d111      	bne.n	8007726 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 0307 	and.w	r3, r3, #7
 800770c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b06      	cmp	r3, #6
 8007712:	d010      	beq.n	8007736 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0201 	orr.w	r2, r2, #1
 8007722:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007724:	e007      	b.n	8007736 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f042 0201 	orr.w	r2, r2, #1
 8007734:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	40010000 	.word	0x40010000
 8007744:	40010400 	.word	0x40010400
 8007748:	40000400 	.word	0x40000400
 800774c:	40000800 	.word	0x40000800
 8007750:	40000c00 	.word	0x40000c00
 8007754:	40014000 	.word	0x40014000
 8007758:	40001800 	.word	0x40001800

0800775c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e04c      	b.n	8007808 <HAL_TIM_IC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d111      	bne.n	800779e <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f001 fb4a 	bl	8008e1c <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800778c:	2b00      	cmp	r3, #0
 800778e:	d102      	bne.n	8007796 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a1f      	ldr	r2, [pc, #124]	; (8007810 <HAL_TIM_IC_Init+0xb4>)
 8007794:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2202      	movs	r2, #2
 80077a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3304      	adds	r3, #4
 80077ae:	4619      	mov	r1, r3
 80077b0:	4610      	mov	r0, r2
 80077b2:	f000 fef9 	bl	80085a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	08007815 	.word	0x08007815

08007814 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d104      	bne.n	8007846 <HAL_TIM_IC_Start_IT+0x1e>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007842:	b2db      	uxtb	r3, r3
 8007844:	e013      	b.n	800786e <HAL_TIM_IC_Start_IT+0x46>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b04      	cmp	r3, #4
 800784a:	d104      	bne.n	8007856 <HAL_TIM_IC_Start_IT+0x2e>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007852:	b2db      	uxtb	r3, r3
 8007854:	e00b      	b.n	800786e <HAL_TIM_IC_Start_IT+0x46>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b08      	cmp	r3, #8
 800785a:	d104      	bne.n	8007866 <HAL_TIM_IC_Start_IT+0x3e>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007862:	b2db      	uxtb	r3, r3
 8007864:	e003      	b.n	800786e <HAL_TIM_IC_Start_IT+0x46>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800786c:	b2db      	uxtb	r3, r3
 800786e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d104      	bne.n	8007880 <HAL_TIM_IC_Start_IT+0x58>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800787c:	b2db      	uxtb	r3, r3
 800787e:	e013      	b.n	80078a8 <HAL_TIM_IC_Start_IT+0x80>
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b04      	cmp	r3, #4
 8007884:	d104      	bne.n	8007890 <HAL_TIM_IC_Start_IT+0x68>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800788c:	b2db      	uxtb	r3, r3
 800788e:	e00b      	b.n	80078a8 <HAL_TIM_IC_Start_IT+0x80>
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b08      	cmp	r3, #8
 8007894:	d104      	bne.n	80078a0 <HAL_TIM_IC_Start_IT+0x78>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800789c:	b2db      	uxtb	r3, r3
 800789e:	e003      	b.n	80078a8 <HAL_TIM_IC_Start_IT+0x80>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d102      	bne.n	80078b6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80078b0:	7b7b      	ldrb	r3, [r7, #13]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d001      	beq.n	80078ba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e0cc      	b.n	8007a54 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d104      	bne.n	80078ca <HAL_TIM_IC_Start_IT+0xa2>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078c8:	e013      	b.n	80078f2 <HAL_TIM_IC_Start_IT+0xca>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b04      	cmp	r3, #4
 80078ce:	d104      	bne.n	80078da <HAL_TIM_IC_Start_IT+0xb2>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078d8:	e00b      	b.n	80078f2 <HAL_TIM_IC_Start_IT+0xca>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b08      	cmp	r3, #8
 80078de:	d104      	bne.n	80078ea <HAL_TIM_IC_Start_IT+0xc2>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078e8:	e003      	b.n	80078f2 <HAL_TIM_IC_Start_IT+0xca>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2202      	movs	r2, #2
 80078ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d104      	bne.n	8007902 <HAL_TIM_IC_Start_IT+0xda>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007900:	e013      	b.n	800792a <HAL_TIM_IC_Start_IT+0x102>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b04      	cmp	r3, #4
 8007906:	d104      	bne.n	8007912 <HAL_TIM_IC_Start_IT+0xea>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007910:	e00b      	b.n	800792a <HAL_TIM_IC_Start_IT+0x102>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b08      	cmp	r3, #8
 8007916:	d104      	bne.n	8007922 <HAL_TIM_IC_Start_IT+0xfa>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007920:	e003      	b.n	800792a <HAL_TIM_IC_Start_IT+0x102>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2202      	movs	r2, #2
 8007926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b0c      	cmp	r3, #12
 800792e:	d841      	bhi.n	80079b4 <HAL_TIM_IC_Start_IT+0x18c>
 8007930:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <HAL_TIM_IC_Start_IT+0x110>)
 8007932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007936:	bf00      	nop
 8007938:	0800796d 	.word	0x0800796d
 800793c:	080079b5 	.word	0x080079b5
 8007940:	080079b5 	.word	0x080079b5
 8007944:	080079b5 	.word	0x080079b5
 8007948:	0800797f 	.word	0x0800797f
 800794c:	080079b5 	.word	0x080079b5
 8007950:	080079b5 	.word	0x080079b5
 8007954:	080079b5 	.word	0x080079b5
 8007958:	08007991 	.word	0x08007991
 800795c:	080079b5 	.word	0x080079b5
 8007960:	080079b5 	.word	0x080079b5
 8007964:	080079b5 	.word	0x080079b5
 8007968:	080079a3 	.word	0x080079a3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 0202 	orr.w	r2, r2, #2
 800797a:	60da      	str	r2, [r3, #12]
      break;
 800797c:	e01d      	b.n	80079ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f042 0204 	orr.w	r2, r2, #4
 800798c:	60da      	str	r2, [r3, #12]
      break;
 800798e:	e014      	b.n	80079ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0208 	orr.w	r2, r2, #8
 800799e:	60da      	str	r2, [r3, #12]
      break;
 80079a0:	e00b      	b.n	80079ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f042 0210 	orr.w	r2, r2, #16
 80079b0:	60da      	str	r2, [r3, #12]
      break;
 80079b2:	e002      	b.n	80079ba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	73fb      	strb	r3, [r7, #15]
      break;
 80079b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d148      	bne.n	8007a52 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2201      	movs	r2, #1
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f001 fa01 	bl	8008dd0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a22      	ldr	r2, [pc, #136]	; (8007a5c <HAL_TIM_IC_Start_IT+0x234>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d022      	beq.n	8007a1e <HAL_TIM_IC_Start_IT+0x1f6>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e0:	d01d      	beq.n	8007a1e <HAL_TIM_IC_Start_IT+0x1f6>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1e      	ldr	r2, [pc, #120]	; (8007a60 <HAL_TIM_IC_Start_IT+0x238>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d018      	beq.n	8007a1e <HAL_TIM_IC_Start_IT+0x1f6>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a1c      	ldr	r2, [pc, #112]	; (8007a64 <HAL_TIM_IC_Start_IT+0x23c>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d013      	beq.n	8007a1e <HAL_TIM_IC_Start_IT+0x1f6>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1b      	ldr	r2, [pc, #108]	; (8007a68 <HAL_TIM_IC_Start_IT+0x240>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00e      	beq.n	8007a1e <HAL_TIM_IC_Start_IT+0x1f6>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a19      	ldr	r2, [pc, #100]	; (8007a6c <HAL_TIM_IC_Start_IT+0x244>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d009      	beq.n	8007a1e <HAL_TIM_IC_Start_IT+0x1f6>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a18      	ldr	r2, [pc, #96]	; (8007a70 <HAL_TIM_IC_Start_IT+0x248>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d004      	beq.n	8007a1e <HAL_TIM_IC_Start_IT+0x1f6>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a16      	ldr	r2, [pc, #88]	; (8007a74 <HAL_TIM_IC_Start_IT+0x24c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d111      	bne.n	8007a42 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f003 0307 	and.w	r3, r3, #7
 8007a28:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b06      	cmp	r3, #6
 8007a2e:	d010      	beq.n	8007a52 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0201 	orr.w	r2, r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a40:	e007      	b.n	8007a52 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0201 	orr.w	r2, r2, #1
 8007a50:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	40010000 	.word	0x40010000
 8007a60:	40000400 	.word	0x40000400
 8007a64:	40000800 	.word	0x40000800
 8007a68:	40000c00 	.word	0x40000c00
 8007a6c:	40010400 	.word	0x40010400
 8007a70:	40014000 	.word	0x40014000
 8007a74:	40001800 	.word	0x40001800

08007a78 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	73fb      	strb	r3, [r7, #15]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b0c      	cmp	r3, #12
 8007a8a:	d841      	bhi.n	8007b10 <HAL_TIM_IC_Stop_IT+0x98>
 8007a8c:	a201      	add	r2, pc, #4	; (adr r2, 8007a94 <HAL_TIM_IC_Stop_IT+0x1c>)
 8007a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a92:	bf00      	nop
 8007a94:	08007ac9 	.word	0x08007ac9
 8007a98:	08007b11 	.word	0x08007b11
 8007a9c:	08007b11 	.word	0x08007b11
 8007aa0:	08007b11 	.word	0x08007b11
 8007aa4:	08007adb 	.word	0x08007adb
 8007aa8:	08007b11 	.word	0x08007b11
 8007aac:	08007b11 	.word	0x08007b11
 8007ab0:	08007b11 	.word	0x08007b11
 8007ab4:	08007aed 	.word	0x08007aed
 8007ab8:	08007b11 	.word	0x08007b11
 8007abc:	08007b11 	.word	0x08007b11
 8007ac0:	08007b11 	.word	0x08007b11
 8007ac4:	08007aff 	.word	0x08007aff
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0202 	bic.w	r2, r2, #2
 8007ad6:	60da      	str	r2, [r3, #12]
      break;
 8007ad8:	e01d      	b.n	8007b16 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68da      	ldr	r2, [r3, #12]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0204 	bic.w	r2, r2, #4
 8007ae8:	60da      	str	r2, [r3, #12]
      break;
 8007aea:	e014      	b.n	8007b16 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0208 	bic.w	r2, r2, #8
 8007afa:	60da      	str	r2, [r3, #12]
      break;
 8007afc:	e00b      	b.n	8007b16 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68da      	ldr	r2, [r3, #12]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0210 	bic.w	r2, r2, #16
 8007b0c:	60da      	str	r2, [r3, #12]
      break;
 8007b0e:	e002      	b.n	8007b16 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	73fb      	strb	r3, [r7, #15]
      break;
 8007b14:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d156      	bne.n	8007bca <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2200      	movs	r2, #0
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f001 f953 	bl	8008dd0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6a1a      	ldr	r2, [r3, #32]
 8007b30:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b34:	4013      	ands	r3, r2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10f      	bne.n	8007b5a <HAL_TIM_IC_Stop_IT+0xe2>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6a1a      	ldr	r2, [r3, #32]
 8007b40:	f240 4344 	movw	r3, #1092	; 0x444
 8007b44:	4013      	ands	r3, r2
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d107      	bne.n	8007b5a <HAL_TIM_IC_Stop_IT+0xe2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0201 	bic.w	r2, r2, #1
 8007b58:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d104      	bne.n	8007b6a <HAL_TIM_IC_Stop_IT+0xf2>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b68:	e013      	b.n	8007b92 <HAL_TIM_IC_Stop_IT+0x11a>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d104      	bne.n	8007b7a <HAL_TIM_IC_Stop_IT+0x102>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b78:	e00b      	b.n	8007b92 <HAL_TIM_IC_Stop_IT+0x11a>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b08      	cmp	r3, #8
 8007b7e:	d104      	bne.n	8007b8a <HAL_TIM_IC_Stop_IT+0x112>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b88:	e003      	b.n	8007b92 <HAL_TIM_IC_Stop_IT+0x11a>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d104      	bne.n	8007ba2 <HAL_TIM_IC_Stop_IT+0x12a>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ba0:	e013      	b.n	8007bca <HAL_TIM_IC_Stop_IT+0x152>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	d104      	bne.n	8007bb2 <HAL_TIM_IC_Stop_IT+0x13a>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bb0:	e00b      	b.n	8007bca <HAL_TIM_IC_Stop_IT+0x152>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d104      	bne.n	8007bc2 <HAL_TIM_IC_Stop_IT+0x14a>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bc0:	e003      	b.n	8007bca <HAL_TIM_IC_Stop_IT+0x152>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e0a2      	b.n	8007d2e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d111      	bne.n	8007c18 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f001 f90d 	bl	8008e1c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d102      	bne.n	8007c10 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a4a      	ldr	r2, [pc, #296]	; (8007d38 <HAL_TIM_Encoder_Init+0x164>)
 8007c0e:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	6812      	ldr	r2, [r2, #0]
 8007c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c2e:	f023 0307 	bic.w	r3, r3, #7
 8007c32:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	4610      	mov	r0, r2
 8007c40:	f000 fcb2 	bl	80085a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c6c:	f023 0303 	bic.w	r3, r3, #3
 8007c70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	689a      	ldr	r2, [r3, #8]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	021b      	lsls	r3, r3, #8
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007c8a:	f023 030c 	bic.w	r3, r3, #12
 8007c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	011a      	lsls	r2, r3, #4
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	031b      	lsls	r3, r3, #12
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007cc8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007cd0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	011b      	lsls	r3, r3, #4
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	08002b15 	.word	0x08002b15

08007d3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d110      	bne.n	8007d8e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d102      	bne.n	8007d78 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d72:	7b7b      	ldrb	r3, [r7, #13]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d001      	beq.n	8007d7c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e069      	b.n	8007e50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2202      	movs	r2, #2
 8007d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d8c:	e031      	b.n	8007df2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	d110      	bne.n	8007db6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d102      	bne.n	8007da0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d9a:	7b3b      	ldrb	r3, [r7, #12]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d001      	beq.n	8007da4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e055      	b.n	8007e50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2202      	movs	r2, #2
 8007da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007db4:	e01d      	b.n	8007df2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d108      	bne.n	8007dce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d105      	bne.n	8007dce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dc2:	7b7b      	ldrb	r3, [r7, #13]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d102      	bne.n	8007dce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007dc8:	7b3b      	ldrb	r3, [r7, #12]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d001      	beq.n	8007dd2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e03e      	b.n	8007e50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2202      	movs	r2, #2
 8007dde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2202      	movs	r2, #2
 8007de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2202      	movs	r2, #2
 8007dee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d003      	beq.n	8007e00 <HAL_TIM_Encoder_Start+0xc4>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d008      	beq.n	8007e10 <HAL_TIM_Encoder_Start+0xd4>
 8007dfe:	e00f      	b.n	8007e20 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2201      	movs	r2, #1
 8007e06:	2100      	movs	r1, #0
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 ffe1 	bl	8008dd0 <TIM_CCxChannelCmd>
      break;
 8007e0e:	e016      	b.n	8007e3e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2201      	movs	r2, #1
 8007e16:	2104      	movs	r1, #4
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 ffd9 	bl	8008dd0 <TIM_CCxChannelCmd>
      break;
 8007e1e:	e00e      	b.n	8007e3e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2201      	movs	r2, #1
 8007e26:	2100      	movs	r1, #0
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 ffd1 	bl	8008dd0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2201      	movs	r2, #1
 8007e34:	2104      	movs	r1, #4
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 ffca 	bl	8008dd0 <TIM_CCxChannelCmd>
      break;
 8007e3c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f042 0201 	orr.w	r2, r2, #1
 8007e4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d128      	bne.n	8007ec0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d121      	bne.n	8007ec0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f06f 0202 	mvn.w	r2, #2
 8007e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	f003 0303 	and.w	r3, r3, #3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d005      	beq.n	8007ea6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	4798      	blx	r3
 8007ea4:	e009      	b.n	8007eba <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	f003 0304 	and.w	r3, r3, #4
 8007eca:	2b04      	cmp	r3, #4
 8007ecc:	d128      	bne.n	8007f20 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d121      	bne.n	8007f20 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f06f 0204 	mvn.w	r2, #4
 8007ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d005      	beq.n	8007f06 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	4798      	blx	r3
 8007f04:	e009      	b.n	8007f1a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	f003 0308 	and.w	r3, r3, #8
 8007f2a:	2b08      	cmp	r3, #8
 8007f2c:	d128      	bne.n	8007f80 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	f003 0308 	and.w	r3, r3, #8
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	d121      	bne.n	8007f80 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f06f 0208 	mvn.w	r2, #8
 8007f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2204      	movs	r2, #4
 8007f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	69db      	ldr	r3, [r3, #28]
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d005      	beq.n	8007f66 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4798      	blx	r3
 8007f64:	e009      	b.n	8007f7a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	f003 0310 	and.w	r3, r3, #16
 8007f8a:	2b10      	cmp	r3, #16
 8007f8c:	d128      	bne.n	8007fe0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f003 0310 	and.w	r3, r3, #16
 8007f98:	2b10      	cmp	r3, #16
 8007f9a:	d121      	bne.n	8007fe0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f06f 0210 	mvn.w	r2, #16
 8007fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2208      	movs	r2, #8
 8007faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d005      	beq.n	8007fc6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	4798      	blx	r3
 8007fc4:	e009      	b.n	8007fda <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d110      	bne.n	8008010 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d109      	bne.n	8008010 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f06f 0201 	mvn.w	r2, #1
 8008004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800801a:	2b80      	cmp	r3, #128	; 0x80
 800801c:	d110      	bne.n	8008040 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008028:	2b80      	cmp	r3, #128	; 0x80
 800802a:	d109      	bne.n	8008040 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804a:	2b40      	cmp	r3, #64	; 0x40
 800804c:	d110      	bne.n	8008070 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008058:	2b40      	cmp	r3, #64	; 0x40
 800805a:	d109      	bne.n	8008070 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b20      	cmp	r3, #32
 800807c:	d110      	bne.n	80080a0 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f003 0320 	and.w	r3, r3, #32
 8008088:	2b20      	cmp	r3, #32
 800808a:	d109      	bne.n	80080a0 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0220 	mvn.w	r2, #32
 8008094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080a0:	bf00      	nop
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d101      	bne.n	80080c6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80080c2:	2302      	movs	r3, #2
 80080c4:	e088      	b.n	80081d8 <HAL_TIM_IC_ConfigChannel+0x130>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d11b      	bne.n	800810c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6818      	ldr	r0, [r3, #0]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	6819      	ldr	r1, [r3, #0]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f000 fcb0 	bl	8008a48 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	699a      	ldr	r2, [r3, #24]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 020c 	bic.w	r2, r2, #12
 80080f6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6999      	ldr	r1, [r3, #24]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	689a      	ldr	r2, [r3, #8]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	619a      	str	r2, [r3, #24]
 800810a:	e060      	b.n	80081ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b04      	cmp	r3, #4
 8008110:	d11c      	bne.n	800814c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6818      	ldr	r0, [r3, #0]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	6819      	ldr	r1, [r3, #0]
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f000 fd34 	bl	8008b8e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	699a      	ldr	r2, [r3, #24]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008134:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6999      	ldr	r1, [r3, #24]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	021a      	lsls	r2, r3, #8
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	619a      	str	r2, [r3, #24]
 800814a:	e040      	b.n	80081ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b08      	cmp	r3, #8
 8008150:	d11b      	bne.n	800818a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	6819      	ldr	r1, [r3, #0]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	f000 fd81 	bl	8008c68 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69da      	ldr	r2, [r3, #28]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 020c 	bic.w	r2, r2, #12
 8008174:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	69d9      	ldr	r1, [r3, #28]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	61da      	str	r2, [r3, #28]
 8008188:	e021      	b.n	80081ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b0c      	cmp	r3, #12
 800818e:	d11c      	bne.n	80081ca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6818      	ldr	r0, [r3, #0]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	6819      	ldr	r1, [r3, #0]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	f000 fd9e 	bl	8008ce0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	69da      	ldr	r2, [r3, #28]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80081b2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	69d9      	ldr	r1, [r3, #28]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	021a      	lsls	r2, r3, #8
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	61da      	str	r2, [r3, #28]
 80081c8:	e001      	b.n	80081ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e0ae      	b.n	800835c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b0c      	cmp	r3, #12
 800820a:	f200 809f 	bhi.w	800834c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800820e:	a201      	add	r2, pc, #4	; (adr r2, 8008214 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008214:	08008249 	.word	0x08008249
 8008218:	0800834d 	.word	0x0800834d
 800821c:	0800834d 	.word	0x0800834d
 8008220:	0800834d 	.word	0x0800834d
 8008224:	08008289 	.word	0x08008289
 8008228:	0800834d 	.word	0x0800834d
 800822c:	0800834d 	.word	0x0800834d
 8008230:	0800834d 	.word	0x0800834d
 8008234:	080082cb 	.word	0x080082cb
 8008238:	0800834d 	.word	0x0800834d
 800823c:	0800834d 	.word	0x0800834d
 8008240:	0800834d 	.word	0x0800834d
 8008244:	0800830b 	.word	0x0800830b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68b9      	ldr	r1, [r7, #8]
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fa4a 	bl	80086e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	699a      	ldr	r2, [r3, #24]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f042 0208 	orr.w	r2, r2, #8
 8008262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	699a      	ldr	r2, [r3, #24]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f022 0204 	bic.w	r2, r2, #4
 8008272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6999      	ldr	r1, [r3, #24]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	691a      	ldr	r2, [r3, #16]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	619a      	str	r2, [r3, #24]
      break;
 8008286:	e064      	b.n	8008352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68b9      	ldr	r1, [r7, #8]
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fa9a 	bl	80087c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	699a      	ldr	r2, [r3, #24]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	699a      	ldr	r2, [r3, #24]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6999      	ldr	r1, [r3, #24]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	021a      	lsls	r2, r3, #8
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	430a      	orrs	r2, r1
 80082c6:	619a      	str	r2, [r3, #24]
      break;
 80082c8:	e043      	b.n	8008352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68b9      	ldr	r1, [r7, #8]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 faef 	bl	80088b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69da      	ldr	r2, [r3, #28]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f042 0208 	orr.w	r2, r2, #8
 80082e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69da      	ldr	r2, [r3, #28]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 0204 	bic.w	r2, r2, #4
 80082f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	69d9      	ldr	r1, [r3, #28]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	691a      	ldr	r2, [r3, #16]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	61da      	str	r2, [r3, #28]
      break;
 8008308:	e023      	b.n	8008352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68b9      	ldr	r1, [r7, #8]
 8008310:	4618      	mov	r0, r3
 8008312:	f000 fb43 	bl	800899c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	69da      	ldr	r2, [r3, #28]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	69da      	ldr	r2, [r3, #28]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	69d9      	ldr	r1, [r3, #28]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	021a      	lsls	r2, r3, #8
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	430a      	orrs	r2, r1
 8008348:	61da      	str	r2, [r3, #28]
      break;
 800834a:	e002      	b.n	8008352 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	75fb      	strb	r3, [r7, #23]
      break;
 8008350:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800835a:	7dfb      	ldrb	r3, [r7, #23]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008378:	2b01      	cmp	r3, #1
 800837a:	d101      	bne.n	8008380 <HAL_TIM_ConfigClockSource+0x1c>
 800837c:	2302      	movs	r3, #2
 800837e:	e0b4      	b.n	80084ea <HAL_TIM_ConfigClockSource+0x186>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2202      	movs	r2, #2
 800838c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800839e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083b8:	d03e      	beq.n	8008438 <HAL_TIM_ConfigClockSource+0xd4>
 80083ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083be:	f200 8087 	bhi.w	80084d0 <HAL_TIM_ConfigClockSource+0x16c>
 80083c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c6:	f000 8086 	beq.w	80084d6 <HAL_TIM_ConfigClockSource+0x172>
 80083ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ce:	d87f      	bhi.n	80084d0 <HAL_TIM_ConfigClockSource+0x16c>
 80083d0:	2b70      	cmp	r3, #112	; 0x70
 80083d2:	d01a      	beq.n	800840a <HAL_TIM_ConfigClockSource+0xa6>
 80083d4:	2b70      	cmp	r3, #112	; 0x70
 80083d6:	d87b      	bhi.n	80084d0 <HAL_TIM_ConfigClockSource+0x16c>
 80083d8:	2b60      	cmp	r3, #96	; 0x60
 80083da:	d050      	beq.n	800847e <HAL_TIM_ConfigClockSource+0x11a>
 80083dc:	2b60      	cmp	r3, #96	; 0x60
 80083de:	d877      	bhi.n	80084d0 <HAL_TIM_ConfigClockSource+0x16c>
 80083e0:	2b50      	cmp	r3, #80	; 0x50
 80083e2:	d03c      	beq.n	800845e <HAL_TIM_ConfigClockSource+0xfa>
 80083e4:	2b50      	cmp	r3, #80	; 0x50
 80083e6:	d873      	bhi.n	80084d0 <HAL_TIM_ConfigClockSource+0x16c>
 80083e8:	2b40      	cmp	r3, #64	; 0x40
 80083ea:	d058      	beq.n	800849e <HAL_TIM_ConfigClockSource+0x13a>
 80083ec:	2b40      	cmp	r3, #64	; 0x40
 80083ee:	d86f      	bhi.n	80084d0 <HAL_TIM_ConfigClockSource+0x16c>
 80083f0:	2b30      	cmp	r3, #48	; 0x30
 80083f2:	d064      	beq.n	80084be <HAL_TIM_ConfigClockSource+0x15a>
 80083f4:	2b30      	cmp	r3, #48	; 0x30
 80083f6:	d86b      	bhi.n	80084d0 <HAL_TIM_ConfigClockSource+0x16c>
 80083f8:	2b20      	cmp	r3, #32
 80083fa:	d060      	beq.n	80084be <HAL_TIM_ConfigClockSource+0x15a>
 80083fc:	2b20      	cmp	r3, #32
 80083fe:	d867      	bhi.n	80084d0 <HAL_TIM_ConfigClockSource+0x16c>
 8008400:	2b00      	cmp	r3, #0
 8008402:	d05c      	beq.n	80084be <HAL_TIM_ConfigClockSource+0x15a>
 8008404:	2b10      	cmp	r3, #16
 8008406:	d05a      	beq.n	80084be <HAL_TIM_ConfigClockSource+0x15a>
 8008408:	e062      	b.n	80084d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6818      	ldr	r0, [r3, #0]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	6899      	ldr	r1, [r3, #8]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f000 fcb9 	bl	8008d90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800842c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	609a      	str	r2, [r3, #8]
      break;
 8008436:	e04f      	b.n	80084d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6818      	ldr	r0, [r3, #0]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	6899      	ldr	r1, [r3, #8]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f000 fca2 	bl	8008d90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689a      	ldr	r2, [r3, #8]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800845a:	609a      	str	r2, [r3, #8]
      break;
 800845c:	e03c      	b.n	80084d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6818      	ldr	r0, [r3, #0]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	6859      	ldr	r1, [r3, #4]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	461a      	mov	r2, r3
 800846c:	f000 fb60 	bl	8008b30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2150      	movs	r1, #80	; 0x50
 8008476:	4618      	mov	r0, r3
 8008478:	f000 fc6f 	bl	8008d5a <TIM_ITRx_SetConfig>
      break;
 800847c:	e02c      	b.n	80084d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6818      	ldr	r0, [r3, #0]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	6859      	ldr	r1, [r3, #4]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	461a      	mov	r2, r3
 800848c:	f000 fbbc 	bl	8008c08 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2160      	movs	r1, #96	; 0x60
 8008496:	4618      	mov	r0, r3
 8008498:	f000 fc5f 	bl	8008d5a <TIM_ITRx_SetConfig>
      break;
 800849c:	e01c      	b.n	80084d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6818      	ldr	r0, [r3, #0]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	6859      	ldr	r1, [r3, #4]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	461a      	mov	r2, r3
 80084ac:	f000 fb40 	bl	8008b30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2140      	movs	r1, #64	; 0x40
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 fc4f 	bl	8008d5a <TIM_ITRx_SetConfig>
      break;
 80084bc:	e00c      	b.n	80084d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4619      	mov	r1, r3
 80084c8:	4610      	mov	r0, r2
 80084ca:	f000 fc46 	bl	8008d5a <TIM_ITRx_SetConfig>
      break;
 80084ce:	e003      	b.n	80084d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	73fb      	strb	r3, [r7, #15]
      break;
 80084d4:	e000      	b.n	80084d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80084d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80084fa:	bf00      	nop
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800851a:	b480      	push	{r7}
 800851c:	b083      	sub	sp, #12
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008522:	bf00      	nop
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800852e:	b480      	push	{r7}
 8008530:	b083      	sub	sp, #12
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008536:	bf00      	nop
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008542:	b480      	push	{r7}
 8008544:	b083      	sub	sp, #12
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800854a:	bf00      	nop
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008556:	b480      	push	{r7}
 8008558:	b083      	sub	sp, #12
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800855e:	bf00      	nop
 8008560:	370c      	adds	r7, #12
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800856a:	b480      	push	{r7}
 800856c:	b083      	sub	sp, #12
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008572:	bf00      	nop
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800857e:	b480      	push	{r7}
 8008580:	b083      	sub	sp, #12
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008586:	bf00      	nop
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008592:	b480      	push	{r7}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800859a:	bf00      	nop
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
	...

080085a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a40      	ldr	r2, [pc, #256]	; (80086bc <TIM_Base_SetConfig+0x114>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d013      	beq.n	80085e8 <TIM_Base_SetConfig+0x40>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c6:	d00f      	beq.n	80085e8 <TIM_Base_SetConfig+0x40>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a3d      	ldr	r2, [pc, #244]	; (80086c0 <TIM_Base_SetConfig+0x118>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d00b      	beq.n	80085e8 <TIM_Base_SetConfig+0x40>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a3c      	ldr	r2, [pc, #240]	; (80086c4 <TIM_Base_SetConfig+0x11c>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d007      	beq.n	80085e8 <TIM_Base_SetConfig+0x40>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a3b      	ldr	r2, [pc, #236]	; (80086c8 <TIM_Base_SetConfig+0x120>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d003      	beq.n	80085e8 <TIM_Base_SetConfig+0x40>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a3a      	ldr	r2, [pc, #232]	; (80086cc <TIM_Base_SetConfig+0x124>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d108      	bne.n	80085fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a2f      	ldr	r2, [pc, #188]	; (80086bc <TIM_Base_SetConfig+0x114>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d02b      	beq.n	800865a <TIM_Base_SetConfig+0xb2>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008608:	d027      	beq.n	800865a <TIM_Base_SetConfig+0xb2>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a2c      	ldr	r2, [pc, #176]	; (80086c0 <TIM_Base_SetConfig+0x118>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d023      	beq.n	800865a <TIM_Base_SetConfig+0xb2>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a2b      	ldr	r2, [pc, #172]	; (80086c4 <TIM_Base_SetConfig+0x11c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d01f      	beq.n	800865a <TIM_Base_SetConfig+0xb2>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a2a      	ldr	r2, [pc, #168]	; (80086c8 <TIM_Base_SetConfig+0x120>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d01b      	beq.n	800865a <TIM_Base_SetConfig+0xb2>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a29      	ldr	r2, [pc, #164]	; (80086cc <TIM_Base_SetConfig+0x124>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d017      	beq.n	800865a <TIM_Base_SetConfig+0xb2>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a28      	ldr	r2, [pc, #160]	; (80086d0 <TIM_Base_SetConfig+0x128>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d013      	beq.n	800865a <TIM_Base_SetConfig+0xb2>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a27      	ldr	r2, [pc, #156]	; (80086d4 <TIM_Base_SetConfig+0x12c>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d00f      	beq.n	800865a <TIM_Base_SetConfig+0xb2>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a26      	ldr	r2, [pc, #152]	; (80086d8 <TIM_Base_SetConfig+0x130>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d00b      	beq.n	800865a <TIM_Base_SetConfig+0xb2>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a25      	ldr	r2, [pc, #148]	; (80086dc <TIM_Base_SetConfig+0x134>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d007      	beq.n	800865a <TIM_Base_SetConfig+0xb2>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a24      	ldr	r2, [pc, #144]	; (80086e0 <TIM_Base_SetConfig+0x138>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d003      	beq.n	800865a <TIM_Base_SetConfig+0xb2>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a23      	ldr	r2, [pc, #140]	; (80086e4 <TIM_Base_SetConfig+0x13c>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d108      	bne.n	800866c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	4313      	orrs	r3, r2
 800866a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	4313      	orrs	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	689a      	ldr	r2, [r3, #8]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a0a      	ldr	r2, [pc, #40]	; (80086bc <TIM_Base_SetConfig+0x114>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d003      	beq.n	80086a0 <TIM_Base_SetConfig+0xf8>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a0c      	ldr	r2, [pc, #48]	; (80086cc <TIM_Base_SetConfig+0x124>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d103      	bne.n	80086a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	691a      	ldr	r2, [r3, #16]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	615a      	str	r2, [r3, #20]
}
 80086ae:	bf00      	nop
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	40010000 	.word	0x40010000
 80086c0:	40000400 	.word	0x40000400
 80086c4:	40000800 	.word	0x40000800
 80086c8:	40000c00 	.word	0x40000c00
 80086cc:	40010400 	.word	0x40010400
 80086d0:	40014000 	.word	0x40014000
 80086d4:	40014400 	.word	0x40014400
 80086d8:	40014800 	.word	0x40014800
 80086dc:	40001800 	.word	0x40001800
 80086e0:	40001c00 	.word	0x40001c00
 80086e4:	40002000 	.word	0x40002000

080086e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	f023 0201 	bic.w	r2, r3, #1
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0303 	bic.w	r3, r3, #3
 800871e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	4313      	orrs	r3, r2
 8008728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f023 0302 	bic.w	r3, r3, #2
 8008730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	4313      	orrs	r3, r2
 800873a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a20      	ldr	r2, [pc, #128]	; (80087c0 <TIM_OC1_SetConfig+0xd8>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d003      	beq.n	800874c <TIM_OC1_SetConfig+0x64>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a1f      	ldr	r2, [pc, #124]	; (80087c4 <TIM_OC1_SetConfig+0xdc>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d10c      	bne.n	8008766 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f023 0308 	bic.w	r3, r3, #8
 8008752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	4313      	orrs	r3, r2
 800875c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f023 0304 	bic.w	r3, r3, #4
 8008764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a15      	ldr	r2, [pc, #84]	; (80087c0 <TIM_OC1_SetConfig+0xd8>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d003      	beq.n	8008776 <TIM_OC1_SetConfig+0x8e>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a14      	ldr	r2, [pc, #80]	; (80087c4 <TIM_OC1_SetConfig+0xdc>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d111      	bne.n	800879a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800877c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	4313      	orrs	r3, r2
 800878e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	4313      	orrs	r3, r2
 8008798:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	685a      	ldr	r2, [r3, #4]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	621a      	str	r2, [r3, #32]
}
 80087b4:	bf00      	nop
 80087b6:	371c      	adds	r7, #28
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	40010000 	.word	0x40010000
 80087c4:	40010400 	.word	0x40010400

080087c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	f023 0210 	bic.w	r2, r3, #16
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	021b      	lsls	r3, r3, #8
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	4313      	orrs	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f023 0320 	bic.w	r3, r3, #32
 8008812:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	011b      	lsls	r3, r3, #4
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	4313      	orrs	r3, r2
 800881e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a22      	ldr	r2, [pc, #136]	; (80088ac <TIM_OC2_SetConfig+0xe4>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d003      	beq.n	8008830 <TIM_OC2_SetConfig+0x68>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a21      	ldr	r2, [pc, #132]	; (80088b0 <TIM_OC2_SetConfig+0xe8>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d10d      	bne.n	800884c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	011b      	lsls	r3, r3, #4
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	4313      	orrs	r3, r2
 8008842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800884a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a17      	ldr	r2, [pc, #92]	; (80088ac <TIM_OC2_SetConfig+0xe4>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d003      	beq.n	800885c <TIM_OC2_SetConfig+0x94>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a16      	ldr	r2, [pc, #88]	; (80088b0 <TIM_OC2_SetConfig+0xe8>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d113      	bne.n	8008884 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008862:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800886a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	4313      	orrs	r3, r2
 8008876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	4313      	orrs	r3, r2
 8008882:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	621a      	str	r2, [r3, #32]
}
 800889e:	bf00      	nop
 80088a0:	371c      	adds	r7, #28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	40010000 	.word	0x40010000
 80088b0:	40010400 	.word	0x40010400

080088b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	69db      	ldr	r3, [r3, #28]
 80088da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f023 0303 	bic.w	r3, r3, #3
 80088ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	021b      	lsls	r3, r3, #8
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a21      	ldr	r2, [pc, #132]	; (8008994 <TIM_OC3_SetConfig+0xe0>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d003      	beq.n	800891a <TIM_OC3_SetConfig+0x66>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a20      	ldr	r2, [pc, #128]	; (8008998 <TIM_OC3_SetConfig+0xe4>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d10d      	bne.n	8008936 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008920:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	021b      	lsls	r3, r3, #8
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	4313      	orrs	r3, r2
 800892c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a16      	ldr	r2, [pc, #88]	; (8008994 <TIM_OC3_SetConfig+0xe0>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d003      	beq.n	8008946 <TIM_OC3_SetConfig+0x92>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a15      	ldr	r2, [pc, #84]	; (8008998 <TIM_OC3_SetConfig+0xe4>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d113      	bne.n	800896e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800894c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	011b      	lsls	r3, r3, #4
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	4313      	orrs	r3, r2
 8008960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	011b      	lsls	r3, r3, #4
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	4313      	orrs	r3, r2
 800896c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	621a      	str	r2, [r3, #32]
}
 8008988:	bf00      	nop
 800898a:	371c      	adds	r7, #28
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	40010000 	.word	0x40010000
 8008998:	40010400 	.word	0x40010400

0800899c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800899c:	b480      	push	{r7}
 800899e:	b087      	sub	sp, #28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	021b      	lsls	r3, r3, #8
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	4313      	orrs	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	031b      	lsls	r3, r3, #12
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a12      	ldr	r2, [pc, #72]	; (8008a40 <TIM_OC4_SetConfig+0xa4>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d003      	beq.n	8008a04 <TIM_OC4_SetConfig+0x68>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a11      	ldr	r2, [pc, #68]	; (8008a44 <TIM_OC4_SetConfig+0xa8>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d109      	bne.n	8008a18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	019b      	lsls	r3, r3, #6
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	621a      	str	r2, [r3, #32]
}
 8008a32:	bf00      	nop
 8008a34:	371c      	adds	r7, #28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	40010000 	.word	0x40010000
 8008a44:	40010400 	.word	0x40010400

08008a48 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	f023 0201 	bic.w	r2, r3, #1
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	4a28      	ldr	r2, [pc, #160]	; (8008b14 <TIM_TI1_SetConfig+0xcc>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d01b      	beq.n	8008aae <TIM_TI1_SetConfig+0x66>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a7c:	d017      	beq.n	8008aae <TIM_TI1_SetConfig+0x66>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	4a25      	ldr	r2, [pc, #148]	; (8008b18 <TIM_TI1_SetConfig+0xd0>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d013      	beq.n	8008aae <TIM_TI1_SetConfig+0x66>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	4a24      	ldr	r2, [pc, #144]	; (8008b1c <TIM_TI1_SetConfig+0xd4>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d00f      	beq.n	8008aae <TIM_TI1_SetConfig+0x66>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4a23      	ldr	r2, [pc, #140]	; (8008b20 <TIM_TI1_SetConfig+0xd8>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d00b      	beq.n	8008aae <TIM_TI1_SetConfig+0x66>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4a22      	ldr	r2, [pc, #136]	; (8008b24 <TIM_TI1_SetConfig+0xdc>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d007      	beq.n	8008aae <TIM_TI1_SetConfig+0x66>
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	4a21      	ldr	r2, [pc, #132]	; (8008b28 <TIM_TI1_SetConfig+0xe0>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d003      	beq.n	8008aae <TIM_TI1_SetConfig+0x66>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	4a20      	ldr	r2, [pc, #128]	; (8008b2c <TIM_TI1_SetConfig+0xe4>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d101      	bne.n	8008ab2 <TIM_TI1_SetConfig+0x6a>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e000      	b.n	8008ab4 <TIM_TI1_SetConfig+0x6c>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d008      	beq.n	8008aca <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	f023 0303 	bic.w	r3, r3, #3
 8008abe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008ac0:	697a      	ldr	r2, [r7, #20]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	617b      	str	r3, [r7, #20]
 8008ac8:	e003      	b.n	8008ad2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f043 0301 	orr.w	r3, r3, #1
 8008ad0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	011b      	lsls	r3, r3, #4
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f023 030a 	bic.w	r3, r3, #10
 8008aec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	f003 030a 	and.w	r3, r3, #10
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	621a      	str	r2, [r3, #32]
}
 8008b06:	bf00      	nop
 8008b08:	371c      	adds	r7, #28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	40010000 	.word	0x40010000
 8008b18:	40000400 	.word	0x40000400
 8008b1c:	40000800 	.word	0x40000800
 8008b20:	40000c00 	.word	0x40000c00
 8008b24:	40010400 	.word	0x40010400
 8008b28:	40014000 	.word	0x40014000
 8008b2c:	40001800 	.word	0x40001800

08008b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a1b      	ldr	r3, [r3, #32]
 8008b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	f023 0201 	bic.w	r2, r3, #1
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	f023 030a 	bic.w	r3, r3, #10
 8008b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	621a      	str	r2, [r3, #32]
}
 8008b82:	bf00      	nop
 8008b84:	371c      	adds	r7, #28
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b087      	sub	sp, #28
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	60f8      	str	r0, [r7, #12]
 8008b96:	60b9      	str	r1, [r7, #8]
 8008b98:	607a      	str	r2, [r7, #4]
 8008b9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	f023 0210 	bic.w	r2, r3, #16
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	021b      	lsls	r3, r3, #8
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	031b      	lsls	r3, r3, #12
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008be0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	011b      	lsls	r3, r3, #4
 8008be6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	621a      	str	r2, [r3, #32]
}
 8008bfc:	bf00      	nop
 8008bfe:	371c      	adds	r7, #28
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b087      	sub	sp, #28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	f023 0210 	bic.w	r2, r3, #16
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	031b      	lsls	r3, r3, #12
 8008c38:	697a      	ldr	r2, [r7, #20]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	011b      	lsls	r3, r3, #4
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	621a      	str	r2, [r3, #32]
}
 8008c5c:	bf00      	nop
 8008c5e:	371c      	adds	r7, #28
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6a1b      	ldr	r3, [r3, #32]
 8008c8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f023 0303 	bic.w	r3, r3, #3
 8008c94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ca4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	011b      	lsls	r3, r3, #4
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008cb8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	021b      	lsls	r3, r3, #8
 8008cbe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	621a      	str	r2, [r3, #32]
}
 8008cd4:	bf00      	nop
 8008cd6:	371c      	adds	r7, #28
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6a1b      	ldr	r3, [r3, #32]
 8008cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6a1b      	ldr	r3, [r3, #32]
 8008d04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d1e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	031b      	lsls	r3, r3, #12
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008d32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	031b      	lsls	r3, r3, #12
 8008d38:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	621a      	str	r2, [r3, #32]
}
 8008d4e:	bf00      	nop
 8008d50:	371c      	adds	r7, #28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	f043 0307 	orr.w	r3, r3, #7
 8008d7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	609a      	str	r2, [r3, #8]
}
 8008d84:	bf00      	nop
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b087      	sub	sp, #28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
 8008d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008daa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	021a      	lsls	r2, r3, #8
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	431a      	orrs	r2, r3
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	609a      	str	r2, [r3, #8]
}
 8008dc4:	bf00      	nop
 8008dc6:	371c      	adds	r7, #28
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f003 031f 	and.w	r3, r3, #31
 8008de2:	2201      	movs	r2, #1
 8008de4:	fa02 f303 	lsl.w	r3, r2, r3
 8008de8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6a1a      	ldr	r2, [r3, #32]
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	43db      	mvns	r3, r3
 8008df2:	401a      	ands	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6a1a      	ldr	r2, [r3, #32]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f003 031f 	and.w	r3, r3, #31
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	fa01 f303 	lsl.w	r3, r1, r3
 8008e08:	431a      	orrs	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	621a      	str	r2, [r3, #32]
}
 8008e0e:	bf00      	nop
 8008e10:	371c      	adds	r7, #28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
	...

08008e1c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a1c      	ldr	r2, [pc, #112]	; (8008e98 <TIM_ResetCallback+0x7c>)
 8008e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a1b      	ldr	r2, [pc, #108]	; (8008e9c <TIM_ResetCallback+0x80>)
 8008e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a1a      	ldr	r2, [pc, #104]	; (8008ea0 <TIM_ResetCallback+0x84>)
 8008e38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a19      	ldr	r2, [pc, #100]	; (8008ea4 <TIM_ResetCallback+0x88>)
 8008e40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a18      	ldr	r2, [pc, #96]	; (8008ea8 <TIM_ResetCallback+0x8c>)
 8008e48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a17      	ldr	r2, [pc, #92]	; (8008eac <TIM_ResetCallback+0x90>)
 8008e50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a16      	ldr	r2, [pc, #88]	; (8008eb0 <TIM_ResetCallback+0x94>)
 8008e58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a15      	ldr	r2, [pc, #84]	; (8008eb4 <TIM_ResetCallback+0x98>)
 8008e60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a14      	ldr	r2, [pc, #80]	; (8008eb8 <TIM_ResetCallback+0x9c>)
 8008e68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a13      	ldr	r2, [pc, #76]	; (8008ebc <TIM_ResetCallback+0xa0>)
 8008e70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a12      	ldr	r2, [pc, #72]	; (8008ec0 <TIM_ResetCallback+0xa4>)
 8008e78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a11      	ldr	r2, [pc, #68]	; (8008ec4 <TIM_ResetCallback+0xa8>)
 8008e80:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a10      	ldr	r2, [pc, #64]	; (8008ec8 <TIM_ResetCallback+0xac>)
 8008e88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	0800291d 	.word	0x0800291d
 8008e9c:	080084f3 	.word	0x080084f3
 8008ea0:	0800856b 	.word	0x0800856b
 8008ea4:	0800857f 	.word	0x0800857f
 8008ea8:	0800851b 	.word	0x0800851b
 8008eac:	0800852f 	.word	0x0800852f
 8008eb0:	08008507 	.word	0x08008507
 8008eb4:	08008543 	.word	0x08008543
 8008eb8:	08008557 	.word	0x08008557
 8008ebc:	08008593 	.word	0x08008593
 8008ec0:	08009069 	.word	0x08009069
 8008ec4:	0800907d 	.word	0x0800907d
 8008ec8:	08009091 	.word	0x08009091

08008ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d101      	bne.n	8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e05a      	b.n	8008f9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a21      	ldr	r2, [pc, #132]	; (8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d022      	beq.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f30:	d01d      	beq.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a1d      	ldr	r2, [pc, #116]	; (8008fac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d018      	beq.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a1b      	ldr	r2, [pc, #108]	; (8008fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d013      	beq.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a1a      	ldr	r2, [pc, #104]	; (8008fb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d00e      	beq.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a18      	ldr	r2, [pc, #96]	; (8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d009      	beq.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a17      	ldr	r2, [pc, #92]	; (8008fbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d004      	beq.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a15      	ldr	r2, [pc, #84]	; (8008fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d10c      	bne.n	8008f88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3714      	adds	r7, #20
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	40010000 	.word	0x40010000
 8008fac:	40000400 	.word	0x40000400
 8008fb0:	40000800 	.word	0x40000800
 8008fb4:	40000c00 	.word	0x40000c00
 8008fb8:	40010400 	.word	0x40010400
 8008fbc:	40014000 	.word	0x40014000
 8008fc0:	40001800 	.word	0x40001800

08008fc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d101      	bne.n	8008fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008fdc:	2302      	movs	r3, #2
 8008fde:	e03d      	b.n	800905c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	4313      	orrs	r3, r2
 8009002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	4313      	orrs	r3, r2
 8009010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4313      	orrs	r3, r2
 800901e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	4313      	orrs	r3, r2
 800902c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	4313      	orrs	r3, r2
 800903a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	4313      	orrs	r3, r2
 8009048:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3714      	adds	r7, #20
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009084:	bf00      	nop
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d101      	bne.n	80090b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e04a      	b.n	800914c <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d111      	bne.n	80090e6 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fce4 	bl	8009a98 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d102      	bne.n	80090de <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a1e      	ldr	r2, [pc, #120]	; (8009154 <HAL_UART_Init+0xb0>)
 80090dc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2224      	movs	r2, #36	; 0x24
 80090ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68da      	ldr	r2, [r3, #12]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 ffde 	bl	800a0c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	691a      	ldr	r2, [r3, #16]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009112:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	695a      	ldr	r2, [r3, #20]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009122:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68da      	ldr	r2, [r3, #12]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009132:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2220      	movs	r2, #32
 800913e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2220      	movs	r2, #32
 8009146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	08002cd1 	.word	0x08002cd1

08009158 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b08a      	sub	sp, #40	; 0x28
 800915c:	af02      	add	r7, sp, #8
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	603b      	str	r3, [r7, #0]
 8009164:	4613      	mov	r3, r2
 8009166:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009168:	2300      	movs	r3, #0
 800916a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b20      	cmp	r3, #32
 8009176:	d17c      	bne.n	8009272 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <HAL_UART_Transmit+0x2c>
 800917e:	88fb      	ldrh	r3, [r7, #6]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e075      	b.n	8009274 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800918e:	2b01      	cmp	r3, #1
 8009190:	d101      	bne.n	8009196 <HAL_UART_Transmit+0x3e>
 8009192:	2302      	movs	r3, #2
 8009194:	e06e      	b.n	8009274 <HAL_UART_Transmit+0x11c>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2221      	movs	r2, #33	; 0x21
 80091a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091ac:	f7fc fe76 	bl	8005e9c <HAL_GetTick>
 80091b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	88fa      	ldrh	r2, [r7, #6]
 80091b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	88fa      	ldrh	r2, [r7, #6]
 80091bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091c6:	d108      	bne.n	80091da <HAL_UART_Transmit+0x82>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d104      	bne.n	80091da <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80091d0:	2300      	movs	r3, #0
 80091d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	61bb      	str	r3, [r7, #24]
 80091d8:	e003      	b.n	80091e2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091de:	2300      	movs	r3, #0
 80091e0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80091ea:	e02a      	b.n	8009242 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	2200      	movs	r2, #0
 80091f4:	2180      	movs	r1, #128	; 0x80
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 fd2e 	bl	8009c58 <UART_WaitOnFlagUntilTimeout>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e036      	b.n	8009274 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10b      	bne.n	8009224 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	461a      	mov	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800921a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	3302      	adds	r3, #2
 8009220:	61bb      	str	r3, [r7, #24]
 8009222:	e007      	b.n	8009234 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	781a      	ldrb	r2, [r3, #0]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	3301      	adds	r3, #1
 8009232:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009238:	b29b      	uxth	r3, r3
 800923a:	3b01      	subs	r3, #1
 800923c:	b29a      	uxth	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009246:	b29b      	uxth	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1cf      	bne.n	80091ec <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	2200      	movs	r2, #0
 8009254:	2140      	movs	r1, #64	; 0x40
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f000 fcfe 	bl	8009c58 <UART_WaitOnFlagUntilTimeout>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e006      	b.n	8009274 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2220      	movs	r2, #32
 800926a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	e000      	b.n	8009274 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009272:	2302      	movs	r3, #2
  }
}
 8009274:	4618      	mov	r0, r3
 8009276:	3720      	adds	r7, #32
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08a      	sub	sp, #40	; 0x28
 8009280:	af02      	add	r7, sp, #8
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	603b      	str	r3, [r7, #0]
 8009288:	4613      	mov	r3, r2
 800928a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800928c:	2300      	movs	r3, #0
 800928e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b20      	cmp	r3, #32
 800929a:	f040 808c 	bne.w	80093b6 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <HAL_UART_Receive+0x2e>
 80092a4:	88fb      	ldrh	r3, [r7, #6]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e084      	b.n	80093b8 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d101      	bne.n	80092bc <HAL_UART_Receive+0x40>
 80092b8:	2302      	movs	r3, #2
 80092ba:	e07d      	b.n	80093b8 <HAL_UART_Receive+0x13c>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2222      	movs	r2, #34	; 0x22
 80092ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092d8:	f7fc fde0 	bl	8005e9c <HAL_GetTick>
 80092dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	88fa      	ldrh	r2, [r7, #6]
 80092e2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	88fa      	ldrh	r2, [r7, #6]
 80092e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092f2:	d108      	bne.n	8009306 <HAL_UART_Receive+0x8a>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d104      	bne.n	8009306 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80092fc:	2300      	movs	r3, #0
 80092fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	61bb      	str	r3, [r7, #24]
 8009304:	e003      	b.n	800930e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800930a:	2300      	movs	r3, #0
 800930c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009316:	e043      	b.n	80093a0 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	2200      	movs	r2, #0
 8009320:	2120      	movs	r1, #32
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 fc98 	bl	8009c58 <UART_WaitOnFlagUntilTimeout>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e042      	b.n	80093b8 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10c      	bne.n	8009352 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	b29b      	uxth	r3, r3
 8009340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009344:	b29a      	uxth	r2, r3
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	3302      	adds	r3, #2
 800934e:	61bb      	str	r3, [r7, #24]
 8009350:	e01f      	b.n	8009392 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800935a:	d007      	beq.n	800936c <HAL_UART_Receive+0xf0>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10a      	bne.n	800937a <HAL_UART_Receive+0xfe>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d106      	bne.n	800937a <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	b2da      	uxtb	r2, r3
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	701a      	strb	r2, [r3, #0]
 8009378:	e008      	b.n	800938c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	b2db      	uxtb	r3, r3
 8009382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009386:	b2da      	uxtb	r2, r3
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	3301      	adds	r3, #1
 8009390:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009396:	b29b      	uxth	r3, r3
 8009398:	3b01      	subs	r3, #1
 800939a:	b29a      	uxth	r2, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1b6      	bne.n	8009318 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2220      	movs	r2, #32
 80093ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	e000      	b.n	80093b8 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80093b6:	2302      	movs	r3, #2
  }
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3720      	adds	r7, #32
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08c      	sub	sp, #48	; 0x30
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	4613      	mov	r3, r2
 80093cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b20      	cmp	r3, #32
 80093d8:	d165      	bne.n	80094a6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <HAL_UART_Transmit_DMA+0x26>
 80093e0:	88fb      	ldrh	r3, [r7, #6]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e05e      	b.n	80094a8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d101      	bne.n	80093f8 <HAL_UART_Transmit_DMA+0x38>
 80093f4:	2302      	movs	r3, #2
 80093f6:	e057      	b.n	80094a8 <HAL_UART_Transmit_DMA+0xe8>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	88fa      	ldrh	r2, [r7, #6]
 800940a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	88fa      	ldrh	r2, [r7, #6]
 8009410:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2221      	movs	r2, #33	; 0x21
 800941c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009424:	4a22      	ldr	r2, [pc, #136]	; (80094b0 <HAL_UART_Transmit_DMA+0xf0>)
 8009426:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942c:	4a21      	ldr	r2, [pc, #132]	; (80094b4 <HAL_UART_Transmit_DMA+0xf4>)
 800942e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009434:	4a20      	ldr	r2, [pc, #128]	; (80094b8 <HAL_UART_Transmit_DMA+0xf8>)
 8009436:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943c:	2200      	movs	r2, #0
 800943e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8009440:	f107 0308 	add.w	r3, r7, #8
 8009444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800944a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944c:	6819      	ldr	r1, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3304      	adds	r3, #4
 8009454:	461a      	mov	r2, r3
 8009456:	88fb      	ldrh	r3, [r7, #6]
 8009458:	f7fc fe32 	bl	80060c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009464:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3314      	adds	r3, #20
 8009474:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	e853 3f00 	ldrex	r3, [r3]
 800947c:	617b      	str	r3, [r7, #20]
   return(result);
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009484:	62bb      	str	r3, [r7, #40]	; 0x28
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3314      	adds	r3, #20
 800948c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800948e:	627a      	str	r2, [r7, #36]	; 0x24
 8009490:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	6a39      	ldr	r1, [r7, #32]
 8009494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009496:	e841 2300 	strex	r3, r2, [r1]
 800949a:	61fb      	str	r3, [r7, #28]
   return(result);
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1e5      	bne.n	800946e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	e000      	b.n	80094a8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80094a6:	2302      	movs	r3, #2
  }
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3730      	adds	r7, #48	; 0x30
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	08009b09 	.word	0x08009b09
 80094b4:	08009ba5 	.word	0x08009ba5
 80094b8:	08009bc3 	.word	0x08009bc3

080094bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b0ba      	sub	sp, #232	; 0xe8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80094e8:	2300      	movs	r3, #0
 80094ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80094ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094f2:	f003 030f 	and.w	r3, r3, #15
 80094f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80094fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10f      	bne.n	8009522 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009506:	f003 0320 	and.w	r3, r3, #32
 800950a:	2b00      	cmp	r3, #0
 800950c:	d009      	beq.n	8009522 <HAL_UART_IRQHandler+0x66>
 800950e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	d003      	beq.n	8009522 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fd13 	bl	8009f46 <UART_Receive_IT>
      return;
 8009520:	e25b      	b.n	80099da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 80e1 	beq.w	80096ee <HAL_UART_IRQHandler+0x232>
 800952c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009530:	f003 0301 	and.w	r3, r3, #1
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800953c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 80d4 	beq.w	80096ee <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00b      	beq.n	800956a <HAL_UART_IRQHandler+0xae>
 8009552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800955a:	2b00      	cmp	r3, #0
 800955c:	d005      	beq.n	800956a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009562:	f043 0201 	orr.w	r2, r3, #1
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800956a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800956e:	f003 0304 	and.w	r3, r3, #4
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00b      	beq.n	800958e <HAL_UART_IRQHandler+0xd2>
 8009576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009586:	f043 0202 	orr.w	r2, r3, #2
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800958e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009592:	f003 0302 	and.w	r3, r3, #2
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00b      	beq.n	80095b2 <HAL_UART_IRQHandler+0xf6>
 800959a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d005      	beq.n	80095b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095aa:	f043 0204 	orr.w	r2, r3, #4
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80095b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095b6:	f003 0308 	and.w	r3, r3, #8
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d011      	beq.n	80095e2 <HAL_UART_IRQHandler+0x126>
 80095be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095c2:	f003 0320 	and.w	r3, r3, #32
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d105      	bne.n	80095d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80095ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d005      	beq.n	80095e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095da:	f043 0208 	orr.w	r2, r3, #8
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 81f2 	beq.w	80099d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095f0:	f003 0320 	and.w	r3, r3, #32
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d008      	beq.n	800960a <HAL_UART_IRQHandler+0x14e>
 80095f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095fc:	f003 0320 	and.w	r3, r3, #32
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fc9e 	bl	8009f46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	695b      	ldr	r3, [r3, #20]
 8009610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009614:	2b40      	cmp	r3, #64	; 0x40
 8009616:	bf0c      	ite	eq
 8009618:	2301      	moveq	r3, #1
 800961a:	2300      	movne	r3, #0
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009626:	f003 0308 	and.w	r3, r3, #8
 800962a:	2b00      	cmp	r3, #0
 800962c:	d103      	bne.n	8009636 <HAL_UART_IRQHandler+0x17a>
 800962e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009632:	2b00      	cmp	r3, #0
 8009634:	d051      	beq.n	80096da <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fba4 	bl	8009d84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009646:	2b40      	cmp	r3, #64	; 0x40
 8009648:	d142      	bne.n	80096d0 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	3314      	adds	r3, #20
 8009650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009654:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009658:	e853 3f00 	ldrex	r3, [r3]
 800965c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009660:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009668:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3314      	adds	r3, #20
 8009672:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009676:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800967a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009682:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009686:	e841 2300 	strex	r3, r2, [r1]
 800968a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800968e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1d9      	bne.n	800964a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969a:	2b00      	cmp	r3, #0
 800969c:	d013      	beq.n	80096c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a2:	4a7f      	ldr	r2, [pc, #508]	; (80098a0 <HAL_UART_IRQHandler+0x3e4>)
 80096a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fc fdd0 	bl	8006250 <HAL_DMA_Abort_IT>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d019      	beq.n	80096ea <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80096c0:	4610      	mov	r0, r2
 80096c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c4:	e011      	b.n	80096ea <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096ce:	e00c      	b.n	80096ea <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096d8:	e007      	b.n	80096ea <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80096e8:	e172      	b.n	80099d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096ea:	bf00      	nop
    return;
 80096ec:	e170      	b.n	80099d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	f040 814c 	bne.w	8009990 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80096f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096fc:	f003 0310 	and.w	r3, r3, #16
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 8145 	beq.w	8009990 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800970a:	f003 0310 	and.w	r3, r3, #16
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 813e 	beq.w	8009990 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009714:	2300      	movs	r3, #0
 8009716:	60bb      	str	r3, [r7, #8]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	60bb      	str	r3, [r7, #8]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	60bb      	str	r3, [r7, #8]
 8009728:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	695b      	ldr	r3, [r3, #20]
 8009730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009734:	2b40      	cmp	r3, #64	; 0x40
 8009736:	f040 80b5 	bne.w	80098a4 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009746:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800974a:	2b00      	cmp	r3, #0
 800974c:	f000 8142 	beq.w	80099d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009754:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009758:	429a      	cmp	r2, r3
 800975a:	f080 813b 	bcs.w	80099d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009764:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976a:	69db      	ldr	r3, [r3, #28]
 800976c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009770:	f000 8088 	beq.w	8009884 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	330c      	adds	r3, #12
 800977a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009782:	e853 3f00 	ldrex	r3, [r3]
 8009786:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800978a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800978e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009792:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	330c      	adds	r3, #12
 800979c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80097a0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80097ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097b0:	e841 2300 	strex	r3, r2, [r1]
 80097b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80097b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1d9      	bne.n	8009774 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3314      	adds	r3, #20
 80097c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097ca:	e853 3f00 	ldrex	r3, [r3]
 80097ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80097d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097d2:	f023 0301 	bic.w	r3, r3, #1
 80097d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	3314      	adds	r3, #20
 80097e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80097e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80097e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80097ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80097f0:	e841 2300 	strex	r3, r2, [r1]
 80097f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80097f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e1      	bne.n	80097c0 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	3314      	adds	r3, #20
 8009802:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009806:	e853 3f00 	ldrex	r3, [r3]
 800980a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800980c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800980e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3314      	adds	r3, #20
 800981c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009820:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009822:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009824:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009826:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009828:	e841 2300 	strex	r3, r2, [r1]
 800982c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800982e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1e3      	bne.n	80097fc <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2220      	movs	r2, #32
 8009838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	330c      	adds	r3, #12
 8009848:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800984c:	e853 3f00 	ldrex	r3, [r3]
 8009850:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009854:	f023 0310 	bic.w	r3, r3, #16
 8009858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	330c      	adds	r3, #12
 8009862:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009866:	65ba      	str	r2, [r7, #88]	; 0x58
 8009868:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800986c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1e3      	bne.n	8009842 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987e:	4618      	mov	r0, r3
 8009880:	f7fc fc76 	bl	8006170 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8009890:	b292      	uxth	r2, r2
 8009892:	1a8a      	subs	r2, r1, r2
 8009894:	b292      	uxth	r2, r2
 8009896:	4611      	mov	r1, r2
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800989c:	e09a      	b.n	80099d4 <HAL_UART_IRQHandler+0x518>
 800989e:	bf00      	nop
 80098a0:	08009e4b 	.word	0x08009e4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 808c 	beq.w	80099d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80098c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 8087 	beq.w	80099d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	330c      	adds	r3, #12
 80098d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d4:	e853 3f00 	ldrex	r3, [r3]
 80098d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	330c      	adds	r3, #12
 80098ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80098ee:	647a      	str	r2, [r7, #68]	; 0x44
 80098f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098f6:	e841 2300 	strex	r3, r2, [r1]
 80098fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1e3      	bne.n	80098ca <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3314      	adds	r3, #20
 8009908:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	e853 3f00 	ldrex	r3, [r3]
 8009910:	623b      	str	r3, [r7, #32]
   return(result);
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	f023 0301 	bic.w	r3, r3, #1
 8009918:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3314      	adds	r3, #20
 8009922:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009926:	633a      	str	r2, [r7, #48]	; 0x30
 8009928:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800992c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800992e:	e841 2300 	strex	r3, r2, [r1]
 8009932:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1e3      	bne.n	8009902 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2220      	movs	r2, #32
 800993e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	330c      	adds	r3, #12
 800994e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	e853 3f00 	ldrex	r3, [r3]
 8009956:	60fb      	str	r3, [r7, #12]
   return(result);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f023 0310 	bic.w	r3, r3, #16
 800995e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	330c      	adds	r3, #12
 8009968:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800996c:	61fa      	str	r2, [r7, #28]
 800996e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009970:	69b9      	ldr	r1, [r7, #24]
 8009972:	69fa      	ldr	r2, [r7, #28]
 8009974:	e841 2300 	strex	r3, r2, [r1]
 8009978:	617b      	str	r3, [r7, #20]
   return(result);
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1e3      	bne.n	8009948 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009984:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8009988:	4611      	mov	r1, r2
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800998e:	e023      	b.n	80099d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009998:	2b00      	cmp	r3, #0
 800999a:	d009      	beq.n	80099b0 <HAL_UART_IRQHandler+0x4f4>
 800999c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d003      	beq.n	80099b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fa63 	bl	8009e74 <UART_Transmit_IT>
    return;
 80099ae:	e014      	b.n	80099da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80099b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00e      	beq.n	80099da <HAL_UART_IRQHandler+0x51e>
 80099bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d008      	beq.n	80099da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 faa3 	bl	8009f14 <UART_EndTransmit_IT>
    return;
 80099ce:	e004      	b.n	80099da <HAL_UART_IRQHandler+0x51e>
    return;
 80099d0:	bf00      	nop
 80099d2:	e002      	b.n	80099da <HAL_UART_IRQHandler+0x51e>
      return;
 80099d4:	bf00      	nop
 80099d6:	e000      	b.n	80099da <HAL_UART_IRQHandler+0x51e>
      return;
 80099d8:	bf00      	nop
  }
}
 80099da:	37e8      	adds	r7, #232	; 0xe8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a8c:	bf00      	nop
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a10      	ldr	r2, [pc, #64]	; (8009ae4 <UART_InitCallbacksToDefault+0x4c>)
 8009aa4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	4a0f      	ldr	r2, [pc, #60]	; (8009ae8 <UART_InitCallbacksToDefault+0x50>)
 8009aaa:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a0f      	ldr	r2, [pc, #60]	; (8009aec <UART_InitCallbacksToDefault+0x54>)
 8009ab0:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a0e      	ldr	r2, [pc, #56]	; (8009af0 <UART_InitCallbacksToDefault+0x58>)
 8009ab6:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a0e      	ldr	r2, [pc, #56]	; (8009af4 <UART_InitCallbacksToDefault+0x5c>)
 8009abc:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4a0d      	ldr	r2, [pc, #52]	; (8009af8 <UART_InitCallbacksToDefault+0x60>)
 8009ac2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a0d      	ldr	r2, [pc, #52]	; (8009afc <UART_InitCallbacksToDefault+0x64>)
 8009ac8:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a0c      	ldr	r2, [pc, #48]	; (8009b00 <UART_InitCallbacksToDefault+0x68>)
 8009ace:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a0c      	ldr	r2, [pc, #48]	; (8009b04 <UART_InitCallbacksToDefault+0x6c>)
 8009ad4:	669a      	str	r2, [r3, #104]	; 0x68

}
 8009ad6:	bf00      	nop
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	080099f5 	.word	0x080099f5
 8009ae8:	080099e1 	.word	0x080099e1
 8009aec:	08009a1d 	.word	0x08009a1d
 8009af0:	08009a09 	.word	0x08009a09
 8009af4:	08009a31 	.word	0x08009a31
 8009af8:	08009a45 	.word	0x08009a45
 8009afc:	08009a59 	.word	0x08009a59
 8009b00:	08009a6d 	.word	0x08009a6d
 8009b04:	08009a81 	.word	0x08009a81

08009b08 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b090      	sub	sp, #64	; 0x40
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b14:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d137      	bne.n	8009b94 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b26:	2200      	movs	r2, #0
 8009b28:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3314      	adds	r3, #20
 8009b30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	e853 3f00 	ldrex	r3, [r3]
 8009b38:	623b      	str	r3, [r7, #32]
   return(result);
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b40:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3314      	adds	r3, #20
 8009b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b4a:	633a      	str	r2, [r7, #48]	; 0x30
 8009b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b52:	e841 2300 	strex	r3, r2, [r1]
 8009b56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1e5      	bne.n	8009b2a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	330c      	adds	r3, #12
 8009b64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	e853 3f00 	ldrex	r3, [r3]
 8009b6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b74:	637b      	str	r3, [r7, #52]	; 0x34
 8009b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	330c      	adds	r3, #12
 8009b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b7e:	61fa      	str	r2, [r7, #28]
 8009b80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b82:	69b9      	ldr	r1, [r7, #24]
 8009b84:	69fa      	ldr	r2, [r7, #28]
 8009b86:	e841 2300 	strex	r3, r2, [r1]
 8009b8a:	617b      	str	r3, [r7, #20]
   return(result);
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1e5      	bne.n	8009b5e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b92:	e003      	b.n	8009b9c <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8009b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009b9a:	4798      	blx	r3
}
 8009b9c:	bf00      	nop
 8009b9e:	3740      	adds	r7, #64	; 0x40
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bba:	bf00      	nop
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b084      	sub	sp, #16
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bde:	2b80      	cmp	r3, #128	; 0x80
 8009be0:	bf0c      	ite	eq
 8009be2:	2301      	moveq	r3, #1
 8009be4:	2300      	movne	r3, #0
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b21      	cmp	r3, #33	; 0x21
 8009bf4:	d108      	bne.n	8009c08 <UART_DMAError+0x46>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d005      	beq.n	8009c08 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009c02:	68b8      	ldr	r0, [r7, #8]
 8009c04:	f000 f896 	bl	8009d34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	695b      	ldr	r3, [r3, #20]
 8009c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c12:	2b40      	cmp	r3, #64	; 0x40
 8009c14:	bf0c      	ite	eq
 8009c16:	2301      	moveq	r3, #1
 8009c18:	2300      	movne	r3, #0
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b22      	cmp	r3, #34	; 0x22
 8009c28:	d108      	bne.n	8009c3c <UART_DMAError+0x7a>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d005      	beq.n	8009c3c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2200      	movs	r2, #0
 8009c34:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009c36:	68b8      	ldr	r0, [r7, #8]
 8009c38:	f000 f8a4 	bl	8009d84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c40:	f043 0210 	orr.w	r2, r3, #16
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c4c:	68b8      	ldr	r0, [r7, #8]
 8009c4e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c50:	bf00      	nop
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b090      	sub	sp, #64	; 0x40
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	603b      	str	r3, [r7, #0]
 8009c64:	4613      	mov	r3, r2
 8009c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c68:	e050      	b.n	8009d0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c70:	d04c      	beq.n	8009d0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d007      	beq.n	8009c88 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c78:	f7fc f910 	bl	8005e9c <HAL_GetTick>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d241      	bcs.n	8009d0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	330c      	adds	r3, #12
 8009c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	e853 3f00 	ldrex	r3, [r3]
 8009c96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	330c      	adds	r3, #12
 8009ca6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ca8:	637a      	str	r2, [r7, #52]	; 0x34
 8009caa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cb0:	e841 2300 	strex	r3, r2, [r1]
 8009cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1e5      	bne.n	8009c88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	3314      	adds	r3, #20
 8009cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	e853 3f00 	ldrex	r3, [r3]
 8009cca:	613b      	str	r3, [r7, #16]
   return(result);
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	f023 0301 	bic.w	r3, r3, #1
 8009cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3314      	adds	r3, #20
 8009cda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cdc:	623a      	str	r2, [r7, #32]
 8009cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce0:	69f9      	ldr	r1, [r7, #28]
 8009ce2:	6a3a      	ldr	r2, [r7, #32]
 8009ce4:	e841 2300 	strex	r3, r2, [r1]
 8009ce8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1e5      	bne.n	8009cbc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2220      	movs	r2, #32
 8009cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2220      	movs	r2, #32
 8009cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009d08:	2303      	movs	r3, #3
 8009d0a:	e00f      	b.n	8009d2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	4013      	ands	r3, r2
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	bf0c      	ite	eq
 8009d1c:	2301      	moveq	r3, #1
 8009d1e:	2300      	movne	r3, #0
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	461a      	mov	r2, r3
 8009d24:	79fb      	ldrb	r3, [r7, #7]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d09f      	beq.n	8009c6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3740      	adds	r7, #64	; 0x40
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b089      	sub	sp, #36	; 0x24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	330c      	adds	r3, #12
 8009d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	e853 3f00 	ldrex	r3, [r3]
 8009d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009d52:	61fb      	str	r3, [r7, #28]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	330c      	adds	r3, #12
 8009d5a:	69fa      	ldr	r2, [r7, #28]
 8009d5c:	61ba      	str	r2, [r7, #24]
 8009d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d60:	6979      	ldr	r1, [r7, #20]
 8009d62:	69ba      	ldr	r2, [r7, #24]
 8009d64:	e841 2300 	strex	r3, r2, [r1]
 8009d68:	613b      	str	r3, [r7, #16]
   return(result);
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1e5      	bne.n	8009d3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2220      	movs	r2, #32
 8009d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009d78:	bf00      	nop
 8009d7a:	3724      	adds	r7, #36	; 0x24
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b095      	sub	sp, #84	; 0x54
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	330c      	adds	r3, #12
 8009d92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d96:	e853 3f00 	ldrex	r3, [r3]
 8009d9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	330c      	adds	r3, #12
 8009daa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009dac:	643a      	str	r2, [r7, #64]	; 0x40
 8009dae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009db2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009db4:	e841 2300 	strex	r3, r2, [r1]
 8009db8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1e5      	bne.n	8009d8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3314      	adds	r3, #20
 8009dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc8:	6a3b      	ldr	r3, [r7, #32]
 8009dca:	e853 3f00 	ldrex	r3, [r3]
 8009dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	f023 0301 	bic.w	r3, r3, #1
 8009dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	3314      	adds	r3, #20
 8009dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009de0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009de8:	e841 2300 	strex	r3, r2, [r1]
 8009dec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d1e5      	bne.n	8009dc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d119      	bne.n	8009e30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	330c      	adds	r3, #12
 8009e02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	e853 3f00 	ldrex	r3, [r3]
 8009e0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	f023 0310 	bic.w	r3, r3, #16
 8009e12:	647b      	str	r3, [r7, #68]	; 0x44
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	330c      	adds	r3, #12
 8009e1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e1c:	61ba      	str	r2, [r7, #24]
 8009e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e20:	6979      	ldr	r1, [r7, #20]
 8009e22:	69ba      	ldr	r2, [r7, #24]
 8009e24:	e841 2300 	strex	r3, r2, [r1]
 8009e28:	613b      	str	r3, [r7, #16]
   return(result);
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1e5      	bne.n	8009dfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2220      	movs	r2, #32
 8009e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009e3e:	bf00      	nop
 8009e40:	3754      	adds	r7, #84	; 0x54
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b084      	sub	sp, #16
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e6c:	bf00      	nop
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b21      	cmp	r3, #33	; 0x21
 8009e86:	d13e      	bne.n	8009f06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e90:	d114      	bne.n	8009ebc <UART_Transmit_IT+0x48>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d110      	bne.n	8009ebc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009eae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a1b      	ldr	r3, [r3, #32]
 8009eb4:	1c9a      	adds	r2, r3, #2
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	621a      	str	r2, [r3, #32]
 8009eba:	e008      	b.n	8009ece <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6a1b      	ldr	r3, [r3, #32]
 8009ec0:	1c59      	adds	r1, r3, #1
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	6211      	str	r1, [r2, #32]
 8009ec6:	781a      	ldrb	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	4619      	mov	r1, r3
 8009edc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10f      	bne.n	8009f02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68da      	ldr	r2, [r3, #12]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ef0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68da      	ldr	r2, [r3, #12]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	e000      	b.n	8009f08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009f06:	2302      	movs	r3, #2
  }
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68da      	ldr	r2, [r3, #12]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2220      	movs	r2, #32
 8009f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b08c      	sub	sp, #48	; 0x30
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	2b22      	cmp	r3, #34	; 0x22
 8009f58:	f040 80ad 	bne.w	800a0b6 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f64:	d117      	bne.n	8009f96 <UART_Receive_IT+0x50>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d113      	bne.n	8009f96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f8e:	1c9a      	adds	r2, r3, #2
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	629a      	str	r2, [r3, #40]	; 0x28
 8009f94:	e026      	b.n	8009fe4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fa8:	d007      	beq.n	8009fba <UART_Receive_IT+0x74>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10a      	bne.n	8009fc8 <UART_Receive_IT+0x82>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d106      	bne.n	8009fc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	b2da      	uxtb	r2, r3
 8009fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc4:	701a      	strb	r2, [r3, #0]
 8009fc6:	e008      	b.n	8009fda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fde:	1c5a      	adds	r2, r3, #1
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	3b01      	subs	r3, #1
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d15c      	bne.n	800a0b2 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68da      	ldr	r2, [r3, #12]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f022 0220 	bic.w	r2, r2, #32
 800a006:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68da      	ldr	r2, [r3, #12]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a016:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	695a      	ldr	r2, [r3, #20]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 0201 	bic.w	r2, r2, #1
 800a026:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2220      	movs	r2, #32
 800a02c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a034:	2b01      	cmp	r3, #1
 800a036:	d136      	bne.n	800a0a6 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	330c      	adds	r3, #12
 800a044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	e853 3f00 	ldrex	r3, [r3]
 800a04c:	613b      	str	r3, [r7, #16]
   return(result);
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	f023 0310 	bic.w	r3, r3, #16
 800a054:	627b      	str	r3, [r7, #36]	; 0x24
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	330c      	adds	r3, #12
 800a05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05e:	623a      	str	r2, [r7, #32]
 800a060:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a062:	69f9      	ldr	r1, [r7, #28]
 800a064:	6a3a      	ldr	r2, [r7, #32]
 800a066:	e841 2300 	strex	r3, r2, [r1]
 800a06a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1e5      	bne.n	800a03e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 0310 	and.w	r3, r3, #16
 800a07c:	2b10      	cmp	r3, #16
 800a07e:	d10a      	bne.n	800a096 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a080:	2300      	movs	r3, #0
 800a082:	60fb      	str	r3, [r7, #12]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	60fb      	str	r3, [r7, #12]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	60fb      	str	r3, [r7, #12]
 800a094:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a09e:	4611      	mov	r1, r2
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	4798      	blx	r3
 800a0a4:	e003      	b.n	800a0ae <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	e002      	b.n	800a0b8 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e000      	b.n	800a0b8 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800a0b6:	2302      	movs	r3, #2
  }
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3730      	adds	r7, #48	; 0x30
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	b09f      	sub	sp, #124	; 0x7c
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a0d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0d6:	68d9      	ldr	r1, [r3, #12]
 800a0d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	ea40 0301 	orr.w	r3, r0, r1
 800a0e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a0e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0e4:	689a      	ldr	r2, [r3, #8]
 800a0e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	431a      	orrs	r2, r3
 800a0ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0ee:	695b      	ldr	r3, [r3, #20]
 800a0f0:	431a      	orrs	r2, r3
 800a0f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a0fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a104:	f021 010c 	bic.w	r1, r1, #12
 800a108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a10e:	430b      	orrs	r3, r1
 800a110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a11c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a11e:	6999      	ldr	r1, [r3, #24]
 800a120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	ea40 0301 	orr.w	r3, r0, r1
 800a128:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a12a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	4bc5      	ldr	r3, [pc, #788]	; (800a444 <UART_SetConfig+0x384>)
 800a130:	429a      	cmp	r2, r3
 800a132:	d004      	beq.n	800a13e <UART_SetConfig+0x7e>
 800a134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	4bc3      	ldr	r3, [pc, #780]	; (800a448 <UART_SetConfig+0x388>)
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d103      	bne.n	800a146 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a13e:	f7fc fbbd 	bl	80068bc <HAL_RCC_GetPCLK2Freq>
 800a142:	6778      	str	r0, [r7, #116]	; 0x74
 800a144:	e002      	b.n	800a14c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a146:	f7fc fba5 	bl	8006894 <HAL_RCC_GetPCLK1Freq>
 800a14a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a14c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a14e:	69db      	ldr	r3, [r3, #28]
 800a150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a154:	f040 80b6 	bne.w	800a2c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a15a:	461c      	mov	r4, r3
 800a15c:	f04f 0500 	mov.w	r5, #0
 800a160:	4622      	mov	r2, r4
 800a162:	462b      	mov	r3, r5
 800a164:	1891      	adds	r1, r2, r2
 800a166:	6439      	str	r1, [r7, #64]	; 0x40
 800a168:	415b      	adcs	r3, r3
 800a16a:	647b      	str	r3, [r7, #68]	; 0x44
 800a16c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a170:	1912      	adds	r2, r2, r4
 800a172:	eb45 0303 	adc.w	r3, r5, r3
 800a176:	f04f 0000 	mov.w	r0, #0
 800a17a:	f04f 0100 	mov.w	r1, #0
 800a17e:	00d9      	lsls	r1, r3, #3
 800a180:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a184:	00d0      	lsls	r0, r2, #3
 800a186:	4602      	mov	r2, r0
 800a188:	460b      	mov	r3, r1
 800a18a:	1911      	adds	r1, r2, r4
 800a18c:	6639      	str	r1, [r7, #96]	; 0x60
 800a18e:	416b      	adcs	r3, r5
 800a190:	667b      	str	r3, [r7, #100]	; 0x64
 800a192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	461a      	mov	r2, r3
 800a198:	f04f 0300 	mov.w	r3, #0
 800a19c:	1891      	adds	r1, r2, r2
 800a19e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a1a0:	415b      	adcs	r3, r3
 800a1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a1a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a1ac:	f7f6 fd8c 	bl	8000cc8 <__aeabi_uldivmod>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	4ba5      	ldr	r3, [pc, #660]	; (800a44c <UART_SetConfig+0x38c>)
 800a1b6:	fba3 2302 	umull	r2, r3, r3, r2
 800a1ba:	095b      	lsrs	r3, r3, #5
 800a1bc:	011e      	lsls	r6, r3, #4
 800a1be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1c0:	461c      	mov	r4, r3
 800a1c2:	f04f 0500 	mov.w	r5, #0
 800a1c6:	4622      	mov	r2, r4
 800a1c8:	462b      	mov	r3, r5
 800a1ca:	1891      	adds	r1, r2, r2
 800a1cc:	6339      	str	r1, [r7, #48]	; 0x30
 800a1ce:	415b      	adcs	r3, r3
 800a1d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a1d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a1d6:	1912      	adds	r2, r2, r4
 800a1d8:	eb45 0303 	adc.w	r3, r5, r3
 800a1dc:	f04f 0000 	mov.w	r0, #0
 800a1e0:	f04f 0100 	mov.w	r1, #0
 800a1e4:	00d9      	lsls	r1, r3, #3
 800a1e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a1ea:	00d0      	lsls	r0, r2, #3
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	1911      	adds	r1, r2, r4
 800a1f2:	65b9      	str	r1, [r7, #88]	; 0x58
 800a1f4:	416b      	adcs	r3, r5
 800a1f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	f04f 0300 	mov.w	r3, #0
 800a202:	1891      	adds	r1, r2, r2
 800a204:	62b9      	str	r1, [r7, #40]	; 0x28
 800a206:	415b      	adcs	r3, r3
 800a208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a20a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a20e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a212:	f7f6 fd59 	bl	8000cc8 <__aeabi_uldivmod>
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	4b8c      	ldr	r3, [pc, #560]	; (800a44c <UART_SetConfig+0x38c>)
 800a21c:	fba3 1302 	umull	r1, r3, r3, r2
 800a220:	095b      	lsrs	r3, r3, #5
 800a222:	2164      	movs	r1, #100	; 0x64
 800a224:	fb01 f303 	mul.w	r3, r1, r3
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	00db      	lsls	r3, r3, #3
 800a22c:	3332      	adds	r3, #50	; 0x32
 800a22e:	4a87      	ldr	r2, [pc, #540]	; (800a44c <UART_SetConfig+0x38c>)
 800a230:	fba2 2303 	umull	r2, r3, r2, r3
 800a234:	095b      	lsrs	r3, r3, #5
 800a236:	005b      	lsls	r3, r3, #1
 800a238:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a23c:	441e      	add	r6, r3
 800a23e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a240:	4618      	mov	r0, r3
 800a242:	f04f 0100 	mov.w	r1, #0
 800a246:	4602      	mov	r2, r0
 800a248:	460b      	mov	r3, r1
 800a24a:	1894      	adds	r4, r2, r2
 800a24c:	623c      	str	r4, [r7, #32]
 800a24e:	415b      	adcs	r3, r3
 800a250:	627b      	str	r3, [r7, #36]	; 0x24
 800a252:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a256:	1812      	adds	r2, r2, r0
 800a258:	eb41 0303 	adc.w	r3, r1, r3
 800a25c:	f04f 0400 	mov.w	r4, #0
 800a260:	f04f 0500 	mov.w	r5, #0
 800a264:	00dd      	lsls	r5, r3, #3
 800a266:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a26a:	00d4      	lsls	r4, r2, #3
 800a26c:	4622      	mov	r2, r4
 800a26e:	462b      	mov	r3, r5
 800a270:	1814      	adds	r4, r2, r0
 800a272:	653c      	str	r4, [r7, #80]	; 0x50
 800a274:	414b      	adcs	r3, r1
 800a276:	657b      	str	r3, [r7, #84]	; 0x54
 800a278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	461a      	mov	r2, r3
 800a27e:	f04f 0300 	mov.w	r3, #0
 800a282:	1891      	adds	r1, r2, r2
 800a284:	61b9      	str	r1, [r7, #24]
 800a286:	415b      	adcs	r3, r3
 800a288:	61fb      	str	r3, [r7, #28]
 800a28a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a28e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a292:	f7f6 fd19 	bl	8000cc8 <__aeabi_uldivmod>
 800a296:	4602      	mov	r2, r0
 800a298:	460b      	mov	r3, r1
 800a29a:	4b6c      	ldr	r3, [pc, #432]	; (800a44c <UART_SetConfig+0x38c>)
 800a29c:	fba3 1302 	umull	r1, r3, r3, r2
 800a2a0:	095b      	lsrs	r3, r3, #5
 800a2a2:	2164      	movs	r1, #100	; 0x64
 800a2a4:	fb01 f303 	mul.w	r3, r1, r3
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	00db      	lsls	r3, r3, #3
 800a2ac:	3332      	adds	r3, #50	; 0x32
 800a2ae:	4a67      	ldr	r2, [pc, #412]	; (800a44c <UART_SetConfig+0x38c>)
 800a2b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2b4:	095b      	lsrs	r3, r3, #5
 800a2b6:	f003 0207 	and.w	r2, r3, #7
 800a2ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4432      	add	r2, r6
 800a2c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a2c2:	e0b9      	b.n	800a438 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a2c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2c6:	461c      	mov	r4, r3
 800a2c8:	f04f 0500 	mov.w	r5, #0
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	462b      	mov	r3, r5
 800a2d0:	1891      	adds	r1, r2, r2
 800a2d2:	6139      	str	r1, [r7, #16]
 800a2d4:	415b      	adcs	r3, r3
 800a2d6:	617b      	str	r3, [r7, #20]
 800a2d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a2dc:	1912      	adds	r2, r2, r4
 800a2de:	eb45 0303 	adc.w	r3, r5, r3
 800a2e2:	f04f 0000 	mov.w	r0, #0
 800a2e6:	f04f 0100 	mov.w	r1, #0
 800a2ea:	00d9      	lsls	r1, r3, #3
 800a2ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a2f0:	00d0      	lsls	r0, r2, #3
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	eb12 0804 	adds.w	r8, r2, r4
 800a2fa:	eb43 0905 	adc.w	r9, r3, r5
 800a2fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	4618      	mov	r0, r3
 800a304:	f04f 0100 	mov.w	r1, #0
 800a308:	f04f 0200 	mov.w	r2, #0
 800a30c:	f04f 0300 	mov.w	r3, #0
 800a310:	008b      	lsls	r3, r1, #2
 800a312:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a316:	0082      	lsls	r2, r0, #2
 800a318:	4640      	mov	r0, r8
 800a31a:	4649      	mov	r1, r9
 800a31c:	f7f6 fcd4 	bl	8000cc8 <__aeabi_uldivmod>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	4b49      	ldr	r3, [pc, #292]	; (800a44c <UART_SetConfig+0x38c>)
 800a326:	fba3 2302 	umull	r2, r3, r3, r2
 800a32a:	095b      	lsrs	r3, r3, #5
 800a32c:	011e      	lsls	r6, r3, #4
 800a32e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a330:	4618      	mov	r0, r3
 800a332:	f04f 0100 	mov.w	r1, #0
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	1894      	adds	r4, r2, r2
 800a33c:	60bc      	str	r4, [r7, #8]
 800a33e:	415b      	adcs	r3, r3
 800a340:	60fb      	str	r3, [r7, #12]
 800a342:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a346:	1812      	adds	r2, r2, r0
 800a348:	eb41 0303 	adc.w	r3, r1, r3
 800a34c:	f04f 0400 	mov.w	r4, #0
 800a350:	f04f 0500 	mov.w	r5, #0
 800a354:	00dd      	lsls	r5, r3, #3
 800a356:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a35a:	00d4      	lsls	r4, r2, #3
 800a35c:	4622      	mov	r2, r4
 800a35e:	462b      	mov	r3, r5
 800a360:	1814      	adds	r4, r2, r0
 800a362:	64bc      	str	r4, [r7, #72]	; 0x48
 800a364:	414b      	adcs	r3, r1
 800a366:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f04f 0100 	mov.w	r1, #0
 800a372:	f04f 0200 	mov.w	r2, #0
 800a376:	f04f 0300 	mov.w	r3, #0
 800a37a:	008b      	lsls	r3, r1, #2
 800a37c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a380:	0082      	lsls	r2, r0, #2
 800a382:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a386:	f7f6 fc9f 	bl	8000cc8 <__aeabi_uldivmod>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4b2f      	ldr	r3, [pc, #188]	; (800a44c <UART_SetConfig+0x38c>)
 800a390:	fba3 1302 	umull	r1, r3, r3, r2
 800a394:	095b      	lsrs	r3, r3, #5
 800a396:	2164      	movs	r1, #100	; 0x64
 800a398:	fb01 f303 	mul.w	r3, r1, r3
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	011b      	lsls	r3, r3, #4
 800a3a0:	3332      	adds	r3, #50	; 0x32
 800a3a2:	4a2a      	ldr	r2, [pc, #168]	; (800a44c <UART_SetConfig+0x38c>)
 800a3a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a8:	095b      	lsrs	r3, r3, #5
 800a3aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3ae:	441e      	add	r6, r3
 800a3b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f04f 0100 	mov.w	r1, #0
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	1894      	adds	r4, r2, r2
 800a3be:	603c      	str	r4, [r7, #0]
 800a3c0:	415b      	adcs	r3, r3
 800a3c2:	607b      	str	r3, [r7, #4]
 800a3c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3c8:	1812      	adds	r2, r2, r0
 800a3ca:	eb41 0303 	adc.w	r3, r1, r3
 800a3ce:	f04f 0400 	mov.w	r4, #0
 800a3d2:	f04f 0500 	mov.w	r5, #0
 800a3d6:	00dd      	lsls	r5, r3, #3
 800a3d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a3dc:	00d4      	lsls	r4, r2, #3
 800a3de:	4622      	mov	r2, r4
 800a3e0:	462b      	mov	r3, r5
 800a3e2:	eb12 0a00 	adds.w	sl, r2, r0
 800a3e6:	eb43 0b01 	adc.w	fp, r3, r1
 800a3ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f04f 0100 	mov.w	r1, #0
 800a3f4:	f04f 0200 	mov.w	r2, #0
 800a3f8:	f04f 0300 	mov.w	r3, #0
 800a3fc:	008b      	lsls	r3, r1, #2
 800a3fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a402:	0082      	lsls	r2, r0, #2
 800a404:	4650      	mov	r0, sl
 800a406:	4659      	mov	r1, fp
 800a408:	f7f6 fc5e 	bl	8000cc8 <__aeabi_uldivmod>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	4b0e      	ldr	r3, [pc, #56]	; (800a44c <UART_SetConfig+0x38c>)
 800a412:	fba3 1302 	umull	r1, r3, r3, r2
 800a416:	095b      	lsrs	r3, r3, #5
 800a418:	2164      	movs	r1, #100	; 0x64
 800a41a:	fb01 f303 	mul.w	r3, r1, r3
 800a41e:	1ad3      	subs	r3, r2, r3
 800a420:	011b      	lsls	r3, r3, #4
 800a422:	3332      	adds	r3, #50	; 0x32
 800a424:	4a09      	ldr	r2, [pc, #36]	; (800a44c <UART_SetConfig+0x38c>)
 800a426:	fba2 2303 	umull	r2, r3, r2, r3
 800a42a:	095b      	lsrs	r3, r3, #5
 800a42c:	f003 020f 	and.w	r2, r3, #15
 800a430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4432      	add	r2, r6
 800a436:	609a      	str	r2, [r3, #8]
}
 800a438:	bf00      	nop
 800a43a:	377c      	adds	r7, #124	; 0x7c
 800a43c:	46bd      	mov	sp, r7
 800a43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a442:	bf00      	nop
 800a444:	40011000 	.word	0x40011000
 800a448:	40011400 	.word	0x40011400
 800a44c:	51eb851f 	.word	0x51eb851f

0800a450 <__NVIC_SetPriority>:
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	4603      	mov	r3, r0
 800a458:	6039      	str	r1, [r7, #0]
 800a45a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a45c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a460:	2b00      	cmp	r3, #0
 800a462:	db0a      	blt.n	800a47a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	b2da      	uxtb	r2, r3
 800a468:	490c      	ldr	r1, [pc, #48]	; (800a49c <__NVIC_SetPriority+0x4c>)
 800a46a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a46e:	0112      	lsls	r2, r2, #4
 800a470:	b2d2      	uxtb	r2, r2
 800a472:	440b      	add	r3, r1
 800a474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a478:	e00a      	b.n	800a490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	b2da      	uxtb	r2, r3
 800a47e:	4908      	ldr	r1, [pc, #32]	; (800a4a0 <__NVIC_SetPriority+0x50>)
 800a480:	79fb      	ldrb	r3, [r7, #7]
 800a482:	f003 030f 	and.w	r3, r3, #15
 800a486:	3b04      	subs	r3, #4
 800a488:	0112      	lsls	r2, r2, #4
 800a48a:	b2d2      	uxtb	r2, r2
 800a48c:	440b      	add	r3, r1
 800a48e:	761a      	strb	r2, [r3, #24]
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr
 800a49c:	e000e100 	.word	0xe000e100
 800a4a0:	e000ed00 	.word	0xe000ed00

0800a4a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a4a8:	4b05      	ldr	r3, [pc, #20]	; (800a4c0 <SysTick_Handler+0x1c>)
 800a4aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a4ac:	f001 fe46 	bl	800c13c <xTaskGetSchedulerState>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d001      	beq.n	800a4ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a4b6:	f002 fc2f 	bl	800cd18 <xPortSysTickHandler>
  }
}
 800a4ba:	bf00      	nop
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	e000e010 	.word	0xe000e010

0800a4c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	f06f 0004 	mvn.w	r0, #4
 800a4ce:	f7ff ffbf 	bl	800a450 <__NVIC_SetPriority>
#endif
}
 800a4d2:	bf00      	nop
 800a4d4:	bd80      	pop	{r7, pc}
	...

0800a4d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4de:	f3ef 8305 	mrs	r3, IPSR
 800a4e2:	603b      	str	r3, [r7, #0]
  return(result);
 800a4e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d003      	beq.n	800a4f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a4ea:	f06f 0305 	mvn.w	r3, #5
 800a4ee:	607b      	str	r3, [r7, #4]
 800a4f0:	e00c      	b.n	800a50c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a4f2:	4b0a      	ldr	r3, [pc, #40]	; (800a51c <osKernelInitialize+0x44>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d105      	bne.n	800a506 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a4fa:	4b08      	ldr	r3, [pc, #32]	; (800a51c <osKernelInitialize+0x44>)
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a500:	2300      	movs	r3, #0
 800a502:	607b      	str	r3, [r7, #4]
 800a504:	e002      	b.n	800a50c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a50a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a50c:	687b      	ldr	r3, [r7, #4]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	2000021c 	.word	0x2000021c

0800a520 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a526:	f3ef 8305 	mrs	r3, IPSR
 800a52a:	603b      	str	r3, [r7, #0]
  return(result);
 800a52c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d003      	beq.n	800a53a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a532:	f06f 0305 	mvn.w	r3, #5
 800a536:	607b      	str	r3, [r7, #4]
 800a538:	e010      	b.n	800a55c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a53a:	4b0b      	ldr	r3, [pc, #44]	; (800a568 <osKernelStart+0x48>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d109      	bne.n	800a556 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a542:	f7ff ffbf 	bl	800a4c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a546:	4b08      	ldr	r3, [pc, #32]	; (800a568 <osKernelStart+0x48>)
 800a548:	2202      	movs	r2, #2
 800a54a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a54c:	f001 f9ae 	bl	800b8ac <vTaskStartScheduler>
      stat = osOK;
 800a550:	2300      	movs	r3, #0
 800a552:	607b      	str	r3, [r7, #4]
 800a554:	e002      	b.n	800a55c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a55a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a55c:	687b      	ldr	r3, [r7, #4]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	2000021c 	.word	0x2000021c

0800a56c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b08e      	sub	sp, #56	; 0x38
 800a570:	af04      	add	r7, sp, #16
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a578:	2300      	movs	r3, #0
 800a57a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a57c:	f3ef 8305 	mrs	r3, IPSR
 800a580:	617b      	str	r3, [r7, #20]
  return(result);
 800a582:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a584:	2b00      	cmp	r3, #0
 800a586:	d17e      	bne.n	800a686 <osThreadNew+0x11a>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d07b      	beq.n	800a686 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a58e:	2380      	movs	r3, #128	; 0x80
 800a590:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a592:	2318      	movs	r3, #24
 800a594:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a596:	2300      	movs	r3, #0
 800a598:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a59a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a59e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d045      	beq.n	800a632 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d002      	beq.n	800a5b4 <osThreadNew+0x48>
        name = attr->name;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d002      	beq.n	800a5c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d008      	beq.n	800a5da <osThreadNew+0x6e>
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	2b38      	cmp	r3, #56	; 0x38
 800a5cc:	d805      	bhi.n	800a5da <osThreadNew+0x6e>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f003 0301 	and.w	r3, r3, #1
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d001      	beq.n	800a5de <osThreadNew+0x72>
        return (NULL);
 800a5da:	2300      	movs	r3, #0
 800a5dc:	e054      	b.n	800a688 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	089b      	lsrs	r3, r3, #2
 800a5ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00e      	beq.n	800a614 <osThreadNew+0xa8>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	2b5b      	cmp	r3, #91	; 0x5b
 800a5fc:	d90a      	bls.n	800a614 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a602:	2b00      	cmp	r3, #0
 800a604:	d006      	beq.n	800a614 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	695b      	ldr	r3, [r3, #20]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d002      	beq.n	800a614 <osThreadNew+0xa8>
        mem = 1;
 800a60e:	2301      	movs	r3, #1
 800a610:	61bb      	str	r3, [r7, #24]
 800a612:	e010      	b.n	800a636 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10c      	bne.n	800a636 <osThreadNew+0xca>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d108      	bne.n	800a636 <osThreadNew+0xca>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d104      	bne.n	800a636 <osThreadNew+0xca>
          mem = 0;
 800a62c:	2300      	movs	r3, #0
 800a62e:	61bb      	str	r3, [r7, #24]
 800a630:	e001      	b.n	800a636 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a632:	2300      	movs	r3, #0
 800a634:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d110      	bne.n	800a65e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a644:	9202      	str	r2, [sp, #8]
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	6a3a      	ldr	r2, [r7, #32]
 800a650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 fe4e 	bl	800b2f4 <xTaskCreateStatic>
 800a658:	4603      	mov	r3, r0
 800a65a:	613b      	str	r3, [r7, #16]
 800a65c:	e013      	b.n	800a686 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d110      	bne.n	800a686 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a664:	6a3b      	ldr	r3, [r7, #32]
 800a666:	b29a      	uxth	r2, r3
 800a668:	f107 0310 	add.w	r3, r7, #16
 800a66c:	9301      	str	r3, [sp, #4]
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f000 fe99 	bl	800b3ae <xTaskCreate>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d001      	beq.n	800a686 <osThreadNew+0x11a>
            hTask = NULL;
 800a682:	2300      	movs	r3, #0
 800a684:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a686:	693b      	ldr	r3, [r7, #16]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3728      	adds	r7, #40	; 0x28
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a69c:	f3ef 8305 	mrs	r3, IPSR
 800a6a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d003      	beq.n	800a6b0 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800a6a8:	f06f 0305 	mvn.w	r3, #5
 800a6ac:	617b      	str	r3, [r7, #20]
 800a6ae:	e00b      	b.n	800a6c8 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d103      	bne.n	800a6be <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800a6b6:	f06f 0303 	mvn.w	r3, #3
 800a6ba:	617b      	str	r3, [r7, #20]
 800a6bc:	e004      	b.n	800a6c8 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800a6c2:	6938      	ldr	r0, [r7, #16]
 800a6c4:	f000 ffec 	bl	800b6a0 <vTaskSuspend>
  }

  return (stat);
 800a6c8:	697b      	ldr	r3, [r7, #20]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3718      	adds	r7, #24
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b086      	sub	sp, #24
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6de:	f3ef 8305 	mrs	r3, IPSR
 800a6e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d003      	beq.n	800a6f2 <osThreadResume+0x20>
    stat = osErrorISR;
 800a6ea:	f06f 0305 	mvn.w	r3, #5
 800a6ee:	617b      	str	r3, [r7, #20]
 800a6f0:	e00b      	b.n	800a70a <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d103      	bne.n	800a700 <osThreadResume+0x2e>
    stat = osErrorParameter;
 800a6f8:	f06f 0303 	mvn.w	r3, #3
 800a6fc:	617b      	str	r3, [r7, #20]
 800a6fe:	e004      	b.n	800a70a <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800a700:	2300      	movs	r3, #0
 800a702:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800a704:	6938      	ldr	r0, [r7, #16]
 800a706:	f001 f873 	bl	800b7f0 <vTaskResume>
  }

  return (stat);
 800a70a:	697b      	ldr	r3, [r7, #20]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3718      	adds	r7, #24
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a71c:	f3ef 8305 	mrs	r3, IPSR
 800a720:	60bb      	str	r3, [r7, #8]
  return(result);
 800a722:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a724:	2b00      	cmp	r3, #0
 800a726:	d003      	beq.n	800a730 <osDelay+0x1c>
    stat = osErrorISR;
 800a728:	f06f 0305 	mvn.w	r3, #5
 800a72c:	60fb      	str	r3, [r7, #12]
 800a72e:	e007      	b.n	800a740 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a730:	2300      	movs	r3, #0
 800a732:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d002      	beq.n	800a740 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 ff7c 	bl	800b638 <vTaskDelay>
    }
  }

  return (stat);
 800a740:	68fb      	ldr	r3, [r7, #12]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
	...

0800a74c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	4a07      	ldr	r2, [pc, #28]	; (800a778 <vApplicationGetIdleTaskMemory+0x2c>)
 800a75c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	4a06      	ldr	r2, [pc, #24]	; (800a77c <vApplicationGetIdleTaskMemory+0x30>)
 800a762:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2280      	movs	r2, #128	; 0x80
 800a768:	601a      	str	r2, [r3, #0]
}
 800a76a:	bf00      	nop
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	20000220 	.word	0x20000220
 800a77c:	2000027c 	.word	0x2000027c

0800a780 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	4a07      	ldr	r2, [pc, #28]	; (800a7ac <vApplicationGetTimerTaskMemory+0x2c>)
 800a790:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	4a06      	ldr	r2, [pc, #24]	; (800a7b0 <vApplicationGetTimerTaskMemory+0x30>)
 800a796:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a79e:	601a      	str	r2, [r3, #0]
}
 800a7a0:	bf00      	nop
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	2000047c 	.word	0x2000047c
 800a7b0:	200004d8 	.word	0x200004d8

0800a7b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f103 0208 	add.w	r2, r3, #8
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f103 0208 	add.w	r2, r3, #8
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f103 0208 	add.w	r2, r3, #8
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a802:	bf00      	nop
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a80e:	b480      	push	{r7}
 800a810:	b085      	sub	sp, #20
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	689a      	ldr	r2, [r3, #8]
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	1c5a      	adds	r2, r3, #1
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	601a      	str	r2, [r3, #0]
}
 800a84a:	bf00      	nop
 800a84c:	3714      	adds	r7, #20
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a856:	b480      	push	{r7}
 800a858:	b085      	sub	sp, #20
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a86c:	d103      	bne.n	800a876 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	60fb      	str	r3, [r7, #12]
 800a874:	e00c      	b.n	800a890 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	3308      	adds	r3, #8
 800a87a:	60fb      	str	r3, [r7, #12]
 800a87c:	e002      	b.n	800a884 <vListInsert+0x2e>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	60fb      	str	r3, [r7, #12]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d2f6      	bcs.n	800a87e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	685a      	ldr	r2, [r3, #4]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	1c5a      	adds	r2, r3, #1
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	601a      	str	r2, [r3, #0]
}
 800a8bc:	bf00      	nop
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	6892      	ldr	r2, [r2, #8]
 800a8de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	6852      	ldr	r2, [r2, #4]
 800a8e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d103      	bne.n	800a8fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	689a      	ldr	r2, [r3, #8]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	1e5a      	subs	r2, r3, #1
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10a      	bne.n	800a946 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a934:	f383 8811 	msr	BASEPRI, r3
 800a938:	f3bf 8f6f 	isb	sy
 800a93c:	f3bf 8f4f 	dsb	sy
 800a940:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a942:	bf00      	nop
 800a944:	e7fe      	b.n	800a944 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a946:	f002 f955 	bl	800cbf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a952:	68f9      	ldr	r1, [r7, #12]
 800a954:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a956:	fb01 f303 	mul.w	r3, r1, r3
 800a95a:	441a      	add	r2, r3
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a976:	3b01      	subs	r3, #1
 800a978:	68f9      	ldr	r1, [r7, #12]
 800a97a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a97c:	fb01 f303 	mul.w	r3, r1, r3
 800a980:	441a      	add	r2, r3
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	22ff      	movs	r2, #255	; 0xff
 800a98a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	22ff      	movs	r2, #255	; 0xff
 800a992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d114      	bne.n	800a9c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d01a      	beq.n	800a9da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	3310      	adds	r3, #16
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f001 fa09 	bl	800bdc0 <xTaskRemoveFromEventList>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d012      	beq.n	800a9da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a9b4:	4b0c      	ldr	r3, [pc, #48]	; (800a9e8 <xQueueGenericReset+0xcc>)
 800a9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ba:	601a      	str	r2, [r3, #0]
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	e009      	b.n	800a9da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	3310      	adds	r3, #16
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7ff fef2 	bl	800a7b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	3324      	adds	r3, #36	; 0x24
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7ff feed 	bl	800a7b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a9da:	f002 f93b 	bl	800cc54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a9de:	2301      	movs	r3, #1
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	e000ed04 	.word	0xe000ed04

0800a9ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b08e      	sub	sp, #56	; 0x38
 800a9f0:	af02      	add	r7, sp, #8
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
 800a9f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10a      	bne.n	800aa16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa12:	bf00      	nop
 800aa14:	e7fe      	b.n	800aa14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10a      	bne.n	800aa32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa2e:	bf00      	nop
 800aa30:	e7fe      	b.n	800aa30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d002      	beq.n	800aa3e <xQueueGenericCreateStatic+0x52>
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d001      	beq.n	800aa42 <xQueueGenericCreateStatic+0x56>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e000      	b.n	800aa44 <xQueueGenericCreateStatic+0x58>
 800aa42:	2300      	movs	r3, #0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10a      	bne.n	800aa5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4c:	f383 8811 	msr	BASEPRI, r3
 800aa50:	f3bf 8f6f 	isb	sy
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	623b      	str	r3, [r7, #32]
}
 800aa5a:	bf00      	nop
 800aa5c:	e7fe      	b.n	800aa5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d102      	bne.n	800aa6a <xQueueGenericCreateStatic+0x7e>
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d101      	bne.n	800aa6e <xQueueGenericCreateStatic+0x82>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e000      	b.n	800aa70 <xQueueGenericCreateStatic+0x84>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10a      	bne.n	800aa8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa78:	f383 8811 	msr	BASEPRI, r3
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	61fb      	str	r3, [r7, #28]
}
 800aa86:	bf00      	nop
 800aa88:	e7fe      	b.n	800aa88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aa8a:	2350      	movs	r3, #80	; 0x50
 800aa8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	2b50      	cmp	r3, #80	; 0x50
 800aa92:	d00a      	beq.n	800aaaa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800aa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	61bb      	str	r3, [r7, #24]
}
 800aaa6:	bf00      	nop
 800aaa8:	e7fe      	b.n	800aaa8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aaaa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00d      	beq.n	800aad2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aabe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	4613      	mov	r3, r2
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	68b9      	ldr	r1, [r7, #8]
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f000 f805 	bl	800aadc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3730      	adds	r7, #48	; 0x30
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
 800aae8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d103      	bne.n	800aaf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	69ba      	ldr	r2, [r7, #24]
 800aaf4:	601a      	str	r2, [r3, #0]
 800aaf6:	e002      	b.n	800aafe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab0a:	2101      	movs	r1, #1
 800ab0c:	69b8      	ldr	r0, [r7, #24]
 800ab0e:	f7ff ff05 	bl	800a91c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	78fa      	ldrb	r2, [r7, #3]
 800ab16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab1a:	bf00      	nop
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
	...

0800ab24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b08e      	sub	sp, #56	; 0x38
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
 800ab30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ab32:	2300      	movs	r3, #0
 800ab34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10a      	bne.n	800ab56 <xQueueGenericSend+0x32>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab52:	bf00      	nop
 800ab54:	e7fe      	b.n	800ab54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d103      	bne.n	800ab64 <xQueueGenericSend+0x40>
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <xQueueGenericSend+0x44>
 800ab64:	2301      	movs	r3, #1
 800ab66:	e000      	b.n	800ab6a <xQueueGenericSend+0x46>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10a      	bne.n	800ab84 <xQueueGenericSend+0x60>
	__asm volatile
 800ab6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab80:	bf00      	nop
 800ab82:	e7fe      	b.n	800ab82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d103      	bne.n	800ab92 <xQueueGenericSend+0x6e>
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d101      	bne.n	800ab96 <xQueueGenericSend+0x72>
 800ab92:	2301      	movs	r3, #1
 800ab94:	e000      	b.n	800ab98 <xQueueGenericSend+0x74>
 800ab96:	2300      	movs	r3, #0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10a      	bne.n	800abb2 <xQueueGenericSend+0x8e>
	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	623b      	str	r3, [r7, #32]
}
 800abae:	bf00      	nop
 800abb0:	e7fe      	b.n	800abb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abb2:	f001 fac3 	bl	800c13c <xTaskGetSchedulerState>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d102      	bne.n	800abc2 <xQueueGenericSend+0x9e>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d101      	bne.n	800abc6 <xQueueGenericSend+0xa2>
 800abc2:	2301      	movs	r3, #1
 800abc4:	e000      	b.n	800abc8 <xQueueGenericSend+0xa4>
 800abc6:	2300      	movs	r3, #0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10a      	bne.n	800abe2 <xQueueGenericSend+0xbe>
	__asm volatile
 800abcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	61fb      	str	r3, [r7, #28]
}
 800abde:	bf00      	nop
 800abe0:	e7fe      	b.n	800abe0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abe2:	f002 f807 	bl	800cbf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abee:	429a      	cmp	r2, r3
 800abf0:	d302      	bcc.n	800abf8 <xQueueGenericSend+0xd4>
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	d129      	bne.n	800ac4c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800abf8:	683a      	ldr	r2, [r7, #0]
 800abfa:	68b9      	ldr	r1, [r7, #8]
 800abfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abfe:	f000 fa0b 	bl	800b018 <prvCopyDataToQueue>
 800ac02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d010      	beq.n	800ac2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0e:	3324      	adds	r3, #36	; 0x24
 800ac10:	4618      	mov	r0, r3
 800ac12:	f001 f8d5 	bl	800bdc0 <xTaskRemoveFromEventList>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d013      	beq.n	800ac44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ac1c:	4b3f      	ldr	r3, [pc, #252]	; (800ad1c <xQueueGenericSend+0x1f8>)
 800ac1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac22:	601a      	str	r2, [r3, #0]
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	e00a      	b.n	800ac44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ac2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d007      	beq.n	800ac44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ac34:	4b39      	ldr	r3, [pc, #228]	; (800ad1c <xQueueGenericSend+0x1f8>)
 800ac36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac3a:	601a      	str	r2, [r3, #0]
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ac44:	f002 f806 	bl	800cc54 <vPortExitCritical>
				return pdPASS;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e063      	b.n	800ad14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d103      	bne.n	800ac5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac52:	f001 ffff 	bl	800cc54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ac56:	2300      	movs	r3, #0
 800ac58:	e05c      	b.n	800ad14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d106      	bne.n	800ac6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac60:	f107 0314 	add.w	r3, r7, #20
 800ac64:	4618      	mov	r0, r3
 800ac66:	f001 f90f 	bl	800be88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac6e:	f001 fff1 	bl	800cc54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac72:	f000 fe81 	bl	800b978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac76:	f001 ffbd 	bl	800cbf4 <vPortEnterCritical>
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac80:	b25b      	sxtb	r3, r3
 800ac82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac86:	d103      	bne.n	800ac90 <xQueueGenericSend+0x16c>
 800ac88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac96:	b25b      	sxtb	r3, r3
 800ac98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac9c:	d103      	bne.n	800aca6 <xQueueGenericSend+0x182>
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aca6:	f001 ffd5 	bl	800cc54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acaa:	1d3a      	adds	r2, r7, #4
 800acac:	f107 0314 	add.w	r3, r7, #20
 800acb0:	4611      	mov	r1, r2
 800acb2:	4618      	mov	r0, r3
 800acb4:	f001 f8fe 	bl	800beb4 <xTaskCheckForTimeOut>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d124      	bne.n	800ad08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800acbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acc0:	f000 faa2 	bl	800b208 <prvIsQueueFull>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d018      	beq.n	800acfc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800acca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800accc:	3310      	adds	r3, #16
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	4611      	mov	r1, r2
 800acd2:	4618      	mov	r0, r3
 800acd4:	f001 f824 	bl	800bd20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800acd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acda:	f000 fa2d 	bl	800b138 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800acde:	f000 fe59 	bl	800b994 <xTaskResumeAll>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f47f af7c 	bne.w	800abe2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800acea:	4b0c      	ldr	r3, [pc, #48]	; (800ad1c <xQueueGenericSend+0x1f8>)
 800acec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acf0:	601a      	str	r2, [r3, #0]
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	e772      	b.n	800abe2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800acfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acfe:	f000 fa1b 	bl	800b138 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad02:	f000 fe47 	bl	800b994 <xTaskResumeAll>
 800ad06:	e76c      	b.n	800abe2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ad08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad0a:	f000 fa15 	bl	800b138 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad0e:	f000 fe41 	bl	800b994 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ad12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3738      	adds	r7, #56	; 0x38
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	e000ed04 	.word	0xe000ed04

0800ad20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b090      	sub	sp, #64	; 0x40
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
 800ad2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ad32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10a      	bne.n	800ad4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ad38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3c:	f383 8811 	msr	BASEPRI, r3
 800ad40:	f3bf 8f6f 	isb	sy
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad4a:	bf00      	nop
 800ad4c:	e7fe      	b.n	800ad4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d103      	bne.n	800ad5c <xQueueGenericSendFromISR+0x3c>
 800ad54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d101      	bne.n	800ad60 <xQueueGenericSendFromISR+0x40>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e000      	b.n	800ad62 <xQueueGenericSendFromISR+0x42>
 800ad60:	2300      	movs	r3, #0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10a      	bne.n	800ad7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ad66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6a:	f383 8811 	msr	BASEPRI, r3
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f3bf 8f4f 	dsb	sy
 800ad76:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad78:	bf00      	nop
 800ad7a:	e7fe      	b.n	800ad7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d103      	bne.n	800ad8a <xQueueGenericSendFromISR+0x6a>
 800ad82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d101      	bne.n	800ad8e <xQueueGenericSendFromISR+0x6e>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e000      	b.n	800ad90 <xQueueGenericSendFromISR+0x70>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10a      	bne.n	800adaa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ad94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad98:	f383 8811 	msr	BASEPRI, r3
 800ad9c:	f3bf 8f6f 	isb	sy
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	623b      	str	r3, [r7, #32]
}
 800ada6:	bf00      	nop
 800ada8:	e7fe      	b.n	800ada8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800adaa:	f002 f805 	bl	800cdb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800adae:	f3ef 8211 	mrs	r2, BASEPRI
 800adb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb6:	f383 8811 	msr	BASEPRI, r3
 800adba:	f3bf 8f6f 	isb	sy
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	61fa      	str	r2, [r7, #28]
 800adc4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800adc6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800adc8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add2:	429a      	cmp	r2, r3
 800add4:	d302      	bcc.n	800addc <xQueueGenericSendFromISR+0xbc>
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	2b02      	cmp	r3, #2
 800adda:	d12f      	bne.n	800ae3c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800addc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ade2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ade6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	68b9      	ldr	r1, [r7, #8]
 800adf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800adf2:	f000 f911 	bl	800b018 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800adf6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800adfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adfe:	d112      	bne.n	800ae26 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d016      	beq.n	800ae36 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0a:	3324      	adds	r3, #36	; 0x24
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 ffd7 	bl	800bdc0 <xTaskRemoveFromEventList>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00e      	beq.n	800ae36 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00b      	beq.n	800ae36 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2201      	movs	r2, #1
 800ae22:	601a      	str	r2, [r3, #0]
 800ae24:	e007      	b.n	800ae36 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ae26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	b25a      	sxtb	r2, r3
 800ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ae36:	2301      	movs	r3, #1
 800ae38:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ae3a:	e001      	b.n	800ae40 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae42:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ae4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3740      	adds	r7, #64	; 0x40
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b08c      	sub	sp, #48	; 0x30
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ae64:	2300      	movs	r3, #0
 800ae66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ae6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10a      	bne.n	800ae88 <xQueueReceive+0x30>
	__asm volatile
 800ae72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae76:	f383 8811 	msr	BASEPRI, r3
 800ae7a:	f3bf 8f6f 	isb	sy
 800ae7e:	f3bf 8f4f 	dsb	sy
 800ae82:	623b      	str	r3, [r7, #32]
}
 800ae84:	bf00      	nop
 800ae86:	e7fe      	b.n	800ae86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d103      	bne.n	800ae96 <xQueueReceive+0x3e>
 800ae8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d101      	bne.n	800ae9a <xQueueReceive+0x42>
 800ae96:	2301      	movs	r3, #1
 800ae98:	e000      	b.n	800ae9c <xQueueReceive+0x44>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d10a      	bne.n	800aeb6 <xQueueReceive+0x5e>
	__asm volatile
 800aea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea4:	f383 8811 	msr	BASEPRI, r3
 800aea8:	f3bf 8f6f 	isb	sy
 800aeac:	f3bf 8f4f 	dsb	sy
 800aeb0:	61fb      	str	r3, [r7, #28]
}
 800aeb2:	bf00      	nop
 800aeb4:	e7fe      	b.n	800aeb4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aeb6:	f001 f941 	bl	800c13c <xTaskGetSchedulerState>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d102      	bne.n	800aec6 <xQueueReceive+0x6e>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <xQueueReceive+0x72>
 800aec6:	2301      	movs	r3, #1
 800aec8:	e000      	b.n	800aecc <xQueueReceive+0x74>
 800aeca:	2300      	movs	r3, #0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d10a      	bne.n	800aee6 <xQueueReceive+0x8e>
	__asm volatile
 800aed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed4:	f383 8811 	msr	BASEPRI, r3
 800aed8:	f3bf 8f6f 	isb	sy
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	61bb      	str	r3, [r7, #24]
}
 800aee2:	bf00      	nop
 800aee4:	e7fe      	b.n	800aee4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aee6:	f001 fe85 	bl	800cbf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d01f      	beq.n	800af36 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aef6:	68b9      	ldr	r1, [r7, #8]
 800aef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aefa:	f000 f8f7 	bl	800b0ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	1e5a      	subs	r2, r3, #1
 800af02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00f      	beq.n	800af2e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af10:	3310      	adds	r3, #16
 800af12:	4618      	mov	r0, r3
 800af14:	f000 ff54 	bl	800bdc0 <xTaskRemoveFromEventList>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d007      	beq.n	800af2e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800af1e:	4b3d      	ldr	r3, [pc, #244]	; (800b014 <xQueueReceive+0x1bc>)
 800af20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af24:	601a      	str	r2, [r3, #0]
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af2e:	f001 fe91 	bl	800cc54 <vPortExitCritical>
				return pdPASS;
 800af32:	2301      	movs	r3, #1
 800af34:	e069      	b.n	800b00a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d103      	bne.n	800af44 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af3c:	f001 fe8a 	bl	800cc54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af40:	2300      	movs	r3, #0
 800af42:	e062      	b.n	800b00a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af46:	2b00      	cmp	r3, #0
 800af48:	d106      	bne.n	800af58 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af4a:	f107 0310 	add.w	r3, r7, #16
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 ff9a 	bl	800be88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af54:	2301      	movs	r3, #1
 800af56:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af58:	f001 fe7c 	bl	800cc54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af5c:	f000 fd0c 	bl	800b978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af60:	f001 fe48 	bl	800cbf4 <vPortEnterCritical>
 800af64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af6a:	b25b      	sxtb	r3, r3
 800af6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af70:	d103      	bne.n	800af7a <xQueueReceive+0x122>
 800af72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af74:	2200      	movs	r2, #0
 800af76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af80:	b25b      	sxtb	r3, r3
 800af82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af86:	d103      	bne.n	800af90 <xQueueReceive+0x138>
 800af88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af90:	f001 fe60 	bl	800cc54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af94:	1d3a      	adds	r2, r7, #4
 800af96:	f107 0310 	add.w	r3, r7, #16
 800af9a:	4611      	mov	r1, r2
 800af9c:	4618      	mov	r0, r3
 800af9e:	f000 ff89 	bl	800beb4 <xTaskCheckForTimeOut>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d123      	bne.n	800aff0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afaa:	f000 f917 	bl	800b1dc <prvIsQueueEmpty>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d017      	beq.n	800afe4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800afb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb6:	3324      	adds	r3, #36	; 0x24
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	4611      	mov	r1, r2
 800afbc:	4618      	mov	r0, r3
 800afbe:	f000 feaf 	bl	800bd20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800afc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afc4:	f000 f8b8 	bl	800b138 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800afc8:	f000 fce4 	bl	800b994 <xTaskResumeAll>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d189      	bne.n	800aee6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800afd2:	4b10      	ldr	r3, [pc, #64]	; (800b014 <xQueueReceive+0x1bc>)
 800afd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	f3bf 8f6f 	isb	sy
 800afe2:	e780      	b.n	800aee6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800afe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afe6:	f000 f8a7 	bl	800b138 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afea:	f000 fcd3 	bl	800b994 <xTaskResumeAll>
 800afee:	e77a      	b.n	800aee6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aff2:	f000 f8a1 	bl	800b138 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aff6:	f000 fccd 	bl	800b994 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800affa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800affc:	f000 f8ee 	bl	800b1dc <prvIsQueueEmpty>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	f43f af6f 	beq.w	800aee6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b008:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3730      	adds	r7, #48	; 0x30
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	e000ed04 	.word	0xe000ed04

0800b018 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b086      	sub	sp, #24
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b024:	2300      	movs	r3, #0
 800b026:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b032:	2b00      	cmp	r3, #0
 800b034:	d10d      	bne.n	800b052 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d14d      	bne.n	800b0da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	4618      	mov	r0, r3
 800b044:	f001 f898 	bl	800c178 <xTaskPriorityDisinherit>
 800b048:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2200      	movs	r2, #0
 800b04e:	609a      	str	r2, [r3, #8]
 800b050:	e043      	b.n	800b0da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d119      	bne.n	800b08c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	6858      	ldr	r0, [r3, #4]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b060:	461a      	mov	r2, r3
 800b062:	68b9      	ldr	r1, [r7, #8]
 800b064:	f002 f90c 	bl	800d280 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	685a      	ldr	r2, [r3, #4]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b070:	441a      	add	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	685a      	ldr	r2, [r3, #4]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d32b      	bcc.n	800b0da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	605a      	str	r2, [r3, #4]
 800b08a:	e026      	b.n	800b0da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	68d8      	ldr	r0, [r3, #12]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b094:	461a      	mov	r2, r3
 800b096:	68b9      	ldr	r1, [r7, #8]
 800b098:	f002 f8f2 	bl	800d280 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	68da      	ldr	r2, [r3, #12]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a4:	425b      	negs	r3, r3
 800b0a6:	441a      	add	r2, r3
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	68da      	ldr	r2, [r3, #12]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d207      	bcs.n	800b0c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	689a      	ldr	r2, [r3, #8]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c0:	425b      	negs	r3, r3
 800b0c2:	441a      	add	r2, r3
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d105      	bne.n	800b0da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d002      	beq.n	800b0da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	1c5a      	adds	r2, r3, #1
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0e2:	697b      	ldr	r3, [r7, #20]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3718      	adds	r7, #24
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d018      	beq.n	800b130 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68da      	ldr	r2, [r3, #12]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b106:	441a      	add	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	68da      	ldr	r2, [r3, #12]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	429a      	cmp	r2, r3
 800b116:	d303      	bcc.n	800b120 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	68d9      	ldr	r1, [r3, #12]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b128:	461a      	mov	r2, r3
 800b12a:	6838      	ldr	r0, [r7, #0]
 800b12c:	f002 f8a8 	bl	800d280 <memcpy>
	}
}
 800b130:	bf00      	nop
 800b132:	3708      	adds	r7, #8
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b140:	f001 fd58 	bl	800cbf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b14a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b14c:	e011      	b.n	800b172 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b152:	2b00      	cmp	r3, #0
 800b154:	d012      	beq.n	800b17c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	3324      	adds	r3, #36	; 0x24
 800b15a:	4618      	mov	r0, r3
 800b15c:	f000 fe30 	bl	800bdc0 <xTaskRemoveFromEventList>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d001      	beq.n	800b16a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b166:	f000 ff07 	bl	800bf78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b176:	2b00      	cmp	r3, #0
 800b178:	dce9      	bgt.n	800b14e <prvUnlockQueue+0x16>
 800b17a:	e000      	b.n	800b17e <prvUnlockQueue+0x46>
					break;
 800b17c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	22ff      	movs	r2, #255	; 0xff
 800b182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b186:	f001 fd65 	bl	800cc54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b18a:	f001 fd33 	bl	800cbf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b194:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b196:	e011      	b.n	800b1bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	691b      	ldr	r3, [r3, #16]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d012      	beq.n	800b1c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	3310      	adds	r3, #16
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f000 fe0b 	bl	800bdc0 <xTaskRemoveFromEventList>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b1b0:	f000 fee2 	bl	800bf78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b1b4:	7bbb      	ldrb	r3, [r7, #14]
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	dce9      	bgt.n	800b198 <prvUnlockQueue+0x60>
 800b1c4:	e000      	b.n	800b1c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	22ff      	movs	r2, #255	; 0xff
 800b1cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b1d0:	f001 fd40 	bl	800cc54 <vPortExitCritical>
}
 800b1d4:	bf00      	nop
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1e4:	f001 fd06 	bl	800cbf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d102      	bne.n	800b1f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	60fb      	str	r3, [r7, #12]
 800b1f4:	e001      	b.n	800b1fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1fa:	f001 fd2b 	bl	800cc54 <vPortExitCritical>

	return xReturn;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
}
 800b200:	4618      	mov	r0, r3
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b210:	f001 fcf0 	bl	800cbf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d102      	bne.n	800b226 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b220:	2301      	movs	r3, #1
 800b222:	60fb      	str	r3, [r7, #12]
 800b224:	e001      	b.n	800b22a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b226:	2300      	movs	r3, #0
 800b228:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b22a:	f001 fd13 	bl	800cc54 <vPortExitCritical>

	return xReturn;
 800b22e:	68fb      	ldr	r3, [r7, #12]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b242:	2300      	movs	r3, #0
 800b244:	60fb      	str	r3, [r7, #12]
 800b246:	e014      	b.n	800b272 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b248:	4a0f      	ldr	r2, [pc, #60]	; (800b288 <vQueueAddToRegistry+0x50>)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d10b      	bne.n	800b26c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b254:	490c      	ldr	r1, [pc, #48]	; (800b288 <vQueueAddToRegistry+0x50>)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b25e:	4a0a      	ldr	r2, [pc, #40]	; (800b288 <vQueueAddToRegistry+0x50>)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	00db      	lsls	r3, r3, #3
 800b264:	4413      	add	r3, r2
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b26a:	e006      	b.n	800b27a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	3301      	adds	r3, #1
 800b270:	60fb      	str	r3, [r7, #12]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2b07      	cmp	r3, #7
 800b276:	d9e7      	bls.n	800b248 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b278:	bf00      	nop
 800b27a:	bf00      	nop
 800b27c:	3714      	adds	r7, #20
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop
 800b288:	200073c4 	.word	0x200073c4

0800b28c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b29c:	f001 fcaa 	bl	800cbf4 <vPortEnterCritical>
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2a6:	b25b      	sxtb	r3, r3
 800b2a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2ac:	d103      	bne.n	800b2b6 <vQueueWaitForMessageRestricted+0x2a>
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2bc:	b25b      	sxtb	r3, r3
 800b2be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2c2:	d103      	bne.n	800b2cc <vQueueWaitForMessageRestricted+0x40>
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2cc:	f001 fcc2 	bl	800cc54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d106      	bne.n	800b2e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	3324      	adds	r3, #36	; 0x24
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	68b9      	ldr	r1, [r7, #8]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 fd41 	bl	800bd68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b2e6:	6978      	ldr	r0, [r7, #20]
 800b2e8:	f7ff ff26 	bl	800b138 <prvUnlockQueue>
	}
 800b2ec:	bf00      	nop
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b08e      	sub	sp, #56	; 0x38
 800b2f8:	af04      	add	r7, sp, #16
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	607a      	str	r2, [r7, #4]
 800b300:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10a      	bne.n	800b31e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30c:	f383 8811 	msr	BASEPRI, r3
 800b310:	f3bf 8f6f 	isb	sy
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	623b      	str	r3, [r7, #32]
}
 800b31a:	bf00      	nop
 800b31c:	e7fe      	b.n	800b31c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10a      	bne.n	800b33a <xTaskCreateStatic+0x46>
	__asm volatile
 800b324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b328:	f383 8811 	msr	BASEPRI, r3
 800b32c:	f3bf 8f6f 	isb	sy
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	61fb      	str	r3, [r7, #28]
}
 800b336:	bf00      	nop
 800b338:	e7fe      	b.n	800b338 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b33a:	235c      	movs	r3, #92	; 0x5c
 800b33c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	2b5c      	cmp	r3, #92	; 0x5c
 800b342:	d00a      	beq.n	800b35a <xTaskCreateStatic+0x66>
	__asm volatile
 800b344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b348:	f383 8811 	msr	BASEPRI, r3
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	61bb      	str	r3, [r7, #24]
}
 800b356:	bf00      	nop
 800b358:	e7fe      	b.n	800b358 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b35a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d01e      	beq.n	800b3a0 <xTaskCreateStatic+0xac>
 800b362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b364:	2b00      	cmp	r3, #0
 800b366:	d01b      	beq.n	800b3a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b370:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b374:	2202      	movs	r2, #2
 800b376:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b37a:	2300      	movs	r3, #0
 800b37c:	9303      	str	r3, [sp, #12]
 800b37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b380:	9302      	str	r3, [sp, #8]
 800b382:	f107 0314 	add.w	r3, r7, #20
 800b386:	9301      	str	r3, [sp, #4]
 800b388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	68b9      	ldr	r1, [r7, #8]
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f000 f850 	bl	800b438 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b398:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b39a:	f000 f8dd 	bl	800b558 <prvAddNewTaskToReadyList>
 800b39e:	e001      	b.n	800b3a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b3a4:	697b      	ldr	r3, [r7, #20]
	}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3728      	adds	r7, #40	; 0x28
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b08c      	sub	sp, #48	; 0x30
 800b3b2:	af04      	add	r7, sp, #16
 800b3b4:	60f8      	str	r0, [r7, #12]
 800b3b6:	60b9      	str	r1, [r7, #8]
 800b3b8:	603b      	str	r3, [r7, #0]
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b3be:	88fb      	ldrh	r3, [r7, #6]
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f001 fd38 	bl	800ce38 <pvPortMalloc>
 800b3c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d00e      	beq.n	800b3ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b3d0:	205c      	movs	r0, #92	; 0x5c
 800b3d2:	f001 fd31 	bl	800ce38 <pvPortMalloc>
 800b3d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d003      	beq.n	800b3e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	697a      	ldr	r2, [r7, #20]
 800b3e2:	631a      	str	r2, [r3, #48]	; 0x30
 800b3e4:	e005      	b.n	800b3f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3e6:	6978      	ldr	r0, [r7, #20]
 800b3e8:	f001 fdf2 	bl	800cfd0 <vPortFree>
 800b3ec:	e001      	b.n	800b3f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d017      	beq.n	800b428 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b400:	88fa      	ldrh	r2, [r7, #6]
 800b402:	2300      	movs	r3, #0
 800b404:	9303      	str	r3, [sp, #12]
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	9302      	str	r3, [sp, #8]
 800b40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40c:	9301      	str	r3, [sp, #4]
 800b40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	68b9      	ldr	r1, [r7, #8]
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f000 f80e 	bl	800b438 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b41c:	69f8      	ldr	r0, [r7, #28]
 800b41e:	f000 f89b 	bl	800b558 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b422:	2301      	movs	r3, #1
 800b424:	61bb      	str	r3, [r7, #24]
 800b426:	e002      	b.n	800b42e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b42c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b42e:	69bb      	ldr	r3, [r7, #24]
	}
 800b430:	4618      	mov	r0, r3
 800b432:	3720      	adds	r7, #32
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b088      	sub	sp, #32
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b448:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	461a      	mov	r2, r3
 800b450:	21a5      	movs	r1, #165	; 0xa5
 800b452:	f001 ff23 	bl	800d29c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b460:	3b01      	subs	r3, #1
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	4413      	add	r3, r2
 800b466:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	f023 0307 	bic.w	r3, r3, #7
 800b46e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	f003 0307 	and.w	r3, r3, #7
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00a      	beq.n	800b490 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	617b      	str	r3, [r7, #20]
}
 800b48c:	bf00      	nop
 800b48e:	e7fe      	b.n	800b48e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d01f      	beq.n	800b4d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b496:	2300      	movs	r3, #0
 800b498:	61fb      	str	r3, [r7, #28]
 800b49a:	e012      	b.n	800b4c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	7819      	ldrb	r1, [r3, #0]
 800b4a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4a6:	69fb      	ldr	r3, [r7, #28]
 800b4a8:	4413      	add	r3, r2
 800b4aa:	3334      	adds	r3, #52	; 0x34
 800b4ac:	460a      	mov	r2, r1
 800b4ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	69fb      	ldr	r3, [r7, #28]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d006      	beq.n	800b4ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	61fb      	str	r3, [r7, #28]
 800b4c2:	69fb      	ldr	r3, [r7, #28]
 800b4c4:	2b0f      	cmp	r3, #15
 800b4c6:	d9e9      	bls.n	800b49c <prvInitialiseNewTask+0x64>
 800b4c8:	e000      	b.n	800b4cc <prvInitialiseNewTask+0x94>
			{
				break;
 800b4ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b4d4:	e003      	b.n	800b4de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e0:	2b37      	cmp	r3, #55	; 0x37
 800b4e2:	d901      	bls.n	800b4e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b4e4:	2337      	movs	r3, #55	; 0x37
 800b4e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fc:	3304      	adds	r3, #4
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7ff f978 	bl	800a7f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b506:	3318      	adds	r3, #24
 800b508:	4618      	mov	r0, r3
 800b50a:	f7ff f973 	bl	800a7f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b512:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b516:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b522:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b526:	2200      	movs	r2, #0
 800b528:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52c:	2200      	movs	r2, #0
 800b52e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b532:	683a      	ldr	r2, [r7, #0]
 800b534:	68f9      	ldr	r1, [r7, #12]
 800b536:	69b8      	ldr	r0, [r7, #24]
 800b538:	f001 fa2e 	bl	800c998 <pxPortInitialiseStack>
 800b53c:	4602      	mov	r2, r0
 800b53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b540:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b54c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b54e:	bf00      	nop
 800b550:	3720      	adds	r7, #32
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
	...

0800b558 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b560:	f001 fb48 	bl	800cbf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b564:	4b2d      	ldr	r3, [pc, #180]	; (800b61c <prvAddNewTaskToReadyList+0xc4>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	3301      	adds	r3, #1
 800b56a:	4a2c      	ldr	r2, [pc, #176]	; (800b61c <prvAddNewTaskToReadyList+0xc4>)
 800b56c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b56e:	4b2c      	ldr	r3, [pc, #176]	; (800b620 <prvAddNewTaskToReadyList+0xc8>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d109      	bne.n	800b58a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b576:	4a2a      	ldr	r2, [pc, #168]	; (800b620 <prvAddNewTaskToReadyList+0xc8>)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b57c:	4b27      	ldr	r3, [pc, #156]	; (800b61c <prvAddNewTaskToReadyList+0xc4>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d110      	bne.n	800b5a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b584:	f000 fd1c 	bl	800bfc0 <prvInitialiseTaskLists>
 800b588:	e00d      	b.n	800b5a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b58a:	4b26      	ldr	r3, [pc, #152]	; (800b624 <prvAddNewTaskToReadyList+0xcc>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d109      	bne.n	800b5a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b592:	4b23      	ldr	r3, [pc, #140]	; (800b620 <prvAddNewTaskToReadyList+0xc8>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d802      	bhi.n	800b5a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b5a0:	4a1f      	ldr	r2, [pc, #124]	; (800b620 <prvAddNewTaskToReadyList+0xc8>)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b5a6:	4b20      	ldr	r3, [pc, #128]	; (800b628 <prvAddNewTaskToReadyList+0xd0>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	4a1e      	ldr	r2, [pc, #120]	; (800b628 <prvAddNewTaskToReadyList+0xd0>)
 800b5ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b5b0:	4b1d      	ldr	r3, [pc, #116]	; (800b628 <prvAddNewTaskToReadyList+0xd0>)
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5bc:	4b1b      	ldr	r3, [pc, #108]	; (800b62c <prvAddNewTaskToReadyList+0xd4>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d903      	bls.n	800b5cc <prvAddNewTaskToReadyList+0x74>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c8:	4a18      	ldr	r2, [pc, #96]	; (800b62c <prvAddNewTaskToReadyList+0xd4>)
 800b5ca:	6013      	str	r3, [r2, #0]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4413      	add	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	4a15      	ldr	r2, [pc, #84]	; (800b630 <prvAddNewTaskToReadyList+0xd8>)
 800b5da:	441a      	add	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	3304      	adds	r3, #4
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	f7ff f913 	bl	800a80e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b5e8:	f001 fb34 	bl	800cc54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b5ec:	4b0d      	ldr	r3, [pc, #52]	; (800b624 <prvAddNewTaskToReadyList+0xcc>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00e      	beq.n	800b612 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b5f4:	4b0a      	ldr	r3, [pc, #40]	; (800b620 <prvAddNewTaskToReadyList+0xc8>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d207      	bcs.n	800b612 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b602:	4b0c      	ldr	r3, [pc, #48]	; (800b634 <prvAddNewTaskToReadyList+0xdc>)
 800b604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b608:	601a      	str	r2, [r3, #0]
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b612:	bf00      	nop
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	20000dac 	.word	0x20000dac
 800b620:	200008d8 	.word	0x200008d8
 800b624:	20000db8 	.word	0x20000db8
 800b628:	20000dc8 	.word	0x20000dc8
 800b62c:	20000db4 	.word	0x20000db4
 800b630:	200008dc 	.word	0x200008dc
 800b634:	e000ed04 	.word	0xe000ed04

0800b638 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b640:	2300      	movs	r3, #0
 800b642:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d017      	beq.n	800b67a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b64a:	4b13      	ldr	r3, [pc, #76]	; (800b698 <vTaskDelay+0x60>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00a      	beq.n	800b668 <vTaskDelay+0x30>
	__asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	60bb      	str	r3, [r7, #8]
}
 800b664:	bf00      	nop
 800b666:	e7fe      	b.n	800b666 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b668:	f000 f986 	bl	800b978 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b66c:	2100      	movs	r1, #0
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fdf0 	bl	800c254 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b674:	f000 f98e 	bl	800b994 <xTaskResumeAll>
 800b678:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d107      	bne.n	800b690 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b680:	4b06      	ldr	r3, [pc, #24]	; (800b69c <vTaskDelay+0x64>)
 800b682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b686:	601a      	str	r2, [r3, #0]
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b690:	bf00      	nop
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	20000dd4 	.word	0x20000dd4
 800b69c:	e000ed04 	.word	0xe000ed04

0800b6a0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b6a8:	f001 faa4 	bl	800cbf4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d102      	bne.n	800b6b8 <vTaskSuspend+0x18>
 800b6b2:	4b30      	ldr	r3, [pc, #192]	; (800b774 <vTaskSuspend+0xd4>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	e000      	b.n	800b6ba <vTaskSuspend+0x1a>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	3304      	adds	r3, #4
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7ff f901 	bl	800a8c8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d004      	beq.n	800b6d8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	3318      	adds	r3, #24
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7ff f8f8 	bl	800a8c8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	3304      	adds	r3, #4
 800b6dc:	4619      	mov	r1, r3
 800b6de:	4826      	ldr	r0, [pc, #152]	; (800b778 <vTaskSuspend+0xd8>)
 800b6e0:	f7ff f895 	bl	800a80e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d103      	bne.n	800b6f8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b6f8:	f001 faac 	bl	800cc54 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b6fc:	4b1f      	ldr	r3, [pc, #124]	; (800b77c <vTaskSuspend+0xdc>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d005      	beq.n	800b710 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b704:	f001 fa76 	bl	800cbf4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b708:	f000 fcf8 	bl	800c0fc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b70c:	f001 faa2 	bl	800cc54 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b710:	4b18      	ldr	r3, [pc, #96]	; (800b774 <vTaskSuspend+0xd4>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	429a      	cmp	r2, r3
 800b718:	d127      	bne.n	800b76a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800b71a:	4b18      	ldr	r3, [pc, #96]	; (800b77c <vTaskSuspend+0xdc>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d017      	beq.n	800b752 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b722:	4b17      	ldr	r3, [pc, #92]	; (800b780 <vTaskSuspend+0xe0>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00a      	beq.n	800b740 <vTaskSuspend+0xa0>
	__asm volatile
 800b72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72e:	f383 8811 	msr	BASEPRI, r3
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	60bb      	str	r3, [r7, #8]
}
 800b73c:	bf00      	nop
 800b73e:	e7fe      	b.n	800b73e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800b740:	4b10      	ldr	r3, [pc, #64]	; (800b784 <vTaskSuspend+0xe4>)
 800b742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b746:	601a      	str	r2, [r3, #0]
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b750:	e00b      	b.n	800b76a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b752:	4b09      	ldr	r3, [pc, #36]	; (800b778 <vTaskSuspend+0xd8>)
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	4b0c      	ldr	r3, [pc, #48]	; (800b788 <vTaskSuspend+0xe8>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d103      	bne.n	800b766 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800b75e:	4b05      	ldr	r3, [pc, #20]	; (800b774 <vTaskSuspend+0xd4>)
 800b760:	2200      	movs	r2, #0
 800b762:	601a      	str	r2, [r3, #0]
	}
 800b764:	e001      	b.n	800b76a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800b766:	f000 fa7d 	bl	800bc64 <vTaskSwitchContext>
	}
 800b76a:	bf00      	nop
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	200008d8 	.word	0x200008d8
 800b778:	20000d98 	.word	0x20000d98
 800b77c:	20000db8 	.word	0x20000db8
 800b780:	20000dd4 	.word	0x20000dd4
 800b784:	e000ed04 	.word	0xe000ed04
 800b788:	20000dac 	.word	0x20000dac

0800b78c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800b78c:	b480      	push	{r7}
 800b78e:	b087      	sub	sp, #28
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800b794:	2300      	movs	r3, #0
 800b796:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10a      	bne.n	800b7b8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800b7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a6:	f383 8811 	msr	BASEPRI, r3
 800b7aa:	f3bf 8f6f 	isb	sy
 800b7ae:	f3bf 8f4f 	dsb	sy
 800b7b2:	60fb      	str	r3, [r7, #12]
}
 800b7b4:	bf00      	nop
 800b7b6:	e7fe      	b.n	800b7b6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	695b      	ldr	r3, [r3, #20]
 800b7bc:	4a0a      	ldr	r2, [pc, #40]	; (800b7e8 <prvTaskIsTaskSuspended+0x5c>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d10a      	bne.n	800b7d8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c6:	4a09      	ldr	r2, [pc, #36]	; (800b7ec <prvTaskIsTaskSuspended+0x60>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d005      	beq.n	800b7d8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d101      	bne.n	800b7d8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7d8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b7da:	4618      	mov	r0, r3
 800b7dc:	371c      	adds	r7, #28
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	20000d98 	.word	0x20000d98
 800b7ec:	20000d6c 	.word	0x20000d6c

0800b7f0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10a      	bne.n	800b818 <vTaskResume+0x28>
	__asm volatile
 800b802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b806:	f383 8811 	msr	BASEPRI, r3
 800b80a:	f3bf 8f6f 	isb	sy
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	60bb      	str	r3, [r7, #8]
}
 800b814:	bf00      	nop
 800b816:	e7fe      	b.n	800b816 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800b818:	4b20      	ldr	r3, [pc, #128]	; (800b89c <vTaskResume+0xac>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d038      	beq.n	800b894 <vTaskResume+0xa4>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d035      	beq.n	800b894 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800b828:	f001 f9e4 	bl	800cbf4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f7ff ffad 	bl	800b78c <prvTaskIsTaskSuspended>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d02b      	beq.n	800b890 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	3304      	adds	r3, #4
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7ff f843 	bl	800a8c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b846:	4b16      	ldr	r3, [pc, #88]	; (800b8a0 <vTaskResume+0xb0>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d903      	bls.n	800b856 <vTaskResume+0x66>
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b852:	4a13      	ldr	r2, [pc, #76]	; (800b8a0 <vTaskResume+0xb0>)
 800b854:	6013      	str	r3, [r2, #0]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b85a:	4613      	mov	r3, r2
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4413      	add	r3, r2
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	4a10      	ldr	r2, [pc, #64]	; (800b8a4 <vTaskResume+0xb4>)
 800b864:	441a      	add	r2, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	3304      	adds	r3, #4
 800b86a:	4619      	mov	r1, r3
 800b86c:	4610      	mov	r0, r2
 800b86e:	f7fe ffce 	bl	800a80e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b876:	4b09      	ldr	r3, [pc, #36]	; (800b89c <vTaskResume+0xac>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d307      	bcc.n	800b890 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800b880:	4b09      	ldr	r3, [pc, #36]	; (800b8a8 <vTaskResume+0xb8>)
 800b882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b886:	601a      	str	r2, [r3, #0]
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800b890:	f001 f9e0 	bl	800cc54 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b894:	bf00      	nop
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	200008d8 	.word	0x200008d8
 800b8a0:	20000db4 	.word	0x20000db4
 800b8a4:	200008dc 	.word	0x200008dc
 800b8a8:	e000ed04 	.word	0xe000ed04

0800b8ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b08a      	sub	sp, #40	; 0x28
 800b8b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8ba:	463a      	mov	r2, r7
 800b8bc:	1d39      	adds	r1, r7, #4
 800b8be:	f107 0308 	add.w	r3, r7, #8
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7fe ff42 	bl	800a74c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b8c8:	6839      	ldr	r1, [r7, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	68ba      	ldr	r2, [r7, #8]
 800b8ce:	9202      	str	r2, [sp, #8]
 800b8d0:	9301      	str	r3, [sp, #4]
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	460a      	mov	r2, r1
 800b8da:	4921      	ldr	r1, [pc, #132]	; (800b960 <vTaskStartScheduler+0xb4>)
 800b8dc:	4821      	ldr	r0, [pc, #132]	; (800b964 <vTaskStartScheduler+0xb8>)
 800b8de:	f7ff fd09 	bl	800b2f4 <xTaskCreateStatic>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	4a20      	ldr	r2, [pc, #128]	; (800b968 <vTaskStartScheduler+0xbc>)
 800b8e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b8e8:	4b1f      	ldr	r3, [pc, #124]	; (800b968 <vTaskStartScheduler+0xbc>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	617b      	str	r3, [r7, #20]
 800b8f4:	e001      	b.n	800b8fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d102      	bne.n	800b906 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b900:	f000 fcfc 	bl	800c2fc <xTimerCreateTimerTask>
 800b904:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d116      	bne.n	800b93a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b910:	f383 8811 	msr	BASEPRI, r3
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	613b      	str	r3, [r7, #16]
}
 800b91e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b920:	4b12      	ldr	r3, [pc, #72]	; (800b96c <vTaskStartScheduler+0xc0>)
 800b922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b926:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b928:	4b11      	ldr	r3, [pc, #68]	; (800b970 <vTaskStartScheduler+0xc4>)
 800b92a:	2201      	movs	r2, #1
 800b92c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b92e:	4b11      	ldr	r3, [pc, #68]	; (800b974 <vTaskStartScheduler+0xc8>)
 800b930:	2200      	movs	r2, #0
 800b932:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b934:	f001 f8bc 	bl	800cab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b938:	e00e      	b.n	800b958 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b940:	d10a      	bne.n	800b958 <vTaskStartScheduler+0xac>
	__asm volatile
 800b942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b946:	f383 8811 	msr	BASEPRI, r3
 800b94a:	f3bf 8f6f 	isb	sy
 800b94e:	f3bf 8f4f 	dsb	sy
 800b952:	60fb      	str	r3, [r7, #12]
}
 800b954:	bf00      	nop
 800b956:	e7fe      	b.n	800b956 <vTaskStartScheduler+0xaa>
}
 800b958:	bf00      	nop
 800b95a:	3718      	adds	r7, #24
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	08013b5c 	.word	0x08013b5c
 800b964:	0800bf91 	.word	0x0800bf91
 800b968:	20000dd0 	.word	0x20000dd0
 800b96c:	20000dcc 	.word	0x20000dcc
 800b970:	20000db8 	.word	0x20000db8
 800b974:	20000db0 	.word	0x20000db0

0800b978 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b978:	b480      	push	{r7}
 800b97a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b97c:	4b04      	ldr	r3, [pc, #16]	; (800b990 <vTaskSuspendAll+0x18>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	3301      	adds	r3, #1
 800b982:	4a03      	ldr	r2, [pc, #12]	; (800b990 <vTaskSuspendAll+0x18>)
 800b984:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b986:	bf00      	nop
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	20000dd4 	.word	0x20000dd4

0800b994 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b99a:	2300      	movs	r3, #0
 800b99c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9a2:	4b42      	ldr	r3, [pc, #264]	; (800baac <xTaskResumeAll+0x118>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10a      	bne.n	800b9c0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	603b      	str	r3, [r7, #0]
}
 800b9bc:	bf00      	nop
 800b9be:	e7fe      	b.n	800b9be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9c0:	f001 f918 	bl	800cbf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b9c4:	4b39      	ldr	r3, [pc, #228]	; (800baac <xTaskResumeAll+0x118>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	4a38      	ldr	r2, [pc, #224]	; (800baac <xTaskResumeAll+0x118>)
 800b9cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9ce:	4b37      	ldr	r3, [pc, #220]	; (800baac <xTaskResumeAll+0x118>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d162      	bne.n	800ba9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b9d6:	4b36      	ldr	r3, [pc, #216]	; (800bab0 <xTaskResumeAll+0x11c>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d05e      	beq.n	800ba9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9de:	e02f      	b.n	800ba40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9e0:	4b34      	ldr	r3, [pc, #208]	; (800bab4 <xTaskResumeAll+0x120>)
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	3318      	adds	r3, #24
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fe ff6b 	bl	800a8c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7fe ff66 	bl	800a8c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba00:	4b2d      	ldr	r3, [pc, #180]	; (800bab8 <xTaskResumeAll+0x124>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d903      	bls.n	800ba10 <xTaskResumeAll+0x7c>
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0c:	4a2a      	ldr	r2, [pc, #168]	; (800bab8 <xTaskResumeAll+0x124>)
 800ba0e:	6013      	str	r3, [r2, #0]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba14:	4613      	mov	r3, r2
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	4413      	add	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4a27      	ldr	r2, [pc, #156]	; (800babc <xTaskResumeAll+0x128>)
 800ba1e:	441a      	add	r2, r3
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	3304      	adds	r3, #4
 800ba24:	4619      	mov	r1, r3
 800ba26:	4610      	mov	r0, r2
 800ba28:	f7fe fef1 	bl	800a80e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba30:	4b23      	ldr	r3, [pc, #140]	; (800bac0 <xTaskResumeAll+0x12c>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d302      	bcc.n	800ba40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ba3a:	4b22      	ldr	r3, [pc, #136]	; (800bac4 <xTaskResumeAll+0x130>)
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba40:	4b1c      	ldr	r3, [pc, #112]	; (800bab4 <xTaskResumeAll+0x120>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1cb      	bne.n	800b9e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d001      	beq.n	800ba52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba4e:	f000 fb55 	bl	800c0fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba52:	4b1d      	ldr	r3, [pc, #116]	; (800bac8 <xTaskResumeAll+0x134>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d010      	beq.n	800ba80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba5e:	f000 f847 	bl	800baf0 <xTaskIncrementTick>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d002      	beq.n	800ba6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ba68:	4b16      	ldr	r3, [pc, #88]	; (800bac4 <xTaskResumeAll+0x130>)
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	3b01      	subs	r3, #1
 800ba72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1f1      	bne.n	800ba5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ba7a:	4b13      	ldr	r3, [pc, #76]	; (800bac8 <xTaskResumeAll+0x134>)
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba80:	4b10      	ldr	r3, [pc, #64]	; (800bac4 <xTaskResumeAll+0x130>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d009      	beq.n	800ba9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba8c:	4b0f      	ldr	r3, [pc, #60]	; (800bacc <xTaskResumeAll+0x138>)
 800ba8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba92:	601a      	str	r2, [r3, #0]
 800ba94:	f3bf 8f4f 	dsb	sy
 800ba98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba9c:	f001 f8da 	bl	800cc54 <vPortExitCritical>

	return xAlreadyYielded;
 800baa0:	68bb      	ldr	r3, [r7, #8]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	20000dd4 	.word	0x20000dd4
 800bab0:	20000dac 	.word	0x20000dac
 800bab4:	20000d6c 	.word	0x20000d6c
 800bab8:	20000db4 	.word	0x20000db4
 800babc:	200008dc 	.word	0x200008dc
 800bac0:	200008d8 	.word	0x200008d8
 800bac4:	20000dc0 	.word	0x20000dc0
 800bac8:	20000dbc 	.word	0x20000dbc
 800bacc:	e000ed04 	.word	0xe000ed04

0800bad0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bad6:	4b05      	ldr	r3, [pc, #20]	; (800baec <xTaskGetTickCount+0x1c>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800badc:	687b      	ldr	r3, [r7, #4]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	370c      	adds	r7, #12
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	20000db0 	.word	0x20000db0

0800baf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800baf6:	2300      	movs	r3, #0
 800baf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bafa:	4b4f      	ldr	r3, [pc, #316]	; (800bc38 <xTaskIncrementTick+0x148>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f040 808f 	bne.w	800bc22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb04:	4b4d      	ldr	r3, [pc, #308]	; (800bc3c <xTaskIncrementTick+0x14c>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb0c:	4a4b      	ldr	r2, [pc, #300]	; (800bc3c <xTaskIncrementTick+0x14c>)
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d120      	bne.n	800bb5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb18:	4b49      	ldr	r3, [pc, #292]	; (800bc40 <xTaskIncrementTick+0x150>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00a      	beq.n	800bb38 <xTaskIncrementTick+0x48>
	__asm volatile
 800bb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb26:	f383 8811 	msr	BASEPRI, r3
 800bb2a:	f3bf 8f6f 	isb	sy
 800bb2e:	f3bf 8f4f 	dsb	sy
 800bb32:	603b      	str	r3, [r7, #0]
}
 800bb34:	bf00      	nop
 800bb36:	e7fe      	b.n	800bb36 <xTaskIncrementTick+0x46>
 800bb38:	4b41      	ldr	r3, [pc, #260]	; (800bc40 <xTaskIncrementTick+0x150>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	60fb      	str	r3, [r7, #12]
 800bb3e:	4b41      	ldr	r3, [pc, #260]	; (800bc44 <xTaskIncrementTick+0x154>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4a3f      	ldr	r2, [pc, #252]	; (800bc40 <xTaskIncrementTick+0x150>)
 800bb44:	6013      	str	r3, [r2, #0]
 800bb46:	4a3f      	ldr	r2, [pc, #252]	; (800bc44 <xTaskIncrementTick+0x154>)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6013      	str	r3, [r2, #0]
 800bb4c:	4b3e      	ldr	r3, [pc, #248]	; (800bc48 <xTaskIncrementTick+0x158>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	3301      	adds	r3, #1
 800bb52:	4a3d      	ldr	r2, [pc, #244]	; (800bc48 <xTaskIncrementTick+0x158>)
 800bb54:	6013      	str	r3, [r2, #0]
 800bb56:	f000 fad1 	bl	800c0fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb5a:	4b3c      	ldr	r3, [pc, #240]	; (800bc4c <xTaskIncrementTick+0x15c>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	693a      	ldr	r2, [r7, #16]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d349      	bcc.n	800bbf8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb64:	4b36      	ldr	r3, [pc, #216]	; (800bc40 <xTaskIncrementTick+0x150>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d104      	bne.n	800bb78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb6e:	4b37      	ldr	r3, [pc, #220]	; (800bc4c <xTaskIncrementTick+0x15c>)
 800bb70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb74:	601a      	str	r2, [r3, #0]
					break;
 800bb76:	e03f      	b.n	800bbf8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb78:	4b31      	ldr	r3, [pc, #196]	; (800bc40 <xTaskIncrementTick+0x150>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb88:	693a      	ldr	r2, [r7, #16]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d203      	bcs.n	800bb98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb90:	4a2e      	ldr	r2, [pc, #184]	; (800bc4c <xTaskIncrementTick+0x15c>)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb96:	e02f      	b.n	800bbf8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fe fe93 	bl	800a8c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d004      	beq.n	800bbb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	3318      	adds	r3, #24
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fe fe8a 	bl	800a8c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb8:	4b25      	ldr	r3, [pc, #148]	; (800bc50 <xTaskIncrementTick+0x160>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d903      	bls.n	800bbc8 <xTaskIncrementTick+0xd8>
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc4:	4a22      	ldr	r2, [pc, #136]	; (800bc50 <xTaskIncrementTick+0x160>)
 800bbc6:	6013      	str	r3, [r2, #0]
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbcc:	4613      	mov	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4413      	add	r3, r2
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	4a1f      	ldr	r2, [pc, #124]	; (800bc54 <xTaskIncrementTick+0x164>)
 800bbd6:	441a      	add	r2, r3
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	3304      	adds	r3, #4
 800bbdc:	4619      	mov	r1, r3
 800bbde:	4610      	mov	r0, r2
 800bbe0:	f7fe fe15 	bl	800a80e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbe8:	4b1b      	ldr	r3, [pc, #108]	; (800bc58 <xTaskIncrementTick+0x168>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d3b8      	bcc.n	800bb64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbf6:	e7b5      	b.n	800bb64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bbf8:	4b17      	ldr	r3, [pc, #92]	; (800bc58 <xTaskIncrementTick+0x168>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbfe:	4915      	ldr	r1, [pc, #84]	; (800bc54 <xTaskIncrementTick+0x164>)
 800bc00:	4613      	mov	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	4413      	add	r3, r2
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	440b      	add	r3, r1
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d901      	bls.n	800bc14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bc10:	2301      	movs	r3, #1
 800bc12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bc14:	4b11      	ldr	r3, [pc, #68]	; (800bc5c <xTaskIncrementTick+0x16c>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d007      	beq.n	800bc2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	617b      	str	r3, [r7, #20]
 800bc20:	e004      	b.n	800bc2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bc22:	4b0f      	ldr	r3, [pc, #60]	; (800bc60 <xTaskIncrementTick+0x170>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	3301      	adds	r3, #1
 800bc28:	4a0d      	ldr	r2, [pc, #52]	; (800bc60 <xTaskIncrementTick+0x170>)
 800bc2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bc2c:	697b      	ldr	r3, [r7, #20]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3718      	adds	r7, #24
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	20000dd4 	.word	0x20000dd4
 800bc3c:	20000db0 	.word	0x20000db0
 800bc40:	20000d64 	.word	0x20000d64
 800bc44:	20000d68 	.word	0x20000d68
 800bc48:	20000dc4 	.word	0x20000dc4
 800bc4c:	20000dcc 	.word	0x20000dcc
 800bc50:	20000db4 	.word	0x20000db4
 800bc54:	200008dc 	.word	0x200008dc
 800bc58:	200008d8 	.word	0x200008d8
 800bc5c:	20000dc0 	.word	0x20000dc0
 800bc60:	20000dbc 	.word	0x20000dbc

0800bc64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc6a:	4b28      	ldr	r3, [pc, #160]	; (800bd0c <vTaskSwitchContext+0xa8>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d003      	beq.n	800bc7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc72:	4b27      	ldr	r3, [pc, #156]	; (800bd10 <vTaskSwitchContext+0xac>)
 800bc74:	2201      	movs	r2, #1
 800bc76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc78:	e041      	b.n	800bcfe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bc7a:	4b25      	ldr	r3, [pc, #148]	; (800bd10 <vTaskSwitchContext+0xac>)
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc80:	4b24      	ldr	r3, [pc, #144]	; (800bd14 <vTaskSwitchContext+0xb0>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	60fb      	str	r3, [r7, #12]
 800bc86:	e010      	b.n	800bcaa <vTaskSwitchContext+0x46>
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d10a      	bne.n	800bca4 <vTaskSwitchContext+0x40>
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	607b      	str	r3, [r7, #4]
}
 800bca0:	bf00      	nop
 800bca2:	e7fe      	b.n	800bca2 <vTaskSwitchContext+0x3e>
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	3b01      	subs	r3, #1
 800bca8:	60fb      	str	r3, [r7, #12]
 800bcaa:	491b      	ldr	r1, [pc, #108]	; (800bd18 <vTaskSwitchContext+0xb4>)
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	4413      	add	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	440b      	add	r3, r1
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d0e4      	beq.n	800bc88 <vTaskSwitchContext+0x24>
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	4413      	add	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	4a13      	ldr	r2, [pc, #76]	; (800bd18 <vTaskSwitchContext+0xb4>)
 800bcca:	4413      	add	r3, r2
 800bccc:	60bb      	str	r3, [r7, #8]
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	685a      	ldr	r2, [r3, #4]
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	605a      	str	r2, [r3, #4]
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	685a      	ldr	r2, [r3, #4]
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	3308      	adds	r3, #8
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d104      	bne.n	800bcee <vTaskSwitchContext+0x8a>
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	685a      	ldr	r2, [r3, #4]
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	605a      	str	r2, [r3, #4]
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	4a09      	ldr	r2, [pc, #36]	; (800bd1c <vTaskSwitchContext+0xb8>)
 800bcf6:	6013      	str	r3, [r2, #0]
 800bcf8:	4a06      	ldr	r2, [pc, #24]	; (800bd14 <vTaskSwitchContext+0xb0>)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	6013      	str	r3, [r2, #0]
}
 800bcfe:	bf00      	nop
 800bd00:	3714      	adds	r7, #20
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	20000dd4 	.word	0x20000dd4
 800bd10:	20000dc0 	.word	0x20000dc0
 800bd14:	20000db4 	.word	0x20000db4
 800bd18:	200008dc 	.word	0x200008dc
 800bd1c:	200008d8 	.word	0x200008d8

0800bd20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10a      	bne.n	800bd46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	60fb      	str	r3, [r7, #12]
}
 800bd42:	bf00      	nop
 800bd44:	e7fe      	b.n	800bd44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd46:	4b07      	ldr	r3, [pc, #28]	; (800bd64 <vTaskPlaceOnEventList+0x44>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	3318      	adds	r3, #24
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f7fe fd81 	bl	800a856 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd54:	2101      	movs	r1, #1
 800bd56:	6838      	ldr	r0, [r7, #0]
 800bd58:	f000 fa7c 	bl	800c254 <prvAddCurrentTaskToDelayedList>
}
 800bd5c:	bf00      	nop
 800bd5e:	3710      	adds	r7, #16
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	200008d8 	.word	0x200008d8

0800bd68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b086      	sub	sp, #24
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10a      	bne.n	800bd90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	617b      	str	r3, [r7, #20]
}
 800bd8c:	bf00      	nop
 800bd8e:	e7fe      	b.n	800bd8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd90:	4b0a      	ldr	r3, [pc, #40]	; (800bdbc <vTaskPlaceOnEventListRestricted+0x54>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	3318      	adds	r3, #24
 800bd96:	4619      	mov	r1, r3
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f7fe fd38 	bl	800a80e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d002      	beq.n	800bdaa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bda4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bda8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bdaa:	6879      	ldr	r1, [r7, #4]
 800bdac:	68b8      	ldr	r0, [r7, #8]
 800bdae:	f000 fa51 	bl	800c254 <prvAddCurrentTaskToDelayedList>
	}
 800bdb2:	bf00      	nop
 800bdb4:	3718      	adds	r7, #24
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	200008d8 	.word	0x200008d8

0800bdc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b086      	sub	sp, #24
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d10a      	bne.n	800bdec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdda:	f383 8811 	msr	BASEPRI, r3
 800bdde:	f3bf 8f6f 	isb	sy
 800bde2:	f3bf 8f4f 	dsb	sy
 800bde6:	60fb      	str	r3, [r7, #12]
}
 800bde8:	bf00      	nop
 800bdea:	e7fe      	b.n	800bdea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	3318      	adds	r3, #24
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7fe fd69 	bl	800a8c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdf6:	4b1e      	ldr	r3, [pc, #120]	; (800be70 <xTaskRemoveFromEventList+0xb0>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d11d      	bne.n	800be3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	3304      	adds	r3, #4
 800be02:	4618      	mov	r0, r3
 800be04:	f7fe fd60 	bl	800a8c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be0c:	4b19      	ldr	r3, [pc, #100]	; (800be74 <xTaskRemoveFromEventList+0xb4>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	429a      	cmp	r2, r3
 800be12:	d903      	bls.n	800be1c <xTaskRemoveFromEventList+0x5c>
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be18:	4a16      	ldr	r2, [pc, #88]	; (800be74 <xTaskRemoveFromEventList+0xb4>)
 800be1a:	6013      	str	r3, [r2, #0]
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be20:	4613      	mov	r3, r2
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	4413      	add	r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4a13      	ldr	r2, [pc, #76]	; (800be78 <xTaskRemoveFromEventList+0xb8>)
 800be2a:	441a      	add	r2, r3
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	3304      	adds	r3, #4
 800be30:	4619      	mov	r1, r3
 800be32:	4610      	mov	r0, r2
 800be34:	f7fe fceb 	bl	800a80e <vListInsertEnd>
 800be38:	e005      	b.n	800be46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	3318      	adds	r3, #24
 800be3e:	4619      	mov	r1, r3
 800be40:	480e      	ldr	r0, [pc, #56]	; (800be7c <xTaskRemoveFromEventList+0xbc>)
 800be42:	f7fe fce4 	bl	800a80e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4a:	4b0d      	ldr	r3, [pc, #52]	; (800be80 <xTaskRemoveFromEventList+0xc0>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be50:	429a      	cmp	r2, r3
 800be52:	d905      	bls.n	800be60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be54:	2301      	movs	r3, #1
 800be56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be58:	4b0a      	ldr	r3, [pc, #40]	; (800be84 <xTaskRemoveFromEventList+0xc4>)
 800be5a:	2201      	movs	r2, #1
 800be5c:	601a      	str	r2, [r3, #0]
 800be5e:	e001      	b.n	800be64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800be60:	2300      	movs	r3, #0
 800be62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be64:	697b      	ldr	r3, [r7, #20]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	20000dd4 	.word	0x20000dd4
 800be74:	20000db4 	.word	0x20000db4
 800be78:	200008dc 	.word	0x200008dc
 800be7c:	20000d6c 	.word	0x20000d6c
 800be80:	200008d8 	.word	0x200008d8
 800be84:	20000dc0 	.word	0x20000dc0

0800be88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be88:	b480      	push	{r7}
 800be8a:	b083      	sub	sp, #12
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be90:	4b06      	ldr	r3, [pc, #24]	; (800beac <vTaskInternalSetTimeOutState+0x24>)
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be98:	4b05      	ldr	r3, [pc, #20]	; (800beb0 <vTaskInternalSetTimeOutState+0x28>)
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	605a      	str	r2, [r3, #4]
}
 800bea0:	bf00      	nop
 800bea2:	370c      	adds	r7, #12
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	20000dc4 	.word	0x20000dc4
 800beb0:	20000db0 	.word	0x20000db0

0800beb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b088      	sub	sp, #32
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10a      	bne.n	800beda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec8:	f383 8811 	msr	BASEPRI, r3
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	613b      	str	r3, [r7, #16]
}
 800bed6:	bf00      	nop
 800bed8:	e7fe      	b.n	800bed8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d10a      	bne.n	800bef6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee4:	f383 8811 	msr	BASEPRI, r3
 800bee8:	f3bf 8f6f 	isb	sy
 800beec:	f3bf 8f4f 	dsb	sy
 800bef0:	60fb      	str	r3, [r7, #12]
}
 800bef2:	bf00      	nop
 800bef4:	e7fe      	b.n	800bef4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bef6:	f000 fe7d 	bl	800cbf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800befa:	4b1d      	ldr	r3, [pc, #116]	; (800bf70 <xTaskCheckForTimeOut+0xbc>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	69ba      	ldr	r2, [r7, #24]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf12:	d102      	bne.n	800bf1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf14:	2300      	movs	r3, #0
 800bf16:	61fb      	str	r3, [r7, #28]
 800bf18:	e023      	b.n	800bf62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	4b15      	ldr	r3, [pc, #84]	; (800bf74 <xTaskCheckForTimeOut+0xc0>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d007      	beq.n	800bf36 <xTaskCheckForTimeOut+0x82>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	69ba      	ldr	r2, [r7, #24]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d302      	bcc.n	800bf36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf30:	2301      	movs	r3, #1
 800bf32:	61fb      	str	r3, [r7, #28]
 800bf34:	e015      	b.n	800bf62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	697a      	ldr	r2, [r7, #20]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d20b      	bcs.n	800bf58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	1ad2      	subs	r2, r2, r3
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f7ff ff9b 	bl	800be88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf52:	2300      	movs	r3, #0
 800bf54:	61fb      	str	r3, [r7, #28]
 800bf56:	e004      	b.n	800bf62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf62:	f000 fe77 	bl	800cc54 <vPortExitCritical>

	return xReturn;
 800bf66:	69fb      	ldr	r3, [r7, #28]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3720      	adds	r7, #32
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	20000db0 	.word	0x20000db0
 800bf74:	20000dc4 	.word	0x20000dc4

0800bf78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf78:	b480      	push	{r7}
 800bf7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf7c:	4b03      	ldr	r3, [pc, #12]	; (800bf8c <vTaskMissedYield+0x14>)
 800bf7e:	2201      	movs	r2, #1
 800bf80:	601a      	str	r2, [r3, #0]
}
 800bf82:	bf00      	nop
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr
 800bf8c:	20000dc0 	.word	0x20000dc0

0800bf90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf98:	f000 f852 	bl	800c040 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf9c:	4b06      	ldr	r3, [pc, #24]	; (800bfb8 <prvIdleTask+0x28>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d9f9      	bls.n	800bf98 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bfa4:	4b05      	ldr	r3, [pc, #20]	; (800bfbc <prvIdleTask+0x2c>)
 800bfa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfaa:	601a      	str	r2, [r3, #0]
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bfb4:	e7f0      	b.n	800bf98 <prvIdleTask+0x8>
 800bfb6:	bf00      	nop
 800bfb8:	200008dc 	.word	0x200008dc
 800bfbc:	e000ed04 	.word	0xe000ed04

0800bfc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	607b      	str	r3, [r7, #4]
 800bfca:	e00c      	b.n	800bfe6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	4613      	mov	r3, r2
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	4413      	add	r3, r2
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	4a12      	ldr	r2, [pc, #72]	; (800c020 <prvInitialiseTaskLists+0x60>)
 800bfd8:	4413      	add	r3, r2
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7fe fbea 	bl	800a7b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	607b      	str	r3, [r7, #4]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2b37      	cmp	r3, #55	; 0x37
 800bfea:	d9ef      	bls.n	800bfcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bfec:	480d      	ldr	r0, [pc, #52]	; (800c024 <prvInitialiseTaskLists+0x64>)
 800bfee:	f7fe fbe1 	bl	800a7b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bff2:	480d      	ldr	r0, [pc, #52]	; (800c028 <prvInitialiseTaskLists+0x68>)
 800bff4:	f7fe fbde 	bl	800a7b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bff8:	480c      	ldr	r0, [pc, #48]	; (800c02c <prvInitialiseTaskLists+0x6c>)
 800bffa:	f7fe fbdb 	bl	800a7b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bffe:	480c      	ldr	r0, [pc, #48]	; (800c030 <prvInitialiseTaskLists+0x70>)
 800c000:	f7fe fbd8 	bl	800a7b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c004:	480b      	ldr	r0, [pc, #44]	; (800c034 <prvInitialiseTaskLists+0x74>)
 800c006:	f7fe fbd5 	bl	800a7b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c00a:	4b0b      	ldr	r3, [pc, #44]	; (800c038 <prvInitialiseTaskLists+0x78>)
 800c00c:	4a05      	ldr	r2, [pc, #20]	; (800c024 <prvInitialiseTaskLists+0x64>)
 800c00e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c010:	4b0a      	ldr	r3, [pc, #40]	; (800c03c <prvInitialiseTaskLists+0x7c>)
 800c012:	4a05      	ldr	r2, [pc, #20]	; (800c028 <prvInitialiseTaskLists+0x68>)
 800c014:	601a      	str	r2, [r3, #0]
}
 800c016:	bf00      	nop
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	200008dc 	.word	0x200008dc
 800c024:	20000d3c 	.word	0x20000d3c
 800c028:	20000d50 	.word	0x20000d50
 800c02c:	20000d6c 	.word	0x20000d6c
 800c030:	20000d80 	.word	0x20000d80
 800c034:	20000d98 	.word	0x20000d98
 800c038:	20000d64 	.word	0x20000d64
 800c03c:	20000d68 	.word	0x20000d68

0800c040 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c046:	e019      	b.n	800c07c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c048:	f000 fdd4 	bl	800cbf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c04c:	4b10      	ldr	r3, [pc, #64]	; (800c090 <prvCheckTasksWaitingTermination+0x50>)
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	3304      	adds	r3, #4
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fe fc35 	bl	800a8c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c05e:	4b0d      	ldr	r3, [pc, #52]	; (800c094 <prvCheckTasksWaitingTermination+0x54>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	3b01      	subs	r3, #1
 800c064:	4a0b      	ldr	r2, [pc, #44]	; (800c094 <prvCheckTasksWaitingTermination+0x54>)
 800c066:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c068:	4b0b      	ldr	r3, [pc, #44]	; (800c098 <prvCheckTasksWaitingTermination+0x58>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	3b01      	subs	r3, #1
 800c06e:	4a0a      	ldr	r2, [pc, #40]	; (800c098 <prvCheckTasksWaitingTermination+0x58>)
 800c070:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c072:	f000 fdef 	bl	800cc54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 f810 	bl	800c09c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c07c:	4b06      	ldr	r3, [pc, #24]	; (800c098 <prvCheckTasksWaitingTermination+0x58>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1e1      	bne.n	800c048 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c084:	bf00      	nop
 800c086:	bf00      	nop
 800c088:	3708      	adds	r7, #8
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	20000d80 	.word	0x20000d80
 800c094:	20000dac 	.word	0x20000dac
 800c098:	20000d94 	.word	0x20000d94

0800c09c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d108      	bne.n	800c0c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f000 ff8c 	bl	800cfd0 <vPortFree>
				vPortFree( pxTCB );
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 ff89 	bl	800cfd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c0be:	e018      	b.n	800c0f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d103      	bne.n	800c0d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 ff80 	bl	800cfd0 <vPortFree>
	}
 800c0d0:	e00f      	b.n	800c0f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c0d8:	2b02      	cmp	r3, #2
 800c0da:	d00a      	beq.n	800c0f2 <prvDeleteTCB+0x56>
	__asm volatile
 800c0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e0:	f383 8811 	msr	BASEPRI, r3
 800c0e4:	f3bf 8f6f 	isb	sy
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	60fb      	str	r3, [r7, #12]
}
 800c0ee:	bf00      	nop
 800c0f0:	e7fe      	b.n	800c0f0 <prvDeleteTCB+0x54>
	}
 800c0f2:	bf00      	nop
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
	...

0800c0fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c102:	4b0c      	ldr	r3, [pc, #48]	; (800c134 <prvResetNextTaskUnblockTime+0x38>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d104      	bne.n	800c116 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c10c:	4b0a      	ldr	r3, [pc, #40]	; (800c138 <prvResetNextTaskUnblockTime+0x3c>)
 800c10e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c112:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c114:	e008      	b.n	800c128 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c116:	4b07      	ldr	r3, [pc, #28]	; (800c134 <prvResetNextTaskUnblockTime+0x38>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	4a04      	ldr	r2, [pc, #16]	; (800c138 <prvResetNextTaskUnblockTime+0x3c>)
 800c126:	6013      	str	r3, [r2, #0]
}
 800c128:	bf00      	nop
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr
 800c134:	20000d64 	.word	0x20000d64
 800c138:	20000dcc 	.word	0x20000dcc

0800c13c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c142:	4b0b      	ldr	r3, [pc, #44]	; (800c170 <xTaskGetSchedulerState+0x34>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d102      	bne.n	800c150 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c14a:	2301      	movs	r3, #1
 800c14c:	607b      	str	r3, [r7, #4]
 800c14e:	e008      	b.n	800c162 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c150:	4b08      	ldr	r3, [pc, #32]	; (800c174 <xTaskGetSchedulerState+0x38>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d102      	bne.n	800c15e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c158:	2302      	movs	r3, #2
 800c15a:	607b      	str	r3, [r7, #4]
 800c15c:	e001      	b.n	800c162 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c15e:	2300      	movs	r3, #0
 800c160:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c162:	687b      	ldr	r3, [r7, #4]
	}
 800c164:	4618      	mov	r0, r3
 800c166:	370c      	adds	r7, #12
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr
 800c170:	20000db8 	.word	0x20000db8
 800c174:	20000dd4 	.word	0x20000dd4

0800c178 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c184:	2300      	movs	r3, #0
 800c186:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d056      	beq.n	800c23c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c18e:	4b2e      	ldr	r3, [pc, #184]	; (800c248 <xTaskPriorityDisinherit+0xd0>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	693a      	ldr	r2, [r7, #16]
 800c194:	429a      	cmp	r2, r3
 800c196:	d00a      	beq.n	800c1ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19c:	f383 8811 	msr	BASEPRI, r3
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	60fb      	str	r3, [r7, #12]
}
 800c1aa:	bf00      	nop
 800c1ac:	e7fe      	b.n	800c1ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d10a      	bne.n	800c1cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ba:	f383 8811 	msr	BASEPRI, r3
 800c1be:	f3bf 8f6f 	isb	sy
 800c1c2:	f3bf 8f4f 	dsb	sy
 800c1c6:	60bb      	str	r3, [r7, #8]
}
 800c1c8:	bf00      	nop
 800c1ca:	e7fe      	b.n	800c1ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1d0:	1e5a      	subs	r2, r3, #1
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d02c      	beq.n	800c23c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d128      	bne.n	800c23c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	3304      	adds	r3, #4
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fe fb6a 	bl	800a8c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c200:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c20c:	4b0f      	ldr	r3, [pc, #60]	; (800c24c <xTaskPriorityDisinherit+0xd4>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	429a      	cmp	r2, r3
 800c212:	d903      	bls.n	800c21c <xTaskPriorityDisinherit+0xa4>
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c218:	4a0c      	ldr	r2, [pc, #48]	; (800c24c <xTaskPriorityDisinherit+0xd4>)
 800c21a:	6013      	str	r3, [r2, #0]
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c220:	4613      	mov	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	4413      	add	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	4a09      	ldr	r2, [pc, #36]	; (800c250 <xTaskPriorityDisinherit+0xd8>)
 800c22a:	441a      	add	r2, r3
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	3304      	adds	r3, #4
 800c230:	4619      	mov	r1, r3
 800c232:	4610      	mov	r0, r2
 800c234:	f7fe faeb 	bl	800a80e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c238:	2301      	movs	r3, #1
 800c23a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c23c:	697b      	ldr	r3, [r7, #20]
	}
 800c23e:	4618      	mov	r0, r3
 800c240:	3718      	adds	r7, #24
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	200008d8 	.word	0x200008d8
 800c24c:	20000db4 	.word	0x20000db4
 800c250:	200008dc 	.word	0x200008dc

0800c254 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c25e:	4b21      	ldr	r3, [pc, #132]	; (800c2e4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c264:	4b20      	ldr	r3, [pc, #128]	; (800c2e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	3304      	adds	r3, #4
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fe fb2c 	bl	800a8c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c276:	d10a      	bne.n	800c28e <prvAddCurrentTaskToDelayedList+0x3a>
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d007      	beq.n	800c28e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c27e:	4b1a      	ldr	r3, [pc, #104]	; (800c2e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	3304      	adds	r3, #4
 800c284:	4619      	mov	r1, r3
 800c286:	4819      	ldr	r0, [pc, #100]	; (800c2ec <prvAddCurrentTaskToDelayedList+0x98>)
 800c288:	f7fe fac1 	bl	800a80e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c28c:	e026      	b.n	800c2dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	4413      	add	r3, r2
 800c294:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c296:	4b14      	ldr	r3, [pc, #80]	; (800c2e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	68ba      	ldr	r2, [r7, #8]
 800c29c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c29e:	68ba      	ldr	r2, [r7, #8]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d209      	bcs.n	800c2ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2a6:	4b12      	ldr	r3, [pc, #72]	; (800c2f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	4b0f      	ldr	r3, [pc, #60]	; (800c2e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	3304      	adds	r3, #4
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	4610      	mov	r0, r2
 800c2b4:	f7fe facf 	bl	800a856 <vListInsert>
}
 800c2b8:	e010      	b.n	800c2dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2ba:	4b0e      	ldr	r3, [pc, #56]	; (800c2f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	4b0a      	ldr	r3, [pc, #40]	; (800c2e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	3304      	adds	r3, #4
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	4610      	mov	r0, r2
 800c2c8:	f7fe fac5 	bl	800a856 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c2cc:	4b0a      	ldr	r3, [pc, #40]	; (800c2f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d202      	bcs.n	800c2dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c2d6:	4a08      	ldr	r2, [pc, #32]	; (800c2f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	6013      	str	r3, [r2, #0]
}
 800c2dc:	bf00      	nop
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	20000db0 	.word	0x20000db0
 800c2e8:	200008d8 	.word	0x200008d8
 800c2ec:	20000d98 	.word	0x20000d98
 800c2f0:	20000d68 	.word	0x20000d68
 800c2f4:	20000d64 	.word	0x20000d64
 800c2f8:	20000dcc 	.word	0x20000dcc

0800c2fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b08a      	sub	sp, #40	; 0x28
 800c300:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c302:	2300      	movs	r3, #0
 800c304:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c306:	f000 fb07 	bl	800c918 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c30a:	4b1c      	ldr	r3, [pc, #112]	; (800c37c <xTimerCreateTimerTask+0x80>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d021      	beq.n	800c356 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c312:	2300      	movs	r3, #0
 800c314:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c316:	2300      	movs	r3, #0
 800c318:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c31a:	1d3a      	adds	r2, r7, #4
 800c31c:	f107 0108 	add.w	r1, r7, #8
 800c320:	f107 030c 	add.w	r3, r7, #12
 800c324:	4618      	mov	r0, r3
 800c326:	f7fe fa2b 	bl	800a780 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c32a:	6879      	ldr	r1, [r7, #4]
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	9202      	str	r2, [sp, #8]
 800c332:	9301      	str	r3, [sp, #4]
 800c334:	2302      	movs	r3, #2
 800c336:	9300      	str	r3, [sp, #0]
 800c338:	2300      	movs	r3, #0
 800c33a:	460a      	mov	r2, r1
 800c33c:	4910      	ldr	r1, [pc, #64]	; (800c380 <xTimerCreateTimerTask+0x84>)
 800c33e:	4811      	ldr	r0, [pc, #68]	; (800c384 <xTimerCreateTimerTask+0x88>)
 800c340:	f7fe ffd8 	bl	800b2f4 <xTaskCreateStatic>
 800c344:	4603      	mov	r3, r0
 800c346:	4a10      	ldr	r2, [pc, #64]	; (800c388 <xTimerCreateTimerTask+0x8c>)
 800c348:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c34a:	4b0f      	ldr	r3, [pc, #60]	; (800c388 <xTimerCreateTimerTask+0x8c>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d001      	beq.n	800c356 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c352:	2301      	movs	r3, #1
 800c354:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10a      	bne.n	800c372 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c360:	f383 8811 	msr	BASEPRI, r3
 800c364:	f3bf 8f6f 	isb	sy
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	613b      	str	r3, [r7, #16]
}
 800c36e:	bf00      	nop
 800c370:	e7fe      	b.n	800c370 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c372:	697b      	ldr	r3, [r7, #20]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3718      	adds	r7, #24
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	20000e08 	.word	0x20000e08
 800c380:	08013b64 	.word	0x08013b64
 800c384:	0800c4c1 	.word	0x0800c4c1
 800c388:	20000e0c 	.word	0x20000e0c

0800c38c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b08a      	sub	sp, #40	; 0x28
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	607a      	str	r2, [r7, #4]
 800c398:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c39a:	2300      	movs	r3, #0
 800c39c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d10a      	bne.n	800c3ba <xTimerGenericCommand+0x2e>
	__asm volatile
 800c3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	623b      	str	r3, [r7, #32]
}
 800c3b6:	bf00      	nop
 800c3b8:	e7fe      	b.n	800c3b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c3ba:	4b1a      	ldr	r3, [pc, #104]	; (800c424 <xTimerGenericCommand+0x98>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d02a      	beq.n	800c418 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	2b05      	cmp	r3, #5
 800c3d2:	dc18      	bgt.n	800c406 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c3d4:	f7ff feb2 	bl	800c13c <xTaskGetSchedulerState>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d109      	bne.n	800c3f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c3de:	4b11      	ldr	r3, [pc, #68]	; (800c424 <xTimerGenericCommand+0x98>)
 800c3e0:	6818      	ldr	r0, [r3, #0]
 800c3e2:	f107 0110 	add.w	r1, r7, #16
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ea:	f7fe fb9b 	bl	800ab24 <xQueueGenericSend>
 800c3ee:	6278      	str	r0, [r7, #36]	; 0x24
 800c3f0:	e012      	b.n	800c418 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c3f2:	4b0c      	ldr	r3, [pc, #48]	; (800c424 <xTimerGenericCommand+0x98>)
 800c3f4:	6818      	ldr	r0, [r3, #0]
 800c3f6:	f107 0110 	add.w	r1, r7, #16
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f7fe fb91 	bl	800ab24 <xQueueGenericSend>
 800c402:	6278      	str	r0, [r7, #36]	; 0x24
 800c404:	e008      	b.n	800c418 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c406:	4b07      	ldr	r3, [pc, #28]	; (800c424 <xTimerGenericCommand+0x98>)
 800c408:	6818      	ldr	r0, [r3, #0]
 800c40a:	f107 0110 	add.w	r1, r7, #16
 800c40e:	2300      	movs	r3, #0
 800c410:	683a      	ldr	r2, [r7, #0]
 800c412:	f7fe fc85 	bl	800ad20 <xQueueGenericSendFromISR>
 800c416:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3728      	adds	r7, #40	; 0x28
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	20000e08 	.word	0x20000e08

0800c428 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b088      	sub	sp, #32
 800c42c:	af02      	add	r7, sp, #8
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c432:	4b22      	ldr	r3, [pc, #136]	; (800c4bc <prvProcessExpiredTimer+0x94>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	3304      	adds	r3, #4
 800c440:	4618      	mov	r0, r3
 800c442:	f7fe fa41 	bl	800a8c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c44c:	f003 0304 	and.w	r3, r3, #4
 800c450:	2b00      	cmp	r3, #0
 800c452:	d022      	beq.n	800c49a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	699a      	ldr	r2, [r3, #24]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	18d1      	adds	r1, r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	6978      	ldr	r0, [r7, #20]
 800c462:	f000 f8d1 	bl	800c608 <prvInsertTimerInActiveList>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d01f      	beq.n	800c4ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c46c:	2300      	movs	r3, #0
 800c46e:	9300      	str	r3, [sp, #0]
 800c470:	2300      	movs	r3, #0
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	2100      	movs	r1, #0
 800c476:	6978      	ldr	r0, [r7, #20]
 800c478:	f7ff ff88 	bl	800c38c <xTimerGenericCommand>
 800c47c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d113      	bne.n	800c4ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	60fb      	str	r3, [r7, #12]
}
 800c496:	bf00      	nop
 800c498:	e7fe      	b.n	800c498 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4a0:	f023 0301 	bic.w	r3, r3, #1
 800c4a4:	b2da      	uxtb	r2, r3
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	6a1b      	ldr	r3, [r3, #32]
 800c4b0:	6978      	ldr	r0, [r7, #20]
 800c4b2:	4798      	blx	r3
}
 800c4b4:	bf00      	nop
 800c4b6:	3718      	adds	r7, #24
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	20000e00 	.word	0x20000e00

0800c4c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4c8:	f107 0308 	add.w	r3, r7, #8
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f000 f857 	bl	800c580 <prvGetNextExpireTime>
 800c4d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f000 f803 	bl	800c4e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c4de:	f000 f8d5 	bl	800c68c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4e2:	e7f1      	b.n	800c4c8 <prvTimerTask+0x8>

0800c4e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c4ee:	f7ff fa43 	bl	800b978 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c4f2:	f107 0308 	add.w	r3, r7, #8
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f000 f866 	bl	800c5c8 <prvSampleTimeNow>
 800c4fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d130      	bne.n	800c566 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d10a      	bne.n	800c520 <prvProcessTimerOrBlockTask+0x3c>
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d806      	bhi.n	800c520 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c512:	f7ff fa3f 	bl	800b994 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c516:	68f9      	ldr	r1, [r7, #12]
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7ff ff85 	bl	800c428 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c51e:	e024      	b.n	800c56a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d008      	beq.n	800c538 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c526:	4b13      	ldr	r3, [pc, #76]	; (800c574 <prvProcessTimerOrBlockTask+0x90>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d101      	bne.n	800c534 <prvProcessTimerOrBlockTask+0x50>
 800c530:	2301      	movs	r3, #1
 800c532:	e000      	b.n	800c536 <prvProcessTimerOrBlockTask+0x52>
 800c534:	2300      	movs	r3, #0
 800c536:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c538:	4b0f      	ldr	r3, [pc, #60]	; (800c578 <prvProcessTimerOrBlockTask+0x94>)
 800c53a:	6818      	ldr	r0, [r3, #0]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	4619      	mov	r1, r3
 800c546:	f7fe fea1 	bl	800b28c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c54a:	f7ff fa23 	bl	800b994 <xTaskResumeAll>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d10a      	bne.n	800c56a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c554:	4b09      	ldr	r3, [pc, #36]	; (800c57c <prvProcessTimerOrBlockTask+0x98>)
 800c556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c55a:	601a      	str	r2, [r3, #0]
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	f3bf 8f6f 	isb	sy
}
 800c564:	e001      	b.n	800c56a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c566:	f7ff fa15 	bl	800b994 <xTaskResumeAll>
}
 800c56a:	bf00      	nop
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	20000e04 	.word	0x20000e04
 800c578:	20000e08 	.word	0x20000e08
 800c57c:	e000ed04 	.word	0xe000ed04

0800c580 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c580:	b480      	push	{r7}
 800c582:	b085      	sub	sp, #20
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c588:	4b0e      	ldr	r3, [pc, #56]	; (800c5c4 <prvGetNextExpireTime+0x44>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d101      	bne.n	800c596 <prvGetNextExpireTime+0x16>
 800c592:	2201      	movs	r2, #1
 800c594:	e000      	b.n	800c598 <prvGetNextExpireTime+0x18>
 800c596:	2200      	movs	r2, #0
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d105      	bne.n	800c5b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5a4:	4b07      	ldr	r3, [pc, #28]	; (800c5c4 <prvGetNextExpireTime+0x44>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	60fb      	str	r3, [r7, #12]
 800c5ae:	e001      	b.n	800c5b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3714      	adds	r7, #20
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	20000e00 	.word	0x20000e00

0800c5c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c5d0:	f7ff fa7e 	bl	800bad0 <xTaskGetTickCount>
 800c5d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c5d6:	4b0b      	ldr	r3, [pc, #44]	; (800c604 <prvSampleTimeNow+0x3c>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d205      	bcs.n	800c5ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c5e0:	f000 f936 	bl	800c850 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	601a      	str	r2, [r3, #0]
 800c5ea:	e002      	b.n	800c5f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c5f2:	4a04      	ldr	r2, [pc, #16]	; (800c604 <prvSampleTimeNow+0x3c>)
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	20000e10 	.word	0x20000e10

0800c608 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b086      	sub	sp, #24
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
 800c614:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c616:	2300      	movs	r3, #0
 800c618:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c626:	68ba      	ldr	r2, [r7, #8]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d812      	bhi.n	800c654 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	1ad2      	subs	r2, r2, r3
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	699b      	ldr	r3, [r3, #24]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d302      	bcc.n	800c642 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c63c:	2301      	movs	r3, #1
 800c63e:	617b      	str	r3, [r7, #20]
 800c640:	e01b      	b.n	800c67a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c642:	4b10      	ldr	r3, [pc, #64]	; (800c684 <prvInsertTimerInActiveList+0x7c>)
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	3304      	adds	r3, #4
 800c64a:	4619      	mov	r1, r3
 800c64c:	4610      	mov	r0, r2
 800c64e:	f7fe f902 	bl	800a856 <vListInsert>
 800c652:	e012      	b.n	800c67a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d206      	bcs.n	800c66a <prvInsertTimerInActiveList+0x62>
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	429a      	cmp	r2, r3
 800c662:	d302      	bcc.n	800c66a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c664:	2301      	movs	r3, #1
 800c666:	617b      	str	r3, [r7, #20]
 800c668:	e007      	b.n	800c67a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c66a:	4b07      	ldr	r3, [pc, #28]	; (800c688 <prvInsertTimerInActiveList+0x80>)
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	3304      	adds	r3, #4
 800c672:	4619      	mov	r1, r3
 800c674:	4610      	mov	r0, r2
 800c676:	f7fe f8ee 	bl	800a856 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c67a:	697b      	ldr	r3, [r7, #20]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3718      	adds	r7, #24
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	20000e04 	.word	0x20000e04
 800c688:	20000e00 	.word	0x20000e00

0800c68c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b08e      	sub	sp, #56	; 0x38
 800c690:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c692:	e0ca      	b.n	800c82a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	da18      	bge.n	800c6cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c69a:	1d3b      	adds	r3, r7, #4
 800c69c:	3304      	adds	r3, #4
 800c69e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d10a      	bne.n	800c6bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6aa:	f383 8811 	msr	BASEPRI, r3
 800c6ae:	f3bf 8f6f 	isb	sy
 800c6b2:	f3bf 8f4f 	dsb	sy
 800c6b6:	61fb      	str	r3, [r7, #28]
}
 800c6b8:	bf00      	nop
 800c6ba:	e7fe      	b.n	800c6ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6c2:	6850      	ldr	r0, [r2, #4]
 800c6c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6c6:	6892      	ldr	r2, [r2, #8]
 800c6c8:	4611      	mov	r1, r2
 800c6ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f2c0 80aa 	blt.w	800c828 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6da:	695b      	ldr	r3, [r3, #20]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d004      	beq.n	800c6ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e2:	3304      	adds	r3, #4
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7fe f8ef 	bl	800a8c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c6ea:	463b      	mov	r3, r7
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7ff ff6b 	bl	800c5c8 <prvSampleTimeNow>
 800c6f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2b09      	cmp	r3, #9
 800c6f8:	f200 8097 	bhi.w	800c82a <prvProcessReceivedCommands+0x19e>
 800c6fc:	a201      	add	r2, pc, #4	; (adr r2, 800c704 <prvProcessReceivedCommands+0x78>)
 800c6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c702:	bf00      	nop
 800c704:	0800c72d 	.word	0x0800c72d
 800c708:	0800c72d 	.word	0x0800c72d
 800c70c:	0800c72d 	.word	0x0800c72d
 800c710:	0800c7a1 	.word	0x0800c7a1
 800c714:	0800c7b5 	.word	0x0800c7b5
 800c718:	0800c7ff 	.word	0x0800c7ff
 800c71c:	0800c72d 	.word	0x0800c72d
 800c720:	0800c72d 	.word	0x0800c72d
 800c724:	0800c7a1 	.word	0x0800c7a1
 800c728:	0800c7b5 	.word	0x0800c7b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c732:	f043 0301 	orr.w	r3, r3, #1
 800c736:	b2da      	uxtb	r2, r3
 800c738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c742:	699b      	ldr	r3, [r3, #24]
 800c744:	18d1      	adds	r1, r2, r3
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c74a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c74c:	f7ff ff5c 	bl	800c608 <prvInsertTimerInActiveList>
 800c750:	4603      	mov	r3, r0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d069      	beq.n	800c82a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c758:	6a1b      	ldr	r3, [r3, #32]
 800c75a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c75c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c764:	f003 0304 	and.w	r3, r3, #4
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d05e      	beq.n	800c82a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c76c:	68ba      	ldr	r2, [r7, #8]
 800c76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c770:	699b      	ldr	r3, [r3, #24]
 800c772:	441a      	add	r2, r3
 800c774:	2300      	movs	r3, #0
 800c776:	9300      	str	r3, [sp, #0]
 800c778:	2300      	movs	r3, #0
 800c77a:	2100      	movs	r1, #0
 800c77c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c77e:	f7ff fe05 	bl	800c38c <xTimerGenericCommand>
 800c782:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c784:	6a3b      	ldr	r3, [r7, #32]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d14f      	bne.n	800c82a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78e:	f383 8811 	msr	BASEPRI, r3
 800c792:	f3bf 8f6f 	isb	sy
 800c796:	f3bf 8f4f 	dsb	sy
 800c79a:	61bb      	str	r3, [r7, #24]
}
 800c79c:	bf00      	nop
 800c79e:	e7fe      	b.n	800c79e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7a6:	f023 0301 	bic.w	r3, r3, #1
 800c7aa:	b2da      	uxtb	r2, r3
 800c7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c7b2:	e03a      	b.n	800c82a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7ba:	f043 0301 	orr.w	r3, r3, #1
 800c7be:	b2da      	uxtb	r2, r3
 800c7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c7c6:	68ba      	ldr	r2, [r7, #8]
 800c7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ce:	699b      	ldr	r3, [r3, #24]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10a      	bne.n	800c7ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d8:	f383 8811 	msr	BASEPRI, r3
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	617b      	str	r3, [r7, #20]
}
 800c7e6:	bf00      	nop
 800c7e8:	e7fe      	b.n	800c7e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ec:	699a      	ldr	r2, [r3, #24]
 800c7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f0:	18d1      	adds	r1, r2, r3
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7f8:	f7ff ff06 	bl	800c608 <prvInsertTimerInActiveList>
					break;
 800c7fc:	e015      	b.n	800c82a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c804:	f003 0302 	and.w	r3, r3, #2
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d103      	bne.n	800c814 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c80c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c80e:	f000 fbdf 	bl	800cfd0 <vPortFree>
 800c812:	e00a      	b.n	800c82a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c81a:	f023 0301 	bic.w	r3, r3, #1
 800c81e:	b2da      	uxtb	r2, r3
 800c820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c826:	e000      	b.n	800c82a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c828:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c82a:	4b08      	ldr	r3, [pc, #32]	; (800c84c <prvProcessReceivedCommands+0x1c0>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	1d39      	adds	r1, r7, #4
 800c830:	2200      	movs	r2, #0
 800c832:	4618      	mov	r0, r3
 800c834:	f7fe fb10 	bl	800ae58 <xQueueReceive>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f47f af2a 	bne.w	800c694 <prvProcessReceivedCommands+0x8>
	}
}
 800c840:	bf00      	nop
 800c842:	bf00      	nop
 800c844:	3730      	adds	r7, #48	; 0x30
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	20000e08 	.word	0x20000e08

0800c850 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b088      	sub	sp, #32
 800c854:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c856:	e048      	b.n	800c8ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c858:	4b2d      	ldr	r3, [pc, #180]	; (800c910 <prvSwitchTimerLists+0xc0>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c862:	4b2b      	ldr	r3, [pc, #172]	; (800c910 <prvSwitchTimerLists+0xc0>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	3304      	adds	r3, #4
 800c870:	4618      	mov	r0, r3
 800c872:	f7fe f829 	bl	800a8c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6a1b      	ldr	r3, [r3, #32]
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c884:	f003 0304 	and.w	r3, r3, #4
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d02e      	beq.n	800c8ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	699b      	ldr	r3, [r3, #24]
 800c890:	693a      	ldr	r2, [r7, #16]
 800c892:	4413      	add	r3, r2
 800c894:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d90e      	bls.n	800c8bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	68ba      	ldr	r2, [r7, #8]
 800c8a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8aa:	4b19      	ldr	r3, [pc, #100]	; (800c910 <prvSwitchTimerLists+0xc0>)
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	3304      	adds	r3, #4
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	4610      	mov	r0, r2
 800c8b6:	f7fd ffce 	bl	800a856 <vListInsert>
 800c8ba:	e016      	b.n	800c8ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c8bc:	2300      	movs	r3, #0
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	693a      	ldr	r2, [r7, #16]
 800c8c4:	2100      	movs	r1, #0
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	f7ff fd60 	bl	800c38c <xTimerGenericCommand>
 800c8cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10a      	bne.n	800c8ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	603b      	str	r3, [r7, #0]
}
 800c8e6:	bf00      	nop
 800c8e8:	e7fe      	b.n	800c8e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8ea:	4b09      	ldr	r3, [pc, #36]	; (800c910 <prvSwitchTimerLists+0xc0>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1b1      	bne.n	800c858 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c8f4:	4b06      	ldr	r3, [pc, #24]	; (800c910 <prvSwitchTimerLists+0xc0>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c8fa:	4b06      	ldr	r3, [pc, #24]	; (800c914 <prvSwitchTimerLists+0xc4>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a04      	ldr	r2, [pc, #16]	; (800c910 <prvSwitchTimerLists+0xc0>)
 800c900:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c902:	4a04      	ldr	r2, [pc, #16]	; (800c914 <prvSwitchTimerLists+0xc4>)
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	6013      	str	r3, [r2, #0]
}
 800c908:	bf00      	nop
 800c90a:	3718      	adds	r7, #24
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	20000e00 	.word	0x20000e00
 800c914:	20000e04 	.word	0x20000e04

0800c918 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c91e:	f000 f969 	bl	800cbf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c922:	4b15      	ldr	r3, [pc, #84]	; (800c978 <prvCheckForValidListAndQueue+0x60>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d120      	bne.n	800c96c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c92a:	4814      	ldr	r0, [pc, #80]	; (800c97c <prvCheckForValidListAndQueue+0x64>)
 800c92c:	f7fd ff42 	bl	800a7b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c930:	4813      	ldr	r0, [pc, #76]	; (800c980 <prvCheckForValidListAndQueue+0x68>)
 800c932:	f7fd ff3f 	bl	800a7b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c936:	4b13      	ldr	r3, [pc, #76]	; (800c984 <prvCheckForValidListAndQueue+0x6c>)
 800c938:	4a10      	ldr	r2, [pc, #64]	; (800c97c <prvCheckForValidListAndQueue+0x64>)
 800c93a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c93c:	4b12      	ldr	r3, [pc, #72]	; (800c988 <prvCheckForValidListAndQueue+0x70>)
 800c93e:	4a10      	ldr	r2, [pc, #64]	; (800c980 <prvCheckForValidListAndQueue+0x68>)
 800c940:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c942:	2300      	movs	r3, #0
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	4b11      	ldr	r3, [pc, #68]	; (800c98c <prvCheckForValidListAndQueue+0x74>)
 800c948:	4a11      	ldr	r2, [pc, #68]	; (800c990 <prvCheckForValidListAndQueue+0x78>)
 800c94a:	2110      	movs	r1, #16
 800c94c:	200a      	movs	r0, #10
 800c94e:	f7fe f84d 	bl	800a9ec <xQueueGenericCreateStatic>
 800c952:	4603      	mov	r3, r0
 800c954:	4a08      	ldr	r2, [pc, #32]	; (800c978 <prvCheckForValidListAndQueue+0x60>)
 800c956:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c958:	4b07      	ldr	r3, [pc, #28]	; (800c978 <prvCheckForValidListAndQueue+0x60>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d005      	beq.n	800c96c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c960:	4b05      	ldr	r3, [pc, #20]	; (800c978 <prvCheckForValidListAndQueue+0x60>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	490b      	ldr	r1, [pc, #44]	; (800c994 <prvCheckForValidListAndQueue+0x7c>)
 800c966:	4618      	mov	r0, r3
 800c968:	f7fe fc66 	bl	800b238 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c96c:	f000 f972 	bl	800cc54 <vPortExitCritical>
}
 800c970:	bf00      	nop
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	20000e08 	.word	0x20000e08
 800c97c:	20000dd8 	.word	0x20000dd8
 800c980:	20000dec 	.word	0x20000dec
 800c984:	20000e00 	.word	0x20000e00
 800c988:	20000e04 	.word	0x20000e04
 800c98c:	20000eb4 	.word	0x20000eb4
 800c990:	20000e14 	.word	0x20000e14
 800c994:	08013b6c 	.word	0x08013b6c

0800c998 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c998:	b480      	push	{r7}
 800c99a:	b085      	sub	sp, #20
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	3b04      	subs	r3, #4
 800c9a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c9b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	3b04      	subs	r3, #4
 800c9b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	f023 0201 	bic.w	r2, r3, #1
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	3b04      	subs	r3, #4
 800c9c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c9c8:	4a0c      	ldr	r2, [pc, #48]	; (800c9fc <pxPortInitialiseStack+0x64>)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	3b14      	subs	r3, #20
 800c9d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	3b04      	subs	r3, #4
 800c9de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f06f 0202 	mvn.w	r2, #2
 800c9e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	3b20      	subs	r3, #32
 800c9ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3714      	adds	r7, #20
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr
 800c9fc:	0800ca01 	.word	0x0800ca01

0800ca00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca06:	2300      	movs	r3, #0
 800ca08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca0a:	4b12      	ldr	r3, [pc, #72]	; (800ca54 <prvTaskExitError+0x54>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca12:	d00a      	beq.n	800ca2a <prvTaskExitError+0x2a>
	__asm volatile
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	f383 8811 	msr	BASEPRI, r3
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	f3bf 8f4f 	dsb	sy
 800ca24:	60fb      	str	r3, [r7, #12]
}
 800ca26:	bf00      	nop
 800ca28:	e7fe      	b.n	800ca28 <prvTaskExitError+0x28>
	__asm volatile
 800ca2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2e:	f383 8811 	msr	BASEPRI, r3
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	f3bf 8f4f 	dsb	sy
 800ca3a:	60bb      	str	r3, [r7, #8]
}
 800ca3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca3e:	bf00      	nop
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d0fc      	beq.n	800ca40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ca46:	bf00      	nop
 800ca48:	bf00      	nop
 800ca4a:	3714      	adds	r7, #20
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr
 800ca54:	20000010 	.word	0x20000010
	...

0800ca60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca60:	4b07      	ldr	r3, [pc, #28]	; (800ca80 <pxCurrentTCBConst2>)
 800ca62:	6819      	ldr	r1, [r3, #0]
 800ca64:	6808      	ldr	r0, [r1, #0]
 800ca66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6a:	f380 8809 	msr	PSP, r0
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f04f 0000 	mov.w	r0, #0
 800ca76:	f380 8811 	msr	BASEPRI, r0
 800ca7a:	4770      	bx	lr
 800ca7c:	f3af 8000 	nop.w

0800ca80 <pxCurrentTCBConst2>:
 800ca80:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca84:	bf00      	nop
 800ca86:	bf00      	nop

0800ca88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca88:	4808      	ldr	r0, [pc, #32]	; (800caac <prvPortStartFirstTask+0x24>)
 800ca8a:	6800      	ldr	r0, [r0, #0]
 800ca8c:	6800      	ldr	r0, [r0, #0]
 800ca8e:	f380 8808 	msr	MSP, r0
 800ca92:	f04f 0000 	mov.w	r0, #0
 800ca96:	f380 8814 	msr	CONTROL, r0
 800ca9a:	b662      	cpsie	i
 800ca9c:	b661      	cpsie	f
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	df00      	svc	0
 800caa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800caaa:	bf00      	nop
 800caac:	e000ed08 	.word	0xe000ed08

0800cab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b086      	sub	sp, #24
 800cab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cab6:	4b46      	ldr	r3, [pc, #280]	; (800cbd0 <xPortStartScheduler+0x120>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a46      	ldr	r2, [pc, #280]	; (800cbd4 <xPortStartScheduler+0x124>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d10a      	bne.n	800cad6 <xPortStartScheduler+0x26>
	__asm volatile
 800cac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac4:	f383 8811 	msr	BASEPRI, r3
 800cac8:	f3bf 8f6f 	isb	sy
 800cacc:	f3bf 8f4f 	dsb	sy
 800cad0:	613b      	str	r3, [r7, #16]
}
 800cad2:	bf00      	nop
 800cad4:	e7fe      	b.n	800cad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cad6:	4b3e      	ldr	r3, [pc, #248]	; (800cbd0 <xPortStartScheduler+0x120>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a3f      	ldr	r2, [pc, #252]	; (800cbd8 <xPortStartScheduler+0x128>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d10a      	bne.n	800caf6 <xPortStartScheduler+0x46>
	__asm volatile
 800cae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	60fb      	str	r3, [r7, #12]
}
 800caf2:	bf00      	nop
 800caf4:	e7fe      	b.n	800caf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800caf6:	4b39      	ldr	r3, [pc, #228]	; (800cbdc <xPortStartScheduler+0x12c>)
 800caf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	22ff      	movs	r2, #255	; 0xff
 800cb06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb10:	78fb      	ldrb	r3, [r7, #3]
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb18:	b2da      	uxtb	r2, r3
 800cb1a:	4b31      	ldr	r3, [pc, #196]	; (800cbe0 <xPortStartScheduler+0x130>)
 800cb1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb1e:	4b31      	ldr	r3, [pc, #196]	; (800cbe4 <xPortStartScheduler+0x134>)
 800cb20:	2207      	movs	r2, #7
 800cb22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb24:	e009      	b.n	800cb3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cb26:	4b2f      	ldr	r3, [pc, #188]	; (800cbe4 <xPortStartScheduler+0x134>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	4a2d      	ldr	r2, [pc, #180]	; (800cbe4 <xPortStartScheduler+0x134>)
 800cb2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb30:	78fb      	ldrb	r3, [r7, #3]
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	005b      	lsls	r3, r3, #1
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb3a:	78fb      	ldrb	r3, [r7, #3]
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb42:	2b80      	cmp	r3, #128	; 0x80
 800cb44:	d0ef      	beq.n	800cb26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb46:	4b27      	ldr	r3, [pc, #156]	; (800cbe4 <xPortStartScheduler+0x134>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f1c3 0307 	rsb	r3, r3, #7
 800cb4e:	2b04      	cmp	r3, #4
 800cb50:	d00a      	beq.n	800cb68 <xPortStartScheduler+0xb8>
	__asm volatile
 800cb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	60bb      	str	r3, [r7, #8]
}
 800cb64:	bf00      	nop
 800cb66:	e7fe      	b.n	800cb66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb68:	4b1e      	ldr	r3, [pc, #120]	; (800cbe4 <xPortStartScheduler+0x134>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	021b      	lsls	r3, r3, #8
 800cb6e:	4a1d      	ldr	r2, [pc, #116]	; (800cbe4 <xPortStartScheduler+0x134>)
 800cb70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb72:	4b1c      	ldr	r3, [pc, #112]	; (800cbe4 <xPortStartScheduler+0x134>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb7a:	4a1a      	ldr	r2, [pc, #104]	; (800cbe4 <xPortStartScheduler+0x134>)
 800cb7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	b2da      	uxtb	r2, r3
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb86:	4b18      	ldr	r3, [pc, #96]	; (800cbe8 <xPortStartScheduler+0x138>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a17      	ldr	r2, [pc, #92]	; (800cbe8 <xPortStartScheduler+0x138>)
 800cb8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb92:	4b15      	ldr	r3, [pc, #84]	; (800cbe8 <xPortStartScheduler+0x138>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4a14      	ldr	r2, [pc, #80]	; (800cbe8 <xPortStartScheduler+0x138>)
 800cb98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cb9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb9e:	f000 f8dd 	bl	800cd5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cba2:	4b12      	ldr	r3, [pc, #72]	; (800cbec <xPortStartScheduler+0x13c>)
 800cba4:	2200      	movs	r2, #0
 800cba6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cba8:	f000 f8fc 	bl	800cda4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cbac:	4b10      	ldr	r3, [pc, #64]	; (800cbf0 <xPortStartScheduler+0x140>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a0f      	ldr	r2, [pc, #60]	; (800cbf0 <xPortStartScheduler+0x140>)
 800cbb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cbb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cbb8:	f7ff ff66 	bl	800ca88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cbbc:	f7ff f852 	bl	800bc64 <vTaskSwitchContext>
	prvTaskExitError();
 800cbc0:	f7ff ff1e 	bl	800ca00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3718      	adds	r7, #24
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	e000ed00 	.word	0xe000ed00
 800cbd4:	410fc271 	.word	0x410fc271
 800cbd8:	410fc270 	.word	0x410fc270
 800cbdc:	e000e400 	.word	0xe000e400
 800cbe0:	20000f04 	.word	0x20000f04
 800cbe4:	20000f08 	.word	0x20000f08
 800cbe8:	e000ed20 	.word	0xe000ed20
 800cbec:	20000010 	.word	0x20000010
 800cbf0:	e000ef34 	.word	0xe000ef34

0800cbf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b083      	sub	sp, #12
 800cbf8:	af00      	add	r7, sp, #0
	__asm volatile
 800cbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfe:	f383 8811 	msr	BASEPRI, r3
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	f3bf 8f4f 	dsb	sy
 800cc0a:	607b      	str	r3, [r7, #4]
}
 800cc0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc0e:	4b0f      	ldr	r3, [pc, #60]	; (800cc4c <vPortEnterCritical+0x58>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	3301      	adds	r3, #1
 800cc14:	4a0d      	ldr	r2, [pc, #52]	; (800cc4c <vPortEnterCritical+0x58>)
 800cc16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc18:	4b0c      	ldr	r3, [pc, #48]	; (800cc4c <vPortEnterCritical+0x58>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d10f      	bne.n	800cc40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc20:	4b0b      	ldr	r3, [pc, #44]	; (800cc50 <vPortEnterCritical+0x5c>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	b2db      	uxtb	r3, r3
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00a      	beq.n	800cc40 <vPortEnterCritical+0x4c>
	__asm volatile
 800cc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2e:	f383 8811 	msr	BASEPRI, r3
 800cc32:	f3bf 8f6f 	isb	sy
 800cc36:	f3bf 8f4f 	dsb	sy
 800cc3a:	603b      	str	r3, [r7, #0]
}
 800cc3c:	bf00      	nop
 800cc3e:	e7fe      	b.n	800cc3e <vPortEnterCritical+0x4a>
	}
}
 800cc40:	bf00      	nop
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr
 800cc4c:	20000010 	.word	0x20000010
 800cc50:	e000ed04 	.word	0xe000ed04

0800cc54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cc5a:	4b12      	ldr	r3, [pc, #72]	; (800cca4 <vPortExitCritical+0x50>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d10a      	bne.n	800cc78 <vPortExitCritical+0x24>
	__asm volatile
 800cc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc66:	f383 8811 	msr	BASEPRI, r3
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	607b      	str	r3, [r7, #4]
}
 800cc74:	bf00      	nop
 800cc76:	e7fe      	b.n	800cc76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cc78:	4b0a      	ldr	r3, [pc, #40]	; (800cca4 <vPortExitCritical+0x50>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	4a09      	ldr	r2, [pc, #36]	; (800cca4 <vPortExitCritical+0x50>)
 800cc80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc82:	4b08      	ldr	r3, [pc, #32]	; (800cca4 <vPortExitCritical+0x50>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d105      	bne.n	800cc96 <vPortExitCritical+0x42>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	f383 8811 	msr	BASEPRI, r3
}
 800cc94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc96:	bf00      	nop
 800cc98:	370c      	adds	r7, #12
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	20000010 	.word	0x20000010
	...

0800ccb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ccb0:	f3ef 8009 	mrs	r0, PSP
 800ccb4:	f3bf 8f6f 	isb	sy
 800ccb8:	4b15      	ldr	r3, [pc, #84]	; (800cd10 <pxCurrentTCBConst>)
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	f01e 0f10 	tst.w	lr, #16
 800ccc0:	bf08      	it	eq
 800ccc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ccc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccca:	6010      	str	r0, [r2, #0]
 800cccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ccd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ccd4:	f380 8811 	msr	BASEPRI, r0
 800ccd8:	f3bf 8f4f 	dsb	sy
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f7fe ffc0 	bl	800bc64 <vTaskSwitchContext>
 800cce4:	f04f 0000 	mov.w	r0, #0
 800cce8:	f380 8811 	msr	BASEPRI, r0
 800ccec:	bc09      	pop	{r0, r3}
 800ccee:	6819      	ldr	r1, [r3, #0]
 800ccf0:	6808      	ldr	r0, [r1, #0]
 800ccf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf6:	f01e 0f10 	tst.w	lr, #16
 800ccfa:	bf08      	it	eq
 800ccfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd00:	f380 8809 	msr	PSP, r0
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	f3af 8000 	nop.w

0800cd10 <pxCurrentTCBConst>:
 800cd10:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd14:	bf00      	nop
 800cd16:	bf00      	nop

0800cd18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	607b      	str	r3, [r7, #4]
}
 800cd30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd32:	f7fe fedd 	bl	800baf0 <xTaskIncrementTick>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d003      	beq.n	800cd44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd3c:	4b06      	ldr	r3, [pc, #24]	; (800cd58 <xPortSysTickHandler+0x40>)
 800cd3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd42:	601a      	str	r2, [r3, #0]
 800cd44:	2300      	movs	r3, #0
 800cd46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	f383 8811 	msr	BASEPRI, r3
}
 800cd4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd50:	bf00      	nop
 800cd52:	3708      	adds	r7, #8
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	e000ed04 	.word	0xe000ed04

0800cd5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cd60:	4b0b      	ldr	r3, [pc, #44]	; (800cd90 <vPortSetupTimerInterrupt+0x34>)
 800cd62:	2200      	movs	r2, #0
 800cd64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd66:	4b0b      	ldr	r3, [pc, #44]	; (800cd94 <vPortSetupTimerInterrupt+0x38>)
 800cd68:	2200      	movs	r2, #0
 800cd6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd6c:	4b0a      	ldr	r3, [pc, #40]	; (800cd98 <vPortSetupTimerInterrupt+0x3c>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4a0a      	ldr	r2, [pc, #40]	; (800cd9c <vPortSetupTimerInterrupt+0x40>)
 800cd72:	fba2 2303 	umull	r2, r3, r2, r3
 800cd76:	099b      	lsrs	r3, r3, #6
 800cd78:	4a09      	ldr	r2, [pc, #36]	; (800cda0 <vPortSetupTimerInterrupt+0x44>)
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd7e:	4b04      	ldr	r3, [pc, #16]	; (800cd90 <vPortSetupTimerInterrupt+0x34>)
 800cd80:	2207      	movs	r2, #7
 800cd82:	601a      	str	r2, [r3, #0]
}
 800cd84:	bf00      	nop
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	e000e010 	.word	0xe000e010
 800cd94:	e000e018 	.word	0xe000e018
 800cd98:	20000004 	.word	0x20000004
 800cd9c:	10624dd3 	.word	0x10624dd3
 800cda0:	e000e014 	.word	0xe000e014

0800cda4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cda4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cdb4 <vPortEnableVFP+0x10>
 800cda8:	6801      	ldr	r1, [r0, #0]
 800cdaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cdae:	6001      	str	r1, [r0, #0]
 800cdb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cdb2:	bf00      	nop
 800cdb4:	e000ed88 	.word	0xe000ed88

0800cdb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cdbe:	f3ef 8305 	mrs	r3, IPSR
 800cdc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2b0f      	cmp	r3, #15
 800cdc8:	d914      	bls.n	800cdf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cdca:	4a17      	ldr	r2, [pc, #92]	; (800ce28 <vPortValidateInterruptPriority+0x70>)
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	4413      	add	r3, r2
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cdd4:	4b15      	ldr	r3, [pc, #84]	; (800ce2c <vPortValidateInterruptPriority+0x74>)
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	7afa      	ldrb	r2, [r7, #11]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d20a      	bcs.n	800cdf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde2:	f383 8811 	msr	BASEPRI, r3
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	607b      	str	r3, [r7, #4]
}
 800cdf0:	bf00      	nop
 800cdf2:	e7fe      	b.n	800cdf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cdf4:	4b0e      	ldr	r3, [pc, #56]	; (800ce30 <vPortValidateInterruptPriority+0x78>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cdfc:	4b0d      	ldr	r3, [pc, #52]	; (800ce34 <vPortValidateInterruptPriority+0x7c>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d90a      	bls.n	800ce1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ce04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce08:	f383 8811 	msr	BASEPRI, r3
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	f3bf 8f4f 	dsb	sy
 800ce14:	603b      	str	r3, [r7, #0]
}
 800ce16:	bf00      	nop
 800ce18:	e7fe      	b.n	800ce18 <vPortValidateInterruptPriority+0x60>
	}
 800ce1a:	bf00      	nop
 800ce1c:	3714      	adds	r7, #20
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr
 800ce26:	bf00      	nop
 800ce28:	e000e3f0 	.word	0xe000e3f0
 800ce2c:	20000f04 	.word	0x20000f04
 800ce30:	e000ed0c 	.word	0xe000ed0c
 800ce34:	20000f08 	.word	0x20000f08

0800ce38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b08a      	sub	sp, #40	; 0x28
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce40:	2300      	movs	r3, #0
 800ce42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce44:	f7fe fd98 	bl	800b978 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce48:	4b5b      	ldr	r3, [pc, #364]	; (800cfb8 <pvPortMalloc+0x180>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d101      	bne.n	800ce54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce50:	f000 f920 	bl	800d094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce54:	4b59      	ldr	r3, [pc, #356]	; (800cfbc <pvPortMalloc+0x184>)
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	4013      	ands	r3, r2
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	f040 8093 	bne.w	800cf88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d01d      	beq.n	800cea4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ce68:	2208      	movs	r2, #8
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f003 0307 	and.w	r3, r3, #7
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d014      	beq.n	800cea4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f023 0307 	bic.w	r3, r3, #7
 800ce80:	3308      	adds	r3, #8
 800ce82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f003 0307 	and.w	r3, r3, #7
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00a      	beq.n	800cea4 <pvPortMalloc+0x6c>
	__asm volatile
 800ce8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce92:	f383 8811 	msr	BASEPRI, r3
 800ce96:	f3bf 8f6f 	isb	sy
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	617b      	str	r3, [r7, #20]
}
 800cea0:	bf00      	nop
 800cea2:	e7fe      	b.n	800cea2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d06e      	beq.n	800cf88 <pvPortMalloc+0x150>
 800ceaa:	4b45      	ldr	r3, [pc, #276]	; (800cfc0 <pvPortMalloc+0x188>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d869      	bhi.n	800cf88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ceb4:	4b43      	ldr	r3, [pc, #268]	; (800cfc4 <pvPortMalloc+0x18c>)
 800ceb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ceb8:	4b42      	ldr	r3, [pc, #264]	; (800cfc4 <pvPortMalloc+0x18c>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cebe:	e004      	b.n	800ceca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ceca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d903      	bls.n	800cedc <pvPortMalloc+0xa4>
 800ced4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1f1      	bne.n	800cec0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cedc:	4b36      	ldr	r3, [pc, #216]	; (800cfb8 <pvPortMalloc+0x180>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d050      	beq.n	800cf88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cee6:	6a3b      	ldr	r3, [r7, #32]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2208      	movs	r2, #8
 800ceec:	4413      	add	r3, r2
 800ceee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	6a3b      	ldr	r3, [r7, #32]
 800cef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefa:	685a      	ldr	r2, [r3, #4]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	1ad2      	subs	r2, r2, r3
 800cf00:	2308      	movs	r3, #8
 800cf02:	005b      	lsls	r3, r3, #1
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d91f      	bls.n	800cf48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf10:	69bb      	ldr	r3, [r7, #24]
 800cf12:	f003 0307 	and.w	r3, r3, #7
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00a      	beq.n	800cf30 <pvPortMalloc+0xf8>
	__asm volatile
 800cf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	613b      	str	r3, [r7, #16]
}
 800cf2c:	bf00      	nop
 800cf2e:	e7fe      	b.n	800cf2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf32:	685a      	ldr	r2, [r3, #4]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	1ad2      	subs	r2, r2, r3
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf42:	69b8      	ldr	r0, [r7, #24]
 800cf44:	f000 f908 	bl	800d158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf48:	4b1d      	ldr	r3, [pc, #116]	; (800cfc0 <pvPortMalloc+0x188>)
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	1ad3      	subs	r3, r2, r3
 800cf52:	4a1b      	ldr	r2, [pc, #108]	; (800cfc0 <pvPortMalloc+0x188>)
 800cf54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf56:	4b1a      	ldr	r3, [pc, #104]	; (800cfc0 <pvPortMalloc+0x188>)
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	4b1b      	ldr	r3, [pc, #108]	; (800cfc8 <pvPortMalloc+0x190>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d203      	bcs.n	800cf6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf62:	4b17      	ldr	r3, [pc, #92]	; (800cfc0 <pvPortMalloc+0x188>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a18      	ldr	r2, [pc, #96]	; (800cfc8 <pvPortMalloc+0x190>)
 800cf68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6c:	685a      	ldr	r2, [r3, #4]
 800cf6e:	4b13      	ldr	r3, [pc, #76]	; (800cfbc <pvPortMalloc+0x184>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	431a      	orrs	r2, r3
 800cf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cf7e:	4b13      	ldr	r3, [pc, #76]	; (800cfcc <pvPortMalloc+0x194>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	3301      	adds	r3, #1
 800cf84:	4a11      	ldr	r2, [pc, #68]	; (800cfcc <pvPortMalloc+0x194>)
 800cf86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf88:	f7fe fd04 	bl	800b994 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	f003 0307 	and.w	r3, r3, #7
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00a      	beq.n	800cfac <pvPortMalloc+0x174>
	__asm volatile
 800cf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9a:	f383 8811 	msr	BASEPRI, r3
 800cf9e:	f3bf 8f6f 	isb	sy
 800cfa2:	f3bf 8f4f 	dsb	sy
 800cfa6:	60fb      	str	r3, [r7, #12]
}
 800cfa8:	bf00      	nop
 800cfaa:	e7fe      	b.n	800cfaa <pvPortMalloc+0x172>
	return pvReturn;
 800cfac:	69fb      	ldr	r3, [r7, #28]
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3728      	adds	r7, #40	; 0x28
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	20004b14 	.word	0x20004b14
 800cfbc:	20004b28 	.word	0x20004b28
 800cfc0:	20004b18 	.word	0x20004b18
 800cfc4:	20004b0c 	.word	0x20004b0c
 800cfc8:	20004b1c 	.word	0x20004b1c
 800cfcc:	20004b20 	.word	0x20004b20

0800cfd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b086      	sub	sp, #24
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d04d      	beq.n	800d07e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cfe2:	2308      	movs	r3, #8
 800cfe4:	425b      	negs	r3, r3
 800cfe6:	697a      	ldr	r2, [r7, #20]
 800cfe8:	4413      	add	r3, r2
 800cfea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	685a      	ldr	r2, [r3, #4]
 800cff4:	4b24      	ldr	r3, [pc, #144]	; (800d088 <vPortFree+0xb8>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4013      	ands	r3, r2
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d10a      	bne.n	800d014 <vPortFree+0x44>
	__asm volatile
 800cffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d002:	f383 8811 	msr	BASEPRI, r3
 800d006:	f3bf 8f6f 	isb	sy
 800d00a:	f3bf 8f4f 	dsb	sy
 800d00e:	60fb      	str	r3, [r7, #12]
}
 800d010:	bf00      	nop
 800d012:	e7fe      	b.n	800d012 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d00a      	beq.n	800d032 <vPortFree+0x62>
	__asm volatile
 800d01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d020:	f383 8811 	msr	BASEPRI, r3
 800d024:	f3bf 8f6f 	isb	sy
 800d028:	f3bf 8f4f 	dsb	sy
 800d02c:	60bb      	str	r3, [r7, #8]
}
 800d02e:	bf00      	nop
 800d030:	e7fe      	b.n	800d030 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	685a      	ldr	r2, [r3, #4]
 800d036:	4b14      	ldr	r3, [pc, #80]	; (800d088 <vPortFree+0xb8>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4013      	ands	r3, r2
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d01e      	beq.n	800d07e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d11a      	bne.n	800d07e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	685a      	ldr	r2, [r3, #4]
 800d04c:	4b0e      	ldr	r3, [pc, #56]	; (800d088 <vPortFree+0xb8>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	43db      	mvns	r3, r3
 800d052:	401a      	ands	r2, r3
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d058:	f7fe fc8e 	bl	800b978 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	685a      	ldr	r2, [r3, #4]
 800d060:	4b0a      	ldr	r3, [pc, #40]	; (800d08c <vPortFree+0xbc>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4413      	add	r3, r2
 800d066:	4a09      	ldr	r2, [pc, #36]	; (800d08c <vPortFree+0xbc>)
 800d068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d06a:	6938      	ldr	r0, [r7, #16]
 800d06c:	f000 f874 	bl	800d158 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d070:	4b07      	ldr	r3, [pc, #28]	; (800d090 <vPortFree+0xc0>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	3301      	adds	r3, #1
 800d076:	4a06      	ldr	r2, [pc, #24]	; (800d090 <vPortFree+0xc0>)
 800d078:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d07a:	f7fe fc8b 	bl	800b994 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d07e:	bf00      	nop
 800d080:	3718      	adds	r7, #24
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	20004b28 	.word	0x20004b28
 800d08c:	20004b18 	.word	0x20004b18
 800d090:	20004b24 	.word	0x20004b24

0800d094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d094:	b480      	push	{r7}
 800d096:	b085      	sub	sp, #20
 800d098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d09a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d09e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d0a0:	4b27      	ldr	r3, [pc, #156]	; (800d140 <prvHeapInit+0xac>)
 800d0a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f003 0307 	and.w	r3, r3, #7
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d00c      	beq.n	800d0c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	3307      	adds	r3, #7
 800d0b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f023 0307 	bic.w	r3, r3, #7
 800d0ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d0bc:	68ba      	ldr	r2, [r7, #8]
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	1ad3      	subs	r3, r2, r3
 800d0c2:	4a1f      	ldr	r2, [pc, #124]	; (800d140 <prvHeapInit+0xac>)
 800d0c4:	4413      	add	r3, r2
 800d0c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d0cc:	4a1d      	ldr	r2, [pc, #116]	; (800d144 <prvHeapInit+0xb0>)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d0d2:	4b1c      	ldr	r3, [pc, #112]	; (800d144 <prvHeapInit+0xb0>)
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	68ba      	ldr	r2, [r7, #8]
 800d0dc:	4413      	add	r3, r2
 800d0de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d0e0:	2208      	movs	r2, #8
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	1a9b      	subs	r3, r3, r2
 800d0e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f023 0307 	bic.w	r3, r3, #7
 800d0ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	4a15      	ldr	r2, [pc, #84]	; (800d148 <prvHeapInit+0xb4>)
 800d0f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d0f6:	4b14      	ldr	r3, [pc, #80]	; (800d148 <prvHeapInit+0xb4>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d0fe:	4b12      	ldr	r3, [pc, #72]	; (800d148 <prvHeapInit+0xb4>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2200      	movs	r2, #0
 800d104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	1ad2      	subs	r2, r2, r3
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d114:	4b0c      	ldr	r3, [pc, #48]	; (800d148 <prvHeapInit+0xb4>)
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	4a0a      	ldr	r2, [pc, #40]	; (800d14c <prvHeapInit+0xb8>)
 800d122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	4a09      	ldr	r2, [pc, #36]	; (800d150 <prvHeapInit+0xbc>)
 800d12a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d12c:	4b09      	ldr	r3, [pc, #36]	; (800d154 <prvHeapInit+0xc0>)
 800d12e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d132:	601a      	str	r2, [r3, #0]
}
 800d134:	bf00      	nop
 800d136:	3714      	adds	r7, #20
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr
 800d140:	20000f0c 	.word	0x20000f0c
 800d144:	20004b0c 	.word	0x20004b0c
 800d148:	20004b14 	.word	0x20004b14
 800d14c:	20004b1c 	.word	0x20004b1c
 800d150:	20004b18 	.word	0x20004b18
 800d154:	20004b28 	.word	0x20004b28

0800d158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d158:	b480      	push	{r7}
 800d15a:	b085      	sub	sp, #20
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d160:	4b28      	ldr	r3, [pc, #160]	; (800d204 <prvInsertBlockIntoFreeList+0xac>)
 800d162:	60fb      	str	r3, [r7, #12]
 800d164:	e002      	b.n	800d16c <prvInsertBlockIntoFreeList+0x14>
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	60fb      	str	r3, [r7, #12]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	429a      	cmp	r2, r3
 800d174:	d8f7      	bhi.n	800d166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	68ba      	ldr	r2, [r7, #8]
 800d180:	4413      	add	r3, r2
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	429a      	cmp	r2, r3
 800d186:	d108      	bne.n	800d19a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	685a      	ldr	r2, [r3, #4]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	441a      	add	r2, r3
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	685b      	ldr	r3, [r3, #4]
 800d1a2:	68ba      	ldr	r2, [r7, #8]
 800d1a4:	441a      	add	r2, r3
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d118      	bne.n	800d1e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	4b15      	ldr	r3, [pc, #84]	; (800d208 <prvInsertBlockIntoFreeList+0xb0>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d00d      	beq.n	800d1d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	685a      	ldr	r2, [r3, #4]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	441a      	add	r2, r3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	601a      	str	r2, [r3, #0]
 800d1d4:	e008      	b.n	800d1e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d1d6:	4b0c      	ldr	r3, [pc, #48]	; (800d208 <prvInsertBlockIntoFreeList+0xb0>)
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	601a      	str	r2, [r3, #0]
 800d1de:	e003      	b.n	800d1e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d1e8:	68fa      	ldr	r2, [r7, #12]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d002      	beq.n	800d1f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1f6:	bf00      	nop
 800d1f8:	3714      	adds	r7, #20
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	20004b0c 	.word	0x20004b0c
 800d208:	20004b14 	.word	0x20004b14

0800d20c <calloc>:
 800d20c:	4b02      	ldr	r3, [pc, #8]	; (800d218 <calloc+0xc>)
 800d20e:	460a      	mov	r2, r1
 800d210:	4601      	mov	r1, r0
 800d212:	6818      	ldr	r0, [r3, #0]
 800d214:	f000 b84a 	b.w	800d2ac <_calloc_r>
 800d218:	20000014 	.word	0x20000014

0800d21c <__errno>:
 800d21c:	4b01      	ldr	r3, [pc, #4]	; (800d224 <__errno+0x8>)
 800d21e:	6818      	ldr	r0, [r3, #0]
 800d220:	4770      	bx	lr
 800d222:	bf00      	nop
 800d224:	20000014 	.word	0x20000014

0800d228 <__libc_init_array>:
 800d228:	b570      	push	{r4, r5, r6, lr}
 800d22a:	4d0d      	ldr	r5, [pc, #52]	; (800d260 <__libc_init_array+0x38>)
 800d22c:	4c0d      	ldr	r4, [pc, #52]	; (800d264 <__libc_init_array+0x3c>)
 800d22e:	1b64      	subs	r4, r4, r5
 800d230:	10a4      	asrs	r4, r4, #2
 800d232:	2600      	movs	r6, #0
 800d234:	42a6      	cmp	r6, r4
 800d236:	d109      	bne.n	800d24c <__libc_init_array+0x24>
 800d238:	4d0b      	ldr	r5, [pc, #44]	; (800d268 <__libc_init_array+0x40>)
 800d23a:	4c0c      	ldr	r4, [pc, #48]	; (800d26c <__libc_init_array+0x44>)
 800d23c:	f006 fc0c 	bl	8013a58 <_init>
 800d240:	1b64      	subs	r4, r4, r5
 800d242:	10a4      	asrs	r4, r4, #2
 800d244:	2600      	movs	r6, #0
 800d246:	42a6      	cmp	r6, r4
 800d248:	d105      	bne.n	800d256 <__libc_init_array+0x2e>
 800d24a:	bd70      	pop	{r4, r5, r6, pc}
 800d24c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d250:	4798      	blx	r3
 800d252:	3601      	adds	r6, #1
 800d254:	e7ee      	b.n	800d234 <__libc_init_array+0xc>
 800d256:	f855 3b04 	ldr.w	r3, [r5], #4
 800d25a:	4798      	blx	r3
 800d25c:	3601      	adds	r6, #1
 800d25e:	e7f2      	b.n	800d246 <__libc_init_array+0x1e>
 800d260:	080142f8 	.word	0x080142f8
 800d264:	080142f8 	.word	0x080142f8
 800d268:	080142f8 	.word	0x080142f8
 800d26c:	080142fc 	.word	0x080142fc

0800d270 <malloc>:
 800d270:	4b02      	ldr	r3, [pc, #8]	; (800d27c <malloc+0xc>)
 800d272:	4601      	mov	r1, r0
 800d274:	6818      	ldr	r0, [r3, #0]
 800d276:	f000 b879 	b.w	800d36c <_malloc_r>
 800d27a:	bf00      	nop
 800d27c:	20000014 	.word	0x20000014

0800d280 <memcpy>:
 800d280:	440a      	add	r2, r1
 800d282:	4291      	cmp	r1, r2
 800d284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d288:	d100      	bne.n	800d28c <memcpy+0xc>
 800d28a:	4770      	bx	lr
 800d28c:	b510      	push	{r4, lr}
 800d28e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d292:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d296:	4291      	cmp	r1, r2
 800d298:	d1f9      	bne.n	800d28e <memcpy+0xe>
 800d29a:	bd10      	pop	{r4, pc}

0800d29c <memset>:
 800d29c:	4402      	add	r2, r0
 800d29e:	4603      	mov	r3, r0
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d100      	bne.n	800d2a6 <memset+0xa>
 800d2a4:	4770      	bx	lr
 800d2a6:	f803 1b01 	strb.w	r1, [r3], #1
 800d2aa:	e7f9      	b.n	800d2a0 <memset+0x4>

0800d2ac <_calloc_r>:
 800d2ac:	b513      	push	{r0, r1, r4, lr}
 800d2ae:	434a      	muls	r2, r1
 800d2b0:	4611      	mov	r1, r2
 800d2b2:	9201      	str	r2, [sp, #4]
 800d2b4:	f000 f85a 	bl	800d36c <_malloc_r>
 800d2b8:	4604      	mov	r4, r0
 800d2ba:	b118      	cbz	r0, 800d2c4 <_calloc_r+0x18>
 800d2bc:	9a01      	ldr	r2, [sp, #4]
 800d2be:	2100      	movs	r1, #0
 800d2c0:	f7ff ffec 	bl	800d29c <memset>
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	b002      	add	sp, #8
 800d2c8:	bd10      	pop	{r4, pc}
	...

0800d2cc <_free_r>:
 800d2cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2ce:	2900      	cmp	r1, #0
 800d2d0:	d048      	beq.n	800d364 <_free_r+0x98>
 800d2d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2d6:	9001      	str	r0, [sp, #4]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f1a1 0404 	sub.w	r4, r1, #4
 800d2de:	bfb8      	it	lt
 800d2e0:	18e4      	addlt	r4, r4, r3
 800d2e2:	f003 faed 	bl	80108c0 <__malloc_lock>
 800d2e6:	4a20      	ldr	r2, [pc, #128]	; (800d368 <_free_r+0x9c>)
 800d2e8:	9801      	ldr	r0, [sp, #4]
 800d2ea:	6813      	ldr	r3, [r2, #0]
 800d2ec:	4615      	mov	r5, r2
 800d2ee:	b933      	cbnz	r3, 800d2fe <_free_r+0x32>
 800d2f0:	6063      	str	r3, [r4, #4]
 800d2f2:	6014      	str	r4, [r2, #0]
 800d2f4:	b003      	add	sp, #12
 800d2f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2fa:	f003 bae7 	b.w	80108cc <__malloc_unlock>
 800d2fe:	42a3      	cmp	r3, r4
 800d300:	d90b      	bls.n	800d31a <_free_r+0x4e>
 800d302:	6821      	ldr	r1, [r4, #0]
 800d304:	1862      	adds	r2, r4, r1
 800d306:	4293      	cmp	r3, r2
 800d308:	bf04      	itt	eq
 800d30a:	681a      	ldreq	r2, [r3, #0]
 800d30c:	685b      	ldreq	r3, [r3, #4]
 800d30e:	6063      	str	r3, [r4, #4]
 800d310:	bf04      	itt	eq
 800d312:	1852      	addeq	r2, r2, r1
 800d314:	6022      	streq	r2, [r4, #0]
 800d316:	602c      	str	r4, [r5, #0]
 800d318:	e7ec      	b.n	800d2f4 <_free_r+0x28>
 800d31a:	461a      	mov	r2, r3
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	b10b      	cbz	r3, 800d324 <_free_r+0x58>
 800d320:	42a3      	cmp	r3, r4
 800d322:	d9fa      	bls.n	800d31a <_free_r+0x4e>
 800d324:	6811      	ldr	r1, [r2, #0]
 800d326:	1855      	adds	r5, r2, r1
 800d328:	42a5      	cmp	r5, r4
 800d32a:	d10b      	bne.n	800d344 <_free_r+0x78>
 800d32c:	6824      	ldr	r4, [r4, #0]
 800d32e:	4421      	add	r1, r4
 800d330:	1854      	adds	r4, r2, r1
 800d332:	42a3      	cmp	r3, r4
 800d334:	6011      	str	r1, [r2, #0]
 800d336:	d1dd      	bne.n	800d2f4 <_free_r+0x28>
 800d338:	681c      	ldr	r4, [r3, #0]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	6053      	str	r3, [r2, #4]
 800d33e:	4421      	add	r1, r4
 800d340:	6011      	str	r1, [r2, #0]
 800d342:	e7d7      	b.n	800d2f4 <_free_r+0x28>
 800d344:	d902      	bls.n	800d34c <_free_r+0x80>
 800d346:	230c      	movs	r3, #12
 800d348:	6003      	str	r3, [r0, #0]
 800d34a:	e7d3      	b.n	800d2f4 <_free_r+0x28>
 800d34c:	6825      	ldr	r5, [r4, #0]
 800d34e:	1961      	adds	r1, r4, r5
 800d350:	428b      	cmp	r3, r1
 800d352:	bf04      	itt	eq
 800d354:	6819      	ldreq	r1, [r3, #0]
 800d356:	685b      	ldreq	r3, [r3, #4]
 800d358:	6063      	str	r3, [r4, #4]
 800d35a:	bf04      	itt	eq
 800d35c:	1949      	addeq	r1, r1, r5
 800d35e:	6021      	streq	r1, [r4, #0]
 800d360:	6054      	str	r4, [r2, #4]
 800d362:	e7c7      	b.n	800d2f4 <_free_r+0x28>
 800d364:	b003      	add	sp, #12
 800d366:	bd30      	pop	{r4, r5, pc}
 800d368:	20004b2c 	.word	0x20004b2c

0800d36c <_malloc_r>:
 800d36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d36e:	1ccd      	adds	r5, r1, #3
 800d370:	f025 0503 	bic.w	r5, r5, #3
 800d374:	3508      	adds	r5, #8
 800d376:	2d0c      	cmp	r5, #12
 800d378:	bf38      	it	cc
 800d37a:	250c      	movcc	r5, #12
 800d37c:	2d00      	cmp	r5, #0
 800d37e:	4606      	mov	r6, r0
 800d380:	db01      	blt.n	800d386 <_malloc_r+0x1a>
 800d382:	42a9      	cmp	r1, r5
 800d384:	d903      	bls.n	800d38e <_malloc_r+0x22>
 800d386:	230c      	movs	r3, #12
 800d388:	6033      	str	r3, [r6, #0]
 800d38a:	2000      	movs	r0, #0
 800d38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d38e:	f003 fa97 	bl	80108c0 <__malloc_lock>
 800d392:	4921      	ldr	r1, [pc, #132]	; (800d418 <_malloc_r+0xac>)
 800d394:	680a      	ldr	r2, [r1, #0]
 800d396:	4614      	mov	r4, r2
 800d398:	b99c      	cbnz	r4, 800d3c2 <_malloc_r+0x56>
 800d39a:	4f20      	ldr	r7, [pc, #128]	; (800d41c <_malloc_r+0xb0>)
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	b923      	cbnz	r3, 800d3aa <_malloc_r+0x3e>
 800d3a0:	4621      	mov	r1, r4
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	f000 feb6 	bl	800e114 <_sbrk_r>
 800d3a8:	6038      	str	r0, [r7, #0]
 800d3aa:	4629      	mov	r1, r5
 800d3ac:	4630      	mov	r0, r6
 800d3ae:	f000 feb1 	bl	800e114 <_sbrk_r>
 800d3b2:	1c43      	adds	r3, r0, #1
 800d3b4:	d123      	bne.n	800d3fe <_malloc_r+0x92>
 800d3b6:	230c      	movs	r3, #12
 800d3b8:	6033      	str	r3, [r6, #0]
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	f003 fa86 	bl	80108cc <__malloc_unlock>
 800d3c0:	e7e3      	b.n	800d38a <_malloc_r+0x1e>
 800d3c2:	6823      	ldr	r3, [r4, #0]
 800d3c4:	1b5b      	subs	r3, r3, r5
 800d3c6:	d417      	bmi.n	800d3f8 <_malloc_r+0x8c>
 800d3c8:	2b0b      	cmp	r3, #11
 800d3ca:	d903      	bls.n	800d3d4 <_malloc_r+0x68>
 800d3cc:	6023      	str	r3, [r4, #0]
 800d3ce:	441c      	add	r4, r3
 800d3d0:	6025      	str	r5, [r4, #0]
 800d3d2:	e004      	b.n	800d3de <_malloc_r+0x72>
 800d3d4:	6863      	ldr	r3, [r4, #4]
 800d3d6:	42a2      	cmp	r2, r4
 800d3d8:	bf0c      	ite	eq
 800d3da:	600b      	streq	r3, [r1, #0]
 800d3dc:	6053      	strne	r3, [r2, #4]
 800d3de:	4630      	mov	r0, r6
 800d3e0:	f003 fa74 	bl	80108cc <__malloc_unlock>
 800d3e4:	f104 000b 	add.w	r0, r4, #11
 800d3e8:	1d23      	adds	r3, r4, #4
 800d3ea:	f020 0007 	bic.w	r0, r0, #7
 800d3ee:	1ac2      	subs	r2, r0, r3
 800d3f0:	d0cc      	beq.n	800d38c <_malloc_r+0x20>
 800d3f2:	1a1b      	subs	r3, r3, r0
 800d3f4:	50a3      	str	r3, [r4, r2]
 800d3f6:	e7c9      	b.n	800d38c <_malloc_r+0x20>
 800d3f8:	4622      	mov	r2, r4
 800d3fa:	6864      	ldr	r4, [r4, #4]
 800d3fc:	e7cc      	b.n	800d398 <_malloc_r+0x2c>
 800d3fe:	1cc4      	adds	r4, r0, #3
 800d400:	f024 0403 	bic.w	r4, r4, #3
 800d404:	42a0      	cmp	r0, r4
 800d406:	d0e3      	beq.n	800d3d0 <_malloc_r+0x64>
 800d408:	1a21      	subs	r1, r4, r0
 800d40a:	4630      	mov	r0, r6
 800d40c:	f000 fe82 	bl	800e114 <_sbrk_r>
 800d410:	3001      	adds	r0, #1
 800d412:	d1dd      	bne.n	800d3d0 <_malloc_r+0x64>
 800d414:	e7cf      	b.n	800d3b6 <_malloc_r+0x4a>
 800d416:	bf00      	nop
 800d418:	20004b2c 	.word	0x20004b2c
 800d41c:	20004b30 	.word	0x20004b30

0800d420 <__cvt>:
 800d420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d424:	ec55 4b10 	vmov	r4, r5, d0
 800d428:	2d00      	cmp	r5, #0
 800d42a:	460e      	mov	r6, r1
 800d42c:	4619      	mov	r1, r3
 800d42e:	462b      	mov	r3, r5
 800d430:	bfbb      	ittet	lt
 800d432:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d436:	461d      	movlt	r5, r3
 800d438:	2300      	movge	r3, #0
 800d43a:	232d      	movlt	r3, #45	; 0x2d
 800d43c:	700b      	strb	r3, [r1, #0]
 800d43e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d440:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d444:	4691      	mov	r9, r2
 800d446:	f023 0820 	bic.w	r8, r3, #32
 800d44a:	bfbc      	itt	lt
 800d44c:	4622      	movlt	r2, r4
 800d44e:	4614      	movlt	r4, r2
 800d450:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d454:	d005      	beq.n	800d462 <__cvt+0x42>
 800d456:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d45a:	d100      	bne.n	800d45e <__cvt+0x3e>
 800d45c:	3601      	adds	r6, #1
 800d45e:	2102      	movs	r1, #2
 800d460:	e000      	b.n	800d464 <__cvt+0x44>
 800d462:	2103      	movs	r1, #3
 800d464:	ab03      	add	r3, sp, #12
 800d466:	9301      	str	r3, [sp, #4]
 800d468:	ab02      	add	r3, sp, #8
 800d46a:	9300      	str	r3, [sp, #0]
 800d46c:	ec45 4b10 	vmov	d0, r4, r5
 800d470:	4653      	mov	r3, sl
 800d472:	4632      	mov	r2, r6
 800d474:	f001 fe94 	bl	800f1a0 <_dtoa_r>
 800d478:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d47c:	4607      	mov	r7, r0
 800d47e:	d102      	bne.n	800d486 <__cvt+0x66>
 800d480:	f019 0f01 	tst.w	r9, #1
 800d484:	d022      	beq.n	800d4cc <__cvt+0xac>
 800d486:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d48a:	eb07 0906 	add.w	r9, r7, r6
 800d48e:	d110      	bne.n	800d4b2 <__cvt+0x92>
 800d490:	783b      	ldrb	r3, [r7, #0]
 800d492:	2b30      	cmp	r3, #48	; 0x30
 800d494:	d10a      	bne.n	800d4ac <__cvt+0x8c>
 800d496:	2200      	movs	r2, #0
 800d498:	2300      	movs	r3, #0
 800d49a:	4620      	mov	r0, r4
 800d49c:	4629      	mov	r1, r5
 800d49e:	f7f3 fb33 	bl	8000b08 <__aeabi_dcmpeq>
 800d4a2:	b918      	cbnz	r0, 800d4ac <__cvt+0x8c>
 800d4a4:	f1c6 0601 	rsb	r6, r6, #1
 800d4a8:	f8ca 6000 	str.w	r6, [sl]
 800d4ac:	f8da 3000 	ldr.w	r3, [sl]
 800d4b0:	4499      	add	r9, r3
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	4629      	mov	r1, r5
 800d4ba:	f7f3 fb25 	bl	8000b08 <__aeabi_dcmpeq>
 800d4be:	b108      	cbz	r0, 800d4c4 <__cvt+0xa4>
 800d4c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d4c4:	2230      	movs	r2, #48	; 0x30
 800d4c6:	9b03      	ldr	r3, [sp, #12]
 800d4c8:	454b      	cmp	r3, r9
 800d4ca:	d307      	bcc.n	800d4dc <__cvt+0xbc>
 800d4cc:	9b03      	ldr	r3, [sp, #12]
 800d4ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d4d0:	1bdb      	subs	r3, r3, r7
 800d4d2:	4638      	mov	r0, r7
 800d4d4:	6013      	str	r3, [r2, #0]
 800d4d6:	b004      	add	sp, #16
 800d4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4dc:	1c59      	adds	r1, r3, #1
 800d4de:	9103      	str	r1, [sp, #12]
 800d4e0:	701a      	strb	r2, [r3, #0]
 800d4e2:	e7f0      	b.n	800d4c6 <__cvt+0xa6>

0800d4e4 <__exponent>:
 800d4e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2900      	cmp	r1, #0
 800d4ea:	bfb8      	it	lt
 800d4ec:	4249      	neglt	r1, r1
 800d4ee:	f803 2b02 	strb.w	r2, [r3], #2
 800d4f2:	bfb4      	ite	lt
 800d4f4:	222d      	movlt	r2, #45	; 0x2d
 800d4f6:	222b      	movge	r2, #43	; 0x2b
 800d4f8:	2909      	cmp	r1, #9
 800d4fa:	7042      	strb	r2, [r0, #1]
 800d4fc:	dd2a      	ble.n	800d554 <__exponent+0x70>
 800d4fe:	f10d 0407 	add.w	r4, sp, #7
 800d502:	46a4      	mov	ip, r4
 800d504:	270a      	movs	r7, #10
 800d506:	46a6      	mov	lr, r4
 800d508:	460a      	mov	r2, r1
 800d50a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d50e:	fb07 1516 	mls	r5, r7, r6, r1
 800d512:	3530      	adds	r5, #48	; 0x30
 800d514:	2a63      	cmp	r2, #99	; 0x63
 800d516:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d51a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d51e:	4631      	mov	r1, r6
 800d520:	dcf1      	bgt.n	800d506 <__exponent+0x22>
 800d522:	3130      	adds	r1, #48	; 0x30
 800d524:	f1ae 0502 	sub.w	r5, lr, #2
 800d528:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d52c:	1c44      	adds	r4, r0, #1
 800d52e:	4629      	mov	r1, r5
 800d530:	4561      	cmp	r1, ip
 800d532:	d30a      	bcc.n	800d54a <__exponent+0x66>
 800d534:	f10d 0209 	add.w	r2, sp, #9
 800d538:	eba2 020e 	sub.w	r2, r2, lr
 800d53c:	4565      	cmp	r5, ip
 800d53e:	bf88      	it	hi
 800d540:	2200      	movhi	r2, #0
 800d542:	4413      	add	r3, r2
 800d544:	1a18      	subs	r0, r3, r0
 800d546:	b003      	add	sp, #12
 800d548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d54a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d54e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d552:	e7ed      	b.n	800d530 <__exponent+0x4c>
 800d554:	2330      	movs	r3, #48	; 0x30
 800d556:	3130      	adds	r1, #48	; 0x30
 800d558:	7083      	strb	r3, [r0, #2]
 800d55a:	70c1      	strb	r1, [r0, #3]
 800d55c:	1d03      	adds	r3, r0, #4
 800d55e:	e7f1      	b.n	800d544 <__exponent+0x60>

0800d560 <_printf_float>:
 800d560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d564:	ed2d 8b02 	vpush	{d8}
 800d568:	b08d      	sub	sp, #52	; 0x34
 800d56a:	460c      	mov	r4, r1
 800d56c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d570:	4616      	mov	r6, r2
 800d572:	461f      	mov	r7, r3
 800d574:	4605      	mov	r5, r0
 800d576:	f003 f925 	bl	80107c4 <_localeconv_r>
 800d57a:	f8d0 a000 	ldr.w	sl, [r0]
 800d57e:	4650      	mov	r0, sl
 800d580:	f7f2 fe46 	bl	8000210 <strlen>
 800d584:	2300      	movs	r3, #0
 800d586:	930a      	str	r3, [sp, #40]	; 0x28
 800d588:	6823      	ldr	r3, [r4, #0]
 800d58a:	9305      	str	r3, [sp, #20]
 800d58c:	f8d8 3000 	ldr.w	r3, [r8]
 800d590:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d594:	3307      	adds	r3, #7
 800d596:	f023 0307 	bic.w	r3, r3, #7
 800d59a:	f103 0208 	add.w	r2, r3, #8
 800d59e:	f8c8 2000 	str.w	r2, [r8]
 800d5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d5aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d5ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d5b2:	9307      	str	r3, [sp, #28]
 800d5b4:	f8cd 8018 	str.w	r8, [sp, #24]
 800d5b8:	ee08 0a10 	vmov	s16, r0
 800d5bc:	4b9f      	ldr	r3, [pc, #636]	; (800d83c <_printf_float+0x2dc>)
 800d5be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5c6:	f7f3 fad1 	bl	8000b6c <__aeabi_dcmpun>
 800d5ca:	bb88      	cbnz	r0, 800d630 <_printf_float+0xd0>
 800d5cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5d0:	4b9a      	ldr	r3, [pc, #616]	; (800d83c <_printf_float+0x2dc>)
 800d5d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5d6:	f7f3 faab 	bl	8000b30 <__aeabi_dcmple>
 800d5da:	bb48      	cbnz	r0, 800d630 <_printf_float+0xd0>
 800d5dc:	2200      	movs	r2, #0
 800d5de:	2300      	movs	r3, #0
 800d5e0:	4640      	mov	r0, r8
 800d5e2:	4649      	mov	r1, r9
 800d5e4:	f7f3 fa9a 	bl	8000b1c <__aeabi_dcmplt>
 800d5e8:	b110      	cbz	r0, 800d5f0 <_printf_float+0x90>
 800d5ea:	232d      	movs	r3, #45	; 0x2d
 800d5ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5f0:	4b93      	ldr	r3, [pc, #588]	; (800d840 <_printf_float+0x2e0>)
 800d5f2:	4894      	ldr	r0, [pc, #592]	; (800d844 <_printf_float+0x2e4>)
 800d5f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d5f8:	bf94      	ite	ls
 800d5fa:	4698      	movls	r8, r3
 800d5fc:	4680      	movhi	r8, r0
 800d5fe:	2303      	movs	r3, #3
 800d600:	6123      	str	r3, [r4, #16]
 800d602:	9b05      	ldr	r3, [sp, #20]
 800d604:	f023 0204 	bic.w	r2, r3, #4
 800d608:	6022      	str	r2, [r4, #0]
 800d60a:	f04f 0900 	mov.w	r9, #0
 800d60e:	9700      	str	r7, [sp, #0]
 800d610:	4633      	mov	r3, r6
 800d612:	aa0b      	add	r2, sp, #44	; 0x2c
 800d614:	4621      	mov	r1, r4
 800d616:	4628      	mov	r0, r5
 800d618:	f000 f9d8 	bl	800d9cc <_printf_common>
 800d61c:	3001      	adds	r0, #1
 800d61e:	f040 8090 	bne.w	800d742 <_printf_float+0x1e2>
 800d622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d626:	b00d      	add	sp, #52	; 0x34
 800d628:	ecbd 8b02 	vpop	{d8}
 800d62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d630:	4642      	mov	r2, r8
 800d632:	464b      	mov	r3, r9
 800d634:	4640      	mov	r0, r8
 800d636:	4649      	mov	r1, r9
 800d638:	f7f3 fa98 	bl	8000b6c <__aeabi_dcmpun>
 800d63c:	b140      	cbz	r0, 800d650 <_printf_float+0xf0>
 800d63e:	464b      	mov	r3, r9
 800d640:	2b00      	cmp	r3, #0
 800d642:	bfbc      	itt	lt
 800d644:	232d      	movlt	r3, #45	; 0x2d
 800d646:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d64a:	487f      	ldr	r0, [pc, #508]	; (800d848 <_printf_float+0x2e8>)
 800d64c:	4b7f      	ldr	r3, [pc, #508]	; (800d84c <_printf_float+0x2ec>)
 800d64e:	e7d1      	b.n	800d5f4 <_printf_float+0x94>
 800d650:	6863      	ldr	r3, [r4, #4]
 800d652:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d656:	9206      	str	r2, [sp, #24]
 800d658:	1c5a      	adds	r2, r3, #1
 800d65a:	d13f      	bne.n	800d6dc <_printf_float+0x17c>
 800d65c:	2306      	movs	r3, #6
 800d65e:	6063      	str	r3, [r4, #4]
 800d660:	9b05      	ldr	r3, [sp, #20]
 800d662:	6861      	ldr	r1, [r4, #4]
 800d664:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d668:	2300      	movs	r3, #0
 800d66a:	9303      	str	r3, [sp, #12]
 800d66c:	ab0a      	add	r3, sp, #40	; 0x28
 800d66e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d672:	ab09      	add	r3, sp, #36	; 0x24
 800d674:	ec49 8b10 	vmov	d0, r8, r9
 800d678:	9300      	str	r3, [sp, #0]
 800d67a:	6022      	str	r2, [r4, #0]
 800d67c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d680:	4628      	mov	r0, r5
 800d682:	f7ff fecd 	bl	800d420 <__cvt>
 800d686:	9b06      	ldr	r3, [sp, #24]
 800d688:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d68a:	2b47      	cmp	r3, #71	; 0x47
 800d68c:	4680      	mov	r8, r0
 800d68e:	d108      	bne.n	800d6a2 <_printf_float+0x142>
 800d690:	1cc8      	adds	r0, r1, #3
 800d692:	db02      	blt.n	800d69a <_printf_float+0x13a>
 800d694:	6863      	ldr	r3, [r4, #4]
 800d696:	4299      	cmp	r1, r3
 800d698:	dd41      	ble.n	800d71e <_printf_float+0x1be>
 800d69a:	f1ab 0b02 	sub.w	fp, fp, #2
 800d69e:	fa5f fb8b 	uxtb.w	fp, fp
 800d6a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d6a6:	d820      	bhi.n	800d6ea <_printf_float+0x18a>
 800d6a8:	3901      	subs	r1, #1
 800d6aa:	465a      	mov	r2, fp
 800d6ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d6b0:	9109      	str	r1, [sp, #36]	; 0x24
 800d6b2:	f7ff ff17 	bl	800d4e4 <__exponent>
 800d6b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6b8:	1813      	adds	r3, r2, r0
 800d6ba:	2a01      	cmp	r2, #1
 800d6bc:	4681      	mov	r9, r0
 800d6be:	6123      	str	r3, [r4, #16]
 800d6c0:	dc02      	bgt.n	800d6c8 <_printf_float+0x168>
 800d6c2:	6822      	ldr	r2, [r4, #0]
 800d6c4:	07d2      	lsls	r2, r2, #31
 800d6c6:	d501      	bpl.n	800d6cc <_printf_float+0x16c>
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	6123      	str	r3, [r4, #16]
 800d6cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d09c      	beq.n	800d60e <_printf_float+0xae>
 800d6d4:	232d      	movs	r3, #45	; 0x2d
 800d6d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6da:	e798      	b.n	800d60e <_printf_float+0xae>
 800d6dc:	9a06      	ldr	r2, [sp, #24]
 800d6de:	2a47      	cmp	r2, #71	; 0x47
 800d6e0:	d1be      	bne.n	800d660 <_printf_float+0x100>
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d1bc      	bne.n	800d660 <_printf_float+0x100>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e7b9      	b.n	800d65e <_printf_float+0xfe>
 800d6ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d6ee:	d118      	bne.n	800d722 <_printf_float+0x1c2>
 800d6f0:	2900      	cmp	r1, #0
 800d6f2:	6863      	ldr	r3, [r4, #4]
 800d6f4:	dd0b      	ble.n	800d70e <_printf_float+0x1ae>
 800d6f6:	6121      	str	r1, [r4, #16]
 800d6f8:	b913      	cbnz	r3, 800d700 <_printf_float+0x1a0>
 800d6fa:	6822      	ldr	r2, [r4, #0]
 800d6fc:	07d0      	lsls	r0, r2, #31
 800d6fe:	d502      	bpl.n	800d706 <_printf_float+0x1a6>
 800d700:	3301      	adds	r3, #1
 800d702:	440b      	add	r3, r1
 800d704:	6123      	str	r3, [r4, #16]
 800d706:	65a1      	str	r1, [r4, #88]	; 0x58
 800d708:	f04f 0900 	mov.w	r9, #0
 800d70c:	e7de      	b.n	800d6cc <_printf_float+0x16c>
 800d70e:	b913      	cbnz	r3, 800d716 <_printf_float+0x1b6>
 800d710:	6822      	ldr	r2, [r4, #0]
 800d712:	07d2      	lsls	r2, r2, #31
 800d714:	d501      	bpl.n	800d71a <_printf_float+0x1ba>
 800d716:	3302      	adds	r3, #2
 800d718:	e7f4      	b.n	800d704 <_printf_float+0x1a4>
 800d71a:	2301      	movs	r3, #1
 800d71c:	e7f2      	b.n	800d704 <_printf_float+0x1a4>
 800d71e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d724:	4299      	cmp	r1, r3
 800d726:	db05      	blt.n	800d734 <_printf_float+0x1d4>
 800d728:	6823      	ldr	r3, [r4, #0]
 800d72a:	6121      	str	r1, [r4, #16]
 800d72c:	07d8      	lsls	r0, r3, #31
 800d72e:	d5ea      	bpl.n	800d706 <_printf_float+0x1a6>
 800d730:	1c4b      	adds	r3, r1, #1
 800d732:	e7e7      	b.n	800d704 <_printf_float+0x1a4>
 800d734:	2900      	cmp	r1, #0
 800d736:	bfd4      	ite	le
 800d738:	f1c1 0202 	rsble	r2, r1, #2
 800d73c:	2201      	movgt	r2, #1
 800d73e:	4413      	add	r3, r2
 800d740:	e7e0      	b.n	800d704 <_printf_float+0x1a4>
 800d742:	6823      	ldr	r3, [r4, #0]
 800d744:	055a      	lsls	r2, r3, #21
 800d746:	d407      	bmi.n	800d758 <_printf_float+0x1f8>
 800d748:	6923      	ldr	r3, [r4, #16]
 800d74a:	4642      	mov	r2, r8
 800d74c:	4631      	mov	r1, r6
 800d74e:	4628      	mov	r0, r5
 800d750:	47b8      	blx	r7
 800d752:	3001      	adds	r0, #1
 800d754:	d12c      	bne.n	800d7b0 <_printf_float+0x250>
 800d756:	e764      	b.n	800d622 <_printf_float+0xc2>
 800d758:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d75c:	f240 80e0 	bls.w	800d920 <_printf_float+0x3c0>
 800d760:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d764:	2200      	movs	r2, #0
 800d766:	2300      	movs	r3, #0
 800d768:	f7f3 f9ce 	bl	8000b08 <__aeabi_dcmpeq>
 800d76c:	2800      	cmp	r0, #0
 800d76e:	d034      	beq.n	800d7da <_printf_float+0x27a>
 800d770:	4a37      	ldr	r2, [pc, #220]	; (800d850 <_printf_float+0x2f0>)
 800d772:	2301      	movs	r3, #1
 800d774:	4631      	mov	r1, r6
 800d776:	4628      	mov	r0, r5
 800d778:	47b8      	blx	r7
 800d77a:	3001      	adds	r0, #1
 800d77c:	f43f af51 	beq.w	800d622 <_printf_float+0xc2>
 800d780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d784:	429a      	cmp	r2, r3
 800d786:	db02      	blt.n	800d78e <_printf_float+0x22e>
 800d788:	6823      	ldr	r3, [r4, #0]
 800d78a:	07d8      	lsls	r0, r3, #31
 800d78c:	d510      	bpl.n	800d7b0 <_printf_float+0x250>
 800d78e:	ee18 3a10 	vmov	r3, s16
 800d792:	4652      	mov	r2, sl
 800d794:	4631      	mov	r1, r6
 800d796:	4628      	mov	r0, r5
 800d798:	47b8      	blx	r7
 800d79a:	3001      	adds	r0, #1
 800d79c:	f43f af41 	beq.w	800d622 <_printf_float+0xc2>
 800d7a0:	f04f 0800 	mov.w	r8, #0
 800d7a4:	f104 091a 	add.w	r9, r4, #26
 800d7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7aa:	3b01      	subs	r3, #1
 800d7ac:	4543      	cmp	r3, r8
 800d7ae:	dc09      	bgt.n	800d7c4 <_printf_float+0x264>
 800d7b0:	6823      	ldr	r3, [r4, #0]
 800d7b2:	079b      	lsls	r3, r3, #30
 800d7b4:	f100 8105 	bmi.w	800d9c2 <_printf_float+0x462>
 800d7b8:	68e0      	ldr	r0, [r4, #12]
 800d7ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7bc:	4298      	cmp	r0, r3
 800d7be:	bfb8      	it	lt
 800d7c0:	4618      	movlt	r0, r3
 800d7c2:	e730      	b.n	800d626 <_printf_float+0xc6>
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	464a      	mov	r2, r9
 800d7c8:	4631      	mov	r1, r6
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	47b8      	blx	r7
 800d7ce:	3001      	adds	r0, #1
 800d7d0:	f43f af27 	beq.w	800d622 <_printf_float+0xc2>
 800d7d4:	f108 0801 	add.w	r8, r8, #1
 800d7d8:	e7e6      	b.n	800d7a8 <_printf_float+0x248>
 800d7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	dc39      	bgt.n	800d854 <_printf_float+0x2f4>
 800d7e0:	4a1b      	ldr	r2, [pc, #108]	; (800d850 <_printf_float+0x2f0>)
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	4631      	mov	r1, r6
 800d7e6:	4628      	mov	r0, r5
 800d7e8:	47b8      	blx	r7
 800d7ea:	3001      	adds	r0, #1
 800d7ec:	f43f af19 	beq.w	800d622 <_printf_float+0xc2>
 800d7f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	d102      	bne.n	800d7fe <_printf_float+0x29e>
 800d7f8:	6823      	ldr	r3, [r4, #0]
 800d7fa:	07d9      	lsls	r1, r3, #31
 800d7fc:	d5d8      	bpl.n	800d7b0 <_printf_float+0x250>
 800d7fe:	ee18 3a10 	vmov	r3, s16
 800d802:	4652      	mov	r2, sl
 800d804:	4631      	mov	r1, r6
 800d806:	4628      	mov	r0, r5
 800d808:	47b8      	blx	r7
 800d80a:	3001      	adds	r0, #1
 800d80c:	f43f af09 	beq.w	800d622 <_printf_float+0xc2>
 800d810:	f04f 0900 	mov.w	r9, #0
 800d814:	f104 0a1a 	add.w	sl, r4, #26
 800d818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d81a:	425b      	negs	r3, r3
 800d81c:	454b      	cmp	r3, r9
 800d81e:	dc01      	bgt.n	800d824 <_printf_float+0x2c4>
 800d820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d822:	e792      	b.n	800d74a <_printf_float+0x1ea>
 800d824:	2301      	movs	r3, #1
 800d826:	4652      	mov	r2, sl
 800d828:	4631      	mov	r1, r6
 800d82a:	4628      	mov	r0, r5
 800d82c:	47b8      	blx	r7
 800d82e:	3001      	adds	r0, #1
 800d830:	f43f aef7 	beq.w	800d622 <_printf_float+0xc2>
 800d834:	f109 0901 	add.w	r9, r9, #1
 800d838:	e7ee      	b.n	800d818 <_printf_float+0x2b8>
 800d83a:	bf00      	nop
 800d83c:	7fefffff 	.word	0x7fefffff
 800d840:	08013c20 	.word	0x08013c20
 800d844:	08013c24 	.word	0x08013c24
 800d848:	08013c2c 	.word	0x08013c2c
 800d84c:	08013c28 	.word	0x08013c28
 800d850:	08013c30 	.word	0x08013c30
 800d854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d858:	429a      	cmp	r2, r3
 800d85a:	bfa8      	it	ge
 800d85c:	461a      	movge	r2, r3
 800d85e:	2a00      	cmp	r2, #0
 800d860:	4691      	mov	r9, r2
 800d862:	dc37      	bgt.n	800d8d4 <_printf_float+0x374>
 800d864:	f04f 0b00 	mov.w	fp, #0
 800d868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d86c:	f104 021a 	add.w	r2, r4, #26
 800d870:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d872:	9305      	str	r3, [sp, #20]
 800d874:	eba3 0309 	sub.w	r3, r3, r9
 800d878:	455b      	cmp	r3, fp
 800d87a:	dc33      	bgt.n	800d8e4 <_printf_float+0x384>
 800d87c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d880:	429a      	cmp	r2, r3
 800d882:	db3b      	blt.n	800d8fc <_printf_float+0x39c>
 800d884:	6823      	ldr	r3, [r4, #0]
 800d886:	07da      	lsls	r2, r3, #31
 800d888:	d438      	bmi.n	800d8fc <_printf_float+0x39c>
 800d88a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d88c:	9b05      	ldr	r3, [sp, #20]
 800d88e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d890:	1ad3      	subs	r3, r2, r3
 800d892:	eba2 0901 	sub.w	r9, r2, r1
 800d896:	4599      	cmp	r9, r3
 800d898:	bfa8      	it	ge
 800d89a:	4699      	movge	r9, r3
 800d89c:	f1b9 0f00 	cmp.w	r9, #0
 800d8a0:	dc35      	bgt.n	800d90e <_printf_float+0x3ae>
 800d8a2:	f04f 0800 	mov.w	r8, #0
 800d8a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8aa:	f104 0a1a 	add.w	sl, r4, #26
 800d8ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d8b2:	1a9b      	subs	r3, r3, r2
 800d8b4:	eba3 0309 	sub.w	r3, r3, r9
 800d8b8:	4543      	cmp	r3, r8
 800d8ba:	f77f af79 	ble.w	800d7b0 <_printf_float+0x250>
 800d8be:	2301      	movs	r3, #1
 800d8c0:	4652      	mov	r2, sl
 800d8c2:	4631      	mov	r1, r6
 800d8c4:	4628      	mov	r0, r5
 800d8c6:	47b8      	blx	r7
 800d8c8:	3001      	adds	r0, #1
 800d8ca:	f43f aeaa 	beq.w	800d622 <_printf_float+0xc2>
 800d8ce:	f108 0801 	add.w	r8, r8, #1
 800d8d2:	e7ec      	b.n	800d8ae <_printf_float+0x34e>
 800d8d4:	4613      	mov	r3, r2
 800d8d6:	4631      	mov	r1, r6
 800d8d8:	4642      	mov	r2, r8
 800d8da:	4628      	mov	r0, r5
 800d8dc:	47b8      	blx	r7
 800d8de:	3001      	adds	r0, #1
 800d8e0:	d1c0      	bne.n	800d864 <_printf_float+0x304>
 800d8e2:	e69e      	b.n	800d622 <_printf_float+0xc2>
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	4631      	mov	r1, r6
 800d8e8:	4628      	mov	r0, r5
 800d8ea:	9205      	str	r2, [sp, #20]
 800d8ec:	47b8      	blx	r7
 800d8ee:	3001      	adds	r0, #1
 800d8f0:	f43f ae97 	beq.w	800d622 <_printf_float+0xc2>
 800d8f4:	9a05      	ldr	r2, [sp, #20]
 800d8f6:	f10b 0b01 	add.w	fp, fp, #1
 800d8fa:	e7b9      	b.n	800d870 <_printf_float+0x310>
 800d8fc:	ee18 3a10 	vmov	r3, s16
 800d900:	4652      	mov	r2, sl
 800d902:	4631      	mov	r1, r6
 800d904:	4628      	mov	r0, r5
 800d906:	47b8      	blx	r7
 800d908:	3001      	adds	r0, #1
 800d90a:	d1be      	bne.n	800d88a <_printf_float+0x32a>
 800d90c:	e689      	b.n	800d622 <_printf_float+0xc2>
 800d90e:	9a05      	ldr	r2, [sp, #20]
 800d910:	464b      	mov	r3, r9
 800d912:	4442      	add	r2, r8
 800d914:	4631      	mov	r1, r6
 800d916:	4628      	mov	r0, r5
 800d918:	47b8      	blx	r7
 800d91a:	3001      	adds	r0, #1
 800d91c:	d1c1      	bne.n	800d8a2 <_printf_float+0x342>
 800d91e:	e680      	b.n	800d622 <_printf_float+0xc2>
 800d920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d922:	2a01      	cmp	r2, #1
 800d924:	dc01      	bgt.n	800d92a <_printf_float+0x3ca>
 800d926:	07db      	lsls	r3, r3, #31
 800d928:	d538      	bpl.n	800d99c <_printf_float+0x43c>
 800d92a:	2301      	movs	r3, #1
 800d92c:	4642      	mov	r2, r8
 800d92e:	4631      	mov	r1, r6
 800d930:	4628      	mov	r0, r5
 800d932:	47b8      	blx	r7
 800d934:	3001      	adds	r0, #1
 800d936:	f43f ae74 	beq.w	800d622 <_printf_float+0xc2>
 800d93a:	ee18 3a10 	vmov	r3, s16
 800d93e:	4652      	mov	r2, sl
 800d940:	4631      	mov	r1, r6
 800d942:	4628      	mov	r0, r5
 800d944:	47b8      	blx	r7
 800d946:	3001      	adds	r0, #1
 800d948:	f43f ae6b 	beq.w	800d622 <_printf_float+0xc2>
 800d94c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d950:	2200      	movs	r2, #0
 800d952:	2300      	movs	r3, #0
 800d954:	f7f3 f8d8 	bl	8000b08 <__aeabi_dcmpeq>
 800d958:	b9d8      	cbnz	r0, 800d992 <_printf_float+0x432>
 800d95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d95c:	f108 0201 	add.w	r2, r8, #1
 800d960:	3b01      	subs	r3, #1
 800d962:	4631      	mov	r1, r6
 800d964:	4628      	mov	r0, r5
 800d966:	47b8      	blx	r7
 800d968:	3001      	adds	r0, #1
 800d96a:	d10e      	bne.n	800d98a <_printf_float+0x42a>
 800d96c:	e659      	b.n	800d622 <_printf_float+0xc2>
 800d96e:	2301      	movs	r3, #1
 800d970:	4652      	mov	r2, sl
 800d972:	4631      	mov	r1, r6
 800d974:	4628      	mov	r0, r5
 800d976:	47b8      	blx	r7
 800d978:	3001      	adds	r0, #1
 800d97a:	f43f ae52 	beq.w	800d622 <_printf_float+0xc2>
 800d97e:	f108 0801 	add.w	r8, r8, #1
 800d982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d984:	3b01      	subs	r3, #1
 800d986:	4543      	cmp	r3, r8
 800d988:	dcf1      	bgt.n	800d96e <_printf_float+0x40e>
 800d98a:	464b      	mov	r3, r9
 800d98c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d990:	e6dc      	b.n	800d74c <_printf_float+0x1ec>
 800d992:	f04f 0800 	mov.w	r8, #0
 800d996:	f104 0a1a 	add.w	sl, r4, #26
 800d99a:	e7f2      	b.n	800d982 <_printf_float+0x422>
 800d99c:	2301      	movs	r3, #1
 800d99e:	4642      	mov	r2, r8
 800d9a0:	e7df      	b.n	800d962 <_printf_float+0x402>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	464a      	mov	r2, r9
 800d9a6:	4631      	mov	r1, r6
 800d9a8:	4628      	mov	r0, r5
 800d9aa:	47b8      	blx	r7
 800d9ac:	3001      	adds	r0, #1
 800d9ae:	f43f ae38 	beq.w	800d622 <_printf_float+0xc2>
 800d9b2:	f108 0801 	add.w	r8, r8, #1
 800d9b6:	68e3      	ldr	r3, [r4, #12]
 800d9b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d9ba:	1a5b      	subs	r3, r3, r1
 800d9bc:	4543      	cmp	r3, r8
 800d9be:	dcf0      	bgt.n	800d9a2 <_printf_float+0x442>
 800d9c0:	e6fa      	b.n	800d7b8 <_printf_float+0x258>
 800d9c2:	f04f 0800 	mov.w	r8, #0
 800d9c6:	f104 0919 	add.w	r9, r4, #25
 800d9ca:	e7f4      	b.n	800d9b6 <_printf_float+0x456>

0800d9cc <_printf_common>:
 800d9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9d0:	4616      	mov	r6, r2
 800d9d2:	4699      	mov	r9, r3
 800d9d4:	688a      	ldr	r2, [r1, #8]
 800d9d6:	690b      	ldr	r3, [r1, #16]
 800d9d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	bfb8      	it	lt
 800d9e0:	4613      	movlt	r3, r2
 800d9e2:	6033      	str	r3, [r6, #0]
 800d9e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d9e8:	4607      	mov	r7, r0
 800d9ea:	460c      	mov	r4, r1
 800d9ec:	b10a      	cbz	r2, 800d9f2 <_printf_common+0x26>
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	6033      	str	r3, [r6, #0]
 800d9f2:	6823      	ldr	r3, [r4, #0]
 800d9f4:	0699      	lsls	r1, r3, #26
 800d9f6:	bf42      	ittt	mi
 800d9f8:	6833      	ldrmi	r3, [r6, #0]
 800d9fa:	3302      	addmi	r3, #2
 800d9fc:	6033      	strmi	r3, [r6, #0]
 800d9fe:	6825      	ldr	r5, [r4, #0]
 800da00:	f015 0506 	ands.w	r5, r5, #6
 800da04:	d106      	bne.n	800da14 <_printf_common+0x48>
 800da06:	f104 0a19 	add.w	sl, r4, #25
 800da0a:	68e3      	ldr	r3, [r4, #12]
 800da0c:	6832      	ldr	r2, [r6, #0]
 800da0e:	1a9b      	subs	r3, r3, r2
 800da10:	42ab      	cmp	r3, r5
 800da12:	dc26      	bgt.n	800da62 <_printf_common+0x96>
 800da14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da18:	1e13      	subs	r3, r2, #0
 800da1a:	6822      	ldr	r2, [r4, #0]
 800da1c:	bf18      	it	ne
 800da1e:	2301      	movne	r3, #1
 800da20:	0692      	lsls	r2, r2, #26
 800da22:	d42b      	bmi.n	800da7c <_printf_common+0xb0>
 800da24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da28:	4649      	mov	r1, r9
 800da2a:	4638      	mov	r0, r7
 800da2c:	47c0      	blx	r8
 800da2e:	3001      	adds	r0, #1
 800da30:	d01e      	beq.n	800da70 <_printf_common+0xa4>
 800da32:	6823      	ldr	r3, [r4, #0]
 800da34:	68e5      	ldr	r5, [r4, #12]
 800da36:	6832      	ldr	r2, [r6, #0]
 800da38:	f003 0306 	and.w	r3, r3, #6
 800da3c:	2b04      	cmp	r3, #4
 800da3e:	bf08      	it	eq
 800da40:	1aad      	subeq	r5, r5, r2
 800da42:	68a3      	ldr	r3, [r4, #8]
 800da44:	6922      	ldr	r2, [r4, #16]
 800da46:	bf0c      	ite	eq
 800da48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da4c:	2500      	movne	r5, #0
 800da4e:	4293      	cmp	r3, r2
 800da50:	bfc4      	itt	gt
 800da52:	1a9b      	subgt	r3, r3, r2
 800da54:	18ed      	addgt	r5, r5, r3
 800da56:	2600      	movs	r6, #0
 800da58:	341a      	adds	r4, #26
 800da5a:	42b5      	cmp	r5, r6
 800da5c:	d11a      	bne.n	800da94 <_printf_common+0xc8>
 800da5e:	2000      	movs	r0, #0
 800da60:	e008      	b.n	800da74 <_printf_common+0xa8>
 800da62:	2301      	movs	r3, #1
 800da64:	4652      	mov	r2, sl
 800da66:	4649      	mov	r1, r9
 800da68:	4638      	mov	r0, r7
 800da6a:	47c0      	blx	r8
 800da6c:	3001      	adds	r0, #1
 800da6e:	d103      	bne.n	800da78 <_printf_common+0xac>
 800da70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da78:	3501      	adds	r5, #1
 800da7a:	e7c6      	b.n	800da0a <_printf_common+0x3e>
 800da7c:	18e1      	adds	r1, r4, r3
 800da7e:	1c5a      	adds	r2, r3, #1
 800da80:	2030      	movs	r0, #48	; 0x30
 800da82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da86:	4422      	add	r2, r4
 800da88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da90:	3302      	adds	r3, #2
 800da92:	e7c7      	b.n	800da24 <_printf_common+0x58>
 800da94:	2301      	movs	r3, #1
 800da96:	4622      	mov	r2, r4
 800da98:	4649      	mov	r1, r9
 800da9a:	4638      	mov	r0, r7
 800da9c:	47c0      	blx	r8
 800da9e:	3001      	adds	r0, #1
 800daa0:	d0e6      	beq.n	800da70 <_printf_common+0xa4>
 800daa2:	3601      	adds	r6, #1
 800daa4:	e7d9      	b.n	800da5a <_printf_common+0x8e>
	...

0800daa8 <_printf_i>:
 800daa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800daac:	460c      	mov	r4, r1
 800daae:	4691      	mov	r9, r2
 800dab0:	7e27      	ldrb	r7, [r4, #24]
 800dab2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dab4:	2f78      	cmp	r7, #120	; 0x78
 800dab6:	4680      	mov	r8, r0
 800dab8:	469a      	mov	sl, r3
 800daba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dabe:	d807      	bhi.n	800dad0 <_printf_i+0x28>
 800dac0:	2f62      	cmp	r7, #98	; 0x62
 800dac2:	d80a      	bhi.n	800dada <_printf_i+0x32>
 800dac4:	2f00      	cmp	r7, #0
 800dac6:	f000 80d8 	beq.w	800dc7a <_printf_i+0x1d2>
 800daca:	2f58      	cmp	r7, #88	; 0x58
 800dacc:	f000 80a3 	beq.w	800dc16 <_printf_i+0x16e>
 800dad0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dad8:	e03a      	b.n	800db50 <_printf_i+0xa8>
 800dada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dade:	2b15      	cmp	r3, #21
 800dae0:	d8f6      	bhi.n	800dad0 <_printf_i+0x28>
 800dae2:	a001      	add	r0, pc, #4	; (adr r0, 800dae8 <_printf_i+0x40>)
 800dae4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dae8:	0800db41 	.word	0x0800db41
 800daec:	0800db55 	.word	0x0800db55
 800daf0:	0800dad1 	.word	0x0800dad1
 800daf4:	0800dad1 	.word	0x0800dad1
 800daf8:	0800dad1 	.word	0x0800dad1
 800dafc:	0800dad1 	.word	0x0800dad1
 800db00:	0800db55 	.word	0x0800db55
 800db04:	0800dad1 	.word	0x0800dad1
 800db08:	0800dad1 	.word	0x0800dad1
 800db0c:	0800dad1 	.word	0x0800dad1
 800db10:	0800dad1 	.word	0x0800dad1
 800db14:	0800dc61 	.word	0x0800dc61
 800db18:	0800db85 	.word	0x0800db85
 800db1c:	0800dc43 	.word	0x0800dc43
 800db20:	0800dad1 	.word	0x0800dad1
 800db24:	0800dad1 	.word	0x0800dad1
 800db28:	0800dc83 	.word	0x0800dc83
 800db2c:	0800dad1 	.word	0x0800dad1
 800db30:	0800db85 	.word	0x0800db85
 800db34:	0800dad1 	.word	0x0800dad1
 800db38:	0800dad1 	.word	0x0800dad1
 800db3c:	0800dc4b 	.word	0x0800dc4b
 800db40:	680b      	ldr	r3, [r1, #0]
 800db42:	1d1a      	adds	r2, r3, #4
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	600a      	str	r2, [r1, #0]
 800db48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800db4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db50:	2301      	movs	r3, #1
 800db52:	e0a3      	b.n	800dc9c <_printf_i+0x1f4>
 800db54:	6825      	ldr	r5, [r4, #0]
 800db56:	6808      	ldr	r0, [r1, #0]
 800db58:	062e      	lsls	r6, r5, #24
 800db5a:	f100 0304 	add.w	r3, r0, #4
 800db5e:	d50a      	bpl.n	800db76 <_printf_i+0xce>
 800db60:	6805      	ldr	r5, [r0, #0]
 800db62:	600b      	str	r3, [r1, #0]
 800db64:	2d00      	cmp	r5, #0
 800db66:	da03      	bge.n	800db70 <_printf_i+0xc8>
 800db68:	232d      	movs	r3, #45	; 0x2d
 800db6a:	426d      	negs	r5, r5
 800db6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db70:	485e      	ldr	r0, [pc, #376]	; (800dcec <_printf_i+0x244>)
 800db72:	230a      	movs	r3, #10
 800db74:	e019      	b.n	800dbaa <_printf_i+0x102>
 800db76:	f015 0f40 	tst.w	r5, #64	; 0x40
 800db7a:	6805      	ldr	r5, [r0, #0]
 800db7c:	600b      	str	r3, [r1, #0]
 800db7e:	bf18      	it	ne
 800db80:	b22d      	sxthne	r5, r5
 800db82:	e7ef      	b.n	800db64 <_printf_i+0xbc>
 800db84:	680b      	ldr	r3, [r1, #0]
 800db86:	6825      	ldr	r5, [r4, #0]
 800db88:	1d18      	adds	r0, r3, #4
 800db8a:	6008      	str	r0, [r1, #0]
 800db8c:	0628      	lsls	r0, r5, #24
 800db8e:	d501      	bpl.n	800db94 <_printf_i+0xec>
 800db90:	681d      	ldr	r5, [r3, #0]
 800db92:	e002      	b.n	800db9a <_printf_i+0xf2>
 800db94:	0669      	lsls	r1, r5, #25
 800db96:	d5fb      	bpl.n	800db90 <_printf_i+0xe8>
 800db98:	881d      	ldrh	r5, [r3, #0]
 800db9a:	4854      	ldr	r0, [pc, #336]	; (800dcec <_printf_i+0x244>)
 800db9c:	2f6f      	cmp	r7, #111	; 0x6f
 800db9e:	bf0c      	ite	eq
 800dba0:	2308      	moveq	r3, #8
 800dba2:	230a      	movne	r3, #10
 800dba4:	2100      	movs	r1, #0
 800dba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dbaa:	6866      	ldr	r6, [r4, #4]
 800dbac:	60a6      	str	r6, [r4, #8]
 800dbae:	2e00      	cmp	r6, #0
 800dbb0:	bfa2      	ittt	ge
 800dbb2:	6821      	ldrge	r1, [r4, #0]
 800dbb4:	f021 0104 	bicge.w	r1, r1, #4
 800dbb8:	6021      	strge	r1, [r4, #0]
 800dbba:	b90d      	cbnz	r5, 800dbc0 <_printf_i+0x118>
 800dbbc:	2e00      	cmp	r6, #0
 800dbbe:	d04d      	beq.n	800dc5c <_printf_i+0x1b4>
 800dbc0:	4616      	mov	r6, r2
 800dbc2:	fbb5 f1f3 	udiv	r1, r5, r3
 800dbc6:	fb03 5711 	mls	r7, r3, r1, r5
 800dbca:	5dc7      	ldrb	r7, [r0, r7]
 800dbcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dbd0:	462f      	mov	r7, r5
 800dbd2:	42bb      	cmp	r3, r7
 800dbd4:	460d      	mov	r5, r1
 800dbd6:	d9f4      	bls.n	800dbc2 <_printf_i+0x11a>
 800dbd8:	2b08      	cmp	r3, #8
 800dbda:	d10b      	bne.n	800dbf4 <_printf_i+0x14c>
 800dbdc:	6823      	ldr	r3, [r4, #0]
 800dbde:	07df      	lsls	r7, r3, #31
 800dbe0:	d508      	bpl.n	800dbf4 <_printf_i+0x14c>
 800dbe2:	6923      	ldr	r3, [r4, #16]
 800dbe4:	6861      	ldr	r1, [r4, #4]
 800dbe6:	4299      	cmp	r1, r3
 800dbe8:	bfde      	ittt	le
 800dbea:	2330      	movle	r3, #48	; 0x30
 800dbec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbf0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800dbf4:	1b92      	subs	r2, r2, r6
 800dbf6:	6122      	str	r2, [r4, #16]
 800dbf8:	f8cd a000 	str.w	sl, [sp]
 800dbfc:	464b      	mov	r3, r9
 800dbfe:	aa03      	add	r2, sp, #12
 800dc00:	4621      	mov	r1, r4
 800dc02:	4640      	mov	r0, r8
 800dc04:	f7ff fee2 	bl	800d9cc <_printf_common>
 800dc08:	3001      	adds	r0, #1
 800dc0a:	d14c      	bne.n	800dca6 <_printf_i+0x1fe>
 800dc0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc10:	b004      	add	sp, #16
 800dc12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc16:	4835      	ldr	r0, [pc, #212]	; (800dcec <_printf_i+0x244>)
 800dc18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dc1c:	6823      	ldr	r3, [r4, #0]
 800dc1e:	680e      	ldr	r6, [r1, #0]
 800dc20:	061f      	lsls	r7, r3, #24
 800dc22:	f856 5b04 	ldr.w	r5, [r6], #4
 800dc26:	600e      	str	r6, [r1, #0]
 800dc28:	d514      	bpl.n	800dc54 <_printf_i+0x1ac>
 800dc2a:	07d9      	lsls	r1, r3, #31
 800dc2c:	bf44      	itt	mi
 800dc2e:	f043 0320 	orrmi.w	r3, r3, #32
 800dc32:	6023      	strmi	r3, [r4, #0]
 800dc34:	b91d      	cbnz	r5, 800dc3e <_printf_i+0x196>
 800dc36:	6823      	ldr	r3, [r4, #0]
 800dc38:	f023 0320 	bic.w	r3, r3, #32
 800dc3c:	6023      	str	r3, [r4, #0]
 800dc3e:	2310      	movs	r3, #16
 800dc40:	e7b0      	b.n	800dba4 <_printf_i+0xfc>
 800dc42:	6823      	ldr	r3, [r4, #0]
 800dc44:	f043 0320 	orr.w	r3, r3, #32
 800dc48:	6023      	str	r3, [r4, #0]
 800dc4a:	2378      	movs	r3, #120	; 0x78
 800dc4c:	4828      	ldr	r0, [pc, #160]	; (800dcf0 <_printf_i+0x248>)
 800dc4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc52:	e7e3      	b.n	800dc1c <_printf_i+0x174>
 800dc54:	065e      	lsls	r6, r3, #25
 800dc56:	bf48      	it	mi
 800dc58:	b2ad      	uxthmi	r5, r5
 800dc5a:	e7e6      	b.n	800dc2a <_printf_i+0x182>
 800dc5c:	4616      	mov	r6, r2
 800dc5e:	e7bb      	b.n	800dbd8 <_printf_i+0x130>
 800dc60:	680b      	ldr	r3, [r1, #0]
 800dc62:	6826      	ldr	r6, [r4, #0]
 800dc64:	6960      	ldr	r0, [r4, #20]
 800dc66:	1d1d      	adds	r5, r3, #4
 800dc68:	600d      	str	r5, [r1, #0]
 800dc6a:	0635      	lsls	r5, r6, #24
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	d501      	bpl.n	800dc74 <_printf_i+0x1cc>
 800dc70:	6018      	str	r0, [r3, #0]
 800dc72:	e002      	b.n	800dc7a <_printf_i+0x1d2>
 800dc74:	0671      	lsls	r1, r6, #25
 800dc76:	d5fb      	bpl.n	800dc70 <_printf_i+0x1c8>
 800dc78:	8018      	strh	r0, [r3, #0]
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	6123      	str	r3, [r4, #16]
 800dc7e:	4616      	mov	r6, r2
 800dc80:	e7ba      	b.n	800dbf8 <_printf_i+0x150>
 800dc82:	680b      	ldr	r3, [r1, #0]
 800dc84:	1d1a      	adds	r2, r3, #4
 800dc86:	600a      	str	r2, [r1, #0]
 800dc88:	681e      	ldr	r6, [r3, #0]
 800dc8a:	6862      	ldr	r2, [r4, #4]
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	4630      	mov	r0, r6
 800dc90:	f7f2 fac6 	bl	8000220 <memchr>
 800dc94:	b108      	cbz	r0, 800dc9a <_printf_i+0x1f2>
 800dc96:	1b80      	subs	r0, r0, r6
 800dc98:	6060      	str	r0, [r4, #4]
 800dc9a:	6863      	ldr	r3, [r4, #4]
 800dc9c:	6123      	str	r3, [r4, #16]
 800dc9e:	2300      	movs	r3, #0
 800dca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dca4:	e7a8      	b.n	800dbf8 <_printf_i+0x150>
 800dca6:	6923      	ldr	r3, [r4, #16]
 800dca8:	4632      	mov	r2, r6
 800dcaa:	4649      	mov	r1, r9
 800dcac:	4640      	mov	r0, r8
 800dcae:	47d0      	blx	sl
 800dcb0:	3001      	adds	r0, #1
 800dcb2:	d0ab      	beq.n	800dc0c <_printf_i+0x164>
 800dcb4:	6823      	ldr	r3, [r4, #0]
 800dcb6:	079b      	lsls	r3, r3, #30
 800dcb8:	d413      	bmi.n	800dce2 <_printf_i+0x23a>
 800dcba:	68e0      	ldr	r0, [r4, #12]
 800dcbc:	9b03      	ldr	r3, [sp, #12]
 800dcbe:	4298      	cmp	r0, r3
 800dcc0:	bfb8      	it	lt
 800dcc2:	4618      	movlt	r0, r3
 800dcc4:	e7a4      	b.n	800dc10 <_printf_i+0x168>
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	4632      	mov	r2, r6
 800dcca:	4649      	mov	r1, r9
 800dccc:	4640      	mov	r0, r8
 800dcce:	47d0      	blx	sl
 800dcd0:	3001      	adds	r0, #1
 800dcd2:	d09b      	beq.n	800dc0c <_printf_i+0x164>
 800dcd4:	3501      	adds	r5, #1
 800dcd6:	68e3      	ldr	r3, [r4, #12]
 800dcd8:	9903      	ldr	r1, [sp, #12]
 800dcda:	1a5b      	subs	r3, r3, r1
 800dcdc:	42ab      	cmp	r3, r5
 800dcde:	dcf2      	bgt.n	800dcc6 <_printf_i+0x21e>
 800dce0:	e7eb      	b.n	800dcba <_printf_i+0x212>
 800dce2:	2500      	movs	r5, #0
 800dce4:	f104 0619 	add.w	r6, r4, #25
 800dce8:	e7f5      	b.n	800dcd6 <_printf_i+0x22e>
 800dcea:	bf00      	nop
 800dcec:	08013c32 	.word	0x08013c32
 800dcf0:	08013c43 	.word	0x08013c43

0800dcf4 <_scanf_float>:
 800dcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf8:	b087      	sub	sp, #28
 800dcfa:	4617      	mov	r7, r2
 800dcfc:	9303      	str	r3, [sp, #12]
 800dcfe:	688b      	ldr	r3, [r1, #8]
 800dd00:	1e5a      	subs	r2, r3, #1
 800dd02:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dd06:	bf83      	ittte	hi
 800dd08:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dd0c:	195b      	addhi	r3, r3, r5
 800dd0e:	9302      	strhi	r3, [sp, #8]
 800dd10:	2300      	movls	r3, #0
 800dd12:	bf86      	itte	hi
 800dd14:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dd18:	608b      	strhi	r3, [r1, #8]
 800dd1a:	9302      	strls	r3, [sp, #8]
 800dd1c:	680b      	ldr	r3, [r1, #0]
 800dd1e:	468b      	mov	fp, r1
 800dd20:	2500      	movs	r5, #0
 800dd22:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800dd26:	f84b 3b1c 	str.w	r3, [fp], #28
 800dd2a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dd2e:	4680      	mov	r8, r0
 800dd30:	460c      	mov	r4, r1
 800dd32:	465e      	mov	r6, fp
 800dd34:	46aa      	mov	sl, r5
 800dd36:	46a9      	mov	r9, r5
 800dd38:	9501      	str	r5, [sp, #4]
 800dd3a:	68a2      	ldr	r2, [r4, #8]
 800dd3c:	b152      	cbz	r2, 800dd54 <_scanf_float+0x60>
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	2b4e      	cmp	r3, #78	; 0x4e
 800dd44:	d864      	bhi.n	800de10 <_scanf_float+0x11c>
 800dd46:	2b40      	cmp	r3, #64	; 0x40
 800dd48:	d83c      	bhi.n	800ddc4 <_scanf_float+0xd0>
 800dd4a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800dd4e:	b2c8      	uxtb	r0, r1
 800dd50:	280e      	cmp	r0, #14
 800dd52:	d93a      	bls.n	800ddca <_scanf_float+0xd6>
 800dd54:	f1b9 0f00 	cmp.w	r9, #0
 800dd58:	d003      	beq.n	800dd62 <_scanf_float+0x6e>
 800dd5a:	6823      	ldr	r3, [r4, #0]
 800dd5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd60:	6023      	str	r3, [r4, #0]
 800dd62:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800dd66:	f1ba 0f01 	cmp.w	sl, #1
 800dd6a:	f200 8113 	bhi.w	800df94 <_scanf_float+0x2a0>
 800dd6e:	455e      	cmp	r6, fp
 800dd70:	f200 8105 	bhi.w	800df7e <_scanf_float+0x28a>
 800dd74:	2501      	movs	r5, #1
 800dd76:	4628      	mov	r0, r5
 800dd78:	b007      	add	sp, #28
 800dd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd7e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800dd82:	2a0d      	cmp	r2, #13
 800dd84:	d8e6      	bhi.n	800dd54 <_scanf_float+0x60>
 800dd86:	a101      	add	r1, pc, #4	; (adr r1, 800dd8c <_scanf_float+0x98>)
 800dd88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dd8c:	0800decb 	.word	0x0800decb
 800dd90:	0800dd55 	.word	0x0800dd55
 800dd94:	0800dd55 	.word	0x0800dd55
 800dd98:	0800dd55 	.word	0x0800dd55
 800dd9c:	0800df2b 	.word	0x0800df2b
 800dda0:	0800df03 	.word	0x0800df03
 800dda4:	0800dd55 	.word	0x0800dd55
 800dda8:	0800dd55 	.word	0x0800dd55
 800ddac:	0800ded9 	.word	0x0800ded9
 800ddb0:	0800dd55 	.word	0x0800dd55
 800ddb4:	0800dd55 	.word	0x0800dd55
 800ddb8:	0800dd55 	.word	0x0800dd55
 800ddbc:	0800dd55 	.word	0x0800dd55
 800ddc0:	0800de91 	.word	0x0800de91
 800ddc4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ddc8:	e7db      	b.n	800dd82 <_scanf_float+0x8e>
 800ddca:	290e      	cmp	r1, #14
 800ddcc:	d8c2      	bhi.n	800dd54 <_scanf_float+0x60>
 800ddce:	a001      	add	r0, pc, #4	; (adr r0, 800ddd4 <_scanf_float+0xe0>)
 800ddd0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ddd4:	0800de83 	.word	0x0800de83
 800ddd8:	0800dd55 	.word	0x0800dd55
 800dddc:	0800de83 	.word	0x0800de83
 800dde0:	0800df17 	.word	0x0800df17
 800dde4:	0800dd55 	.word	0x0800dd55
 800dde8:	0800de31 	.word	0x0800de31
 800ddec:	0800de6d 	.word	0x0800de6d
 800ddf0:	0800de6d 	.word	0x0800de6d
 800ddf4:	0800de6d 	.word	0x0800de6d
 800ddf8:	0800de6d 	.word	0x0800de6d
 800ddfc:	0800de6d 	.word	0x0800de6d
 800de00:	0800de6d 	.word	0x0800de6d
 800de04:	0800de6d 	.word	0x0800de6d
 800de08:	0800de6d 	.word	0x0800de6d
 800de0c:	0800de6d 	.word	0x0800de6d
 800de10:	2b6e      	cmp	r3, #110	; 0x6e
 800de12:	d809      	bhi.n	800de28 <_scanf_float+0x134>
 800de14:	2b60      	cmp	r3, #96	; 0x60
 800de16:	d8b2      	bhi.n	800dd7e <_scanf_float+0x8a>
 800de18:	2b54      	cmp	r3, #84	; 0x54
 800de1a:	d077      	beq.n	800df0c <_scanf_float+0x218>
 800de1c:	2b59      	cmp	r3, #89	; 0x59
 800de1e:	d199      	bne.n	800dd54 <_scanf_float+0x60>
 800de20:	2d07      	cmp	r5, #7
 800de22:	d197      	bne.n	800dd54 <_scanf_float+0x60>
 800de24:	2508      	movs	r5, #8
 800de26:	e029      	b.n	800de7c <_scanf_float+0x188>
 800de28:	2b74      	cmp	r3, #116	; 0x74
 800de2a:	d06f      	beq.n	800df0c <_scanf_float+0x218>
 800de2c:	2b79      	cmp	r3, #121	; 0x79
 800de2e:	e7f6      	b.n	800de1e <_scanf_float+0x12a>
 800de30:	6821      	ldr	r1, [r4, #0]
 800de32:	05c8      	lsls	r0, r1, #23
 800de34:	d51a      	bpl.n	800de6c <_scanf_float+0x178>
 800de36:	9b02      	ldr	r3, [sp, #8]
 800de38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800de3c:	6021      	str	r1, [r4, #0]
 800de3e:	f109 0901 	add.w	r9, r9, #1
 800de42:	b11b      	cbz	r3, 800de4c <_scanf_float+0x158>
 800de44:	3b01      	subs	r3, #1
 800de46:	3201      	adds	r2, #1
 800de48:	9302      	str	r3, [sp, #8]
 800de4a:	60a2      	str	r2, [r4, #8]
 800de4c:	68a3      	ldr	r3, [r4, #8]
 800de4e:	3b01      	subs	r3, #1
 800de50:	60a3      	str	r3, [r4, #8]
 800de52:	6923      	ldr	r3, [r4, #16]
 800de54:	3301      	adds	r3, #1
 800de56:	6123      	str	r3, [r4, #16]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	3b01      	subs	r3, #1
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	607b      	str	r3, [r7, #4]
 800de60:	f340 8084 	ble.w	800df6c <_scanf_float+0x278>
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	3301      	adds	r3, #1
 800de68:	603b      	str	r3, [r7, #0]
 800de6a:	e766      	b.n	800dd3a <_scanf_float+0x46>
 800de6c:	eb1a 0f05 	cmn.w	sl, r5
 800de70:	f47f af70 	bne.w	800dd54 <_scanf_float+0x60>
 800de74:	6822      	ldr	r2, [r4, #0]
 800de76:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800de7a:	6022      	str	r2, [r4, #0]
 800de7c:	f806 3b01 	strb.w	r3, [r6], #1
 800de80:	e7e4      	b.n	800de4c <_scanf_float+0x158>
 800de82:	6822      	ldr	r2, [r4, #0]
 800de84:	0610      	lsls	r0, r2, #24
 800de86:	f57f af65 	bpl.w	800dd54 <_scanf_float+0x60>
 800de8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800de8e:	e7f4      	b.n	800de7a <_scanf_float+0x186>
 800de90:	f1ba 0f00 	cmp.w	sl, #0
 800de94:	d10e      	bne.n	800deb4 <_scanf_float+0x1c0>
 800de96:	f1b9 0f00 	cmp.w	r9, #0
 800de9a:	d10e      	bne.n	800deba <_scanf_float+0x1c6>
 800de9c:	6822      	ldr	r2, [r4, #0]
 800de9e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dea2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dea6:	d108      	bne.n	800deba <_scanf_float+0x1c6>
 800dea8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800deac:	6022      	str	r2, [r4, #0]
 800deae:	f04f 0a01 	mov.w	sl, #1
 800deb2:	e7e3      	b.n	800de7c <_scanf_float+0x188>
 800deb4:	f1ba 0f02 	cmp.w	sl, #2
 800deb8:	d055      	beq.n	800df66 <_scanf_float+0x272>
 800deba:	2d01      	cmp	r5, #1
 800debc:	d002      	beq.n	800dec4 <_scanf_float+0x1d0>
 800debe:	2d04      	cmp	r5, #4
 800dec0:	f47f af48 	bne.w	800dd54 <_scanf_float+0x60>
 800dec4:	3501      	adds	r5, #1
 800dec6:	b2ed      	uxtb	r5, r5
 800dec8:	e7d8      	b.n	800de7c <_scanf_float+0x188>
 800deca:	f1ba 0f01 	cmp.w	sl, #1
 800dece:	f47f af41 	bne.w	800dd54 <_scanf_float+0x60>
 800ded2:	f04f 0a02 	mov.w	sl, #2
 800ded6:	e7d1      	b.n	800de7c <_scanf_float+0x188>
 800ded8:	b97d      	cbnz	r5, 800defa <_scanf_float+0x206>
 800deda:	f1b9 0f00 	cmp.w	r9, #0
 800dede:	f47f af3c 	bne.w	800dd5a <_scanf_float+0x66>
 800dee2:	6822      	ldr	r2, [r4, #0]
 800dee4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dee8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800deec:	f47f af39 	bne.w	800dd62 <_scanf_float+0x6e>
 800def0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800def4:	6022      	str	r2, [r4, #0]
 800def6:	2501      	movs	r5, #1
 800def8:	e7c0      	b.n	800de7c <_scanf_float+0x188>
 800defa:	2d03      	cmp	r5, #3
 800defc:	d0e2      	beq.n	800dec4 <_scanf_float+0x1d0>
 800defe:	2d05      	cmp	r5, #5
 800df00:	e7de      	b.n	800dec0 <_scanf_float+0x1cc>
 800df02:	2d02      	cmp	r5, #2
 800df04:	f47f af26 	bne.w	800dd54 <_scanf_float+0x60>
 800df08:	2503      	movs	r5, #3
 800df0a:	e7b7      	b.n	800de7c <_scanf_float+0x188>
 800df0c:	2d06      	cmp	r5, #6
 800df0e:	f47f af21 	bne.w	800dd54 <_scanf_float+0x60>
 800df12:	2507      	movs	r5, #7
 800df14:	e7b2      	b.n	800de7c <_scanf_float+0x188>
 800df16:	6822      	ldr	r2, [r4, #0]
 800df18:	0591      	lsls	r1, r2, #22
 800df1a:	f57f af1b 	bpl.w	800dd54 <_scanf_float+0x60>
 800df1e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800df22:	6022      	str	r2, [r4, #0]
 800df24:	f8cd 9004 	str.w	r9, [sp, #4]
 800df28:	e7a8      	b.n	800de7c <_scanf_float+0x188>
 800df2a:	6822      	ldr	r2, [r4, #0]
 800df2c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800df30:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800df34:	d006      	beq.n	800df44 <_scanf_float+0x250>
 800df36:	0550      	lsls	r0, r2, #21
 800df38:	f57f af0c 	bpl.w	800dd54 <_scanf_float+0x60>
 800df3c:	f1b9 0f00 	cmp.w	r9, #0
 800df40:	f43f af0f 	beq.w	800dd62 <_scanf_float+0x6e>
 800df44:	0591      	lsls	r1, r2, #22
 800df46:	bf58      	it	pl
 800df48:	9901      	ldrpl	r1, [sp, #4]
 800df4a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800df4e:	bf58      	it	pl
 800df50:	eba9 0101 	subpl.w	r1, r9, r1
 800df54:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800df58:	bf58      	it	pl
 800df5a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800df5e:	6022      	str	r2, [r4, #0]
 800df60:	f04f 0900 	mov.w	r9, #0
 800df64:	e78a      	b.n	800de7c <_scanf_float+0x188>
 800df66:	f04f 0a03 	mov.w	sl, #3
 800df6a:	e787      	b.n	800de7c <_scanf_float+0x188>
 800df6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800df70:	4639      	mov	r1, r7
 800df72:	4640      	mov	r0, r8
 800df74:	4798      	blx	r3
 800df76:	2800      	cmp	r0, #0
 800df78:	f43f aedf 	beq.w	800dd3a <_scanf_float+0x46>
 800df7c:	e6ea      	b.n	800dd54 <_scanf_float+0x60>
 800df7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800df82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800df86:	463a      	mov	r2, r7
 800df88:	4640      	mov	r0, r8
 800df8a:	4798      	blx	r3
 800df8c:	6923      	ldr	r3, [r4, #16]
 800df8e:	3b01      	subs	r3, #1
 800df90:	6123      	str	r3, [r4, #16]
 800df92:	e6ec      	b.n	800dd6e <_scanf_float+0x7a>
 800df94:	1e6b      	subs	r3, r5, #1
 800df96:	2b06      	cmp	r3, #6
 800df98:	d825      	bhi.n	800dfe6 <_scanf_float+0x2f2>
 800df9a:	2d02      	cmp	r5, #2
 800df9c:	d836      	bhi.n	800e00c <_scanf_float+0x318>
 800df9e:	455e      	cmp	r6, fp
 800dfa0:	f67f aee8 	bls.w	800dd74 <_scanf_float+0x80>
 800dfa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dfa8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dfac:	463a      	mov	r2, r7
 800dfae:	4640      	mov	r0, r8
 800dfb0:	4798      	blx	r3
 800dfb2:	6923      	ldr	r3, [r4, #16]
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	6123      	str	r3, [r4, #16]
 800dfb8:	e7f1      	b.n	800df9e <_scanf_float+0x2aa>
 800dfba:	9802      	ldr	r0, [sp, #8]
 800dfbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dfc0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800dfc4:	9002      	str	r0, [sp, #8]
 800dfc6:	463a      	mov	r2, r7
 800dfc8:	4640      	mov	r0, r8
 800dfca:	4798      	blx	r3
 800dfcc:	6923      	ldr	r3, [r4, #16]
 800dfce:	3b01      	subs	r3, #1
 800dfd0:	6123      	str	r3, [r4, #16]
 800dfd2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800dfd6:	fa5f fa8a 	uxtb.w	sl, sl
 800dfda:	f1ba 0f02 	cmp.w	sl, #2
 800dfde:	d1ec      	bne.n	800dfba <_scanf_float+0x2c6>
 800dfe0:	3d03      	subs	r5, #3
 800dfe2:	b2ed      	uxtb	r5, r5
 800dfe4:	1b76      	subs	r6, r6, r5
 800dfe6:	6823      	ldr	r3, [r4, #0]
 800dfe8:	05da      	lsls	r2, r3, #23
 800dfea:	d52f      	bpl.n	800e04c <_scanf_float+0x358>
 800dfec:	055b      	lsls	r3, r3, #21
 800dfee:	d510      	bpl.n	800e012 <_scanf_float+0x31e>
 800dff0:	455e      	cmp	r6, fp
 800dff2:	f67f aebf 	bls.w	800dd74 <_scanf_float+0x80>
 800dff6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dffa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dffe:	463a      	mov	r2, r7
 800e000:	4640      	mov	r0, r8
 800e002:	4798      	blx	r3
 800e004:	6923      	ldr	r3, [r4, #16]
 800e006:	3b01      	subs	r3, #1
 800e008:	6123      	str	r3, [r4, #16]
 800e00a:	e7f1      	b.n	800dff0 <_scanf_float+0x2fc>
 800e00c:	46aa      	mov	sl, r5
 800e00e:	9602      	str	r6, [sp, #8]
 800e010:	e7df      	b.n	800dfd2 <_scanf_float+0x2de>
 800e012:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e016:	6923      	ldr	r3, [r4, #16]
 800e018:	2965      	cmp	r1, #101	; 0x65
 800e01a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e01e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800e022:	6123      	str	r3, [r4, #16]
 800e024:	d00c      	beq.n	800e040 <_scanf_float+0x34c>
 800e026:	2945      	cmp	r1, #69	; 0x45
 800e028:	d00a      	beq.n	800e040 <_scanf_float+0x34c>
 800e02a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e02e:	463a      	mov	r2, r7
 800e030:	4640      	mov	r0, r8
 800e032:	4798      	blx	r3
 800e034:	6923      	ldr	r3, [r4, #16]
 800e036:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e03a:	3b01      	subs	r3, #1
 800e03c:	1eb5      	subs	r5, r6, #2
 800e03e:	6123      	str	r3, [r4, #16]
 800e040:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e044:	463a      	mov	r2, r7
 800e046:	4640      	mov	r0, r8
 800e048:	4798      	blx	r3
 800e04a:	462e      	mov	r6, r5
 800e04c:	6825      	ldr	r5, [r4, #0]
 800e04e:	f015 0510 	ands.w	r5, r5, #16
 800e052:	d158      	bne.n	800e106 <_scanf_float+0x412>
 800e054:	7035      	strb	r5, [r6, #0]
 800e056:	6823      	ldr	r3, [r4, #0]
 800e058:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e05c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e060:	d11c      	bne.n	800e09c <_scanf_float+0x3a8>
 800e062:	9b01      	ldr	r3, [sp, #4]
 800e064:	454b      	cmp	r3, r9
 800e066:	eba3 0209 	sub.w	r2, r3, r9
 800e06a:	d124      	bne.n	800e0b6 <_scanf_float+0x3c2>
 800e06c:	2200      	movs	r2, #0
 800e06e:	4659      	mov	r1, fp
 800e070:	4640      	mov	r0, r8
 800e072:	f000 febb 	bl	800edec <_strtod_r>
 800e076:	9b03      	ldr	r3, [sp, #12]
 800e078:	6821      	ldr	r1, [r4, #0]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f011 0f02 	tst.w	r1, #2
 800e080:	ec57 6b10 	vmov	r6, r7, d0
 800e084:	f103 0204 	add.w	r2, r3, #4
 800e088:	d020      	beq.n	800e0cc <_scanf_float+0x3d8>
 800e08a:	9903      	ldr	r1, [sp, #12]
 800e08c:	600a      	str	r2, [r1, #0]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	e9c3 6700 	strd	r6, r7, [r3]
 800e094:	68e3      	ldr	r3, [r4, #12]
 800e096:	3301      	adds	r3, #1
 800e098:	60e3      	str	r3, [r4, #12]
 800e09a:	e66c      	b.n	800dd76 <_scanf_float+0x82>
 800e09c:	9b04      	ldr	r3, [sp, #16]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d0e4      	beq.n	800e06c <_scanf_float+0x378>
 800e0a2:	9905      	ldr	r1, [sp, #20]
 800e0a4:	230a      	movs	r3, #10
 800e0a6:	462a      	mov	r2, r5
 800e0a8:	3101      	adds	r1, #1
 800e0aa:	4640      	mov	r0, r8
 800e0ac:	f000 ff28 	bl	800ef00 <_strtol_r>
 800e0b0:	9b04      	ldr	r3, [sp, #16]
 800e0b2:	9e05      	ldr	r6, [sp, #20]
 800e0b4:	1ac2      	subs	r2, r0, r3
 800e0b6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e0ba:	429e      	cmp	r6, r3
 800e0bc:	bf28      	it	cs
 800e0be:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e0c2:	4912      	ldr	r1, [pc, #72]	; (800e10c <_scanf_float+0x418>)
 800e0c4:	4630      	mov	r0, r6
 800e0c6:	f000 f83b 	bl	800e140 <siprintf>
 800e0ca:	e7cf      	b.n	800e06c <_scanf_float+0x378>
 800e0cc:	f011 0f04 	tst.w	r1, #4
 800e0d0:	9903      	ldr	r1, [sp, #12]
 800e0d2:	600a      	str	r2, [r1, #0]
 800e0d4:	d1db      	bne.n	800e08e <_scanf_float+0x39a>
 800e0d6:	f8d3 8000 	ldr.w	r8, [r3]
 800e0da:	ee10 2a10 	vmov	r2, s0
 800e0de:	ee10 0a10 	vmov	r0, s0
 800e0e2:	463b      	mov	r3, r7
 800e0e4:	4639      	mov	r1, r7
 800e0e6:	f7f2 fd41 	bl	8000b6c <__aeabi_dcmpun>
 800e0ea:	b128      	cbz	r0, 800e0f8 <_scanf_float+0x404>
 800e0ec:	4808      	ldr	r0, [pc, #32]	; (800e110 <_scanf_float+0x41c>)
 800e0ee:	f000 f821 	bl	800e134 <nanf>
 800e0f2:	ed88 0a00 	vstr	s0, [r8]
 800e0f6:	e7cd      	b.n	800e094 <_scanf_float+0x3a0>
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	4639      	mov	r1, r7
 800e0fc:	f7f2 fd94 	bl	8000c28 <__aeabi_d2f>
 800e100:	f8c8 0000 	str.w	r0, [r8]
 800e104:	e7c6      	b.n	800e094 <_scanf_float+0x3a0>
 800e106:	2500      	movs	r5, #0
 800e108:	e635      	b.n	800dd76 <_scanf_float+0x82>
 800e10a:	bf00      	nop
 800e10c:	08013c54 	.word	0x08013c54
 800e110:	080140d0 	.word	0x080140d0

0800e114 <_sbrk_r>:
 800e114:	b538      	push	{r3, r4, r5, lr}
 800e116:	4d06      	ldr	r5, [pc, #24]	; (800e130 <_sbrk_r+0x1c>)
 800e118:	2300      	movs	r3, #0
 800e11a:	4604      	mov	r4, r0
 800e11c:	4608      	mov	r0, r1
 800e11e:	602b      	str	r3, [r5, #0]
 800e120:	f7f4 fee2 	bl	8002ee8 <_sbrk>
 800e124:	1c43      	adds	r3, r0, #1
 800e126:	d102      	bne.n	800e12e <_sbrk_r+0x1a>
 800e128:	682b      	ldr	r3, [r5, #0]
 800e12a:	b103      	cbz	r3, 800e12e <_sbrk_r+0x1a>
 800e12c:	6023      	str	r3, [r4, #0]
 800e12e:	bd38      	pop	{r3, r4, r5, pc}
 800e130:	20007410 	.word	0x20007410

0800e134 <nanf>:
 800e134:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e13c <nanf+0x8>
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	7fc00000 	.word	0x7fc00000

0800e140 <siprintf>:
 800e140:	b40e      	push	{r1, r2, r3}
 800e142:	b500      	push	{lr}
 800e144:	b09c      	sub	sp, #112	; 0x70
 800e146:	ab1d      	add	r3, sp, #116	; 0x74
 800e148:	9002      	str	r0, [sp, #8]
 800e14a:	9006      	str	r0, [sp, #24]
 800e14c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e150:	4809      	ldr	r0, [pc, #36]	; (800e178 <siprintf+0x38>)
 800e152:	9107      	str	r1, [sp, #28]
 800e154:	9104      	str	r1, [sp, #16]
 800e156:	4909      	ldr	r1, [pc, #36]	; (800e17c <siprintf+0x3c>)
 800e158:	f853 2b04 	ldr.w	r2, [r3], #4
 800e15c:	9105      	str	r1, [sp, #20]
 800e15e:	6800      	ldr	r0, [r0, #0]
 800e160:	9301      	str	r3, [sp, #4]
 800e162:	a902      	add	r1, sp, #8
 800e164:	f003 f8ce 	bl	8011304 <_svfiprintf_r>
 800e168:	9b02      	ldr	r3, [sp, #8]
 800e16a:	2200      	movs	r2, #0
 800e16c:	701a      	strb	r2, [r3, #0]
 800e16e:	b01c      	add	sp, #112	; 0x70
 800e170:	f85d eb04 	ldr.w	lr, [sp], #4
 800e174:	b003      	add	sp, #12
 800e176:	4770      	bx	lr
 800e178:	20000014 	.word	0x20000014
 800e17c:	ffff0208 	.word	0xffff0208

0800e180 <strcat>:
 800e180:	b510      	push	{r4, lr}
 800e182:	4602      	mov	r2, r0
 800e184:	7814      	ldrb	r4, [r2, #0]
 800e186:	4613      	mov	r3, r2
 800e188:	3201      	adds	r2, #1
 800e18a:	2c00      	cmp	r4, #0
 800e18c:	d1fa      	bne.n	800e184 <strcat+0x4>
 800e18e:	3b01      	subs	r3, #1
 800e190:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e194:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e198:	2a00      	cmp	r2, #0
 800e19a:	d1f9      	bne.n	800e190 <strcat+0x10>
 800e19c:	bd10      	pop	{r4, pc}

0800e19e <sulp>:
 800e19e:	b570      	push	{r4, r5, r6, lr}
 800e1a0:	4604      	mov	r4, r0
 800e1a2:	460d      	mov	r5, r1
 800e1a4:	ec45 4b10 	vmov	d0, r4, r5
 800e1a8:	4616      	mov	r6, r2
 800e1aa:	f002 ff01 	bl	8010fb0 <__ulp>
 800e1ae:	ec51 0b10 	vmov	r0, r1, d0
 800e1b2:	b17e      	cbz	r6, 800e1d4 <sulp+0x36>
 800e1b4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e1b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	dd09      	ble.n	800e1d4 <sulp+0x36>
 800e1c0:	051b      	lsls	r3, r3, #20
 800e1c2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e1c6:	2400      	movs	r4, #0
 800e1c8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e1cc:	4622      	mov	r2, r4
 800e1ce:	462b      	mov	r3, r5
 800e1d0:	f7f2 fa32 	bl	8000638 <__aeabi_dmul>
 800e1d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e1d8 <_strtod_l>:
 800e1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1dc:	b0a3      	sub	sp, #140	; 0x8c
 800e1de:	461f      	mov	r7, r3
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	931e      	str	r3, [sp, #120]	; 0x78
 800e1e4:	4ba4      	ldr	r3, [pc, #656]	; (800e478 <_strtod_l+0x2a0>)
 800e1e6:	9219      	str	r2, [sp, #100]	; 0x64
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	9307      	str	r3, [sp, #28]
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	4688      	mov	r8, r1
 800e1f2:	f7f2 f80d 	bl	8000210 <strlen>
 800e1f6:	f04f 0a00 	mov.w	sl, #0
 800e1fa:	4605      	mov	r5, r0
 800e1fc:	f04f 0b00 	mov.w	fp, #0
 800e200:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e204:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e206:	781a      	ldrb	r2, [r3, #0]
 800e208:	2a2b      	cmp	r2, #43	; 0x2b
 800e20a:	d04c      	beq.n	800e2a6 <_strtod_l+0xce>
 800e20c:	d839      	bhi.n	800e282 <_strtod_l+0xaa>
 800e20e:	2a0d      	cmp	r2, #13
 800e210:	d832      	bhi.n	800e278 <_strtod_l+0xa0>
 800e212:	2a08      	cmp	r2, #8
 800e214:	d832      	bhi.n	800e27c <_strtod_l+0xa4>
 800e216:	2a00      	cmp	r2, #0
 800e218:	d03c      	beq.n	800e294 <_strtod_l+0xbc>
 800e21a:	2300      	movs	r3, #0
 800e21c:	930e      	str	r3, [sp, #56]	; 0x38
 800e21e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e220:	7833      	ldrb	r3, [r6, #0]
 800e222:	2b30      	cmp	r3, #48	; 0x30
 800e224:	f040 80b4 	bne.w	800e390 <_strtod_l+0x1b8>
 800e228:	7873      	ldrb	r3, [r6, #1]
 800e22a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e22e:	2b58      	cmp	r3, #88	; 0x58
 800e230:	d16c      	bne.n	800e30c <_strtod_l+0x134>
 800e232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e234:	9301      	str	r3, [sp, #4]
 800e236:	ab1e      	add	r3, sp, #120	; 0x78
 800e238:	9702      	str	r7, [sp, #8]
 800e23a:	9300      	str	r3, [sp, #0]
 800e23c:	4a8f      	ldr	r2, [pc, #572]	; (800e47c <_strtod_l+0x2a4>)
 800e23e:	ab1f      	add	r3, sp, #124	; 0x7c
 800e240:	a91d      	add	r1, sp, #116	; 0x74
 800e242:	4620      	mov	r0, r4
 800e244:	f001 ffb6 	bl	80101b4 <__gethex>
 800e248:	f010 0707 	ands.w	r7, r0, #7
 800e24c:	4605      	mov	r5, r0
 800e24e:	d005      	beq.n	800e25c <_strtod_l+0x84>
 800e250:	2f06      	cmp	r7, #6
 800e252:	d12a      	bne.n	800e2aa <_strtod_l+0xd2>
 800e254:	3601      	adds	r6, #1
 800e256:	2300      	movs	r3, #0
 800e258:	961d      	str	r6, [sp, #116]	; 0x74
 800e25a:	930e      	str	r3, [sp, #56]	; 0x38
 800e25c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e25e:	2b00      	cmp	r3, #0
 800e260:	f040 8596 	bne.w	800ed90 <_strtod_l+0xbb8>
 800e264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e266:	b1db      	cbz	r3, 800e2a0 <_strtod_l+0xc8>
 800e268:	4652      	mov	r2, sl
 800e26a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e26e:	ec43 2b10 	vmov	d0, r2, r3
 800e272:	b023      	add	sp, #140	; 0x8c
 800e274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e278:	2a20      	cmp	r2, #32
 800e27a:	d1ce      	bne.n	800e21a <_strtod_l+0x42>
 800e27c:	3301      	adds	r3, #1
 800e27e:	931d      	str	r3, [sp, #116]	; 0x74
 800e280:	e7c0      	b.n	800e204 <_strtod_l+0x2c>
 800e282:	2a2d      	cmp	r2, #45	; 0x2d
 800e284:	d1c9      	bne.n	800e21a <_strtod_l+0x42>
 800e286:	2201      	movs	r2, #1
 800e288:	920e      	str	r2, [sp, #56]	; 0x38
 800e28a:	1c5a      	adds	r2, r3, #1
 800e28c:	921d      	str	r2, [sp, #116]	; 0x74
 800e28e:	785b      	ldrb	r3, [r3, #1]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d1c4      	bne.n	800e21e <_strtod_l+0x46>
 800e294:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e296:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	f040 8576 	bne.w	800ed8c <_strtod_l+0xbb4>
 800e2a0:	4652      	mov	r2, sl
 800e2a2:	465b      	mov	r3, fp
 800e2a4:	e7e3      	b.n	800e26e <_strtod_l+0x96>
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	e7ee      	b.n	800e288 <_strtod_l+0xb0>
 800e2aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e2ac:	b13a      	cbz	r2, 800e2be <_strtod_l+0xe6>
 800e2ae:	2135      	movs	r1, #53	; 0x35
 800e2b0:	a820      	add	r0, sp, #128	; 0x80
 800e2b2:	f002 ff88 	bl	80111c6 <__copybits>
 800e2b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	f002 fb4d 	bl	8010958 <_Bfree>
 800e2be:	3f01      	subs	r7, #1
 800e2c0:	2f05      	cmp	r7, #5
 800e2c2:	d807      	bhi.n	800e2d4 <_strtod_l+0xfc>
 800e2c4:	e8df f007 	tbb	[pc, r7]
 800e2c8:	1d180b0e 	.word	0x1d180b0e
 800e2cc:	030e      	.short	0x030e
 800e2ce:	f04f 0b00 	mov.w	fp, #0
 800e2d2:	46da      	mov	sl, fp
 800e2d4:	0728      	lsls	r0, r5, #28
 800e2d6:	d5c1      	bpl.n	800e25c <_strtod_l+0x84>
 800e2d8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e2dc:	e7be      	b.n	800e25c <_strtod_l+0x84>
 800e2de:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e2e2:	e7f7      	b.n	800e2d4 <_strtod_l+0xfc>
 800e2e4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e2e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e2ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e2ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e2f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e2f6:	e7ed      	b.n	800e2d4 <_strtod_l+0xfc>
 800e2f8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e480 <_strtod_l+0x2a8>
 800e2fc:	f04f 0a00 	mov.w	sl, #0
 800e300:	e7e8      	b.n	800e2d4 <_strtod_l+0xfc>
 800e302:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e306:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e30a:	e7e3      	b.n	800e2d4 <_strtod_l+0xfc>
 800e30c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e30e:	1c5a      	adds	r2, r3, #1
 800e310:	921d      	str	r2, [sp, #116]	; 0x74
 800e312:	785b      	ldrb	r3, [r3, #1]
 800e314:	2b30      	cmp	r3, #48	; 0x30
 800e316:	d0f9      	beq.n	800e30c <_strtod_l+0x134>
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d09f      	beq.n	800e25c <_strtod_l+0x84>
 800e31c:	2301      	movs	r3, #1
 800e31e:	f04f 0900 	mov.w	r9, #0
 800e322:	9304      	str	r3, [sp, #16]
 800e324:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e326:	930a      	str	r3, [sp, #40]	; 0x28
 800e328:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e32c:	464f      	mov	r7, r9
 800e32e:	220a      	movs	r2, #10
 800e330:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e332:	7806      	ldrb	r6, [r0, #0]
 800e334:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e338:	b2d9      	uxtb	r1, r3
 800e33a:	2909      	cmp	r1, #9
 800e33c:	d92a      	bls.n	800e394 <_strtod_l+0x1bc>
 800e33e:	9907      	ldr	r1, [sp, #28]
 800e340:	462a      	mov	r2, r5
 800e342:	f003 fa84 	bl	801184e <strncmp>
 800e346:	b398      	cbz	r0, 800e3b0 <_strtod_l+0x1d8>
 800e348:	2000      	movs	r0, #0
 800e34a:	4633      	mov	r3, r6
 800e34c:	463d      	mov	r5, r7
 800e34e:	9007      	str	r0, [sp, #28]
 800e350:	4602      	mov	r2, r0
 800e352:	2b65      	cmp	r3, #101	; 0x65
 800e354:	d001      	beq.n	800e35a <_strtod_l+0x182>
 800e356:	2b45      	cmp	r3, #69	; 0x45
 800e358:	d118      	bne.n	800e38c <_strtod_l+0x1b4>
 800e35a:	b91d      	cbnz	r5, 800e364 <_strtod_l+0x18c>
 800e35c:	9b04      	ldr	r3, [sp, #16]
 800e35e:	4303      	orrs	r3, r0
 800e360:	d098      	beq.n	800e294 <_strtod_l+0xbc>
 800e362:	2500      	movs	r5, #0
 800e364:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e368:	f108 0301 	add.w	r3, r8, #1
 800e36c:	931d      	str	r3, [sp, #116]	; 0x74
 800e36e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e372:	2b2b      	cmp	r3, #43	; 0x2b
 800e374:	d075      	beq.n	800e462 <_strtod_l+0x28a>
 800e376:	2b2d      	cmp	r3, #45	; 0x2d
 800e378:	d07b      	beq.n	800e472 <_strtod_l+0x29a>
 800e37a:	f04f 0c00 	mov.w	ip, #0
 800e37e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e382:	2909      	cmp	r1, #9
 800e384:	f240 8082 	bls.w	800e48c <_strtod_l+0x2b4>
 800e388:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e38c:	2600      	movs	r6, #0
 800e38e:	e09d      	b.n	800e4cc <_strtod_l+0x2f4>
 800e390:	2300      	movs	r3, #0
 800e392:	e7c4      	b.n	800e31e <_strtod_l+0x146>
 800e394:	2f08      	cmp	r7, #8
 800e396:	bfd8      	it	le
 800e398:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e39a:	f100 0001 	add.w	r0, r0, #1
 800e39e:	bfda      	itte	le
 800e3a0:	fb02 3301 	mlale	r3, r2, r1, r3
 800e3a4:	9309      	strle	r3, [sp, #36]	; 0x24
 800e3a6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e3aa:	3701      	adds	r7, #1
 800e3ac:	901d      	str	r0, [sp, #116]	; 0x74
 800e3ae:	e7bf      	b.n	800e330 <_strtod_l+0x158>
 800e3b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e3b2:	195a      	adds	r2, r3, r5
 800e3b4:	921d      	str	r2, [sp, #116]	; 0x74
 800e3b6:	5d5b      	ldrb	r3, [r3, r5]
 800e3b8:	2f00      	cmp	r7, #0
 800e3ba:	d037      	beq.n	800e42c <_strtod_l+0x254>
 800e3bc:	9007      	str	r0, [sp, #28]
 800e3be:	463d      	mov	r5, r7
 800e3c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e3c4:	2a09      	cmp	r2, #9
 800e3c6:	d912      	bls.n	800e3ee <_strtod_l+0x216>
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	e7c2      	b.n	800e352 <_strtod_l+0x17a>
 800e3cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e3ce:	1c5a      	adds	r2, r3, #1
 800e3d0:	921d      	str	r2, [sp, #116]	; 0x74
 800e3d2:	785b      	ldrb	r3, [r3, #1]
 800e3d4:	3001      	adds	r0, #1
 800e3d6:	2b30      	cmp	r3, #48	; 0x30
 800e3d8:	d0f8      	beq.n	800e3cc <_strtod_l+0x1f4>
 800e3da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e3de:	2a08      	cmp	r2, #8
 800e3e0:	f200 84db 	bhi.w	800ed9a <_strtod_l+0xbc2>
 800e3e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e3e6:	9007      	str	r0, [sp, #28]
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	920a      	str	r2, [sp, #40]	; 0x28
 800e3ec:	4605      	mov	r5, r0
 800e3ee:	3b30      	subs	r3, #48	; 0x30
 800e3f0:	f100 0201 	add.w	r2, r0, #1
 800e3f4:	d014      	beq.n	800e420 <_strtod_l+0x248>
 800e3f6:	9907      	ldr	r1, [sp, #28]
 800e3f8:	4411      	add	r1, r2
 800e3fa:	9107      	str	r1, [sp, #28]
 800e3fc:	462a      	mov	r2, r5
 800e3fe:	eb00 0e05 	add.w	lr, r0, r5
 800e402:	210a      	movs	r1, #10
 800e404:	4572      	cmp	r2, lr
 800e406:	d113      	bne.n	800e430 <_strtod_l+0x258>
 800e408:	182a      	adds	r2, r5, r0
 800e40a:	2a08      	cmp	r2, #8
 800e40c:	f105 0501 	add.w	r5, r5, #1
 800e410:	4405      	add	r5, r0
 800e412:	dc1c      	bgt.n	800e44e <_strtod_l+0x276>
 800e414:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e416:	220a      	movs	r2, #10
 800e418:	fb02 3301 	mla	r3, r2, r1, r3
 800e41c:	9309      	str	r3, [sp, #36]	; 0x24
 800e41e:	2200      	movs	r2, #0
 800e420:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e422:	1c59      	adds	r1, r3, #1
 800e424:	911d      	str	r1, [sp, #116]	; 0x74
 800e426:	785b      	ldrb	r3, [r3, #1]
 800e428:	4610      	mov	r0, r2
 800e42a:	e7c9      	b.n	800e3c0 <_strtod_l+0x1e8>
 800e42c:	4638      	mov	r0, r7
 800e42e:	e7d2      	b.n	800e3d6 <_strtod_l+0x1fe>
 800e430:	2a08      	cmp	r2, #8
 800e432:	dc04      	bgt.n	800e43e <_strtod_l+0x266>
 800e434:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e436:	434e      	muls	r6, r1
 800e438:	9609      	str	r6, [sp, #36]	; 0x24
 800e43a:	3201      	adds	r2, #1
 800e43c:	e7e2      	b.n	800e404 <_strtod_l+0x22c>
 800e43e:	f102 0c01 	add.w	ip, r2, #1
 800e442:	f1bc 0f10 	cmp.w	ip, #16
 800e446:	bfd8      	it	le
 800e448:	fb01 f909 	mulle.w	r9, r1, r9
 800e44c:	e7f5      	b.n	800e43a <_strtod_l+0x262>
 800e44e:	2d10      	cmp	r5, #16
 800e450:	bfdc      	itt	le
 800e452:	220a      	movle	r2, #10
 800e454:	fb02 3909 	mlale	r9, r2, r9, r3
 800e458:	e7e1      	b.n	800e41e <_strtod_l+0x246>
 800e45a:	2300      	movs	r3, #0
 800e45c:	9307      	str	r3, [sp, #28]
 800e45e:	2201      	movs	r2, #1
 800e460:	e77c      	b.n	800e35c <_strtod_l+0x184>
 800e462:	f04f 0c00 	mov.w	ip, #0
 800e466:	f108 0302 	add.w	r3, r8, #2
 800e46a:	931d      	str	r3, [sp, #116]	; 0x74
 800e46c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e470:	e785      	b.n	800e37e <_strtod_l+0x1a6>
 800e472:	f04f 0c01 	mov.w	ip, #1
 800e476:	e7f6      	b.n	800e466 <_strtod_l+0x28e>
 800e478:	08013f14 	.word	0x08013f14
 800e47c:	08013c5c 	.word	0x08013c5c
 800e480:	7ff00000 	.word	0x7ff00000
 800e484:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e486:	1c59      	adds	r1, r3, #1
 800e488:	911d      	str	r1, [sp, #116]	; 0x74
 800e48a:	785b      	ldrb	r3, [r3, #1]
 800e48c:	2b30      	cmp	r3, #48	; 0x30
 800e48e:	d0f9      	beq.n	800e484 <_strtod_l+0x2ac>
 800e490:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e494:	2908      	cmp	r1, #8
 800e496:	f63f af79 	bhi.w	800e38c <_strtod_l+0x1b4>
 800e49a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e49e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e4a0:	9308      	str	r3, [sp, #32]
 800e4a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e4a4:	1c59      	adds	r1, r3, #1
 800e4a6:	911d      	str	r1, [sp, #116]	; 0x74
 800e4a8:	785b      	ldrb	r3, [r3, #1]
 800e4aa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e4ae:	2e09      	cmp	r6, #9
 800e4b0:	d937      	bls.n	800e522 <_strtod_l+0x34a>
 800e4b2:	9e08      	ldr	r6, [sp, #32]
 800e4b4:	1b89      	subs	r1, r1, r6
 800e4b6:	2908      	cmp	r1, #8
 800e4b8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e4bc:	dc02      	bgt.n	800e4c4 <_strtod_l+0x2ec>
 800e4be:	4576      	cmp	r6, lr
 800e4c0:	bfa8      	it	ge
 800e4c2:	4676      	movge	r6, lr
 800e4c4:	f1bc 0f00 	cmp.w	ip, #0
 800e4c8:	d000      	beq.n	800e4cc <_strtod_l+0x2f4>
 800e4ca:	4276      	negs	r6, r6
 800e4cc:	2d00      	cmp	r5, #0
 800e4ce:	d14f      	bne.n	800e570 <_strtod_l+0x398>
 800e4d0:	9904      	ldr	r1, [sp, #16]
 800e4d2:	4301      	orrs	r1, r0
 800e4d4:	f47f aec2 	bne.w	800e25c <_strtod_l+0x84>
 800e4d8:	2a00      	cmp	r2, #0
 800e4da:	f47f aedb 	bne.w	800e294 <_strtod_l+0xbc>
 800e4de:	2b69      	cmp	r3, #105	; 0x69
 800e4e0:	d027      	beq.n	800e532 <_strtod_l+0x35a>
 800e4e2:	dc24      	bgt.n	800e52e <_strtod_l+0x356>
 800e4e4:	2b49      	cmp	r3, #73	; 0x49
 800e4e6:	d024      	beq.n	800e532 <_strtod_l+0x35a>
 800e4e8:	2b4e      	cmp	r3, #78	; 0x4e
 800e4ea:	f47f aed3 	bne.w	800e294 <_strtod_l+0xbc>
 800e4ee:	499e      	ldr	r1, [pc, #632]	; (800e768 <_strtod_l+0x590>)
 800e4f0:	a81d      	add	r0, sp, #116	; 0x74
 800e4f2:	f002 f8b7 	bl	8010664 <__match>
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	f43f aecc 	beq.w	800e294 <_strtod_l+0xbc>
 800e4fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	2b28      	cmp	r3, #40	; 0x28
 800e502:	d12d      	bne.n	800e560 <_strtod_l+0x388>
 800e504:	4999      	ldr	r1, [pc, #612]	; (800e76c <_strtod_l+0x594>)
 800e506:	aa20      	add	r2, sp, #128	; 0x80
 800e508:	a81d      	add	r0, sp, #116	; 0x74
 800e50a:	f002 f8bf 	bl	801068c <__hexnan>
 800e50e:	2805      	cmp	r0, #5
 800e510:	d126      	bne.n	800e560 <_strtod_l+0x388>
 800e512:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e514:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e518:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e51c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e520:	e69c      	b.n	800e25c <_strtod_l+0x84>
 800e522:	210a      	movs	r1, #10
 800e524:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e528:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e52c:	e7b9      	b.n	800e4a2 <_strtod_l+0x2ca>
 800e52e:	2b6e      	cmp	r3, #110	; 0x6e
 800e530:	e7db      	b.n	800e4ea <_strtod_l+0x312>
 800e532:	498f      	ldr	r1, [pc, #572]	; (800e770 <_strtod_l+0x598>)
 800e534:	a81d      	add	r0, sp, #116	; 0x74
 800e536:	f002 f895 	bl	8010664 <__match>
 800e53a:	2800      	cmp	r0, #0
 800e53c:	f43f aeaa 	beq.w	800e294 <_strtod_l+0xbc>
 800e540:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e542:	498c      	ldr	r1, [pc, #560]	; (800e774 <_strtod_l+0x59c>)
 800e544:	3b01      	subs	r3, #1
 800e546:	a81d      	add	r0, sp, #116	; 0x74
 800e548:	931d      	str	r3, [sp, #116]	; 0x74
 800e54a:	f002 f88b 	bl	8010664 <__match>
 800e54e:	b910      	cbnz	r0, 800e556 <_strtod_l+0x37e>
 800e550:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e552:	3301      	adds	r3, #1
 800e554:	931d      	str	r3, [sp, #116]	; 0x74
 800e556:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e784 <_strtod_l+0x5ac>
 800e55a:	f04f 0a00 	mov.w	sl, #0
 800e55e:	e67d      	b.n	800e25c <_strtod_l+0x84>
 800e560:	4885      	ldr	r0, [pc, #532]	; (800e778 <_strtod_l+0x5a0>)
 800e562:	f003 f929 	bl	80117b8 <nan>
 800e566:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e56a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e56e:	e675      	b.n	800e25c <_strtod_l+0x84>
 800e570:	9b07      	ldr	r3, [sp, #28]
 800e572:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e574:	1af3      	subs	r3, r6, r3
 800e576:	2f00      	cmp	r7, #0
 800e578:	bf08      	it	eq
 800e57a:	462f      	moveq	r7, r5
 800e57c:	2d10      	cmp	r5, #16
 800e57e:	9308      	str	r3, [sp, #32]
 800e580:	46a8      	mov	r8, r5
 800e582:	bfa8      	it	ge
 800e584:	f04f 0810 	movge.w	r8, #16
 800e588:	f7f1 ffdc 	bl	8000544 <__aeabi_ui2d>
 800e58c:	2d09      	cmp	r5, #9
 800e58e:	4682      	mov	sl, r0
 800e590:	468b      	mov	fp, r1
 800e592:	dd13      	ble.n	800e5bc <_strtod_l+0x3e4>
 800e594:	4b79      	ldr	r3, [pc, #484]	; (800e77c <_strtod_l+0x5a4>)
 800e596:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e59a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e59e:	f7f2 f84b 	bl	8000638 <__aeabi_dmul>
 800e5a2:	4682      	mov	sl, r0
 800e5a4:	4648      	mov	r0, r9
 800e5a6:	468b      	mov	fp, r1
 800e5a8:	f7f1 ffcc 	bl	8000544 <__aeabi_ui2d>
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	460b      	mov	r3, r1
 800e5b0:	4650      	mov	r0, sl
 800e5b2:	4659      	mov	r1, fp
 800e5b4:	f7f1 fe8a 	bl	80002cc <__adddf3>
 800e5b8:	4682      	mov	sl, r0
 800e5ba:	468b      	mov	fp, r1
 800e5bc:	2d0f      	cmp	r5, #15
 800e5be:	dc38      	bgt.n	800e632 <_strtod_l+0x45a>
 800e5c0:	9b08      	ldr	r3, [sp, #32]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f43f ae4a 	beq.w	800e25c <_strtod_l+0x84>
 800e5c8:	dd24      	ble.n	800e614 <_strtod_l+0x43c>
 800e5ca:	2b16      	cmp	r3, #22
 800e5cc:	dc0b      	bgt.n	800e5e6 <_strtod_l+0x40e>
 800e5ce:	4d6b      	ldr	r5, [pc, #428]	; (800e77c <_strtod_l+0x5a4>)
 800e5d0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e5d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e5d8:	4652      	mov	r2, sl
 800e5da:	465b      	mov	r3, fp
 800e5dc:	f7f2 f82c 	bl	8000638 <__aeabi_dmul>
 800e5e0:	4682      	mov	sl, r0
 800e5e2:	468b      	mov	fp, r1
 800e5e4:	e63a      	b.n	800e25c <_strtod_l+0x84>
 800e5e6:	9a08      	ldr	r2, [sp, #32]
 800e5e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	db20      	blt.n	800e632 <_strtod_l+0x45a>
 800e5f0:	4c62      	ldr	r4, [pc, #392]	; (800e77c <_strtod_l+0x5a4>)
 800e5f2:	f1c5 050f 	rsb	r5, r5, #15
 800e5f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e5fa:	4652      	mov	r2, sl
 800e5fc:	465b      	mov	r3, fp
 800e5fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e602:	f7f2 f819 	bl	8000638 <__aeabi_dmul>
 800e606:	9b08      	ldr	r3, [sp, #32]
 800e608:	1b5d      	subs	r5, r3, r5
 800e60a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e60e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e612:	e7e3      	b.n	800e5dc <_strtod_l+0x404>
 800e614:	9b08      	ldr	r3, [sp, #32]
 800e616:	3316      	adds	r3, #22
 800e618:	db0b      	blt.n	800e632 <_strtod_l+0x45a>
 800e61a:	9b07      	ldr	r3, [sp, #28]
 800e61c:	4a57      	ldr	r2, [pc, #348]	; (800e77c <_strtod_l+0x5a4>)
 800e61e:	1b9e      	subs	r6, r3, r6
 800e620:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e624:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e628:	4650      	mov	r0, sl
 800e62a:	4659      	mov	r1, fp
 800e62c:	f7f2 f92e 	bl	800088c <__aeabi_ddiv>
 800e630:	e7d6      	b.n	800e5e0 <_strtod_l+0x408>
 800e632:	9b08      	ldr	r3, [sp, #32]
 800e634:	eba5 0808 	sub.w	r8, r5, r8
 800e638:	4498      	add	r8, r3
 800e63a:	f1b8 0f00 	cmp.w	r8, #0
 800e63e:	dd71      	ble.n	800e724 <_strtod_l+0x54c>
 800e640:	f018 030f 	ands.w	r3, r8, #15
 800e644:	d00a      	beq.n	800e65c <_strtod_l+0x484>
 800e646:	494d      	ldr	r1, [pc, #308]	; (800e77c <_strtod_l+0x5a4>)
 800e648:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e64c:	4652      	mov	r2, sl
 800e64e:	465b      	mov	r3, fp
 800e650:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e654:	f7f1 fff0 	bl	8000638 <__aeabi_dmul>
 800e658:	4682      	mov	sl, r0
 800e65a:	468b      	mov	fp, r1
 800e65c:	f038 080f 	bics.w	r8, r8, #15
 800e660:	d04d      	beq.n	800e6fe <_strtod_l+0x526>
 800e662:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e666:	dd22      	ble.n	800e6ae <_strtod_l+0x4d6>
 800e668:	2500      	movs	r5, #0
 800e66a:	462e      	mov	r6, r5
 800e66c:	9509      	str	r5, [sp, #36]	; 0x24
 800e66e:	9507      	str	r5, [sp, #28]
 800e670:	2322      	movs	r3, #34	; 0x22
 800e672:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e784 <_strtod_l+0x5ac>
 800e676:	6023      	str	r3, [r4, #0]
 800e678:	f04f 0a00 	mov.w	sl, #0
 800e67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e67e:	2b00      	cmp	r3, #0
 800e680:	f43f adec 	beq.w	800e25c <_strtod_l+0x84>
 800e684:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e686:	4620      	mov	r0, r4
 800e688:	f002 f966 	bl	8010958 <_Bfree>
 800e68c:	9907      	ldr	r1, [sp, #28]
 800e68e:	4620      	mov	r0, r4
 800e690:	f002 f962 	bl	8010958 <_Bfree>
 800e694:	4631      	mov	r1, r6
 800e696:	4620      	mov	r0, r4
 800e698:	f002 f95e 	bl	8010958 <_Bfree>
 800e69c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e69e:	4620      	mov	r0, r4
 800e6a0:	f002 f95a 	bl	8010958 <_Bfree>
 800e6a4:	4629      	mov	r1, r5
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	f002 f956 	bl	8010958 <_Bfree>
 800e6ac:	e5d6      	b.n	800e25c <_strtod_l+0x84>
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e6b4:	4650      	mov	r0, sl
 800e6b6:	4659      	mov	r1, fp
 800e6b8:	4699      	mov	r9, r3
 800e6ba:	f1b8 0f01 	cmp.w	r8, #1
 800e6be:	dc21      	bgt.n	800e704 <_strtod_l+0x52c>
 800e6c0:	b10b      	cbz	r3, 800e6c6 <_strtod_l+0x4ee>
 800e6c2:	4682      	mov	sl, r0
 800e6c4:	468b      	mov	fp, r1
 800e6c6:	4b2e      	ldr	r3, [pc, #184]	; (800e780 <_strtod_l+0x5a8>)
 800e6c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e6cc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e6d0:	4652      	mov	r2, sl
 800e6d2:	465b      	mov	r3, fp
 800e6d4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e6d8:	f7f1 ffae 	bl	8000638 <__aeabi_dmul>
 800e6dc:	4b29      	ldr	r3, [pc, #164]	; (800e784 <_strtod_l+0x5ac>)
 800e6de:	460a      	mov	r2, r1
 800e6e0:	400b      	ands	r3, r1
 800e6e2:	4929      	ldr	r1, [pc, #164]	; (800e788 <_strtod_l+0x5b0>)
 800e6e4:	428b      	cmp	r3, r1
 800e6e6:	4682      	mov	sl, r0
 800e6e8:	d8be      	bhi.n	800e668 <_strtod_l+0x490>
 800e6ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e6ee:	428b      	cmp	r3, r1
 800e6f0:	bf86      	itte	hi
 800e6f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e78c <_strtod_l+0x5b4>
 800e6f6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800e6fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e6fe:	2300      	movs	r3, #0
 800e700:	9304      	str	r3, [sp, #16]
 800e702:	e081      	b.n	800e808 <_strtod_l+0x630>
 800e704:	f018 0f01 	tst.w	r8, #1
 800e708:	d007      	beq.n	800e71a <_strtod_l+0x542>
 800e70a:	4b1d      	ldr	r3, [pc, #116]	; (800e780 <_strtod_l+0x5a8>)
 800e70c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e714:	f7f1 ff90 	bl	8000638 <__aeabi_dmul>
 800e718:	2301      	movs	r3, #1
 800e71a:	f109 0901 	add.w	r9, r9, #1
 800e71e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e722:	e7ca      	b.n	800e6ba <_strtod_l+0x4e2>
 800e724:	d0eb      	beq.n	800e6fe <_strtod_l+0x526>
 800e726:	f1c8 0800 	rsb	r8, r8, #0
 800e72a:	f018 020f 	ands.w	r2, r8, #15
 800e72e:	d00a      	beq.n	800e746 <_strtod_l+0x56e>
 800e730:	4b12      	ldr	r3, [pc, #72]	; (800e77c <_strtod_l+0x5a4>)
 800e732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e736:	4650      	mov	r0, sl
 800e738:	4659      	mov	r1, fp
 800e73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73e:	f7f2 f8a5 	bl	800088c <__aeabi_ddiv>
 800e742:	4682      	mov	sl, r0
 800e744:	468b      	mov	fp, r1
 800e746:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e74a:	d0d8      	beq.n	800e6fe <_strtod_l+0x526>
 800e74c:	f1b8 0f1f 	cmp.w	r8, #31
 800e750:	dd1e      	ble.n	800e790 <_strtod_l+0x5b8>
 800e752:	2500      	movs	r5, #0
 800e754:	462e      	mov	r6, r5
 800e756:	9509      	str	r5, [sp, #36]	; 0x24
 800e758:	9507      	str	r5, [sp, #28]
 800e75a:	2322      	movs	r3, #34	; 0x22
 800e75c:	f04f 0a00 	mov.w	sl, #0
 800e760:	f04f 0b00 	mov.w	fp, #0
 800e764:	6023      	str	r3, [r4, #0]
 800e766:	e789      	b.n	800e67c <_strtod_l+0x4a4>
 800e768:	08013c2d 	.word	0x08013c2d
 800e76c:	08013c70 	.word	0x08013c70
 800e770:	08013c25 	.word	0x08013c25
 800e774:	08013db4 	.word	0x08013db4
 800e778:	080140d0 	.word	0x080140d0
 800e77c:	08013fb0 	.word	0x08013fb0
 800e780:	08013f88 	.word	0x08013f88
 800e784:	7ff00000 	.word	0x7ff00000
 800e788:	7ca00000 	.word	0x7ca00000
 800e78c:	7fefffff 	.word	0x7fefffff
 800e790:	f018 0310 	ands.w	r3, r8, #16
 800e794:	bf18      	it	ne
 800e796:	236a      	movne	r3, #106	; 0x6a
 800e798:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800eb50 <_strtod_l+0x978>
 800e79c:	9304      	str	r3, [sp, #16]
 800e79e:	4650      	mov	r0, sl
 800e7a0:	4659      	mov	r1, fp
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	f018 0f01 	tst.w	r8, #1
 800e7a8:	d004      	beq.n	800e7b4 <_strtod_l+0x5dc>
 800e7aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e7ae:	f7f1 ff43 	bl	8000638 <__aeabi_dmul>
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e7b8:	f109 0908 	add.w	r9, r9, #8
 800e7bc:	d1f2      	bne.n	800e7a4 <_strtod_l+0x5cc>
 800e7be:	b10b      	cbz	r3, 800e7c4 <_strtod_l+0x5ec>
 800e7c0:	4682      	mov	sl, r0
 800e7c2:	468b      	mov	fp, r1
 800e7c4:	9b04      	ldr	r3, [sp, #16]
 800e7c6:	b1bb      	cbz	r3, 800e7f8 <_strtod_l+0x620>
 800e7c8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e7cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	4659      	mov	r1, fp
 800e7d4:	dd10      	ble.n	800e7f8 <_strtod_l+0x620>
 800e7d6:	2b1f      	cmp	r3, #31
 800e7d8:	f340 8128 	ble.w	800ea2c <_strtod_l+0x854>
 800e7dc:	2b34      	cmp	r3, #52	; 0x34
 800e7de:	bfde      	ittt	le
 800e7e0:	3b20      	suble	r3, #32
 800e7e2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800e7e6:	fa02 f303 	lslle.w	r3, r2, r3
 800e7ea:	f04f 0a00 	mov.w	sl, #0
 800e7ee:	bfcc      	ite	gt
 800e7f0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e7f4:	ea03 0b01 	andle.w	fp, r3, r1
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	4650      	mov	r0, sl
 800e7fe:	4659      	mov	r1, fp
 800e800:	f7f2 f982 	bl	8000b08 <__aeabi_dcmpeq>
 800e804:	2800      	cmp	r0, #0
 800e806:	d1a4      	bne.n	800e752 <_strtod_l+0x57a>
 800e808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e80e:	462b      	mov	r3, r5
 800e810:	463a      	mov	r2, r7
 800e812:	4620      	mov	r0, r4
 800e814:	f002 f90c 	bl	8010a30 <__s2b>
 800e818:	9009      	str	r0, [sp, #36]	; 0x24
 800e81a:	2800      	cmp	r0, #0
 800e81c:	f43f af24 	beq.w	800e668 <_strtod_l+0x490>
 800e820:	9b07      	ldr	r3, [sp, #28]
 800e822:	1b9e      	subs	r6, r3, r6
 800e824:	9b08      	ldr	r3, [sp, #32]
 800e826:	2b00      	cmp	r3, #0
 800e828:	bfb4      	ite	lt
 800e82a:	4633      	movlt	r3, r6
 800e82c:	2300      	movge	r3, #0
 800e82e:	9310      	str	r3, [sp, #64]	; 0x40
 800e830:	9b08      	ldr	r3, [sp, #32]
 800e832:	2500      	movs	r5, #0
 800e834:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e838:	9318      	str	r3, [sp, #96]	; 0x60
 800e83a:	462e      	mov	r6, r5
 800e83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e83e:	4620      	mov	r0, r4
 800e840:	6859      	ldr	r1, [r3, #4]
 800e842:	f002 f849 	bl	80108d8 <_Balloc>
 800e846:	9007      	str	r0, [sp, #28]
 800e848:	2800      	cmp	r0, #0
 800e84a:	f43f af11 	beq.w	800e670 <_strtod_l+0x498>
 800e84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e850:	691a      	ldr	r2, [r3, #16]
 800e852:	3202      	adds	r2, #2
 800e854:	f103 010c 	add.w	r1, r3, #12
 800e858:	0092      	lsls	r2, r2, #2
 800e85a:	300c      	adds	r0, #12
 800e85c:	f7fe fd10 	bl	800d280 <memcpy>
 800e860:	ec4b ab10 	vmov	d0, sl, fp
 800e864:	aa20      	add	r2, sp, #128	; 0x80
 800e866:	a91f      	add	r1, sp, #124	; 0x7c
 800e868:	4620      	mov	r0, r4
 800e86a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e86e:	f002 fc1b 	bl	80110a8 <__d2b>
 800e872:	901e      	str	r0, [sp, #120]	; 0x78
 800e874:	2800      	cmp	r0, #0
 800e876:	f43f aefb 	beq.w	800e670 <_strtod_l+0x498>
 800e87a:	2101      	movs	r1, #1
 800e87c:	4620      	mov	r0, r4
 800e87e:	f002 f971 	bl	8010b64 <__i2b>
 800e882:	4606      	mov	r6, r0
 800e884:	2800      	cmp	r0, #0
 800e886:	f43f aef3 	beq.w	800e670 <_strtod_l+0x498>
 800e88a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e88c:	9904      	ldr	r1, [sp, #16]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	bfab      	itete	ge
 800e892:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800e894:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800e896:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800e898:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800e89c:	bfac      	ite	ge
 800e89e:	eb03 0902 	addge.w	r9, r3, r2
 800e8a2:	1ad7      	sublt	r7, r2, r3
 800e8a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e8a6:	eba3 0801 	sub.w	r8, r3, r1
 800e8aa:	4490      	add	r8, r2
 800e8ac:	4ba3      	ldr	r3, [pc, #652]	; (800eb3c <_strtod_l+0x964>)
 800e8ae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e8b2:	4598      	cmp	r8, r3
 800e8b4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e8b8:	f280 80cc 	bge.w	800ea54 <_strtod_l+0x87c>
 800e8bc:	eba3 0308 	sub.w	r3, r3, r8
 800e8c0:	2b1f      	cmp	r3, #31
 800e8c2:	eba2 0203 	sub.w	r2, r2, r3
 800e8c6:	f04f 0101 	mov.w	r1, #1
 800e8ca:	f300 80b6 	bgt.w	800ea3a <_strtod_l+0x862>
 800e8ce:	fa01 f303 	lsl.w	r3, r1, r3
 800e8d2:	9311      	str	r3, [sp, #68]	; 0x44
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	930c      	str	r3, [sp, #48]	; 0x30
 800e8d8:	eb09 0802 	add.w	r8, r9, r2
 800e8dc:	9b04      	ldr	r3, [sp, #16]
 800e8de:	45c1      	cmp	r9, r8
 800e8e0:	4417      	add	r7, r2
 800e8e2:	441f      	add	r7, r3
 800e8e4:	464b      	mov	r3, r9
 800e8e6:	bfa8      	it	ge
 800e8e8:	4643      	movge	r3, r8
 800e8ea:	42bb      	cmp	r3, r7
 800e8ec:	bfa8      	it	ge
 800e8ee:	463b      	movge	r3, r7
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	bfc2      	ittt	gt
 800e8f4:	eba8 0803 	subgt.w	r8, r8, r3
 800e8f8:	1aff      	subgt	r7, r7, r3
 800e8fa:	eba9 0903 	subgt.w	r9, r9, r3
 800e8fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e900:	2b00      	cmp	r3, #0
 800e902:	dd17      	ble.n	800e934 <_strtod_l+0x75c>
 800e904:	4631      	mov	r1, r6
 800e906:	461a      	mov	r2, r3
 800e908:	4620      	mov	r0, r4
 800e90a:	f002 f9e7 	bl	8010cdc <__pow5mult>
 800e90e:	4606      	mov	r6, r0
 800e910:	2800      	cmp	r0, #0
 800e912:	f43f aead 	beq.w	800e670 <_strtod_l+0x498>
 800e916:	4601      	mov	r1, r0
 800e918:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e91a:	4620      	mov	r0, r4
 800e91c:	f002 f938 	bl	8010b90 <__multiply>
 800e920:	900f      	str	r0, [sp, #60]	; 0x3c
 800e922:	2800      	cmp	r0, #0
 800e924:	f43f aea4 	beq.w	800e670 <_strtod_l+0x498>
 800e928:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e92a:	4620      	mov	r0, r4
 800e92c:	f002 f814 	bl	8010958 <_Bfree>
 800e930:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e932:	931e      	str	r3, [sp, #120]	; 0x78
 800e934:	f1b8 0f00 	cmp.w	r8, #0
 800e938:	f300 8091 	bgt.w	800ea5e <_strtod_l+0x886>
 800e93c:	9b08      	ldr	r3, [sp, #32]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	dd08      	ble.n	800e954 <_strtod_l+0x77c>
 800e942:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e944:	9907      	ldr	r1, [sp, #28]
 800e946:	4620      	mov	r0, r4
 800e948:	f002 f9c8 	bl	8010cdc <__pow5mult>
 800e94c:	9007      	str	r0, [sp, #28]
 800e94e:	2800      	cmp	r0, #0
 800e950:	f43f ae8e 	beq.w	800e670 <_strtod_l+0x498>
 800e954:	2f00      	cmp	r7, #0
 800e956:	dd08      	ble.n	800e96a <_strtod_l+0x792>
 800e958:	9907      	ldr	r1, [sp, #28]
 800e95a:	463a      	mov	r2, r7
 800e95c:	4620      	mov	r0, r4
 800e95e:	f002 fa17 	bl	8010d90 <__lshift>
 800e962:	9007      	str	r0, [sp, #28]
 800e964:	2800      	cmp	r0, #0
 800e966:	f43f ae83 	beq.w	800e670 <_strtod_l+0x498>
 800e96a:	f1b9 0f00 	cmp.w	r9, #0
 800e96e:	dd08      	ble.n	800e982 <_strtod_l+0x7aa>
 800e970:	4631      	mov	r1, r6
 800e972:	464a      	mov	r2, r9
 800e974:	4620      	mov	r0, r4
 800e976:	f002 fa0b 	bl	8010d90 <__lshift>
 800e97a:	4606      	mov	r6, r0
 800e97c:	2800      	cmp	r0, #0
 800e97e:	f43f ae77 	beq.w	800e670 <_strtod_l+0x498>
 800e982:	9a07      	ldr	r2, [sp, #28]
 800e984:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e986:	4620      	mov	r0, r4
 800e988:	f002 fa8a 	bl	8010ea0 <__mdiff>
 800e98c:	4605      	mov	r5, r0
 800e98e:	2800      	cmp	r0, #0
 800e990:	f43f ae6e 	beq.w	800e670 <_strtod_l+0x498>
 800e994:	68c3      	ldr	r3, [r0, #12]
 800e996:	930f      	str	r3, [sp, #60]	; 0x3c
 800e998:	2300      	movs	r3, #0
 800e99a:	60c3      	str	r3, [r0, #12]
 800e99c:	4631      	mov	r1, r6
 800e99e:	f002 fa63 	bl	8010e68 <__mcmp>
 800e9a2:	2800      	cmp	r0, #0
 800e9a4:	da65      	bge.n	800ea72 <_strtod_l+0x89a>
 800e9a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9a8:	ea53 030a 	orrs.w	r3, r3, sl
 800e9ac:	f040 8087 	bne.w	800eabe <_strtod_l+0x8e6>
 800e9b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	f040 8082 	bne.w	800eabe <_strtod_l+0x8e6>
 800e9ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e9be:	0d1b      	lsrs	r3, r3, #20
 800e9c0:	051b      	lsls	r3, r3, #20
 800e9c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e9c6:	d97a      	bls.n	800eabe <_strtod_l+0x8e6>
 800e9c8:	696b      	ldr	r3, [r5, #20]
 800e9ca:	b913      	cbnz	r3, 800e9d2 <_strtod_l+0x7fa>
 800e9cc:	692b      	ldr	r3, [r5, #16]
 800e9ce:	2b01      	cmp	r3, #1
 800e9d0:	dd75      	ble.n	800eabe <_strtod_l+0x8e6>
 800e9d2:	4629      	mov	r1, r5
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f002 f9da 	bl	8010d90 <__lshift>
 800e9dc:	4631      	mov	r1, r6
 800e9de:	4605      	mov	r5, r0
 800e9e0:	f002 fa42 	bl	8010e68 <__mcmp>
 800e9e4:	2800      	cmp	r0, #0
 800e9e6:	dd6a      	ble.n	800eabe <_strtod_l+0x8e6>
 800e9e8:	9904      	ldr	r1, [sp, #16]
 800e9ea:	4a55      	ldr	r2, [pc, #340]	; (800eb40 <_strtod_l+0x968>)
 800e9ec:	465b      	mov	r3, fp
 800e9ee:	2900      	cmp	r1, #0
 800e9f0:	f000 8085 	beq.w	800eafe <_strtod_l+0x926>
 800e9f4:	ea02 010b 	and.w	r1, r2, fp
 800e9f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e9fc:	dc7f      	bgt.n	800eafe <_strtod_l+0x926>
 800e9fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ea02:	f77f aeaa 	ble.w	800e75a <_strtod_l+0x582>
 800ea06:	4a4f      	ldr	r2, [pc, #316]	; (800eb44 <_strtod_l+0x96c>)
 800ea08:	2300      	movs	r3, #0
 800ea0a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ea0e:	4650      	mov	r0, sl
 800ea10:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ea14:	4659      	mov	r1, fp
 800ea16:	f7f1 fe0f 	bl	8000638 <__aeabi_dmul>
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	4303      	orrs	r3, r0
 800ea1e:	bf08      	it	eq
 800ea20:	2322      	moveq	r3, #34	; 0x22
 800ea22:	4682      	mov	sl, r0
 800ea24:	468b      	mov	fp, r1
 800ea26:	bf08      	it	eq
 800ea28:	6023      	streq	r3, [r4, #0]
 800ea2a:	e62b      	b.n	800e684 <_strtod_l+0x4ac>
 800ea2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea30:	fa02 f303 	lsl.w	r3, r2, r3
 800ea34:	ea03 0a0a 	and.w	sl, r3, sl
 800ea38:	e6de      	b.n	800e7f8 <_strtod_l+0x620>
 800ea3a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ea3e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ea42:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ea46:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ea4a:	fa01 f308 	lsl.w	r3, r1, r8
 800ea4e:	930c      	str	r3, [sp, #48]	; 0x30
 800ea50:	9111      	str	r1, [sp, #68]	; 0x44
 800ea52:	e741      	b.n	800e8d8 <_strtod_l+0x700>
 800ea54:	2300      	movs	r3, #0
 800ea56:	930c      	str	r3, [sp, #48]	; 0x30
 800ea58:	2301      	movs	r3, #1
 800ea5a:	9311      	str	r3, [sp, #68]	; 0x44
 800ea5c:	e73c      	b.n	800e8d8 <_strtod_l+0x700>
 800ea5e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ea60:	4642      	mov	r2, r8
 800ea62:	4620      	mov	r0, r4
 800ea64:	f002 f994 	bl	8010d90 <__lshift>
 800ea68:	901e      	str	r0, [sp, #120]	; 0x78
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	f47f af66 	bne.w	800e93c <_strtod_l+0x764>
 800ea70:	e5fe      	b.n	800e670 <_strtod_l+0x498>
 800ea72:	465f      	mov	r7, fp
 800ea74:	d16e      	bne.n	800eb54 <_strtod_l+0x97c>
 800ea76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ea78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea7c:	b342      	cbz	r2, 800ead0 <_strtod_l+0x8f8>
 800ea7e:	4a32      	ldr	r2, [pc, #200]	; (800eb48 <_strtod_l+0x970>)
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d128      	bne.n	800ead6 <_strtod_l+0x8fe>
 800ea84:	9b04      	ldr	r3, [sp, #16]
 800ea86:	4650      	mov	r0, sl
 800ea88:	b1eb      	cbz	r3, 800eac6 <_strtod_l+0x8ee>
 800ea8a:	4a2d      	ldr	r2, [pc, #180]	; (800eb40 <_strtod_l+0x968>)
 800ea8c:	403a      	ands	r2, r7
 800ea8e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ea92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ea96:	d819      	bhi.n	800eacc <_strtod_l+0x8f4>
 800ea98:	0d12      	lsrs	r2, r2, #20
 800ea9a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ea9e:	fa01 f303 	lsl.w	r3, r1, r3
 800eaa2:	4298      	cmp	r0, r3
 800eaa4:	d117      	bne.n	800ead6 <_strtod_l+0x8fe>
 800eaa6:	4b29      	ldr	r3, [pc, #164]	; (800eb4c <_strtod_l+0x974>)
 800eaa8:	429f      	cmp	r7, r3
 800eaaa:	d102      	bne.n	800eab2 <_strtod_l+0x8da>
 800eaac:	3001      	adds	r0, #1
 800eaae:	f43f addf 	beq.w	800e670 <_strtod_l+0x498>
 800eab2:	4b23      	ldr	r3, [pc, #140]	; (800eb40 <_strtod_l+0x968>)
 800eab4:	403b      	ands	r3, r7
 800eab6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800eaba:	f04f 0a00 	mov.w	sl, #0
 800eabe:	9b04      	ldr	r3, [sp, #16]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1a0      	bne.n	800ea06 <_strtod_l+0x82e>
 800eac4:	e5de      	b.n	800e684 <_strtod_l+0x4ac>
 800eac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eaca:	e7ea      	b.n	800eaa2 <_strtod_l+0x8ca>
 800eacc:	460b      	mov	r3, r1
 800eace:	e7e8      	b.n	800eaa2 <_strtod_l+0x8ca>
 800ead0:	ea53 030a 	orrs.w	r3, r3, sl
 800ead4:	d088      	beq.n	800e9e8 <_strtod_l+0x810>
 800ead6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ead8:	b1db      	cbz	r3, 800eb12 <_strtod_l+0x93a>
 800eada:	423b      	tst	r3, r7
 800eadc:	d0ef      	beq.n	800eabe <_strtod_l+0x8e6>
 800eade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eae0:	9a04      	ldr	r2, [sp, #16]
 800eae2:	4650      	mov	r0, sl
 800eae4:	4659      	mov	r1, fp
 800eae6:	b1c3      	cbz	r3, 800eb1a <_strtod_l+0x942>
 800eae8:	f7ff fb59 	bl	800e19e <sulp>
 800eaec:	4602      	mov	r2, r0
 800eaee:	460b      	mov	r3, r1
 800eaf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eaf4:	f7f1 fbea 	bl	80002cc <__adddf3>
 800eaf8:	4682      	mov	sl, r0
 800eafa:	468b      	mov	fp, r1
 800eafc:	e7df      	b.n	800eabe <_strtod_l+0x8e6>
 800eafe:	4013      	ands	r3, r2
 800eb00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eb04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eb08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eb0c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800eb10:	e7d5      	b.n	800eabe <_strtod_l+0x8e6>
 800eb12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb14:	ea13 0f0a 	tst.w	r3, sl
 800eb18:	e7e0      	b.n	800eadc <_strtod_l+0x904>
 800eb1a:	f7ff fb40 	bl	800e19e <sulp>
 800eb1e:	4602      	mov	r2, r0
 800eb20:	460b      	mov	r3, r1
 800eb22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eb26:	f7f1 fbcf 	bl	80002c8 <__aeabi_dsub>
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	4682      	mov	sl, r0
 800eb30:	468b      	mov	fp, r1
 800eb32:	f7f1 ffe9 	bl	8000b08 <__aeabi_dcmpeq>
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d0c1      	beq.n	800eabe <_strtod_l+0x8e6>
 800eb3a:	e60e      	b.n	800e75a <_strtod_l+0x582>
 800eb3c:	fffffc02 	.word	0xfffffc02
 800eb40:	7ff00000 	.word	0x7ff00000
 800eb44:	39500000 	.word	0x39500000
 800eb48:	000fffff 	.word	0x000fffff
 800eb4c:	7fefffff 	.word	0x7fefffff
 800eb50:	08013c88 	.word	0x08013c88
 800eb54:	4631      	mov	r1, r6
 800eb56:	4628      	mov	r0, r5
 800eb58:	f002 fb02 	bl	8011160 <__ratio>
 800eb5c:	ec59 8b10 	vmov	r8, r9, d0
 800eb60:	ee10 0a10 	vmov	r0, s0
 800eb64:	2200      	movs	r2, #0
 800eb66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eb6a:	4649      	mov	r1, r9
 800eb6c:	f7f1 ffe0 	bl	8000b30 <__aeabi_dcmple>
 800eb70:	2800      	cmp	r0, #0
 800eb72:	d07c      	beq.n	800ec6e <_strtod_l+0xa96>
 800eb74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d04c      	beq.n	800ec14 <_strtod_l+0xa3c>
 800eb7a:	4b95      	ldr	r3, [pc, #596]	; (800edd0 <_strtod_l+0xbf8>)
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800eb82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800edd0 <_strtod_l+0xbf8>
 800eb86:	f04f 0800 	mov.w	r8, #0
 800eb8a:	4b92      	ldr	r3, [pc, #584]	; (800edd4 <_strtod_l+0xbfc>)
 800eb8c:	403b      	ands	r3, r7
 800eb8e:	9311      	str	r3, [sp, #68]	; 0x44
 800eb90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eb92:	4b91      	ldr	r3, [pc, #580]	; (800edd8 <_strtod_l+0xc00>)
 800eb94:	429a      	cmp	r2, r3
 800eb96:	f040 80b2 	bne.w	800ecfe <_strtod_l+0xb26>
 800eb9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eb9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eba2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800eba6:	ec4b ab10 	vmov	d0, sl, fp
 800ebaa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800ebae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ebb2:	f002 f9fd 	bl	8010fb0 <__ulp>
 800ebb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ebba:	ec53 2b10 	vmov	r2, r3, d0
 800ebbe:	f7f1 fd3b 	bl	8000638 <__aeabi_dmul>
 800ebc2:	4652      	mov	r2, sl
 800ebc4:	465b      	mov	r3, fp
 800ebc6:	f7f1 fb81 	bl	80002cc <__adddf3>
 800ebca:	460b      	mov	r3, r1
 800ebcc:	4981      	ldr	r1, [pc, #516]	; (800edd4 <_strtod_l+0xbfc>)
 800ebce:	4a83      	ldr	r2, [pc, #524]	; (800eddc <_strtod_l+0xc04>)
 800ebd0:	4019      	ands	r1, r3
 800ebd2:	4291      	cmp	r1, r2
 800ebd4:	4682      	mov	sl, r0
 800ebd6:	d95e      	bls.n	800ec96 <_strtod_l+0xabe>
 800ebd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebda:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d103      	bne.n	800ebea <_strtod_l+0xa12>
 800ebe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	f43f ad43 	beq.w	800e670 <_strtod_l+0x498>
 800ebea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800ede8 <_strtod_l+0xc10>
 800ebee:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ebf2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	f001 feaf 	bl	8010958 <_Bfree>
 800ebfa:	9907      	ldr	r1, [sp, #28]
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f001 feab 	bl	8010958 <_Bfree>
 800ec02:	4631      	mov	r1, r6
 800ec04:	4620      	mov	r0, r4
 800ec06:	f001 fea7 	bl	8010958 <_Bfree>
 800ec0a:	4629      	mov	r1, r5
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	f001 fea3 	bl	8010958 <_Bfree>
 800ec12:	e613      	b.n	800e83c <_strtod_l+0x664>
 800ec14:	f1ba 0f00 	cmp.w	sl, #0
 800ec18:	d11b      	bne.n	800ec52 <_strtod_l+0xa7a>
 800ec1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec1e:	b9f3      	cbnz	r3, 800ec5e <_strtod_l+0xa86>
 800ec20:	4b6b      	ldr	r3, [pc, #428]	; (800edd0 <_strtod_l+0xbf8>)
 800ec22:	2200      	movs	r2, #0
 800ec24:	4640      	mov	r0, r8
 800ec26:	4649      	mov	r1, r9
 800ec28:	f7f1 ff78 	bl	8000b1c <__aeabi_dcmplt>
 800ec2c:	b9d0      	cbnz	r0, 800ec64 <_strtod_l+0xa8c>
 800ec2e:	4640      	mov	r0, r8
 800ec30:	4649      	mov	r1, r9
 800ec32:	4b6b      	ldr	r3, [pc, #428]	; (800ede0 <_strtod_l+0xc08>)
 800ec34:	2200      	movs	r2, #0
 800ec36:	f7f1 fcff 	bl	8000638 <__aeabi_dmul>
 800ec3a:	4680      	mov	r8, r0
 800ec3c:	4689      	mov	r9, r1
 800ec3e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ec42:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ec46:	931b      	str	r3, [sp, #108]	; 0x6c
 800ec48:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ec4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ec50:	e79b      	b.n	800eb8a <_strtod_l+0x9b2>
 800ec52:	f1ba 0f01 	cmp.w	sl, #1
 800ec56:	d102      	bne.n	800ec5e <_strtod_l+0xa86>
 800ec58:	2f00      	cmp	r7, #0
 800ec5a:	f43f ad7e 	beq.w	800e75a <_strtod_l+0x582>
 800ec5e:	4b61      	ldr	r3, [pc, #388]	; (800ede4 <_strtod_l+0xc0c>)
 800ec60:	2200      	movs	r2, #0
 800ec62:	e78c      	b.n	800eb7e <_strtod_l+0x9a6>
 800ec64:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ede0 <_strtod_l+0xc08>
 800ec68:	f04f 0800 	mov.w	r8, #0
 800ec6c:	e7e7      	b.n	800ec3e <_strtod_l+0xa66>
 800ec6e:	4b5c      	ldr	r3, [pc, #368]	; (800ede0 <_strtod_l+0xc08>)
 800ec70:	4640      	mov	r0, r8
 800ec72:	4649      	mov	r1, r9
 800ec74:	2200      	movs	r2, #0
 800ec76:	f7f1 fcdf 	bl	8000638 <__aeabi_dmul>
 800ec7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec7c:	4680      	mov	r8, r0
 800ec7e:	4689      	mov	r9, r1
 800ec80:	b933      	cbnz	r3, 800ec90 <_strtod_l+0xab8>
 800ec82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec86:	9012      	str	r0, [sp, #72]	; 0x48
 800ec88:	9313      	str	r3, [sp, #76]	; 0x4c
 800ec8a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ec8e:	e7dd      	b.n	800ec4c <_strtod_l+0xa74>
 800ec90:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800ec94:	e7f9      	b.n	800ec8a <_strtod_l+0xab2>
 800ec96:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ec9a:	9b04      	ldr	r3, [sp, #16]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d1a8      	bne.n	800ebf2 <_strtod_l+0xa1a>
 800eca0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eca4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eca6:	0d1b      	lsrs	r3, r3, #20
 800eca8:	051b      	lsls	r3, r3, #20
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d1a1      	bne.n	800ebf2 <_strtod_l+0xa1a>
 800ecae:	4640      	mov	r0, r8
 800ecb0:	4649      	mov	r1, r9
 800ecb2:	f7f2 f821 	bl	8000cf8 <__aeabi_d2lz>
 800ecb6:	f7f1 fc91 	bl	80005dc <__aeabi_l2d>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	4640      	mov	r0, r8
 800ecc0:	4649      	mov	r1, r9
 800ecc2:	f7f1 fb01 	bl	80002c8 <__aeabi_dsub>
 800ecc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ecc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eccc:	ea43 030a 	orr.w	r3, r3, sl
 800ecd0:	4313      	orrs	r3, r2
 800ecd2:	4680      	mov	r8, r0
 800ecd4:	4689      	mov	r9, r1
 800ecd6:	d053      	beq.n	800ed80 <_strtod_l+0xba8>
 800ecd8:	a335      	add	r3, pc, #212	; (adr r3, 800edb0 <_strtod_l+0xbd8>)
 800ecda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecde:	f7f1 ff1d 	bl	8000b1c <__aeabi_dcmplt>
 800ece2:	2800      	cmp	r0, #0
 800ece4:	f47f acce 	bne.w	800e684 <_strtod_l+0x4ac>
 800ece8:	a333      	add	r3, pc, #204	; (adr r3, 800edb8 <_strtod_l+0xbe0>)
 800ecea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecee:	4640      	mov	r0, r8
 800ecf0:	4649      	mov	r1, r9
 800ecf2:	f7f1 ff31 	bl	8000b58 <__aeabi_dcmpgt>
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	f43f af7b 	beq.w	800ebf2 <_strtod_l+0xa1a>
 800ecfc:	e4c2      	b.n	800e684 <_strtod_l+0x4ac>
 800ecfe:	9b04      	ldr	r3, [sp, #16]
 800ed00:	b333      	cbz	r3, 800ed50 <_strtod_l+0xb78>
 800ed02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ed08:	d822      	bhi.n	800ed50 <_strtod_l+0xb78>
 800ed0a:	a32d      	add	r3, pc, #180	; (adr r3, 800edc0 <_strtod_l+0xbe8>)
 800ed0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed10:	4640      	mov	r0, r8
 800ed12:	4649      	mov	r1, r9
 800ed14:	f7f1 ff0c 	bl	8000b30 <__aeabi_dcmple>
 800ed18:	b1a0      	cbz	r0, 800ed44 <_strtod_l+0xb6c>
 800ed1a:	4649      	mov	r1, r9
 800ed1c:	4640      	mov	r0, r8
 800ed1e:	f7f1 ff63 	bl	8000be8 <__aeabi_d2uiz>
 800ed22:	2801      	cmp	r0, #1
 800ed24:	bf38      	it	cc
 800ed26:	2001      	movcc	r0, #1
 800ed28:	f7f1 fc0c 	bl	8000544 <__aeabi_ui2d>
 800ed2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed2e:	4680      	mov	r8, r0
 800ed30:	4689      	mov	r9, r1
 800ed32:	bb13      	cbnz	r3, 800ed7a <_strtod_l+0xba2>
 800ed34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed38:	9014      	str	r0, [sp, #80]	; 0x50
 800ed3a:	9315      	str	r3, [sp, #84]	; 0x54
 800ed3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ed40:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ed44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ed48:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ed4c:	1a9b      	subs	r3, r3, r2
 800ed4e:	930d      	str	r3, [sp, #52]	; 0x34
 800ed50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ed54:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ed58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ed5c:	f002 f928 	bl	8010fb0 <__ulp>
 800ed60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ed64:	ec53 2b10 	vmov	r2, r3, d0
 800ed68:	f7f1 fc66 	bl	8000638 <__aeabi_dmul>
 800ed6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ed70:	f7f1 faac 	bl	80002cc <__adddf3>
 800ed74:	4682      	mov	sl, r0
 800ed76:	468b      	mov	fp, r1
 800ed78:	e78f      	b.n	800ec9a <_strtod_l+0xac2>
 800ed7a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800ed7e:	e7dd      	b.n	800ed3c <_strtod_l+0xb64>
 800ed80:	a311      	add	r3, pc, #68	; (adr r3, 800edc8 <_strtod_l+0xbf0>)
 800ed82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed86:	f7f1 fec9 	bl	8000b1c <__aeabi_dcmplt>
 800ed8a:	e7b4      	b.n	800ecf6 <_strtod_l+0xb1e>
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	930e      	str	r3, [sp, #56]	; 0x38
 800ed90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ed92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ed94:	6013      	str	r3, [r2, #0]
 800ed96:	f7ff ba65 	b.w	800e264 <_strtod_l+0x8c>
 800ed9a:	2b65      	cmp	r3, #101	; 0x65
 800ed9c:	f43f ab5d 	beq.w	800e45a <_strtod_l+0x282>
 800eda0:	2b45      	cmp	r3, #69	; 0x45
 800eda2:	f43f ab5a 	beq.w	800e45a <_strtod_l+0x282>
 800eda6:	2201      	movs	r2, #1
 800eda8:	f7ff bb92 	b.w	800e4d0 <_strtod_l+0x2f8>
 800edac:	f3af 8000 	nop.w
 800edb0:	94a03595 	.word	0x94a03595
 800edb4:	3fdfffff 	.word	0x3fdfffff
 800edb8:	35afe535 	.word	0x35afe535
 800edbc:	3fe00000 	.word	0x3fe00000
 800edc0:	ffc00000 	.word	0xffc00000
 800edc4:	41dfffff 	.word	0x41dfffff
 800edc8:	94a03595 	.word	0x94a03595
 800edcc:	3fcfffff 	.word	0x3fcfffff
 800edd0:	3ff00000 	.word	0x3ff00000
 800edd4:	7ff00000 	.word	0x7ff00000
 800edd8:	7fe00000 	.word	0x7fe00000
 800eddc:	7c9fffff 	.word	0x7c9fffff
 800ede0:	3fe00000 	.word	0x3fe00000
 800ede4:	bff00000 	.word	0xbff00000
 800ede8:	7fefffff 	.word	0x7fefffff

0800edec <_strtod_r>:
 800edec:	4b01      	ldr	r3, [pc, #4]	; (800edf4 <_strtod_r+0x8>)
 800edee:	f7ff b9f3 	b.w	800e1d8 <_strtod_l>
 800edf2:	bf00      	nop
 800edf4:	2000007c 	.word	0x2000007c

0800edf8 <_strtol_l.isra.0>:
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edfe:	d001      	beq.n	800ee04 <_strtol_l.isra.0+0xc>
 800ee00:	2b24      	cmp	r3, #36	; 0x24
 800ee02:	d906      	bls.n	800ee12 <_strtol_l.isra.0+0x1a>
 800ee04:	f7fe fa0a 	bl	800d21c <__errno>
 800ee08:	2316      	movs	r3, #22
 800ee0a:	6003      	str	r3, [r0, #0]
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee12:	4f3a      	ldr	r7, [pc, #232]	; (800eefc <_strtol_l.isra.0+0x104>)
 800ee14:	468e      	mov	lr, r1
 800ee16:	4676      	mov	r6, lr
 800ee18:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ee1c:	5de5      	ldrb	r5, [r4, r7]
 800ee1e:	f015 0508 	ands.w	r5, r5, #8
 800ee22:	d1f8      	bne.n	800ee16 <_strtol_l.isra.0+0x1e>
 800ee24:	2c2d      	cmp	r4, #45	; 0x2d
 800ee26:	d134      	bne.n	800ee92 <_strtol_l.isra.0+0x9a>
 800ee28:	f89e 4000 	ldrb.w	r4, [lr]
 800ee2c:	f04f 0801 	mov.w	r8, #1
 800ee30:	f106 0e02 	add.w	lr, r6, #2
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d05c      	beq.n	800eef2 <_strtol_l.isra.0+0xfa>
 800ee38:	2b10      	cmp	r3, #16
 800ee3a:	d10c      	bne.n	800ee56 <_strtol_l.isra.0+0x5e>
 800ee3c:	2c30      	cmp	r4, #48	; 0x30
 800ee3e:	d10a      	bne.n	800ee56 <_strtol_l.isra.0+0x5e>
 800ee40:	f89e 4000 	ldrb.w	r4, [lr]
 800ee44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ee48:	2c58      	cmp	r4, #88	; 0x58
 800ee4a:	d14d      	bne.n	800eee8 <_strtol_l.isra.0+0xf0>
 800ee4c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ee50:	2310      	movs	r3, #16
 800ee52:	f10e 0e02 	add.w	lr, lr, #2
 800ee56:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ee5a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800ee5e:	2600      	movs	r6, #0
 800ee60:	fbbc f9f3 	udiv	r9, ip, r3
 800ee64:	4635      	mov	r5, r6
 800ee66:	fb03 ca19 	mls	sl, r3, r9, ip
 800ee6a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ee6e:	2f09      	cmp	r7, #9
 800ee70:	d818      	bhi.n	800eea4 <_strtol_l.isra.0+0xac>
 800ee72:	463c      	mov	r4, r7
 800ee74:	42a3      	cmp	r3, r4
 800ee76:	dd24      	ble.n	800eec2 <_strtol_l.isra.0+0xca>
 800ee78:	2e00      	cmp	r6, #0
 800ee7a:	db1f      	blt.n	800eebc <_strtol_l.isra.0+0xc4>
 800ee7c:	45a9      	cmp	r9, r5
 800ee7e:	d31d      	bcc.n	800eebc <_strtol_l.isra.0+0xc4>
 800ee80:	d101      	bne.n	800ee86 <_strtol_l.isra.0+0x8e>
 800ee82:	45a2      	cmp	sl, r4
 800ee84:	db1a      	blt.n	800eebc <_strtol_l.isra.0+0xc4>
 800ee86:	fb05 4503 	mla	r5, r5, r3, r4
 800ee8a:	2601      	movs	r6, #1
 800ee8c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ee90:	e7eb      	b.n	800ee6a <_strtol_l.isra.0+0x72>
 800ee92:	2c2b      	cmp	r4, #43	; 0x2b
 800ee94:	bf08      	it	eq
 800ee96:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ee9a:	46a8      	mov	r8, r5
 800ee9c:	bf08      	it	eq
 800ee9e:	f106 0e02 	addeq.w	lr, r6, #2
 800eea2:	e7c7      	b.n	800ee34 <_strtol_l.isra.0+0x3c>
 800eea4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800eea8:	2f19      	cmp	r7, #25
 800eeaa:	d801      	bhi.n	800eeb0 <_strtol_l.isra.0+0xb8>
 800eeac:	3c37      	subs	r4, #55	; 0x37
 800eeae:	e7e1      	b.n	800ee74 <_strtol_l.isra.0+0x7c>
 800eeb0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800eeb4:	2f19      	cmp	r7, #25
 800eeb6:	d804      	bhi.n	800eec2 <_strtol_l.isra.0+0xca>
 800eeb8:	3c57      	subs	r4, #87	; 0x57
 800eeba:	e7db      	b.n	800ee74 <_strtol_l.isra.0+0x7c>
 800eebc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800eec0:	e7e4      	b.n	800ee8c <_strtol_l.isra.0+0x94>
 800eec2:	2e00      	cmp	r6, #0
 800eec4:	da05      	bge.n	800eed2 <_strtol_l.isra.0+0xda>
 800eec6:	2322      	movs	r3, #34	; 0x22
 800eec8:	6003      	str	r3, [r0, #0]
 800eeca:	4665      	mov	r5, ip
 800eecc:	b942      	cbnz	r2, 800eee0 <_strtol_l.isra.0+0xe8>
 800eece:	4628      	mov	r0, r5
 800eed0:	e79d      	b.n	800ee0e <_strtol_l.isra.0+0x16>
 800eed2:	f1b8 0f00 	cmp.w	r8, #0
 800eed6:	d000      	beq.n	800eeda <_strtol_l.isra.0+0xe2>
 800eed8:	426d      	negs	r5, r5
 800eeda:	2a00      	cmp	r2, #0
 800eedc:	d0f7      	beq.n	800eece <_strtol_l.isra.0+0xd6>
 800eede:	b10e      	cbz	r6, 800eee4 <_strtol_l.isra.0+0xec>
 800eee0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800eee4:	6011      	str	r1, [r2, #0]
 800eee6:	e7f2      	b.n	800eece <_strtol_l.isra.0+0xd6>
 800eee8:	2430      	movs	r4, #48	; 0x30
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d1b3      	bne.n	800ee56 <_strtol_l.isra.0+0x5e>
 800eeee:	2308      	movs	r3, #8
 800eef0:	e7b1      	b.n	800ee56 <_strtol_l.isra.0+0x5e>
 800eef2:	2c30      	cmp	r4, #48	; 0x30
 800eef4:	d0a4      	beq.n	800ee40 <_strtol_l.isra.0+0x48>
 800eef6:	230a      	movs	r3, #10
 800eef8:	e7ad      	b.n	800ee56 <_strtol_l.isra.0+0x5e>
 800eefa:	bf00      	nop
 800eefc:	08013cb1 	.word	0x08013cb1

0800ef00 <_strtol_r>:
 800ef00:	f7ff bf7a 	b.w	800edf8 <_strtol_l.isra.0>

0800ef04 <__swbuf_r>:
 800ef04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef06:	460e      	mov	r6, r1
 800ef08:	4614      	mov	r4, r2
 800ef0a:	4605      	mov	r5, r0
 800ef0c:	b118      	cbz	r0, 800ef16 <__swbuf_r+0x12>
 800ef0e:	6983      	ldr	r3, [r0, #24]
 800ef10:	b90b      	cbnz	r3, 800ef16 <__swbuf_r+0x12>
 800ef12:	f001 f84b 	bl	800ffac <__sinit>
 800ef16:	4b21      	ldr	r3, [pc, #132]	; (800ef9c <__swbuf_r+0x98>)
 800ef18:	429c      	cmp	r4, r3
 800ef1a:	d12b      	bne.n	800ef74 <__swbuf_r+0x70>
 800ef1c:	686c      	ldr	r4, [r5, #4]
 800ef1e:	69a3      	ldr	r3, [r4, #24]
 800ef20:	60a3      	str	r3, [r4, #8]
 800ef22:	89a3      	ldrh	r3, [r4, #12]
 800ef24:	071a      	lsls	r2, r3, #28
 800ef26:	d52f      	bpl.n	800ef88 <__swbuf_r+0x84>
 800ef28:	6923      	ldr	r3, [r4, #16]
 800ef2a:	b36b      	cbz	r3, 800ef88 <__swbuf_r+0x84>
 800ef2c:	6923      	ldr	r3, [r4, #16]
 800ef2e:	6820      	ldr	r0, [r4, #0]
 800ef30:	1ac0      	subs	r0, r0, r3
 800ef32:	6963      	ldr	r3, [r4, #20]
 800ef34:	b2f6      	uxtb	r6, r6
 800ef36:	4283      	cmp	r3, r0
 800ef38:	4637      	mov	r7, r6
 800ef3a:	dc04      	bgt.n	800ef46 <__swbuf_r+0x42>
 800ef3c:	4621      	mov	r1, r4
 800ef3e:	4628      	mov	r0, r5
 800ef40:	f000 ffa0 	bl	800fe84 <_fflush_r>
 800ef44:	bb30      	cbnz	r0, 800ef94 <__swbuf_r+0x90>
 800ef46:	68a3      	ldr	r3, [r4, #8]
 800ef48:	3b01      	subs	r3, #1
 800ef4a:	60a3      	str	r3, [r4, #8]
 800ef4c:	6823      	ldr	r3, [r4, #0]
 800ef4e:	1c5a      	adds	r2, r3, #1
 800ef50:	6022      	str	r2, [r4, #0]
 800ef52:	701e      	strb	r6, [r3, #0]
 800ef54:	6963      	ldr	r3, [r4, #20]
 800ef56:	3001      	adds	r0, #1
 800ef58:	4283      	cmp	r3, r0
 800ef5a:	d004      	beq.n	800ef66 <__swbuf_r+0x62>
 800ef5c:	89a3      	ldrh	r3, [r4, #12]
 800ef5e:	07db      	lsls	r3, r3, #31
 800ef60:	d506      	bpl.n	800ef70 <__swbuf_r+0x6c>
 800ef62:	2e0a      	cmp	r6, #10
 800ef64:	d104      	bne.n	800ef70 <__swbuf_r+0x6c>
 800ef66:	4621      	mov	r1, r4
 800ef68:	4628      	mov	r0, r5
 800ef6a:	f000 ff8b 	bl	800fe84 <_fflush_r>
 800ef6e:	b988      	cbnz	r0, 800ef94 <__swbuf_r+0x90>
 800ef70:	4638      	mov	r0, r7
 800ef72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef74:	4b0a      	ldr	r3, [pc, #40]	; (800efa0 <__swbuf_r+0x9c>)
 800ef76:	429c      	cmp	r4, r3
 800ef78:	d101      	bne.n	800ef7e <__swbuf_r+0x7a>
 800ef7a:	68ac      	ldr	r4, [r5, #8]
 800ef7c:	e7cf      	b.n	800ef1e <__swbuf_r+0x1a>
 800ef7e:	4b09      	ldr	r3, [pc, #36]	; (800efa4 <__swbuf_r+0xa0>)
 800ef80:	429c      	cmp	r4, r3
 800ef82:	bf08      	it	eq
 800ef84:	68ec      	ldreq	r4, [r5, #12]
 800ef86:	e7ca      	b.n	800ef1e <__swbuf_r+0x1a>
 800ef88:	4621      	mov	r1, r4
 800ef8a:	4628      	mov	r0, r5
 800ef8c:	f000 f80c 	bl	800efa8 <__swsetup_r>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	d0cb      	beq.n	800ef2c <__swbuf_r+0x28>
 800ef94:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ef98:	e7ea      	b.n	800ef70 <__swbuf_r+0x6c>
 800ef9a:	bf00      	nop
 800ef9c:	08013e68 	.word	0x08013e68
 800efa0:	08013e88 	.word	0x08013e88
 800efa4:	08013e48 	.word	0x08013e48

0800efa8 <__swsetup_r>:
 800efa8:	4b32      	ldr	r3, [pc, #200]	; (800f074 <__swsetup_r+0xcc>)
 800efaa:	b570      	push	{r4, r5, r6, lr}
 800efac:	681d      	ldr	r5, [r3, #0]
 800efae:	4606      	mov	r6, r0
 800efb0:	460c      	mov	r4, r1
 800efb2:	b125      	cbz	r5, 800efbe <__swsetup_r+0x16>
 800efb4:	69ab      	ldr	r3, [r5, #24]
 800efb6:	b913      	cbnz	r3, 800efbe <__swsetup_r+0x16>
 800efb8:	4628      	mov	r0, r5
 800efba:	f000 fff7 	bl	800ffac <__sinit>
 800efbe:	4b2e      	ldr	r3, [pc, #184]	; (800f078 <__swsetup_r+0xd0>)
 800efc0:	429c      	cmp	r4, r3
 800efc2:	d10f      	bne.n	800efe4 <__swsetup_r+0x3c>
 800efc4:	686c      	ldr	r4, [r5, #4]
 800efc6:	89a3      	ldrh	r3, [r4, #12]
 800efc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800efcc:	0719      	lsls	r1, r3, #28
 800efce:	d42c      	bmi.n	800f02a <__swsetup_r+0x82>
 800efd0:	06dd      	lsls	r5, r3, #27
 800efd2:	d411      	bmi.n	800eff8 <__swsetup_r+0x50>
 800efd4:	2309      	movs	r3, #9
 800efd6:	6033      	str	r3, [r6, #0]
 800efd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800efdc:	81a3      	strh	r3, [r4, #12]
 800efde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efe2:	e03e      	b.n	800f062 <__swsetup_r+0xba>
 800efe4:	4b25      	ldr	r3, [pc, #148]	; (800f07c <__swsetup_r+0xd4>)
 800efe6:	429c      	cmp	r4, r3
 800efe8:	d101      	bne.n	800efee <__swsetup_r+0x46>
 800efea:	68ac      	ldr	r4, [r5, #8]
 800efec:	e7eb      	b.n	800efc6 <__swsetup_r+0x1e>
 800efee:	4b24      	ldr	r3, [pc, #144]	; (800f080 <__swsetup_r+0xd8>)
 800eff0:	429c      	cmp	r4, r3
 800eff2:	bf08      	it	eq
 800eff4:	68ec      	ldreq	r4, [r5, #12]
 800eff6:	e7e6      	b.n	800efc6 <__swsetup_r+0x1e>
 800eff8:	0758      	lsls	r0, r3, #29
 800effa:	d512      	bpl.n	800f022 <__swsetup_r+0x7a>
 800effc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800effe:	b141      	cbz	r1, 800f012 <__swsetup_r+0x6a>
 800f000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f004:	4299      	cmp	r1, r3
 800f006:	d002      	beq.n	800f00e <__swsetup_r+0x66>
 800f008:	4630      	mov	r0, r6
 800f00a:	f7fe f95f 	bl	800d2cc <_free_r>
 800f00e:	2300      	movs	r3, #0
 800f010:	6363      	str	r3, [r4, #52]	; 0x34
 800f012:	89a3      	ldrh	r3, [r4, #12]
 800f014:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f018:	81a3      	strh	r3, [r4, #12]
 800f01a:	2300      	movs	r3, #0
 800f01c:	6063      	str	r3, [r4, #4]
 800f01e:	6923      	ldr	r3, [r4, #16]
 800f020:	6023      	str	r3, [r4, #0]
 800f022:	89a3      	ldrh	r3, [r4, #12]
 800f024:	f043 0308 	orr.w	r3, r3, #8
 800f028:	81a3      	strh	r3, [r4, #12]
 800f02a:	6923      	ldr	r3, [r4, #16]
 800f02c:	b94b      	cbnz	r3, 800f042 <__swsetup_r+0x9a>
 800f02e:	89a3      	ldrh	r3, [r4, #12]
 800f030:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f038:	d003      	beq.n	800f042 <__swsetup_r+0x9a>
 800f03a:	4621      	mov	r1, r4
 800f03c:	4630      	mov	r0, r6
 800f03e:	f001 fbed 	bl	801081c <__smakebuf_r>
 800f042:	89a0      	ldrh	r0, [r4, #12]
 800f044:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f048:	f010 0301 	ands.w	r3, r0, #1
 800f04c:	d00a      	beq.n	800f064 <__swsetup_r+0xbc>
 800f04e:	2300      	movs	r3, #0
 800f050:	60a3      	str	r3, [r4, #8]
 800f052:	6963      	ldr	r3, [r4, #20]
 800f054:	425b      	negs	r3, r3
 800f056:	61a3      	str	r3, [r4, #24]
 800f058:	6923      	ldr	r3, [r4, #16]
 800f05a:	b943      	cbnz	r3, 800f06e <__swsetup_r+0xc6>
 800f05c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f060:	d1ba      	bne.n	800efd8 <__swsetup_r+0x30>
 800f062:	bd70      	pop	{r4, r5, r6, pc}
 800f064:	0781      	lsls	r1, r0, #30
 800f066:	bf58      	it	pl
 800f068:	6963      	ldrpl	r3, [r4, #20]
 800f06a:	60a3      	str	r3, [r4, #8]
 800f06c:	e7f4      	b.n	800f058 <__swsetup_r+0xb0>
 800f06e:	2000      	movs	r0, #0
 800f070:	e7f7      	b.n	800f062 <__swsetup_r+0xba>
 800f072:	bf00      	nop
 800f074:	20000014 	.word	0x20000014
 800f078:	08013e68 	.word	0x08013e68
 800f07c:	08013e88 	.word	0x08013e88
 800f080:	08013e48 	.word	0x08013e48

0800f084 <quorem>:
 800f084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f088:	6903      	ldr	r3, [r0, #16]
 800f08a:	690c      	ldr	r4, [r1, #16]
 800f08c:	42a3      	cmp	r3, r4
 800f08e:	4607      	mov	r7, r0
 800f090:	f2c0 8081 	blt.w	800f196 <quorem+0x112>
 800f094:	3c01      	subs	r4, #1
 800f096:	f101 0814 	add.w	r8, r1, #20
 800f09a:	f100 0514 	add.w	r5, r0, #20
 800f09e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0a2:	9301      	str	r3, [sp, #4]
 800f0a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f0a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f0b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f0b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800f0bc:	d331      	bcc.n	800f122 <quorem+0x9e>
 800f0be:	f04f 0e00 	mov.w	lr, #0
 800f0c2:	4640      	mov	r0, r8
 800f0c4:	46ac      	mov	ip, r5
 800f0c6:	46f2      	mov	sl, lr
 800f0c8:	f850 2b04 	ldr.w	r2, [r0], #4
 800f0cc:	b293      	uxth	r3, r2
 800f0ce:	fb06 e303 	mla	r3, r6, r3, lr
 800f0d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	ebaa 0303 	sub.w	r3, sl, r3
 800f0dc:	0c12      	lsrs	r2, r2, #16
 800f0de:	f8dc a000 	ldr.w	sl, [ip]
 800f0e2:	fb06 e202 	mla	r2, r6, r2, lr
 800f0e6:	fa13 f38a 	uxtah	r3, r3, sl
 800f0ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f0ee:	fa1f fa82 	uxth.w	sl, r2
 800f0f2:	f8dc 2000 	ldr.w	r2, [ip]
 800f0f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f0fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0fe:	b29b      	uxth	r3, r3
 800f100:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f104:	4581      	cmp	r9, r0
 800f106:	f84c 3b04 	str.w	r3, [ip], #4
 800f10a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f10e:	d2db      	bcs.n	800f0c8 <quorem+0x44>
 800f110:	f855 300b 	ldr.w	r3, [r5, fp]
 800f114:	b92b      	cbnz	r3, 800f122 <quorem+0x9e>
 800f116:	9b01      	ldr	r3, [sp, #4]
 800f118:	3b04      	subs	r3, #4
 800f11a:	429d      	cmp	r5, r3
 800f11c:	461a      	mov	r2, r3
 800f11e:	d32e      	bcc.n	800f17e <quorem+0xfa>
 800f120:	613c      	str	r4, [r7, #16]
 800f122:	4638      	mov	r0, r7
 800f124:	f001 fea0 	bl	8010e68 <__mcmp>
 800f128:	2800      	cmp	r0, #0
 800f12a:	db24      	blt.n	800f176 <quorem+0xf2>
 800f12c:	3601      	adds	r6, #1
 800f12e:	4628      	mov	r0, r5
 800f130:	f04f 0c00 	mov.w	ip, #0
 800f134:	f858 2b04 	ldr.w	r2, [r8], #4
 800f138:	f8d0 e000 	ldr.w	lr, [r0]
 800f13c:	b293      	uxth	r3, r2
 800f13e:	ebac 0303 	sub.w	r3, ip, r3
 800f142:	0c12      	lsrs	r2, r2, #16
 800f144:	fa13 f38e 	uxtah	r3, r3, lr
 800f148:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f14c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f150:	b29b      	uxth	r3, r3
 800f152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f156:	45c1      	cmp	r9, r8
 800f158:	f840 3b04 	str.w	r3, [r0], #4
 800f15c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f160:	d2e8      	bcs.n	800f134 <quorem+0xb0>
 800f162:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f166:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f16a:	b922      	cbnz	r2, 800f176 <quorem+0xf2>
 800f16c:	3b04      	subs	r3, #4
 800f16e:	429d      	cmp	r5, r3
 800f170:	461a      	mov	r2, r3
 800f172:	d30a      	bcc.n	800f18a <quorem+0x106>
 800f174:	613c      	str	r4, [r7, #16]
 800f176:	4630      	mov	r0, r6
 800f178:	b003      	add	sp, #12
 800f17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f17e:	6812      	ldr	r2, [r2, #0]
 800f180:	3b04      	subs	r3, #4
 800f182:	2a00      	cmp	r2, #0
 800f184:	d1cc      	bne.n	800f120 <quorem+0x9c>
 800f186:	3c01      	subs	r4, #1
 800f188:	e7c7      	b.n	800f11a <quorem+0x96>
 800f18a:	6812      	ldr	r2, [r2, #0]
 800f18c:	3b04      	subs	r3, #4
 800f18e:	2a00      	cmp	r2, #0
 800f190:	d1f0      	bne.n	800f174 <quorem+0xf0>
 800f192:	3c01      	subs	r4, #1
 800f194:	e7eb      	b.n	800f16e <quorem+0xea>
 800f196:	2000      	movs	r0, #0
 800f198:	e7ee      	b.n	800f178 <quorem+0xf4>
 800f19a:	0000      	movs	r0, r0
 800f19c:	0000      	movs	r0, r0
	...

0800f1a0 <_dtoa_r>:
 800f1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a4:	ed2d 8b02 	vpush	{d8}
 800f1a8:	ec57 6b10 	vmov	r6, r7, d0
 800f1ac:	b095      	sub	sp, #84	; 0x54
 800f1ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f1b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f1b4:	9105      	str	r1, [sp, #20]
 800f1b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	9209      	str	r2, [sp, #36]	; 0x24
 800f1be:	930f      	str	r3, [sp, #60]	; 0x3c
 800f1c0:	b975      	cbnz	r5, 800f1e0 <_dtoa_r+0x40>
 800f1c2:	2010      	movs	r0, #16
 800f1c4:	f7fe f854 	bl	800d270 <malloc>
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	6260      	str	r0, [r4, #36]	; 0x24
 800f1cc:	b920      	cbnz	r0, 800f1d8 <_dtoa_r+0x38>
 800f1ce:	4bb2      	ldr	r3, [pc, #712]	; (800f498 <_dtoa_r+0x2f8>)
 800f1d0:	21ea      	movs	r1, #234	; 0xea
 800f1d2:	48b2      	ldr	r0, [pc, #712]	; (800f49c <_dtoa_r+0x2fc>)
 800f1d4:	f002 fb6c 	bl	80118b0 <__assert_func>
 800f1d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f1dc:	6005      	str	r5, [r0, #0]
 800f1de:	60c5      	str	r5, [r0, #12]
 800f1e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1e2:	6819      	ldr	r1, [r3, #0]
 800f1e4:	b151      	cbz	r1, 800f1fc <_dtoa_r+0x5c>
 800f1e6:	685a      	ldr	r2, [r3, #4]
 800f1e8:	604a      	str	r2, [r1, #4]
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	4093      	lsls	r3, r2
 800f1ee:	608b      	str	r3, [r1, #8]
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f001 fbb1 	bl	8010958 <_Bfree>
 800f1f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	601a      	str	r2, [r3, #0]
 800f1fc:	1e3b      	subs	r3, r7, #0
 800f1fe:	bfb9      	ittee	lt
 800f200:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f204:	9303      	strlt	r3, [sp, #12]
 800f206:	2300      	movge	r3, #0
 800f208:	f8c8 3000 	strge.w	r3, [r8]
 800f20c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f210:	4ba3      	ldr	r3, [pc, #652]	; (800f4a0 <_dtoa_r+0x300>)
 800f212:	bfbc      	itt	lt
 800f214:	2201      	movlt	r2, #1
 800f216:	f8c8 2000 	strlt.w	r2, [r8]
 800f21a:	ea33 0309 	bics.w	r3, r3, r9
 800f21e:	d11b      	bne.n	800f258 <_dtoa_r+0xb8>
 800f220:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f222:	f242 730f 	movw	r3, #9999	; 0x270f
 800f226:	6013      	str	r3, [r2, #0]
 800f228:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f22c:	4333      	orrs	r3, r6
 800f22e:	f000 857a 	beq.w	800fd26 <_dtoa_r+0xb86>
 800f232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f234:	b963      	cbnz	r3, 800f250 <_dtoa_r+0xb0>
 800f236:	4b9b      	ldr	r3, [pc, #620]	; (800f4a4 <_dtoa_r+0x304>)
 800f238:	e024      	b.n	800f284 <_dtoa_r+0xe4>
 800f23a:	4b9b      	ldr	r3, [pc, #620]	; (800f4a8 <_dtoa_r+0x308>)
 800f23c:	9300      	str	r3, [sp, #0]
 800f23e:	3308      	adds	r3, #8
 800f240:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f242:	6013      	str	r3, [r2, #0]
 800f244:	9800      	ldr	r0, [sp, #0]
 800f246:	b015      	add	sp, #84	; 0x54
 800f248:	ecbd 8b02 	vpop	{d8}
 800f24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f250:	4b94      	ldr	r3, [pc, #592]	; (800f4a4 <_dtoa_r+0x304>)
 800f252:	9300      	str	r3, [sp, #0]
 800f254:	3303      	adds	r3, #3
 800f256:	e7f3      	b.n	800f240 <_dtoa_r+0xa0>
 800f258:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f25c:	2200      	movs	r2, #0
 800f25e:	ec51 0b17 	vmov	r0, r1, d7
 800f262:	2300      	movs	r3, #0
 800f264:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f268:	f7f1 fc4e 	bl	8000b08 <__aeabi_dcmpeq>
 800f26c:	4680      	mov	r8, r0
 800f26e:	b158      	cbz	r0, 800f288 <_dtoa_r+0xe8>
 800f270:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f272:	2301      	movs	r3, #1
 800f274:	6013      	str	r3, [r2, #0]
 800f276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f278:	2b00      	cmp	r3, #0
 800f27a:	f000 8551 	beq.w	800fd20 <_dtoa_r+0xb80>
 800f27e:	488b      	ldr	r0, [pc, #556]	; (800f4ac <_dtoa_r+0x30c>)
 800f280:	6018      	str	r0, [r3, #0]
 800f282:	1e43      	subs	r3, r0, #1
 800f284:	9300      	str	r3, [sp, #0]
 800f286:	e7dd      	b.n	800f244 <_dtoa_r+0xa4>
 800f288:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f28c:	aa12      	add	r2, sp, #72	; 0x48
 800f28e:	a913      	add	r1, sp, #76	; 0x4c
 800f290:	4620      	mov	r0, r4
 800f292:	f001 ff09 	bl	80110a8 <__d2b>
 800f296:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f29a:	4683      	mov	fp, r0
 800f29c:	2d00      	cmp	r5, #0
 800f29e:	d07c      	beq.n	800f39a <_dtoa_r+0x1fa>
 800f2a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f2a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f2ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f2b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f2b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f2ba:	4b7d      	ldr	r3, [pc, #500]	; (800f4b0 <_dtoa_r+0x310>)
 800f2bc:	2200      	movs	r2, #0
 800f2be:	4630      	mov	r0, r6
 800f2c0:	4639      	mov	r1, r7
 800f2c2:	f7f1 f801 	bl	80002c8 <__aeabi_dsub>
 800f2c6:	a36e      	add	r3, pc, #440	; (adr r3, 800f480 <_dtoa_r+0x2e0>)
 800f2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2cc:	f7f1 f9b4 	bl	8000638 <__aeabi_dmul>
 800f2d0:	a36d      	add	r3, pc, #436	; (adr r3, 800f488 <_dtoa_r+0x2e8>)
 800f2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d6:	f7f0 fff9 	bl	80002cc <__adddf3>
 800f2da:	4606      	mov	r6, r0
 800f2dc:	4628      	mov	r0, r5
 800f2de:	460f      	mov	r7, r1
 800f2e0:	f7f1 f940 	bl	8000564 <__aeabi_i2d>
 800f2e4:	a36a      	add	r3, pc, #424	; (adr r3, 800f490 <_dtoa_r+0x2f0>)
 800f2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ea:	f7f1 f9a5 	bl	8000638 <__aeabi_dmul>
 800f2ee:	4602      	mov	r2, r0
 800f2f0:	460b      	mov	r3, r1
 800f2f2:	4630      	mov	r0, r6
 800f2f4:	4639      	mov	r1, r7
 800f2f6:	f7f0 ffe9 	bl	80002cc <__adddf3>
 800f2fa:	4606      	mov	r6, r0
 800f2fc:	460f      	mov	r7, r1
 800f2fe:	f7f1 fc4b 	bl	8000b98 <__aeabi_d2iz>
 800f302:	2200      	movs	r2, #0
 800f304:	4682      	mov	sl, r0
 800f306:	2300      	movs	r3, #0
 800f308:	4630      	mov	r0, r6
 800f30a:	4639      	mov	r1, r7
 800f30c:	f7f1 fc06 	bl	8000b1c <__aeabi_dcmplt>
 800f310:	b148      	cbz	r0, 800f326 <_dtoa_r+0x186>
 800f312:	4650      	mov	r0, sl
 800f314:	f7f1 f926 	bl	8000564 <__aeabi_i2d>
 800f318:	4632      	mov	r2, r6
 800f31a:	463b      	mov	r3, r7
 800f31c:	f7f1 fbf4 	bl	8000b08 <__aeabi_dcmpeq>
 800f320:	b908      	cbnz	r0, 800f326 <_dtoa_r+0x186>
 800f322:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f326:	f1ba 0f16 	cmp.w	sl, #22
 800f32a:	d854      	bhi.n	800f3d6 <_dtoa_r+0x236>
 800f32c:	4b61      	ldr	r3, [pc, #388]	; (800f4b4 <_dtoa_r+0x314>)
 800f32e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f336:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f33a:	f7f1 fbef 	bl	8000b1c <__aeabi_dcmplt>
 800f33e:	2800      	cmp	r0, #0
 800f340:	d04b      	beq.n	800f3da <_dtoa_r+0x23a>
 800f342:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f346:	2300      	movs	r3, #0
 800f348:	930e      	str	r3, [sp, #56]	; 0x38
 800f34a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f34c:	1b5d      	subs	r5, r3, r5
 800f34e:	1e6b      	subs	r3, r5, #1
 800f350:	9304      	str	r3, [sp, #16]
 800f352:	bf43      	ittte	mi
 800f354:	2300      	movmi	r3, #0
 800f356:	f1c5 0801 	rsbmi	r8, r5, #1
 800f35a:	9304      	strmi	r3, [sp, #16]
 800f35c:	f04f 0800 	movpl.w	r8, #0
 800f360:	f1ba 0f00 	cmp.w	sl, #0
 800f364:	db3b      	blt.n	800f3de <_dtoa_r+0x23e>
 800f366:	9b04      	ldr	r3, [sp, #16]
 800f368:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f36c:	4453      	add	r3, sl
 800f36e:	9304      	str	r3, [sp, #16]
 800f370:	2300      	movs	r3, #0
 800f372:	9306      	str	r3, [sp, #24]
 800f374:	9b05      	ldr	r3, [sp, #20]
 800f376:	2b09      	cmp	r3, #9
 800f378:	d869      	bhi.n	800f44e <_dtoa_r+0x2ae>
 800f37a:	2b05      	cmp	r3, #5
 800f37c:	bfc4      	itt	gt
 800f37e:	3b04      	subgt	r3, #4
 800f380:	9305      	strgt	r3, [sp, #20]
 800f382:	9b05      	ldr	r3, [sp, #20]
 800f384:	f1a3 0302 	sub.w	r3, r3, #2
 800f388:	bfcc      	ite	gt
 800f38a:	2500      	movgt	r5, #0
 800f38c:	2501      	movle	r5, #1
 800f38e:	2b03      	cmp	r3, #3
 800f390:	d869      	bhi.n	800f466 <_dtoa_r+0x2c6>
 800f392:	e8df f003 	tbb	[pc, r3]
 800f396:	4e2c      	.short	0x4e2c
 800f398:	5a4c      	.short	0x5a4c
 800f39a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f39e:	441d      	add	r5, r3
 800f3a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f3a4:	2b20      	cmp	r3, #32
 800f3a6:	bfc1      	itttt	gt
 800f3a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f3ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f3b0:	fa09 f303 	lslgt.w	r3, r9, r3
 800f3b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f3b8:	bfda      	itte	le
 800f3ba:	f1c3 0320 	rsble	r3, r3, #32
 800f3be:	fa06 f003 	lslle.w	r0, r6, r3
 800f3c2:	4318      	orrgt	r0, r3
 800f3c4:	f7f1 f8be 	bl	8000544 <__aeabi_ui2d>
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	4606      	mov	r6, r0
 800f3cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f3d0:	3d01      	subs	r5, #1
 800f3d2:	9310      	str	r3, [sp, #64]	; 0x40
 800f3d4:	e771      	b.n	800f2ba <_dtoa_r+0x11a>
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	e7b6      	b.n	800f348 <_dtoa_r+0x1a8>
 800f3da:	900e      	str	r0, [sp, #56]	; 0x38
 800f3dc:	e7b5      	b.n	800f34a <_dtoa_r+0x1aa>
 800f3de:	f1ca 0300 	rsb	r3, sl, #0
 800f3e2:	9306      	str	r3, [sp, #24]
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	eba8 080a 	sub.w	r8, r8, sl
 800f3ea:	930d      	str	r3, [sp, #52]	; 0x34
 800f3ec:	e7c2      	b.n	800f374 <_dtoa_r+0x1d4>
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	9308      	str	r3, [sp, #32]
 800f3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	dc39      	bgt.n	800f46c <_dtoa_r+0x2cc>
 800f3f8:	f04f 0901 	mov.w	r9, #1
 800f3fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800f400:	464b      	mov	r3, r9
 800f402:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f406:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f408:	2200      	movs	r2, #0
 800f40a:	6042      	str	r2, [r0, #4]
 800f40c:	2204      	movs	r2, #4
 800f40e:	f102 0614 	add.w	r6, r2, #20
 800f412:	429e      	cmp	r6, r3
 800f414:	6841      	ldr	r1, [r0, #4]
 800f416:	d92f      	bls.n	800f478 <_dtoa_r+0x2d8>
 800f418:	4620      	mov	r0, r4
 800f41a:	f001 fa5d 	bl	80108d8 <_Balloc>
 800f41e:	9000      	str	r0, [sp, #0]
 800f420:	2800      	cmp	r0, #0
 800f422:	d14b      	bne.n	800f4bc <_dtoa_r+0x31c>
 800f424:	4b24      	ldr	r3, [pc, #144]	; (800f4b8 <_dtoa_r+0x318>)
 800f426:	4602      	mov	r2, r0
 800f428:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f42c:	e6d1      	b.n	800f1d2 <_dtoa_r+0x32>
 800f42e:	2301      	movs	r3, #1
 800f430:	e7de      	b.n	800f3f0 <_dtoa_r+0x250>
 800f432:	2300      	movs	r3, #0
 800f434:	9308      	str	r3, [sp, #32]
 800f436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f438:	eb0a 0903 	add.w	r9, sl, r3
 800f43c:	f109 0301 	add.w	r3, r9, #1
 800f440:	2b01      	cmp	r3, #1
 800f442:	9301      	str	r3, [sp, #4]
 800f444:	bfb8      	it	lt
 800f446:	2301      	movlt	r3, #1
 800f448:	e7dd      	b.n	800f406 <_dtoa_r+0x266>
 800f44a:	2301      	movs	r3, #1
 800f44c:	e7f2      	b.n	800f434 <_dtoa_r+0x294>
 800f44e:	2501      	movs	r5, #1
 800f450:	2300      	movs	r3, #0
 800f452:	9305      	str	r3, [sp, #20]
 800f454:	9508      	str	r5, [sp, #32]
 800f456:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800f45a:	2200      	movs	r2, #0
 800f45c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f460:	2312      	movs	r3, #18
 800f462:	9209      	str	r2, [sp, #36]	; 0x24
 800f464:	e7cf      	b.n	800f406 <_dtoa_r+0x266>
 800f466:	2301      	movs	r3, #1
 800f468:	9308      	str	r3, [sp, #32]
 800f46a:	e7f4      	b.n	800f456 <_dtoa_r+0x2b6>
 800f46c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f470:	f8cd 9004 	str.w	r9, [sp, #4]
 800f474:	464b      	mov	r3, r9
 800f476:	e7c6      	b.n	800f406 <_dtoa_r+0x266>
 800f478:	3101      	adds	r1, #1
 800f47a:	6041      	str	r1, [r0, #4]
 800f47c:	0052      	lsls	r2, r2, #1
 800f47e:	e7c6      	b.n	800f40e <_dtoa_r+0x26e>
 800f480:	636f4361 	.word	0x636f4361
 800f484:	3fd287a7 	.word	0x3fd287a7
 800f488:	8b60c8b3 	.word	0x8b60c8b3
 800f48c:	3fc68a28 	.word	0x3fc68a28
 800f490:	509f79fb 	.word	0x509f79fb
 800f494:	3fd34413 	.word	0x3fd34413
 800f498:	08013dbe 	.word	0x08013dbe
 800f49c:	08013dd5 	.word	0x08013dd5
 800f4a0:	7ff00000 	.word	0x7ff00000
 800f4a4:	08013dba 	.word	0x08013dba
 800f4a8:	08013db1 	.word	0x08013db1
 800f4ac:	08013c31 	.word	0x08013c31
 800f4b0:	3ff80000 	.word	0x3ff80000
 800f4b4:	08013fb0 	.word	0x08013fb0
 800f4b8:	08013e34 	.word	0x08013e34
 800f4bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4be:	9a00      	ldr	r2, [sp, #0]
 800f4c0:	601a      	str	r2, [r3, #0]
 800f4c2:	9b01      	ldr	r3, [sp, #4]
 800f4c4:	2b0e      	cmp	r3, #14
 800f4c6:	f200 80ad 	bhi.w	800f624 <_dtoa_r+0x484>
 800f4ca:	2d00      	cmp	r5, #0
 800f4cc:	f000 80aa 	beq.w	800f624 <_dtoa_r+0x484>
 800f4d0:	f1ba 0f00 	cmp.w	sl, #0
 800f4d4:	dd36      	ble.n	800f544 <_dtoa_r+0x3a4>
 800f4d6:	4ac3      	ldr	r2, [pc, #780]	; (800f7e4 <_dtoa_r+0x644>)
 800f4d8:	f00a 030f 	and.w	r3, sl, #15
 800f4dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f4e0:	ed93 7b00 	vldr	d7, [r3]
 800f4e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f4e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f4ec:	eeb0 8a47 	vmov.f32	s16, s14
 800f4f0:	eef0 8a67 	vmov.f32	s17, s15
 800f4f4:	d016      	beq.n	800f524 <_dtoa_r+0x384>
 800f4f6:	4bbc      	ldr	r3, [pc, #752]	; (800f7e8 <_dtoa_r+0x648>)
 800f4f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f4fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f500:	f7f1 f9c4 	bl	800088c <__aeabi_ddiv>
 800f504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f508:	f007 070f 	and.w	r7, r7, #15
 800f50c:	2503      	movs	r5, #3
 800f50e:	4eb6      	ldr	r6, [pc, #728]	; (800f7e8 <_dtoa_r+0x648>)
 800f510:	b957      	cbnz	r7, 800f528 <_dtoa_r+0x388>
 800f512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f516:	ec53 2b18 	vmov	r2, r3, d8
 800f51a:	f7f1 f9b7 	bl	800088c <__aeabi_ddiv>
 800f51e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f522:	e029      	b.n	800f578 <_dtoa_r+0x3d8>
 800f524:	2502      	movs	r5, #2
 800f526:	e7f2      	b.n	800f50e <_dtoa_r+0x36e>
 800f528:	07f9      	lsls	r1, r7, #31
 800f52a:	d508      	bpl.n	800f53e <_dtoa_r+0x39e>
 800f52c:	ec51 0b18 	vmov	r0, r1, d8
 800f530:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f534:	f7f1 f880 	bl	8000638 <__aeabi_dmul>
 800f538:	ec41 0b18 	vmov	d8, r0, r1
 800f53c:	3501      	adds	r5, #1
 800f53e:	107f      	asrs	r7, r7, #1
 800f540:	3608      	adds	r6, #8
 800f542:	e7e5      	b.n	800f510 <_dtoa_r+0x370>
 800f544:	f000 80a6 	beq.w	800f694 <_dtoa_r+0x4f4>
 800f548:	f1ca 0600 	rsb	r6, sl, #0
 800f54c:	4ba5      	ldr	r3, [pc, #660]	; (800f7e4 <_dtoa_r+0x644>)
 800f54e:	4fa6      	ldr	r7, [pc, #664]	; (800f7e8 <_dtoa_r+0x648>)
 800f550:	f006 020f 	and.w	r2, r6, #15
 800f554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f560:	f7f1 f86a 	bl	8000638 <__aeabi_dmul>
 800f564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f568:	1136      	asrs	r6, r6, #4
 800f56a:	2300      	movs	r3, #0
 800f56c:	2502      	movs	r5, #2
 800f56e:	2e00      	cmp	r6, #0
 800f570:	f040 8085 	bne.w	800f67e <_dtoa_r+0x4de>
 800f574:	2b00      	cmp	r3, #0
 800f576:	d1d2      	bne.n	800f51e <_dtoa_r+0x37e>
 800f578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	f000 808c 	beq.w	800f698 <_dtoa_r+0x4f8>
 800f580:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f584:	4b99      	ldr	r3, [pc, #612]	; (800f7ec <_dtoa_r+0x64c>)
 800f586:	2200      	movs	r2, #0
 800f588:	4630      	mov	r0, r6
 800f58a:	4639      	mov	r1, r7
 800f58c:	f7f1 fac6 	bl	8000b1c <__aeabi_dcmplt>
 800f590:	2800      	cmp	r0, #0
 800f592:	f000 8081 	beq.w	800f698 <_dtoa_r+0x4f8>
 800f596:	9b01      	ldr	r3, [sp, #4]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d07d      	beq.n	800f698 <_dtoa_r+0x4f8>
 800f59c:	f1b9 0f00 	cmp.w	r9, #0
 800f5a0:	dd3c      	ble.n	800f61c <_dtoa_r+0x47c>
 800f5a2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f5a6:	9307      	str	r3, [sp, #28]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	4b91      	ldr	r3, [pc, #580]	; (800f7f0 <_dtoa_r+0x650>)
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	4639      	mov	r1, r7
 800f5b0:	f7f1 f842 	bl	8000638 <__aeabi_dmul>
 800f5b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5b8:	3501      	adds	r5, #1
 800f5ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f5be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f5c2:	4628      	mov	r0, r5
 800f5c4:	f7f0 ffce 	bl	8000564 <__aeabi_i2d>
 800f5c8:	4632      	mov	r2, r6
 800f5ca:	463b      	mov	r3, r7
 800f5cc:	f7f1 f834 	bl	8000638 <__aeabi_dmul>
 800f5d0:	4b88      	ldr	r3, [pc, #544]	; (800f7f4 <_dtoa_r+0x654>)
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	f7f0 fe7a 	bl	80002cc <__adddf3>
 800f5d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f5dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5e0:	9303      	str	r3, [sp, #12]
 800f5e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d15c      	bne.n	800f6a2 <_dtoa_r+0x502>
 800f5e8:	4b83      	ldr	r3, [pc, #524]	; (800f7f8 <_dtoa_r+0x658>)
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	4639      	mov	r1, r7
 800f5f0:	f7f0 fe6a 	bl	80002c8 <__aeabi_dsub>
 800f5f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5f8:	4606      	mov	r6, r0
 800f5fa:	460f      	mov	r7, r1
 800f5fc:	f7f1 faac 	bl	8000b58 <__aeabi_dcmpgt>
 800f600:	2800      	cmp	r0, #0
 800f602:	f040 8296 	bne.w	800fb32 <_dtoa_r+0x992>
 800f606:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f60a:	4630      	mov	r0, r6
 800f60c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f610:	4639      	mov	r1, r7
 800f612:	f7f1 fa83 	bl	8000b1c <__aeabi_dcmplt>
 800f616:	2800      	cmp	r0, #0
 800f618:	f040 8288 	bne.w	800fb2c <_dtoa_r+0x98c>
 800f61c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f620:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f624:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f626:	2b00      	cmp	r3, #0
 800f628:	f2c0 8158 	blt.w	800f8dc <_dtoa_r+0x73c>
 800f62c:	f1ba 0f0e 	cmp.w	sl, #14
 800f630:	f300 8154 	bgt.w	800f8dc <_dtoa_r+0x73c>
 800f634:	4b6b      	ldr	r3, [pc, #428]	; (800f7e4 <_dtoa_r+0x644>)
 800f636:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f63a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f640:	2b00      	cmp	r3, #0
 800f642:	f280 80e3 	bge.w	800f80c <_dtoa_r+0x66c>
 800f646:	9b01      	ldr	r3, [sp, #4]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	f300 80df 	bgt.w	800f80c <_dtoa_r+0x66c>
 800f64e:	f040 826d 	bne.w	800fb2c <_dtoa_r+0x98c>
 800f652:	4b69      	ldr	r3, [pc, #420]	; (800f7f8 <_dtoa_r+0x658>)
 800f654:	2200      	movs	r2, #0
 800f656:	4640      	mov	r0, r8
 800f658:	4649      	mov	r1, r9
 800f65a:	f7f0 ffed 	bl	8000638 <__aeabi_dmul>
 800f65e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f662:	f7f1 fa6f 	bl	8000b44 <__aeabi_dcmpge>
 800f666:	9e01      	ldr	r6, [sp, #4]
 800f668:	4637      	mov	r7, r6
 800f66a:	2800      	cmp	r0, #0
 800f66c:	f040 8243 	bne.w	800faf6 <_dtoa_r+0x956>
 800f670:	9d00      	ldr	r5, [sp, #0]
 800f672:	2331      	movs	r3, #49	; 0x31
 800f674:	f805 3b01 	strb.w	r3, [r5], #1
 800f678:	f10a 0a01 	add.w	sl, sl, #1
 800f67c:	e23f      	b.n	800fafe <_dtoa_r+0x95e>
 800f67e:	07f2      	lsls	r2, r6, #31
 800f680:	d505      	bpl.n	800f68e <_dtoa_r+0x4ee>
 800f682:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f686:	f7f0 ffd7 	bl	8000638 <__aeabi_dmul>
 800f68a:	3501      	adds	r5, #1
 800f68c:	2301      	movs	r3, #1
 800f68e:	1076      	asrs	r6, r6, #1
 800f690:	3708      	adds	r7, #8
 800f692:	e76c      	b.n	800f56e <_dtoa_r+0x3ce>
 800f694:	2502      	movs	r5, #2
 800f696:	e76f      	b.n	800f578 <_dtoa_r+0x3d8>
 800f698:	9b01      	ldr	r3, [sp, #4]
 800f69a:	f8cd a01c 	str.w	sl, [sp, #28]
 800f69e:	930c      	str	r3, [sp, #48]	; 0x30
 800f6a0:	e78d      	b.n	800f5be <_dtoa_r+0x41e>
 800f6a2:	9900      	ldr	r1, [sp, #0]
 800f6a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f6a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6a8:	4b4e      	ldr	r3, [pc, #312]	; (800f7e4 <_dtoa_r+0x644>)
 800f6aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f6ae:	4401      	add	r1, r0
 800f6b0:	9102      	str	r1, [sp, #8]
 800f6b2:	9908      	ldr	r1, [sp, #32]
 800f6b4:	eeb0 8a47 	vmov.f32	s16, s14
 800f6b8:	eef0 8a67 	vmov.f32	s17, s15
 800f6bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f6c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f6c4:	2900      	cmp	r1, #0
 800f6c6:	d045      	beq.n	800f754 <_dtoa_r+0x5b4>
 800f6c8:	494c      	ldr	r1, [pc, #304]	; (800f7fc <_dtoa_r+0x65c>)
 800f6ca:	2000      	movs	r0, #0
 800f6cc:	f7f1 f8de 	bl	800088c <__aeabi_ddiv>
 800f6d0:	ec53 2b18 	vmov	r2, r3, d8
 800f6d4:	f7f0 fdf8 	bl	80002c8 <__aeabi_dsub>
 800f6d8:	9d00      	ldr	r5, [sp, #0]
 800f6da:	ec41 0b18 	vmov	d8, r0, r1
 800f6de:	4639      	mov	r1, r7
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	f7f1 fa59 	bl	8000b98 <__aeabi_d2iz>
 800f6e6:	900c      	str	r0, [sp, #48]	; 0x30
 800f6e8:	f7f0 ff3c 	bl	8000564 <__aeabi_i2d>
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	4630      	mov	r0, r6
 800f6f2:	4639      	mov	r1, r7
 800f6f4:	f7f0 fde8 	bl	80002c8 <__aeabi_dsub>
 800f6f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6fa:	3330      	adds	r3, #48	; 0x30
 800f6fc:	f805 3b01 	strb.w	r3, [r5], #1
 800f700:	ec53 2b18 	vmov	r2, r3, d8
 800f704:	4606      	mov	r6, r0
 800f706:	460f      	mov	r7, r1
 800f708:	f7f1 fa08 	bl	8000b1c <__aeabi_dcmplt>
 800f70c:	2800      	cmp	r0, #0
 800f70e:	d165      	bne.n	800f7dc <_dtoa_r+0x63c>
 800f710:	4632      	mov	r2, r6
 800f712:	463b      	mov	r3, r7
 800f714:	4935      	ldr	r1, [pc, #212]	; (800f7ec <_dtoa_r+0x64c>)
 800f716:	2000      	movs	r0, #0
 800f718:	f7f0 fdd6 	bl	80002c8 <__aeabi_dsub>
 800f71c:	ec53 2b18 	vmov	r2, r3, d8
 800f720:	f7f1 f9fc 	bl	8000b1c <__aeabi_dcmplt>
 800f724:	2800      	cmp	r0, #0
 800f726:	f040 80b9 	bne.w	800f89c <_dtoa_r+0x6fc>
 800f72a:	9b02      	ldr	r3, [sp, #8]
 800f72c:	429d      	cmp	r5, r3
 800f72e:	f43f af75 	beq.w	800f61c <_dtoa_r+0x47c>
 800f732:	4b2f      	ldr	r3, [pc, #188]	; (800f7f0 <_dtoa_r+0x650>)
 800f734:	ec51 0b18 	vmov	r0, r1, d8
 800f738:	2200      	movs	r2, #0
 800f73a:	f7f0 ff7d 	bl	8000638 <__aeabi_dmul>
 800f73e:	4b2c      	ldr	r3, [pc, #176]	; (800f7f0 <_dtoa_r+0x650>)
 800f740:	ec41 0b18 	vmov	d8, r0, r1
 800f744:	2200      	movs	r2, #0
 800f746:	4630      	mov	r0, r6
 800f748:	4639      	mov	r1, r7
 800f74a:	f7f0 ff75 	bl	8000638 <__aeabi_dmul>
 800f74e:	4606      	mov	r6, r0
 800f750:	460f      	mov	r7, r1
 800f752:	e7c4      	b.n	800f6de <_dtoa_r+0x53e>
 800f754:	ec51 0b17 	vmov	r0, r1, d7
 800f758:	f7f0 ff6e 	bl	8000638 <__aeabi_dmul>
 800f75c:	9b02      	ldr	r3, [sp, #8]
 800f75e:	9d00      	ldr	r5, [sp, #0]
 800f760:	930c      	str	r3, [sp, #48]	; 0x30
 800f762:	ec41 0b18 	vmov	d8, r0, r1
 800f766:	4639      	mov	r1, r7
 800f768:	4630      	mov	r0, r6
 800f76a:	f7f1 fa15 	bl	8000b98 <__aeabi_d2iz>
 800f76e:	9011      	str	r0, [sp, #68]	; 0x44
 800f770:	f7f0 fef8 	bl	8000564 <__aeabi_i2d>
 800f774:	4602      	mov	r2, r0
 800f776:	460b      	mov	r3, r1
 800f778:	4630      	mov	r0, r6
 800f77a:	4639      	mov	r1, r7
 800f77c:	f7f0 fda4 	bl	80002c8 <__aeabi_dsub>
 800f780:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f782:	3330      	adds	r3, #48	; 0x30
 800f784:	f805 3b01 	strb.w	r3, [r5], #1
 800f788:	9b02      	ldr	r3, [sp, #8]
 800f78a:	429d      	cmp	r5, r3
 800f78c:	4606      	mov	r6, r0
 800f78e:	460f      	mov	r7, r1
 800f790:	f04f 0200 	mov.w	r2, #0
 800f794:	d134      	bne.n	800f800 <_dtoa_r+0x660>
 800f796:	4b19      	ldr	r3, [pc, #100]	; (800f7fc <_dtoa_r+0x65c>)
 800f798:	ec51 0b18 	vmov	r0, r1, d8
 800f79c:	f7f0 fd96 	bl	80002cc <__adddf3>
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	460b      	mov	r3, r1
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	4639      	mov	r1, r7
 800f7a8:	f7f1 f9d6 	bl	8000b58 <__aeabi_dcmpgt>
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	d175      	bne.n	800f89c <_dtoa_r+0x6fc>
 800f7b0:	ec53 2b18 	vmov	r2, r3, d8
 800f7b4:	4911      	ldr	r1, [pc, #68]	; (800f7fc <_dtoa_r+0x65c>)
 800f7b6:	2000      	movs	r0, #0
 800f7b8:	f7f0 fd86 	bl	80002c8 <__aeabi_dsub>
 800f7bc:	4602      	mov	r2, r0
 800f7be:	460b      	mov	r3, r1
 800f7c0:	4630      	mov	r0, r6
 800f7c2:	4639      	mov	r1, r7
 800f7c4:	f7f1 f9aa 	bl	8000b1c <__aeabi_dcmplt>
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	f43f af27 	beq.w	800f61c <_dtoa_r+0x47c>
 800f7ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f7d0:	1e6b      	subs	r3, r5, #1
 800f7d2:	930c      	str	r3, [sp, #48]	; 0x30
 800f7d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f7d8:	2b30      	cmp	r3, #48	; 0x30
 800f7da:	d0f8      	beq.n	800f7ce <_dtoa_r+0x62e>
 800f7dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f7e0:	e04a      	b.n	800f878 <_dtoa_r+0x6d8>
 800f7e2:	bf00      	nop
 800f7e4:	08013fb0 	.word	0x08013fb0
 800f7e8:	08013f88 	.word	0x08013f88
 800f7ec:	3ff00000 	.word	0x3ff00000
 800f7f0:	40240000 	.word	0x40240000
 800f7f4:	401c0000 	.word	0x401c0000
 800f7f8:	40140000 	.word	0x40140000
 800f7fc:	3fe00000 	.word	0x3fe00000
 800f800:	4baf      	ldr	r3, [pc, #700]	; (800fac0 <_dtoa_r+0x920>)
 800f802:	f7f0 ff19 	bl	8000638 <__aeabi_dmul>
 800f806:	4606      	mov	r6, r0
 800f808:	460f      	mov	r7, r1
 800f80a:	e7ac      	b.n	800f766 <_dtoa_r+0x5c6>
 800f80c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f810:	9d00      	ldr	r5, [sp, #0]
 800f812:	4642      	mov	r2, r8
 800f814:	464b      	mov	r3, r9
 800f816:	4630      	mov	r0, r6
 800f818:	4639      	mov	r1, r7
 800f81a:	f7f1 f837 	bl	800088c <__aeabi_ddiv>
 800f81e:	f7f1 f9bb 	bl	8000b98 <__aeabi_d2iz>
 800f822:	9002      	str	r0, [sp, #8]
 800f824:	f7f0 fe9e 	bl	8000564 <__aeabi_i2d>
 800f828:	4642      	mov	r2, r8
 800f82a:	464b      	mov	r3, r9
 800f82c:	f7f0 ff04 	bl	8000638 <__aeabi_dmul>
 800f830:	4602      	mov	r2, r0
 800f832:	460b      	mov	r3, r1
 800f834:	4630      	mov	r0, r6
 800f836:	4639      	mov	r1, r7
 800f838:	f7f0 fd46 	bl	80002c8 <__aeabi_dsub>
 800f83c:	9e02      	ldr	r6, [sp, #8]
 800f83e:	9f01      	ldr	r7, [sp, #4]
 800f840:	3630      	adds	r6, #48	; 0x30
 800f842:	f805 6b01 	strb.w	r6, [r5], #1
 800f846:	9e00      	ldr	r6, [sp, #0]
 800f848:	1bae      	subs	r6, r5, r6
 800f84a:	42b7      	cmp	r7, r6
 800f84c:	4602      	mov	r2, r0
 800f84e:	460b      	mov	r3, r1
 800f850:	d137      	bne.n	800f8c2 <_dtoa_r+0x722>
 800f852:	f7f0 fd3b 	bl	80002cc <__adddf3>
 800f856:	4642      	mov	r2, r8
 800f858:	464b      	mov	r3, r9
 800f85a:	4606      	mov	r6, r0
 800f85c:	460f      	mov	r7, r1
 800f85e:	f7f1 f97b 	bl	8000b58 <__aeabi_dcmpgt>
 800f862:	b9c8      	cbnz	r0, 800f898 <_dtoa_r+0x6f8>
 800f864:	4642      	mov	r2, r8
 800f866:	464b      	mov	r3, r9
 800f868:	4630      	mov	r0, r6
 800f86a:	4639      	mov	r1, r7
 800f86c:	f7f1 f94c 	bl	8000b08 <__aeabi_dcmpeq>
 800f870:	b110      	cbz	r0, 800f878 <_dtoa_r+0x6d8>
 800f872:	9b02      	ldr	r3, [sp, #8]
 800f874:	07d9      	lsls	r1, r3, #31
 800f876:	d40f      	bmi.n	800f898 <_dtoa_r+0x6f8>
 800f878:	4620      	mov	r0, r4
 800f87a:	4659      	mov	r1, fp
 800f87c:	f001 f86c 	bl	8010958 <_Bfree>
 800f880:	2300      	movs	r3, #0
 800f882:	702b      	strb	r3, [r5, #0]
 800f884:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f886:	f10a 0001 	add.w	r0, sl, #1
 800f88a:	6018      	str	r0, [r3, #0]
 800f88c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f43f acd8 	beq.w	800f244 <_dtoa_r+0xa4>
 800f894:	601d      	str	r5, [r3, #0]
 800f896:	e4d5      	b.n	800f244 <_dtoa_r+0xa4>
 800f898:	f8cd a01c 	str.w	sl, [sp, #28]
 800f89c:	462b      	mov	r3, r5
 800f89e:	461d      	mov	r5, r3
 800f8a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f8a4:	2a39      	cmp	r2, #57	; 0x39
 800f8a6:	d108      	bne.n	800f8ba <_dtoa_r+0x71a>
 800f8a8:	9a00      	ldr	r2, [sp, #0]
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d1f7      	bne.n	800f89e <_dtoa_r+0x6fe>
 800f8ae:	9a07      	ldr	r2, [sp, #28]
 800f8b0:	9900      	ldr	r1, [sp, #0]
 800f8b2:	3201      	adds	r2, #1
 800f8b4:	9207      	str	r2, [sp, #28]
 800f8b6:	2230      	movs	r2, #48	; 0x30
 800f8b8:	700a      	strb	r2, [r1, #0]
 800f8ba:	781a      	ldrb	r2, [r3, #0]
 800f8bc:	3201      	adds	r2, #1
 800f8be:	701a      	strb	r2, [r3, #0]
 800f8c0:	e78c      	b.n	800f7dc <_dtoa_r+0x63c>
 800f8c2:	4b7f      	ldr	r3, [pc, #508]	; (800fac0 <_dtoa_r+0x920>)
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	f7f0 feb7 	bl	8000638 <__aeabi_dmul>
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	4606      	mov	r6, r0
 800f8d0:	460f      	mov	r7, r1
 800f8d2:	f7f1 f919 	bl	8000b08 <__aeabi_dcmpeq>
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	d09b      	beq.n	800f812 <_dtoa_r+0x672>
 800f8da:	e7cd      	b.n	800f878 <_dtoa_r+0x6d8>
 800f8dc:	9a08      	ldr	r2, [sp, #32]
 800f8de:	2a00      	cmp	r2, #0
 800f8e0:	f000 80c4 	beq.w	800fa6c <_dtoa_r+0x8cc>
 800f8e4:	9a05      	ldr	r2, [sp, #20]
 800f8e6:	2a01      	cmp	r2, #1
 800f8e8:	f300 80a8 	bgt.w	800fa3c <_dtoa_r+0x89c>
 800f8ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f8ee:	2a00      	cmp	r2, #0
 800f8f0:	f000 80a0 	beq.w	800fa34 <_dtoa_r+0x894>
 800f8f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f8f8:	9e06      	ldr	r6, [sp, #24]
 800f8fa:	4645      	mov	r5, r8
 800f8fc:	9a04      	ldr	r2, [sp, #16]
 800f8fe:	2101      	movs	r1, #1
 800f900:	441a      	add	r2, r3
 800f902:	4620      	mov	r0, r4
 800f904:	4498      	add	r8, r3
 800f906:	9204      	str	r2, [sp, #16]
 800f908:	f001 f92c 	bl	8010b64 <__i2b>
 800f90c:	4607      	mov	r7, r0
 800f90e:	2d00      	cmp	r5, #0
 800f910:	dd0b      	ble.n	800f92a <_dtoa_r+0x78a>
 800f912:	9b04      	ldr	r3, [sp, #16]
 800f914:	2b00      	cmp	r3, #0
 800f916:	dd08      	ble.n	800f92a <_dtoa_r+0x78a>
 800f918:	42ab      	cmp	r3, r5
 800f91a:	9a04      	ldr	r2, [sp, #16]
 800f91c:	bfa8      	it	ge
 800f91e:	462b      	movge	r3, r5
 800f920:	eba8 0803 	sub.w	r8, r8, r3
 800f924:	1aed      	subs	r5, r5, r3
 800f926:	1ad3      	subs	r3, r2, r3
 800f928:	9304      	str	r3, [sp, #16]
 800f92a:	9b06      	ldr	r3, [sp, #24]
 800f92c:	b1fb      	cbz	r3, 800f96e <_dtoa_r+0x7ce>
 800f92e:	9b08      	ldr	r3, [sp, #32]
 800f930:	2b00      	cmp	r3, #0
 800f932:	f000 809f 	beq.w	800fa74 <_dtoa_r+0x8d4>
 800f936:	2e00      	cmp	r6, #0
 800f938:	dd11      	ble.n	800f95e <_dtoa_r+0x7be>
 800f93a:	4639      	mov	r1, r7
 800f93c:	4632      	mov	r2, r6
 800f93e:	4620      	mov	r0, r4
 800f940:	f001 f9cc 	bl	8010cdc <__pow5mult>
 800f944:	465a      	mov	r2, fp
 800f946:	4601      	mov	r1, r0
 800f948:	4607      	mov	r7, r0
 800f94a:	4620      	mov	r0, r4
 800f94c:	f001 f920 	bl	8010b90 <__multiply>
 800f950:	4659      	mov	r1, fp
 800f952:	9007      	str	r0, [sp, #28]
 800f954:	4620      	mov	r0, r4
 800f956:	f000 ffff 	bl	8010958 <_Bfree>
 800f95a:	9b07      	ldr	r3, [sp, #28]
 800f95c:	469b      	mov	fp, r3
 800f95e:	9b06      	ldr	r3, [sp, #24]
 800f960:	1b9a      	subs	r2, r3, r6
 800f962:	d004      	beq.n	800f96e <_dtoa_r+0x7ce>
 800f964:	4659      	mov	r1, fp
 800f966:	4620      	mov	r0, r4
 800f968:	f001 f9b8 	bl	8010cdc <__pow5mult>
 800f96c:	4683      	mov	fp, r0
 800f96e:	2101      	movs	r1, #1
 800f970:	4620      	mov	r0, r4
 800f972:	f001 f8f7 	bl	8010b64 <__i2b>
 800f976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f978:	2b00      	cmp	r3, #0
 800f97a:	4606      	mov	r6, r0
 800f97c:	dd7c      	ble.n	800fa78 <_dtoa_r+0x8d8>
 800f97e:	461a      	mov	r2, r3
 800f980:	4601      	mov	r1, r0
 800f982:	4620      	mov	r0, r4
 800f984:	f001 f9aa 	bl	8010cdc <__pow5mult>
 800f988:	9b05      	ldr	r3, [sp, #20]
 800f98a:	2b01      	cmp	r3, #1
 800f98c:	4606      	mov	r6, r0
 800f98e:	dd76      	ble.n	800fa7e <_dtoa_r+0x8de>
 800f990:	2300      	movs	r3, #0
 800f992:	9306      	str	r3, [sp, #24]
 800f994:	6933      	ldr	r3, [r6, #16]
 800f996:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f99a:	6918      	ldr	r0, [r3, #16]
 800f99c:	f001 f892 	bl	8010ac4 <__hi0bits>
 800f9a0:	f1c0 0020 	rsb	r0, r0, #32
 800f9a4:	9b04      	ldr	r3, [sp, #16]
 800f9a6:	4418      	add	r0, r3
 800f9a8:	f010 001f 	ands.w	r0, r0, #31
 800f9ac:	f000 8086 	beq.w	800fabc <_dtoa_r+0x91c>
 800f9b0:	f1c0 0320 	rsb	r3, r0, #32
 800f9b4:	2b04      	cmp	r3, #4
 800f9b6:	dd7f      	ble.n	800fab8 <_dtoa_r+0x918>
 800f9b8:	f1c0 001c 	rsb	r0, r0, #28
 800f9bc:	9b04      	ldr	r3, [sp, #16]
 800f9be:	4403      	add	r3, r0
 800f9c0:	4480      	add	r8, r0
 800f9c2:	4405      	add	r5, r0
 800f9c4:	9304      	str	r3, [sp, #16]
 800f9c6:	f1b8 0f00 	cmp.w	r8, #0
 800f9ca:	dd05      	ble.n	800f9d8 <_dtoa_r+0x838>
 800f9cc:	4659      	mov	r1, fp
 800f9ce:	4642      	mov	r2, r8
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	f001 f9dd 	bl	8010d90 <__lshift>
 800f9d6:	4683      	mov	fp, r0
 800f9d8:	9b04      	ldr	r3, [sp, #16]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	dd05      	ble.n	800f9ea <_dtoa_r+0x84a>
 800f9de:	4631      	mov	r1, r6
 800f9e0:	461a      	mov	r2, r3
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	f001 f9d4 	bl	8010d90 <__lshift>
 800f9e8:	4606      	mov	r6, r0
 800f9ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d069      	beq.n	800fac4 <_dtoa_r+0x924>
 800f9f0:	4631      	mov	r1, r6
 800f9f2:	4658      	mov	r0, fp
 800f9f4:	f001 fa38 	bl	8010e68 <__mcmp>
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	da63      	bge.n	800fac4 <_dtoa_r+0x924>
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	4659      	mov	r1, fp
 800fa00:	220a      	movs	r2, #10
 800fa02:	4620      	mov	r0, r4
 800fa04:	f000 ffca 	bl	801099c <__multadd>
 800fa08:	9b08      	ldr	r3, [sp, #32]
 800fa0a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fa0e:	4683      	mov	fp, r0
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	f000 818f 	beq.w	800fd34 <_dtoa_r+0xb94>
 800fa16:	4639      	mov	r1, r7
 800fa18:	2300      	movs	r3, #0
 800fa1a:	220a      	movs	r2, #10
 800fa1c:	4620      	mov	r0, r4
 800fa1e:	f000 ffbd 	bl	801099c <__multadd>
 800fa22:	f1b9 0f00 	cmp.w	r9, #0
 800fa26:	4607      	mov	r7, r0
 800fa28:	f300 808e 	bgt.w	800fb48 <_dtoa_r+0x9a8>
 800fa2c:	9b05      	ldr	r3, [sp, #20]
 800fa2e:	2b02      	cmp	r3, #2
 800fa30:	dc50      	bgt.n	800fad4 <_dtoa_r+0x934>
 800fa32:	e089      	b.n	800fb48 <_dtoa_r+0x9a8>
 800fa34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fa36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fa3a:	e75d      	b.n	800f8f8 <_dtoa_r+0x758>
 800fa3c:	9b01      	ldr	r3, [sp, #4]
 800fa3e:	1e5e      	subs	r6, r3, #1
 800fa40:	9b06      	ldr	r3, [sp, #24]
 800fa42:	42b3      	cmp	r3, r6
 800fa44:	bfbf      	itttt	lt
 800fa46:	9b06      	ldrlt	r3, [sp, #24]
 800fa48:	9606      	strlt	r6, [sp, #24]
 800fa4a:	1af2      	sublt	r2, r6, r3
 800fa4c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fa4e:	bfb6      	itet	lt
 800fa50:	189b      	addlt	r3, r3, r2
 800fa52:	1b9e      	subge	r6, r3, r6
 800fa54:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fa56:	9b01      	ldr	r3, [sp, #4]
 800fa58:	bfb8      	it	lt
 800fa5a:	2600      	movlt	r6, #0
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	bfb5      	itete	lt
 800fa60:	eba8 0503 	sublt.w	r5, r8, r3
 800fa64:	9b01      	ldrge	r3, [sp, #4]
 800fa66:	2300      	movlt	r3, #0
 800fa68:	4645      	movge	r5, r8
 800fa6a:	e747      	b.n	800f8fc <_dtoa_r+0x75c>
 800fa6c:	9e06      	ldr	r6, [sp, #24]
 800fa6e:	9f08      	ldr	r7, [sp, #32]
 800fa70:	4645      	mov	r5, r8
 800fa72:	e74c      	b.n	800f90e <_dtoa_r+0x76e>
 800fa74:	9a06      	ldr	r2, [sp, #24]
 800fa76:	e775      	b.n	800f964 <_dtoa_r+0x7c4>
 800fa78:	9b05      	ldr	r3, [sp, #20]
 800fa7a:	2b01      	cmp	r3, #1
 800fa7c:	dc18      	bgt.n	800fab0 <_dtoa_r+0x910>
 800fa7e:	9b02      	ldr	r3, [sp, #8]
 800fa80:	b9b3      	cbnz	r3, 800fab0 <_dtoa_r+0x910>
 800fa82:	9b03      	ldr	r3, [sp, #12]
 800fa84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa88:	b9a3      	cbnz	r3, 800fab4 <_dtoa_r+0x914>
 800fa8a:	9b03      	ldr	r3, [sp, #12]
 800fa8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa90:	0d1b      	lsrs	r3, r3, #20
 800fa92:	051b      	lsls	r3, r3, #20
 800fa94:	b12b      	cbz	r3, 800faa2 <_dtoa_r+0x902>
 800fa96:	9b04      	ldr	r3, [sp, #16]
 800fa98:	3301      	adds	r3, #1
 800fa9a:	9304      	str	r3, [sp, #16]
 800fa9c:	f108 0801 	add.w	r8, r8, #1
 800faa0:	2301      	movs	r3, #1
 800faa2:	9306      	str	r3, [sp, #24]
 800faa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	f47f af74 	bne.w	800f994 <_dtoa_r+0x7f4>
 800faac:	2001      	movs	r0, #1
 800faae:	e779      	b.n	800f9a4 <_dtoa_r+0x804>
 800fab0:	2300      	movs	r3, #0
 800fab2:	e7f6      	b.n	800faa2 <_dtoa_r+0x902>
 800fab4:	9b02      	ldr	r3, [sp, #8]
 800fab6:	e7f4      	b.n	800faa2 <_dtoa_r+0x902>
 800fab8:	d085      	beq.n	800f9c6 <_dtoa_r+0x826>
 800faba:	4618      	mov	r0, r3
 800fabc:	301c      	adds	r0, #28
 800fabe:	e77d      	b.n	800f9bc <_dtoa_r+0x81c>
 800fac0:	40240000 	.word	0x40240000
 800fac4:	9b01      	ldr	r3, [sp, #4]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	dc38      	bgt.n	800fb3c <_dtoa_r+0x99c>
 800faca:	9b05      	ldr	r3, [sp, #20]
 800facc:	2b02      	cmp	r3, #2
 800face:	dd35      	ble.n	800fb3c <_dtoa_r+0x99c>
 800fad0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fad4:	f1b9 0f00 	cmp.w	r9, #0
 800fad8:	d10d      	bne.n	800faf6 <_dtoa_r+0x956>
 800fada:	4631      	mov	r1, r6
 800fadc:	464b      	mov	r3, r9
 800fade:	2205      	movs	r2, #5
 800fae0:	4620      	mov	r0, r4
 800fae2:	f000 ff5b 	bl	801099c <__multadd>
 800fae6:	4601      	mov	r1, r0
 800fae8:	4606      	mov	r6, r0
 800faea:	4658      	mov	r0, fp
 800faec:	f001 f9bc 	bl	8010e68 <__mcmp>
 800faf0:	2800      	cmp	r0, #0
 800faf2:	f73f adbd 	bgt.w	800f670 <_dtoa_r+0x4d0>
 800faf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faf8:	9d00      	ldr	r5, [sp, #0]
 800fafa:	ea6f 0a03 	mvn.w	sl, r3
 800fafe:	f04f 0800 	mov.w	r8, #0
 800fb02:	4631      	mov	r1, r6
 800fb04:	4620      	mov	r0, r4
 800fb06:	f000 ff27 	bl	8010958 <_Bfree>
 800fb0a:	2f00      	cmp	r7, #0
 800fb0c:	f43f aeb4 	beq.w	800f878 <_dtoa_r+0x6d8>
 800fb10:	f1b8 0f00 	cmp.w	r8, #0
 800fb14:	d005      	beq.n	800fb22 <_dtoa_r+0x982>
 800fb16:	45b8      	cmp	r8, r7
 800fb18:	d003      	beq.n	800fb22 <_dtoa_r+0x982>
 800fb1a:	4641      	mov	r1, r8
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	f000 ff1b 	bl	8010958 <_Bfree>
 800fb22:	4639      	mov	r1, r7
 800fb24:	4620      	mov	r0, r4
 800fb26:	f000 ff17 	bl	8010958 <_Bfree>
 800fb2a:	e6a5      	b.n	800f878 <_dtoa_r+0x6d8>
 800fb2c:	2600      	movs	r6, #0
 800fb2e:	4637      	mov	r7, r6
 800fb30:	e7e1      	b.n	800faf6 <_dtoa_r+0x956>
 800fb32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fb34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fb38:	4637      	mov	r7, r6
 800fb3a:	e599      	b.n	800f670 <_dtoa_r+0x4d0>
 800fb3c:	9b08      	ldr	r3, [sp, #32]
 800fb3e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	f000 80fd 	beq.w	800fd42 <_dtoa_r+0xba2>
 800fb48:	2d00      	cmp	r5, #0
 800fb4a:	dd05      	ble.n	800fb58 <_dtoa_r+0x9b8>
 800fb4c:	4639      	mov	r1, r7
 800fb4e:	462a      	mov	r2, r5
 800fb50:	4620      	mov	r0, r4
 800fb52:	f001 f91d 	bl	8010d90 <__lshift>
 800fb56:	4607      	mov	r7, r0
 800fb58:	9b06      	ldr	r3, [sp, #24]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d05c      	beq.n	800fc18 <_dtoa_r+0xa78>
 800fb5e:	6879      	ldr	r1, [r7, #4]
 800fb60:	4620      	mov	r0, r4
 800fb62:	f000 feb9 	bl	80108d8 <_Balloc>
 800fb66:	4605      	mov	r5, r0
 800fb68:	b928      	cbnz	r0, 800fb76 <_dtoa_r+0x9d6>
 800fb6a:	4b80      	ldr	r3, [pc, #512]	; (800fd6c <_dtoa_r+0xbcc>)
 800fb6c:	4602      	mov	r2, r0
 800fb6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fb72:	f7ff bb2e 	b.w	800f1d2 <_dtoa_r+0x32>
 800fb76:	693a      	ldr	r2, [r7, #16]
 800fb78:	3202      	adds	r2, #2
 800fb7a:	0092      	lsls	r2, r2, #2
 800fb7c:	f107 010c 	add.w	r1, r7, #12
 800fb80:	300c      	adds	r0, #12
 800fb82:	f7fd fb7d 	bl	800d280 <memcpy>
 800fb86:	2201      	movs	r2, #1
 800fb88:	4629      	mov	r1, r5
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	f001 f900 	bl	8010d90 <__lshift>
 800fb90:	9b00      	ldr	r3, [sp, #0]
 800fb92:	3301      	adds	r3, #1
 800fb94:	9301      	str	r3, [sp, #4]
 800fb96:	9b00      	ldr	r3, [sp, #0]
 800fb98:	444b      	add	r3, r9
 800fb9a:	9307      	str	r3, [sp, #28]
 800fb9c:	9b02      	ldr	r3, [sp, #8]
 800fb9e:	f003 0301 	and.w	r3, r3, #1
 800fba2:	46b8      	mov	r8, r7
 800fba4:	9306      	str	r3, [sp, #24]
 800fba6:	4607      	mov	r7, r0
 800fba8:	9b01      	ldr	r3, [sp, #4]
 800fbaa:	4631      	mov	r1, r6
 800fbac:	3b01      	subs	r3, #1
 800fbae:	4658      	mov	r0, fp
 800fbb0:	9302      	str	r3, [sp, #8]
 800fbb2:	f7ff fa67 	bl	800f084 <quorem>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	3330      	adds	r3, #48	; 0x30
 800fbba:	9004      	str	r0, [sp, #16]
 800fbbc:	4641      	mov	r1, r8
 800fbbe:	4658      	mov	r0, fp
 800fbc0:	9308      	str	r3, [sp, #32]
 800fbc2:	f001 f951 	bl	8010e68 <__mcmp>
 800fbc6:	463a      	mov	r2, r7
 800fbc8:	4681      	mov	r9, r0
 800fbca:	4631      	mov	r1, r6
 800fbcc:	4620      	mov	r0, r4
 800fbce:	f001 f967 	bl	8010ea0 <__mdiff>
 800fbd2:	68c2      	ldr	r2, [r0, #12]
 800fbd4:	9b08      	ldr	r3, [sp, #32]
 800fbd6:	4605      	mov	r5, r0
 800fbd8:	bb02      	cbnz	r2, 800fc1c <_dtoa_r+0xa7c>
 800fbda:	4601      	mov	r1, r0
 800fbdc:	4658      	mov	r0, fp
 800fbde:	f001 f943 	bl	8010e68 <__mcmp>
 800fbe2:	9b08      	ldr	r3, [sp, #32]
 800fbe4:	4602      	mov	r2, r0
 800fbe6:	4629      	mov	r1, r5
 800fbe8:	4620      	mov	r0, r4
 800fbea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fbee:	f000 feb3 	bl	8010958 <_Bfree>
 800fbf2:	9b05      	ldr	r3, [sp, #20]
 800fbf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbf6:	9d01      	ldr	r5, [sp, #4]
 800fbf8:	ea43 0102 	orr.w	r1, r3, r2
 800fbfc:	9b06      	ldr	r3, [sp, #24]
 800fbfe:	430b      	orrs	r3, r1
 800fc00:	9b08      	ldr	r3, [sp, #32]
 800fc02:	d10d      	bne.n	800fc20 <_dtoa_r+0xa80>
 800fc04:	2b39      	cmp	r3, #57	; 0x39
 800fc06:	d029      	beq.n	800fc5c <_dtoa_r+0xabc>
 800fc08:	f1b9 0f00 	cmp.w	r9, #0
 800fc0c:	dd01      	ble.n	800fc12 <_dtoa_r+0xa72>
 800fc0e:	9b04      	ldr	r3, [sp, #16]
 800fc10:	3331      	adds	r3, #49	; 0x31
 800fc12:	9a02      	ldr	r2, [sp, #8]
 800fc14:	7013      	strb	r3, [r2, #0]
 800fc16:	e774      	b.n	800fb02 <_dtoa_r+0x962>
 800fc18:	4638      	mov	r0, r7
 800fc1a:	e7b9      	b.n	800fb90 <_dtoa_r+0x9f0>
 800fc1c:	2201      	movs	r2, #1
 800fc1e:	e7e2      	b.n	800fbe6 <_dtoa_r+0xa46>
 800fc20:	f1b9 0f00 	cmp.w	r9, #0
 800fc24:	db06      	blt.n	800fc34 <_dtoa_r+0xa94>
 800fc26:	9905      	ldr	r1, [sp, #20]
 800fc28:	ea41 0909 	orr.w	r9, r1, r9
 800fc2c:	9906      	ldr	r1, [sp, #24]
 800fc2e:	ea59 0101 	orrs.w	r1, r9, r1
 800fc32:	d120      	bne.n	800fc76 <_dtoa_r+0xad6>
 800fc34:	2a00      	cmp	r2, #0
 800fc36:	ddec      	ble.n	800fc12 <_dtoa_r+0xa72>
 800fc38:	4659      	mov	r1, fp
 800fc3a:	2201      	movs	r2, #1
 800fc3c:	4620      	mov	r0, r4
 800fc3e:	9301      	str	r3, [sp, #4]
 800fc40:	f001 f8a6 	bl	8010d90 <__lshift>
 800fc44:	4631      	mov	r1, r6
 800fc46:	4683      	mov	fp, r0
 800fc48:	f001 f90e 	bl	8010e68 <__mcmp>
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	9b01      	ldr	r3, [sp, #4]
 800fc50:	dc02      	bgt.n	800fc58 <_dtoa_r+0xab8>
 800fc52:	d1de      	bne.n	800fc12 <_dtoa_r+0xa72>
 800fc54:	07da      	lsls	r2, r3, #31
 800fc56:	d5dc      	bpl.n	800fc12 <_dtoa_r+0xa72>
 800fc58:	2b39      	cmp	r3, #57	; 0x39
 800fc5a:	d1d8      	bne.n	800fc0e <_dtoa_r+0xa6e>
 800fc5c:	9a02      	ldr	r2, [sp, #8]
 800fc5e:	2339      	movs	r3, #57	; 0x39
 800fc60:	7013      	strb	r3, [r2, #0]
 800fc62:	462b      	mov	r3, r5
 800fc64:	461d      	mov	r5, r3
 800fc66:	3b01      	subs	r3, #1
 800fc68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fc6c:	2a39      	cmp	r2, #57	; 0x39
 800fc6e:	d050      	beq.n	800fd12 <_dtoa_r+0xb72>
 800fc70:	3201      	adds	r2, #1
 800fc72:	701a      	strb	r2, [r3, #0]
 800fc74:	e745      	b.n	800fb02 <_dtoa_r+0x962>
 800fc76:	2a00      	cmp	r2, #0
 800fc78:	dd03      	ble.n	800fc82 <_dtoa_r+0xae2>
 800fc7a:	2b39      	cmp	r3, #57	; 0x39
 800fc7c:	d0ee      	beq.n	800fc5c <_dtoa_r+0xabc>
 800fc7e:	3301      	adds	r3, #1
 800fc80:	e7c7      	b.n	800fc12 <_dtoa_r+0xa72>
 800fc82:	9a01      	ldr	r2, [sp, #4]
 800fc84:	9907      	ldr	r1, [sp, #28]
 800fc86:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fc8a:	428a      	cmp	r2, r1
 800fc8c:	d02a      	beq.n	800fce4 <_dtoa_r+0xb44>
 800fc8e:	4659      	mov	r1, fp
 800fc90:	2300      	movs	r3, #0
 800fc92:	220a      	movs	r2, #10
 800fc94:	4620      	mov	r0, r4
 800fc96:	f000 fe81 	bl	801099c <__multadd>
 800fc9a:	45b8      	cmp	r8, r7
 800fc9c:	4683      	mov	fp, r0
 800fc9e:	f04f 0300 	mov.w	r3, #0
 800fca2:	f04f 020a 	mov.w	r2, #10
 800fca6:	4641      	mov	r1, r8
 800fca8:	4620      	mov	r0, r4
 800fcaa:	d107      	bne.n	800fcbc <_dtoa_r+0xb1c>
 800fcac:	f000 fe76 	bl	801099c <__multadd>
 800fcb0:	4680      	mov	r8, r0
 800fcb2:	4607      	mov	r7, r0
 800fcb4:	9b01      	ldr	r3, [sp, #4]
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	9301      	str	r3, [sp, #4]
 800fcba:	e775      	b.n	800fba8 <_dtoa_r+0xa08>
 800fcbc:	f000 fe6e 	bl	801099c <__multadd>
 800fcc0:	4639      	mov	r1, r7
 800fcc2:	4680      	mov	r8, r0
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	220a      	movs	r2, #10
 800fcc8:	4620      	mov	r0, r4
 800fcca:	f000 fe67 	bl	801099c <__multadd>
 800fcce:	4607      	mov	r7, r0
 800fcd0:	e7f0      	b.n	800fcb4 <_dtoa_r+0xb14>
 800fcd2:	f1b9 0f00 	cmp.w	r9, #0
 800fcd6:	9a00      	ldr	r2, [sp, #0]
 800fcd8:	bfcc      	ite	gt
 800fcda:	464d      	movgt	r5, r9
 800fcdc:	2501      	movle	r5, #1
 800fcde:	4415      	add	r5, r2
 800fce0:	f04f 0800 	mov.w	r8, #0
 800fce4:	4659      	mov	r1, fp
 800fce6:	2201      	movs	r2, #1
 800fce8:	4620      	mov	r0, r4
 800fcea:	9301      	str	r3, [sp, #4]
 800fcec:	f001 f850 	bl	8010d90 <__lshift>
 800fcf0:	4631      	mov	r1, r6
 800fcf2:	4683      	mov	fp, r0
 800fcf4:	f001 f8b8 	bl	8010e68 <__mcmp>
 800fcf8:	2800      	cmp	r0, #0
 800fcfa:	dcb2      	bgt.n	800fc62 <_dtoa_r+0xac2>
 800fcfc:	d102      	bne.n	800fd04 <_dtoa_r+0xb64>
 800fcfe:	9b01      	ldr	r3, [sp, #4]
 800fd00:	07db      	lsls	r3, r3, #31
 800fd02:	d4ae      	bmi.n	800fc62 <_dtoa_r+0xac2>
 800fd04:	462b      	mov	r3, r5
 800fd06:	461d      	mov	r5, r3
 800fd08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd0c:	2a30      	cmp	r2, #48	; 0x30
 800fd0e:	d0fa      	beq.n	800fd06 <_dtoa_r+0xb66>
 800fd10:	e6f7      	b.n	800fb02 <_dtoa_r+0x962>
 800fd12:	9a00      	ldr	r2, [sp, #0]
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d1a5      	bne.n	800fc64 <_dtoa_r+0xac4>
 800fd18:	f10a 0a01 	add.w	sl, sl, #1
 800fd1c:	2331      	movs	r3, #49	; 0x31
 800fd1e:	e779      	b.n	800fc14 <_dtoa_r+0xa74>
 800fd20:	4b13      	ldr	r3, [pc, #76]	; (800fd70 <_dtoa_r+0xbd0>)
 800fd22:	f7ff baaf 	b.w	800f284 <_dtoa_r+0xe4>
 800fd26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	f47f aa86 	bne.w	800f23a <_dtoa_r+0x9a>
 800fd2e:	4b11      	ldr	r3, [pc, #68]	; (800fd74 <_dtoa_r+0xbd4>)
 800fd30:	f7ff baa8 	b.w	800f284 <_dtoa_r+0xe4>
 800fd34:	f1b9 0f00 	cmp.w	r9, #0
 800fd38:	dc03      	bgt.n	800fd42 <_dtoa_r+0xba2>
 800fd3a:	9b05      	ldr	r3, [sp, #20]
 800fd3c:	2b02      	cmp	r3, #2
 800fd3e:	f73f aec9 	bgt.w	800fad4 <_dtoa_r+0x934>
 800fd42:	9d00      	ldr	r5, [sp, #0]
 800fd44:	4631      	mov	r1, r6
 800fd46:	4658      	mov	r0, fp
 800fd48:	f7ff f99c 	bl	800f084 <quorem>
 800fd4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fd50:	f805 3b01 	strb.w	r3, [r5], #1
 800fd54:	9a00      	ldr	r2, [sp, #0]
 800fd56:	1aaa      	subs	r2, r5, r2
 800fd58:	4591      	cmp	r9, r2
 800fd5a:	ddba      	ble.n	800fcd2 <_dtoa_r+0xb32>
 800fd5c:	4659      	mov	r1, fp
 800fd5e:	2300      	movs	r3, #0
 800fd60:	220a      	movs	r2, #10
 800fd62:	4620      	mov	r0, r4
 800fd64:	f000 fe1a 	bl	801099c <__multadd>
 800fd68:	4683      	mov	fp, r0
 800fd6a:	e7eb      	b.n	800fd44 <_dtoa_r+0xba4>
 800fd6c:	08013e34 	.word	0x08013e34
 800fd70:	08013c30 	.word	0x08013c30
 800fd74:	08013db1 	.word	0x08013db1

0800fd78 <__sflush_r>:
 800fd78:	898a      	ldrh	r2, [r1, #12]
 800fd7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd7e:	4605      	mov	r5, r0
 800fd80:	0710      	lsls	r0, r2, #28
 800fd82:	460c      	mov	r4, r1
 800fd84:	d458      	bmi.n	800fe38 <__sflush_r+0xc0>
 800fd86:	684b      	ldr	r3, [r1, #4]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	dc05      	bgt.n	800fd98 <__sflush_r+0x20>
 800fd8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	dc02      	bgt.n	800fd98 <__sflush_r+0x20>
 800fd92:	2000      	movs	r0, #0
 800fd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd9a:	2e00      	cmp	r6, #0
 800fd9c:	d0f9      	beq.n	800fd92 <__sflush_r+0x1a>
 800fd9e:	2300      	movs	r3, #0
 800fda0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fda4:	682f      	ldr	r7, [r5, #0]
 800fda6:	602b      	str	r3, [r5, #0]
 800fda8:	d032      	beq.n	800fe10 <__sflush_r+0x98>
 800fdaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fdac:	89a3      	ldrh	r3, [r4, #12]
 800fdae:	075a      	lsls	r2, r3, #29
 800fdb0:	d505      	bpl.n	800fdbe <__sflush_r+0x46>
 800fdb2:	6863      	ldr	r3, [r4, #4]
 800fdb4:	1ac0      	subs	r0, r0, r3
 800fdb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fdb8:	b10b      	cbz	r3, 800fdbe <__sflush_r+0x46>
 800fdba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fdbc:	1ac0      	subs	r0, r0, r3
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdc4:	6a21      	ldr	r1, [r4, #32]
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	47b0      	blx	r6
 800fdca:	1c43      	adds	r3, r0, #1
 800fdcc:	89a3      	ldrh	r3, [r4, #12]
 800fdce:	d106      	bne.n	800fdde <__sflush_r+0x66>
 800fdd0:	6829      	ldr	r1, [r5, #0]
 800fdd2:	291d      	cmp	r1, #29
 800fdd4:	d82c      	bhi.n	800fe30 <__sflush_r+0xb8>
 800fdd6:	4a2a      	ldr	r2, [pc, #168]	; (800fe80 <__sflush_r+0x108>)
 800fdd8:	40ca      	lsrs	r2, r1
 800fdda:	07d6      	lsls	r6, r2, #31
 800fddc:	d528      	bpl.n	800fe30 <__sflush_r+0xb8>
 800fdde:	2200      	movs	r2, #0
 800fde0:	6062      	str	r2, [r4, #4]
 800fde2:	04d9      	lsls	r1, r3, #19
 800fde4:	6922      	ldr	r2, [r4, #16]
 800fde6:	6022      	str	r2, [r4, #0]
 800fde8:	d504      	bpl.n	800fdf4 <__sflush_r+0x7c>
 800fdea:	1c42      	adds	r2, r0, #1
 800fdec:	d101      	bne.n	800fdf2 <__sflush_r+0x7a>
 800fdee:	682b      	ldr	r3, [r5, #0]
 800fdf0:	b903      	cbnz	r3, 800fdf4 <__sflush_r+0x7c>
 800fdf2:	6560      	str	r0, [r4, #84]	; 0x54
 800fdf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fdf6:	602f      	str	r7, [r5, #0]
 800fdf8:	2900      	cmp	r1, #0
 800fdfa:	d0ca      	beq.n	800fd92 <__sflush_r+0x1a>
 800fdfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe00:	4299      	cmp	r1, r3
 800fe02:	d002      	beq.n	800fe0a <__sflush_r+0x92>
 800fe04:	4628      	mov	r0, r5
 800fe06:	f7fd fa61 	bl	800d2cc <_free_r>
 800fe0a:	2000      	movs	r0, #0
 800fe0c:	6360      	str	r0, [r4, #52]	; 0x34
 800fe0e:	e7c1      	b.n	800fd94 <__sflush_r+0x1c>
 800fe10:	6a21      	ldr	r1, [r4, #32]
 800fe12:	2301      	movs	r3, #1
 800fe14:	4628      	mov	r0, r5
 800fe16:	47b0      	blx	r6
 800fe18:	1c41      	adds	r1, r0, #1
 800fe1a:	d1c7      	bne.n	800fdac <__sflush_r+0x34>
 800fe1c:	682b      	ldr	r3, [r5, #0]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d0c4      	beq.n	800fdac <__sflush_r+0x34>
 800fe22:	2b1d      	cmp	r3, #29
 800fe24:	d001      	beq.n	800fe2a <__sflush_r+0xb2>
 800fe26:	2b16      	cmp	r3, #22
 800fe28:	d101      	bne.n	800fe2e <__sflush_r+0xb6>
 800fe2a:	602f      	str	r7, [r5, #0]
 800fe2c:	e7b1      	b.n	800fd92 <__sflush_r+0x1a>
 800fe2e:	89a3      	ldrh	r3, [r4, #12]
 800fe30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe34:	81a3      	strh	r3, [r4, #12]
 800fe36:	e7ad      	b.n	800fd94 <__sflush_r+0x1c>
 800fe38:	690f      	ldr	r7, [r1, #16]
 800fe3a:	2f00      	cmp	r7, #0
 800fe3c:	d0a9      	beq.n	800fd92 <__sflush_r+0x1a>
 800fe3e:	0793      	lsls	r3, r2, #30
 800fe40:	680e      	ldr	r6, [r1, #0]
 800fe42:	bf08      	it	eq
 800fe44:	694b      	ldreq	r3, [r1, #20]
 800fe46:	600f      	str	r7, [r1, #0]
 800fe48:	bf18      	it	ne
 800fe4a:	2300      	movne	r3, #0
 800fe4c:	eba6 0807 	sub.w	r8, r6, r7
 800fe50:	608b      	str	r3, [r1, #8]
 800fe52:	f1b8 0f00 	cmp.w	r8, #0
 800fe56:	dd9c      	ble.n	800fd92 <__sflush_r+0x1a>
 800fe58:	6a21      	ldr	r1, [r4, #32]
 800fe5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe5c:	4643      	mov	r3, r8
 800fe5e:	463a      	mov	r2, r7
 800fe60:	4628      	mov	r0, r5
 800fe62:	47b0      	blx	r6
 800fe64:	2800      	cmp	r0, #0
 800fe66:	dc06      	bgt.n	800fe76 <__sflush_r+0xfe>
 800fe68:	89a3      	ldrh	r3, [r4, #12]
 800fe6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe6e:	81a3      	strh	r3, [r4, #12]
 800fe70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe74:	e78e      	b.n	800fd94 <__sflush_r+0x1c>
 800fe76:	4407      	add	r7, r0
 800fe78:	eba8 0800 	sub.w	r8, r8, r0
 800fe7c:	e7e9      	b.n	800fe52 <__sflush_r+0xda>
 800fe7e:	bf00      	nop
 800fe80:	20400001 	.word	0x20400001

0800fe84 <_fflush_r>:
 800fe84:	b538      	push	{r3, r4, r5, lr}
 800fe86:	690b      	ldr	r3, [r1, #16]
 800fe88:	4605      	mov	r5, r0
 800fe8a:	460c      	mov	r4, r1
 800fe8c:	b913      	cbnz	r3, 800fe94 <_fflush_r+0x10>
 800fe8e:	2500      	movs	r5, #0
 800fe90:	4628      	mov	r0, r5
 800fe92:	bd38      	pop	{r3, r4, r5, pc}
 800fe94:	b118      	cbz	r0, 800fe9e <_fflush_r+0x1a>
 800fe96:	6983      	ldr	r3, [r0, #24]
 800fe98:	b90b      	cbnz	r3, 800fe9e <_fflush_r+0x1a>
 800fe9a:	f000 f887 	bl	800ffac <__sinit>
 800fe9e:	4b14      	ldr	r3, [pc, #80]	; (800fef0 <_fflush_r+0x6c>)
 800fea0:	429c      	cmp	r4, r3
 800fea2:	d11b      	bne.n	800fedc <_fflush_r+0x58>
 800fea4:	686c      	ldr	r4, [r5, #4]
 800fea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d0ef      	beq.n	800fe8e <_fflush_r+0xa>
 800feae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800feb0:	07d0      	lsls	r0, r2, #31
 800feb2:	d404      	bmi.n	800febe <_fflush_r+0x3a>
 800feb4:	0599      	lsls	r1, r3, #22
 800feb6:	d402      	bmi.n	800febe <_fflush_r+0x3a>
 800feb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800feba:	f000 fc88 	bl	80107ce <__retarget_lock_acquire_recursive>
 800febe:	4628      	mov	r0, r5
 800fec0:	4621      	mov	r1, r4
 800fec2:	f7ff ff59 	bl	800fd78 <__sflush_r>
 800fec6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fec8:	07da      	lsls	r2, r3, #31
 800feca:	4605      	mov	r5, r0
 800fecc:	d4e0      	bmi.n	800fe90 <_fflush_r+0xc>
 800fece:	89a3      	ldrh	r3, [r4, #12]
 800fed0:	059b      	lsls	r3, r3, #22
 800fed2:	d4dd      	bmi.n	800fe90 <_fflush_r+0xc>
 800fed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fed6:	f000 fc7b 	bl	80107d0 <__retarget_lock_release_recursive>
 800feda:	e7d9      	b.n	800fe90 <_fflush_r+0xc>
 800fedc:	4b05      	ldr	r3, [pc, #20]	; (800fef4 <_fflush_r+0x70>)
 800fede:	429c      	cmp	r4, r3
 800fee0:	d101      	bne.n	800fee6 <_fflush_r+0x62>
 800fee2:	68ac      	ldr	r4, [r5, #8]
 800fee4:	e7df      	b.n	800fea6 <_fflush_r+0x22>
 800fee6:	4b04      	ldr	r3, [pc, #16]	; (800fef8 <_fflush_r+0x74>)
 800fee8:	429c      	cmp	r4, r3
 800feea:	bf08      	it	eq
 800feec:	68ec      	ldreq	r4, [r5, #12]
 800feee:	e7da      	b.n	800fea6 <_fflush_r+0x22>
 800fef0:	08013e68 	.word	0x08013e68
 800fef4:	08013e88 	.word	0x08013e88
 800fef8:	08013e48 	.word	0x08013e48

0800fefc <std>:
 800fefc:	2300      	movs	r3, #0
 800fefe:	b510      	push	{r4, lr}
 800ff00:	4604      	mov	r4, r0
 800ff02:	e9c0 3300 	strd	r3, r3, [r0]
 800ff06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff0a:	6083      	str	r3, [r0, #8]
 800ff0c:	8181      	strh	r1, [r0, #12]
 800ff0e:	6643      	str	r3, [r0, #100]	; 0x64
 800ff10:	81c2      	strh	r2, [r0, #14]
 800ff12:	6183      	str	r3, [r0, #24]
 800ff14:	4619      	mov	r1, r3
 800ff16:	2208      	movs	r2, #8
 800ff18:	305c      	adds	r0, #92	; 0x5c
 800ff1a:	f7fd f9bf 	bl	800d29c <memset>
 800ff1e:	4b05      	ldr	r3, [pc, #20]	; (800ff34 <std+0x38>)
 800ff20:	6263      	str	r3, [r4, #36]	; 0x24
 800ff22:	4b05      	ldr	r3, [pc, #20]	; (800ff38 <std+0x3c>)
 800ff24:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff26:	4b05      	ldr	r3, [pc, #20]	; (800ff3c <std+0x40>)
 800ff28:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ff2a:	4b05      	ldr	r3, [pc, #20]	; (800ff40 <std+0x44>)
 800ff2c:	6224      	str	r4, [r4, #32]
 800ff2e:	6323      	str	r3, [r4, #48]	; 0x30
 800ff30:	bd10      	pop	{r4, pc}
 800ff32:	bf00      	nop
 800ff34:	080117c9 	.word	0x080117c9
 800ff38:	080117eb 	.word	0x080117eb
 800ff3c:	08011823 	.word	0x08011823
 800ff40:	08011847 	.word	0x08011847

0800ff44 <_cleanup_r>:
 800ff44:	4901      	ldr	r1, [pc, #4]	; (800ff4c <_cleanup_r+0x8>)
 800ff46:	f000 b8af 	b.w	80100a8 <_fwalk_reent>
 800ff4a:	bf00      	nop
 800ff4c:	0800fe85 	.word	0x0800fe85

0800ff50 <__sfmoreglue>:
 800ff50:	b570      	push	{r4, r5, r6, lr}
 800ff52:	1e4a      	subs	r2, r1, #1
 800ff54:	2568      	movs	r5, #104	; 0x68
 800ff56:	4355      	muls	r5, r2
 800ff58:	460e      	mov	r6, r1
 800ff5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ff5e:	f7fd fa05 	bl	800d36c <_malloc_r>
 800ff62:	4604      	mov	r4, r0
 800ff64:	b140      	cbz	r0, 800ff78 <__sfmoreglue+0x28>
 800ff66:	2100      	movs	r1, #0
 800ff68:	e9c0 1600 	strd	r1, r6, [r0]
 800ff6c:	300c      	adds	r0, #12
 800ff6e:	60a0      	str	r0, [r4, #8]
 800ff70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ff74:	f7fd f992 	bl	800d29c <memset>
 800ff78:	4620      	mov	r0, r4
 800ff7a:	bd70      	pop	{r4, r5, r6, pc}

0800ff7c <__sfp_lock_acquire>:
 800ff7c:	4801      	ldr	r0, [pc, #4]	; (800ff84 <__sfp_lock_acquire+0x8>)
 800ff7e:	f000 bc26 	b.w	80107ce <__retarget_lock_acquire_recursive>
 800ff82:	bf00      	nop
 800ff84:	2000740c 	.word	0x2000740c

0800ff88 <__sfp_lock_release>:
 800ff88:	4801      	ldr	r0, [pc, #4]	; (800ff90 <__sfp_lock_release+0x8>)
 800ff8a:	f000 bc21 	b.w	80107d0 <__retarget_lock_release_recursive>
 800ff8e:	bf00      	nop
 800ff90:	2000740c 	.word	0x2000740c

0800ff94 <__sinit_lock_acquire>:
 800ff94:	4801      	ldr	r0, [pc, #4]	; (800ff9c <__sinit_lock_acquire+0x8>)
 800ff96:	f000 bc1a 	b.w	80107ce <__retarget_lock_acquire_recursive>
 800ff9a:	bf00      	nop
 800ff9c:	20007407 	.word	0x20007407

0800ffa0 <__sinit_lock_release>:
 800ffa0:	4801      	ldr	r0, [pc, #4]	; (800ffa8 <__sinit_lock_release+0x8>)
 800ffa2:	f000 bc15 	b.w	80107d0 <__retarget_lock_release_recursive>
 800ffa6:	bf00      	nop
 800ffa8:	20007407 	.word	0x20007407

0800ffac <__sinit>:
 800ffac:	b510      	push	{r4, lr}
 800ffae:	4604      	mov	r4, r0
 800ffb0:	f7ff fff0 	bl	800ff94 <__sinit_lock_acquire>
 800ffb4:	69a3      	ldr	r3, [r4, #24]
 800ffb6:	b11b      	cbz	r3, 800ffc0 <__sinit+0x14>
 800ffb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffbc:	f7ff bff0 	b.w	800ffa0 <__sinit_lock_release>
 800ffc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ffc4:	6523      	str	r3, [r4, #80]	; 0x50
 800ffc6:	4b13      	ldr	r3, [pc, #76]	; (8010014 <__sinit+0x68>)
 800ffc8:	4a13      	ldr	r2, [pc, #76]	; (8010018 <__sinit+0x6c>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	62a2      	str	r2, [r4, #40]	; 0x28
 800ffce:	42a3      	cmp	r3, r4
 800ffd0:	bf04      	itt	eq
 800ffd2:	2301      	moveq	r3, #1
 800ffd4:	61a3      	streq	r3, [r4, #24]
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f000 f820 	bl	801001c <__sfp>
 800ffdc:	6060      	str	r0, [r4, #4]
 800ffde:	4620      	mov	r0, r4
 800ffe0:	f000 f81c 	bl	801001c <__sfp>
 800ffe4:	60a0      	str	r0, [r4, #8]
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	f000 f818 	bl	801001c <__sfp>
 800ffec:	2200      	movs	r2, #0
 800ffee:	60e0      	str	r0, [r4, #12]
 800fff0:	2104      	movs	r1, #4
 800fff2:	6860      	ldr	r0, [r4, #4]
 800fff4:	f7ff ff82 	bl	800fefc <std>
 800fff8:	68a0      	ldr	r0, [r4, #8]
 800fffa:	2201      	movs	r2, #1
 800fffc:	2109      	movs	r1, #9
 800fffe:	f7ff ff7d 	bl	800fefc <std>
 8010002:	68e0      	ldr	r0, [r4, #12]
 8010004:	2202      	movs	r2, #2
 8010006:	2112      	movs	r1, #18
 8010008:	f7ff ff78 	bl	800fefc <std>
 801000c:	2301      	movs	r3, #1
 801000e:	61a3      	str	r3, [r4, #24]
 8010010:	e7d2      	b.n	800ffb8 <__sinit+0xc>
 8010012:	bf00      	nop
 8010014:	08013c1c 	.word	0x08013c1c
 8010018:	0800ff45 	.word	0x0800ff45

0801001c <__sfp>:
 801001c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801001e:	4607      	mov	r7, r0
 8010020:	f7ff ffac 	bl	800ff7c <__sfp_lock_acquire>
 8010024:	4b1e      	ldr	r3, [pc, #120]	; (80100a0 <__sfp+0x84>)
 8010026:	681e      	ldr	r6, [r3, #0]
 8010028:	69b3      	ldr	r3, [r6, #24]
 801002a:	b913      	cbnz	r3, 8010032 <__sfp+0x16>
 801002c:	4630      	mov	r0, r6
 801002e:	f7ff ffbd 	bl	800ffac <__sinit>
 8010032:	3648      	adds	r6, #72	; 0x48
 8010034:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010038:	3b01      	subs	r3, #1
 801003a:	d503      	bpl.n	8010044 <__sfp+0x28>
 801003c:	6833      	ldr	r3, [r6, #0]
 801003e:	b30b      	cbz	r3, 8010084 <__sfp+0x68>
 8010040:	6836      	ldr	r6, [r6, #0]
 8010042:	e7f7      	b.n	8010034 <__sfp+0x18>
 8010044:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010048:	b9d5      	cbnz	r5, 8010080 <__sfp+0x64>
 801004a:	4b16      	ldr	r3, [pc, #88]	; (80100a4 <__sfp+0x88>)
 801004c:	60e3      	str	r3, [r4, #12]
 801004e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010052:	6665      	str	r5, [r4, #100]	; 0x64
 8010054:	f000 fbba 	bl	80107cc <__retarget_lock_init_recursive>
 8010058:	f7ff ff96 	bl	800ff88 <__sfp_lock_release>
 801005c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010060:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010064:	6025      	str	r5, [r4, #0]
 8010066:	61a5      	str	r5, [r4, #24]
 8010068:	2208      	movs	r2, #8
 801006a:	4629      	mov	r1, r5
 801006c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010070:	f7fd f914 	bl	800d29c <memset>
 8010074:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010078:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801007c:	4620      	mov	r0, r4
 801007e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010080:	3468      	adds	r4, #104	; 0x68
 8010082:	e7d9      	b.n	8010038 <__sfp+0x1c>
 8010084:	2104      	movs	r1, #4
 8010086:	4638      	mov	r0, r7
 8010088:	f7ff ff62 	bl	800ff50 <__sfmoreglue>
 801008c:	4604      	mov	r4, r0
 801008e:	6030      	str	r0, [r6, #0]
 8010090:	2800      	cmp	r0, #0
 8010092:	d1d5      	bne.n	8010040 <__sfp+0x24>
 8010094:	f7ff ff78 	bl	800ff88 <__sfp_lock_release>
 8010098:	230c      	movs	r3, #12
 801009a:	603b      	str	r3, [r7, #0]
 801009c:	e7ee      	b.n	801007c <__sfp+0x60>
 801009e:	bf00      	nop
 80100a0:	08013c1c 	.word	0x08013c1c
 80100a4:	ffff0001 	.word	0xffff0001

080100a8 <_fwalk_reent>:
 80100a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100ac:	4606      	mov	r6, r0
 80100ae:	4688      	mov	r8, r1
 80100b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80100b4:	2700      	movs	r7, #0
 80100b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80100ba:	f1b9 0901 	subs.w	r9, r9, #1
 80100be:	d505      	bpl.n	80100cc <_fwalk_reent+0x24>
 80100c0:	6824      	ldr	r4, [r4, #0]
 80100c2:	2c00      	cmp	r4, #0
 80100c4:	d1f7      	bne.n	80100b6 <_fwalk_reent+0xe>
 80100c6:	4638      	mov	r0, r7
 80100c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100cc:	89ab      	ldrh	r3, [r5, #12]
 80100ce:	2b01      	cmp	r3, #1
 80100d0:	d907      	bls.n	80100e2 <_fwalk_reent+0x3a>
 80100d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80100d6:	3301      	adds	r3, #1
 80100d8:	d003      	beq.n	80100e2 <_fwalk_reent+0x3a>
 80100da:	4629      	mov	r1, r5
 80100dc:	4630      	mov	r0, r6
 80100de:	47c0      	blx	r8
 80100e0:	4307      	orrs	r7, r0
 80100e2:	3568      	adds	r5, #104	; 0x68
 80100e4:	e7e9      	b.n	80100ba <_fwalk_reent+0x12>

080100e6 <rshift>:
 80100e6:	6903      	ldr	r3, [r0, #16]
 80100e8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80100ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100f0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80100f4:	f100 0414 	add.w	r4, r0, #20
 80100f8:	dd45      	ble.n	8010186 <rshift+0xa0>
 80100fa:	f011 011f 	ands.w	r1, r1, #31
 80100fe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010102:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010106:	d10c      	bne.n	8010122 <rshift+0x3c>
 8010108:	f100 0710 	add.w	r7, r0, #16
 801010c:	4629      	mov	r1, r5
 801010e:	42b1      	cmp	r1, r6
 8010110:	d334      	bcc.n	801017c <rshift+0x96>
 8010112:	1a9b      	subs	r3, r3, r2
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	1eea      	subs	r2, r5, #3
 8010118:	4296      	cmp	r6, r2
 801011a:	bf38      	it	cc
 801011c:	2300      	movcc	r3, #0
 801011e:	4423      	add	r3, r4
 8010120:	e015      	b.n	801014e <rshift+0x68>
 8010122:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010126:	f1c1 0820 	rsb	r8, r1, #32
 801012a:	40cf      	lsrs	r7, r1
 801012c:	f105 0e04 	add.w	lr, r5, #4
 8010130:	46a1      	mov	r9, r4
 8010132:	4576      	cmp	r6, lr
 8010134:	46f4      	mov	ip, lr
 8010136:	d815      	bhi.n	8010164 <rshift+0x7e>
 8010138:	1a9b      	subs	r3, r3, r2
 801013a:	009a      	lsls	r2, r3, #2
 801013c:	3a04      	subs	r2, #4
 801013e:	3501      	adds	r5, #1
 8010140:	42ae      	cmp	r6, r5
 8010142:	bf38      	it	cc
 8010144:	2200      	movcc	r2, #0
 8010146:	18a3      	adds	r3, r4, r2
 8010148:	50a7      	str	r7, [r4, r2]
 801014a:	b107      	cbz	r7, 801014e <rshift+0x68>
 801014c:	3304      	adds	r3, #4
 801014e:	1b1a      	subs	r2, r3, r4
 8010150:	42a3      	cmp	r3, r4
 8010152:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010156:	bf08      	it	eq
 8010158:	2300      	moveq	r3, #0
 801015a:	6102      	str	r2, [r0, #16]
 801015c:	bf08      	it	eq
 801015e:	6143      	streq	r3, [r0, #20]
 8010160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010164:	f8dc c000 	ldr.w	ip, [ip]
 8010168:	fa0c fc08 	lsl.w	ip, ip, r8
 801016c:	ea4c 0707 	orr.w	r7, ip, r7
 8010170:	f849 7b04 	str.w	r7, [r9], #4
 8010174:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010178:	40cf      	lsrs	r7, r1
 801017a:	e7da      	b.n	8010132 <rshift+0x4c>
 801017c:	f851 cb04 	ldr.w	ip, [r1], #4
 8010180:	f847 cf04 	str.w	ip, [r7, #4]!
 8010184:	e7c3      	b.n	801010e <rshift+0x28>
 8010186:	4623      	mov	r3, r4
 8010188:	e7e1      	b.n	801014e <rshift+0x68>

0801018a <__hexdig_fun>:
 801018a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801018e:	2b09      	cmp	r3, #9
 8010190:	d802      	bhi.n	8010198 <__hexdig_fun+0xe>
 8010192:	3820      	subs	r0, #32
 8010194:	b2c0      	uxtb	r0, r0
 8010196:	4770      	bx	lr
 8010198:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801019c:	2b05      	cmp	r3, #5
 801019e:	d801      	bhi.n	80101a4 <__hexdig_fun+0x1a>
 80101a0:	3847      	subs	r0, #71	; 0x47
 80101a2:	e7f7      	b.n	8010194 <__hexdig_fun+0xa>
 80101a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80101a8:	2b05      	cmp	r3, #5
 80101aa:	d801      	bhi.n	80101b0 <__hexdig_fun+0x26>
 80101ac:	3827      	subs	r0, #39	; 0x27
 80101ae:	e7f1      	b.n	8010194 <__hexdig_fun+0xa>
 80101b0:	2000      	movs	r0, #0
 80101b2:	4770      	bx	lr

080101b4 <__gethex>:
 80101b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b8:	ed2d 8b02 	vpush	{d8}
 80101bc:	b089      	sub	sp, #36	; 0x24
 80101be:	ee08 0a10 	vmov	s16, r0
 80101c2:	9304      	str	r3, [sp, #16]
 80101c4:	4bbc      	ldr	r3, [pc, #752]	; (80104b8 <__gethex+0x304>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	9301      	str	r3, [sp, #4]
 80101ca:	4618      	mov	r0, r3
 80101cc:	468b      	mov	fp, r1
 80101ce:	4690      	mov	r8, r2
 80101d0:	f7f0 f81e 	bl	8000210 <strlen>
 80101d4:	9b01      	ldr	r3, [sp, #4]
 80101d6:	f8db 2000 	ldr.w	r2, [fp]
 80101da:	4403      	add	r3, r0
 80101dc:	4682      	mov	sl, r0
 80101de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80101e2:	9305      	str	r3, [sp, #20]
 80101e4:	1c93      	adds	r3, r2, #2
 80101e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80101ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80101ee:	32fe      	adds	r2, #254	; 0xfe
 80101f0:	18d1      	adds	r1, r2, r3
 80101f2:	461f      	mov	r7, r3
 80101f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80101f8:	9100      	str	r1, [sp, #0]
 80101fa:	2830      	cmp	r0, #48	; 0x30
 80101fc:	d0f8      	beq.n	80101f0 <__gethex+0x3c>
 80101fe:	f7ff ffc4 	bl	801018a <__hexdig_fun>
 8010202:	4604      	mov	r4, r0
 8010204:	2800      	cmp	r0, #0
 8010206:	d13a      	bne.n	801027e <__gethex+0xca>
 8010208:	9901      	ldr	r1, [sp, #4]
 801020a:	4652      	mov	r2, sl
 801020c:	4638      	mov	r0, r7
 801020e:	f001 fb1e 	bl	801184e <strncmp>
 8010212:	4605      	mov	r5, r0
 8010214:	2800      	cmp	r0, #0
 8010216:	d168      	bne.n	80102ea <__gethex+0x136>
 8010218:	f817 000a 	ldrb.w	r0, [r7, sl]
 801021c:	eb07 060a 	add.w	r6, r7, sl
 8010220:	f7ff ffb3 	bl	801018a <__hexdig_fun>
 8010224:	2800      	cmp	r0, #0
 8010226:	d062      	beq.n	80102ee <__gethex+0x13a>
 8010228:	4633      	mov	r3, r6
 801022a:	7818      	ldrb	r0, [r3, #0]
 801022c:	2830      	cmp	r0, #48	; 0x30
 801022e:	461f      	mov	r7, r3
 8010230:	f103 0301 	add.w	r3, r3, #1
 8010234:	d0f9      	beq.n	801022a <__gethex+0x76>
 8010236:	f7ff ffa8 	bl	801018a <__hexdig_fun>
 801023a:	2301      	movs	r3, #1
 801023c:	fab0 f480 	clz	r4, r0
 8010240:	0964      	lsrs	r4, r4, #5
 8010242:	4635      	mov	r5, r6
 8010244:	9300      	str	r3, [sp, #0]
 8010246:	463a      	mov	r2, r7
 8010248:	4616      	mov	r6, r2
 801024a:	3201      	adds	r2, #1
 801024c:	7830      	ldrb	r0, [r6, #0]
 801024e:	f7ff ff9c 	bl	801018a <__hexdig_fun>
 8010252:	2800      	cmp	r0, #0
 8010254:	d1f8      	bne.n	8010248 <__gethex+0x94>
 8010256:	9901      	ldr	r1, [sp, #4]
 8010258:	4652      	mov	r2, sl
 801025a:	4630      	mov	r0, r6
 801025c:	f001 faf7 	bl	801184e <strncmp>
 8010260:	b980      	cbnz	r0, 8010284 <__gethex+0xd0>
 8010262:	b94d      	cbnz	r5, 8010278 <__gethex+0xc4>
 8010264:	eb06 050a 	add.w	r5, r6, sl
 8010268:	462a      	mov	r2, r5
 801026a:	4616      	mov	r6, r2
 801026c:	3201      	adds	r2, #1
 801026e:	7830      	ldrb	r0, [r6, #0]
 8010270:	f7ff ff8b 	bl	801018a <__hexdig_fun>
 8010274:	2800      	cmp	r0, #0
 8010276:	d1f8      	bne.n	801026a <__gethex+0xb6>
 8010278:	1bad      	subs	r5, r5, r6
 801027a:	00ad      	lsls	r5, r5, #2
 801027c:	e004      	b.n	8010288 <__gethex+0xd4>
 801027e:	2400      	movs	r4, #0
 8010280:	4625      	mov	r5, r4
 8010282:	e7e0      	b.n	8010246 <__gethex+0x92>
 8010284:	2d00      	cmp	r5, #0
 8010286:	d1f7      	bne.n	8010278 <__gethex+0xc4>
 8010288:	7833      	ldrb	r3, [r6, #0]
 801028a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801028e:	2b50      	cmp	r3, #80	; 0x50
 8010290:	d13b      	bne.n	801030a <__gethex+0x156>
 8010292:	7873      	ldrb	r3, [r6, #1]
 8010294:	2b2b      	cmp	r3, #43	; 0x2b
 8010296:	d02c      	beq.n	80102f2 <__gethex+0x13e>
 8010298:	2b2d      	cmp	r3, #45	; 0x2d
 801029a:	d02e      	beq.n	80102fa <__gethex+0x146>
 801029c:	1c71      	adds	r1, r6, #1
 801029e:	f04f 0900 	mov.w	r9, #0
 80102a2:	7808      	ldrb	r0, [r1, #0]
 80102a4:	f7ff ff71 	bl	801018a <__hexdig_fun>
 80102a8:	1e43      	subs	r3, r0, #1
 80102aa:	b2db      	uxtb	r3, r3
 80102ac:	2b18      	cmp	r3, #24
 80102ae:	d82c      	bhi.n	801030a <__gethex+0x156>
 80102b0:	f1a0 0210 	sub.w	r2, r0, #16
 80102b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80102b8:	f7ff ff67 	bl	801018a <__hexdig_fun>
 80102bc:	1e43      	subs	r3, r0, #1
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	2b18      	cmp	r3, #24
 80102c2:	d91d      	bls.n	8010300 <__gethex+0x14c>
 80102c4:	f1b9 0f00 	cmp.w	r9, #0
 80102c8:	d000      	beq.n	80102cc <__gethex+0x118>
 80102ca:	4252      	negs	r2, r2
 80102cc:	4415      	add	r5, r2
 80102ce:	f8cb 1000 	str.w	r1, [fp]
 80102d2:	b1e4      	cbz	r4, 801030e <__gethex+0x15a>
 80102d4:	9b00      	ldr	r3, [sp, #0]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	bf14      	ite	ne
 80102da:	2700      	movne	r7, #0
 80102dc:	2706      	moveq	r7, #6
 80102de:	4638      	mov	r0, r7
 80102e0:	b009      	add	sp, #36	; 0x24
 80102e2:	ecbd 8b02 	vpop	{d8}
 80102e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ea:	463e      	mov	r6, r7
 80102ec:	4625      	mov	r5, r4
 80102ee:	2401      	movs	r4, #1
 80102f0:	e7ca      	b.n	8010288 <__gethex+0xd4>
 80102f2:	f04f 0900 	mov.w	r9, #0
 80102f6:	1cb1      	adds	r1, r6, #2
 80102f8:	e7d3      	b.n	80102a2 <__gethex+0xee>
 80102fa:	f04f 0901 	mov.w	r9, #1
 80102fe:	e7fa      	b.n	80102f6 <__gethex+0x142>
 8010300:	230a      	movs	r3, #10
 8010302:	fb03 0202 	mla	r2, r3, r2, r0
 8010306:	3a10      	subs	r2, #16
 8010308:	e7d4      	b.n	80102b4 <__gethex+0x100>
 801030a:	4631      	mov	r1, r6
 801030c:	e7df      	b.n	80102ce <__gethex+0x11a>
 801030e:	1bf3      	subs	r3, r6, r7
 8010310:	3b01      	subs	r3, #1
 8010312:	4621      	mov	r1, r4
 8010314:	2b07      	cmp	r3, #7
 8010316:	dc0b      	bgt.n	8010330 <__gethex+0x17c>
 8010318:	ee18 0a10 	vmov	r0, s16
 801031c:	f000 fadc 	bl	80108d8 <_Balloc>
 8010320:	4604      	mov	r4, r0
 8010322:	b940      	cbnz	r0, 8010336 <__gethex+0x182>
 8010324:	4b65      	ldr	r3, [pc, #404]	; (80104bc <__gethex+0x308>)
 8010326:	4602      	mov	r2, r0
 8010328:	21de      	movs	r1, #222	; 0xde
 801032a:	4865      	ldr	r0, [pc, #404]	; (80104c0 <__gethex+0x30c>)
 801032c:	f001 fac0 	bl	80118b0 <__assert_func>
 8010330:	3101      	adds	r1, #1
 8010332:	105b      	asrs	r3, r3, #1
 8010334:	e7ee      	b.n	8010314 <__gethex+0x160>
 8010336:	f100 0914 	add.w	r9, r0, #20
 801033a:	f04f 0b00 	mov.w	fp, #0
 801033e:	f1ca 0301 	rsb	r3, sl, #1
 8010342:	f8cd 9008 	str.w	r9, [sp, #8]
 8010346:	f8cd b000 	str.w	fp, [sp]
 801034a:	9306      	str	r3, [sp, #24]
 801034c:	42b7      	cmp	r7, r6
 801034e:	d340      	bcc.n	80103d2 <__gethex+0x21e>
 8010350:	9802      	ldr	r0, [sp, #8]
 8010352:	9b00      	ldr	r3, [sp, #0]
 8010354:	f840 3b04 	str.w	r3, [r0], #4
 8010358:	eba0 0009 	sub.w	r0, r0, r9
 801035c:	1080      	asrs	r0, r0, #2
 801035e:	0146      	lsls	r6, r0, #5
 8010360:	6120      	str	r0, [r4, #16]
 8010362:	4618      	mov	r0, r3
 8010364:	f000 fbae 	bl	8010ac4 <__hi0bits>
 8010368:	1a30      	subs	r0, r6, r0
 801036a:	f8d8 6000 	ldr.w	r6, [r8]
 801036e:	42b0      	cmp	r0, r6
 8010370:	dd63      	ble.n	801043a <__gethex+0x286>
 8010372:	1b87      	subs	r7, r0, r6
 8010374:	4639      	mov	r1, r7
 8010376:	4620      	mov	r0, r4
 8010378:	f000 ff48 	bl	801120c <__any_on>
 801037c:	4682      	mov	sl, r0
 801037e:	b1a8      	cbz	r0, 80103ac <__gethex+0x1f8>
 8010380:	1e7b      	subs	r3, r7, #1
 8010382:	1159      	asrs	r1, r3, #5
 8010384:	f003 021f 	and.w	r2, r3, #31
 8010388:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801038c:	f04f 0a01 	mov.w	sl, #1
 8010390:	fa0a f202 	lsl.w	r2, sl, r2
 8010394:	420a      	tst	r2, r1
 8010396:	d009      	beq.n	80103ac <__gethex+0x1f8>
 8010398:	4553      	cmp	r3, sl
 801039a:	dd05      	ble.n	80103a8 <__gethex+0x1f4>
 801039c:	1eb9      	subs	r1, r7, #2
 801039e:	4620      	mov	r0, r4
 80103a0:	f000 ff34 	bl	801120c <__any_on>
 80103a4:	2800      	cmp	r0, #0
 80103a6:	d145      	bne.n	8010434 <__gethex+0x280>
 80103a8:	f04f 0a02 	mov.w	sl, #2
 80103ac:	4639      	mov	r1, r7
 80103ae:	4620      	mov	r0, r4
 80103b0:	f7ff fe99 	bl	80100e6 <rshift>
 80103b4:	443d      	add	r5, r7
 80103b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80103ba:	42ab      	cmp	r3, r5
 80103bc:	da4c      	bge.n	8010458 <__gethex+0x2a4>
 80103be:	ee18 0a10 	vmov	r0, s16
 80103c2:	4621      	mov	r1, r4
 80103c4:	f000 fac8 	bl	8010958 <_Bfree>
 80103c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80103ca:	2300      	movs	r3, #0
 80103cc:	6013      	str	r3, [r2, #0]
 80103ce:	27a3      	movs	r7, #163	; 0xa3
 80103d0:	e785      	b.n	80102de <__gethex+0x12a>
 80103d2:	1e73      	subs	r3, r6, #1
 80103d4:	9a05      	ldr	r2, [sp, #20]
 80103d6:	9303      	str	r3, [sp, #12]
 80103d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80103dc:	4293      	cmp	r3, r2
 80103de:	d019      	beq.n	8010414 <__gethex+0x260>
 80103e0:	f1bb 0f20 	cmp.w	fp, #32
 80103e4:	d107      	bne.n	80103f6 <__gethex+0x242>
 80103e6:	9b02      	ldr	r3, [sp, #8]
 80103e8:	9a00      	ldr	r2, [sp, #0]
 80103ea:	f843 2b04 	str.w	r2, [r3], #4
 80103ee:	9302      	str	r3, [sp, #8]
 80103f0:	2300      	movs	r3, #0
 80103f2:	9300      	str	r3, [sp, #0]
 80103f4:	469b      	mov	fp, r3
 80103f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80103fa:	f7ff fec6 	bl	801018a <__hexdig_fun>
 80103fe:	9b00      	ldr	r3, [sp, #0]
 8010400:	f000 000f 	and.w	r0, r0, #15
 8010404:	fa00 f00b 	lsl.w	r0, r0, fp
 8010408:	4303      	orrs	r3, r0
 801040a:	9300      	str	r3, [sp, #0]
 801040c:	f10b 0b04 	add.w	fp, fp, #4
 8010410:	9b03      	ldr	r3, [sp, #12]
 8010412:	e00d      	b.n	8010430 <__gethex+0x27c>
 8010414:	9b03      	ldr	r3, [sp, #12]
 8010416:	9a06      	ldr	r2, [sp, #24]
 8010418:	4413      	add	r3, r2
 801041a:	42bb      	cmp	r3, r7
 801041c:	d3e0      	bcc.n	80103e0 <__gethex+0x22c>
 801041e:	4618      	mov	r0, r3
 8010420:	9901      	ldr	r1, [sp, #4]
 8010422:	9307      	str	r3, [sp, #28]
 8010424:	4652      	mov	r2, sl
 8010426:	f001 fa12 	bl	801184e <strncmp>
 801042a:	9b07      	ldr	r3, [sp, #28]
 801042c:	2800      	cmp	r0, #0
 801042e:	d1d7      	bne.n	80103e0 <__gethex+0x22c>
 8010430:	461e      	mov	r6, r3
 8010432:	e78b      	b.n	801034c <__gethex+0x198>
 8010434:	f04f 0a03 	mov.w	sl, #3
 8010438:	e7b8      	b.n	80103ac <__gethex+0x1f8>
 801043a:	da0a      	bge.n	8010452 <__gethex+0x29e>
 801043c:	1a37      	subs	r7, r6, r0
 801043e:	4621      	mov	r1, r4
 8010440:	ee18 0a10 	vmov	r0, s16
 8010444:	463a      	mov	r2, r7
 8010446:	f000 fca3 	bl	8010d90 <__lshift>
 801044a:	1bed      	subs	r5, r5, r7
 801044c:	4604      	mov	r4, r0
 801044e:	f100 0914 	add.w	r9, r0, #20
 8010452:	f04f 0a00 	mov.w	sl, #0
 8010456:	e7ae      	b.n	80103b6 <__gethex+0x202>
 8010458:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801045c:	42a8      	cmp	r0, r5
 801045e:	dd72      	ble.n	8010546 <__gethex+0x392>
 8010460:	1b45      	subs	r5, r0, r5
 8010462:	42ae      	cmp	r6, r5
 8010464:	dc36      	bgt.n	80104d4 <__gethex+0x320>
 8010466:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801046a:	2b02      	cmp	r3, #2
 801046c:	d02a      	beq.n	80104c4 <__gethex+0x310>
 801046e:	2b03      	cmp	r3, #3
 8010470:	d02c      	beq.n	80104cc <__gethex+0x318>
 8010472:	2b01      	cmp	r3, #1
 8010474:	d115      	bne.n	80104a2 <__gethex+0x2ee>
 8010476:	42ae      	cmp	r6, r5
 8010478:	d113      	bne.n	80104a2 <__gethex+0x2ee>
 801047a:	2e01      	cmp	r6, #1
 801047c:	d10b      	bne.n	8010496 <__gethex+0x2e2>
 801047e:	9a04      	ldr	r2, [sp, #16]
 8010480:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010484:	6013      	str	r3, [r2, #0]
 8010486:	2301      	movs	r3, #1
 8010488:	6123      	str	r3, [r4, #16]
 801048a:	f8c9 3000 	str.w	r3, [r9]
 801048e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010490:	2762      	movs	r7, #98	; 0x62
 8010492:	601c      	str	r4, [r3, #0]
 8010494:	e723      	b.n	80102de <__gethex+0x12a>
 8010496:	1e71      	subs	r1, r6, #1
 8010498:	4620      	mov	r0, r4
 801049a:	f000 feb7 	bl	801120c <__any_on>
 801049e:	2800      	cmp	r0, #0
 80104a0:	d1ed      	bne.n	801047e <__gethex+0x2ca>
 80104a2:	ee18 0a10 	vmov	r0, s16
 80104a6:	4621      	mov	r1, r4
 80104a8:	f000 fa56 	bl	8010958 <_Bfree>
 80104ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80104ae:	2300      	movs	r3, #0
 80104b0:	6013      	str	r3, [r2, #0]
 80104b2:	2750      	movs	r7, #80	; 0x50
 80104b4:	e713      	b.n	80102de <__gethex+0x12a>
 80104b6:	bf00      	nop
 80104b8:	08013f14 	.word	0x08013f14
 80104bc:	08013e34 	.word	0x08013e34
 80104c0:	08013ea8 	.word	0x08013ea8
 80104c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d1eb      	bne.n	80104a2 <__gethex+0x2ee>
 80104ca:	e7d8      	b.n	801047e <__gethex+0x2ca>
 80104cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d1d5      	bne.n	801047e <__gethex+0x2ca>
 80104d2:	e7e6      	b.n	80104a2 <__gethex+0x2ee>
 80104d4:	1e6f      	subs	r7, r5, #1
 80104d6:	f1ba 0f00 	cmp.w	sl, #0
 80104da:	d131      	bne.n	8010540 <__gethex+0x38c>
 80104dc:	b127      	cbz	r7, 80104e8 <__gethex+0x334>
 80104de:	4639      	mov	r1, r7
 80104e0:	4620      	mov	r0, r4
 80104e2:	f000 fe93 	bl	801120c <__any_on>
 80104e6:	4682      	mov	sl, r0
 80104e8:	117b      	asrs	r3, r7, #5
 80104ea:	2101      	movs	r1, #1
 80104ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80104f0:	f007 071f 	and.w	r7, r7, #31
 80104f4:	fa01 f707 	lsl.w	r7, r1, r7
 80104f8:	421f      	tst	r7, r3
 80104fa:	4629      	mov	r1, r5
 80104fc:	4620      	mov	r0, r4
 80104fe:	bf18      	it	ne
 8010500:	f04a 0a02 	orrne.w	sl, sl, #2
 8010504:	1b76      	subs	r6, r6, r5
 8010506:	f7ff fdee 	bl	80100e6 <rshift>
 801050a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801050e:	2702      	movs	r7, #2
 8010510:	f1ba 0f00 	cmp.w	sl, #0
 8010514:	d048      	beq.n	80105a8 <__gethex+0x3f4>
 8010516:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801051a:	2b02      	cmp	r3, #2
 801051c:	d015      	beq.n	801054a <__gethex+0x396>
 801051e:	2b03      	cmp	r3, #3
 8010520:	d017      	beq.n	8010552 <__gethex+0x39e>
 8010522:	2b01      	cmp	r3, #1
 8010524:	d109      	bne.n	801053a <__gethex+0x386>
 8010526:	f01a 0f02 	tst.w	sl, #2
 801052a:	d006      	beq.n	801053a <__gethex+0x386>
 801052c:	f8d9 0000 	ldr.w	r0, [r9]
 8010530:	ea4a 0a00 	orr.w	sl, sl, r0
 8010534:	f01a 0f01 	tst.w	sl, #1
 8010538:	d10e      	bne.n	8010558 <__gethex+0x3a4>
 801053a:	f047 0710 	orr.w	r7, r7, #16
 801053e:	e033      	b.n	80105a8 <__gethex+0x3f4>
 8010540:	f04f 0a01 	mov.w	sl, #1
 8010544:	e7d0      	b.n	80104e8 <__gethex+0x334>
 8010546:	2701      	movs	r7, #1
 8010548:	e7e2      	b.n	8010510 <__gethex+0x35c>
 801054a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801054c:	f1c3 0301 	rsb	r3, r3, #1
 8010550:	9315      	str	r3, [sp, #84]	; 0x54
 8010552:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010554:	2b00      	cmp	r3, #0
 8010556:	d0f0      	beq.n	801053a <__gethex+0x386>
 8010558:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801055c:	f104 0314 	add.w	r3, r4, #20
 8010560:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010564:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010568:	f04f 0c00 	mov.w	ip, #0
 801056c:	4618      	mov	r0, r3
 801056e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010572:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8010576:	d01c      	beq.n	80105b2 <__gethex+0x3fe>
 8010578:	3201      	adds	r2, #1
 801057a:	6002      	str	r2, [r0, #0]
 801057c:	2f02      	cmp	r7, #2
 801057e:	f104 0314 	add.w	r3, r4, #20
 8010582:	d13f      	bne.n	8010604 <__gethex+0x450>
 8010584:	f8d8 2000 	ldr.w	r2, [r8]
 8010588:	3a01      	subs	r2, #1
 801058a:	42b2      	cmp	r2, r6
 801058c:	d10a      	bne.n	80105a4 <__gethex+0x3f0>
 801058e:	1171      	asrs	r1, r6, #5
 8010590:	2201      	movs	r2, #1
 8010592:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010596:	f006 061f 	and.w	r6, r6, #31
 801059a:	fa02 f606 	lsl.w	r6, r2, r6
 801059e:	421e      	tst	r6, r3
 80105a0:	bf18      	it	ne
 80105a2:	4617      	movne	r7, r2
 80105a4:	f047 0720 	orr.w	r7, r7, #32
 80105a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80105aa:	601c      	str	r4, [r3, #0]
 80105ac:	9b04      	ldr	r3, [sp, #16]
 80105ae:	601d      	str	r5, [r3, #0]
 80105b0:	e695      	b.n	80102de <__gethex+0x12a>
 80105b2:	4299      	cmp	r1, r3
 80105b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80105b8:	d8d8      	bhi.n	801056c <__gethex+0x3b8>
 80105ba:	68a3      	ldr	r3, [r4, #8]
 80105bc:	459b      	cmp	fp, r3
 80105be:	db19      	blt.n	80105f4 <__gethex+0x440>
 80105c0:	6861      	ldr	r1, [r4, #4]
 80105c2:	ee18 0a10 	vmov	r0, s16
 80105c6:	3101      	adds	r1, #1
 80105c8:	f000 f986 	bl	80108d8 <_Balloc>
 80105cc:	4681      	mov	r9, r0
 80105ce:	b918      	cbnz	r0, 80105d8 <__gethex+0x424>
 80105d0:	4b1a      	ldr	r3, [pc, #104]	; (801063c <__gethex+0x488>)
 80105d2:	4602      	mov	r2, r0
 80105d4:	2184      	movs	r1, #132	; 0x84
 80105d6:	e6a8      	b.n	801032a <__gethex+0x176>
 80105d8:	6922      	ldr	r2, [r4, #16]
 80105da:	3202      	adds	r2, #2
 80105dc:	f104 010c 	add.w	r1, r4, #12
 80105e0:	0092      	lsls	r2, r2, #2
 80105e2:	300c      	adds	r0, #12
 80105e4:	f7fc fe4c 	bl	800d280 <memcpy>
 80105e8:	4621      	mov	r1, r4
 80105ea:	ee18 0a10 	vmov	r0, s16
 80105ee:	f000 f9b3 	bl	8010958 <_Bfree>
 80105f2:	464c      	mov	r4, r9
 80105f4:	6923      	ldr	r3, [r4, #16]
 80105f6:	1c5a      	adds	r2, r3, #1
 80105f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80105fc:	6122      	str	r2, [r4, #16]
 80105fe:	2201      	movs	r2, #1
 8010600:	615a      	str	r2, [r3, #20]
 8010602:	e7bb      	b.n	801057c <__gethex+0x3c8>
 8010604:	6922      	ldr	r2, [r4, #16]
 8010606:	455a      	cmp	r2, fp
 8010608:	dd0b      	ble.n	8010622 <__gethex+0x46e>
 801060a:	2101      	movs	r1, #1
 801060c:	4620      	mov	r0, r4
 801060e:	f7ff fd6a 	bl	80100e6 <rshift>
 8010612:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010616:	3501      	adds	r5, #1
 8010618:	42ab      	cmp	r3, r5
 801061a:	f6ff aed0 	blt.w	80103be <__gethex+0x20a>
 801061e:	2701      	movs	r7, #1
 8010620:	e7c0      	b.n	80105a4 <__gethex+0x3f0>
 8010622:	f016 061f 	ands.w	r6, r6, #31
 8010626:	d0fa      	beq.n	801061e <__gethex+0x46a>
 8010628:	449a      	add	sl, r3
 801062a:	f1c6 0620 	rsb	r6, r6, #32
 801062e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010632:	f000 fa47 	bl	8010ac4 <__hi0bits>
 8010636:	42b0      	cmp	r0, r6
 8010638:	dbe7      	blt.n	801060a <__gethex+0x456>
 801063a:	e7f0      	b.n	801061e <__gethex+0x46a>
 801063c:	08013e34 	.word	0x08013e34

08010640 <L_shift>:
 8010640:	f1c2 0208 	rsb	r2, r2, #8
 8010644:	0092      	lsls	r2, r2, #2
 8010646:	b570      	push	{r4, r5, r6, lr}
 8010648:	f1c2 0620 	rsb	r6, r2, #32
 801064c:	6843      	ldr	r3, [r0, #4]
 801064e:	6804      	ldr	r4, [r0, #0]
 8010650:	fa03 f506 	lsl.w	r5, r3, r6
 8010654:	432c      	orrs	r4, r5
 8010656:	40d3      	lsrs	r3, r2
 8010658:	6004      	str	r4, [r0, #0]
 801065a:	f840 3f04 	str.w	r3, [r0, #4]!
 801065e:	4288      	cmp	r0, r1
 8010660:	d3f4      	bcc.n	801064c <L_shift+0xc>
 8010662:	bd70      	pop	{r4, r5, r6, pc}

08010664 <__match>:
 8010664:	b530      	push	{r4, r5, lr}
 8010666:	6803      	ldr	r3, [r0, #0]
 8010668:	3301      	adds	r3, #1
 801066a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801066e:	b914      	cbnz	r4, 8010676 <__match+0x12>
 8010670:	6003      	str	r3, [r0, #0]
 8010672:	2001      	movs	r0, #1
 8010674:	bd30      	pop	{r4, r5, pc}
 8010676:	f813 2b01 	ldrb.w	r2, [r3], #1
 801067a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801067e:	2d19      	cmp	r5, #25
 8010680:	bf98      	it	ls
 8010682:	3220      	addls	r2, #32
 8010684:	42a2      	cmp	r2, r4
 8010686:	d0f0      	beq.n	801066a <__match+0x6>
 8010688:	2000      	movs	r0, #0
 801068a:	e7f3      	b.n	8010674 <__match+0x10>

0801068c <__hexnan>:
 801068c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010690:	680b      	ldr	r3, [r1, #0]
 8010692:	6801      	ldr	r1, [r0, #0]
 8010694:	115e      	asrs	r6, r3, #5
 8010696:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801069a:	f013 031f 	ands.w	r3, r3, #31
 801069e:	b087      	sub	sp, #28
 80106a0:	bf18      	it	ne
 80106a2:	3604      	addne	r6, #4
 80106a4:	2500      	movs	r5, #0
 80106a6:	1f37      	subs	r7, r6, #4
 80106a8:	4682      	mov	sl, r0
 80106aa:	4690      	mov	r8, r2
 80106ac:	9301      	str	r3, [sp, #4]
 80106ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80106b2:	46b9      	mov	r9, r7
 80106b4:	463c      	mov	r4, r7
 80106b6:	9502      	str	r5, [sp, #8]
 80106b8:	46ab      	mov	fp, r5
 80106ba:	784a      	ldrb	r2, [r1, #1]
 80106bc:	1c4b      	adds	r3, r1, #1
 80106be:	9303      	str	r3, [sp, #12]
 80106c0:	b342      	cbz	r2, 8010714 <__hexnan+0x88>
 80106c2:	4610      	mov	r0, r2
 80106c4:	9105      	str	r1, [sp, #20]
 80106c6:	9204      	str	r2, [sp, #16]
 80106c8:	f7ff fd5f 	bl	801018a <__hexdig_fun>
 80106cc:	2800      	cmp	r0, #0
 80106ce:	d14f      	bne.n	8010770 <__hexnan+0xe4>
 80106d0:	9a04      	ldr	r2, [sp, #16]
 80106d2:	9905      	ldr	r1, [sp, #20]
 80106d4:	2a20      	cmp	r2, #32
 80106d6:	d818      	bhi.n	801070a <__hexnan+0x7e>
 80106d8:	9b02      	ldr	r3, [sp, #8]
 80106da:	459b      	cmp	fp, r3
 80106dc:	dd13      	ble.n	8010706 <__hexnan+0x7a>
 80106de:	454c      	cmp	r4, r9
 80106e0:	d206      	bcs.n	80106f0 <__hexnan+0x64>
 80106e2:	2d07      	cmp	r5, #7
 80106e4:	dc04      	bgt.n	80106f0 <__hexnan+0x64>
 80106e6:	462a      	mov	r2, r5
 80106e8:	4649      	mov	r1, r9
 80106ea:	4620      	mov	r0, r4
 80106ec:	f7ff ffa8 	bl	8010640 <L_shift>
 80106f0:	4544      	cmp	r4, r8
 80106f2:	d950      	bls.n	8010796 <__hexnan+0x10a>
 80106f4:	2300      	movs	r3, #0
 80106f6:	f1a4 0904 	sub.w	r9, r4, #4
 80106fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80106fe:	f8cd b008 	str.w	fp, [sp, #8]
 8010702:	464c      	mov	r4, r9
 8010704:	461d      	mov	r5, r3
 8010706:	9903      	ldr	r1, [sp, #12]
 8010708:	e7d7      	b.n	80106ba <__hexnan+0x2e>
 801070a:	2a29      	cmp	r2, #41	; 0x29
 801070c:	d156      	bne.n	80107bc <__hexnan+0x130>
 801070e:	3102      	adds	r1, #2
 8010710:	f8ca 1000 	str.w	r1, [sl]
 8010714:	f1bb 0f00 	cmp.w	fp, #0
 8010718:	d050      	beq.n	80107bc <__hexnan+0x130>
 801071a:	454c      	cmp	r4, r9
 801071c:	d206      	bcs.n	801072c <__hexnan+0xa0>
 801071e:	2d07      	cmp	r5, #7
 8010720:	dc04      	bgt.n	801072c <__hexnan+0xa0>
 8010722:	462a      	mov	r2, r5
 8010724:	4649      	mov	r1, r9
 8010726:	4620      	mov	r0, r4
 8010728:	f7ff ff8a 	bl	8010640 <L_shift>
 801072c:	4544      	cmp	r4, r8
 801072e:	d934      	bls.n	801079a <__hexnan+0x10e>
 8010730:	f1a8 0204 	sub.w	r2, r8, #4
 8010734:	4623      	mov	r3, r4
 8010736:	f853 1b04 	ldr.w	r1, [r3], #4
 801073a:	f842 1f04 	str.w	r1, [r2, #4]!
 801073e:	429f      	cmp	r7, r3
 8010740:	d2f9      	bcs.n	8010736 <__hexnan+0xaa>
 8010742:	1b3b      	subs	r3, r7, r4
 8010744:	f023 0303 	bic.w	r3, r3, #3
 8010748:	3304      	adds	r3, #4
 801074a:	3401      	adds	r4, #1
 801074c:	3e03      	subs	r6, #3
 801074e:	42b4      	cmp	r4, r6
 8010750:	bf88      	it	hi
 8010752:	2304      	movhi	r3, #4
 8010754:	4443      	add	r3, r8
 8010756:	2200      	movs	r2, #0
 8010758:	f843 2b04 	str.w	r2, [r3], #4
 801075c:	429f      	cmp	r7, r3
 801075e:	d2fb      	bcs.n	8010758 <__hexnan+0xcc>
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	b91b      	cbnz	r3, 801076c <__hexnan+0xe0>
 8010764:	4547      	cmp	r7, r8
 8010766:	d127      	bne.n	80107b8 <__hexnan+0x12c>
 8010768:	2301      	movs	r3, #1
 801076a:	603b      	str	r3, [r7, #0]
 801076c:	2005      	movs	r0, #5
 801076e:	e026      	b.n	80107be <__hexnan+0x132>
 8010770:	3501      	adds	r5, #1
 8010772:	2d08      	cmp	r5, #8
 8010774:	f10b 0b01 	add.w	fp, fp, #1
 8010778:	dd06      	ble.n	8010788 <__hexnan+0xfc>
 801077a:	4544      	cmp	r4, r8
 801077c:	d9c3      	bls.n	8010706 <__hexnan+0x7a>
 801077e:	2300      	movs	r3, #0
 8010780:	f844 3c04 	str.w	r3, [r4, #-4]
 8010784:	2501      	movs	r5, #1
 8010786:	3c04      	subs	r4, #4
 8010788:	6822      	ldr	r2, [r4, #0]
 801078a:	f000 000f 	and.w	r0, r0, #15
 801078e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010792:	6022      	str	r2, [r4, #0]
 8010794:	e7b7      	b.n	8010706 <__hexnan+0x7a>
 8010796:	2508      	movs	r5, #8
 8010798:	e7b5      	b.n	8010706 <__hexnan+0x7a>
 801079a:	9b01      	ldr	r3, [sp, #4]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d0df      	beq.n	8010760 <__hexnan+0xd4>
 80107a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80107a4:	f1c3 0320 	rsb	r3, r3, #32
 80107a8:	fa22 f303 	lsr.w	r3, r2, r3
 80107ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80107b0:	401a      	ands	r2, r3
 80107b2:	f846 2c04 	str.w	r2, [r6, #-4]
 80107b6:	e7d3      	b.n	8010760 <__hexnan+0xd4>
 80107b8:	3f04      	subs	r7, #4
 80107ba:	e7d1      	b.n	8010760 <__hexnan+0xd4>
 80107bc:	2004      	movs	r0, #4
 80107be:	b007      	add	sp, #28
 80107c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080107c4 <_localeconv_r>:
 80107c4:	4800      	ldr	r0, [pc, #0]	; (80107c8 <_localeconv_r+0x4>)
 80107c6:	4770      	bx	lr
 80107c8:	2000016c 	.word	0x2000016c

080107cc <__retarget_lock_init_recursive>:
 80107cc:	4770      	bx	lr

080107ce <__retarget_lock_acquire_recursive>:
 80107ce:	4770      	bx	lr

080107d0 <__retarget_lock_release_recursive>:
 80107d0:	4770      	bx	lr

080107d2 <__swhatbuf_r>:
 80107d2:	b570      	push	{r4, r5, r6, lr}
 80107d4:	460e      	mov	r6, r1
 80107d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107da:	2900      	cmp	r1, #0
 80107dc:	b096      	sub	sp, #88	; 0x58
 80107de:	4614      	mov	r4, r2
 80107e0:	461d      	mov	r5, r3
 80107e2:	da07      	bge.n	80107f4 <__swhatbuf_r+0x22>
 80107e4:	2300      	movs	r3, #0
 80107e6:	602b      	str	r3, [r5, #0]
 80107e8:	89b3      	ldrh	r3, [r6, #12]
 80107ea:	061a      	lsls	r2, r3, #24
 80107ec:	d410      	bmi.n	8010810 <__swhatbuf_r+0x3e>
 80107ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107f2:	e00e      	b.n	8010812 <__swhatbuf_r+0x40>
 80107f4:	466a      	mov	r2, sp
 80107f6:	f001 f89b 	bl	8011930 <_fstat_r>
 80107fa:	2800      	cmp	r0, #0
 80107fc:	dbf2      	blt.n	80107e4 <__swhatbuf_r+0x12>
 80107fe:	9a01      	ldr	r2, [sp, #4]
 8010800:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010804:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010808:	425a      	negs	r2, r3
 801080a:	415a      	adcs	r2, r3
 801080c:	602a      	str	r2, [r5, #0]
 801080e:	e7ee      	b.n	80107ee <__swhatbuf_r+0x1c>
 8010810:	2340      	movs	r3, #64	; 0x40
 8010812:	2000      	movs	r0, #0
 8010814:	6023      	str	r3, [r4, #0]
 8010816:	b016      	add	sp, #88	; 0x58
 8010818:	bd70      	pop	{r4, r5, r6, pc}
	...

0801081c <__smakebuf_r>:
 801081c:	898b      	ldrh	r3, [r1, #12]
 801081e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010820:	079d      	lsls	r5, r3, #30
 8010822:	4606      	mov	r6, r0
 8010824:	460c      	mov	r4, r1
 8010826:	d507      	bpl.n	8010838 <__smakebuf_r+0x1c>
 8010828:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801082c:	6023      	str	r3, [r4, #0]
 801082e:	6123      	str	r3, [r4, #16]
 8010830:	2301      	movs	r3, #1
 8010832:	6163      	str	r3, [r4, #20]
 8010834:	b002      	add	sp, #8
 8010836:	bd70      	pop	{r4, r5, r6, pc}
 8010838:	ab01      	add	r3, sp, #4
 801083a:	466a      	mov	r2, sp
 801083c:	f7ff ffc9 	bl	80107d2 <__swhatbuf_r>
 8010840:	9900      	ldr	r1, [sp, #0]
 8010842:	4605      	mov	r5, r0
 8010844:	4630      	mov	r0, r6
 8010846:	f7fc fd91 	bl	800d36c <_malloc_r>
 801084a:	b948      	cbnz	r0, 8010860 <__smakebuf_r+0x44>
 801084c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010850:	059a      	lsls	r2, r3, #22
 8010852:	d4ef      	bmi.n	8010834 <__smakebuf_r+0x18>
 8010854:	f023 0303 	bic.w	r3, r3, #3
 8010858:	f043 0302 	orr.w	r3, r3, #2
 801085c:	81a3      	strh	r3, [r4, #12]
 801085e:	e7e3      	b.n	8010828 <__smakebuf_r+0xc>
 8010860:	4b0d      	ldr	r3, [pc, #52]	; (8010898 <__smakebuf_r+0x7c>)
 8010862:	62b3      	str	r3, [r6, #40]	; 0x28
 8010864:	89a3      	ldrh	r3, [r4, #12]
 8010866:	6020      	str	r0, [r4, #0]
 8010868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801086c:	81a3      	strh	r3, [r4, #12]
 801086e:	9b00      	ldr	r3, [sp, #0]
 8010870:	6163      	str	r3, [r4, #20]
 8010872:	9b01      	ldr	r3, [sp, #4]
 8010874:	6120      	str	r0, [r4, #16]
 8010876:	b15b      	cbz	r3, 8010890 <__smakebuf_r+0x74>
 8010878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801087c:	4630      	mov	r0, r6
 801087e:	f001 f869 	bl	8011954 <_isatty_r>
 8010882:	b128      	cbz	r0, 8010890 <__smakebuf_r+0x74>
 8010884:	89a3      	ldrh	r3, [r4, #12]
 8010886:	f023 0303 	bic.w	r3, r3, #3
 801088a:	f043 0301 	orr.w	r3, r3, #1
 801088e:	81a3      	strh	r3, [r4, #12]
 8010890:	89a0      	ldrh	r0, [r4, #12]
 8010892:	4305      	orrs	r5, r0
 8010894:	81a5      	strh	r5, [r4, #12]
 8010896:	e7cd      	b.n	8010834 <__smakebuf_r+0x18>
 8010898:	0800ff45 	.word	0x0800ff45

0801089c <__ascii_mbtowc>:
 801089c:	b082      	sub	sp, #8
 801089e:	b901      	cbnz	r1, 80108a2 <__ascii_mbtowc+0x6>
 80108a0:	a901      	add	r1, sp, #4
 80108a2:	b142      	cbz	r2, 80108b6 <__ascii_mbtowc+0x1a>
 80108a4:	b14b      	cbz	r3, 80108ba <__ascii_mbtowc+0x1e>
 80108a6:	7813      	ldrb	r3, [r2, #0]
 80108a8:	600b      	str	r3, [r1, #0]
 80108aa:	7812      	ldrb	r2, [r2, #0]
 80108ac:	1e10      	subs	r0, r2, #0
 80108ae:	bf18      	it	ne
 80108b0:	2001      	movne	r0, #1
 80108b2:	b002      	add	sp, #8
 80108b4:	4770      	bx	lr
 80108b6:	4610      	mov	r0, r2
 80108b8:	e7fb      	b.n	80108b2 <__ascii_mbtowc+0x16>
 80108ba:	f06f 0001 	mvn.w	r0, #1
 80108be:	e7f8      	b.n	80108b2 <__ascii_mbtowc+0x16>

080108c0 <__malloc_lock>:
 80108c0:	4801      	ldr	r0, [pc, #4]	; (80108c8 <__malloc_lock+0x8>)
 80108c2:	f7ff bf84 	b.w	80107ce <__retarget_lock_acquire_recursive>
 80108c6:	bf00      	nop
 80108c8:	20007408 	.word	0x20007408

080108cc <__malloc_unlock>:
 80108cc:	4801      	ldr	r0, [pc, #4]	; (80108d4 <__malloc_unlock+0x8>)
 80108ce:	f7ff bf7f 	b.w	80107d0 <__retarget_lock_release_recursive>
 80108d2:	bf00      	nop
 80108d4:	20007408 	.word	0x20007408

080108d8 <_Balloc>:
 80108d8:	b570      	push	{r4, r5, r6, lr}
 80108da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80108dc:	4604      	mov	r4, r0
 80108de:	460d      	mov	r5, r1
 80108e0:	b976      	cbnz	r6, 8010900 <_Balloc+0x28>
 80108e2:	2010      	movs	r0, #16
 80108e4:	f7fc fcc4 	bl	800d270 <malloc>
 80108e8:	4602      	mov	r2, r0
 80108ea:	6260      	str	r0, [r4, #36]	; 0x24
 80108ec:	b920      	cbnz	r0, 80108f8 <_Balloc+0x20>
 80108ee:	4b18      	ldr	r3, [pc, #96]	; (8010950 <_Balloc+0x78>)
 80108f0:	4818      	ldr	r0, [pc, #96]	; (8010954 <_Balloc+0x7c>)
 80108f2:	2166      	movs	r1, #102	; 0x66
 80108f4:	f000 ffdc 	bl	80118b0 <__assert_func>
 80108f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108fc:	6006      	str	r6, [r0, #0]
 80108fe:	60c6      	str	r6, [r0, #12]
 8010900:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010902:	68f3      	ldr	r3, [r6, #12]
 8010904:	b183      	cbz	r3, 8010928 <_Balloc+0x50>
 8010906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010908:	68db      	ldr	r3, [r3, #12]
 801090a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801090e:	b9b8      	cbnz	r0, 8010940 <_Balloc+0x68>
 8010910:	2101      	movs	r1, #1
 8010912:	fa01 f605 	lsl.w	r6, r1, r5
 8010916:	1d72      	adds	r2, r6, #5
 8010918:	0092      	lsls	r2, r2, #2
 801091a:	4620      	mov	r0, r4
 801091c:	f7fc fcc6 	bl	800d2ac <_calloc_r>
 8010920:	b160      	cbz	r0, 801093c <_Balloc+0x64>
 8010922:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010926:	e00e      	b.n	8010946 <_Balloc+0x6e>
 8010928:	2221      	movs	r2, #33	; 0x21
 801092a:	2104      	movs	r1, #4
 801092c:	4620      	mov	r0, r4
 801092e:	f7fc fcbd 	bl	800d2ac <_calloc_r>
 8010932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010934:	60f0      	str	r0, [r6, #12]
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d1e4      	bne.n	8010906 <_Balloc+0x2e>
 801093c:	2000      	movs	r0, #0
 801093e:	bd70      	pop	{r4, r5, r6, pc}
 8010940:	6802      	ldr	r2, [r0, #0]
 8010942:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010946:	2300      	movs	r3, #0
 8010948:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801094c:	e7f7      	b.n	801093e <_Balloc+0x66>
 801094e:	bf00      	nop
 8010950:	08013dbe 	.word	0x08013dbe
 8010954:	08013f28 	.word	0x08013f28

08010958 <_Bfree>:
 8010958:	b570      	push	{r4, r5, r6, lr}
 801095a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801095c:	4605      	mov	r5, r0
 801095e:	460c      	mov	r4, r1
 8010960:	b976      	cbnz	r6, 8010980 <_Bfree+0x28>
 8010962:	2010      	movs	r0, #16
 8010964:	f7fc fc84 	bl	800d270 <malloc>
 8010968:	4602      	mov	r2, r0
 801096a:	6268      	str	r0, [r5, #36]	; 0x24
 801096c:	b920      	cbnz	r0, 8010978 <_Bfree+0x20>
 801096e:	4b09      	ldr	r3, [pc, #36]	; (8010994 <_Bfree+0x3c>)
 8010970:	4809      	ldr	r0, [pc, #36]	; (8010998 <_Bfree+0x40>)
 8010972:	218a      	movs	r1, #138	; 0x8a
 8010974:	f000 ff9c 	bl	80118b0 <__assert_func>
 8010978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801097c:	6006      	str	r6, [r0, #0]
 801097e:	60c6      	str	r6, [r0, #12]
 8010980:	b13c      	cbz	r4, 8010992 <_Bfree+0x3a>
 8010982:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010984:	6862      	ldr	r2, [r4, #4]
 8010986:	68db      	ldr	r3, [r3, #12]
 8010988:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801098c:	6021      	str	r1, [r4, #0]
 801098e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010992:	bd70      	pop	{r4, r5, r6, pc}
 8010994:	08013dbe 	.word	0x08013dbe
 8010998:	08013f28 	.word	0x08013f28

0801099c <__multadd>:
 801099c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109a0:	690e      	ldr	r6, [r1, #16]
 80109a2:	4607      	mov	r7, r0
 80109a4:	4698      	mov	r8, r3
 80109a6:	460c      	mov	r4, r1
 80109a8:	f101 0014 	add.w	r0, r1, #20
 80109ac:	2300      	movs	r3, #0
 80109ae:	6805      	ldr	r5, [r0, #0]
 80109b0:	b2a9      	uxth	r1, r5
 80109b2:	fb02 8101 	mla	r1, r2, r1, r8
 80109b6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80109ba:	0c2d      	lsrs	r5, r5, #16
 80109bc:	fb02 c505 	mla	r5, r2, r5, ip
 80109c0:	b289      	uxth	r1, r1
 80109c2:	3301      	adds	r3, #1
 80109c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80109c8:	429e      	cmp	r6, r3
 80109ca:	f840 1b04 	str.w	r1, [r0], #4
 80109ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80109d2:	dcec      	bgt.n	80109ae <__multadd+0x12>
 80109d4:	f1b8 0f00 	cmp.w	r8, #0
 80109d8:	d022      	beq.n	8010a20 <__multadd+0x84>
 80109da:	68a3      	ldr	r3, [r4, #8]
 80109dc:	42b3      	cmp	r3, r6
 80109de:	dc19      	bgt.n	8010a14 <__multadd+0x78>
 80109e0:	6861      	ldr	r1, [r4, #4]
 80109e2:	4638      	mov	r0, r7
 80109e4:	3101      	adds	r1, #1
 80109e6:	f7ff ff77 	bl	80108d8 <_Balloc>
 80109ea:	4605      	mov	r5, r0
 80109ec:	b928      	cbnz	r0, 80109fa <__multadd+0x5e>
 80109ee:	4602      	mov	r2, r0
 80109f0:	4b0d      	ldr	r3, [pc, #52]	; (8010a28 <__multadd+0x8c>)
 80109f2:	480e      	ldr	r0, [pc, #56]	; (8010a2c <__multadd+0x90>)
 80109f4:	21b5      	movs	r1, #181	; 0xb5
 80109f6:	f000 ff5b 	bl	80118b0 <__assert_func>
 80109fa:	6922      	ldr	r2, [r4, #16]
 80109fc:	3202      	adds	r2, #2
 80109fe:	f104 010c 	add.w	r1, r4, #12
 8010a02:	0092      	lsls	r2, r2, #2
 8010a04:	300c      	adds	r0, #12
 8010a06:	f7fc fc3b 	bl	800d280 <memcpy>
 8010a0a:	4621      	mov	r1, r4
 8010a0c:	4638      	mov	r0, r7
 8010a0e:	f7ff ffa3 	bl	8010958 <_Bfree>
 8010a12:	462c      	mov	r4, r5
 8010a14:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010a18:	3601      	adds	r6, #1
 8010a1a:	f8c3 8014 	str.w	r8, [r3, #20]
 8010a1e:	6126      	str	r6, [r4, #16]
 8010a20:	4620      	mov	r0, r4
 8010a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a26:	bf00      	nop
 8010a28:	08013e34 	.word	0x08013e34
 8010a2c:	08013f28 	.word	0x08013f28

08010a30 <__s2b>:
 8010a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a34:	460c      	mov	r4, r1
 8010a36:	4615      	mov	r5, r2
 8010a38:	461f      	mov	r7, r3
 8010a3a:	2209      	movs	r2, #9
 8010a3c:	3308      	adds	r3, #8
 8010a3e:	4606      	mov	r6, r0
 8010a40:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a44:	2100      	movs	r1, #0
 8010a46:	2201      	movs	r2, #1
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	db09      	blt.n	8010a60 <__s2b+0x30>
 8010a4c:	4630      	mov	r0, r6
 8010a4e:	f7ff ff43 	bl	80108d8 <_Balloc>
 8010a52:	b940      	cbnz	r0, 8010a66 <__s2b+0x36>
 8010a54:	4602      	mov	r2, r0
 8010a56:	4b19      	ldr	r3, [pc, #100]	; (8010abc <__s2b+0x8c>)
 8010a58:	4819      	ldr	r0, [pc, #100]	; (8010ac0 <__s2b+0x90>)
 8010a5a:	21ce      	movs	r1, #206	; 0xce
 8010a5c:	f000 ff28 	bl	80118b0 <__assert_func>
 8010a60:	0052      	lsls	r2, r2, #1
 8010a62:	3101      	adds	r1, #1
 8010a64:	e7f0      	b.n	8010a48 <__s2b+0x18>
 8010a66:	9b08      	ldr	r3, [sp, #32]
 8010a68:	6143      	str	r3, [r0, #20]
 8010a6a:	2d09      	cmp	r5, #9
 8010a6c:	f04f 0301 	mov.w	r3, #1
 8010a70:	6103      	str	r3, [r0, #16]
 8010a72:	dd16      	ble.n	8010aa2 <__s2b+0x72>
 8010a74:	f104 0909 	add.w	r9, r4, #9
 8010a78:	46c8      	mov	r8, r9
 8010a7a:	442c      	add	r4, r5
 8010a7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010a80:	4601      	mov	r1, r0
 8010a82:	3b30      	subs	r3, #48	; 0x30
 8010a84:	220a      	movs	r2, #10
 8010a86:	4630      	mov	r0, r6
 8010a88:	f7ff ff88 	bl	801099c <__multadd>
 8010a8c:	45a0      	cmp	r8, r4
 8010a8e:	d1f5      	bne.n	8010a7c <__s2b+0x4c>
 8010a90:	f1a5 0408 	sub.w	r4, r5, #8
 8010a94:	444c      	add	r4, r9
 8010a96:	1b2d      	subs	r5, r5, r4
 8010a98:	1963      	adds	r3, r4, r5
 8010a9a:	42bb      	cmp	r3, r7
 8010a9c:	db04      	blt.n	8010aa8 <__s2b+0x78>
 8010a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010aa2:	340a      	adds	r4, #10
 8010aa4:	2509      	movs	r5, #9
 8010aa6:	e7f6      	b.n	8010a96 <__s2b+0x66>
 8010aa8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010aac:	4601      	mov	r1, r0
 8010aae:	3b30      	subs	r3, #48	; 0x30
 8010ab0:	220a      	movs	r2, #10
 8010ab2:	4630      	mov	r0, r6
 8010ab4:	f7ff ff72 	bl	801099c <__multadd>
 8010ab8:	e7ee      	b.n	8010a98 <__s2b+0x68>
 8010aba:	bf00      	nop
 8010abc:	08013e34 	.word	0x08013e34
 8010ac0:	08013f28 	.word	0x08013f28

08010ac4 <__hi0bits>:
 8010ac4:	0c03      	lsrs	r3, r0, #16
 8010ac6:	041b      	lsls	r3, r3, #16
 8010ac8:	b9d3      	cbnz	r3, 8010b00 <__hi0bits+0x3c>
 8010aca:	0400      	lsls	r0, r0, #16
 8010acc:	2310      	movs	r3, #16
 8010ace:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010ad2:	bf04      	itt	eq
 8010ad4:	0200      	lsleq	r0, r0, #8
 8010ad6:	3308      	addeq	r3, #8
 8010ad8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010adc:	bf04      	itt	eq
 8010ade:	0100      	lsleq	r0, r0, #4
 8010ae0:	3304      	addeq	r3, #4
 8010ae2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010ae6:	bf04      	itt	eq
 8010ae8:	0080      	lsleq	r0, r0, #2
 8010aea:	3302      	addeq	r3, #2
 8010aec:	2800      	cmp	r0, #0
 8010aee:	db05      	blt.n	8010afc <__hi0bits+0x38>
 8010af0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010af4:	f103 0301 	add.w	r3, r3, #1
 8010af8:	bf08      	it	eq
 8010afa:	2320      	moveq	r3, #32
 8010afc:	4618      	mov	r0, r3
 8010afe:	4770      	bx	lr
 8010b00:	2300      	movs	r3, #0
 8010b02:	e7e4      	b.n	8010ace <__hi0bits+0xa>

08010b04 <__lo0bits>:
 8010b04:	6803      	ldr	r3, [r0, #0]
 8010b06:	f013 0207 	ands.w	r2, r3, #7
 8010b0a:	4601      	mov	r1, r0
 8010b0c:	d00b      	beq.n	8010b26 <__lo0bits+0x22>
 8010b0e:	07da      	lsls	r2, r3, #31
 8010b10:	d424      	bmi.n	8010b5c <__lo0bits+0x58>
 8010b12:	0798      	lsls	r0, r3, #30
 8010b14:	bf49      	itett	mi
 8010b16:	085b      	lsrmi	r3, r3, #1
 8010b18:	089b      	lsrpl	r3, r3, #2
 8010b1a:	2001      	movmi	r0, #1
 8010b1c:	600b      	strmi	r3, [r1, #0]
 8010b1e:	bf5c      	itt	pl
 8010b20:	600b      	strpl	r3, [r1, #0]
 8010b22:	2002      	movpl	r0, #2
 8010b24:	4770      	bx	lr
 8010b26:	b298      	uxth	r0, r3
 8010b28:	b9b0      	cbnz	r0, 8010b58 <__lo0bits+0x54>
 8010b2a:	0c1b      	lsrs	r3, r3, #16
 8010b2c:	2010      	movs	r0, #16
 8010b2e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010b32:	bf04      	itt	eq
 8010b34:	0a1b      	lsreq	r3, r3, #8
 8010b36:	3008      	addeq	r0, #8
 8010b38:	071a      	lsls	r2, r3, #28
 8010b3a:	bf04      	itt	eq
 8010b3c:	091b      	lsreq	r3, r3, #4
 8010b3e:	3004      	addeq	r0, #4
 8010b40:	079a      	lsls	r2, r3, #30
 8010b42:	bf04      	itt	eq
 8010b44:	089b      	lsreq	r3, r3, #2
 8010b46:	3002      	addeq	r0, #2
 8010b48:	07da      	lsls	r2, r3, #31
 8010b4a:	d403      	bmi.n	8010b54 <__lo0bits+0x50>
 8010b4c:	085b      	lsrs	r3, r3, #1
 8010b4e:	f100 0001 	add.w	r0, r0, #1
 8010b52:	d005      	beq.n	8010b60 <__lo0bits+0x5c>
 8010b54:	600b      	str	r3, [r1, #0]
 8010b56:	4770      	bx	lr
 8010b58:	4610      	mov	r0, r2
 8010b5a:	e7e8      	b.n	8010b2e <__lo0bits+0x2a>
 8010b5c:	2000      	movs	r0, #0
 8010b5e:	4770      	bx	lr
 8010b60:	2020      	movs	r0, #32
 8010b62:	4770      	bx	lr

08010b64 <__i2b>:
 8010b64:	b510      	push	{r4, lr}
 8010b66:	460c      	mov	r4, r1
 8010b68:	2101      	movs	r1, #1
 8010b6a:	f7ff feb5 	bl	80108d8 <_Balloc>
 8010b6e:	4602      	mov	r2, r0
 8010b70:	b928      	cbnz	r0, 8010b7e <__i2b+0x1a>
 8010b72:	4b05      	ldr	r3, [pc, #20]	; (8010b88 <__i2b+0x24>)
 8010b74:	4805      	ldr	r0, [pc, #20]	; (8010b8c <__i2b+0x28>)
 8010b76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010b7a:	f000 fe99 	bl	80118b0 <__assert_func>
 8010b7e:	2301      	movs	r3, #1
 8010b80:	6144      	str	r4, [r0, #20]
 8010b82:	6103      	str	r3, [r0, #16]
 8010b84:	bd10      	pop	{r4, pc}
 8010b86:	bf00      	nop
 8010b88:	08013e34 	.word	0x08013e34
 8010b8c:	08013f28 	.word	0x08013f28

08010b90 <__multiply>:
 8010b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b94:	4614      	mov	r4, r2
 8010b96:	690a      	ldr	r2, [r1, #16]
 8010b98:	6923      	ldr	r3, [r4, #16]
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	bfb8      	it	lt
 8010b9e:	460b      	movlt	r3, r1
 8010ba0:	460d      	mov	r5, r1
 8010ba2:	bfbc      	itt	lt
 8010ba4:	4625      	movlt	r5, r4
 8010ba6:	461c      	movlt	r4, r3
 8010ba8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010bac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010bb0:	68ab      	ldr	r3, [r5, #8]
 8010bb2:	6869      	ldr	r1, [r5, #4]
 8010bb4:	eb0a 0709 	add.w	r7, sl, r9
 8010bb8:	42bb      	cmp	r3, r7
 8010bba:	b085      	sub	sp, #20
 8010bbc:	bfb8      	it	lt
 8010bbe:	3101      	addlt	r1, #1
 8010bc0:	f7ff fe8a 	bl	80108d8 <_Balloc>
 8010bc4:	b930      	cbnz	r0, 8010bd4 <__multiply+0x44>
 8010bc6:	4602      	mov	r2, r0
 8010bc8:	4b42      	ldr	r3, [pc, #264]	; (8010cd4 <__multiply+0x144>)
 8010bca:	4843      	ldr	r0, [pc, #268]	; (8010cd8 <__multiply+0x148>)
 8010bcc:	f240 115d 	movw	r1, #349	; 0x15d
 8010bd0:	f000 fe6e 	bl	80118b0 <__assert_func>
 8010bd4:	f100 0614 	add.w	r6, r0, #20
 8010bd8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010bdc:	4633      	mov	r3, r6
 8010bde:	2200      	movs	r2, #0
 8010be0:	4543      	cmp	r3, r8
 8010be2:	d31e      	bcc.n	8010c22 <__multiply+0x92>
 8010be4:	f105 0c14 	add.w	ip, r5, #20
 8010be8:	f104 0314 	add.w	r3, r4, #20
 8010bec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010bf0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010bf4:	9202      	str	r2, [sp, #8]
 8010bf6:	ebac 0205 	sub.w	r2, ip, r5
 8010bfa:	3a15      	subs	r2, #21
 8010bfc:	f022 0203 	bic.w	r2, r2, #3
 8010c00:	3204      	adds	r2, #4
 8010c02:	f105 0115 	add.w	r1, r5, #21
 8010c06:	458c      	cmp	ip, r1
 8010c08:	bf38      	it	cc
 8010c0a:	2204      	movcc	r2, #4
 8010c0c:	9201      	str	r2, [sp, #4]
 8010c0e:	9a02      	ldr	r2, [sp, #8]
 8010c10:	9303      	str	r3, [sp, #12]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d808      	bhi.n	8010c28 <__multiply+0x98>
 8010c16:	2f00      	cmp	r7, #0
 8010c18:	dc55      	bgt.n	8010cc6 <__multiply+0x136>
 8010c1a:	6107      	str	r7, [r0, #16]
 8010c1c:	b005      	add	sp, #20
 8010c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c22:	f843 2b04 	str.w	r2, [r3], #4
 8010c26:	e7db      	b.n	8010be0 <__multiply+0x50>
 8010c28:	f8b3 a000 	ldrh.w	sl, [r3]
 8010c2c:	f1ba 0f00 	cmp.w	sl, #0
 8010c30:	d020      	beq.n	8010c74 <__multiply+0xe4>
 8010c32:	f105 0e14 	add.w	lr, r5, #20
 8010c36:	46b1      	mov	r9, r6
 8010c38:	2200      	movs	r2, #0
 8010c3a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010c3e:	f8d9 b000 	ldr.w	fp, [r9]
 8010c42:	b2a1      	uxth	r1, r4
 8010c44:	fa1f fb8b 	uxth.w	fp, fp
 8010c48:	fb0a b101 	mla	r1, sl, r1, fp
 8010c4c:	4411      	add	r1, r2
 8010c4e:	f8d9 2000 	ldr.w	r2, [r9]
 8010c52:	0c24      	lsrs	r4, r4, #16
 8010c54:	0c12      	lsrs	r2, r2, #16
 8010c56:	fb0a 2404 	mla	r4, sl, r4, r2
 8010c5a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010c5e:	b289      	uxth	r1, r1
 8010c60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010c64:	45f4      	cmp	ip, lr
 8010c66:	f849 1b04 	str.w	r1, [r9], #4
 8010c6a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010c6e:	d8e4      	bhi.n	8010c3a <__multiply+0xaa>
 8010c70:	9901      	ldr	r1, [sp, #4]
 8010c72:	5072      	str	r2, [r6, r1]
 8010c74:	9a03      	ldr	r2, [sp, #12]
 8010c76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010c7a:	3304      	adds	r3, #4
 8010c7c:	f1b9 0f00 	cmp.w	r9, #0
 8010c80:	d01f      	beq.n	8010cc2 <__multiply+0x132>
 8010c82:	6834      	ldr	r4, [r6, #0]
 8010c84:	f105 0114 	add.w	r1, r5, #20
 8010c88:	46b6      	mov	lr, r6
 8010c8a:	f04f 0a00 	mov.w	sl, #0
 8010c8e:	880a      	ldrh	r2, [r1, #0]
 8010c90:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010c94:	fb09 b202 	mla	r2, r9, r2, fp
 8010c98:	4492      	add	sl, r2
 8010c9a:	b2a4      	uxth	r4, r4
 8010c9c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010ca0:	f84e 4b04 	str.w	r4, [lr], #4
 8010ca4:	f851 4b04 	ldr.w	r4, [r1], #4
 8010ca8:	f8be 2000 	ldrh.w	r2, [lr]
 8010cac:	0c24      	lsrs	r4, r4, #16
 8010cae:	fb09 2404 	mla	r4, r9, r4, r2
 8010cb2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010cb6:	458c      	cmp	ip, r1
 8010cb8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010cbc:	d8e7      	bhi.n	8010c8e <__multiply+0xfe>
 8010cbe:	9a01      	ldr	r2, [sp, #4]
 8010cc0:	50b4      	str	r4, [r6, r2]
 8010cc2:	3604      	adds	r6, #4
 8010cc4:	e7a3      	b.n	8010c0e <__multiply+0x7e>
 8010cc6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d1a5      	bne.n	8010c1a <__multiply+0x8a>
 8010cce:	3f01      	subs	r7, #1
 8010cd0:	e7a1      	b.n	8010c16 <__multiply+0x86>
 8010cd2:	bf00      	nop
 8010cd4:	08013e34 	.word	0x08013e34
 8010cd8:	08013f28 	.word	0x08013f28

08010cdc <__pow5mult>:
 8010cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ce0:	4615      	mov	r5, r2
 8010ce2:	f012 0203 	ands.w	r2, r2, #3
 8010ce6:	4606      	mov	r6, r0
 8010ce8:	460f      	mov	r7, r1
 8010cea:	d007      	beq.n	8010cfc <__pow5mult+0x20>
 8010cec:	4c25      	ldr	r4, [pc, #148]	; (8010d84 <__pow5mult+0xa8>)
 8010cee:	3a01      	subs	r2, #1
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010cf6:	f7ff fe51 	bl	801099c <__multadd>
 8010cfa:	4607      	mov	r7, r0
 8010cfc:	10ad      	asrs	r5, r5, #2
 8010cfe:	d03d      	beq.n	8010d7c <__pow5mult+0xa0>
 8010d00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010d02:	b97c      	cbnz	r4, 8010d24 <__pow5mult+0x48>
 8010d04:	2010      	movs	r0, #16
 8010d06:	f7fc fab3 	bl	800d270 <malloc>
 8010d0a:	4602      	mov	r2, r0
 8010d0c:	6270      	str	r0, [r6, #36]	; 0x24
 8010d0e:	b928      	cbnz	r0, 8010d1c <__pow5mult+0x40>
 8010d10:	4b1d      	ldr	r3, [pc, #116]	; (8010d88 <__pow5mult+0xac>)
 8010d12:	481e      	ldr	r0, [pc, #120]	; (8010d8c <__pow5mult+0xb0>)
 8010d14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010d18:	f000 fdca 	bl	80118b0 <__assert_func>
 8010d1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010d20:	6004      	str	r4, [r0, #0]
 8010d22:	60c4      	str	r4, [r0, #12]
 8010d24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010d28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010d2c:	b94c      	cbnz	r4, 8010d42 <__pow5mult+0x66>
 8010d2e:	f240 2171 	movw	r1, #625	; 0x271
 8010d32:	4630      	mov	r0, r6
 8010d34:	f7ff ff16 	bl	8010b64 <__i2b>
 8010d38:	2300      	movs	r3, #0
 8010d3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8010d3e:	4604      	mov	r4, r0
 8010d40:	6003      	str	r3, [r0, #0]
 8010d42:	f04f 0900 	mov.w	r9, #0
 8010d46:	07eb      	lsls	r3, r5, #31
 8010d48:	d50a      	bpl.n	8010d60 <__pow5mult+0x84>
 8010d4a:	4639      	mov	r1, r7
 8010d4c:	4622      	mov	r2, r4
 8010d4e:	4630      	mov	r0, r6
 8010d50:	f7ff ff1e 	bl	8010b90 <__multiply>
 8010d54:	4639      	mov	r1, r7
 8010d56:	4680      	mov	r8, r0
 8010d58:	4630      	mov	r0, r6
 8010d5a:	f7ff fdfd 	bl	8010958 <_Bfree>
 8010d5e:	4647      	mov	r7, r8
 8010d60:	106d      	asrs	r5, r5, #1
 8010d62:	d00b      	beq.n	8010d7c <__pow5mult+0xa0>
 8010d64:	6820      	ldr	r0, [r4, #0]
 8010d66:	b938      	cbnz	r0, 8010d78 <__pow5mult+0x9c>
 8010d68:	4622      	mov	r2, r4
 8010d6a:	4621      	mov	r1, r4
 8010d6c:	4630      	mov	r0, r6
 8010d6e:	f7ff ff0f 	bl	8010b90 <__multiply>
 8010d72:	6020      	str	r0, [r4, #0]
 8010d74:	f8c0 9000 	str.w	r9, [r0]
 8010d78:	4604      	mov	r4, r0
 8010d7a:	e7e4      	b.n	8010d46 <__pow5mult+0x6a>
 8010d7c:	4638      	mov	r0, r7
 8010d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d82:	bf00      	nop
 8010d84:	08014078 	.word	0x08014078
 8010d88:	08013dbe 	.word	0x08013dbe
 8010d8c:	08013f28 	.word	0x08013f28

08010d90 <__lshift>:
 8010d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d94:	460c      	mov	r4, r1
 8010d96:	6849      	ldr	r1, [r1, #4]
 8010d98:	6923      	ldr	r3, [r4, #16]
 8010d9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010d9e:	68a3      	ldr	r3, [r4, #8]
 8010da0:	4607      	mov	r7, r0
 8010da2:	4691      	mov	r9, r2
 8010da4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010da8:	f108 0601 	add.w	r6, r8, #1
 8010dac:	42b3      	cmp	r3, r6
 8010dae:	db0b      	blt.n	8010dc8 <__lshift+0x38>
 8010db0:	4638      	mov	r0, r7
 8010db2:	f7ff fd91 	bl	80108d8 <_Balloc>
 8010db6:	4605      	mov	r5, r0
 8010db8:	b948      	cbnz	r0, 8010dce <__lshift+0x3e>
 8010dba:	4602      	mov	r2, r0
 8010dbc:	4b28      	ldr	r3, [pc, #160]	; (8010e60 <__lshift+0xd0>)
 8010dbe:	4829      	ldr	r0, [pc, #164]	; (8010e64 <__lshift+0xd4>)
 8010dc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010dc4:	f000 fd74 	bl	80118b0 <__assert_func>
 8010dc8:	3101      	adds	r1, #1
 8010dca:	005b      	lsls	r3, r3, #1
 8010dcc:	e7ee      	b.n	8010dac <__lshift+0x1c>
 8010dce:	2300      	movs	r3, #0
 8010dd0:	f100 0114 	add.w	r1, r0, #20
 8010dd4:	f100 0210 	add.w	r2, r0, #16
 8010dd8:	4618      	mov	r0, r3
 8010dda:	4553      	cmp	r3, sl
 8010ddc:	db33      	blt.n	8010e46 <__lshift+0xb6>
 8010dde:	6920      	ldr	r0, [r4, #16]
 8010de0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010de4:	f104 0314 	add.w	r3, r4, #20
 8010de8:	f019 091f 	ands.w	r9, r9, #31
 8010dec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010df0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010df4:	d02b      	beq.n	8010e4e <__lshift+0xbe>
 8010df6:	f1c9 0e20 	rsb	lr, r9, #32
 8010dfa:	468a      	mov	sl, r1
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	6818      	ldr	r0, [r3, #0]
 8010e00:	fa00 f009 	lsl.w	r0, r0, r9
 8010e04:	4302      	orrs	r2, r0
 8010e06:	f84a 2b04 	str.w	r2, [sl], #4
 8010e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e0e:	459c      	cmp	ip, r3
 8010e10:	fa22 f20e 	lsr.w	r2, r2, lr
 8010e14:	d8f3      	bhi.n	8010dfe <__lshift+0x6e>
 8010e16:	ebac 0304 	sub.w	r3, ip, r4
 8010e1a:	3b15      	subs	r3, #21
 8010e1c:	f023 0303 	bic.w	r3, r3, #3
 8010e20:	3304      	adds	r3, #4
 8010e22:	f104 0015 	add.w	r0, r4, #21
 8010e26:	4584      	cmp	ip, r0
 8010e28:	bf38      	it	cc
 8010e2a:	2304      	movcc	r3, #4
 8010e2c:	50ca      	str	r2, [r1, r3]
 8010e2e:	b10a      	cbz	r2, 8010e34 <__lshift+0xa4>
 8010e30:	f108 0602 	add.w	r6, r8, #2
 8010e34:	3e01      	subs	r6, #1
 8010e36:	4638      	mov	r0, r7
 8010e38:	612e      	str	r6, [r5, #16]
 8010e3a:	4621      	mov	r1, r4
 8010e3c:	f7ff fd8c 	bl	8010958 <_Bfree>
 8010e40:	4628      	mov	r0, r5
 8010e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e46:	f842 0f04 	str.w	r0, [r2, #4]!
 8010e4a:	3301      	adds	r3, #1
 8010e4c:	e7c5      	b.n	8010dda <__lshift+0x4a>
 8010e4e:	3904      	subs	r1, #4
 8010e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e54:	f841 2f04 	str.w	r2, [r1, #4]!
 8010e58:	459c      	cmp	ip, r3
 8010e5a:	d8f9      	bhi.n	8010e50 <__lshift+0xc0>
 8010e5c:	e7ea      	b.n	8010e34 <__lshift+0xa4>
 8010e5e:	bf00      	nop
 8010e60:	08013e34 	.word	0x08013e34
 8010e64:	08013f28 	.word	0x08013f28

08010e68 <__mcmp>:
 8010e68:	b530      	push	{r4, r5, lr}
 8010e6a:	6902      	ldr	r2, [r0, #16]
 8010e6c:	690c      	ldr	r4, [r1, #16]
 8010e6e:	1b12      	subs	r2, r2, r4
 8010e70:	d10e      	bne.n	8010e90 <__mcmp+0x28>
 8010e72:	f100 0314 	add.w	r3, r0, #20
 8010e76:	3114      	adds	r1, #20
 8010e78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010e7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010e80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010e84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010e88:	42a5      	cmp	r5, r4
 8010e8a:	d003      	beq.n	8010e94 <__mcmp+0x2c>
 8010e8c:	d305      	bcc.n	8010e9a <__mcmp+0x32>
 8010e8e:	2201      	movs	r2, #1
 8010e90:	4610      	mov	r0, r2
 8010e92:	bd30      	pop	{r4, r5, pc}
 8010e94:	4283      	cmp	r3, r0
 8010e96:	d3f3      	bcc.n	8010e80 <__mcmp+0x18>
 8010e98:	e7fa      	b.n	8010e90 <__mcmp+0x28>
 8010e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e9e:	e7f7      	b.n	8010e90 <__mcmp+0x28>

08010ea0 <__mdiff>:
 8010ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea4:	460c      	mov	r4, r1
 8010ea6:	4606      	mov	r6, r0
 8010ea8:	4611      	mov	r1, r2
 8010eaa:	4620      	mov	r0, r4
 8010eac:	4617      	mov	r7, r2
 8010eae:	f7ff ffdb 	bl	8010e68 <__mcmp>
 8010eb2:	1e05      	subs	r5, r0, #0
 8010eb4:	d110      	bne.n	8010ed8 <__mdiff+0x38>
 8010eb6:	4629      	mov	r1, r5
 8010eb8:	4630      	mov	r0, r6
 8010eba:	f7ff fd0d 	bl	80108d8 <_Balloc>
 8010ebe:	b930      	cbnz	r0, 8010ece <__mdiff+0x2e>
 8010ec0:	4b39      	ldr	r3, [pc, #228]	; (8010fa8 <__mdiff+0x108>)
 8010ec2:	4602      	mov	r2, r0
 8010ec4:	f240 2132 	movw	r1, #562	; 0x232
 8010ec8:	4838      	ldr	r0, [pc, #224]	; (8010fac <__mdiff+0x10c>)
 8010eca:	f000 fcf1 	bl	80118b0 <__assert_func>
 8010ece:	2301      	movs	r3, #1
 8010ed0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed8:	bfa4      	itt	ge
 8010eda:	463b      	movge	r3, r7
 8010edc:	4627      	movge	r7, r4
 8010ede:	4630      	mov	r0, r6
 8010ee0:	6879      	ldr	r1, [r7, #4]
 8010ee2:	bfa6      	itte	ge
 8010ee4:	461c      	movge	r4, r3
 8010ee6:	2500      	movge	r5, #0
 8010ee8:	2501      	movlt	r5, #1
 8010eea:	f7ff fcf5 	bl	80108d8 <_Balloc>
 8010eee:	b920      	cbnz	r0, 8010efa <__mdiff+0x5a>
 8010ef0:	4b2d      	ldr	r3, [pc, #180]	; (8010fa8 <__mdiff+0x108>)
 8010ef2:	4602      	mov	r2, r0
 8010ef4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010ef8:	e7e6      	b.n	8010ec8 <__mdiff+0x28>
 8010efa:	693e      	ldr	r6, [r7, #16]
 8010efc:	60c5      	str	r5, [r0, #12]
 8010efe:	6925      	ldr	r5, [r4, #16]
 8010f00:	f107 0114 	add.w	r1, r7, #20
 8010f04:	f104 0914 	add.w	r9, r4, #20
 8010f08:	f100 0e14 	add.w	lr, r0, #20
 8010f0c:	f107 0210 	add.w	r2, r7, #16
 8010f10:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010f14:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010f18:	46f2      	mov	sl, lr
 8010f1a:	2700      	movs	r7, #0
 8010f1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010f20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010f24:	fa1f f883 	uxth.w	r8, r3
 8010f28:	fa17 f78b 	uxtah	r7, r7, fp
 8010f2c:	0c1b      	lsrs	r3, r3, #16
 8010f2e:	eba7 0808 	sub.w	r8, r7, r8
 8010f32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010f36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010f3a:	fa1f f888 	uxth.w	r8, r8
 8010f3e:	141f      	asrs	r7, r3, #16
 8010f40:	454d      	cmp	r5, r9
 8010f42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010f46:	f84a 3b04 	str.w	r3, [sl], #4
 8010f4a:	d8e7      	bhi.n	8010f1c <__mdiff+0x7c>
 8010f4c:	1b2b      	subs	r3, r5, r4
 8010f4e:	3b15      	subs	r3, #21
 8010f50:	f023 0303 	bic.w	r3, r3, #3
 8010f54:	3304      	adds	r3, #4
 8010f56:	3415      	adds	r4, #21
 8010f58:	42a5      	cmp	r5, r4
 8010f5a:	bf38      	it	cc
 8010f5c:	2304      	movcc	r3, #4
 8010f5e:	4419      	add	r1, r3
 8010f60:	4473      	add	r3, lr
 8010f62:	469e      	mov	lr, r3
 8010f64:	460d      	mov	r5, r1
 8010f66:	4565      	cmp	r5, ip
 8010f68:	d30e      	bcc.n	8010f88 <__mdiff+0xe8>
 8010f6a:	f10c 0203 	add.w	r2, ip, #3
 8010f6e:	1a52      	subs	r2, r2, r1
 8010f70:	f022 0203 	bic.w	r2, r2, #3
 8010f74:	3903      	subs	r1, #3
 8010f76:	458c      	cmp	ip, r1
 8010f78:	bf38      	it	cc
 8010f7a:	2200      	movcc	r2, #0
 8010f7c:	441a      	add	r2, r3
 8010f7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010f82:	b17b      	cbz	r3, 8010fa4 <__mdiff+0x104>
 8010f84:	6106      	str	r6, [r0, #16]
 8010f86:	e7a5      	b.n	8010ed4 <__mdiff+0x34>
 8010f88:	f855 8b04 	ldr.w	r8, [r5], #4
 8010f8c:	fa17 f488 	uxtah	r4, r7, r8
 8010f90:	1422      	asrs	r2, r4, #16
 8010f92:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010f96:	b2a4      	uxth	r4, r4
 8010f98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010f9c:	f84e 4b04 	str.w	r4, [lr], #4
 8010fa0:	1417      	asrs	r7, r2, #16
 8010fa2:	e7e0      	b.n	8010f66 <__mdiff+0xc6>
 8010fa4:	3e01      	subs	r6, #1
 8010fa6:	e7ea      	b.n	8010f7e <__mdiff+0xde>
 8010fa8:	08013e34 	.word	0x08013e34
 8010fac:	08013f28 	.word	0x08013f28

08010fb0 <__ulp>:
 8010fb0:	b082      	sub	sp, #8
 8010fb2:	ed8d 0b00 	vstr	d0, [sp]
 8010fb6:	9b01      	ldr	r3, [sp, #4]
 8010fb8:	4912      	ldr	r1, [pc, #72]	; (8011004 <__ulp+0x54>)
 8010fba:	4019      	ands	r1, r3
 8010fbc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010fc0:	2900      	cmp	r1, #0
 8010fc2:	dd05      	ble.n	8010fd0 <__ulp+0x20>
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	460b      	mov	r3, r1
 8010fc8:	ec43 2b10 	vmov	d0, r2, r3
 8010fcc:	b002      	add	sp, #8
 8010fce:	4770      	bx	lr
 8010fd0:	4249      	negs	r1, r1
 8010fd2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010fd6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010fda:	f04f 0200 	mov.w	r2, #0
 8010fde:	f04f 0300 	mov.w	r3, #0
 8010fe2:	da04      	bge.n	8010fee <__ulp+0x3e>
 8010fe4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010fe8:	fa41 f300 	asr.w	r3, r1, r0
 8010fec:	e7ec      	b.n	8010fc8 <__ulp+0x18>
 8010fee:	f1a0 0114 	sub.w	r1, r0, #20
 8010ff2:	291e      	cmp	r1, #30
 8010ff4:	bfda      	itte	le
 8010ff6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010ffa:	fa20 f101 	lsrle.w	r1, r0, r1
 8010ffe:	2101      	movgt	r1, #1
 8011000:	460a      	mov	r2, r1
 8011002:	e7e1      	b.n	8010fc8 <__ulp+0x18>
 8011004:	7ff00000 	.word	0x7ff00000

08011008 <__b2d>:
 8011008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100a:	6905      	ldr	r5, [r0, #16]
 801100c:	f100 0714 	add.w	r7, r0, #20
 8011010:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011014:	1f2e      	subs	r6, r5, #4
 8011016:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801101a:	4620      	mov	r0, r4
 801101c:	f7ff fd52 	bl	8010ac4 <__hi0bits>
 8011020:	f1c0 0320 	rsb	r3, r0, #32
 8011024:	280a      	cmp	r0, #10
 8011026:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80110a4 <__b2d+0x9c>
 801102a:	600b      	str	r3, [r1, #0]
 801102c:	dc14      	bgt.n	8011058 <__b2d+0x50>
 801102e:	f1c0 0e0b 	rsb	lr, r0, #11
 8011032:	fa24 f10e 	lsr.w	r1, r4, lr
 8011036:	42b7      	cmp	r7, r6
 8011038:	ea41 030c 	orr.w	r3, r1, ip
 801103c:	bf34      	ite	cc
 801103e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011042:	2100      	movcs	r1, #0
 8011044:	3015      	adds	r0, #21
 8011046:	fa04 f000 	lsl.w	r0, r4, r0
 801104a:	fa21 f10e 	lsr.w	r1, r1, lr
 801104e:	ea40 0201 	orr.w	r2, r0, r1
 8011052:	ec43 2b10 	vmov	d0, r2, r3
 8011056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011058:	42b7      	cmp	r7, r6
 801105a:	bf3a      	itte	cc
 801105c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011060:	f1a5 0608 	subcc.w	r6, r5, #8
 8011064:	2100      	movcs	r1, #0
 8011066:	380b      	subs	r0, #11
 8011068:	d017      	beq.n	801109a <__b2d+0x92>
 801106a:	f1c0 0c20 	rsb	ip, r0, #32
 801106e:	fa04 f500 	lsl.w	r5, r4, r0
 8011072:	42be      	cmp	r6, r7
 8011074:	fa21 f40c 	lsr.w	r4, r1, ip
 8011078:	ea45 0504 	orr.w	r5, r5, r4
 801107c:	bf8c      	ite	hi
 801107e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011082:	2400      	movls	r4, #0
 8011084:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011088:	fa01 f000 	lsl.w	r0, r1, r0
 801108c:	fa24 f40c 	lsr.w	r4, r4, ip
 8011090:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011094:	ea40 0204 	orr.w	r2, r0, r4
 8011098:	e7db      	b.n	8011052 <__b2d+0x4a>
 801109a:	ea44 030c 	orr.w	r3, r4, ip
 801109e:	460a      	mov	r2, r1
 80110a0:	e7d7      	b.n	8011052 <__b2d+0x4a>
 80110a2:	bf00      	nop
 80110a4:	3ff00000 	.word	0x3ff00000

080110a8 <__d2b>:
 80110a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80110ac:	4689      	mov	r9, r1
 80110ae:	2101      	movs	r1, #1
 80110b0:	ec57 6b10 	vmov	r6, r7, d0
 80110b4:	4690      	mov	r8, r2
 80110b6:	f7ff fc0f 	bl	80108d8 <_Balloc>
 80110ba:	4604      	mov	r4, r0
 80110bc:	b930      	cbnz	r0, 80110cc <__d2b+0x24>
 80110be:	4602      	mov	r2, r0
 80110c0:	4b25      	ldr	r3, [pc, #148]	; (8011158 <__d2b+0xb0>)
 80110c2:	4826      	ldr	r0, [pc, #152]	; (801115c <__d2b+0xb4>)
 80110c4:	f240 310a 	movw	r1, #778	; 0x30a
 80110c8:	f000 fbf2 	bl	80118b0 <__assert_func>
 80110cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80110d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80110d4:	bb35      	cbnz	r5, 8011124 <__d2b+0x7c>
 80110d6:	2e00      	cmp	r6, #0
 80110d8:	9301      	str	r3, [sp, #4]
 80110da:	d028      	beq.n	801112e <__d2b+0x86>
 80110dc:	4668      	mov	r0, sp
 80110de:	9600      	str	r6, [sp, #0]
 80110e0:	f7ff fd10 	bl	8010b04 <__lo0bits>
 80110e4:	9900      	ldr	r1, [sp, #0]
 80110e6:	b300      	cbz	r0, 801112a <__d2b+0x82>
 80110e8:	9a01      	ldr	r2, [sp, #4]
 80110ea:	f1c0 0320 	rsb	r3, r0, #32
 80110ee:	fa02 f303 	lsl.w	r3, r2, r3
 80110f2:	430b      	orrs	r3, r1
 80110f4:	40c2      	lsrs	r2, r0
 80110f6:	6163      	str	r3, [r4, #20]
 80110f8:	9201      	str	r2, [sp, #4]
 80110fa:	9b01      	ldr	r3, [sp, #4]
 80110fc:	61a3      	str	r3, [r4, #24]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	bf14      	ite	ne
 8011102:	2202      	movne	r2, #2
 8011104:	2201      	moveq	r2, #1
 8011106:	6122      	str	r2, [r4, #16]
 8011108:	b1d5      	cbz	r5, 8011140 <__d2b+0x98>
 801110a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801110e:	4405      	add	r5, r0
 8011110:	f8c9 5000 	str.w	r5, [r9]
 8011114:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011118:	f8c8 0000 	str.w	r0, [r8]
 801111c:	4620      	mov	r0, r4
 801111e:	b003      	add	sp, #12
 8011120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011128:	e7d5      	b.n	80110d6 <__d2b+0x2e>
 801112a:	6161      	str	r1, [r4, #20]
 801112c:	e7e5      	b.n	80110fa <__d2b+0x52>
 801112e:	a801      	add	r0, sp, #4
 8011130:	f7ff fce8 	bl	8010b04 <__lo0bits>
 8011134:	9b01      	ldr	r3, [sp, #4]
 8011136:	6163      	str	r3, [r4, #20]
 8011138:	2201      	movs	r2, #1
 801113a:	6122      	str	r2, [r4, #16]
 801113c:	3020      	adds	r0, #32
 801113e:	e7e3      	b.n	8011108 <__d2b+0x60>
 8011140:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011144:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011148:	f8c9 0000 	str.w	r0, [r9]
 801114c:	6918      	ldr	r0, [r3, #16]
 801114e:	f7ff fcb9 	bl	8010ac4 <__hi0bits>
 8011152:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011156:	e7df      	b.n	8011118 <__d2b+0x70>
 8011158:	08013e34 	.word	0x08013e34
 801115c:	08013f28 	.word	0x08013f28

08011160 <__ratio>:
 8011160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011164:	4688      	mov	r8, r1
 8011166:	4669      	mov	r1, sp
 8011168:	4681      	mov	r9, r0
 801116a:	f7ff ff4d 	bl	8011008 <__b2d>
 801116e:	a901      	add	r1, sp, #4
 8011170:	4640      	mov	r0, r8
 8011172:	ec55 4b10 	vmov	r4, r5, d0
 8011176:	f7ff ff47 	bl	8011008 <__b2d>
 801117a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801117e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011182:	eba3 0c02 	sub.w	ip, r3, r2
 8011186:	e9dd 3200 	ldrd	r3, r2, [sp]
 801118a:	1a9b      	subs	r3, r3, r2
 801118c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011190:	ec51 0b10 	vmov	r0, r1, d0
 8011194:	2b00      	cmp	r3, #0
 8011196:	bfd6      	itet	le
 8011198:	460a      	movle	r2, r1
 801119a:	462a      	movgt	r2, r5
 801119c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80111a0:	468b      	mov	fp, r1
 80111a2:	462f      	mov	r7, r5
 80111a4:	bfd4      	ite	le
 80111a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80111aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80111ae:	4620      	mov	r0, r4
 80111b0:	ee10 2a10 	vmov	r2, s0
 80111b4:	465b      	mov	r3, fp
 80111b6:	4639      	mov	r1, r7
 80111b8:	f7ef fb68 	bl	800088c <__aeabi_ddiv>
 80111bc:	ec41 0b10 	vmov	d0, r0, r1
 80111c0:	b003      	add	sp, #12
 80111c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080111c6 <__copybits>:
 80111c6:	3901      	subs	r1, #1
 80111c8:	b570      	push	{r4, r5, r6, lr}
 80111ca:	1149      	asrs	r1, r1, #5
 80111cc:	6914      	ldr	r4, [r2, #16]
 80111ce:	3101      	adds	r1, #1
 80111d0:	f102 0314 	add.w	r3, r2, #20
 80111d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80111d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80111dc:	1f05      	subs	r5, r0, #4
 80111de:	42a3      	cmp	r3, r4
 80111e0:	d30c      	bcc.n	80111fc <__copybits+0x36>
 80111e2:	1aa3      	subs	r3, r4, r2
 80111e4:	3b11      	subs	r3, #17
 80111e6:	f023 0303 	bic.w	r3, r3, #3
 80111ea:	3211      	adds	r2, #17
 80111ec:	42a2      	cmp	r2, r4
 80111ee:	bf88      	it	hi
 80111f0:	2300      	movhi	r3, #0
 80111f2:	4418      	add	r0, r3
 80111f4:	2300      	movs	r3, #0
 80111f6:	4288      	cmp	r0, r1
 80111f8:	d305      	bcc.n	8011206 <__copybits+0x40>
 80111fa:	bd70      	pop	{r4, r5, r6, pc}
 80111fc:	f853 6b04 	ldr.w	r6, [r3], #4
 8011200:	f845 6f04 	str.w	r6, [r5, #4]!
 8011204:	e7eb      	b.n	80111de <__copybits+0x18>
 8011206:	f840 3b04 	str.w	r3, [r0], #4
 801120a:	e7f4      	b.n	80111f6 <__copybits+0x30>

0801120c <__any_on>:
 801120c:	f100 0214 	add.w	r2, r0, #20
 8011210:	6900      	ldr	r0, [r0, #16]
 8011212:	114b      	asrs	r3, r1, #5
 8011214:	4298      	cmp	r0, r3
 8011216:	b510      	push	{r4, lr}
 8011218:	db11      	blt.n	801123e <__any_on+0x32>
 801121a:	dd0a      	ble.n	8011232 <__any_on+0x26>
 801121c:	f011 011f 	ands.w	r1, r1, #31
 8011220:	d007      	beq.n	8011232 <__any_on+0x26>
 8011222:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011226:	fa24 f001 	lsr.w	r0, r4, r1
 801122a:	fa00 f101 	lsl.w	r1, r0, r1
 801122e:	428c      	cmp	r4, r1
 8011230:	d10b      	bne.n	801124a <__any_on+0x3e>
 8011232:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011236:	4293      	cmp	r3, r2
 8011238:	d803      	bhi.n	8011242 <__any_on+0x36>
 801123a:	2000      	movs	r0, #0
 801123c:	bd10      	pop	{r4, pc}
 801123e:	4603      	mov	r3, r0
 8011240:	e7f7      	b.n	8011232 <__any_on+0x26>
 8011242:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011246:	2900      	cmp	r1, #0
 8011248:	d0f5      	beq.n	8011236 <__any_on+0x2a>
 801124a:	2001      	movs	r0, #1
 801124c:	e7f6      	b.n	801123c <__any_on+0x30>

0801124e <__ssputs_r>:
 801124e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011252:	688e      	ldr	r6, [r1, #8]
 8011254:	429e      	cmp	r6, r3
 8011256:	4682      	mov	sl, r0
 8011258:	460c      	mov	r4, r1
 801125a:	4690      	mov	r8, r2
 801125c:	461f      	mov	r7, r3
 801125e:	d838      	bhi.n	80112d2 <__ssputs_r+0x84>
 8011260:	898a      	ldrh	r2, [r1, #12]
 8011262:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011266:	d032      	beq.n	80112ce <__ssputs_r+0x80>
 8011268:	6825      	ldr	r5, [r4, #0]
 801126a:	6909      	ldr	r1, [r1, #16]
 801126c:	eba5 0901 	sub.w	r9, r5, r1
 8011270:	6965      	ldr	r5, [r4, #20]
 8011272:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011276:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801127a:	3301      	adds	r3, #1
 801127c:	444b      	add	r3, r9
 801127e:	106d      	asrs	r5, r5, #1
 8011280:	429d      	cmp	r5, r3
 8011282:	bf38      	it	cc
 8011284:	461d      	movcc	r5, r3
 8011286:	0553      	lsls	r3, r2, #21
 8011288:	d531      	bpl.n	80112ee <__ssputs_r+0xa0>
 801128a:	4629      	mov	r1, r5
 801128c:	f7fc f86e 	bl	800d36c <_malloc_r>
 8011290:	4606      	mov	r6, r0
 8011292:	b950      	cbnz	r0, 80112aa <__ssputs_r+0x5c>
 8011294:	230c      	movs	r3, #12
 8011296:	f8ca 3000 	str.w	r3, [sl]
 801129a:	89a3      	ldrh	r3, [r4, #12]
 801129c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112a0:	81a3      	strh	r3, [r4, #12]
 80112a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112aa:	6921      	ldr	r1, [r4, #16]
 80112ac:	464a      	mov	r2, r9
 80112ae:	f7fb ffe7 	bl	800d280 <memcpy>
 80112b2:	89a3      	ldrh	r3, [r4, #12]
 80112b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80112b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112bc:	81a3      	strh	r3, [r4, #12]
 80112be:	6126      	str	r6, [r4, #16]
 80112c0:	6165      	str	r5, [r4, #20]
 80112c2:	444e      	add	r6, r9
 80112c4:	eba5 0509 	sub.w	r5, r5, r9
 80112c8:	6026      	str	r6, [r4, #0]
 80112ca:	60a5      	str	r5, [r4, #8]
 80112cc:	463e      	mov	r6, r7
 80112ce:	42be      	cmp	r6, r7
 80112d0:	d900      	bls.n	80112d4 <__ssputs_r+0x86>
 80112d2:	463e      	mov	r6, r7
 80112d4:	4632      	mov	r2, r6
 80112d6:	6820      	ldr	r0, [r4, #0]
 80112d8:	4641      	mov	r1, r8
 80112da:	f000 fb5d 	bl	8011998 <memmove>
 80112de:	68a3      	ldr	r3, [r4, #8]
 80112e0:	6822      	ldr	r2, [r4, #0]
 80112e2:	1b9b      	subs	r3, r3, r6
 80112e4:	4432      	add	r2, r6
 80112e6:	60a3      	str	r3, [r4, #8]
 80112e8:	6022      	str	r2, [r4, #0]
 80112ea:	2000      	movs	r0, #0
 80112ec:	e7db      	b.n	80112a6 <__ssputs_r+0x58>
 80112ee:	462a      	mov	r2, r5
 80112f0:	f000 fb6c 	bl	80119cc <_realloc_r>
 80112f4:	4606      	mov	r6, r0
 80112f6:	2800      	cmp	r0, #0
 80112f8:	d1e1      	bne.n	80112be <__ssputs_r+0x70>
 80112fa:	6921      	ldr	r1, [r4, #16]
 80112fc:	4650      	mov	r0, sl
 80112fe:	f7fb ffe5 	bl	800d2cc <_free_r>
 8011302:	e7c7      	b.n	8011294 <__ssputs_r+0x46>

08011304 <_svfiprintf_r>:
 8011304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011308:	4698      	mov	r8, r3
 801130a:	898b      	ldrh	r3, [r1, #12]
 801130c:	061b      	lsls	r3, r3, #24
 801130e:	b09d      	sub	sp, #116	; 0x74
 8011310:	4607      	mov	r7, r0
 8011312:	460d      	mov	r5, r1
 8011314:	4614      	mov	r4, r2
 8011316:	d50e      	bpl.n	8011336 <_svfiprintf_r+0x32>
 8011318:	690b      	ldr	r3, [r1, #16]
 801131a:	b963      	cbnz	r3, 8011336 <_svfiprintf_r+0x32>
 801131c:	2140      	movs	r1, #64	; 0x40
 801131e:	f7fc f825 	bl	800d36c <_malloc_r>
 8011322:	6028      	str	r0, [r5, #0]
 8011324:	6128      	str	r0, [r5, #16]
 8011326:	b920      	cbnz	r0, 8011332 <_svfiprintf_r+0x2e>
 8011328:	230c      	movs	r3, #12
 801132a:	603b      	str	r3, [r7, #0]
 801132c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011330:	e0d1      	b.n	80114d6 <_svfiprintf_r+0x1d2>
 8011332:	2340      	movs	r3, #64	; 0x40
 8011334:	616b      	str	r3, [r5, #20]
 8011336:	2300      	movs	r3, #0
 8011338:	9309      	str	r3, [sp, #36]	; 0x24
 801133a:	2320      	movs	r3, #32
 801133c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011340:	f8cd 800c 	str.w	r8, [sp, #12]
 8011344:	2330      	movs	r3, #48	; 0x30
 8011346:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80114f0 <_svfiprintf_r+0x1ec>
 801134a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801134e:	f04f 0901 	mov.w	r9, #1
 8011352:	4623      	mov	r3, r4
 8011354:	469a      	mov	sl, r3
 8011356:	f813 2b01 	ldrb.w	r2, [r3], #1
 801135a:	b10a      	cbz	r2, 8011360 <_svfiprintf_r+0x5c>
 801135c:	2a25      	cmp	r2, #37	; 0x25
 801135e:	d1f9      	bne.n	8011354 <_svfiprintf_r+0x50>
 8011360:	ebba 0b04 	subs.w	fp, sl, r4
 8011364:	d00b      	beq.n	801137e <_svfiprintf_r+0x7a>
 8011366:	465b      	mov	r3, fp
 8011368:	4622      	mov	r2, r4
 801136a:	4629      	mov	r1, r5
 801136c:	4638      	mov	r0, r7
 801136e:	f7ff ff6e 	bl	801124e <__ssputs_r>
 8011372:	3001      	adds	r0, #1
 8011374:	f000 80aa 	beq.w	80114cc <_svfiprintf_r+0x1c8>
 8011378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801137a:	445a      	add	r2, fp
 801137c:	9209      	str	r2, [sp, #36]	; 0x24
 801137e:	f89a 3000 	ldrb.w	r3, [sl]
 8011382:	2b00      	cmp	r3, #0
 8011384:	f000 80a2 	beq.w	80114cc <_svfiprintf_r+0x1c8>
 8011388:	2300      	movs	r3, #0
 801138a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801138e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011392:	f10a 0a01 	add.w	sl, sl, #1
 8011396:	9304      	str	r3, [sp, #16]
 8011398:	9307      	str	r3, [sp, #28]
 801139a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801139e:	931a      	str	r3, [sp, #104]	; 0x68
 80113a0:	4654      	mov	r4, sl
 80113a2:	2205      	movs	r2, #5
 80113a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113a8:	4851      	ldr	r0, [pc, #324]	; (80114f0 <_svfiprintf_r+0x1ec>)
 80113aa:	f7ee ff39 	bl	8000220 <memchr>
 80113ae:	9a04      	ldr	r2, [sp, #16]
 80113b0:	b9d8      	cbnz	r0, 80113ea <_svfiprintf_r+0xe6>
 80113b2:	06d0      	lsls	r0, r2, #27
 80113b4:	bf44      	itt	mi
 80113b6:	2320      	movmi	r3, #32
 80113b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113bc:	0711      	lsls	r1, r2, #28
 80113be:	bf44      	itt	mi
 80113c0:	232b      	movmi	r3, #43	; 0x2b
 80113c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113c6:	f89a 3000 	ldrb.w	r3, [sl]
 80113ca:	2b2a      	cmp	r3, #42	; 0x2a
 80113cc:	d015      	beq.n	80113fa <_svfiprintf_r+0xf6>
 80113ce:	9a07      	ldr	r2, [sp, #28]
 80113d0:	4654      	mov	r4, sl
 80113d2:	2000      	movs	r0, #0
 80113d4:	f04f 0c0a 	mov.w	ip, #10
 80113d8:	4621      	mov	r1, r4
 80113da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113de:	3b30      	subs	r3, #48	; 0x30
 80113e0:	2b09      	cmp	r3, #9
 80113e2:	d94e      	bls.n	8011482 <_svfiprintf_r+0x17e>
 80113e4:	b1b0      	cbz	r0, 8011414 <_svfiprintf_r+0x110>
 80113e6:	9207      	str	r2, [sp, #28]
 80113e8:	e014      	b.n	8011414 <_svfiprintf_r+0x110>
 80113ea:	eba0 0308 	sub.w	r3, r0, r8
 80113ee:	fa09 f303 	lsl.w	r3, r9, r3
 80113f2:	4313      	orrs	r3, r2
 80113f4:	9304      	str	r3, [sp, #16]
 80113f6:	46a2      	mov	sl, r4
 80113f8:	e7d2      	b.n	80113a0 <_svfiprintf_r+0x9c>
 80113fa:	9b03      	ldr	r3, [sp, #12]
 80113fc:	1d19      	adds	r1, r3, #4
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	9103      	str	r1, [sp, #12]
 8011402:	2b00      	cmp	r3, #0
 8011404:	bfbb      	ittet	lt
 8011406:	425b      	neglt	r3, r3
 8011408:	f042 0202 	orrlt.w	r2, r2, #2
 801140c:	9307      	strge	r3, [sp, #28]
 801140e:	9307      	strlt	r3, [sp, #28]
 8011410:	bfb8      	it	lt
 8011412:	9204      	strlt	r2, [sp, #16]
 8011414:	7823      	ldrb	r3, [r4, #0]
 8011416:	2b2e      	cmp	r3, #46	; 0x2e
 8011418:	d10c      	bne.n	8011434 <_svfiprintf_r+0x130>
 801141a:	7863      	ldrb	r3, [r4, #1]
 801141c:	2b2a      	cmp	r3, #42	; 0x2a
 801141e:	d135      	bne.n	801148c <_svfiprintf_r+0x188>
 8011420:	9b03      	ldr	r3, [sp, #12]
 8011422:	1d1a      	adds	r2, r3, #4
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	9203      	str	r2, [sp, #12]
 8011428:	2b00      	cmp	r3, #0
 801142a:	bfb8      	it	lt
 801142c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011430:	3402      	adds	r4, #2
 8011432:	9305      	str	r3, [sp, #20]
 8011434:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011500 <_svfiprintf_r+0x1fc>
 8011438:	7821      	ldrb	r1, [r4, #0]
 801143a:	2203      	movs	r2, #3
 801143c:	4650      	mov	r0, sl
 801143e:	f7ee feef 	bl	8000220 <memchr>
 8011442:	b140      	cbz	r0, 8011456 <_svfiprintf_r+0x152>
 8011444:	2340      	movs	r3, #64	; 0x40
 8011446:	eba0 000a 	sub.w	r0, r0, sl
 801144a:	fa03 f000 	lsl.w	r0, r3, r0
 801144e:	9b04      	ldr	r3, [sp, #16]
 8011450:	4303      	orrs	r3, r0
 8011452:	3401      	adds	r4, #1
 8011454:	9304      	str	r3, [sp, #16]
 8011456:	f814 1b01 	ldrb.w	r1, [r4], #1
 801145a:	4826      	ldr	r0, [pc, #152]	; (80114f4 <_svfiprintf_r+0x1f0>)
 801145c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011460:	2206      	movs	r2, #6
 8011462:	f7ee fedd 	bl	8000220 <memchr>
 8011466:	2800      	cmp	r0, #0
 8011468:	d038      	beq.n	80114dc <_svfiprintf_r+0x1d8>
 801146a:	4b23      	ldr	r3, [pc, #140]	; (80114f8 <_svfiprintf_r+0x1f4>)
 801146c:	bb1b      	cbnz	r3, 80114b6 <_svfiprintf_r+0x1b2>
 801146e:	9b03      	ldr	r3, [sp, #12]
 8011470:	3307      	adds	r3, #7
 8011472:	f023 0307 	bic.w	r3, r3, #7
 8011476:	3308      	adds	r3, #8
 8011478:	9303      	str	r3, [sp, #12]
 801147a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801147c:	4433      	add	r3, r6
 801147e:	9309      	str	r3, [sp, #36]	; 0x24
 8011480:	e767      	b.n	8011352 <_svfiprintf_r+0x4e>
 8011482:	fb0c 3202 	mla	r2, ip, r2, r3
 8011486:	460c      	mov	r4, r1
 8011488:	2001      	movs	r0, #1
 801148a:	e7a5      	b.n	80113d8 <_svfiprintf_r+0xd4>
 801148c:	2300      	movs	r3, #0
 801148e:	3401      	adds	r4, #1
 8011490:	9305      	str	r3, [sp, #20]
 8011492:	4619      	mov	r1, r3
 8011494:	f04f 0c0a 	mov.w	ip, #10
 8011498:	4620      	mov	r0, r4
 801149a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801149e:	3a30      	subs	r2, #48	; 0x30
 80114a0:	2a09      	cmp	r2, #9
 80114a2:	d903      	bls.n	80114ac <_svfiprintf_r+0x1a8>
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d0c5      	beq.n	8011434 <_svfiprintf_r+0x130>
 80114a8:	9105      	str	r1, [sp, #20]
 80114aa:	e7c3      	b.n	8011434 <_svfiprintf_r+0x130>
 80114ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80114b0:	4604      	mov	r4, r0
 80114b2:	2301      	movs	r3, #1
 80114b4:	e7f0      	b.n	8011498 <_svfiprintf_r+0x194>
 80114b6:	ab03      	add	r3, sp, #12
 80114b8:	9300      	str	r3, [sp, #0]
 80114ba:	462a      	mov	r2, r5
 80114bc:	4b0f      	ldr	r3, [pc, #60]	; (80114fc <_svfiprintf_r+0x1f8>)
 80114be:	a904      	add	r1, sp, #16
 80114c0:	4638      	mov	r0, r7
 80114c2:	f7fc f84d 	bl	800d560 <_printf_float>
 80114c6:	1c42      	adds	r2, r0, #1
 80114c8:	4606      	mov	r6, r0
 80114ca:	d1d6      	bne.n	801147a <_svfiprintf_r+0x176>
 80114cc:	89ab      	ldrh	r3, [r5, #12]
 80114ce:	065b      	lsls	r3, r3, #25
 80114d0:	f53f af2c 	bmi.w	801132c <_svfiprintf_r+0x28>
 80114d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114d6:	b01d      	add	sp, #116	; 0x74
 80114d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114dc:	ab03      	add	r3, sp, #12
 80114de:	9300      	str	r3, [sp, #0]
 80114e0:	462a      	mov	r2, r5
 80114e2:	4b06      	ldr	r3, [pc, #24]	; (80114fc <_svfiprintf_r+0x1f8>)
 80114e4:	a904      	add	r1, sp, #16
 80114e6:	4638      	mov	r0, r7
 80114e8:	f7fc fade 	bl	800daa8 <_printf_i>
 80114ec:	e7eb      	b.n	80114c6 <_svfiprintf_r+0x1c2>
 80114ee:	bf00      	nop
 80114f0:	08014084 	.word	0x08014084
 80114f4:	0801408e 	.word	0x0801408e
 80114f8:	0800d561 	.word	0x0800d561
 80114fc:	0801124f 	.word	0x0801124f
 8011500:	0801408a 	.word	0x0801408a

08011504 <__sfputc_r>:
 8011504:	6893      	ldr	r3, [r2, #8]
 8011506:	3b01      	subs	r3, #1
 8011508:	2b00      	cmp	r3, #0
 801150a:	b410      	push	{r4}
 801150c:	6093      	str	r3, [r2, #8]
 801150e:	da08      	bge.n	8011522 <__sfputc_r+0x1e>
 8011510:	6994      	ldr	r4, [r2, #24]
 8011512:	42a3      	cmp	r3, r4
 8011514:	db01      	blt.n	801151a <__sfputc_r+0x16>
 8011516:	290a      	cmp	r1, #10
 8011518:	d103      	bne.n	8011522 <__sfputc_r+0x1e>
 801151a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801151e:	f7fd bcf1 	b.w	800ef04 <__swbuf_r>
 8011522:	6813      	ldr	r3, [r2, #0]
 8011524:	1c58      	adds	r0, r3, #1
 8011526:	6010      	str	r0, [r2, #0]
 8011528:	7019      	strb	r1, [r3, #0]
 801152a:	4608      	mov	r0, r1
 801152c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011530:	4770      	bx	lr

08011532 <__sfputs_r>:
 8011532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011534:	4606      	mov	r6, r0
 8011536:	460f      	mov	r7, r1
 8011538:	4614      	mov	r4, r2
 801153a:	18d5      	adds	r5, r2, r3
 801153c:	42ac      	cmp	r4, r5
 801153e:	d101      	bne.n	8011544 <__sfputs_r+0x12>
 8011540:	2000      	movs	r0, #0
 8011542:	e007      	b.n	8011554 <__sfputs_r+0x22>
 8011544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011548:	463a      	mov	r2, r7
 801154a:	4630      	mov	r0, r6
 801154c:	f7ff ffda 	bl	8011504 <__sfputc_r>
 8011550:	1c43      	adds	r3, r0, #1
 8011552:	d1f3      	bne.n	801153c <__sfputs_r+0xa>
 8011554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011558 <_vfiprintf_r>:
 8011558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801155c:	460d      	mov	r5, r1
 801155e:	b09d      	sub	sp, #116	; 0x74
 8011560:	4614      	mov	r4, r2
 8011562:	4698      	mov	r8, r3
 8011564:	4606      	mov	r6, r0
 8011566:	b118      	cbz	r0, 8011570 <_vfiprintf_r+0x18>
 8011568:	6983      	ldr	r3, [r0, #24]
 801156a:	b90b      	cbnz	r3, 8011570 <_vfiprintf_r+0x18>
 801156c:	f7fe fd1e 	bl	800ffac <__sinit>
 8011570:	4b89      	ldr	r3, [pc, #548]	; (8011798 <_vfiprintf_r+0x240>)
 8011572:	429d      	cmp	r5, r3
 8011574:	d11b      	bne.n	80115ae <_vfiprintf_r+0x56>
 8011576:	6875      	ldr	r5, [r6, #4]
 8011578:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801157a:	07d9      	lsls	r1, r3, #31
 801157c:	d405      	bmi.n	801158a <_vfiprintf_r+0x32>
 801157e:	89ab      	ldrh	r3, [r5, #12]
 8011580:	059a      	lsls	r2, r3, #22
 8011582:	d402      	bmi.n	801158a <_vfiprintf_r+0x32>
 8011584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011586:	f7ff f922 	bl	80107ce <__retarget_lock_acquire_recursive>
 801158a:	89ab      	ldrh	r3, [r5, #12]
 801158c:	071b      	lsls	r3, r3, #28
 801158e:	d501      	bpl.n	8011594 <_vfiprintf_r+0x3c>
 8011590:	692b      	ldr	r3, [r5, #16]
 8011592:	b9eb      	cbnz	r3, 80115d0 <_vfiprintf_r+0x78>
 8011594:	4629      	mov	r1, r5
 8011596:	4630      	mov	r0, r6
 8011598:	f7fd fd06 	bl	800efa8 <__swsetup_r>
 801159c:	b1c0      	cbz	r0, 80115d0 <_vfiprintf_r+0x78>
 801159e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115a0:	07dc      	lsls	r4, r3, #31
 80115a2:	d50e      	bpl.n	80115c2 <_vfiprintf_r+0x6a>
 80115a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80115a8:	b01d      	add	sp, #116	; 0x74
 80115aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ae:	4b7b      	ldr	r3, [pc, #492]	; (801179c <_vfiprintf_r+0x244>)
 80115b0:	429d      	cmp	r5, r3
 80115b2:	d101      	bne.n	80115b8 <_vfiprintf_r+0x60>
 80115b4:	68b5      	ldr	r5, [r6, #8]
 80115b6:	e7df      	b.n	8011578 <_vfiprintf_r+0x20>
 80115b8:	4b79      	ldr	r3, [pc, #484]	; (80117a0 <_vfiprintf_r+0x248>)
 80115ba:	429d      	cmp	r5, r3
 80115bc:	bf08      	it	eq
 80115be:	68f5      	ldreq	r5, [r6, #12]
 80115c0:	e7da      	b.n	8011578 <_vfiprintf_r+0x20>
 80115c2:	89ab      	ldrh	r3, [r5, #12]
 80115c4:	0598      	lsls	r0, r3, #22
 80115c6:	d4ed      	bmi.n	80115a4 <_vfiprintf_r+0x4c>
 80115c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115ca:	f7ff f901 	bl	80107d0 <__retarget_lock_release_recursive>
 80115ce:	e7e9      	b.n	80115a4 <_vfiprintf_r+0x4c>
 80115d0:	2300      	movs	r3, #0
 80115d2:	9309      	str	r3, [sp, #36]	; 0x24
 80115d4:	2320      	movs	r3, #32
 80115d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80115da:	f8cd 800c 	str.w	r8, [sp, #12]
 80115de:	2330      	movs	r3, #48	; 0x30
 80115e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80117a4 <_vfiprintf_r+0x24c>
 80115e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115e8:	f04f 0901 	mov.w	r9, #1
 80115ec:	4623      	mov	r3, r4
 80115ee:	469a      	mov	sl, r3
 80115f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115f4:	b10a      	cbz	r2, 80115fa <_vfiprintf_r+0xa2>
 80115f6:	2a25      	cmp	r2, #37	; 0x25
 80115f8:	d1f9      	bne.n	80115ee <_vfiprintf_r+0x96>
 80115fa:	ebba 0b04 	subs.w	fp, sl, r4
 80115fe:	d00b      	beq.n	8011618 <_vfiprintf_r+0xc0>
 8011600:	465b      	mov	r3, fp
 8011602:	4622      	mov	r2, r4
 8011604:	4629      	mov	r1, r5
 8011606:	4630      	mov	r0, r6
 8011608:	f7ff ff93 	bl	8011532 <__sfputs_r>
 801160c:	3001      	adds	r0, #1
 801160e:	f000 80aa 	beq.w	8011766 <_vfiprintf_r+0x20e>
 8011612:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011614:	445a      	add	r2, fp
 8011616:	9209      	str	r2, [sp, #36]	; 0x24
 8011618:	f89a 3000 	ldrb.w	r3, [sl]
 801161c:	2b00      	cmp	r3, #0
 801161e:	f000 80a2 	beq.w	8011766 <_vfiprintf_r+0x20e>
 8011622:	2300      	movs	r3, #0
 8011624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801162c:	f10a 0a01 	add.w	sl, sl, #1
 8011630:	9304      	str	r3, [sp, #16]
 8011632:	9307      	str	r3, [sp, #28]
 8011634:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011638:	931a      	str	r3, [sp, #104]	; 0x68
 801163a:	4654      	mov	r4, sl
 801163c:	2205      	movs	r2, #5
 801163e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011642:	4858      	ldr	r0, [pc, #352]	; (80117a4 <_vfiprintf_r+0x24c>)
 8011644:	f7ee fdec 	bl	8000220 <memchr>
 8011648:	9a04      	ldr	r2, [sp, #16]
 801164a:	b9d8      	cbnz	r0, 8011684 <_vfiprintf_r+0x12c>
 801164c:	06d1      	lsls	r1, r2, #27
 801164e:	bf44      	itt	mi
 8011650:	2320      	movmi	r3, #32
 8011652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011656:	0713      	lsls	r3, r2, #28
 8011658:	bf44      	itt	mi
 801165a:	232b      	movmi	r3, #43	; 0x2b
 801165c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011660:	f89a 3000 	ldrb.w	r3, [sl]
 8011664:	2b2a      	cmp	r3, #42	; 0x2a
 8011666:	d015      	beq.n	8011694 <_vfiprintf_r+0x13c>
 8011668:	9a07      	ldr	r2, [sp, #28]
 801166a:	4654      	mov	r4, sl
 801166c:	2000      	movs	r0, #0
 801166e:	f04f 0c0a 	mov.w	ip, #10
 8011672:	4621      	mov	r1, r4
 8011674:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011678:	3b30      	subs	r3, #48	; 0x30
 801167a:	2b09      	cmp	r3, #9
 801167c:	d94e      	bls.n	801171c <_vfiprintf_r+0x1c4>
 801167e:	b1b0      	cbz	r0, 80116ae <_vfiprintf_r+0x156>
 8011680:	9207      	str	r2, [sp, #28]
 8011682:	e014      	b.n	80116ae <_vfiprintf_r+0x156>
 8011684:	eba0 0308 	sub.w	r3, r0, r8
 8011688:	fa09 f303 	lsl.w	r3, r9, r3
 801168c:	4313      	orrs	r3, r2
 801168e:	9304      	str	r3, [sp, #16]
 8011690:	46a2      	mov	sl, r4
 8011692:	e7d2      	b.n	801163a <_vfiprintf_r+0xe2>
 8011694:	9b03      	ldr	r3, [sp, #12]
 8011696:	1d19      	adds	r1, r3, #4
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	9103      	str	r1, [sp, #12]
 801169c:	2b00      	cmp	r3, #0
 801169e:	bfbb      	ittet	lt
 80116a0:	425b      	neglt	r3, r3
 80116a2:	f042 0202 	orrlt.w	r2, r2, #2
 80116a6:	9307      	strge	r3, [sp, #28]
 80116a8:	9307      	strlt	r3, [sp, #28]
 80116aa:	bfb8      	it	lt
 80116ac:	9204      	strlt	r2, [sp, #16]
 80116ae:	7823      	ldrb	r3, [r4, #0]
 80116b0:	2b2e      	cmp	r3, #46	; 0x2e
 80116b2:	d10c      	bne.n	80116ce <_vfiprintf_r+0x176>
 80116b4:	7863      	ldrb	r3, [r4, #1]
 80116b6:	2b2a      	cmp	r3, #42	; 0x2a
 80116b8:	d135      	bne.n	8011726 <_vfiprintf_r+0x1ce>
 80116ba:	9b03      	ldr	r3, [sp, #12]
 80116bc:	1d1a      	adds	r2, r3, #4
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	9203      	str	r2, [sp, #12]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	bfb8      	it	lt
 80116c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80116ca:	3402      	adds	r4, #2
 80116cc:	9305      	str	r3, [sp, #20]
 80116ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80117b4 <_vfiprintf_r+0x25c>
 80116d2:	7821      	ldrb	r1, [r4, #0]
 80116d4:	2203      	movs	r2, #3
 80116d6:	4650      	mov	r0, sl
 80116d8:	f7ee fda2 	bl	8000220 <memchr>
 80116dc:	b140      	cbz	r0, 80116f0 <_vfiprintf_r+0x198>
 80116de:	2340      	movs	r3, #64	; 0x40
 80116e0:	eba0 000a 	sub.w	r0, r0, sl
 80116e4:	fa03 f000 	lsl.w	r0, r3, r0
 80116e8:	9b04      	ldr	r3, [sp, #16]
 80116ea:	4303      	orrs	r3, r0
 80116ec:	3401      	adds	r4, #1
 80116ee:	9304      	str	r3, [sp, #16]
 80116f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116f4:	482c      	ldr	r0, [pc, #176]	; (80117a8 <_vfiprintf_r+0x250>)
 80116f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80116fa:	2206      	movs	r2, #6
 80116fc:	f7ee fd90 	bl	8000220 <memchr>
 8011700:	2800      	cmp	r0, #0
 8011702:	d03f      	beq.n	8011784 <_vfiprintf_r+0x22c>
 8011704:	4b29      	ldr	r3, [pc, #164]	; (80117ac <_vfiprintf_r+0x254>)
 8011706:	bb1b      	cbnz	r3, 8011750 <_vfiprintf_r+0x1f8>
 8011708:	9b03      	ldr	r3, [sp, #12]
 801170a:	3307      	adds	r3, #7
 801170c:	f023 0307 	bic.w	r3, r3, #7
 8011710:	3308      	adds	r3, #8
 8011712:	9303      	str	r3, [sp, #12]
 8011714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011716:	443b      	add	r3, r7
 8011718:	9309      	str	r3, [sp, #36]	; 0x24
 801171a:	e767      	b.n	80115ec <_vfiprintf_r+0x94>
 801171c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011720:	460c      	mov	r4, r1
 8011722:	2001      	movs	r0, #1
 8011724:	e7a5      	b.n	8011672 <_vfiprintf_r+0x11a>
 8011726:	2300      	movs	r3, #0
 8011728:	3401      	adds	r4, #1
 801172a:	9305      	str	r3, [sp, #20]
 801172c:	4619      	mov	r1, r3
 801172e:	f04f 0c0a 	mov.w	ip, #10
 8011732:	4620      	mov	r0, r4
 8011734:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011738:	3a30      	subs	r2, #48	; 0x30
 801173a:	2a09      	cmp	r2, #9
 801173c:	d903      	bls.n	8011746 <_vfiprintf_r+0x1ee>
 801173e:	2b00      	cmp	r3, #0
 8011740:	d0c5      	beq.n	80116ce <_vfiprintf_r+0x176>
 8011742:	9105      	str	r1, [sp, #20]
 8011744:	e7c3      	b.n	80116ce <_vfiprintf_r+0x176>
 8011746:	fb0c 2101 	mla	r1, ip, r1, r2
 801174a:	4604      	mov	r4, r0
 801174c:	2301      	movs	r3, #1
 801174e:	e7f0      	b.n	8011732 <_vfiprintf_r+0x1da>
 8011750:	ab03      	add	r3, sp, #12
 8011752:	9300      	str	r3, [sp, #0]
 8011754:	462a      	mov	r2, r5
 8011756:	4b16      	ldr	r3, [pc, #88]	; (80117b0 <_vfiprintf_r+0x258>)
 8011758:	a904      	add	r1, sp, #16
 801175a:	4630      	mov	r0, r6
 801175c:	f7fb ff00 	bl	800d560 <_printf_float>
 8011760:	4607      	mov	r7, r0
 8011762:	1c78      	adds	r0, r7, #1
 8011764:	d1d6      	bne.n	8011714 <_vfiprintf_r+0x1bc>
 8011766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011768:	07d9      	lsls	r1, r3, #31
 801176a:	d405      	bmi.n	8011778 <_vfiprintf_r+0x220>
 801176c:	89ab      	ldrh	r3, [r5, #12]
 801176e:	059a      	lsls	r2, r3, #22
 8011770:	d402      	bmi.n	8011778 <_vfiprintf_r+0x220>
 8011772:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011774:	f7ff f82c 	bl	80107d0 <__retarget_lock_release_recursive>
 8011778:	89ab      	ldrh	r3, [r5, #12]
 801177a:	065b      	lsls	r3, r3, #25
 801177c:	f53f af12 	bmi.w	80115a4 <_vfiprintf_r+0x4c>
 8011780:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011782:	e711      	b.n	80115a8 <_vfiprintf_r+0x50>
 8011784:	ab03      	add	r3, sp, #12
 8011786:	9300      	str	r3, [sp, #0]
 8011788:	462a      	mov	r2, r5
 801178a:	4b09      	ldr	r3, [pc, #36]	; (80117b0 <_vfiprintf_r+0x258>)
 801178c:	a904      	add	r1, sp, #16
 801178e:	4630      	mov	r0, r6
 8011790:	f7fc f98a 	bl	800daa8 <_printf_i>
 8011794:	e7e4      	b.n	8011760 <_vfiprintf_r+0x208>
 8011796:	bf00      	nop
 8011798:	08013e68 	.word	0x08013e68
 801179c:	08013e88 	.word	0x08013e88
 80117a0:	08013e48 	.word	0x08013e48
 80117a4:	08014084 	.word	0x08014084
 80117a8:	0801408e 	.word	0x0801408e
 80117ac:	0800d561 	.word	0x0800d561
 80117b0:	08011533 	.word	0x08011533
 80117b4:	0801408a 	.word	0x0801408a

080117b8 <nan>:
 80117b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80117c0 <nan+0x8>
 80117bc:	4770      	bx	lr
 80117be:	bf00      	nop
 80117c0:	00000000 	.word	0x00000000
 80117c4:	7ff80000 	.word	0x7ff80000

080117c8 <__sread>:
 80117c8:	b510      	push	{r4, lr}
 80117ca:	460c      	mov	r4, r1
 80117cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117d0:	f000 f922 	bl	8011a18 <_read_r>
 80117d4:	2800      	cmp	r0, #0
 80117d6:	bfab      	itete	ge
 80117d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80117da:	89a3      	ldrhlt	r3, [r4, #12]
 80117dc:	181b      	addge	r3, r3, r0
 80117de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80117e2:	bfac      	ite	ge
 80117e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80117e6:	81a3      	strhlt	r3, [r4, #12]
 80117e8:	bd10      	pop	{r4, pc}

080117ea <__swrite>:
 80117ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117ee:	461f      	mov	r7, r3
 80117f0:	898b      	ldrh	r3, [r1, #12]
 80117f2:	05db      	lsls	r3, r3, #23
 80117f4:	4605      	mov	r5, r0
 80117f6:	460c      	mov	r4, r1
 80117f8:	4616      	mov	r6, r2
 80117fa:	d505      	bpl.n	8011808 <__swrite+0x1e>
 80117fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011800:	2302      	movs	r3, #2
 8011802:	2200      	movs	r2, #0
 8011804:	f000 f8b6 	bl	8011974 <_lseek_r>
 8011808:	89a3      	ldrh	r3, [r4, #12]
 801180a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801180e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011812:	81a3      	strh	r3, [r4, #12]
 8011814:	4632      	mov	r2, r6
 8011816:	463b      	mov	r3, r7
 8011818:	4628      	mov	r0, r5
 801181a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801181e:	f000 b835 	b.w	801188c <_write_r>

08011822 <__sseek>:
 8011822:	b510      	push	{r4, lr}
 8011824:	460c      	mov	r4, r1
 8011826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801182a:	f000 f8a3 	bl	8011974 <_lseek_r>
 801182e:	1c43      	adds	r3, r0, #1
 8011830:	89a3      	ldrh	r3, [r4, #12]
 8011832:	bf15      	itete	ne
 8011834:	6560      	strne	r0, [r4, #84]	; 0x54
 8011836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801183a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801183e:	81a3      	strheq	r3, [r4, #12]
 8011840:	bf18      	it	ne
 8011842:	81a3      	strhne	r3, [r4, #12]
 8011844:	bd10      	pop	{r4, pc}

08011846 <__sclose>:
 8011846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801184a:	f000 b84f 	b.w	80118ec <_close_r>

0801184e <strncmp>:
 801184e:	b510      	push	{r4, lr}
 8011850:	b16a      	cbz	r2, 801186e <strncmp+0x20>
 8011852:	3901      	subs	r1, #1
 8011854:	1884      	adds	r4, r0, r2
 8011856:	f810 3b01 	ldrb.w	r3, [r0], #1
 801185a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801185e:	4293      	cmp	r3, r2
 8011860:	d103      	bne.n	801186a <strncmp+0x1c>
 8011862:	42a0      	cmp	r0, r4
 8011864:	d001      	beq.n	801186a <strncmp+0x1c>
 8011866:	2b00      	cmp	r3, #0
 8011868:	d1f5      	bne.n	8011856 <strncmp+0x8>
 801186a:	1a98      	subs	r0, r3, r2
 801186c:	bd10      	pop	{r4, pc}
 801186e:	4610      	mov	r0, r2
 8011870:	e7fc      	b.n	801186c <strncmp+0x1e>

08011872 <__ascii_wctomb>:
 8011872:	b149      	cbz	r1, 8011888 <__ascii_wctomb+0x16>
 8011874:	2aff      	cmp	r2, #255	; 0xff
 8011876:	bf85      	ittet	hi
 8011878:	238a      	movhi	r3, #138	; 0x8a
 801187a:	6003      	strhi	r3, [r0, #0]
 801187c:	700a      	strbls	r2, [r1, #0]
 801187e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011882:	bf98      	it	ls
 8011884:	2001      	movls	r0, #1
 8011886:	4770      	bx	lr
 8011888:	4608      	mov	r0, r1
 801188a:	4770      	bx	lr

0801188c <_write_r>:
 801188c:	b538      	push	{r3, r4, r5, lr}
 801188e:	4d07      	ldr	r5, [pc, #28]	; (80118ac <_write_r+0x20>)
 8011890:	4604      	mov	r4, r0
 8011892:	4608      	mov	r0, r1
 8011894:	4611      	mov	r1, r2
 8011896:	2200      	movs	r2, #0
 8011898:	602a      	str	r2, [r5, #0]
 801189a:	461a      	mov	r2, r3
 801189c:	f7f3 fe56 	bl	800554c <_write>
 80118a0:	1c43      	adds	r3, r0, #1
 80118a2:	d102      	bne.n	80118aa <_write_r+0x1e>
 80118a4:	682b      	ldr	r3, [r5, #0]
 80118a6:	b103      	cbz	r3, 80118aa <_write_r+0x1e>
 80118a8:	6023      	str	r3, [r4, #0]
 80118aa:	bd38      	pop	{r3, r4, r5, pc}
 80118ac:	20007410 	.word	0x20007410

080118b0 <__assert_func>:
 80118b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80118b2:	4614      	mov	r4, r2
 80118b4:	461a      	mov	r2, r3
 80118b6:	4b09      	ldr	r3, [pc, #36]	; (80118dc <__assert_func+0x2c>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	4605      	mov	r5, r0
 80118bc:	68d8      	ldr	r0, [r3, #12]
 80118be:	b14c      	cbz	r4, 80118d4 <__assert_func+0x24>
 80118c0:	4b07      	ldr	r3, [pc, #28]	; (80118e0 <__assert_func+0x30>)
 80118c2:	9100      	str	r1, [sp, #0]
 80118c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80118c8:	4906      	ldr	r1, [pc, #24]	; (80118e4 <__assert_func+0x34>)
 80118ca:	462b      	mov	r3, r5
 80118cc:	f000 f81e 	bl	801190c <fiprintf>
 80118d0:	f000 f8b4 	bl	8011a3c <abort>
 80118d4:	4b04      	ldr	r3, [pc, #16]	; (80118e8 <__assert_func+0x38>)
 80118d6:	461c      	mov	r4, r3
 80118d8:	e7f3      	b.n	80118c2 <__assert_func+0x12>
 80118da:	bf00      	nop
 80118dc:	20000014 	.word	0x20000014
 80118e0:	08014095 	.word	0x08014095
 80118e4:	080140a2 	.word	0x080140a2
 80118e8:	080140d0 	.word	0x080140d0

080118ec <_close_r>:
 80118ec:	b538      	push	{r3, r4, r5, lr}
 80118ee:	4d06      	ldr	r5, [pc, #24]	; (8011908 <_close_r+0x1c>)
 80118f0:	2300      	movs	r3, #0
 80118f2:	4604      	mov	r4, r0
 80118f4:	4608      	mov	r0, r1
 80118f6:	602b      	str	r3, [r5, #0]
 80118f8:	f7f3 fe54 	bl	80055a4 <_close>
 80118fc:	1c43      	adds	r3, r0, #1
 80118fe:	d102      	bne.n	8011906 <_close_r+0x1a>
 8011900:	682b      	ldr	r3, [r5, #0]
 8011902:	b103      	cbz	r3, 8011906 <_close_r+0x1a>
 8011904:	6023      	str	r3, [r4, #0]
 8011906:	bd38      	pop	{r3, r4, r5, pc}
 8011908:	20007410 	.word	0x20007410

0801190c <fiprintf>:
 801190c:	b40e      	push	{r1, r2, r3}
 801190e:	b503      	push	{r0, r1, lr}
 8011910:	4601      	mov	r1, r0
 8011912:	ab03      	add	r3, sp, #12
 8011914:	4805      	ldr	r0, [pc, #20]	; (801192c <fiprintf+0x20>)
 8011916:	f853 2b04 	ldr.w	r2, [r3], #4
 801191a:	6800      	ldr	r0, [r0, #0]
 801191c:	9301      	str	r3, [sp, #4]
 801191e:	f7ff fe1b 	bl	8011558 <_vfiprintf_r>
 8011922:	b002      	add	sp, #8
 8011924:	f85d eb04 	ldr.w	lr, [sp], #4
 8011928:	b003      	add	sp, #12
 801192a:	4770      	bx	lr
 801192c:	20000014 	.word	0x20000014

08011930 <_fstat_r>:
 8011930:	b538      	push	{r3, r4, r5, lr}
 8011932:	4d07      	ldr	r5, [pc, #28]	; (8011950 <_fstat_r+0x20>)
 8011934:	2300      	movs	r3, #0
 8011936:	4604      	mov	r4, r0
 8011938:	4608      	mov	r0, r1
 801193a:	4611      	mov	r1, r2
 801193c:	602b      	str	r3, [r5, #0]
 801193e:	f7f3 fe81 	bl	8005644 <_fstat>
 8011942:	1c43      	adds	r3, r0, #1
 8011944:	d102      	bne.n	801194c <_fstat_r+0x1c>
 8011946:	682b      	ldr	r3, [r5, #0]
 8011948:	b103      	cbz	r3, 801194c <_fstat_r+0x1c>
 801194a:	6023      	str	r3, [r4, #0]
 801194c:	bd38      	pop	{r3, r4, r5, pc}
 801194e:	bf00      	nop
 8011950:	20007410 	.word	0x20007410

08011954 <_isatty_r>:
 8011954:	b538      	push	{r3, r4, r5, lr}
 8011956:	4d06      	ldr	r5, [pc, #24]	; (8011970 <_isatty_r+0x1c>)
 8011958:	2300      	movs	r3, #0
 801195a:	4604      	mov	r4, r0
 801195c:	4608      	mov	r0, r1
 801195e:	602b      	str	r3, [r5, #0]
 8011960:	f7f3 fddd 	bl	800551e <_isatty>
 8011964:	1c43      	adds	r3, r0, #1
 8011966:	d102      	bne.n	801196e <_isatty_r+0x1a>
 8011968:	682b      	ldr	r3, [r5, #0]
 801196a:	b103      	cbz	r3, 801196e <_isatty_r+0x1a>
 801196c:	6023      	str	r3, [r4, #0]
 801196e:	bd38      	pop	{r3, r4, r5, pc}
 8011970:	20007410 	.word	0x20007410

08011974 <_lseek_r>:
 8011974:	b538      	push	{r3, r4, r5, lr}
 8011976:	4d07      	ldr	r5, [pc, #28]	; (8011994 <_lseek_r+0x20>)
 8011978:	4604      	mov	r4, r0
 801197a:	4608      	mov	r0, r1
 801197c:	4611      	mov	r1, r2
 801197e:	2200      	movs	r2, #0
 8011980:	602a      	str	r2, [r5, #0]
 8011982:	461a      	mov	r2, r3
 8011984:	f7f3 fe25 	bl	80055d2 <_lseek>
 8011988:	1c43      	adds	r3, r0, #1
 801198a:	d102      	bne.n	8011992 <_lseek_r+0x1e>
 801198c:	682b      	ldr	r3, [r5, #0]
 801198e:	b103      	cbz	r3, 8011992 <_lseek_r+0x1e>
 8011990:	6023      	str	r3, [r4, #0]
 8011992:	bd38      	pop	{r3, r4, r5, pc}
 8011994:	20007410 	.word	0x20007410

08011998 <memmove>:
 8011998:	4288      	cmp	r0, r1
 801199a:	b510      	push	{r4, lr}
 801199c:	eb01 0402 	add.w	r4, r1, r2
 80119a0:	d902      	bls.n	80119a8 <memmove+0x10>
 80119a2:	4284      	cmp	r4, r0
 80119a4:	4623      	mov	r3, r4
 80119a6:	d807      	bhi.n	80119b8 <memmove+0x20>
 80119a8:	1e43      	subs	r3, r0, #1
 80119aa:	42a1      	cmp	r1, r4
 80119ac:	d008      	beq.n	80119c0 <memmove+0x28>
 80119ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80119b6:	e7f8      	b.n	80119aa <memmove+0x12>
 80119b8:	4402      	add	r2, r0
 80119ba:	4601      	mov	r1, r0
 80119bc:	428a      	cmp	r2, r1
 80119be:	d100      	bne.n	80119c2 <memmove+0x2a>
 80119c0:	bd10      	pop	{r4, pc}
 80119c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80119c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80119ca:	e7f7      	b.n	80119bc <memmove+0x24>

080119cc <_realloc_r>:
 80119cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ce:	4607      	mov	r7, r0
 80119d0:	4614      	mov	r4, r2
 80119d2:	460e      	mov	r6, r1
 80119d4:	b921      	cbnz	r1, 80119e0 <_realloc_r+0x14>
 80119d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80119da:	4611      	mov	r1, r2
 80119dc:	f7fb bcc6 	b.w	800d36c <_malloc_r>
 80119e0:	b922      	cbnz	r2, 80119ec <_realloc_r+0x20>
 80119e2:	f7fb fc73 	bl	800d2cc <_free_r>
 80119e6:	4625      	mov	r5, r4
 80119e8:	4628      	mov	r0, r5
 80119ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119ec:	f000 f82d 	bl	8011a4a <_malloc_usable_size_r>
 80119f0:	42a0      	cmp	r0, r4
 80119f2:	d20f      	bcs.n	8011a14 <_realloc_r+0x48>
 80119f4:	4621      	mov	r1, r4
 80119f6:	4638      	mov	r0, r7
 80119f8:	f7fb fcb8 	bl	800d36c <_malloc_r>
 80119fc:	4605      	mov	r5, r0
 80119fe:	2800      	cmp	r0, #0
 8011a00:	d0f2      	beq.n	80119e8 <_realloc_r+0x1c>
 8011a02:	4631      	mov	r1, r6
 8011a04:	4622      	mov	r2, r4
 8011a06:	f7fb fc3b 	bl	800d280 <memcpy>
 8011a0a:	4631      	mov	r1, r6
 8011a0c:	4638      	mov	r0, r7
 8011a0e:	f7fb fc5d 	bl	800d2cc <_free_r>
 8011a12:	e7e9      	b.n	80119e8 <_realloc_r+0x1c>
 8011a14:	4635      	mov	r5, r6
 8011a16:	e7e7      	b.n	80119e8 <_realloc_r+0x1c>

08011a18 <_read_r>:
 8011a18:	b538      	push	{r3, r4, r5, lr}
 8011a1a:	4d07      	ldr	r5, [pc, #28]	; (8011a38 <_read_r+0x20>)
 8011a1c:	4604      	mov	r4, r0
 8011a1e:	4608      	mov	r0, r1
 8011a20:	4611      	mov	r1, r2
 8011a22:	2200      	movs	r2, #0
 8011a24:	602a      	str	r2, [r5, #0]
 8011a26:	461a      	mov	r2, r3
 8011a28:	f7f3 fde4 	bl	80055f4 <_read>
 8011a2c:	1c43      	adds	r3, r0, #1
 8011a2e:	d102      	bne.n	8011a36 <_read_r+0x1e>
 8011a30:	682b      	ldr	r3, [r5, #0]
 8011a32:	b103      	cbz	r3, 8011a36 <_read_r+0x1e>
 8011a34:	6023      	str	r3, [r4, #0]
 8011a36:	bd38      	pop	{r3, r4, r5, pc}
 8011a38:	20007410 	.word	0x20007410

08011a3c <abort>:
 8011a3c:	b508      	push	{r3, lr}
 8011a3e:	2006      	movs	r0, #6
 8011a40:	f000 f834 	bl	8011aac <raise>
 8011a44:	2001      	movs	r0, #1
 8011a46:	f002 f805 	bl	8013a54 <_exit>

08011a4a <_malloc_usable_size_r>:
 8011a4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a4e:	1f18      	subs	r0, r3, #4
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	bfbc      	itt	lt
 8011a54:	580b      	ldrlt	r3, [r1, r0]
 8011a56:	18c0      	addlt	r0, r0, r3
 8011a58:	4770      	bx	lr

08011a5a <_raise_r>:
 8011a5a:	291f      	cmp	r1, #31
 8011a5c:	b538      	push	{r3, r4, r5, lr}
 8011a5e:	4604      	mov	r4, r0
 8011a60:	460d      	mov	r5, r1
 8011a62:	d904      	bls.n	8011a6e <_raise_r+0x14>
 8011a64:	2316      	movs	r3, #22
 8011a66:	6003      	str	r3, [r0, #0]
 8011a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a6c:	bd38      	pop	{r3, r4, r5, pc}
 8011a6e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011a70:	b112      	cbz	r2, 8011a78 <_raise_r+0x1e>
 8011a72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a76:	b94b      	cbnz	r3, 8011a8c <_raise_r+0x32>
 8011a78:	4620      	mov	r0, r4
 8011a7a:	f000 f831 	bl	8011ae0 <_getpid_r>
 8011a7e:	462a      	mov	r2, r5
 8011a80:	4601      	mov	r1, r0
 8011a82:	4620      	mov	r0, r4
 8011a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a88:	f000 b818 	b.w	8011abc <_kill_r>
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	d00a      	beq.n	8011aa6 <_raise_r+0x4c>
 8011a90:	1c59      	adds	r1, r3, #1
 8011a92:	d103      	bne.n	8011a9c <_raise_r+0x42>
 8011a94:	2316      	movs	r3, #22
 8011a96:	6003      	str	r3, [r0, #0]
 8011a98:	2001      	movs	r0, #1
 8011a9a:	e7e7      	b.n	8011a6c <_raise_r+0x12>
 8011a9c:	2400      	movs	r4, #0
 8011a9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011aa2:	4628      	mov	r0, r5
 8011aa4:	4798      	blx	r3
 8011aa6:	2000      	movs	r0, #0
 8011aa8:	e7e0      	b.n	8011a6c <_raise_r+0x12>
	...

08011aac <raise>:
 8011aac:	4b02      	ldr	r3, [pc, #8]	; (8011ab8 <raise+0xc>)
 8011aae:	4601      	mov	r1, r0
 8011ab0:	6818      	ldr	r0, [r3, #0]
 8011ab2:	f7ff bfd2 	b.w	8011a5a <_raise_r>
 8011ab6:	bf00      	nop
 8011ab8:	20000014 	.word	0x20000014

08011abc <_kill_r>:
 8011abc:	b538      	push	{r3, r4, r5, lr}
 8011abe:	4d07      	ldr	r5, [pc, #28]	; (8011adc <_kill_r+0x20>)
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	4608      	mov	r0, r1
 8011ac6:	4611      	mov	r1, r2
 8011ac8:	602b      	str	r3, [r5, #0]
 8011aca:	f001 ffbb 	bl	8013a44 <_kill>
 8011ace:	1c43      	adds	r3, r0, #1
 8011ad0:	d102      	bne.n	8011ad8 <_kill_r+0x1c>
 8011ad2:	682b      	ldr	r3, [r5, #0]
 8011ad4:	b103      	cbz	r3, 8011ad8 <_kill_r+0x1c>
 8011ad6:	6023      	str	r3, [r4, #0]
 8011ad8:	bd38      	pop	{r3, r4, r5, pc}
 8011ada:	bf00      	nop
 8011adc:	20007410 	.word	0x20007410

08011ae0 <_getpid_r>:
 8011ae0:	f001 bfa8 	b.w	8013a34 <_getpid>
 8011ae4:	0000      	movs	r0, r0
	...

08011ae8 <cos>:
 8011ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011aea:	ec53 2b10 	vmov	r2, r3, d0
 8011aee:	4824      	ldr	r0, [pc, #144]	; (8011b80 <cos+0x98>)
 8011af0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011af4:	4281      	cmp	r1, r0
 8011af6:	dc06      	bgt.n	8011b06 <cos+0x1e>
 8011af8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8011b78 <cos+0x90>
 8011afc:	f001 f92c 	bl	8012d58 <__kernel_cos>
 8011b00:	ec51 0b10 	vmov	r0, r1, d0
 8011b04:	e007      	b.n	8011b16 <cos+0x2e>
 8011b06:	481f      	ldr	r0, [pc, #124]	; (8011b84 <cos+0x9c>)
 8011b08:	4281      	cmp	r1, r0
 8011b0a:	dd09      	ble.n	8011b20 <cos+0x38>
 8011b0c:	ee10 0a10 	vmov	r0, s0
 8011b10:	4619      	mov	r1, r3
 8011b12:	f7ee fbd9 	bl	80002c8 <__aeabi_dsub>
 8011b16:	ec41 0b10 	vmov	d0, r0, r1
 8011b1a:	b005      	add	sp, #20
 8011b1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b20:	4668      	mov	r0, sp
 8011b22:	f000 fe59 	bl	80127d8 <__ieee754_rem_pio2>
 8011b26:	f000 0003 	and.w	r0, r0, #3
 8011b2a:	2801      	cmp	r0, #1
 8011b2c:	d007      	beq.n	8011b3e <cos+0x56>
 8011b2e:	2802      	cmp	r0, #2
 8011b30:	d012      	beq.n	8011b58 <cos+0x70>
 8011b32:	b9c0      	cbnz	r0, 8011b66 <cos+0x7e>
 8011b34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b38:	ed9d 0b00 	vldr	d0, [sp]
 8011b3c:	e7de      	b.n	8011afc <cos+0x14>
 8011b3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b42:	ed9d 0b00 	vldr	d0, [sp]
 8011b46:	f001 fd0f 	bl	8013568 <__kernel_sin>
 8011b4a:	ec53 2b10 	vmov	r2, r3, d0
 8011b4e:	ee10 0a10 	vmov	r0, s0
 8011b52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011b56:	e7de      	b.n	8011b16 <cos+0x2e>
 8011b58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b5c:	ed9d 0b00 	vldr	d0, [sp]
 8011b60:	f001 f8fa 	bl	8012d58 <__kernel_cos>
 8011b64:	e7f1      	b.n	8011b4a <cos+0x62>
 8011b66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b6a:	ed9d 0b00 	vldr	d0, [sp]
 8011b6e:	2001      	movs	r0, #1
 8011b70:	f001 fcfa 	bl	8013568 <__kernel_sin>
 8011b74:	e7c4      	b.n	8011b00 <cos+0x18>
 8011b76:	bf00      	nop
	...
 8011b80:	3fe921fb 	.word	0x3fe921fb
 8011b84:	7fefffff 	.word	0x7fefffff

08011b88 <sin>:
 8011b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b8a:	ec53 2b10 	vmov	r2, r3, d0
 8011b8e:	4826      	ldr	r0, [pc, #152]	; (8011c28 <sin+0xa0>)
 8011b90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011b94:	4281      	cmp	r1, r0
 8011b96:	dc07      	bgt.n	8011ba8 <sin+0x20>
 8011b98:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8011c20 <sin+0x98>
 8011b9c:	2000      	movs	r0, #0
 8011b9e:	f001 fce3 	bl	8013568 <__kernel_sin>
 8011ba2:	ec51 0b10 	vmov	r0, r1, d0
 8011ba6:	e007      	b.n	8011bb8 <sin+0x30>
 8011ba8:	4820      	ldr	r0, [pc, #128]	; (8011c2c <sin+0xa4>)
 8011baa:	4281      	cmp	r1, r0
 8011bac:	dd09      	ble.n	8011bc2 <sin+0x3a>
 8011bae:	ee10 0a10 	vmov	r0, s0
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	f7ee fb88 	bl	80002c8 <__aeabi_dsub>
 8011bb8:	ec41 0b10 	vmov	d0, r0, r1
 8011bbc:	b005      	add	sp, #20
 8011bbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8011bc2:	4668      	mov	r0, sp
 8011bc4:	f000 fe08 	bl	80127d8 <__ieee754_rem_pio2>
 8011bc8:	f000 0003 	and.w	r0, r0, #3
 8011bcc:	2801      	cmp	r0, #1
 8011bce:	d008      	beq.n	8011be2 <sin+0x5a>
 8011bd0:	2802      	cmp	r0, #2
 8011bd2:	d00d      	beq.n	8011bf0 <sin+0x68>
 8011bd4:	b9d0      	cbnz	r0, 8011c0c <sin+0x84>
 8011bd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bda:	ed9d 0b00 	vldr	d0, [sp]
 8011bde:	2001      	movs	r0, #1
 8011be0:	e7dd      	b.n	8011b9e <sin+0x16>
 8011be2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011be6:	ed9d 0b00 	vldr	d0, [sp]
 8011bea:	f001 f8b5 	bl	8012d58 <__kernel_cos>
 8011bee:	e7d8      	b.n	8011ba2 <sin+0x1a>
 8011bf0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bf4:	ed9d 0b00 	vldr	d0, [sp]
 8011bf8:	2001      	movs	r0, #1
 8011bfa:	f001 fcb5 	bl	8013568 <__kernel_sin>
 8011bfe:	ec53 2b10 	vmov	r2, r3, d0
 8011c02:	ee10 0a10 	vmov	r0, s0
 8011c06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011c0a:	e7d5      	b.n	8011bb8 <sin+0x30>
 8011c0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c10:	ed9d 0b00 	vldr	d0, [sp]
 8011c14:	f001 f8a0 	bl	8012d58 <__kernel_cos>
 8011c18:	e7f1      	b.n	8011bfe <sin+0x76>
 8011c1a:	bf00      	nop
 8011c1c:	f3af 8000 	nop.w
	...
 8011c28:	3fe921fb 	.word	0x3fe921fb
 8011c2c:	7fefffff 	.word	0x7fefffff

08011c30 <pow>:
 8011c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c34:	ec59 8b10 	vmov	r8, r9, d0
 8011c38:	ec57 6b11 	vmov	r6, r7, d1
 8011c3c:	f000 f8a8 	bl	8011d90 <__ieee754_pow>
 8011c40:	4b4e      	ldr	r3, [pc, #312]	; (8011d7c <pow+0x14c>)
 8011c42:	f993 3000 	ldrsb.w	r3, [r3]
 8011c46:	3301      	adds	r3, #1
 8011c48:	ec55 4b10 	vmov	r4, r5, d0
 8011c4c:	d015      	beq.n	8011c7a <pow+0x4a>
 8011c4e:	4632      	mov	r2, r6
 8011c50:	463b      	mov	r3, r7
 8011c52:	4630      	mov	r0, r6
 8011c54:	4639      	mov	r1, r7
 8011c56:	f7ee ff89 	bl	8000b6c <__aeabi_dcmpun>
 8011c5a:	b970      	cbnz	r0, 8011c7a <pow+0x4a>
 8011c5c:	4642      	mov	r2, r8
 8011c5e:	464b      	mov	r3, r9
 8011c60:	4640      	mov	r0, r8
 8011c62:	4649      	mov	r1, r9
 8011c64:	f7ee ff82 	bl	8000b6c <__aeabi_dcmpun>
 8011c68:	2200      	movs	r2, #0
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	b148      	cbz	r0, 8011c82 <pow+0x52>
 8011c6e:	4630      	mov	r0, r6
 8011c70:	4639      	mov	r1, r7
 8011c72:	f7ee ff49 	bl	8000b08 <__aeabi_dcmpeq>
 8011c76:	2800      	cmp	r0, #0
 8011c78:	d17d      	bne.n	8011d76 <pow+0x146>
 8011c7a:	ec45 4b10 	vmov	d0, r4, r5
 8011c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c82:	4640      	mov	r0, r8
 8011c84:	4649      	mov	r1, r9
 8011c86:	f7ee ff3f 	bl	8000b08 <__aeabi_dcmpeq>
 8011c8a:	b1e0      	cbz	r0, 8011cc6 <pow+0x96>
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	2300      	movs	r3, #0
 8011c90:	4630      	mov	r0, r6
 8011c92:	4639      	mov	r1, r7
 8011c94:	f7ee ff38 	bl	8000b08 <__aeabi_dcmpeq>
 8011c98:	2800      	cmp	r0, #0
 8011c9a:	d16c      	bne.n	8011d76 <pow+0x146>
 8011c9c:	ec47 6b10 	vmov	d0, r6, r7
 8011ca0:	f001 fd29 	bl	80136f6 <finite>
 8011ca4:	2800      	cmp	r0, #0
 8011ca6:	d0e8      	beq.n	8011c7a <pow+0x4a>
 8011ca8:	2200      	movs	r2, #0
 8011caa:	2300      	movs	r3, #0
 8011cac:	4630      	mov	r0, r6
 8011cae:	4639      	mov	r1, r7
 8011cb0:	f7ee ff34 	bl	8000b1c <__aeabi_dcmplt>
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	d0e0      	beq.n	8011c7a <pow+0x4a>
 8011cb8:	f7fb fab0 	bl	800d21c <__errno>
 8011cbc:	2321      	movs	r3, #33	; 0x21
 8011cbe:	6003      	str	r3, [r0, #0]
 8011cc0:	2400      	movs	r4, #0
 8011cc2:	4d2f      	ldr	r5, [pc, #188]	; (8011d80 <pow+0x150>)
 8011cc4:	e7d9      	b.n	8011c7a <pow+0x4a>
 8011cc6:	ec45 4b10 	vmov	d0, r4, r5
 8011cca:	f001 fd14 	bl	80136f6 <finite>
 8011cce:	bbb8      	cbnz	r0, 8011d40 <pow+0x110>
 8011cd0:	ec49 8b10 	vmov	d0, r8, r9
 8011cd4:	f001 fd0f 	bl	80136f6 <finite>
 8011cd8:	b390      	cbz	r0, 8011d40 <pow+0x110>
 8011cda:	ec47 6b10 	vmov	d0, r6, r7
 8011cde:	f001 fd0a 	bl	80136f6 <finite>
 8011ce2:	b368      	cbz	r0, 8011d40 <pow+0x110>
 8011ce4:	4622      	mov	r2, r4
 8011ce6:	462b      	mov	r3, r5
 8011ce8:	4620      	mov	r0, r4
 8011cea:	4629      	mov	r1, r5
 8011cec:	f7ee ff3e 	bl	8000b6c <__aeabi_dcmpun>
 8011cf0:	b160      	cbz	r0, 8011d0c <pow+0xdc>
 8011cf2:	f7fb fa93 	bl	800d21c <__errno>
 8011cf6:	2321      	movs	r3, #33	; 0x21
 8011cf8:	6003      	str	r3, [r0, #0]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	4610      	mov	r0, r2
 8011d00:	4619      	mov	r1, r3
 8011d02:	f7ee fdc3 	bl	800088c <__aeabi_ddiv>
 8011d06:	4604      	mov	r4, r0
 8011d08:	460d      	mov	r5, r1
 8011d0a:	e7b6      	b.n	8011c7a <pow+0x4a>
 8011d0c:	f7fb fa86 	bl	800d21c <__errno>
 8011d10:	2322      	movs	r3, #34	; 0x22
 8011d12:	6003      	str	r3, [r0, #0]
 8011d14:	2200      	movs	r2, #0
 8011d16:	2300      	movs	r3, #0
 8011d18:	4640      	mov	r0, r8
 8011d1a:	4649      	mov	r1, r9
 8011d1c:	f7ee fefe 	bl	8000b1c <__aeabi_dcmplt>
 8011d20:	2400      	movs	r4, #0
 8011d22:	b158      	cbz	r0, 8011d3c <pow+0x10c>
 8011d24:	ec47 6b10 	vmov	d0, r6, r7
 8011d28:	f001 fd72 	bl	8013810 <rint>
 8011d2c:	4632      	mov	r2, r6
 8011d2e:	ec51 0b10 	vmov	r0, r1, d0
 8011d32:	463b      	mov	r3, r7
 8011d34:	f7ee fee8 	bl	8000b08 <__aeabi_dcmpeq>
 8011d38:	2800      	cmp	r0, #0
 8011d3a:	d0c2      	beq.n	8011cc2 <pow+0x92>
 8011d3c:	4d11      	ldr	r5, [pc, #68]	; (8011d84 <pow+0x154>)
 8011d3e:	e79c      	b.n	8011c7a <pow+0x4a>
 8011d40:	2200      	movs	r2, #0
 8011d42:	2300      	movs	r3, #0
 8011d44:	4620      	mov	r0, r4
 8011d46:	4629      	mov	r1, r5
 8011d48:	f7ee fede 	bl	8000b08 <__aeabi_dcmpeq>
 8011d4c:	2800      	cmp	r0, #0
 8011d4e:	d094      	beq.n	8011c7a <pow+0x4a>
 8011d50:	ec49 8b10 	vmov	d0, r8, r9
 8011d54:	f001 fccf 	bl	80136f6 <finite>
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	d08e      	beq.n	8011c7a <pow+0x4a>
 8011d5c:	ec47 6b10 	vmov	d0, r6, r7
 8011d60:	f001 fcc9 	bl	80136f6 <finite>
 8011d64:	2800      	cmp	r0, #0
 8011d66:	d088      	beq.n	8011c7a <pow+0x4a>
 8011d68:	f7fb fa58 	bl	800d21c <__errno>
 8011d6c:	2322      	movs	r3, #34	; 0x22
 8011d6e:	6003      	str	r3, [r0, #0]
 8011d70:	2400      	movs	r4, #0
 8011d72:	2500      	movs	r5, #0
 8011d74:	e781      	b.n	8011c7a <pow+0x4a>
 8011d76:	4d04      	ldr	r5, [pc, #16]	; (8011d88 <pow+0x158>)
 8011d78:	2400      	movs	r4, #0
 8011d7a:	e77e      	b.n	8011c7a <pow+0x4a>
 8011d7c:	200001e8 	.word	0x200001e8
 8011d80:	fff00000 	.word	0xfff00000
 8011d84:	7ff00000 	.word	0x7ff00000
 8011d88:	3ff00000 	.word	0x3ff00000
 8011d8c:	00000000 	.word	0x00000000

08011d90 <__ieee754_pow>:
 8011d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d94:	ed2d 8b06 	vpush	{d8-d10}
 8011d98:	b08d      	sub	sp, #52	; 0x34
 8011d9a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8011d9e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8011da2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8011da6:	ea56 0100 	orrs.w	r1, r6, r0
 8011daa:	ec53 2b10 	vmov	r2, r3, d0
 8011dae:	f000 84d1 	beq.w	8012754 <__ieee754_pow+0x9c4>
 8011db2:	497f      	ldr	r1, [pc, #508]	; (8011fb0 <__ieee754_pow+0x220>)
 8011db4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011db8:	428c      	cmp	r4, r1
 8011dba:	ee10 8a10 	vmov	r8, s0
 8011dbe:	4699      	mov	r9, r3
 8011dc0:	dc09      	bgt.n	8011dd6 <__ieee754_pow+0x46>
 8011dc2:	d103      	bne.n	8011dcc <__ieee754_pow+0x3c>
 8011dc4:	b97a      	cbnz	r2, 8011de6 <__ieee754_pow+0x56>
 8011dc6:	42a6      	cmp	r6, r4
 8011dc8:	dd02      	ble.n	8011dd0 <__ieee754_pow+0x40>
 8011dca:	e00c      	b.n	8011de6 <__ieee754_pow+0x56>
 8011dcc:	428e      	cmp	r6, r1
 8011dce:	dc02      	bgt.n	8011dd6 <__ieee754_pow+0x46>
 8011dd0:	428e      	cmp	r6, r1
 8011dd2:	d110      	bne.n	8011df6 <__ieee754_pow+0x66>
 8011dd4:	b178      	cbz	r0, 8011df6 <__ieee754_pow+0x66>
 8011dd6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011dda:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011dde:	ea54 0308 	orrs.w	r3, r4, r8
 8011de2:	f000 84b7 	beq.w	8012754 <__ieee754_pow+0x9c4>
 8011de6:	4873      	ldr	r0, [pc, #460]	; (8011fb4 <__ieee754_pow+0x224>)
 8011de8:	b00d      	add	sp, #52	; 0x34
 8011dea:	ecbd 8b06 	vpop	{d8-d10}
 8011dee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011df2:	f7ff bce1 	b.w	80117b8 <nan>
 8011df6:	f1b9 0f00 	cmp.w	r9, #0
 8011dfa:	da36      	bge.n	8011e6a <__ieee754_pow+0xda>
 8011dfc:	496e      	ldr	r1, [pc, #440]	; (8011fb8 <__ieee754_pow+0x228>)
 8011dfe:	428e      	cmp	r6, r1
 8011e00:	dc51      	bgt.n	8011ea6 <__ieee754_pow+0x116>
 8011e02:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8011e06:	428e      	cmp	r6, r1
 8011e08:	f340 84af 	ble.w	801276a <__ieee754_pow+0x9da>
 8011e0c:	1531      	asrs	r1, r6, #20
 8011e0e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011e12:	2914      	cmp	r1, #20
 8011e14:	dd0f      	ble.n	8011e36 <__ieee754_pow+0xa6>
 8011e16:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8011e1a:	fa20 fc01 	lsr.w	ip, r0, r1
 8011e1e:	fa0c f101 	lsl.w	r1, ip, r1
 8011e22:	4281      	cmp	r1, r0
 8011e24:	f040 84a1 	bne.w	801276a <__ieee754_pow+0x9da>
 8011e28:	f00c 0c01 	and.w	ip, ip, #1
 8011e2c:	f1cc 0102 	rsb	r1, ip, #2
 8011e30:	9100      	str	r1, [sp, #0]
 8011e32:	b180      	cbz	r0, 8011e56 <__ieee754_pow+0xc6>
 8011e34:	e059      	b.n	8011eea <__ieee754_pow+0x15a>
 8011e36:	2800      	cmp	r0, #0
 8011e38:	d155      	bne.n	8011ee6 <__ieee754_pow+0x156>
 8011e3a:	f1c1 0114 	rsb	r1, r1, #20
 8011e3e:	fa46 fc01 	asr.w	ip, r6, r1
 8011e42:	fa0c f101 	lsl.w	r1, ip, r1
 8011e46:	42b1      	cmp	r1, r6
 8011e48:	f040 848c 	bne.w	8012764 <__ieee754_pow+0x9d4>
 8011e4c:	f00c 0c01 	and.w	ip, ip, #1
 8011e50:	f1cc 0102 	rsb	r1, ip, #2
 8011e54:	9100      	str	r1, [sp, #0]
 8011e56:	4959      	ldr	r1, [pc, #356]	; (8011fbc <__ieee754_pow+0x22c>)
 8011e58:	428e      	cmp	r6, r1
 8011e5a:	d12d      	bne.n	8011eb8 <__ieee754_pow+0x128>
 8011e5c:	2f00      	cmp	r7, #0
 8011e5e:	da79      	bge.n	8011f54 <__ieee754_pow+0x1c4>
 8011e60:	4956      	ldr	r1, [pc, #344]	; (8011fbc <__ieee754_pow+0x22c>)
 8011e62:	2000      	movs	r0, #0
 8011e64:	f7ee fd12 	bl	800088c <__aeabi_ddiv>
 8011e68:	e016      	b.n	8011e98 <__ieee754_pow+0x108>
 8011e6a:	2100      	movs	r1, #0
 8011e6c:	9100      	str	r1, [sp, #0]
 8011e6e:	2800      	cmp	r0, #0
 8011e70:	d13b      	bne.n	8011eea <__ieee754_pow+0x15a>
 8011e72:	494f      	ldr	r1, [pc, #316]	; (8011fb0 <__ieee754_pow+0x220>)
 8011e74:	428e      	cmp	r6, r1
 8011e76:	d1ee      	bne.n	8011e56 <__ieee754_pow+0xc6>
 8011e78:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011e7c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011e80:	ea53 0308 	orrs.w	r3, r3, r8
 8011e84:	f000 8466 	beq.w	8012754 <__ieee754_pow+0x9c4>
 8011e88:	4b4d      	ldr	r3, [pc, #308]	; (8011fc0 <__ieee754_pow+0x230>)
 8011e8a:	429c      	cmp	r4, r3
 8011e8c:	dd0d      	ble.n	8011eaa <__ieee754_pow+0x11a>
 8011e8e:	2f00      	cmp	r7, #0
 8011e90:	f280 8464 	bge.w	801275c <__ieee754_pow+0x9cc>
 8011e94:	2000      	movs	r0, #0
 8011e96:	2100      	movs	r1, #0
 8011e98:	ec41 0b10 	vmov	d0, r0, r1
 8011e9c:	b00d      	add	sp, #52	; 0x34
 8011e9e:	ecbd 8b06 	vpop	{d8-d10}
 8011ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ea6:	2102      	movs	r1, #2
 8011ea8:	e7e0      	b.n	8011e6c <__ieee754_pow+0xdc>
 8011eaa:	2f00      	cmp	r7, #0
 8011eac:	daf2      	bge.n	8011e94 <__ieee754_pow+0x104>
 8011eae:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8011eb2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011eb6:	e7ef      	b.n	8011e98 <__ieee754_pow+0x108>
 8011eb8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8011ebc:	d104      	bne.n	8011ec8 <__ieee754_pow+0x138>
 8011ebe:	4610      	mov	r0, r2
 8011ec0:	4619      	mov	r1, r3
 8011ec2:	f7ee fbb9 	bl	8000638 <__aeabi_dmul>
 8011ec6:	e7e7      	b.n	8011e98 <__ieee754_pow+0x108>
 8011ec8:	493e      	ldr	r1, [pc, #248]	; (8011fc4 <__ieee754_pow+0x234>)
 8011eca:	428f      	cmp	r7, r1
 8011ecc:	d10d      	bne.n	8011eea <__ieee754_pow+0x15a>
 8011ece:	f1b9 0f00 	cmp.w	r9, #0
 8011ed2:	db0a      	blt.n	8011eea <__ieee754_pow+0x15a>
 8011ed4:	ec43 2b10 	vmov	d0, r2, r3
 8011ed8:	b00d      	add	sp, #52	; 0x34
 8011eda:	ecbd 8b06 	vpop	{d8-d10}
 8011ede:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ee2:	f000 be83 	b.w	8012bec <__ieee754_sqrt>
 8011ee6:	2100      	movs	r1, #0
 8011ee8:	9100      	str	r1, [sp, #0]
 8011eea:	ec43 2b10 	vmov	d0, r2, r3
 8011eee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011ef2:	f001 fbf7 	bl	80136e4 <fabs>
 8011ef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011efa:	ec51 0b10 	vmov	r0, r1, d0
 8011efe:	f1b8 0f00 	cmp.w	r8, #0
 8011f02:	d12a      	bne.n	8011f5a <__ieee754_pow+0x1ca>
 8011f04:	b12c      	cbz	r4, 8011f12 <__ieee754_pow+0x182>
 8011f06:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8011fbc <__ieee754_pow+0x22c>
 8011f0a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8011f0e:	45e6      	cmp	lr, ip
 8011f10:	d123      	bne.n	8011f5a <__ieee754_pow+0x1ca>
 8011f12:	2f00      	cmp	r7, #0
 8011f14:	da05      	bge.n	8011f22 <__ieee754_pow+0x192>
 8011f16:	4602      	mov	r2, r0
 8011f18:	460b      	mov	r3, r1
 8011f1a:	2000      	movs	r0, #0
 8011f1c:	4927      	ldr	r1, [pc, #156]	; (8011fbc <__ieee754_pow+0x22c>)
 8011f1e:	f7ee fcb5 	bl	800088c <__aeabi_ddiv>
 8011f22:	f1b9 0f00 	cmp.w	r9, #0
 8011f26:	dab7      	bge.n	8011e98 <__ieee754_pow+0x108>
 8011f28:	9b00      	ldr	r3, [sp, #0]
 8011f2a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011f2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011f32:	4323      	orrs	r3, r4
 8011f34:	d108      	bne.n	8011f48 <__ieee754_pow+0x1b8>
 8011f36:	4602      	mov	r2, r0
 8011f38:	460b      	mov	r3, r1
 8011f3a:	4610      	mov	r0, r2
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	f7ee f9c3 	bl	80002c8 <__aeabi_dsub>
 8011f42:	4602      	mov	r2, r0
 8011f44:	460b      	mov	r3, r1
 8011f46:	e78d      	b.n	8011e64 <__ieee754_pow+0xd4>
 8011f48:	9b00      	ldr	r3, [sp, #0]
 8011f4a:	2b01      	cmp	r3, #1
 8011f4c:	d1a4      	bne.n	8011e98 <__ieee754_pow+0x108>
 8011f4e:	4602      	mov	r2, r0
 8011f50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f54:	4610      	mov	r0, r2
 8011f56:	4619      	mov	r1, r3
 8011f58:	e79e      	b.n	8011e98 <__ieee754_pow+0x108>
 8011f5a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8011f5e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8011f62:	950a      	str	r5, [sp, #40]	; 0x28
 8011f64:	9d00      	ldr	r5, [sp, #0]
 8011f66:	46ac      	mov	ip, r5
 8011f68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011f6a:	ea5c 0505 	orrs.w	r5, ip, r5
 8011f6e:	d0e4      	beq.n	8011f3a <__ieee754_pow+0x1aa>
 8011f70:	4b15      	ldr	r3, [pc, #84]	; (8011fc8 <__ieee754_pow+0x238>)
 8011f72:	429e      	cmp	r6, r3
 8011f74:	f340 80fc 	ble.w	8012170 <__ieee754_pow+0x3e0>
 8011f78:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011f7c:	429e      	cmp	r6, r3
 8011f7e:	4b10      	ldr	r3, [pc, #64]	; (8011fc0 <__ieee754_pow+0x230>)
 8011f80:	dd07      	ble.n	8011f92 <__ieee754_pow+0x202>
 8011f82:	429c      	cmp	r4, r3
 8011f84:	dc0a      	bgt.n	8011f9c <__ieee754_pow+0x20c>
 8011f86:	2f00      	cmp	r7, #0
 8011f88:	da84      	bge.n	8011e94 <__ieee754_pow+0x104>
 8011f8a:	a307      	add	r3, pc, #28	; (adr r3, 8011fa8 <__ieee754_pow+0x218>)
 8011f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f90:	e795      	b.n	8011ebe <__ieee754_pow+0x12e>
 8011f92:	429c      	cmp	r4, r3
 8011f94:	dbf7      	blt.n	8011f86 <__ieee754_pow+0x1f6>
 8011f96:	4b09      	ldr	r3, [pc, #36]	; (8011fbc <__ieee754_pow+0x22c>)
 8011f98:	429c      	cmp	r4, r3
 8011f9a:	dd17      	ble.n	8011fcc <__ieee754_pow+0x23c>
 8011f9c:	2f00      	cmp	r7, #0
 8011f9e:	dcf4      	bgt.n	8011f8a <__ieee754_pow+0x1fa>
 8011fa0:	e778      	b.n	8011e94 <__ieee754_pow+0x104>
 8011fa2:	bf00      	nop
 8011fa4:	f3af 8000 	nop.w
 8011fa8:	8800759c 	.word	0x8800759c
 8011fac:	7e37e43c 	.word	0x7e37e43c
 8011fb0:	7ff00000 	.word	0x7ff00000
 8011fb4:	080140d0 	.word	0x080140d0
 8011fb8:	433fffff 	.word	0x433fffff
 8011fbc:	3ff00000 	.word	0x3ff00000
 8011fc0:	3fefffff 	.word	0x3fefffff
 8011fc4:	3fe00000 	.word	0x3fe00000
 8011fc8:	41e00000 	.word	0x41e00000
 8011fcc:	4b64      	ldr	r3, [pc, #400]	; (8012160 <__ieee754_pow+0x3d0>)
 8011fce:	2200      	movs	r2, #0
 8011fd0:	f7ee f97a 	bl	80002c8 <__aeabi_dsub>
 8011fd4:	a356      	add	r3, pc, #344	; (adr r3, 8012130 <__ieee754_pow+0x3a0>)
 8011fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fda:	4604      	mov	r4, r0
 8011fdc:	460d      	mov	r5, r1
 8011fde:	f7ee fb2b 	bl	8000638 <__aeabi_dmul>
 8011fe2:	a355      	add	r3, pc, #340	; (adr r3, 8012138 <__ieee754_pow+0x3a8>)
 8011fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe8:	4606      	mov	r6, r0
 8011fea:	460f      	mov	r7, r1
 8011fec:	4620      	mov	r0, r4
 8011fee:	4629      	mov	r1, r5
 8011ff0:	f7ee fb22 	bl	8000638 <__aeabi_dmul>
 8011ff4:	4b5b      	ldr	r3, [pc, #364]	; (8012164 <__ieee754_pow+0x3d4>)
 8011ff6:	4682      	mov	sl, r0
 8011ff8:	468b      	mov	fp, r1
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	4620      	mov	r0, r4
 8011ffe:	4629      	mov	r1, r5
 8012000:	f7ee fb1a 	bl	8000638 <__aeabi_dmul>
 8012004:	4602      	mov	r2, r0
 8012006:	460b      	mov	r3, r1
 8012008:	a14d      	add	r1, pc, #308	; (adr r1, 8012140 <__ieee754_pow+0x3b0>)
 801200a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801200e:	f7ee f95b 	bl	80002c8 <__aeabi_dsub>
 8012012:	4622      	mov	r2, r4
 8012014:	462b      	mov	r3, r5
 8012016:	f7ee fb0f 	bl	8000638 <__aeabi_dmul>
 801201a:	4602      	mov	r2, r0
 801201c:	460b      	mov	r3, r1
 801201e:	2000      	movs	r0, #0
 8012020:	4951      	ldr	r1, [pc, #324]	; (8012168 <__ieee754_pow+0x3d8>)
 8012022:	f7ee f951 	bl	80002c8 <__aeabi_dsub>
 8012026:	4622      	mov	r2, r4
 8012028:	4680      	mov	r8, r0
 801202a:	4689      	mov	r9, r1
 801202c:	462b      	mov	r3, r5
 801202e:	4620      	mov	r0, r4
 8012030:	4629      	mov	r1, r5
 8012032:	f7ee fb01 	bl	8000638 <__aeabi_dmul>
 8012036:	4602      	mov	r2, r0
 8012038:	460b      	mov	r3, r1
 801203a:	4640      	mov	r0, r8
 801203c:	4649      	mov	r1, r9
 801203e:	f7ee fafb 	bl	8000638 <__aeabi_dmul>
 8012042:	a341      	add	r3, pc, #260	; (adr r3, 8012148 <__ieee754_pow+0x3b8>)
 8012044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012048:	f7ee faf6 	bl	8000638 <__aeabi_dmul>
 801204c:	4602      	mov	r2, r0
 801204e:	460b      	mov	r3, r1
 8012050:	4650      	mov	r0, sl
 8012052:	4659      	mov	r1, fp
 8012054:	f7ee f938 	bl	80002c8 <__aeabi_dsub>
 8012058:	4602      	mov	r2, r0
 801205a:	460b      	mov	r3, r1
 801205c:	4680      	mov	r8, r0
 801205e:	4689      	mov	r9, r1
 8012060:	4630      	mov	r0, r6
 8012062:	4639      	mov	r1, r7
 8012064:	f7ee f932 	bl	80002cc <__adddf3>
 8012068:	2400      	movs	r4, #0
 801206a:	4632      	mov	r2, r6
 801206c:	463b      	mov	r3, r7
 801206e:	4620      	mov	r0, r4
 8012070:	460d      	mov	r5, r1
 8012072:	f7ee f929 	bl	80002c8 <__aeabi_dsub>
 8012076:	4602      	mov	r2, r0
 8012078:	460b      	mov	r3, r1
 801207a:	4640      	mov	r0, r8
 801207c:	4649      	mov	r1, r9
 801207e:	f7ee f923 	bl	80002c8 <__aeabi_dsub>
 8012082:	9b00      	ldr	r3, [sp, #0]
 8012084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012086:	3b01      	subs	r3, #1
 8012088:	4313      	orrs	r3, r2
 801208a:	4682      	mov	sl, r0
 801208c:	468b      	mov	fp, r1
 801208e:	f040 81f1 	bne.w	8012474 <__ieee754_pow+0x6e4>
 8012092:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8012150 <__ieee754_pow+0x3c0>
 8012096:	eeb0 8a47 	vmov.f32	s16, s14
 801209a:	eef0 8a67 	vmov.f32	s17, s15
 801209e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80120a2:	2600      	movs	r6, #0
 80120a4:	4632      	mov	r2, r6
 80120a6:	463b      	mov	r3, r7
 80120a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120ac:	f7ee f90c 	bl	80002c8 <__aeabi_dsub>
 80120b0:	4622      	mov	r2, r4
 80120b2:	462b      	mov	r3, r5
 80120b4:	f7ee fac0 	bl	8000638 <__aeabi_dmul>
 80120b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80120bc:	4680      	mov	r8, r0
 80120be:	4689      	mov	r9, r1
 80120c0:	4650      	mov	r0, sl
 80120c2:	4659      	mov	r1, fp
 80120c4:	f7ee fab8 	bl	8000638 <__aeabi_dmul>
 80120c8:	4602      	mov	r2, r0
 80120ca:	460b      	mov	r3, r1
 80120cc:	4640      	mov	r0, r8
 80120ce:	4649      	mov	r1, r9
 80120d0:	f7ee f8fc 	bl	80002cc <__adddf3>
 80120d4:	4632      	mov	r2, r6
 80120d6:	463b      	mov	r3, r7
 80120d8:	4680      	mov	r8, r0
 80120da:	4689      	mov	r9, r1
 80120dc:	4620      	mov	r0, r4
 80120de:	4629      	mov	r1, r5
 80120e0:	f7ee faaa 	bl	8000638 <__aeabi_dmul>
 80120e4:	460b      	mov	r3, r1
 80120e6:	4604      	mov	r4, r0
 80120e8:	460d      	mov	r5, r1
 80120ea:	4602      	mov	r2, r0
 80120ec:	4649      	mov	r1, r9
 80120ee:	4640      	mov	r0, r8
 80120f0:	f7ee f8ec 	bl	80002cc <__adddf3>
 80120f4:	4b1d      	ldr	r3, [pc, #116]	; (801216c <__ieee754_pow+0x3dc>)
 80120f6:	4299      	cmp	r1, r3
 80120f8:	ec45 4b19 	vmov	d9, r4, r5
 80120fc:	4606      	mov	r6, r0
 80120fe:	460f      	mov	r7, r1
 8012100:	468b      	mov	fp, r1
 8012102:	f340 82fe 	ble.w	8012702 <__ieee754_pow+0x972>
 8012106:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801210a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801210e:	4303      	orrs	r3, r0
 8012110:	f000 81f0 	beq.w	80124f4 <__ieee754_pow+0x764>
 8012114:	a310      	add	r3, pc, #64	; (adr r3, 8012158 <__ieee754_pow+0x3c8>)
 8012116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801211a:	ec51 0b18 	vmov	r0, r1, d8
 801211e:	f7ee fa8b 	bl	8000638 <__aeabi_dmul>
 8012122:	a30d      	add	r3, pc, #52	; (adr r3, 8012158 <__ieee754_pow+0x3c8>)
 8012124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012128:	e6cb      	b.n	8011ec2 <__ieee754_pow+0x132>
 801212a:	bf00      	nop
 801212c:	f3af 8000 	nop.w
 8012130:	60000000 	.word	0x60000000
 8012134:	3ff71547 	.word	0x3ff71547
 8012138:	f85ddf44 	.word	0xf85ddf44
 801213c:	3e54ae0b 	.word	0x3e54ae0b
 8012140:	55555555 	.word	0x55555555
 8012144:	3fd55555 	.word	0x3fd55555
 8012148:	652b82fe 	.word	0x652b82fe
 801214c:	3ff71547 	.word	0x3ff71547
 8012150:	00000000 	.word	0x00000000
 8012154:	bff00000 	.word	0xbff00000
 8012158:	8800759c 	.word	0x8800759c
 801215c:	7e37e43c 	.word	0x7e37e43c
 8012160:	3ff00000 	.word	0x3ff00000
 8012164:	3fd00000 	.word	0x3fd00000
 8012168:	3fe00000 	.word	0x3fe00000
 801216c:	408fffff 	.word	0x408fffff
 8012170:	4bd7      	ldr	r3, [pc, #860]	; (80124d0 <__ieee754_pow+0x740>)
 8012172:	ea03 0309 	and.w	r3, r3, r9
 8012176:	2200      	movs	r2, #0
 8012178:	b92b      	cbnz	r3, 8012186 <__ieee754_pow+0x3f6>
 801217a:	4bd6      	ldr	r3, [pc, #856]	; (80124d4 <__ieee754_pow+0x744>)
 801217c:	f7ee fa5c 	bl	8000638 <__aeabi_dmul>
 8012180:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012184:	460c      	mov	r4, r1
 8012186:	1523      	asrs	r3, r4, #20
 8012188:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801218c:	4413      	add	r3, r2
 801218e:	9309      	str	r3, [sp, #36]	; 0x24
 8012190:	4bd1      	ldr	r3, [pc, #836]	; (80124d8 <__ieee754_pow+0x748>)
 8012192:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012196:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801219a:	429c      	cmp	r4, r3
 801219c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80121a0:	dd08      	ble.n	80121b4 <__ieee754_pow+0x424>
 80121a2:	4bce      	ldr	r3, [pc, #824]	; (80124dc <__ieee754_pow+0x74c>)
 80121a4:	429c      	cmp	r4, r3
 80121a6:	f340 8163 	ble.w	8012470 <__ieee754_pow+0x6e0>
 80121aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121ac:	3301      	adds	r3, #1
 80121ae:	9309      	str	r3, [sp, #36]	; 0x24
 80121b0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80121b4:	2400      	movs	r4, #0
 80121b6:	00e3      	lsls	r3, r4, #3
 80121b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80121ba:	4bc9      	ldr	r3, [pc, #804]	; (80124e0 <__ieee754_pow+0x750>)
 80121bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80121c0:	ed93 7b00 	vldr	d7, [r3]
 80121c4:	4629      	mov	r1, r5
 80121c6:	ec53 2b17 	vmov	r2, r3, d7
 80121ca:	eeb0 8a47 	vmov.f32	s16, s14
 80121ce:	eef0 8a67 	vmov.f32	s17, s15
 80121d2:	4682      	mov	sl, r0
 80121d4:	f7ee f878 	bl	80002c8 <__aeabi_dsub>
 80121d8:	4652      	mov	r2, sl
 80121da:	4606      	mov	r6, r0
 80121dc:	460f      	mov	r7, r1
 80121de:	462b      	mov	r3, r5
 80121e0:	ec51 0b18 	vmov	r0, r1, d8
 80121e4:	f7ee f872 	bl	80002cc <__adddf3>
 80121e8:	4602      	mov	r2, r0
 80121ea:	460b      	mov	r3, r1
 80121ec:	2000      	movs	r0, #0
 80121ee:	49bd      	ldr	r1, [pc, #756]	; (80124e4 <__ieee754_pow+0x754>)
 80121f0:	f7ee fb4c 	bl	800088c <__aeabi_ddiv>
 80121f4:	ec41 0b19 	vmov	d9, r0, r1
 80121f8:	4602      	mov	r2, r0
 80121fa:	460b      	mov	r3, r1
 80121fc:	4630      	mov	r0, r6
 80121fe:	4639      	mov	r1, r7
 8012200:	f7ee fa1a 	bl	8000638 <__aeabi_dmul>
 8012204:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012208:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801220c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012210:	2300      	movs	r3, #0
 8012212:	9304      	str	r3, [sp, #16]
 8012214:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012218:	46ab      	mov	fp, r5
 801221a:	106d      	asrs	r5, r5, #1
 801221c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012220:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012224:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012228:	2200      	movs	r2, #0
 801222a:	4640      	mov	r0, r8
 801222c:	4649      	mov	r1, r9
 801222e:	4614      	mov	r4, r2
 8012230:	461d      	mov	r5, r3
 8012232:	f7ee fa01 	bl	8000638 <__aeabi_dmul>
 8012236:	4602      	mov	r2, r0
 8012238:	460b      	mov	r3, r1
 801223a:	4630      	mov	r0, r6
 801223c:	4639      	mov	r1, r7
 801223e:	f7ee f843 	bl	80002c8 <__aeabi_dsub>
 8012242:	ec53 2b18 	vmov	r2, r3, d8
 8012246:	4606      	mov	r6, r0
 8012248:	460f      	mov	r7, r1
 801224a:	4620      	mov	r0, r4
 801224c:	4629      	mov	r1, r5
 801224e:	f7ee f83b 	bl	80002c8 <__aeabi_dsub>
 8012252:	4602      	mov	r2, r0
 8012254:	460b      	mov	r3, r1
 8012256:	4650      	mov	r0, sl
 8012258:	4659      	mov	r1, fp
 801225a:	f7ee f835 	bl	80002c8 <__aeabi_dsub>
 801225e:	4642      	mov	r2, r8
 8012260:	464b      	mov	r3, r9
 8012262:	f7ee f9e9 	bl	8000638 <__aeabi_dmul>
 8012266:	4602      	mov	r2, r0
 8012268:	460b      	mov	r3, r1
 801226a:	4630      	mov	r0, r6
 801226c:	4639      	mov	r1, r7
 801226e:	f7ee f82b 	bl	80002c8 <__aeabi_dsub>
 8012272:	ec53 2b19 	vmov	r2, r3, d9
 8012276:	f7ee f9df 	bl	8000638 <__aeabi_dmul>
 801227a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801227e:	ec41 0b18 	vmov	d8, r0, r1
 8012282:	4610      	mov	r0, r2
 8012284:	4619      	mov	r1, r3
 8012286:	f7ee f9d7 	bl	8000638 <__aeabi_dmul>
 801228a:	a37d      	add	r3, pc, #500	; (adr r3, 8012480 <__ieee754_pow+0x6f0>)
 801228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012290:	4604      	mov	r4, r0
 8012292:	460d      	mov	r5, r1
 8012294:	f7ee f9d0 	bl	8000638 <__aeabi_dmul>
 8012298:	a37b      	add	r3, pc, #492	; (adr r3, 8012488 <__ieee754_pow+0x6f8>)
 801229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801229e:	f7ee f815 	bl	80002cc <__adddf3>
 80122a2:	4622      	mov	r2, r4
 80122a4:	462b      	mov	r3, r5
 80122a6:	f7ee f9c7 	bl	8000638 <__aeabi_dmul>
 80122aa:	a379      	add	r3, pc, #484	; (adr r3, 8012490 <__ieee754_pow+0x700>)
 80122ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b0:	f7ee f80c 	bl	80002cc <__adddf3>
 80122b4:	4622      	mov	r2, r4
 80122b6:	462b      	mov	r3, r5
 80122b8:	f7ee f9be 	bl	8000638 <__aeabi_dmul>
 80122bc:	a376      	add	r3, pc, #472	; (adr r3, 8012498 <__ieee754_pow+0x708>)
 80122be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c2:	f7ee f803 	bl	80002cc <__adddf3>
 80122c6:	4622      	mov	r2, r4
 80122c8:	462b      	mov	r3, r5
 80122ca:	f7ee f9b5 	bl	8000638 <__aeabi_dmul>
 80122ce:	a374      	add	r3, pc, #464	; (adr r3, 80124a0 <__ieee754_pow+0x710>)
 80122d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d4:	f7ed fffa 	bl	80002cc <__adddf3>
 80122d8:	4622      	mov	r2, r4
 80122da:	462b      	mov	r3, r5
 80122dc:	f7ee f9ac 	bl	8000638 <__aeabi_dmul>
 80122e0:	a371      	add	r3, pc, #452	; (adr r3, 80124a8 <__ieee754_pow+0x718>)
 80122e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e6:	f7ed fff1 	bl	80002cc <__adddf3>
 80122ea:	4622      	mov	r2, r4
 80122ec:	4606      	mov	r6, r0
 80122ee:	460f      	mov	r7, r1
 80122f0:	462b      	mov	r3, r5
 80122f2:	4620      	mov	r0, r4
 80122f4:	4629      	mov	r1, r5
 80122f6:	f7ee f99f 	bl	8000638 <__aeabi_dmul>
 80122fa:	4602      	mov	r2, r0
 80122fc:	460b      	mov	r3, r1
 80122fe:	4630      	mov	r0, r6
 8012300:	4639      	mov	r1, r7
 8012302:	f7ee f999 	bl	8000638 <__aeabi_dmul>
 8012306:	4642      	mov	r2, r8
 8012308:	4604      	mov	r4, r0
 801230a:	460d      	mov	r5, r1
 801230c:	464b      	mov	r3, r9
 801230e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012312:	f7ed ffdb 	bl	80002cc <__adddf3>
 8012316:	ec53 2b18 	vmov	r2, r3, d8
 801231a:	f7ee f98d 	bl	8000638 <__aeabi_dmul>
 801231e:	4622      	mov	r2, r4
 8012320:	462b      	mov	r3, r5
 8012322:	f7ed ffd3 	bl	80002cc <__adddf3>
 8012326:	4642      	mov	r2, r8
 8012328:	4682      	mov	sl, r0
 801232a:	468b      	mov	fp, r1
 801232c:	464b      	mov	r3, r9
 801232e:	4640      	mov	r0, r8
 8012330:	4649      	mov	r1, r9
 8012332:	f7ee f981 	bl	8000638 <__aeabi_dmul>
 8012336:	4b6c      	ldr	r3, [pc, #432]	; (80124e8 <__ieee754_pow+0x758>)
 8012338:	2200      	movs	r2, #0
 801233a:	4606      	mov	r6, r0
 801233c:	460f      	mov	r7, r1
 801233e:	f7ed ffc5 	bl	80002cc <__adddf3>
 8012342:	4652      	mov	r2, sl
 8012344:	465b      	mov	r3, fp
 8012346:	f7ed ffc1 	bl	80002cc <__adddf3>
 801234a:	9c04      	ldr	r4, [sp, #16]
 801234c:	460d      	mov	r5, r1
 801234e:	4622      	mov	r2, r4
 8012350:	460b      	mov	r3, r1
 8012352:	4640      	mov	r0, r8
 8012354:	4649      	mov	r1, r9
 8012356:	f7ee f96f 	bl	8000638 <__aeabi_dmul>
 801235a:	4b63      	ldr	r3, [pc, #396]	; (80124e8 <__ieee754_pow+0x758>)
 801235c:	4680      	mov	r8, r0
 801235e:	4689      	mov	r9, r1
 8012360:	2200      	movs	r2, #0
 8012362:	4620      	mov	r0, r4
 8012364:	4629      	mov	r1, r5
 8012366:	f7ed ffaf 	bl	80002c8 <__aeabi_dsub>
 801236a:	4632      	mov	r2, r6
 801236c:	463b      	mov	r3, r7
 801236e:	f7ed ffab 	bl	80002c8 <__aeabi_dsub>
 8012372:	4602      	mov	r2, r0
 8012374:	460b      	mov	r3, r1
 8012376:	4650      	mov	r0, sl
 8012378:	4659      	mov	r1, fp
 801237a:	f7ed ffa5 	bl	80002c8 <__aeabi_dsub>
 801237e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012382:	f7ee f959 	bl	8000638 <__aeabi_dmul>
 8012386:	4622      	mov	r2, r4
 8012388:	4606      	mov	r6, r0
 801238a:	460f      	mov	r7, r1
 801238c:	462b      	mov	r3, r5
 801238e:	ec51 0b18 	vmov	r0, r1, d8
 8012392:	f7ee f951 	bl	8000638 <__aeabi_dmul>
 8012396:	4602      	mov	r2, r0
 8012398:	460b      	mov	r3, r1
 801239a:	4630      	mov	r0, r6
 801239c:	4639      	mov	r1, r7
 801239e:	f7ed ff95 	bl	80002cc <__adddf3>
 80123a2:	4606      	mov	r6, r0
 80123a4:	460f      	mov	r7, r1
 80123a6:	4602      	mov	r2, r0
 80123a8:	460b      	mov	r3, r1
 80123aa:	4640      	mov	r0, r8
 80123ac:	4649      	mov	r1, r9
 80123ae:	f7ed ff8d 	bl	80002cc <__adddf3>
 80123b2:	9c04      	ldr	r4, [sp, #16]
 80123b4:	a33e      	add	r3, pc, #248	; (adr r3, 80124b0 <__ieee754_pow+0x720>)
 80123b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ba:	4620      	mov	r0, r4
 80123bc:	460d      	mov	r5, r1
 80123be:	f7ee f93b 	bl	8000638 <__aeabi_dmul>
 80123c2:	4642      	mov	r2, r8
 80123c4:	ec41 0b18 	vmov	d8, r0, r1
 80123c8:	464b      	mov	r3, r9
 80123ca:	4620      	mov	r0, r4
 80123cc:	4629      	mov	r1, r5
 80123ce:	f7ed ff7b 	bl	80002c8 <__aeabi_dsub>
 80123d2:	4602      	mov	r2, r0
 80123d4:	460b      	mov	r3, r1
 80123d6:	4630      	mov	r0, r6
 80123d8:	4639      	mov	r1, r7
 80123da:	f7ed ff75 	bl	80002c8 <__aeabi_dsub>
 80123de:	a336      	add	r3, pc, #216	; (adr r3, 80124b8 <__ieee754_pow+0x728>)
 80123e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e4:	f7ee f928 	bl	8000638 <__aeabi_dmul>
 80123e8:	a335      	add	r3, pc, #212	; (adr r3, 80124c0 <__ieee754_pow+0x730>)
 80123ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ee:	4606      	mov	r6, r0
 80123f0:	460f      	mov	r7, r1
 80123f2:	4620      	mov	r0, r4
 80123f4:	4629      	mov	r1, r5
 80123f6:	f7ee f91f 	bl	8000638 <__aeabi_dmul>
 80123fa:	4602      	mov	r2, r0
 80123fc:	460b      	mov	r3, r1
 80123fe:	4630      	mov	r0, r6
 8012400:	4639      	mov	r1, r7
 8012402:	f7ed ff63 	bl	80002cc <__adddf3>
 8012406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012408:	4b38      	ldr	r3, [pc, #224]	; (80124ec <__ieee754_pow+0x75c>)
 801240a:	4413      	add	r3, r2
 801240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012410:	f7ed ff5c 	bl	80002cc <__adddf3>
 8012414:	4682      	mov	sl, r0
 8012416:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012418:	468b      	mov	fp, r1
 801241a:	f7ee f8a3 	bl	8000564 <__aeabi_i2d>
 801241e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012420:	4b33      	ldr	r3, [pc, #204]	; (80124f0 <__ieee754_pow+0x760>)
 8012422:	4413      	add	r3, r2
 8012424:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012428:	4606      	mov	r6, r0
 801242a:	460f      	mov	r7, r1
 801242c:	4652      	mov	r2, sl
 801242e:	465b      	mov	r3, fp
 8012430:	ec51 0b18 	vmov	r0, r1, d8
 8012434:	f7ed ff4a 	bl	80002cc <__adddf3>
 8012438:	4642      	mov	r2, r8
 801243a:	464b      	mov	r3, r9
 801243c:	f7ed ff46 	bl	80002cc <__adddf3>
 8012440:	4632      	mov	r2, r6
 8012442:	463b      	mov	r3, r7
 8012444:	f7ed ff42 	bl	80002cc <__adddf3>
 8012448:	9c04      	ldr	r4, [sp, #16]
 801244a:	4632      	mov	r2, r6
 801244c:	463b      	mov	r3, r7
 801244e:	4620      	mov	r0, r4
 8012450:	460d      	mov	r5, r1
 8012452:	f7ed ff39 	bl	80002c8 <__aeabi_dsub>
 8012456:	4642      	mov	r2, r8
 8012458:	464b      	mov	r3, r9
 801245a:	f7ed ff35 	bl	80002c8 <__aeabi_dsub>
 801245e:	ec53 2b18 	vmov	r2, r3, d8
 8012462:	f7ed ff31 	bl	80002c8 <__aeabi_dsub>
 8012466:	4602      	mov	r2, r0
 8012468:	460b      	mov	r3, r1
 801246a:	4650      	mov	r0, sl
 801246c:	4659      	mov	r1, fp
 801246e:	e606      	b.n	801207e <__ieee754_pow+0x2ee>
 8012470:	2401      	movs	r4, #1
 8012472:	e6a0      	b.n	80121b6 <__ieee754_pow+0x426>
 8012474:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80124c8 <__ieee754_pow+0x738>
 8012478:	e60d      	b.n	8012096 <__ieee754_pow+0x306>
 801247a:	bf00      	nop
 801247c:	f3af 8000 	nop.w
 8012480:	4a454eef 	.word	0x4a454eef
 8012484:	3fca7e28 	.word	0x3fca7e28
 8012488:	93c9db65 	.word	0x93c9db65
 801248c:	3fcd864a 	.word	0x3fcd864a
 8012490:	a91d4101 	.word	0xa91d4101
 8012494:	3fd17460 	.word	0x3fd17460
 8012498:	518f264d 	.word	0x518f264d
 801249c:	3fd55555 	.word	0x3fd55555
 80124a0:	db6fabff 	.word	0xdb6fabff
 80124a4:	3fdb6db6 	.word	0x3fdb6db6
 80124a8:	33333303 	.word	0x33333303
 80124ac:	3fe33333 	.word	0x3fe33333
 80124b0:	e0000000 	.word	0xe0000000
 80124b4:	3feec709 	.word	0x3feec709
 80124b8:	dc3a03fd 	.word	0xdc3a03fd
 80124bc:	3feec709 	.word	0x3feec709
 80124c0:	145b01f5 	.word	0x145b01f5
 80124c4:	be3e2fe0 	.word	0xbe3e2fe0
 80124c8:	00000000 	.word	0x00000000
 80124cc:	3ff00000 	.word	0x3ff00000
 80124d0:	7ff00000 	.word	0x7ff00000
 80124d4:	43400000 	.word	0x43400000
 80124d8:	0003988e 	.word	0x0003988e
 80124dc:	000bb679 	.word	0x000bb679
 80124e0:	080140d8 	.word	0x080140d8
 80124e4:	3ff00000 	.word	0x3ff00000
 80124e8:	40080000 	.word	0x40080000
 80124ec:	080140f8 	.word	0x080140f8
 80124f0:	080140e8 	.word	0x080140e8
 80124f4:	a3b5      	add	r3, pc, #724	; (adr r3, 80127cc <__ieee754_pow+0xa3c>)
 80124f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124fa:	4640      	mov	r0, r8
 80124fc:	4649      	mov	r1, r9
 80124fe:	f7ed fee5 	bl	80002cc <__adddf3>
 8012502:	4622      	mov	r2, r4
 8012504:	ec41 0b1a 	vmov	d10, r0, r1
 8012508:	462b      	mov	r3, r5
 801250a:	4630      	mov	r0, r6
 801250c:	4639      	mov	r1, r7
 801250e:	f7ed fedb 	bl	80002c8 <__aeabi_dsub>
 8012512:	4602      	mov	r2, r0
 8012514:	460b      	mov	r3, r1
 8012516:	ec51 0b1a 	vmov	r0, r1, d10
 801251a:	f7ee fb1d 	bl	8000b58 <__aeabi_dcmpgt>
 801251e:	2800      	cmp	r0, #0
 8012520:	f47f adf8 	bne.w	8012114 <__ieee754_pow+0x384>
 8012524:	4aa4      	ldr	r2, [pc, #656]	; (80127b8 <__ieee754_pow+0xa28>)
 8012526:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801252a:	4293      	cmp	r3, r2
 801252c:	f340 810b 	ble.w	8012746 <__ieee754_pow+0x9b6>
 8012530:	151b      	asrs	r3, r3, #20
 8012532:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012536:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801253a:	fa4a f303 	asr.w	r3, sl, r3
 801253e:	445b      	add	r3, fp
 8012540:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012544:	4e9d      	ldr	r6, [pc, #628]	; (80127bc <__ieee754_pow+0xa2c>)
 8012546:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801254a:	4116      	asrs	r6, r2
 801254c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012550:	2000      	movs	r0, #0
 8012552:	ea23 0106 	bic.w	r1, r3, r6
 8012556:	f1c2 0214 	rsb	r2, r2, #20
 801255a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801255e:	fa4a fa02 	asr.w	sl, sl, r2
 8012562:	f1bb 0f00 	cmp.w	fp, #0
 8012566:	4602      	mov	r2, r0
 8012568:	460b      	mov	r3, r1
 801256a:	4620      	mov	r0, r4
 801256c:	4629      	mov	r1, r5
 801256e:	bfb8      	it	lt
 8012570:	f1ca 0a00 	rsblt	sl, sl, #0
 8012574:	f7ed fea8 	bl	80002c8 <__aeabi_dsub>
 8012578:	ec41 0b19 	vmov	d9, r0, r1
 801257c:	4642      	mov	r2, r8
 801257e:	464b      	mov	r3, r9
 8012580:	ec51 0b19 	vmov	r0, r1, d9
 8012584:	f7ed fea2 	bl	80002cc <__adddf3>
 8012588:	2400      	movs	r4, #0
 801258a:	a379      	add	r3, pc, #484	; (adr r3, 8012770 <__ieee754_pow+0x9e0>)
 801258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012590:	4620      	mov	r0, r4
 8012592:	460d      	mov	r5, r1
 8012594:	f7ee f850 	bl	8000638 <__aeabi_dmul>
 8012598:	ec53 2b19 	vmov	r2, r3, d9
 801259c:	4606      	mov	r6, r0
 801259e:	460f      	mov	r7, r1
 80125a0:	4620      	mov	r0, r4
 80125a2:	4629      	mov	r1, r5
 80125a4:	f7ed fe90 	bl	80002c8 <__aeabi_dsub>
 80125a8:	4602      	mov	r2, r0
 80125aa:	460b      	mov	r3, r1
 80125ac:	4640      	mov	r0, r8
 80125ae:	4649      	mov	r1, r9
 80125b0:	f7ed fe8a 	bl	80002c8 <__aeabi_dsub>
 80125b4:	a370      	add	r3, pc, #448	; (adr r3, 8012778 <__ieee754_pow+0x9e8>)
 80125b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ba:	f7ee f83d 	bl	8000638 <__aeabi_dmul>
 80125be:	a370      	add	r3, pc, #448	; (adr r3, 8012780 <__ieee754_pow+0x9f0>)
 80125c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c4:	4680      	mov	r8, r0
 80125c6:	4689      	mov	r9, r1
 80125c8:	4620      	mov	r0, r4
 80125ca:	4629      	mov	r1, r5
 80125cc:	f7ee f834 	bl	8000638 <__aeabi_dmul>
 80125d0:	4602      	mov	r2, r0
 80125d2:	460b      	mov	r3, r1
 80125d4:	4640      	mov	r0, r8
 80125d6:	4649      	mov	r1, r9
 80125d8:	f7ed fe78 	bl	80002cc <__adddf3>
 80125dc:	4604      	mov	r4, r0
 80125de:	460d      	mov	r5, r1
 80125e0:	4602      	mov	r2, r0
 80125e2:	460b      	mov	r3, r1
 80125e4:	4630      	mov	r0, r6
 80125e6:	4639      	mov	r1, r7
 80125e8:	f7ed fe70 	bl	80002cc <__adddf3>
 80125ec:	4632      	mov	r2, r6
 80125ee:	463b      	mov	r3, r7
 80125f0:	4680      	mov	r8, r0
 80125f2:	4689      	mov	r9, r1
 80125f4:	f7ed fe68 	bl	80002c8 <__aeabi_dsub>
 80125f8:	4602      	mov	r2, r0
 80125fa:	460b      	mov	r3, r1
 80125fc:	4620      	mov	r0, r4
 80125fe:	4629      	mov	r1, r5
 8012600:	f7ed fe62 	bl	80002c8 <__aeabi_dsub>
 8012604:	4642      	mov	r2, r8
 8012606:	4606      	mov	r6, r0
 8012608:	460f      	mov	r7, r1
 801260a:	464b      	mov	r3, r9
 801260c:	4640      	mov	r0, r8
 801260e:	4649      	mov	r1, r9
 8012610:	f7ee f812 	bl	8000638 <__aeabi_dmul>
 8012614:	a35c      	add	r3, pc, #368	; (adr r3, 8012788 <__ieee754_pow+0x9f8>)
 8012616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801261a:	4604      	mov	r4, r0
 801261c:	460d      	mov	r5, r1
 801261e:	f7ee f80b 	bl	8000638 <__aeabi_dmul>
 8012622:	a35b      	add	r3, pc, #364	; (adr r3, 8012790 <__ieee754_pow+0xa00>)
 8012624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012628:	f7ed fe4e 	bl	80002c8 <__aeabi_dsub>
 801262c:	4622      	mov	r2, r4
 801262e:	462b      	mov	r3, r5
 8012630:	f7ee f802 	bl	8000638 <__aeabi_dmul>
 8012634:	a358      	add	r3, pc, #352	; (adr r3, 8012798 <__ieee754_pow+0xa08>)
 8012636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801263a:	f7ed fe47 	bl	80002cc <__adddf3>
 801263e:	4622      	mov	r2, r4
 8012640:	462b      	mov	r3, r5
 8012642:	f7ed fff9 	bl	8000638 <__aeabi_dmul>
 8012646:	a356      	add	r3, pc, #344	; (adr r3, 80127a0 <__ieee754_pow+0xa10>)
 8012648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264c:	f7ed fe3c 	bl	80002c8 <__aeabi_dsub>
 8012650:	4622      	mov	r2, r4
 8012652:	462b      	mov	r3, r5
 8012654:	f7ed fff0 	bl	8000638 <__aeabi_dmul>
 8012658:	a353      	add	r3, pc, #332	; (adr r3, 80127a8 <__ieee754_pow+0xa18>)
 801265a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801265e:	f7ed fe35 	bl	80002cc <__adddf3>
 8012662:	4622      	mov	r2, r4
 8012664:	462b      	mov	r3, r5
 8012666:	f7ed ffe7 	bl	8000638 <__aeabi_dmul>
 801266a:	4602      	mov	r2, r0
 801266c:	460b      	mov	r3, r1
 801266e:	4640      	mov	r0, r8
 8012670:	4649      	mov	r1, r9
 8012672:	f7ed fe29 	bl	80002c8 <__aeabi_dsub>
 8012676:	4604      	mov	r4, r0
 8012678:	460d      	mov	r5, r1
 801267a:	4602      	mov	r2, r0
 801267c:	460b      	mov	r3, r1
 801267e:	4640      	mov	r0, r8
 8012680:	4649      	mov	r1, r9
 8012682:	f7ed ffd9 	bl	8000638 <__aeabi_dmul>
 8012686:	2200      	movs	r2, #0
 8012688:	ec41 0b19 	vmov	d9, r0, r1
 801268c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012690:	4620      	mov	r0, r4
 8012692:	4629      	mov	r1, r5
 8012694:	f7ed fe18 	bl	80002c8 <__aeabi_dsub>
 8012698:	4602      	mov	r2, r0
 801269a:	460b      	mov	r3, r1
 801269c:	ec51 0b19 	vmov	r0, r1, d9
 80126a0:	f7ee f8f4 	bl	800088c <__aeabi_ddiv>
 80126a4:	4632      	mov	r2, r6
 80126a6:	4604      	mov	r4, r0
 80126a8:	460d      	mov	r5, r1
 80126aa:	463b      	mov	r3, r7
 80126ac:	4640      	mov	r0, r8
 80126ae:	4649      	mov	r1, r9
 80126b0:	f7ed ffc2 	bl	8000638 <__aeabi_dmul>
 80126b4:	4632      	mov	r2, r6
 80126b6:	463b      	mov	r3, r7
 80126b8:	f7ed fe08 	bl	80002cc <__adddf3>
 80126bc:	4602      	mov	r2, r0
 80126be:	460b      	mov	r3, r1
 80126c0:	4620      	mov	r0, r4
 80126c2:	4629      	mov	r1, r5
 80126c4:	f7ed fe00 	bl	80002c8 <__aeabi_dsub>
 80126c8:	4642      	mov	r2, r8
 80126ca:	464b      	mov	r3, r9
 80126cc:	f7ed fdfc 	bl	80002c8 <__aeabi_dsub>
 80126d0:	460b      	mov	r3, r1
 80126d2:	4602      	mov	r2, r0
 80126d4:	493a      	ldr	r1, [pc, #232]	; (80127c0 <__ieee754_pow+0xa30>)
 80126d6:	2000      	movs	r0, #0
 80126d8:	f7ed fdf6 	bl	80002c8 <__aeabi_dsub>
 80126dc:	e9cd 0100 	strd	r0, r1, [sp]
 80126e0:	9b01      	ldr	r3, [sp, #4]
 80126e2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80126e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80126ea:	da2f      	bge.n	801274c <__ieee754_pow+0x9bc>
 80126ec:	4650      	mov	r0, sl
 80126ee:	ed9d 0b00 	vldr	d0, [sp]
 80126f2:	f001 f919 	bl	8013928 <scalbn>
 80126f6:	ec51 0b10 	vmov	r0, r1, d0
 80126fa:	ec53 2b18 	vmov	r2, r3, d8
 80126fe:	f7ff bbe0 	b.w	8011ec2 <__ieee754_pow+0x132>
 8012702:	4b30      	ldr	r3, [pc, #192]	; (80127c4 <__ieee754_pow+0xa34>)
 8012704:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012708:	429e      	cmp	r6, r3
 801270a:	f77f af0b 	ble.w	8012524 <__ieee754_pow+0x794>
 801270e:	4b2e      	ldr	r3, [pc, #184]	; (80127c8 <__ieee754_pow+0xa38>)
 8012710:	440b      	add	r3, r1
 8012712:	4303      	orrs	r3, r0
 8012714:	d00b      	beq.n	801272e <__ieee754_pow+0x99e>
 8012716:	a326      	add	r3, pc, #152	; (adr r3, 80127b0 <__ieee754_pow+0xa20>)
 8012718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801271c:	ec51 0b18 	vmov	r0, r1, d8
 8012720:	f7ed ff8a 	bl	8000638 <__aeabi_dmul>
 8012724:	a322      	add	r3, pc, #136	; (adr r3, 80127b0 <__ieee754_pow+0xa20>)
 8012726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272a:	f7ff bbca 	b.w	8011ec2 <__ieee754_pow+0x132>
 801272e:	4622      	mov	r2, r4
 8012730:	462b      	mov	r3, r5
 8012732:	f7ed fdc9 	bl	80002c8 <__aeabi_dsub>
 8012736:	4642      	mov	r2, r8
 8012738:	464b      	mov	r3, r9
 801273a:	f7ee fa03 	bl	8000b44 <__aeabi_dcmpge>
 801273e:	2800      	cmp	r0, #0
 8012740:	f43f aef0 	beq.w	8012524 <__ieee754_pow+0x794>
 8012744:	e7e7      	b.n	8012716 <__ieee754_pow+0x986>
 8012746:	f04f 0a00 	mov.w	sl, #0
 801274a:	e717      	b.n	801257c <__ieee754_pow+0x7ec>
 801274c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012750:	4619      	mov	r1, r3
 8012752:	e7d2      	b.n	80126fa <__ieee754_pow+0x96a>
 8012754:	491a      	ldr	r1, [pc, #104]	; (80127c0 <__ieee754_pow+0xa30>)
 8012756:	2000      	movs	r0, #0
 8012758:	f7ff bb9e 	b.w	8011e98 <__ieee754_pow+0x108>
 801275c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012760:	f7ff bb9a 	b.w	8011e98 <__ieee754_pow+0x108>
 8012764:	9000      	str	r0, [sp, #0]
 8012766:	f7ff bb76 	b.w	8011e56 <__ieee754_pow+0xc6>
 801276a:	2100      	movs	r1, #0
 801276c:	f7ff bb60 	b.w	8011e30 <__ieee754_pow+0xa0>
 8012770:	00000000 	.word	0x00000000
 8012774:	3fe62e43 	.word	0x3fe62e43
 8012778:	fefa39ef 	.word	0xfefa39ef
 801277c:	3fe62e42 	.word	0x3fe62e42
 8012780:	0ca86c39 	.word	0x0ca86c39
 8012784:	be205c61 	.word	0xbe205c61
 8012788:	72bea4d0 	.word	0x72bea4d0
 801278c:	3e663769 	.word	0x3e663769
 8012790:	c5d26bf1 	.word	0xc5d26bf1
 8012794:	3ebbbd41 	.word	0x3ebbbd41
 8012798:	af25de2c 	.word	0xaf25de2c
 801279c:	3f11566a 	.word	0x3f11566a
 80127a0:	16bebd93 	.word	0x16bebd93
 80127a4:	3f66c16c 	.word	0x3f66c16c
 80127a8:	5555553e 	.word	0x5555553e
 80127ac:	3fc55555 	.word	0x3fc55555
 80127b0:	c2f8f359 	.word	0xc2f8f359
 80127b4:	01a56e1f 	.word	0x01a56e1f
 80127b8:	3fe00000 	.word	0x3fe00000
 80127bc:	000fffff 	.word	0x000fffff
 80127c0:	3ff00000 	.word	0x3ff00000
 80127c4:	4090cbff 	.word	0x4090cbff
 80127c8:	3f6f3400 	.word	0x3f6f3400
 80127cc:	652b82fe 	.word	0x652b82fe
 80127d0:	3c971547 	.word	0x3c971547
 80127d4:	00000000 	.word	0x00000000

080127d8 <__ieee754_rem_pio2>:
 80127d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127dc:	ed2d 8b02 	vpush	{d8}
 80127e0:	ec55 4b10 	vmov	r4, r5, d0
 80127e4:	4bca      	ldr	r3, [pc, #808]	; (8012b10 <__ieee754_rem_pio2+0x338>)
 80127e6:	b08b      	sub	sp, #44	; 0x2c
 80127e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80127ec:	4598      	cmp	r8, r3
 80127ee:	4682      	mov	sl, r0
 80127f0:	9502      	str	r5, [sp, #8]
 80127f2:	dc08      	bgt.n	8012806 <__ieee754_rem_pio2+0x2e>
 80127f4:	2200      	movs	r2, #0
 80127f6:	2300      	movs	r3, #0
 80127f8:	ed80 0b00 	vstr	d0, [r0]
 80127fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012800:	f04f 0b00 	mov.w	fp, #0
 8012804:	e028      	b.n	8012858 <__ieee754_rem_pio2+0x80>
 8012806:	4bc3      	ldr	r3, [pc, #780]	; (8012b14 <__ieee754_rem_pio2+0x33c>)
 8012808:	4598      	cmp	r8, r3
 801280a:	dc78      	bgt.n	80128fe <__ieee754_rem_pio2+0x126>
 801280c:	9b02      	ldr	r3, [sp, #8]
 801280e:	4ec2      	ldr	r6, [pc, #776]	; (8012b18 <__ieee754_rem_pio2+0x340>)
 8012810:	2b00      	cmp	r3, #0
 8012812:	ee10 0a10 	vmov	r0, s0
 8012816:	a3b0      	add	r3, pc, #704	; (adr r3, 8012ad8 <__ieee754_rem_pio2+0x300>)
 8012818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801281c:	4629      	mov	r1, r5
 801281e:	dd39      	ble.n	8012894 <__ieee754_rem_pio2+0xbc>
 8012820:	f7ed fd52 	bl	80002c8 <__aeabi_dsub>
 8012824:	45b0      	cmp	r8, r6
 8012826:	4604      	mov	r4, r0
 8012828:	460d      	mov	r5, r1
 801282a:	d01b      	beq.n	8012864 <__ieee754_rem_pio2+0x8c>
 801282c:	a3ac      	add	r3, pc, #688	; (adr r3, 8012ae0 <__ieee754_rem_pio2+0x308>)
 801282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012832:	f7ed fd49 	bl	80002c8 <__aeabi_dsub>
 8012836:	4602      	mov	r2, r0
 8012838:	460b      	mov	r3, r1
 801283a:	e9ca 2300 	strd	r2, r3, [sl]
 801283e:	4620      	mov	r0, r4
 8012840:	4629      	mov	r1, r5
 8012842:	f7ed fd41 	bl	80002c8 <__aeabi_dsub>
 8012846:	a3a6      	add	r3, pc, #664	; (adr r3, 8012ae0 <__ieee754_rem_pio2+0x308>)
 8012848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801284c:	f7ed fd3c 	bl	80002c8 <__aeabi_dsub>
 8012850:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012854:	f04f 0b01 	mov.w	fp, #1
 8012858:	4658      	mov	r0, fp
 801285a:	b00b      	add	sp, #44	; 0x2c
 801285c:	ecbd 8b02 	vpop	{d8}
 8012860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012864:	a3a0      	add	r3, pc, #640	; (adr r3, 8012ae8 <__ieee754_rem_pio2+0x310>)
 8012866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286a:	f7ed fd2d 	bl	80002c8 <__aeabi_dsub>
 801286e:	a3a0      	add	r3, pc, #640	; (adr r3, 8012af0 <__ieee754_rem_pio2+0x318>)
 8012870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012874:	4604      	mov	r4, r0
 8012876:	460d      	mov	r5, r1
 8012878:	f7ed fd26 	bl	80002c8 <__aeabi_dsub>
 801287c:	4602      	mov	r2, r0
 801287e:	460b      	mov	r3, r1
 8012880:	e9ca 2300 	strd	r2, r3, [sl]
 8012884:	4620      	mov	r0, r4
 8012886:	4629      	mov	r1, r5
 8012888:	f7ed fd1e 	bl	80002c8 <__aeabi_dsub>
 801288c:	a398      	add	r3, pc, #608	; (adr r3, 8012af0 <__ieee754_rem_pio2+0x318>)
 801288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012892:	e7db      	b.n	801284c <__ieee754_rem_pio2+0x74>
 8012894:	f7ed fd1a 	bl	80002cc <__adddf3>
 8012898:	45b0      	cmp	r8, r6
 801289a:	4604      	mov	r4, r0
 801289c:	460d      	mov	r5, r1
 801289e:	d016      	beq.n	80128ce <__ieee754_rem_pio2+0xf6>
 80128a0:	a38f      	add	r3, pc, #572	; (adr r3, 8012ae0 <__ieee754_rem_pio2+0x308>)
 80128a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a6:	f7ed fd11 	bl	80002cc <__adddf3>
 80128aa:	4602      	mov	r2, r0
 80128ac:	460b      	mov	r3, r1
 80128ae:	e9ca 2300 	strd	r2, r3, [sl]
 80128b2:	4620      	mov	r0, r4
 80128b4:	4629      	mov	r1, r5
 80128b6:	f7ed fd07 	bl	80002c8 <__aeabi_dsub>
 80128ba:	a389      	add	r3, pc, #548	; (adr r3, 8012ae0 <__ieee754_rem_pio2+0x308>)
 80128bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c0:	f7ed fd04 	bl	80002cc <__adddf3>
 80128c4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80128c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80128cc:	e7c4      	b.n	8012858 <__ieee754_rem_pio2+0x80>
 80128ce:	a386      	add	r3, pc, #536	; (adr r3, 8012ae8 <__ieee754_rem_pio2+0x310>)
 80128d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d4:	f7ed fcfa 	bl	80002cc <__adddf3>
 80128d8:	a385      	add	r3, pc, #532	; (adr r3, 8012af0 <__ieee754_rem_pio2+0x318>)
 80128da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128de:	4604      	mov	r4, r0
 80128e0:	460d      	mov	r5, r1
 80128e2:	f7ed fcf3 	bl	80002cc <__adddf3>
 80128e6:	4602      	mov	r2, r0
 80128e8:	460b      	mov	r3, r1
 80128ea:	e9ca 2300 	strd	r2, r3, [sl]
 80128ee:	4620      	mov	r0, r4
 80128f0:	4629      	mov	r1, r5
 80128f2:	f7ed fce9 	bl	80002c8 <__aeabi_dsub>
 80128f6:	a37e      	add	r3, pc, #504	; (adr r3, 8012af0 <__ieee754_rem_pio2+0x318>)
 80128f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128fc:	e7e0      	b.n	80128c0 <__ieee754_rem_pio2+0xe8>
 80128fe:	4b87      	ldr	r3, [pc, #540]	; (8012b1c <__ieee754_rem_pio2+0x344>)
 8012900:	4598      	cmp	r8, r3
 8012902:	f300 80d9 	bgt.w	8012ab8 <__ieee754_rem_pio2+0x2e0>
 8012906:	f000 feed 	bl	80136e4 <fabs>
 801290a:	ec55 4b10 	vmov	r4, r5, d0
 801290e:	ee10 0a10 	vmov	r0, s0
 8012912:	a379      	add	r3, pc, #484	; (adr r3, 8012af8 <__ieee754_rem_pio2+0x320>)
 8012914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012918:	4629      	mov	r1, r5
 801291a:	f7ed fe8d 	bl	8000638 <__aeabi_dmul>
 801291e:	4b80      	ldr	r3, [pc, #512]	; (8012b20 <__ieee754_rem_pio2+0x348>)
 8012920:	2200      	movs	r2, #0
 8012922:	f7ed fcd3 	bl	80002cc <__adddf3>
 8012926:	f7ee f937 	bl	8000b98 <__aeabi_d2iz>
 801292a:	4683      	mov	fp, r0
 801292c:	f7ed fe1a 	bl	8000564 <__aeabi_i2d>
 8012930:	4602      	mov	r2, r0
 8012932:	460b      	mov	r3, r1
 8012934:	ec43 2b18 	vmov	d8, r2, r3
 8012938:	a367      	add	r3, pc, #412	; (adr r3, 8012ad8 <__ieee754_rem_pio2+0x300>)
 801293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801293e:	f7ed fe7b 	bl	8000638 <__aeabi_dmul>
 8012942:	4602      	mov	r2, r0
 8012944:	460b      	mov	r3, r1
 8012946:	4620      	mov	r0, r4
 8012948:	4629      	mov	r1, r5
 801294a:	f7ed fcbd 	bl	80002c8 <__aeabi_dsub>
 801294e:	a364      	add	r3, pc, #400	; (adr r3, 8012ae0 <__ieee754_rem_pio2+0x308>)
 8012950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012954:	4606      	mov	r6, r0
 8012956:	460f      	mov	r7, r1
 8012958:	ec51 0b18 	vmov	r0, r1, d8
 801295c:	f7ed fe6c 	bl	8000638 <__aeabi_dmul>
 8012960:	f1bb 0f1f 	cmp.w	fp, #31
 8012964:	4604      	mov	r4, r0
 8012966:	460d      	mov	r5, r1
 8012968:	dc0d      	bgt.n	8012986 <__ieee754_rem_pio2+0x1ae>
 801296a:	4b6e      	ldr	r3, [pc, #440]	; (8012b24 <__ieee754_rem_pio2+0x34c>)
 801296c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8012970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012974:	4543      	cmp	r3, r8
 8012976:	d006      	beq.n	8012986 <__ieee754_rem_pio2+0x1ae>
 8012978:	4622      	mov	r2, r4
 801297a:	462b      	mov	r3, r5
 801297c:	4630      	mov	r0, r6
 801297e:	4639      	mov	r1, r7
 8012980:	f7ed fca2 	bl	80002c8 <__aeabi_dsub>
 8012984:	e00f      	b.n	80129a6 <__ieee754_rem_pio2+0x1ce>
 8012986:	462b      	mov	r3, r5
 8012988:	4622      	mov	r2, r4
 801298a:	4630      	mov	r0, r6
 801298c:	4639      	mov	r1, r7
 801298e:	f7ed fc9b 	bl	80002c8 <__aeabi_dsub>
 8012992:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012996:	9303      	str	r3, [sp, #12]
 8012998:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801299c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80129a0:	f1b8 0f10 	cmp.w	r8, #16
 80129a4:	dc02      	bgt.n	80129ac <__ieee754_rem_pio2+0x1d4>
 80129a6:	e9ca 0100 	strd	r0, r1, [sl]
 80129aa:	e039      	b.n	8012a20 <__ieee754_rem_pio2+0x248>
 80129ac:	a34e      	add	r3, pc, #312	; (adr r3, 8012ae8 <__ieee754_rem_pio2+0x310>)
 80129ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129b2:	ec51 0b18 	vmov	r0, r1, d8
 80129b6:	f7ed fe3f 	bl	8000638 <__aeabi_dmul>
 80129ba:	4604      	mov	r4, r0
 80129bc:	460d      	mov	r5, r1
 80129be:	4602      	mov	r2, r0
 80129c0:	460b      	mov	r3, r1
 80129c2:	4630      	mov	r0, r6
 80129c4:	4639      	mov	r1, r7
 80129c6:	f7ed fc7f 	bl	80002c8 <__aeabi_dsub>
 80129ca:	4602      	mov	r2, r0
 80129cc:	460b      	mov	r3, r1
 80129ce:	4680      	mov	r8, r0
 80129d0:	4689      	mov	r9, r1
 80129d2:	4630      	mov	r0, r6
 80129d4:	4639      	mov	r1, r7
 80129d6:	f7ed fc77 	bl	80002c8 <__aeabi_dsub>
 80129da:	4622      	mov	r2, r4
 80129dc:	462b      	mov	r3, r5
 80129de:	f7ed fc73 	bl	80002c8 <__aeabi_dsub>
 80129e2:	a343      	add	r3, pc, #268	; (adr r3, 8012af0 <__ieee754_rem_pio2+0x318>)
 80129e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e8:	4604      	mov	r4, r0
 80129ea:	460d      	mov	r5, r1
 80129ec:	ec51 0b18 	vmov	r0, r1, d8
 80129f0:	f7ed fe22 	bl	8000638 <__aeabi_dmul>
 80129f4:	4622      	mov	r2, r4
 80129f6:	462b      	mov	r3, r5
 80129f8:	f7ed fc66 	bl	80002c8 <__aeabi_dsub>
 80129fc:	4602      	mov	r2, r0
 80129fe:	460b      	mov	r3, r1
 8012a00:	4604      	mov	r4, r0
 8012a02:	460d      	mov	r5, r1
 8012a04:	4640      	mov	r0, r8
 8012a06:	4649      	mov	r1, r9
 8012a08:	f7ed fc5e 	bl	80002c8 <__aeabi_dsub>
 8012a0c:	9a03      	ldr	r2, [sp, #12]
 8012a0e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012a12:	1ad3      	subs	r3, r2, r3
 8012a14:	2b31      	cmp	r3, #49	; 0x31
 8012a16:	dc24      	bgt.n	8012a62 <__ieee754_rem_pio2+0x28a>
 8012a18:	e9ca 0100 	strd	r0, r1, [sl]
 8012a1c:	4646      	mov	r6, r8
 8012a1e:	464f      	mov	r7, r9
 8012a20:	e9da 8900 	ldrd	r8, r9, [sl]
 8012a24:	4630      	mov	r0, r6
 8012a26:	4642      	mov	r2, r8
 8012a28:	464b      	mov	r3, r9
 8012a2a:	4639      	mov	r1, r7
 8012a2c:	f7ed fc4c 	bl	80002c8 <__aeabi_dsub>
 8012a30:	462b      	mov	r3, r5
 8012a32:	4622      	mov	r2, r4
 8012a34:	f7ed fc48 	bl	80002c8 <__aeabi_dsub>
 8012a38:	9b02      	ldr	r3, [sp, #8]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012a40:	f6bf af0a 	bge.w	8012858 <__ieee754_rem_pio2+0x80>
 8012a44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012a48:	f8ca 3004 	str.w	r3, [sl, #4]
 8012a4c:	f8ca 8000 	str.w	r8, [sl]
 8012a50:	f8ca 0008 	str.w	r0, [sl, #8]
 8012a54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a58:	f8ca 300c 	str.w	r3, [sl, #12]
 8012a5c:	f1cb 0b00 	rsb	fp, fp, #0
 8012a60:	e6fa      	b.n	8012858 <__ieee754_rem_pio2+0x80>
 8012a62:	a327      	add	r3, pc, #156	; (adr r3, 8012b00 <__ieee754_rem_pio2+0x328>)
 8012a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a68:	ec51 0b18 	vmov	r0, r1, d8
 8012a6c:	f7ed fde4 	bl	8000638 <__aeabi_dmul>
 8012a70:	4604      	mov	r4, r0
 8012a72:	460d      	mov	r5, r1
 8012a74:	4602      	mov	r2, r0
 8012a76:	460b      	mov	r3, r1
 8012a78:	4640      	mov	r0, r8
 8012a7a:	4649      	mov	r1, r9
 8012a7c:	f7ed fc24 	bl	80002c8 <__aeabi_dsub>
 8012a80:	4602      	mov	r2, r0
 8012a82:	460b      	mov	r3, r1
 8012a84:	4606      	mov	r6, r0
 8012a86:	460f      	mov	r7, r1
 8012a88:	4640      	mov	r0, r8
 8012a8a:	4649      	mov	r1, r9
 8012a8c:	f7ed fc1c 	bl	80002c8 <__aeabi_dsub>
 8012a90:	4622      	mov	r2, r4
 8012a92:	462b      	mov	r3, r5
 8012a94:	f7ed fc18 	bl	80002c8 <__aeabi_dsub>
 8012a98:	a31b      	add	r3, pc, #108	; (adr r3, 8012b08 <__ieee754_rem_pio2+0x330>)
 8012a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a9e:	4604      	mov	r4, r0
 8012aa0:	460d      	mov	r5, r1
 8012aa2:	ec51 0b18 	vmov	r0, r1, d8
 8012aa6:	f7ed fdc7 	bl	8000638 <__aeabi_dmul>
 8012aaa:	4622      	mov	r2, r4
 8012aac:	462b      	mov	r3, r5
 8012aae:	f7ed fc0b 	bl	80002c8 <__aeabi_dsub>
 8012ab2:	4604      	mov	r4, r0
 8012ab4:	460d      	mov	r5, r1
 8012ab6:	e75f      	b.n	8012978 <__ieee754_rem_pio2+0x1a0>
 8012ab8:	4b1b      	ldr	r3, [pc, #108]	; (8012b28 <__ieee754_rem_pio2+0x350>)
 8012aba:	4598      	cmp	r8, r3
 8012abc:	dd36      	ble.n	8012b2c <__ieee754_rem_pio2+0x354>
 8012abe:	ee10 2a10 	vmov	r2, s0
 8012ac2:	462b      	mov	r3, r5
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	4629      	mov	r1, r5
 8012ac8:	f7ed fbfe 	bl	80002c8 <__aeabi_dsub>
 8012acc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012ad0:	e9ca 0100 	strd	r0, r1, [sl]
 8012ad4:	e694      	b.n	8012800 <__ieee754_rem_pio2+0x28>
 8012ad6:	bf00      	nop
 8012ad8:	54400000 	.word	0x54400000
 8012adc:	3ff921fb 	.word	0x3ff921fb
 8012ae0:	1a626331 	.word	0x1a626331
 8012ae4:	3dd0b461 	.word	0x3dd0b461
 8012ae8:	1a600000 	.word	0x1a600000
 8012aec:	3dd0b461 	.word	0x3dd0b461
 8012af0:	2e037073 	.word	0x2e037073
 8012af4:	3ba3198a 	.word	0x3ba3198a
 8012af8:	6dc9c883 	.word	0x6dc9c883
 8012afc:	3fe45f30 	.word	0x3fe45f30
 8012b00:	2e000000 	.word	0x2e000000
 8012b04:	3ba3198a 	.word	0x3ba3198a
 8012b08:	252049c1 	.word	0x252049c1
 8012b0c:	397b839a 	.word	0x397b839a
 8012b10:	3fe921fb 	.word	0x3fe921fb
 8012b14:	4002d97b 	.word	0x4002d97b
 8012b18:	3ff921fb 	.word	0x3ff921fb
 8012b1c:	413921fb 	.word	0x413921fb
 8012b20:	3fe00000 	.word	0x3fe00000
 8012b24:	08014108 	.word	0x08014108
 8012b28:	7fefffff 	.word	0x7fefffff
 8012b2c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012b30:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8012b34:	ee10 0a10 	vmov	r0, s0
 8012b38:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8012b3c:	ee10 6a10 	vmov	r6, s0
 8012b40:	460f      	mov	r7, r1
 8012b42:	f7ee f829 	bl	8000b98 <__aeabi_d2iz>
 8012b46:	f7ed fd0d 	bl	8000564 <__aeabi_i2d>
 8012b4a:	4602      	mov	r2, r0
 8012b4c:	460b      	mov	r3, r1
 8012b4e:	4630      	mov	r0, r6
 8012b50:	4639      	mov	r1, r7
 8012b52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012b56:	f7ed fbb7 	bl	80002c8 <__aeabi_dsub>
 8012b5a:	4b22      	ldr	r3, [pc, #136]	; (8012be4 <__ieee754_rem_pio2+0x40c>)
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	f7ed fd6b 	bl	8000638 <__aeabi_dmul>
 8012b62:	460f      	mov	r7, r1
 8012b64:	4606      	mov	r6, r0
 8012b66:	f7ee f817 	bl	8000b98 <__aeabi_d2iz>
 8012b6a:	f7ed fcfb 	bl	8000564 <__aeabi_i2d>
 8012b6e:	4602      	mov	r2, r0
 8012b70:	460b      	mov	r3, r1
 8012b72:	4630      	mov	r0, r6
 8012b74:	4639      	mov	r1, r7
 8012b76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012b7a:	f7ed fba5 	bl	80002c8 <__aeabi_dsub>
 8012b7e:	4b19      	ldr	r3, [pc, #100]	; (8012be4 <__ieee754_rem_pio2+0x40c>)
 8012b80:	2200      	movs	r2, #0
 8012b82:	f7ed fd59 	bl	8000638 <__aeabi_dmul>
 8012b86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012b8a:	ad04      	add	r5, sp, #16
 8012b8c:	f04f 0803 	mov.w	r8, #3
 8012b90:	46a9      	mov	r9, r5
 8012b92:	2600      	movs	r6, #0
 8012b94:	2700      	movs	r7, #0
 8012b96:	4632      	mov	r2, r6
 8012b98:	463b      	mov	r3, r7
 8012b9a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8012b9e:	46c3      	mov	fp, r8
 8012ba0:	3d08      	subs	r5, #8
 8012ba2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012ba6:	f7ed ffaf 	bl	8000b08 <__aeabi_dcmpeq>
 8012baa:	2800      	cmp	r0, #0
 8012bac:	d1f3      	bne.n	8012b96 <__ieee754_rem_pio2+0x3be>
 8012bae:	4b0e      	ldr	r3, [pc, #56]	; (8012be8 <__ieee754_rem_pio2+0x410>)
 8012bb0:	9301      	str	r3, [sp, #4]
 8012bb2:	2302      	movs	r3, #2
 8012bb4:	9300      	str	r3, [sp, #0]
 8012bb6:	4622      	mov	r2, r4
 8012bb8:	465b      	mov	r3, fp
 8012bba:	4651      	mov	r1, sl
 8012bbc:	4648      	mov	r0, r9
 8012bbe:	f000 f993 	bl	8012ee8 <__kernel_rem_pio2>
 8012bc2:	9b02      	ldr	r3, [sp, #8]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	4683      	mov	fp, r0
 8012bc8:	f6bf ae46 	bge.w	8012858 <__ieee754_rem_pio2+0x80>
 8012bcc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012bd0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012bd4:	f8ca 3004 	str.w	r3, [sl, #4]
 8012bd8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8012bdc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012be0:	e73a      	b.n	8012a58 <__ieee754_rem_pio2+0x280>
 8012be2:	bf00      	nop
 8012be4:	41700000 	.word	0x41700000
 8012be8:	08014188 	.word	0x08014188

08012bec <__ieee754_sqrt>:
 8012bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bf0:	ec55 4b10 	vmov	r4, r5, d0
 8012bf4:	4e56      	ldr	r6, [pc, #344]	; (8012d50 <__ieee754_sqrt+0x164>)
 8012bf6:	43ae      	bics	r6, r5
 8012bf8:	ee10 0a10 	vmov	r0, s0
 8012bfc:	ee10 3a10 	vmov	r3, s0
 8012c00:	4629      	mov	r1, r5
 8012c02:	462a      	mov	r2, r5
 8012c04:	d110      	bne.n	8012c28 <__ieee754_sqrt+0x3c>
 8012c06:	ee10 2a10 	vmov	r2, s0
 8012c0a:	462b      	mov	r3, r5
 8012c0c:	f7ed fd14 	bl	8000638 <__aeabi_dmul>
 8012c10:	4602      	mov	r2, r0
 8012c12:	460b      	mov	r3, r1
 8012c14:	4620      	mov	r0, r4
 8012c16:	4629      	mov	r1, r5
 8012c18:	f7ed fb58 	bl	80002cc <__adddf3>
 8012c1c:	4604      	mov	r4, r0
 8012c1e:	460d      	mov	r5, r1
 8012c20:	ec45 4b10 	vmov	d0, r4, r5
 8012c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c28:	2d00      	cmp	r5, #0
 8012c2a:	dc10      	bgt.n	8012c4e <__ieee754_sqrt+0x62>
 8012c2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012c30:	4330      	orrs	r0, r6
 8012c32:	d0f5      	beq.n	8012c20 <__ieee754_sqrt+0x34>
 8012c34:	b15d      	cbz	r5, 8012c4e <__ieee754_sqrt+0x62>
 8012c36:	ee10 2a10 	vmov	r2, s0
 8012c3a:	462b      	mov	r3, r5
 8012c3c:	ee10 0a10 	vmov	r0, s0
 8012c40:	f7ed fb42 	bl	80002c8 <__aeabi_dsub>
 8012c44:	4602      	mov	r2, r0
 8012c46:	460b      	mov	r3, r1
 8012c48:	f7ed fe20 	bl	800088c <__aeabi_ddiv>
 8012c4c:	e7e6      	b.n	8012c1c <__ieee754_sqrt+0x30>
 8012c4e:	1509      	asrs	r1, r1, #20
 8012c50:	d076      	beq.n	8012d40 <__ieee754_sqrt+0x154>
 8012c52:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012c56:	07ce      	lsls	r6, r1, #31
 8012c58:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8012c5c:	bf5e      	ittt	pl
 8012c5e:	0fda      	lsrpl	r2, r3, #31
 8012c60:	005b      	lslpl	r3, r3, #1
 8012c62:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8012c66:	0fda      	lsrs	r2, r3, #31
 8012c68:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8012c6c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8012c70:	2000      	movs	r0, #0
 8012c72:	106d      	asrs	r5, r5, #1
 8012c74:	005b      	lsls	r3, r3, #1
 8012c76:	f04f 0e16 	mov.w	lr, #22
 8012c7a:	4684      	mov	ip, r0
 8012c7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012c80:	eb0c 0401 	add.w	r4, ip, r1
 8012c84:	4294      	cmp	r4, r2
 8012c86:	bfde      	ittt	le
 8012c88:	1b12      	suble	r2, r2, r4
 8012c8a:	eb04 0c01 	addle.w	ip, r4, r1
 8012c8e:	1840      	addle	r0, r0, r1
 8012c90:	0052      	lsls	r2, r2, #1
 8012c92:	f1be 0e01 	subs.w	lr, lr, #1
 8012c96:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8012c9a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012c9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012ca2:	d1ed      	bne.n	8012c80 <__ieee754_sqrt+0x94>
 8012ca4:	4671      	mov	r1, lr
 8012ca6:	2720      	movs	r7, #32
 8012ca8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8012cac:	4562      	cmp	r2, ip
 8012cae:	eb04 060e 	add.w	r6, r4, lr
 8012cb2:	dc02      	bgt.n	8012cba <__ieee754_sqrt+0xce>
 8012cb4:	d113      	bne.n	8012cde <__ieee754_sqrt+0xf2>
 8012cb6:	429e      	cmp	r6, r3
 8012cb8:	d811      	bhi.n	8012cde <__ieee754_sqrt+0xf2>
 8012cba:	2e00      	cmp	r6, #0
 8012cbc:	eb06 0e04 	add.w	lr, r6, r4
 8012cc0:	da43      	bge.n	8012d4a <__ieee754_sqrt+0x15e>
 8012cc2:	f1be 0f00 	cmp.w	lr, #0
 8012cc6:	db40      	blt.n	8012d4a <__ieee754_sqrt+0x15e>
 8012cc8:	f10c 0801 	add.w	r8, ip, #1
 8012ccc:	eba2 020c 	sub.w	r2, r2, ip
 8012cd0:	429e      	cmp	r6, r3
 8012cd2:	bf88      	it	hi
 8012cd4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8012cd8:	1b9b      	subs	r3, r3, r6
 8012cda:	4421      	add	r1, r4
 8012cdc:	46c4      	mov	ip, r8
 8012cde:	0052      	lsls	r2, r2, #1
 8012ce0:	3f01      	subs	r7, #1
 8012ce2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8012ce6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012cea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012cee:	d1dd      	bne.n	8012cac <__ieee754_sqrt+0xc0>
 8012cf0:	4313      	orrs	r3, r2
 8012cf2:	d006      	beq.n	8012d02 <__ieee754_sqrt+0x116>
 8012cf4:	1c4c      	adds	r4, r1, #1
 8012cf6:	bf13      	iteet	ne
 8012cf8:	3101      	addne	r1, #1
 8012cfa:	3001      	addeq	r0, #1
 8012cfc:	4639      	moveq	r1, r7
 8012cfe:	f021 0101 	bicne.w	r1, r1, #1
 8012d02:	1043      	asrs	r3, r0, #1
 8012d04:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012d08:	0849      	lsrs	r1, r1, #1
 8012d0a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012d0e:	07c2      	lsls	r2, r0, #31
 8012d10:	bf48      	it	mi
 8012d12:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8012d16:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8012d1a:	460c      	mov	r4, r1
 8012d1c:	463d      	mov	r5, r7
 8012d1e:	e77f      	b.n	8012c20 <__ieee754_sqrt+0x34>
 8012d20:	0ada      	lsrs	r2, r3, #11
 8012d22:	3815      	subs	r0, #21
 8012d24:	055b      	lsls	r3, r3, #21
 8012d26:	2a00      	cmp	r2, #0
 8012d28:	d0fa      	beq.n	8012d20 <__ieee754_sqrt+0x134>
 8012d2a:	02d7      	lsls	r7, r2, #11
 8012d2c:	d50a      	bpl.n	8012d44 <__ieee754_sqrt+0x158>
 8012d2e:	f1c1 0420 	rsb	r4, r1, #32
 8012d32:	fa23 f404 	lsr.w	r4, r3, r4
 8012d36:	1e4d      	subs	r5, r1, #1
 8012d38:	408b      	lsls	r3, r1
 8012d3a:	4322      	orrs	r2, r4
 8012d3c:	1b41      	subs	r1, r0, r5
 8012d3e:	e788      	b.n	8012c52 <__ieee754_sqrt+0x66>
 8012d40:	4608      	mov	r0, r1
 8012d42:	e7f0      	b.n	8012d26 <__ieee754_sqrt+0x13a>
 8012d44:	0052      	lsls	r2, r2, #1
 8012d46:	3101      	adds	r1, #1
 8012d48:	e7ef      	b.n	8012d2a <__ieee754_sqrt+0x13e>
 8012d4a:	46e0      	mov	r8, ip
 8012d4c:	e7be      	b.n	8012ccc <__ieee754_sqrt+0xe0>
 8012d4e:	bf00      	nop
 8012d50:	7ff00000 	.word	0x7ff00000
 8012d54:	00000000 	.word	0x00000000

08012d58 <__kernel_cos>:
 8012d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d5c:	ec57 6b10 	vmov	r6, r7, d0
 8012d60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012d64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012d68:	ed8d 1b00 	vstr	d1, [sp]
 8012d6c:	da07      	bge.n	8012d7e <__kernel_cos+0x26>
 8012d6e:	ee10 0a10 	vmov	r0, s0
 8012d72:	4639      	mov	r1, r7
 8012d74:	f7ed ff10 	bl	8000b98 <__aeabi_d2iz>
 8012d78:	2800      	cmp	r0, #0
 8012d7a:	f000 8088 	beq.w	8012e8e <__kernel_cos+0x136>
 8012d7e:	4632      	mov	r2, r6
 8012d80:	463b      	mov	r3, r7
 8012d82:	4630      	mov	r0, r6
 8012d84:	4639      	mov	r1, r7
 8012d86:	f7ed fc57 	bl	8000638 <__aeabi_dmul>
 8012d8a:	4b51      	ldr	r3, [pc, #324]	; (8012ed0 <__kernel_cos+0x178>)
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	4604      	mov	r4, r0
 8012d90:	460d      	mov	r5, r1
 8012d92:	f7ed fc51 	bl	8000638 <__aeabi_dmul>
 8012d96:	a340      	add	r3, pc, #256	; (adr r3, 8012e98 <__kernel_cos+0x140>)
 8012d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d9c:	4682      	mov	sl, r0
 8012d9e:	468b      	mov	fp, r1
 8012da0:	4620      	mov	r0, r4
 8012da2:	4629      	mov	r1, r5
 8012da4:	f7ed fc48 	bl	8000638 <__aeabi_dmul>
 8012da8:	a33d      	add	r3, pc, #244	; (adr r3, 8012ea0 <__kernel_cos+0x148>)
 8012daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dae:	f7ed fa8d 	bl	80002cc <__adddf3>
 8012db2:	4622      	mov	r2, r4
 8012db4:	462b      	mov	r3, r5
 8012db6:	f7ed fc3f 	bl	8000638 <__aeabi_dmul>
 8012dba:	a33b      	add	r3, pc, #236	; (adr r3, 8012ea8 <__kernel_cos+0x150>)
 8012dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc0:	f7ed fa82 	bl	80002c8 <__aeabi_dsub>
 8012dc4:	4622      	mov	r2, r4
 8012dc6:	462b      	mov	r3, r5
 8012dc8:	f7ed fc36 	bl	8000638 <__aeabi_dmul>
 8012dcc:	a338      	add	r3, pc, #224	; (adr r3, 8012eb0 <__kernel_cos+0x158>)
 8012dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd2:	f7ed fa7b 	bl	80002cc <__adddf3>
 8012dd6:	4622      	mov	r2, r4
 8012dd8:	462b      	mov	r3, r5
 8012dda:	f7ed fc2d 	bl	8000638 <__aeabi_dmul>
 8012dde:	a336      	add	r3, pc, #216	; (adr r3, 8012eb8 <__kernel_cos+0x160>)
 8012de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de4:	f7ed fa70 	bl	80002c8 <__aeabi_dsub>
 8012de8:	4622      	mov	r2, r4
 8012dea:	462b      	mov	r3, r5
 8012dec:	f7ed fc24 	bl	8000638 <__aeabi_dmul>
 8012df0:	a333      	add	r3, pc, #204	; (adr r3, 8012ec0 <__kernel_cos+0x168>)
 8012df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df6:	f7ed fa69 	bl	80002cc <__adddf3>
 8012dfa:	4622      	mov	r2, r4
 8012dfc:	462b      	mov	r3, r5
 8012dfe:	f7ed fc1b 	bl	8000638 <__aeabi_dmul>
 8012e02:	4622      	mov	r2, r4
 8012e04:	462b      	mov	r3, r5
 8012e06:	f7ed fc17 	bl	8000638 <__aeabi_dmul>
 8012e0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e0e:	4604      	mov	r4, r0
 8012e10:	460d      	mov	r5, r1
 8012e12:	4630      	mov	r0, r6
 8012e14:	4639      	mov	r1, r7
 8012e16:	f7ed fc0f 	bl	8000638 <__aeabi_dmul>
 8012e1a:	460b      	mov	r3, r1
 8012e1c:	4602      	mov	r2, r0
 8012e1e:	4629      	mov	r1, r5
 8012e20:	4620      	mov	r0, r4
 8012e22:	f7ed fa51 	bl	80002c8 <__aeabi_dsub>
 8012e26:	4b2b      	ldr	r3, [pc, #172]	; (8012ed4 <__kernel_cos+0x17c>)
 8012e28:	4598      	cmp	r8, r3
 8012e2a:	4606      	mov	r6, r0
 8012e2c:	460f      	mov	r7, r1
 8012e2e:	dc10      	bgt.n	8012e52 <__kernel_cos+0xfa>
 8012e30:	4602      	mov	r2, r0
 8012e32:	460b      	mov	r3, r1
 8012e34:	4650      	mov	r0, sl
 8012e36:	4659      	mov	r1, fp
 8012e38:	f7ed fa46 	bl	80002c8 <__aeabi_dsub>
 8012e3c:	460b      	mov	r3, r1
 8012e3e:	4926      	ldr	r1, [pc, #152]	; (8012ed8 <__kernel_cos+0x180>)
 8012e40:	4602      	mov	r2, r0
 8012e42:	2000      	movs	r0, #0
 8012e44:	f7ed fa40 	bl	80002c8 <__aeabi_dsub>
 8012e48:	ec41 0b10 	vmov	d0, r0, r1
 8012e4c:	b003      	add	sp, #12
 8012e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e52:	4b22      	ldr	r3, [pc, #136]	; (8012edc <__kernel_cos+0x184>)
 8012e54:	4920      	ldr	r1, [pc, #128]	; (8012ed8 <__kernel_cos+0x180>)
 8012e56:	4598      	cmp	r8, r3
 8012e58:	bfcc      	ite	gt
 8012e5a:	4d21      	ldrgt	r5, [pc, #132]	; (8012ee0 <__kernel_cos+0x188>)
 8012e5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012e60:	2400      	movs	r4, #0
 8012e62:	4622      	mov	r2, r4
 8012e64:	462b      	mov	r3, r5
 8012e66:	2000      	movs	r0, #0
 8012e68:	f7ed fa2e 	bl	80002c8 <__aeabi_dsub>
 8012e6c:	4622      	mov	r2, r4
 8012e6e:	4680      	mov	r8, r0
 8012e70:	4689      	mov	r9, r1
 8012e72:	462b      	mov	r3, r5
 8012e74:	4650      	mov	r0, sl
 8012e76:	4659      	mov	r1, fp
 8012e78:	f7ed fa26 	bl	80002c8 <__aeabi_dsub>
 8012e7c:	4632      	mov	r2, r6
 8012e7e:	463b      	mov	r3, r7
 8012e80:	f7ed fa22 	bl	80002c8 <__aeabi_dsub>
 8012e84:	4602      	mov	r2, r0
 8012e86:	460b      	mov	r3, r1
 8012e88:	4640      	mov	r0, r8
 8012e8a:	4649      	mov	r1, r9
 8012e8c:	e7da      	b.n	8012e44 <__kernel_cos+0xec>
 8012e8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012ec8 <__kernel_cos+0x170>
 8012e92:	e7db      	b.n	8012e4c <__kernel_cos+0xf4>
 8012e94:	f3af 8000 	nop.w
 8012e98:	be8838d4 	.word	0xbe8838d4
 8012e9c:	bda8fae9 	.word	0xbda8fae9
 8012ea0:	bdb4b1c4 	.word	0xbdb4b1c4
 8012ea4:	3e21ee9e 	.word	0x3e21ee9e
 8012ea8:	809c52ad 	.word	0x809c52ad
 8012eac:	3e927e4f 	.word	0x3e927e4f
 8012eb0:	19cb1590 	.word	0x19cb1590
 8012eb4:	3efa01a0 	.word	0x3efa01a0
 8012eb8:	16c15177 	.word	0x16c15177
 8012ebc:	3f56c16c 	.word	0x3f56c16c
 8012ec0:	5555554c 	.word	0x5555554c
 8012ec4:	3fa55555 	.word	0x3fa55555
 8012ec8:	00000000 	.word	0x00000000
 8012ecc:	3ff00000 	.word	0x3ff00000
 8012ed0:	3fe00000 	.word	0x3fe00000
 8012ed4:	3fd33332 	.word	0x3fd33332
 8012ed8:	3ff00000 	.word	0x3ff00000
 8012edc:	3fe90000 	.word	0x3fe90000
 8012ee0:	3fd20000 	.word	0x3fd20000
 8012ee4:	00000000 	.word	0x00000000

08012ee8 <__kernel_rem_pio2>:
 8012ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eec:	ed2d 8b02 	vpush	{d8}
 8012ef0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8012ef4:	f112 0f14 	cmn.w	r2, #20
 8012ef8:	9308      	str	r3, [sp, #32]
 8012efa:	9101      	str	r1, [sp, #4]
 8012efc:	4bc6      	ldr	r3, [pc, #792]	; (8013218 <__kernel_rem_pio2+0x330>)
 8012efe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8012f00:	9009      	str	r0, [sp, #36]	; 0x24
 8012f02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012f06:	9304      	str	r3, [sp, #16]
 8012f08:	9b08      	ldr	r3, [sp, #32]
 8012f0a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012f0e:	bfa8      	it	ge
 8012f10:	1ed4      	subge	r4, r2, #3
 8012f12:	9306      	str	r3, [sp, #24]
 8012f14:	bfb2      	itee	lt
 8012f16:	2400      	movlt	r4, #0
 8012f18:	2318      	movge	r3, #24
 8012f1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8012f1e:	f06f 0317 	mvn.w	r3, #23
 8012f22:	fb04 3303 	mla	r3, r4, r3, r3
 8012f26:	eb03 0a02 	add.w	sl, r3, r2
 8012f2a:	9b04      	ldr	r3, [sp, #16]
 8012f2c:	9a06      	ldr	r2, [sp, #24]
 8012f2e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8013208 <__kernel_rem_pio2+0x320>
 8012f32:	eb03 0802 	add.w	r8, r3, r2
 8012f36:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012f38:	1aa7      	subs	r7, r4, r2
 8012f3a:	ae20      	add	r6, sp, #128	; 0x80
 8012f3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012f40:	2500      	movs	r5, #0
 8012f42:	4545      	cmp	r5, r8
 8012f44:	dd18      	ble.n	8012f78 <__kernel_rem_pio2+0x90>
 8012f46:	9b08      	ldr	r3, [sp, #32]
 8012f48:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012f4c:	aa20      	add	r2, sp, #128	; 0x80
 8012f4e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8013208 <__kernel_rem_pio2+0x320>
 8012f52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012f56:	f1c3 0301 	rsb	r3, r3, #1
 8012f5a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8012f5e:	9307      	str	r3, [sp, #28]
 8012f60:	9b07      	ldr	r3, [sp, #28]
 8012f62:	9a04      	ldr	r2, [sp, #16]
 8012f64:	4443      	add	r3, r8
 8012f66:	429a      	cmp	r2, r3
 8012f68:	db2f      	blt.n	8012fca <__kernel_rem_pio2+0xe2>
 8012f6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012f6e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012f72:	462f      	mov	r7, r5
 8012f74:	2600      	movs	r6, #0
 8012f76:	e01b      	b.n	8012fb0 <__kernel_rem_pio2+0xc8>
 8012f78:	42ef      	cmn	r7, r5
 8012f7a:	d407      	bmi.n	8012f8c <__kernel_rem_pio2+0xa4>
 8012f7c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012f80:	f7ed faf0 	bl	8000564 <__aeabi_i2d>
 8012f84:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012f88:	3501      	adds	r5, #1
 8012f8a:	e7da      	b.n	8012f42 <__kernel_rem_pio2+0x5a>
 8012f8c:	ec51 0b18 	vmov	r0, r1, d8
 8012f90:	e7f8      	b.n	8012f84 <__kernel_rem_pio2+0x9c>
 8012f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012f96:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012f9a:	f7ed fb4d 	bl	8000638 <__aeabi_dmul>
 8012f9e:	4602      	mov	r2, r0
 8012fa0:	460b      	mov	r3, r1
 8012fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fa6:	f7ed f991 	bl	80002cc <__adddf3>
 8012faa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fae:	3601      	adds	r6, #1
 8012fb0:	9b06      	ldr	r3, [sp, #24]
 8012fb2:	429e      	cmp	r6, r3
 8012fb4:	f1a7 0708 	sub.w	r7, r7, #8
 8012fb8:	ddeb      	ble.n	8012f92 <__kernel_rem_pio2+0xaa>
 8012fba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012fbe:	3508      	adds	r5, #8
 8012fc0:	ecab 7b02 	vstmia	fp!, {d7}
 8012fc4:	f108 0801 	add.w	r8, r8, #1
 8012fc8:	e7ca      	b.n	8012f60 <__kernel_rem_pio2+0x78>
 8012fca:	9b04      	ldr	r3, [sp, #16]
 8012fcc:	aa0c      	add	r2, sp, #48	; 0x30
 8012fce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012fd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8012fd4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012fd6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012fda:	9c04      	ldr	r4, [sp, #16]
 8012fdc:	930a      	str	r3, [sp, #40]	; 0x28
 8012fde:	ab98      	add	r3, sp, #608	; 0x260
 8012fe0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012fe4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8012fe8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8012fec:	f8cd b008 	str.w	fp, [sp, #8]
 8012ff0:	4625      	mov	r5, r4
 8012ff2:	2d00      	cmp	r5, #0
 8012ff4:	dc78      	bgt.n	80130e8 <__kernel_rem_pio2+0x200>
 8012ff6:	ec47 6b10 	vmov	d0, r6, r7
 8012ffa:	4650      	mov	r0, sl
 8012ffc:	f000 fc94 	bl	8013928 <scalbn>
 8013000:	ec57 6b10 	vmov	r6, r7, d0
 8013004:	2200      	movs	r2, #0
 8013006:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801300a:	ee10 0a10 	vmov	r0, s0
 801300e:	4639      	mov	r1, r7
 8013010:	f7ed fb12 	bl	8000638 <__aeabi_dmul>
 8013014:	ec41 0b10 	vmov	d0, r0, r1
 8013018:	f000 fb7a 	bl	8013710 <floor>
 801301c:	4b7f      	ldr	r3, [pc, #508]	; (801321c <__kernel_rem_pio2+0x334>)
 801301e:	ec51 0b10 	vmov	r0, r1, d0
 8013022:	2200      	movs	r2, #0
 8013024:	f7ed fb08 	bl	8000638 <__aeabi_dmul>
 8013028:	4602      	mov	r2, r0
 801302a:	460b      	mov	r3, r1
 801302c:	4630      	mov	r0, r6
 801302e:	4639      	mov	r1, r7
 8013030:	f7ed f94a 	bl	80002c8 <__aeabi_dsub>
 8013034:	460f      	mov	r7, r1
 8013036:	4606      	mov	r6, r0
 8013038:	f7ed fdae 	bl	8000b98 <__aeabi_d2iz>
 801303c:	9007      	str	r0, [sp, #28]
 801303e:	f7ed fa91 	bl	8000564 <__aeabi_i2d>
 8013042:	4602      	mov	r2, r0
 8013044:	460b      	mov	r3, r1
 8013046:	4630      	mov	r0, r6
 8013048:	4639      	mov	r1, r7
 801304a:	f7ed f93d 	bl	80002c8 <__aeabi_dsub>
 801304e:	f1ba 0f00 	cmp.w	sl, #0
 8013052:	4606      	mov	r6, r0
 8013054:	460f      	mov	r7, r1
 8013056:	dd70      	ble.n	801313a <__kernel_rem_pio2+0x252>
 8013058:	1e62      	subs	r2, r4, #1
 801305a:	ab0c      	add	r3, sp, #48	; 0x30
 801305c:	9d07      	ldr	r5, [sp, #28]
 801305e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013062:	f1ca 0118 	rsb	r1, sl, #24
 8013066:	fa40 f301 	asr.w	r3, r0, r1
 801306a:	441d      	add	r5, r3
 801306c:	408b      	lsls	r3, r1
 801306e:	1ac0      	subs	r0, r0, r3
 8013070:	ab0c      	add	r3, sp, #48	; 0x30
 8013072:	9507      	str	r5, [sp, #28]
 8013074:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013078:	f1ca 0317 	rsb	r3, sl, #23
 801307c:	fa40 f303 	asr.w	r3, r0, r3
 8013080:	9302      	str	r3, [sp, #8]
 8013082:	9b02      	ldr	r3, [sp, #8]
 8013084:	2b00      	cmp	r3, #0
 8013086:	dd66      	ble.n	8013156 <__kernel_rem_pio2+0x26e>
 8013088:	9b07      	ldr	r3, [sp, #28]
 801308a:	2200      	movs	r2, #0
 801308c:	3301      	adds	r3, #1
 801308e:	9307      	str	r3, [sp, #28]
 8013090:	4615      	mov	r5, r2
 8013092:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013096:	4294      	cmp	r4, r2
 8013098:	f300 8099 	bgt.w	80131ce <__kernel_rem_pio2+0x2e6>
 801309c:	f1ba 0f00 	cmp.w	sl, #0
 80130a0:	dd07      	ble.n	80130b2 <__kernel_rem_pio2+0x1ca>
 80130a2:	f1ba 0f01 	cmp.w	sl, #1
 80130a6:	f000 80a5 	beq.w	80131f4 <__kernel_rem_pio2+0x30c>
 80130aa:	f1ba 0f02 	cmp.w	sl, #2
 80130ae:	f000 80c1 	beq.w	8013234 <__kernel_rem_pio2+0x34c>
 80130b2:	9b02      	ldr	r3, [sp, #8]
 80130b4:	2b02      	cmp	r3, #2
 80130b6:	d14e      	bne.n	8013156 <__kernel_rem_pio2+0x26e>
 80130b8:	4632      	mov	r2, r6
 80130ba:	463b      	mov	r3, r7
 80130bc:	4958      	ldr	r1, [pc, #352]	; (8013220 <__kernel_rem_pio2+0x338>)
 80130be:	2000      	movs	r0, #0
 80130c0:	f7ed f902 	bl	80002c8 <__aeabi_dsub>
 80130c4:	4606      	mov	r6, r0
 80130c6:	460f      	mov	r7, r1
 80130c8:	2d00      	cmp	r5, #0
 80130ca:	d044      	beq.n	8013156 <__kernel_rem_pio2+0x26e>
 80130cc:	4650      	mov	r0, sl
 80130ce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8013210 <__kernel_rem_pio2+0x328>
 80130d2:	f000 fc29 	bl	8013928 <scalbn>
 80130d6:	4630      	mov	r0, r6
 80130d8:	4639      	mov	r1, r7
 80130da:	ec53 2b10 	vmov	r2, r3, d0
 80130de:	f7ed f8f3 	bl	80002c8 <__aeabi_dsub>
 80130e2:	4606      	mov	r6, r0
 80130e4:	460f      	mov	r7, r1
 80130e6:	e036      	b.n	8013156 <__kernel_rem_pio2+0x26e>
 80130e8:	4b4e      	ldr	r3, [pc, #312]	; (8013224 <__kernel_rem_pio2+0x33c>)
 80130ea:	2200      	movs	r2, #0
 80130ec:	4630      	mov	r0, r6
 80130ee:	4639      	mov	r1, r7
 80130f0:	f7ed faa2 	bl	8000638 <__aeabi_dmul>
 80130f4:	f7ed fd50 	bl	8000b98 <__aeabi_d2iz>
 80130f8:	f7ed fa34 	bl	8000564 <__aeabi_i2d>
 80130fc:	4b4a      	ldr	r3, [pc, #296]	; (8013228 <__kernel_rem_pio2+0x340>)
 80130fe:	2200      	movs	r2, #0
 8013100:	4680      	mov	r8, r0
 8013102:	4689      	mov	r9, r1
 8013104:	f7ed fa98 	bl	8000638 <__aeabi_dmul>
 8013108:	4602      	mov	r2, r0
 801310a:	460b      	mov	r3, r1
 801310c:	4630      	mov	r0, r6
 801310e:	4639      	mov	r1, r7
 8013110:	f7ed f8da 	bl	80002c8 <__aeabi_dsub>
 8013114:	f7ed fd40 	bl	8000b98 <__aeabi_d2iz>
 8013118:	9b02      	ldr	r3, [sp, #8]
 801311a:	f843 0b04 	str.w	r0, [r3], #4
 801311e:	3d01      	subs	r5, #1
 8013120:	9302      	str	r3, [sp, #8]
 8013122:	ab70      	add	r3, sp, #448	; 0x1c0
 8013124:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801312c:	4640      	mov	r0, r8
 801312e:	4649      	mov	r1, r9
 8013130:	f7ed f8cc 	bl	80002cc <__adddf3>
 8013134:	4606      	mov	r6, r0
 8013136:	460f      	mov	r7, r1
 8013138:	e75b      	b.n	8012ff2 <__kernel_rem_pio2+0x10a>
 801313a:	d105      	bne.n	8013148 <__kernel_rem_pio2+0x260>
 801313c:	1e63      	subs	r3, r4, #1
 801313e:	aa0c      	add	r2, sp, #48	; 0x30
 8013140:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013144:	15c3      	asrs	r3, r0, #23
 8013146:	e79b      	b.n	8013080 <__kernel_rem_pio2+0x198>
 8013148:	4b38      	ldr	r3, [pc, #224]	; (801322c <__kernel_rem_pio2+0x344>)
 801314a:	2200      	movs	r2, #0
 801314c:	f7ed fcfa 	bl	8000b44 <__aeabi_dcmpge>
 8013150:	2800      	cmp	r0, #0
 8013152:	d139      	bne.n	80131c8 <__kernel_rem_pio2+0x2e0>
 8013154:	9002      	str	r0, [sp, #8]
 8013156:	2200      	movs	r2, #0
 8013158:	2300      	movs	r3, #0
 801315a:	4630      	mov	r0, r6
 801315c:	4639      	mov	r1, r7
 801315e:	f7ed fcd3 	bl	8000b08 <__aeabi_dcmpeq>
 8013162:	2800      	cmp	r0, #0
 8013164:	f000 80b4 	beq.w	80132d0 <__kernel_rem_pio2+0x3e8>
 8013168:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 801316c:	465b      	mov	r3, fp
 801316e:	2200      	movs	r2, #0
 8013170:	9904      	ldr	r1, [sp, #16]
 8013172:	428b      	cmp	r3, r1
 8013174:	da65      	bge.n	8013242 <__kernel_rem_pio2+0x35a>
 8013176:	2a00      	cmp	r2, #0
 8013178:	d07b      	beq.n	8013272 <__kernel_rem_pio2+0x38a>
 801317a:	ab0c      	add	r3, sp, #48	; 0x30
 801317c:	f1aa 0a18 	sub.w	sl, sl, #24
 8013180:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8013184:	2b00      	cmp	r3, #0
 8013186:	f000 80a0 	beq.w	80132ca <__kernel_rem_pio2+0x3e2>
 801318a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8013210 <__kernel_rem_pio2+0x328>
 801318e:	4650      	mov	r0, sl
 8013190:	f000 fbca 	bl	8013928 <scalbn>
 8013194:	4f23      	ldr	r7, [pc, #140]	; (8013224 <__kernel_rem_pio2+0x33c>)
 8013196:	ec55 4b10 	vmov	r4, r5, d0
 801319a:	46d8      	mov	r8, fp
 801319c:	2600      	movs	r6, #0
 801319e:	f1b8 0f00 	cmp.w	r8, #0
 80131a2:	f280 80cf 	bge.w	8013344 <__kernel_rem_pio2+0x45c>
 80131a6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8013208 <__kernel_rem_pio2+0x320>
 80131aa:	465f      	mov	r7, fp
 80131ac:	f04f 0800 	mov.w	r8, #0
 80131b0:	2f00      	cmp	r7, #0
 80131b2:	f2c0 80fd 	blt.w	80133b0 <__kernel_rem_pio2+0x4c8>
 80131b6:	ab70      	add	r3, sp, #448	; 0x1c0
 80131b8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8013230 <__kernel_rem_pio2+0x348>
 80131bc:	ec55 4b18 	vmov	r4, r5, d8
 80131c0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80131c4:	2600      	movs	r6, #0
 80131c6:	e0e5      	b.n	8013394 <__kernel_rem_pio2+0x4ac>
 80131c8:	2302      	movs	r3, #2
 80131ca:	9302      	str	r3, [sp, #8]
 80131cc:	e75c      	b.n	8013088 <__kernel_rem_pio2+0x1a0>
 80131ce:	f8db 3000 	ldr.w	r3, [fp]
 80131d2:	b955      	cbnz	r5, 80131ea <__kernel_rem_pio2+0x302>
 80131d4:	b123      	cbz	r3, 80131e0 <__kernel_rem_pio2+0x2f8>
 80131d6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80131da:	f8cb 3000 	str.w	r3, [fp]
 80131de:	2301      	movs	r3, #1
 80131e0:	3201      	adds	r2, #1
 80131e2:	f10b 0b04 	add.w	fp, fp, #4
 80131e6:	461d      	mov	r5, r3
 80131e8:	e755      	b.n	8013096 <__kernel_rem_pio2+0x1ae>
 80131ea:	1acb      	subs	r3, r1, r3
 80131ec:	f8cb 3000 	str.w	r3, [fp]
 80131f0:	462b      	mov	r3, r5
 80131f2:	e7f5      	b.n	80131e0 <__kernel_rem_pio2+0x2f8>
 80131f4:	1e62      	subs	r2, r4, #1
 80131f6:	ab0c      	add	r3, sp, #48	; 0x30
 80131f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131fc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013200:	a90c      	add	r1, sp, #48	; 0x30
 8013202:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013206:	e754      	b.n	80130b2 <__kernel_rem_pio2+0x1ca>
	...
 8013214:	3ff00000 	.word	0x3ff00000
 8013218:	080142d0 	.word	0x080142d0
 801321c:	40200000 	.word	0x40200000
 8013220:	3ff00000 	.word	0x3ff00000
 8013224:	3e700000 	.word	0x3e700000
 8013228:	41700000 	.word	0x41700000
 801322c:	3fe00000 	.word	0x3fe00000
 8013230:	08014290 	.word	0x08014290
 8013234:	1e62      	subs	r2, r4, #1
 8013236:	ab0c      	add	r3, sp, #48	; 0x30
 8013238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801323c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013240:	e7de      	b.n	8013200 <__kernel_rem_pio2+0x318>
 8013242:	a90c      	add	r1, sp, #48	; 0x30
 8013244:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013248:	3b01      	subs	r3, #1
 801324a:	430a      	orrs	r2, r1
 801324c:	e790      	b.n	8013170 <__kernel_rem_pio2+0x288>
 801324e:	3301      	adds	r3, #1
 8013250:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013254:	2900      	cmp	r1, #0
 8013256:	d0fa      	beq.n	801324e <__kernel_rem_pio2+0x366>
 8013258:	9a08      	ldr	r2, [sp, #32]
 801325a:	18e3      	adds	r3, r4, r3
 801325c:	18a6      	adds	r6, r4, r2
 801325e:	aa20      	add	r2, sp, #128	; 0x80
 8013260:	1c65      	adds	r5, r4, #1
 8013262:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8013266:	9302      	str	r3, [sp, #8]
 8013268:	9b02      	ldr	r3, [sp, #8]
 801326a:	42ab      	cmp	r3, r5
 801326c:	da04      	bge.n	8013278 <__kernel_rem_pio2+0x390>
 801326e:	461c      	mov	r4, r3
 8013270:	e6b5      	b.n	8012fde <__kernel_rem_pio2+0xf6>
 8013272:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013274:	2301      	movs	r3, #1
 8013276:	e7eb      	b.n	8013250 <__kernel_rem_pio2+0x368>
 8013278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801327a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801327e:	f7ed f971 	bl	8000564 <__aeabi_i2d>
 8013282:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013288:	46b3      	mov	fp, r6
 801328a:	461c      	mov	r4, r3
 801328c:	2700      	movs	r7, #0
 801328e:	f04f 0800 	mov.w	r8, #0
 8013292:	f04f 0900 	mov.w	r9, #0
 8013296:	9b06      	ldr	r3, [sp, #24]
 8013298:	429f      	cmp	r7, r3
 801329a:	dd06      	ble.n	80132aa <__kernel_rem_pio2+0x3c2>
 801329c:	ab70      	add	r3, sp, #448	; 0x1c0
 801329e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80132a2:	e9c3 8900 	strd	r8, r9, [r3]
 80132a6:	3501      	adds	r5, #1
 80132a8:	e7de      	b.n	8013268 <__kernel_rem_pio2+0x380>
 80132aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80132ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80132b2:	f7ed f9c1 	bl	8000638 <__aeabi_dmul>
 80132b6:	4602      	mov	r2, r0
 80132b8:	460b      	mov	r3, r1
 80132ba:	4640      	mov	r0, r8
 80132bc:	4649      	mov	r1, r9
 80132be:	f7ed f805 	bl	80002cc <__adddf3>
 80132c2:	3701      	adds	r7, #1
 80132c4:	4680      	mov	r8, r0
 80132c6:	4689      	mov	r9, r1
 80132c8:	e7e5      	b.n	8013296 <__kernel_rem_pio2+0x3ae>
 80132ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80132ce:	e754      	b.n	801317a <__kernel_rem_pio2+0x292>
 80132d0:	ec47 6b10 	vmov	d0, r6, r7
 80132d4:	f1ca 0000 	rsb	r0, sl, #0
 80132d8:	f000 fb26 	bl	8013928 <scalbn>
 80132dc:	ec57 6b10 	vmov	r6, r7, d0
 80132e0:	4b9f      	ldr	r3, [pc, #636]	; (8013560 <__kernel_rem_pio2+0x678>)
 80132e2:	ee10 0a10 	vmov	r0, s0
 80132e6:	2200      	movs	r2, #0
 80132e8:	4639      	mov	r1, r7
 80132ea:	f7ed fc2b 	bl	8000b44 <__aeabi_dcmpge>
 80132ee:	b300      	cbz	r0, 8013332 <__kernel_rem_pio2+0x44a>
 80132f0:	4b9c      	ldr	r3, [pc, #624]	; (8013564 <__kernel_rem_pio2+0x67c>)
 80132f2:	2200      	movs	r2, #0
 80132f4:	4630      	mov	r0, r6
 80132f6:	4639      	mov	r1, r7
 80132f8:	f7ed f99e 	bl	8000638 <__aeabi_dmul>
 80132fc:	f7ed fc4c 	bl	8000b98 <__aeabi_d2iz>
 8013300:	4605      	mov	r5, r0
 8013302:	f7ed f92f 	bl	8000564 <__aeabi_i2d>
 8013306:	4b96      	ldr	r3, [pc, #600]	; (8013560 <__kernel_rem_pio2+0x678>)
 8013308:	2200      	movs	r2, #0
 801330a:	f7ed f995 	bl	8000638 <__aeabi_dmul>
 801330e:	460b      	mov	r3, r1
 8013310:	4602      	mov	r2, r0
 8013312:	4639      	mov	r1, r7
 8013314:	4630      	mov	r0, r6
 8013316:	f7ec ffd7 	bl	80002c8 <__aeabi_dsub>
 801331a:	f7ed fc3d 	bl	8000b98 <__aeabi_d2iz>
 801331e:	f104 0b01 	add.w	fp, r4, #1
 8013322:	ab0c      	add	r3, sp, #48	; 0x30
 8013324:	f10a 0a18 	add.w	sl, sl, #24
 8013328:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801332c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8013330:	e72b      	b.n	801318a <__kernel_rem_pio2+0x2a2>
 8013332:	4630      	mov	r0, r6
 8013334:	4639      	mov	r1, r7
 8013336:	f7ed fc2f 	bl	8000b98 <__aeabi_d2iz>
 801333a:	ab0c      	add	r3, sp, #48	; 0x30
 801333c:	46a3      	mov	fp, r4
 801333e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013342:	e722      	b.n	801318a <__kernel_rem_pio2+0x2a2>
 8013344:	ab70      	add	r3, sp, #448	; 0x1c0
 8013346:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801334a:	ab0c      	add	r3, sp, #48	; 0x30
 801334c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013350:	f7ed f908 	bl	8000564 <__aeabi_i2d>
 8013354:	4622      	mov	r2, r4
 8013356:	462b      	mov	r3, r5
 8013358:	f7ed f96e 	bl	8000638 <__aeabi_dmul>
 801335c:	4632      	mov	r2, r6
 801335e:	e9c9 0100 	strd	r0, r1, [r9]
 8013362:	463b      	mov	r3, r7
 8013364:	4620      	mov	r0, r4
 8013366:	4629      	mov	r1, r5
 8013368:	f7ed f966 	bl	8000638 <__aeabi_dmul>
 801336c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8013370:	4604      	mov	r4, r0
 8013372:	460d      	mov	r5, r1
 8013374:	e713      	b.n	801319e <__kernel_rem_pio2+0x2b6>
 8013376:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801337a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801337e:	f7ed f95b 	bl	8000638 <__aeabi_dmul>
 8013382:	4602      	mov	r2, r0
 8013384:	460b      	mov	r3, r1
 8013386:	4620      	mov	r0, r4
 8013388:	4629      	mov	r1, r5
 801338a:	f7ec ff9f 	bl	80002cc <__adddf3>
 801338e:	3601      	adds	r6, #1
 8013390:	4604      	mov	r4, r0
 8013392:	460d      	mov	r5, r1
 8013394:	9b04      	ldr	r3, [sp, #16]
 8013396:	429e      	cmp	r6, r3
 8013398:	dc01      	bgt.n	801339e <__kernel_rem_pio2+0x4b6>
 801339a:	45b0      	cmp	r8, r6
 801339c:	daeb      	bge.n	8013376 <__kernel_rem_pio2+0x48e>
 801339e:	ab48      	add	r3, sp, #288	; 0x120
 80133a0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80133a4:	e9c3 4500 	strd	r4, r5, [r3]
 80133a8:	3f01      	subs	r7, #1
 80133aa:	f108 0801 	add.w	r8, r8, #1
 80133ae:	e6ff      	b.n	80131b0 <__kernel_rem_pio2+0x2c8>
 80133b0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80133b2:	2b02      	cmp	r3, #2
 80133b4:	dc0b      	bgt.n	80133ce <__kernel_rem_pio2+0x4e6>
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	dc6e      	bgt.n	8013498 <__kernel_rem_pio2+0x5b0>
 80133ba:	d045      	beq.n	8013448 <__kernel_rem_pio2+0x560>
 80133bc:	9b07      	ldr	r3, [sp, #28]
 80133be:	f003 0007 	and.w	r0, r3, #7
 80133c2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80133c6:	ecbd 8b02 	vpop	{d8}
 80133ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80133d0:	2b03      	cmp	r3, #3
 80133d2:	d1f3      	bne.n	80133bc <__kernel_rem_pio2+0x4d4>
 80133d4:	ab48      	add	r3, sp, #288	; 0x120
 80133d6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80133da:	46d0      	mov	r8, sl
 80133dc:	46d9      	mov	r9, fp
 80133de:	f1b9 0f00 	cmp.w	r9, #0
 80133e2:	f1a8 0808 	sub.w	r8, r8, #8
 80133e6:	dc64      	bgt.n	80134b2 <__kernel_rem_pio2+0x5ca>
 80133e8:	465c      	mov	r4, fp
 80133ea:	2c01      	cmp	r4, #1
 80133ec:	f1aa 0a08 	sub.w	sl, sl, #8
 80133f0:	dc7e      	bgt.n	80134f0 <__kernel_rem_pio2+0x608>
 80133f2:	2000      	movs	r0, #0
 80133f4:	2100      	movs	r1, #0
 80133f6:	f1bb 0f01 	cmp.w	fp, #1
 80133fa:	f300 8097 	bgt.w	801352c <__kernel_rem_pio2+0x644>
 80133fe:	9b02      	ldr	r3, [sp, #8]
 8013400:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8013404:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8013408:	2b00      	cmp	r3, #0
 801340a:	f040 8099 	bne.w	8013540 <__kernel_rem_pio2+0x658>
 801340e:	9b01      	ldr	r3, [sp, #4]
 8013410:	e9c3 5600 	strd	r5, r6, [r3]
 8013414:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013418:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801341c:	e7ce      	b.n	80133bc <__kernel_rem_pio2+0x4d4>
 801341e:	ab48      	add	r3, sp, #288	; 0x120
 8013420:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013428:	f7ec ff50 	bl	80002cc <__adddf3>
 801342c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013430:	f1bb 0f00 	cmp.w	fp, #0
 8013434:	daf3      	bge.n	801341e <__kernel_rem_pio2+0x536>
 8013436:	9b02      	ldr	r3, [sp, #8]
 8013438:	b113      	cbz	r3, 8013440 <__kernel_rem_pio2+0x558>
 801343a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801343e:	4619      	mov	r1, r3
 8013440:	9b01      	ldr	r3, [sp, #4]
 8013442:	e9c3 0100 	strd	r0, r1, [r3]
 8013446:	e7b9      	b.n	80133bc <__kernel_rem_pio2+0x4d4>
 8013448:	2000      	movs	r0, #0
 801344a:	2100      	movs	r1, #0
 801344c:	e7f0      	b.n	8013430 <__kernel_rem_pio2+0x548>
 801344e:	ab48      	add	r3, sp, #288	; 0x120
 8013450:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013458:	f7ec ff38 	bl	80002cc <__adddf3>
 801345c:	3c01      	subs	r4, #1
 801345e:	2c00      	cmp	r4, #0
 8013460:	daf5      	bge.n	801344e <__kernel_rem_pio2+0x566>
 8013462:	9b02      	ldr	r3, [sp, #8]
 8013464:	b1e3      	cbz	r3, 80134a0 <__kernel_rem_pio2+0x5b8>
 8013466:	4602      	mov	r2, r0
 8013468:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801346c:	9c01      	ldr	r4, [sp, #4]
 801346e:	e9c4 2300 	strd	r2, r3, [r4]
 8013472:	4602      	mov	r2, r0
 8013474:	460b      	mov	r3, r1
 8013476:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801347a:	f7ec ff25 	bl	80002c8 <__aeabi_dsub>
 801347e:	ad4a      	add	r5, sp, #296	; 0x128
 8013480:	2401      	movs	r4, #1
 8013482:	45a3      	cmp	fp, r4
 8013484:	da0f      	bge.n	80134a6 <__kernel_rem_pio2+0x5be>
 8013486:	9b02      	ldr	r3, [sp, #8]
 8013488:	b113      	cbz	r3, 8013490 <__kernel_rem_pio2+0x5a8>
 801348a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801348e:	4619      	mov	r1, r3
 8013490:	9b01      	ldr	r3, [sp, #4]
 8013492:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013496:	e791      	b.n	80133bc <__kernel_rem_pio2+0x4d4>
 8013498:	465c      	mov	r4, fp
 801349a:	2000      	movs	r0, #0
 801349c:	2100      	movs	r1, #0
 801349e:	e7de      	b.n	801345e <__kernel_rem_pio2+0x576>
 80134a0:	4602      	mov	r2, r0
 80134a2:	460b      	mov	r3, r1
 80134a4:	e7e2      	b.n	801346c <__kernel_rem_pio2+0x584>
 80134a6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80134aa:	f7ec ff0f 	bl	80002cc <__adddf3>
 80134ae:	3401      	adds	r4, #1
 80134b0:	e7e7      	b.n	8013482 <__kernel_rem_pio2+0x59a>
 80134b2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80134b6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80134ba:	4620      	mov	r0, r4
 80134bc:	4632      	mov	r2, r6
 80134be:	463b      	mov	r3, r7
 80134c0:	4629      	mov	r1, r5
 80134c2:	f7ec ff03 	bl	80002cc <__adddf3>
 80134c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80134ca:	4602      	mov	r2, r0
 80134cc:	460b      	mov	r3, r1
 80134ce:	4620      	mov	r0, r4
 80134d0:	4629      	mov	r1, r5
 80134d2:	f7ec fef9 	bl	80002c8 <__aeabi_dsub>
 80134d6:	4632      	mov	r2, r6
 80134d8:	463b      	mov	r3, r7
 80134da:	f7ec fef7 	bl	80002cc <__adddf3>
 80134de:	ed9d 7b04 	vldr	d7, [sp, #16]
 80134e2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80134e6:	ed88 7b00 	vstr	d7, [r8]
 80134ea:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80134ee:	e776      	b.n	80133de <__kernel_rem_pio2+0x4f6>
 80134f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80134f4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80134f8:	4640      	mov	r0, r8
 80134fa:	4632      	mov	r2, r6
 80134fc:	463b      	mov	r3, r7
 80134fe:	4649      	mov	r1, r9
 8013500:	f7ec fee4 	bl	80002cc <__adddf3>
 8013504:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013508:	4602      	mov	r2, r0
 801350a:	460b      	mov	r3, r1
 801350c:	4640      	mov	r0, r8
 801350e:	4649      	mov	r1, r9
 8013510:	f7ec feda 	bl	80002c8 <__aeabi_dsub>
 8013514:	4632      	mov	r2, r6
 8013516:	463b      	mov	r3, r7
 8013518:	f7ec fed8 	bl	80002cc <__adddf3>
 801351c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013520:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013524:	ed8a 7b00 	vstr	d7, [sl]
 8013528:	3c01      	subs	r4, #1
 801352a:	e75e      	b.n	80133ea <__kernel_rem_pio2+0x502>
 801352c:	ab48      	add	r3, sp, #288	; 0x120
 801352e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013536:	f7ec fec9 	bl	80002cc <__adddf3>
 801353a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801353e:	e75a      	b.n	80133f6 <__kernel_rem_pio2+0x50e>
 8013540:	9b01      	ldr	r3, [sp, #4]
 8013542:	9a01      	ldr	r2, [sp, #4]
 8013544:	601d      	str	r5, [r3, #0]
 8013546:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801354a:	605c      	str	r4, [r3, #4]
 801354c:	609f      	str	r7, [r3, #8]
 801354e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8013552:	60d3      	str	r3, [r2, #12]
 8013554:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013558:	6110      	str	r0, [r2, #16]
 801355a:	6153      	str	r3, [r2, #20]
 801355c:	e72e      	b.n	80133bc <__kernel_rem_pio2+0x4d4>
 801355e:	bf00      	nop
 8013560:	41700000 	.word	0x41700000
 8013564:	3e700000 	.word	0x3e700000

08013568 <__kernel_sin>:
 8013568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801356c:	ed2d 8b04 	vpush	{d8-d9}
 8013570:	eeb0 8a41 	vmov.f32	s16, s2
 8013574:	eef0 8a61 	vmov.f32	s17, s3
 8013578:	ec55 4b10 	vmov	r4, r5, d0
 801357c:	b083      	sub	sp, #12
 801357e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013582:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013586:	9001      	str	r0, [sp, #4]
 8013588:	da06      	bge.n	8013598 <__kernel_sin+0x30>
 801358a:	ee10 0a10 	vmov	r0, s0
 801358e:	4629      	mov	r1, r5
 8013590:	f7ed fb02 	bl	8000b98 <__aeabi_d2iz>
 8013594:	2800      	cmp	r0, #0
 8013596:	d051      	beq.n	801363c <__kernel_sin+0xd4>
 8013598:	4622      	mov	r2, r4
 801359a:	462b      	mov	r3, r5
 801359c:	4620      	mov	r0, r4
 801359e:	4629      	mov	r1, r5
 80135a0:	f7ed f84a 	bl	8000638 <__aeabi_dmul>
 80135a4:	4682      	mov	sl, r0
 80135a6:	468b      	mov	fp, r1
 80135a8:	4602      	mov	r2, r0
 80135aa:	460b      	mov	r3, r1
 80135ac:	4620      	mov	r0, r4
 80135ae:	4629      	mov	r1, r5
 80135b0:	f7ed f842 	bl	8000638 <__aeabi_dmul>
 80135b4:	a341      	add	r3, pc, #260	; (adr r3, 80136bc <__kernel_sin+0x154>)
 80135b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ba:	4680      	mov	r8, r0
 80135bc:	4689      	mov	r9, r1
 80135be:	4650      	mov	r0, sl
 80135c0:	4659      	mov	r1, fp
 80135c2:	f7ed f839 	bl	8000638 <__aeabi_dmul>
 80135c6:	a33f      	add	r3, pc, #252	; (adr r3, 80136c4 <__kernel_sin+0x15c>)
 80135c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135cc:	f7ec fe7c 	bl	80002c8 <__aeabi_dsub>
 80135d0:	4652      	mov	r2, sl
 80135d2:	465b      	mov	r3, fp
 80135d4:	f7ed f830 	bl	8000638 <__aeabi_dmul>
 80135d8:	a33c      	add	r3, pc, #240	; (adr r3, 80136cc <__kernel_sin+0x164>)
 80135da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135de:	f7ec fe75 	bl	80002cc <__adddf3>
 80135e2:	4652      	mov	r2, sl
 80135e4:	465b      	mov	r3, fp
 80135e6:	f7ed f827 	bl	8000638 <__aeabi_dmul>
 80135ea:	a33a      	add	r3, pc, #232	; (adr r3, 80136d4 <__kernel_sin+0x16c>)
 80135ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135f0:	f7ec fe6a 	bl	80002c8 <__aeabi_dsub>
 80135f4:	4652      	mov	r2, sl
 80135f6:	465b      	mov	r3, fp
 80135f8:	f7ed f81e 	bl	8000638 <__aeabi_dmul>
 80135fc:	a337      	add	r3, pc, #220	; (adr r3, 80136dc <__kernel_sin+0x174>)
 80135fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013602:	f7ec fe63 	bl	80002cc <__adddf3>
 8013606:	9b01      	ldr	r3, [sp, #4]
 8013608:	4606      	mov	r6, r0
 801360a:	460f      	mov	r7, r1
 801360c:	b9eb      	cbnz	r3, 801364a <__kernel_sin+0xe2>
 801360e:	4602      	mov	r2, r0
 8013610:	460b      	mov	r3, r1
 8013612:	4650      	mov	r0, sl
 8013614:	4659      	mov	r1, fp
 8013616:	f7ed f80f 	bl	8000638 <__aeabi_dmul>
 801361a:	a325      	add	r3, pc, #148	; (adr r3, 80136b0 <__kernel_sin+0x148>)
 801361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013620:	f7ec fe52 	bl	80002c8 <__aeabi_dsub>
 8013624:	4642      	mov	r2, r8
 8013626:	464b      	mov	r3, r9
 8013628:	f7ed f806 	bl	8000638 <__aeabi_dmul>
 801362c:	4602      	mov	r2, r0
 801362e:	460b      	mov	r3, r1
 8013630:	4620      	mov	r0, r4
 8013632:	4629      	mov	r1, r5
 8013634:	f7ec fe4a 	bl	80002cc <__adddf3>
 8013638:	4604      	mov	r4, r0
 801363a:	460d      	mov	r5, r1
 801363c:	ec45 4b10 	vmov	d0, r4, r5
 8013640:	b003      	add	sp, #12
 8013642:	ecbd 8b04 	vpop	{d8-d9}
 8013646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801364a:	4b1b      	ldr	r3, [pc, #108]	; (80136b8 <__kernel_sin+0x150>)
 801364c:	ec51 0b18 	vmov	r0, r1, d8
 8013650:	2200      	movs	r2, #0
 8013652:	f7ec fff1 	bl	8000638 <__aeabi_dmul>
 8013656:	4632      	mov	r2, r6
 8013658:	ec41 0b19 	vmov	d9, r0, r1
 801365c:	463b      	mov	r3, r7
 801365e:	4640      	mov	r0, r8
 8013660:	4649      	mov	r1, r9
 8013662:	f7ec ffe9 	bl	8000638 <__aeabi_dmul>
 8013666:	4602      	mov	r2, r0
 8013668:	460b      	mov	r3, r1
 801366a:	ec51 0b19 	vmov	r0, r1, d9
 801366e:	f7ec fe2b 	bl	80002c8 <__aeabi_dsub>
 8013672:	4652      	mov	r2, sl
 8013674:	465b      	mov	r3, fp
 8013676:	f7ec ffdf 	bl	8000638 <__aeabi_dmul>
 801367a:	ec53 2b18 	vmov	r2, r3, d8
 801367e:	f7ec fe23 	bl	80002c8 <__aeabi_dsub>
 8013682:	a30b      	add	r3, pc, #44	; (adr r3, 80136b0 <__kernel_sin+0x148>)
 8013684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013688:	4606      	mov	r6, r0
 801368a:	460f      	mov	r7, r1
 801368c:	4640      	mov	r0, r8
 801368e:	4649      	mov	r1, r9
 8013690:	f7ec ffd2 	bl	8000638 <__aeabi_dmul>
 8013694:	4602      	mov	r2, r0
 8013696:	460b      	mov	r3, r1
 8013698:	4630      	mov	r0, r6
 801369a:	4639      	mov	r1, r7
 801369c:	f7ec fe16 	bl	80002cc <__adddf3>
 80136a0:	4602      	mov	r2, r0
 80136a2:	460b      	mov	r3, r1
 80136a4:	4620      	mov	r0, r4
 80136a6:	4629      	mov	r1, r5
 80136a8:	f7ec fe0e 	bl	80002c8 <__aeabi_dsub>
 80136ac:	e7c4      	b.n	8013638 <__kernel_sin+0xd0>
 80136ae:	bf00      	nop
 80136b0:	55555549 	.word	0x55555549
 80136b4:	3fc55555 	.word	0x3fc55555
 80136b8:	3fe00000 	.word	0x3fe00000
 80136bc:	5acfd57c 	.word	0x5acfd57c
 80136c0:	3de5d93a 	.word	0x3de5d93a
 80136c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80136c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80136cc:	57b1fe7d 	.word	0x57b1fe7d
 80136d0:	3ec71de3 	.word	0x3ec71de3
 80136d4:	19c161d5 	.word	0x19c161d5
 80136d8:	3f2a01a0 	.word	0x3f2a01a0
 80136dc:	1110f8a6 	.word	0x1110f8a6
 80136e0:	3f811111 	.word	0x3f811111

080136e4 <fabs>:
 80136e4:	ec51 0b10 	vmov	r0, r1, d0
 80136e8:	ee10 2a10 	vmov	r2, s0
 80136ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80136f0:	ec43 2b10 	vmov	d0, r2, r3
 80136f4:	4770      	bx	lr

080136f6 <finite>:
 80136f6:	b082      	sub	sp, #8
 80136f8:	ed8d 0b00 	vstr	d0, [sp]
 80136fc:	9801      	ldr	r0, [sp, #4]
 80136fe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013702:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013706:	0fc0      	lsrs	r0, r0, #31
 8013708:	b002      	add	sp, #8
 801370a:	4770      	bx	lr
 801370c:	0000      	movs	r0, r0
	...

08013710 <floor>:
 8013710:	ec51 0b10 	vmov	r0, r1, d0
 8013714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013718:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801371c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013720:	2e13      	cmp	r6, #19
 8013722:	ee10 5a10 	vmov	r5, s0
 8013726:	ee10 8a10 	vmov	r8, s0
 801372a:	460c      	mov	r4, r1
 801372c:	dc32      	bgt.n	8013794 <floor+0x84>
 801372e:	2e00      	cmp	r6, #0
 8013730:	da14      	bge.n	801375c <floor+0x4c>
 8013732:	a333      	add	r3, pc, #204	; (adr r3, 8013800 <floor+0xf0>)
 8013734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013738:	f7ec fdc8 	bl	80002cc <__adddf3>
 801373c:	2200      	movs	r2, #0
 801373e:	2300      	movs	r3, #0
 8013740:	f7ed fa0a 	bl	8000b58 <__aeabi_dcmpgt>
 8013744:	b138      	cbz	r0, 8013756 <floor+0x46>
 8013746:	2c00      	cmp	r4, #0
 8013748:	da57      	bge.n	80137fa <floor+0xea>
 801374a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801374e:	431d      	orrs	r5, r3
 8013750:	d001      	beq.n	8013756 <floor+0x46>
 8013752:	4c2d      	ldr	r4, [pc, #180]	; (8013808 <floor+0xf8>)
 8013754:	2500      	movs	r5, #0
 8013756:	4621      	mov	r1, r4
 8013758:	4628      	mov	r0, r5
 801375a:	e025      	b.n	80137a8 <floor+0x98>
 801375c:	4f2b      	ldr	r7, [pc, #172]	; (801380c <floor+0xfc>)
 801375e:	4137      	asrs	r7, r6
 8013760:	ea01 0307 	and.w	r3, r1, r7
 8013764:	4303      	orrs	r3, r0
 8013766:	d01f      	beq.n	80137a8 <floor+0x98>
 8013768:	a325      	add	r3, pc, #148	; (adr r3, 8013800 <floor+0xf0>)
 801376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801376e:	f7ec fdad 	bl	80002cc <__adddf3>
 8013772:	2200      	movs	r2, #0
 8013774:	2300      	movs	r3, #0
 8013776:	f7ed f9ef 	bl	8000b58 <__aeabi_dcmpgt>
 801377a:	2800      	cmp	r0, #0
 801377c:	d0eb      	beq.n	8013756 <floor+0x46>
 801377e:	2c00      	cmp	r4, #0
 8013780:	bfbe      	ittt	lt
 8013782:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013786:	fa43 f606 	asrlt.w	r6, r3, r6
 801378a:	19a4      	addlt	r4, r4, r6
 801378c:	ea24 0407 	bic.w	r4, r4, r7
 8013790:	2500      	movs	r5, #0
 8013792:	e7e0      	b.n	8013756 <floor+0x46>
 8013794:	2e33      	cmp	r6, #51	; 0x33
 8013796:	dd0b      	ble.n	80137b0 <floor+0xa0>
 8013798:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801379c:	d104      	bne.n	80137a8 <floor+0x98>
 801379e:	ee10 2a10 	vmov	r2, s0
 80137a2:	460b      	mov	r3, r1
 80137a4:	f7ec fd92 	bl	80002cc <__adddf3>
 80137a8:	ec41 0b10 	vmov	d0, r0, r1
 80137ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137b0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80137b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137b8:	fa23 f707 	lsr.w	r7, r3, r7
 80137bc:	4207      	tst	r7, r0
 80137be:	d0f3      	beq.n	80137a8 <floor+0x98>
 80137c0:	a30f      	add	r3, pc, #60	; (adr r3, 8013800 <floor+0xf0>)
 80137c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c6:	f7ec fd81 	bl	80002cc <__adddf3>
 80137ca:	2200      	movs	r2, #0
 80137cc:	2300      	movs	r3, #0
 80137ce:	f7ed f9c3 	bl	8000b58 <__aeabi_dcmpgt>
 80137d2:	2800      	cmp	r0, #0
 80137d4:	d0bf      	beq.n	8013756 <floor+0x46>
 80137d6:	2c00      	cmp	r4, #0
 80137d8:	da02      	bge.n	80137e0 <floor+0xd0>
 80137da:	2e14      	cmp	r6, #20
 80137dc:	d103      	bne.n	80137e6 <floor+0xd6>
 80137de:	3401      	adds	r4, #1
 80137e0:	ea25 0507 	bic.w	r5, r5, r7
 80137e4:	e7b7      	b.n	8013756 <floor+0x46>
 80137e6:	2301      	movs	r3, #1
 80137e8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80137ec:	fa03 f606 	lsl.w	r6, r3, r6
 80137f0:	4435      	add	r5, r6
 80137f2:	4545      	cmp	r5, r8
 80137f4:	bf38      	it	cc
 80137f6:	18e4      	addcc	r4, r4, r3
 80137f8:	e7f2      	b.n	80137e0 <floor+0xd0>
 80137fa:	2500      	movs	r5, #0
 80137fc:	462c      	mov	r4, r5
 80137fe:	e7aa      	b.n	8013756 <floor+0x46>
 8013800:	8800759c 	.word	0x8800759c
 8013804:	7e37e43c 	.word	0x7e37e43c
 8013808:	bff00000 	.word	0xbff00000
 801380c:	000fffff 	.word	0x000fffff

08013810 <rint>:
 8013810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013812:	ec51 0b10 	vmov	r0, r1, d0
 8013816:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801381a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801381e:	2e13      	cmp	r6, #19
 8013820:	ee10 4a10 	vmov	r4, s0
 8013824:	460b      	mov	r3, r1
 8013826:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801382a:	dc58      	bgt.n	80138de <rint+0xce>
 801382c:	2e00      	cmp	r6, #0
 801382e:	da2b      	bge.n	8013888 <rint+0x78>
 8013830:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8013834:	4302      	orrs	r2, r0
 8013836:	d023      	beq.n	8013880 <rint+0x70>
 8013838:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801383c:	4302      	orrs	r2, r0
 801383e:	4254      	negs	r4, r2
 8013840:	4314      	orrs	r4, r2
 8013842:	0c4b      	lsrs	r3, r1, #17
 8013844:	0b24      	lsrs	r4, r4, #12
 8013846:	045b      	lsls	r3, r3, #17
 8013848:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801384c:	ea44 0103 	orr.w	r1, r4, r3
 8013850:	4b32      	ldr	r3, [pc, #200]	; (801391c <rint+0x10c>)
 8013852:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013856:	e9d3 6700 	ldrd	r6, r7, [r3]
 801385a:	4602      	mov	r2, r0
 801385c:	460b      	mov	r3, r1
 801385e:	4630      	mov	r0, r6
 8013860:	4639      	mov	r1, r7
 8013862:	f7ec fd33 	bl	80002cc <__adddf3>
 8013866:	e9cd 0100 	strd	r0, r1, [sp]
 801386a:	463b      	mov	r3, r7
 801386c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013870:	4632      	mov	r2, r6
 8013872:	f7ec fd29 	bl	80002c8 <__aeabi_dsub>
 8013876:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801387a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801387e:	4639      	mov	r1, r7
 8013880:	ec41 0b10 	vmov	d0, r0, r1
 8013884:	b003      	add	sp, #12
 8013886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013888:	4a25      	ldr	r2, [pc, #148]	; (8013920 <rint+0x110>)
 801388a:	4132      	asrs	r2, r6
 801388c:	ea01 0702 	and.w	r7, r1, r2
 8013890:	4307      	orrs	r7, r0
 8013892:	d0f5      	beq.n	8013880 <rint+0x70>
 8013894:	0851      	lsrs	r1, r2, #1
 8013896:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801389a:	4314      	orrs	r4, r2
 801389c:	d00c      	beq.n	80138b8 <rint+0xa8>
 801389e:	ea23 0201 	bic.w	r2, r3, r1
 80138a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80138a6:	2e13      	cmp	r6, #19
 80138a8:	fa43 f606 	asr.w	r6, r3, r6
 80138ac:	bf0c      	ite	eq
 80138ae:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80138b2:	2400      	movne	r4, #0
 80138b4:	ea42 0306 	orr.w	r3, r2, r6
 80138b8:	4918      	ldr	r1, [pc, #96]	; (801391c <rint+0x10c>)
 80138ba:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80138be:	4622      	mov	r2, r4
 80138c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80138c4:	4620      	mov	r0, r4
 80138c6:	4629      	mov	r1, r5
 80138c8:	f7ec fd00 	bl	80002cc <__adddf3>
 80138cc:	e9cd 0100 	strd	r0, r1, [sp]
 80138d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138d4:	4622      	mov	r2, r4
 80138d6:	462b      	mov	r3, r5
 80138d8:	f7ec fcf6 	bl	80002c8 <__aeabi_dsub>
 80138dc:	e7d0      	b.n	8013880 <rint+0x70>
 80138de:	2e33      	cmp	r6, #51	; 0x33
 80138e0:	dd07      	ble.n	80138f2 <rint+0xe2>
 80138e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80138e6:	d1cb      	bne.n	8013880 <rint+0x70>
 80138e8:	ee10 2a10 	vmov	r2, s0
 80138ec:	f7ec fcee 	bl	80002cc <__adddf3>
 80138f0:	e7c6      	b.n	8013880 <rint+0x70>
 80138f2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80138f6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80138fa:	40d6      	lsrs	r6, r2
 80138fc:	4230      	tst	r0, r6
 80138fe:	d0bf      	beq.n	8013880 <rint+0x70>
 8013900:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8013904:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8013908:	bf1f      	itttt	ne
 801390a:	ea24 0101 	bicne.w	r1, r4, r1
 801390e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8013912:	fa44 f202 	asrne.w	r2, r4, r2
 8013916:	ea41 0402 	orrne.w	r4, r1, r2
 801391a:	e7cd      	b.n	80138b8 <rint+0xa8>
 801391c:	080142e0 	.word	0x080142e0
 8013920:	000fffff 	.word	0x000fffff
 8013924:	00000000 	.word	0x00000000

08013928 <scalbn>:
 8013928:	b570      	push	{r4, r5, r6, lr}
 801392a:	ec55 4b10 	vmov	r4, r5, d0
 801392e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013932:	4606      	mov	r6, r0
 8013934:	462b      	mov	r3, r5
 8013936:	b99a      	cbnz	r2, 8013960 <scalbn+0x38>
 8013938:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801393c:	4323      	orrs	r3, r4
 801393e:	d036      	beq.n	80139ae <scalbn+0x86>
 8013940:	4b39      	ldr	r3, [pc, #228]	; (8013a28 <scalbn+0x100>)
 8013942:	4629      	mov	r1, r5
 8013944:	ee10 0a10 	vmov	r0, s0
 8013948:	2200      	movs	r2, #0
 801394a:	f7ec fe75 	bl	8000638 <__aeabi_dmul>
 801394e:	4b37      	ldr	r3, [pc, #220]	; (8013a2c <scalbn+0x104>)
 8013950:	429e      	cmp	r6, r3
 8013952:	4604      	mov	r4, r0
 8013954:	460d      	mov	r5, r1
 8013956:	da10      	bge.n	801397a <scalbn+0x52>
 8013958:	a32b      	add	r3, pc, #172	; (adr r3, 8013a08 <scalbn+0xe0>)
 801395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801395e:	e03a      	b.n	80139d6 <scalbn+0xae>
 8013960:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013964:	428a      	cmp	r2, r1
 8013966:	d10c      	bne.n	8013982 <scalbn+0x5a>
 8013968:	ee10 2a10 	vmov	r2, s0
 801396c:	4620      	mov	r0, r4
 801396e:	4629      	mov	r1, r5
 8013970:	f7ec fcac 	bl	80002cc <__adddf3>
 8013974:	4604      	mov	r4, r0
 8013976:	460d      	mov	r5, r1
 8013978:	e019      	b.n	80139ae <scalbn+0x86>
 801397a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801397e:	460b      	mov	r3, r1
 8013980:	3a36      	subs	r2, #54	; 0x36
 8013982:	4432      	add	r2, r6
 8013984:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013988:	428a      	cmp	r2, r1
 801398a:	dd08      	ble.n	801399e <scalbn+0x76>
 801398c:	2d00      	cmp	r5, #0
 801398e:	a120      	add	r1, pc, #128	; (adr r1, 8013a10 <scalbn+0xe8>)
 8013990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013994:	da1c      	bge.n	80139d0 <scalbn+0xa8>
 8013996:	a120      	add	r1, pc, #128	; (adr r1, 8013a18 <scalbn+0xf0>)
 8013998:	e9d1 0100 	ldrd	r0, r1, [r1]
 801399c:	e018      	b.n	80139d0 <scalbn+0xa8>
 801399e:	2a00      	cmp	r2, #0
 80139a0:	dd08      	ble.n	80139b4 <scalbn+0x8c>
 80139a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80139a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80139aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80139ae:	ec45 4b10 	vmov	d0, r4, r5
 80139b2:	bd70      	pop	{r4, r5, r6, pc}
 80139b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80139b8:	da19      	bge.n	80139ee <scalbn+0xc6>
 80139ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80139be:	429e      	cmp	r6, r3
 80139c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80139c4:	dd0a      	ble.n	80139dc <scalbn+0xb4>
 80139c6:	a112      	add	r1, pc, #72	; (adr r1, 8013a10 <scalbn+0xe8>)
 80139c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d1e2      	bne.n	8013996 <scalbn+0x6e>
 80139d0:	a30f      	add	r3, pc, #60	; (adr r3, 8013a10 <scalbn+0xe8>)
 80139d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d6:	f7ec fe2f 	bl	8000638 <__aeabi_dmul>
 80139da:	e7cb      	b.n	8013974 <scalbn+0x4c>
 80139dc:	a10a      	add	r1, pc, #40	; (adr r1, 8013a08 <scalbn+0xe0>)
 80139de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d0b8      	beq.n	8013958 <scalbn+0x30>
 80139e6:	a10e      	add	r1, pc, #56	; (adr r1, 8013a20 <scalbn+0xf8>)
 80139e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139ec:	e7b4      	b.n	8013958 <scalbn+0x30>
 80139ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80139f2:	3236      	adds	r2, #54	; 0x36
 80139f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80139f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80139fc:	4620      	mov	r0, r4
 80139fe:	4b0c      	ldr	r3, [pc, #48]	; (8013a30 <scalbn+0x108>)
 8013a00:	2200      	movs	r2, #0
 8013a02:	e7e8      	b.n	80139d6 <scalbn+0xae>
 8013a04:	f3af 8000 	nop.w
 8013a08:	c2f8f359 	.word	0xc2f8f359
 8013a0c:	01a56e1f 	.word	0x01a56e1f
 8013a10:	8800759c 	.word	0x8800759c
 8013a14:	7e37e43c 	.word	0x7e37e43c
 8013a18:	8800759c 	.word	0x8800759c
 8013a1c:	fe37e43c 	.word	0xfe37e43c
 8013a20:	c2f8f359 	.word	0xc2f8f359
 8013a24:	81a56e1f 	.word	0x81a56e1f
 8013a28:	43500000 	.word	0x43500000
 8013a2c:	ffff3cb0 	.word	0xffff3cb0
 8013a30:	3c900000 	.word	0x3c900000

08013a34 <_getpid>:
 8013a34:	4b02      	ldr	r3, [pc, #8]	; (8013a40 <_getpid+0xc>)
 8013a36:	2258      	movs	r2, #88	; 0x58
 8013a38:	601a      	str	r2, [r3, #0]
 8013a3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a3e:	4770      	bx	lr
 8013a40:	20007410 	.word	0x20007410

08013a44 <_kill>:
 8013a44:	4b02      	ldr	r3, [pc, #8]	; (8013a50 <_kill+0xc>)
 8013a46:	2258      	movs	r2, #88	; 0x58
 8013a48:	601a      	str	r2, [r3, #0]
 8013a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a4e:	4770      	bx	lr
 8013a50:	20007410 	.word	0x20007410

08013a54 <_exit>:
 8013a54:	e7fe      	b.n	8013a54 <_exit>
	...

08013a58 <_init>:
 8013a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a5a:	bf00      	nop
 8013a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a5e:	bc08      	pop	{r3}
 8013a60:	469e      	mov	lr, r3
 8013a62:	4770      	bx	lr

08013a64 <_fini>:
 8013a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a66:	bf00      	nop
 8013a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a6a:	bc08      	pop	{r3}
 8013a6c:	469e      	mov	lr, r3
 8013a6e:	4770      	bx	lr
