
Differential_Drive_Trajectory_Control_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003aa8  0800da88  0800da88  0001da88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011530  08011530  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08011530  08011530  00021530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011538  08011538  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011538  08011538  00021538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801153c  0801153c  0002153c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08011540  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  200001e0  08011720  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  08011720  00030808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191cc  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e5f  00000000  00000000  000493dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0004c240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  0004d178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245e5  00000000  00000000  0004df80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001433c  00000000  00000000  00072565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f01ea  00000000  00000000  000868a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176a8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005840  00000000  00000000  00176ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0017c320  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0017c35c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800da70 	.word	0x0800da70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800da70 	.word	0x0800da70

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	0000      	movs	r0, r0
	...

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001034:	ed2d 8b02 	vpush	{d8}
 8001038:	f5ad 5d34 	sub.w	sp, sp, #11520	; 0x2d00
 800103c:	b084      	sub	sp, #16
 800103e:	af1a      	add	r7, sp, #104	; 0x68
  /* USER CODE BEGIN 1 */
  float x;
  for(int i=0; i<10000; i++)
 8001040:	2300      	movs	r3, #0
 8001042:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001046:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	e036      	b.n	80010bc <main+0x8c>
	  x= arm_sin_f32(2*M_PI*(float)i/10000);
 800104e:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001052:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	ee17 0a90 	vmov	r0, s15
 8001064:	f7ff fa90 	bl	8000588 <__aeabi_f2d>
 8001068:	a3f3      	add	r3, pc, #972	; (adr r3, 8001438 <main+0x408>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	f7ff fae3 	bl	8000638 <__aeabi_dmul>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	a3f1      	add	r3, pc, #964	; (adr r3, 8001440 <main+0x410>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff fc04 	bl	800088c <__aeabi_ddiv>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f7ff fdcc 	bl	8000c28 <__aeabi_d2f>
 8001090:	4603      	mov	r3, r0
 8001092:	ee00 3a10 	vmov	s0, r3
 8001096:	f003 fabb 	bl	8004610 <arm_sin_f32>
 800109a:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 800109e:	f103 0308 	add.w	r3, r3, #8
 80010a2:	ed83 0a00 	vstr	s0, [r3]
  for(int i=0; i<10000; i++)
 80010a6:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 80010aa:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 80010b6:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 80010c0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f242 720f 	movw	r2, #9999	; 0x270f
 80010ca:	4293      	cmp	r3, r2
 80010cc:	ddbf      	ble.n	800104e <main+0x1e>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ce:	f003 fb27 	bl	8004720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d2:	f000 fb59 	bl	8001788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d6:	f000 fdad 	bl	8001c34 <MX_GPIO_Init>
  MX_DMA_Init();
 80010da:	f000 fd8b 	bl	8001bf4 <MX_DMA_Init>
  MX_TIM2_Init();
 80010de:	f000 fc69 	bl	80019b4 <MX_TIM2_Init>
  MX_TIM1_Init();
 80010e2:	f000 fbbf 	bl	8001864 <MX_TIM1_Init>
  MX_TIM3_Init();
 80010e6:	f000 fcb9 	bl	8001a5c <MX_TIM3_Init>
  MX_TIM5_Init();
 80010ea:	f000 fd05 	bl	8001af8 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 80010ee:	f000 fd57 	bl	8001ba0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  DATASTREAM_Init(&huart3);
 80010f2:	48cb      	ldr	r0, [pc, #812]	; (8001420 <main+0x3f0>)
 80010f4:	f001 fa28 	bl	8002548 <DATASTREAM_Init>

  MAIN_DIFFDRIVE_Init();
 80010f8:	f000 fe3e 	bl	8001d78 <MAIN_DIFFDRIVE_Init>

#ifdef TRAJECTORY_TRACKING

  // Wait until blue button is pressed
  while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) )
 80010fc:	bf00      	nop
 80010fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001102:	48c8      	ldr	r0, [pc, #800]	; (8001424 <main+0x3f4>)
 8001104:	f004 f932 	bl	800536c <HAL_GPIO_ReadPin>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f7      	bne.n	80010fe <main+0xce>
  		;

  // Enable WIFI to send/receive values
  HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	2101      	movs	r1, #1
 8001112:	48c4      	ldr	r0, [pc, #784]	; (8001424 <main+0x3f4>)
 8001114:	f004 f942 	bl	800539c <HAL_GPIO_WritePin>

  // Wait for ESP boot
  HAL_Delay(3000);
 8001118:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800111c:	f003 fb72 	bl	8004804 <HAL_Delay>

  // Rapidly flash led to show MCU ready to send values
  for(int i=0; i<20; i++){
 8001120:	2300      	movs	r3, #0
 8001122:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001126:	f102 0220 	add.w	r2, r2, #32
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	e011      	b.n	8001152 <main+0x122>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800112e:	2120      	movs	r1, #32
 8001130:	48bd      	ldr	r0, [pc, #756]	; (8001428 <main+0x3f8>)
 8001132:	f004 f94c 	bl	80053ce <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8001136:	2032      	movs	r0, #50	; 0x32
 8001138:	f003 fb64 	bl	8004804 <HAL_Delay>
  for(int i=0; i<20; i++){
 800113c:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001140:	f103 0320 	add.w	r3, r3, #32
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 800114c:	f102 0220 	add.w	r2, r2, #32
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001156:	f103 0320 	add.w	r3, r3, #32
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b13      	cmp	r3, #19
 800115e:	dde6      	ble.n	800112e <main+0xfe>
  }

  // Wait for 10 received chars
  char ch[10];
  HAL_UART_Receive(&huart3, (uint8_t*) ch, sizeof(ch), HAL_MAX_DELAY);
 8001160:	f507 5131 	add.w	r1, r7, #11328	; 0x2c40
 8001164:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 8001168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800116c:	220a      	movs	r2, #10
 800116e:	48ac      	ldr	r0, [pc, #688]	; (8001420 <main+0x3f0>)
 8001170:	f006 fa6a 	bl	8007648 <HAL_UART_Receive>

  // LED on
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2120      	movs	r1, #32
 8001178:	48ab      	ldr	r0, [pc, #684]	; (8001428 <main+0x3f8>)
 800117a:	f004 f90f 	bl	800539c <HAL_GPIO_WritePin>

  // Wait a bit more
  HAL_Delay(3000);
 800117e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001182:	f003 fb3f 	bl	8004804 <HAL_Delay>

  // LED off
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2120      	movs	r1, #32
 800118a:	48a7      	ldr	r0, [pc, #668]	; (8001428 <main+0x3f8>)
 800118c:	f004 f906 	bl	800539c <HAL_GPIO_WritePin>

#ifdef SENSOR_CHECK
  int i=0;
#else
  // Enabling motion
  bool motion_flag= true;
 8001190:	2301      	movs	r3, #1
 8001192:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001196:	f102 021f 	add.w	r2, r2, #31
 800119a:	7013      	strb	r3, [r2, #0]
#endif /* SENSOR_CHECK */

  // Wait until the blue button is pressed
  while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) )
 800119c:	e000      	b.n	80011a0 <main+0x170>
	  __NOP();
 800119e:	bf00      	nop
  while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) )
 80011a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a4:	489f      	ldr	r0, [pc, #636]	; (8001424 <main+0x3f4>)
 80011a6:	f004 f8e1 	bl	800536c <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1f6      	bne.n	800119e <main+0x16e>

  HAL_Delay(1000);
 80011b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b4:	f003 fb26 	bl	8004804 <HAL_Delay>

  // Reset Sensors
  DIFFDRIVE_ENCODER_Reset();
 80011b8:	f002 f8d6 	bl	8003368 <DIFFDRIVE_ENCODER_Reset>
	  );
	  HAL_Delay(500);

#else

	if( motion_flag ){
 80011bc:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 80011c0:	f103 031f 	add.w	r3, r3, #31
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 813e 	beq.w	8001448 <main+0x418>

#ifdef TRAJECTORY_TRACKING


		// First values send is the actual number of samples
		DATASTREAM_SendValue(stream_on_matlab, 1, (double)N_SAMPLE_REF);
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b96      	ldr	r3, [pc, #600]	; (800142c <main+0x3fc>)
 80011d2:	2101      	movs	r1, #1
 80011d4:	2000      	movs	r0, #0
 80011d6:	f001 f9c3 	bl	8002560 <DATASTREAM_SendValue>
		// Bit of transfer delay
		HAL_Delay(8);
 80011da:	2008      	movs	r0, #8
 80011dc:	f003 fb12 	bl	8004804 <HAL_Delay>

		DIFFDRIVE_TrackingStart();
 80011e0:	f002 fef6 	bl	8003fd0 <DIFFDRIVE_TrackingStart>

		for(int i= 0; i<N_SAMPLE_REF; i++){
 80011e4:	2300      	movs	r3, #0
 80011e6:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 80011ea:	f102 0218 	add.w	r2, r2, #24
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	e0fc      	b.n	80013ec <main+0x3bc>
			// Make a control step
			DIFFDRIVE_TrackingStep(DELTA_A_ref[i], DELTA_THETA_ref[i]);
 80011f2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80011f6:	3b10      	subs	r3, #16
 80011f8:	4a8d      	ldr	r2, [pc, #564]	; (8001430 <main+0x400>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	4611      	mov	r1, r2
 80011fe:	f44f 53af 	mov.w	r3, #5600	; 0x15e0
 8001202:	461a      	mov	r2, r3
 8001204:	f006 fdc6 	bl	8007d94 <memcpy>
 8001208:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800120c:	3b10      	subs	r3, #16
 800120e:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001212:	f102 0218 	add.w	r2, r2, #24
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	0092      	lsls	r2, r2, #2
 800121a:	4413      	add	r3, r2
 800121c:	ed93 8a00 	vldr	s16, [r3]
 8001220:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 8001224:	f103 0308 	add.w	r3, r3, #8
 8001228:	3b10      	subs	r3, #16
 800122a:	4a82      	ldr	r2, [pc, #520]	; (8001434 <main+0x404>)
 800122c:	4618      	mov	r0, r3
 800122e:	4611      	mov	r1, r2
 8001230:	f44f 53af 	mov.w	r3, #5600	; 0x15e0
 8001234:	461a      	mov	r2, r3
 8001236:	f006 fdad 	bl	8007d94 <memcpy>
 800123a:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 800123e:	f103 0308 	add.w	r3, r3, #8
 8001242:	3b10      	subs	r3, #16
 8001244:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001248:	f102 0218 	add.w	r2, r2, #24
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	4413      	add	r3, r2
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	eef0 0a67 	vmov.f32	s1, s15
 800125a:	eeb0 0a48 	vmov.f32	s0, s16
 800125e:	f002 fecb 	bl	8003ff8 <DIFFDRIVE_TrackingStep>

			// Temporary variables
			DIFFDRIVE_STATE_TypeDef state_measure, state_target;

			// Get one state sample from history
			DIFFDRIVE_HISTORY_Get_Sample(&state_measure, &state_target);
 8001262:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001266:	3a34      	subs	r2, #52	; 0x34
 8001268:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800126c:	3b18      	subs	r3, #24
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f002 fb9d 	bl	80039b0 <DIFFDRIVE_HISTORY_Get_Sample>

			// Send values to serial connected to ESP WiFi module
			DATASTREAM_SendValue(
					stream_on_matlab, 14,
					state_measure.input[left], state_measure.input[right],
 8001276:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800127a:	3b18      	subs	r3, #24
 800127c:	69db      	ldr	r3, [r3, #28]
			DATASTREAM_SendValue(
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f982 	bl	8000588 <__aeabi_f2d>
 8001284:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
					state_measure.input[left], state_measure.input[right],
 8001288:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800128c:	3b18      	subs	r3, #24
 800128e:	6a1b      	ldr	r3, [r3, #32]
			DATASTREAM_SendValue(
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f979 	bl	8000588 <__aeabi_f2d>
 8001296:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
					state_target .input[left], state_target .input[right],
 800129a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800129e:	3b34      	subs	r3, #52	; 0x34
 80012a0:	69db      	ldr	r3, [r3, #28]
			DATASTREAM_SendValue(
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f970 	bl	8000588 <__aeabi_f2d>
 80012a8:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
					state_target .input[left], state_target .input[right],
 80012ac:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012b0:	3b34      	subs	r3, #52	; 0x34
 80012b2:	6a1b      	ldr	r3, [r3, #32]
			DATASTREAM_SendValue(
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f967 	bl	8000588 <__aeabi_f2d>
 80012ba:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
					state_measure.wheel[left], state_measure.wheel[right],
 80012be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012c2:	3b18      	subs	r3, #24
 80012c4:	68db      	ldr	r3, [r3, #12]
			DATASTREAM_SendValue(
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f95e 	bl	8000588 <__aeabi_f2d>
 80012cc:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
					state_measure.wheel[left], state_measure.wheel[right],
 80012d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012d4:	3b18      	subs	r3, #24
 80012d6:	691b      	ldr	r3, [r3, #16]
			DATASTREAM_SendValue(
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f955 	bl	8000588 <__aeabi_f2d>
 80012de:	e9c7 0108 	strd	r0, r1, [r7, #32]
					state_target .wheel[left], state_target .wheel[right],
 80012e2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012e6:	3b34      	subs	r3, #52	; 0x34
 80012e8:	68db      	ldr	r3, [r3, #12]
			DATASTREAM_SendValue(
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f94c 	bl	8000588 <__aeabi_f2d>
 80012f0:	e9c7 0106 	strd	r0, r1, [r7, #24]
					state_target .wheel[left], state_target .wheel[right],
 80012f4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012f8:	3b34      	subs	r3, #52	; 0x34
 80012fa:	691b      	ldr	r3, [r3, #16]
			DATASTREAM_SendValue(
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f943 	bl	8000588 <__aeabi_f2d>
 8001302:	e9c7 0104 	strd	r0, r1, [r7, #16]
					state_measure.pose.x_a,    state_measure.pose.y_a,
 8001306:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800130a:	3b18      	subs	r3, #24
 800130c:	681b      	ldr	r3, [r3, #0]
			DATASTREAM_SendValue(
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f93a 	bl	8000588 <__aeabi_f2d>
 8001314:	e9c7 0102 	strd	r0, r1, [r7, #8]
					state_measure.pose.x_a,    state_measure.pose.y_a,
 8001318:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800131c:	3b18      	subs	r3, #24
 800131e:	685b      	ldr	r3, [r3, #4]
			DATASTREAM_SendValue(
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f931 	bl	8000588 <__aeabi_f2d>
 8001326:	e9c7 0100 	strd	r0, r1, [r7]
					state_measure.pose.theta,
 800132a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800132e:	3b18      	subs	r3, #24
 8001330:	689b      	ldr	r3, [r3, #8]
			DATASTREAM_SendValue(
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f928 	bl	8000588 <__aeabi_f2d>
 8001338:	4682      	mov	sl, r0
 800133a:	468b      	mov	fp, r1
					state_target .pose.x_a,    state_target.pose.y_a,
 800133c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001340:	3b34      	subs	r3, #52	; 0x34
 8001342:	681b      	ldr	r3, [r3, #0]
			DATASTREAM_SendValue(
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f91f 	bl	8000588 <__aeabi_f2d>
 800134a:	4680      	mov	r8, r0
 800134c:	4689      	mov	r9, r1
					state_target .pose.x_a,    state_target.pose.y_a,
 800134e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001352:	3b34      	subs	r3, #52	; 0x34
 8001354:	685b      	ldr	r3, [r3, #4]
			DATASTREAM_SendValue(
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f916 	bl	8000588 <__aeabi_f2d>
 800135c:	4604      	mov	r4, r0
 800135e:	460d      	mov	r5, r1
					state_target .pose.theta
 8001360:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001364:	3b34      	subs	r3, #52	; 0x34
 8001366:	689b      	ldr	r3, [r3, #8]
			DATASTREAM_SendValue(
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f90d 	bl	8000588 <__aeabi_f2d>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8001376:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 800137a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800137e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 8001382:	ed97 7b00 	vldr	d7, [r7]
 8001386:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800138a:	ed97 7b02 	vldr	d7, [r7, #8]
 800138e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001392:	ed97 7b04 	vldr	d7, [r7, #16]
 8001396:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800139a:	ed97 7b06 	vldr	d7, [r7, #24]
 800139e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80013a2:	ed97 7b08 	vldr	d7, [r7, #32]
 80013a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80013aa:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80013ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80013b2:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80013b6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80013ba:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80013be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80013c2:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80013c6:	ed8d 7b00 	vstr	d7, [sp]
 80013ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80013ce:	210e      	movs	r1, #14
 80013d0:	2000      	movs	r0, #0
 80013d2:	f001 f8c5 	bl	8002560 <DATASTREAM_SendValue>
		for(int i= 0; i<N_SAMPLE_REF; i++){
 80013d6:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 80013da:	f103 0318 	add.w	r3, r3, #24
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 80013e6:	f102 0218 	add.w	r2, r2, #24
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 80013f0:	f103 0318 	add.w	r3, r3, #24
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80013fa:	f6ff aefa 	blt.w	80011f2 <main+0x1c2>
			);

		}

		// Stop differential drive
		DIFFDRIVE_TrackingStop();
 80013fe:	f002 fdf5 	bl	8003fec <DIFFDRIVE_TrackingStop>

		// Disable WiFi
		HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2101      	movs	r1, #1
 8001406:	4807      	ldr	r0, [pc, #28]	; (8001424 <main+0x3f4>)
 8001408:	f003 ffc8 	bl	800539c <HAL_GPIO_WritePin>
		DIFFDRIVE_InputArray(N_SAMPLE_ID, input);

#endif /* IDENTIFICATION */

		// Stop motion
		motion_flag= false;
 800140c:	2300      	movs	r3, #0
 800140e:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001412:	f102 021f 	add.w	r2, r2, #31
 8001416:	7013      	strb	r3, [r2, #0]
 8001418:	e6d0      	b.n	80011bc <main+0x18c>
 800141a:	bf00      	nop
 800141c:	f3af 8000 	nop.w
 8001420:	20000208 	.word	0x20000208
 8001424:	40020800 	.word	0x40020800
 8001428:	40020000 	.word	0x40020000
 800142c:	4095e000 	.word	0x4095e000
 8001430:	0800da88 	.word	0x0800da88
 8001434:	0800f068 	.word	0x0800f068
 8001438:	54442d18 	.word	0x54442d18
 800143c:	401921fb 	.word	0x401921fb
 8001440:	00000000 	.word	0x00000000
 8001444:	40c38800 	.word	0x40c38800

	}
	else{

		// Start sending values Task if blue button is pressed
		if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 8001448:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144c:	48c9      	ldr	r0, [pc, #804]	; (8001774 <main+0x744>)
 800144e:	f003 ff8d 	bl	800536c <HAL_GPIO_ReadPin>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	f47f aeb1 	bne.w	80011bc <main+0x18c>

			// Enable WIFI to send/receive values
			HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_SET);
 800145a:	2201      	movs	r2, #1
 800145c:	2101      	movs	r1, #1
 800145e:	48c5      	ldr	r0, [pc, #788]	; (8001774 <main+0x744>)
 8001460:	f003 ff9c 	bl	800539c <HAL_GPIO_WritePin>

			// Wait for ESP boot
			HAL_Delay(3000);
 8001464:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001468:	f003 f9cc 	bl	8004804 <HAL_Delay>

			// Rapidly flash led to show MCU ready to send values
			for(int i=0; i<20; i++){
 800146c:	2300      	movs	r3, #0
 800146e:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001472:	f102 0214 	add.w	r2, r2, #20
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	e011      	b.n	800149e <main+0x46e>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800147a:	2120      	movs	r1, #32
 800147c:	48be      	ldr	r0, [pc, #760]	; (8001778 <main+0x748>)
 800147e:	f003 ffa6 	bl	80053ce <HAL_GPIO_TogglePin>
				HAL_Delay(50);
 8001482:	2032      	movs	r0, #50	; 0x32
 8001484:	f003 f9be 	bl	8004804 <HAL_Delay>
			for(int i=0; i<20; i++){
 8001488:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 800148c:	f103 0314 	add.w	r3, r3, #20
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001498:	f102 0214 	add.w	r2, r2, #20
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 80014a2:	f103 0314 	add.w	r3, r3, #20
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b13      	cmp	r3, #19
 80014aa:	dde6      	ble.n	800147a <main+0x44a>
			}

			// Wait for 10 received chars
			char ch[10];
			HAL_UART_Receive(&huart3, (uint8_t*) ch, sizeof(ch), HAL_MAX_DELAY);
 80014ac:	f507 5131 	add.w	r1, r7, #11328	; 0x2c40
 80014b0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014b8:	220a      	movs	r2, #10
 80014ba:	48b0      	ldr	r0, [pc, #704]	; (800177c <main+0x74c>)
 80014bc:	f006 f8c4 	bl	8007648 <HAL_UART_Receive>

			// LED on
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2120      	movs	r1, #32
 80014c4:	48ac      	ldr	r0, [pc, #688]	; (8001778 <main+0x748>)
 80014c6:	f003 ff69 	bl	800539c <HAL_GPIO_WritePin>

			// Wait a bit more
			HAL_Delay(3000);
 80014ca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014ce:	f003 f999 	bl	8004804 <HAL_Delay>

			// LED off
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2120      	movs	r1, #32
 80014d6:	48a8      	ldr	r0, [pc, #672]	; (8001778 <main+0x748>)
 80014d8:	f003 ff60 	bl	800539c <HAL_GPIO_WritePin>

			// History struct
			DIFFDRIVE_HISTORY_TypeDef tmphist= hdiffdrive.history;
 80014dc:	4ba8      	ldr	r3, [pc, #672]	; (8001780 <main+0x750>)
 80014de:	f507 5431 	add.w	r4, r7, #11328	; 0x2c40
 80014e2:	f104 0418 	add.w	r4, r4, #24
 80014e6:	f503 750a 	add.w	r5, r3, #552	; 0x228
 80014ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014f2:	e884 0003 	stmia.w	r4, {r0, r1}

			// Number of saved samples
			uint32_t N_sample;
			if( tmphist.sample_cnt < tmphist.max_sample )
 80014f6:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 80014fa:	f103 031c 	add.w	r3, r3, #28
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001504:	f103 0320 	add.w	r3, r3, #32
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d20a      	bcs.n	8001524 <main+0x4f4>
				N_sample=  tmphist.sample_cnt;
 800150e:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001512:	f103 031c 	add.w	r3, r3, #28
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 800151c:	f102 0210 	add.w	r2, r2, #16
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e009      	b.n	8001538 <main+0x508>
			else
				N_sample=  tmphist.max_sample;
 8001524:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001528:	f103 0320 	add.w	r3, r3, #32
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001532:	f102 0210 	add.w	r2, r2, #16
 8001536:	6013      	str	r3, [r2, #0]

			// First values send is the actual number of samples
			DATASTREAM_SendValue(stream_on_matlab, 1, (double)N_sample);
 8001538:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 800153c:	f103 0310 	add.w	r3, r3, #16
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	f7fe ffff 	bl	8000544 <__aeabi_ui2d>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	2101      	movs	r1, #1
 800154c:	2000      	movs	r0, #0
 800154e:	f001 f807 	bl	8002560 <DATASTREAM_SendValue>
			// Bit of transfer delay
			HAL_Delay(8);
 8001552:	2008      	movs	r0, #8
 8001554:	f003 f956 	bl	8004804 <HAL_Delay>

			// Init History Get function
			DIFFDRIVE_HISTORY_Get_Init();
 8001558:	f002 fa02 	bl	8003960 <DIFFDRIVE_HISTORY_Get_Init>

			for(int k= 0; k < N_sample; k++){
 800155c:	2300      	movs	r3, #0
 800155e:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001562:	f102 020c 	add.w	r2, r2, #12
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	e0ec      	b.n	8001744 <main+0x714>
				// Temporary variables
				DIFFDRIVE_STATE_TypeDef state_measure, state_target;

				// Get one state sample from history
				DIFFDRIVE_HISTORY_Get_Sample(&state_measure, &state_target);
 800156a:	f507 52b4 	add.w	r2, r7, #5760	; 0x1680
 800156e:	f102 0208 	add.w	r2, r2, #8
 8001572:	3a10      	subs	r2, #16
 8001574:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001578:	3b10      	subs	r3, #16
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f002 fa17 	bl	80039b0 <DIFFDRIVE_HISTORY_Get_Sample>

				// Send values to serial connected to ESP WiFi module
				DATASTREAM_SendValue(
						stream_on_matlab, 14,
						state_measure.input[left], state_measure.input[right],
 8001582:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001586:	3b10      	subs	r3, #16
 8001588:	69db      	ldr	r3, [r3, #28]
				DATASTREAM_SendValue(
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe fffc 	bl	8000588 <__aeabi_f2d>
 8001590:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
						state_measure.input[left], state_measure.input[right],
 8001594:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001598:	3b10      	subs	r3, #16
 800159a:	6a1b      	ldr	r3, [r3, #32]
				DATASTREAM_SendValue(
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fff3 	bl	8000588 <__aeabi_f2d>
 80015a2:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
						state_target .input[left], state_target .input[right],
 80015a6:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 80015aa:	f103 0308 	add.w	r3, r3, #8
 80015ae:	3b10      	subs	r3, #16
 80015b0:	69db      	ldr	r3, [r3, #28]
				DATASTREAM_SendValue(
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffe8 	bl	8000588 <__aeabi_f2d>
 80015b8:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
						state_target .input[left], state_target .input[right],
 80015bc:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 80015c0:	f103 0308 	add.w	r3, r3, #8
 80015c4:	3b10      	subs	r3, #16
 80015c6:	6a1b      	ldr	r3, [r3, #32]
				DATASTREAM_SendValue(
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffdd 	bl	8000588 <__aeabi_f2d>
 80015ce:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
						state_measure.wheel[left], state_measure.wheel[right],
 80015d2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80015d6:	3b10      	subs	r3, #16
 80015d8:	68db      	ldr	r3, [r3, #12]
				DATASTREAM_SendValue(
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ffd4 	bl	8000588 <__aeabi_f2d>
 80015e0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						state_measure.wheel[left], state_measure.wheel[right],
 80015e4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80015e8:	3b10      	subs	r3, #16
 80015ea:	691b      	ldr	r3, [r3, #16]
				DATASTREAM_SendValue(
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ffcb 	bl	8000588 <__aeabi_f2d>
 80015f2:	e9c7 0108 	strd	r0, r1, [r7, #32]
						state_target .wheel[left], state_target .wheel[right],
 80015f6:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 80015fa:	f103 0308 	add.w	r3, r3, #8
 80015fe:	3b10      	subs	r3, #16
 8001600:	68db      	ldr	r3, [r3, #12]
				DATASTREAM_SendValue(
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ffc0 	bl	8000588 <__aeabi_f2d>
 8001608:	e9c7 0106 	strd	r0, r1, [r7, #24]
						state_target .wheel[left], state_target .wheel[right],
 800160c:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 8001610:	f103 0308 	add.w	r3, r3, #8
 8001614:	3b10      	subs	r3, #16
 8001616:	691b      	ldr	r3, [r3, #16]
				DATASTREAM_SendValue(
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ffb5 	bl	8000588 <__aeabi_f2d>
 800161e:	e9c7 0104 	strd	r0, r1, [r7, #16]
						state_measure.pose.x_a,    state_measure.pose.y_a,
 8001622:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001626:	3b10      	subs	r3, #16
 8001628:	681b      	ldr	r3, [r3, #0]
				DATASTREAM_SendValue(
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ffac 	bl	8000588 <__aeabi_f2d>
 8001630:	e9c7 0102 	strd	r0, r1, [r7, #8]
						state_measure.pose.x_a,    state_measure.pose.y_a,
 8001634:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001638:	3b10      	subs	r3, #16
 800163a:	685b      	ldr	r3, [r3, #4]
				DATASTREAM_SendValue(
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ffa3 	bl	8000588 <__aeabi_f2d>
 8001642:	e9c7 0100 	strd	r0, r1, [r7]
						state_measure.pose.theta,
 8001646:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800164a:	3b10      	subs	r3, #16
 800164c:	689b      	ldr	r3, [r3, #8]
				DATASTREAM_SendValue(
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff9a 	bl	8000588 <__aeabi_f2d>
 8001654:	4682      	mov	sl, r0
 8001656:	468b      	mov	fp, r1
						state_target .pose.x_a,    state_target.pose.y_a,
 8001658:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 800165c:	f103 0308 	add.w	r3, r3, #8
 8001660:	3b10      	subs	r3, #16
 8001662:	681b      	ldr	r3, [r3, #0]
				DATASTREAM_SendValue(
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff8f 	bl	8000588 <__aeabi_f2d>
 800166a:	4680      	mov	r8, r0
 800166c:	4689      	mov	r9, r1
						state_target .pose.x_a,    state_target.pose.y_a,
 800166e:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 8001672:	f103 0308 	add.w	r3, r3, #8
 8001676:	3b10      	subs	r3, #16
 8001678:	685b      	ldr	r3, [r3, #4]
				DATASTREAM_SendValue(
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff84 	bl	8000588 <__aeabi_f2d>
 8001680:	4604      	mov	r4, r0
 8001682:	460d      	mov	r5, r1
						state_target .pose.theta
 8001684:	f507 53b4 	add.w	r3, r7, #5760	; 0x1680
 8001688:	f103 0308 	add.w	r3, r3, #8
 800168c:	3b10      	subs	r3, #16
 800168e:	689b      	ldr	r3, [r3, #8]
				DATASTREAM_SendValue(
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff79 	bl	8000588 <__aeabi_f2d>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 800169e:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 80016a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80016a6:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 80016aa:	ed97 7b00 	vldr	d7, [r7]
 80016ae:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80016b2:	ed97 7b02 	vldr	d7, [r7, #8]
 80016b6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80016ba:	ed97 7b04 	vldr	d7, [r7, #16]
 80016be:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80016c2:	ed97 7b06 	vldr	d7, [r7, #24]
 80016c6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80016ca:	ed97 7b08 	vldr	d7, [r7, #32]
 80016ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80016d2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80016d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80016da:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80016de:	ed8d 7b04 	vstr	d7, [sp, #16]
 80016e2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80016e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80016ea:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80016ee:	ed8d 7b00 	vstr	d7, [sp]
 80016f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016f6:	210e      	movs	r1, #14
 80016f8:	2000      	movs	r0, #0
 80016fa:	f000 ff31 	bl	8002560 <DATASTREAM_SendValue>
				);
				// Bit of transfer delay
				HAL_Delay(8);
 80016fe:	2008      	movs	r0, #8
 8001700:	f003 f880 	bl	8004804 <HAL_Delay>
				// Toggling led to show data transfer operation
				if( !(k%50) )
 8001704:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001708:	f103 030c 	add.w	r3, r3, #12
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <main+0x754>)
 8001710:	fb83 1302 	smull	r1, r3, r3, r2
 8001714:	1119      	asrs	r1, r3, #4
 8001716:	17d3      	asrs	r3, r2, #31
 8001718:	1acb      	subs	r3, r1, r3
 800171a:	2132      	movs	r1, #50	; 0x32
 800171c:	fb01 f303 	mul.w	r3, r1, r3
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d103      	bne.n	800172e <main+0x6fe>
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001726:	2120      	movs	r1, #32
 8001728:	4813      	ldr	r0, [pc, #76]	; (8001778 <main+0x748>)
 800172a:	f003 fe50 	bl	80053ce <HAL_GPIO_TogglePin>
			for(int k= 0; k < N_sample; k++){
 800172e:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001732:	f103 030c 	add.w	r3, r3, #12
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 800173e:	f102 020c 	add.w	r2, r2, #12
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001748:	f103 030c 	add.w	r3, r3, #12
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001752:	f102 0210 	add.w	r2, r2, #16
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	f63f af06 	bhi.w	800156a <main+0x53a>
			}

			// Turn off LED
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2120      	movs	r1, #32
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <main+0x748>)
 8001764:	f003 fe1a 	bl	800539c <HAL_GPIO_WritePin>

			// Disable WiFi
			HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	2101      	movs	r1, #1
 800176c:	4801      	ldr	r0, [pc, #4]	; (8001774 <main+0x744>)
 800176e:	f003 fe15 	bl	800539c <HAL_GPIO_WritePin>
	if( motion_flag ){
 8001772:	e523      	b.n	80011bc <main+0x18c>
 8001774:	40020800 	.word	0x40020800
 8001778:	40020000 	.word	0x40020000
 800177c:	20000208 	.word	0x20000208
 8001780:	200005ac 	.word	0x200005ac
 8001784:	51eb851f 	.word	0x51eb851f

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	; 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	2234      	movs	r2, #52	; 0x34
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f006 fb0a 	bl	8007db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 0308 	add.w	r3, r7, #8
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <SystemClock_Config+0xd4>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	4a29      	ldr	r2, [pc, #164]	; (800185c <SystemClock_Config+0xd4>)
 80017b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	; 0x40
 80017bc:	4b27      	ldr	r3, [pc, #156]	; (800185c <SystemClock_Config+0xd4>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017c8:	2300      	movs	r3, #0
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <SystemClock_Config+0xd8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017d4:	4a22      	ldr	r2, [pc, #136]	; (8001860 <SystemClock_Config+0xd8>)
 80017d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b20      	ldr	r3, [pc, #128]	; (8001860 <SystemClock_Config+0xd8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ec:	2301      	movs	r3, #1
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f0:	2310      	movs	r3, #16
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f4:	2302      	movs	r3, #2
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017f8:	2300      	movs	r3, #0
 80017fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017fc:	2310      	movs	r3, #16
 80017fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001800:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001804:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001806:	2304      	movs	r3, #4
 8001808:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800180a:	2302      	movs	r3, #2
 800180c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800180e:	2302      	movs	r3, #2
 8001810:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4618      	mov	r0, r3
 8001818:	f004 f8c0 	bl	800599c <HAL_RCC_OscConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001822:	f000 fb7b 	bl	8001f1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001826:	230f      	movs	r3, #15
 8001828:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800182a:	2302      	movs	r3, #2
 800182c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001838:	2300      	movs	r3, #0
 800183a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	2102      	movs	r1, #2
 8001842:	4618      	mov	r0, r3
 8001844:	f003 fdde 	bl	8005404 <HAL_RCC_ClockConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800184e:	f000 fb65 	bl	8001f1c <Error_Handler>
  }
}
 8001852:	bf00      	nop
 8001854:	3750      	adds	r7, #80	; 0x50
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40007000 	.word	0x40007000

08001864 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b092      	sub	sp, #72	; 0x48
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
 8001884:	615a      	str	r2, [r3, #20]
 8001886:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2220      	movs	r2, #32
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f006 fa8e 	bl	8007db0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001894:	4b45      	ldr	r3, [pc, #276]	; (80019ac <MX_TIM1_Init+0x148>)
 8001896:	4a46      	ldr	r2, [pc, #280]	; (80019b0 <MX_TIM1_Init+0x14c>)
 8001898:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 800189a:	4b44      	ldr	r3, [pc, #272]	; (80019ac <MX_TIM1_Init+0x148>)
 800189c:	2208      	movs	r2, #8
 800189e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a0:	4b42      	ldr	r3, [pc, #264]	; (80019ac <MX_TIM1_Init+0x148>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80018a6:	4b41      	ldr	r3, [pc, #260]	; (80019ac <MX_TIM1_Init+0x148>)
 80018a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80018ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ae:	4b3f      	ldr	r3, [pc, #252]	; (80019ac <MX_TIM1_Init+0x148>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018b4:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <MX_TIM1_Init+0x148>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ba:	4b3c      	ldr	r3, [pc, #240]	; (80019ac <MX_TIM1_Init+0x148>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018c0:	483a      	ldr	r0, [pc, #232]	; (80019ac <MX_TIM1_Init+0x148>)
 80018c2:	f004 fc05 	bl	80060d0 <HAL_TIM_PWM_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80018cc:	f000 fb26 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018dc:	4619      	mov	r1, r3
 80018de:	4833      	ldr	r0, [pc, #204]	; (80019ac <MX_TIM1_Init+0x148>)
 80018e0:	f005 fcda 	bl	8007298 <HAL_TIMEx_MasterConfigSynchronization>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80018ea:	f000 fb17 	bl	8001f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ee:	2360      	movs	r3, #96	; 0x60
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018fa:	2300      	movs	r3, #0
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800190a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190e:	2200      	movs	r2, #0
 8001910:	4619      	mov	r1, r3
 8001912:	4826      	ldr	r0, [pc, #152]	; (80019ac <MX_TIM1_Init+0x148>)
 8001914:	f004 ff6a 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800191e:	f000 fafd 	bl	8001f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001926:	2204      	movs	r2, #4
 8001928:	4619      	mov	r1, r3
 800192a:	4820      	ldr	r0, [pc, #128]	; (80019ac <MX_TIM1_Init+0x148>)
 800192c:	f004 ff5e 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001936:	f000 faf1 	bl	8001f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800193a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193e:	2208      	movs	r2, #8
 8001940:	4619      	mov	r1, r3
 8001942:	481a      	ldr	r0, [pc, #104]	; (80019ac <MX_TIM1_Init+0x148>)
 8001944:	f004 ff52 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800194e:	f000 fae5 	bl	8001f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001956:	220c      	movs	r2, #12
 8001958:	4619      	mov	r1, r3
 800195a:	4814      	ldr	r0, [pc, #80]	; (80019ac <MX_TIM1_Init+0x148>)
 800195c:	f004 ff46 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001966:	f000 fad9 	bl	8001f1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800197e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001982:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	4619      	mov	r1, r3
 800198c:	4807      	ldr	r0, [pc, #28]	; (80019ac <MX_TIM1_Init+0x148>)
 800198e:	f005 fcff 	bl	8007390 <HAL_TIMEx_ConfigBreakDeadTime>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001998:	f000 fac0 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800199c:	4803      	ldr	r0, [pc, #12]	; (80019ac <MX_TIM1_Init+0x148>)
 800199e:	f000 fc77 	bl	8002290 <HAL_TIM_MspPostInit>

}
 80019a2:	bf00      	nop
 80019a4:	3748      	adds	r7, #72	; 0x48
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000444 	.word	0x20000444
 80019b0:	40010000 	.word	0x40010000

080019b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08c      	sub	sp, #48	; 0x30
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	2224      	movs	r2, #36	; 0x24
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f006 f9f4 	bl	8007db0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <MX_TIM2_Init+0xa4>)
 80019d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <MX_TIM2_Init+0xa4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <MX_TIM2_Init+0xa4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019e4:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <MX_TIM2_Init+0xa4>)
 80019e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_TIM2_Init+0xa4>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <MX_TIM2_Init+0xa4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a00:	2301      	movs	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001a08:	230f      	movs	r3, #15
 8001a0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a10:	2301      	movs	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001a18:	230f      	movs	r3, #15
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	4619      	mov	r1, r3
 8001a22:	480d      	ldr	r0, [pc, #52]	; (8001a58 <MX_TIM2_Init+0xa4>)
 8001a24:	f004 fc78 	bl	8006318 <HAL_TIM_Encoder_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001a2e:	f000 fa75 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <MX_TIM2_Init+0xa4>)
 8001a40:	f005 fc2a 	bl	8007298 <HAL_TIMEx_MasterConfigSynchronization>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a4a:	f000 fa67 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	3730      	adds	r7, #48	; 0x30
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200004f8 	.word	0x200004f8

08001a5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a70:	463b      	mov	r3, r7
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a78:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <MX_TIM3_Init+0x94>)
 8001a7a:	4a1e      	ldr	r2, [pc, #120]	; (8001af4 <MX_TIM3_Init+0x98>)
 8001a7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <MX_TIM3_Init+0x94>)
 8001a80:	f240 3247 	movw	r2, #839	; 0x347
 8001a84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <MX_TIM3_Init+0x94>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001a8c:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <MX_TIM3_Init+0x94>)
 8001a8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <MX_TIM3_Init+0x94>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <MX_TIM3_Init+0x94>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aa0:	4813      	ldr	r0, [pc, #76]	; (8001af0 <MX_TIM3_Init+0x94>)
 8001aa2:	f004 fa19 	bl	8005ed8 <HAL_TIM_Base_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001aac:	f000 fa36 	bl	8001f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	4619      	mov	r1, r3
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <MX_TIM3_Init+0x94>)
 8001abe:	f004 ff57 	bl	8006970 <HAL_TIM_ConfigClockSource>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ac8:	f000 fa28 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <MX_TIM3_Init+0x94>)
 8001ada:	f005 fbdd 	bl	8007298 <HAL_TIMEx_MasterConfigSynchronization>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ae4:	f000 fa1a 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000390 	.word	0x20000390
 8001af4:	40000400 	.word	0x40000400

08001af8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	2224      	movs	r2, #36	; 0x24
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f006 f952 	bl	8007db0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b14:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <MX_TIM5_Init+0xa0>)
 8001b16:	4a21      	ldr	r2, [pc, #132]	; (8001b9c <MX_TIM5_Init+0xa4>)
 8001b18:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b1a:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <MX_TIM5_Init+0xa0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <MX_TIM5_Init+0xa0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001b26:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <MX_TIM5_Init+0xa0>)
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <MX_TIM5_Init+0xa0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <MX_TIM5_Init+0xa0>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b42:	2301      	movs	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001b4a:	230f      	movs	r3, #15
 8001b4c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b52:	2301      	movs	r3, #1
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001b5a:	230f      	movs	r3, #15
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	4619      	mov	r1, r3
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <MX_TIM5_Init+0xa0>)
 8001b66:	f004 fbd7 	bl	8006318 <HAL_TIM_Encoder_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001b70:	f000 f9d4 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_TIM5_Init+0xa0>)
 8001b82:	f005 fb89 	bl	8007298 <HAL_TIMEx_MasterConfigSynchronization>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001b8c:	f000 f9c6 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	3730      	adds	r7, #48	; 0x30
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200002dc 	.word	0x200002dc
 8001b9c:	40000c00 	.word	0x40000c00

08001ba0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <MX_USART3_UART_Init+0x50>)
 8001ba8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bac:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001bb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bd8:	f005 fc4a 	bl	8007470 <HAL_UART_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001be2:	f000 f99b 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000208 	.word	0x20000208
 8001bf0:	40004800 	.word	0x40004800

08001bf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_DMA_Init+0x3c>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <MX_DMA_Init+0x3c>)
 8001c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_DMA_Init+0x3c>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	200e      	movs	r0, #14
 8001c1c:	f002 fef1 	bl	8004a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001c20:	200e      	movs	r0, #14
 8001c22:	f002 ff0a 	bl	8004a3a <HAL_NVIC_EnableIRQ>

}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <MX_GPIO_Init+0x138>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a46      	ldr	r2, [pc, #280]	; (8001d6c <MX_GPIO_Init+0x138>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b44      	ldr	r3, [pc, #272]	; (8001d6c <MX_GPIO_Init+0x138>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b40      	ldr	r3, [pc, #256]	; (8001d6c <MX_GPIO_Init+0x138>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a3f      	ldr	r2, [pc, #252]	; (8001d6c <MX_GPIO_Init+0x138>)
 8001c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <MX_GPIO_Init+0x138>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <MX_GPIO_Init+0x138>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a38      	ldr	r2, [pc, #224]	; (8001d6c <MX_GPIO_Init+0x138>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <MX_GPIO_Init+0x138>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b32      	ldr	r3, [pc, #200]	; (8001d6c <MX_GPIO_Init+0x138>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a31      	ldr	r2, [pc, #196]	; (8001d6c <MX_GPIO_Init+0x138>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <MX_GPIO_Init+0x138>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	482c      	ldr	r0, [pc, #176]	; (8001d70 <MX_GPIO_Init+0x13c>)
 8001cc0:	f003 fb6c 	bl	800539c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SUPPLY_ENABLE_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2130      	movs	r1, #48	; 0x30
 8001cc8:	482a      	ldr	r0, [pc, #168]	; (8001d74 <MX_GPIO_Init+0x140>)
 8001cca:	f003 fb67 	bl	800539c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cd4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4822      	ldr	r0, [pc, #136]	; (8001d70 <MX_GPIO_Init+0x13c>)
 8001ce6:	f003 f9ad 	bl	8005044 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_ENABLE_Pin */
  GPIO_InitStruct.Pin = WIFI_ENABLE_Pin;
 8001cea:	2301      	movs	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	481b      	ldr	r0, [pc, #108]	; (8001d70 <MX_GPIO_Init+0x13c>)
 8001d02:	f003 f99f 	bl	8005044 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d06:	230c      	movs	r3, #12
 8001d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d16:	2307      	movs	r3, #7
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4814      	ldr	r0, [pc, #80]	; (8001d74 <MX_GPIO_Init+0x140>)
 8001d22:	f003 f98f 	bl	8005044 <HAL_GPIO_Init>

  /*Configure GPIO pins : SUPPLY_ENABLE_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SUPPLY_ENABLE_Pin|LD2_Pin;
 8001d26:	2330      	movs	r3, #48	; 0x30
 8001d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480d      	ldr	r0, [pc, #52]	; (8001d74 <MX_GPIO_Init+0x140>)
 8001d3e:	f003 f981 	bl	8005044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d54:	2308      	movs	r3, #8
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_GPIO_Init+0x140>)
 8001d60:	f003 f970 	bl	8005044 <HAL_GPIO_Init>

}
 8001d64:	bf00      	nop
 8001d66:	3728      	adds	r7, #40	; 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020000 	.word	0x40020000

08001d78 <MAIN_DIFFDRIVE_Init>:

/* USER CODE BEGIN 4 */

static void MAIN_DIFFDRIVE_Init(void){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0

	float Ts= 0.01;
 8001d7e:	4b58      	ldr	r3, [pc, #352]	; (8001ee0 <MAIN_DIFFDRIVE_Init+0x168>)
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
	int max_sample= 1400;
 8001d82:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8001d86:	623b      	str	r3, [r7, #32]

	hdiffdrive.Init.timing_htim= &htim3;
 8001d88:	4b56      	ldr	r3, [pc, #344]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001d8a:	4a57      	ldr	r2, [pc, #348]	; (8001ee8 <MAIN_DIFFDRIVE_Init+0x170>)
 8001d8c:	649a      	str	r2, [r3, #72]	; 0x48
	hdiffdrive.Init.timing_time_step= Ts;
 8001d8e:	4a55      	ldr	r2, [pc, #340]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	64d3      	str	r3, [r2, #76]	; 0x4c

	hdiffdrive.Init.encoder_htim[left ]= &htim2;
 8001d94:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001d96:	4a55      	ldr	r2, [pc, #340]	; (8001eec <MAIN_DIFFDRIVE_Init+0x174>)
 8001d98:	639a      	str	r2, [r3, #56]	; 0x38
	hdiffdrive.Init.encoder_htim[right]= &htim5;
 8001d9a:	4b52      	ldr	r3, [pc, #328]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001d9c:	4a54      	ldr	r2, [pc, #336]	; (8001ef0 <MAIN_DIFFDRIVE_Init+0x178>)
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c
	hdiffdrive.Init.encoder_channel[left ]= TIM_CHANNEL_1;
 8001da0:	4b50      	ldr	r3, [pc, #320]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
	hdiffdrive.Init.encoder_channel[right]= TIM_CHANNEL_1;
 8001da6:	4b4f      	ldr	r3, [pc, #316]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44

	hdiffdrive.Init.encoder_resolution[left ]= 1900; // Number of step each wheel revolution
 8001dac:	4b4d      	ldr	r3, [pc, #308]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001dae:	4a51      	ldr	r2, [pc, #324]	; (8001ef4 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001db0:	65da      	str	r2, [r3, #92]	; 0x5c
	hdiffdrive.Init.encoder_resolution[right]= 1900;
 8001db2:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001db4:	4a4f      	ldr	r2, [pc, #316]	; (8001ef4 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001db6:	661a      	str	r2, [r3, #96]	; 0x60

	hdiffdrive.Init.motor_htim[left ][forward ]= &htim1;
 8001db8:	4b4a      	ldr	r3, [pc, #296]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001dba:	4a4f      	ldr	r2, [pc, #316]	; (8001ef8 <MAIN_DIFFDRIVE_Init+0x180>)
 8001dbc:	601a      	str	r2, [r3, #0]
	hdiffdrive.Init.motor_htim[left ][backward]= &htim1;
 8001dbe:	4b49      	ldr	r3, [pc, #292]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001dc0:	4a4d      	ldr	r2, [pc, #308]	; (8001ef8 <MAIN_DIFFDRIVE_Init+0x180>)
 8001dc2:	605a      	str	r2, [r3, #4]
	hdiffdrive.Init.motor_htim[right][forward ]= &htim1;
 8001dc4:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001dc6:	4a4c      	ldr	r2, [pc, #304]	; (8001ef8 <MAIN_DIFFDRIVE_Init+0x180>)
 8001dc8:	609a      	str	r2, [r3, #8]
	hdiffdrive.Init.motor_htim[right][backward]= &htim1;
 8001dca:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001dcc:	4a4a      	ldr	r2, [pc, #296]	; (8001ef8 <MAIN_DIFFDRIVE_Init+0x180>)
 8001dce:	60da      	str	r2, [r3, #12]

	hdiffdrive.Init.motor_pwm_channel[left ][forward ]= TIM_CHANNEL_1;
 8001dd0:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	611a      	str	r2, [r3, #16]
	hdiffdrive.Init.motor_pwm_channel[left ][backward]= TIM_CHANNEL_2;
 8001dd6:	4b43      	ldr	r3, [pc, #268]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001dd8:	2204      	movs	r2, #4
 8001dda:	615a      	str	r2, [r3, #20]
	hdiffdrive.Init.motor_pwm_channel[right][forward ]= TIM_CHANNEL_3;
 8001ddc:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001dde:	2208      	movs	r2, #8
 8001de0:	619a      	str	r2, [r3, #24]
	hdiffdrive.Init.motor_pwm_channel[right][backward]= TIM_CHANNEL_4;
 8001de2:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001de4:	220c      	movs	r2, #12
 8001de6:	61da      	str	r2, [r3, #28]

	hdiffdrive.Init.motor_max_voltage[left ]= 	  MOTOR_MAX_VOLTAGE;
 8001de8:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001dea:	4a44      	ldr	r2, [pc, #272]	; (8001efc <MAIN_DIFFDRIVE_Init+0x184>)
 8001dec:	629a      	str	r2, [r3, #40]	; 0x28
	hdiffdrive.Init.motor_max_voltage[right]= 	  MOTOR_MAX_VOLTAGE;
 8001dee:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001df0:	4a42      	ldr	r2, [pc, #264]	; (8001efc <MAIN_DIFFDRIVE_Init+0x184>)
 8001df2:	62da      	str	r2, [r3, #44]	; 0x2c
	hdiffdrive.Init.motor_min_voltage[left ]= 	  MOTOR_MIN_VOLTAGE;
 8001df4:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
	hdiffdrive.Init.motor_min_voltage[right]= 	  MOTOR_MIN_VOLTAGE;
 8001dfc:	4b39      	ldr	r3, [pc, #228]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	635a      	str	r2, [r3, #52]	; 0x34
	hdiffdrive.Init.motor_supply_voltage[left]=   SUPPLY_VOLTAGE;
 8001e04:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001e06:	4a3d      	ldr	r2, [pc, #244]	; (8001efc <MAIN_DIFFDRIVE_Init+0x184>)
 8001e08:	621a      	str	r2, [r3, #32]
	hdiffdrive.Init.motor_supply_voltage[right]=  SUPPLY_VOLTAGE;
 8001e0a:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001e0c:	4a3b      	ldr	r2, [pc, #236]	; (8001efc <MAIN_DIFFDRIVE_Init+0x184>)
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24

	hdiffdrive.Init.control_fdfrwrd_arma_AR[left ]= AR_L;
 8001e10:	4a3b      	ldr	r2, [pc, #236]	; (8001f00 <MAIN_DIFFDRIVE_Init+0x188>)
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001e1c:	4a31      	ldr	r2, [pc, #196]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70
	hdiffdrive.Init.control_fdfrwrd_arma_AR[right]= AR_R;
 8001e24:	4a37      	ldr	r2, [pc, #220]	; (8001f04 <MAIN_DIFFDRIVE_Init+0x18c>)
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001e30:	4a2c      	ldr	r2, [pc, #176]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001e32:	f107 0308 	add.w	r3, r7, #8
 8001e36:	6753      	str	r3, [r2, #116]	; 0x74
	hdiffdrive.Init.control_fdfrwrd_arma_MA[left ]= MA_L;
 8001e38:	4b33      	ldr	r3, [pc, #204]	; (8001f08 <MAIN_DIFFDRIVE_Init+0x190>)
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	4a29      	ldr	r2, [pc, #164]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	6793      	str	r3, [r2, #120]	; 0x78
	hdiffdrive.Init.control_fdfrwrd_arma_MA[right]= MA_R;
 8001e42:	4b32      	ldr	r3, [pc, #200]	; (8001f0c <MAIN_DIFFDRIVE_Init+0x194>)
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	4a27      	ldr	r2, [pc, #156]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001e48:	463b      	mov	r3, r7
 8001e4a:	67d3      	str	r3, [r2, #124]	; 0x7c
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[left ]= N_AR_L;
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001e4e:	2203      	movs	r2, #3
 8001e50:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[right]= N_AR_R;
 8001e54:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001e56:	2203      	movs	r2, #3
 8001e58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[left ]= N_MA_L;
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[right]= N_MA_R;
 8001e64:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	hdiffdrive.Init.control_fdfrwrd_arma_tau[left ]= TAU_L;
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	hdiffdrive.Init.control_fdfrwrd_arma_tau[right]= TAU_R;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001e76:	2202      	movs	r2, #2
 8001e78:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	hdiffdrive.Init.control_pid_P[left ]= 40;  //33.3;
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001e7e:	4a24      	ldr	r2, [pc, #144]	; (8001f10 <MAIN_DIFFDRIVE_Init+0x198>)
 8001e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	hdiffdrive.Init.control_pid_P[right]= 40;  //33.3;
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001e86:	4a22      	ldr	r2, [pc, #136]	; (8001f10 <MAIN_DIFFDRIVE_Init+0x198>)
 8001e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	hdiffdrive.Init.control_pid_I[left ]= 8;   //7.6;
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001e8e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	hdiffdrive.Init.control_pid_I[right]= 8;   //7.6;
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001e98:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001e9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	hdiffdrive.Init.control_pid_D[left ]= 0;
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	hdiffdrive.Init.control_pid_D[right]= 0;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	hdiffdrive.Init.history_max_sample= max_sample;
 8001eb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	hdiffdrive.Init.mech_prmtr_l=               0.156/2;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001ebe:	4a15      	ldr	r2, [pc, #84]	; (8001f14 <MAIN_DIFFDRIVE_Init+0x19c>)
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
	hdiffdrive.Init.mech_prmtr_r=               0.0695/2;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001ec4:	4a14      	ldr	r2, [pc, #80]	; (8001f18 <MAIN_DIFFDRIVE_Init+0x1a0>)
 8001ec6:	651a      	str	r2, [r3, #80]	; 0x50
	hdiffdrive.Init.mech_prmtr_max_wheel_speed= 16;      // 16 rad/s, from DC motor specifics
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001eca:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8001ece:	659a      	str	r2, [r3, #88]	; 0x58


	DIFFDRIVE_Init(&hdiffdrive);
 8001ed0:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <MAIN_DIFFDRIVE_Init+0x16c>)
 8001ed2:	f000 fbb5 	bl	8002640 <DIFFDRIVE_Init>

}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	; 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	3c23d70a 	.word	0x3c23d70a
 8001ee4:	200005ac 	.word	0x200005ac
 8001ee8:	20000390 	.word	0x20000390
 8001eec:	200004f8 	.word	0x200004f8
 8001ef0:	200002dc 	.word	0x200002dc
 8001ef4:	44ed8000 	.word	0x44ed8000
 8001ef8:	20000444 	.word	0x20000444
 8001efc:	40f00000 	.word	0x40f00000
 8001f00:	08010648 	.word	0x08010648
 8001f04:	08010654 	.word	0x08010654
 8001f08:	3a202b0c 	.word	0x3a202b0c
 8001f0c:	3a25fcb7 	.word	0x3a25fcb7
 8001f10:	42200000 	.word	0x42200000
 8001f14:	3d9fbe77 	.word	0x3d9fbe77
 8001f18:	3d0e5604 	.word	0x3d0e5604

08001f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f20:	b672      	cpsid	i
}
 8001f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <Error_Handler+0x8>
	...

08001f28 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001f30:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <RetargetInit+0x28>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <RetargetInit+0x2c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6898      	ldr	r0, [r3, #8]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2202      	movs	r2, #2
 8001f40:	2100      	movs	r1, #0
 8001f42:	f006 ff25 	bl	8008d90 <setvbuf>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200007ec 	.word	0x200007ec
 8001f54:	2000000c 	.word	0x2000000c

08001f58 <_isatty>:

int _isatty(int fd) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	db04      	blt.n	8001f70 <_isatty+0x18>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	dc01      	bgt.n	8001f70 <_isatty+0x18>
    return 1;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e005      	b.n	8001f7c <_isatty+0x24>

  errno = EBADF;
 8001f70:	f005 fede 	bl	8007d30 <__errno>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2209      	movs	r2, #9
 8001f78:	601a      	str	r2, [r3, #0]
  return 0;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_write>:

int _write(int fd, char* ptr, int len) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d002      	beq.n	8001f9c <_write+0x18>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d111      	bne.n	8001fc0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <_write+0x54>)
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	f005 fabb 	bl	8007524 <HAL_UART_Transmit>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <_write+0x38>
      return len;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	e008      	b.n	8001fce <_write+0x4a>
    else
      return EIO;
 8001fbc:	2305      	movs	r3, #5
 8001fbe:	e006      	b.n	8001fce <_write+0x4a>
  }
  errno = EBADF;
 8001fc0:	f005 feb6 	bl	8007d30 <__errno>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2209      	movs	r2, #9
 8001fc8:	601a      	str	r2, [r3, #0]
  return -1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200007ec 	.word	0x200007ec

08001fdc <_close>:

int _close(int fd) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	db04      	blt.n	8001ff4 <_close+0x18>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	dc01      	bgt.n	8001ff4 <_close+0x18>
    return 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e006      	b.n	8002002 <_close+0x26>

  errno = EBADF;
 8001ff4:	f005 fe9c 	bl	8007d30 <__errno>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2209      	movs	r2, #9
 8001ffc:	601a      	str	r2, [r3, #0]
  return -1;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002016:	f005 fe8b 	bl	8007d30 <__errno>
 800201a:	4603      	mov	r3, r0
 800201c:	2209      	movs	r2, #9
 800201e:	601a      	str	r2, [r3, #0]
  return -1;
 8002020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <_read>:

int _read(int fd, char* ptr, int len) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d110      	bne.n	8002060 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <_read+0x4c>)
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002046:	2201      	movs	r2, #1
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	f005 fafd 	bl	8007648 <HAL_UART_Receive>
 800204e:	4603      	mov	r3, r0
 8002050:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002052:	7dfb      	ldrb	r3, [r7, #23]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <_read+0x30>
      return 1;
 8002058:	2301      	movs	r3, #1
 800205a:	e008      	b.n	800206e <_read+0x42>
    else
      return EIO;
 800205c:	2305      	movs	r3, #5
 800205e:	e006      	b.n	800206e <_read+0x42>
  }
  errno = EBADF;
 8002060:	f005 fe66 	bl	8007d30 <__errno>
 8002064:	4603      	mov	r3, r0
 8002066:	2209      	movs	r2, #9
 8002068:	601a      	str	r2, [r3, #0]
  return -1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200007ec 	.word	0x200007ec

0800207c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	db08      	blt.n	800209e <_fstat+0x22>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	dc05      	bgt.n	800209e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002098:	605a      	str	r2, [r3, #4]
    return 0;
 800209a:	2300      	movs	r3, #0
 800209c:	e005      	b.n	80020aa <_fstat+0x2e>
  }

  errno = EBADF;
 800209e:	f005 fe47 	bl	8007d30 <__errno>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2209      	movs	r2, #9
 80020a6:	601a      	str	r2, [r3, #0]
  return 0;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_MspInit+0x4c>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <HAL_MspInit+0x4c>)
 80020c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_MspInit+0x4c>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_MspInit+0x4c>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a08      	ldr	r2, [pc, #32]	; (8002100 <HAL_MspInit+0x4c>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_MspInit+0x4c>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800

08002104 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <HAL_TIM_PWM_MspInit+0x3c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d10d      	bne.n	8002132 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_TIM_PWM_MspInit+0x40>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a09      	ldr	r2, [pc, #36]	; (8002144 <HAL_TIM_PWM_MspInit+0x40>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_TIM_PWM_MspInit+0x40>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40010000 	.word	0x40010000
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	; 0x30
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002168:	d12d      	bne.n	80021c6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	4b30      	ldr	r3, [pc, #192]	; (8002230 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a2f      	ldr	r2, [pc, #188]	; (8002230 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <HAL_TIM_Encoder_MspInit+0xe8>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	4b29      	ldr	r3, [pc, #164]	; (8002230 <HAL_TIM_Encoder_MspInit+0xe8>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a28      	ldr	r2, [pc, #160]	; (8002230 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b26      	ldr	r3, [pc, #152]	; (8002230 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 80021a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021b4:	2301      	movs	r3, #1
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4619      	mov	r1, r3
 80021be:	481d      	ldr	r0, [pc, #116]	; (8002234 <HAL_TIM_Encoder_MspInit+0xec>)
 80021c0:	f002 ff40 	bl	8005044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80021c4:	e030      	b.n	8002228 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <HAL_TIM_Encoder_MspInit+0xf0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d12b      	bne.n	8002228 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021d0:	2300      	movs	r3, #0
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	4b16      	ldr	r3, [pc, #88]	; (8002230 <HAL_TIM_Encoder_MspInit+0xe8>)
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	4a15      	ldr	r2, [pc, #84]	; (8002230 <HAL_TIM_Encoder_MspInit+0xe8>)
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	6413      	str	r3, [r2, #64]	; 0x40
 80021e0:	4b13      	ldr	r3, [pc, #76]	; (8002230 <HAL_TIM_Encoder_MspInit+0xe8>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_TIM_Encoder_MspInit+0xe8>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <HAL_TIM_Encoder_MspInit+0xe8>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6313      	str	r3, [r2, #48]	; 0x30
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <HAL_TIM_Encoder_MspInit+0xe8>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_RIGHT_B_Pin|ENCODER_RIGHT_A_Pin;
 8002208:	2303      	movs	r3, #3
 800220a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002218:	2302      	movs	r3, #2
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	4619      	mov	r1, r3
 8002222:	4806      	ldr	r0, [pc, #24]	; (800223c <HAL_TIM_Encoder_MspInit+0xf4>)
 8002224:	f002 ff0e 	bl	8005044 <HAL_GPIO_Init>
}
 8002228:	bf00      	nop
 800222a:	3730      	adds	r7, #48	; 0x30
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40023800 	.word	0x40023800
 8002234:	40020400 	.word	0x40020400
 8002238:	40000c00 	.word	0x40000c00
 800223c:	40020000 	.word	0x40020000

08002240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <HAL_TIM_Base_MspInit+0x48>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d115      	bne.n	800227e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b0d      	ldr	r3, [pc, #52]	; (800228c <HAL_TIM_Base_MspInit+0x4c>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a0c      	ldr	r2, [pc, #48]	; (800228c <HAL_TIM_Base_MspInit+0x4c>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_TIM_Base_MspInit+0x4c>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	201d      	movs	r0, #29
 8002274:	f002 fbc5 	bl	8004a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002278:	201d      	movs	r0, #29
 800227a:	f002 fbde 	bl	8004a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40000400 	.word	0x40000400
 800228c:	40023800 	.word	0x40023800

08002290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <HAL_TIM_MspPostInit+0x68>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d11e      	bne.n	80022f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_TIM_MspPostInit+0x6c>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a10      	ldr	r2, [pc, #64]	; (80022fc <HAL_TIM_MspPostInit+0x6c>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <HAL_TIM_MspPostInit+0x6c>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_FORWARD_Pin|LEFT_MOTOR_BACKWARD_Pin|RIGHT_MOTOR_FORWARD_Pin|RIGHT_MOTOR_BACKWARD_Pin;
 80022ce:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80022d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022e0:	2301      	movs	r3, #1
 80022e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	4619      	mov	r1, r3
 80022ea:	4805      	ldr	r0, [pc, #20]	; (8002300 <HAL_TIM_MspPostInit+0x70>)
 80022ec:	f002 feaa 	bl	8005044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022f0:	bf00      	nop
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40010000 	.word	0x40010000
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020000 	.word	0x40020000

08002304 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a40      	ldr	r2, [pc, #256]	; (8002424 <HAL_UART_MspInit+0x120>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d179      	bne.n	800241a <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	4b3f      	ldr	r3, [pc, #252]	; (8002428 <HAL_UART_MspInit+0x124>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4a3e      	ldr	r2, [pc, #248]	; (8002428 <HAL_UART_MspInit+0x124>)
 8002330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002334:	6413      	str	r3, [r2, #64]	; 0x40
 8002336:	4b3c      	ldr	r3, [pc, #240]	; (8002428 <HAL_UART_MspInit+0x124>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b38      	ldr	r3, [pc, #224]	; (8002428 <HAL_UART_MspInit+0x124>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a37      	ldr	r2, [pc, #220]	; (8002428 <HAL_UART_MspInit+0x124>)
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b35      	ldr	r3, [pc, #212]	; (8002428 <HAL_UART_MspInit+0x124>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	4b31      	ldr	r3, [pc, #196]	; (8002428 <HAL_UART_MspInit+0x124>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a30      	ldr	r2, [pc, #192]	; (8002428 <HAL_UART_MspInit+0x124>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b2e      	ldr	r3, [pc, #184]	; (8002428 <HAL_UART_MspInit+0x124>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800237a:	2320      	movs	r3, #32
 800237c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002386:	2303      	movs	r3, #3
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800238a:	2307      	movs	r3, #7
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	4825      	ldr	r0, [pc, #148]	; (800242c <HAL_UART_MspInit+0x128>)
 8002396:	f002 fe55 	bl	8005044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800239a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800239e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a8:	2303      	movs	r3, #3
 80023aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023ac:	2307      	movs	r3, #7
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	4619      	mov	r1, r3
 80023b6:	481e      	ldr	r0, [pc, #120]	; (8002430 <HAL_UART_MspInit+0x12c>)
 80023b8:	f002 fe44 	bl	8005044 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80023bc:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_UART_MspInit+0x130>)
 80023be:	4a1e      	ldr	r2, [pc, #120]	; (8002438 <HAL_UART_MspInit+0x134>)
 80023c0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80023c2:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <HAL_UART_MspInit+0x130>)
 80023c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023c8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <HAL_UART_MspInit+0x130>)
 80023cc:	2240      	movs	r2, #64	; 0x40
 80023ce:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d0:	4b18      	ldr	r3, [pc, #96]	; (8002434 <HAL_UART_MspInit+0x130>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023d6:	4b17      	ldr	r3, [pc, #92]	; (8002434 <HAL_UART_MspInit+0x130>)
 80023d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023dc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_UART_MspInit+0x130>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_UART_MspInit+0x130>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_UART_MspInit+0x130>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80023f0:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_UART_MspInit+0x130>)
 80023f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023f6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023f8:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <HAL_UART_MspInit+0x130>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80023fe:	480d      	ldr	r0, [pc, #52]	; (8002434 <HAL_UART_MspInit+0x130>)
 8002400:	f002 fb36 	bl	8004a70 <HAL_DMA_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800240a:	f7ff fd87 	bl	8001f1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a08      	ldr	r2, [pc, #32]	; (8002434 <HAL_UART_MspInit+0x130>)
 8002412:	635a      	str	r2, [r3, #52]	; 0x34
 8002414:	4a07      	ldr	r2, [pc, #28]	; (8002434 <HAL_UART_MspInit+0x130>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800241a:	bf00      	nop
 800241c:	3728      	adds	r7, #40	; 0x28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40004800 	.word	0x40004800
 8002428:	40023800 	.word	0x40023800
 800242c:	40020800 	.word	0x40020800
 8002430:	40020400 	.word	0x40020400
 8002434:	2000027c 	.word	0x2000027c
 8002438:	40026058 	.word	0x40026058

0800243c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <NMI_Handler+0x4>

08002442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002446:	e7fe      	b.n	8002446 <HardFault_Handler+0x4>

08002448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800244c:	e7fe      	b.n	800244c <MemManage_Handler+0x4>

0800244e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <BusFault_Handler+0x4>

08002454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <UsageFault_Handler+0x4>

0800245a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002488:	f002 f99c 	bl	80047c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}

08002490 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <DMA1_Stream3_IRQHandler+0x10>)
 8002496:	f002 fb99 	bl	8004bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000027c 	.word	0x2000027c

080024a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <TIM3_IRQHandler+0x10>)
 80024aa:	f004 f877 	bl	800659c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000390 	.word	0x20000390

080024b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c0:	4a14      	ldr	r2, [pc, #80]	; (8002514 <_sbrk+0x5c>)
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <_sbrk+0x60>)
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <_sbrk+0x64>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <_sbrk+0x64>)
 80024d6:	4a12      	ldr	r2, [pc, #72]	; (8002520 <_sbrk+0x68>)
 80024d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <_sbrk+0x64>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d207      	bcs.n	80024f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e8:	f005 fc22 	bl	8007d30 <__errno>
 80024ec:	4603      	mov	r3, r0
 80024ee:	220c      	movs	r2, #12
 80024f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024f6:	e009      	b.n	800250c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <_sbrk+0x64>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024fe:	4b07      	ldr	r3, [pc, #28]	; (800251c <_sbrk+0x64>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <_sbrk+0x64>)
 8002508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800250a:	68fb      	ldr	r3, [r7, #12]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20020000 	.word	0x20020000
 8002518:	00000400 	.word	0x00000400
 800251c:	200001fc 	.word	0x200001fc
 8002520:	20000808 	.word	0x20000808

08002524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <SystemInit+0x20>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	4a05      	ldr	r2, [pc, #20]	; (8002544 <SystemInit+0x20>)
 8002530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <DATASTREAM_Init>:


// Functions definition ----------------------------------

// Setting up streaming
void DATASTREAM_Init(UART_HandleTypeDef *huart){
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

	// Setting StdIO Stream
	RetargetInit(huart);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff fce9 	bl	8001f28 <RetargetInit>


}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <DATASTREAM_SendValue>:

// Do send values into serial, using a Variadic function
void DATASTREAM_SendValue(DATASTREAM_mode mode, int vargn, ...){
 8002560:	b40e      	push	{r1, r2, r3}
 8002562:	b5b0      	push	{r4, r5, r7, lr}
 8002564:	b08f      	sub	sp, #60	; 0x3c
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	71fb      	strb	r3, [r7, #7]

	// Initializing variadic arguments, using "stdarg.h" macros
	va_list vargp;
	va_start( vargp, vargn );
 800256c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002570:	60fb      	str	r3, [r7, #12]

	switch(mode){
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <DATASTREAM_SendValue+0x1e>
 8002578:	2b01      	cmp	r3, #1
 800257a:	d02a      	beq.n	80025d2 <DATASTREAM_SendValue+0x72>
	}

	// DeInit variables arguments
	va_end( vargp );

}
 800257c:	e051      	b.n	8002622 <DATASTREAM_SendValue+0xc2>
			for(int i=0; i<vargn; i++)
 800257e:	2300      	movs	r3, #0
 8002580:	637b      	str	r3, [r7, #52]	; 0x34
 8002582:	e00e      	b.n	80025a2 <DATASTREAM_SendValue+0x42>
				printf("%f\t",va_arg(vargp, double));
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3307      	adds	r3, #7
 8002588:	f023 0307 	bic.w	r3, r3, #7
 800258c:	f103 0208 	add.w	r2, r3, #8
 8002590:	60fa      	str	r2, [r7, #12]
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	4826      	ldr	r0, [pc, #152]	; (8002630 <DATASTREAM_SendValue+0xd0>)
 8002598:	f006 fb46 	bl	8008c28 <iprintf>
			for(int i=0; i<vargn; i++)
 800259c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259e:	3301      	adds	r3, #1
 80025a0:	637b      	str	r3, [r7, #52]	; 0x34
 80025a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a6:	429a      	cmp	r2, r3
 80025a8:	dbec      	blt.n	8002584 <DATASTREAM_SendValue+0x24>
			va_arg(vargp, double[2][2]);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3307      	adds	r3, #7
 80025ae:	f023 0307 	bic.w	r3, r3, #7
 80025b2:	f103 0220 	add.w	r2, r3, #32
 80025b6:	60fa      	str	r2, [r7, #12]
 80025b8:	f107 0410 	add.w	r4, r7, #16
 80025bc:	461d      	mov	r5, r3
 80025be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80025c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			printf("\b\n");
 80025ca:	481a      	ldr	r0, [pc, #104]	; (8002634 <DATASTREAM_SendValue+0xd4>)
 80025cc:	f006 fbc8 	bl	8008d60 <puts>
			break;
 80025d0:	e027      	b.n	8002622 <DATASTREAM_SendValue+0xc2>
			printf("\033[50A");
 80025d2:	4819      	ldr	r0, [pc, #100]	; (8002638 <DATASTREAM_SendValue+0xd8>)
 80025d4:	f006 fb28 	bl	8008c28 <iprintf>
			printf("\033[2J");
 80025d8:	4818      	ldr	r0, [pc, #96]	; (800263c <DATASTREAM_SendValue+0xdc>)
 80025da:	f006 fb25 	bl	8008c28 <iprintf>
			printf("\r");
 80025de:	200d      	movs	r0, #13
 80025e0:	f006 fb3a 	bl	8008c58 <putchar>
			for(int i=0; i<vargn/2; i++)
 80025e4:	2300      	movs	r3, #0
 80025e6:	633b      	str	r3, [r7, #48]	; 0x30
 80025e8:	e012      	b.n	8002610 <DATASTREAM_SendValue+0xb0>
				printf(va_arg(vargp, char*), va_arg(vargp,double));
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1d1a      	adds	r2, r3, #4
 80025ee:	60fa      	str	r2, [r7, #12]
 80025f0:	6819      	ldr	r1, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3307      	adds	r3, #7
 80025f6:	f023 0307 	bic.w	r3, r3, #7
 80025fa:	f103 0208 	add.w	r2, r3, #8
 80025fe:	60fa      	str	r2, [r7, #12]
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	4608      	mov	r0, r1
 8002606:	f006 fb0f 	bl	8008c28 <iprintf>
			for(int i=0; i<vargn/2; i++)
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	3301      	adds	r3, #1
 800260e:	633b      	str	r3, [r7, #48]	; 0x30
 8002610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002612:	0fda      	lsrs	r2, r3, #31
 8002614:	4413      	add	r3, r2
 8002616:	105b      	asrs	r3, r3, #1
 8002618:	461a      	mov	r2, r3
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	4293      	cmp	r3, r2
 800261e:	dbe4      	blt.n	80025ea <DATASTREAM_SendValue+0x8a>
			break;
 8002620:	bf00      	nop
}
 8002622:	bf00      	nop
 8002624:	373c      	adds	r7, #60	; 0x3c
 8002626:	46bd      	mov	sp, r7
 8002628:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800262c:	b003      	add	sp, #12
 800262e:	4770      	bx	lr
 8002630:	08010660 	.word	0x08010660
 8002634:	08010664 	.word	0x08010664
 8002638:	08010668 	.word	0x08010668
 800263c:	08010670 	.word	0x08010670

08002640 <DIFFDRIVE_Init>:


/* Functions Implementation */

// Initialization
void DIFFDRIVE_Init(DIFFDRIVE_HandleTypeDef* init_hdiffdrv){
 8002640:	b5b0      	push	{r4, r5, r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

	// Initializing global handle
	hdiffdrv= init_hdiffdrv;
 8002648:	4aa0      	ldr	r2, [pc, #640]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6013      	str	r3, [r2, #0]

	// Assigning control struct
	DIFFDRIVE_CONTROL_TypeDef *hctrl= hdiffdrv->control;
 800264e:	4b9f      	ldr	r3, [pc, #636]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002656:	623b      	str	r3, [r7, #32]

	// Initializing handle structure values from Init field
	hdiffdrv->timing.htim=       		   hdiffdrv->Init.timing_htim;
 8002658:	4b9c      	ldr	r3, [pc, #624]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b9b      	ldr	r3, [pc, #620]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002662:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	hdiffdrv->timing.time_step=   		   hdiffdrv->Init.timing_time_step;
 8002666:	4b99      	ldr	r3, [pc, #612]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4b98      	ldr	r3, [pc, #608]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002670:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	hdiffdrv->mech_prmtr.r=     		   hdiffdrv->Init.mech_prmtr_r;
 8002674:	4b95      	ldr	r3, [pc, #596]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b94      	ldr	r3, [pc, #592]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800267e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	hdiffdrv->mech_prmtr.l=    			   hdiffdrv->Init.mech_prmtr_l;
 8002682:	4b92      	ldr	r3, [pc, #584]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4b91      	ldr	r3, [pc, #580]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800268c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	hdiffdrv->mech_prmtr.max_wheel_speed=  hdiffdrv->Init.mech_prmtr_max_wheel_speed;
 8002690:	4b8e      	ldr	r3, [pc, #568]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b8d      	ldr	r3, [pc, #564]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800269a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80026a4:	e201      	b.n	8002aaa <DIFFDRIVE_Init+0x46a>

		// Initializing feedforward Control handle structure values from Init field
		hctrl[side].fdfrwrd.Init.arma_n_ar=  hdiffdrv->Init.control_fdfrwrd_arma_n_ar[side];
 80026a6:	4b89      	ldr	r3, [pc, #548]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80026b2:	2068      	movs	r0, #104	; 0x68
 80026b4:	fb00 f202 	mul.w	r2, r0, r2
 80026b8:	6a38      	ldr	r0, [r7, #32]
 80026ba:	4402      	add	r2, r0
 80026bc:	3330      	adds	r3, #48	; 0x30
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	440b      	add	r3, r1
 80026c2:	889b      	ldrh	r3, [r3, #4]
 80026c4:	8013      	strh	r3, [r2, #0]
		hctrl[side].fdfrwrd.Init.arma_n_ma=  hdiffdrv->Init.control_fdfrwrd_arma_n_ma[side];
 80026c6:	4b81      	ldr	r3, [pc, #516]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80026ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026d2:	2068      	movs	r0, #104	; 0x68
 80026d4:	fb00 f303 	mul.w	r3, r0, r3
 80026d8:	6a38      	ldr	r0, [r7, #32]
 80026da:	4403      	add	r3, r0
 80026dc:	3134      	adds	r1, #52	; 0x34
 80026de:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80026e2:	805a      	strh	r2, [r3, #2]
		hctrl[side].fdfrwrd.Init.arma_AR=    hdiffdrv->Init.control_fdfrwrd_arma_AR[side];
 80026e4:	4b79      	ldr	r3, [pc, #484]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80026ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026f0:	2068      	movs	r0, #104	; 0x68
 80026f2:	fb00 f303 	mul.w	r3, r0, r3
 80026f6:	6a38      	ldr	r0, [r7, #32]
 80026f8:	4403      	add	r3, r0
 80026fa:	311c      	adds	r1, #28
 80026fc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002700:	609a      	str	r2, [r3, #8]
		hctrl[side].fdfrwrd.Init.arma_MA=    hdiffdrv->Init.control_fdfrwrd_arma_MA[side];
 8002702:	4b72      	ldr	r3, [pc, #456]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800270a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800270e:	2068      	movs	r0, #104	; 0x68
 8002710:	fb00 f303 	mul.w	r3, r0, r3
 8002714:	6a38      	ldr	r0, [r7, #32]
 8002716:	4403      	add	r3, r0
 8002718:	311e      	adds	r1, #30
 800271a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800271e:	60da      	str	r2, [r3, #12]
		hctrl[side].fdfrwrd.Init.arma_tau=   hdiffdrv->Init.control_fdfrwrd_arma_tau[side];
 8002720:	4b6a      	ldr	r3, [pc, #424]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002722:	6819      	ldr	r1, [r3, #0]
 8002724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002728:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800272c:	2068      	movs	r0, #104	; 0x68
 800272e:	fb00 f202 	mul.w	r2, r0, r2
 8002732:	6a38      	ldr	r0, [r7, #32]
 8002734:	4402      	add	r2, r0
 8002736:	3334      	adds	r3, #52	; 0x34
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	440b      	add	r3, r1
 800273c:	889b      	ldrh	r3, [r3, #4]
 800273e:	8093      	strh	r3, [r2, #4]

		// Init feedforward struct
		FEEDFORWARD_Init(&hctrl[side].fdfrwrd);
 8002740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002744:	2268      	movs	r2, #104	; 0x68
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	6a3a      	ldr	r2, [r7, #32]
 800274c:	4413      	add	r3, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f001 fca2 	bl	8004098 <FEEDFORWARD_Init>

		// Initializing pid Control handle structure values from Init field
		hctrl[side].pid.Init.P=  hdiffdrv->Init.control_pid_P[side];
 8002754:	4b5d      	ldr	r3, [pc, #372]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002756:	6819      	ldr	r1, [r3, #0]
 8002758:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800275c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002760:	2068      	movs	r0, #104	; 0x68
 8002762:	fb00 f303 	mul.w	r3, r0, r3
 8002766:	6a38      	ldr	r0, [r7, #32]
 8002768:	4403      	add	r3, r0
 800276a:	3220      	adds	r2, #32
 800276c:	0092      	lsls	r2, r2, #2
 800276e:	440a      	add	r2, r1
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	635a      	str	r2, [r3, #52]	; 0x34
		hctrl[side].pid.Init.I=  hdiffdrv->Init.control_pid_I[side];
 8002774:	4b55      	ldr	r3, [pc, #340]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002776:	6819      	ldr	r1, [r3, #0]
 8002778:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800277c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002780:	2068      	movs	r0, #104	; 0x68
 8002782:	fb00 f303 	mul.w	r3, r0, r3
 8002786:	6a38      	ldr	r0, [r7, #32]
 8002788:	4403      	add	r3, r0
 800278a:	3222      	adds	r2, #34	; 0x22
 800278c:	0092      	lsls	r2, r2, #2
 800278e:	440a      	add	r2, r1
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	639a      	str	r2, [r3, #56]	; 0x38
		hctrl[side].pid.Init.D=  hdiffdrv->Init.control_pid_D[side];
 8002794:	4b4d      	ldr	r3, [pc, #308]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002796:	6819      	ldr	r1, [r3, #0]
 8002798:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800279c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027a0:	2068      	movs	r0, #104	; 0x68
 80027a2:	fb00 f303 	mul.w	r3, r0, r3
 80027a6:	6a38      	ldr	r0, [r7, #32]
 80027a8:	4403      	add	r3, r0
 80027aa:	3224      	adds	r2, #36	; 0x24
 80027ac:	0092      	lsls	r2, r2, #2
 80027ae:	440a      	add	r2, r1
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	63da      	str	r2, [r3, #60]	; 0x3c
		hctrl[side].pid.Init.Ts= hdiffdrv->timing.time_step;
 80027b4:	4b45      	ldr	r3, [pc, #276]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027bc:	2168      	movs	r1, #104	; 0x68
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	6a39      	ldr	r1, [r7, #32]
 80027c4:	440b      	add	r3, r1
 80027c6:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40

		// Init feedforward struct
		PID_Init(&hctrl[side].pid);
 80027cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027d0:	2268      	movs	r2, #104	; 0x68
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	6a3a      	ldr	r2, [r7, #32]
 80027d8:	4413      	add	r3, r2
 80027da:	3334      	adds	r3, #52	; 0x34
 80027dc:	4618      	mov	r0, r3
 80027de:	f001 fe3c 	bl	800445a <PID_Init>

		// Sensors
		hdiffdrv->encoder[side].htim=       hdiffdrv->Init.encoder_htim[side];
 80027e2:	4b3a      	ldr	r3, [pc, #232]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80027ea:	4a38      	ldr	r2, [pc, #224]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 80027ec:	6810      	ldr	r0, [r2, #0]
 80027ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80027f2:	310e      	adds	r1, #14
 80027f4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4403      	add	r3, r0
 8002802:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002806:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].channel=    hdiffdrv->Init.encoder_channel[side];
 8002808:	4b30      	ldr	r3, [pc, #192]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002810:	4a2e      	ldr	r2, [pc, #184]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002812:	6810      	ldr	r0, [r2, #0]
 8002814:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002818:	3110      	adds	r1, #16
 800281a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4403      	add	r3, r0
 8002828:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800282c:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].resolution= hdiffdrv->Init.encoder_resolution[side];
 800282e:	4b27      	ldr	r3, [pc, #156]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002830:	6819      	ldr	r1, [r3, #0]
 8002832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002836:	4a25      	ldr	r2, [pc, #148]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002838:	6810      	ldr	r0, [r2, #0]
 800283a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800283e:	3316      	adds	r3, #22
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	3304      	adds	r3, #4
 8002846:	6819      	ldr	r1, [r3, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4403      	add	r3, r0
 8002852:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002856:	6019      	str	r1, [r3, #0]

		// Motors
		hdiffdrv->motor[side].supply_voltage= hdiffdrv->Init.motor_supply_voltage[side];
 8002858:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002860:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002862:	6819      	ldr	r1, [r3, #0]
 8002864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002868:	3208      	adds	r2, #8
 800286a:	0092      	lsls	r2, r2, #2
 800286c:	4402      	add	r2, r0
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	202c      	movs	r0, #44	; 0x2c
 8002872:	fb00 f303 	mul.w	r3, r0, r3
 8002876:	440b      	add	r3, r1
 8002878:	33b8      	adds	r3, #184	; 0xb8
 800287a:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].max_voltage=    hdiffdrv->Init.motor_max_voltage[side];
 800287c:	4b13      	ldr	r3, [pc, #76]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 8002886:	6819      	ldr	r1, [r3, #0]
 8002888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800288c:	320a      	adds	r2, #10
 800288e:	0092      	lsls	r2, r2, #2
 8002890:	4402      	add	r2, r0
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	202c      	movs	r0, #44	; 0x2c
 8002896:	fb00 f303 	mul.w	r3, r0, r3
 800289a:	440b      	add	r3, r1
 800289c:	33bc      	adds	r3, #188	; 0xbc
 800289e:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].min_voltage=    hdiffdrv->Init.motor_min_voltage[side];
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <DIFFDRIVE_Init+0x28c>)
 80028aa:	6819      	ldr	r1, [r3, #0]
 80028ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028b0:	320c      	adds	r2, #12
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	4402      	add	r2, r0
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	202c      	movs	r0, #44	; 0x2c
 80028ba:	fb00 f303 	mul.w	r3, r0, r3
 80028be:	440b      	add	r3, r1
 80028c0:	33c0      	adds	r3, #192	; 0xc0
 80028c2:	601a      	str	r2, [r3, #0]

		// Starting Motor Timer
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80028ca:	e05d      	b.n	8002988 <DIFFDRIVE_Init+0x348>
 80028cc:	200007f0 	.word	0x200007f0
			hdiffdrv->motor[side].htim[dir]= hdiffdrv->Init.motor_htim[side][dir];
 80028d0:	4bc2      	ldr	r3, [pc, #776]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 80028d8:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 80028dc:	4abf      	ldr	r2, [pc, #764]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 80028de:	6811      	ldr	r1, [r2, #0]
 80028e0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80028e4:	f997 4026 	ldrsb.w	r4, [r7, #38]	; 0x26
 80028e8:	006d      	lsls	r5, r5, #1
 80028ea:	4428      	add	r0, r5
 80028ec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	4423      	add	r3, r4
 80028fc:	332a      	adds	r3, #42	; 0x2a
 80028fe:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

			hdiffdrv->motor[side].pwm_channel[dir]= hdiffdrv->Init.motor_pwm_channel[side][dir];
 8002902:	4bb6      	ldr	r3, [pc, #728]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 800290a:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 800290e:	4ab3      	ldr	r2, [pc, #716]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002910:	6811      	ldr	r1, [r2, #0]
 8002912:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002916:	f997 4026 	ldrsb.w	r4, [r7, #38]	; 0x26
 800291a:	006d      	lsls	r5, r5, #1
 800291c:	4428      	add	r0, r5
 800291e:	3004      	adds	r0, #4
 8002920:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	4423      	add	r3, r4
 8002930:	332c      	adds	r3, #44	; 0x2c
 8002932:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
			HAL_TIM_PWM_Start(hdiffdrv->motor[side].htim[dir], hdiffdrv->motor[side].pwm_channel[dir]);
 8002936:	4ba9      	ldr	r3, [pc, #676]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002938:	6819      	ldr	r1, [r3, #0]
 800293a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800293e:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4413      	add	r3, r2
 800294c:	4403      	add	r3, r0
 800294e:	332a      	adds	r3, #42	; 0x2a
 8002950:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8002954:	4ba1      	ldr	r3, [pc, #644]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002956:	6819      	ldr	r1, [r3, #0]
 8002958:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800295c:	f997 0026 	ldrsb.w	r0, [r7, #38]	; 0x26
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	4403      	add	r3, r0
 800296c:	332c      	adds	r3, #44	; 0x2c
 800296e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002972:	4619      	mov	r1, r3
 8002974:	4620      	mov	r0, r4
 8002976:	f003 fc07 	bl	8006188 <HAL_TIM_PWM_Start>
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 800297a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800297e:	b2db      	uxtb	r3, r3
 8002980:	3301      	adds	r3, #1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002988:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800298c:	2b01      	cmp	r3, #1
 800298e:	dd9f      	ble.n	80028d0 <DIFFDRIVE_Init+0x290>
		}

	    // Computing duty beat ranges
		float supply_volt= hdiffdrv->motor[side].supply_voltage;
 8002990:	4b92      	ldr	r3, [pc, #584]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	33b8      	adds	r3, #184	; 0xb8
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	617b      	str	r3, [r7, #20]
		float min_volt=	   hdiffdrv->motor[side].min_voltage;
 80029a6:	4b8d      	ldr	r3, [pc, #564]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	33c0      	adds	r3, #192	; 0xc0
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	613b      	str	r3, [r7, #16]
		float max_volt=    hdiffdrv->motor[side].max_voltage;
 80029bc:	4b87      	ldr	r3, [pc, #540]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	33bc      	adds	r3, #188	; 0xbc
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60fb      	str	r3, [r7, #12]

		// Forward or backward are the same in this case, I use timers with the same parameters
		hdiffdrv->motor[side].duty_beat_min= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*min_volt/supply_volt;
 80029d2:	4b82      	ldr	r3, [pc, #520]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	33a8      	adds	r3, #168	; 0xa8
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80029f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80029fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80029fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a02:	4b76      	ldr	r3, [pc, #472]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a0e:	ee17 0a90 	vmov	r0, s15
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	33c4      	adds	r3, #196	; 0xc4
 8002a1c:	6018      	str	r0, [r3, #0]
		hdiffdrv->motor[side].duty_beat_max= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*max_volt/supply_volt;
 8002a1e:	4b6f      	ldr	r3, [pc, #444]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	33a8      	adds	r3, #168	; 0xa8
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a42:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002a46:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a4e:	4b63      	ldr	r3, [pc, #396]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a5a:	ee17 0a90 	vmov	r0, s15
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	33c8      	adds	r3, #200	; 0xc8
 8002a68:	6018      	str	r0, [r3, #0]

		// Starting Sensors
		HAL_TIM_Encoder_Start(hdiffdrv->encoder[side].htim, hdiffdrv->encoder[side].channel);
 8002a6a:	4b5c      	ldr	r3, [pc, #368]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002a6c:	6819      	ldr	r1, [r3, #0]
 8002a6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	4b56      	ldr	r3, [pc, #344]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002a84:	6819      	ldr	r1, [r3, #0]
 8002a86:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f003 fcf0 	bl	8006480 <HAL_TIM_Encoder_Start>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	f67f adf9 	bls.w	80026a6 <DIFFDRIVE_Init+0x66>

	}

	// Initialize pose
	hdiffdrv->state.pose.x_a   +=  0;
 8002ab4:	4b49      	ldr	r3, [pc, #292]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	edd3 7a7e 	vldr	s15, [r3, #504]	; 0x1f8
 8002abc:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002be0 <DIFFDRIVE_Init+0x5a0>
 8002ac4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ac8:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
	hdiffdrv->state.pose.y_a   +=  0;
 8002acc:	4b43      	ldr	r3, [pc, #268]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	edd3 7a7f 	vldr	s15, [r3, #508]	; 0x1fc
 8002ad4:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002be0 <DIFFDRIVE_Init+0x5a0>
 8002adc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ae0:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
	hdiffdrv->state.pose.theta +=  0;
 8002ae4:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8002aec:	4b3b      	ldr	r3, [pc, #236]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002be0 <DIFFDRIVE_Init+0x5a0>
 8002af4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002af8:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200

	// Allocating history' arrays
	hdiffdrv->history.max_sample= hdiffdrv->Init.history_max_sample;
 8002afc:	4b37      	ldr	r3, [pc, #220]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002b04:	4b35      	ldr	r3, [pc, #212]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230

	// Allocate all variables with zeros (calloc)
	hdiffdrv->history.state_target=  (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 8002b0c:	4b33      	ldr	r3, [pc, #204]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8002b14:	4a31      	ldr	r2, [pc, #196]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002b16:	6814      	ldr	r4, [r2, #0]
 8002b18:	2124      	movs	r1, #36	; 0x24
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f005 f900 	bl	8007d20 <calloc>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
	hdiffdrv->history.state_measure= (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8002b2e:	4a2b      	ldr	r2, [pc, #172]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002b30:	6814      	ldr	r4, [r2, #0]
 8002b32:	2124      	movs	r1, #36	; 0x24
 8002b34:	4618      	mov	r0, r3
 8002b36:	f005 f8f3 	bl	8007d20 <calloc>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c

	// Initializing time index
	hdiffdrv->history.index= 0;
 8002b40:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	hdiffdrv->history.sample_cnt= 0;
 8002b4a:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

	// Reset timing flag
	hdiffdrv->timing.flag= false;
 8002b54:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4


	/* Computing prescaler ad autoreload period to obtain an update event with frequency 1/timing.time_step Hertz */

	DIFFDRIVE_TIMING_TypeDef* timing= &(hdiffdrv->timing);
 8002b5e:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <DIFFDRIVE_Init+0x59c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	339c      	adds	r3, #156	; 0x9c
 8002b64:	61fb      	str	r3, [r7, #28]

	uint16_t prescaler=  __MYLIB_GET_TIMER_CLK(timing->htim)*10/1e6 - 1;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <DIFFDRIVE_Init+0x5a4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d017      	beq.n	8002ba2 <DIFFDRIVE_Init+0x562>
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1b      	ldr	r2, [pc, #108]	; (8002be8 <DIFFDRIVE_Init+0x5a8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d011      	beq.n	8002ba2 <DIFFDRIVE_Init+0x562>
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a19      	ldr	r2, [pc, #100]	; (8002bec <DIFFDRIVE_Init+0x5ac>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00b      	beq.n	8002ba2 <DIFFDRIVE_Init+0x562>
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <DIFFDRIVE_Init+0x5b0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d005      	beq.n	8002ba2 <DIFFDRIVE_Init+0x562>
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <DIFFDRIVE_Init+0x5b4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d12c      	bne.n	8002bfc <DIFFDRIVE_Init+0x5bc>
 8002ba2:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <DIFFDRIVE_Init+0x5b8>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <DIFFDRIVE_Init+0x584>
 8002bae:	f002 fd2f 	bl	8005610 <HAL_RCC_GetPCLK2Freq>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fcc1 	bl	8000544 <__aeabi_ui2d>
 8002bc2:	e036      	b.n	8002c32 <DIFFDRIVE_Init+0x5f2>
 8002bc4:	f002 fd24 	bl	8005610 <HAL_RCC_GetPCLK2Freq>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd fcb6 	bl	8000544 <__aeabi_ui2d>
 8002bd8:	e02b      	b.n	8002c32 <DIFFDRIVE_Init+0x5f2>
 8002bda:	bf00      	nop
 8002bdc:	200007f0 	.word	0x200007f0
 8002be0:	00000000 	.word	0x00000000
 8002be4:	40010000 	.word	0x40010000
 8002be8:	40010400 	.word	0x40010400
 8002bec:	40014000 	.word	0x40014000
 8002bf0:	40014400 	.word	0x40014400
 8002bf4:	40014800 	.word	0x40014800
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	4b56      	ldr	r3, [pc, #344]	; (8002d58 <DIFFDRIVE_Init+0x718>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10a      	bne.n	8002c1e <DIFFDRIVE_Init+0x5de>
 8002c08:	f002 fcee 	bl	80055e8 <HAL_RCC_GetPCLK1Freq>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fc94 	bl	8000544 <__aeabi_ui2d>
 8002c1c:	e009      	b.n	8002c32 <DIFFDRIVE_Init+0x5f2>
 8002c1e:	f002 fce3 	bl	80055e8 <HAL_RCC_GetPCLK1Freq>
 8002c22:	4602      	mov	r2, r0
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fc89 	bl	8000544 <__aeabi_ui2d>
 8002c32:	a347      	add	r3, pc, #284	; (adr r3, 8002d50 <DIFFDRIVE_Init+0x710>)
 8002c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c38:	f7fd fe28 	bl	800088c <__aeabi_ddiv>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	4b44      	ldr	r3, [pc, #272]	; (8002d5c <DIFFDRIVE_Init+0x71c>)
 8002c4a:	f7fd fb3d 	bl	80002c8 <__aeabi_dsub>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	f7fd ffc7 	bl	8000be8 <__aeabi_d2uiz>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	837b      	strh	r3, [r7, #26]
	// Guessing is a 16bit autoreload timer to avoid troubles
	uint16_t autoreload= __MYLIB_GET_TIMER_CLK(timing->htim)/( (prescaler+1)*1/timing->time_step ) - 1;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a3e      	ldr	r2, [pc, #248]	; (8002d60 <DIFFDRIVE_Init+0x720>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d017      	beq.n	8002c9a <DIFFDRIVE_Init+0x65a>
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a3c      	ldr	r2, [pc, #240]	; (8002d64 <DIFFDRIVE_Init+0x724>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d011      	beq.n	8002c9a <DIFFDRIVE_Init+0x65a>
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a3a      	ldr	r2, [pc, #232]	; (8002d68 <DIFFDRIVE_Init+0x728>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00b      	beq.n	8002c9a <DIFFDRIVE_Init+0x65a>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a38      	ldr	r2, [pc, #224]	; (8002d6c <DIFFDRIVE_Init+0x72c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d005      	beq.n	8002c9a <DIFFDRIVE_Init+0x65a>
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a36      	ldr	r2, [pc, #216]	; (8002d70 <DIFFDRIVE_Init+0x730>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d115      	bne.n	8002cc6 <DIFFDRIVE_Init+0x686>
 8002c9a:	4b2f      	ldr	r3, [pc, #188]	; (8002d58 <DIFFDRIVE_Init+0x718>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d106      	bne.n	8002cb4 <DIFFDRIVE_Init+0x674>
 8002ca6:	f002 fcb3 	bl	8005610 <HAL_RCC_GetPCLK2Freq>
 8002caa:	ee07 0a90 	vmov	s15, r0
 8002cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb2:	e01d      	b.n	8002cf0 <DIFFDRIVE_Init+0x6b0>
 8002cb4:	f002 fcac 	bl	8005610 <HAL_RCC_GetPCLK2Freq>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	ee07 3a90 	vmov	s15, r3
 8002cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc4:	e014      	b.n	8002cf0 <DIFFDRIVE_Init+0x6b0>
 8002cc6:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <DIFFDRIVE_Init+0x718>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <DIFFDRIVE_Init+0x6a0>
 8002cd2:	f002 fc89 	bl	80055e8 <HAL_RCC_GetPCLK1Freq>
 8002cd6:	ee07 0a90 	vmov	s15, r0
 8002cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cde:	e007      	b.n	8002cf0 <DIFFDRIVE_Init+0x6b0>
 8002ce0:	f002 fc82 	bl	80055e8 <HAL_RCC_GetPCLK1Freq>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	ee07 3a90 	vmov	s15, r3
 8002cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf0:	8b7b      	ldrh	r3, [r7, #26]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	ee07 3a10 	vmov	s14, r3
 8002cf8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d02:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002d06:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d16:	ee17 3a90 	vmov	r3, s15
 8002d1a:	833b      	strh	r3, [r7, #24]

	// Set counter with computed prescaler and autoreload period
	__HAL_TIM_SET_PRESCALER(timing->htim, prescaler);
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	8b7a      	ldrh	r2, [r7, #26]
 8002d24:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(timing->htim, autoreload);
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	8b3a      	ldrh	r2, [r7, #24]
 8002d2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	8b3a      	ldrh	r2, [r7, #24]
 8002d36:	60da      	str	r2, [r3, #12]

	// Assigning callback for timing purpose
	timing->htim->PeriodElapsedCallback= DIFFDRIVE_TIMING_Callback;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0d      	ldr	r2, [pc, #52]	; (8002d74 <DIFFDRIVE_Init+0x734>)
 8002d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	// Reset timing flag
	timing->flag= false;
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	2200      	movs	r2, #0
 8002d46:	721a      	strb	r2, [r3, #8]

}
 8002d48:	bf00      	nop
 8002d4a:	3728      	adds	r7, #40	; 0x28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d50:	00000000 	.word	0x00000000
 8002d54:	412e8480 	.word	0x412e8480
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	3ff00000 	.word	0x3ff00000
 8002d60:	40010000 	.word	0x40010000
 8002d64:	40010400 	.word	0x40010400
 8002d68:	40014000 	.word	0x40014000
 8002d6c:	40014400 	.word	0x40014400
 8002d70:	40014800 	.word	0x40014800
 8002d74:	08004075 	.word	0x08004075

08002d78 <DIFFDRIVE_MOTOR_Stop>:
	free(hdiffdrv->history.state_target);

}


void DIFFDRIVE_MOTOR_Stop(){
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0

	// Set motors to 0 volt
	DIFFDRIVE_MOTOR_SetPWMs((float[2]){0,0});
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	607b      	str	r3, [r7, #4]
 8002d8a:	463b      	mov	r3, r7
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 f805 	bl	8002d9c <DIFFDRIVE_MOTOR_SetPWMs>

}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <DIFFDRIVE_MOTOR_SetPWMs>:


void DIFFDRIVE_MOTOR_SetPWMs(float* input){
 8002d9c:	b480      	push	{r7}
 8002d9e:	b089      	sub	sp, #36	; 0x24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_MOTOR_TypeDef *tmp_mtr= hdiffdrv->motor;
 8002da4:	4bb4      	ldr	r3, [pc, #720]	; (8003078 <DIFFDRIVE_MOTOR_SetPWMs+0x2dc>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	33a8      	adds	r3, #168	; 0xa8
 8002daa:	61bb      	str	r3, [r7, #24]
	float tmp_input[2];
	float supply_volt;

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002dac:	2300      	movs	r3, #0
 8002dae:	77fb      	strb	r3, [r7, #31]
 8002db0:	e0c8      	b.n	8002f44 <DIFFDRIVE_MOTOR_SetPWMs+0x1a8>

		tmp_input[side]= input[side];
 8002db2:	7ffb      	ldrb	r3, [r7, #31]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	441a      	add	r2, r3
 8002dba:	7ffb      	ldrb	r3, [r7, #31]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	f107 0120 	add.w	r1, r7, #32
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3b14      	subs	r3, #20
 8002dc8:	601a      	str	r2, [r3, #0]

		supply_volt= tmp_mtr[side].supply_voltage;
 8002dca:	7ffb      	ldrb	r3, [r7, #31]
 8002dcc:	222c      	movs	r2, #44	; 0x2c
 8002dce:	fb02 f303 	mul.w	r3, r2, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	617b      	str	r3, [r7, #20]

		if(tmp_input[side] > 0){
 8002dda:	7ffb      	ldrb	r3, [r7, #31]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	f107 0220 	add.w	r2, r7, #32
 8002de2:	4413      	add	r3, r2
 8002de4:	3b14      	subs	r3, #20
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df2:	dd09      	ble.n	8002e08 <DIFFDRIVE_MOTOR_SetPWMs+0x6c>
			// Set direction
			tmp_mtr[side].direction= forward;
 8002df4:	7ffb      	ldrb	r3, [r7, #31]
 8002df6:	222c      	movs	r2, #44	; 0x2c
 8002df8:	fb02 f303 	mul.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4413      	add	r3, r2
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002e06:	e027      	b.n	8002e58 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
		}
		else
		if(tmp_input[side] < 0){
 8002e08:	7ffb      	ldrb	r3, [r7, #31]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	f107 0220 	add.w	r2, r7, #32
 8002e10:	4413      	add	r3, r2
 8002e12:	3b14      	subs	r3, #20
 8002e14:	edd3 7a00 	vldr	s15, [r3]
 8002e18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e20:	d51a      	bpl.n	8002e58 <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
			// Set direction
			tmp_mtr[side].direction= backward;
 8002e22:	7ffb      	ldrb	r3, [r7, #31]
 8002e24:	222c      	movs	r2, #44	; 0x2c
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			// Abs of input
			tmp_input[side]= -tmp_input[side];
 8002e34:	7ffb      	ldrb	r3, [r7, #31]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	f107 0220 	add.w	r2, r7, #32
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3b14      	subs	r3, #20
 8002e40:	edd3 7a00 	vldr	s15, [r3]
 8002e44:	7ffb      	ldrb	r3, [r7, #31]
 8002e46:	eef1 7a67 	vneg.f32	s15, s15
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	f107 0220 	add.w	r2, r7, #32
 8002e50:	4413      	add	r3, r2
 8002e52:	3b14      	subs	r3, #20
 8002e54:	edc3 7a00 	vstr	s15, [r3]
		}

		// Duty beat proportional to input voltage plus a minimum duty beat (so, if input is near zero
		// duty beat is near its minimum. DC motors need to reach a tension threshold before moving)
		// Also: forward or backward are the same in this case, I use timers with the same parameters
		tmp_mtr[side].duty_beat  = __HAL_TIM_GET_AUTORELOAD(tmp_mtr[side].htim[forward])*tmp_input[side]/supply_volt;
 8002e58:	7ffb      	ldrb	r3, [r7, #31]
 8002e5a:	222c      	movs	r2, #44	; 0x2c
 8002e5c:	fb02 f303 	mul.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4413      	add	r3, r2
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	f107 0220 	add.w	r2, r7, #32
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3b14      	subs	r3, #20
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e86:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e8e:	7ffb      	ldrb	r3, [r7, #31]
 8002e90:	222c      	movs	r2, #44	; 0x2c
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4413      	add	r3, r2
 8002e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e9e:	ee17 2a90 	vmov	r2, s15
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24
		tmp_mtr[side].duty_beat += tmp_mtr[side].duty_beat_min;
 8002ea4:	7ffb      	ldrb	r3, [r7, #31]
 8002ea6:	222c      	movs	r2, #44	; 0x2c
 8002ea8:	fb02 f303 	mul.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4413      	add	r3, r2
 8002eb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002eb2:	7ffb      	ldrb	r3, [r7, #31]
 8002eb4:	222c      	movs	r2, #44	; 0x2c
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	7ffb      	ldrb	r3, [r7, #31]
 8002ec2:	202c      	movs	r0, #44	; 0x2c
 8002ec4:	fb00 f303 	mul.w	r3, r0, r3
 8002ec8:	69b8      	ldr	r0, [r7, #24]
 8002eca:	4403      	add	r3, r0
 8002ecc:	440a      	add	r2, r1
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24

		// Upper Saturation of duty cycle
		if( tmp_mtr[side].duty_beat > tmp_mtr[side].duty_beat_max )
 8002ed0:	7ffb      	ldrb	r3, [r7, #31]
 8002ed2:	222c      	movs	r2, #44	; 0x2c
 8002ed4:	fb02 f303 	mul.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4413      	add	r3, r2
 8002edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ede:	7ffb      	ldrb	r3, [r7, #31]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	69b9      	ldr	r1, [r7, #24]
 8002ee8:	440b      	add	r3, r1
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d90e      	bls.n	8002f0e <DIFFDRIVE_MOTOR_SetPWMs+0x172>
			tmp_mtr[side].duty_beat= tmp_mtr[side].duty_beat_max;
 8002ef0:	7ffb      	ldrb	r3, [r7, #31]
 8002ef2:	222c      	movs	r2, #44	; 0x2c
 8002ef4:	fb02 f303 	mul.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	441a      	add	r2, r3
 8002efc:	7ffb      	ldrb	r3, [r7, #31]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	69b9      	ldr	r1, [r7, #24]
 8002f06:	440b      	add	r3, r1
 8002f08:	6a12      	ldr	r2, [r2, #32]
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f0c:	e017      	b.n	8002f3e <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
		else
		// Lower Saturation of duty cycle. If reach lower bound, set to zero to be sure to stop motors
		if( tmp_mtr[side].duty_beat == tmp_mtr[side].duty_beat_min )
 8002f0e:	7ffb      	ldrb	r3, [r7, #31]
 8002f10:	222c      	movs	r2, #44	; 0x2c
 8002f12:	fb02 f303 	mul.w	r3, r2, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4413      	add	r3, r2
 8002f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f1c:	7ffb      	ldrb	r3, [r7, #31]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	69b9      	ldr	r1, [r7, #24]
 8002f26:	440b      	add	r3, r1
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d107      	bne.n	8002f3e <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
			tmp_mtr[side].duty_beat= 0;
 8002f2e:	7ffb      	ldrb	r3, [r7, #31]
 8002f30:	222c      	movs	r2, #44	; 0x2c
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4413      	add	r3, r2
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002f3e:	7ffb      	ldrb	r3, [r7, #31]
 8002f40:	3301      	adds	r3, #1
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	7ffb      	ldrb	r3, [r7, #31]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	f67f af33 	bls.w	8002db2 <DIFFDRIVE_MOTOR_SetPWMs+0x16>
	}

	// Set PWM signal
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	77bb      	strb	r3, [r7, #30]
 8002f50:	e14f      	b.n	80031f2 <DIFFDRIVE_MOTOR_SetPWMs+0x456>

		// Set opposite direction (!direction) pin to 0
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[!(tmp_mtr[side].direction)],
 8002f52:	7fbb      	ldrb	r3, [r7, #30]
 8002f54:	222c      	movs	r2, #44	; 0x2c
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	7fba      	ldrb	r2, [r7, #30]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f202 	mul.w	r2, r1, r2
 8002f66:	69b9      	ldr	r1, [r7, #24]
 8002f68:	440a      	add	r2, r1
 8002f6a:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002f6e:	2a00      	cmp	r2, #0
 8002f70:	bf0c      	ite	eq
 8002f72:	2201      	moveq	r2, #1
 8002f74:	2200      	movne	r2, #0
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	3202      	adds	r2, #2
 8002f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d118      	bne.n	8002fb4 <DIFFDRIVE_MOTOR_SetPWMs+0x218>
 8002f82:	7fbb      	ldrb	r3, [r7, #30]
 8002f84:	222c      	movs	r2, #44	; 0x2c
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	7fba      	ldrb	r2, [r7, #30]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f202 	mul.w	r2, r1, r2
 8002f96:	69b9      	ldr	r1, [r7, #24]
 8002f98:	440a      	add	r2, r1
 8002f9a:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002f9e:	2a00      	cmp	r2, #0
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2201      	moveq	r2, #1
 8002fa4:	2200      	movne	r2, #0
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb2:	e07b      	b.n	80030ac <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8002fb4:	7fbb      	ldrb	r3, [r7, #30]
 8002fb6:	222c      	movs	r2, #44	; 0x2c
 8002fb8:	fb02 f303 	mul.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	7fba      	ldrb	r2, [r7, #30]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f202 	mul.w	r2, r1, r2
 8002fc8:	69b9      	ldr	r1, [r7, #24]
 8002fca:	440a      	add	r2, r1
 8002fcc:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8002fd0:	2a00      	cmp	r2, #0
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2201      	moveq	r2, #1
 8002fd6:	2200      	movne	r2, #0
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	3202      	adds	r2, #2
 8002fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d118      	bne.n	8003016 <DIFFDRIVE_MOTOR_SetPWMs+0x27a>
 8002fe4:	7fbb      	ldrb	r3, [r7, #30]
 8002fe6:	222c      	movs	r2, #44	; 0x2c
 8002fe8:	fb02 f303 	mul.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4413      	add	r3, r2
 8002ff0:	7fba      	ldrb	r2, [r7, #30]
 8002ff2:	212c      	movs	r1, #44	; 0x2c
 8002ff4:	fb01 f202 	mul.w	r2, r1, r2
 8002ff8:	69b9      	ldr	r1, [r7, #24]
 8002ffa:	440a      	add	r2, r1
 8002ffc:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003000:	2a00      	cmp	r2, #0
 8003002:	bf0c      	ite	eq
 8003004:	2201      	moveq	r2, #1
 8003006:	2200      	movne	r2, #0
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2300      	movs	r3, #0
 8003012:	6393      	str	r3, [r2, #56]	; 0x38
 8003014:	e04a      	b.n	80030ac <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003016:	7fbb      	ldrb	r3, [r7, #30]
 8003018:	222c      	movs	r2, #44	; 0x2c
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4413      	add	r3, r2
 8003022:	7fba      	ldrb	r2, [r7, #30]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f202 	mul.w	r2, r1, r2
 800302a:	69b9      	ldr	r1, [r7, #24]
 800302c:	440a      	add	r2, r1
 800302e:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003032:	2a00      	cmp	r2, #0
 8003034:	bf0c      	ite	eq
 8003036:	2201      	moveq	r2, #1
 8003038:	2200      	movne	r2, #0
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	3202      	adds	r2, #2
 800303e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003042:	2b08      	cmp	r3, #8
 8003044:	d11a      	bne.n	800307c <DIFFDRIVE_MOTOR_SetPWMs+0x2e0>
 8003046:	7fbb      	ldrb	r3, [r7, #30]
 8003048:	222c      	movs	r2, #44	; 0x2c
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4413      	add	r3, r2
 8003052:	7fba      	ldrb	r2, [r7, #30]
 8003054:	212c      	movs	r1, #44	; 0x2c
 8003056:	fb01 f202 	mul.w	r2, r1, r2
 800305a:	69b9      	ldr	r1, [r7, #24]
 800305c:	440a      	add	r2, r1
 800305e:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003062:	2a00      	cmp	r2, #0
 8003064:	bf0c      	ite	eq
 8003066:	2201      	moveq	r2, #1
 8003068:	2200      	movne	r2, #0
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	2300      	movs	r3, #0
 8003074:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003076:	e019      	b.n	80030ac <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 8003078:	200007f0 	.word	0x200007f0
 800307c:	7fbb      	ldrb	r3, [r7, #30]
 800307e:	222c      	movs	r2, #44	; 0x2c
 8003080:	fb02 f303 	mul.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4413      	add	r3, r2
 8003088:	7fba      	ldrb	r2, [r7, #30]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f202 	mul.w	r2, r1, r2
 8003090:	69b9      	ldr	r1, [r7, #24]
 8003092:	440a      	add	r2, r1
 8003094:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003098:	2a00      	cmp	r2, #0
 800309a:	bf0c      	ite	eq
 800309c:	2201      	moveq	r2, #1
 800309e:	2200      	movne	r2, #0
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	2300      	movs	r3, #0
 80030aa:	6413      	str	r3, [r2, #64]	; 0x40
							  tmp_mtr[side].pwm_channel[!(tmp_mtr[side].direction)],
							  0  );

		// Set direction pin with the current duty cycle on PWM signal
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[(tmp_mtr[side].direction)],
 80030ac:	7fbb      	ldrb	r3, [r7, #30]
 80030ae:	222c      	movs	r2, #44	; 0x2c
 80030b0:	fb02 f303 	mul.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4413      	add	r3, r2
 80030b8:	7fba      	ldrb	r2, [r7, #30]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f202 	mul.w	r2, r1, r2
 80030c0:	69b9      	ldr	r1, [r7, #24]
 80030c2:	440a      	add	r2, r1
 80030c4:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 80030c8:	3202      	adds	r2, #2
 80030ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d119      	bne.n	8003106 <DIFFDRIVE_MOTOR_SetPWMs+0x36a>
 80030d2:	7fbb      	ldrb	r3, [r7, #30]
 80030d4:	222c      	movs	r2, #44	; 0x2c
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	441a      	add	r2, r3
 80030de:	7fbb      	ldrb	r3, [r7, #30]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	69b9      	ldr	r1, [r7, #24]
 80030e8:	440b      	add	r3, r1
 80030ea:	7fb9      	ldrb	r1, [r7, #30]
 80030ec:	202c      	movs	r0, #44	; 0x2c
 80030ee:	fb00 f101 	mul.w	r1, r0, r1
 80030f2:	69b8      	ldr	r0, [r7, #24]
 80030f4:	4401      	add	r1, r0
 80030f6:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 80030fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003102:	635a      	str	r2, [r3, #52]	; 0x34
 8003104:	e072      	b.n	80031ec <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8003106:	7fbb      	ldrb	r3, [r7, #30]
 8003108:	222c      	movs	r2, #44	; 0x2c
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4413      	add	r3, r2
 8003112:	7fba      	ldrb	r2, [r7, #30]
 8003114:	212c      	movs	r1, #44	; 0x2c
 8003116:	fb01 f202 	mul.w	r2, r1, r2
 800311a:	69b9      	ldr	r1, [r7, #24]
 800311c:	440a      	add	r2, r1
 800311e:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 8003122:	3202      	adds	r2, #2
 8003124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d119      	bne.n	8003160 <DIFFDRIVE_MOTOR_SetPWMs+0x3c4>
 800312c:	7fbb      	ldrb	r3, [r7, #30]
 800312e:	222c      	movs	r2, #44	; 0x2c
 8003130:	fb02 f303 	mul.w	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4413      	add	r3, r2
 8003138:	7fba      	ldrb	r2, [r7, #30]
 800313a:	212c      	movs	r1, #44	; 0x2c
 800313c:	fb01 f202 	mul.w	r2, r1, r2
 8003140:	69b9      	ldr	r1, [r7, #24]
 8003142:	440a      	add	r2, r1
 8003144:	7fb9      	ldrb	r1, [r7, #30]
 8003146:	202c      	movs	r0, #44	; 0x2c
 8003148:	fb00 f101 	mul.w	r1, r0, r1
 800314c:	69b8      	ldr	r0, [r7, #24]
 800314e:	4401      	add	r1, r0
 8003150:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 8003154:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	6393      	str	r3, [r2, #56]	; 0x38
 800315e:	e045      	b.n	80031ec <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8003160:	7fbb      	ldrb	r3, [r7, #30]
 8003162:	222c      	movs	r2, #44	; 0x2c
 8003164:	fb02 f303 	mul.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4413      	add	r3, r2
 800316c:	7fba      	ldrb	r2, [r7, #30]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f202 	mul.w	r2, r1, r2
 8003174:	69b9      	ldr	r1, [r7, #24]
 8003176:	440a      	add	r2, r1
 8003178:	f992 2028 	ldrsb.w	r2, [r2, #40]	; 0x28
 800317c:	3202      	adds	r2, #2
 800317e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003182:	2b08      	cmp	r3, #8
 8003184:	d119      	bne.n	80031ba <DIFFDRIVE_MOTOR_SetPWMs+0x41e>
 8003186:	7fbb      	ldrb	r3, [r7, #30]
 8003188:	222c      	movs	r2, #44	; 0x2c
 800318a:	fb02 f303 	mul.w	r3, r2, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4413      	add	r3, r2
 8003192:	7fba      	ldrb	r2, [r7, #30]
 8003194:	212c      	movs	r1, #44	; 0x2c
 8003196:	fb01 f202 	mul.w	r2, r1, r2
 800319a:	69b9      	ldr	r1, [r7, #24]
 800319c:	440a      	add	r2, r1
 800319e:	7fb9      	ldrb	r1, [r7, #30]
 80031a0:	202c      	movs	r0, #44	; 0x2c
 80031a2:	fb00 f101 	mul.w	r1, r0, r1
 80031a6:	69b8      	ldr	r0, [r7, #24]
 80031a8:	4401      	add	r1, r0
 80031aa:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 80031ae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80031b8:	e018      	b.n	80031ec <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 80031ba:	7fbb      	ldrb	r3, [r7, #30]
 80031bc:	222c      	movs	r2, #44	; 0x2c
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4413      	add	r3, r2
 80031c6:	7fba      	ldrb	r2, [r7, #30]
 80031c8:	212c      	movs	r1, #44	; 0x2c
 80031ca:	fb01 f202 	mul.w	r2, r1, r2
 80031ce:	69b9      	ldr	r1, [r7, #24]
 80031d0:	440a      	add	r2, r1
 80031d2:	7fb9      	ldrb	r1, [r7, #30]
 80031d4:	202c      	movs	r0, #44	; 0x2c
 80031d6:	fb00 f101 	mul.w	r1, r0, r1
 80031da:	69b8      	ldr	r0, [r7, #24]
 80031dc:	4401      	add	r1, r0
 80031de:	f991 1028 	ldrsb.w	r1, [r1, #40]	; 0x28
 80031e2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	6413      	str	r3, [r2, #64]	; 0x40
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80031ec:	7fbb      	ldrb	r3, [r7, #30]
 80031ee:	3301      	adds	r3, #1
 80031f0:	77bb      	strb	r3, [r7, #30]
 80031f2:	7fbb      	ldrb	r3, [r7, #30]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	f67f aeac 	bls.w	8002f52 <DIFFDRIVE_MOTOR_SetPWMs+0x1b6>
							  tmp_mtr[side].pwm_channel[(tmp_mtr[side].direction)],
							  tmp_mtr[side].duty_beat  );

		}

}
 80031fa:	bf00      	nop
 80031fc:	bf00      	nop
 80031fe:	3724      	adds	r7, #36	; 0x24
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <DIFFDRIVE_ENCODER_CaptureMeasure>:


DIFFDRIVE_StatusTypeDef DIFFDRIVE_ENCODER_CaptureMeasure(void){
 8003208:	b5b0      	push	{r4, r5, r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens=  hdiffdrv->encoder;
 800320e:	4b54      	ldr	r3, [pc, #336]	; (8003360 <DIFFDRIVE_ENCODER_CaptureMeasure+0x158>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003216:	60bb      	str	r3, [r7, #8]

	// int32 max value, minus a secure threshold of 100
	uint32_t counter_max= (pow(2,31)-1)-100;
 8003218:	4b52      	ldr	r3, [pc, #328]	; (8003364 <DIFFDRIVE_ENCODER_CaptureMeasure+0x15c>)
 800321a:	607b      	str	r3, [r7, #4]

	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 800321c:	2300      	movs	r3, #0
 800321e:	73fb      	strb	r3, [r7, #15]
 8003220:	e090      	b.n	8003344 <DIFFDRIVE_ENCODER_CaptureMeasure+0x13c>

		// Saving previous value
		tmpsens[side].previous_value= tmpsens[side].current_value;
 8003222:	7bfa      	ldrb	r2, [r7, #15]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	461a      	mov	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	1899      	adds	r1, r3, r2
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	461a      	mov	r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4413      	add	r3, r2
 8003242:	68ca      	ldr	r2, [r1, #12]
 8003244:	611a      	str	r2, [r3, #16]

		// Updating value. The counter connected to sensor are 32 bit unsigned integer so I cast in
		// 32 bit integer (signed) to have positive and negative values. Then, using encoder resolution,
		tmpsens[side].current_value  = (int32_t)__HAL_TIM_GET_COUNTER(tmpsens[side].htim);
 8003246:	7bfa      	ldrb	r2, [r7, #15]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	461a      	mov	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	4413      	add	r3, r2
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	ee07 3a90 	vmov	s15, r3
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	461a      	mov	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4413      	add	r3, r2
 8003270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003274:	edc3 7a03 	vstr	s15, [r3, #12]

		// If counter reach a threshold value return an exception
		if( tmpsens[side].current_value < -(int32_t)counter_max || tmpsens[side].current_value > (int32_t)counter_max  )
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	461a      	mov	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4413      	add	r3, r2
 8003288:	ed93 7a03 	vldr	s14, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	425b      	negs	r3, r3
 8003290:	ee07 3a90 	vmov	s15, r3
 8003294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003298:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a0:	d413      	bmi.n	80032ca <DIFFDRIVE_ENCODER_CaptureMeasure+0xc2>
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	461a      	mov	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4413      	add	r3, r2
 80032b2:	ed93 7a03 	vldr	s14, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c8:	dd02      	ble.n	80032d0 <DIFFDRIVE_ENCODER_CaptureMeasure+0xc8>
			return DIFFDRIVE_ERROR;
 80032ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032ce:	e03e      	b.n	800334e <DIFFDRIVE_ENCODER_CaptureMeasure+0x146>

		// Else convert integer in radiant
		tmpsens[side].current_value *= (2*M_PI)/tmpsens[side].resolution;
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	461a      	mov	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4413      	add	r3, r2
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd f950 	bl	8000588 <__aeabi_f2d>
 80032e8:	4604      	mov	r4, r0
 80032ea:	460d      	mov	r5, r1
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	461a      	mov	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4413      	add	r3, r2
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd f942 	bl	8000588 <__aeabi_f2d>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	a113      	add	r1, pc, #76	; (adr r1, 8003358 <DIFFDRIVE_ENCODER_CaptureMeasure+0x150>)
 800330a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800330e:	f7fd fabd 	bl	800088c <__aeabi_ddiv>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4620      	mov	r0, r4
 8003318:	4629      	mov	r1, r5
 800331a:	f7fd f98d 	bl	8000638 <__aeabi_dmul>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4610      	mov	r0, r2
 8003324:	4619      	mov	r1, r3
 8003326:	7bfa      	ldrb	r2, [r7, #15]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	461a      	mov	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	189c      	adds	r4, r3, r2
 8003336:	f7fd fc77 	bl	8000c28 <__aeabi_d2f>
 800333a:	4603      	mov	r3, r0
 800333c:	60e3      	str	r3, [r4, #12]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	3301      	adds	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b01      	cmp	r3, #1
 8003348:	f67f af6b 	bls.w	8003222 <DIFFDRIVE_ENCODER_CaptureMeasure+0x1a>

	}

	return DIFFDRIVE_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bdb0      	pop	{r4, r5, r7, pc}
 8003356:	bf00      	nop
 8003358:	54442d18 	.word	0x54442d18
 800335c:	401921fb 	.word	0x401921fb
 8003360:	200007f0 	.word	0x200007f0
 8003364:	7fffff9b 	.word	0x7fffff9b

08003368 <DIFFDRIVE_ENCODER_Reset>:


void DIFFDRIVE_ENCODER_Reset(void){
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens= hdiffdrv->encoder;
 800336e:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <DIFFDRIVE_ENCODER_Reset+0x60>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003376:	603b      	str	r3, [r7, #0]

	// Reset Wheel encoders
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003378:	2300      	movs	r3, #0
 800337a:	71fb      	strb	r3, [r7, #7]
 800337c:	e019      	b.n	80033b2 <DIFFDRIVE_ENCODER_Reset+0x4a>
		__HAL_TIM_SET_COUNTER(tmpsens[side].htim,0);
 800337e:	79fa      	ldrb	r2, [r7, #7]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	461a      	mov	r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	4413      	add	r3, r2
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	625a      	str	r2, [r3, #36]	; 0x24
		tmpsens[side].current_value= 0;
 8003396:	79fa      	ldrb	r2, [r7, #7]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	461a      	mov	r2, r3
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	4413      	add	r3, r2
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	60da      	str	r2, [r3, #12]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	3301      	adds	r3, #1
 80033b0:	71fb      	strb	r3, [r7, #7]
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d9e2      	bls.n	800337e <DIFFDRIVE_ENCODER_Reset+0x16>
	}

}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	200007f0 	.word	0x200007f0

080033cc <DIFFDRIVE_HISTORY_Start>:


void DIFFDRIVE_HISTORY_Start(void){
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0

	// Enable history saving and reset time_index counter
	hdiffdrv->history.sample_cnt= 0;
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <DIFFDRIVE_HISTORY_Start+0x24>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	hdiffdrv->history.Enabled= true;
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <DIFFDRIVE_HISTORY_Start+0x24>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	200007f0 	.word	0x200007f0

080033f4 <DIFFDRIVE_HISTORY_Update>:

}


/* ---- Saving only a fixed number of samples in a circular buffer, if history is enabled  ------------------- */
void DIFFDRIVE_HISTORY_Update(float delta_a_target, float delta_th_target){
 80033f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033f8:	b098      	sub	sp, #96	; 0x60
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	ed87 0a01 	vstr	s0, [r7, #4]
 8003400:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_HISTORY_TypeDef* tmphist  = &(hdiffdrv->history);
 8003404:	4baf      	ldr	r3, [pc, #700]	; (80036c4 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800340c:	65bb      	str	r3, [r7, #88]	; 0x58
	DIFFDRIVE_CONTROL_TypeDef* tmpctrl  =   hdiffdrv->control;
 800340e:	4bad      	ldr	r3, [pc, #692]	; (80036c4 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003416:	657b      	str	r3, [r7, #84]	; 0x54
	DIFFDRIVE_STATE_TypeDef    tmpstate =   hdiffdrv->state;
 8003418:	4baa      	ldr	r3, [pc, #680]	; (80036c4 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f107 041c 	add.w	r4, r7, #28
 8003420:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 8003424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800342a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800342c:	682b      	ldr	r3, [r5, #0]
 800342e:	6023      	str	r3, [r4, #0]
	float min_volt;
	float max_volt;

	float theta, wheel_target[2], input[2];

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003430:	2300      	movs	r3, #0
 8003432:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003436:	e025      	b.n	8003484 <DIFFDRIVE_HISTORY_Update+0x90>
		wheel_target[side] = __FEEDFORWARD_GET_CURRENT_TARGET(&(tmpctrl[side].fdfrwrd));
 8003438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800343c:	2268      	movs	r2, #104	; 0x68
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003444:	441a      	add	r2, r3
 8003446:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800344a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003452:	440b      	add	r3, r1
 8003454:	3b4c      	subs	r3, #76	; 0x4c
 8003456:	601a      	str	r2, [r3, #0]
		input[side] = tmpstate.input[side];
 8003458:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800345c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003460:	3206      	adds	r2, #6
 8003462:	0092      	lsls	r2, r2, #2
 8003464:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003468:	440a      	add	r2, r1
 800346a:	3a40      	subs	r2, #64	; 0x40
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003474:	440b      	add	r3, r1
 8003476:	3b54      	subs	r3, #84	; 0x54
 8003478:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 800347a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800347e:	3301      	adds	r3, #1
 8003480:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003484:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003488:	2b01      	cmp	r3, #1
 800348a:	d9d5      	bls.n	8003438 <DIFFDRIVE_HISTORY_Update+0x44>
	}

	// Current index (using operator % to enroll k between 0 and max_sample; last_time_index is unbounded)
	uint32_t k= tmphist->sample_cnt%tmphist->max_sample;
 800348c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003492:	6892      	ldr	r2, [r2, #8]
 8003494:	fbb3 f1f2 	udiv	r1, r3, r2
 8003498:	fb02 f201 	mul.w	r2, r2, r1
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	653b      	str	r3, [r7, #80]	; 0x50

	tmphist->index= k;
 80034a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80034a4:	60da      	str	r2, [r3, #12]

	// Update history if is enabled
	if( tmphist->Enabled ){
 80034a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 8252 	beq.w	8003954 <DIFFDRIVE_HISTORY_Update+0x560>
		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80034b0:	2300      	movs	r3, #0
 80034b2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80034b6:	e134      	b.n	8003722 <DIFFDRIVE_HISTORY_Update+0x32e>

			min_volt= hdiffdrv->motor[side].min_voltage;
 80034b8:	4b82      	ldr	r3, [pc, #520]	; (80036c4 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	33c0      	adds	r3, #192	; 0xc0
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	647b      	str	r3, [r7, #68]	; 0x44
			max_volt= hdiffdrv->motor[side].max_voltage;
 80034ce:	4b7d      	ldr	r3, [pc, #500]	; (80036c4 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80034d6:	212c      	movs	r1, #44	; 0x2c
 80034d8:	fb01 f303 	mul.w	r3, r1, r3
 80034dc:	4413      	add	r3, r2
 80034de:	33bc      	adds	r3, #188	; 0xbc
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	643b      	str	r3, [r7, #64]	; 0x40

			// Input Saturation limits, for "measured" tension ------------------------
			if( input[side] > (max_volt-min_volt) )
 80034e4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034ee:	4413      	add	r3, r2
 80034f0:	3b54      	subs	r3, #84	; 0x54
 80034f2:	ed93 7a00 	vldr	s14, [r3]
 80034f6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80034fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80034fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003502:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350a:	dd16      	ble.n	800353a <DIFFDRIVE_HISTORY_Update+0x146>
				tmphist->state_measure[k].input[side]= max_volt-min_volt;
 800350c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800350e:	6959      	ldr	r1, [r3, #20]
 8003510:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	18ca      	adds	r2, r1, r3
 800351c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003520:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003524:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800352c:	3306      	adds	r3, #6
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	3304      	adds	r3, #4
 8003534:	edc3 7a00 	vstr	s15, [r3]
 8003538:	e045      	b.n	80035c6 <DIFFDRIVE_HISTORY_Update+0x1d2>
			else
			if( input[side] < -(max_volt-min_volt))
 800353a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003544:	4413      	add	r3, r2
 8003546:	3b54      	subs	r3, #84	; 0x54
 8003548:	ed93 7a00 	vldr	s14, [r3]
 800354c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8003550:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003554:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003558:	eef1 7a67 	vneg.f32	s15, s15
 800355c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003564:	d518      	bpl.n	8003598 <DIFFDRIVE_HISTORY_Update+0x1a4>
				tmphist->state_measure[k].input[side]= -(max_volt-min_volt);
 8003566:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800356a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800356e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003574:	6959      	ldr	r1, [r3, #20]
 8003576:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	18ca      	adds	r2, r1, r3
 8003582:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003586:	eef1 7a67 	vneg.f32	s15, s15
 800358a:	3306      	adds	r3, #6
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	3304      	adds	r3, #4
 8003592:	edc3 7a00 	vstr	s15, [r3]
 8003596:	e016      	b.n	80035c6 <DIFFDRIVE_HISTORY_Update+0x1d2>
			else
				tmphist->state_measure[k].input[side]= input[side];
 8003598:	f897 005e 	ldrb.w	r0, [r7, #94]	; 0x5e
 800359c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800359e:	6959      	ldr	r1, [r3, #20]
 80035a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4419      	add	r1, r3
 80035ac:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80035b0:	0082      	lsls	r2, r0, #2
 80035b2:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80035b6:	4402      	add	r2, r0
 80035b8:	3a54      	subs	r2, #84	; 0x54
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	3306      	adds	r3, #6
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	3304      	adds	r3, #4
 80035c4:	601a      	str	r2, [r3, #0]
			// ------------------------------------------------------------------------

			// Target input, without PID contribute and saturation limits
			tmphist->state_target[k].input[side]= hdiffdrv->control[side].fdfrwrd.current_input;
 80035c6:	4b3f      	ldr	r3, [pc, #252]	; (80036c4 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 80035ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d0:	6919      	ldr	r1, [r3, #16]
 80035d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4419      	add	r1, r3
 80035de:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80035e2:	2268      	movs	r2, #104	; 0x68
 80035e4:	fb02 f204 	mul.w	r2, r2, r4
 80035e8:	4402      	add	r2, r0
 80035ea:	f502 72a8 	add.w	r2, r2, #336	; 0x150
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	3306      	adds	r3, #6
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	3304      	adds	r3, #4
 80035f8:	601a      	str	r2, [r3, #0]

			// Wheels measured and target
			tmphist->state_measure[k].wheel[side]= __DIFFDRIVE_ENCODER_GET_CURRENT_VALUE(hdiffdrv,side);
 80035fa:	4b32      	ldr	r3, [pc, #200]	; (80036c4 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 80035fc:	681c      	ldr	r4, [r3, #0]
 80035fe:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8003602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003604:	6958      	ldr	r0, [r3, #20]
 8003606:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003608:	460b      	mov	r3, r1
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	440b      	add	r3, r1
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	18c1      	adds	r1, r0, r3
 8003612:	f897 005e 	ldrb.w	r0, [r7, #94]	; 0x5e
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4423      	add	r3, r4
 8003620:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	1c83      	adds	r3, r0, #2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	3304      	adds	r3, #4
 800362e:	601a      	str	r2, [r3, #0]
			tmphist->state_measure[k].delta_wheel[side]= hdiffdrv->state.delta_wheel[side];
 8003630:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <DIFFDRIVE_HISTORY_Update+0x2d0>)
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8003638:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800363a:	6959      	ldr	r1, [r3, #20]
 800363c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800363e:	4613      	mov	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4419      	add	r1, r3
 8003648:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800364c:	f104 0282 	add.w	r2, r4, #130	; 0x82
 8003650:	0092      	lsls	r2, r2, #2
 8003652:	4402      	add	r2, r0
 8003654:	3204      	adds	r2, #4
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	3304      	adds	r3, #4
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	3304      	adds	r3, #4
 8003660:	601a      	str	r2, [r3, #0]

			if(k > 0)
 8003662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003664:	2b00      	cmp	r3, #0
 8003666:	d02f      	beq.n	80036c8 <DIFFDRIVE_HISTORY_Update+0x2d4>
				tmphist->state_target[k].delta_wheel[side]= wheel_target[side]-tmphist->state_target[k-1].wheel[side];
 8003668:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003672:	4413      	add	r3, r2
 8003674:	3b4c      	subs	r3, #76	; 0x4c
 8003676:	ed93 7a00 	vldr	s14, [r3]
 800367a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800367c:	6919      	ldr	r1, [r3, #16]
 800367e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	3b24      	subs	r3, #36	; 0x24
 800368a:	18ca      	adds	r2, r1, r3
 800368c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003690:	3302      	adds	r3, #2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	3304      	adds	r3, #4
 8003698:	edd3 7a00 	vldr	s15, [r3]
 800369c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800369e:	6919      	ldr	r1, [r3, #16]
 80036a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036a2:	4613      	mov	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	18ca      	adds	r2, r1, r3
 80036ac:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80036b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b4:	3304      	adds	r3, #4
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	3304      	adds	r3, #4
 80036bc:	edc3 7a00 	vstr	s15, [r3]
 80036c0:	e013      	b.n	80036ea <DIFFDRIVE_HISTORY_Update+0x2f6>
 80036c2:	bf00      	nop
 80036c4:	200007f0 	.word	0x200007f0
			else
				tmphist->state_target[k].delta_wheel[side]= 0;
 80036c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ca:	6919      	ldr	r1, [r3, #16]
 80036cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036ce:	4613      	mov	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	18ca      	adds	r2, r1, r3
 80036d8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80036dc:	3304      	adds	r3, #4
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	3304      	adds	r3, #4
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
			tmphist->state_target[k].wheel[side]= wheel_target[side];
 80036ea:	f897 005e 	ldrb.w	r0, [r7, #94]	; 0x5e
 80036ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036f0:	6919      	ldr	r1, [r3, #16]
 80036f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4419      	add	r1, r3
 80036fe:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003702:	0082      	lsls	r2, r0, #2
 8003704:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8003708:	4402      	add	r2, r0
 800370a:	3a4c      	subs	r2, #76	; 0x4c
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	3302      	adds	r3, #2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	3304      	adds	r3, #4
 8003716:	601a      	str	r2, [r3, #0]
		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003718:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800371c:	3301      	adds	r3, #1
 800371e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8003722:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003726:	2b01      	cmp	r3, #1
 8003728:	f67f aec6 	bls.w	80034b8 <DIFFDRIVE_HISTORY_Update+0xc4>

		}

		// Pose measure, extracted from state register
		tmphist->state_measure[k].pose= tmpstate.pose;
 800372c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800372e:	6959      	ldr	r1, [r3, #20]
 8003730:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	461c      	mov	r4, r3
 800373e:	f107 031c 	add.w	r3, r7, #28
 8003742:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003746:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		// Compute current target pose
		if( tmphist->sample_cnt != 0 ){
 800374a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80a2 	beq.w	8003898 <DIFFDRIVE_HISTORY_Update+0x4a4>
			uint32_t k_prev= (tmphist->sample_cnt-1)%tmphist->max_sample;
 8003754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	3b01      	subs	r3, #1
 800375a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800375c:	6892      	ldr	r2, [r2, #8]
 800375e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003762:	fb02 f201 	mul.w	r2, r2, r1
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	64bb      	str	r3, [r7, #72]	; 0x48

			theta= tmphist->state_target[k_prev].pose.theta;
 800376a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800376c:	6919      	ldr	r1, [r3, #16]
 800376e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	64fb      	str	r3, [r7, #76]	; 0x4c
			tmphist->state_target[k].pose.x_a   =  tmphist->state_target[k_prev].pose.x_a   + delta_a_target*cos(theta);
 800377e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003780:	6919      	ldr	r1, [r3, #16]
 8003782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7fc fef9 	bl	8000588 <__aeabi_f2d>
 8003796:	4604      	mov	r4, r0
 8003798:	460d      	mov	r5, r1
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fc fef4 	bl	8000588 <__aeabi_f2d>
 80037a0:	4680      	mov	r8, r0
 80037a2:	4689      	mov	r9, r1
 80037a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80037a6:	f7fc feef 	bl	8000588 <__aeabi_f2d>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	ec43 2b10 	vmov	d0, r2, r3
 80037b2:	f009 f8c5 	bl	800c940 <cos>
 80037b6:	ec53 2b10 	vmov	r2, r3, d0
 80037ba:	4640      	mov	r0, r8
 80037bc:	4649      	mov	r1, r9
 80037be:	f7fc ff3b 	bl	8000638 <__aeabi_dmul>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4620      	mov	r0, r4
 80037c8:	4629      	mov	r1, r5
 80037ca:	f7fc fd7f 	bl	80002cc <__adddf3>
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4690      	mov	r8, r2
 80037d4:	4699      	mov	r9, r3
 80037d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037d8:	6919      	ldr	r1, [r3, #16]
 80037da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037dc:	4613      	mov	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	18cc      	adds	r4, r1, r3
 80037e6:	4640      	mov	r0, r8
 80037e8:	4649      	mov	r1, r9
 80037ea:	f7fd fa1d 	bl	8000c28 <__aeabi_d2f>
 80037ee:	4603      	mov	r3, r0
 80037f0:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k].pose.y_a   =  tmphist->state_target[k_prev].pose.y_a   + delta_a_target*sin(theta);
 80037f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037f4:	6919      	ldr	r1, [r3, #16]
 80037f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fc febf 	bl	8000588 <__aeabi_f2d>
 800380a:	4604      	mov	r4, r0
 800380c:	460d      	mov	r5, r1
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fc feba 	bl	8000588 <__aeabi_f2d>
 8003814:	4680      	mov	r8, r0
 8003816:	4689      	mov	r9, r1
 8003818:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800381a:	f7fc feb5 	bl	8000588 <__aeabi_f2d>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	ec43 2b10 	vmov	d0, r2, r3
 8003826:	f009 f8db 	bl	800c9e0 <sin>
 800382a:	ec53 2b10 	vmov	r2, r3, d0
 800382e:	4640      	mov	r0, r8
 8003830:	4649      	mov	r1, r9
 8003832:	f7fc ff01 	bl	8000638 <__aeabi_dmul>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4620      	mov	r0, r4
 800383c:	4629      	mov	r1, r5
 800383e:	f7fc fd45 	bl	80002cc <__adddf3>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4690      	mov	r8, r2
 8003848:	4699      	mov	r9, r3
 800384a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800384c:	6919      	ldr	r1, [r3, #16]
 800384e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	18cc      	adds	r4, r1, r3
 800385a:	4640      	mov	r0, r8
 800385c:	4649      	mov	r1, r9
 800385e:	f7fd f9e3 	bl	8000c28 <__aeabi_d2f>
 8003862:	4603      	mov	r3, r0
 8003864:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k].pose.theta =  tmphist->state_target[k_prev].pose.theta + delta_th_target;
 8003866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003868:	6919      	ldr	r1, [r3, #16]
 800386a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	ed93 7a02 	vldr	s14, [r3, #8]
 800387a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800387c:	6919      	ldr	r1, [r3, #16]
 800387e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003880:	4613      	mov	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	edd7 7a00 	vldr	s15, [r7]
 800388e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003892:	edc3 7a02 	vstr	s15, [r3, #8]
 8003896:	e058      	b.n	800394a <DIFFDRIVE_HISTORY_Update+0x556>
		}else{
			theta= 0;
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	64fb      	str	r3, [r7, #76]	; 0x4c
			tmphist->state_target[k].pose.x_a   =  delta_a_target*cos(theta);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fc fe72 	bl	8000588 <__aeabi_f2d>
 80038a4:	4604      	mov	r4, r0
 80038a6:	460d      	mov	r5, r1
 80038a8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80038aa:	f7fc fe6d 	bl	8000588 <__aeabi_f2d>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	ec43 2b10 	vmov	d0, r2, r3
 80038b6:	f009 f843 	bl	800c940 <cos>
 80038ba:	ec53 2b10 	vmov	r2, r3, d0
 80038be:	4620      	mov	r0, r4
 80038c0:	4629      	mov	r1, r5
 80038c2:	f7fc feb9 	bl	8000638 <__aeabi_dmul>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4690      	mov	r8, r2
 80038cc:	4699      	mov	r9, r3
 80038ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038d0:	6919      	ldr	r1, [r3, #16]
 80038d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	18cc      	adds	r4, r1, r3
 80038de:	4640      	mov	r0, r8
 80038e0:	4649      	mov	r1, r9
 80038e2:	f7fd f9a1 	bl	8000c28 <__aeabi_d2f>
 80038e6:	4603      	mov	r3, r0
 80038e8:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k].pose.y_a   =  delta_a_target*sin(theta);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fc fe4c 	bl	8000588 <__aeabi_f2d>
 80038f0:	4604      	mov	r4, r0
 80038f2:	460d      	mov	r5, r1
 80038f4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80038f6:	f7fc fe47 	bl	8000588 <__aeabi_f2d>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	ec43 2b10 	vmov	d0, r2, r3
 8003902:	f009 f86d 	bl	800c9e0 <sin>
 8003906:	ec53 2b10 	vmov	r2, r3, d0
 800390a:	4620      	mov	r0, r4
 800390c:	4629      	mov	r1, r5
 800390e:	f7fc fe93 	bl	8000638 <__aeabi_dmul>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4690      	mov	r8, r2
 8003918:	4699      	mov	r9, r3
 800391a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800391c:	6919      	ldr	r1, [r3, #16]
 800391e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	18cc      	adds	r4, r1, r3
 800392a:	4640      	mov	r0, r8
 800392c:	4649      	mov	r1, r9
 800392e:	f7fd f97b 	bl	8000c28 <__aeabi_d2f>
 8003932:	4603      	mov	r3, r0
 8003934:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k].pose.theta =  delta_th_target;
 8003936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003938:	6919      	ldr	r1, [r3, #16]
 800393a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	609a      	str	r2, [r3, #8]

		}

		// Increment sample counter
		tmphist->sample_cnt++;
 800394a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003952:	605a      	str	r2, [r3, #4]
	}
}
 8003954:	bf00      	nop
 8003956:	3760      	adds	r7, #96	; 0x60
 8003958:	46bd      	mov	sp, r7
 800395a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800395e:	bf00      	nop

08003960 <DIFFDRIVE_HISTORY_Get_Init>:


/* ---- Init time index to properly read the history circular buffer ----- */
void DIFFDRIVE_HISTORY_Get_Init(void){
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0

	DIFFDRIVE_HISTORY_TypeDef* tmphist= &(hdiffdrv->history);
 8003966:	4b11      	ldr	r3, [pc, #68]	; (80039ac <DIFFDRIVE_HISTORY_Get_Init+0x4c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800396e:	607b      	str	r3, [r7, #4]

	// Initialize current time index to start read from oldest saved values
	if( tmphist->sample_cnt >= tmphist->max_sample )
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	429a      	cmp	r2, r3
 800397a:	d30e      	bcc.n	800399a <DIFFDRIVE_HISTORY_Get_Init+0x3a>
		tmphist->index= (tmphist->sample_cnt-tmphist->max_sample)%tmphist->max_sample;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6892      	ldr	r2, [r2, #8]
 800398a:	fbb3 f1f2 	udiv	r1, r3, r2
 800398e:	fb02 f201 	mul.w	r2, r2, r1
 8003992:	1a9a      	subs	r2, r3, r2
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	60da      	str	r2, [r3, #12]
	else
		tmphist->index= 0;
}
 8003998:	e002      	b.n	80039a0 <DIFFDRIVE_HISTORY_Get_Init+0x40>
		tmphist->index= 0;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	60da      	str	r2, [r3, #12]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	200007f0 	.word	0x200007f0

080039b0 <DIFFDRIVE_HISTORY_Get_Sample>:


/* --- Read state sample from History --- */
void DIFFDRIVE_HISTORY_Get_Sample(DIFFDRIVE_STATE_TypeDef* state_measure, DIFFDRIVE_STATE_TypeDef* state_target){
 80039b0:	b4b0      	push	{r4, r5, r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]

	DIFFDRIVE_HISTORY_TypeDef* tmphist= &(hdiffdrv->history);
 80039ba:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <DIFFDRIVE_HISTORY_Get_Sample+0x98>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80039c2:	60fb      	str	r3, [r7, #12]

	*state_measure= tmphist->state_measure[tmphist->index];
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6959      	ldr	r1, [r3, #20]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4614      	mov	r4, r2
 80039da:	461d      	mov	r5, r3
 80039dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039e4:	682b      	ldr	r3, [r5, #0]
 80039e6:	6023      	str	r3, [r4, #0]
	*state_target = tmphist->state_target [tmphist->index];
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6919      	ldr	r1, [r3, #16]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	4613      	mov	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4413      	add	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	4614      	mov	r4, r2
 80039fe:	461d      	mov	r5, r3
 8003a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a08:	682b      	ldr	r3, [r5, #0]
 8003a0a:	6023      	str	r3, [r4, #0]

	// Update index for next step
	if( tmphist->sample_cnt >= tmphist->max_sample )
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d30c      	bcc.n	8003a32 <DIFFDRIVE_HISTORY_Get_Sample+0x82>
		tmphist->index= (tmphist->index+1)%tmphist->max_sample;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	6892      	ldr	r2, [r2, #8]
 8003a22:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a26:	fb02 f201 	mul.w	r2, r2, r1
 8003a2a:	1a9a      	subs	r2, r3, r2
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	60da      	str	r2, [r3, #12]
	else
		tmphist->index++;
}
 8003a30:	e004      	b.n	8003a3c <DIFFDRIVE_HISTORY_Get_Sample+0x8c>
		tmphist->index++;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	60da      	str	r2, [r3, #12]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bcb0      	pop	{r4, r5, r7}
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	200007f0 	.word	0x200007f0

08003a4c <DIFFDRIVE_CONTROL_Start>:


void DIFFDRIVE_CONTROL_Start(void){
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0

	// Reset Control
	DIFFDRIVE_CONTROL_Reset();
 8003a50:	f000 f80e 	bl	8003a70 <DIFFDRIVE_CONTROL_Reset>

	// Starting and enabling history
	DIFFDRIVE_HISTORY_Start();
 8003a54:	f7ff fcba 	bl	80033cc <DIFFDRIVE_HISTORY_Start>

	// Start control timing
	DIFFDRIVE_TIMING_Start();
 8003a58:	f000 f878 	bl	8003b4c <DIFFDRIVE_TIMING_Start>

}
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <DIFFDRIVE_CONTROL_Stop>:


void DIFFDRIVE_CONTROL_Stop(void){
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0

	// Stop timing, control finished
	DIFFDRIVE_TIMING_Stop();
 8003a64:	f000 f880 	bl	8003b68 <DIFFDRIVE_TIMING_Stop>

	// Set motor to 0 volt
	DIFFDRIVE_MOTOR_Stop();
 8003a68:	f7ff f986 	bl	8002d78 <DIFFDRIVE_MOTOR_Stop>

}
 8003a6c:	bf00      	nop
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <DIFFDRIVE_CONTROL_Reset>:


void DIFFDRIVE_CONTROL_Reset(void){
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0

	DIFFDRIVE_CONTROL_TypeDef* hctrl=    hdiffdrv->control;
 8003a76:	4b34      	ldr	r3, [pc, #208]	; (8003b48 <DIFFDRIVE_CONTROL_Reset+0xd8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a7e:	60bb      	str	r3, [r7, #8]
	DIFFDRIVE_HISTORY_TypeDef* tmphist= &hdiffdrv->history;
 8003a80:	4b31      	ldr	r3, [pc, #196]	; (8003b48 <DIFFDRIVE_CONTROL_Reset+0xd8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8003a88:	607b      	str	r3, [r7, #4]

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]
 8003a8e:	e016      	b.n	8003abe <DIFFDRIVE_CONTROL_Reset+0x4e>
		// Reset feed-forward buffer (with NULL value in second argument the buffers are initialized with zeros)
		FEEDFORWARD_BufferInit(&hctrl[side].fdfrwrd, NULL);
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2268      	movs	r2, #104	; 0x68
 8003a94:	fb02 f303 	mul.w	r3, r2, r3
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fb66 	bl	8004170 <FEEDFORWARD_BufferInit>
		// Reset PID
		PID_Reset(&hctrl[side].pid);
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	2268      	movs	r2, #104	; 0x68
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	4413      	add	r3, r2
 8003ab0:	3334      	adds	r3, #52	; 0x34
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fcff 	bl	80044b6 <PID_Reset>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	3301      	adds	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d9e5      	bls.n	8003a90 <DIFFDRIVE_CONTROL_Reset+0x20>
	}

	// Reset encoder sensors
	DIFFDRIVE_ENCODER_Reset();
 8003ac4:	f7ff fc50 	bl	8003368 <DIFFDRIVE_ENCODER_Reset>

	// If a reset occurred let converge pose target and pose measure, 'cause they are cumulative variables,
	// in order to not have excessive divergences between these two trajectories
	tmphist->state_target[tmphist->index].pose.theta= tmphist->state_measure[tmphist->index].pose.theta;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6959      	ldr	r1, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4419      	add	r1, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6918      	ldr	r0, [r3, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4403      	add	r3, r0
 8003aec:	688a      	ldr	r2, [r1, #8]
 8003aee:	609a      	str	r2, [r3, #8]
	tmphist->state_target[tmphist->index].pose.x_a=   tmphist->state_measure[tmphist->index].pose.x_a;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6959      	ldr	r1, [r3, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4419      	add	r1, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6918      	ldr	r0, [r3, #16]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4403      	add	r3, r0
 8003b14:	680a      	ldr	r2, [r1, #0]
 8003b16:	601a      	str	r2, [r3, #0]
	tmphist->state_target[tmphist->index].pose.y_a=   tmphist->state_measure[tmphist->index].pose.y_a;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6959      	ldr	r1, [r3, #20]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4419      	add	r1, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6918      	ldr	r0, [r3, #16]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	4613      	mov	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4403      	add	r3, r0
 8003b3c:	684a      	ldr	r2, [r1, #4]
 8003b3e:	605a      	str	r2, [r3, #4]

}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	200007f0 	.word	0x200007f0

08003b4c <DIFFDRIVE_TIMING_Start>:


void DIFFDRIVE_TIMING_Start(void){
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0

	// Starting timer in interrupt mode. It serve for control law timing
	HAL_TIM_Base_Start_IT(hdiffdrv->timing.htim);
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <DIFFDRIVE_TIMING_Start+0x18>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f002 fa19 	bl	8005f90 <HAL_TIM_Base_Start_IT>

}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	200007f0 	.word	0x200007f0

08003b68 <DIFFDRIVE_TIMING_Stop>:


void DIFFDRIVE_TIMING_Stop(void){
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0

	// Stop timer in interrupt mode
	HAL_TIM_Base_Stop_IT(hdiffdrv->timing.htim);
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <DIFFDRIVE_TIMING_Stop+0x18>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b74:	4618      	mov	r0, r3
 8003b76:	f002 fa7b 	bl	8006070 <HAL_TIM_Base_Stop_IT>

}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	200007f0 	.word	0x200007f0

08003b84 <DIFFDRIVE_TIMING_Wait>:


void DIFFDRIVE_TIMING_Wait(void){
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0

	// Wait until the timing flag is true
	while( !(hdiffdrv->timing.flag) )
 8003b88:	e000      	b.n	8003b8c <DIFFDRIVE_TIMING_Wait+0x8>
		__NOP();
 8003b8a:	bf00      	nop
	while( !(hdiffdrv->timing.flag) )
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <DIFFDRIVE_TIMING_Wait+0x30>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f083 0301 	eor.w	r3, r3, #1
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f4      	bne.n	8003b8a <DIFFDRIVE_TIMING_Wait+0x6>

	// Reset timing flag
	hdiffdrv->timing.flag= false;
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <DIFFDRIVE_TIMING_Wait+0x30>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

}
 8003baa:	bf00      	nop
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	200007f0 	.word	0x200007f0

08003bb8 <DIFFDRIVE_STATE_Update>:


void DIFFDRIVE_STATE_Update(float* input){
 8003bb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003bbc:	b088      	sub	sp, #32
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_STATE_TypeDef* tmpstate= &(hdiffdrv->state);
 8003bc2:	4b60      	ldr	r3, [pc, #384]	; (8003d44 <DIFFDRIVE_STATE_Update+0x18c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bca:	61bb      	str	r3, [r7, #24]

	float delta_a, delta_th, theta;

	// Updating state
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 8003bcc:	2300      	movs	r3, #0
 8003bce:	77fb      	strb	r3, [r7, #31]
 8003bd0:	e042      	b.n	8003c58 <DIFFDRIVE_STATE_Update+0xa0>
		tmpstate->wheel[side]=       hdiffdrv->encoder[side].current_value;
 8003bd2:	4b5c      	ldr	r3, [pc, #368]	; (8003d44 <DIFFDRIVE_STATE_Update+0x18c>)
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	7ffa      	ldrb	r2, [r7, #31]
 8003bd8:	7ff8      	ldrb	r0, [r7, #31]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	69b9      	ldr	r1, [r7, #24]
 8003bec:	1c83      	adds	r3, r0, #2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	601a      	str	r2, [r3, #0]
		tmpstate->delta_wheel[side]= hdiffdrv->encoder[side].current_value-hdiffdrv->encoder[side].previous_value;
 8003bf6:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <DIFFDRIVE_STATE_Update+0x18c>)
 8003bf8:	6819      	ldr	r1, [r3, #0]
 8003bfa:	7ffa      	ldrb	r2, [r7, #31]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003c0a:	ed93 7a00 	vldr	s14, [r3]
 8003c0e:	4b4d      	ldr	r3, [pc, #308]	; (8003d44 <DIFFDRIVE_STATE_Update+0x18c>)
 8003c10:	6819      	ldr	r1, [r3, #0]
 8003c12:	7ffa      	ldrb	r2, [r7, #31]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003c22:	edd3 7a00 	vldr	s15, [r3]
 8003c26:	7ffb      	ldrb	r3, [r7, #31]
 8003c28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	3304      	adds	r3, #4
 8003c36:	edc3 7a00 	vstr	s15, [r3]
		tmpstate->input[side]=       input[side];
 8003c3a:	7ffb      	ldrb	r3, [r7, #31]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	441a      	add	r2, r3
 8003c42:	7ffb      	ldrb	r3, [r7, #31]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	69b9      	ldr	r1, [r7, #24]
 8003c48:	3306      	adds	r3, #6
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	3304      	adds	r3, #4
 8003c50:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 8003c52:	7ffb      	ldrb	r3, [r7, #31]
 8003c54:	3301      	adds	r3, #1
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	7ffb      	ldrb	r3, [r7, #31]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d9b9      	bls.n	8003bd2 <DIFFDRIVE_STATE_Update+0x1a>
	}

	// Compute and update current pose
	DIFFDRIVE_DeltaWheel2DeltaTrajectory(&delta_a, &delta_th,  tmpstate->delta_wheel);
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	f103 0214 	add.w	r2, r3, #20
 8003c64:	f107 010c 	add.w	r1, r7, #12
 8003c68:	f107 0310 	add.w	r3, r7, #16
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 f8bf 	bl	8003df0 <DIFFDRIVE_DeltaWheel2DeltaTrajectory>

	theta= tmpstate->pose.theta;
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	617b      	str	r3, [r7, #20]
	tmpstate->pose.x_a   +=  delta_a*cos(theta);
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fc fc83 	bl	8000588 <__aeabi_f2d>
 8003c82:	4604      	mov	r4, r0
 8003c84:	460d      	mov	r5, r1
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fc fc7d 	bl	8000588 <__aeabi_f2d>
 8003c8e:	4680      	mov	r8, r0
 8003c90:	4689      	mov	r9, r1
 8003c92:	6978      	ldr	r0, [r7, #20]
 8003c94:	f7fc fc78 	bl	8000588 <__aeabi_f2d>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	ec43 2b10 	vmov	d0, r2, r3
 8003ca0:	f008 fe4e 	bl	800c940 <cos>
 8003ca4:	ec53 2b10 	vmov	r2, r3, d0
 8003ca8:	4640      	mov	r0, r8
 8003caa:	4649      	mov	r1, r9
 8003cac:	f7fc fcc4 	bl	8000638 <__aeabi_dmul>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	f7fc fb08 	bl	80002cc <__adddf3>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	f7fc ffb0 	bl	8000c28 <__aeabi_d2f>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	601a      	str	r2, [r3, #0]
	tmpstate->pose.y_a   +=  delta_a*sin(theta);
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fc fc58 	bl	8000588 <__aeabi_f2d>
 8003cd8:	4604      	mov	r4, r0
 8003cda:	460d      	mov	r5, r1
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fc fc52 	bl	8000588 <__aeabi_f2d>
 8003ce4:	4680      	mov	r8, r0
 8003ce6:	4689      	mov	r9, r1
 8003ce8:	6978      	ldr	r0, [r7, #20]
 8003cea:	f7fc fc4d 	bl	8000588 <__aeabi_f2d>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	ec43 2b10 	vmov	d0, r2, r3
 8003cf6:	f008 fe73 	bl	800c9e0 <sin>
 8003cfa:	ec53 2b10 	vmov	r2, r3, d0
 8003cfe:	4640      	mov	r0, r8
 8003d00:	4649      	mov	r1, r9
 8003d02:	f7fc fc99 	bl	8000638 <__aeabi_dmul>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	f7fc fadd 	bl	80002cc <__adddf3>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f7fc ff85 	bl	8000c28 <__aeabi_d2f>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	605a      	str	r2, [r3, #4]
	tmpstate->pose.theta +=  delta_th;
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	ed93 7a02 	vldr	s14, [r3, #8]
 8003d2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003d38:	bf00      	nop
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d42:	bf00      	nop
 8003d44:	200007f0 	.word	0x200007f0

08003d48 <DIFFDRIVE_DeltaTrajectory2WheelAngle>:


void DIFFDRIVE_DeltaTrajectory2WheelAngle(float* wheel, float delta_a, float delta_theta){
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d54:	edc7 0a01 	vstr	s1, [r7, #4]

	float r= hdiffdrv->mech_prmtr.r;
 8003d58:	4b24      	ldr	r3, [pc, #144]	; (8003dec <DIFFDRIVE_DeltaTrajectory2WheelAngle+0xa4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003d60:	617b      	str	r3, [r7, #20]
	float l= hdiffdrv->mech_prmtr.l;
 8003d62:	4b22      	ldr	r3, [pc, #136]	; (8003dec <DIFFDRIVE_DeltaTrajectory2WheelAngle+0xa4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8003d6a:	613b      	str	r3, [r7, #16]

	// Target computation (it's affect input var "wheel" because is a pointer.
	// Also note the "+=" symbol and not "=")
	if( wheel != NULL){
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d035      	beq.n	8003dde <DIFFDRIVE_DeltaTrajectory2WheelAngle+0x96>
		wheel[left ] +=  delta_a/r - l*delta_theta/r;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	ed93 7a00 	vldr	s14, [r3]
 8003d78:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d80:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003d84:	ed97 6a04 	vldr	s12, [r7, #16]
 8003d88:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d8c:	ee66 5a27 	vmul.f32	s11, s12, s15
 8003d90:	ed97 6a05 	vldr	s12, [r7, #20]
 8003d94:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003d98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	edc3 7a00 	vstr	s15, [r3]
		wheel[right] +=  delta_a/r + l*delta_theta/r;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3304      	adds	r3, #4
 8003daa:	ed93 7a00 	vldr	s14, [r3]
 8003dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8003db2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003db6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003dba:	ed97 6a04 	vldr	s12, [r7, #16]
 8003dbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dc2:	ee66 5a27 	vmul.f32	s11, s12, s15
 8003dc6:	ed97 6a05 	vldr	s12, [r7, #20]
 8003dca:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dda:	edc3 7a00 	vstr	s15, [r3]
	}

}
 8003dde:	bf00      	nop
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	200007f0 	.word	0x200007f0

08003df0 <DIFFDRIVE_DeltaWheel2DeltaTrajectory>:

void DIFFDRIVE_DeltaWheel2DeltaTrajectory(float* delta_a_p, float* delta_theta_p, float* delta_wheel){
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]

	float r= hdiffdrv->mech_prmtr.r;
 8003dfc:	4b1f      	ldr	r3, [pc, #124]	; (8003e7c <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x8c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003e04:	617b      	str	r3, [r7, #20]
	float l= hdiffdrv->mech_prmtr.l;
 8003e06:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x8c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8003e0e:	613b      	str	r3, [r7, #16]

	// Trajectory Variations computation (it's affect input vars delta_a_p and delta_theta_p because are pointers)

	if( delta_a_p != NULL)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d013      	beq.n	8003e3e <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x4e>
		*delta_a_p= (delta_wheel[right] + delta_wheel[left])*r/2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	ed93 7a00 	vldr	s14, [r3]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	edd3 7a00 	vldr	s15, [r3]
 8003e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e28:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e30:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003e34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	edc3 7a00 	vstr	s15, [r3]

	if( delta_theta_p != NULL )
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d015      	beq.n	8003e70 <DIFFDRIVE_DeltaWheel2DeltaTrajectory+0x80>
		*delta_theta_p= (delta_wheel[right] - delta_wheel[left])*r/(2*l);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	ed93 7a00 	vldr	s14, [r3]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	edd3 7a00 	vldr	s15, [r3]
 8003e52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e56:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e5a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e62:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	edc3 7a00 	vstr	s15, [r3]

}
 8003e70:	bf00      	nop
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	200007f0 	.word	0x200007f0

08003e80 <DIFFDRIVE_CONTROL_WheelStep>:


void DIFFDRIVE_CONTROL_WheelStep(float* newest_target){
 8003e80:	b590      	push	{r4, r7, lr}
 8003e82:	b08b      	sub	sp, #44	; 0x2c
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_CONTROL_TypeDef* hctrl=  hdiffdrv->control;
 8003e88:	4b50      	ldr	r3, [pc, #320]	; (8003fcc <DIFFDRIVE_CONTROL_WheelStep+0x14c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003e90:	623b      	str	r3, [r7, #32]
	float curr_target[2], curr_measure, input[2];

	/* Do control wheels */

	// Waiting for step control enabling
	DIFFDRIVE_TIMING_Wait();
 8003e92:	f7ff fe77 	bl	8003b84 <DIFFDRIVE_TIMING_Wait>

	// Then get wheel step measure If counters are not near overflow (look at CaptureMeasure function)
	if( (status= DIFFDRIVE_ENCODER_CaptureMeasure()) == DIFFDRIVE_ERROR ){
 8003e96:	f7ff f9b7 	bl	8003208 <DIFFDRIVE_ENCODER_CaptureMeasure>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ea6:	d10a      	bne.n	8003ebe <DIFFDRIVE_CONTROL_WheelStep+0x3e>
		// If exception, reset control
		DIFFDRIVE_CONTROL_Reset();
 8003ea8:	f7ff fde2 	bl	8003a70 <DIFFDRIVE_CONTROL_Reset>
		// Reset target temporary variable
		newest_target[left ]= 0;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
		newest_target[right]= 0;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
	}

	// Compute input
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ec4:	e06f      	b.n	8003fa6 <DIFFDRIVE_CONTROL_WheelStep+0x126>

		// Computing input using inversion control
		input[side]  = FEEDFORWARD_InversionControl(&(hctrl[side].fdfrwrd), newest_target[side]);
 8003ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003eca:	2268      	movs	r2, #104	; 0x68
 8003ecc:	fb02 f303 	mul.w	r3, r2, r3
 8003ed0:	6a3a      	ldr	r2, [r7, #32]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4413      	add	r3, r2
 8003ee0:	edd3 7a00 	vldr	s15, [r3]
 8003ee4:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8003ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8003eec:	4608      	mov	r0, r1
 8003eee:	f000 f9d2 	bl	8004296 <FEEDFORWARD_InversionControl>
 8003ef2:	eef0 7a40 	vmov.f32	s15, s0
 8003ef6:	00a3      	lsls	r3, r4, #2
 8003ef8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003efc:	4413      	add	r3, r2
 8003efe:	3b20      	subs	r3, #32
 8003f00:	edc3 7a00 	vstr	s15, [r3]

		// Wheel angle read from sensor
		curr_measure= __DIFFDRIVE_ENCODER_GET_CURRENT_VALUE(hdiffdrv,side);
 8003f04:	4b31      	ldr	r3, [pc, #196]	; (8003fcc <DIFFDRIVE_CONTROL_WheelStep+0x14c>)
 8003f06:	6819      	ldr	r1, [r3, #0]
 8003f08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	61bb      	str	r3, [r7, #24]

		// Current target value saved in the feed-forward controller struct (you must call before the
		// Inversion Control function and then to extract this value. Look at feed-forward library to
		// better understand why)
		curr_target[side]= __FEEDFORWARD_GET_CURRENT_TARGET(&(hctrl[side].fdfrwrd));
 8003f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f22:	2268      	movs	r2, #104	; 0x68
 8003f24:	fb02 f303 	mul.w	r3, r2, r3
 8003f28:	6a3a      	ldr	r2, [r7, #32]
 8003f2a:	441a      	add	r2, r3
 8003f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003f38:	440b      	add	r3, r1
 8003f3a:	3b18      	subs	r3, #24
 8003f3c:	601a      	str	r2, [r3, #0]

		// Computing PID input
		input[side] += PID_Control(&(hctrl[side].pid), curr_target[side], curr_measure);
 8003f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f42:	2268      	movs	r2, #104	; 0x68
 8003f44:	fb02 f303 	mul.w	r3, r2, r3
 8003f48:	6a3a      	ldr	r2, [r7, #32]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003f5a:	440b      	add	r3, r1
 8003f5c:	3b18      	subs	r3, #24
 8003f5e:	edd3 7a00 	vldr	s15, [r3]
 8003f62:	edd7 0a06 	vldr	s1, [r7, #24]
 8003f66:	eeb0 0a67 	vmov.f32	s0, s15
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	f000 fac1 	bl	80044f2 <PID_Control>
 8003f70:	eeb0 7a40 	vmov.f32	s14, s0
 8003f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f7e:	4413      	add	r3, r2
 8003f80:	3b20      	subs	r3, #32
 8003f82:	edd3 7a00 	vldr	s15, [r3]
 8003f86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f94:	4413      	add	r3, r2
 8003f96:	3b20      	subs	r3, #32
 8003f98:	edc3 7a00 	vstr	s15, [r3]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d98b      	bls.n	8003ec6 <DIFFDRIVE_CONTROL_WheelStep+0x46>

	}

	// Set new PWMs signals
	DIFFDRIVE_MOTOR_SetPWMs(input);
 8003fae:	f107 0308 	add.w	r3, r7, #8
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe fef2 	bl	8002d9c <DIFFDRIVE_MOTOR_SetPWMs>

	// Update differential drive state structure
	DIFFDRIVE_STATE_Update(input);
 8003fb8:	f107 0308 	add.w	r3, r7, #8
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fdfb 	bl	8003bb8 <DIFFDRIVE_STATE_Update>

}
 8003fc2:	bf00      	nop
 8003fc4:	372c      	adds	r7, #44	; 0x2c
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd90      	pop	{r4, r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	200007f0 	.word	0x200007f0

08003fd0 <DIFFDRIVE_TrackingStart>:

void DIFFDRIVE_TrackingStart(void){
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0

	// Start control
	DIFFDRIVE_CONTROL_Start();
 8003fd4:	f7ff fd3a 	bl	8003a4c <DIFFDRIVE_CONTROL_Start>

	// First step wheels control (starts with zeros, robot still)
	DIFFDRIVE_TrackingStep(0,0);
 8003fd8:	eddf 0a03 	vldr	s1, [pc, #12]	; 8003fe8 <DIFFDRIVE_TrackingStart+0x18>
 8003fdc:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8003fe8 <DIFFDRIVE_TrackingStart+0x18>
 8003fe0:	f000 f80a 	bl	8003ff8 <DIFFDRIVE_TrackingStep>

}
 8003fe4:	bf00      	nop
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	00000000 	.word	0x00000000

08003fec <DIFFDRIVE_TrackingStop>:


void DIFFDRIVE_TrackingStop(void){
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0

	// Stop control
	DIFFDRIVE_CONTROL_Stop();
 8003ff0:	f7ff fd36 	bl	8003a60 <DIFFDRIVE_CONTROL_Stop>

}
 8003ff4:	bf00      	nop
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <DIFFDRIVE_TrackingStep>:


void DIFFDRIVE_TrackingStep(float delta_a, float delta_theta){
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	ed87 0a01 	vstr	s0, [r7, #4]
 8004002:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_CONTROL_TypeDef* tmpctrl= hdiffdrv->control;
 8004006:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <DIFFDRIVE_TrackingStep+0x78>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800400e:	613b      	str	r3, [r7, #16]
	float newest_target[2];

	// Extracting previous target
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8004010:	2300      	movs	r3, #0
 8004012:	75fb      	strb	r3, [r7, #23]
 8004014:	e010      	b.n	8004038 <DIFFDRIVE_TrackingStep+0x40>
		newest_target[side]= __FEEDFORWARD_GET_NEWEST_TARGET(&tmpctrl[side].fdfrwrd);
 8004016:	7dfb      	ldrb	r3, [r7, #23]
 8004018:	2268      	movs	r2, #104	; 0x68
 800401a:	fb02 f303 	mul.w	r3, r2, r3
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	441a      	add	r2, r3
 8004022:	7dfb      	ldrb	r3, [r7, #23]
 8004024:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	f107 0118 	add.w	r1, r7, #24
 800402c:	440b      	add	r3, r1
 800402e:	3b10      	subs	r3, #16
 8004030:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8004032:	7dfb      	ldrb	r3, [r7, #23]
 8004034:	3301      	adds	r3, #1
 8004036:	75fb      	strb	r3, [r7, #23]
 8004038:	7dfb      	ldrb	r3, [r7, #23]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d9eb      	bls.n	8004016 <DIFFDRIVE_TrackingStep+0x1e>


	// Computing newest target
	DIFFDRIVE_DeltaTrajectory2WheelAngle(newest_target, delta_a, delta_theta);
 800403e:	f107 0308 	add.w	r3, r7, #8
 8004042:	edd7 0a00 	vldr	s1, [r7]
 8004046:	ed97 0a01 	vldr	s0, [r7, #4]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fe7c 	bl	8003d48 <DIFFDRIVE_DeltaTrajectory2WheelAngle>

	// Make a wheel step motion
	DIFFDRIVE_CONTROL_WheelStep(newest_target);
 8004050:	f107 0308 	add.w	r3, r7, #8
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff13 	bl	8003e80 <DIFFDRIVE_CONTROL_WheelStep>

	// Updating History
	DIFFDRIVE_HISTORY_Update(delta_a, delta_theta);
 800405a:	edd7 0a00 	vldr	s1, [r7]
 800405e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004062:	f7ff f9c7 	bl	80033f4 <DIFFDRIVE_HISTORY_Update>


}
 8004066:	bf00      	nop
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	200007f0 	.word	0x200007f0

08004074 <DIFFDRIVE_TIMING_Callback>:
	DIFFDRIVE_MOTOR_Stop();

}


void DIFFDRIVE_TIMING_Callback(TIM_HandleTypeDef* htim){
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]

	// Enabling timing flag
	hdiffdrv->timing.flag= true;
 800407c:	4b05      	ldr	r3, [pc, #20]	; (8004094 <DIFFDRIVE_TIMING_Callback+0x20>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4


}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	200007f0 	.word	0x200007f0

08004098 <FEEDFORWARD_Init>:

#include <stdlib.h>
#include "my_lib/feedforward_controller.h"


void FEEDFORWARD_Init(FEEDFORWARD_HandleTypeDef* hctrl){
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

	// Initializing handle structure values from Init field
	hctrl->arma.n_ar=  hctrl->Init.arma_n_ar;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	881a      	ldrh	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	821a      	strh	r2, [r3, #16]
	hctrl->arma.n_ma=  hctrl->Init.arma_n_ma;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	885a      	ldrh	r2, [r3, #2]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	825a      	strh	r2, [r3, #18]
	hctrl->arma.tau=   hctrl->Init.arma_tau;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	889a      	ldrh	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	829a      	strh	r2, [r3, #20]

	hctrl->arma.AR= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8a1b      	ldrh	r3, [r3, #16]
 80040bc:	2104      	movs	r1, #4
 80040be:	4618      	mov	r0, r3
 80040c0:	f003 fe2e 	bl	8007d20 <calloc>
 80040c4:	4603      	mov	r3, r0
 80040c6:	461a      	mov	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	619a      	str	r2, [r3, #24]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	e00e      	b.n	80040f0 <FEEDFORWARD_Init+0x58>
		hctrl->arma.AR[i]= hctrl->Init.arma_AR[i];
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	441a      	add	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6999      	ldr	r1, [r3, #24]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3301      	adds	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8a1b      	ldrh	r3, [r3, #16]
 80040f4:	461a      	mov	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4293      	cmp	r3, r2
 80040fa:	dbea      	blt.n	80040d2 <FEEDFORWARD_Init+0x3a>

	hctrl->arma.MA= (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8a5b      	ldrh	r3, [r3, #18]
 8004100:	2104      	movs	r1, #4
 8004102:	4618      	mov	r0, r3
 8004104:	f003 fe0c 	bl	8007d20 <calloc>
 8004108:	4603      	mov	r3, r0
 800410a:	461a      	mov	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	61da      	str	r2, [r3, #28]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8004110:	2300      	movs	r3, #0
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	e00e      	b.n	8004134 <FEEDFORWARD_Init+0x9c>
		hctrl->arma.MA[i]= hctrl->Init.arma_MA[i];
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	441a      	add	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69d9      	ldr	r1, [r3, #28]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	3301      	adds	r3, #1
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8a5b      	ldrh	r3, [r3, #18]
 8004138:	461a      	mov	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4293      	cmp	r3, r2
 800413e:	dbea      	blt.n	8004116 <FEEDFORWARD_Init+0x7e>

	// Allocating history' arrays
	hctrl->target_buffer= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8a1b      	ldrh	r3, [r3, #16]
 8004144:	2104      	movs	r1, #4
 8004146:	4618      	mov	r0, r3
 8004148:	f003 fdea 	bl	8007d20 <calloc>
 800414c:	4603      	mov	r3, r0
 800414e:	461a      	mov	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	625a      	str	r2, [r3, #36]	; 0x24
	hctrl->input_buffer=  (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8a5b      	ldrh	r3, [r3, #18]
 8004158:	2104      	movs	r1, #4
 800415a:	4618      	mov	r0, r3
 800415c:	f003 fde0 	bl	8007d20 <calloc>
 8004160:	4603      	mov	r3, r0
 8004162:	461a      	mov	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	621a      	str	r2, [r3, #32]

}
 8004168:	bf00      	nop
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <FEEDFORWARD_BufferInit>:
	// Reset feed-forward buffer (with NULL value in second argument the buffers are initialized with zeros)
	FEEDFORWARD_BufferInit(hctrl, NULL);

}

void FEEDFORWARD_BufferInit(FEEDFORWARD_HandleTypeDef* hctrl, float *target_init){
 8004170:	b490      	push	{r4, r7}
 8004172:	b08c      	sub	sp, #48	; 0x30
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f107 0408 	add.w	r4, r7, #8
 8004180:	3310      	adds	r3, #16
 8004182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint16_t n_ar= arma.n_ar;
 8004188:	893b      	ldrh	r3, [r7, #8]
 800418a:	83fb      	strh	r3, [r7, #30]
	uint16_t n_ma= arma.n_ma;
 800418c:	897b      	ldrh	r3, [r7, #10]
 800418e:	83bb      	strh	r3, [r7, #28]
	uint16_t  tau= arma.tau;
 8004190:	89bb      	ldrh	r3, [r7, #12]
 8004192:	837b      	strh	r3, [r7, #26]

	// If target pointer is equal to NULL the buffers take zero values
	if( (void *)target_init == NULL ){
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d129      	bne.n	80041ee <FEEDFORWARD_BufferInit+0x7e>

		for(int i= 0; i < tau; i++)
 800419a:	2300      	movs	r3, #0
 800419c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800419e:	e00d      	b.n	80041bc <FEEDFORWARD_BufferInit+0x4c>
			hctrl->target_buffer[(n_ar-1)-i]= 0;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041a4:	8bfb      	ldrh	r3, [r7, #30]
 80041a6:	1e59      	subs	r1, r3, #1
 80041a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041aa:	1acb      	subs	r3, r1, r3
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
		for(int i= 0; i < tau; i++)
 80041b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b8:	3301      	adds	r3, #1
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041bc:	8b7b      	ldrh	r3, [r7, #26]
 80041be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c0:	429a      	cmp	r2, r3
 80041c2:	dbed      	blt.n	80041a0 <FEEDFORWARD_BufferInit+0x30>

		// Complete first values with the same initial value
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 80041c4:	8bfb      	ldrh	r3, [r7, #30]
 80041c6:	1e5a      	subs	r2, r3, #1
 80041c8:	8b7b      	ldrh	r3, [r7, #26]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ce:	e00a      	b.n	80041e6 <FEEDFORWARD_BufferInit+0x76>
			hctrl->target_buffer[i]= 0;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 80041e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e2:	3b01      	subs	r3, #1
 80041e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	daf1      	bge.n	80041d0 <FEEDFORWARD_BufferInit+0x60>
 80041ec:	e02d      	b.n	800424a <FEEDFORWARD_BufferInit+0xda>

	}
	// Else I use the input values
	else{
		for(int i= 0; i < tau; i++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
 80041f2:	e012      	b.n	800421a <FEEDFORWARD_BufferInit+0xaa>
			hctrl->target_buffer[(n_ar-1)-i]= target_init[tau-i];
 80041f4:	8b7a      	ldrh	r2, [r7, #26]
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	441a      	add	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004204:	8bfb      	ldrh	r3, [r7, #30]
 8004206:	1e58      	subs	r0, r3, #1
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	1ac3      	subs	r3, r0, r3
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	601a      	str	r2, [r3, #0]
		for(int i= 0; i < tau; i++)
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	3301      	adds	r3, #1
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
 800421a:	8b7b      	ldrh	r3, [r7, #26]
 800421c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421e:	429a      	cmp	r2, r3
 8004220:	dbe8      	blt.n	80041f4 <FEEDFORWARD_BufferInit+0x84>

		// Complete first values with the same initial value
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 8004222:	8bfb      	ldrh	r3, [r7, #30]
 8004224:	1e5a      	subs	r2, r3, #1
 8004226:	8b7b      	ldrh	r3, [r7, #26]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	623b      	str	r3, [r7, #32]
 800422c:	e00a      	b.n	8004244 <FEEDFORWARD_BufferInit+0xd4>
			hctrl->target_buffer[i]= target_init[0];
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	601a      	str	r2, [r3, #0]
		for(int i= (n_ar-1)-tau; i >= 0; i--)
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	3b01      	subs	r3, #1
 8004242:	623b      	str	r3, [r7, #32]
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	2b00      	cmp	r3, #0
 8004248:	daf1      	bge.n	800422e <FEEDFORWARD_BufferInit+0xbe>
	}

	// Set current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[n_ar-1-tau];
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800424e:	8bfb      	ldrh	r3, [r7, #30]
 8004250:	1e59      	subs	r1, r3, #1
 8004252:	8b7b      	ldrh	r3, [r7, #26]
 8004254:	1acb      	subs	r3, r1, r3
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[n_ma-1];
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1a      	ldr	r2, [r3, #32]
 8004264:	8bbb      	ldrh	r3, [r7, #28]
 8004266:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800426a:	3b01      	subs	r3, #1
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800427a:	893b      	ldrh	r3, [r7, #8]
 800427c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004280:	3b01      	subs	r3, #1
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800428c:	bf00      	nop
 800428e:	3730      	adds	r7, #48	; 0x30
 8004290:	46bd      	mov	sp, r7
 8004292:	bc90      	pop	{r4, r7}
 8004294:	4770      	bx	lr

08004296 <FEEDFORWARD_InversionControl>:


float FEEDFORWARD_InversionControl(FEEDFORWARD_HandleTypeDef* hctrl, float newest_target){
 8004296:	b590      	push	{r4, r7, lr}
 8004298:	b08f      	sub	sp, #60	; 0x3c
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	ed87 0a00 	vstr	s0, [r7]

	float input= 0;
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	637b      	str	r3, [r7, #52]	; 0x34
	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f107 040c 	add.w	r4, r7, #12
 80042ae:	3310      	adds	r3, #16
 80042b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int oldest_ar_sample= 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	62bb      	str	r3, [r7, #40]	; 0x28
	int newest_ar_sample= arma.n_ar-1;  // Last minus one because
 80042ba:	89bb      	ldrh	r3, [r7, #12]
 80042bc:	3b01      	subs	r3, #1
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
								    	//
	int oldest_ma_sample= 0;			//
 80042c0:	2300      	movs	r3, #0
 80042c2:	623b      	str	r3, [r7, #32]
	int newest_ma_sample= arma.n_ma-1;  // C arrays start from 0
 80042c4:	89fb      	ldrh	r3, [r7, #14]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	61fb      	str	r3, [r7, #28]

	// Assigning the newest target value
	hctrl->target_buffer[newest_ar_sample]= newest_target;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	601a      	str	r2, [r3, #0]

	// Compute feed-forward input (inversion control)
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	633b      	str	r3, [r7, #48]	; 0x30
 80042dc:	e019      	b.n	8004312 <FEEDFORWARD_InversionControl+0x7c>
		input += arma.AR[newest_ar_sample-i]*hctrl->target_buffer[i];
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	1acb      	subs	r3, r1, r3
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	ed93 7a00 	vldr	s14, [r3]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	edd3 7a00 	vldr	s15, [r3]
 80042fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004300:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004308:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	3301      	adds	r3, #1
 8004310:	633b      	str	r3, [r7, #48]	; 0x30
 8004312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	429a      	cmp	r2, r3
 8004318:	dde1      	ble.n	80042de <FEEDFORWARD_InversionControl+0x48>
	// I know inputs until the newest_ma_sample-1
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800431e:	e01b      	b.n	8004358 <FEEDFORWARD_InversionControl+0xc2>
		input += -arma.MA[newest_ma_sample-j]*hctrl->input_buffer[j];
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	69f9      	ldr	r1, [r7, #28]
 8004324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004326:	1acb      	subs	r3, r1, r3
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	edd3 7a00 	vldr	s15, [r3]
 8004330:	eeb1 7a67 	vneg.f32	s14, s15
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1a      	ldr	r2, [r3, #32]
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	edd3 7a00 	vldr	s15, [r3]
 8004342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004346:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800434a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800434e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 8004352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004354:	3301      	adds	r3, #1
 8004356:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435c:	429a      	cmp	r2, r3
 800435e:	dcdf      	bgt.n	8004320 <FEEDFORWARD_InversionControl+0x8a>
	// Last input is computed here
	input /= arma.MA[0];
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	ed93 7a00 	vldr	s14, [r3]
 8004366:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800436a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800436e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Saving newest input
	hctrl->input_buffer[newest_ma_sample]= input;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800437e:	601a      	str	r2, [r3, #0]

	// Updating Buffer for next step
	FEEDFORWARD_BufferUpdate(hctrl);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f808 	bl	8004396 <FEEDFORWARD_BufferUpdate>

	return input;
 8004386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004388:	ee07 3a90 	vmov	s15, r3
}
 800438c:	eeb0 0a67 	vmov.f32	s0, s15
 8004390:	373c      	adds	r7, #60	; 0x3c
 8004392:	46bd      	mov	sp, r7
 8004394:	bd90      	pop	{r4, r7, pc}

08004396 <FEEDFORWARD_BufferUpdate>:


void FEEDFORWARD_BufferUpdate(FEEDFORWARD_HandleTypeDef* hctrl){
 8004396:	b490      	push	{r4, r7}
 8004398:	b088      	sub	sp, #32
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f107 0408 	add.w	r4, r7, #8
 80043a4:	3310      	adds	r3, #16
 80043a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Updating current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[arma.n_ar-1-arma.tau];
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b0:	893b      	ldrh	r3, [r7, #8]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	89b9      	ldrh	r1, [r7, #12]
 80043b6:	1a5b      	subs	r3, r3, r1
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[arma.n_ma-1];
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1a      	ldr	r2, [r3, #32]
 80043c6:	897b      	ldrh	r3, [r7, #10]
 80043c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043cc:	3b01      	subs	r3, #1
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043dc:	893b      	ldrh	r3, [r7, #8]
 80043de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043e2:	3b01      	subs	r3, #1
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30

	// Then slide buffers ( look, loops go from idx=0 to idx=n-2 )
	for(int i=0; i < arma.n_ar-1; i++)
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	e00f      	b.n	8004414 <FEEDFORWARD_BufferUpdate+0x7e>
		hctrl->target_buffer[i]= hctrl->target_buffer[i+1];
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	3301      	adds	r3, #1
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	441a      	add	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ar-1; i++)
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	3301      	adds	r3, #1
 8004412:	61fb      	str	r3, [r7, #28]
 8004414:	893b      	ldrh	r3, [r7, #8]
 8004416:	3b01      	subs	r3, #1
 8004418:	69fa      	ldr	r2, [r7, #28]
 800441a:	429a      	cmp	r2, r3
 800441c:	dbea      	blt.n	80043f4 <FEEDFORWARD_BufferUpdate+0x5e>
	for(int i=0; i < arma.n_ma-1; i++)
 800441e:	2300      	movs	r3, #0
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	e00f      	b.n	8004444 <FEEDFORWARD_BufferUpdate+0xae>
		hctrl->input_buffer[i]= hctrl->input_buffer[i+1];
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1a      	ldr	r2, [r3, #32]
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	3301      	adds	r3, #1
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	441a      	add	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a19      	ldr	r1, [r3, #32]
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ma-1; i++)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	3301      	adds	r3, #1
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	897b      	ldrh	r3, [r7, #10]
 8004446:	3b01      	subs	r3, #1
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	429a      	cmp	r2, r3
 800444c:	dbea      	blt.n	8004424 <FEEDFORWARD_BufferUpdate+0x8e>

}
 800444e:	bf00      	nop
 8004450:	bf00      	nop
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bc90      	pop	{r4, r7}
 8004458:	4770      	bx	lr

0800445a <PID_Init>:
 */

#include "my_lib/pid_controller.h"


void PID_Init(PID_HandleTypeDef* hpid){
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]

	// Init parameters
	hpid->P=  hpid->Init.P;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	611a      	str	r2, [r3, #16]
	hpid->I=  hpid->Init.I;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	615a      	str	r2, [r3, #20]
	hpid->D=  hpid->Init.D;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	619a      	str	r2, [r3, #24]
	hpid->Ts= hpid->Init.Ts;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	631a      	str	r2, [r3, #48]	; 0x30

	// Init Input contributes variables
	hpid->u_I= 0;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	625a      	str	r2, [r3, #36]	; 0x24
	hpid->u_P= 0;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	61da      	str	r2, [r3, #28]

	// Init Previous variables
	hpid->u_prev= 0;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <PID_Reset>:



// Reset input buffer and the contributes variables
void PID_Reset(PID_HandleTypeDef* hpid){
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]

	hpid->u_I= 0;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	625a      	str	r2, [r3, #36]	; 0x24
	hpid->u_P= 0;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	61da      	str	r2, [r3, #28]

	hpid->u_prev= 0;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	62da      	str	r2, [r3, #44]	; 0x2c



}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <PID_Control>:

float PID_Control(PID_HandleTypeDef* hpid, float target, float measure){
 80044f2:	b480      	push	{r7}
 80044f4:	b089      	sub	sp, #36	; 0x24
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80044fe:	edc7 0a01 	vstr	s1, [r7, #4]

	float e_prev,e_curr, Ts, u;

	// Time step
	Ts= hpid->Ts;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	61fb      	str	r3, [r7, #28]

	// Following error
	e_curr= target-measure;
 8004508:	ed97 7a02 	vldr	s14, [r7, #8]
 800450c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004514:	edc7 7a06 	vstr	s15, [r7, #24]
	e_prev= hpid->e_prev;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	617b      	str	r3, [r7, #20]

	// Proportional
	hpid->u_P= hpid->P*e_curr;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	ed93 7a04 	vldr	s14, [r3, #16]
 8004524:	edd7 7a06 	vldr	s15, [r7, #24]
 8004528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	edc3 7a07 	vstr	s15, [r3, #28]

	// Integral
	hpid->u_I += hpid->I*e_prev*Ts;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	ed93 7a08 	vldr	s14, [r3, #32]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	edd3 6a05 	vldr	s13, [r3, #20]
 800453e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004542:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004546:	edd7 7a07 	vldr	s15, [r7, #28]
 800454a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800454e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	edc3 7a08 	vstr	s15, [r3, #32]

	// Derivative
	hpid->u_D = hpid->D*(e_curr-e_prev)/Ts;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	ed93 7a06 	vldr	s14, [r3, #24]
 800455e:	edd7 6a06 	vldr	s13, [r7, #24]
 8004562:	edd7 7a05 	vldr	s15, [r7, #20]
 8004566:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800456a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800456e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Input
	u= hpid->u_P + hpid->u_I + hpid->u_D;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	ed93 7a07 	vldr	s14, [r3, #28]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	edd3 7a08 	vldr	s15, [r3, #32]
 8004588:	ee37 7a27 	vadd.f32	s14, s14, s15
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004596:	edc7 7a04 	vstr	s15, [r7, #16]

	// Updating struct
	hpid->u_prev= u;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= e_curr;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	62da      	str	r2, [r3, #44]	; 0x2c

	return u;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	ee07 3a90 	vmov	s15, r3

}
 80045ac:	eeb0 0a67 	vmov.f32	s0, s15
 80045b0:	3724      	adds	r7, #36	; 0x24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80045bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045c0:	480d      	ldr	r0, [pc, #52]	; (80045f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80045c2:	490e      	ldr	r1, [pc, #56]	; (80045fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80045c4:	4a0e      	ldr	r2, [pc, #56]	; (8004600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80045c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045c8:	e002      	b.n	80045d0 <LoopCopyDataInit>

080045ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045ce:	3304      	adds	r3, #4

080045d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045d4:	d3f9      	bcc.n	80045ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045d6:	4a0b      	ldr	r2, [pc, #44]	; (8004604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80045d8:	4c0b      	ldr	r4, [pc, #44]	; (8004608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80045da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045dc:	e001      	b.n	80045e2 <LoopFillZerobss>

080045de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045e0:	3204      	adds	r2, #4

080045e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045e4:	d3fb      	bcc.n	80045de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80045e6:	f7fd ff9d 	bl	8002524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045ea:	f003 fba7 	bl	8007d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045ee:	f7fc fd1f 	bl	8001030 <main>
  bx  lr    
 80045f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80045f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80045f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045fc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004600:	08011540 	.word	0x08011540
  ldr r2, =_sbss
 8004604:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004608:	20000808 	.word	0x20000808

0800460c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800460c:	e7fe      	b.n	800460c <ADC_IRQHandler>
	...

08004610 <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8004610:	b480      	push	{r7}
 8004612:	b08b      	sub	sp, #44	; 0x2c
 8004614:	af00      	add	r7, sp, #0
 8004616:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800461a:	edd7 7a01 	vldr	s15, [r7, #4]
 800461e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8004714 <arm_sin_f32+0x104>
 8004622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004626:	edc7 7a07 	vstr	s15, [r7, #28]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800462a:	edd7 7a07 	vldr	s15, [r7, #28]
 800462e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004632:	ee17 3a90 	vmov	r3, s15
 8004636:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if(x < 0.0f)
 8004638:	edd7 7a01 	vldr	s15, [r7, #4]
 800463c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004644:	d502      	bpl.n	800464c <arm_sin_f32+0x3c>
  {
    n--;
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	3b01      	subs	r3, #1
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004656:	ed97 7a07 	vldr	s14, [r7, #28]
 800465a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800465e:	edc7 7a07 	vstr	s15, [r7, #28]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8004662:	edd7 7a07 	vldr	s15, [r7, #28]
 8004666:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004718 <arm_sin_f32+0x108>
 800466a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800466e:	edc7 7a08 	vstr	s15, [r7, #32]
  if (findex >= 512.0f) {
 8004672:	edd7 7a08 	vldr	s15, [r7, #32]
 8004676:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004718 <arm_sin_f32+0x108>
 800467a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004682:	db07      	blt.n	8004694 <arm_sin_f32+0x84>
    findex -= 512.0f;
 8004684:	edd7 7a08 	vldr	s15, [r7, #32]
 8004688:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004718 <arm_sin_f32+0x108>
 800468c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004690:	edc7 7a08 	vstr	s15, [r7, #32]
  }

  index = ((uint16_t)findex) & 0x1ff;
 8004694:	edd7 7a08 	vldr	s15, [r7, #32]
 8004698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800469c:	ee17 3a90 	vmov	r3, s15
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a6:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80046a8:	8b7b      	ldrh	r3, [r7, #26]
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b2:	ed97 7a08 	vldr	s14, [r7, #32]
 80046b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ba:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 80046be:	8b7b      	ldrh	r3, [r7, #26]
 80046c0:	4a16      	ldr	r2, [pc, #88]	; (800471c <arm_sin_f32+0x10c>)
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 80046ca:	8b7b      	ldrh	r3, [r7, #26]
 80046cc:	3301      	adds	r3, #1
 80046ce:	4a13      	ldr	r2, [pc, #76]	; (800471c <arm_sin_f32+0x10c>)
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 80046d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80046e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80046e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046ec:	edd7 6a05 	vldr	s13, [r7, #20]
 80046f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80046f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046fc:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	ee07 3a90 	vmov	s15, r3
}
 8004706:	eeb0 0a67 	vmov.f32	s0, s15
 800470a:	372c      	adds	r7, #44	; 0x2c
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	3e22f983 	.word	0x3e22f983
 8004718:	44000000 	.word	0x44000000
 800471c:	08010690 	.word	0x08010690

08004720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004724:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <HAL_Init+0x40>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a0d      	ldr	r2, [pc, #52]	; (8004760 <HAL_Init+0x40>)
 800472a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800472e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <HAL_Init+0x40>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <HAL_Init+0x40>)
 8004736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800473a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800473c:	4b08      	ldr	r3, [pc, #32]	; (8004760 <HAL_Init+0x40>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a07      	ldr	r2, [pc, #28]	; (8004760 <HAL_Init+0x40>)
 8004742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004748:	2003      	movs	r0, #3
 800474a:	f000 f94f 	bl	80049ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800474e:	2000      	movs	r0, #0
 8004750:	f000 f808 	bl	8004764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004754:	f7fd fcae 	bl	80020b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40023c00 	.word	0x40023c00

08004764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800476c:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <HAL_InitTick+0x54>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	4b12      	ldr	r3, [pc, #72]	; (80047bc <HAL_InitTick+0x58>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	4619      	mov	r1, r3
 8004776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800477a:	fbb3 f3f1 	udiv	r3, r3, r1
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f967 	bl	8004a56 <HAL_SYSTICK_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e00e      	b.n	80047b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b0f      	cmp	r3, #15
 8004796:	d80a      	bhi.n	80047ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004798:	2200      	movs	r2, #0
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047a0:	f000 f92f 	bl	8004a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047a4:	4a06      	ldr	r2, [pc, #24]	; (80047c0 <HAL_InitTick+0x5c>)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e000      	b.n	80047b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20000000 	.word	0x20000000
 80047bc:	20000008 	.word	0x20000008
 80047c0:	20000004 	.word	0x20000004

080047c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_IncTick+0x20>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <HAL_IncTick+0x24>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4413      	add	r3, r2
 80047d4:	4a04      	ldr	r2, [pc, #16]	; (80047e8 <HAL_IncTick+0x24>)
 80047d6:	6013      	str	r3, [r2, #0]
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000008 	.word	0x20000008
 80047e8:	200007f4 	.word	0x200007f4

080047ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return uwTick;
 80047f0:	4b03      	ldr	r3, [pc, #12]	; (8004800 <HAL_GetTick+0x14>)
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	200007f4 	.word	0x200007f4

08004804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800480c:	f7ff ffee 	bl	80047ec <HAL_GetTick>
 8004810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800481c:	d005      	beq.n	800482a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800481e:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <HAL_Delay+0x44>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800482a:	bf00      	nop
 800482c:	f7ff ffde 	bl	80047ec <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	429a      	cmp	r2, r3
 800483a:	d8f7      	bhi.n	800482c <HAL_Delay+0x28>
  {
  }
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000008 	.word	0x20000008

0800484c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800485c:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <__NVIC_SetPriorityGrouping+0x44>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004868:	4013      	ands	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800487c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800487e:	4a04      	ldr	r2, [pc, #16]	; (8004890 <__NVIC_SetPriorityGrouping+0x44>)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	60d3      	str	r3, [r2, #12]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	e000ed00 	.word	0xe000ed00

08004894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004898:	4b04      	ldr	r3, [pc, #16]	; (80048ac <__NVIC_GetPriorityGrouping+0x18>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	f003 0307 	and.w	r3, r3, #7
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	e000ed00 	.word	0xe000ed00

080048b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	db0b      	blt.n	80048da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048c2:	79fb      	ldrb	r3, [r7, #7]
 80048c4:	f003 021f 	and.w	r2, r3, #31
 80048c8:	4907      	ldr	r1, [pc, #28]	; (80048e8 <__NVIC_EnableIRQ+0x38>)
 80048ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	2001      	movs	r0, #1
 80048d2:	fa00 f202 	lsl.w	r2, r0, r2
 80048d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	e000e100 	.word	0xe000e100

080048ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	6039      	str	r1, [r7, #0]
 80048f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	db0a      	blt.n	8004916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	b2da      	uxtb	r2, r3
 8004904:	490c      	ldr	r1, [pc, #48]	; (8004938 <__NVIC_SetPriority+0x4c>)
 8004906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490a:	0112      	lsls	r2, r2, #4
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	440b      	add	r3, r1
 8004910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004914:	e00a      	b.n	800492c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	4908      	ldr	r1, [pc, #32]	; (800493c <__NVIC_SetPriority+0x50>)
 800491c:	79fb      	ldrb	r3, [r7, #7]
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	3b04      	subs	r3, #4
 8004924:	0112      	lsls	r2, r2, #4
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	440b      	add	r3, r1
 800492a:	761a      	strb	r2, [r3, #24]
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	e000e100 	.word	0xe000e100
 800493c:	e000ed00 	.word	0xe000ed00

08004940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004940:	b480      	push	{r7}
 8004942:	b089      	sub	sp, #36	; 0x24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f1c3 0307 	rsb	r3, r3, #7
 800495a:	2b04      	cmp	r3, #4
 800495c:	bf28      	it	cs
 800495e:	2304      	movcs	r3, #4
 8004960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	3304      	adds	r3, #4
 8004966:	2b06      	cmp	r3, #6
 8004968:	d902      	bls.n	8004970 <NVIC_EncodePriority+0x30>
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	3b03      	subs	r3, #3
 800496e:	e000      	b.n	8004972 <NVIC_EncodePriority+0x32>
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	43da      	mvns	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	401a      	ands	r2, r3
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	fa01 f303 	lsl.w	r3, r1, r3
 8004992:	43d9      	mvns	r1, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004998:	4313      	orrs	r3, r2
         );
}
 800499a:	4618      	mov	r0, r3
 800499c:	3724      	adds	r7, #36	; 0x24
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049b8:	d301      	bcc.n	80049be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049ba:	2301      	movs	r3, #1
 80049bc:	e00f      	b.n	80049de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049be:	4a0a      	ldr	r2, [pc, #40]	; (80049e8 <SysTick_Config+0x40>)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049c6:	210f      	movs	r1, #15
 80049c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049cc:	f7ff ff8e 	bl	80048ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <SysTick_Config+0x40>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049d6:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <SysTick_Config+0x40>)
 80049d8:	2207      	movs	r2, #7
 80049da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	e000e010 	.word	0xe000e010

080049ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff ff29 	bl	800484c <__NVIC_SetPriorityGrouping>
}
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b086      	sub	sp, #24
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	4603      	mov	r3, r0
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	607a      	str	r2, [r7, #4]
 8004a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a14:	f7ff ff3e 	bl	8004894 <__NVIC_GetPriorityGrouping>
 8004a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	68b9      	ldr	r1, [r7, #8]
 8004a1e:	6978      	ldr	r0, [r7, #20]
 8004a20:	f7ff ff8e 	bl	8004940 <NVIC_EncodePriority>
 8004a24:	4602      	mov	r2, r0
 8004a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff ff5d 	bl	80048ec <__NVIC_SetPriority>
}
 8004a32:	bf00      	nop
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b082      	sub	sp, #8
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	4603      	mov	r3, r0
 8004a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff ff31 	bl	80048b0 <__NVIC_EnableIRQ>
}
 8004a4e:	bf00      	nop
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff ffa2 	bl	80049a8 <SysTick_Config>
 8004a64:	4603      	mov	r3, r0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a7c:	f7ff feb6 	bl	80047ec <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e099      	b.n	8004bc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0201 	bic.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004aac:	e00f      	b.n	8004ace <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004aae:	f7ff fe9d 	bl	80047ec <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b05      	cmp	r3, #5
 8004aba:	d908      	bls.n	8004ace <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2203      	movs	r2, #3
 8004ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e078      	b.n	8004bc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e8      	bne.n	8004aae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4b38      	ldr	r3, [pc, #224]	; (8004bc8 <HAL_DMA_Init+0x158>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d107      	bne.n	8004b38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	4313      	orrs	r3, r2
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f023 0307 	bic.w	r3, r3, #7
 8004b4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d117      	bne.n	8004b92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00e      	beq.n	8004b92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f9e9 	bl	8004f4c <DMA_CheckFifoParam>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2240      	movs	r2, #64	; 0x40
 8004b84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e016      	b.n	8004bc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f9a0 	bl	8004ee0 <DMA_CalcBaseAndBitshift>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba8:	223f      	movs	r2, #63	; 0x3f
 8004baa:	409a      	lsls	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	f010803f 	.word	0xf010803f

08004bcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004bd8:	4b92      	ldr	r3, [pc, #584]	; (8004e24 <HAL_DMA_IRQHandler+0x258>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a92      	ldr	r2, [pc, #584]	; (8004e28 <HAL_DMA_IRQHandler+0x25c>)
 8004bde:	fba2 2303 	umull	r2, r3, r2, r3
 8004be2:	0a9b      	lsrs	r3, r3, #10
 8004be4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf6:	2208      	movs	r2, #8
 8004bf8:	409a      	lsls	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d01a      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d013      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0204 	bic.w	r2, r2, #4
 8004c1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c24:	2208      	movs	r2, #8
 8004c26:	409a      	lsls	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c30:	f043 0201 	orr.w	r2, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d012      	beq.n	8004c6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00b      	beq.n	8004c6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	409a      	lsls	r2, r3
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c66:	f043 0202 	orr.w	r2, r3, #2
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c72:	2204      	movs	r2, #4
 8004c74:	409a      	lsls	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d012      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00b      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c90:	2204      	movs	r2, #4
 8004c92:	409a      	lsls	r2, r3
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9c:	f043 0204 	orr.w	r2, r3, #4
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca8:	2210      	movs	r2, #16
 8004caa:	409a      	lsls	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d043      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d03c      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc6:	2210      	movs	r2, #16
 8004cc8:	409a      	lsls	r2, r3
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d018      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d108      	bne.n	8004cfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d024      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	4798      	blx	r3
 8004cfa:	e01f      	b.n	8004d3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01b      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	4798      	blx	r3
 8004d0c:	e016      	b.n	8004d3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d107      	bne.n	8004d2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0208 	bic.w	r2, r2, #8
 8004d2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d40:	2220      	movs	r2, #32
 8004d42:	409a      	lsls	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 808e 	beq.w	8004e6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 8086 	beq.w	8004e6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d62:	2220      	movs	r2, #32
 8004d64:	409a      	lsls	r2, r3
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b05      	cmp	r3, #5
 8004d74:	d136      	bne.n	8004de4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0216 	bic.w	r2, r2, #22
 8004d84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695a      	ldr	r2, [r3, #20]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d103      	bne.n	8004da6 <HAL_DMA_IRQHandler+0x1da>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d007      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0208 	bic.w	r2, r2, #8
 8004db4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dba:	223f      	movs	r2, #63	; 0x3f
 8004dbc:	409a      	lsls	r2, r3
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d07d      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	4798      	blx	r3
        }
        return;
 8004de2:	e078      	b.n	8004ed6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d01c      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d108      	bne.n	8004e12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d030      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	4798      	blx	r3
 8004e10:	e02b      	b.n	8004e6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d027      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	4798      	blx	r3
 8004e22:	e022      	b.n	8004e6a <HAL_DMA_IRQHandler+0x29e>
 8004e24:	20000000 	.word	0x20000000
 8004e28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10f      	bne.n	8004e5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0210 	bic.w	r2, r2, #16
 8004e48:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d032      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d022      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2205      	movs	r2, #5
 8004e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0201 	bic.w	r2, r2, #1
 8004e94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d307      	bcc.n	8004eb2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f2      	bne.n	8004e96 <HAL_DMA_IRQHandler+0x2ca>
 8004eb0:	e000      	b.n	8004eb4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004eb2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	4798      	blx	r3
 8004ed4:	e000      	b.n	8004ed8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004ed6:	bf00      	nop
    }
  }
}
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop

08004ee0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	3b10      	subs	r3, #16
 8004ef0:	4a14      	ldr	r2, [pc, #80]	; (8004f44 <DMA_CalcBaseAndBitshift+0x64>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	091b      	lsrs	r3, r3, #4
 8004ef8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004efa:	4a13      	ldr	r2, [pc, #76]	; (8004f48 <DMA_CalcBaseAndBitshift+0x68>)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d909      	bls.n	8004f22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	1d1a      	adds	r2, r3, #4
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	659a      	str	r2, [r3, #88]	; 0x58
 8004f20:	e007      	b.n	8004f32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	aaaaaaab 	.word	0xaaaaaaab
 8004f48:	08010e94 	.word	0x08010e94

08004f4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d11f      	bne.n	8004fa6 <DMA_CheckFifoParam+0x5a>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d856      	bhi.n	800501a <DMA_CheckFifoParam+0xce>
 8004f6c:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <DMA_CheckFifoParam+0x28>)
 8004f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f72:	bf00      	nop
 8004f74:	08004f85 	.word	0x08004f85
 8004f78:	08004f97 	.word	0x08004f97
 8004f7c:	08004f85 	.word	0x08004f85
 8004f80:	0800501b 	.word	0x0800501b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d046      	beq.n	800501e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f94:	e043      	b.n	800501e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f9e:	d140      	bne.n	8005022 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa4:	e03d      	b.n	8005022 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fae:	d121      	bne.n	8004ff4 <DMA_CheckFifoParam+0xa8>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d837      	bhi.n	8005026 <DMA_CheckFifoParam+0xda>
 8004fb6:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <DMA_CheckFifoParam+0x70>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08004fcd 	.word	0x08004fcd
 8004fc0:	08004fd3 	.word	0x08004fd3
 8004fc4:	08004fcd 	.word	0x08004fcd
 8004fc8:	08004fe5 	.word	0x08004fe5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd0:	e030      	b.n	8005034 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d025      	beq.n	800502a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe2:	e022      	b.n	800502a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fec:	d11f      	bne.n	800502e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ff2:	e01c      	b.n	800502e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d903      	bls.n	8005002 <DMA_CheckFifoParam+0xb6>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d003      	beq.n	8005008 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005000:	e018      	b.n	8005034 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	73fb      	strb	r3, [r7, #15]
      break;
 8005006:	e015      	b.n	8005034 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00e      	beq.n	8005032 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	73fb      	strb	r3, [r7, #15]
      break;
 8005018:	e00b      	b.n	8005032 <DMA_CheckFifoParam+0xe6>
      break;
 800501a:	bf00      	nop
 800501c:	e00a      	b.n	8005034 <DMA_CheckFifoParam+0xe8>
      break;
 800501e:	bf00      	nop
 8005020:	e008      	b.n	8005034 <DMA_CheckFifoParam+0xe8>
      break;
 8005022:	bf00      	nop
 8005024:	e006      	b.n	8005034 <DMA_CheckFifoParam+0xe8>
      break;
 8005026:	bf00      	nop
 8005028:	e004      	b.n	8005034 <DMA_CheckFifoParam+0xe8>
      break;
 800502a:	bf00      	nop
 800502c:	e002      	b.n	8005034 <DMA_CheckFifoParam+0xe8>
      break;   
 800502e:	bf00      	nop
 8005030:	e000      	b.n	8005034 <DMA_CheckFifoParam+0xe8>
      break;
 8005032:	bf00      	nop
    }
  } 
  
  return status; 
 8005034:	7bfb      	ldrb	r3, [r7, #15]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop

08005044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005044:	b480      	push	{r7}
 8005046:	b089      	sub	sp, #36	; 0x24
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800504e:	2300      	movs	r3, #0
 8005050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005052:	2300      	movs	r3, #0
 8005054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005056:	2300      	movs	r3, #0
 8005058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
 800505e:	e165      	b.n	800532c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005060:	2201      	movs	r2, #1
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4013      	ands	r3, r2
 8005072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	429a      	cmp	r2, r3
 800507a:	f040 8154 	bne.w	8005326 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	2b01      	cmp	r3, #1
 8005088:	d005      	beq.n	8005096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005092:	2b02      	cmp	r3, #2
 8005094:	d130      	bne.n	80050f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	2203      	movs	r2, #3
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	43db      	mvns	r3, r3
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	4013      	ands	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	4313      	orrs	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050cc:	2201      	movs	r2, #1
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	43db      	mvns	r3, r3
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	4013      	ands	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	f003 0201 	and.w	r2, r3, #1
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f003 0303 	and.w	r3, r3, #3
 8005100:	2b03      	cmp	r3, #3
 8005102:	d017      	beq.n	8005134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	2203      	movs	r2, #3
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	43db      	mvns	r3, r3
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	4013      	ands	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4313      	orrs	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f003 0303 	and.w	r3, r3, #3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d123      	bne.n	8005188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	08da      	lsrs	r2, r3, #3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3208      	adds	r2, #8
 8005148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800514c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	220f      	movs	r2, #15
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4313      	orrs	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	08da      	lsrs	r2, r3, #3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3208      	adds	r2, #8
 8005182:	69b9      	ldr	r1, [r7, #24]
 8005184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	2203      	movs	r2, #3
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	43db      	mvns	r3, r3
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	4013      	ands	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f003 0203 	and.w	r2, r3, #3
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 80ae 	beq.w	8005326 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	4b5d      	ldr	r3, [pc, #372]	; (8005344 <HAL_GPIO_Init+0x300>)
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d2:	4a5c      	ldr	r2, [pc, #368]	; (8005344 <HAL_GPIO_Init+0x300>)
 80051d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051d8:	6453      	str	r3, [r2, #68]	; 0x44
 80051da:	4b5a      	ldr	r3, [pc, #360]	; (8005344 <HAL_GPIO_Init+0x300>)
 80051dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051e6:	4a58      	ldr	r2, [pc, #352]	; (8005348 <HAL_GPIO_Init+0x304>)
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	089b      	lsrs	r3, r3, #2
 80051ec:	3302      	adds	r3, #2
 80051ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	220f      	movs	r2, #15
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	43db      	mvns	r3, r3
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4013      	ands	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a4f      	ldr	r2, [pc, #316]	; (800534c <HAL_GPIO_Init+0x308>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d025      	beq.n	800525e <HAL_GPIO_Init+0x21a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a4e      	ldr	r2, [pc, #312]	; (8005350 <HAL_GPIO_Init+0x30c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01f      	beq.n	800525a <HAL_GPIO_Init+0x216>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a4d      	ldr	r2, [pc, #308]	; (8005354 <HAL_GPIO_Init+0x310>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d019      	beq.n	8005256 <HAL_GPIO_Init+0x212>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a4c      	ldr	r2, [pc, #304]	; (8005358 <HAL_GPIO_Init+0x314>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <HAL_GPIO_Init+0x20e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a4b      	ldr	r2, [pc, #300]	; (800535c <HAL_GPIO_Init+0x318>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00d      	beq.n	800524e <HAL_GPIO_Init+0x20a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a4a      	ldr	r2, [pc, #296]	; (8005360 <HAL_GPIO_Init+0x31c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d007      	beq.n	800524a <HAL_GPIO_Init+0x206>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a49      	ldr	r2, [pc, #292]	; (8005364 <HAL_GPIO_Init+0x320>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d101      	bne.n	8005246 <HAL_GPIO_Init+0x202>
 8005242:	2306      	movs	r3, #6
 8005244:	e00c      	b.n	8005260 <HAL_GPIO_Init+0x21c>
 8005246:	2307      	movs	r3, #7
 8005248:	e00a      	b.n	8005260 <HAL_GPIO_Init+0x21c>
 800524a:	2305      	movs	r3, #5
 800524c:	e008      	b.n	8005260 <HAL_GPIO_Init+0x21c>
 800524e:	2304      	movs	r3, #4
 8005250:	e006      	b.n	8005260 <HAL_GPIO_Init+0x21c>
 8005252:	2303      	movs	r3, #3
 8005254:	e004      	b.n	8005260 <HAL_GPIO_Init+0x21c>
 8005256:	2302      	movs	r3, #2
 8005258:	e002      	b.n	8005260 <HAL_GPIO_Init+0x21c>
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <HAL_GPIO_Init+0x21c>
 800525e:	2300      	movs	r3, #0
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	f002 0203 	and.w	r2, r2, #3
 8005266:	0092      	lsls	r2, r2, #2
 8005268:	4093      	lsls	r3, r2
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4313      	orrs	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005270:	4935      	ldr	r1, [pc, #212]	; (8005348 <HAL_GPIO_Init+0x304>)
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	089b      	lsrs	r3, r3, #2
 8005276:	3302      	adds	r3, #2
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800527e:	4b3a      	ldr	r3, [pc, #232]	; (8005368 <HAL_GPIO_Init+0x324>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	43db      	mvns	r3, r3
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	4013      	ands	r3, r2
 800528c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052a2:	4a31      	ldr	r2, [pc, #196]	; (8005368 <HAL_GPIO_Init+0x324>)
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80052a8:	4b2f      	ldr	r3, [pc, #188]	; (8005368 <HAL_GPIO_Init+0x324>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	4013      	ands	r3, r2
 80052b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052cc:	4a26      	ldr	r2, [pc, #152]	; (8005368 <HAL_GPIO_Init+0x324>)
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052d2:	4b25      	ldr	r3, [pc, #148]	; (8005368 <HAL_GPIO_Init+0x324>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	43db      	mvns	r3, r3
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	4013      	ands	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052f6:	4a1c      	ldr	r2, [pc, #112]	; (8005368 <HAL_GPIO_Init+0x324>)
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052fc:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <HAL_GPIO_Init+0x324>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	43db      	mvns	r3, r3
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	4013      	ands	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005320:	4a11      	ldr	r2, [pc, #68]	; (8005368 <HAL_GPIO_Init+0x324>)
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3301      	adds	r3, #1
 800532a:	61fb      	str	r3, [r7, #28]
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	2b0f      	cmp	r3, #15
 8005330:	f67f ae96 	bls.w	8005060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	3724      	adds	r7, #36	; 0x24
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40023800 	.word	0x40023800
 8005348:	40013800 	.word	0x40013800
 800534c:	40020000 	.word	0x40020000
 8005350:	40020400 	.word	0x40020400
 8005354:	40020800 	.word	0x40020800
 8005358:	40020c00 	.word	0x40020c00
 800535c:	40021000 	.word	0x40021000
 8005360:	40021400 	.word	0x40021400
 8005364:	40021800 	.word	0x40021800
 8005368:	40013c00 	.word	0x40013c00

0800536c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	887b      	ldrh	r3, [r7, #2]
 800537e:	4013      	ands	r3, r2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005384:	2301      	movs	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
 8005388:	e001      	b.n	800538e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800538a:	2300      	movs	r3, #0
 800538c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800538e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	807b      	strh	r3, [r7, #2]
 80053a8:	4613      	mov	r3, r2
 80053aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053ac:	787b      	ldrb	r3, [r7, #1]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053b2:	887a      	ldrh	r2, [r7, #2]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053b8:	e003      	b.n	80053c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053ba:	887b      	ldrh	r3, [r7, #2]
 80053bc:	041a      	lsls	r2, r3, #16
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	619a      	str	r2, [r3, #24]
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053e0:	887a      	ldrh	r2, [r7, #2]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4013      	ands	r3, r2
 80053e6:	041a      	lsls	r2, r3, #16
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	43d9      	mvns	r1, r3
 80053ec:	887b      	ldrh	r3, [r7, #2]
 80053ee:	400b      	ands	r3, r1
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	619a      	str	r2, [r3, #24]
}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e0cc      	b.n	80055b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005418:	4b68      	ldr	r3, [pc, #416]	; (80055bc <HAL_RCC_ClockConfig+0x1b8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d90c      	bls.n	8005440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005426:	4b65      	ldr	r3, [pc, #404]	; (80055bc <HAL_RCC_ClockConfig+0x1b8>)
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800542e:	4b63      	ldr	r3, [pc, #396]	; (80055bc <HAL_RCC_ClockConfig+0x1b8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d001      	beq.n	8005440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e0b8      	b.n	80055b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d020      	beq.n	800548e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005458:	4b59      	ldr	r3, [pc, #356]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	4a58      	ldr	r2, [pc, #352]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005462:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b00      	cmp	r3, #0
 800546e:	d005      	beq.n	800547c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005470:	4b53      	ldr	r3, [pc, #332]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	4a52      	ldr	r2, [pc, #328]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800547a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800547c:	4b50      	ldr	r3, [pc, #320]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	494d      	ldr	r1, [pc, #308]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	4313      	orrs	r3, r2
 800548c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d044      	beq.n	8005524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d107      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a2:	4b47      	ldr	r3, [pc, #284]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d119      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e07f      	b.n	80055b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d003      	beq.n	80054c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d107      	bne.n	80054d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c2:	4b3f      	ldr	r3, [pc, #252]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d109      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e06f      	b.n	80055b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d2:	4b3b      	ldr	r3, [pc, #236]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e067      	b.n	80055b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054e2:	4b37      	ldr	r3, [pc, #220]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f023 0203 	bic.w	r2, r3, #3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	4934      	ldr	r1, [pc, #208]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054f4:	f7ff f97a 	bl	80047ec <HAL_GetTick>
 80054f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fa:	e00a      	b.n	8005512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054fc:	f7ff f976 	bl	80047ec <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f241 3288 	movw	r2, #5000	; 0x1388
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e04f      	b.n	80055b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005512:	4b2b      	ldr	r3, [pc, #172]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 020c 	and.w	r2, r3, #12
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	429a      	cmp	r2, r3
 8005522:	d1eb      	bne.n	80054fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005524:	4b25      	ldr	r3, [pc, #148]	; (80055bc <HAL_RCC_ClockConfig+0x1b8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d20c      	bcs.n	800554c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005532:	4b22      	ldr	r3, [pc, #136]	; (80055bc <HAL_RCC_ClockConfig+0x1b8>)
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800553a:	4b20      	ldr	r3, [pc, #128]	; (80055bc <HAL_RCC_ClockConfig+0x1b8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d001      	beq.n	800554c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e032      	b.n	80055b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d008      	beq.n	800556a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005558:	4b19      	ldr	r3, [pc, #100]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	4916      	ldr	r1, [pc, #88]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	4313      	orrs	r3, r2
 8005568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d009      	beq.n	800558a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005576:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	490e      	ldr	r1, [pc, #56]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	4313      	orrs	r3, r2
 8005588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800558a:	f000 f855 	bl	8005638 <HAL_RCC_GetSysClockFreq>
 800558e:	4602      	mov	r2, r0
 8005590:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	091b      	lsrs	r3, r3, #4
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	490a      	ldr	r1, [pc, #40]	; (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 800559c:	5ccb      	ldrb	r3, [r1, r3]
 800559e:	fa22 f303 	lsr.w	r3, r2, r3
 80055a2:	4a09      	ldr	r2, [pc, #36]	; (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 80055a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055a6:	4b09      	ldr	r3, [pc, #36]	; (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff f8da 	bl	8004764 <HAL_InitTick>

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40023c00 	.word	0x40023c00
 80055c0:	40023800 	.word	0x40023800
 80055c4:	08010678 	.word	0x08010678
 80055c8:	20000000 	.word	0x20000000
 80055cc:	20000004 	.word	0x20000004

080055d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055d4:	4b03      	ldr	r3, [pc, #12]	; (80055e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80055d6:	681b      	ldr	r3, [r3, #0]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000000 	.word	0x20000000

080055e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055ec:	f7ff fff0 	bl	80055d0 <HAL_RCC_GetHCLKFreq>
 80055f0:	4602      	mov	r2, r0
 80055f2:	4b05      	ldr	r3, [pc, #20]	; (8005608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	0a9b      	lsrs	r3, r3, #10
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	4903      	ldr	r1, [pc, #12]	; (800560c <HAL_RCC_GetPCLK1Freq+0x24>)
 80055fe:	5ccb      	ldrb	r3, [r1, r3]
 8005600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005604:	4618      	mov	r0, r3
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40023800 	.word	0x40023800
 800560c:	08010688 	.word	0x08010688

08005610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005614:	f7ff ffdc 	bl	80055d0 <HAL_RCC_GetHCLKFreq>
 8005618:	4602      	mov	r2, r0
 800561a:	4b05      	ldr	r3, [pc, #20]	; (8005630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	0b5b      	lsrs	r3, r3, #13
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	4903      	ldr	r1, [pc, #12]	; (8005634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005626:	5ccb      	ldrb	r3, [r1, r3]
 8005628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800562c:	4618      	mov	r0, r3
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40023800 	.word	0x40023800
 8005634:	08010688 	.word	0x08010688

08005638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800563c:	b088      	sub	sp, #32
 800563e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005654:	4bce      	ldr	r3, [pc, #824]	; (8005990 <HAL_RCC_GetSysClockFreq+0x358>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 030c 	and.w	r3, r3, #12
 800565c:	2b0c      	cmp	r3, #12
 800565e:	f200 818d 	bhi.w	800597c <HAL_RCC_GetSysClockFreq+0x344>
 8005662:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <HAL_RCC_GetSysClockFreq+0x30>)
 8005664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005668:	0800569d 	.word	0x0800569d
 800566c:	0800597d 	.word	0x0800597d
 8005670:	0800597d 	.word	0x0800597d
 8005674:	0800597d 	.word	0x0800597d
 8005678:	080056a3 	.word	0x080056a3
 800567c:	0800597d 	.word	0x0800597d
 8005680:	0800597d 	.word	0x0800597d
 8005684:	0800597d 	.word	0x0800597d
 8005688:	080056a9 	.word	0x080056a9
 800568c:	0800597d 	.word	0x0800597d
 8005690:	0800597d 	.word	0x0800597d
 8005694:	0800597d 	.word	0x0800597d
 8005698:	0800581d 	.word	0x0800581d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800569c:	4bbd      	ldr	r3, [pc, #756]	; (8005994 <HAL_RCC_GetSysClockFreq+0x35c>)
 800569e:	61bb      	str	r3, [r7, #24]
       break;
 80056a0:	e16f      	b.n	8005982 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056a2:	4bbd      	ldr	r3, [pc, #756]	; (8005998 <HAL_RCC_GetSysClockFreq+0x360>)
 80056a4:	61bb      	str	r3, [r7, #24]
      break;
 80056a6:	e16c      	b.n	8005982 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056a8:	4bb9      	ldr	r3, [pc, #740]	; (8005990 <HAL_RCC_GetSysClockFreq+0x358>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056b0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056b2:	4bb7      	ldr	r3, [pc, #732]	; (8005990 <HAL_RCC_GetSysClockFreq+0x358>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d053      	beq.n	8005766 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056be:	4bb4      	ldr	r3, [pc, #720]	; (8005990 <HAL_RCC_GetSysClockFreq+0x358>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	099b      	lsrs	r3, r3, #6
 80056c4:	461a      	mov	r2, r3
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80056ce:	f04f 0100 	mov.w	r1, #0
 80056d2:	ea02 0400 	and.w	r4, r2, r0
 80056d6:	603c      	str	r4, [r7, #0]
 80056d8:	400b      	ands	r3, r1
 80056da:	607b      	str	r3, [r7, #4]
 80056dc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056e0:	4620      	mov	r0, r4
 80056e2:	4629      	mov	r1, r5
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	014b      	lsls	r3, r1, #5
 80056ee:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80056f2:	0142      	lsls	r2, r0, #5
 80056f4:	4610      	mov	r0, r2
 80056f6:	4619      	mov	r1, r3
 80056f8:	4623      	mov	r3, r4
 80056fa:	1ac0      	subs	r0, r0, r3
 80056fc:	462b      	mov	r3, r5
 80056fe:	eb61 0103 	sbc.w	r1, r1, r3
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	018b      	lsls	r3, r1, #6
 800570c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005710:	0182      	lsls	r2, r0, #6
 8005712:	1a12      	subs	r2, r2, r0
 8005714:	eb63 0301 	sbc.w	r3, r3, r1
 8005718:	f04f 0000 	mov.w	r0, #0
 800571c:	f04f 0100 	mov.w	r1, #0
 8005720:	00d9      	lsls	r1, r3, #3
 8005722:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005726:	00d0      	lsls	r0, r2, #3
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4621      	mov	r1, r4
 800572e:	1852      	adds	r2, r2, r1
 8005730:	4629      	mov	r1, r5
 8005732:	eb43 0101 	adc.w	r1, r3, r1
 8005736:	460b      	mov	r3, r1
 8005738:	f04f 0000 	mov.w	r0, #0
 800573c:	f04f 0100 	mov.w	r1, #0
 8005740:	0259      	lsls	r1, r3, #9
 8005742:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005746:	0250      	lsls	r0, r2, #9
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4610      	mov	r0, r2
 800574e:	4619      	mov	r1, r3
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	461a      	mov	r2, r3
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	f7fb fab6 	bl	8000cc8 <__aeabi_uldivmod>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4613      	mov	r3, r2
 8005762:	61fb      	str	r3, [r7, #28]
 8005764:	e04c      	b.n	8005800 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005766:	4b8a      	ldr	r3, [pc, #552]	; (8005990 <HAL_RCC_GetSysClockFreq+0x358>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	099b      	lsrs	r3, r3, #6
 800576c:	461a      	mov	r2, r3
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005776:	f04f 0100 	mov.w	r1, #0
 800577a:	ea02 0a00 	and.w	sl, r2, r0
 800577e:	ea03 0b01 	and.w	fp, r3, r1
 8005782:	4650      	mov	r0, sl
 8005784:	4659      	mov	r1, fp
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	014b      	lsls	r3, r1, #5
 8005790:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005794:	0142      	lsls	r2, r0, #5
 8005796:	4610      	mov	r0, r2
 8005798:	4619      	mov	r1, r3
 800579a:	ebb0 000a 	subs.w	r0, r0, sl
 800579e:	eb61 010b 	sbc.w	r1, r1, fp
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	018b      	lsls	r3, r1, #6
 80057ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057b0:	0182      	lsls	r2, r0, #6
 80057b2:	1a12      	subs	r2, r2, r0
 80057b4:	eb63 0301 	sbc.w	r3, r3, r1
 80057b8:	f04f 0000 	mov.w	r0, #0
 80057bc:	f04f 0100 	mov.w	r1, #0
 80057c0:	00d9      	lsls	r1, r3, #3
 80057c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057c6:	00d0      	lsls	r0, r2, #3
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	eb12 020a 	adds.w	r2, r2, sl
 80057d0:	eb43 030b 	adc.w	r3, r3, fp
 80057d4:	f04f 0000 	mov.w	r0, #0
 80057d8:	f04f 0100 	mov.w	r1, #0
 80057dc:	0299      	lsls	r1, r3, #10
 80057de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80057e2:	0290      	lsls	r0, r2, #10
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4610      	mov	r0, r2
 80057ea:	4619      	mov	r1, r3
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	461a      	mov	r2, r3
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	f7fb fa68 	bl	8000cc8 <__aeabi_uldivmod>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4613      	mov	r3, r2
 80057fe:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005800:	4b63      	ldr	r3, [pc, #396]	; (8005990 <HAL_RCC_GetSysClockFreq+0x358>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	0c1b      	lsrs	r3, r3, #16
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	3301      	adds	r3, #1
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	fbb2 f3f3 	udiv	r3, r2, r3
 8005818:	61bb      	str	r3, [r7, #24]
      break;
 800581a:	e0b2      	b.n	8005982 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800581c:	4b5c      	ldr	r3, [pc, #368]	; (8005990 <HAL_RCC_GetSysClockFreq+0x358>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005824:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005826:	4b5a      	ldr	r3, [pc, #360]	; (8005990 <HAL_RCC_GetSysClockFreq+0x358>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d04d      	beq.n	80058ce <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005832:	4b57      	ldr	r3, [pc, #348]	; (8005990 <HAL_RCC_GetSysClockFreq+0x358>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	099b      	lsrs	r3, r3, #6
 8005838:	461a      	mov	r2, r3
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005842:	f04f 0100 	mov.w	r1, #0
 8005846:	ea02 0800 	and.w	r8, r2, r0
 800584a:	ea03 0901 	and.w	r9, r3, r1
 800584e:	4640      	mov	r0, r8
 8005850:	4649      	mov	r1, r9
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	014b      	lsls	r3, r1, #5
 800585c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005860:	0142      	lsls	r2, r0, #5
 8005862:	4610      	mov	r0, r2
 8005864:	4619      	mov	r1, r3
 8005866:	ebb0 0008 	subs.w	r0, r0, r8
 800586a:	eb61 0109 	sbc.w	r1, r1, r9
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	018b      	lsls	r3, r1, #6
 8005878:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800587c:	0182      	lsls	r2, r0, #6
 800587e:	1a12      	subs	r2, r2, r0
 8005880:	eb63 0301 	sbc.w	r3, r3, r1
 8005884:	f04f 0000 	mov.w	r0, #0
 8005888:	f04f 0100 	mov.w	r1, #0
 800588c:	00d9      	lsls	r1, r3, #3
 800588e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005892:	00d0      	lsls	r0, r2, #3
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	eb12 0208 	adds.w	r2, r2, r8
 800589c:	eb43 0309 	adc.w	r3, r3, r9
 80058a0:	f04f 0000 	mov.w	r0, #0
 80058a4:	f04f 0100 	mov.w	r1, #0
 80058a8:	0259      	lsls	r1, r3, #9
 80058aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80058ae:	0250      	lsls	r0, r2, #9
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4610      	mov	r0, r2
 80058b6:	4619      	mov	r1, r3
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	f7fb fa02 	bl	8000cc8 <__aeabi_uldivmod>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4613      	mov	r3, r2
 80058ca:	61fb      	str	r3, [r7, #28]
 80058cc:	e04a      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ce:	4b30      	ldr	r3, [pc, #192]	; (8005990 <HAL_RCC_GetSysClockFreq+0x358>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	099b      	lsrs	r3, r3, #6
 80058d4:	461a      	mov	r2, r3
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80058de:	f04f 0100 	mov.w	r1, #0
 80058e2:	ea02 0400 	and.w	r4, r2, r0
 80058e6:	ea03 0501 	and.w	r5, r3, r1
 80058ea:	4620      	mov	r0, r4
 80058ec:	4629      	mov	r1, r5
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	f04f 0300 	mov.w	r3, #0
 80058f6:	014b      	lsls	r3, r1, #5
 80058f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058fc:	0142      	lsls	r2, r0, #5
 80058fe:	4610      	mov	r0, r2
 8005900:	4619      	mov	r1, r3
 8005902:	1b00      	subs	r0, r0, r4
 8005904:	eb61 0105 	sbc.w	r1, r1, r5
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	018b      	lsls	r3, r1, #6
 8005912:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005916:	0182      	lsls	r2, r0, #6
 8005918:	1a12      	subs	r2, r2, r0
 800591a:	eb63 0301 	sbc.w	r3, r3, r1
 800591e:	f04f 0000 	mov.w	r0, #0
 8005922:	f04f 0100 	mov.w	r1, #0
 8005926:	00d9      	lsls	r1, r3, #3
 8005928:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800592c:	00d0      	lsls	r0, r2, #3
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	1912      	adds	r2, r2, r4
 8005934:	eb45 0303 	adc.w	r3, r5, r3
 8005938:	f04f 0000 	mov.w	r0, #0
 800593c:	f04f 0100 	mov.w	r1, #0
 8005940:	0299      	lsls	r1, r3, #10
 8005942:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005946:	0290      	lsls	r0, r2, #10
 8005948:	4602      	mov	r2, r0
 800594a:	460b      	mov	r3, r1
 800594c:	4610      	mov	r0, r2
 800594e:	4619      	mov	r1, r3
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	461a      	mov	r2, r3
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	f7fb f9b6 	bl	8000cc8 <__aeabi_uldivmod>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4613      	mov	r3, r2
 8005962:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005964:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <HAL_RCC_GetSysClockFreq+0x358>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	0f1b      	lsrs	r3, r3, #28
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005970:	69fa      	ldr	r2, [r7, #28]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	61bb      	str	r3, [r7, #24]
      break;
 800597a:	e002      	b.n	8005982 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <HAL_RCC_GetSysClockFreq+0x35c>)
 800597e:	61bb      	str	r3, [r7, #24]
      break;
 8005980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005982:	69bb      	ldr	r3, [r7, #24]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3720      	adds	r7, #32
 8005988:	46bd      	mov	sp, r7
 800598a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800598e:	bf00      	nop
 8005990:	40023800 	.word	0x40023800
 8005994:	00f42400 	.word	0x00f42400
 8005998:	007a1200 	.word	0x007a1200

0800599c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e28d      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 8083 	beq.w	8005ac2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80059bc:	4b94      	ldr	r3, [pc, #592]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 030c 	and.w	r3, r3, #12
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d019      	beq.n	80059fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80059c8:	4b91      	ldr	r3, [pc, #580]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d106      	bne.n	80059e2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80059d4:	4b8e      	ldr	r3, [pc, #568]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059e0:	d00c      	beq.n	80059fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059e2:	4b8b      	ldr	r3, [pc, #556]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80059ea:	2b0c      	cmp	r3, #12
 80059ec:	d112      	bne.n	8005a14 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ee:	4b88      	ldr	r3, [pc, #544]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059fa:	d10b      	bne.n	8005a14 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059fc:	4b84      	ldr	r3, [pc, #528]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d05b      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x124>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d157      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e25a      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a1c:	d106      	bne.n	8005a2c <HAL_RCC_OscConfig+0x90>
 8005a1e:	4b7c      	ldr	r3, [pc, #496]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a7b      	ldr	r2, [pc, #492]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	e01d      	b.n	8005a68 <HAL_RCC_OscConfig+0xcc>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a34:	d10c      	bne.n	8005a50 <HAL_RCC_OscConfig+0xb4>
 8005a36:	4b76      	ldr	r3, [pc, #472]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a75      	ldr	r2, [pc, #468]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	4b73      	ldr	r3, [pc, #460]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a72      	ldr	r2, [pc, #456]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	e00b      	b.n	8005a68 <HAL_RCC_OscConfig+0xcc>
 8005a50:	4b6f      	ldr	r3, [pc, #444]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a6e      	ldr	r2, [pc, #440]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	4b6c      	ldr	r3, [pc, #432]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a6b      	ldr	r2, [pc, #428]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d013      	beq.n	8005a98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7fe febc 	bl	80047ec <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a78:	f7fe feb8 	bl	80047ec <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b64      	cmp	r3, #100	; 0x64
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e21f      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a8a:	4b61      	ldr	r3, [pc, #388]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f0      	beq.n	8005a78 <HAL_RCC_OscConfig+0xdc>
 8005a96:	e014      	b.n	8005ac2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a98:	f7fe fea8 	bl	80047ec <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aa0:	f7fe fea4 	bl	80047ec <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b64      	cmp	r3, #100	; 0x64
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e20b      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ab2:	4b57      	ldr	r3, [pc, #348]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f0      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x104>
 8005abe:	e000      	b.n	8005ac2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d06f      	beq.n	8005bae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ace:	4b50      	ldr	r3, [pc, #320]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 030c 	and.w	r3, r3, #12
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d017      	beq.n	8005b0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005ada:	4b4d      	ldr	r3, [pc, #308]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ae2:	2b08      	cmp	r3, #8
 8005ae4:	d105      	bne.n	8005af2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005ae6:	4b4a      	ldr	r3, [pc, #296]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00b      	beq.n	8005b0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005af2:	4b47      	ldr	r3, [pc, #284]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005afa:	2b0c      	cmp	r3, #12
 8005afc:	d11c      	bne.n	8005b38 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005afe:	4b44      	ldr	r3, [pc, #272]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d116      	bne.n	8005b38 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b0a:	4b41      	ldr	r3, [pc, #260]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d005      	beq.n	8005b22 <HAL_RCC_OscConfig+0x186>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d001      	beq.n	8005b22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e1d3      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b22:	4b3b      	ldr	r3, [pc, #236]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	4937      	ldr	r1, [pc, #220]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b36:	e03a      	b.n	8005bae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d020      	beq.n	8005b82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b40:	4b34      	ldr	r3, [pc, #208]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b46:	f7fe fe51 	bl	80047ec <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b4e:	f7fe fe4d 	bl	80047ec <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e1b4      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b60:	4b2b      	ldr	r3, [pc, #172]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0f0      	beq.n	8005b4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6c:	4b28      	ldr	r3, [pc, #160]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4925      	ldr	r1, [pc, #148]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	600b      	str	r3, [r1, #0]
 8005b80:	e015      	b.n	8005bae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b82:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <HAL_RCC_OscConfig+0x278>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b88:	f7fe fe30 	bl	80047ec <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b90:	f7fe fe2c 	bl	80047ec <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e193      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ba2:	4b1b      	ldr	r3, [pc, #108]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d036      	beq.n	8005c28 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d016      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bc2:	4b15      	ldr	r3, [pc, #84]	; (8005c18 <HAL_RCC_OscConfig+0x27c>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc8:	f7fe fe10 	bl	80047ec <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bd0:	f7fe fe0c 	bl	80047ec <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e173      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005be2:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <HAL_RCC_OscConfig+0x274>)
 8005be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f0      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x234>
 8005bee:	e01b      	b.n	8005c28 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bf0:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <HAL_RCC_OscConfig+0x27c>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf6:	f7fe fdf9 	bl	80047ec <HAL_GetTick>
 8005bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bfc:	e00e      	b.n	8005c1c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bfe:	f7fe fdf5 	bl	80047ec <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d907      	bls.n	8005c1c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e15c      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
 8005c10:	40023800 	.word	0x40023800
 8005c14:	42470000 	.word	0x42470000
 8005c18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c1c:	4b8a      	ldr	r3, [pc, #552]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1ea      	bne.n	8005bfe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8097 	beq.w	8005d64 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c36:	2300      	movs	r3, #0
 8005c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c3a:	4b83      	ldr	r3, [pc, #524]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10f      	bne.n	8005c66 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c46:	2300      	movs	r3, #0
 8005c48:	60bb      	str	r3, [r7, #8]
 8005c4a:	4b7f      	ldr	r3, [pc, #508]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	4a7e      	ldr	r2, [pc, #504]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c54:	6413      	str	r3, [r2, #64]	; 0x40
 8005c56:	4b7c      	ldr	r3, [pc, #496]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c5e:	60bb      	str	r3, [r7, #8]
 8005c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c62:	2301      	movs	r3, #1
 8005c64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c66:	4b79      	ldr	r3, [pc, #484]	; (8005e4c <HAL_RCC_OscConfig+0x4b0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d118      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c72:	4b76      	ldr	r3, [pc, #472]	; (8005e4c <HAL_RCC_OscConfig+0x4b0>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a75      	ldr	r2, [pc, #468]	; (8005e4c <HAL_RCC_OscConfig+0x4b0>)
 8005c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c7e:	f7fe fdb5 	bl	80047ec <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c86:	f7fe fdb1 	bl	80047ec <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e118      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c98:	4b6c      	ldr	r3, [pc, #432]	; (8005e4c <HAL_RCC_OscConfig+0x4b0>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f0      	beq.n	8005c86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d106      	bne.n	8005cba <HAL_RCC_OscConfig+0x31e>
 8005cac:	4b66      	ldr	r3, [pc, #408]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb0:	4a65      	ldr	r2, [pc, #404]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
 8005cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8005cb8:	e01c      	b.n	8005cf4 <HAL_RCC_OscConfig+0x358>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b05      	cmp	r3, #5
 8005cc0:	d10c      	bne.n	8005cdc <HAL_RCC_OscConfig+0x340>
 8005cc2:	4b61      	ldr	r3, [pc, #388]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc6:	4a60      	ldr	r2, [pc, #384]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005cc8:	f043 0304 	orr.w	r3, r3, #4
 8005ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8005cce:	4b5e      	ldr	r3, [pc, #376]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd2:	4a5d      	ldr	r2, [pc, #372]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005cd4:	f043 0301 	orr.w	r3, r3, #1
 8005cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8005cda:	e00b      	b.n	8005cf4 <HAL_RCC_OscConfig+0x358>
 8005cdc:	4b5a      	ldr	r3, [pc, #360]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce0:	4a59      	ldr	r2, [pc, #356]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005ce2:	f023 0301 	bic.w	r3, r3, #1
 8005ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce8:	4b57      	ldr	r3, [pc, #348]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cec:	4a56      	ldr	r2, [pc, #344]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005cee:	f023 0304 	bic.w	r3, r3, #4
 8005cf2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d015      	beq.n	8005d28 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cfc:	f7fe fd76 	bl	80047ec <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d02:	e00a      	b.n	8005d1a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d04:	f7fe fd72 	bl	80047ec <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e0d7      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d1a:	4b4b      	ldr	r3, [pc, #300]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0ee      	beq.n	8005d04 <HAL_RCC_OscConfig+0x368>
 8005d26:	e014      	b.n	8005d52 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d28:	f7fe fd60 	bl	80047ec <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d2e:	e00a      	b.n	8005d46 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d30:	f7fe fd5c 	bl	80047ec <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e0c1      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d46:	4b40      	ldr	r3, [pc, #256]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1ee      	bne.n	8005d30 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d105      	bne.n	8005d64 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d58:	4b3b      	ldr	r3, [pc, #236]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	4a3a      	ldr	r2, [pc, #232]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80ad 	beq.w	8005ec8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d6e:	4b36      	ldr	r3, [pc, #216]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 030c 	and.w	r3, r3, #12
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d060      	beq.n	8005e3c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d145      	bne.n	8005e0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d82:	4b33      	ldr	r3, [pc, #204]	; (8005e50 <HAL_RCC_OscConfig+0x4b4>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fe fd30 	bl	80047ec <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d90:	f7fe fd2c 	bl	80047ec <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e093      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da2:	4b29      	ldr	r3, [pc, #164]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1f0      	bne.n	8005d90 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69da      	ldr	r2, [r3, #28]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	019b      	lsls	r3, r3, #6
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc4:	085b      	lsrs	r3, r3, #1
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	041b      	lsls	r3, r3, #16
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	061b      	lsls	r3, r3, #24
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd8:	071b      	lsls	r3, r3, #28
 8005dda:	491b      	ldr	r1, [pc, #108]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005de0:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <HAL_RCC_OscConfig+0x4b4>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de6:	f7fe fd01 	bl	80047ec <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dee:	f7fe fcfd 	bl	80047ec <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e064      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e00:	4b11      	ldr	r3, [pc, #68]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0f0      	beq.n	8005dee <HAL_RCC_OscConfig+0x452>
 8005e0c:	e05c      	b.n	8005ec8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e0e:	4b10      	ldr	r3, [pc, #64]	; (8005e50 <HAL_RCC_OscConfig+0x4b4>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e14:	f7fe fcea 	bl	80047ec <HAL_GetTick>
 8005e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e1c:	f7fe fce6 	bl	80047ec <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e04d      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e2e:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <HAL_RCC_OscConfig+0x4ac>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1f0      	bne.n	8005e1c <HAL_RCC_OscConfig+0x480>
 8005e3a:	e045      	b.n	8005ec8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d107      	bne.n	8005e54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e040      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	40007000 	.word	0x40007000
 8005e50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e54:	4b1f      	ldr	r3, [pc, #124]	; (8005ed4 <HAL_RCC_OscConfig+0x538>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d030      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d129      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d122      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e84:	4013      	ands	r3, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d119      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9a:	085b      	lsrs	r3, r3, #1
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d10f      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d107      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d001      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40023800 	.word	0x40023800

08005ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e04c      	b.n	8005f84 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d111      	bne.n	8005f1a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f001 f972 	bl	80071e8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d102      	bne.n	8005f12 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a1f      	ldr	r2, [pc, #124]	; (8005f8c <HAL_TIM_Base_Init+0xb4>)
 8005f10:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3304      	adds	r3, #4
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	f000 fe4b 	bl	8006bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	08002241 	.word	0x08002241

08005f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d001      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e04e      	b.n	8006046 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a23      	ldr	r2, [pc, #140]	; (8006054 <HAL_TIM_Base_Start_IT+0xc4>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d022      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd2:	d01d      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a1f      	ldr	r2, [pc, #124]	; (8006058 <HAL_TIM_Base_Start_IT+0xc8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d018      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a1e      	ldr	r2, [pc, #120]	; (800605c <HAL_TIM_Base_Start_IT+0xcc>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d013      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a1c      	ldr	r2, [pc, #112]	; (8006060 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00e      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1b      	ldr	r2, [pc, #108]	; (8006064 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d009      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a19      	ldr	r2, [pc, #100]	; (8006068 <HAL_TIM_Base_Start_IT+0xd8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d004      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a18      	ldr	r2, [pc, #96]	; (800606c <HAL_TIM_Base_Start_IT+0xdc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d111      	bne.n	8006034 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b06      	cmp	r3, #6
 8006020:	d010      	beq.n	8006044 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0201 	orr.w	r2, r2, #1
 8006030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006032:	e007      	b.n	8006044 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40010000 	.word	0x40010000
 8006058:	40000400 	.word	0x40000400
 800605c:	40000800 	.word	0x40000800
 8006060:	40000c00 	.word	0x40000c00
 8006064:	40010400 	.word	0x40010400
 8006068:	40014000 	.word	0x40014000
 800606c:	40001800 	.word	0x40001800

08006070 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0201 	bic.w	r2, r2, #1
 8006086:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6a1a      	ldr	r2, [r3, #32]
 800608e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006092:	4013      	ands	r3, r2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10f      	bne.n	80060b8 <HAL_TIM_Base_Stop_IT+0x48>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6a1a      	ldr	r2, [r3, #32]
 800609e:	f240 4344 	movw	r3, #1092	; 0x444
 80060a2:	4013      	ands	r3, r2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d107      	bne.n	80060b8 <HAL_TIM_Base_Stop_IT+0x48>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e04c      	b.n	800617c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d111      	bne.n	8006112 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f001 f876 	bl	80071e8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006100:	2b00      	cmp	r3, #0
 8006102:	d102      	bne.n	800610a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <HAL_TIM_PWM_Init+0xb4>)
 8006108:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2202      	movs	r2, #2
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3304      	adds	r3, #4
 8006122:	4619      	mov	r1, r3
 8006124:	4610      	mov	r0, r2
 8006126:	f000 fd4f 	bl	8006bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	08002105 	.word	0x08002105

08006188 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d109      	bne.n	80061ac <HAL_TIM_PWM_Start+0x24>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	bf14      	ite	ne
 80061a4:	2301      	movne	r3, #1
 80061a6:	2300      	moveq	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	e022      	b.n	80061f2 <HAL_TIM_PWM_Start+0x6a>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d109      	bne.n	80061c6 <HAL_TIM_PWM_Start+0x3e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	bf14      	ite	ne
 80061be:	2301      	movne	r3, #1
 80061c0:	2300      	moveq	r3, #0
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	e015      	b.n	80061f2 <HAL_TIM_PWM_Start+0x6a>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d109      	bne.n	80061e0 <HAL_TIM_PWM_Start+0x58>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e008      	b.n	80061f2 <HAL_TIM_PWM_Start+0x6a>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	bf14      	ite	ne
 80061ec:	2301      	movne	r3, #1
 80061ee:	2300      	moveq	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e07c      	b.n	80062f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d104      	bne.n	800620a <HAL_TIM_PWM_Start+0x82>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006208:	e013      	b.n	8006232 <HAL_TIM_PWM_Start+0xaa>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b04      	cmp	r3, #4
 800620e:	d104      	bne.n	800621a <HAL_TIM_PWM_Start+0x92>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006218:	e00b      	b.n	8006232 <HAL_TIM_PWM_Start+0xaa>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b08      	cmp	r3, #8
 800621e:	d104      	bne.n	800622a <HAL_TIM_PWM_Start+0xa2>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006228:	e003      	b.n	8006232 <HAL_TIM_PWM_Start+0xaa>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2201      	movs	r2, #1
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 ffae 	bl	800719c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a2d      	ldr	r2, [pc, #180]	; (80062fc <HAL_TIM_PWM_Start+0x174>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d004      	beq.n	8006254 <HAL_TIM_PWM_Start+0xcc>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a2c      	ldr	r2, [pc, #176]	; (8006300 <HAL_TIM_PWM_Start+0x178>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d101      	bne.n	8006258 <HAL_TIM_PWM_Start+0xd0>
 8006254:	2301      	movs	r3, #1
 8006256:	e000      	b.n	800625a <HAL_TIM_PWM_Start+0xd2>
 8006258:	2300      	movs	r3, #0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800626c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a22      	ldr	r2, [pc, #136]	; (80062fc <HAL_TIM_PWM_Start+0x174>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d022      	beq.n	80062be <HAL_TIM_PWM_Start+0x136>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006280:	d01d      	beq.n	80062be <HAL_TIM_PWM_Start+0x136>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a1f      	ldr	r2, [pc, #124]	; (8006304 <HAL_TIM_PWM_Start+0x17c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d018      	beq.n	80062be <HAL_TIM_PWM_Start+0x136>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a1d      	ldr	r2, [pc, #116]	; (8006308 <HAL_TIM_PWM_Start+0x180>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d013      	beq.n	80062be <HAL_TIM_PWM_Start+0x136>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a1c      	ldr	r2, [pc, #112]	; (800630c <HAL_TIM_PWM_Start+0x184>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00e      	beq.n	80062be <HAL_TIM_PWM_Start+0x136>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a16      	ldr	r2, [pc, #88]	; (8006300 <HAL_TIM_PWM_Start+0x178>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d009      	beq.n	80062be <HAL_TIM_PWM_Start+0x136>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a18      	ldr	r2, [pc, #96]	; (8006310 <HAL_TIM_PWM_Start+0x188>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d004      	beq.n	80062be <HAL_TIM_PWM_Start+0x136>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a16      	ldr	r2, [pc, #88]	; (8006314 <HAL_TIM_PWM_Start+0x18c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d111      	bne.n	80062e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b06      	cmp	r3, #6
 80062ce:	d010      	beq.n	80062f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e0:	e007      	b.n	80062f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0201 	orr.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	40010000 	.word	0x40010000
 8006300:	40010400 	.word	0x40010400
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800
 800630c:	40000c00 	.word	0x40000c00
 8006310:	40014000 	.word	0x40014000
 8006314:	40001800 	.word	0x40001800

08006318 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e0a2      	b.n	8006472 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d111      	bne.n	800635c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 ff51 	bl	80071e8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634a:	2b00      	cmp	r3, #0
 800634c:	d102      	bne.n	8006354 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a4a      	ldr	r2, [pc, #296]	; (800647c <HAL_TIM_Encoder_Init+0x164>)
 8006352:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006372:	f023 0307 	bic.w	r3, r3, #7
 8006376:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3304      	adds	r3, #4
 8006380:	4619      	mov	r1, r3
 8006382:	4610      	mov	r0, r2
 8006384:	f000 fc20 	bl	8006bc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b0:	f023 0303 	bic.w	r3, r3, #3
 80063b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	4313      	orrs	r3, r2
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80063ce:	f023 030c 	bic.w	r3, r3, #12
 80063d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	021b      	lsls	r3, r3, #8
 80063ea:	4313      	orrs	r3, r2
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	011a      	lsls	r2, r3, #4
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	031b      	lsls	r3, r3, #12
 80063fe:	4313      	orrs	r3, r2
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800640c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006414:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	4313      	orrs	r3, r2
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4313      	orrs	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	08002149 	.word	0x08002149

08006480 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006490:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006498:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d110      	bne.n	80064d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d102      	bne.n	80064bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80064b6:	7b7b      	ldrb	r3, [r7, #13]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d001      	beq.n	80064c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e069      	b.n	8006594 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064d0:	e031      	b.n	8006536 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d110      	bne.n	80064fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064d8:	7bbb      	ldrb	r3, [r7, #14]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d102      	bne.n	80064e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064de:	7b3b      	ldrb	r3, [r7, #12]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d001      	beq.n	80064e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e055      	b.n	8006594 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064f8:	e01d      	b.n	8006536 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d108      	bne.n	8006512 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d105      	bne.n	8006512 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006506:	7b7b      	ldrb	r3, [r7, #13]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d102      	bne.n	8006512 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800650c:	7b3b      	ldrb	r3, [r7, #12]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d001      	beq.n	8006516 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e03e      	b.n	8006594 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2202      	movs	r2, #2
 800651a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2202      	movs	r2, #2
 8006522:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2202      	movs	r2, #2
 800652a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2202      	movs	r2, #2
 8006532:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <HAL_TIM_Encoder_Start+0xc4>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b04      	cmp	r3, #4
 8006540:	d008      	beq.n	8006554 <HAL_TIM_Encoder_Start+0xd4>
 8006542:	e00f      	b.n	8006564 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2201      	movs	r2, #1
 800654a:	2100      	movs	r1, #0
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fe25 	bl	800719c <TIM_CCxChannelCmd>
      break;
 8006552:	e016      	b.n	8006582 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2201      	movs	r2, #1
 800655a:	2104      	movs	r1, #4
 800655c:	4618      	mov	r0, r3
 800655e:	f000 fe1d 	bl	800719c <TIM_CCxChannelCmd>
      break;
 8006562:	e00e      	b.n	8006582 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2201      	movs	r2, #1
 800656a:	2100      	movs	r1, #0
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fe15 	bl	800719c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2201      	movs	r2, #1
 8006578:	2104      	movs	r1, #4
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fe0e 	bl	800719c <TIM_CCxChannelCmd>
      break;
 8006580:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f042 0201 	orr.w	r2, r2, #1
 8006590:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d128      	bne.n	8006604 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d121      	bne.n	8006604 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f06f 0202 	mvn.w	r2, #2
 80065c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	4798      	blx	r3
 80065e8:	e009      	b.n	80065fe <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0304 	and.w	r3, r3, #4
 800660e:	2b04      	cmp	r3, #4
 8006610:	d128      	bne.n	8006664 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b04      	cmp	r3, #4
 800661e:	d121      	bne.n	8006664 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0204 	mvn.w	r2, #4
 8006628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2202      	movs	r2, #2
 800662e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663a:	2b00      	cmp	r3, #0
 800663c:	d005      	beq.n	800664a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	4798      	blx	r3
 8006648:	e009      	b.n	800665e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	2b08      	cmp	r3, #8
 8006670:	d128      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b08      	cmp	r3, #8
 800667e:	d121      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0208 	mvn.w	r2, #8
 8006688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2204      	movs	r2, #4
 800668e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d005      	beq.n	80066aa <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	4798      	blx	r3
 80066a8:	e009      	b.n	80066be <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0310 	and.w	r3, r3, #16
 80066ce:	2b10      	cmp	r3, #16
 80066d0:	d128      	bne.n	8006724 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f003 0310 	and.w	r3, r3, #16
 80066dc:	2b10      	cmp	r3, #16
 80066de:	d121      	bne.n	8006724 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f06f 0210 	mvn.w	r2, #16
 80066e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2208      	movs	r2, #8
 80066ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d005      	beq.n	800670a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
 8006708:	e009      	b.n	800671e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b01      	cmp	r3, #1
 8006730:	d110      	bne.n	8006754 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b01      	cmp	r3, #1
 800673e:	d109      	bne.n	8006754 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0201 	mvn.w	r2, #1
 8006748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675e:	2b80      	cmp	r3, #128	; 0x80
 8006760:	d110      	bne.n	8006784 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800676c:	2b80      	cmp	r3, #128	; 0x80
 800676e:	d109      	bne.n	8006784 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d110      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	d109      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d110      	bne.n	80067e4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f003 0320 	and.w	r3, r3, #32
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d109      	bne.n	80067e4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0220 	mvn.w	r2, #32
 80067d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067e4:	bf00      	nop
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006806:	2302      	movs	r3, #2
 8006808:	e0ae      	b.n	8006968 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b0c      	cmp	r3, #12
 8006816:	f200 809f 	bhi.w	8006958 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800681a:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006820:	08006855 	.word	0x08006855
 8006824:	08006959 	.word	0x08006959
 8006828:	08006959 	.word	0x08006959
 800682c:	08006959 	.word	0x08006959
 8006830:	08006895 	.word	0x08006895
 8006834:	08006959 	.word	0x08006959
 8006838:	08006959 	.word	0x08006959
 800683c:	08006959 	.word	0x08006959
 8006840:	080068d7 	.word	0x080068d7
 8006844:	08006959 	.word	0x08006959
 8006848:	08006959 	.word	0x08006959
 800684c:	08006959 	.word	0x08006959
 8006850:	08006917 	.word	0x08006917
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fa54 	bl	8006d08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0208 	orr.w	r2, r2, #8
 800686e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0204 	bic.w	r2, r2, #4
 800687e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6999      	ldr	r1, [r3, #24]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	619a      	str	r2, [r3, #24]
      break;
 8006892:	e064      	b.n	800695e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	4618      	mov	r0, r3
 800689c:	f000 faa4 	bl	8006de8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6999      	ldr	r1, [r3, #24]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	021a      	lsls	r2, r3, #8
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	619a      	str	r2, [r3, #24]
      break;
 80068d4:	e043      	b.n	800695e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 faf9 	bl	8006ed4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69da      	ldr	r2, [r3, #28]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0208 	orr.w	r2, r2, #8
 80068f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0204 	bic.w	r2, r2, #4
 8006900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69d9      	ldr	r1, [r3, #28]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	61da      	str	r2, [r3, #28]
      break;
 8006914:	e023      	b.n	800695e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68b9      	ldr	r1, [r7, #8]
 800691c:	4618      	mov	r0, r3
 800691e:	f000 fb4d 	bl	8006fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69d9      	ldr	r1, [r3, #28]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	021a      	lsls	r2, r3, #8
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	61da      	str	r2, [r3, #28]
      break;
 8006956:	e002      	b.n	800695e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	75fb      	strb	r3, [r7, #23]
      break;
 800695c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006966:	7dfb      	ldrb	r3, [r7, #23]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006984:	2b01      	cmp	r3, #1
 8006986:	d101      	bne.n	800698c <HAL_TIM_ConfigClockSource+0x1c>
 8006988:	2302      	movs	r3, #2
 800698a:	e0b4      	b.n	8006af6 <HAL_TIM_ConfigClockSource+0x186>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c4:	d03e      	beq.n	8006a44 <HAL_TIM_ConfigClockSource+0xd4>
 80069c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ca:	f200 8087 	bhi.w	8006adc <HAL_TIM_ConfigClockSource+0x16c>
 80069ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d2:	f000 8086 	beq.w	8006ae2 <HAL_TIM_ConfigClockSource+0x172>
 80069d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069da:	d87f      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x16c>
 80069dc:	2b70      	cmp	r3, #112	; 0x70
 80069de:	d01a      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0xa6>
 80069e0:	2b70      	cmp	r3, #112	; 0x70
 80069e2:	d87b      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x16c>
 80069e4:	2b60      	cmp	r3, #96	; 0x60
 80069e6:	d050      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0x11a>
 80069e8:	2b60      	cmp	r3, #96	; 0x60
 80069ea:	d877      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x16c>
 80069ec:	2b50      	cmp	r3, #80	; 0x50
 80069ee:	d03c      	beq.n	8006a6a <HAL_TIM_ConfigClockSource+0xfa>
 80069f0:	2b50      	cmp	r3, #80	; 0x50
 80069f2:	d873      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x16c>
 80069f4:	2b40      	cmp	r3, #64	; 0x40
 80069f6:	d058      	beq.n	8006aaa <HAL_TIM_ConfigClockSource+0x13a>
 80069f8:	2b40      	cmp	r3, #64	; 0x40
 80069fa:	d86f      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x16c>
 80069fc:	2b30      	cmp	r3, #48	; 0x30
 80069fe:	d064      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x15a>
 8006a00:	2b30      	cmp	r3, #48	; 0x30
 8006a02:	d86b      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x16c>
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d060      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x15a>
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d867      	bhi.n	8006adc <HAL_TIM_ConfigClockSource+0x16c>
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d05c      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x15a>
 8006a10:	2b10      	cmp	r3, #16
 8006a12:	d05a      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x15a>
 8006a14:	e062      	b.n	8006adc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	6899      	ldr	r1, [r3, #8]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f000 fb99 	bl	800715c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	609a      	str	r2, [r3, #8]
      break;
 8006a42:	e04f      	b.n	8006ae4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6818      	ldr	r0, [r3, #0]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	6899      	ldr	r1, [r3, #8]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f000 fb82 	bl	800715c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689a      	ldr	r2, [r3, #8]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a66:	609a      	str	r2, [r3, #8]
      break;
 8006a68:	e03c      	b.n	8006ae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	6859      	ldr	r1, [r3, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	461a      	mov	r2, r3
 8006a78:	f000 faf6 	bl	8007068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2150      	movs	r1, #80	; 0x50
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fb4f 	bl	8007126 <TIM_ITRx_SetConfig>
      break;
 8006a88:	e02c      	b.n	8006ae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6818      	ldr	r0, [r3, #0]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6859      	ldr	r1, [r3, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	461a      	mov	r2, r3
 8006a98:	f000 fb15 	bl	80070c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2160      	movs	r1, #96	; 0x60
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fb3f 	bl	8007126 <TIM_ITRx_SetConfig>
      break;
 8006aa8:	e01c      	b.n	8006ae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6818      	ldr	r0, [r3, #0]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	6859      	ldr	r1, [r3, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f000 fad6 	bl	8007068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2140      	movs	r1, #64	; 0x40
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fb2f 	bl	8007126 <TIM_ITRx_SetConfig>
      break;
 8006ac8:	e00c      	b.n	8006ae4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	f000 fb26 	bl	8007126 <TIM_ITRx_SetConfig>
      break;
 8006ada:	e003      	b.n	8006ae4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	73fb      	strb	r3, [r7, #15]
      break;
 8006ae0:	e000      	b.n	8006ae4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b06:	bf00      	nop
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b2e:	bf00      	nop
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b42:	bf00      	nop
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b6a:	bf00      	nop
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006b7e:	bf00      	nop
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b083      	sub	sp, #12
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b083      	sub	sp, #12
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006bba:	bf00      	nop
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
	...

08006bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a40      	ldr	r2, [pc, #256]	; (8006cdc <TIM_Base_SetConfig+0x114>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d013      	beq.n	8006c08 <TIM_Base_SetConfig+0x40>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be6:	d00f      	beq.n	8006c08 <TIM_Base_SetConfig+0x40>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a3d      	ldr	r2, [pc, #244]	; (8006ce0 <TIM_Base_SetConfig+0x118>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00b      	beq.n	8006c08 <TIM_Base_SetConfig+0x40>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a3c      	ldr	r2, [pc, #240]	; (8006ce4 <TIM_Base_SetConfig+0x11c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d007      	beq.n	8006c08 <TIM_Base_SetConfig+0x40>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a3b      	ldr	r2, [pc, #236]	; (8006ce8 <TIM_Base_SetConfig+0x120>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d003      	beq.n	8006c08 <TIM_Base_SetConfig+0x40>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a3a      	ldr	r2, [pc, #232]	; (8006cec <TIM_Base_SetConfig+0x124>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d108      	bne.n	8006c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a2f      	ldr	r2, [pc, #188]	; (8006cdc <TIM_Base_SetConfig+0x114>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d02b      	beq.n	8006c7a <TIM_Base_SetConfig+0xb2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c28:	d027      	beq.n	8006c7a <TIM_Base_SetConfig+0xb2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a2c      	ldr	r2, [pc, #176]	; (8006ce0 <TIM_Base_SetConfig+0x118>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d023      	beq.n	8006c7a <TIM_Base_SetConfig+0xb2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a2b      	ldr	r2, [pc, #172]	; (8006ce4 <TIM_Base_SetConfig+0x11c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d01f      	beq.n	8006c7a <TIM_Base_SetConfig+0xb2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a2a      	ldr	r2, [pc, #168]	; (8006ce8 <TIM_Base_SetConfig+0x120>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d01b      	beq.n	8006c7a <TIM_Base_SetConfig+0xb2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a29      	ldr	r2, [pc, #164]	; (8006cec <TIM_Base_SetConfig+0x124>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d017      	beq.n	8006c7a <TIM_Base_SetConfig+0xb2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a28      	ldr	r2, [pc, #160]	; (8006cf0 <TIM_Base_SetConfig+0x128>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d013      	beq.n	8006c7a <TIM_Base_SetConfig+0xb2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a27      	ldr	r2, [pc, #156]	; (8006cf4 <TIM_Base_SetConfig+0x12c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00f      	beq.n	8006c7a <TIM_Base_SetConfig+0xb2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a26      	ldr	r2, [pc, #152]	; (8006cf8 <TIM_Base_SetConfig+0x130>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00b      	beq.n	8006c7a <TIM_Base_SetConfig+0xb2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a25      	ldr	r2, [pc, #148]	; (8006cfc <TIM_Base_SetConfig+0x134>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d007      	beq.n	8006c7a <TIM_Base_SetConfig+0xb2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a24      	ldr	r2, [pc, #144]	; (8006d00 <TIM_Base_SetConfig+0x138>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d003      	beq.n	8006c7a <TIM_Base_SetConfig+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a23      	ldr	r2, [pc, #140]	; (8006d04 <TIM_Base_SetConfig+0x13c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d108      	bne.n	8006c8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a0a      	ldr	r2, [pc, #40]	; (8006cdc <TIM_Base_SetConfig+0x114>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d003      	beq.n	8006cc0 <TIM_Base_SetConfig+0xf8>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a0c      	ldr	r2, [pc, #48]	; (8006cec <TIM_Base_SetConfig+0x124>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d103      	bne.n	8006cc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	691a      	ldr	r2, [r3, #16]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	615a      	str	r2, [r3, #20]
}
 8006cce:	bf00      	nop
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	40010000 	.word	0x40010000
 8006ce0:	40000400 	.word	0x40000400
 8006ce4:	40000800 	.word	0x40000800
 8006ce8:	40000c00 	.word	0x40000c00
 8006cec:	40010400 	.word	0x40010400
 8006cf0:	40014000 	.word	0x40014000
 8006cf4:	40014400 	.word	0x40014400
 8006cf8:	40014800 	.word	0x40014800
 8006cfc:	40001800 	.word	0x40001800
 8006d00:	40001c00 	.word	0x40001c00
 8006d04:	40002000 	.word	0x40002000

08006d08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	f023 0201 	bic.w	r2, r3, #1
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0303 	bic.w	r3, r3, #3
 8006d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f023 0302 	bic.w	r3, r3, #2
 8006d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a20      	ldr	r2, [pc, #128]	; (8006de0 <TIM_OC1_SetConfig+0xd8>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d003      	beq.n	8006d6c <TIM_OC1_SetConfig+0x64>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a1f      	ldr	r2, [pc, #124]	; (8006de4 <TIM_OC1_SetConfig+0xdc>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d10c      	bne.n	8006d86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f023 0308 	bic.w	r3, r3, #8
 8006d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f023 0304 	bic.w	r3, r3, #4
 8006d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a15      	ldr	r2, [pc, #84]	; (8006de0 <TIM_OC1_SetConfig+0xd8>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d003      	beq.n	8006d96 <TIM_OC1_SetConfig+0x8e>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a14      	ldr	r2, [pc, #80]	; (8006de4 <TIM_OC1_SetConfig+0xdc>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d111      	bne.n	8006dba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	621a      	str	r2, [r3, #32]
}
 8006dd4:	bf00      	nop
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	40010000 	.word	0x40010000
 8006de4:	40010400 	.word	0x40010400

08006de8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	f023 0210 	bic.w	r2, r3, #16
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f023 0320 	bic.w	r3, r3, #32
 8006e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a22      	ldr	r2, [pc, #136]	; (8006ecc <TIM_OC2_SetConfig+0xe4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d003      	beq.n	8006e50 <TIM_OC2_SetConfig+0x68>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a21      	ldr	r2, [pc, #132]	; (8006ed0 <TIM_OC2_SetConfig+0xe8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d10d      	bne.n	8006e6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	011b      	lsls	r3, r3, #4
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a17      	ldr	r2, [pc, #92]	; (8006ecc <TIM_OC2_SetConfig+0xe4>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d003      	beq.n	8006e7c <TIM_OC2_SetConfig+0x94>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a16      	ldr	r2, [pc, #88]	; (8006ed0 <TIM_OC2_SetConfig+0xe8>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d113      	bne.n	8006ea4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	621a      	str	r2, [r3, #32]
}
 8006ebe:	bf00      	nop
 8006ec0:	371c      	adds	r7, #28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	40010000 	.word	0x40010000
 8006ed0:	40010400 	.word	0x40010400

08006ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0303 	bic.w	r3, r3, #3
 8006f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a21      	ldr	r2, [pc, #132]	; (8006fb4 <TIM_OC3_SetConfig+0xe0>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d003      	beq.n	8006f3a <TIM_OC3_SetConfig+0x66>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a20      	ldr	r2, [pc, #128]	; (8006fb8 <TIM_OC3_SetConfig+0xe4>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d10d      	bne.n	8006f56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	021b      	lsls	r3, r3, #8
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a16      	ldr	r2, [pc, #88]	; (8006fb4 <TIM_OC3_SetConfig+0xe0>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d003      	beq.n	8006f66 <TIM_OC3_SetConfig+0x92>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a15      	ldr	r2, [pc, #84]	; (8006fb8 <TIM_OC3_SetConfig+0xe4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d113      	bne.n	8006f8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	011b      	lsls	r3, r3, #4
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	011b      	lsls	r3, r3, #4
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	621a      	str	r2, [r3, #32]
}
 8006fa8:	bf00      	nop
 8006faa:	371c      	adds	r7, #28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	40010000 	.word	0x40010000
 8006fb8:	40010400 	.word	0x40010400

08006fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	021b      	lsls	r3, r3, #8
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	031b      	lsls	r3, r3, #12
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	4313      	orrs	r3, r2
 8007012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a12      	ldr	r2, [pc, #72]	; (8007060 <TIM_OC4_SetConfig+0xa4>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d003      	beq.n	8007024 <TIM_OC4_SetConfig+0x68>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a11      	ldr	r2, [pc, #68]	; (8007064 <TIM_OC4_SetConfig+0xa8>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d109      	bne.n	8007038 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800702a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	019b      	lsls	r3, r3, #6
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	4313      	orrs	r3, r2
 8007036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	621a      	str	r2, [r3, #32]
}
 8007052:	bf00      	nop
 8007054:	371c      	adds	r7, #28
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40010000 	.word	0x40010000
 8007064:	40010400 	.word	0x40010400

08007068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	f023 0201 	bic.w	r2, r3, #1
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f023 030a 	bic.w	r3, r3, #10
 80070a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	621a      	str	r2, [r3, #32]
}
 80070ba:	bf00      	nop
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b087      	sub	sp, #28
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	60f8      	str	r0, [r7, #12]
 80070ce:	60b9      	str	r1, [r7, #8]
 80070d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	f023 0210 	bic.w	r2, r3, #16
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	031b      	lsls	r3, r3, #12
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007102:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	621a      	str	r2, [r3, #32]
}
 800711a:	bf00      	nop
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007126:	b480      	push	{r7}
 8007128:	b085      	sub	sp, #20
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	f043 0307 	orr.w	r3, r3, #7
 8007148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	609a      	str	r2, [r3, #8]
}
 8007150:	bf00      	nop
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
 8007168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	021a      	lsls	r2, r3, #8
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	431a      	orrs	r2, r3
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4313      	orrs	r3, r2
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	609a      	str	r2, [r3, #8]
}
 8007190:	bf00      	nop
 8007192:	371c      	adds	r7, #28
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	f003 031f 	and.w	r3, r3, #31
 80071ae:	2201      	movs	r2, #1
 80071b0:	fa02 f303 	lsl.w	r3, r2, r3
 80071b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a1a      	ldr	r2, [r3, #32]
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	43db      	mvns	r3, r3
 80071be:	401a      	ands	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6a1a      	ldr	r2, [r3, #32]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f003 031f 	and.w	r3, r3, #31
 80071ce:	6879      	ldr	r1, [r7, #4]
 80071d0:	fa01 f303 	lsl.w	r3, r1, r3
 80071d4:	431a      	orrs	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	621a      	str	r2, [r3, #32]
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
	...

080071e8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a1c      	ldr	r2, [pc, #112]	; (8007264 <TIM_ResetCallback+0x7c>)
 80071f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a1b      	ldr	r2, [pc, #108]	; (8007268 <TIM_ResetCallback+0x80>)
 80071fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a1a      	ldr	r2, [pc, #104]	; (800726c <TIM_ResetCallback+0x84>)
 8007204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a19      	ldr	r2, [pc, #100]	; (8007270 <TIM_ResetCallback+0x88>)
 800720c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a18      	ldr	r2, [pc, #96]	; (8007274 <TIM_ResetCallback+0x8c>)
 8007214:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a17      	ldr	r2, [pc, #92]	; (8007278 <TIM_ResetCallback+0x90>)
 800721c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a16      	ldr	r2, [pc, #88]	; (800727c <TIM_ResetCallback+0x94>)
 8007224:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a15      	ldr	r2, [pc, #84]	; (8007280 <TIM_ResetCallback+0x98>)
 800722c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a14      	ldr	r2, [pc, #80]	; (8007284 <TIM_ResetCallback+0x9c>)
 8007234:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a13      	ldr	r2, [pc, #76]	; (8007288 <TIM_ResetCallback+0xa0>)
 800723c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a12      	ldr	r2, [pc, #72]	; (800728c <TIM_ResetCallback+0xa4>)
 8007244:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a11      	ldr	r2, [pc, #68]	; (8007290 <TIM_ResetCallback+0xa8>)
 800724c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a10      	ldr	r2, [pc, #64]	; (8007294 <TIM_ResetCallback+0xac>)
 8007254:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	08006aff 	.word	0x08006aff
 8007268:	08006b13 	.word	0x08006b13
 800726c:	08006b8b 	.word	0x08006b8b
 8007270:	08006b9f 	.word	0x08006b9f
 8007274:	08006b3b 	.word	0x08006b3b
 8007278:	08006b4f 	.word	0x08006b4f
 800727c:	08006b27 	.word	0x08006b27
 8007280:	08006b63 	.word	0x08006b63
 8007284:	08006b77 	.word	0x08006b77
 8007288:	08006bb3 	.word	0x08006bb3
 800728c:	08007435 	.word	0x08007435
 8007290:	08007449 	.word	0x08007449
 8007294:	0800745d 	.word	0x0800745d

08007298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d101      	bne.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072ac:	2302      	movs	r3, #2
 80072ae:	e05a      	b.n	8007366 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a21      	ldr	r2, [pc, #132]	; (8007374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d022      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072fc:	d01d      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a1d      	ldr	r2, [pc, #116]	; (8007378 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d018      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a1b      	ldr	r2, [pc, #108]	; (800737c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d013      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a1a      	ldr	r2, [pc, #104]	; (8007380 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00e      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a18      	ldr	r2, [pc, #96]	; (8007384 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d009      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a17      	ldr	r2, [pc, #92]	; (8007388 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d004      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a15      	ldr	r2, [pc, #84]	; (800738c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d10c      	bne.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	4313      	orrs	r3, r2
 800734a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	40010000 	.word	0x40010000
 8007378:	40000400 	.word	0x40000400
 800737c:	40000800 	.word	0x40000800
 8007380:	40000c00 	.word	0x40000c00
 8007384:	40010400 	.word	0x40010400
 8007388:	40014000 	.word	0x40014000
 800738c:	40001800 	.word	0x40001800

08007390 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d101      	bne.n	80073ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073a8:	2302      	movs	r3, #2
 80073aa:	e03d      	b.n	8007428 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	4313      	orrs	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	4313      	orrs	r3, r2
 8007406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e04a      	b.n	8007518 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d111      	bne.n	80074b2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f9d4 	bl	8007844 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d102      	bne.n	80074aa <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a1e      	ldr	r2, [pc, #120]	; (8007520 <HAL_UART_Init+0xb0>)
 80074a8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2224      	movs	r2, #36	; 0x24
 80074b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68da      	ldr	r2, [r3, #12]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa60 	bl	8007990 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691a      	ldr	r2, [r3, #16]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	695a      	ldr	r2, [r3, #20]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2220      	movs	r2, #32
 800750a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2220      	movs	r2, #32
 8007512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	08002305 	.word	0x08002305

08007524 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08a      	sub	sp, #40	; 0x28
 8007528:	af02      	add	r7, sp, #8
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	603b      	str	r3, [r7, #0]
 8007530:	4613      	mov	r3, r2
 8007532:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b20      	cmp	r3, #32
 8007542:	d17c      	bne.n	800763e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <HAL_UART_Transmit+0x2c>
 800754a:	88fb      	ldrh	r3, [r7, #6]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e075      	b.n	8007640 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800755a:	2b01      	cmp	r3, #1
 800755c:	d101      	bne.n	8007562 <HAL_UART_Transmit+0x3e>
 800755e:	2302      	movs	r3, #2
 8007560:	e06e      	b.n	8007640 <HAL_UART_Transmit+0x11c>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2221      	movs	r2, #33	; 0x21
 8007574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007578:	f7fd f938 	bl	80047ec <HAL_GetTick>
 800757c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	88fa      	ldrh	r2, [r7, #6]
 8007582:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	88fa      	ldrh	r2, [r7, #6]
 8007588:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007592:	d108      	bne.n	80075a6 <HAL_UART_Transmit+0x82>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d104      	bne.n	80075a6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800759c:	2300      	movs	r3, #0
 800759e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	61bb      	str	r3, [r7, #24]
 80075a4:	e003      	b.n	80075ae <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075aa:	2300      	movs	r3, #0
 80075ac:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80075b6:	e02a      	b.n	800760e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2200      	movs	r2, #0
 80075c0:	2180      	movs	r1, #128	; 0x80
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 f976 	bl	80078b4 <UART_WaitOnFlagUntilTimeout>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e036      	b.n	8007640 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10b      	bne.n	80075f0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	461a      	mov	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075e6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	3302      	adds	r3, #2
 80075ec:	61bb      	str	r3, [r7, #24]
 80075ee:	e007      	b.n	8007600 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	781a      	ldrb	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	3301      	adds	r3, #1
 80075fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b01      	subs	r3, #1
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007612:	b29b      	uxth	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1cf      	bne.n	80075b8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	2200      	movs	r2, #0
 8007620:	2140      	movs	r1, #64	; 0x40
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 f946 	bl	80078b4 <UART_WaitOnFlagUntilTimeout>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e006      	b.n	8007640 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2220      	movs	r2, #32
 8007636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	e000      	b.n	8007640 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800763e:	2302      	movs	r3, #2
  }
}
 8007640:	4618      	mov	r0, r3
 8007642:	3720      	adds	r7, #32
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08a      	sub	sp, #40	; 0x28
 800764c:	af02      	add	r7, sp, #8
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	4613      	mov	r3, r2
 8007656:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b20      	cmp	r3, #32
 8007666:	f040 808c 	bne.w	8007782 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d002      	beq.n	8007676 <HAL_UART_Receive+0x2e>
 8007670:	88fb      	ldrh	r3, [r7, #6]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e084      	b.n	8007784 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007680:	2b01      	cmp	r3, #1
 8007682:	d101      	bne.n	8007688 <HAL_UART_Receive+0x40>
 8007684:	2302      	movs	r3, #2
 8007686:	e07d      	b.n	8007784 <HAL_UART_Receive+0x13c>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2222      	movs	r2, #34	; 0x22
 800769a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076a4:	f7fd f8a2 	bl	80047ec <HAL_GetTick>
 80076a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	88fa      	ldrh	r2, [r7, #6]
 80076ae:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	88fa      	ldrh	r2, [r7, #6]
 80076b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076be:	d108      	bne.n	80076d2 <HAL_UART_Receive+0x8a>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80076c8:	2300      	movs	r3, #0
 80076ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	61bb      	str	r3, [r7, #24]
 80076d0:	e003      	b.n	80076da <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80076e2:	e043      	b.n	800776c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	2200      	movs	r2, #0
 80076ec:	2120      	movs	r1, #32
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f000 f8e0 	bl	80078b4 <UART_WaitOnFlagUntilTimeout>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e042      	b.n	8007784 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10c      	bne.n	800771e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	b29b      	uxth	r3, r3
 800770c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007710:	b29a      	uxth	r2, r3
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	3302      	adds	r3, #2
 800771a:	61bb      	str	r3, [r7, #24]
 800771c:	e01f      	b.n	800775e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007726:	d007      	beq.n	8007738 <HAL_UART_Receive+0xf0>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10a      	bne.n	8007746 <HAL_UART_Receive+0xfe>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d106      	bne.n	8007746 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	b2da      	uxtb	r2, r3
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	701a      	strb	r2, [r3, #0]
 8007744:	e008      	b.n	8007758 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007752:	b2da      	uxtb	r2, r3
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	3301      	adds	r3, #1
 800775c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007762:	b29b      	uxth	r3, r3
 8007764:	3b01      	subs	r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1b6      	bne.n	80076e4 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2220      	movs	r2, #32
 800777a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	e000      	b.n	8007784 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007782:	2302      	movs	r3, #2
  }
}
 8007784:	4618      	mov	r0, r3
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a10      	ldr	r2, [pc, #64]	; (8007890 <UART_InitCallbacksToDefault+0x4c>)
 8007850:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a0f      	ldr	r2, [pc, #60]	; (8007894 <UART_InitCallbacksToDefault+0x50>)
 8007856:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a0f      	ldr	r2, [pc, #60]	; (8007898 <UART_InitCallbacksToDefault+0x54>)
 800785c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a0e      	ldr	r2, [pc, #56]	; (800789c <UART_InitCallbacksToDefault+0x58>)
 8007862:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a0e      	ldr	r2, [pc, #56]	; (80078a0 <UART_InitCallbacksToDefault+0x5c>)
 8007868:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a0d      	ldr	r2, [pc, #52]	; (80078a4 <UART_InitCallbacksToDefault+0x60>)
 800786e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a0d      	ldr	r2, [pc, #52]	; (80078a8 <UART_InitCallbacksToDefault+0x64>)
 8007874:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a0c      	ldr	r2, [pc, #48]	; (80078ac <UART_InitCallbacksToDefault+0x68>)
 800787a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a0c      	ldr	r2, [pc, #48]	; (80078b0 <UART_InitCallbacksToDefault+0x6c>)
 8007880:	669a      	str	r2, [r3, #104]	; 0x68

}
 8007882:	bf00      	nop
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	080077a1 	.word	0x080077a1
 8007894:	0800778d 	.word	0x0800778d
 8007898:	080077c9 	.word	0x080077c9
 800789c:	080077b5 	.word	0x080077b5
 80078a0:	080077dd 	.word	0x080077dd
 80078a4:	080077f1 	.word	0x080077f1
 80078a8:	08007805 	.word	0x08007805
 80078ac:	08007819 	.word	0x08007819
 80078b0:	0800782d 	.word	0x0800782d

080078b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b090      	sub	sp, #64	; 0x40
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	603b      	str	r3, [r7, #0]
 80078c0:	4613      	mov	r3, r2
 80078c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078c4:	e050      	b.n	8007968 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078cc:	d04c      	beq.n	8007968 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d007      	beq.n	80078e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80078d4:	f7fc ff8a 	bl	80047ec <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d241      	bcs.n	8007968 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	330c      	adds	r3, #12
 80078ea:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	330c      	adds	r3, #12
 8007902:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007904:	637a      	str	r2, [r7, #52]	; 0x34
 8007906:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800790a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e5      	bne.n	80078e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3314      	adds	r3, #20
 800791e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	e853 3f00 	ldrex	r3, [r3]
 8007926:	613b      	str	r3, [r7, #16]
   return(result);
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f023 0301 	bic.w	r3, r3, #1
 800792e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3314      	adds	r3, #20
 8007936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007938:	623a      	str	r2, [r7, #32]
 800793a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793c:	69f9      	ldr	r1, [r7, #28]
 800793e:	6a3a      	ldr	r2, [r7, #32]
 8007940:	e841 2300 	strex	r3, r2, [r1]
 8007944:	61bb      	str	r3, [r7, #24]
   return(result);
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1e5      	bne.n	8007918 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2220      	movs	r2, #32
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2220      	movs	r2, #32
 8007958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e00f      	b.n	8007988 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	4013      	ands	r3, r2
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	429a      	cmp	r2, r3
 8007976:	bf0c      	ite	eq
 8007978:	2301      	moveq	r3, #1
 800797a:	2300      	movne	r3, #0
 800797c:	b2db      	uxtb	r3, r3
 800797e:	461a      	mov	r2, r3
 8007980:	79fb      	ldrb	r3, [r7, #7]
 8007982:	429a      	cmp	r2, r3
 8007984:	d09f      	beq.n	80078c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3740      	adds	r7, #64	; 0x40
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	b09f      	sub	sp, #124	; 0x7c
 8007996:	af00      	add	r7, sp, #0
 8007998:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800799a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80079a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a6:	68d9      	ldr	r1, [r3, #12]
 80079a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	ea40 0301 	orr.w	r3, r0, r1
 80079b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b4:	689a      	ldr	r2, [r3, #8]
 80079b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	431a      	orrs	r2, r3
 80079bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	431a      	orrs	r2, r3
 80079c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80079ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80079d4:	f021 010c 	bic.w	r1, r1, #12
 80079d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079de:	430b      	orrs	r3, r1
 80079e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80079ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ee:	6999      	ldr	r1, [r3, #24]
 80079f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	ea40 0301 	orr.w	r3, r0, r1
 80079f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	4bc5      	ldr	r3, [pc, #788]	; (8007d14 <UART_SetConfig+0x384>)
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d004      	beq.n	8007a0e <UART_SetConfig+0x7e>
 8007a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	4bc3      	ldr	r3, [pc, #780]	; (8007d18 <UART_SetConfig+0x388>)
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d103      	bne.n	8007a16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a0e:	f7fd fdff 	bl	8005610 <HAL_RCC_GetPCLK2Freq>
 8007a12:	6778      	str	r0, [r7, #116]	; 0x74
 8007a14:	e002      	b.n	8007a1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a16:	f7fd fde7 	bl	80055e8 <HAL_RCC_GetPCLK1Freq>
 8007a1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a1e:	69db      	ldr	r3, [r3, #28]
 8007a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a24:	f040 80b6 	bne.w	8007b94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a2a:	461c      	mov	r4, r3
 8007a2c:	f04f 0500 	mov.w	r5, #0
 8007a30:	4622      	mov	r2, r4
 8007a32:	462b      	mov	r3, r5
 8007a34:	1891      	adds	r1, r2, r2
 8007a36:	6439      	str	r1, [r7, #64]	; 0x40
 8007a38:	415b      	adcs	r3, r3
 8007a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a40:	1912      	adds	r2, r2, r4
 8007a42:	eb45 0303 	adc.w	r3, r5, r3
 8007a46:	f04f 0000 	mov.w	r0, #0
 8007a4a:	f04f 0100 	mov.w	r1, #0
 8007a4e:	00d9      	lsls	r1, r3, #3
 8007a50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a54:	00d0      	lsls	r0, r2, #3
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	1911      	adds	r1, r2, r4
 8007a5c:	6639      	str	r1, [r7, #96]	; 0x60
 8007a5e:	416b      	adcs	r3, r5
 8007a60:	667b      	str	r3, [r7, #100]	; 0x64
 8007a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	461a      	mov	r2, r3
 8007a68:	f04f 0300 	mov.w	r3, #0
 8007a6c:	1891      	adds	r1, r2, r2
 8007a6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a70:	415b      	adcs	r3, r3
 8007a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007a7c:	f7f9 f924 	bl	8000cc8 <__aeabi_uldivmod>
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4ba5      	ldr	r3, [pc, #660]	; (8007d1c <UART_SetConfig+0x38c>)
 8007a86:	fba3 2302 	umull	r2, r3, r3, r2
 8007a8a:	095b      	lsrs	r3, r3, #5
 8007a8c:	011e      	lsls	r6, r3, #4
 8007a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a90:	461c      	mov	r4, r3
 8007a92:	f04f 0500 	mov.w	r5, #0
 8007a96:	4622      	mov	r2, r4
 8007a98:	462b      	mov	r3, r5
 8007a9a:	1891      	adds	r1, r2, r2
 8007a9c:	6339      	str	r1, [r7, #48]	; 0x30
 8007a9e:	415b      	adcs	r3, r3
 8007aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007aa6:	1912      	adds	r2, r2, r4
 8007aa8:	eb45 0303 	adc.w	r3, r5, r3
 8007aac:	f04f 0000 	mov.w	r0, #0
 8007ab0:	f04f 0100 	mov.w	r1, #0
 8007ab4:	00d9      	lsls	r1, r3, #3
 8007ab6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007aba:	00d0      	lsls	r0, r2, #3
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	1911      	adds	r1, r2, r4
 8007ac2:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ac4:	416b      	adcs	r3, r5
 8007ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	461a      	mov	r2, r3
 8007ace:	f04f 0300 	mov.w	r3, #0
 8007ad2:	1891      	adds	r1, r2, r2
 8007ad4:	62b9      	str	r1, [r7, #40]	; 0x28
 8007ad6:	415b      	adcs	r3, r3
 8007ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ada:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ade:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007ae2:	f7f9 f8f1 	bl	8000cc8 <__aeabi_uldivmod>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4b8c      	ldr	r3, [pc, #560]	; (8007d1c <UART_SetConfig+0x38c>)
 8007aec:	fba3 1302 	umull	r1, r3, r3, r2
 8007af0:	095b      	lsrs	r3, r3, #5
 8007af2:	2164      	movs	r1, #100	; 0x64
 8007af4:	fb01 f303 	mul.w	r3, r1, r3
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	00db      	lsls	r3, r3, #3
 8007afc:	3332      	adds	r3, #50	; 0x32
 8007afe:	4a87      	ldr	r2, [pc, #540]	; (8007d1c <UART_SetConfig+0x38c>)
 8007b00:	fba2 2303 	umull	r2, r3, r2, r3
 8007b04:	095b      	lsrs	r3, r3, #5
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b0c:	441e      	add	r6, r3
 8007b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b10:	4618      	mov	r0, r3
 8007b12:	f04f 0100 	mov.w	r1, #0
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	1894      	adds	r4, r2, r2
 8007b1c:	623c      	str	r4, [r7, #32]
 8007b1e:	415b      	adcs	r3, r3
 8007b20:	627b      	str	r3, [r7, #36]	; 0x24
 8007b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b26:	1812      	adds	r2, r2, r0
 8007b28:	eb41 0303 	adc.w	r3, r1, r3
 8007b2c:	f04f 0400 	mov.w	r4, #0
 8007b30:	f04f 0500 	mov.w	r5, #0
 8007b34:	00dd      	lsls	r5, r3, #3
 8007b36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b3a:	00d4      	lsls	r4, r2, #3
 8007b3c:	4622      	mov	r2, r4
 8007b3e:	462b      	mov	r3, r5
 8007b40:	1814      	adds	r4, r2, r0
 8007b42:	653c      	str	r4, [r7, #80]	; 0x50
 8007b44:	414b      	adcs	r3, r1
 8007b46:	657b      	str	r3, [r7, #84]	; 0x54
 8007b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	f04f 0300 	mov.w	r3, #0
 8007b52:	1891      	adds	r1, r2, r2
 8007b54:	61b9      	str	r1, [r7, #24]
 8007b56:	415b      	adcs	r3, r3
 8007b58:	61fb      	str	r3, [r7, #28]
 8007b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007b62:	f7f9 f8b1 	bl	8000cc8 <__aeabi_uldivmod>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4b6c      	ldr	r3, [pc, #432]	; (8007d1c <UART_SetConfig+0x38c>)
 8007b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b70:	095b      	lsrs	r3, r3, #5
 8007b72:	2164      	movs	r1, #100	; 0x64
 8007b74:	fb01 f303 	mul.w	r3, r1, r3
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	3332      	adds	r3, #50	; 0x32
 8007b7e:	4a67      	ldr	r2, [pc, #412]	; (8007d1c <UART_SetConfig+0x38c>)
 8007b80:	fba2 2303 	umull	r2, r3, r2, r3
 8007b84:	095b      	lsrs	r3, r3, #5
 8007b86:	f003 0207 	and.w	r2, r3, #7
 8007b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4432      	add	r2, r6
 8007b90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b92:	e0b9      	b.n	8007d08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b96:	461c      	mov	r4, r3
 8007b98:	f04f 0500 	mov.w	r5, #0
 8007b9c:	4622      	mov	r2, r4
 8007b9e:	462b      	mov	r3, r5
 8007ba0:	1891      	adds	r1, r2, r2
 8007ba2:	6139      	str	r1, [r7, #16]
 8007ba4:	415b      	adcs	r3, r3
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007bac:	1912      	adds	r2, r2, r4
 8007bae:	eb45 0303 	adc.w	r3, r5, r3
 8007bb2:	f04f 0000 	mov.w	r0, #0
 8007bb6:	f04f 0100 	mov.w	r1, #0
 8007bba:	00d9      	lsls	r1, r3, #3
 8007bbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bc0:	00d0      	lsls	r0, r2, #3
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	eb12 0804 	adds.w	r8, r2, r4
 8007bca:	eb43 0905 	adc.w	r9, r3, r5
 8007bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f04f 0100 	mov.w	r1, #0
 8007bd8:	f04f 0200 	mov.w	r2, #0
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	008b      	lsls	r3, r1, #2
 8007be2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007be6:	0082      	lsls	r2, r0, #2
 8007be8:	4640      	mov	r0, r8
 8007bea:	4649      	mov	r1, r9
 8007bec:	f7f9 f86c 	bl	8000cc8 <__aeabi_uldivmod>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4b49      	ldr	r3, [pc, #292]	; (8007d1c <UART_SetConfig+0x38c>)
 8007bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8007bfa:	095b      	lsrs	r3, r3, #5
 8007bfc:	011e      	lsls	r6, r3, #4
 8007bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c00:	4618      	mov	r0, r3
 8007c02:	f04f 0100 	mov.w	r1, #0
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	1894      	adds	r4, r2, r2
 8007c0c:	60bc      	str	r4, [r7, #8]
 8007c0e:	415b      	adcs	r3, r3
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c16:	1812      	adds	r2, r2, r0
 8007c18:	eb41 0303 	adc.w	r3, r1, r3
 8007c1c:	f04f 0400 	mov.w	r4, #0
 8007c20:	f04f 0500 	mov.w	r5, #0
 8007c24:	00dd      	lsls	r5, r3, #3
 8007c26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c2a:	00d4      	lsls	r4, r2, #3
 8007c2c:	4622      	mov	r2, r4
 8007c2e:	462b      	mov	r3, r5
 8007c30:	1814      	adds	r4, r2, r0
 8007c32:	64bc      	str	r4, [r7, #72]	; 0x48
 8007c34:	414b      	adcs	r3, r1
 8007c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f04f 0100 	mov.w	r1, #0
 8007c42:	f04f 0200 	mov.w	r2, #0
 8007c46:	f04f 0300 	mov.w	r3, #0
 8007c4a:	008b      	lsls	r3, r1, #2
 8007c4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c50:	0082      	lsls	r2, r0, #2
 8007c52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007c56:	f7f9 f837 	bl	8000cc8 <__aeabi_uldivmod>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4b2f      	ldr	r3, [pc, #188]	; (8007d1c <UART_SetConfig+0x38c>)
 8007c60:	fba3 1302 	umull	r1, r3, r3, r2
 8007c64:	095b      	lsrs	r3, r3, #5
 8007c66:	2164      	movs	r1, #100	; 0x64
 8007c68:	fb01 f303 	mul.w	r3, r1, r3
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	011b      	lsls	r3, r3, #4
 8007c70:	3332      	adds	r3, #50	; 0x32
 8007c72:	4a2a      	ldr	r2, [pc, #168]	; (8007d1c <UART_SetConfig+0x38c>)
 8007c74:	fba2 2303 	umull	r2, r3, r2, r3
 8007c78:	095b      	lsrs	r3, r3, #5
 8007c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c7e:	441e      	add	r6, r3
 8007c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c82:	4618      	mov	r0, r3
 8007c84:	f04f 0100 	mov.w	r1, #0
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	1894      	adds	r4, r2, r2
 8007c8e:	603c      	str	r4, [r7, #0]
 8007c90:	415b      	adcs	r3, r3
 8007c92:	607b      	str	r3, [r7, #4]
 8007c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c98:	1812      	adds	r2, r2, r0
 8007c9a:	eb41 0303 	adc.w	r3, r1, r3
 8007c9e:	f04f 0400 	mov.w	r4, #0
 8007ca2:	f04f 0500 	mov.w	r5, #0
 8007ca6:	00dd      	lsls	r5, r3, #3
 8007ca8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007cac:	00d4      	lsls	r4, r2, #3
 8007cae:	4622      	mov	r2, r4
 8007cb0:	462b      	mov	r3, r5
 8007cb2:	eb12 0a00 	adds.w	sl, r2, r0
 8007cb6:	eb43 0b01 	adc.w	fp, r3, r1
 8007cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f04f 0100 	mov.w	r1, #0
 8007cc4:	f04f 0200 	mov.w	r2, #0
 8007cc8:	f04f 0300 	mov.w	r3, #0
 8007ccc:	008b      	lsls	r3, r1, #2
 8007cce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007cd2:	0082      	lsls	r2, r0, #2
 8007cd4:	4650      	mov	r0, sl
 8007cd6:	4659      	mov	r1, fp
 8007cd8:	f7f8 fff6 	bl	8000cc8 <__aeabi_uldivmod>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4b0e      	ldr	r3, [pc, #56]	; (8007d1c <UART_SetConfig+0x38c>)
 8007ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	2164      	movs	r1, #100	; 0x64
 8007cea:	fb01 f303 	mul.w	r3, r1, r3
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	011b      	lsls	r3, r3, #4
 8007cf2:	3332      	adds	r3, #50	; 0x32
 8007cf4:	4a09      	ldr	r2, [pc, #36]	; (8007d1c <UART_SetConfig+0x38c>)
 8007cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfa:	095b      	lsrs	r3, r3, #5
 8007cfc:	f003 020f 	and.w	r2, r3, #15
 8007d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4432      	add	r2, r6
 8007d06:	609a      	str	r2, [r3, #8]
}
 8007d08:	bf00      	nop
 8007d0a:	377c      	adds	r7, #124	; 0x7c
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d12:	bf00      	nop
 8007d14:	40011000 	.word	0x40011000
 8007d18:	40011400 	.word	0x40011400
 8007d1c:	51eb851f 	.word	0x51eb851f

08007d20 <calloc>:
 8007d20:	4b02      	ldr	r3, [pc, #8]	; (8007d2c <calloc+0xc>)
 8007d22:	460a      	mov	r2, r1
 8007d24:	4601      	mov	r1, r0
 8007d26:	6818      	ldr	r0, [r3, #0]
 8007d28:	f000 b84a 	b.w	8007dc0 <_calloc_r>
 8007d2c:	2000000c 	.word	0x2000000c

08007d30 <__errno>:
 8007d30:	4b01      	ldr	r3, [pc, #4]	; (8007d38 <__errno+0x8>)
 8007d32:	6818      	ldr	r0, [r3, #0]
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	2000000c 	.word	0x2000000c

08007d3c <__libc_init_array>:
 8007d3c:	b570      	push	{r4, r5, r6, lr}
 8007d3e:	4d0d      	ldr	r5, [pc, #52]	; (8007d74 <__libc_init_array+0x38>)
 8007d40:	4c0d      	ldr	r4, [pc, #52]	; (8007d78 <__libc_init_array+0x3c>)
 8007d42:	1b64      	subs	r4, r4, r5
 8007d44:	10a4      	asrs	r4, r4, #2
 8007d46:	2600      	movs	r6, #0
 8007d48:	42a6      	cmp	r6, r4
 8007d4a:	d109      	bne.n	8007d60 <__libc_init_array+0x24>
 8007d4c:	4d0b      	ldr	r5, [pc, #44]	; (8007d7c <__libc_init_array+0x40>)
 8007d4e:	4c0c      	ldr	r4, [pc, #48]	; (8007d80 <__libc_init_array+0x44>)
 8007d50:	f005 fe8e 	bl	800da70 <_init>
 8007d54:	1b64      	subs	r4, r4, r5
 8007d56:	10a4      	asrs	r4, r4, #2
 8007d58:	2600      	movs	r6, #0
 8007d5a:	42a6      	cmp	r6, r4
 8007d5c:	d105      	bne.n	8007d6a <__libc_init_array+0x2e>
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
 8007d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d64:	4798      	blx	r3
 8007d66:	3601      	adds	r6, #1
 8007d68:	e7ee      	b.n	8007d48 <__libc_init_array+0xc>
 8007d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d6e:	4798      	blx	r3
 8007d70:	3601      	adds	r6, #1
 8007d72:	e7f2      	b.n	8007d5a <__libc_init_array+0x1e>
 8007d74:	08011538 	.word	0x08011538
 8007d78:	08011538 	.word	0x08011538
 8007d7c:	08011538 	.word	0x08011538
 8007d80:	0801153c 	.word	0x0801153c

08007d84 <malloc>:
 8007d84:	4b02      	ldr	r3, [pc, #8]	; (8007d90 <malloc+0xc>)
 8007d86:	4601      	mov	r1, r0
 8007d88:	6818      	ldr	r0, [r3, #0]
 8007d8a:	f000 b879 	b.w	8007e80 <_malloc_r>
 8007d8e:	bf00      	nop
 8007d90:	2000000c 	.word	0x2000000c

08007d94 <memcpy>:
 8007d94:	440a      	add	r2, r1
 8007d96:	4291      	cmp	r1, r2
 8007d98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007d9c:	d100      	bne.n	8007da0 <memcpy+0xc>
 8007d9e:	4770      	bx	lr
 8007da0:	b510      	push	{r4, lr}
 8007da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007da6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007daa:	4291      	cmp	r1, r2
 8007dac:	d1f9      	bne.n	8007da2 <memcpy+0xe>
 8007dae:	bd10      	pop	{r4, pc}

08007db0 <memset>:
 8007db0:	4402      	add	r2, r0
 8007db2:	4603      	mov	r3, r0
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d100      	bne.n	8007dba <memset+0xa>
 8007db8:	4770      	bx	lr
 8007dba:	f803 1b01 	strb.w	r1, [r3], #1
 8007dbe:	e7f9      	b.n	8007db4 <memset+0x4>

08007dc0 <_calloc_r>:
 8007dc0:	b513      	push	{r0, r1, r4, lr}
 8007dc2:	434a      	muls	r2, r1
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	9201      	str	r2, [sp, #4]
 8007dc8:	f000 f85a 	bl	8007e80 <_malloc_r>
 8007dcc:	4604      	mov	r4, r0
 8007dce:	b118      	cbz	r0, 8007dd8 <_calloc_r+0x18>
 8007dd0:	9a01      	ldr	r2, [sp, #4]
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	f7ff ffec 	bl	8007db0 <memset>
 8007dd8:	4620      	mov	r0, r4
 8007dda:	b002      	add	sp, #8
 8007ddc:	bd10      	pop	{r4, pc}
	...

08007de0 <_free_r>:
 8007de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007de2:	2900      	cmp	r1, #0
 8007de4:	d048      	beq.n	8007e78 <_free_r+0x98>
 8007de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dea:	9001      	str	r0, [sp, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f1a1 0404 	sub.w	r4, r1, #4
 8007df2:	bfb8      	it	lt
 8007df4:	18e4      	addlt	r4, r4, r3
 8007df6:	f003 fc47 	bl	800b688 <__malloc_lock>
 8007dfa:	4a20      	ldr	r2, [pc, #128]	; (8007e7c <_free_r+0x9c>)
 8007dfc:	9801      	ldr	r0, [sp, #4]
 8007dfe:	6813      	ldr	r3, [r2, #0]
 8007e00:	4615      	mov	r5, r2
 8007e02:	b933      	cbnz	r3, 8007e12 <_free_r+0x32>
 8007e04:	6063      	str	r3, [r4, #4]
 8007e06:	6014      	str	r4, [r2, #0]
 8007e08:	b003      	add	sp, #12
 8007e0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e0e:	f003 bc41 	b.w	800b694 <__malloc_unlock>
 8007e12:	42a3      	cmp	r3, r4
 8007e14:	d90b      	bls.n	8007e2e <_free_r+0x4e>
 8007e16:	6821      	ldr	r1, [r4, #0]
 8007e18:	1862      	adds	r2, r4, r1
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	bf04      	itt	eq
 8007e1e:	681a      	ldreq	r2, [r3, #0]
 8007e20:	685b      	ldreq	r3, [r3, #4]
 8007e22:	6063      	str	r3, [r4, #4]
 8007e24:	bf04      	itt	eq
 8007e26:	1852      	addeq	r2, r2, r1
 8007e28:	6022      	streq	r2, [r4, #0]
 8007e2a:	602c      	str	r4, [r5, #0]
 8007e2c:	e7ec      	b.n	8007e08 <_free_r+0x28>
 8007e2e:	461a      	mov	r2, r3
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	b10b      	cbz	r3, 8007e38 <_free_r+0x58>
 8007e34:	42a3      	cmp	r3, r4
 8007e36:	d9fa      	bls.n	8007e2e <_free_r+0x4e>
 8007e38:	6811      	ldr	r1, [r2, #0]
 8007e3a:	1855      	adds	r5, r2, r1
 8007e3c:	42a5      	cmp	r5, r4
 8007e3e:	d10b      	bne.n	8007e58 <_free_r+0x78>
 8007e40:	6824      	ldr	r4, [r4, #0]
 8007e42:	4421      	add	r1, r4
 8007e44:	1854      	adds	r4, r2, r1
 8007e46:	42a3      	cmp	r3, r4
 8007e48:	6011      	str	r1, [r2, #0]
 8007e4a:	d1dd      	bne.n	8007e08 <_free_r+0x28>
 8007e4c:	681c      	ldr	r4, [r3, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	6053      	str	r3, [r2, #4]
 8007e52:	4421      	add	r1, r4
 8007e54:	6011      	str	r1, [r2, #0]
 8007e56:	e7d7      	b.n	8007e08 <_free_r+0x28>
 8007e58:	d902      	bls.n	8007e60 <_free_r+0x80>
 8007e5a:	230c      	movs	r3, #12
 8007e5c:	6003      	str	r3, [r0, #0]
 8007e5e:	e7d3      	b.n	8007e08 <_free_r+0x28>
 8007e60:	6825      	ldr	r5, [r4, #0]
 8007e62:	1961      	adds	r1, r4, r5
 8007e64:	428b      	cmp	r3, r1
 8007e66:	bf04      	itt	eq
 8007e68:	6819      	ldreq	r1, [r3, #0]
 8007e6a:	685b      	ldreq	r3, [r3, #4]
 8007e6c:	6063      	str	r3, [r4, #4]
 8007e6e:	bf04      	itt	eq
 8007e70:	1949      	addeq	r1, r1, r5
 8007e72:	6021      	streq	r1, [r4, #0]
 8007e74:	6054      	str	r4, [r2, #4]
 8007e76:	e7c7      	b.n	8007e08 <_free_r+0x28>
 8007e78:	b003      	add	sp, #12
 8007e7a:	bd30      	pop	{r4, r5, pc}
 8007e7c:	20000200 	.word	0x20000200

08007e80 <_malloc_r>:
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	1ccd      	adds	r5, r1, #3
 8007e84:	f025 0503 	bic.w	r5, r5, #3
 8007e88:	3508      	adds	r5, #8
 8007e8a:	2d0c      	cmp	r5, #12
 8007e8c:	bf38      	it	cc
 8007e8e:	250c      	movcc	r5, #12
 8007e90:	2d00      	cmp	r5, #0
 8007e92:	4606      	mov	r6, r0
 8007e94:	db01      	blt.n	8007e9a <_malloc_r+0x1a>
 8007e96:	42a9      	cmp	r1, r5
 8007e98:	d903      	bls.n	8007ea2 <_malloc_r+0x22>
 8007e9a:	230c      	movs	r3, #12
 8007e9c:	6033      	str	r3, [r6, #0]
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ea2:	f003 fbf1 	bl	800b688 <__malloc_lock>
 8007ea6:	4921      	ldr	r1, [pc, #132]	; (8007f2c <_malloc_r+0xac>)
 8007ea8:	680a      	ldr	r2, [r1, #0]
 8007eaa:	4614      	mov	r4, r2
 8007eac:	b99c      	cbnz	r4, 8007ed6 <_malloc_r+0x56>
 8007eae:	4f20      	ldr	r7, [pc, #128]	; (8007f30 <_malloc_r+0xb0>)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	b923      	cbnz	r3, 8007ebe <_malloc_r+0x3e>
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f000 ff5a 	bl	8008d70 <_sbrk_r>
 8007ebc:	6038      	str	r0, [r7, #0]
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	f000 ff55 	bl	8008d70 <_sbrk_r>
 8007ec6:	1c43      	adds	r3, r0, #1
 8007ec8:	d123      	bne.n	8007f12 <_malloc_r+0x92>
 8007eca:	230c      	movs	r3, #12
 8007ecc:	6033      	str	r3, [r6, #0]
 8007ece:	4630      	mov	r0, r6
 8007ed0:	f003 fbe0 	bl	800b694 <__malloc_unlock>
 8007ed4:	e7e3      	b.n	8007e9e <_malloc_r+0x1e>
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	1b5b      	subs	r3, r3, r5
 8007eda:	d417      	bmi.n	8007f0c <_malloc_r+0x8c>
 8007edc:	2b0b      	cmp	r3, #11
 8007ede:	d903      	bls.n	8007ee8 <_malloc_r+0x68>
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	441c      	add	r4, r3
 8007ee4:	6025      	str	r5, [r4, #0]
 8007ee6:	e004      	b.n	8007ef2 <_malloc_r+0x72>
 8007ee8:	6863      	ldr	r3, [r4, #4]
 8007eea:	42a2      	cmp	r2, r4
 8007eec:	bf0c      	ite	eq
 8007eee:	600b      	streq	r3, [r1, #0]
 8007ef0:	6053      	strne	r3, [r2, #4]
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f003 fbce 	bl	800b694 <__malloc_unlock>
 8007ef8:	f104 000b 	add.w	r0, r4, #11
 8007efc:	1d23      	adds	r3, r4, #4
 8007efe:	f020 0007 	bic.w	r0, r0, #7
 8007f02:	1ac2      	subs	r2, r0, r3
 8007f04:	d0cc      	beq.n	8007ea0 <_malloc_r+0x20>
 8007f06:	1a1b      	subs	r3, r3, r0
 8007f08:	50a3      	str	r3, [r4, r2]
 8007f0a:	e7c9      	b.n	8007ea0 <_malloc_r+0x20>
 8007f0c:	4622      	mov	r2, r4
 8007f0e:	6864      	ldr	r4, [r4, #4]
 8007f10:	e7cc      	b.n	8007eac <_malloc_r+0x2c>
 8007f12:	1cc4      	adds	r4, r0, #3
 8007f14:	f024 0403 	bic.w	r4, r4, #3
 8007f18:	42a0      	cmp	r0, r4
 8007f1a:	d0e3      	beq.n	8007ee4 <_malloc_r+0x64>
 8007f1c:	1a21      	subs	r1, r4, r0
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f000 ff26 	bl	8008d70 <_sbrk_r>
 8007f24:	3001      	adds	r0, #1
 8007f26:	d1dd      	bne.n	8007ee4 <_malloc_r+0x64>
 8007f28:	e7cf      	b.n	8007eca <_malloc_r+0x4a>
 8007f2a:	bf00      	nop
 8007f2c:	20000200 	.word	0x20000200
 8007f30:	20000204 	.word	0x20000204

08007f34 <__cvt>:
 8007f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f38:	ec55 4b10 	vmov	r4, r5, d0
 8007f3c:	2d00      	cmp	r5, #0
 8007f3e:	460e      	mov	r6, r1
 8007f40:	4619      	mov	r1, r3
 8007f42:	462b      	mov	r3, r5
 8007f44:	bfbb      	ittet	lt
 8007f46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007f4a:	461d      	movlt	r5, r3
 8007f4c:	2300      	movge	r3, #0
 8007f4e:	232d      	movlt	r3, #45	; 0x2d
 8007f50:	700b      	strb	r3, [r1, #0]
 8007f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f58:	4691      	mov	r9, r2
 8007f5a:	f023 0820 	bic.w	r8, r3, #32
 8007f5e:	bfbc      	itt	lt
 8007f60:	4622      	movlt	r2, r4
 8007f62:	4614      	movlt	r4, r2
 8007f64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f68:	d005      	beq.n	8007f76 <__cvt+0x42>
 8007f6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f6e:	d100      	bne.n	8007f72 <__cvt+0x3e>
 8007f70:	3601      	adds	r6, #1
 8007f72:	2102      	movs	r1, #2
 8007f74:	e000      	b.n	8007f78 <__cvt+0x44>
 8007f76:	2103      	movs	r1, #3
 8007f78:	ab03      	add	r3, sp, #12
 8007f7a:	9301      	str	r3, [sp, #4]
 8007f7c:	ab02      	add	r3, sp, #8
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	ec45 4b10 	vmov	d0, r4, r5
 8007f84:	4653      	mov	r3, sl
 8007f86:	4632      	mov	r2, r6
 8007f88:	f001 ffee 	bl	8009f68 <_dtoa_r>
 8007f8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f90:	4607      	mov	r7, r0
 8007f92:	d102      	bne.n	8007f9a <__cvt+0x66>
 8007f94:	f019 0f01 	tst.w	r9, #1
 8007f98:	d022      	beq.n	8007fe0 <__cvt+0xac>
 8007f9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f9e:	eb07 0906 	add.w	r9, r7, r6
 8007fa2:	d110      	bne.n	8007fc6 <__cvt+0x92>
 8007fa4:	783b      	ldrb	r3, [r7, #0]
 8007fa6:	2b30      	cmp	r3, #48	; 0x30
 8007fa8:	d10a      	bne.n	8007fc0 <__cvt+0x8c>
 8007faa:	2200      	movs	r2, #0
 8007fac:	2300      	movs	r3, #0
 8007fae:	4620      	mov	r0, r4
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	f7f8 fda9 	bl	8000b08 <__aeabi_dcmpeq>
 8007fb6:	b918      	cbnz	r0, 8007fc0 <__cvt+0x8c>
 8007fb8:	f1c6 0601 	rsb	r6, r6, #1
 8007fbc:	f8ca 6000 	str.w	r6, [sl]
 8007fc0:	f8da 3000 	ldr.w	r3, [sl]
 8007fc4:	4499      	add	r9, r3
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4620      	mov	r0, r4
 8007fcc:	4629      	mov	r1, r5
 8007fce:	f7f8 fd9b 	bl	8000b08 <__aeabi_dcmpeq>
 8007fd2:	b108      	cbz	r0, 8007fd8 <__cvt+0xa4>
 8007fd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fd8:	2230      	movs	r2, #48	; 0x30
 8007fda:	9b03      	ldr	r3, [sp, #12]
 8007fdc:	454b      	cmp	r3, r9
 8007fde:	d307      	bcc.n	8007ff0 <__cvt+0xbc>
 8007fe0:	9b03      	ldr	r3, [sp, #12]
 8007fe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fe4:	1bdb      	subs	r3, r3, r7
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	b004      	add	sp, #16
 8007fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff0:	1c59      	adds	r1, r3, #1
 8007ff2:	9103      	str	r1, [sp, #12]
 8007ff4:	701a      	strb	r2, [r3, #0]
 8007ff6:	e7f0      	b.n	8007fda <__cvt+0xa6>

08007ff8 <__exponent>:
 8007ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2900      	cmp	r1, #0
 8007ffe:	bfb8      	it	lt
 8008000:	4249      	neglt	r1, r1
 8008002:	f803 2b02 	strb.w	r2, [r3], #2
 8008006:	bfb4      	ite	lt
 8008008:	222d      	movlt	r2, #45	; 0x2d
 800800a:	222b      	movge	r2, #43	; 0x2b
 800800c:	2909      	cmp	r1, #9
 800800e:	7042      	strb	r2, [r0, #1]
 8008010:	dd2a      	ble.n	8008068 <__exponent+0x70>
 8008012:	f10d 0407 	add.w	r4, sp, #7
 8008016:	46a4      	mov	ip, r4
 8008018:	270a      	movs	r7, #10
 800801a:	46a6      	mov	lr, r4
 800801c:	460a      	mov	r2, r1
 800801e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008022:	fb07 1516 	mls	r5, r7, r6, r1
 8008026:	3530      	adds	r5, #48	; 0x30
 8008028:	2a63      	cmp	r2, #99	; 0x63
 800802a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800802e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008032:	4631      	mov	r1, r6
 8008034:	dcf1      	bgt.n	800801a <__exponent+0x22>
 8008036:	3130      	adds	r1, #48	; 0x30
 8008038:	f1ae 0502 	sub.w	r5, lr, #2
 800803c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008040:	1c44      	adds	r4, r0, #1
 8008042:	4629      	mov	r1, r5
 8008044:	4561      	cmp	r1, ip
 8008046:	d30a      	bcc.n	800805e <__exponent+0x66>
 8008048:	f10d 0209 	add.w	r2, sp, #9
 800804c:	eba2 020e 	sub.w	r2, r2, lr
 8008050:	4565      	cmp	r5, ip
 8008052:	bf88      	it	hi
 8008054:	2200      	movhi	r2, #0
 8008056:	4413      	add	r3, r2
 8008058:	1a18      	subs	r0, r3, r0
 800805a:	b003      	add	sp, #12
 800805c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800805e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008062:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008066:	e7ed      	b.n	8008044 <__exponent+0x4c>
 8008068:	2330      	movs	r3, #48	; 0x30
 800806a:	3130      	adds	r1, #48	; 0x30
 800806c:	7083      	strb	r3, [r0, #2]
 800806e:	70c1      	strb	r1, [r0, #3]
 8008070:	1d03      	adds	r3, r0, #4
 8008072:	e7f1      	b.n	8008058 <__exponent+0x60>

08008074 <_printf_float>:
 8008074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008078:	ed2d 8b02 	vpush	{d8}
 800807c:	b08d      	sub	sp, #52	; 0x34
 800807e:	460c      	mov	r4, r1
 8008080:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008084:	4616      	mov	r6, r2
 8008086:	461f      	mov	r7, r3
 8008088:	4605      	mov	r5, r0
 800808a:	f003 fa7f 	bl	800b58c <_localeconv_r>
 800808e:	f8d0 a000 	ldr.w	sl, [r0]
 8008092:	4650      	mov	r0, sl
 8008094:	f7f8 f8bc 	bl	8000210 <strlen>
 8008098:	2300      	movs	r3, #0
 800809a:	930a      	str	r3, [sp, #40]	; 0x28
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	9305      	str	r3, [sp, #20]
 80080a0:	f8d8 3000 	ldr.w	r3, [r8]
 80080a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80080a8:	3307      	adds	r3, #7
 80080aa:	f023 0307 	bic.w	r3, r3, #7
 80080ae:	f103 0208 	add.w	r2, r3, #8
 80080b2:	f8c8 2000 	str.w	r2, [r8]
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80080be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80080c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080c6:	9307      	str	r3, [sp, #28]
 80080c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80080cc:	ee08 0a10 	vmov	s16, r0
 80080d0:	4b9f      	ldr	r3, [pc, #636]	; (8008350 <_printf_float+0x2dc>)
 80080d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080da:	f7f8 fd47 	bl	8000b6c <__aeabi_dcmpun>
 80080de:	bb88      	cbnz	r0, 8008144 <_printf_float+0xd0>
 80080e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080e4:	4b9a      	ldr	r3, [pc, #616]	; (8008350 <_printf_float+0x2dc>)
 80080e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080ea:	f7f8 fd21 	bl	8000b30 <__aeabi_dcmple>
 80080ee:	bb48      	cbnz	r0, 8008144 <_printf_float+0xd0>
 80080f0:	2200      	movs	r2, #0
 80080f2:	2300      	movs	r3, #0
 80080f4:	4640      	mov	r0, r8
 80080f6:	4649      	mov	r1, r9
 80080f8:	f7f8 fd10 	bl	8000b1c <__aeabi_dcmplt>
 80080fc:	b110      	cbz	r0, 8008104 <_printf_float+0x90>
 80080fe:	232d      	movs	r3, #45	; 0x2d
 8008100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008104:	4b93      	ldr	r3, [pc, #588]	; (8008354 <_printf_float+0x2e0>)
 8008106:	4894      	ldr	r0, [pc, #592]	; (8008358 <_printf_float+0x2e4>)
 8008108:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800810c:	bf94      	ite	ls
 800810e:	4698      	movls	r8, r3
 8008110:	4680      	movhi	r8, r0
 8008112:	2303      	movs	r3, #3
 8008114:	6123      	str	r3, [r4, #16]
 8008116:	9b05      	ldr	r3, [sp, #20]
 8008118:	f023 0204 	bic.w	r2, r3, #4
 800811c:	6022      	str	r2, [r4, #0]
 800811e:	f04f 0900 	mov.w	r9, #0
 8008122:	9700      	str	r7, [sp, #0]
 8008124:	4633      	mov	r3, r6
 8008126:	aa0b      	add	r2, sp, #44	; 0x2c
 8008128:	4621      	mov	r1, r4
 800812a:	4628      	mov	r0, r5
 800812c:	f000 f9d8 	bl	80084e0 <_printf_common>
 8008130:	3001      	adds	r0, #1
 8008132:	f040 8090 	bne.w	8008256 <_printf_float+0x1e2>
 8008136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800813a:	b00d      	add	sp, #52	; 0x34
 800813c:	ecbd 8b02 	vpop	{d8}
 8008140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008144:	4642      	mov	r2, r8
 8008146:	464b      	mov	r3, r9
 8008148:	4640      	mov	r0, r8
 800814a:	4649      	mov	r1, r9
 800814c:	f7f8 fd0e 	bl	8000b6c <__aeabi_dcmpun>
 8008150:	b140      	cbz	r0, 8008164 <_printf_float+0xf0>
 8008152:	464b      	mov	r3, r9
 8008154:	2b00      	cmp	r3, #0
 8008156:	bfbc      	itt	lt
 8008158:	232d      	movlt	r3, #45	; 0x2d
 800815a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800815e:	487f      	ldr	r0, [pc, #508]	; (800835c <_printf_float+0x2e8>)
 8008160:	4b7f      	ldr	r3, [pc, #508]	; (8008360 <_printf_float+0x2ec>)
 8008162:	e7d1      	b.n	8008108 <_printf_float+0x94>
 8008164:	6863      	ldr	r3, [r4, #4]
 8008166:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800816a:	9206      	str	r2, [sp, #24]
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	d13f      	bne.n	80081f0 <_printf_float+0x17c>
 8008170:	2306      	movs	r3, #6
 8008172:	6063      	str	r3, [r4, #4]
 8008174:	9b05      	ldr	r3, [sp, #20]
 8008176:	6861      	ldr	r1, [r4, #4]
 8008178:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800817c:	2300      	movs	r3, #0
 800817e:	9303      	str	r3, [sp, #12]
 8008180:	ab0a      	add	r3, sp, #40	; 0x28
 8008182:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008186:	ab09      	add	r3, sp, #36	; 0x24
 8008188:	ec49 8b10 	vmov	d0, r8, r9
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	6022      	str	r2, [r4, #0]
 8008190:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008194:	4628      	mov	r0, r5
 8008196:	f7ff fecd 	bl	8007f34 <__cvt>
 800819a:	9b06      	ldr	r3, [sp, #24]
 800819c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800819e:	2b47      	cmp	r3, #71	; 0x47
 80081a0:	4680      	mov	r8, r0
 80081a2:	d108      	bne.n	80081b6 <_printf_float+0x142>
 80081a4:	1cc8      	adds	r0, r1, #3
 80081a6:	db02      	blt.n	80081ae <_printf_float+0x13a>
 80081a8:	6863      	ldr	r3, [r4, #4]
 80081aa:	4299      	cmp	r1, r3
 80081ac:	dd41      	ble.n	8008232 <_printf_float+0x1be>
 80081ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80081b2:	fa5f fb8b 	uxtb.w	fp, fp
 80081b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80081ba:	d820      	bhi.n	80081fe <_printf_float+0x18a>
 80081bc:	3901      	subs	r1, #1
 80081be:	465a      	mov	r2, fp
 80081c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081c4:	9109      	str	r1, [sp, #36]	; 0x24
 80081c6:	f7ff ff17 	bl	8007ff8 <__exponent>
 80081ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081cc:	1813      	adds	r3, r2, r0
 80081ce:	2a01      	cmp	r2, #1
 80081d0:	4681      	mov	r9, r0
 80081d2:	6123      	str	r3, [r4, #16]
 80081d4:	dc02      	bgt.n	80081dc <_printf_float+0x168>
 80081d6:	6822      	ldr	r2, [r4, #0]
 80081d8:	07d2      	lsls	r2, r2, #31
 80081da:	d501      	bpl.n	80081e0 <_printf_float+0x16c>
 80081dc:	3301      	adds	r3, #1
 80081de:	6123      	str	r3, [r4, #16]
 80081e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d09c      	beq.n	8008122 <_printf_float+0xae>
 80081e8:	232d      	movs	r3, #45	; 0x2d
 80081ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081ee:	e798      	b.n	8008122 <_printf_float+0xae>
 80081f0:	9a06      	ldr	r2, [sp, #24]
 80081f2:	2a47      	cmp	r2, #71	; 0x47
 80081f4:	d1be      	bne.n	8008174 <_printf_float+0x100>
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1bc      	bne.n	8008174 <_printf_float+0x100>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e7b9      	b.n	8008172 <_printf_float+0xfe>
 80081fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008202:	d118      	bne.n	8008236 <_printf_float+0x1c2>
 8008204:	2900      	cmp	r1, #0
 8008206:	6863      	ldr	r3, [r4, #4]
 8008208:	dd0b      	ble.n	8008222 <_printf_float+0x1ae>
 800820a:	6121      	str	r1, [r4, #16]
 800820c:	b913      	cbnz	r3, 8008214 <_printf_float+0x1a0>
 800820e:	6822      	ldr	r2, [r4, #0]
 8008210:	07d0      	lsls	r0, r2, #31
 8008212:	d502      	bpl.n	800821a <_printf_float+0x1a6>
 8008214:	3301      	adds	r3, #1
 8008216:	440b      	add	r3, r1
 8008218:	6123      	str	r3, [r4, #16]
 800821a:	65a1      	str	r1, [r4, #88]	; 0x58
 800821c:	f04f 0900 	mov.w	r9, #0
 8008220:	e7de      	b.n	80081e0 <_printf_float+0x16c>
 8008222:	b913      	cbnz	r3, 800822a <_printf_float+0x1b6>
 8008224:	6822      	ldr	r2, [r4, #0]
 8008226:	07d2      	lsls	r2, r2, #31
 8008228:	d501      	bpl.n	800822e <_printf_float+0x1ba>
 800822a:	3302      	adds	r3, #2
 800822c:	e7f4      	b.n	8008218 <_printf_float+0x1a4>
 800822e:	2301      	movs	r3, #1
 8008230:	e7f2      	b.n	8008218 <_printf_float+0x1a4>
 8008232:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008238:	4299      	cmp	r1, r3
 800823a:	db05      	blt.n	8008248 <_printf_float+0x1d4>
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	6121      	str	r1, [r4, #16]
 8008240:	07d8      	lsls	r0, r3, #31
 8008242:	d5ea      	bpl.n	800821a <_printf_float+0x1a6>
 8008244:	1c4b      	adds	r3, r1, #1
 8008246:	e7e7      	b.n	8008218 <_printf_float+0x1a4>
 8008248:	2900      	cmp	r1, #0
 800824a:	bfd4      	ite	le
 800824c:	f1c1 0202 	rsble	r2, r1, #2
 8008250:	2201      	movgt	r2, #1
 8008252:	4413      	add	r3, r2
 8008254:	e7e0      	b.n	8008218 <_printf_float+0x1a4>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	055a      	lsls	r2, r3, #21
 800825a:	d407      	bmi.n	800826c <_printf_float+0x1f8>
 800825c:	6923      	ldr	r3, [r4, #16]
 800825e:	4642      	mov	r2, r8
 8008260:	4631      	mov	r1, r6
 8008262:	4628      	mov	r0, r5
 8008264:	47b8      	blx	r7
 8008266:	3001      	adds	r0, #1
 8008268:	d12c      	bne.n	80082c4 <_printf_float+0x250>
 800826a:	e764      	b.n	8008136 <_printf_float+0xc2>
 800826c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008270:	f240 80e0 	bls.w	8008434 <_printf_float+0x3c0>
 8008274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008278:	2200      	movs	r2, #0
 800827a:	2300      	movs	r3, #0
 800827c:	f7f8 fc44 	bl	8000b08 <__aeabi_dcmpeq>
 8008280:	2800      	cmp	r0, #0
 8008282:	d034      	beq.n	80082ee <_printf_float+0x27a>
 8008284:	4a37      	ldr	r2, [pc, #220]	; (8008364 <_printf_float+0x2f0>)
 8008286:	2301      	movs	r3, #1
 8008288:	4631      	mov	r1, r6
 800828a:	4628      	mov	r0, r5
 800828c:	47b8      	blx	r7
 800828e:	3001      	adds	r0, #1
 8008290:	f43f af51 	beq.w	8008136 <_printf_float+0xc2>
 8008294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008298:	429a      	cmp	r2, r3
 800829a:	db02      	blt.n	80082a2 <_printf_float+0x22e>
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	07d8      	lsls	r0, r3, #31
 80082a0:	d510      	bpl.n	80082c4 <_printf_float+0x250>
 80082a2:	ee18 3a10 	vmov	r3, s16
 80082a6:	4652      	mov	r2, sl
 80082a8:	4631      	mov	r1, r6
 80082aa:	4628      	mov	r0, r5
 80082ac:	47b8      	blx	r7
 80082ae:	3001      	adds	r0, #1
 80082b0:	f43f af41 	beq.w	8008136 <_printf_float+0xc2>
 80082b4:	f04f 0800 	mov.w	r8, #0
 80082b8:	f104 091a 	add.w	r9, r4, #26
 80082bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082be:	3b01      	subs	r3, #1
 80082c0:	4543      	cmp	r3, r8
 80082c2:	dc09      	bgt.n	80082d8 <_printf_float+0x264>
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	079b      	lsls	r3, r3, #30
 80082c8:	f100 8105 	bmi.w	80084d6 <_printf_float+0x462>
 80082cc:	68e0      	ldr	r0, [r4, #12]
 80082ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082d0:	4298      	cmp	r0, r3
 80082d2:	bfb8      	it	lt
 80082d4:	4618      	movlt	r0, r3
 80082d6:	e730      	b.n	800813a <_printf_float+0xc6>
 80082d8:	2301      	movs	r3, #1
 80082da:	464a      	mov	r2, r9
 80082dc:	4631      	mov	r1, r6
 80082de:	4628      	mov	r0, r5
 80082e0:	47b8      	blx	r7
 80082e2:	3001      	adds	r0, #1
 80082e4:	f43f af27 	beq.w	8008136 <_printf_float+0xc2>
 80082e8:	f108 0801 	add.w	r8, r8, #1
 80082ec:	e7e6      	b.n	80082bc <_printf_float+0x248>
 80082ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	dc39      	bgt.n	8008368 <_printf_float+0x2f4>
 80082f4:	4a1b      	ldr	r2, [pc, #108]	; (8008364 <_printf_float+0x2f0>)
 80082f6:	2301      	movs	r3, #1
 80082f8:	4631      	mov	r1, r6
 80082fa:	4628      	mov	r0, r5
 80082fc:	47b8      	blx	r7
 80082fe:	3001      	adds	r0, #1
 8008300:	f43f af19 	beq.w	8008136 <_printf_float+0xc2>
 8008304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008308:	4313      	orrs	r3, r2
 800830a:	d102      	bne.n	8008312 <_printf_float+0x29e>
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	07d9      	lsls	r1, r3, #31
 8008310:	d5d8      	bpl.n	80082c4 <_printf_float+0x250>
 8008312:	ee18 3a10 	vmov	r3, s16
 8008316:	4652      	mov	r2, sl
 8008318:	4631      	mov	r1, r6
 800831a:	4628      	mov	r0, r5
 800831c:	47b8      	blx	r7
 800831e:	3001      	adds	r0, #1
 8008320:	f43f af09 	beq.w	8008136 <_printf_float+0xc2>
 8008324:	f04f 0900 	mov.w	r9, #0
 8008328:	f104 0a1a 	add.w	sl, r4, #26
 800832c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800832e:	425b      	negs	r3, r3
 8008330:	454b      	cmp	r3, r9
 8008332:	dc01      	bgt.n	8008338 <_printf_float+0x2c4>
 8008334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008336:	e792      	b.n	800825e <_printf_float+0x1ea>
 8008338:	2301      	movs	r3, #1
 800833a:	4652      	mov	r2, sl
 800833c:	4631      	mov	r1, r6
 800833e:	4628      	mov	r0, r5
 8008340:	47b8      	blx	r7
 8008342:	3001      	adds	r0, #1
 8008344:	f43f aef7 	beq.w	8008136 <_printf_float+0xc2>
 8008348:	f109 0901 	add.w	r9, r9, #1
 800834c:	e7ee      	b.n	800832c <_printf_float+0x2b8>
 800834e:	bf00      	nop
 8008350:	7fefffff 	.word	0x7fefffff
 8008354:	08010ea0 	.word	0x08010ea0
 8008358:	08010ea4 	.word	0x08010ea4
 800835c:	08010eac 	.word	0x08010eac
 8008360:	08010ea8 	.word	0x08010ea8
 8008364:	08010eb0 	.word	0x08010eb0
 8008368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800836a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800836c:	429a      	cmp	r2, r3
 800836e:	bfa8      	it	ge
 8008370:	461a      	movge	r2, r3
 8008372:	2a00      	cmp	r2, #0
 8008374:	4691      	mov	r9, r2
 8008376:	dc37      	bgt.n	80083e8 <_printf_float+0x374>
 8008378:	f04f 0b00 	mov.w	fp, #0
 800837c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008380:	f104 021a 	add.w	r2, r4, #26
 8008384:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008386:	9305      	str	r3, [sp, #20]
 8008388:	eba3 0309 	sub.w	r3, r3, r9
 800838c:	455b      	cmp	r3, fp
 800838e:	dc33      	bgt.n	80083f8 <_printf_float+0x384>
 8008390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008394:	429a      	cmp	r2, r3
 8008396:	db3b      	blt.n	8008410 <_printf_float+0x39c>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	07da      	lsls	r2, r3, #31
 800839c:	d438      	bmi.n	8008410 <_printf_float+0x39c>
 800839e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083a0:	9b05      	ldr	r3, [sp, #20]
 80083a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	eba2 0901 	sub.w	r9, r2, r1
 80083aa:	4599      	cmp	r9, r3
 80083ac:	bfa8      	it	ge
 80083ae:	4699      	movge	r9, r3
 80083b0:	f1b9 0f00 	cmp.w	r9, #0
 80083b4:	dc35      	bgt.n	8008422 <_printf_float+0x3ae>
 80083b6:	f04f 0800 	mov.w	r8, #0
 80083ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083be:	f104 0a1a 	add.w	sl, r4, #26
 80083c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083c6:	1a9b      	subs	r3, r3, r2
 80083c8:	eba3 0309 	sub.w	r3, r3, r9
 80083cc:	4543      	cmp	r3, r8
 80083ce:	f77f af79 	ble.w	80082c4 <_printf_float+0x250>
 80083d2:	2301      	movs	r3, #1
 80083d4:	4652      	mov	r2, sl
 80083d6:	4631      	mov	r1, r6
 80083d8:	4628      	mov	r0, r5
 80083da:	47b8      	blx	r7
 80083dc:	3001      	adds	r0, #1
 80083de:	f43f aeaa 	beq.w	8008136 <_printf_float+0xc2>
 80083e2:	f108 0801 	add.w	r8, r8, #1
 80083e6:	e7ec      	b.n	80083c2 <_printf_float+0x34e>
 80083e8:	4613      	mov	r3, r2
 80083ea:	4631      	mov	r1, r6
 80083ec:	4642      	mov	r2, r8
 80083ee:	4628      	mov	r0, r5
 80083f0:	47b8      	blx	r7
 80083f2:	3001      	adds	r0, #1
 80083f4:	d1c0      	bne.n	8008378 <_printf_float+0x304>
 80083f6:	e69e      	b.n	8008136 <_printf_float+0xc2>
 80083f8:	2301      	movs	r3, #1
 80083fa:	4631      	mov	r1, r6
 80083fc:	4628      	mov	r0, r5
 80083fe:	9205      	str	r2, [sp, #20]
 8008400:	47b8      	blx	r7
 8008402:	3001      	adds	r0, #1
 8008404:	f43f ae97 	beq.w	8008136 <_printf_float+0xc2>
 8008408:	9a05      	ldr	r2, [sp, #20]
 800840a:	f10b 0b01 	add.w	fp, fp, #1
 800840e:	e7b9      	b.n	8008384 <_printf_float+0x310>
 8008410:	ee18 3a10 	vmov	r3, s16
 8008414:	4652      	mov	r2, sl
 8008416:	4631      	mov	r1, r6
 8008418:	4628      	mov	r0, r5
 800841a:	47b8      	blx	r7
 800841c:	3001      	adds	r0, #1
 800841e:	d1be      	bne.n	800839e <_printf_float+0x32a>
 8008420:	e689      	b.n	8008136 <_printf_float+0xc2>
 8008422:	9a05      	ldr	r2, [sp, #20]
 8008424:	464b      	mov	r3, r9
 8008426:	4442      	add	r2, r8
 8008428:	4631      	mov	r1, r6
 800842a:	4628      	mov	r0, r5
 800842c:	47b8      	blx	r7
 800842e:	3001      	adds	r0, #1
 8008430:	d1c1      	bne.n	80083b6 <_printf_float+0x342>
 8008432:	e680      	b.n	8008136 <_printf_float+0xc2>
 8008434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008436:	2a01      	cmp	r2, #1
 8008438:	dc01      	bgt.n	800843e <_printf_float+0x3ca>
 800843a:	07db      	lsls	r3, r3, #31
 800843c:	d538      	bpl.n	80084b0 <_printf_float+0x43c>
 800843e:	2301      	movs	r3, #1
 8008440:	4642      	mov	r2, r8
 8008442:	4631      	mov	r1, r6
 8008444:	4628      	mov	r0, r5
 8008446:	47b8      	blx	r7
 8008448:	3001      	adds	r0, #1
 800844a:	f43f ae74 	beq.w	8008136 <_printf_float+0xc2>
 800844e:	ee18 3a10 	vmov	r3, s16
 8008452:	4652      	mov	r2, sl
 8008454:	4631      	mov	r1, r6
 8008456:	4628      	mov	r0, r5
 8008458:	47b8      	blx	r7
 800845a:	3001      	adds	r0, #1
 800845c:	f43f ae6b 	beq.w	8008136 <_printf_float+0xc2>
 8008460:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008464:	2200      	movs	r2, #0
 8008466:	2300      	movs	r3, #0
 8008468:	f7f8 fb4e 	bl	8000b08 <__aeabi_dcmpeq>
 800846c:	b9d8      	cbnz	r0, 80084a6 <_printf_float+0x432>
 800846e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008470:	f108 0201 	add.w	r2, r8, #1
 8008474:	3b01      	subs	r3, #1
 8008476:	4631      	mov	r1, r6
 8008478:	4628      	mov	r0, r5
 800847a:	47b8      	blx	r7
 800847c:	3001      	adds	r0, #1
 800847e:	d10e      	bne.n	800849e <_printf_float+0x42a>
 8008480:	e659      	b.n	8008136 <_printf_float+0xc2>
 8008482:	2301      	movs	r3, #1
 8008484:	4652      	mov	r2, sl
 8008486:	4631      	mov	r1, r6
 8008488:	4628      	mov	r0, r5
 800848a:	47b8      	blx	r7
 800848c:	3001      	adds	r0, #1
 800848e:	f43f ae52 	beq.w	8008136 <_printf_float+0xc2>
 8008492:	f108 0801 	add.w	r8, r8, #1
 8008496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008498:	3b01      	subs	r3, #1
 800849a:	4543      	cmp	r3, r8
 800849c:	dcf1      	bgt.n	8008482 <_printf_float+0x40e>
 800849e:	464b      	mov	r3, r9
 80084a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084a4:	e6dc      	b.n	8008260 <_printf_float+0x1ec>
 80084a6:	f04f 0800 	mov.w	r8, #0
 80084aa:	f104 0a1a 	add.w	sl, r4, #26
 80084ae:	e7f2      	b.n	8008496 <_printf_float+0x422>
 80084b0:	2301      	movs	r3, #1
 80084b2:	4642      	mov	r2, r8
 80084b4:	e7df      	b.n	8008476 <_printf_float+0x402>
 80084b6:	2301      	movs	r3, #1
 80084b8:	464a      	mov	r2, r9
 80084ba:	4631      	mov	r1, r6
 80084bc:	4628      	mov	r0, r5
 80084be:	47b8      	blx	r7
 80084c0:	3001      	adds	r0, #1
 80084c2:	f43f ae38 	beq.w	8008136 <_printf_float+0xc2>
 80084c6:	f108 0801 	add.w	r8, r8, #1
 80084ca:	68e3      	ldr	r3, [r4, #12]
 80084cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084ce:	1a5b      	subs	r3, r3, r1
 80084d0:	4543      	cmp	r3, r8
 80084d2:	dcf0      	bgt.n	80084b6 <_printf_float+0x442>
 80084d4:	e6fa      	b.n	80082cc <_printf_float+0x258>
 80084d6:	f04f 0800 	mov.w	r8, #0
 80084da:	f104 0919 	add.w	r9, r4, #25
 80084de:	e7f4      	b.n	80084ca <_printf_float+0x456>

080084e0 <_printf_common>:
 80084e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e4:	4616      	mov	r6, r2
 80084e6:	4699      	mov	r9, r3
 80084e8:	688a      	ldr	r2, [r1, #8]
 80084ea:	690b      	ldr	r3, [r1, #16]
 80084ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084f0:	4293      	cmp	r3, r2
 80084f2:	bfb8      	it	lt
 80084f4:	4613      	movlt	r3, r2
 80084f6:	6033      	str	r3, [r6, #0]
 80084f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084fc:	4607      	mov	r7, r0
 80084fe:	460c      	mov	r4, r1
 8008500:	b10a      	cbz	r2, 8008506 <_printf_common+0x26>
 8008502:	3301      	adds	r3, #1
 8008504:	6033      	str	r3, [r6, #0]
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	0699      	lsls	r1, r3, #26
 800850a:	bf42      	ittt	mi
 800850c:	6833      	ldrmi	r3, [r6, #0]
 800850e:	3302      	addmi	r3, #2
 8008510:	6033      	strmi	r3, [r6, #0]
 8008512:	6825      	ldr	r5, [r4, #0]
 8008514:	f015 0506 	ands.w	r5, r5, #6
 8008518:	d106      	bne.n	8008528 <_printf_common+0x48>
 800851a:	f104 0a19 	add.w	sl, r4, #25
 800851e:	68e3      	ldr	r3, [r4, #12]
 8008520:	6832      	ldr	r2, [r6, #0]
 8008522:	1a9b      	subs	r3, r3, r2
 8008524:	42ab      	cmp	r3, r5
 8008526:	dc26      	bgt.n	8008576 <_printf_common+0x96>
 8008528:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800852c:	1e13      	subs	r3, r2, #0
 800852e:	6822      	ldr	r2, [r4, #0]
 8008530:	bf18      	it	ne
 8008532:	2301      	movne	r3, #1
 8008534:	0692      	lsls	r2, r2, #26
 8008536:	d42b      	bmi.n	8008590 <_printf_common+0xb0>
 8008538:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800853c:	4649      	mov	r1, r9
 800853e:	4638      	mov	r0, r7
 8008540:	47c0      	blx	r8
 8008542:	3001      	adds	r0, #1
 8008544:	d01e      	beq.n	8008584 <_printf_common+0xa4>
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	68e5      	ldr	r5, [r4, #12]
 800854a:	6832      	ldr	r2, [r6, #0]
 800854c:	f003 0306 	and.w	r3, r3, #6
 8008550:	2b04      	cmp	r3, #4
 8008552:	bf08      	it	eq
 8008554:	1aad      	subeq	r5, r5, r2
 8008556:	68a3      	ldr	r3, [r4, #8]
 8008558:	6922      	ldr	r2, [r4, #16]
 800855a:	bf0c      	ite	eq
 800855c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008560:	2500      	movne	r5, #0
 8008562:	4293      	cmp	r3, r2
 8008564:	bfc4      	itt	gt
 8008566:	1a9b      	subgt	r3, r3, r2
 8008568:	18ed      	addgt	r5, r5, r3
 800856a:	2600      	movs	r6, #0
 800856c:	341a      	adds	r4, #26
 800856e:	42b5      	cmp	r5, r6
 8008570:	d11a      	bne.n	80085a8 <_printf_common+0xc8>
 8008572:	2000      	movs	r0, #0
 8008574:	e008      	b.n	8008588 <_printf_common+0xa8>
 8008576:	2301      	movs	r3, #1
 8008578:	4652      	mov	r2, sl
 800857a:	4649      	mov	r1, r9
 800857c:	4638      	mov	r0, r7
 800857e:	47c0      	blx	r8
 8008580:	3001      	adds	r0, #1
 8008582:	d103      	bne.n	800858c <_printf_common+0xac>
 8008584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800858c:	3501      	adds	r5, #1
 800858e:	e7c6      	b.n	800851e <_printf_common+0x3e>
 8008590:	18e1      	adds	r1, r4, r3
 8008592:	1c5a      	adds	r2, r3, #1
 8008594:	2030      	movs	r0, #48	; 0x30
 8008596:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800859a:	4422      	add	r2, r4
 800859c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085a4:	3302      	adds	r3, #2
 80085a6:	e7c7      	b.n	8008538 <_printf_common+0x58>
 80085a8:	2301      	movs	r3, #1
 80085aa:	4622      	mov	r2, r4
 80085ac:	4649      	mov	r1, r9
 80085ae:	4638      	mov	r0, r7
 80085b0:	47c0      	blx	r8
 80085b2:	3001      	adds	r0, #1
 80085b4:	d0e6      	beq.n	8008584 <_printf_common+0xa4>
 80085b6:	3601      	adds	r6, #1
 80085b8:	e7d9      	b.n	800856e <_printf_common+0x8e>
	...

080085bc <_printf_i>:
 80085bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085c0:	460c      	mov	r4, r1
 80085c2:	4691      	mov	r9, r2
 80085c4:	7e27      	ldrb	r7, [r4, #24]
 80085c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80085c8:	2f78      	cmp	r7, #120	; 0x78
 80085ca:	4680      	mov	r8, r0
 80085cc:	469a      	mov	sl, r3
 80085ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085d2:	d807      	bhi.n	80085e4 <_printf_i+0x28>
 80085d4:	2f62      	cmp	r7, #98	; 0x62
 80085d6:	d80a      	bhi.n	80085ee <_printf_i+0x32>
 80085d8:	2f00      	cmp	r7, #0
 80085da:	f000 80d8 	beq.w	800878e <_printf_i+0x1d2>
 80085de:	2f58      	cmp	r7, #88	; 0x58
 80085e0:	f000 80a3 	beq.w	800872a <_printf_i+0x16e>
 80085e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80085e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085ec:	e03a      	b.n	8008664 <_printf_i+0xa8>
 80085ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085f2:	2b15      	cmp	r3, #21
 80085f4:	d8f6      	bhi.n	80085e4 <_printf_i+0x28>
 80085f6:	a001      	add	r0, pc, #4	; (adr r0, 80085fc <_printf_i+0x40>)
 80085f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80085fc:	08008655 	.word	0x08008655
 8008600:	08008669 	.word	0x08008669
 8008604:	080085e5 	.word	0x080085e5
 8008608:	080085e5 	.word	0x080085e5
 800860c:	080085e5 	.word	0x080085e5
 8008610:	080085e5 	.word	0x080085e5
 8008614:	08008669 	.word	0x08008669
 8008618:	080085e5 	.word	0x080085e5
 800861c:	080085e5 	.word	0x080085e5
 8008620:	080085e5 	.word	0x080085e5
 8008624:	080085e5 	.word	0x080085e5
 8008628:	08008775 	.word	0x08008775
 800862c:	08008699 	.word	0x08008699
 8008630:	08008757 	.word	0x08008757
 8008634:	080085e5 	.word	0x080085e5
 8008638:	080085e5 	.word	0x080085e5
 800863c:	08008797 	.word	0x08008797
 8008640:	080085e5 	.word	0x080085e5
 8008644:	08008699 	.word	0x08008699
 8008648:	080085e5 	.word	0x080085e5
 800864c:	080085e5 	.word	0x080085e5
 8008650:	0800875f 	.word	0x0800875f
 8008654:	680b      	ldr	r3, [r1, #0]
 8008656:	1d1a      	adds	r2, r3, #4
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	600a      	str	r2, [r1, #0]
 800865c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008664:	2301      	movs	r3, #1
 8008666:	e0a3      	b.n	80087b0 <_printf_i+0x1f4>
 8008668:	6825      	ldr	r5, [r4, #0]
 800866a:	6808      	ldr	r0, [r1, #0]
 800866c:	062e      	lsls	r6, r5, #24
 800866e:	f100 0304 	add.w	r3, r0, #4
 8008672:	d50a      	bpl.n	800868a <_printf_i+0xce>
 8008674:	6805      	ldr	r5, [r0, #0]
 8008676:	600b      	str	r3, [r1, #0]
 8008678:	2d00      	cmp	r5, #0
 800867a:	da03      	bge.n	8008684 <_printf_i+0xc8>
 800867c:	232d      	movs	r3, #45	; 0x2d
 800867e:	426d      	negs	r5, r5
 8008680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008684:	485e      	ldr	r0, [pc, #376]	; (8008800 <_printf_i+0x244>)
 8008686:	230a      	movs	r3, #10
 8008688:	e019      	b.n	80086be <_printf_i+0x102>
 800868a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800868e:	6805      	ldr	r5, [r0, #0]
 8008690:	600b      	str	r3, [r1, #0]
 8008692:	bf18      	it	ne
 8008694:	b22d      	sxthne	r5, r5
 8008696:	e7ef      	b.n	8008678 <_printf_i+0xbc>
 8008698:	680b      	ldr	r3, [r1, #0]
 800869a:	6825      	ldr	r5, [r4, #0]
 800869c:	1d18      	adds	r0, r3, #4
 800869e:	6008      	str	r0, [r1, #0]
 80086a0:	0628      	lsls	r0, r5, #24
 80086a2:	d501      	bpl.n	80086a8 <_printf_i+0xec>
 80086a4:	681d      	ldr	r5, [r3, #0]
 80086a6:	e002      	b.n	80086ae <_printf_i+0xf2>
 80086a8:	0669      	lsls	r1, r5, #25
 80086aa:	d5fb      	bpl.n	80086a4 <_printf_i+0xe8>
 80086ac:	881d      	ldrh	r5, [r3, #0]
 80086ae:	4854      	ldr	r0, [pc, #336]	; (8008800 <_printf_i+0x244>)
 80086b0:	2f6f      	cmp	r7, #111	; 0x6f
 80086b2:	bf0c      	ite	eq
 80086b4:	2308      	moveq	r3, #8
 80086b6:	230a      	movne	r3, #10
 80086b8:	2100      	movs	r1, #0
 80086ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086be:	6866      	ldr	r6, [r4, #4]
 80086c0:	60a6      	str	r6, [r4, #8]
 80086c2:	2e00      	cmp	r6, #0
 80086c4:	bfa2      	ittt	ge
 80086c6:	6821      	ldrge	r1, [r4, #0]
 80086c8:	f021 0104 	bicge.w	r1, r1, #4
 80086cc:	6021      	strge	r1, [r4, #0]
 80086ce:	b90d      	cbnz	r5, 80086d4 <_printf_i+0x118>
 80086d0:	2e00      	cmp	r6, #0
 80086d2:	d04d      	beq.n	8008770 <_printf_i+0x1b4>
 80086d4:	4616      	mov	r6, r2
 80086d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80086da:	fb03 5711 	mls	r7, r3, r1, r5
 80086de:	5dc7      	ldrb	r7, [r0, r7]
 80086e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086e4:	462f      	mov	r7, r5
 80086e6:	42bb      	cmp	r3, r7
 80086e8:	460d      	mov	r5, r1
 80086ea:	d9f4      	bls.n	80086d6 <_printf_i+0x11a>
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d10b      	bne.n	8008708 <_printf_i+0x14c>
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	07df      	lsls	r7, r3, #31
 80086f4:	d508      	bpl.n	8008708 <_printf_i+0x14c>
 80086f6:	6923      	ldr	r3, [r4, #16]
 80086f8:	6861      	ldr	r1, [r4, #4]
 80086fa:	4299      	cmp	r1, r3
 80086fc:	bfde      	ittt	le
 80086fe:	2330      	movle	r3, #48	; 0x30
 8008700:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008704:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008708:	1b92      	subs	r2, r2, r6
 800870a:	6122      	str	r2, [r4, #16]
 800870c:	f8cd a000 	str.w	sl, [sp]
 8008710:	464b      	mov	r3, r9
 8008712:	aa03      	add	r2, sp, #12
 8008714:	4621      	mov	r1, r4
 8008716:	4640      	mov	r0, r8
 8008718:	f7ff fee2 	bl	80084e0 <_printf_common>
 800871c:	3001      	adds	r0, #1
 800871e:	d14c      	bne.n	80087ba <_printf_i+0x1fe>
 8008720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008724:	b004      	add	sp, #16
 8008726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800872a:	4835      	ldr	r0, [pc, #212]	; (8008800 <_printf_i+0x244>)
 800872c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	680e      	ldr	r6, [r1, #0]
 8008734:	061f      	lsls	r7, r3, #24
 8008736:	f856 5b04 	ldr.w	r5, [r6], #4
 800873a:	600e      	str	r6, [r1, #0]
 800873c:	d514      	bpl.n	8008768 <_printf_i+0x1ac>
 800873e:	07d9      	lsls	r1, r3, #31
 8008740:	bf44      	itt	mi
 8008742:	f043 0320 	orrmi.w	r3, r3, #32
 8008746:	6023      	strmi	r3, [r4, #0]
 8008748:	b91d      	cbnz	r5, 8008752 <_printf_i+0x196>
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	f023 0320 	bic.w	r3, r3, #32
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	2310      	movs	r3, #16
 8008754:	e7b0      	b.n	80086b8 <_printf_i+0xfc>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	f043 0320 	orr.w	r3, r3, #32
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	2378      	movs	r3, #120	; 0x78
 8008760:	4828      	ldr	r0, [pc, #160]	; (8008804 <_printf_i+0x248>)
 8008762:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008766:	e7e3      	b.n	8008730 <_printf_i+0x174>
 8008768:	065e      	lsls	r6, r3, #25
 800876a:	bf48      	it	mi
 800876c:	b2ad      	uxthmi	r5, r5
 800876e:	e7e6      	b.n	800873e <_printf_i+0x182>
 8008770:	4616      	mov	r6, r2
 8008772:	e7bb      	b.n	80086ec <_printf_i+0x130>
 8008774:	680b      	ldr	r3, [r1, #0]
 8008776:	6826      	ldr	r6, [r4, #0]
 8008778:	6960      	ldr	r0, [r4, #20]
 800877a:	1d1d      	adds	r5, r3, #4
 800877c:	600d      	str	r5, [r1, #0]
 800877e:	0635      	lsls	r5, r6, #24
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	d501      	bpl.n	8008788 <_printf_i+0x1cc>
 8008784:	6018      	str	r0, [r3, #0]
 8008786:	e002      	b.n	800878e <_printf_i+0x1d2>
 8008788:	0671      	lsls	r1, r6, #25
 800878a:	d5fb      	bpl.n	8008784 <_printf_i+0x1c8>
 800878c:	8018      	strh	r0, [r3, #0]
 800878e:	2300      	movs	r3, #0
 8008790:	6123      	str	r3, [r4, #16]
 8008792:	4616      	mov	r6, r2
 8008794:	e7ba      	b.n	800870c <_printf_i+0x150>
 8008796:	680b      	ldr	r3, [r1, #0]
 8008798:	1d1a      	adds	r2, r3, #4
 800879a:	600a      	str	r2, [r1, #0]
 800879c:	681e      	ldr	r6, [r3, #0]
 800879e:	6862      	ldr	r2, [r4, #4]
 80087a0:	2100      	movs	r1, #0
 80087a2:	4630      	mov	r0, r6
 80087a4:	f7f7 fd3c 	bl	8000220 <memchr>
 80087a8:	b108      	cbz	r0, 80087ae <_printf_i+0x1f2>
 80087aa:	1b80      	subs	r0, r0, r6
 80087ac:	6060      	str	r0, [r4, #4]
 80087ae:	6863      	ldr	r3, [r4, #4]
 80087b0:	6123      	str	r3, [r4, #16]
 80087b2:	2300      	movs	r3, #0
 80087b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087b8:	e7a8      	b.n	800870c <_printf_i+0x150>
 80087ba:	6923      	ldr	r3, [r4, #16]
 80087bc:	4632      	mov	r2, r6
 80087be:	4649      	mov	r1, r9
 80087c0:	4640      	mov	r0, r8
 80087c2:	47d0      	blx	sl
 80087c4:	3001      	adds	r0, #1
 80087c6:	d0ab      	beq.n	8008720 <_printf_i+0x164>
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	079b      	lsls	r3, r3, #30
 80087cc:	d413      	bmi.n	80087f6 <_printf_i+0x23a>
 80087ce:	68e0      	ldr	r0, [r4, #12]
 80087d0:	9b03      	ldr	r3, [sp, #12]
 80087d2:	4298      	cmp	r0, r3
 80087d4:	bfb8      	it	lt
 80087d6:	4618      	movlt	r0, r3
 80087d8:	e7a4      	b.n	8008724 <_printf_i+0x168>
 80087da:	2301      	movs	r3, #1
 80087dc:	4632      	mov	r2, r6
 80087de:	4649      	mov	r1, r9
 80087e0:	4640      	mov	r0, r8
 80087e2:	47d0      	blx	sl
 80087e4:	3001      	adds	r0, #1
 80087e6:	d09b      	beq.n	8008720 <_printf_i+0x164>
 80087e8:	3501      	adds	r5, #1
 80087ea:	68e3      	ldr	r3, [r4, #12]
 80087ec:	9903      	ldr	r1, [sp, #12]
 80087ee:	1a5b      	subs	r3, r3, r1
 80087f0:	42ab      	cmp	r3, r5
 80087f2:	dcf2      	bgt.n	80087da <_printf_i+0x21e>
 80087f4:	e7eb      	b.n	80087ce <_printf_i+0x212>
 80087f6:	2500      	movs	r5, #0
 80087f8:	f104 0619 	add.w	r6, r4, #25
 80087fc:	e7f5      	b.n	80087ea <_printf_i+0x22e>
 80087fe:	bf00      	nop
 8008800:	08010eb2 	.word	0x08010eb2
 8008804:	08010ec3 	.word	0x08010ec3

08008808 <_scanf_float>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	b087      	sub	sp, #28
 800880e:	4617      	mov	r7, r2
 8008810:	9303      	str	r3, [sp, #12]
 8008812:	688b      	ldr	r3, [r1, #8]
 8008814:	1e5a      	subs	r2, r3, #1
 8008816:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800881a:	bf83      	ittte	hi
 800881c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008820:	195b      	addhi	r3, r3, r5
 8008822:	9302      	strhi	r3, [sp, #8]
 8008824:	2300      	movls	r3, #0
 8008826:	bf86      	itte	hi
 8008828:	f240 135d 	movwhi	r3, #349	; 0x15d
 800882c:	608b      	strhi	r3, [r1, #8]
 800882e:	9302      	strls	r3, [sp, #8]
 8008830:	680b      	ldr	r3, [r1, #0]
 8008832:	468b      	mov	fp, r1
 8008834:	2500      	movs	r5, #0
 8008836:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800883a:	f84b 3b1c 	str.w	r3, [fp], #28
 800883e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008842:	4680      	mov	r8, r0
 8008844:	460c      	mov	r4, r1
 8008846:	465e      	mov	r6, fp
 8008848:	46aa      	mov	sl, r5
 800884a:	46a9      	mov	r9, r5
 800884c:	9501      	str	r5, [sp, #4]
 800884e:	68a2      	ldr	r2, [r4, #8]
 8008850:	b152      	cbz	r2, 8008868 <_scanf_float+0x60>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b4e      	cmp	r3, #78	; 0x4e
 8008858:	d864      	bhi.n	8008924 <_scanf_float+0x11c>
 800885a:	2b40      	cmp	r3, #64	; 0x40
 800885c:	d83c      	bhi.n	80088d8 <_scanf_float+0xd0>
 800885e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008862:	b2c8      	uxtb	r0, r1
 8008864:	280e      	cmp	r0, #14
 8008866:	d93a      	bls.n	80088de <_scanf_float+0xd6>
 8008868:	f1b9 0f00 	cmp.w	r9, #0
 800886c:	d003      	beq.n	8008876 <_scanf_float+0x6e>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800887a:	f1ba 0f01 	cmp.w	sl, #1
 800887e:	f200 8113 	bhi.w	8008aa8 <_scanf_float+0x2a0>
 8008882:	455e      	cmp	r6, fp
 8008884:	f200 8105 	bhi.w	8008a92 <_scanf_float+0x28a>
 8008888:	2501      	movs	r5, #1
 800888a:	4628      	mov	r0, r5
 800888c:	b007      	add	sp, #28
 800888e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008892:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008896:	2a0d      	cmp	r2, #13
 8008898:	d8e6      	bhi.n	8008868 <_scanf_float+0x60>
 800889a:	a101      	add	r1, pc, #4	; (adr r1, 80088a0 <_scanf_float+0x98>)
 800889c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80088a0:	080089df 	.word	0x080089df
 80088a4:	08008869 	.word	0x08008869
 80088a8:	08008869 	.word	0x08008869
 80088ac:	08008869 	.word	0x08008869
 80088b0:	08008a3f 	.word	0x08008a3f
 80088b4:	08008a17 	.word	0x08008a17
 80088b8:	08008869 	.word	0x08008869
 80088bc:	08008869 	.word	0x08008869
 80088c0:	080089ed 	.word	0x080089ed
 80088c4:	08008869 	.word	0x08008869
 80088c8:	08008869 	.word	0x08008869
 80088cc:	08008869 	.word	0x08008869
 80088d0:	08008869 	.word	0x08008869
 80088d4:	080089a5 	.word	0x080089a5
 80088d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80088dc:	e7db      	b.n	8008896 <_scanf_float+0x8e>
 80088de:	290e      	cmp	r1, #14
 80088e0:	d8c2      	bhi.n	8008868 <_scanf_float+0x60>
 80088e2:	a001      	add	r0, pc, #4	; (adr r0, 80088e8 <_scanf_float+0xe0>)
 80088e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80088e8:	08008997 	.word	0x08008997
 80088ec:	08008869 	.word	0x08008869
 80088f0:	08008997 	.word	0x08008997
 80088f4:	08008a2b 	.word	0x08008a2b
 80088f8:	08008869 	.word	0x08008869
 80088fc:	08008945 	.word	0x08008945
 8008900:	08008981 	.word	0x08008981
 8008904:	08008981 	.word	0x08008981
 8008908:	08008981 	.word	0x08008981
 800890c:	08008981 	.word	0x08008981
 8008910:	08008981 	.word	0x08008981
 8008914:	08008981 	.word	0x08008981
 8008918:	08008981 	.word	0x08008981
 800891c:	08008981 	.word	0x08008981
 8008920:	08008981 	.word	0x08008981
 8008924:	2b6e      	cmp	r3, #110	; 0x6e
 8008926:	d809      	bhi.n	800893c <_scanf_float+0x134>
 8008928:	2b60      	cmp	r3, #96	; 0x60
 800892a:	d8b2      	bhi.n	8008892 <_scanf_float+0x8a>
 800892c:	2b54      	cmp	r3, #84	; 0x54
 800892e:	d077      	beq.n	8008a20 <_scanf_float+0x218>
 8008930:	2b59      	cmp	r3, #89	; 0x59
 8008932:	d199      	bne.n	8008868 <_scanf_float+0x60>
 8008934:	2d07      	cmp	r5, #7
 8008936:	d197      	bne.n	8008868 <_scanf_float+0x60>
 8008938:	2508      	movs	r5, #8
 800893a:	e029      	b.n	8008990 <_scanf_float+0x188>
 800893c:	2b74      	cmp	r3, #116	; 0x74
 800893e:	d06f      	beq.n	8008a20 <_scanf_float+0x218>
 8008940:	2b79      	cmp	r3, #121	; 0x79
 8008942:	e7f6      	b.n	8008932 <_scanf_float+0x12a>
 8008944:	6821      	ldr	r1, [r4, #0]
 8008946:	05c8      	lsls	r0, r1, #23
 8008948:	d51a      	bpl.n	8008980 <_scanf_float+0x178>
 800894a:	9b02      	ldr	r3, [sp, #8]
 800894c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008950:	6021      	str	r1, [r4, #0]
 8008952:	f109 0901 	add.w	r9, r9, #1
 8008956:	b11b      	cbz	r3, 8008960 <_scanf_float+0x158>
 8008958:	3b01      	subs	r3, #1
 800895a:	3201      	adds	r2, #1
 800895c:	9302      	str	r3, [sp, #8]
 800895e:	60a2      	str	r2, [r4, #8]
 8008960:	68a3      	ldr	r3, [r4, #8]
 8008962:	3b01      	subs	r3, #1
 8008964:	60a3      	str	r3, [r4, #8]
 8008966:	6923      	ldr	r3, [r4, #16]
 8008968:	3301      	adds	r3, #1
 800896a:	6123      	str	r3, [r4, #16]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	3b01      	subs	r3, #1
 8008970:	2b00      	cmp	r3, #0
 8008972:	607b      	str	r3, [r7, #4]
 8008974:	f340 8084 	ble.w	8008a80 <_scanf_float+0x278>
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	3301      	adds	r3, #1
 800897c:	603b      	str	r3, [r7, #0]
 800897e:	e766      	b.n	800884e <_scanf_float+0x46>
 8008980:	eb1a 0f05 	cmn.w	sl, r5
 8008984:	f47f af70 	bne.w	8008868 <_scanf_float+0x60>
 8008988:	6822      	ldr	r2, [r4, #0]
 800898a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800898e:	6022      	str	r2, [r4, #0]
 8008990:	f806 3b01 	strb.w	r3, [r6], #1
 8008994:	e7e4      	b.n	8008960 <_scanf_float+0x158>
 8008996:	6822      	ldr	r2, [r4, #0]
 8008998:	0610      	lsls	r0, r2, #24
 800899a:	f57f af65 	bpl.w	8008868 <_scanf_float+0x60>
 800899e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089a2:	e7f4      	b.n	800898e <_scanf_float+0x186>
 80089a4:	f1ba 0f00 	cmp.w	sl, #0
 80089a8:	d10e      	bne.n	80089c8 <_scanf_float+0x1c0>
 80089aa:	f1b9 0f00 	cmp.w	r9, #0
 80089ae:	d10e      	bne.n	80089ce <_scanf_float+0x1c6>
 80089b0:	6822      	ldr	r2, [r4, #0]
 80089b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80089b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80089ba:	d108      	bne.n	80089ce <_scanf_float+0x1c6>
 80089bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089c0:	6022      	str	r2, [r4, #0]
 80089c2:	f04f 0a01 	mov.w	sl, #1
 80089c6:	e7e3      	b.n	8008990 <_scanf_float+0x188>
 80089c8:	f1ba 0f02 	cmp.w	sl, #2
 80089cc:	d055      	beq.n	8008a7a <_scanf_float+0x272>
 80089ce:	2d01      	cmp	r5, #1
 80089d0:	d002      	beq.n	80089d8 <_scanf_float+0x1d0>
 80089d2:	2d04      	cmp	r5, #4
 80089d4:	f47f af48 	bne.w	8008868 <_scanf_float+0x60>
 80089d8:	3501      	adds	r5, #1
 80089da:	b2ed      	uxtb	r5, r5
 80089dc:	e7d8      	b.n	8008990 <_scanf_float+0x188>
 80089de:	f1ba 0f01 	cmp.w	sl, #1
 80089e2:	f47f af41 	bne.w	8008868 <_scanf_float+0x60>
 80089e6:	f04f 0a02 	mov.w	sl, #2
 80089ea:	e7d1      	b.n	8008990 <_scanf_float+0x188>
 80089ec:	b97d      	cbnz	r5, 8008a0e <_scanf_float+0x206>
 80089ee:	f1b9 0f00 	cmp.w	r9, #0
 80089f2:	f47f af3c 	bne.w	800886e <_scanf_float+0x66>
 80089f6:	6822      	ldr	r2, [r4, #0]
 80089f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80089fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a00:	f47f af39 	bne.w	8008876 <_scanf_float+0x6e>
 8008a04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a08:	6022      	str	r2, [r4, #0]
 8008a0a:	2501      	movs	r5, #1
 8008a0c:	e7c0      	b.n	8008990 <_scanf_float+0x188>
 8008a0e:	2d03      	cmp	r5, #3
 8008a10:	d0e2      	beq.n	80089d8 <_scanf_float+0x1d0>
 8008a12:	2d05      	cmp	r5, #5
 8008a14:	e7de      	b.n	80089d4 <_scanf_float+0x1cc>
 8008a16:	2d02      	cmp	r5, #2
 8008a18:	f47f af26 	bne.w	8008868 <_scanf_float+0x60>
 8008a1c:	2503      	movs	r5, #3
 8008a1e:	e7b7      	b.n	8008990 <_scanf_float+0x188>
 8008a20:	2d06      	cmp	r5, #6
 8008a22:	f47f af21 	bne.w	8008868 <_scanf_float+0x60>
 8008a26:	2507      	movs	r5, #7
 8008a28:	e7b2      	b.n	8008990 <_scanf_float+0x188>
 8008a2a:	6822      	ldr	r2, [r4, #0]
 8008a2c:	0591      	lsls	r1, r2, #22
 8008a2e:	f57f af1b 	bpl.w	8008868 <_scanf_float+0x60>
 8008a32:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008a36:	6022      	str	r2, [r4, #0]
 8008a38:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a3c:	e7a8      	b.n	8008990 <_scanf_float+0x188>
 8008a3e:	6822      	ldr	r2, [r4, #0]
 8008a40:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008a44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008a48:	d006      	beq.n	8008a58 <_scanf_float+0x250>
 8008a4a:	0550      	lsls	r0, r2, #21
 8008a4c:	f57f af0c 	bpl.w	8008868 <_scanf_float+0x60>
 8008a50:	f1b9 0f00 	cmp.w	r9, #0
 8008a54:	f43f af0f 	beq.w	8008876 <_scanf_float+0x6e>
 8008a58:	0591      	lsls	r1, r2, #22
 8008a5a:	bf58      	it	pl
 8008a5c:	9901      	ldrpl	r1, [sp, #4]
 8008a5e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a62:	bf58      	it	pl
 8008a64:	eba9 0101 	subpl.w	r1, r9, r1
 8008a68:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008a6c:	bf58      	it	pl
 8008a6e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a72:	6022      	str	r2, [r4, #0]
 8008a74:	f04f 0900 	mov.w	r9, #0
 8008a78:	e78a      	b.n	8008990 <_scanf_float+0x188>
 8008a7a:	f04f 0a03 	mov.w	sl, #3
 8008a7e:	e787      	b.n	8008990 <_scanf_float+0x188>
 8008a80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a84:	4639      	mov	r1, r7
 8008a86:	4640      	mov	r0, r8
 8008a88:	4798      	blx	r3
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	f43f aedf 	beq.w	800884e <_scanf_float+0x46>
 8008a90:	e6ea      	b.n	8008868 <_scanf_float+0x60>
 8008a92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a9a:	463a      	mov	r2, r7
 8008a9c:	4640      	mov	r0, r8
 8008a9e:	4798      	blx	r3
 8008aa0:	6923      	ldr	r3, [r4, #16]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	6123      	str	r3, [r4, #16]
 8008aa6:	e6ec      	b.n	8008882 <_scanf_float+0x7a>
 8008aa8:	1e6b      	subs	r3, r5, #1
 8008aaa:	2b06      	cmp	r3, #6
 8008aac:	d825      	bhi.n	8008afa <_scanf_float+0x2f2>
 8008aae:	2d02      	cmp	r5, #2
 8008ab0:	d836      	bhi.n	8008b20 <_scanf_float+0x318>
 8008ab2:	455e      	cmp	r6, fp
 8008ab4:	f67f aee8 	bls.w	8008888 <_scanf_float+0x80>
 8008ab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008abc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ac0:	463a      	mov	r2, r7
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	4798      	blx	r3
 8008ac6:	6923      	ldr	r3, [r4, #16]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	6123      	str	r3, [r4, #16]
 8008acc:	e7f1      	b.n	8008ab2 <_scanf_float+0x2aa>
 8008ace:	9802      	ldr	r0, [sp, #8]
 8008ad0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ad4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008ad8:	9002      	str	r0, [sp, #8]
 8008ada:	463a      	mov	r2, r7
 8008adc:	4640      	mov	r0, r8
 8008ade:	4798      	blx	r3
 8008ae0:	6923      	ldr	r3, [r4, #16]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	6123      	str	r3, [r4, #16]
 8008ae6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008aea:	fa5f fa8a 	uxtb.w	sl, sl
 8008aee:	f1ba 0f02 	cmp.w	sl, #2
 8008af2:	d1ec      	bne.n	8008ace <_scanf_float+0x2c6>
 8008af4:	3d03      	subs	r5, #3
 8008af6:	b2ed      	uxtb	r5, r5
 8008af8:	1b76      	subs	r6, r6, r5
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	05da      	lsls	r2, r3, #23
 8008afe:	d52f      	bpl.n	8008b60 <_scanf_float+0x358>
 8008b00:	055b      	lsls	r3, r3, #21
 8008b02:	d510      	bpl.n	8008b26 <_scanf_float+0x31e>
 8008b04:	455e      	cmp	r6, fp
 8008b06:	f67f aebf 	bls.w	8008888 <_scanf_float+0x80>
 8008b0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b12:	463a      	mov	r2, r7
 8008b14:	4640      	mov	r0, r8
 8008b16:	4798      	blx	r3
 8008b18:	6923      	ldr	r3, [r4, #16]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	6123      	str	r3, [r4, #16]
 8008b1e:	e7f1      	b.n	8008b04 <_scanf_float+0x2fc>
 8008b20:	46aa      	mov	sl, r5
 8008b22:	9602      	str	r6, [sp, #8]
 8008b24:	e7df      	b.n	8008ae6 <_scanf_float+0x2de>
 8008b26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b2a:	6923      	ldr	r3, [r4, #16]
 8008b2c:	2965      	cmp	r1, #101	; 0x65
 8008b2e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008b32:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8008b36:	6123      	str	r3, [r4, #16]
 8008b38:	d00c      	beq.n	8008b54 <_scanf_float+0x34c>
 8008b3a:	2945      	cmp	r1, #69	; 0x45
 8008b3c:	d00a      	beq.n	8008b54 <_scanf_float+0x34c>
 8008b3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b42:	463a      	mov	r2, r7
 8008b44:	4640      	mov	r0, r8
 8008b46:	4798      	blx	r3
 8008b48:	6923      	ldr	r3, [r4, #16]
 8008b4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	1eb5      	subs	r5, r6, #2
 8008b52:	6123      	str	r3, [r4, #16]
 8008b54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b58:	463a      	mov	r2, r7
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	4798      	blx	r3
 8008b5e:	462e      	mov	r6, r5
 8008b60:	6825      	ldr	r5, [r4, #0]
 8008b62:	f015 0510 	ands.w	r5, r5, #16
 8008b66:	d158      	bne.n	8008c1a <_scanf_float+0x412>
 8008b68:	7035      	strb	r5, [r6, #0]
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b74:	d11c      	bne.n	8008bb0 <_scanf_float+0x3a8>
 8008b76:	9b01      	ldr	r3, [sp, #4]
 8008b78:	454b      	cmp	r3, r9
 8008b7a:	eba3 0209 	sub.w	r2, r3, r9
 8008b7e:	d124      	bne.n	8008bca <_scanf_float+0x3c2>
 8008b80:	2200      	movs	r2, #0
 8008b82:	4659      	mov	r1, fp
 8008b84:	4640      	mov	r0, r8
 8008b86:	f001 f815 	bl	8009bb4 <_strtod_r>
 8008b8a:	9b03      	ldr	r3, [sp, #12]
 8008b8c:	6821      	ldr	r1, [r4, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f011 0f02 	tst.w	r1, #2
 8008b94:	ec57 6b10 	vmov	r6, r7, d0
 8008b98:	f103 0204 	add.w	r2, r3, #4
 8008b9c:	d020      	beq.n	8008be0 <_scanf_float+0x3d8>
 8008b9e:	9903      	ldr	r1, [sp, #12]
 8008ba0:	600a      	str	r2, [r1, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	e9c3 6700 	strd	r6, r7, [r3]
 8008ba8:	68e3      	ldr	r3, [r4, #12]
 8008baa:	3301      	adds	r3, #1
 8008bac:	60e3      	str	r3, [r4, #12]
 8008bae:	e66c      	b.n	800888a <_scanf_float+0x82>
 8008bb0:	9b04      	ldr	r3, [sp, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0e4      	beq.n	8008b80 <_scanf_float+0x378>
 8008bb6:	9905      	ldr	r1, [sp, #20]
 8008bb8:	230a      	movs	r3, #10
 8008bba:	462a      	mov	r2, r5
 8008bbc:	3101      	adds	r1, #1
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	f001 f882 	bl	8009cc8 <_strtol_r>
 8008bc4:	9b04      	ldr	r3, [sp, #16]
 8008bc6:	9e05      	ldr	r6, [sp, #20]
 8008bc8:	1ac2      	subs	r2, r0, r3
 8008bca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008bce:	429e      	cmp	r6, r3
 8008bd0:	bf28      	it	cs
 8008bd2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008bd6:	4912      	ldr	r1, [pc, #72]	; (8008c20 <_scanf_float+0x418>)
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f000 f9a5 	bl	8008f28 <siprintf>
 8008bde:	e7cf      	b.n	8008b80 <_scanf_float+0x378>
 8008be0:	f011 0f04 	tst.w	r1, #4
 8008be4:	9903      	ldr	r1, [sp, #12]
 8008be6:	600a      	str	r2, [r1, #0]
 8008be8:	d1db      	bne.n	8008ba2 <_scanf_float+0x39a>
 8008bea:	f8d3 8000 	ldr.w	r8, [r3]
 8008bee:	ee10 2a10 	vmov	r2, s0
 8008bf2:	ee10 0a10 	vmov	r0, s0
 8008bf6:	463b      	mov	r3, r7
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	f7f7 ffb7 	bl	8000b6c <__aeabi_dcmpun>
 8008bfe:	b128      	cbz	r0, 8008c0c <_scanf_float+0x404>
 8008c00:	4808      	ldr	r0, [pc, #32]	; (8008c24 <_scanf_float+0x41c>)
 8008c02:	f000 f98b 	bl	8008f1c <nanf>
 8008c06:	ed88 0a00 	vstr	s0, [r8]
 8008c0a:	e7cd      	b.n	8008ba8 <_scanf_float+0x3a0>
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	4639      	mov	r1, r7
 8008c10:	f7f8 f80a 	bl	8000c28 <__aeabi_d2f>
 8008c14:	f8c8 0000 	str.w	r0, [r8]
 8008c18:	e7c6      	b.n	8008ba8 <_scanf_float+0x3a0>
 8008c1a:	2500      	movs	r5, #0
 8008c1c:	e635      	b.n	800888a <_scanf_float+0x82>
 8008c1e:	bf00      	nop
 8008c20:	08010ed4 	.word	0x08010ed4
 8008c24:	08011350 	.word	0x08011350

08008c28 <iprintf>:
 8008c28:	b40f      	push	{r0, r1, r2, r3}
 8008c2a:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <iprintf+0x2c>)
 8008c2c:	b513      	push	{r0, r1, r4, lr}
 8008c2e:	681c      	ldr	r4, [r3, #0]
 8008c30:	b124      	cbz	r4, 8008c3c <iprintf+0x14>
 8008c32:	69a3      	ldr	r3, [r4, #24]
 8008c34:	b913      	cbnz	r3, 8008c3c <iprintf+0x14>
 8008c36:	4620      	mov	r0, r4
 8008c38:	f002 f89c 	bl	800ad74 <__sinit>
 8008c3c:	ab05      	add	r3, sp, #20
 8008c3e:	9a04      	ldr	r2, [sp, #16]
 8008c40:	68a1      	ldr	r1, [r4, #8]
 8008c42:	9301      	str	r3, [sp, #4]
 8008c44:	4620      	mov	r0, r4
 8008c46:	f003 fb6b 	bl	800c320 <_vfiprintf_r>
 8008c4a:	b002      	add	sp, #8
 8008c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c50:	b004      	add	sp, #16
 8008c52:	4770      	bx	lr
 8008c54:	2000000c 	.word	0x2000000c

08008c58 <putchar>:
 8008c58:	4b09      	ldr	r3, [pc, #36]	; (8008c80 <putchar+0x28>)
 8008c5a:	b513      	push	{r0, r1, r4, lr}
 8008c5c:	681c      	ldr	r4, [r3, #0]
 8008c5e:	4601      	mov	r1, r0
 8008c60:	b134      	cbz	r4, 8008c70 <putchar+0x18>
 8008c62:	69a3      	ldr	r3, [r4, #24]
 8008c64:	b923      	cbnz	r3, 8008c70 <putchar+0x18>
 8008c66:	9001      	str	r0, [sp, #4]
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f002 f883 	bl	800ad74 <__sinit>
 8008c6e:	9901      	ldr	r1, [sp, #4]
 8008c70:	68a2      	ldr	r2, [r4, #8]
 8008c72:	4620      	mov	r0, r4
 8008c74:	b002      	add	sp, #8
 8008c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c7a:	f003 bc81 	b.w	800c580 <_putc_r>
 8008c7e:	bf00      	nop
 8008c80:	2000000c 	.word	0x2000000c

08008c84 <_puts_r>:
 8008c84:	b570      	push	{r4, r5, r6, lr}
 8008c86:	460e      	mov	r6, r1
 8008c88:	4605      	mov	r5, r0
 8008c8a:	b118      	cbz	r0, 8008c94 <_puts_r+0x10>
 8008c8c:	6983      	ldr	r3, [r0, #24]
 8008c8e:	b90b      	cbnz	r3, 8008c94 <_puts_r+0x10>
 8008c90:	f002 f870 	bl	800ad74 <__sinit>
 8008c94:	69ab      	ldr	r3, [r5, #24]
 8008c96:	68ac      	ldr	r4, [r5, #8]
 8008c98:	b913      	cbnz	r3, 8008ca0 <_puts_r+0x1c>
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	f002 f86a 	bl	800ad74 <__sinit>
 8008ca0:	4b2c      	ldr	r3, [pc, #176]	; (8008d54 <_puts_r+0xd0>)
 8008ca2:	429c      	cmp	r4, r3
 8008ca4:	d120      	bne.n	8008ce8 <_puts_r+0x64>
 8008ca6:	686c      	ldr	r4, [r5, #4]
 8008ca8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008caa:	07db      	lsls	r3, r3, #31
 8008cac:	d405      	bmi.n	8008cba <_puts_r+0x36>
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	0598      	lsls	r0, r3, #22
 8008cb2:	d402      	bmi.n	8008cba <_puts_r+0x36>
 8008cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cb6:	f002 fc6e 	bl	800b596 <__retarget_lock_acquire_recursive>
 8008cba:	89a3      	ldrh	r3, [r4, #12]
 8008cbc:	0719      	lsls	r1, r3, #28
 8008cbe:	d51d      	bpl.n	8008cfc <_puts_r+0x78>
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	b1db      	cbz	r3, 8008cfc <_puts_r+0x78>
 8008cc4:	3e01      	subs	r6, #1
 8008cc6:	68a3      	ldr	r3, [r4, #8]
 8008cc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	60a3      	str	r3, [r4, #8]
 8008cd0:	bb39      	cbnz	r1, 8008d22 <_puts_r+0x9e>
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	da38      	bge.n	8008d48 <_puts_r+0xc4>
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	210a      	movs	r1, #10
 8008cda:	4628      	mov	r0, r5
 8008cdc:	f000 fff6 	bl	8009ccc <__swbuf_r>
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	d011      	beq.n	8008d08 <_puts_r+0x84>
 8008ce4:	250a      	movs	r5, #10
 8008ce6:	e011      	b.n	8008d0c <_puts_r+0x88>
 8008ce8:	4b1b      	ldr	r3, [pc, #108]	; (8008d58 <_puts_r+0xd4>)
 8008cea:	429c      	cmp	r4, r3
 8008cec:	d101      	bne.n	8008cf2 <_puts_r+0x6e>
 8008cee:	68ac      	ldr	r4, [r5, #8]
 8008cf0:	e7da      	b.n	8008ca8 <_puts_r+0x24>
 8008cf2:	4b1a      	ldr	r3, [pc, #104]	; (8008d5c <_puts_r+0xd8>)
 8008cf4:	429c      	cmp	r4, r3
 8008cf6:	bf08      	it	eq
 8008cf8:	68ec      	ldreq	r4, [r5, #12]
 8008cfa:	e7d5      	b.n	8008ca8 <_puts_r+0x24>
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f001 f836 	bl	8009d70 <__swsetup_r>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d0dd      	beq.n	8008cc4 <_puts_r+0x40>
 8008d08:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008d0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d0e:	07da      	lsls	r2, r3, #31
 8008d10:	d405      	bmi.n	8008d1e <_puts_r+0x9a>
 8008d12:	89a3      	ldrh	r3, [r4, #12]
 8008d14:	059b      	lsls	r3, r3, #22
 8008d16:	d402      	bmi.n	8008d1e <_puts_r+0x9a>
 8008d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d1a:	f002 fc3d 	bl	800b598 <__retarget_lock_release_recursive>
 8008d1e:	4628      	mov	r0, r5
 8008d20:	bd70      	pop	{r4, r5, r6, pc}
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	da04      	bge.n	8008d30 <_puts_r+0xac>
 8008d26:	69a2      	ldr	r2, [r4, #24]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	dc06      	bgt.n	8008d3a <_puts_r+0xb6>
 8008d2c:	290a      	cmp	r1, #10
 8008d2e:	d004      	beq.n	8008d3a <_puts_r+0xb6>
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	1c5a      	adds	r2, r3, #1
 8008d34:	6022      	str	r2, [r4, #0]
 8008d36:	7019      	strb	r1, [r3, #0]
 8008d38:	e7c5      	b.n	8008cc6 <_puts_r+0x42>
 8008d3a:	4622      	mov	r2, r4
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	f000 ffc5 	bl	8009ccc <__swbuf_r>
 8008d42:	3001      	adds	r0, #1
 8008d44:	d1bf      	bne.n	8008cc6 <_puts_r+0x42>
 8008d46:	e7df      	b.n	8008d08 <_puts_r+0x84>
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	250a      	movs	r5, #10
 8008d4c:	1c5a      	adds	r2, r3, #1
 8008d4e:	6022      	str	r2, [r4, #0]
 8008d50:	701d      	strb	r5, [r3, #0]
 8008d52:	e7db      	b.n	8008d0c <_puts_r+0x88>
 8008d54:	080110e8 	.word	0x080110e8
 8008d58:	08011108 	.word	0x08011108
 8008d5c:	080110c8 	.word	0x080110c8

08008d60 <puts>:
 8008d60:	4b02      	ldr	r3, [pc, #8]	; (8008d6c <puts+0xc>)
 8008d62:	4601      	mov	r1, r0
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	f7ff bf8d 	b.w	8008c84 <_puts_r>
 8008d6a:	bf00      	nop
 8008d6c:	2000000c 	.word	0x2000000c

08008d70 <_sbrk_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4d06      	ldr	r5, [pc, #24]	; (8008d8c <_sbrk_r+0x1c>)
 8008d74:	2300      	movs	r3, #0
 8008d76:	4604      	mov	r4, r0
 8008d78:	4608      	mov	r0, r1
 8008d7a:	602b      	str	r3, [r5, #0]
 8008d7c:	f7f9 fb9c 	bl	80024b8 <_sbrk>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d102      	bne.n	8008d8a <_sbrk_r+0x1a>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	b103      	cbz	r3, 8008d8a <_sbrk_r+0x1a>
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	20000804 	.word	0x20000804

08008d90 <setvbuf>:
 8008d90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d94:	461d      	mov	r5, r3
 8008d96:	4b5d      	ldr	r3, [pc, #372]	; (8008f0c <setvbuf+0x17c>)
 8008d98:	681f      	ldr	r7, [r3, #0]
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	460e      	mov	r6, r1
 8008d9e:	4690      	mov	r8, r2
 8008da0:	b127      	cbz	r7, 8008dac <setvbuf+0x1c>
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	b913      	cbnz	r3, 8008dac <setvbuf+0x1c>
 8008da6:	4638      	mov	r0, r7
 8008da8:	f001 ffe4 	bl	800ad74 <__sinit>
 8008dac:	4b58      	ldr	r3, [pc, #352]	; (8008f10 <setvbuf+0x180>)
 8008dae:	429c      	cmp	r4, r3
 8008db0:	d167      	bne.n	8008e82 <setvbuf+0xf2>
 8008db2:	687c      	ldr	r4, [r7, #4]
 8008db4:	f1b8 0f02 	cmp.w	r8, #2
 8008db8:	d006      	beq.n	8008dc8 <setvbuf+0x38>
 8008dba:	f1b8 0f01 	cmp.w	r8, #1
 8008dbe:	f200 809f 	bhi.w	8008f00 <setvbuf+0x170>
 8008dc2:	2d00      	cmp	r5, #0
 8008dc4:	f2c0 809c 	blt.w	8008f00 <setvbuf+0x170>
 8008dc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dca:	07db      	lsls	r3, r3, #31
 8008dcc:	d405      	bmi.n	8008dda <setvbuf+0x4a>
 8008dce:	89a3      	ldrh	r3, [r4, #12]
 8008dd0:	0598      	lsls	r0, r3, #22
 8008dd2:	d402      	bmi.n	8008dda <setvbuf+0x4a>
 8008dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dd6:	f002 fbde 	bl	800b596 <__retarget_lock_acquire_recursive>
 8008dda:	4621      	mov	r1, r4
 8008ddc:	4638      	mov	r0, r7
 8008dde:	f001 ff35 	bl	800ac4c <_fflush_r>
 8008de2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008de4:	b141      	cbz	r1, 8008df8 <setvbuf+0x68>
 8008de6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dea:	4299      	cmp	r1, r3
 8008dec:	d002      	beq.n	8008df4 <setvbuf+0x64>
 8008dee:	4638      	mov	r0, r7
 8008df0:	f7fe fff6 	bl	8007de0 <_free_r>
 8008df4:	2300      	movs	r3, #0
 8008df6:	6363      	str	r3, [r4, #52]	; 0x34
 8008df8:	2300      	movs	r3, #0
 8008dfa:	61a3      	str	r3, [r4, #24]
 8008dfc:	6063      	str	r3, [r4, #4]
 8008dfe:	89a3      	ldrh	r3, [r4, #12]
 8008e00:	0619      	lsls	r1, r3, #24
 8008e02:	d503      	bpl.n	8008e0c <setvbuf+0x7c>
 8008e04:	6921      	ldr	r1, [r4, #16]
 8008e06:	4638      	mov	r0, r7
 8008e08:	f7fe ffea 	bl	8007de0 <_free_r>
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008e12:	f023 0303 	bic.w	r3, r3, #3
 8008e16:	f1b8 0f02 	cmp.w	r8, #2
 8008e1a:	81a3      	strh	r3, [r4, #12]
 8008e1c:	d06c      	beq.n	8008ef8 <setvbuf+0x168>
 8008e1e:	ab01      	add	r3, sp, #4
 8008e20:	466a      	mov	r2, sp
 8008e22:	4621      	mov	r1, r4
 8008e24:	4638      	mov	r0, r7
 8008e26:	f002 fbb8 	bl	800b59a <__swhatbuf_r>
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	4318      	orrs	r0, r3
 8008e2e:	81a0      	strh	r0, [r4, #12]
 8008e30:	2d00      	cmp	r5, #0
 8008e32:	d130      	bne.n	8008e96 <setvbuf+0x106>
 8008e34:	9d00      	ldr	r5, [sp, #0]
 8008e36:	4628      	mov	r0, r5
 8008e38:	f7fe ffa4 	bl	8007d84 <malloc>
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d155      	bne.n	8008eee <setvbuf+0x15e>
 8008e42:	f8dd 9000 	ldr.w	r9, [sp]
 8008e46:	45a9      	cmp	r9, r5
 8008e48:	d14a      	bne.n	8008ee0 <setvbuf+0x150>
 8008e4a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008e4e:	2200      	movs	r2, #0
 8008e50:	60a2      	str	r2, [r4, #8]
 8008e52:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008e56:	6022      	str	r2, [r4, #0]
 8008e58:	6122      	str	r2, [r4, #16]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e60:	6162      	str	r2, [r4, #20]
 8008e62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e64:	f043 0302 	orr.w	r3, r3, #2
 8008e68:	07d2      	lsls	r2, r2, #31
 8008e6a:	81a3      	strh	r3, [r4, #12]
 8008e6c:	d405      	bmi.n	8008e7a <setvbuf+0xea>
 8008e6e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008e72:	d102      	bne.n	8008e7a <setvbuf+0xea>
 8008e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e76:	f002 fb8f 	bl	800b598 <__retarget_lock_release_recursive>
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	b003      	add	sp, #12
 8008e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e82:	4b24      	ldr	r3, [pc, #144]	; (8008f14 <setvbuf+0x184>)
 8008e84:	429c      	cmp	r4, r3
 8008e86:	d101      	bne.n	8008e8c <setvbuf+0xfc>
 8008e88:	68bc      	ldr	r4, [r7, #8]
 8008e8a:	e793      	b.n	8008db4 <setvbuf+0x24>
 8008e8c:	4b22      	ldr	r3, [pc, #136]	; (8008f18 <setvbuf+0x188>)
 8008e8e:	429c      	cmp	r4, r3
 8008e90:	bf08      	it	eq
 8008e92:	68fc      	ldreq	r4, [r7, #12]
 8008e94:	e78e      	b.n	8008db4 <setvbuf+0x24>
 8008e96:	2e00      	cmp	r6, #0
 8008e98:	d0cd      	beq.n	8008e36 <setvbuf+0xa6>
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	b913      	cbnz	r3, 8008ea4 <setvbuf+0x114>
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	f001 ff68 	bl	800ad74 <__sinit>
 8008ea4:	f1b8 0f01 	cmp.w	r8, #1
 8008ea8:	bf08      	it	eq
 8008eaa:	89a3      	ldrheq	r3, [r4, #12]
 8008eac:	6026      	str	r6, [r4, #0]
 8008eae:	bf04      	itt	eq
 8008eb0:	f043 0301 	orreq.w	r3, r3, #1
 8008eb4:	81a3      	strheq	r3, [r4, #12]
 8008eb6:	89a2      	ldrh	r2, [r4, #12]
 8008eb8:	f012 0308 	ands.w	r3, r2, #8
 8008ebc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008ec0:	d01c      	beq.n	8008efc <setvbuf+0x16c>
 8008ec2:	07d3      	lsls	r3, r2, #31
 8008ec4:	bf41      	itttt	mi
 8008ec6:	2300      	movmi	r3, #0
 8008ec8:	426d      	negmi	r5, r5
 8008eca:	60a3      	strmi	r3, [r4, #8]
 8008ecc:	61a5      	strmi	r5, [r4, #24]
 8008ece:	bf58      	it	pl
 8008ed0:	60a5      	strpl	r5, [r4, #8]
 8008ed2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008ed4:	f015 0501 	ands.w	r5, r5, #1
 8008ed8:	d115      	bne.n	8008f06 <setvbuf+0x176>
 8008eda:	f412 7f00 	tst.w	r2, #512	; 0x200
 8008ede:	e7c8      	b.n	8008e72 <setvbuf+0xe2>
 8008ee0:	4648      	mov	r0, r9
 8008ee2:	f7fe ff4f 	bl	8007d84 <malloc>
 8008ee6:	4606      	mov	r6, r0
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d0ae      	beq.n	8008e4a <setvbuf+0xba>
 8008eec:	464d      	mov	r5, r9
 8008eee:	89a3      	ldrh	r3, [r4, #12]
 8008ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef4:	81a3      	strh	r3, [r4, #12]
 8008ef6:	e7d0      	b.n	8008e9a <setvbuf+0x10a>
 8008ef8:	2500      	movs	r5, #0
 8008efa:	e7a8      	b.n	8008e4e <setvbuf+0xbe>
 8008efc:	60a3      	str	r3, [r4, #8]
 8008efe:	e7e8      	b.n	8008ed2 <setvbuf+0x142>
 8008f00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008f04:	e7b9      	b.n	8008e7a <setvbuf+0xea>
 8008f06:	2500      	movs	r5, #0
 8008f08:	e7b7      	b.n	8008e7a <setvbuf+0xea>
 8008f0a:	bf00      	nop
 8008f0c:	2000000c 	.word	0x2000000c
 8008f10:	080110e8 	.word	0x080110e8
 8008f14:	08011108 	.word	0x08011108
 8008f18:	080110c8 	.word	0x080110c8

08008f1c <nanf>:
 8008f1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008f24 <nanf+0x8>
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	7fc00000 	.word	0x7fc00000

08008f28 <siprintf>:
 8008f28:	b40e      	push	{r1, r2, r3}
 8008f2a:	b500      	push	{lr}
 8008f2c:	b09c      	sub	sp, #112	; 0x70
 8008f2e:	ab1d      	add	r3, sp, #116	; 0x74
 8008f30:	9002      	str	r0, [sp, #8]
 8008f32:	9006      	str	r0, [sp, #24]
 8008f34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f38:	4809      	ldr	r0, [pc, #36]	; (8008f60 <siprintf+0x38>)
 8008f3a:	9107      	str	r1, [sp, #28]
 8008f3c:	9104      	str	r1, [sp, #16]
 8008f3e:	4909      	ldr	r1, [pc, #36]	; (8008f64 <siprintf+0x3c>)
 8008f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f44:	9105      	str	r1, [sp, #20]
 8008f46:	6800      	ldr	r0, [r0, #0]
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	a902      	add	r1, sp, #8
 8008f4c:	f003 f8be 	bl	800c0cc <_svfiprintf_r>
 8008f50:	9b02      	ldr	r3, [sp, #8]
 8008f52:	2200      	movs	r2, #0
 8008f54:	701a      	strb	r2, [r3, #0]
 8008f56:	b01c      	add	sp, #112	; 0x70
 8008f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f5c:	b003      	add	sp, #12
 8008f5e:	4770      	bx	lr
 8008f60:	2000000c 	.word	0x2000000c
 8008f64:	ffff0208 	.word	0xffff0208

08008f68 <sulp>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	460d      	mov	r5, r1
 8008f6e:	ec45 4b10 	vmov	d0, r4, r5
 8008f72:	4616      	mov	r6, r2
 8008f74:	f002 ff00 	bl	800bd78 <__ulp>
 8008f78:	ec51 0b10 	vmov	r0, r1, d0
 8008f7c:	b17e      	cbz	r6, 8008f9e <sulp+0x36>
 8008f7e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008f82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	dd09      	ble.n	8008f9e <sulp+0x36>
 8008f8a:	051b      	lsls	r3, r3, #20
 8008f8c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008f90:	2400      	movs	r4, #0
 8008f92:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008f96:	4622      	mov	r2, r4
 8008f98:	462b      	mov	r3, r5
 8008f9a:	f7f7 fb4d 	bl	8000638 <__aeabi_dmul>
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}

08008fa0 <_strtod_l>:
 8008fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	b0a3      	sub	sp, #140	; 0x8c
 8008fa6:	461f      	mov	r7, r3
 8008fa8:	2300      	movs	r3, #0
 8008faa:	931e      	str	r3, [sp, #120]	; 0x78
 8008fac:	4ba4      	ldr	r3, [pc, #656]	; (8009240 <_strtod_l+0x2a0>)
 8008fae:	9219      	str	r2, [sp, #100]	; 0x64
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	9307      	str	r3, [sp, #28]
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	4688      	mov	r8, r1
 8008fba:	f7f7 f929 	bl	8000210 <strlen>
 8008fbe:	f04f 0a00 	mov.w	sl, #0
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	f04f 0b00 	mov.w	fp, #0
 8008fc8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008fcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fce:	781a      	ldrb	r2, [r3, #0]
 8008fd0:	2a2b      	cmp	r2, #43	; 0x2b
 8008fd2:	d04c      	beq.n	800906e <_strtod_l+0xce>
 8008fd4:	d839      	bhi.n	800904a <_strtod_l+0xaa>
 8008fd6:	2a0d      	cmp	r2, #13
 8008fd8:	d832      	bhi.n	8009040 <_strtod_l+0xa0>
 8008fda:	2a08      	cmp	r2, #8
 8008fdc:	d832      	bhi.n	8009044 <_strtod_l+0xa4>
 8008fde:	2a00      	cmp	r2, #0
 8008fe0:	d03c      	beq.n	800905c <_strtod_l+0xbc>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	930e      	str	r3, [sp, #56]	; 0x38
 8008fe6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008fe8:	7833      	ldrb	r3, [r6, #0]
 8008fea:	2b30      	cmp	r3, #48	; 0x30
 8008fec:	f040 80b4 	bne.w	8009158 <_strtod_l+0x1b8>
 8008ff0:	7873      	ldrb	r3, [r6, #1]
 8008ff2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ff6:	2b58      	cmp	r3, #88	; 0x58
 8008ff8:	d16c      	bne.n	80090d4 <_strtod_l+0x134>
 8008ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ffc:	9301      	str	r3, [sp, #4]
 8008ffe:	ab1e      	add	r3, sp, #120	; 0x78
 8009000:	9702      	str	r7, [sp, #8]
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	4a8f      	ldr	r2, [pc, #572]	; (8009244 <_strtod_l+0x2a4>)
 8009006:	ab1f      	add	r3, sp, #124	; 0x7c
 8009008:	a91d      	add	r1, sp, #116	; 0x74
 800900a:	4620      	mov	r0, r4
 800900c:	f001 ffb6 	bl	800af7c <__gethex>
 8009010:	f010 0707 	ands.w	r7, r0, #7
 8009014:	4605      	mov	r5, r0
 8009016:	d005      	beq.n	8009024 <_strtod_l+0x84>
 8009018:	2f06      	cmp	r7, #6
 800901a:	d12a      	bne.n	8009072 <_strtod_l+0xd2>
 800901c:	3601      	adds	r6, #1
 800901e:	2300      	movs	r3, #0
 8009020:	961d      	str	r6, [sp, #116]	; 0x74
 8009022:	930e      	str	r3, [sp, #56]	; 0x38
 8009024:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009026:	2b00      	cmp	r3, #0
 8009028:	f040 8596 	bne.w	8009b58 <_strtod_l+0xbb8>
 800902c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800902e:	b1db      	cbz	r3, 8009068 <_strtod_l+0xc8>
 8009030:	4652      	mov	r2, sl
 8009032:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009036:	ec43 2b10 	vmov	d0, r2, r3
 800903a:	b023      	add	sp, #140	; 0x8c
 800903c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009040:	2a20      	cmp	r2, #32
 8009042:	d1ce      	bne.n	8008fe2 <_strtod_l+0x42>
 8009044:	3301      	adds	r3, #1
 8009046:	931d      	str	r3, [sp, #116]	; 0x74
 8009048:	e7c0      	b.n	8008fcc <_strtod_l+0x2c>
 800904a:	2a2d      	cmp	r2, #45	; 0x2d
 800904c:	d1c9      	bne.n	8008fe2 <_strtod_l+0x42>
 800904e:	2201      	movs	r2, #1
 8009050:	920e      	str	r2, [sp, #56]	; 0x38
 8009052:	1c5a      	adds	r2, r3, #1
 8009054:	921d      	str	r2, [sp, #116]	; 0x74
 8009056:	785b      	ldrb	r3, [r3, #1]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1c4      	bne.n	8008fe6 <_strtod_l+0x46>
 800905c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800905e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009062:	2b00      	cmp	r3, #0
 8009064:	f040 8576 	bne.w	8009b54 <_strtod_l+0xbb4>
 8009068:	4652      	mov	r2, sl
 800906a:	465b      	mov	r3, fp
 800906c:	e7e3      	b.n	8009036 <_strtod_l+0x96>
 800906e:	2200      	movs	r2, #0
 8009070:	e7ee      	b.n	8009050 <_strtod_l+0xb0>
 8009072:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009074:	b13a      	cbz	r2, 8009086 <_strtod_l+0xe6>
 8009076:	2135      	movs	r1, #53	; 0x35
 8009078:	a820      	add	r0, sp, #128	; 0x80
 800907a:	f002 ff88 	bl	800bf8e <__copybits>
 800907e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009080:	4620      	mov	r0, r4
 8009082:	f002 fb4d 	bl	800b720 <_Bfree>
 8009086:	3f01      	subs	r7, #1
 8009088:	2f05      	cmp	r7, #5
 800908a:	d807      	bhi.n	800909c <_strtod_l+0xfc>
 800908c:	e8df f007 	tbb	[pc, r7]
 8009090:	1d180b0e 	.word	0x1d180b0e
 8009094:	030e      	.short	0x030e
 8009096:	f04f 0b00 	mov.w	fp, #0
 800909a:	46da      	mov	sl, fp
 800909c:	0728      	lsls	r0, r5, #28
 800909e:	d5c1      	bpl.n	8009024 <_strtod_l+0x84>
 80090a0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80090a4:	e7be      	b.n	8009024 <_strtod_l+0x84>
 80090a6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80090aa:	e7f7      	b.n	800909c <_strtod_l+0xfc>
 80090ac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80090b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80090b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80090b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80090ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80090be:	e7ed      	b.n	800909c <_strtod_l+0xfc>
 80090c0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009248 <_strtod_l+0x2a8>
 80090c4:	f04f 0a00 	mov.w	sl, #0
 80090c8:	e7e8      	b.n	800909c <_strtod_l+0xfc>
 80090ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80090ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80090d2:	e7e3      	b.n	800909c <_strtod_l+0xfc>
 80090d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80090d6:	1c5a      	adds	r2, r3, #1
 80090d8:	921d      	str	r2, [sp, #116]	; 0x74
 80090da:	785b      	ldrb	r3, [r3, #1]
 80090dc:	2b30      	cmp	r3, #48	; 0x30
 80090de:	d0f9      	beq.n	80090d4 <_strtod_l+0x134>
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d09f      	beq.n	8009024 <_strtod_l+0x84>
 80090e4:	2301      	movs	r3, #1
 80090e6:	f04f 0900 	mov.w	r9, #0
 80090ea:	9304      	str	r3, [sp, #16]
 80090ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80090ee:	930a      	str	r3, [sp, #40]	; 0x28
 80090f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80090f4:	464f      	mov	r7, r9
 80090f6:	220a      	movs	r2, #10
 80090f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80090fa:	7806      	ldrb	r6, [r0, #0]
 80090fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009100:	b2d9      	uxtb	r1, r3
 8009102:	2909      	cmp	r1, #9
 8009104:	d92a      	bls.n	800915c <_strtod_l+0x1bc>
 8009106:	9907      	ldr	r1, [sp, #28]
 8009108:	462a      	mov	r2, r5
 800910a:	f003 facc 	bl	800c6a6 <strncmp>
 800910e:	b398      	cbz	r0, 8009178 <_strtod_l+0x1d8>
 8009110:	2000      	movs	r0, #0
 8009112:	4633      	mov	r3, r6
 8009114:	463d      	mov	r5, r7
 8009116:	9007      	str	r0, [sp, #28]
 8009118:	4602      	mov	r2, r0
 800911a:	2b65      	cmp	r3, #101	; 0x65
 800911c:	d001      	beq.n	8009122 <_strtod_l+0x182>
 800911e:	2b45      	cmp	r3, #69	; 0x45
 8009120:	d118      	bne.n	8009154 <_strtod_l+0x1b4>
 8009122:	b91d      	cbnz	r5, 800912c <_strtod_l+0x18c>
 8009124:	9b04      	ldr	r3, [sp, #16]
 8009126:	4303      	orrs	r3, r0
 8009128:	d098      	beq.n	800905c <_strtod_l+0xbc>
 800912a:	2500      	movs	r5, #0
 800912c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009130:	f108 0301 	add.w	r3, r8, #1
 8009134:	931d      	str	r3, [sp, #116]	; 0x74
 8009136:	f898 3001 	ldrb.w	r3, [r8, #1]
 800913a:	2b2b      	cmp	r3, #43	; 0x2b
 800913c:	d075      	beq.n	800922a <_strtod_l+0x28a>
 800913e:	2b2d      	cmp	r3, #45	; 0x2d
 8009140:	d07b      	beq.n	800923a <_strtod_l+0x29a>
 8009142:	f04f 0c00 	mov.w	ip, #0
 8009146:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800914a:	2909      	cmp	r1, #9
 800914c:	f240 8082 	bls.w	8009254 <_strtod_l+0x2b4>
 8009150:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009154:	2600      	movs	r6, #0
 8009156:	e09d      	b.n	8009294 <_strtod_l+0x2f4>
 8009158:	2300      	movs	r3, #0
 800915a:	e7c4      	b.n	80090e6 <_strtod_l+0x146>
 800915c:	2f08      	cmp	r7, #8
 800915e:	bfd8      	it	le
 8009160:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009162:	f100 0001 	add.w	r0, r0, #1
 8009166:	bfda      	itte	le
 8009168:	fb02 3301 	mlale	r3, r2, r1, r3
 800916c:	9309      	strle	r3, [sp, #36]	; 0x24
 800916e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009172:	3701      	adds	r7, #1
 8009174:	901d      	str	r0, [sp, #116]	; 0x74
 8009176:	e7bf      	b.n	80090f8 <_strtod_l+0x158>
 8009178:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800917a:	195a      	adds	r2, r3, r5
 800917c:	921d      	str	r2, [sp, #116]	; 0x74
 800917e:	5d5b      	ldrb	r3, [r3, r5]
 8009180:	2f00      	cmp	r7, #0
 8009182:	d037      	beq.n	80091f4 <_strtod_l+0x254>
 8009184:	9007      	str	r0, [sp, #28]
 8009186:	463d      	mov	r5, r7
 8009188:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800918c:	2a09      	cmp	r2, #9
 800918e:	d912      	bls.n	80091b6 <_strtod_l+0x216>
 8009190:	2201      	movs	r2, #1
 8009192:	e7c2      	b.n	800911a <_strtod_l+0x17a>
 8009194:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009196:	1c5a      	adds	r2, r3, #1
 8009198:	921d      	str	r2, [sp, #116]	; 0x74
 800919a:	785b      	ldrb	r3, [r3, #1]
 800919c:	3001      	adds	r0, #1
 800919e:	2b30      	cmp	r3, #48	; 0x30
 80091a0:	d0f8      	beq.n	8009194 <_strtod_l+0x1f4>
 80091a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80091a6:	2a08      	cmp	r2, #8
 80091a8:	f200 84db 	bhi.w	8009b62 <_strtod_l+0xbc2>
 80091ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80091ae:	9007      	str	r0, [sp, #28]
 80091b0:	2000      	movs	r0, #0
 80091b2:	920a      	str	r2, [sp, #40]	; 0x28
 80091b4:	4605      	mov	r5, r0
 80091b6:	3b30      	subs	r3, #48	; 0x30
 80091b8:	f100 0201 	add.w	r2, r0, #1
 80091bc:	d014      	beq.n	80091e8 <_strtod_l+0x248>
 80091be:	9907      	ldr	r1, [sp, #28]
 80091c0:	4411      	add	r1, r2
 80091c2:	9107      	str	r1, [sp, #28]
 80091c4:	462a      	mov	r2, r5
 80091c6:	eb00 0e05 	add.w	lr, r0, r5
 80091ca:	210a      	movs	r1, #10
 80091cc:	4572      	cmp	r2, lr
 80091ce:	d113      	bne.n	80091f8 <_strtod_l+0x258>
 80091d0:	182a      	adds	r2, r5, r0
 80091d2:	2a08      	cmp	r2, #8
 80091d4:	f105 0501 	add.w	r5, r5, #1
 80091d8:	4405      	add	r5, r0
 80091da:	dc1c      	bgt.n	8009216 <_strtod_l+0x276>
 80091dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091de:	220a      	movs	r2, #10
 80091e0:	fb02 3301 	mla	r3, r2, r1, r3
 80091e4:	9309      	str	r3, [sp, #36]	; 0x24
 80091e6:	2200      	movs	r2, #0
 80091e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80091ea:	1c59      	adds	r1, r3, #1
 80091ec:	911d      	str	r1, [sp, #116]	; 0x74
 80091ee:	785b      	ldrb	r3, [r3, #1]
 80091f0:	4610      	mov	r0, r2
 80091f2:	e7c9      	b.n	8009188 <_strtod_l+0x1e8>
 80091f4:	4638      	mov	r0, r7
 80091f6:	e7d2      	b.n	800919e <_strtod_l+0x1fe>
 80091f8:	2a08      	cmp	r2, #8
 80091fa:	dc04      	bgt.n	8009206 <_strtod_l+0x266>
 80091fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80091fe:	434e      	muls	r6, r1
 8009200:	9609      	str	r6, [sp, #36]	; 0x24
 8009202:	3201      	adds	r2, #1
 8009204:	e7e2      	b.n	80091cc <_strtod_l+0x22c>
 8009206:	f102 0c01 	add.w	ip, r2, #1
 800920a:	f1bc 0f10 	cmp.w	ip, #16
 800920e:	bfd8      	it	le
 8009210:	fb01 f909 	mulle.w	r9, r1, r9
 8009214:	e7f5      	b.n	8009202 <_strtod_l+0x262>
 8009216:	2d10      	cmp	r5, #16
 8009218:	bfdc      	itt	le
 800921a:	220a      	movle	r2, #10
 800921c:	fb02 3909 	mlale	r9, r2, r9, r3
 8009220:	e7e1      	b.n	80091e6 <_strtod_l+0x246>
 8009222:	2300      	movs	r3, #0
 8009224:	9307      	str	r3, [sp, #28]
 8009226:	2201      	movs	r2, #1
 8009228:	e77c      	b.n	8009124 <_strtod_l+0x184>
 800922a:	f04f 0c00 	mov.w	ip, #0
 800922e:	f108 0302 	add.w	r3, r8, #2
 8009232:	931d      	str	r3, [sp, #116]	; 0x74
 8009234:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009238:	e785      	b.n	8009146 <_strtod_l+0x1a6>
 800923a:	f04f 0c01 	mov.w	ip, #1
 800923e:	e7f6      	b.n	800922e <_strtod_l+0x28e>
 8009240:	08011194 	.word	0x08011194
 8009244:	08010edc 	.word	0x08010edc
 8009248:	7ff00000 	.word	0x7ff00000
 800924c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800924e:	1c59      	adds	r1, r3, #1
 8009250:	911d      	str	r1, [sp, #116]	; 0x74
 8009252:	785b      	ldrb	r3, [r3, #1]
 8009254:	2b30      	cmp	r3, #48	; 0x30
 8009256:	d0f9      	beq.n	800924c <_strtod_l+0x2ac>
 8009258:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800925c:	2908      	cmp	r1, #8
 800925e:	f63f af79 	bhi.w	8009154 <_strtod_l+0x1b4>
 8009262:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009266:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009268:	9308      	str	r3, [sp, #32]
 800926a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800926c:	1c59      	adds	r1, r3, #1
 800926e:	911d      	str	r1, [sp, #116]	; 0x74
 8009270:	785b      	ldrb	r3, [r3, #1]
 8009272:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009276:	2e09      	cmp	r6, #9
 8009278:	d937      	bls.n	80092ea <_strtod_l+0x34a>
 800927a:	9e08      	ldr	r6, [sp, #32]
 800927c:	1b89      	subs	r1, r1, r6
 800927e:	2908      	cmp	r1, #8
 8009280:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009284:	dc02      	bgt.n	800928c <_strtod_l+0x2ec>
 8009286:	4576      	cmp	r6, lr
 8009288:	bfa8      	it	ge
 800928a:	4676      	movge	r6, lr
 800928c:	f1bc 0f00 	cmp.w	ip, #0
 8009290:	d000      	beq.n	8009294 <_strtod_l+0x2f4>
 8009292:	4276      	negs	r6, r6
 8009294:	2d00      	cmp	r5, #0
 8009296:	d14f      	bne.n	8009338 <_strtod_l+0x398>
 8009298:	9904      	ldr	r1, [sp, #16]
 800929a:	4301      	orrs	r1, r0
 800929c:	f47f aec2 	bne.w	8009024 <_strtod_l+0x84>
 80092a0:	2a00      	cmp	r2, #0
 80092a2:	f47f aedb 	bne.w	800905c <_strtod_l+0xbc>
 80092a6:	2b69      	cmp	r3, #105	; 0x69
 80092a8:	d027      	beq.n	80092fa <_strtod_l+0x35a>
 80092aa:	dc24      	bgt.n	80092f6 <_strtod_l+0x356>
 80092ac:	2b49      	cmp	r3, #73	; 0x49
 80092ae:	d024      	beq.n	80092fa <_strtod_l+0x35a>
 80092b0:	2b4e      	cmp	r3, #78	; 0x4e
 80092b2:	f47f aed3 	bne.w	800905c <_strtod_l+0xbc>
 80092b6:	499e      	ldr	r1, [pc, #632]	; (8009530 <_strtod_l+0x590>)
 80092b8:	a81d      	add	r0, sp, #116	; 0x74
 80092ba:	f002 f8b7 	bl	800b42c <__match>
 80092be:	2800      	cmp	r0, #0
 80092c0:	f43f aecc 	beq.w	800905c <_strtod_l+0xbc>
 80092c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	2b28      	cmp	r3, #40	; 0x28
 80092ca:	d12d      	bne.n	8009328 <_strtod_l+0x388>
 80092cc:	4999      	ldr	r1, [pc, #612]	; (8009534 <_strtod_l+0x594>)
 80092ce:	aa20      	add	r2, sp, #128	; 0x80
 80092d0:	a81d      	add	r0, sp, #116	; 0x74
 80092d2:	f002 f8bf 	bl	800b454 <__hexnan>
 80092d6:	2805      	cmp	r0, #5
 80092d8:	d126      	bne.n	8009328 <_strtod_l+0x388>
 80092da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092dc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80092e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80092e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80092e8:	e69c      	b.n	8009024 <_strtod_l+0x84>
 80092ea:	210a      	movs	r1, #10
 80092ec:	fb01 3e0e 	mla	lr, r1, lr, r3
 80092f0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80092f4:	e7b9      	b.n	800926a <_strtod_l+0x2ca>
 80092f6:	2b6e      	cmp	r3, #110	; 0x6e
 80092f8:	e7db      	b.n	80092b2 <_strtod_l+0x312>
 80092fa:	498f      	ldr	r1, [pc, #572]	; (8009538 <_strtod_l+0x598>)
 80092fc:	a81d      	add	r0, sp, #116	; 0x74
 80092fe:	f002 f895 	bl	800b42c <__match>
 8009302:	2800      	cmp	r0, #0
 8009304:	f43f aeaa 	beq.w	800905c <_strtod_l+0xbc>
 8009308:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800930a:	498c      	ldr	r1, [pc, #560]	; (800953c <_strtod_l+0x59c>)
 800930c:	3b01      	subs	r3, #1
 800930e:	a81d      	add	r0, sp, #116	; 0x74
 8009310:	931d      	str	r3, [sp, #116]	; 0x74
 8009312:	f002 f88b 	bl	800b42c <__match>
 8009316:	b910      	cbnz	r0, 800931e <_strtod_l+0x37e>
 8009318:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800931a:	3301      	adds	r3, #1
 800931c:	931d      	str	r3, [sp, #116]	; 0x74
 800931e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800954c <_strtod_l+0x5ac>
 8009322:	f04f 0a00 	mov.w	sl, #0
 8009326:	e67d      	b.n	8009024 <_strtod_l+0x84>
 8009328:	4885      	ldr	r0, [pc, #532]	; (8009540 <_strtod_l+0x5a0>)
 800932a:	f003 f971 	bl	800c610 <nan>
 800932e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009332:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009336:	e675      	b.n	8009024 <_strtod_l+0x84>
 8009338:	9b07      	ldr	r3, [sp, #28]
 800933a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800933c:	1af3      	subs	r3, r6, r3
 800933e:	2f00      	cmp	r7, #0
 8009340:	bf08      	it	eq
 8009342:	462f      	moveq	r7, r5
 8009344:	2d10      	cmp	r5, #16
 8009346:	9308      	str	r3, [sp, #32]
 8009348:	46a8      	mov	r8, r5
 800934a:	bfa8      	it	ge
 800934c:	f04f 0810 	movge.w	r8, #16
 8009350:	f7f7 f8f8 	bl	8000544 <__aeabi_ui2d>
 8009354:	2d09      	cmp	r5, #9
 8009356:	4682      	mov	sl, r0
 8009358:	468b      	mov	fp, r1
 800935a:	dd13      	ble.n	8009384 <_strtod_l+0x3e4>
 800935c:	4b79      	ldr	r3, [pc, #484]	; (8009544 <_strtod_l+0x5a4>)
 800935e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009362:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009366:	f7f7 f967 	bl	8000638 <__aeabi_dmul>
 800936a:	4682      	mov	sl, r0
 800936c:	4648      	mov	r0, r9
 800936e:	468b      	mov	fp, r1
 8009370:	f7f7 f8e8 	bl	8000544 <__aeabi_ui2d>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4650      	mov	r0, sl
 800937a:	4659      	mov	r1, fp
 800937c:	f7f6 ffa6 	bl	80002cc <__adddf3>
 8009380:	4682      	mov	sl, r0
 8009382:	468b      	mov	fp, r1
 8009384:	2d0f      	cmp	r5, #15
 8009386:	dc38      	bgt.n	80093fa <_strtod_l+0x45a>
 8009388:	9b08      	ldr	r3, [sp, #32]
 800938a:	2b00      	cmp	r3, #0
 800938c:	f43f ae4a 	beq.w	8009024 <_strtod_l+0x84>
 8009390:	dd24      	ble.n	80093dc <_strtod_l+0x43c>
 8009392:	2b16      	cmp	r3, #22
 8009394:	dc0b      	bgt.n	80093ae <_strtod_l+0x40e>
 8009396:	4d6b      	ldr	r5, [pc, #428]	; (8009544 <_strtod_l+0x5a4>)
 8009398:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800939c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80093a0:	4652      	mov	r2, sl
 80093a2:	465b      	mov	r3, fp
 80093a4:	f7f7 f948 	bl	8000638 <__aeabi_dmul>
 80093a8:	4682      	mov	sl, r0
 80093aa:	468b      	mov	fp, r1
 80093ac:	e63a      	b.n	8009024 <_strtod_l+0x84>
 80093ae:	9a08      	ldr	r2, [sp, #32]
 80093b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80093b4:	4293      	cmp	r3, r2
 80093b6:	db20      	blt.n	80093fa <_strtod_l+0x45a>
 80093b8:	4c62      	ldr	r4, [pc, #392]	; (8009544 <_strtod_l+0x5a4>)
 80093ba:	f1c5 050f 	rsb	r5, r5, #15
 80093be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80093c2:	4652      	mov	r2, sl
 80093c4:	465b      	mov	r3, fp
 80093c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ca:	f7f7 f935 	bl	8000638 <__aeabi_dmul>
 80093ce:	9b08      	ldr	r3, [sp, #32]
 80093d0:	1b5d      	subs	r5, r3, r5
 80093d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80093d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80093da:	e7e3      	b.n	80093a4 <_strtod_l+0x404>
 80093dc:	9b08      	ldr	r3, [sp, #32]
 80093de:	3316      	adds	r3, #22
 80093e0:	db0b      	blt.n	80093fa <_strtod_l+0x45a>
 80093e2:	9b07      	ldr	r3, [sp, #28]
 80093e4:	4a57      	ldr	r2, [pc, #348]	; (8009544 <_strtod_l+0x5a4>)
 80093e6:	1b9e      	subs	r6, r3, r6
 80093e8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80093ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093f0:	4650      	mov	r0, sl
 80093f2:	4659      	mov	r1, fp
 80093f4:	f7f7 fa4a 	bl	800088c <__aeabi_ddiv>
 80093f8:	e7d6      	b.n	80093a8 <_strtod_l+0x408>
 80093fa:	9b08      	ldr	r3, [sp, #32]
 80093fc:	eba5 0808 	sub.w	r8, r5, r8
 8009400:	4498      	add	r8, r3
 8009402:	f1b8 0f00 	cmp.w	r8, #0
 8009406:	dd71      	ble.n	80094ec <_strtod_l+0x54c>
 8009408:	f018 030f 	ands.w	r3, r8, #15
 800940c:	d00a      	beq.n	8009424 <_strtod_l+0x484>
 800940e:	494d      	ldr	r1, [pc, #308]	; (8009544 <_strtod_l+0x5a4>)
 8009410:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009414:	4652      	mov	r2, sl
 8009416:	465b      	mov	r3, fp
 8009418:	e9d1 0100 	ldrd	r0, r1, [r1]
 800941c:	f7f7 f90c 	bl	8000638 <__aeabi_dmul>
 8009420:	4682      	mov	sl, r0
 8009422:	468b      	mov	fp, r1
 8009424:	f038 080f 	bics.w	r8, r8, #15
 8009428:	d04d      	beq.n	80094c6 <_strtod_l+0x526>
 800942a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800942e:	dd22      	ble.n	8009476 <_strtod_l+0x4d6>
 8009430:	2500      	movs	r5, #0
 8009432:	462e      	mov	r6, r5
 8009434:	9509      	str	r5, [sp, #36]	; 0x24
 8009436:	9507      	str	r5, [sp, #28]
 8009438:	2322      	movs	r3, #34	; 0x22
 800943a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800954c <_strtod_l+0x5ac>
 800943e:	6023      	str	r3, [r4, #0]
 8009440:	f04f 0a00 	mov.w	sl, #0
 8009444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009446:	2b00      	cmp	r3, #0
 8009448:	f43f adec 	beq.w	8009024 <_strtod_l+0x84>
 800944c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800944e:	4620      	mov	r0, r4
 8009450:	f002 f966 	bl	800b720 <_Bfree>
 8009454:	9907      	ldr	r1, [sp, #28]
 8009456:	4620      	mov	r0, r4
 8009458:	f002 f962 	bl	800b720 <_Bfree>
 800945c:	4631      	mov	r1, r6
 800945e:	4620      	mov	r0, r4
 8009460:	f002 f95e 	bl	800b720 <_Bfree>
 8009464:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009466:	4620      	mov	r0, r4
 8009468:	f002 f95a 	bl	800b720 <_Bfree>
 800946c:	4629      	mov	r1, r5
 800946e:	4620      	mov	r0, r4
 8009470:	f002 f956 	bl	800b720 <_Bfree>
 8009474:	e5d6      	b.n	8009024 <_strtod_l+0x84>
 8009476:	2300      	movs	r3, #0
 8009478:	ea4f 1828 	mov.w	r8, r8, asr #4
 800947c:	4650      	mov	r0, sl
 800947e:	4659      	mov	r1, fp
 8009480:	4699      	mov	r9, r3
 8009482:	f1b8 0f01 	cmp.w	r8, #1
 8009486:	dc21      	bgt.n	80094cc <_strtod_l+0x52c>
 8009488:	b10b      	cbz	r3, 800948e <_strtod_l+0x4ee>
 800948a:	4682      	mov	sl, r0
 800948c:	468b      	mov	fp, r1
 800948e:	4b2e      	ldr	r3, [pc, #184]	; (8009548 <_strtod_l+0x5a8>)
 8009490:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009494:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009498:	4652      	mov	r2, sl
 800949a:	465b      	mov	r3, fp
 800949c:	e9d9 0100 	ldrd	r0, r1, [r9]
 80094a0:	f7f7 f8ca 	bl	8000638 <__aeabi_dmul>
 80094a4:	4b29      	ldr	r3, [pc, #164]	; (800954c <_strtod_l+0x5ac>)
 80094a6:	460a      	mov	r2, r1
 80094a8:	400b      	ands	r3, r1
 80094aa:	4929      	ldr	r1, [pc, #164]	; (8009550 <_strtod_l+0x5b0>)
 80094ac:	428b      	cmp	r3, r1
 80094ae:	4682      	mov	sl, r0
 80094b0:	d8be      	bhi.n	8009430 <_strtod_l+0x490>
 80094b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80094b6:	428b      	cmp	r3, r1
 80094b8:	bf86      	itte	hi
 80094ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009554 <_strtod_l+0x5b4>
 80094be:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80094c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80094c6:	2300      	movs	r3, #0
 80094c8:	9304      	str	r3, [sp, #16]
 80094ca:	e081      	b.n	80095d0 <_strtod_l+0x630>
 80094cc:	f018 0f01 	tst.w	r8, #1
 80094d0:	d007      	beq.n	80094e2 <_strtod_l+0x542>
 80094d2:	4b1d      	ldr	r3, [pc, #116]	; (8009548 <_strtod_l+0x5a8>)
 80094d4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80094d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094dc:	f7f7 f8ac 	bl	8000638 <__aeabi_dmul>
 80094e0:	2301      	movs	r3, #1
 80094e2:	f109 0901 	add.w	r9, r9, #1
 80094e6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80094ea:	e7ca      	b.n	8009482 <_strtod_l+0x4e2>
 80094ec:	d0eb      	beq.n	80094c6 <_strtod_l+0x526>
 80094ee:	f1c8 0800 	rsb	r8, r8, #0
 80094f2:	f018 020f 	ands.w	r2, r8, #15
 80094f6:	d00a      	beq.n	800950e <_strtod_l+0x56e>
 80094f8:	4b12      	ldr	r3, [pc, #72]	; (8009544 <_strtod_l+0x5a4>)
 80094fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094fe:	4650      	mov	r0, sl
 8009500:	4659      	mov	r1, fp
 8009502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009506:	f7f7 f9c1 	bl	800088c <__aeabi_ddiv>
 800950a:	4682      	mov	sl, r0
 800950c:	468b      	mov	fp, r1
 800950e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009512:	d0d8      	beq.n	80094c6 <_strtod_l+0x526>
 8009514:	f1b8 0f1f 	cmp.w	r8, #31
 8009518:	dd1e      	ble.n	8009558 <_strtod_l+0x5b8>
 800951a:	2500      	movs	r5, #0
 800951c:	462e      	mov	r6, r5
 800951e:	9509      	str	r5, [sp, #36]	; 0x24
 8009520:	9507      	str	r5, [sp, #28]
 8009522:	2322      	movs	r3, #34	; 0x22
 8009524:	f04f 0a00 	mov.w	sl, #0
 8009528:	f04f 0b00 	mov.w	fp, #0
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	e789      	b.n	8009444 <_strtod_l+0x4a4>
 8009530:	08010ead 	.word	0x08010ead
 8009534:	08010ef0 	.word	0x08010ef0
 8009538:	08010ea5 	.word	0x08010ea5
 800953c:	08011034 	.word	0x08011034
 8009540:	08011350 	.word	0x08011350
 8009544:	08011230 	.word	0x08011230
 8009548:	08011208 	.word	0x08011208
 800954c:	7ff00000 	.word	0x7ff00000
 8009550:	7ca00000 	.word	0x7ca00000
 8009554:	7fefffff 	.word	0x7fefffff
 8009558:	f018 0310 	ands.w	r3, r8, #16
 800955c:	bf18      	it	ne
 800955e:	236a      	movne	r3, #106	; 0x6a
 8009560:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009918 <_strtod_l+0x978>
 8009564:	9304      	str	r3, [sp, #16]
 8009566:	4650      	mov	r0, sl
 8009568:	4659      	mov	r1, fp
 800956a:	2300      	movs	r3, #0
 800956c:	f018 0f01 	tst.w	r8, #1
 8009570:	d004      	beq.n	800957c <_strtod_l+0x5dc>
 8009572:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009576:	f7f7 f85f 	bl	8000638 <__aeabi_dmul>
 800957a:	2301      	movs	r3, #1
 800957c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009580:	f109 0908 	add.w	r9, r9, #8
 8009584:	d1f2      	bne.n	800956c <_strtod_l+0x5cc>
 8009586:	b10b      	cbz	r3, 800958c <_strtod_l+0x5ec>
 8009588:	4682      	mov	sl, r0
 800958a:	468b      	mov	fp, r1
 800958c:	9b04      	ldr	r3, [sp, #16]
 800958e:	b1bb      	cbz	r3, 80095c0 <_strtod_l+0x620>
 8009590:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009594:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009598:	2b00      	cmp	r3, #0
 800959a:	4659      	mov	r1, fp
 800959c:	dd10      	ble.n	80095c0 <_strtod_l+0x620>
 800959e:	2b1f      	cmp	r3, #31
 80095a0:	f340 8128 	ble.w	80097f4 <_strtod_l+0x854>
 80095a4:	2b34      	cmp	r3, #52	; 0x34
 80095a6:	bfde      	ittt	le
 80095a8:	3b20      	suble	r3, #32
 80095aa:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80095ae:	fa02 f303 	lslle.w	r3, r2, r3
 80095b2:	f04f 0a00 	mov.w	sl, #0
 80095b6:	bfcc      	ite	gt
 80095b8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80095bc:	ea03 0b01 	andle.w	fp, r3, r1
 80095c0:	2200      	movs	r2, #0
 80095c2:	2300      	movs	r3, #0
 80095c4:	4650      	mov	r0, sl
 80095c6:	4659      	mov	r1, fp
 80095c8:	f7f7 fa9e 	bl	8000b08 <__aeabi_dcmpeq>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d1a4      	bne.n	800951a <_strtod_l+0x57a>
 80095d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095d6:	462b      	mov	r3, r5
 80095d8:	463a      	mov	r2, r7
 80095da:	4620      	mov	r0, r4
 80095dc:	f002 f90c 	bl	800b7f8 <__s2b>
 80095e0:	9009      	str	r0, [sp, #36]	; 0x24
 80095e2:	2800      	cmp	r0, #0
 80095e4:	f43f af24 	beq.w	8009430 <_strtod_l+0x490>
 80095e8:	9b07      	ldr	r3, [sp, #28]
 80095ea:	1b9e      	subs	r6, r3, r6
 80095ec:	9b08      	ldr	r3, [sp, #32]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	bfb4      	ite	lt
 80095f2:	4633      	movlt	r3, r6
 80095f4:	2300      	movge	r3, #0
 80095f6:	9310      	str	r3, [sp, #64]	; 0x40
 80095f8:	9b08      	ldr	r3, [sp, #32]
 80095fa:	2500      	movs	r5, #0
 80095fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009600:	9318      	str	r3, [sp, #96]	; 0x60
 8009602:	462e      	mov	r6, r5
 8009604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009606:	4620      	mov	r0, r4
 8009608:	6859      	ldr	r1, [r3, #4]
 800960a:	f002 f849 	bl	800b6a0 <_Balloc>
 800960e:	9007      	str	r0, [sp, #28]
 8009610:	2800      	cmp	r0, #0
 8009612:	f43f af11 	beq.w	8009438 <_strtod_l+0x498>
 8009616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009618:	691a      	ldr	r2, [r3, #16]
 800961a:	3202      	adds	r2, #2
 800961c:	f103 010c 	add.w	r1, r3, #12
 8009620:	0092      	lsls	r2, r2, #2
 8009622:	300c      	adds	r0, #12
 8009624:	f7fe fbb6 	bl	8007d94 <memcpy>
 8009628:	ec4b ab10 	vmov	d0, sl, fp
 800962c:	aa20      	add	r2, sp, #128	; 0x80
 800962e:	a91f      	add	r1, sp, #124	; 0x7c
 8009630:	4620      	mov	r0, r4
 8009632:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009636:	f002 fc1b 	bl	800be70 <__d2b>
 800963a:	901e      	str	r0, [sp, #120]	; 0x78
 800963c:	2800      	cmp	r0, #0
 800963e:	f43f aefb 	beq.w	8009438 <_strtod_l+0x498>
 8009642:	2101      	movs	r1, #1
 8009644:	4620      	mov	r0, r4
 8009646:	f002 f971 	bl	800b92c <__i2b>
 800964a:	4606      	mov	r6, r0
 800964c:	2800      	cmp	r0, #0
 800964e:	f43f aef3 	beq.w	8009438 <_strtod_l+0x498>
 8009652:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009654:	9904      	ldr	r1, [sp, #16]
 8009656:	2b00      	cmp	r3, #0
 8009658:	bfab      	itete	ge
 800965a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800965c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800965e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009660:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009664:	bfac      	ite	ge
 8009666:	eb03 0902 	addge.w	r9, r3, r2
 800966a:	1ad7      	sublt	r7, r2, r3
 800966c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800966e:	eba3 0801 	sub.w	r8, r3, r1
 8009672:	4490      	add	r8, r2
 8009674:	4ba3      	ldr	r3, [pc, #652]	; (8009904 <_strtod_l+0x964>)
 8009676:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800967a:	4598      	cmp	r8, r3
 800967c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009680:	f280 80cc 	bge.w	800981c <_strtod_l+0x87c>
 8009684:	eba3 0308 	sub.w	r3, r3, r8
 8009688:	2b1f      	cmp	r3, #31
 800968a:	eba2 0203 	sub.w	r2, r2, r3
 800968e:	f04f 0101 	mov.w	r1, #1
 8009692:	f300 80b6 	bgt.w	8009802 <_strtod_l+0x862>
 8009696:	fa01 f303 	lsl.w	r3, r1, r3
 800969a:	9311      	str	r3, [sp, #68]	; 0x44
 800969c:	2300      	movs	r3, #0
 800969e:	930c      	str	r3, [sp, #48]	; 0x30
 80096a0:	eb09 0802 	add.w	r8, r9, r2
 80096a4:	9b04      	ldr	r3, [sp, #16]
 80096a6:	45c1      	cmp	r9, r8
 80096a8:	4417      	add	r7, r2
 80096aa:	441f      	add	r7, r3
 80096ac:	464b      	mov	r3, r9
 80096ae:	bfa8      	it	ge
 80096b0:	4643      	movge	r3, r8
 80096b2:	42bb      	cmp	r3, r7
 80096b4:	bfa8      	it	ge
 80096b6:	463b      	movge	r3, r7
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	bfc2      	ittt	gt
 80096bc:	eba8 0803 	subgt.w	r8, r8, r3
 80096c0:	1aff      	subgt	r7, r7, r3
 80096c2:	eba9 0903 	subgt.w	r9, r9, r3
 80096c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	dd17      	ble.n	80096fc <_strtod_l+0x75c>
 80096cc:	4631      	mov	r1, r6
 80096ce:	461a      	mov	r2, r3
 80096d0:	4620      	mov	r0, r4
 80096d2:	f002 f9e7 	bl	800baa4 <__pow5mult>
 80096d6:	4606      	mov	r6, r0
 80096d8:	2800      	cmp	r0, #0
 80096da:	f43f aead 	beq.w	8009438 <_strtod_l+0x498>
 80096de:	4601      	mov	r1, r0
 80096e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80096e2:	4620      	mov	r0, r4
 80096e4:	f002 f938 	bl	800b958 <__multiply>
 80096e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80096ea:	2800      	cmp	r0, #0
 80096ec:	f43f aea4 	beq.w	8009438 <_strtod_l+0x498>
 80096f0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80096f2:	4620      	mov	r0, r4
 80096f4:	f002 f814 	bl	800b720 <_Bfree>
 80096f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096fa:	931e      	str	r3, [sp, #120]	; 0x78
 80096fc:	f1b8 0f00 	cmp.w	r8, #0
 8009700:	f300 8091 	bgt.w	8009826 <_strtod_l+0x886>
 8009704:	9b08      	ldr	r3, [sp, #32]
 8009706:	2b00      	cmp	r3, #0
 8009708:	dd08      	ble.n	800971c <_strtod_l+0x77c>
 800970a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800970c:	9907      	ldr	r1, [sp, #28]
 800970e:	4620      	mov	r0, r4
 8009710:	f002 f9c8 	bl	800baa4 <__pow5mult>
 8009714:	9007      	str	r0, [sp, #28]
 8009716:	2800      	cmp	r0, #0
 8009718:	f43f ae8e 	beq.w	8009438 <_strtod_l+0x498>
 800971c:	2f00      	cmp	r7, #0
 800971e:	dd08      	ble.n	8009732 <_strtod_l+0x792>
 8009720:	9907      	ldr	r1, [sp, #28]
 8009722:	463a      	mov	r2, r7
 8009724:	4620      	mov	r0, r4
 8009726:	f002 fa17 	bl	800bb58 <__lshift>
 800972a:	9007      	str	r0, [sp, #28]
 800972c:	2800      	cmp	r0, #0
 800972e:	f43f ae83 	beq.w	8009438 <_strtod_l+0x498>
 8009732:	f1b9 0f00 	cmp.w	r9, #0
 8009736:	dd08      	ble.n	800974a <_strtod_l+0x7aa>
 8009738:	4631      	mov	r1, r6
 800973a:	464a      	mov	r2, r9
 800973c:	4620      	mov	r0, r4
 800973e:	f002 fa0b 	bl	800bb58 <__lshift>
 8009742:	4606      	mov	r6, r0
 8009744:	2800      	cmp	r0, #0
 8009746:	f43f ae77 	beq.w	8009438 <_strtod_l+0x498>
 800974a:	9a07      	ldr	r2, [sp, #28]
 800974c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800974e:	4620      	mov	r0, r4
 8009750:	f002 fa8a 	bl	800bc68 <__mdiff>
 8009754:	4605      	mov	r5, r0
 8009756:	2800      	cmp	r0, #0
 8009758:	f43f ae6e 	beq.w	8009438 <_strtod_l+0x498>
 800975c:	68c3      	ldr	r3, [r0, #12]
 800975e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009760:	2300      	movs	r3, #0
 8009762:	60c3      	str	r3, [r0, #12]
 8009764:	4631      	mov	r1, r6
 8009766:	f002 fa63 	bl	800bc30 <__mcmp>
 800976a:	2800      	cmp	r0, #0
 800976c:	da65      	bge.n	800983a <_strtod_l+0x89a>
 800976e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009770:	ea53 030a 	orrs.w	r3, r3, sl
 8009774:	f040 8087 	bne.w	8009886 <_strtod_l+0x8e6>
 8009778:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800977c:	2b00      	cmp	r3, #0
 800977e:	f040 8082 	bne.w	8009886 <_strtod_l+0x8e6>
 8009782:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009786:	0d1b      	lsrs	r3, r3, #20
 8009788:	051b      	lsls	r3, r3, #20
 800978a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800978e:	d97a      	bls.n	8009886 <_strtod_l+0x8e6>
 8009790:	696b      	ldr	r3, [r5, #20]
 8009792:	b913      	cbnz	r3, 800979a <_strtod_l+0x7fa>
 8009794:	692b      	ldr	r3, [r5, #16]
 8009796:	2b01      	cmp	r3, #1
 8009798:	dd75      	ble.n	8009886 <_strtod_l+0x8e6>
 800979a:	4629      	mov	r1, r5
 800979c:	2201      	movs	r2, #1
 800979e:	4620      	mov	r0, r4
 80097a0:	f002 f9da 	bl	800bb58 <__lshift>
 80097a4:	4631      	mov	r1, r6
 80097a6:	4605      	mov	r5, r0
 80097a8:	f002 fa42 	bl	800bc30 <__mcmp>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	dd6a      	ble.n	8009886 <_strtod_l+0x8e6>
 80097b0:	9904      	ldr	r1, [sp, #16]
 80097b2:	4a55      	ldr	r2, [pc, #340]	; (8009908 <_strtod_l+0x968>)
 80097b4:	465b      	mov	r3, fp
 80097b6:	2900      	cmp	r1, #0
 80097b8:	f000 8085 	beq.w	80098c6 <_strtod_l+0x926>
 80097bc:	ea02 010b 	and.w	r1, r2, fp
 80097c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80097c4:	dc7f      	bgt.n	80098c6 <_strtod_l+0x926>
 80097c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80097ca:	f77f aeaa 	ble.w	8009522 <_strtod_l+0x582>
 80097ce:	4a4f      	ldr	r2, [pc, #316]	; (800990c <_strtod_l+0x96c>)
 80097d0:	2300      	movs	r3, #0
 80097d2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80097d6:	4650      	mov	r0, sl
 80097d8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80097dc:	4659      	mov	r1, fp
 80097de:	f7f6 ff2b 	bl	8000638 <__aeabi_dmul>
 80097e2:	460b      	mov	r3, r1
 80097e4:	4303      	orrs	r3, r0
 80097e6:	bf08      	it	eq
 80097e8:	2322      	moveq	r3, #34	; 0x22
 80097ea:	4682      	mov	sl, r0
 80097ec:	468b      	mov	fp, r1
 80097ee:	bf08      	it	eq
 80097f0:	6023      	streq	r3, [r4, #0]
 80097f2:	e62b      	b.n	800944c <_strtod_l+0x4ac>
 80097f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097f8:	fa02 f303 	lsl.w	r3, r2, r3
 80097fc:	ea03 0a0a 	and.w	sl, r3, sl
 8009800:	e6de      	b.n	80095c0 <_strtod_l+0x620>
 8009802:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009806:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800980a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800980e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009812:	fa01 f308 	lsl.w	r3, r1, r8
 8009816:	930c      	str	r3, [sp, #48]	; 0x30
 8009818:	9111      	str	r1, [sp, #68]	; 0x44
 800981a:	e741      	b.n	80096a0 <_strtod_l+0x700>
 800981c:	2300      	movs	r3, #0
 800981e:	930c      	str	r3, [sp, #48]	; 0x30
 8009820:	2301      	movs	r3, #1
 8009822:	9311      	str	r3, [sp, #68]	; 0x44
 8009824:	e73c      	b.n	80096a0 <_strtod_l+0x700>
 8009826:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009828:	4642      	mov	r2, r8
 800982a:	4620      	mov	r0, r4
 800982c:	f002 f994 	bl	800bb58 <__lshift>
 8009830:	901e      	str	r0, [sp, #120]	; 0x78
 8009832:	2800      	cmp	r0, #0
 8009834:	f47f af66 	bne.w	8009704 <_strtod_l+0x764>
 8009838:	e5fe      	b.n	8009438 <_strtod_l+0x498>
 800983a:	465f      	mov	r7, fp
 800983c:	d16e      	bne.n	800991c <_strtod_l+0x97c>
 800983e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009840:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009844:	b342      	cbz	r2, 8009898 <_strtod_l+0x8f8>
 8009846:	4a32      	ldr	r2, [pc, #200]	; (8009910 <_strtod_l+0x970>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d128      	bne.n	800989e <_strtod_l+0x8fe>
 800984c:	9b04      	ldr	r3, [sp, #16]
 800984e:	4650      	mov	r0, sl
 8009850:	b1eb      	cbz	r3, 800988e <_strtod_l+0x8ee>
 8009852:	4a2d      	ldr	r2, [pc, #180]	; (8009908 <_strtod_l+0x968>)
 8009854:	403a      	ands	r2, r7
 8009856:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800985a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800985e:	d819      	bhi.n	8009894 <_strtod_l+0x8f4>
 8009860:	0d12      	lsrs	r2, r2, #20
 8009862:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009866:	fa01 f303 	lsl.w	r3, r1, r3
 800986a:	4298      	cmp	r0, r3
 800986c:	d117      	bne.n	800989e <_strtod_l+0x8fe>
 800986e:	4b29      	ldr	r3, [pc, #164]	; (8009914 <_strtod_l+0x974>)
 8009870:	429f      	cmp	r7, r3
 8009872:	d102      	bne.n	800987a <_strtod_l+0x8da>
 8009874:	3001      	adds	r0, #1
 8009876:	f43f addf 	beq.w	8009438 <_strtod_l+0x498>
 800987a:	4b23      	ldr	r3, [pc, #140]	; (8009908 <_strtod_l+0x968>)
 800987c:	403b      	ands	r3, r7
 800987e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009882:	f04f 0a00 	mov.w	sl, #0
 8009886:	9b04      	ldr	r3, [sp, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1a0      	bne.n	80097ce <_strtod_l+0x82e>
 800988c:	e5de      	b.n	800944c <_strtod_l+0x4ac>
 800988e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009892:	e7ea      	b.n	800986a <_strtod_l+0x8ca>
 8009894:	460b      	mov	r3, r1
 8009896:	e7e8      	b.n	800986a <_strtod_l+0x8ca>
 8009898:	ea53 030a 	orrs.w	r3, r3, sl
 800989c:	d088      	beq.n	80097b0 <_strtod_l+0x810>
 800989e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098a0:	b1db      	cbz	r3, 80098da <_strtod_l+0x93a>
 80098a2:	423b      	tst	r3, r7
 80098a4:	d0ef      	beq.n	8009886 <_strtod_l+0x8e6>
 80098a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098a8:	9a04      	ldr	r2, [sp, #16]
 80098aa:	4650      	mov	r0, sl
 80098ac:	4659      	mov	r1, fp
 80098ae:	b1c3      	cbz	r3, 80098e2 <_strtod_l+0x942>
 80098b0:	f7ff fb5a 	bl	8008f68 <sulp>
 80098b4:	4602      	mov	r2, r0
 80098b6:	460b      	mov	r3, r1
 80098b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098bc:	f7f6 fd06 	bl	80002cc <__adddf3>
 80098c0:	4682      	mov	sl, r0
 80098c2:	468b      	mov	fp, r1
 80098c4:	e7df      	b.n	8009886 <_strtod_l+0x8e6>
 80098c6:	4013      	ands	r3, r2
 80098c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80098cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80098d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80098d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80098d8:	e7d5      	b.n	8009886 <_strtod_l+0x8e6>
 80098da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098dc:	ea13 0f0a 	tst.w	r3, sl
 80098e0:	e7e0      	b.n	80098a4 <_strtod_l+0x904>
 80098e2:	f7ff fb41 	bl	8008f68 <sulp>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098ee:	f7f6 fceb 	bl	80002c8 <__aeabi_dsub>
 80098f2:	2200      	movs	r2, #0
 80098f4:	2300      	movs	r3, #0
 80098f6:	4682      	mov	sl, r0
 80098f8:	468b      	mov	fp, r1
 80098fa:	f7f7 f905 	bl	8000b08 <__aeabi_dcmpeq>
 80098fe:	2800      	cmp	r0, #0
 8009900:	d0c1      	beq.n	8009886 <_strtod_l+0x8e6>
 8009902:	e60e      	b.n	8009522 <_strtod_l+0x582>
 8009904:	fffffc02 	.word	0xfffffc02
 8009908:	7ff00000 	.word	0x7ff00000
 800990c:	39500000 	.word	0x39500000
 8009910:	000fffff 	.word	0x000fffff
 8009914:	7fefffff 	.word	0x7fefffff
 8009918:	08010f08 	.word	0x08010f08
 800991c:	4631      	mov	r1, r6
 800991e:	4628      	mov	r0, r5
 8009920:	f002 fb02 	bl	800bf28 <__ratio>
 8009924:	ec59 8b10 	vmov	r8, r9, d0
 8009928:	ee10 0a10 	vmov	r0, s0
 800992c:	2200      	movs	r2, #0
 800992e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009932:	4649      	mov	r1, r9
 8009934:	f7f7 f8fc 	bl	8000b30 <__aeabi_dcmple>
 8009938:	2800      	cmp	r0, #0
 800993a:	d07c      	beq.n	8009a36 <_strtod_l+0xa96>
 800993c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800993e:	2b00      	cmp	r3, #0
 8009940:	d04c      	beq.n	80099dc <_strtod_l+0xa3c>
 8009942:	4b95      	ldr	r3, [pc, #596]	; (8009b98 <_strtod_l+0xbf8>)
 8009944:	2200      	movs	r2, #0
 8009946:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800994a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009b98 <_strtod_l+0xbf8>
 800994e:	f04f 0800 	mov.w	r8, #0
 8009952:	4b92      	ldr	r3, [pc, #584]	; (8009b9c <_strtod_l+0xbfc>)
 8009954:	403b      	ands	r3, r7
 8009956:	9311      	str	r3, [sp, #68]	; 0x44
 8009958:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800995a:	4b91      	ldr	r3, [pc, #580]	; (8009ba0 <_strtod_l+0xc00>)
 800995c:	429a      	cmp	r2, r3
 800995e:	f040 80b2 	bne.w	8009ac6 <_strtod_l+0xb26>
 8009962:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800996a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800996e:	ec4b ab10 	vmov	d0, sl, fp
 8009972:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009976:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800997a:	f002 f9fd 	bl	800bd78 <__ulp>
 800997e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009982:	ec53 2b10 	vmov	r2, r3, d0
 8009986:	f7f6 fe57 	bl	8000638 <__aeabi_dmul>
 800998a:	4652      	mov	r2, sl
 800998c:	465b      	mov	r3, fp
 800998e:	f7f6 fc9d 	bl	80002cc <__adddf3>
 8009992:	460b      	mov	r3, r1
 8009994:	4981      	ldr	r1, [pc, #516]	; (8009b9c <_strtod_l+0xbfc>)
 8009996:	4a83      	ldr	r2, [pc, #524]	; (8009ba4 <_strtod_l+0xc04>)
 8009998:	4019      	ands	r1, r3
 800999a:	4291      	cmp	r1, r2
 800999c:	4682      	mov	sl, r0
 800999e:	d95e      	bls.n	8009a5e <_strtod_l+0xabe>
 80099a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d103      	bne.n	80099b2 <_strtod_l+0xa12>
 80099aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ac:	3301      	adds	r3, #1
 80099ae:	f43f ad43 	beq.w	8009438 <_strtod_l+0x498>
 80099b2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009bb0 <_strtod_l+0xc10>
 80099b6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80099ba:	991e      	ldr	r1, [sp, #120]	; 0x78
 80099bc:	4620      	mov	r0, r4
 80099be:	f001 feaf 	bl	800b720 <_Bfree>
 80099c2:	9907      	ldr	r1, [sp, #28]
 80099c4:	4620      	mov	r0, r4
 80099c6:	f001 feab 	bl	800b720 <_Bfree>
 80099ca:	4631      	mov	r1, r6
 80099cc:	4620      	mov	r0, r4
 80099ce:	f001 fea7 	bl	800b720 <_Bfree>
 80099d2:	4629      	mov	r1, r5
 80099d4:	4620      	mov	r0, r4
 80099d6:	f001 fea3 	bl	800b720 <_Bfree>
 80099da:	e613      	b.n	8009604 <_strtod_l+0x664>
 80099dc:	f1ba 0f00 	cmp.w	sl, #0
 80099e0:	d11b      	bne.n	8009a1a <_strtod_l+0xa7a>
 80099e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099e6:	b9f3      	cbnz	r3, 8009a26 <_strtod_l+0xa86>
 80099e8:	4b6b      	ldr	r3, [pc, #428]	; (8009b98 <_strtod_l+0xbf8>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	4640      	mov	r0, r8
 80099ee:	4649      	mov	r1, r9
 80099f0:	f7f7 f894 	bl	8000b1c <__aeabi_dcmplt>
 80099f4:	b9d0      	cbnz	r0, 8009a2c <_strtod_l+0xa8c>
 80099f6:	4640      	mov	r0, r8
 80099f8:	4649      	mov	r1, r9
 80099fa:	4b6b      	ldr	r3, [pc, #428]	; (8009ba8 <_strtod_l+0xc08>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	f7f6 fe1b 	bl	8000638 <__aeabi_dmul>
 8009a02:	4680      	mov	r8, r0
 8009a04:	4689      	mov	r9, r1
 8009a06:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009a0a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009a0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009a10:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009a14:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009a18:	e79b      	b.n	8009952 <_strtod_l+0x9b2>
 8009a1a:	f1ba 0f01 	cmp.w	sl, #1
 8009a1e:	d102      	bne.n	8009a26 <_strtod_l+0xa86>
 8009a20:	2f00      	cmp	r7, #0
 8009a22:	f43f ad7e 	beq.w	8009522 <_strtod_l+0x582>
 8009a26:	4b61      	ldr	r3, [pc, #388]	; (8009bac <_strtod_l+0xc0c>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	e78c      	b.n	8009946 <_strtod_l+0x9a6>
 8009a2c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009ba8 <_strtod_l+0xc08>
 8009a30:	f04f 0800 	mov.w	r8, #0
 8009a34:	e7e7      	b.n	8009a06 <_strtod_l+0xa66>
 8009a36:	4b5c      	ldr	r3, [pc, #368]	; (8009ba8 <_strtod_l+0xc08>)
 8009a38:	4640      	mov	r0, r8
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f7f6 fdfb 	bl	8000638 <__aeabi_dmul>
 8009a42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a44:	4680      	mov	r8, r0
 8009a46:	4689      	mov	r9, r1
 8009a48:	b933      	cbnz	r3, 8009a58 <_strtod_l+0xab8>
 8009a4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a4e:	9012      	str	r0, [sp, #72]	; 0x48
 8009a50:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a52:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009a56:	e7dd      	b.n	8009a14 <_strtod_l+0xa74>
 8009a58:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009a5c:	e7f9      	b.n	8009a52 <_strtod_l+0xab2>
 8009a5e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009a62:	9b04      	ldr	r3, [sp, #16]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1a8      	bne.n	80099ba <_strtod_l+0xa1a>
 8009a68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009a6e:	0d1b      	lsrs	r3, r3, #20
 8009a70:	051b      	lsls	r3, r3, #20
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d1a1      	bne.n	80099ba <_strtod_l+0xa1a>
 8009a76:	4640      	mov	r0, r8
 8009a78:	4649      	mov	r1, r9
 8009a7a:	f7f7 f93d 	bl	8000cf8 <__aeabi_d2lz>
 8009a7e:	f7f6 fdad 	bl	80005dc <__aeabi_l2d>
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	4640      	mov	r0, r8
 8009a88:	4649      	mov	r1, r9
 8009a8a:	f7f6 fc1d 	bl	80002c8 <__aeabi_dsub>
 8009a8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a94:	ea43 030a 	orr.w	r3, r3, sl
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	4680      	mov	r8, r0
 8009a9c:	4689      	mov	r9, r1
 8009a9e:	d053      	beq.n	8009b48 <_strtod_l+0xba8>
 8009aa0:	a335      	add	r3, pc, #212	; (adr r3, 8009b78 <_strtod_l+0xbd8>)
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	f7f7 f839 	bl	8000b1c <__aeabi_dcmplt>
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	f47f acce 	bne.w	800944c <_strtod_l+0x4ac>
 8009ab0:	a333      	add	r3, pc, #204	; (adr r3, 8009b80 <_strtod_l+0xbe0>)
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	4649      	mov	r1, r9
 8009aba:	f7f7 f84d 	bl	8000b58 <__aeabi_dcmpgt>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	f43f af7b 	beq.w	80099ba <_strtod_l+0xa1a>
 8009ac4:	e4c2      	b.n	800944c <_strtod_l+0x4ac>
 8009ac6:	9b04      	ldr	r3, [sp, #16]
 8009ac8:	b333      	cbz	r3, 8009b18 <_strtod_l+0xb78>
 8009aca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009acc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ad0:	d822      	bhi.n	8009b18 <_strtod_l+0xb78>
 8009ad2:	a32d      	add	r3, pc, #180	; (adr r3, 8009b88 <_strtod_l+0xbe8>)
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	4640      	mov	r0, r8
 8009ada:	4649      	mov	r1, r9
 8009adc:	f7f7 f828 	bl	8000b30 <__aeabi_dcmple>
 8009ae0:	b1a0      	cbz	r0, 8009b0c <_strtod_l+0xb6c>
 8009ae2:	4649      	mov	r1, r9
 8009ae4:	4640      	mov	r0, r8
 8009ae6:	f7f7 f87f 	bl	8000be8 <__aeabi_d2uiz>
 8009aea:	2801      	cmp	r0, #1
 8009aec:	bf38      	it	cc
 8009aee:	2001      	movcc	r0, #1
 8009af0:	f7f6 fd28 	bl	8000544 <__aeabi_ui2d>
 8009af4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009af6:	4680      	mov	r8, r0
 8009af8:	4689      	mov	r9, r1
 8009afa:	bb13      	cbnz	r3, 8009b42 <_strtod_l+0xba2>
 8009afc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b00:	9014      	str	r0, [sp, #80]	; 0x50
 8009b02:	9315      	str	r3, [sp, #84]	; 0x54
 8009b04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009b08:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009b14:	1a9b      	subs	r3, r3, r2
 8009b16:	930d      	str	r3, [sp, #52]	; 0x34
 8009b18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b1c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009b20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009b24:	f002 f928 	bl	800bd78 <__ulp>
 8009b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b2c:	ec53 2b10 	vmov	r2, r3, d0
 8009b30:	f7f6 fd82 	bl	8000638 <__aeabi_dmul>
 8009b34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009b38:	f7f6 fbc8 	bl	80002cc <__adddf3>
 8009b3c:	4682      	mov	sl, r0
 8009b3e:	468b      	mov	fp, r1
 8009b40:	e78f      	b.n	8009a62 <_strtod_l+0xac2>
 8009b42:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009b46:	e7dd      	b.n	8009b04 <_strtod_l+0xb64>
 8009b48:	a311      	add	r3, pc, #68	; (adr r3, 8009b90 <_strtod_l+0xbf0>)
 8009b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4e:	f7f6 ffe5 	bl	8000b1c <__aeabi_dcmplt>
 8009b52:	e7b4      	b.n	8009abe <_strtod_l+0xb1e>
 8009b54:	2300      	movs	r3, #0
 8009b56:	930e      	str	r3, [sp, #56]	; 0x38
 8009b58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b5c:	6013      	str	r3, [r2, #0]
 8009b5e:	f7ff ba65 	b.w	800902c <_strtod_l+0x8c>
 8009b62:	2b65      	cmp	r3, #101	; 0x65
 8009b64:	f43f ab5d 	beq.w	8009222 <_strtod_l+0x282>
 8009b68:	2b45      	cmp	r3, #69	; 0x45
 8009b6a:	f43f ab5a 	beq.w	8009222 <_strtod_l+0x282>
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f7ff bb92 	b.w	8009298 <_strtod_l+0x2f8>
 8009b74:	f3af 8000 	nop.w
 8009b78:	94a03595 	.word	0x94a03595
 8009b7c:	3fdfffff 	.word	0x3fdfffff
 8009b80:	35afe535 	.word	0x35afe535
 8009b84:	3fe00000 	.word	0x3fe00000
 8009b88:	ffc00000 	.word	0xffc00000
 8009b8c:	41dfffff 	.word	0x41dfffff
 8009b90:	94a03595 	.word	0x94a03595
 8009b94:	3fcfffff 	.word	0x3fcfffff
 8009b98:	3ff00000 	.word	0x3ff00000
 8009b9c:	7ff00000 	.word	0x7ff00000
 8009ba0:	7fe00000 	.word	0x7fe00000
 8009ba4:	7c9fffff 	.word	0x7c9fffff
 8009ba8:	3fe00000 	.word	0x3fe00000
 8009bac:	bff00000 	.word	0xbff00000
 8009bb0:	7fefffff 	.word	0x7fefffff

08009bb4 <_strtod_r>:
 8009bb4:	4b01      	ldr	r3, [pc, #4]	; (8009bbc <_strtod_r+0x8>)
 8009bb6:	f7ff b9f3 	b.w	8008fa0 <_strtod_l>
 8009bba:	bf00      	nop
 8009bbc:	20000074 	.word	0x20000074

08009bc0 <_strtol_l.isra.0>:
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc6:	d001      	beq.n	8009bcc <_strtol_l.isra.0+0xc>
 8009bc8:	2b24      	cmp	r3, #36	; 0x24
 8009bca:	d906      	bls.n	8009bda <_strtol_l.isra.0+0x1a>
 8009bcc:	f7fe f8b0 	bl	8007d30 <__errno>
 8009bd0:	2316      	movs	r3, #22
 8009bd2:	6003      	str	r3, [r0, #0]
 8009bd4:	2000      	movs	r0, #0
 8009bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bda:	4f3a      	ldr	r7, [pc, #232]	; (8009cc4 <_strtol_l.isra.0+0x104>)
 8009bdc:	468e      	mov	lr, r1
 8009bde:	4676      	mov	r6, lr
 8009be0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009be4:	5de5      	ldrb	r5, [r4, r7]
 8009be6:	f015 0508 	ands.w	r5, r5, #8
 8009bea:	d1f8      	bne.n	8009bde <_strtol_l.isra.0+0x1e>
 8009bec:	2c2d      	cmp	r4, #45	; 0x2d
 8009bee:	d134      	bne.n	8009c5a <_strtol_l.isra.0+0x9a>
 8009bf0:	f89e 4000 	ldrb.w	r4, [lr]
 8009bf4:	f04f 0801 	mov.w	r8, #1
 8009bf8:	f106 0e02 	add.w	lr, r6, #2
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d05c      	beq.n	8009cba <_strtol_l.isra.0+0xfa>
 8009c00:	2b10      	cmp	r3, #16
 8009c02:	d10c      	bne.n	8009c1e <_strtol_l.isra.0+0x5e>
 8009c04:	2c30      	cmp	r4, #48	; 0x30
 8009c06:	d10a      	bne.n	8009c1e <_strtol_l.isra.0+0x5e>
 8009c08:	f89e 4000 	ldrb.w	r4, [lr]
 8009c0c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009c10:	2c58      	cmp	r4, #88	; 0x58
 8009c12:	d14d      	bne.n	8009cb0 <_strtol_l.isra.0+0xf0>
 8009c14:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009c18:	2310      	movs	r3, #16
 8009c1a:	f10e 0e02 	add.w	lr, lr, #2
 8009c1e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009c22:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8009c26:	2600      	movs	r6, #0
 8009c28:	fbbc f9f3 	udiv	r9, ip, r3
 8009c2c:	4635      	mov	r5, r6
 8009c2e:	fb03 ca19 	mls	sl, r3, r9, ip
 8009c32:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009c36:	2f09      	cmp	r7, #9
 8009c38:	d818      	bhi.n	8009c6c <_strtol_l.isra.0+0xac>
 8009c3a:	463c      	mov	r4, r7
 8009c3c:	42a3      	cmp	r3, r4
 8009c3e:	dd24      	ble.n	8009c8a <_strtol_l.isra.0+0xca>
 8009c40:	2e00      	cmp	r6, #0
 8009c42:	db1f      	blt.n	8009c84 <_strtol_l.isra.0+0xc4>
 8009c44:	45a9      	cmp	r9, r5
 8009c46:	d31d      	bcc.n	8009c84 <_strtol_l.isra.0+0xc4>
 8009c48:	d101      	bne.n	8009c4e <_strtol_l.isra.0+0x8e>
 8009c4a:	45a2      	cmp	sl, r4
 8009c4c:	db1a      	blt.n	8009c84 <_strtol_l.isra.0+0xc4>
 8009c4e:	fb05 4503 	mla	r5, r5, r3, r4
 8009c52:	2601      	movs	r6, #1
 8009c54:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009c58:	e7eb      	b.n	8009c32 <_strtol_l.isra.0+0x72>
 8009c5a:	2c2b      	cmp	r4, #43	; 0x2b
 8009c5c:	bf08      	it	eq
 8009c5e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009c62:	46a8      	mov	r8, r5
 8009c64:	bf08      	it	eq
 8009c66:	f106 0e02 	addeq.w	lr, r6, #2
 8009c6a:	e7c7      	b.n	8009bfc <_strtol_l.isra.0+0x3c>
 8009c6c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009c70:	2f19      	cmp	r7, #25
 8009c72:	d801      	bhi.n	8009c78 <_strtol_l.isra.0+0xb8>
 8009c74:	3c37      	subs	r4, #55	; 0x37
 8009c76:	e7e1      	b.n	8009c3c <_strtol_l.isra.0+0x7c>
 8009c78:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009c7c:	2f19      	cmp	r7, #25
 8009c7e:	d804      	bhi.n	8009c8a <_strtol_l.isra.0+0xca>
 8009c80:	3c57      	subs	r4, #87	; 0x57
 8009c82:	e7db      	b.n	8009c3c <_strtol_l.isra.0+0x7c>
 8009c84:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009c88:	e7e4      	b.n	8009c54 <_strtol_l.isra.0+0x94>
 8009c8a:	2e00      	cmp	r6, #0
 8009c8c:	da05      	bge.n	8009c9a <_strtol_l.isra.0+0xda>
 8009c8e:	2322      	movs	r3, #34	; 0x22
 8009c90:	6003      	str	r3, [r0, #0]
 8009c92:	4665      	mov	r5, ip
 8009c94:	b942      	cbnz	r2, 8009ca8 <_strtol_l.isra.0+0xe8>
 8009c96:	4628      	mov	r0, r5
 8009c98:	e79d      	b.n	8009bd6 <_strtol_l.isra.0+0x16>
 8009c9a:	f1b8 0f00 	cmp.w	r8, #0
 8009c9e:	d000      	beq.n	8009ca2 <_strtol_l.isra.0+0xe2>
 8009ca0:	426d      	negs	r5, r5
 8009ca2:	2a00      	cmp	r2, #0
 8009ca4:	d0f7      	beq.n	8009c96 <_strtol_l.isra.0+0xd6>
 8009ca6:	b10e      	cbz	r6, 8009cac <_strtol_l.isra.0+0xec>
 8009ca8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8009cac:	6011      	str	r1, [r2, #0]
 8009cae:	e7f2      	b.n	8009c96 <_strtol_l.isra.0+0xd6>
 8009cb0:	2430      	movs	r4, #48	; 0x30
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1b3      	bne.n	8009c1e <_strtol_l.isra.0+0x5e>
 8009cb6:	2308      	movs	r3, #8
 8009cb8:	e7b1      	b.n	8009c1e <_strtol_l.isra.0+0x5e>
 8009cba:	2c30      	cmp	r4, #48	; 0x30
 8009cbc:	d0a4      	beq.n	8009c08 <_strtol_l.isra.0+0x48>
 8009cbe:	230a      	movs	r3, #10
 8009cc0:	e7ad      	b.n	8009c1e <_strtol_l.isra.0+0x5e>
 8009cc2:	bf00      	nop
 8009cc4:	08010f31 	.word	0x08010f31

08009cc8 <_strtol_r>:
 8009cc8:	f7ff bf7a 	b.w	8009bc0 <_strtol_l.isra.0>

08009ccc <__swbuf_r>:
 8009ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cce:	460e      	mov	r6, r1
 8009cd0:	4614      	mov	r4, r2
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	b118      	cbz	r0, 8009cde <__swbuf_r+0x12>
 8009cd6:	6983      	ldr	r3, [r0, #24]
 8009cd8:	b90b      	cbnz	r3, 8009cde <__swbuf_r+0x12>
 8009cda:	f001 f84b 	bl	800ad74 <__sinit>
 8009cde:	4b21      	ldr	r3, [pc, #132]	; (8009d64 <__swbuf_r+0x98>)
 8009ce0:	429c      	cmp	r4, r3
 8009ce2:	d12b      	bne.n	8009d3c <__swbuf_r+0x70>
 8009ce4:	686c      	ldr	r4, [r5, #4]
 8009ce6:	69a3      	ldr	r3, [r4, #24]
 8009ce8:	60a3      	str	r3, [r4, #8]
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	071a      	lsls	r2, r3, #28
 8009cee:	d52f      	bpl.n	8009d50 <__swbuf_r+0x84>
 8009cf0:	6923      	ldr	r3, [r4, #16]
 8009cf2:	b36b      	cbz	r3, 8009d50 <__swbuf_r+0x84>
 8009cf4:	6923      	ldr	r3, [r4, #16]
 8009cf6:	6820      	ldr	r0, [r4, #0]
 8009cf8:	1ac0      	subs	r0, r0, r3
 8009cfa:	6963      	ldr	r3, [r4, #20]
 8009cfc:	b2f6      	uxtb	r6, r6
 8009cfe:	4283      	cmp	r3, r0
 8009d00:	4637      	mov	r7, r6
 8009d02:	dc04      	bgt.n	8009d0e <__swbuf_r+0x42>
 8009d04:	4621      	mov	r1, r4
 8009d06:	4628      	mov	r0, r5
 8009d08:	f000 ffa0 	bl	800ac4c <_fflush_r>
 8009d0c:	bb30      	cbnz	r0, 8009d5c <__swbuf_r+0x90>
 8009d0e:	68a3      	ldr	r3, [r4, #8]
 8009d10:	3b01      	subs	r3, #1
 8009d12:	60a3      	str	r3, [r4, #8]
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	1c5a      	adds	r2, r3, #1
 8009d18:	6022      	str	r2, [r4, #0]
 8009d1a:	701e      	strb	r6, [r3, #0]
 8009d1c:	6963      	ldr	r3, [r4, #20]
 8009d1e:	3001      	adds	r0, #1
 8009d20:	4283      	cmp	r3, r0
 8009d22:	d004      	beq.n	8009d2e <__swbuf_r+0x62>
 8009d24:	89a3      	ldrh	r3, [r4, #12]
 8009d26:	07db      	lsls	r3, r3, #31
 8009d28:	d506      	bpl.n	8009d38 <__swbuf_r+0x6c>
 8009d2a:	2e0a      	cmp	r6, #10
 8009d2c:	d104      	bne.n	8009d38 <__swbuf_r+0x6c>
 8009d2e:	4621      	mov	r1, r4
 8009d30:	4628      	mov	r0, r5
 8009d32:	f000 ff8b 	bl	800ac4c <_fflush_r>
 8009d36:	b988      	cbnz	r0, 8009d5c <__swbuf_r+0x90>
 8009d38:	4638      	mov	r0, r7
 8009d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d3c:	4b0a      	ldr	r3, [pc, #40]	; (8009d68 <__swbuf_r+0x9c>)
 8009d3e:	429c      	cmp	r4, r3
 8009d40:	d101      	bne.n	8009d46 <__swbuf_r+0x7a>
 8009d42:	68ac      	ldr	r4, [r5, #8]
 8009d44:	e7cf      	b.n	8009ce6 <__swbuf_r+0x1a>
 8009d46:	4b09      	ldr	r3, [pc, #36]	; (8009d6c <__swbuf_r+0xa0>)
 8009d48:	429c      	cmp	r4, r3
 8009d4a:	bf08      	it	eq
 8009d4c:	68ec      	ldreq	r4, [r5, #12]
 8009d4e:	e7ca      	b.n	8009ce6 <__swbuf_r+0x1a>
 8009d50:	4621      	mov	r1, r4
 8009d52:	4628      	mov	r0, r5
 8009d54:	f000 f80c 	bl	8009d70 <__swsetup_r>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d0cb      	beq.n	8009cf4 <__swbuf_r+0x28>
 8009d5c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009d60:	e7ea      	b.n	8009d38 <__swbuf_r+0x6c>
 8009d62:	bf00      	nop
 8009d64:	080110e8 	.word	0x080110e8
 8009d68:	08011108 	.word	0x08011108
 8009d6c:	080110c8 	.word	0x080110c8

08009d70 <__swsetup_r>:
 8009d70:	4b32      	ldr	r3, [pc, #200]	; (8009e3c <__swsetup_r+0xcc>)
 8009d72:	b570      	push	{r4, r5, r6, lr}
 8009d74:	681d      	ldr	r5, [r3, #0]
 8009d76:	4606      	mov	r6, r0
 8009d78:	460c      	mov	r4, r1
 8009d7a:	b125      	cbz	r5, 8009d86 <__swsetup_r+0x16>
 8009d7c:	69ab      	ldr	r3, [r5, #24]
 8009d7e:	b913      	cbnz	r3, 8009d86 <__swsetup_r+0x16>
 8009d80:	4628      	mov	r0, r5
 8009d82:	f000 fff7 	bl	800ad74 <__sinit>
 8009d86:	4b2e      	ldr	r3, [pc, #184]	; (8009e40 <__swsetup_r+0xd0>)
 8009d88:	429c      	cmp	r4, r3
 8009d8a:	d10f      	bne.n	8009dac <__swsetup_r+0x3c>
 8009d8c:	686c      	ldr	r4, [r5, #4]
 8009d8e:	89a3      	ldrh	r3, [r4, #12]
 8009d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d94:	0719      	lsls	r1, r3, #28
 8009d96:	d42c      	bmi.n	8009df2 <__swsetup_r+0x82>
 8009d98:	06dd      	lsls	r5, r3, #27
 8009d9a:	d411      	bmi.n	8009dc0 <__swsetup_r+0x50>
 8009d9c:	2309      	movs	r3, #9
 8009d9e:	6033      	str	r3, [r6, #0]
 8009da0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009da4:	81a3      	strh	r3, [r4, #12]
 8009da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009daa:	e03e      	b.n	8009e2a <__swsetup_r+0xba>
 8009dac:	4b25      	ldr	r3, [pc, #148]	; (8009e44 <__swsetup_r+0xd4>)
 8009dae:	429c      	cmp	r4, r3
 8009db0:	d101      	bne.n	8009db6 <__swsetup_r+0x46>
 8009db2:	68ac      	ldr	r4, [r5, #8]
 8009db4:	e7eb      	b.n	8009d8e <__swsetup_r+0x1e>
 8009db6:	4b24      	ldr	r3, [pc, #144]	; (8009e48 <__swsetup_r+0xd8>)
 8009db8:	429c      	cmp	r4, r3
 8009dba:	bf08      	it	eq
 8009dbc:	68ec      	ldreq	r4, [r5, #12]
 8009dbe:	e7e6      	b.n	8009d8e <__swsetup_r+0x1e>
 8009dc0:	0758      	lsls	r0, r3, #29
 8009dc2:	d512      	bpl.n	8009dea <__swsetup_r+0x7a>
 8009dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dc6:	b141      	cbz	r1, 8009dda <__swsetup_r+0x6a>
 8009dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dcc:	4299      	cmp	r1, r3
 8009dce:	d002      	beq.n	8009dd6 <__swsetup_r+0x66>
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	f7fe f805 	bl	8007de0 <_free_r>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	6363      	str	r3, [r4, #52]	; 0x34
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009de0:	81a3      	strh	r3, [r4, #12]
 8009de2:	2300      	movs	r3, #0
 8009de4:	6063      	str	r3, [r4, #4]
 8009de6:	6923      	ldr	r3, [r4, #16]
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	89a3      	ldrh	r3, [r4, #12]
 8009dec:	f043 0308 	orr.w	r3, r3, #8
 8009df0:	81a3      	strh	r3, [r4, #12]
 8009df2:	6923      	ldr	r3, [r4, #16]
 8009df4:	b94b      	cbnz	r3, 8009e0a <__swsetup_r+0x9a>
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e00:	d003      	beq.n	8009e0a <__swsetup_r+0x9a>
 8009e02:	4621      	mov	r1, r4
 8009e04:	4630      	mov	r0, r6
 8009e06:	f001 fbed 	bl	800b5e4 <__smakebuf_r>
 8009e0a:	89a0      	ldrh	r0, [r4, #12]
 8009e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e10:	f010 0301 	ands.w	r3, r0, #1
 8009e14:	d00a      	beq.n	8009e2c <__swsetup_r+0xbc>
 8009e16:	2300      	movs	r3, #0
 8009e18:	60a3      	str	r3, [r4, #8]
 8009e1a:	6963      	ldr	r3, [r4, #20]
 8009e1c:	425b      	negs	r3, r3
 8009e1e:	61a3      	str	r3, [r4, #24]
 8009e20:	6923      	ldr	r3, [r4, #16]
 8009e22:	b943      	cbnz	r3, 8009e36 <__swsetup_r+0xc6>
 8009e24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e28:	d1ba      	bne.n	8009da0 <__swsetup_r+0x30>
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	0781      	lsls	r1, r0, #30
 8009e2e:	bf58      	it	pl
 8009e30:	6963      	ldrpl	r3, [r4, #20]
 8009e32:	60a3      	str	r3, [r4, #8]
 8009e34:	e7f4      	b.n	8009e20 <__swsetup_r+0xb0>
 8009e36:	2000      	movs	r0, #0
 8009e38:	e7f7      	b.n	8009e2a <__swsetup_r+0xba>
 8009e3a:	bf00      	nop
 8009e3c:	2000000c 	.word	0x2000000c
 8009e40:	080110e8 	.word	0x080110e8
 8009e44:	08011108 	.word	0x08011108
 8009e48:	080110c8 	.word	0x080110c8

08009e4c <quorem>:
 8009e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e50:	6903      	ldr	r3, [r0, #16]
 8009e52:	690c      	ldr	r4, [r1, #16]
 8009e54:	42a3      	cmp	r3, r4
 8009e56:	4607      	mov	r7, r0
 8009e58:	f2c0 8081 	blt.w	8009f5e <quorem+0x112>
 8009e5c:	3c01      	subs	r4, #1
 8009e5e:	f101 0814 	add.w	r8, r1, #20
 8009e62:	f100 0514 	add.w	r5, r0, #20
 8009e66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e6a:	9301      	str	r3, [sp, #4]
 8009e6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e74:	3301      	adds	r3, #1
 8009e76:	429a      	cmp	r2, r3
 8009e78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e80:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e84:	d331      	bcc.n	8009eea <quorem+0x9e>
 8009e86:	f04f 0e00 	mov.w	lr, #0
 8009e8a:	4640      	mov	r0, r8
 8009e8c:	46ac      	mov	ip, r5
 8009e8e:	46f2      	mov	sl, lr
 8009e90:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e94:	b293      	uxth	r3, r2
 8009e96:	fb06 e303 	mla	r3, r6, r3, lr
 8009e9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	ebaa 0303 	sub.w	r3, sl, r3
 8009ea4:	0c12      	lsrs	r2, r2, #16
 8009ea6:	f8dc a000 	ldr.w	sl, [ip]
 8009eaa:	fb06 e202 	mla	r2, r6, r2, lr
 8009eae:	fa13 f38a 	uxtah	r3, r3, sl
 8009eb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009eb6:	fa1f fa82 	uxth.w	sl, r2
 8009eba:	f8dc 2000 	ldr.w	r2, [ip]
 8009ebe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009ec2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ecc:	4581      	cmp	r9, r0
 8009ece:	f84c 3b04 	str.w	r3, [ip], #4
 8009ed2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ed6:	d2db      	bcs.n	8009e90 <quorem+0x44>
 8009ed8:	f855 300b 	ldr.w	r3, [r5, fp]
 8009edc:	b92b      	cbnz	r3, 8009eea <quorem+0x9e>
 8009ede:	9b01      	ldr	r3, [sp, #4]
 8009ee0:	3b04      	subs	r3, #4
 8009ee2:	429d      	cmp	r5, r3
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	d32e      	bcc.n	8009f46 <quorem+0xfa>
 8009ee8:	613c      	str	r4, [r7, #16]
 8009eea:	4638      	mov	r0, r7
 8009eec:	f001 fea0 	bl	800bc30 <__mcmp>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	db24      	blt.n	8009f3e <quorem+0xf2>
 8009ef4:	3601      	adds	r6, #1
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	f04f 0c00 	mov.w	ip, #0
 8009efc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f00:	f8d0 e000 	ldr.w	lr, [r0]
 8009f04:	b293      	uxth	r3, r2
 8009f06:	ebac 0303 	sub.w	r3, ip, r3
 8009f0a:	0c12      	lsrs	r2, r2, #16
 8009f0c:	fa13 f38e 	uxtah	r3, r3, lr
 8009f10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f1e:	45c1      	cmp	r9, r8
 8009f20:	f840 3b04 	str.w	r3, [r0], #4
 8009f24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f28:	d2e8      	bcs.n	8009efc <quorem+0xb0>
 8009f2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f32:	b922      	cbnz	r2, 8009f3e <quorem+0xf2>
 8009f34:	3b04      	subs	r3, #4
 8009f36:	429d      	cmp	r5, r3
 8009f38:	461a      	mov	r2, r3
 8009f3a:	d30a      	bcc.n	8009f52 <quorem+0x106>
 8009f3c:	613c      	str	r4, [r7, #16]
 8009f3e:	4630      	mov	r0, r6
 8009f40:	b003      	add	sp, #12
 8009f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f46:	6812      	ldr	r2, [r2, #0]
 8009f48:	3b04      	subs	r3, #4
 8009f4a:	2a00      	cmp	r2, #0
 8009f4c:	d1cc      	bne.n	8009ee8 <quorem+0x9c>
 8009f4e:	3c01      	subs	r4, #1
 8009f50:	e7c7      	b.n	8009ee2 <quorem+0x96>
 8009f52:	6812      	ldr	r2, [r2, #0]
 8009f54:	3b04      	subs	r3, #4
 8009f56:	2a00      	cmp	r2, #0
 8009f58:	d1f0      	bne.n	8009f3c <quorem+0xf0>
 8009f5a:	3c01      	subs	r4, #1
 8009f5c:	e7eb      	b.n	8009f36 <quorem+0xea>
 8009f5e:	2000      	movs	r0, #0
 8009f60:	e7ee      	b.n	8009f40 <quorem+0xf4>
 8009f62:	0000      	movs	r0, r0
 8009f64:	0000      	movs	r0, r0
	...

08009f68 <_dtoa_r>:
 8009f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6c:	ed2d 8b02 	vpush	{d8}
 8009f70:	ec57 6b10 	vmov	r6, r7, d0
 8009f74:	b095      	sub	sp, #84	; 0x54
 8009f76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f7c:	9105      	str	r1, [sp, #20]
 8009f7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009f82:	4604      	mov	r4, r0
 8009f84:	9209      	str	r2, [sp, #36]	; 0x24
 8009f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f88:	b975      	cbnz	r5, 8009fa8 <_dtoa_r+0x40>
 8009f8a:	2010      	movs	r0, #16
 8009f8c:	f7fd fefa 	bl	8007d84 <malloc>
 8009f90:	4602      	mov	r2, r0
 8009f92:	6260      	str	r0, [r4, #36]	; 0x24
 8009f94:	b920      	cbnz	r0, 8009fa0 <_dtoa_r+0x38>
 8009f96:	4bb2      	ldr	r3, [pc, #712]	; (800a260 <_dtoa_r+0x2f8>)
 8009f98:	21ea      	movs	r1, #234	; 0xea
 8009f9a:	48b2      	ldr	r0, [pc, #712]	; (800a264 <_dtoa_r+0x2fc>)
 8009f9c:	f002 fbb4 	bl	800c708 <__assert_func>
 8009fa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009fa4:	6005      	str	r5, [r0, #0]
 8009fa6:	60c5      	str	r5, [r0, #12]
 8009fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009faa:	6819      	ldr	r1, [r3, #0]
 8009fac:	b151      	cbz	r1, 8009fc4 <_dtoa_r+0x5c>
 8009fae:	685a      	ldr	r2, [r3, #4]
 8009fb0:	604a      	str	r2, [r1, #4]
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	4093      	lsls	r3, r2
 8009fb6:	608b      	str	r3, [r1, #8]
 8009fb8:	4620      	mov	r0, r4
 8009fba:	f001 fbb1 	bl	800b720 <_Bfree>
 8009fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	1e3b      	subs	r3, r7, #0
 8009fc6:	bfb9      	ittee	lt
 8009fc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009fcc:	9303      	strlt	r3, [sp, #12]
 8009fce:	2300      	movge	r3, #0
 8009fd0:	f8c8 3000 	strge.w	r3, [r8]
 8009fd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009fd8:	4ba3      	ldr	r3, [pc, #652]	; (800a268 <_dtoa_r+0x300>)
 8009fda:	bfbc      	itt	lt
 8009fdc:	2201      	movlt	r2, #1
 8009fde:	f8c8 2000 	strlt.w	r2, [r8]
 8009fe2:	ea33 0309 	bics.w	r3, r3, r9
 8009fe6:	d11b      	bne.n	800a020 <_dtoa_r+0xb8>
 8009fe8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009fea:	f242 730f 	movw	r3, #9999	; 0x270f
 8009fee:	6013      	str	r3, [r2, #0]
 8009ff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ff4:	4333      	orrs	r3, r6
 8009ff6:	f000 857a 	beq.w	800aaee <_dtoa_r+0xb86>
 8009ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ffc:	b963      	cbnz	r3, 800a018 <_dtoa_r+0xb0>
 8009ffe:	4b9b      	ldr	r3, [pc, #620]	; (800a26c <_dtoa_r+0x304>)
 800a000:	e024      	b.n	800a04c <_dtoa_r+0xe4>
 800a002:	4b9b      	ldr	r3, [pc, #620]	; (800a270 <_dtoa_r+0x308>)
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	3308      	adds	r3, #8
 800a008:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a00a:	6013      	str	r3, [r2, #0]
 800a00c:	9800      	ldr	r0, [sp, #0]
 800a00e:	b015      	add	sp, #84	; 0x54
 800a010:	ecbd 8b02 	vpop	{d8}
 800a014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a018:	4b94      	ldr	r3, [pc, #592]	; (800a26c <_dtoa_r+0x304>)
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	3303      	adds	r3, #3
 800a01e:	e7f3      	b.n	800a008 <_dtoa_r+0xa0>
 800a020:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a024:	2200      	movs	r2, #0
 800a026:	ec51 0b17 	vmov	r0, r1, d7
 800a02a:	2300      	movs	r3, #0
 800a02c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a030:	f7f6 fd6a 	bl	8000b08 <__aeabi_dcmpeq>
 800a034:	4680      	mov	r8, r0
 800a036:	b158      	cbz	r0, 800a050 <_dtoa_r+0xe8>
 800a038:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a03a:	2301      	movs	r3, #1
 800a03c:	6013      	str	r3, [r2, #0]
 800a03e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 8551 	beq.w	800aae8 <_dtoa_r+0xb80>
 800a046:	488b      	ldr	r0, [pc, #556]	; (800a274 <_dtoa_r+0x30c>)
 800a048:	6018      	str	r0, [r3, #0]
 800a04a:	1e43      	subs	r3, r0, #1
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	e7dd      	b.n	800a00c <_dtoa_r+0xa4>
 800a050:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a054:	aa12      	add	r2, sp, #72	; 0x48
 800a056:	a913      	add	r1, sp, #76	; 0x4c
 800a058:	4620      	mov	r0, r4
 800a05a:	f001 ff09 	bl	800be70 <__d2b>
 800a05e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a062:	4683      	mov	fp, r0
 800a064:	2d00      	cmp	r5, #0
 800a066:	d07c      	beq.n	800a162 <_dtoa_r+0x1fa>
 800a068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a06a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a06e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a072:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a076:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a07a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a07e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a082:	4b7d      	ldr	r3, [pc, #500]	; (800a278 <_dtoa_r+0x310>)
 800a084:	2200      	movs	r2, #0
 800a086:	4630      	mov	r0, r6
 800a088:	4639      	mov	r1, r7
 800a08a:	f7f6 f91d 	bl	80002c8 <__aeabi_dsub>
 800a08e:	a36e      	add	r3, pc, #440	; (adr r3, 800a248 <_dtoa_r+0x2e0>)
 800a090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a094:	f7f6 fad0 	bl	8000638 <__aeabi_dmul>
 800a098:	a36d      	add	r3, pc, #436	; (adr r3, 800a250 <_dtoa_r+0x2e8>)
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	f7f6 f915 	bl	80002cc <__adddf3>
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	460f      	mov	r7, r1
 800a0a8:	f7f6 fa5c 	bl	8000564 <__aeabi_i2d>
 800a0ac:	a36a      	add	r3, pc, #424	; (adr r3, 800a258 <_dtoa_r+0x2f0>)
 800a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b2:	f7f6 fac1 	bl	8000638 <__aeabi_dmul>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	4639      	mov	r1, r7
 800a0be:	f7f6 f905 	bl	80002cc <__adddf3>
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	460f      	mov	r7, r1
 800a0c6:	f7f6 fd67 	bl	8000b98 <__aeabi_d2iz>
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	4682      	mov	sl, r0
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	4639      	mov	r1, r7
 800a0d4:	f7f6 fd22 	bl	8000b1c <__aeabi_dcmplt>
 800a0d8:	b148      	cbz	r0, 800a0ee <_dtoa_r+0x186>
 800a0da:	4650      	mov	r0, sl
 800a0dc:	f7f6 fa42 	bl	8000564 <__aeabi_i2d>
 800a0e0:	4632      	mov	r2, r6
 800a0e2:	463b      	mov	r3, r7
 800a0e4:	f7f6 fd10 	bl	8000b08 <__aeabi_dcmpeq>
 800a0e8:	b908      	cbnz	r0, 800a0ee <_dtoa_r+0x186>
 800a0ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a0ee:	f1ba 0f16 	cmp.w	sl, #22
 800a0f2:	d854      	bhi.n	800a19e <_dtoa_r+0x236>
 800a0f4:	4b61      	ldr	r3, [pc, #388]	; (800a27c <_dtoa_r+0x314>)
 800a0f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a102:	f7f6 fd0b 	bl	8000b1c <__aeabi_dcmplt>
 800a106:	2800      	cmp	r0, #0
 800a108:	d04b      	beq.n	800a1a2 <_dtoa_r+0x23a>
 800a10a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a10e:	2300      	movs	r3, #0
 800a110:	930e      	str	r3, [sp, #56]	; 0x38
 800a112:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a114:	1b5d      	subs	r5, r3, r5
 800a116:	1e6b      	subs	r3, r5, #1
 800a118:	9304      	str	r3, [sp, #16]
 800a11a:	bf43      	ittte	mi
 800a11c:	2300      	movmi	r3, #0
 800a11e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a122:	9304      	strmi	r3, [sp, #16]
 800a124:	f04f 0800 	movpl.w	r8, #0
 800a128:	f1ba 0f00 	cmp.w	sl, #0
 800a12c:	db3b      	blt.n	800a1a6 <_dtoa_r+0x23e>
 800a12e:	9b04      	ldr	r3, [sp, #16]
 800a130:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a134:	4453      	add	r3, sl
 800a136:	9304      	str	r3, [sp, #16]
 800a138:	2300      	movs	r3, #0
 800a13a:	9306      	str	r3, [sp, #24]
 800a13c:	9b05      	ldr	r3, [sp, #20]
 800a13e:	2b09      	cmp	r3, #9
 800a140:	d869      	bhi.n	800a216 <_dtoa_r+0x2ae>
 800a142:	2b05      	cmp	r3, #5
 800a144:	bfc4      	itt	gt
 800a146:	3b04      	subgt	r3, #4
 800a148:	9305      	strgt	r3, [sp, #20]
 800a14a:	9b05      	ldr	r3, [sp, #20]
 800a14c:	f1a3 0302 	sub.w	r3, r3, #2
 800a150:	bfcc      	ite	gt
 800a152:	2500      	movgt	r5, #0
 800a154:	2501      	movle	r5, #1
 800a156:	2b03      	cmp	r3, #3
 800a158:	d869      	bhi.n	800a22e <_dtoa_r+0x2c6>
 800a15a:	e8df f003 	tbb	[pc, r3]
 800a15e:	4e2c      	.short	0x4e2c
 800a160:	5a4c      	.short	0x5a4c
 800a162:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a166:	441d      	add	r5, r3
 800a168:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a16c:	2b20      	cmp	r3, #32
 800a16e:	bfc1      	itttt	gt
 800a170:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a174:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a178:	fa09 f303 	lslgt.w	r3, r9, r3
 800a17c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a180:	bfda      	itte	le
 800a182:	f1c3 0320 	rsble	r3, r3, #32
 800a186:	fa06 f003 	lslle.w	r0, r6, r3
 800a18a:	4318      	orrgt	r0, r3
 800a18c:	f7f6 f9da 	bl	8000544 <__aeabi_ui2d>
 800a190:	2301      	movs	r3, #1
 800a192:	4606      	mov	r6, r0
 800a194:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a198:	3d01      	subs	r5, #1
 800a19a:	9310      	str	r3, [sp, #64]	; 0x40
 800a19c:	e771      	b.n	800a082 <_dtoa_r+0x11a>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e7b6      	b.n	800a110 <_dtoa_r+0x1a8>
 800a1a2:	900e      	str	r0, [sp, #56]	; 0x38
 800a1a4:	e7b5      	b.n	800a112 <_dtoa_r+0x1aa>
 800a1a6:	f1ca 0300 	rsb	r3, sl, #0
 800a1aa:	9306      	str	r3, [sp, #24]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	eba8 080a 	sub.w	r8, r8, sl
 800a1b2:	930d      	str	r3, [sp, #52]	; 0x34
 800a1b4:	e7c2      	b.n	800a13c <_dtoa_r+0x1d4>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	9308      	str	r3, [sp, #32]
 800a1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	dc39      	bgt.n	800a234 <_dtoa_r+0x2cc>
 800a1c0:	f04f 0901 	mov.w	r9, #1
 800a1c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1c8:	464b      	mov	r3, r9
 800a1ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a1ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	6042      	str	r2, [r0, #4]
 800a1d4:	2204      	movs	r2, #4
 800a1d6:	f102 0614 	add.w	r6, r2, #20
 800a1da:	429e      	cmp	r6, r3
 800a1dc:	6841      	ldr	r1, [r0, #4]
 800a1de:	d92f      	bls.n	800a240 <_dtoa_r+0x2d8>
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f001 fa5d 	bl	800b6a0 <_Balloc>
 800a1e6:	9000      	str	r0, [sp, #0]
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d14b      	bne.n	800a284 <_dtoa_r+0x31c>
 800a1ec:	4b24      	ldr	r3, [pc, #144]	; (800a280 <_dtoa_r+0x318>)
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a1f4:	e6d1      	b.n	8009f9a <_dtoa_r+0x32>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e7de      	b.n	800a1b8 <_dtoa_r+0x250>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	9308      	str	r3, [sp, #32]
 800a1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a200:	eb0a 0903 	add.w	r9, sl, r3
 800a204:	f109 0301 	add.w	r3, r9, #1
 800a208:	2b01      	cmp	r3, #1
 800a20a:	9301      	str	r3, [sp, #4]
 800a20c:	bfb8      	it	lt
 800a20e:	2301      	movlt	r3, #1
 800a210:	e7dd      	b.n	800a1ce <_dtoa_r+0x266>
 800a212:	2301      	movs	r3, #1
 800a214:	e7f2      	b.n	800a1fc <_dtoa_r+0x294>
 800a216:	2501      	movs	r5, #1
 800a218:	2300      	movs	r3, #0
 800a21a:	9305      	str	r3, [sp, #20]
 800a21c:	9508      	str	r5, [sp, #32]
 800a21e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a222:	2200      	movs	r2, #0
 800a224:	f8cd 9004 	str.w	r9, [sp, #4]
 800a228:	2312      	movs	r3, #18
 800a22a:	9209      	str	r2, [sp, #36]	; 0x24
 800a22c:	e7cf      	b.n	800a1ce <_dtoa_r+0x266>
 800a22e:	2301      	movs	r3, #1
 800a230:	9308      	str	r3, [sp, #32]
 800a232:	e7f4      	b.n	800a21e <_dtoa_r+0x2b6>
 800a234:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a238:	f8cd 9004 	str.w	r9, [sp, #4]
 800a23c:	464b      	mov	r3, r9
 800a23e:	e7c6      	b.n	800a1ce <_dtoa_r+0x266>
 800a240:	3101      	adds	r1, #1
 800a242:	6041      	str	r1, [r0, #4]
 800a244:	0052      	lsls	r2, r2, #1
 800a246:	e7c6      	b.n	800a1d6 <_dtoa_r+0x26e>
 800a248:	636f4361 	.word	0x636f4361
 800a24c:	3fd287a7 	.word	0x3fd287a7
 800a250:	8b60c8b3 	.word	0x8b60c8b3
 800a254:	3fc68a28 	.word	0x3fc68a28
 800a258:	509f79fb 	.word	0x509f79fb
 800a25c:	3fd34413 	.word	0x3fd34413
 800a260:	0801103e 	.word	0x0801103e
 800a264:	08011055 	.word	0x08011055
 800a268:	7ff00000 	.word	0x7ff00000
 800a26c:	0801103a 	.word	0x0801103a
 800a270:	08011031 	.word	0x08011031
 800a274:	08010eb1 	.word	0x08010eb1
 800a278:	3ff80000 	.word	0x3ff80000
 800a27c:	08011230 	.word	0x08011230
 800a280:	080110b4 	.word	0x080110b4
 800a284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a286:	9a00      	ldr	r2, [sp, #0]
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	9b01      	ldr	r3, [sp, #4]
 800a28c:	2b0e      	cmp	r3, #14
 800a28e:	f200 80ad 	bhi.w	800a3ec <_dtoa_r+0x484>
 800a292:	2d00      	cmp	r5, #0
 800a294:	f000 80aa 	beq.w	800a3ec <_dtoa_r+0x484>
 800a298:	f1ba 0f00 	cmp.w	sl, #0
 800a29c:	dd36      	ble.n	800a30c <_dtoa_r+0x3a4>
 800a29e:	4ac3      	ldr	r2, [pc, #780]	; (800a5ac <_dtoa_r+0x644>)
 800a2a0:	f00a 030f 	and.w	r3, sl, #15
 800a2a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2a8:	ed93 7b00 	vldr	d7, [r3]
 800a2ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a2b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a2b4:	eeb0 8a47 	vmov.f32	s16, s14
 800a2b8:	eef0 8a67 	vmov.f32	s17, s15
 800a2bc:	d016      	beq.n	800a2ec <_dtoa_r+0x384>
 800a2be:	4bbc      	ldr	r3, [pc, #752]	; (800a5b0 <_dtoa_r+0x648>)
 800a2c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a2c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2c8:	f7f6 fae0 	bl	800088c <__aeabi_ddiv>
 800a2cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2d0:	f007 070f 	and.w	r7, r7, #15
 800a2d4:	2503      	movs	r5, #3
 800a2d6:	4eb6      	ldr	r6, [pc, #728]	; (800a5b0 <_dtoa_r+0x648>)
 800a2d8:	b957      	cbnz	r7, 800a2f0 <_dtoa_r+0x388>
 800a2da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2de:	ec53 2b18 	vmov	r2, r3, d8
 800a2e2:	f7f6 fad3 	bl	800088c <__aeabi_ddiv>
 800a2e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2ea:	e029      	b.n	800a340 <_dtoa_r+0x3d8>
 800a2ec:	2502      	movs	r5, #2
 800a2ee:	e7f2      	b.n	800a2d6 <_dtoa_r+0x36e>
 800a2f0:	07f9      	lsls	r1, r7, #31
 800a2f2:	d508      	bpl.n	800a306 <_dtoa_r+0x39e>
 800a2f4:	ec51 0b18 	vmov	r0, r1, d8
 800a2f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a2fc:	f7f6 f99c 	bl	8000638 <__aeabi_dmul>
 800a300:	ec41 0b18 	vmov	d8, r0, r1
 800a304:	3501      	adds	r5, #1
 800a306:	107f      	asrs	r7, r7, #1
 800a308:	3608      	adds	r6, #8
 800a30a:	e7e5      	b.n	800a2d8 <_dtoa_r+0x370>
 800a30c:	f000 80a6 	beq.w	800a45c <_dtoa_r+0x4f4>
 800a310:	f1ca 0600 	rsb	r6, sl, #0
 800a314:	4ba5      	ldr	r3, [pc, #660]	; (800a5ac <_dtoa_r+0x644>)
 800a316:	4fa6      	ldr	r7, [pc, #664]	; (800a5b0 <_dtoa_r+0x648>)
 800a318:	f006 020f 	and.w	r2, r6, #15
 800a31c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a328:	f7f6 f986 	bl	8000638 <__aeabi_dmul>
 800a32c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a330:	1136      	asrs	r6, r6, #4
 800a332:	2300      	movs	r3, #0
 800a334:	2502      	movs	r5, #2
 800a336:	2e00      	cmp	r6, #0
 800a338:	f040 8085 	bne.w	800a446 <_dtoa_r+0x4de>
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1d2      	bne.n	800a2e6 <_dtoa_r+0x37e>
 800a340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a342:	2b00      	cmp	r3, #0
 800a344:	f000 808c 	beq.w	800a460 <_dtoa_r+0x4f8>
 800a348:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a34c:	4b99      	ldr	r3, [pc, #612]	; (800a5b4 <_dtoa_r+0x64c>)
 800a34e:	2200      	movs	r2, #0
 800a350:	4630      	mov	r0, r6
 800a352:	4639      	mov	r1, r7
 800a354:	f7f6 fbe2 	bl	8000b1c <__aeabi_dcmplt>
 800a358:	2800      	cmp	r0, #0
 800a35a:	f000 8081 	beq.w	800a460 <_dtoa_r+0x4f8>
 800a35e:	9b01      	ldr	r3, [sp, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d07d      	beq.n	800a460 <_dtoa_r+0x4f8>
 800a364:	f1b9 0f00 	cmp.w	r9, #0
 800a368:	dd3c      	ble.n	800a3e4 <_dtoa_r+0x47c>
 800a36a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a36e:	9307      	str	r3, [sp, #28]
 800a370:	2200      	movs	r2, #0
 800a372:	4b91      	ldr	r3, [pc, #580]	; (800a5b8 <_dtoa_r+0x650>)
 800a374:	4630      	mov	r0, r6
 800a376:	4639      	mov	r1, r7
 800a378:	f7f6 f95e 	bl	8000638 <__aeabi_dmul>
 800a37c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a380:	3501      	adds	r5, #1
 800a382:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a386:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a38a:	4628      	mov	r0, r5
 800a38c:	f7f6 f8ea 	bl	8000564 <__aeabi_i2d>
 800a390:	4632      	mov	r2, r6
 800a392:	463b      	mov	r3, r7
 800a394:	f7f6 f950 	bl	8000638 <__aeabi_dmul>
 800a398:	4b88      	ldr	r3, [pc, #544]	; (800a5bc <_dtoa_r+0x654>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	f7f5 ff96 	bl	80002cc <__adddf3>
 800a3a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a3a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3a8:	9303      	str	r3, [sp, #12]
 800a3aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d15c      	bne.n	800a46a <_dtoa_r+0x502>
 800a3b0:	4b83      	ldr	r3, [pc, #524]	; (800a5c0 <_dtoa_r+0x658>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	4639      	mov	r1, r7
 800a3b8:	f7f5 ff86 	bl	80002c8 <__aeabi_dsub>
 800a3bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	460f      	mov	r7, r1
 800a3c4:	f7f6 fbc8 	bl	8000b58 <__aeabi_dcmpgt>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	f040 8296 	bne.w	800a8fa <_dtoa_r+0x992>
 800a3ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3d8:	4639      	mov	r1, r7
 800a3da:	f7f6 fb9f 	bl	8000b1c <__aeabi_dcmplt>
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	f040 8288 	bne.w	800a8f4 <_dtoa_r+0x98c>
 800a3e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a3e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f2c0 8158 	blt.w	800a6a4 <_dtoa_r+0x73c>
 800a3f4:	f1ba 0f0e 	cmp.w	sl, #14
 800a3f8:	f300 8154 	bgt.w	800a6a4 <_dtoa_r+0x73c>
 800a3fc:	4b6b      	ldr	r3, [pc, #428]	; (800a5ac <_dtoa_r+0x644>)
 800a3fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a402:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f280 80e3 	bge.w	800a5d4 <_dtoa_r+0x66c>
 800a40e:	9b01      	ldr	r3, [sp, #4]
 800a410:	2b00      	cmp	r3, #0
 800a412:	f300 80df 	bgt.w	800a5d4 <_dtoa_r+0x66c>
 800a416:	f040 826d 	bne.w	800a8f4 <_dtoa_r+0x98c>
 800a41a:	4b69      	ldr	r3, [pc, #420]	; (800a5c0 <_dtoa_r+0x658>)
 800a41c:	2200      	movs	r2, #0
 800a41e:	4640      	mov	r0, r8
 800a420:	4649      	mov	r1, r9
 800a422:	f7f6 f909 	bl	8000638 <__aeabi_dmul>
 800a426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a42a:	f7f6 fb8b 	bl	8000b44 <__aeabi_dcmpge>
 800a42e:	9e01      	ldr	r6, [sp, #4]
 800a430:	4637      	mov	r7, r6
 800a432:	2800      	cmp	r0, #0
 800a434:	f040 8243 	bne.w	800a8be <_dtoa_r+0x956>
 800a438:	9d00      	ldr	r5, [sp, #0]
 800a43a:	2331      	movs	r3, #49	; 0x31
 800a43c:	f805 3b01 	strb.w	r3, [r5], #1
 800a440:	f10a 0a01 	add.w	sl, sl, #1
 800a444:	e23f      	b.n	800a8c6 <_dtoa_r+0x95e>
 800a446:	07f2      	lsls	r2, r6, #31
 800a448:	d505      	bpl.n	800a456 <_dtoa_r+0x4ee>
 800a44a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a44e:	f7f6 f8f3 	bl	8000638 <__aeabi_dmul>
 800a452:	3501      	adds	r5, #1
 800a454:	2301      	movs	r3, #1
 800a456:	1076      	asrs	r6, r6, #1
 800a458:	3708      	adds	r7, #8
 800a45a:	e76c      	b.n	800a336 <_dtoa_r+0x3ce>
 800a45c:	2502      	movs	r5, #2
 800a45e:	e76f      	b.n	800a340 <_dtoa_r+0x3d8>
 800a460:	9b01      	ldr	r3, [sp, #4]
 800a462:	f8cd a01c 	str.w	sl, [sp, #28]
 800a466:	930c      	str	r3, [sp, #48]	; 0x30
 800a468:	e78d      	b.n	800a386 <_dtoa_r+0x41e>
 800a46a:	9900      	ldr	r1, [sp, #0]
 800a46c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a46e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a470:	4b4e      	ldr	r3, [pc, #312]	; (800a5ac <_dtoa_r+0x644>)
 800a472:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a476:	4401      	add	r1, r0
 800a478:	9102      	str	r1, [sp, #8]
 800a47a:	9908      	ldr	r1, [sp, #32]
 800a47c:	eeb0 8a47 	vmov.f32	s16, s14
 800a480:	eef0 8a67 	vmov.f32	s17, s15
 800a484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a488:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a48c:	2900      	cmp	r1, #0
 800a48e:	d045      	beq.n	800a51c <_dtoa_r+0x5b4>
 800a490:	494c      	ldr	r1, [pc, #304]	; (800a5c4 <_dtoa_r+0x65c>)
 800a492:	2000      	movs	r0, #0
 800a494:	f7f6 f9fa 	bl	800088c <__aeabi_ddiv>
 800a498:	ec53 2b18 	vmov	r2, r3, d8
 800a49c:	f7f5 ff14 	bl	80002c8 <__aeabi_dsub>
 800a4a0:	9d00      	ldr	r5, [sp, #0]
 800a4a2:	ec41 0b18 	vmov	d8, r0, r1
 800a4a6:	4639      	mov	r1, r7
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	f7f6 fb75 	bl	8000b98 <__aeabi_d2iz>
 800a4ae:	900c      	str	r0, [sp, #48]	; 0x30
 800a4b0:	f7f6 f858 	bl	8000564 <__aeabi_i2d>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	4639      	mov	r1, r7
 800a4bc:	f7f5 ff04 	bl	80002c8 <__aeabi_dsub>
 800a4c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4c2:	3330      	adds	r3, #48	; 0x30
 800a4c4:	f805 3b01 	strb.w	r3, [r5], #1
 800a4c8:	ec53 2b18 	vmov	r2, r3, d8
 800a4cc:	4606      	mov	r6, r0
 800a4ce:	460f      	mov	r7, r1
 800a4d0:	f7f6 fb24 	bl	8000b1c <__aeabi_dcmplt>
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	d165      	bne.n	800a5a4 <_dtoa_r+0x63c>
 800a4d8:	4632      	mov	r2, r6
 800a4da:	463b      	mov	r3, r7
 800a4dc:	4935      	ldr	r1, [pc, #212]	; (800a5b4 <_dtoa_r+0x64c>)
 800a4de:	2000      	movs	r0, #0
 800a4e0:	f7f5 fef2 	bl	80002c8 <__aeabi_dsub>
 800a4e4:	ec53 2b18 	vmov	r2, r3, d8
 800a4e8:	f7f6 fb18 	bl	8000b1c <__aeabi_dcmplt>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	f040 80b9 	bne.w	800a664 <_dtoa_r+0x6fc>
 800a4f2:	9b02      	ldr	r3, [sp, #8]
 800a4f4:	429d      	cmp	r5, r3
 800a4f6:	f43f af75 	beq.w	800a3e4 <_dtoa_r+0x47c>
 800a4fa:	4b2f      	ldr	r3, [pc, #188]	; (800a5b8 <_dtoa_r+0x650>)
 800a4fc:	ec51 0b18 	vmov	r0, r1, d8
 800a500:	2200      	movs	r2, #0
 800a502:	f7f6 f899 	bl	8000638 <__aeabi_dmul>
 800a506:	4b2c      	ldr	r3, [pc, #176]	; (800a5b8 <_dtoa_r+0x650>)
 800a508:	ec41 0b18 	vmov	d8, r0, r1
 800a50c:	2200      	movs	r2, #0
 800a50e:	4630      	mov	r0, r6
 800a510:	4639      	mov	r1, r7
 800a512:	f7f6 f891 	bl	8000638 <__aeabi_dmul>
 800a516:	4606      	mov	r6, r0
 800a518:	460f      	mov	r7, r1
 800a51a:	e7c4      	b.n	800a4a6 <_dtoa_r+0x53e>
 800a51c:	ec51 0b17 	vmov	r0, r1, d7
 800a520:	f7f6 f88a 	bl	8000638 <__aeabi_dmul>
 800a524:	9b02      	ldr	r3, [sp, #8]
 800a526:	9d00      	ldr	r5, [sp, #0]
 800a528:	930c      	str	r3, [sp, #48]	; 0x30
 800a52a:	ec41 0b18 	vmov	d8, r0, r1
 800a52e:	4639      	mov	r1, r7
 800a530:	4630      	mov	r0, r6
 800a532:	f7f6 fb31 	bl	8000b98 <__aeabi_d2iz>
 800a536:	9011      	str	r0, [sp, #68]	; 0x44
 800a538:	f7f6 f814 	bl	8000564 <__aeabi_i2d>
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	4630      	mov	r0, r6
 800a542:	4639      	mov	r1, r7
 800a544:	f7f5 fec0 	bl	80002c8 <__aeabi_dsub>
 800a548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a54a:	3330      	adds	r3, #48	; 0x30
 800a54c:	f805 3b01 	strb.w	r3, [r5], #1
 800a550:	9b02      	ldr	r3, [sp, #8]
 800a552:	429d      	cmp	r5, r3
 800a554:	4606      	mov	r6, r0
 800a556:	460f      	mov	r7, r1
 800a558:	f04f 0200 	mov.w	r2, #0
 800a55c:	d134      	bne.n	800a5c8 <_dtoa_r+0x660>
 800a55e:	4b19      	ldr	r3, [pc, #100]	; (800a5c4 <_dtoa_r+0x65c>)
 800a560:	ec51 0b18 	vmov	r0, r1, d8
 800a564:	f7f5 feb2 	bl	80002cc <__adddf3>
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	4630      	mov	r0, r6
 800a56e:	4639      	mov	r1, r7
 800a570:	f7f6 faf2 	bl	8000b58 <__aeabi_dcmpgt>
 800a574:	2800      	cmp	r0, #0
 800a576:	d175      	bne.n	800a664 <_dtoa_r+0x6fc>
 800a578:	ec53 2b18 	vmov	r2, r3, d8
 800a57c:	4911      	ldr	r1, [pc, #68]	; (800a5c4 <_dtoa_r+0x65c>)
 800a57e:	2000      	movs	r0, #0
 800a580:	f7f5 fea2 	bl	80002c8 <__aeabi_dsub>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4630      	mov	r0, r6
 800a58a:	4639      	mov	r1, r7
 800a58c:	f7f6 fac6 	bl	8000b1c <__aeabi_dcmplt>
 800a590:	2800      	cmp	r0, #0
 800a592:	f43f af27 	beq.w	800a3e4 <_dtoa_r+0x47c>
 800a596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a598:	1e6b      	subs	r3, r5, #1
 800a59a:	930c      	str	r3, [sp, #48]	; 0x30
 800a59c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5a0:	2b30      	cmp	r3, #48	; 0x30
 800a5a2:	d0f8      	beq.n	800a596 <_dtoa_r+0x62e>
 800a5a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a5a8:	e04a      	b.n	800a640 <_dtoa_r+0x6d8>
 800a5aa:	bf00      	nop
 800a5ac:	08011230 	.word	0x08011230
 800a5b0:	08011208 	.word	0x08011208
 800a5b4:	3ff00000 	.word	0x3ff00000
 800a5b8:	40240000 	.word	0x40240000
 800a5bc:	401c0000 	.word	0x401c0000
 800a5c0:	40140000 	.word	0x40140000
 800a5c4:	3fe00000 	.word	0x3fe00000
 800a5c8:	4baf      	ldr	r3, [pc, #700]	; (800a888 <_dtoa_r+0x920>)
 800a5ca:	f7f6 f835 	bl	8000638 <__aeabi_dmul>
 800a5ce:	4606      	mov	r6, r0
 800a5d0:	460f      	mov	r7, r1
 800a5d2:	e7ac      	b.n	800a52e <_dtoa_r+0x5c6>
 800a5d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a5d8:	9d00      	ldr	r5, [sp, #0]
 800a5da:	4642      	mov	r2, r8
 800a5dc:	464b      	mov	r3, r9
 800a5de:	4630      	mov	r0, r6
 800a5e0:	4639      	mov	r1, r7
 800a5e2:	f7f6 f953 	bl	800088c <__aeabi_ddiv>
 800a5e6:	f7f6 fad7 	bl	8000b98 <__aeabi_d2iz>
 800a5ea:	9002      	str	r0, [sp, #8]
 800a5ec:	f7f5 ffba 	bl	8000564 <__aeabi_i2d>
 800a5f0:	4642      	mov	r2, r8
 800a5f2:	464b      	mov	r3, r9
 800a5f4:	f7f6 f820 	bl	8000638 <__aeabi_dmul>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	4639      	mov	r1, r7
 800a600:	f7f5 fe62 	bl	80002c8 <__aeabi_dsub>
 800a604:	9e02      	ldr	r6, [sp, #8]
 800a606:	9f01      	ldr	r7, [sp, #4]
 800a608:	3630      	adds	r6, #48	; 0x30
 800a60a:	f805 6b01 	strb.w	r6, [r5], #1
 800a60e:	9e00      	ldr	r6, [sp, #0]
 800a610:	1bae      	subs	r6, r5, r6
 800a612:	42b7      	cmp	r7, r6
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	d137      	bne.n	800a68a <_dtoa_r+0x722>
 800a61a:	f7f5 fe57 	bl	80002cc <__adddf3>
 800a61e:	4642      	mov	r2, r8
 800a620:	464b      	mov	r3, r9
 800a622:	4606      	mov	r6, r0
 800a624:	460f      	mov	r7, r1
 800a626:	f7f6 fa97 	bl	8000b58 <__aeabi_dcmpgt>
 800a62a:	b9c8      	cbnz	r0, 800a660 <_dtoa_r+0x6f8>
 800a62c:	4642      	mov	r2, r8
 800a62e:	464b      	mov	r3, r9
 800a630:	4630      	mov	r0, r6
 800a632:	4639      	mov	r1, r7
 800a634:	f7f6 fa68 	bl	8000b08 <__aeabi_dcmpeq>
 800a638:	b110      	cbz	r0, 800a640 <_dtoa_r+0x6d8>
 800a63a:	9b02      	ldr	r3, [sp, #8]
 800a63c:	07d9      	lsls	r1, r3, #31
 800a63e:	d40f      	bmi.n	800a660 <_dtoa_r+0x6f8>
 800a640:	4620      	mov	r0, r4
 800a642:	4659      	mov	r1, fp
 800a644:	f001 f86c 	bl	800b720 <_Bfree>
 800a648:	2300      	movs	r3, #0
 800a64a:	702b      	strb	r3, [r5, #0]
 800a64c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a64e:	f10a 0001 	add.w	r0, sl, #1
 800a652:	6018      	str	r0, [r3, #0]
 800a654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a656:	2b00      	cmp	r3, #0
 800a658:	f43f acd8 	beq.w	800a00c <_dtoa_r+0xa4>
 800a65c:	601d      	str	r5, [r3, #0]
 800a65e:	e4d5      	b.n	800a00c <_dtoa_r+0xa4>
 800a660:	f8cd a01c 	str.w	sl, [sp, #28]
 800a664:	462b      	mov	r3, r5
 800a666:	461d      	mov	r5, r3
 800a668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a66c:	2a39      	cmp	r2, #57	; 0x39
 800a66e:	d108      	bne.n	800a682 <_dtoa_r+0x71a>
 800a670:	9a00      	ldr	r2, [sp, #0]
 800a672:	429a      	cmp	r2, r3
 800a674:	d1f7      	bne.n	800a666 <_dtoa_r+0x6fe>
 800a676:	9a07      	ldr	r2, [sp, #28]
 800a678:	9900      	ldr	r1, [sp, #0]
 800a67a:	3201      	adds	r2, #1
 800a67c:	9207      	str	r2, [sp, #28]
 800a67e:	2230      	movs	r2, #48	; 0x30
 800a680:	700a      	strb	r2, [r1, #0]
 800a682:	781a      	ldrb	r2, [r3, #0]
 800a684:	3201      	adds	r2, #1
 800a686:	701a      	strb	r2, [r3, #0]
 800a688:	e78c      	b.n	800a5a4 <_dtoa_r+0x63c>
 800a68a:	4b7f      	ldr	r3, [pc, #508]	; (800a888 <_dtoa_r+0x920>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	f7f5 ffd3 	bl	8000638 <__aeabi_dmul>
 800a692:	2200      	movs	r2, #0
 800a694:	2300      	movs	r3, #0
 800a696:	4606      	mov	r6, r0
 800a698:	460f      	mov	r7, r1
 800a69a:	f7f6 fa35 	bl	8000b08 <__aeabi_dcmpeq>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d09b      	beq.n	800a5da <_dtoa_r+0x672>
 800a6a2:	e7cd      	b.n	800a640 <_dtoa_r+0x6d8>
 800a6a4:	9a08      	ldr	r2, [sp, #32]
 800a6a6:	2a00      	cmp	r2, #0
 800a6a8:	f000 80c4 	beq.w	800a834 <_dtoa_r+0x8cc>
 800a6ac:	9a05      	ldr	r2, [sp, #20]
 800a6ae:	2a01      	cmp	r2, #1
 800a6b0:	f300 80a8 	bgt.w	800a804 <_dtoa_r+0x89c>
 800a6b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	f000 80a0 	beq.w	800a7fc <_dtoa_r+0x894>
 800a6bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6c0:	9e06      	ldr	r6, [sp, #24]
 800a6c2:	4645      	mov	r5, r8
 800a6c4:	9a04      	ldr	r2, [sp, #16]
 800a6c6:	2101      	movs	r1, #1
 800a6c8:	441a      	add	r2, r3
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	4498      	add	r8, r3
 800a6ce:	9204      	str	r2, [sp, #16]
 800a6d0:	f001 f92c 	bl	800b92c <__i2b>
 800a6d4:	4607      	mov	r7, r0
 800a6d6:	2d00      	cmp	r5, #0
 800a6d8:	dd0b      	ble.n	800a6f2 <_dtoa_r+0x78a>
 800a6da:	9b04      	ldr	r3, [sp, #16]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	dd08      	ble.n	800a6f2 <_dtoa_r+0x78a>
 800a6e0:	42ab      	cmp	r3, r5
 800a6e2:	9a04      	ldr	r2, [sp, #16]
 800a6e4:	bfa8      	it	ge
 800a6e6:	462b      	movge	r3, r5
 800a6e8:	eba8 0803 	sub.w	r8, r8, r3
 800a6ec:	1aed      	subs	r5, r5, r3
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	9304      	str	r3, [sp, #16]
 800a6f2:	9b06      	ldr	r3, [sp, #24]
 800a6f4:	b1fb      	cbz	r3, 800a736 <_dtoa_r+0x7ce>
 800a6f6:	9b08      	ldr	r3, [sp, #32]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f000 809f 	beq.w	800a83c <_dtoa_r+0x8d4>
 800a6fe:	2e00      	cmp	r6, #0
 800a700:	dd11      	ble.n	800a726 <_dtoa_r+0x7be>
 800a702:	4639      	mov	r1, r7
 800a704:	4632      	mov	r2, r6
 800a706:	4620      	mov	r0, r4
 800a708:	f001 f9cc 	bl	800baa4 <__pow5mult>
 800a70c:	465a      	mov	r2, fp
 800a70e:	4601      	mov	r1, r0
 800a710:	4607      	mov	r7, r0
 800a712:	4620      	mov	r0, r4
 800a714:	f001 f920 	bl	800b958 <__multiply>
 800a718:	4659      	mov	r1, fp
 800a71a:	9007      	str	r0, [sp, #28]
 800a71c:	4620      	mov	r0, r4
 800a71e:	f000 ffff 	bl	800b720 <_Bfree>
 800a722:	9b07      	ldr	r3, [sp, #28]
 800a724:	469b      	mov	fp, r3
 800a726:	9b06      	ldr	r3, [sp, #24]
 800a728:	1b9a      	subs	r2, r3, r6
 800a72a:	d004      	beq.n	800a736 <_dtoa_r+0x7ce>
 800a72c:	4659      	mov	r1, fp
 800a72e:	4620      	mov	r0, r4
 800a730:	f001 f9b8 	bl	800baa4 <__pow5mult>
 800a734:	4683      	mov	fp, r0
 800a736:	2101      	movs	r1, #1
 800a738:	4620      	mov	r0, r4
 800a73a:	f001 f8f7 	bl	800b92c <__i2b>
 800a73e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a740:	2b00      	cmp	r3, #0
 800a742:	4606      	mov	r6, r0
 800a744:	dd7c      	ble.n	800a840 <_dtoa_r+0x8d8>
 800a746:	461a      	mov	r2, r3
 800a748:	4601      	mov	r1, r0
 800a74a:	4620      	mov	r0, r4
 800a74c:	f001 f9aa 	bl	800baa4 <__pow5mult>
 800a750:	9b05      	ldr	r3, [sp, #20]
 800a752:	2b01      	cmp	r3, #1
 800a754:	4606      	mov	r6, r0
 800a756:	dd76      	ble.n	800a846 <_dtoa_r+0x8de>
 800a758:	2300      	movs	r3, #0
 800a75a:	9306      	str	r3, [sp, #24]
 800a75c:	6933      	ldr	r3, [r6, #16]
 800a75e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a762:	6918      	ldr	r0, [r3, #16]
 800a764:	f001 f892 	bl	800b88c <__hi0bits>
 800a768:	f1c0 0020 	rsb	r0, r0, #32
 800a76c:	9b04      	ldr	r3, [sp, #16]
 800a76e:	4418      	add	r0, r3
 800a770:	f010 001f 	ands.w	r0, r0, #31
 800a774:	f000 8086 	beq.w	800a884 <_dtoa_r+0x91c>
 800a778:	f1c0 0320 	rsb	r3, r0, #32
 800a77c:	2b04      	cmp	r3, #4
 800a77e:	dd7f      	ble.n	800a880 <_dtoa_r+0x918>
 800a780:	f1c0 001c 	rsb	r0, r0, #28
 800a784:	9b04      	ldr	r3, [sp, #16]
 800a786:	4403      	add	r3, r0
 800a788:	4480      	add	r8, r0
 800a78a:	4405      	add	r5, r0
 800a78c:	9304      	str	r3, [sp, #16]
 800a78e:	f1b8 0f00 	cmp.w	r8, #0
 800a792:	dd05      	ble.n	800a7a0 <_dtoa_r+0x838>
 800a794:	4659      	mov	r1, fp
 800a796:	4642      	mov	r2, r8
 800a798:	4620      	mov	r0, r4
 800a79a:	f001 f9dd 	bl	800bb58 <__lshift>
 800a79e:	4683      	mov	fp, r0
 800a7a0:	9b04      	ldr	r3, [sp, #16]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	dd05      	ble.n	800a7b2 <_dtoa_r+0x84a>
 800a7a6:	4631      	mov	r1, r6
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f001 f9d4 	bl	800bb58 <__lshift>
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d069      	beq.n	800a88c <_dtoa_r+0x924>
 800a7b8:	4631      	mov	r1, r6
 800a7ba:	4658      	mov	r0, fp
 800a7bc:	f001 fa38 	bl	800bc30 <__mcmp>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	da63      	bge.n	800a88c <_dtoa_r+0x924>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4659      	mov	r1, fp
 800a7c8:	220a      	movs	r2, #10
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 ffca 	bl	800b764 <__multadd>
 800a7d0:	9b08      	ldr	r3, [sp, #32]
 800a7d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a7d6:	4683      	mov	fp, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 818f 	beq.w	800aafc <_dtoa_r+0xb94>
 800a7de:	4639      	mov	r1, r7
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	220a      	movs	r2, #10
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f000 ffbd 	bl	800b764 <__multadd>
 800a7ea:	f1b9 0f00 	cmp.w	r9, #0
 800a7ee:	4607      	mov	r7, r0
 800a7f0:	f300 808e 	bgt.w	800a910 <_dtoa_r+0x9a8>
 800a7f4:	9b05      	ldr	r3, [sp, #20]
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	dc50      	bgt.n	800a89c <_dtoa_r+0x934>
 800a7fa:	e089      	b.n	800a910 <_dtoa_r+0x9a8>
 800a7fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a802:	e75d      	b.n	800a6c0 <_dtoa_r+0x758>
 800a804:	9b01      	ldr	r3, [sp, #4]
 800a806:	1e5e      	subs	r6, r3, #1
 800a808:	9b06      	ldr	r3, [sp, #24]
 800a80a:	42b3      	cmp	r3, r6
 800a80c:	bfbf      	itttt	lt
 800a80e:	9b06      	ldrlt	r3, [sp, #24]
 800a810:	9606      	strlt	r6, [sp, #24]
 800a812:	1af2      	sublt	r2, r6, r3
 800a814:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a816:	bfb6      	itet	lt
 800a818:	189b      	addlt	r3, r3, r2
 800a81a:	1b9e      	subge	r6, r3, r6
 800a81c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a81e:	9b01      	ldr	r3, [sp, #4]
 800a820:	bfb8      	it	lt
 800a822:	2600      	movlt	r6, #0
 800a824:	2b00      	cmp	r3, #0
 800a826:	bfb5      	itete	lt
 800a828:	eba8 0503 	sublt.w	r5, r8, r3
 800a82c:	9b01      	ldrge	r3, [sp, #4]
 800a82e:	2300      	movlt	r3, #0
 800a830:	4645      	movge	r5, r8
 800a832:	e747      	b.n	800a6c4 <_dtoa_r+0x75c>
 800a834:	9e06      	ldr	r6, [sp, #24]
 800a836:	9f08      	ldr	r7, [sp, #32]
 800a838:	4645      	mov	r5, r8
 800a83a:	e74c      	b.n	800a6d6 <_dtoa_r+0x76e>
 800a83c:	9a06      	ldr	r2, [sp, #24]
 800a83e:	e775      	b.n	800a72c <_dtoa_r+0x7c4>
 800a840:	9b05      	ldr	r3, [sp, #20]
 800a842:	2b01      	cmp	r3, #1
 800a844:	dc18      	bgt.n	800a878 <_dtoa_r+0x910>
 800a846:	9b02      	ldr	r3, [sp, #8]
 800a848:	b9b3      	cbnz	r3, 800a878 <_dtoa_r+0x910>
 800a84a:	9b03      	ldr	r3, [sp, #12]
 800a84c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a850:	b9a3      	cbnz	r3, 800a87c <_dtoa_r+0x914>
 800a852:	9b03      	ldr	r3, [sp, #12]
 800a854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a858:	0d1b      	lsrs	r3, r3, #20
 800a85a:	051b      	lsls	r3, r3, #20
 800a85c:	b12b      	cbz	r3, 800a86a <_dtoa_r+0x902>
 800a85e:	9b04      	ldr	r3, [sp, #16]
 800a860:	3301      	adds	r3, #1
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	f108 0801 	add.w	r8, r8, #1
 800a868:	2301      	movs	r3, #1
 800a86a:	9306      	str	r3, [sp, #24]
 800a86c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f47f af74 	bne.w	800a75c <_dtoa_r+0x7f4>
 800a874:	2001      	movs	r0, #1
 800a876:	e779      	b.n	800a76c <_dtoa_r+0x804>
 800a878:	2300      	movs	r3, #0
 800a87a:	e7f6      	b.n	800a86a <_dtoa_r+0x902>
 800a87c:	9b02      	ldr	r3, [sp, #8]
 800a87e:	e7f4      	b.n	800a86a <_dtoa_r+0x902>
 800a880:	d085      	beq.n	800a78e <_dtoa_r+0x826>
 800a882:	4618      	mov	r0, r3
 800a884:	301c      	adds	r0, #28
 800a886:	e77d      	b.n	800a784 <_dtoa_r+0x81c>
 800a888:	40240000 	.word	0x40240000
 800a88c:	9b01      	ldr	r3, [sp, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	dc38      	bgt.n	800a904 <_dtoa_r+0x99c>
 800a892:	9b05      	ldr	r3, [sp, #20]
 800a894:	2b02      	cmp	r3, #2
 800a896:	dd35      	ble.n	800a904 <_dtoa_r+0x99c>
 800a898:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a89c:	f1b9 0f00 	cmp.w	r9, #0
 800a8a0:	d10d      	bne.n	800a8be <_dtoa_r+0x956>
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	464b      	mov	r3, r9
 800a8a6:	2205      	movs	r2, #5
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f000 ff5b 	bl	800b764 <__multadd>
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	4606      	mov	r6, r0
 800a8b2:	4658      	mov	r0, fp
 800a8b4:	f001 f9bc 	bl	800bc30 <__mcmp>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	f73f adbd 	bgt.w	800a438 <_dtoa_r+0x4d0>
 800a8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8c0:	9d00      	ldr	r5, [sp, #0]
 800a8c2:	ea6f 0a03 	mvn.w	sl, r3
 800a8c6:	f04f 0800 	mov.w	r8, #0
 800a8ca:	4631      	mov	r1, r6
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f000 ff27 	bl	800b720 <_Bfree>
 800a8d2:	2f00      	cmp	r7, #0
 800a8d4:	f43f aeb4 	beq.w	800a640 <_dtoa_r+0x6d8>
 800a8d8:	f1b8 0f00 	cmp.w	r8, #0
 800a8dc:	d005      	beq.n	800a8ea <_dtoa_r+0x982>
 800a8de:	45b8      	cmp	r8, r7
 800a8e0:	d003      	beq.n	800a8ea <_dtoa_r+0x982>
 800a8e2:	4641      	mov	r1, r8
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f000 ff1b 	bl	800b720 <_Bfree>
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f000 ff17 	bl	800b720 <_Bfree>
 800a8f2:	e6a5      	b.n	800a640 <_dtoa_r+0x6d8>
 800a8f4:	2600      	movs	r6, #0
 800a8f6:	4637      	mov	r7, r6
 800a8f8:	e7e1      	b.n	800a8be <_dtoa_r+0x956>
 800a8fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a8fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a900:	4637      	mov	r7, r6
 800a902:	e599      	b.n	800a438 <_dtoa_r+0x4d0>
 800a904:	9b08      	ldr	r3, [sp, #32]
 800a906:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f000 80fd 	beq.w	800ab0a <_dtoa_r+0xba2>
 800a910:	2d00      	cmp	r5, #0
 800a912:	dd05      	ble.n	800a920 <_dtoa_r+0x9b8>
 800a914:	4639      	mov	r1, r7
 800a916:	462a      	mov	r2, r5
 800a918:	4620      	mov	r0, r4
 800a91a:	f001 f91d 	bl	800bb58 <__lshift>
 800a91e:	4607      	mov	r7, r0
 800a920:	9b06      	ldr	r3, [sp, #24]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d05c      	beq.n	800a9e0 <_dtoa_r+0xa78>
 800a926:	6879      	ldr	r1, [r7, #4]
 800a928:	4620      	mov	r0, r4
 800a92a:	f000 feb9 	bl	800b6a0 <_Balloc>
 800a92e:	4605      	mov	r5, r0
 800a930:	b928      	cbnz	r0, 800a93e <_dtoa_r+0x9d6>
 800a932:	4b80      	ldr	r3, [pc, #512]	; (800ab34 <_dtoa_r+0xbcc>)
 800a934:	4602      	mov	r2, r0
 800a936:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a93a:	f7ff bb2e 	b.w	8009f9a <_dtoa_r+0x32>
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	3202      	adds	r2, #2
 800a942:	0092      	lsls	r2, r2, #2
 800a944:	f107 010c 	add.w	r1, r7, #12
 800a948:	300c      	adds	r0, #12
 800a94a:	f7fd fa23 	bl	8007d94 <memcpy>
 800a94e:	2201      	movs	r2, #1
 800a950:	4629      	mov	r1, r5
 800a952:	4620      	mov	r0, r4
 800a954:	f001 f900 	bl	800bb58 <__lshift>
 800a958:	9b00      	ldr	r3, [sp, #0]
 800a95a:	3301      	adds	r3, #1
 800a95c:	9301      	str	r3, [sp, #4]
 800a95e:	9b00      	ldr	r3, [sp, #0]
 800a960:	444b      	add	r3, r9
 800a962:	9307      	str	r3, [sp, #28]
 800a964:	9b02      	ldr	r3, [sp, #8]
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	46b8      	mov	r8, r7
 800a96c:	9306      	str	r3, [sp, #24]
 800a96e:	4607      	mov	r7, r0
 800a970:	9b01      	ldr	r3, [sp, #4]
 800a972:	4631      	mov	r1, r6
 800a974:	3b01      	subs	r3, #1
 800a976:	4658      	mov	r0, fp
 800a978:	9302      	str	r3, [sp, #8]
 800a97a:	f7ff fa67 	bl	8009e4c <quorem>
 800a97e:	4603      	mov	r3, r0
 800a980:	3330      	adds	r3, #48	; 0x30
 800a982:	9004      	str	r0, [sp, #16]
 800a984:	4641      	mov	r1, r8
 800a986:	4658      	mov	r0, fp
 800a988:	9308      	str	r3, [sp, #32]
 800a98a:	f001 f951 	bl	800bc30 <__mcmp>
 800a98e:	463a      	mov	r2, r7
 800a990:	4681      	mov	r9, r0
 800a992:	4631      	mov	r1, r6
 800a994:	4620      	mov	r0, r4
 800a996:	f001 f967 	bl	800bc68 <__mdiff>
 800a99a:	68c2      	ldr	r2, [r0, #12]
 800a99c:	9b08      	ldr	r3, [sp, #32]
 800a99e:	4605      	mov	r5, r0
 800a9a0:	bb02      	cbnz	r2, 800a9e4 <_dtoa_r+0xa7c>
 800a9a2:	4601      	mov	r1, r0
 800a9a4:	4658      	mov	r0, fp
 800a9a6:	f001 f943 	bl	800bc30 <__mcmp>
 800a9aa:	9b08      	ldr	r3, [sp, #32]
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a9b6:	f000 feb3 	bl	800b720 <_Bfree>
 800a9ba:	9b05      	ldr	r3, [sp, #20]
 800a9bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9be:	9d01      	ldr	r5, [sp, #4]
 800a9c0:	ea43 0102 	orr.w	r1, r3, r2
 800a9c4:	9b06      	ldr	r3, [sp, #24]
 800a9c6:	430b      	orrs	r3, r1
 800a9c8:	9b08      	ldr	r3, [sp, #32]
 800a9ca:	d10d      	bne.n	800a9e8 <_dtoa_r+0xa80>
 800a9cc:	2b39      	cmp	r3, #57	; 0x39
 800a9ce:	d029      	beq.n	800aa24 <_dtoa_r+0xabc>
 800a9d0:	f1b9 0f00 	cmp.w	r9, #0
 800a9d4:	dd01      	ble.n	800a9da <_dtoa_r+0xa72>
 800a9d6:	9b04      	ldr	r3, [sp, #16]
 800a9d8:	3331      	adds	r3, #49	; 0x31
 800a9da:	9a02      	ldr	r2, [sp, #8]
 800a9dc:	7013      	strb	r3, [r2, #0]
 800a9de:	e774      	b.n	800a8ca <_dtoa_r+0x962>
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	e7b9      	b.n	800a958 <_dtoa_r+0x9f0>
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	e7e2      	b.n	800a9ae <_dtoa_r+0xa46>
 800a9e8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ec:	db06      	blt.n	800a9fc <_dtoa_r+0xa94>
 800a9ee:	9905      	ldr	r1, [sp, #20]
 800a9f0:	ea41 0909 	orr.w	r9, r1, r9
 800a9f4:	9906      	ldr	r1, [sp, #24]
 800a9f6:	ea59 0101 	orrs.w	r1, r9, r1
 800a9fa:	d120      	bne.n	800aa3e <_dtoa_r+0xad6>
 800a9fc:	2a00      	cmp	r2, #0
 800a9fe:	ddec      	ble.n	800a9da <_dtoa_r+0xa72>
 800aa00:	4659      	mov	r1, fp
 800aa02:	2201      	movs	r2, #1
 800aa04:	4620      	mov	r0, r4
 800aa06:	9301      	str	r3, [sp, #4]
 800aa08:	f001 f8a6 	bl	800bb58 <__lshift>
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	4683      	mov	fp, r0
 800aa10:	f001 f90e 	bl	800bc30 <__mcmp>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	9b01      	ldr	r3, [sp, #4]
 800aa18:	dc02      	bgt.n	800aa20 <_dtoa_r+0xab8>
 800aa1a:	d1de      	bne.n	800a9da <_dtoa_r+0xa72>
 800aa1c:	07da      	lsls	r2, r3, #31
 800aa1e:	d5dc      	bpl.n	800a9da <_dtoa_r+0xa72>
 800aa20:	2b39      	cmp	r3, #57	; 0x39
 800aa22:	d1d8      	bne.n	800a9d6 <_dtoa_r+0xa6e>
 800aa24:	9a02      	ldr	r2, [sp, #8]
 800aa26:	2339      	movs	r3, #57	; 0x39
 800aa28:	7013      	strb	r3, [r2, #0]
 800aa2a:	462b      	mov	r3, r5
 800aa2c:	461d      	mov	r5, r3
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa34:	2a39      	cmp	r2, #57	; 0x39
 800aa36:	d050      	beq.n	800aada <_dtoa_r+0xb72>
 800aa38:	3201      	adds	r2, #1
 800aa3a:	701a      	strb	r2, [r3, #0]
 800aa3c:	e745      	b.n	800a8ca <_dtoa_r+0x962>
 800aa3e:	2a00      	cmp	r2, #0
 800aa40:	dd03      	ble.n	800aa4a <_dtoa_r+0xae2>
 800aa42:	2b39      	cmp	r3, #57	; 0x39
 800aa44:	d0ee      	beq.n	800aa24 <_dtoa_r+0xabc>
 800aa46:	3301      	adds	r3, #1
 800aa48:	e7c7      	b.n	800a9da <_dtoa_r+0xa72>
 800aa4a:	9a01      	ldr	r2, [sp, #4]
 800aa4c:	9907      	ldr	r1, [sp, #28]
 800aa4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa52:	428a      	cmp	r2, r1
 800aa54:	d02a      	beq.n	800aaac <_dtoa_r+0xb44>
 800aa56:	4659      	mov	r1, fp
 800aa58:	2300      	movs	r3, #0
 800aa5a:	220a      	movs	r2, #10
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f000 fe81 	bl	800b764 <__multadd>
 800aa62:	45b8      	cmp	r8, r7
 800aa64:	4683      	mov	fp, r0
 800aa66:	f04f 0300 	mov.w	r3, #0
 800aa6a:	f04f 020a 	mov.w	r2, #10
 800aa6e:	4641      	mov	r1, r8
 800aa70:	4620      	mov	r0, r4
 800aa72:	d107      	bne.n	800aa84 <_dtoa_r+0xb1c>
 800aa74:	f000 fe76 	bl	800b764 <__multadd>
 800aa78:	4680      	mov	r8, r0
 800aa7a:	4607      	mov	r7, r0
 800aa7c:	9b01      	ldr	r3, [sp, #4]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	9301      	str	r3, [sp, #4]
 800aa82:	e775      	b.n	800a970 <_dtoa_r+0xa08>
 800aa84:	f000 fe6e 	bl	800b764 <__multadd>
 800aa88:	4639      	mov	r1, r7
 800aa8a:	4680      	mov	r8, r0
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	220a      	movs	r2, #10
 800aa90:	4620      	mov	r0, r4
 800aa92:	f000 fe67 	bl	800b764 <__multadd>
 800aa96:	4607      	mov	r7, r0
 800aa98:	e7f0      	b.n	800aa7c <_dtoa_r+0xb14>
 800aa9a:	f1b9 0f00 	cmp.w	r9, #0
 800aa9e:	9a00      	ldr	r2, [sp, #0]
 800aaa0:	bfcc      	ite	gt
 800aaa2:	464d      	movgt	r5, r9
 800aaa4:	2501      	movle	r5, #1
 800aaa6:	4415      	add	r5, r2
 800aaa8:	f04f 0800 	mov.w	r8, #0
 800aaac:	4659      	mov	r1, fp
 800aaae:	2201      	movs	r2, #1
 800aab0:	4620      	mov	r0, r4
 800aab2:	9301      	str	r3, [sp, #4]
 800aab4:	f001 f850 	bl	800bb58 <__lshift>
 800aab8:	4631      	mov	r1, r6
 800aaba:	4683      	mov	fp, r0
 800aabc:	f001 f8b8 	bl	800bc30 <__mcmp>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	dcb2      	bgt.n	800aa2a <_dtoa_r+0xac2>
 800aac4:	d102      	bne.n	800aacc <_dtoa_r+0xb64>
 800aac6:	9b01      	ldr	r3, [sp, #4]
 800aac8:	07db      	lsls	r3, r3, #31
 800aaca:	d4ae      	bmi.n	800aa2a <_dtoa_r+0xac2>
 800aacc:	462b      	mov	r3, r5
 800aace:	461d      	mov	r5, r3
 800aad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aad4:	2a30      	cmp	r2, #48	; 0x30
 800aad6:	d0fa      	beq.n	800aace <_dtoa_r+0xb66>
 800aad8:	e6f7      	b.n	800a8ca <_dtoa_r+0x962>
 800aada:	9a00      	ldr	r2, [sp, #0]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d1a5      	bne.n	800aa2c <_dtoa_r+0xac4>
 800aae0:	f10a 0a01 	add.w	sl, sl, #1
 800aae4:	2331      	movs	r3, #49	; 0x31
 800aae6:	e779      	b.n	800a9dc <_dtoa_r+0xa74>
 800aae8:	4b13      	ldr	r3, [pc, #76]	; (800ab38 <_dtoa_r+0xbd0>)
 800aaea:	f7ff baaf 	b.w	800a04c <_dtoa_r+0xe4>
 800aaee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f47f aa86 	bne.w	800a002 <_dtoa_r+0x9a>
 800aaf6:	4b11      	ldr	r3, [pc, #68]	; (800ab3c <_dtoa_r+0xbd4>)
 800aaf8:	f7ff baa8 	b.w	800a04c <_dtoa_r+0xe4>
 800aafc:	f1b9 0f00 	cmp.w	r9, #0
 800ab00:	dc03      	bgt.n	800ab0a <_dtoa_r+0xba2>
 800ab02:	9b05      	ldr	r3, [sp, #20]
 800ab04:	2b02      	cmp	r3, #2
 800ab06:	f73f aec9 	bgt.w	800a89c <_dtoa_r+0x934>
 800ab0a:	9d00      	ldr	r5, [sp, #0]
 800ab0c:	4631      	mov	r1, r6
 800ab0e:	4658      	mov	r0, fp
 800ab10:	f7ff f99c 	bl	8009e4c <quorem>
 800ab14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab18:	f805 3b01 	strb.w	r3, [r5], #1
 800ab1c:	9a00      	ldr	r2, [sp, #0]
 800ab1e:	1aaa      	subs	r2, r5, r2
 800ab20:	4591      	cmp	r9, r2
 800ab22:	ddba      	ble.n	800aa9a <_dtoa_r+0xb32>
 800ab24:	4659      	mov	r1, fp
 800ab26:	2300      	movs	r3, #0
 800ab28:	220a      	movs	r2, #10
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f000 fe1a 	bl	800b764 <__multadd>
 800ab30:	4683      	mov	fp, r0
 800ab32:	e7eb      	b.n	800ab0c <_dtoa_r+0xba4>
 800ab34:	080110b4 	.word	0x080110b4
 800ab38:	08010eb0 	.word	0x08010eb0
 800ab3c:	08011031 	.word	0x08011031

0800ab40 <__sflush_r>:
 800ab40:	898a      	ldrh	r2, [r1, #12]
 800ab42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab46:	4605      	mov	r5, r0
 800ab48:	0710      	lsls	r0, r2, #28
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	d458      	bmi.n	800ac00 <__sflush_r+0xc0>
 800ab4e:	684b      	ldr	r3, [r1, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	dc05      	bgt.n	800ab60 <__sflush_r+0x20>
 800ab54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	dc02      	bgt.n	800ab60 <__sflush_r+0x20>
 800ab5a:	2000      	movs	r0, #0
 800ab5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab62:	2e00      	cmp	r6, #0
 800ab64:	d0f9      	beq.n	800ab5a <__sflush_r+0x1a>
 800ab66:	2300      	movs	r3, #0
 800ab68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab6c:	682f      	ldr	r7, [r5, #0]
 800ab6e:	602b      	str	r3, [r5, #0]
 800ab70:	d032      	beq.n	800abd8 <__sflush_r+0x98>
 800ab72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab74:	89a3      	ldrh	r3, [r4, #12]
 800ab76:	075a      	lsls	r2, r3, #29
 800ab78:	d505      	bpl.n	800ab86 <__sflush_r+0x46>
 800ab7a:	6863      	ldr	r3, [r4, #4]
 800ab7c:	1ac0      	subs	r0, r0, r3
 800ab7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab80:	b10b      	cbz	r3, 800ab86 <__sflush_r+0x46>
 800ab82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab84:	1ac0      	subs	r0, r0, r3
 800ab86:	2300      	movs	r3, #0
 800ab88:	4602      	mov	r2, r0
 800ab8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab8c:	6a21      	ldr	r1, [r4, #32]
 800ab8e:	4628      	mov	r0, r5
 800ab90:	47b0      	blx	r6
 800ab92:	1c43      	adds	r3, r0, #1
 800ab94:	89a3      	ldrh	r3, [r4, #12]
 800ab96:	d106      	bne.n	800aba6 <__sflush_r+0x66>
 800ab98:	6829      	ldr	r1, [r5, #0]
 800ab9a:	291d      	cmp	r1, #29
 800ab9c:	d82c      	bhi.n	800abf8 <__sflush_r+0xb8>
 800ab9e:	4a2a      	ldr	r2, [pc, #168]	; (800ac48 <__sflush_r+0x108>)
 800aba0:	40ca      	lsrs	r2, r1
 800aba2:	07d6      	lsls	r6, r2, #31
 800aba4:	d528      	bpl.n	800abf8 <__sflush_r+0xb8>
 800aba6:	2200      	movs	r2, #0
 800aba8:	6062      	str	r2, [r4, #4]
 800abaa:	04d9      	lsls	r1, r3, #19
 800abac:	6922      	ldr	r2, [r4, #16]
 800abae:	6022      	str	r2, [r4, #0]
 800abb0:	d504      	bpl.n	800abbc <__sflush_r+0x7c>
 800abb2:	1c42      	adds	r2, r0, #1
 800abb4:	d101      	bne.n	800abba <__sflush_r+0x7a>
 800abb6:	682b      	ldr	r3, [r5, #0]
 800abb8:	b903      	cbnz	r3, 800abbc <__sflush_r+0x7c>
 800abba:	6560      	str	r0, [r4, #84]	; 0x54
 800abbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abbe:	602f      	str	r7, [r5, #0]
 800abc0:	2900      	cmp	r1, #0
 800abc2:	d0ca      	beq.n	800ab5a <__sflush_r+0x1a>
 800abc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abc8:	4299      	cmp	r1, r3
 800abca:	d002      	beq.n	800abd2 <__sflush_r+0x92>
 800abcc:	4628      	mov	r0, r5
 800abce:	f7fd f907 	bl	8007de0 <_free_r>
 800abd2:	2000      	movs	r0, #0
 800abd4:	6360      	str	r0, [r4, #52]	; 0x34
 800abd6:	e7c1      	b.n	800ab5c <__sflush_r+0x1c>
 800abd8:	6a21      	ldr	r1, [r4, #32]
 800abda:	2301      	movs	r3, #1
 800abdc:	4628      	mov	r0, r5
 800abde:	47b0      	blx	r6
 800abe0:	1c41      	adds	r1, r0, #1
 800abe2:	d1c7      	bne.n	800ab74 <__sflush_r+0x34>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d0c4      	beq.n	800ab74 <__sflush_r+0x34>
 800abea:	2b1d      	cmp	r3, #29
 800abec:	d001      	beq.n	800abf2 <__sflush_r+0xb2>
 800abee:	2b16      	cmp	r3, #22
 800abf0:	d101      	bne.n	800abf6 <__sflush_r+0xb6>
 800abf2:	602f      	str	r7, [r5, #0]
 800abf4:	e7b1      	b.n	800ab5a <__sflush_r+0x1a>
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	e7ad      	b.n	800ab5c <__sflush_r+0x1c>
 800ac00:	690f      	ldr	r7, [r1, #16]
 800ac02:	2f00      	cmp	r7, #0
 800ac04:	d0a9      	beq.n	800ab5a <__sflush_r+0x1a>
 800ac06:	0793      	lsls	r3, r2, #30
 800ac08:	680e      	ldr	r6, [r1, #0]
 800ac0a:	bf08      	it	eq
 800ac0c:	694b      	ldreq	r3, [r1, #20]
 800ac0e:	600f      	str	r7, [r1, #0]
 800ac10:	bf18      	it	ne
 800ac12:	2300      	movne	r3, #0
 800ac14:	eba6 0807 	sub.w	r8, r6, r7
 800ac18:	608b      	str	r3, [r1, #8]
 800ac1a:	f1b8 0f00 	cmp.w	r8, #0
 800ac1e:	dd9c      	ble.n	800ab5a <__sflush_r+0x1a>
 800ac20:	6a21      	ldr	r1, [r4, #32]
 800ac22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac24:	4643      	mov	r3, r8
 800ac26:	463a      	mov	r2, r7
 800ac28:	4628      	mov	r0, r5
 800ac2a:	47b0      	blx	r6
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	dc06      	bgt.n	800ac3e <__sflush_r+0xfe>
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac36:	81a3      	strh	r3, [r4, #12]
 800ac38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac3c:	e78e      	b.n	800ab5c <__sflush_r+0x1c>
 800ac3e:	4407      	add	r7, r0
 800ac40:	eba8 0800 	sub.w	r8, r8, r0
 800ac44:	e7e9      	b.n	800ac1a <__sflush_r+0xda>
 800ac46:	bf00      	nop
 800ac48:	20400001 	.word	0x20400001

0800ac4c <_fflush_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	690b      	ldr	r3, [r1, #16]
 800ac50:	4605      	mov	r5, r0
 800ac52:	460c      	mov	r4, r1
 800ac54:	b913      	cbnz	r3, 800ac5c <_fflush_r+0x10>
 800ac56:	2500      	movs	r5, #0
 800ac58:	4628      	mov	r0, r5
 800ac5a:	bd38      	pop	{r3, r4, r5, pc}
 800ac5c:	b118      	cbz	r0, 800ac66 <_fflush_r+0x1a>
 800ac5e:	6983      	ldr	r3, [r0, #24]
 800ac60:	b90b      	cbnz	r3, 800ac66 <_fflush_r+0x1a>
 800ac62:	f000 f887 	bl	800ad74 <__sinit>
 800ac66:	4b14      	ldr	r3, [pc, #80]	; (800acb8 <_fflush_r+0x6c>)
 800ac68:	429c      	cmp	r4, r3
 800ac6a:	d11b      	bne.n	800aca4 <_fflush_r+0x58>
 800ac6c:	686c      	ldr	r4, [r5, #4]
 800ac6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0ef      	beq.n	800ac56 <_fflush_r+0xa>
 800ac76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac78:	07d0      	lsls	r0, r2, #31
 800ac7a:	d404      	bmi.n	800ac86 <_fflush_r+0x3a>
 800ac7c:	0599      	lsls	r1, r3, #22
 800ac7e:	d402      	bmi.n	800ac86 <_fflush_r+0x3a>
 800ac80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac82:	f000 fc88 	bl	800b596 <__retarget_lock_acquire_recursive>
 800ac86:	4628      	mov	r0, r5
 800ac88:	4621      	mov	r1, r4
 800ac8a:	f7ff ff59 	bl	800ab40 <__sflush_r>
 800ac8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac90:	07da      	lsls	r2, r3, #31
 800ac92:	4605      	mov	r5, r0
 800ac94:	d4e0      	bmi.n	800ac58 <_fflush_r+0xc>
 800ac96:	89a3      	ldrh	r3, [r4, #12]
 800ac98:	059b      	lsls	r3, r3, #22
 800ac9a:	d4dd      	bmi.n	800ac58 <_fflush_r+0xc>
 800ac9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac9e:	f000 fc7b 	bl	800b598 <__retarget_lock_release_recursive>
 800aca2:	e7d9      	b.n	800ac58 <_fflush_r+0xc>
 800aca4:	4b05      	ldr	r3, [pc, #20]	; (800acbc <_fflush_r+0x70>)
 800aca6:	429c      	cmp	r4, r3
 800aca8:	d101      	bne.n	800acae <_fflush_r+0x62>
 800acaa:	68ac      	ldr	r4, [r5, #8]
 800acac:	e7df      	b.n	800ac6e <_fflush_r+0x22>
 800acae:	4b04      	ldr	r3, [pc, #16]	; (800acc0 <_fflush_r+0x74>)
 800acb0:	429c      	cmp	r4, r3
 800acb2:	bf08      	it	eq
 800acb4:	68ec      	ldreq	r4, [r5, #12]
 800acb6:	e7da      	b.n	800ac6e <_fflush_r+0x22>
 800acb8:	080110e8 	.word	0x080110e8
 800acbc:	08011108 	.word	0x08011108
 800acc0:	080110c8 	.word	0x080110c8

0800acc4 <std>:
 800acc4:	2300      	movs	r3, #0
 800acc6:	b510      	push	{r4, lr}
 800acc8:	4604      	mov	r4, r0
 800acca:	e9c0 3300 	strd	r3, r3, [r0]
 800acce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acd2:	6083      	str	r3, [r0, #8]
 800acd4:	8181      	strh	r1, [r0, #12]
 800acd6:	6643      	str	r3, [r0, #100]	; 0x64
 800acd8:	81c2      	strh	r2, [r0, #14]
 800acda:	6183      	str	r3, [r0, #24]
 800acdc:	4619      	mov	r1, r3
 800acde:	2208      	movs	r2, #8
 800ace0:	305c      	adds	r0, #92	; 0x5c
 800ace2:	f7fd f865 	bl	8007db0 <memset>
 800ace6:	4b05      	ldr	r3, [pc, #20]	; (800acfc <std+0x38>)
 800ace8:	6263      	str	r3, [r4, #36]	; 0x24
 800acea:	4b05      	ldr	r3, [pc, #20]	; (800ad00 <std+0x3c>)
 800acec:	62a3      	str	r3, [r4, #40]	; 0x28
 800acee:	4b05      	ldr	r3, [pc, #20]	; (800ad04 <std+0x40>)
 800acf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acf2:	4b05      	ldr	r3, [pc, #20]	; (800ad08 <std+0x44>)
 800acf4:	6224      	str	r4, [r4, #32]
 800acf6:	6323      	str	r3, [r4, #48]	; 0x30
 800acf8:	bd10      	pop	{r4, pc}
 800acfa:	bf00      	nop
 800acfc:	0800c621 	.word	0x0800c621
 800ad00:	0800c643 	.word	0x0800c643
 800ad04:	0800c67b 	.word	0x0800c67b
 800ad08:	0800c69f 	.word	0x0800c69f

0800ad0c <_cleanup_r>:
 800ad0c:	4901      	ldr	r1, [pc, #4]	; (800ad14 <_cleanup_r+0x8>)
 800ad0e:	f000 b8af 	b.w	800ae70 <_fwalk_reent>
 800ad12:	bf00      	nop
 800ad14:	0800ac4d 	.word	0x0800ac4d

0800ad18 <__sfmoreglue>:
 800ad18:	b570      	push	{r4, r5, r6, lr}
 800ad1a:	1e4a      	subs	r2, r1, #1
 800ad1c:	2568      	movs	r5, #104	; 0x68
 800ad1e:	4355      	muls	r5, r2
 800ad20:	460e      	mov	r6, r1
 800ad22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad26:	f7fd f8ab 	bl	8007e80 <_malloc_r>
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	b140      	cbz	r0, 800ad40 <__sfmoreglue+0x28>
 800ad2e:	2100      	movs	r1, #0
 800ad30:	e9c0 1600 	strd	r1, r6, [r0]
 800ad34:	300c      	adds	r0, #12
 800ad36:	60a0      	str	r0, [r4, #8]
 800ad38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad3c:	f7fd f838 	bl	8007db0 <memset>
 800ad40:	4620      	mov	r0, r4
 800ad42:	bd70      	pop	{r4, r5, r6, pc}

0800ad44 <__sfp_lock_acquire>:
 800ad44:	4801      	ldr	r0, [pc, #4]	; (800ad4c <__sfp_lock_acquire+0x8>)
 800ad46:	f000 bc26 	b.w	800b596 <__retarget_lock_acquire_recursive>
 800ad4a:	bf00      	nop
 800ad4c:	20000800 	.word	0x20000800

0800ad50 <__sfp_lock_release>:
 800ad50:	4801      	ldr	r0, [pc, #4]	; (800ad58 <__sfp_lock_release+0x8>)
 800ad52:	f000 bc21 	b.w	800b598 <__retarget_lock_release_recursive>
 800ad56:	bf00      	nop
 800ad58:	20000800 	.word	0x20000800

0800ad5c <__sinit_lock_acquire>:
 800ad5c:	4801      	ldr	r0, [pc, #4]	; (800ad64 <__sinit_lock_acquire+0x8>)
 800ad5e:	f000 bc1a 	b.w	800b596 <__retarget_lock_acquire_recursive>
 800ad62:	bf00      	nop
 800ad64:	200007fb 	.word	0x200007fb

0800ad68 <__sinit_lock_release>:
 800ad68:	4801      	ldr	r0, [pc, #4]	; (800ad70 <__sinit_lock_release+0x8>)
 800ad6a:	f000 bc15 	b.w	800b598 <__retarget_lock_release_recursive>
 800ad6e:	bf00      	nop
 800ad70:	200007fb 	.word	0x200007fb

0800ad74 <__sinit>:
 800ad74:	b510      	push	{r4, lr}
 800ad76:	4604      	mov	r4, r0
 800ad78:	f7ff fff0 	bl	800ad5c <__sinit_lock_acquire>
 800ad7c:	69a3      	ldr	r3, [r4, #24]
 800ad7e:	b11b      	cbz	r3, 800ad88 <__sinit+0x14>
 800ad80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad84:	f7ff bff0 	b.w	800ad68 <__sinit_lock_release>
 800ad88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad8c:	6523      	str	r3, [r4, #80]	; 0x50
 800ad8e:	4b13      	ldr	r3, [pc, #76]	; (800addc <__sinit+0x68>)
 800ad90:	4a13      	ldr	r2, [pc, #76]	; (800ade0 <__sinit+0x6c>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad96:	42a3      	cmp	r3, r4
 800ad98:	bf04      	itt	eq
 800ad9a:	2301      	moveq	r3, #1
 800ad9c:	61a3      	streq	r3, [r4, #24]
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f000 f820 	bl	800ade4 <__sfp>
 800ada4:	6060      	str	r0, [r4, #4]
 800ada6:	4620      	mov	r0, r4
 800ada8:	f000 f81c 	bl	800ade4 <__sfp>
 800adac:	60a0      	str	r0, [r4, #8]
 800adae:	4620      	mov	r0, r4
 800adb0:	f000 f818 	bl	800ade4 <__sfp>
 800adb4:	2200      	movs	r2, #0
 800adb6:	60e0      	str	r0, [r4, #12]
 800adb8:	2104      	movs	r1, #4
 800adba:	6860      	ldr	r0, [r4, #4]
 800adbc:	f7ff ff82 	bl	800acc4 <std>
 800adc0:	68a0      	ldr	r0, [r4, #8]
 800adc2:	2201      	movs	r2, #1
 800adc4:	2109      	movs	r1, #9
 800adc6:	f7ff ff7d 	bl	800acc4 <std>
 800adca:	68e0      	ldr	r0, [r4, #12]
 800adcc:	2202      	movs	r2, #2
 800adce:	2112      	movs	r1, #18
 800add0:	f7ff ff78 	bl	800acc4 <std>
 800add4:	2301      	movs	r3, #1
 800add6:	61a3      	str	r3, [r4, #24]
 800add8:	e7d2      	b.n	800ad80 <__sinit+0xc>
 800adda:	bf00      	nop
 800addc:	08010e9c 	.word	0x08010e9c
 800ade0:	0800ad0d 	.word	0x0800ad0d

0800ade4 <__sfp>:
 800ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	4607      	mov	r7, r0
 800ade8:	f7ff ffac 	bl	800ad44 <__sfp_lock_acquire>
 800adec:	4b1e      	ldr	r3, [pc, #120]	; (800ae68 <__sfp+0x84>)
 800adee:	681e      	ldr	r6, [r3, #0]
 800adf0:	69b3      	ldr	r3, [r6, #24]
 800adf2:	b913      	cbnz	r3, 800adfa <__sfp+0x16>
 800adf4:	4630      	mov	r0, r6
 800adf6:	f7ff ffbd 	bl	800ad74 <__sinit>
 800adfa:	3648      	adds	r6, #72	; 0x48
 800adfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae00:	3b01      	subs	r3, #1
 800ae02:	d503      	bpl.n	800ae0c <__sfp+0x28>
 800ae04:	6833      	ldr	r3, [r6, #0]
 800ae06:	b30b      	cbz	r3, 800ae4c <__sfp+0x68>
 800ae08:	6836      	ldr	r6, [r6, #0]
 800ae0a:	e7f7      	b.n	800adfc <__sfp+0x18>
 800ae0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae10:	b9d5      	cbnz	r5, 800ae48 <__sfp+0x64>
 800ae12:	4b16      	ldr	r3, [pc, #88]	; (800ae6c <__sfp+0x88>)
 800ae14:	60e3      	str	r3, [r4, #12]
 800ae16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae1a:	6665      	str	r5, [r4, #100]	; 0x64
 800ae1c:	f000 fbba 	bl	800b594 <__retarget_lock_init_recursive>
 800ae20:	f7ff ff96 	bl	800ad50 <__sfp_lock_release>
 800ae24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae2c:	6025      	str	r5, [r4, #0]
 800ae2e:	61a5      	str	r5, [r4, #24]
 800ae30:	2208      	movs	r2, #8
 800ae32:	4629      	mov	r1, r5
 800ae34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae38:	f7fc ffba 	bl	8007db0 <memset>
 800ae3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae44:	4620      	mov	r0, r4
 800ae46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae48:	3468      	adds	r4, #104	; 0x68
 800ae4a:	e7d9      	b.n	800ae00 <__sfp+0x1c>
 800ae4c:	2104      	movs	r1, #4
 800ae4e:	4638      	mov	r0, r7
 800ae50:	f7ff ff62 	bl	800ad18 <__sfmoreglue>
 800ae54:	4604      	mov	r4, r0
 800ae56:	6030      	str	r0, [r6, #0]
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d1d5      	bne.n	800ae08 <__sfp+0x24>
 800ae5c:	f7ff ff78 	bl	800ad50 <__sfp_lock_release>
 800ae60:	230c      	movs	r3, #12
 800ae62:	603b      	str	r3, [r7, #0]
 800ae64:	e7ee      	b.n	800ae44 <__sfp+0x60>
 800ae66:	bf00      	nop
 800ae68:	08010e9c 	.word	0x08010e9c
 800ae6c:	ffff0001 	.word	0xffff0001

0800ae70 <_fwalk_reent>:
 800ae70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae74:	4606      	mov	r6, r0
 800ae76:	4688      	mov	r8, r1
 800ae78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae7c:	2700      	movs	r7, #0
 800ae7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae82:	f1b9 0901 	subs.w	r9, r9, #1
 800ae86:	d505      	bpl.n	800ae94 <_fwalk_reent+0x24>
 800ae88:	6824      	ldr	r4, [r4, #0]
 800ae8a:	2c00      	cmp	r4, #0
 800ae8c:	d1f7      	bne.n	800ae7e <_fwalk_reent+0xe>
 800ae8e:	4638      	mov	r0, r7
 800ae90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae94:	89ab      	ldrh	r3, [r5, #12]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d907      	bls.n	800aeaa <_fwalk_reent+0x3a>
 800ae9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	d003      	beq.n	800aeaa <_fwalk_reent+0x3a>
 800aea2:	4629      	mov	r1, r5
 800aea4:	4630      	mov	r0, r6
 800aea6:	47c0      	blx	r8
 800aea8:	4307      	orrs	r7, r0
 800aeaa:	3568      	adds	r5, #104	; 0x68
 800aeac:	e7e9      	b.n	800ae82 <_fwalk_reent+0x12>

0800aeae <rshift>:
 800aeae:	6903      	ldr	r3, [r0, #16]
 800aeb0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aeb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aeb8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aebc:	f100 0414 	add.w	r4, r0, #20
 800aec0:	dd45      	ble.n	800af4e <rshift+0xa0>
 800aec2:	f011 011f 	ands.w	r1, r1, #31
 800aec6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aeca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aece:	d10c      	bne.n	800aeea <rshift+0x3c>
 800aed0:	f100 0710 	add.w	r7, r0, #16
 800aed4:	4629      	mov	r1, r5
 800aed6:	42b1      	cmp	r1, r6
 800aed8:	d334      	bcc.n	800af44 <rshift+0x96>
 800aeda:	1a9b      	subs	r3, r3, r2
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	1eea      	subs	r2, r5, #3
 800aee0:	4296      	cmp	r6, r2
 800aee2:	bf38      	it	cc
 800aee4:	2300      	movcc	r3, #0
 800aee6:	4423      	add	r3, r4
 800aee8:	e015      	b.n	800af16 <rshift+0x68>
 800aeea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aeee:	f1c1 0820 	rsb	r8, r1, #32
 800aef2:	40cf      	lsrs	r7, r1
 800aef4:	f105 0e04 	add.w	lr, r5, #4
 800aef8:	46a1      	mov	r9, r4
 800aefa:	4576      	cmp	r6, lr
 800aefc:	46f4      	mov	ip, lr
 800aefe:	d815      	bhi.n	800af2c <rshift+0x7e>
 800af00:	1a9b      	subs	r3, r3, r2
 800af02:	009a      	lsls	r2, r3, #2
 800af04:	3a04      	subs	r2, #4
 800af06:	3501      	adds	r5, #1
 800af08:	42ae      	cmp	r6, r5
 800af0a:	bf38      	it	cc
 800af0c:	2200      	movcc	r2, #0
 800af0e:	18a3      	adds	r3, r4, r2
 800af10:	50a7      	str	r7, [r4, r2]
 800af12:	b107      	cbz	r7, 800af16 <rshift+0x68>
 800af14:	3304      	adds	r3, #4
 800af16:	1b1a      	subs	r2, r3, r4
 800af18:	42a3      	cmp	r3, r4
 800af1a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af1e:	bf08      	it	eq
 800af20:	2300      	moveq	r3, #0
 800af22:	6102      	str	r2, [r0, #16]
 800af24:	bf08      	it	eq
 800af26:	6143      	streq	r3, [r0, #20]
 800af28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af2c:	f8dc c000 	ldr.w	ip, [ip]
 800af30:	fa0c fc08 	lsl.w	ip, ip, r8
 800af34:	ea4c 0707 	orr.w	r7, ip, r7
 800af38:	f849 7b04 	str.w	r7, [r9], #4
 800af3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af40:	40cf      	lsrs	r7, r1
 800af42:	e7da      	b.n	800aefa <rshift+0x4c>
 800af44:	f851 cb04 	ldr.w	ip, [r1], #4
 800af48:	f847 cf04 	str.w	ip, [r7, #4]!
 800af4c:	e7c3      	b.n	800aed6 <rshift+0x28>
 800af4e:	4623      	mov	r3, r4
 800af50:	e7e1      	b.n	800af16 <rshift+0x68>

0800af52 <__hexdig_fun>:
 800af52:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af56:	2b09      	cmp	r3, #9
 800af58:	d802      	bhi.n	800af60 <__hexdig_fun+0xe>
 800af5a:	3820      	subs	r0, #32
 800af5c:	b2c0      	uxtb	r0, r0
 800af5e:	4770      	bx	lr
 800af60:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af64:	2b05      	cmp	r3, #5
 800af66:	d801      	bhi.n	800af6c <__hexdig_fun+0x1a>
 800af68:	3847      	subs	r0, #71	; 0x47
 800af6a:	e7f7      	b.n	800af5c <__hexdig_fun+0xa>
 800af6c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af70:	2b05      	cmp	r3, #5
 800af72:	d801      	bhi.n	800af78 <__hexdig_fun+0x26>
 800af74:	3827      	subs	r0, #39	; 0x27
 800af76:	e7f1      	b.n	800af5c <__hexdig_fun+0xa>
 800af78:	2000      	movs	r0, #0
 800af7a:	4770      	bx	lr

0800af7c <__gethex>:
 800af7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af80:	ed2d 8b02 	vpush	{d8}
 800af84:	b089      	sub	sp, #36	; 0x24
 800af86:	ee08 0a10 	vmov	s16, r0
 800af8a:	9304      	str	r3, [sp, #16]
 800af8c:	4bbc      	ldr	r3, [pc, #752]	; (800b280 <__gethex+0x304>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	9301      	str	r3, [sp, #4]
 800af92:	4618      	mov	r0, r3
 800af94:	468b      	mov	fp, r1
 800af96:	4690      	mov	r8, r2
 800af98:	f7f5 f93a 	bl	8000210 <strlen>
 800af9c:	9b01      	ldr	r3, [sp, #4]
 800af9e:	f8db 2000 	ldr.w	r2, [fp]
 800afa2:	4403      	add	r3, r0
 800afa4:	4682      	mov	sl, r0
 800afa6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800afaa:	9305      	str	r3, [sp, #20]
 800afac:	1c93      	adds	r3, r2, #2
 800afae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800afb2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800afb6:	32fe      	adds	r2, #254	; 0xfe
 800afb8:	18d1      	adds	r1, r2, r3
 800afba:	461f      	mov	r7, r3
 800afbc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800afc0:	9100      	str	r1, [sp, #0]
 800afc2:	2830      	cmp	r0, #48	; 0x30
 800afc4:	d0f8      	beq.n	800afb8 <__gethex+0x3c>
 800afc6:	f7ff ffc4 	bl	800af52 <__hexdig_fun>
 800afca:	4604      	mov	r4, r0
 800afcc:	2800      	cmp	r0, #0
 800afce:	d13a      	bne.n	800b046 <__gethex+0xca>
 800afd0:	9901      	ldr	r1, [sp, #4]
 800afd2:	4652      	mov	r2, sl
 800afd4:	4638      	mov	r0, r7
 800afd6:	f001 fb66 	bl	800c6a6 <strncmp>
 800afda:	4605      	mov	r5, r0
 800afdc:	2800      	cmp	r0, #0
 800afde:	d168      	bne.n	800b0b2 <__gethex+0x136>
 800afe0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800afe4:	eb07 060a 	add.w	r6, r7, sl
 800afe8:	f7ff ffb3 	bl	800af52 <__hexdig_fun>
 800afec:	2800      	cmp	r0, #0
 800afee:	d062      	beq.n	800b0b6 <__gethex+0x13a>
 800aff0:	4633      	mov	r3, r6
 800aff2:	7818      	ldrb	r0, [r3, #0]
 800aff4:	2830      	cmp	r0, #48	; 0x30
 800aff6:	461f      	mov	r7, r3
 800aff8:	f103 0301 	add.w	r3, r3, #1
 800affc:	d0f9      	beq.n	800aff2 <__gethex+0x76>
 800affe:	f7ff ffa8 	bl	800af52 <__hexdig_fun>
 800b002:	2301      	movs	r3, #1
 800b004:	fab0 f480 	clz	r4, r0
 800b008:	0964      	lsrs	r4, r4, #5
 800b00a:	4635      	mov	r5, r6
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	463a      	mov	r2, r7
 800b010:	4616      	mov	r6, r2
 800b012:	3201      	adds	r2, #1
 800b014:	7830      	ldrb	r0, [r6, #0]
 800b016:	f7ff ff9c 	bl	800af52 <__hexdig_fun>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d1f8      	bne.n	800b010 <__gethex+0x94>
 800b01e:	9901      	ldr	r1, [sp, #4]
 800b020:	4652      	mov	r2, sl
 800b022:	4630      	mov	r0, r6
 800b024:	f001 fb3f 	bl	800c6a6 <strncmp>
 800b028:	b980      	cbnz	r0, 800b04c <__gethex+0xd0>
 800b02a:	b94d      	cbnz	r5, 800b040 <__gethex+0xc4>
 800b02c:	eb06 050a 	add.w	r5, r6, sl
 800b030:	462a      	mov	r2, r5
 800b032:	4616      	mov	r6, r2
 800b034:	3201      	adds	r2, #1
 800b036:	7830      	ldrb	r0, [r6, #0]
 800b038:	f7ff ff8b 	bl	800af52 <__hexdig_fun>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	d1f8      	bne.n	800b032 <__gethex+0xb6>
 800b040:	1bad      	subs	r5, r5, r6
 800b042:	00ad      	lsls	r5, r5, #2
 800b044:	e004      	b.n	800b050 <__gethex+0xd4>
 800b046:	2400      	movs	r4, #0
 800b048:	4625      	mov	r5, r4
 800b04a:	e7e0      	b.n	800b00e <__gethex+0x92>
 800b04c:	2d00      	cmp	r5, #0
 800b04e:	d1f7      	bne.n	800b040 <__gethex+0xc4>
 800b050:	7833      	ldrb	r3, [r6, #0]
 800b052:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b056:	2b50      	cmp	r3, #80	; 0x50
 800b058:	d13b      	bne.n	800b0d2 <__gethex+0x156>
 800b05a:	7873      	ldrb	r3, [r6, #1]
 800b05c:	2b2b      	cmp	r3, #43	; 0x2b
 800b05e:	d02c      	beq.n	800b0ba <__gethex+0x13e>
 800b060:	2b2d      	cmp	r3, #45	; 0x2d
 800b062:	d02e      	beq.n	800b0c2 <__gethex+0x146>
 800b064:	1c71      	adds	r1, r6, #1
 800b066:	f04f 0900 	mov.w	r9, #0
 800b06a:	7808      	ldrb	r0, [r1, #0]
 800b06c:	f7ff ff71 	bl	800af52 <__hexdig_fun>
 800b070:	1e43      	subs	r3, r0, #1
 800b072:	b2db      	uxtb	r3, r3
 800b074:	2b18      	cmp	r3, #24
 800b076:	d82c      	bhi.n	800b0d2 <__gethex+0x156>
 800b078:	f1a0 0210 	sub.w	r2, r0, #16
 800b07c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b080:	f7ff ff67 	bl	800af52 <__hexdig_fun>
 800b084:	1e43      	subs	r3, r0, #1
 800b086:	b2db      	uxtb	r3, r3
 800b088:	2b18      	cmp	r3, #24
 800b08a:	d91d      	bls.n	800b0c8 <__gethex+0x14c>
 800b08c:	f1b9 0f00 	cmp.w	r9, #0
 800b090:	d000      	beq.n	800b094 <__gethex+0x118>
 800b092:	4252      	negs	r2, r2
 800b094:	4415      	add	r5, r2
 800b096:	f8cb 1000 	str.w	r1, [fp]
 800b09a:	b1e4      	cbz	r4, 800b0d6 <__gethex+0x15a>
 800b09c:	9b00      	ldr	r3, [sp, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	bf14      	ite	ne
 800b0a2:	2700      	movne	r7, #0
 800b0a4:	2706      	moveq	r7, #6
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	b009      	add	sp, #36	; 0x24
 800b0aa:	ecbd 8b02 	vpop	{d8}
 800b0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b2:	463e      	mov	r6, r7
 800b0b4:	4625      	mov	r5, r4
 800b0b6:	2401      	movs	r4, #1
 800b0b8:	e7ca      	b.n	800b050 <__gethex+0xd4>
 800b0ba:	f04f 0900 	mov.w	r9, #0
 800b0be:	1cb1      	adds	r1, r6, #2
 800b0c0:	e7d3      	b.n	800b06a <__gethex+0xee>
 800b0c2:	f04f 0901 	mov.w	r9, #1
 800b0c6:	e7fa      	b.n	800b0be <__gethex+0x142>
 800b0c8:	230a      	movs	r3, #10
 800b0ca:	fb03 0202 	mla	r2, r3, r2, r0
 800b0ce:	3a10      	subs	r2, #16
 800b0d0:	e7d4      	b.n	800b07c <__gethex+0x100>
 800b0d2:	4631      	mov	r1, r6
 800b0d4:	e7df      	b.n	800b096 <__gethex+0x11a>
 800b0d6:	1bf3      	subs	r3, r6, r7
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	4621      	mov	r1, r4
 800b0dc:	2b07      	cmp	r3, #7
 800b0de:	dc0b      	bgt.n	800b0f8 <__gethex+0x17c>
 800b0e0:	ee18 0a10 	vmov	r0, s16
 800b0e4:	f000 fadc 	bl	800b6a0 <_Balloc>
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	b940      	cbnz	r0, 800b0fe <__gethex+0x182>
 800b0ec:	4b65      	ldr	r3, [pc, #404]	; (800b284 <__gethex+0x308>)
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	21de      	movs	r1, #222	; 0xde
 800b0f2:	4865      	ldr	r0, [pc, #404]	; (800b288 <__gethex+0x30c>)
 800b0f4:	f001 fb08 	bl	800c708 <__assert_func>
 800b0f8:	3101      	adds	r1, #1
 800b0fa:	105b      	asrs	r3, r3, #1
 800b0fc:	e7ee      	b.n	800b0dc <__gethex+0x160>
 800b0fe:	f100 0914 	add.w	r9, r0, #20
 800b102:	f04f 0b00 	mov.w	fp, #0
 800b106:	f1ca 0301 	rsb	r3, sl, #1
 800b10a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b10e:	f8cd b000 	str.w	fp, [sp]
 800b112:	9306      	str	r3, [sp, #24]
 800b114:	42b7      	cmp	r7, r6
 800b116:	d340      	bcc.n	800b19a <__gethex+0x21e>
 800b118:	9802      	ldr	r0, [sp, #8]
 800b11a:	9b00      	ldr	r3, [sp, #0]
 800b11c:	f840 3b04 	str.w	r3, [r0], #4
 800b120:	eba0 0009 	sub.w	r0, r0, r9
 800b124:	1080      	asrs	r0, r0, #2
 800b126:	0146      	lsls	r6, r0, #5
 800b128:	6120      	str	r0, [r4, #16]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 fbae 	bl	800b88c <__hi0bits>
 800b130:	1a30      	subs	r0, r6, r0
 800b132:	f8d8 6000 	ldr.w	r6, [r8]
 800b136:	42b0      	cmp	r0, r6
 800b138:	dd63      	ble.n	800b202 <__gethex+0x286>
 800b13a:	1b87      	subs	r7, r0, r6
 800b13c:	4639      	mov	r1, r7
 800b13e:	4620      	mov	r0, r4
 800b140:	f000 ff48 	bl	800bfd4 <__any_on>
 800b144:	4682      	mov	sl, r0
 800b146:	b1a8      	cbz	r0, 800b174 <__gethex+0x1f8>
 800b148:	1e7b      	subs	r3, r7, #1
 800b14a:	1159      	asrs	r1, r3, #5
 800b14c:	f003 021f 	and.w	r2, r3, #31
 800b150:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b154:	f04f 0a01 	mov.w	sl, #1
 800b158:	fa0a f202 	lsl.w	r2, sl, r2
 800b15c:	420a      	tst	r2, r1
 800b15e:	d009      	beq.n	800b174 <__gethex+0x1f8>
 800b160:	4553      	cmp	r3, sl
 800b162:	dd05      	ble.n	800b170 <__gethex+0x1f4>
 800b164:	1eb9      	subs	r1, r7, #2
 800b166:	4620      	mov	r0, r4
 800b168:	f000 ff34 	bl	800bfd4 <__any_on>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d145      	bne.n	800b1fc <__gethex+0x280>
 800b170:	f04f 0a02 	mov.w	sl, #2
 800b174:	4639      	mov	r1, r7
 800b176:	4620      	mov	r0, r4
 800b178:	f7ff fe99 	bl	800aeae <rshift>
 800b17c:	443d      	add	r5, r7
 800b17e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b182:	42ab      	cmp	r3, r5
 800b184:	da4c      	bge.n	800b220 <__gethex+0x2a4>
 800b186:	ee18 0a10 	vmov	r0, s16
 800b18a:	4621      	mov	r1, r4
 800b18c:	f000 fac8 	bl	800b720 <_Bfree>
 800b190:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b192:	2300      	movs	r3, #0
 800b194:	6013      	str	r3, [r2, #0]
 800b196:	27a3      	movs	r7, #163	; 0xa3
 800b198:	e785      	b.n	800b0a6 <__gethex+0x12a>
 800b19a:	1e73      	subs	r3, r6, #1
 800b19c:	9a05      	ldr	r2, [sp, #20]
 800b19e:	9303      	str	r3, [sp, #12]
 800b1a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d019      	beq.n	800b1dc <__gethex+0x260>
 800b1a8:	f1bb 0f20 	cmp.w	fp, #32
 800b1ac:	d107      	bne.n	800b1be <__gethex+0x242>
 800b1ae:	9b02      	ldr	r3, [sp, #8]
 800b1b0:	9a00      	ldr	r2, [sp, #0]
 800b1b2:	f843 2b04 	str.w	r2, [r3], #4
 800b1b6:	9302      	str	r3, [sp, #8]
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	469b      	mov	fp, r3
 800b1be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b1c2:	f7ff fec6 	bl	800af52 <__hexdig_fun>
 800b1c6:	9b00      	ldr	r3, [sp, #0]
 800b1c8:	f000 000f 	and.w	r0, r0, #15
 800b1cc:	fa00 f00b 	lsl.w	r0, r0, fp
 800b1d0:	4303      	orrs	r3, r0
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	f10b 0b04 	add.w	fp, fp, #4
 800b1d8:	9b03      	ldr	r3, [sp, #12]
 800b1da:	e00d      	b.n	800b1f8 <__gethex+0x27c>
 800b1dc:	9b03      	ldr	r3, [sp, #12]
 800b1de:	9a06      	ldr	r2, [sp, #24]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	42bb      	cmp	r3, r7
 800b1e4:	d3e0      	bcc.n	800b1a8 <__gethex+0x22c>
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	9901      	ldr	r1, [sp, #4]
 800b1ea:	9307      	str	r3, [sp, #28]
 800b1ec:	4652      	mov	r2, sl
 800b1ee:	f001 fa5a 	bl	800c6a6 <strncmp>
 800b1f2:	9b07      	ldr	r3, [sp, #28]
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	d1d7      	bne.n	800b1a8 <__gethex+0x22c>
 800b1f8:	461e      	mov	r6, r3
 800b1fa:	e78b      	b.n	800b114 <__gethex+0x198>
 800b1fc:	f04f 0a03 	mov.w	sl, #3
 800b200:	e7b8      	b.n	800b174 <__gethex+0x1f8>
 800b202:	da0a      	bge.n	800b21a <__gethex+0x29e>
 800b204:	1a37      	subs	r7, r6, r0
 800b206:	4621      	mov	r1, r4
 800b208:	ee18 0a10 	vmov	r0, s16
 800b20c:	463a      	mov	r2, r7
 800b20e:	f000 fca3 	bl	800bb58 <__lshift>
 800b212:	1bed      	subs	r5, r5, r7
 800b214:	4604      	mov	r4, r0
 800b216:	f100 0914 	add.w	r9, r0, #20
 800b21a:	f04f 0a00 	mov.w	sl, #0
 800b21e:	e7ae      	b.n	800b17e <__gethex+0x202>
 800b220:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b224:	42a8      	cmp	r0, r5
 800b226:	dd72      	ble.n	800b30e <__gethex+0x392>
 800b228:	1b45      	subs	r5, r0, r5
 800b22a:	42ae      	cmp	r6, r5
 800b22c:	dc36      	bgt.n	800b29c <__gethex+0x320>
 800b22e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b232:	2b02      	cmp	r3, #2
 800b234:	d02a      	beq.n	800b28c <__gethex+0x310>
 800b236:	2b03      	cmp	r3, #3
 800b238:	d02c      	beq.n	800b294 <__gethex+0x318>
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d115      	bne.n	800b26a <__gethex+0x2ee>
 800b23e:	42ae      	cmp	r6, r5
 800b240:	d113      	bne.n	800b26a <__gethex+0x2ee>
 800b242:	2e01      	cmp	r6, #1
 800b244:	d10b      	bne.n	800b25e <__gethex+0x2e2>
 800b246:	9a04      	ldr	r2, [sp, #16]
 800b248:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b24c:	6013      	str	r3, [r2, #0]
 800b24e:	2301      	movs	r3, #1
 800b250:	6123      	str	r3, [r4, #16]
 800b252:	f8c9 3000 	str.w	r3, [r9]
 800b256:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b258:	2762      	movs	r7, #98	; 0x62
 800b25a:	601c      	str	r4, [r3, #0]
 800b25c:	e723      	b.n	800b0a6 <__gethex+0x12a>
 800b25e:	1e71      	subs	r1, r6, #1
 800b260:	4620      	mov	r0, r4
 800b262:	f000 feb7 	bl	800bfd4 <__any_on>
 800b266:	2800      	cmp	r0, #0
 800b268:	d1ed      	bne.n	800b246 <__gethex+0x2ca>
 800b26a:	ee18 0a10 	vmov	r0, s16
 800b26e:	4621      	mov	r1, r4
 800b270:	f000 fa56 	bl	800b720 <_Bfree>
 800b274:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b276:	2300      	movs	r3, #0
 800b278:	6013      	str	r3, [r2, #0]
 800b27a:	2750      	movs	r7, #80	; 0x50
 800b27c:	e713      	b.n	800b0a6 <__gethex+0x12a>
 800b27e:	bf00      	nop
 800b280:	08011194 	.word	0x08011194
 800b284:	080110b4 	.word	0x080110b4
 800b288:	08011128 	.word	0x08011128
 800b28c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1eb      	bne.n	800b26a <__gethex+0x2ee>
 800b292:	e7d8      	b.n	800b246 <__gethex+0x2ca>
 800b294:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1d5      	bne.n	800b246 <__gethex+0x2ca>
 800b29a:	e7e6      	b.n	800b26a <__gethex+0x2ee>
 800b29c:	1e6f      	subs	r7, r5, #1
 800b29e:	f1ba 0f00 	cmp.w	sl, #0
 800b2a2:	d131      	bne.n	800b308 <__gethex+0x38c>
 800b2a4:	b127      	cbz	r7, 800b2b0 <__gethex+0x334>
 800b2a6:	4639      	mov	r1, r7
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f000 fe93 	bl	800bfd4 <__any_on>
 800b2ae:	4682      	mov	sl, r0
 800b2b0:	117b      	asrs	r3, r7, #5
 800b2b2:	2101      	movs	r1, #1
 800b2b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b2b8:	f007 071f 	and.w	r7, r7, #31
 800b2bc:	fa01 f707 	lsl.w	r7, r1, r7
 800b2c0:	421f      	tst	r7, r3
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	bf18      	it	ne
 800b2c8:	f04a 0a02 	orrne.w	sl, sl, #2
 800b2cc:	1b76      	subs	r6, r6, r5
 800b2ce:	f7ff fdee 	bl	800aeae <rshift>
 800b2d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b2d6:	2702      	movs	r7, #2
 800b2d8:	f1ba 0f00 	cmp.w	sl, #0
 800b2dc:	d048      	beq.n	800b370 <__gethex+0x3f4>
 800b2de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	d015      	beq.n	800b312 <__gethex+0x396>
 800b2e6:	2b03      	cmp	r3, #3
 800b2e8:	d017      	beq.n	800b31a <__gethex+0x39e>
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d109      	bne.n	800b302 <__gethex+0x386>
 800b2ee:	f01a 0f02 	tst.w	sl, #2
 800b2f2:	d006      	beq.n	800b302 <__gethex+0x386>
 800b2f4:	f8d9 0000 	ldr.w	r0, [r9]
 800b2f8:	ea4a 0a00 	orr.w	sl, sl, r0
 800b2fc:	f01a 0f01 	tst.w	sl, #1
 800b300:	d10e      	bne.n	800b320 <__gethex+0x3a4>
 800b302:	f047 0710 	orr.w	r7, r7, #16
 800b306:	e033      	b.n	800b370 <__gethex+0x3f4>
 800b308:	f04f 0a01 	mov.w	sl, #1
 800b30c:	e7d0      	b.n	800b2b0 <__gethex+0x334>
 800b30e:	2701      	movs	r7, #1
 800b310:	e7e2      	b.n	800b2d8 <__gethex+0x35c>
 800b312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b314:	f1c3 0301 	rsb	r3, r3, #1
 800b318:	9315      	str	r3, [sp, #84]	; 0x54
 800b31a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d0f0      	beq.n	800b302 <__gethex+0x386>
 800b320:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b324:	f104 0314 	add.w	r3, r4, #20
 800b328:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b32c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b330:	f04f 0c00 	mov.w	ip, #0
 800b334:	4618      	mov	r0, r3
 800b336:	f853 2b04 	ldr.w	r2, [r3], #4
 800b33a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b33e:	d01c      	beq.n	800b37a <__gethex+0x3fe>
 800b340:	3201      	adds	r2, #1
 800b342:	6002      	str	r2, [r0, #0]
 800b344:	2f02      	cmp	r7, #2
 800b346:	f104 0314 	add.w	r3, r4, #20
 800b34a:	d13f      	bne.n	800b3cc <__gethex+0x450>
 800b34c:	f8d8 2000 	ldr.w	r2, [r8]
 800b350:	3a01      	subs	r2, #1
 800b352:	42b2      	cmp	r2, r6
 800b354:	d10a      	bne.n	800b36c <__gethex+0x3f0>
 800b356:	1171      	asrs	r1, r6, #5
 800b358:	2201      	movs	r2, #1
 800b35a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b35e:	f006 061f 	and.w	r6, r6, #31
 800b362:	fa02 f606 	lsl.w	r6, r2, r6
 800b366:	421e      	tst	r6, r3
 800b368:	bf18      	it	ne
 800b36a:	4617      	movne	r7, r2
 800b36c:	f047 0720 	orr.w	r7, r7, #32
 800b370:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b372:	601c      	str	r4, [r3, #0]
 800b374:	9b04      	ldr	r3, [sp, #16]
 800b376:	601d      	str	r5, [r3, #0]
 800b378:	e695      	b.n	800b0a6 <__gethex+0x12a>
 800b37a:	4299      	cmp	r1, r3
 800b37c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b380:	d8d8      	bhi.n	800b334 <__gethex+0x3b8>
 800b382:	68a3      	ldr	r3, [r4, #8]
 800b384:	459b      	cmp	fp, r3
 800b386:	db19      	blt.n	800b3bc <__gethex+0x440>
 800b388:	6861      	ldr	r1, [r4, #4]
 800b38a:	ee18 0a10 	vmov	r0, s16
 800b38e:	3101      	adds	r1, #1
 800b390:	f000 f986 	bl	800b6a0 <_Balloc>
 800b394:	4681      	mov	r9, r0
 800b396:	b918      	cbnz	r0, 800b3a0 <__gethex+0x424>
 800b398:	4b1a      	ldr	r3, [pc, #104]	; (800b404 <__gethex+0x488>)
 800b39a:	4602      	mov	r2, r0
 800b39c:	2184      	movs	r1, #132	; 0x84
 800b39e:	e6a8      	b.n	800b0f2 <__gethex+0x176>
 800b3a0:	6922      	ldr	r2, [r4, #16]
 800b3a2:	3202      	adds	r2, #2
 800b3a4:	f104 010c 	add.w	r1, r4, #12
 800b3a8:	0092      	lsls	r2, r2, #2
 800b3aa:	300c      	adds	r0, #12
 800b3ac:	f7fc fcf2 	bl	8007d94 <memcpy>
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	ee18 0a10 	vmov	r0, s16
 800b3b6:	f000 f9b3 	bl	800b720 <_Bfree>
 800b3ba:	464c      	mov	r4, r9
 800b3bc:	6923      	ldr	r3, [r4, #16]
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b3c4:	6122      	str	r2, [r4, #16]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	615a      	str	r2, [r3, #20]
 800b3ca:	e7bb      	b.n	800b344 <__gethex+0x3c8>
 800b3cc:	6922      	ldr	r2, [r4, #16]
 800b3ce:	455a      	cmp	r2, fp
 800b3d0:	dd0b      	ble.n	800b3ea <__gethex+0x46e>
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f7ff fd6a 	bl	800aeae <rshift>
 800b3da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3de:	3501      	adds	r5, #1
 800b3e0:	42ab      	cmp	r3, r5
 800b3e2:	f6ff aed0 	blt.w	800b186 <__gethex+0x20a>
 800b3e6:	2701      	movs	r7, #1
 800b3e8:	e7c0      	b.n	800b36c <__gethex+0x3f0>
 800b3ea:	f016 061f 	ands.w	r6, r6, #31
 800b3ee:	d0fa      	beq.n	800b3e6 <__gethex+0x46a>
 800b3f0:	449a      	add	sl, r3
 800b3f2:	f1c6 0620 	rsb	r6, r6, #32
 800b3f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b3fa:	f000 fa47 	bl	800b88c <__hi0bits>
 800b3fe:	42b0      	cmp	r0, r6
 800b400:	dbe7      	blt.n	800b3d2 <__gethex+0x456>
 800b402:	e7f0      	b.n	800b3e6 <__gethex+0x46a>
 800b404:	080110b4 	.word	0x080110b4

0800b408 <L_shift>:
 800b408:	f1c2 0208 	rsb	r2, r2, #8
 800b40c:	0092      	lsls	r2, r2, #2
 800b40e:	b570      	push	{r4, r5, r6, lr}
 800b410:	f1c2 0620 	rsb	r6, r2, #32
 800b414:	6843      	ldr	r3, [r0, #4]
 800b416:	6804      	ldr	r4, [r0, #0]
 800b418:	fa03 f506 	lsl.w	r5, r3, r6
 800b41c:	432c      	orrs	r4, r5
 800b41e:	40d3      	lsrs	r3, r2
 800b420:	6004      	str	r4, [r0, #0]
 800b422:	f840 3f04 	str.w	r3, [r0, #4]!
 800b426:	4288      	cmp	r0, r1
 800b428:	d3f4      	bcc.n	800b414 <L_shift+0xc>
 800b42a:	bd70      	pop	{r4, r5, r6, pc}

0800b42c <__match>:
 800b42c:	b530      	push	{r4, r5, lr}
 800b42e:	6803      	ldr	r3, [r0, #0]
 800b430:	3301      	adds	r3, #1
 800b432:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b436:	b914      	cbnz	r4, 800b43e <__match+0x12>
 800b438:	6003      	str	r3, [r0, #0]
 800b43a:	2001      	movs	r0, #1
 800b43c:	bd30      	pop	{r4, r5, pc}
 800b43e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b442:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b446:	2d19      	cmp	r5, #25
 800b448:	bf98      	it	ls
 800b44a:	3220      	addls	r2, #32
 800b44c:	42a2      	cmp	r2, r4
 800b44e:	d0f0      	beq.n	800b432 <__match+0x6>
 800b450:	2000      	movs	r0, #0
 800b452:	e7f3      	b.n	800b43c <__match+0x10>

0800b454 <__hexnan>:
 800b454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b458:	680b      	ldr	r3, [r1, #0]
 800b45a:	6801      	ldr	r1, [r0, #0]
 800b45c:	115e      	asrs	r6, r3, #5
 800b45e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b462:	f013 031f 	ands.w	r3, r3, #31
 800b466:	b087      	sub	sp, #28
 800b468:	bf18      	it	ne
 800b46a:	3604      	addne	r6, #4
 800b46c:	2500      	movs	r5, #0
 800b46e:	1f37      	subs	r7, r6, #4
 800b470:	4682      	mov	sl, r0
 800b472:	4690      	mov	r8, r2
 800b474:	9301      	str	r3, [sp, #4]
 800b476:	f846 5c04 	str.w	r5, [r6, #-4]
 800b47a:	46b9      	mov	r9, r7
 800b47c:	463c      	mov	r4, r7
 800b47e:	9502      	str	r5, [sp, #8]
 800b480:	46ab      	mov	fp, r5
 800b482:	784a      	ldrb	r2, [r1, #1]
 800b484:	1c4b      	adds	r3, r1, #1
 800b486:	9303      	str	r3, [sp, #12]
 800b488:	b342      	cbz	r2, 800b4dc <__hexnan+0x88>
 800b48a:	4610      	mov	r0, r2
 800b48c:	9105      	str	r1, [sp, #20]
 800b48e:	9204      	str	r2, [sp, #16]
 800b490:	f7ff fd5f 	bl	800af52 <__hexdig_fun>
 800b494:	2800      	cmp	r0, #0
 800b496:	d14f      	bne.n	800b538 <__hexnan+0xe4>
 800b498:	9a04      	ldr	r2, [sp, #16]
 800b49a:	9905      	ldr	r1, [sp, #20]
 800b49c:	2a20      	cmp	r2, #32
 800b49e:	d818      	bhi.n	800b4d2 <__hexnan+0x7e>
 800b4a0:	9b02      	ldr	r3, [sp, #8]
 800b4a2:	459b      	cmp	fp, r3
 800b4a4:	dd13      	ble.n	800b4ce <__hexnan+0x7a>
 800b4a6:	454c      	cmp	r4, r9
 800b4a8:	d206      	bcs.n	800b4b8 <__hexnan+0x64>
 800b4aa:	2d07      	cmp	r5, #7
 800b4ac:	dc04      	bgt.n	800b4b8 <__hexnan+0x64>
 800b4ae:	462a      	mov	r2, r5
 800b4b0:	4649      	mov	r1, r9
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f7ff ffa8 	bl	800b408 <L_shift>
 800b4b8:	4544      	cmp	r4, r8
 800b4ba:	d950      	bls.n	800b55e <__hexnan+0x10a>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f1a4 0904 	sub.w	r9, r4, #4
 800b4c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4c6:	f8cd b008 	str.w	fp, [sp, #8]
 800b4ca:	464c      	mov	r4, r9
 800b4cc:	461d      	mov	r5, r3
 800b4ce:	9903      	ldr	r1, [sp, #12]
 800b4d0:	e7d7      	b.n	800b482 <__hexnan+0x2e>
 800b4d2:	2a29      	cmp	r2, #41	; 0x29
 800b4d4:	d156      	bne.n	800b584 <__hexnan+0x130>
 800b4d6:	3102      	adds	r1, #2
 800b4d8:	f8ca 1000 	str.w	r1, [sl]
 800b4dc:	f1bb 0f00 	cmp.w	fp, #0
 800b4e0:	d050      	beq.n	800b584 <__hexnan+0x130>
 800b4e2:	454c      	cmp	r4, r9
 800b4e4:	d206      	bcs.n	800b4f4 <__hexnan+0xa0>
 800b4e6:	2d07      	cmp	r5, #7
 800b4e8:	dc04      	bgt.n	800b4f4 <__hexnan+0xa0>
 800b4ea:	462a      	mov	r2, r5
 800b4ec:	4649      	mov	r1, r9
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f7ff ff8a 	bl	800b408 <L_shift>
 800b4f4:	4544      	cmp	r4, r8
 800b4f6:	d934      	bls.n	800b562 <__hexnan+0x10e>
 800b4f8:	f1a8 0204 	sub.w	r2, r8, #4
 800b4fc:	4623      	mov	r3, r4
 800b4fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800b502:	f842 1f04 	str.w	r1, [r2, #4]!
 800b506:	429f      	cmp	r7, r3
 800b508:	d2f9      	bcs.n	800b4fe <__hexnan+0xaa>
 800b50a:	1b3b      	subs	r3, r7, r4
 800b50c:	f023 0303 	bic.w	r3, r3, #3
 800b510:	3304      	adds	r3, #4
 800b512:	3401      	adds	r4, #1
 800b514:	3e03      	subs	r6, #3
 800b516:	42b4      	cmp	r4, r6
 800b518:	bf88      	it	hi
 800b51a:	2304      	movhi	r3, #4
 800b51c:	4443      	add	r3, r8
 800b51e:	2200      	movs	r2, #0
 800b520:	f843 2b04 	str.w	r2, [r3], #4
 800b524:	429f      	cmp	r7, r3
 800b526:	d2fb      	bcs.n	800b520 <__hexnan+0xcc>
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	b91b      	cbnz	r3, 800b534 <__hexnan+0xe0>
 800b52c:	4547      	cmp	r7, r8
 800b52e:	d127      	bne.n	800b580 <__hexnan+0x12c>
 800b530:	2301      	movs	r3, #1
 800b532:	603b      	str	r3, [r7, #0]
 800b534:	2005      	movs	r0, #5
 800b536:	e026      	b.n	800b586 <__hexnan+0x132>
 800b538:	3501      	adds	r5, #1
 800b53a:	2d08      	cmp	r5, #8
 800b53c:	f10b 0b01 	add.w	fp, fp, #1
 800b540:	dd06      	ble.n	800b550 <__hexnan+0xfc>
 800b542:	4544      	cmp	r4, r8
 800b544:	d9c3      	bls.n	800b4ce <__hexnan+0x7a>
 800b546:	2300      	movs	r3, #0
 800b548:	f844 3c04 	str.w	r3, [r4, #-4]
 800b54c:	2501      	movs	r5, #1
 800b54e:	3c04      	subs	r4, #4
 800b550:	6822      	ldr	r2, [r4, #0]
 800b552:	f000 000f 	and.w	r0, r0, #15
 800b556:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b55a:	6022      	str	r2, [r4, #0]
 800b55c:	e7b7      	b.n	800b4ce <__hexnan+0x7a>
 800b55e:	2508      	movs	r5, #8
 800b560:	e7b5      	b.n	800b4ce <__hexnan+0x7a>
 800b562:	9b01      	ldr	r3, [sp, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d0df      	beq.n	800b528 <__hexnan+0xd4>
 800b568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b56c:	f1c3 0320 	rsb	r3, r3, #32
 800b570:	fa22 f303 	lsr.w	r3, r2, r3
 800b574:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b578:	401a      	ands	r2, r3
 800b57a:	f846 2c04 	str.w	r2, [r6, #-4]
 800b57e:	e7d3      	b.n	800b528 <__hexnan+0xd4>
 800b580:	3f04      	subs	r7, #4
 800b582:	e7d1      	b.n	800b528 <__hexnan+0xd4>
 800b584:	2004      	movs	r0, #4
 800b586:	b007      	add	sp, #28
 800b588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b58c <_localeconv_r>:
 800b58c:	4800      	ldr	r0, [pc, #0]	; (800b590 <_localeconv_r+0x4>)
 800b58e:	4770      	bx	lr
 800b590:	20000164 	.word	0x20000164

0800b594 <__retarget_lock_init_recursive>:
 800b594:	4770      	bx	lr

0800b596 <__retarget_lock_acquire_recursive>:
 800b596:	4770      	bx	lr

0800b598 <__retarget_lock_release_recursive>:
 800b598:	4770      	bx	lr

0800b59a <__swhatbuf_r>:
 800b59a:	b570      	push	{r4, r5, r6, lr}
 800b59c:	460e      	mov	r6, r1
 800b59e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a2:	2900      	cmp	r1, #0
 800b5a4:	b096      	sub	sp, #88	; 0x58
 800b5a6:	4614      	mov	r4, r2
 800b5a8:	461d      	mov	r5, r3
 800b5aa:	da07      	bge.n	800b5bc <__swhatbuf_r+0x22>
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	602b      	str	r3, [r5, #0]
 800b5b0:	89b3      	ldrh	r3, [r6, #12]
 800b5b2:	061a      	lsls	r2, r3, #24
 800b5b4:	d410      	bmi.n	800b5d8 <__swhatbuf_r+0x3e>
 800b5b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5ba:	e00e      	b.n	800b5da <__swhatbuf_r+0x40>
 800b5bc:	466a      	mov	r2, sp
 800b5be:	f001 f8e3 	bl	800c788 <_fstat_r>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	dbf2      	blt.n	800b5ac <__swhatbuf_r+0x12>
 800b5c6:	9a01      	ldr	r2, [sp, #4]
 800b5c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b5cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b5d0:	425a      	negs	r2, r3
 800b5d2:	415a      	adcs	r2, r3
 800b5d4:	602a      	str	r2, [r5, #0]
 800b5d6:	e7ee      	b.n	800b5b6 <__swhatbuf_r+0x1c>
 800b5d8:	2340      	movs	r3, #64	; 0x40
 800b5da:	2000      	movs	r0, #0
 800b5dc:	6023      	str	r3, [r4, #0]
 800b5de:	b016      	add	sp, #88	; 0x58
 800b5e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b5e4 <__smakebuf_r>:
 800b5e4:	898b      	ldrh	r3, [r1, #12]
 800b5e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5e8:	079d      	lsls	r5, r3, #30
 800b5ea:	4606      	mov	r6, r0
 800b5ec:	460c      	mov	r4, r1
 800b5ee:	d507      	bpl.n	800b600 <__smakebuf_r+0x1c>
 800b5f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	6123      	str	r3, [r4, #16]
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	6163      	str	r3, [r4, #20]
 800b5fc:	b002      	add	sp, #8
 800b5fe:	bd70      	pop	{r4, r5, r6, pc}
 800b600:	ab01      	add	r3, sp, #4
 800b602:	466a      	mov	r2, sp
 800b604:	f7ff ffc9 	bl	800b59a <__swhatbuf_r>
 800b608:	9900      	ldr	r1, [sp, #0]
 800b60a:	4605      	mov	r5, r0
 800b60c:	4630      	mov	r0, r6
 800b60e:	f7fc fc37 	bl	8007e80 <_malloc_r>
 800b612:	b948      	cbnz	r0, 800b628 <__smakebuf_r+0x44>
 800b614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b618:	059a      	lsls	r2, r3, #22
 800b61a:	d4ef      	bmi.n	800b5fc <__smakebuf_r+0x18>
 800b61c:	f023 0303 	bic.w	r3, r3, #3
 800b620:	f043 0302 	orr.w	r3, r3, #2
 800b624:	81a3      	strh	r3, [r4, #12]
 800b626:	e7e3      	b.n	800b5f0 <__smakebuf_r+0xc>
 800b628:	4b0d      	ldr	r3, [pc, #52]	; (800b660 <__smakebuf_r+0x7c>)
 800b62a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b62c:	89a3      	ldrh	r3, [r4, #12]
 800b62e:	6020      	str	r0, [r4, #0]
 800b630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	9b00      	ldr	r3, [sp, #0]
 800b638:	6163      	str	r3, [r4, #20]
 800b63a:	9b01      	ldr	r3, [sp, #4]
 800b63c:	6120      	str	r0, [r4, #16]
 800b63e:	b15b      	cbz	r3, 800b658 <__smakebuf_r+0x74>
 800b640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b644:	4630      	mov	r0, r6
 800b646:	f001 f8b1 	bl	800c7ac <_isatty_r>
 800b64a:	b128      	cbz	r0, 800b658 <__smakebuf_r+0x74>
 800b64c:	89a3      	ldrh	r3, [r4, #12]
 800b64e:	f023 0303 	bic.w	r3, r3, #3
 800b652:	f043 0301 	orr.w	r3, r3, #1
 800b656:	81a3      	strh	r3, [r4, #12]
 800b658:	89a0      	ldrh	r0, [r4, #12]
 800b65a:	4305      	orrs	r5, r0
 800b65c:	81a5      	strh	r5, [r4, #12]
 800b65e:	e7cd      	b.n	800b5fc <__smakebuf_r+0x18>
 800b660:	0800ad0d 	.word	0x0800ad0d

0800b664 <__ascii_mbtowc>:
 800b664:	b082      	sub	sp, #8
 800b666:	b901      	cbnz	r1, 800b66a <__ascii_mbtowc+0x6>
 800b668:	a901      	add	r1, sp, #4
 800b66a:	b142      	cbz	r2, 800b67e <__ascii_mbtowc+0x1a>
 800b66c:	b14b      	cbz	r3, 800b682 <__ascii_mbtowc+0x1e>
 800b66e:	7813      	ldrb	r3, [r2, #0]
 800b670:	600b      	str	r3, [r1, #0]
 800b672:	7812      	ldrb	r2, [r2, #0]
 800b674:	1e10      	subs	r0, r2, #0
 800b676:	bf18      	it	ne
 800b678:	2001      	movne	r0, #1
 800b67a:	b002      	add	sp, #8
 800b67c:	4770      	bx	lr
 800b67e:	4610      	mov	r0, r2
 800b680:	e7fb      	b.n	800b67a <__ascii_mbtowc+0x16>
 800b682:	f06f 0001 	mvn.w	r0, #1
 800b686:	e7f8      	b.n	800b67a <__ascii_mbtowc+0x16>

0800b688 <__malloc_lock>:
 800b688:	4801      	ldr	r0, [pc, #4]	; (800b690 <__malloc_lock+0x8>)
 800b68a:	f7ff bf84 	b.w	800b596 <__retarget_lock_acquire_recursive>
 800b68e:	bf00      	nop
 800b690:	200007fc 	.word	0x200007fc

0800b694 <__malloc_unlock>:
 800b694:	4801      	ldr	r0, [pc, #4]	; (800b69c <__malloc_unlock+0x8>)
 800b696:	f7ff bf7f 	b.w	800b598 <__retarget_lock_release_recursive>
 800b69a:	bf00      	nop
 800b69c:	200007fc 	.word	0x200007fc

0800b6a0 <_Balloc>:
 800b6a0:	b570      	push	{r4, r5, r6, lr}
 800b6a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	460d      	mov	r5, r1
 800b6a8:	b976      	cbnz	r6, 800b6c8 <_Balloc+0x28>
 800b6aa:	2010      	movs	r0, #16
 800b6ac:	f7fc fb6a 	bl	8007d84 <malloc>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	6260      	str	r0, [r4, #36]	; 0x24
 800b6b4:	b920      	cbnz	r0, 800b6c0 <_Balloc+0x20>
 800b6b6:	4b18      	ldr	r3, [pc, #96]	; (800b718 <_Balloc+0x78>)
 800b6b8:	4818      	ldr	r0, [pc, #96]	; (800b71c <_Balloc+0x7c>)
 800b6ba:	2166      	movs	r1, #102	; 0x66
 800b6bc:	f001 f824 	bl	800c708 <__assert_func>
 800b6c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6c4:	6006      	str	r6, [r0, #0]
 800b6c6:	60c6      	str	r6, [r0, #12]
 800b6c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b6ca:	68f3      	ldr	r3, [r6, #12]
 800b6cc:	b183      	cbz	r3, 800b6f0 <_Balloc+0x50>
 800b6ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6d6:	b9b8      	cbnz	r0, 800b708 <_Balloc+0x68>
 800b6d8:	2101      	movs	r1, #1
 800b6da:	fa01 f605 	lsl.w	r6, r1, r5
 800b6de:	1d72      	adds	r2, r6, #5
 800b6e0:	0092      	lsls	r2, r2, #2
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f7fc fb6c 	bl	8007dc0 <_calloc_r>
 800b6e8:	b160      	cbz	r0, 800b704 <_Balloc+0x64>
 800b6ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6ee:	e00e      	b.n	800b70e <_Balloc+0x6e>
 800b6f0:	2221      	movs	r2, #33	; 0x21
 800b6f2:	2104      	movs	r1, #4
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f7fc fb63 	bl	8007dc0 <_calloc_r>
 800b6fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6fc:	60f0      	str	r0, [r6, #12]
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1e4      	bne.n	800b6ce <_Balloc+0x2e>
 800b704:	2000      	movs	r0, #0
 800b706:	bd70      	pop	{r4, r5, r6, pc}
 800b708:	6802      	ldr	r2, [r0, #0]
 800b70a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b70e:	2300      	movs	r3, #0
 800b710:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b714:	e7f7      	b.n	800b706 <_Balloc+0x66>
 800b716:	bf00      	nop
 800b718:	0801103e 	.word	0x0801103e
 800b71c:	080111a8 	.word	0x080111a8

0800b720 <_Bfree>:
 800b720:	b570      	push	{r4, r5, r6, lr}
 800b722:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b724:	4605      	mov	r5, r0
 800b726:	460c      	mov	r4, r1
 800b728:	b976      	cbnz	r6, 800b748 <_Bfree+0x28>
 800b72a:	2010      	movs	r0, #16
 800b72c:	f7fc fb2a 	bl	8007d84 <malloc>
 800b730:	4602      	mov	r2, r0
 800b732:	6268      	str	r0, [r5, #36]	; 0x24
 800b734:	b920      	cbnz	r0, 800b740 <_Bfree+0x20>
 800b736:	4b09      	ldr	r3, [pc, #36]	; (800b75c <_Bfree+0x3c>)
 800b738:	4809      	ldr	r0, [pc, #36]	; (800b760 <_Bfree+0x40>)
 800b73a:	218a      	movs	r1, #138	; 0x8a
 800b73c:	f000 ffe4 	bl	800c708 <__assert_func>
 800b740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b744:	6006      	str	r6, [r0, #0]
 800b746:	60c6      	str	r6, [r0, #12]
 800b748:	b13c      	cbz	r4, 800b75a <_Bfree+0x3a>
 800b74a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b74c:	6862      	ldr	r2, [r4, #4]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b754:	6021      	str	r1, [r4, #0]
 800b756:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b75a:	bd70      	pop	{r4, r5, r6, pc}
 800b75c:	0801103e 	.word	0x0801103e
 800b760:	080111a8 	.word	0x080111a8

0800b764 <__multadd>:
 800b764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b768:	690e      	ldr	r6, [r1, #16]
 800b76a:	4607      	mov	r7, r0
 800b76c:	4698      	mov	r8, r3
 800b76e:	460c      	mov	r4, r1
 800b770:	f101 0014 	add.w	r0, r1, #20
 800b774:	2300      	movs	r3, #0
 800b776:	6805      	ldr	r5, [r0, #0]
 800b778:	b2a9      	uxth	r1, r5
 800b77a:	fb02 8101 	mla	r1, r2, r1, r8
 800b77e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b782:	0c2d      	lsrs	r5, r5, #16
 800b784:	fb02 c505 	mla	r5, r2, r5, ip
 800b788:	b289      	uxth	r1, r1
 800b78a:	3301      	adds	r3, #1
 800b78c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b790:	429e      	cmp	r6, r3
 800b792:	f840 1b04 	str.w	r1, [r0], #4
 800b796:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b79a:	dcec      	bgt.n	800b776 <__multadd+0x12>
 800b79c:	f1b8 0f00 	cmp.w	r8, #0
 800b7a0:	d022      	beq.n	800b7e8 <__multadd+0x84>
 800b7a2:	68a3      	ldr	r3, [r4, #8]
 800b7a4:	42b3      	cmp	r3, r6
 800b7a6:	dc19      	bgt.n	800b7dc <__multadd+0x78>
 800b7a8:	6861      	ldr	r1, [r4, #4]
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	3101      	adds	r1, #1
 800b7ae:	f7ff ff77 	bl	800b6a0 <_Balloc>
 800b7b2:	4605      	mov	r5, r0
 800b7b4:	b928      	cbnz	r0, 800b7c2 <__multadd+0x5e>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	4b0d      	ldr	r3, [pc, #52]	; (800b7f0 <__multadd+0x8c>)
 800b7ba:	480e      	ldr	r0, [pc, #56]	; (800b7f4 <__multadd+0x90>)
 800b7bc:	21b5      	movs	r1, #181	; 0xb5
 800b7be:	f000 ffa3 	bl	800c708 <__assert_func>
 800b7c2:	6922      	ldr	r2, [r4, #16]
 800b7c4:	3202      	adds	r2, #2
 800b7c6:	f104 010c 	add.w	r1, r4, #12
 800b7ca:	0092      	lsls	r2, r2, #2
 800b7cc:	300c      	adds	r0, #12
 800b7ce:	f7fc fae1 	bl	8007d94 <memcpy>
 800b7d2:	4621      	mov	r1, r4
 800b7d4:	4638      	mov	r0, r7
 800b7d6:	f7ff ffa3 	bl	800b720 <_Bfree>
 800b7da:	462c      	mov	r4, r5
 800b7dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b7e0:	3601      	adds	r6, #1
 800b7e2:	f8c3 8014 	str.w	r8, [r3, #20]
 800b7e6:	6126      	str	r6, [r4, #16]
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7ee:	bf00      	nop
 800b7f0:	080110b4 	.word	0x080110b4
 800b7f4:	080111a8 	.word	0x080111a8

0800b7f8 <__s2b>:
 800b7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7fc:	460c      	mov	r4, r1
 800b7fe:	4615      	mov	r5, r2
 800b800:	461f      	mov	r7, r3
 800b802:	2209      	movs	r2, #9
 800b804:	3308      	adds	r3, #8
 800b806:	4606      	mov	r6, r0
 800b808:	fb93 f3f2 	sdiv	r3, r3, r2
 800b80c:	2100      	movs	r1, #0
 800b80e:	2201      	movs	r2, #1
 800b810:	429a      	cmp	r2, r3
 800b812:	db09      	blt.n	800b828 <__s2b+0x30>
 800b814:	4630      	mov	r0, r6
 800b816:	f7ff ff43 	bl	800b6a0 <_Balloc>
 800b81a:	b940      	cbnz	r0, 800b82e <__s2b+0x36>
 800b81c:	4602      	mov	r2, r0
 800b81e:	4b19      	ldr	r3, [pc, #100]	; (800b884 <__s2b+0x8c>)
 800b820:	4819      	ldr	r0, [pc, #100]	; (800b888 <__s2b+0x90>)
 800b822:	21ce      	movs	r1, #206	; 0xce
 800b824:	f000 ff70 	bl	800c708 <__assert_func>
 800b828:	0052      	lsls	r2, r2, #1
 800b82a:	3101      	adds	r1, #1
 800b82c:	e7f0      	b.n	800b810 <__s2b+0x18>
 800b82e:	9b08      	ldr	r3, [sp, #32]
 800b830:	6143      	str	r3, [r0, #20]
 800b832:	2d09      	cmp	r5, #9
 800b834:	f04f 0301 	mov.w	r3, #1
 800b838:	6103      	str	r3, [r0, #16]
 800b83a:	dd16      	ble.n	800b86a <__s2b+0x72>
 800b83c:	f104 0909 	add.w	r9, r4, #9
 800b840:	46c8      	mov	r8, r9
 800b842:	442c      	add	r4, r5
 800b844:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b848:	4601      	mov	r1, r0
 800b84a:	3b30      	subs	r3, #48	; 0x30
 800b84c:	220a      	movs	r2, #10
 800b84e:	4630      	mov	r0, r6
 800b850:	f7ff ff88 	bl	800b764 <__multadd>
 800b854:	45a0      	cmp	r8, r4
 800b856:	d1f5      	bne.n	800b844 <__s2b+0x4c>
 800b858:	f1a5 0408 	sub.w	r4, r5, #8
 800b85c:	444c      	add	r4, r9
 800b85e:	1b2d      	subs	r5, r5, r4
 800b860:	1963      	adds	r3, r4, r5
 800b862:	42bb      	cmp	r3, r7
 800b864:	db04      	blt.n	800b870 <__s2b+0x78>
 800b866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b86a:	340a      	adds	r4, #10
 800b86c:	2509      	movs	r5, #9
 800b86e:	e7f6      	b.n	800b85e <__s2b+0x66>
 800b870:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b874:	4601      	mov	r1, r0
 800b876:	3b30      	subs	r3, #48	; 0x30
 800b878:	220a      	movs	r2, #10
 800b87a:	4630      	mov	r0, r6
 800b87c:	f7ff ff72 	bl	800b764 <__multadd>
 800b880:	e7ee      	b.n	800b860 <__s2b+0x68>
 800b882:	bf00      	nop
 800b884:	080110b4 	.word	0x080110b4
 800b888:	080111a8 	.word	0x080111a8

0800b88c <__hi0bits>:
 800b88c:	0c03      	lsrs	r3, r0, #16
 800b88e:	041b      	lsls	r3, r3, #16
 800b890:	b9d3      	cbnz	r3, 800b8c8 <__hi0bits+0x3c>
 800b892:	0400      	lsls	r0, r0, #16
 800b894:	2310      	movs	r3, #16
 800b896:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b89a:	bf04      	itt	eq
 800b89c:	0200      	lsleq	r0, r0, #8
 800b89e:	3308      	addeq	r3, #8
 800b8a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b8a4:	bf04      	itt	eq
 800b8a6:	0100      	lsleq	r0, r0, #4
 800b8a8:	3304      	addeq	r3, #4
 800b8aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b8ae:	bf04      	itt	eq
 800b8b0:	0080      	lsleq	r0, r0, #2
 800b8b2:	3302      	addeq	r3, #2
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	db05      	blt.n	800b8c4 <__hi0bits+0x38>
 800b8b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b8bc:	f103 0301 	add.w	r3, r3, #1
 800b8c0:	bf08      	it	eq
 800b8c2:	2320      	moveq	r3, #32
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	4770      	bx	lr
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	e7e4      	b.n	800b896 <__hi0bits+0xa>

0800b8cc <__lo0bits>:
 800b8cc:	6803      	ldr	r3, [r0, #0]
 800b8ce:	f013 0207 	ands.w	r2, r3, #7
 800b8d2:	4601      	mov	r1, r0
 800b8d4:	d00b      	beq.n	800b8ee <__lo0bits+0x22>
 800b8d6:	07da      	lsls	r2, r3, #31
 800b8d8:	d424      	bmi.n	800b924 <__lo0bits+0x58>
 800b8da:	0798      	lsls	r0, r3, #30
 800b8dc:	bf49      	itett	mi
 800b8de:	085b      	lsrmi	r3, r3, #1
 800b8e0:	089b      	lsrpl	r3, r3, #2
 800b8e2:	2001      	movmi	r0, #1
 800b8e4:	600b      	strmi	r3, [r1, #0]
 800b8e6:	bf5c      	itt	pl
 800b8e8:	600b      	strpl	r3, [r1, #0]
 800b8ea:	2002      	movpl	r0, #2
 800b8ec:	4770      	bx	lr
 800b8ee:	b298      	uxth	r0, r3
 800b8f0:	b9b0      	cbnz	r0, 800b920 <__lo0bits+0x54>
 800b8f2:	0c1b      	lsrs	r3, r3, #16
 800b8f4:	2010      	movs	r0, #16
 800b8f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b8fa:	bf04      	itt	eq
 800b8fc:	0a1b      	lsreq	r3, r3, #8
 800b8fe:	3008      	addeq	r0, #8
 800b900:	071a      	lsls	r2, r3, #28
 800b902:	bf04      	itt	eq
 800b904:	091b      	lsreq	r3, r3, #4
 800b906:	3004      	addeq	r0, #4
 800b908:	079a      	lsls	r2, r3, #30
 800b90a:	bf04      	itt	eq
 800b90c:	089b      	lsreq	r3, r3, #2
 800b90e:	3002      	addeq	r0, #2
 800b910:	07da      	lsls	r2, r3, #31
 800b912:	d403      	bmi.n	800b91c <__lo0bits+0x50>
 800b914:	085b      	lsrs	r3, r3, #1
 800b916:	f100 0001 	add.w	r0, r0, #1
 800b91a:	d005      	beq.n	800b928 <__lo0bits+0x5c>
 800b91c:	600b      	str	r3, [r1, #0]
 800b91e:	4770      	bx	lr
 800b920:	4610      	mov	r0, r2
 800b922:	e7e8      	b.n	800b8f6 <__lo0bits+0x2a>
 800b924:	2000      	movs	r0, #0
 800b926:	4770      	bx	lr
 800b928:	2020      	movs	r0, #32
 800b92a:	4770      	bx	lr

0800b92c <__i2b>:
 800b92c:	b510      	push	{r4, lr}
 800b92e:	460c      	mov	r4, r1
 800b930:	2101      	movs	r1, #1
 800b932:	f7ff feb5 	bl	800b6a0 <_Balloc>
 800b936:	4602      	mov	r2, r0
 800b938:	b928      	cbnz	r0, 800b946 <__i2b+0x1a>
 800b93a:	4b05      	ldr	r3, [pc, #20]	; (800b950 <__i2b+0x24>)
 800b93c:	4805      	ldr	r0, [pc, #20]	; (800b954 <__i2b+0x28>)
 800b93e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b942:	f000 fee1 	bl	800c708 <__assert_func>
 800b946:	2301      	movs	r3, #1
 800b948:	6144      	str	r4, [r0, #20]
 800b94a:	6103      	str	r3, [r0, #16]
 800b94c:	bd10      	pop	{r4, pc}
 800b94e:	bf00      	nop
 800b950:	080110b4 	.word	0x080110b4
 800b954:	080111a8 	.word	0x080111a8

0800b958 <__multiply>:
 800b958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95c:	4614      	mov	r4, r2
 800b95e:	690a      	ldr	r2, [r1, #16]
 800b960:	6923      	ldr	r3, [r4, #16]
 800b962:	429a      	cmp	r2, r3
 800b964:	bfb8      	it	lt
 800b966:	460b      	movlt	r3, r1
 800b968:	460d      	mov	r5, r1
 800b96a:	bfbc      	itt	lt
 800b96c:	4625      	movlt	r5, r4
 800b96e:	461c      	movlt	r4, r3
 800b970:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b974:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b978:	68ab      	ldr	r3, [r5, #8]
 800b97a:	6869      	ldr	r1, [r5, #4]
 800b97c:	eb0a 0709 	add.w	r7, sl, r9
 800b980:	42bb      	cmp	r3, r7
 800b982:	b085      	sub	sp, #20
 800b984:	bfb8      	it	lt
 800b986:	3101      	addlt	r1, #1
 800b988:	f7ff fe8a 	bl	800b6a0 <_Balloc>
 800b98c:	b930      	cbnz	r0, 800b99c <__multiply+0x44>
 800b98e:	4602      	mov	r2, r0
 800b990:	4b42      	ldr	r3, [pc, #264]	; (800ba9c <__multiply+0x144>)
 800b992:	4843      	ldr	r0, [pc, #268]	; (800baa0 <__multiply+0x148>)
 800b994:	f240 115d 	movw	r1, #349	; 0x15d
 800b998:	f000 feb6 	bl	800c708 <__assert_func>
 800b99c:	f100 0614 	add.w	r6, r0, #20
 800b9a0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b9a4:	4633      	mov	r3, r6
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	4543      	cmp	r3, r8
 800b9aa:	d31e      	bcc.n	800b9ea <__multiply+0x92>
 800b9ac:	f105 0c14 	add.w	ip, r5, #20
 800b9b0:	f104 0314 	add.w	r3, r4, #20
 800b9b4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b9b8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b9bc:	9202      	str	r2, [sp, #8]
 800b9be:	ebac 0205 	sub.w	r2, ip, r5
 800b9c2:	3a15      	subs	r2, #21
 800b9c4:	f022 0203 	bic.w	r2, r2, #3
 800b9c8:	3204      	adds	r2, #4
 800b9ca:	f105 0115 	add.w	r1, r5, #21
 800b9ce:	458c      	cmp	ip, r1
 800b9d0:	bf38      	it	cc
 800b9d2:	2204      	movcc	r2, #4
 800b9d4:	9201      	str	r2, [sp, #4]
 800b9d6:	9a02      	ldr	r2, [sp, #8]
 800b9d8:	9303      	str	r3, [sp, #12]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d808      	bhi.n	800b9f0 <__multiply+0x98>
 800b9de:	2f00      	cmp	r7, #0
 800b9e0:	dc55      	bgt.n	800ba8e <__multiply+0x136>
 800b9e2:	6107      	str	r7, [r0, #16]
 800b9e4:	b005      	add	sp, #20
 800b9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ea:	f843 2b04 	str.w	r2, [r3], #4
 800b9ee:	e7db      	b.n	800b9a8 <__multiply+0x50>
 800b9f0:	f8b3 a000 	ldrh.w	sl, [r3]
 800b9f4:	f1ba 0f00 	cmp.w	sl, #0
 800b9f8:	d020      	beq.n	800ba3c <__multiply+0xe4>
 800b9fa:	f105 0e14 	add.w	lr, r5, #20
 800b9fe:	46b1      	mov	r9, r6
 800ba00:	2200      	movs	r2, #0
 800ba02:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ba06:	f8d9 b000 	ldr.w	fp, [r9]
 800ba0a:	b2a1      	uxth	r1, r4
 800ba0c:	fa1f fb8b 	uxth.w	fp, fp
 800ba10:	fb0a b101 	mla	r1, sl, r1, fp
 800ba14:	4411      	add	r1, r2
 800ba16:	f8d9 2000 	ldr.w	r2, [r9]
 800ba1a:	0c24      	lsrs	r4, r4, #16
 800ba1c:	0c12      	lsrs	r2, r2, #16
 800ba1e:	fb0a 2404 	mla	r4, sl, r4, r2
 800ba22:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ba26:	b289      	uxth	r1, r1
 800ba28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ba2c:	45f4      	cmp	ip, lr
 800ba2e:	f849 1b04 	str.w	r1, [r9], #4
 800ba32:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ba36:	d8e4      	bhi.n	800ba02 <__multiply+0xaa>
 800ba38:	9901      	ldr	r1, [sp, #4]
 800ba3a:	5072      	str	r2, [r6, r1]
 800ba3c:	9a03      	ldr	r2, [sp, #12]
 800ba3e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba42:	3304      	adds	r3, #4
 800ba44:	f1b9 0f00 	cmp.w	r9, #0
 800ba48:	d01f      	beq.n	800ba8a <__multiply+0x132>
 800ba4a:	6834      	ldr	r4, [r6, #0]
 800ba4c:	f105 0114 	add.w	r1, r5, #20
 800ba50:	46b6      	mov	lr, r6
 800ba52:	f04f 0a00 	mov.w	sl, #0
 800ba56:	880a      	ldrh	r2, [r1, #0]
 800ba58:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ba5c:	fb09 b202 	mla	r2, r9, r2, fp
 800ba60:	4492      	add	sl, r2
 800ba62:	b2a4      	uxth	r4, r4
 800ba64:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ba68:	f84e 4b04 	str.w	r4, [lr], #4
 800ba6c:	f851 4b04 	ldr.w	r4, [r1], #4
 800ba70:	f8be 2000 	ldrh.w	r2, [lr]
 800ba74:	0c24      	lsrs	r4, r4, #16
 800ba76:	fb09 2404 	mla	r4, r9, r4, r2
 800ba7a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ba7e:	458c      	cmp	ip, r1
 800ba80:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ba84:	d8e7      	bhi.n	800ba56 <__multiply+0xfe>
 800ba86:	9a01      	ldr	r2, [sp, #4]
 800ba88:	50b4      	str	r4, [r6, r2]
 800ba8a:	3604      	adds	r6, #4
 800ba8c:	e7a3      	b.n	800b9d6 <__multiply+0x7e>
 800ba8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1a5      	bne.n	800b9e2 <__multiply+0x8a>
 800ba96:	3f01      	subs	r7, #1
 800ba98:	e7a1      	b.n	800b9de <__multiply+0x86>
 800ba9a:	bf00      	nop
 800ba9c:	080110b4 	.word	0x080110b4
 800baa0:	080111a8 	.word	0x080111a8

0800baa4 <__pow5mult>:
 800baa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baa8:	4615      	mov	r5, r2
 800baaa:	f012 0203 	ands.w	r2, r2, #3
 800baae:	4606      	mov	r6, r0
 800bab0:	460f      	mov	r7, r1
 800bab2:	d007      	beq.n	800bac4 <__pow5mult+0x20>
 800bab4:	4c25      	ldr	r4, [pc, #148]	; (800bb4c <__pow5mult+0xa8>)
 800bab6:	3a01      	subs	r2, #1
 800bab8:	2300      	movs	r3, #0
 800baba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800babe:	f7ff fe51 	bl	800b764 <__multadd>
 800bac2:	4607      	mov	r7, r0
 800bac4:	10ad      	asrs	r5, r5, #2
 800bac6:	d03d      	beq.n	800bb44 <__pow5mult+0xa0>
 800bac8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800baca:	b97c      	cbnz	r4, 800baec <__pow5mult+0x48>
 800bacc:	2010      	movs	r0, #16
 800bace:	f7fc f959 	bl	8007d84 <malloc>
 800bad2:	4602      	mov	r2, r0
 800bad4:	6270      	str	r0, [r6, #36]	; 0x24
 800bad6:	b928      	cbnz	r0, 800bae4 <__pow5mult+0x40>
 800bad8:	4b1d      	ldr	r3, [pc, #116]	; (800bb50 <__pow5mult+0xac>)
 800bada:	481e      	ldr	r0, [pc, #120]	; (800bb54 <__pow5mult+0xb0>)
 800badc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bae0:	f000 fe12 	bl	800c708 <__assert_func>
 800bae4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bae8:	6004      	str	r4, [r0, #0]
 800baea:	60c4      	str	r4, [r0, #12]
 800baec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800baf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800baf4:	b94c      	cbnz	r4, 800bb0a <__pow5mult+0x66>
 800baf6:	f240 2171 	movw	r1, #625	; 0x271
 800bafa:	4630      	mov	r0, r6
 800bafc:	f7ff ff16 	bl	800b92c <__i2b>
 800bb00:	2300      	movs	r3, #0
 800bb02:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb06:	4604      	mov	r4, r0
 800bb08:	6003      	str	r3, [r0, #0]
 800bb0a:	f04f 0900 	mov.w	r9, #0
 800bb0e:	07eb      	lsls	r3, r5, #31
 800bb10:	d50a      	bpl.n	800bb28 <__pow5mult+0x84>
 800bb12:	4639      	mov	r1, r7
 800bb14:	4622      	mov	r2, r4
 800bb16:	4630      	mov	r0, r6
 800bb18:	f7ff ff1e 	bl	800b958 <__multiply>
 800bb1c:	4639      	mov	r1, r7
 800bb1e:	4680      	mov	r8, r0
 800bb20:	4630      	mov	r0, r6
 800bb22:	f7ff fdfd 	bl	800b720 <_Bfree>
 800bb26:	4647      	mov	r7, r8
 800bb28:	106d      	asrs	r5, r5, #1
 800bb2a:	d00b      	beq.n	800bb44 <__pow5mult+0xa0>
 800bb2c:	6820      	ldr	r0, [r4, #0]
 800bb2e:	b938      	cbnz	r0, 800bb40 <__pow5mult+0x9c>
 800bb30:	4622      	mov	r2, r4
 800bb32:	4621      	mov	r1, r4
 800bb34:	4630      	mov	r0, r6
 800bb36:	f7ff ff0f 	bl	800b958 <__multiply>
 800bb3a:	6020      	str	r0, [r4, #0]
 800bb3c:	f8c0 9000 	str.w	r9, [r0]
 800bb40:	4604      	mov	r4, r0
 800bb42:	e7e4      	b.n	800bb0e <__pow5mult+0x6a>
 800bb44:	4638      	mov	r0, r7
 800bb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb4a:	bf00      	nop
 800bb4c:	080112f8 	.word	0x080112f8
 800bb50:	0801103e 	.word	0x0801103e
 800bb54:	080111a8 	.word	0x080111a8

0800bb58 <__lshift>:
 800bb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb5c:	460c      	mov	r4, r1
 800bb5e:	6849      	ldr	r1, [r1, #4]
 800bb60:	6923      	ldr	r3, [r4, #16]
 800bb62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb66:	68a3      	ldr	r3, [r4, #8]
 800bb68:	4607      	mov	r7, r0
 800bb6a:	4691      	mov	r9, r2
 800bb6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb70:	f108 0601 	add.w	r6, r8, #1
 800bb74:	42b3      	cmp	r3, r6
 800bb76:	db0b      	blt.n	800bb90 <__lshift+0x38>
 800bb78:	4638      	mov	r0, r7
 800bb7a:	f7ff fd91 	bl	800b6a0 <_Balloc>
 800bb7e:	4605      	mov	r5, r0
 800bb80:	b948      	cbnz	r0, 800bb96 <__lshift+0x3e>
 800bb82:	4602      	mov	r2, r0
 800bb84:	4b28      	ldr	r3, [pc, #160]	; (800bc28 <__lshift+0xd0>)
 800bb86:	4829      	ldr	r0, [pc, #164]	; (800bc2c <__lshift+0xd4>)
 800bb88:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bb8c:	f000 fdbc 	bl	800c708 <__assert_func>
 800bb90:	3101      	adds	r1, #1
 800bb92:	005b      	lsls	r3, r3, #1
 800bb94:	e7ee      	b.n	800bb74 <__lshift+0x1c>
 800bb96:	2300      	movs	r3, #0
 800bb98:	f100 0114 	add.w	r1, r0, #20
 800bb9c:	f100 0210 	add.w	r2, r0, #16
 800bba0:	4618      	mov	r0, r3
 800bba2:	4553      	cmp	r3, sl
 800bba4:	db33      	blt.n	800bc0e <__lshift+0xb6>
 800bba6:	6920      	ldr	r0, [r4, #16]
 800bba8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbac:	f104 0314 	add.w	r3, r4, #20
 800bbb0:	f019 091f 	ands.w	r9, r9, #31
 800bbb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bbbc:	d02b      	beq.n	800bc16 <__lshift+0xbe>
 800bbbe:	f1c9 0e20 	rsb	lr, r9, #32
 800bbc2:	468a      	mov	sl, r1
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	6818      	ldr	r0, [r3, #0]
 800bbc8:	fa00 f009 	lsl.w	r0, r0, r9
 800bbcc:	4302      	orrs	r2, r0
 800bbce:	f84a 2b04 	str.w	r2, [sl], #4
 800bbd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbd6:	459c      	cmp	ip, r3
 800bbd8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bbdc:	d8f3      	bhi.n	800bbc6 <__lshift+0x6e>
 800bbde:	ebac 0304 	sub.w	r3, ip, r4
 800bbe2:	3b15      	subs	r3, #21
 800bbe4:	f023 0303 	bic.w	r3, r3, #3
 800bbe8:	3304      	adds	r3, #4
 800bbea:	f104 0015 	add.w	r0, r4, #21
 800bbee:	4584      	cmp	ip, r0
 800bbf0:	bf38      	it	cc
 800bbf2:	2304      	movcc	r3, #4
 800bbf4:	50ca      	str	r2, [r1, r3]
 800bbf6:	b10a      	cbz	r2, 800bbfc <__lshift+0xa4>
 800bbf8:	f108 0602 	add.w	r6, r8, #2
 800bbfc:	3e01      	subs	r6, #1
 800bbfe:	4638      	mov	r0, r7
 800bc00:	612e      	str	r6, [r5, #16]
 800bc02:	4621      	mov	r1, r4
 800bc04:	f7ff fd8c 	bl	800b720 <_Bfree>
 800bc08:	4628      	mov	r0, r5
 800bc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc12:	3301      	adds	r3, #1
 800bc14:	e7c5      	b.n	800bba2 <__lshift+0x4a>
 800bc16:	3904      	subs	r1, #4
 800bc18:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc20:	459c      	cmp	ip, r3
 800bc22:	d8f9      	bhi.n	800bc18 <__lshift+0xc0>
 800bc24:	e7ea      	b.n	800bbfc <__lshift+0xa4>
 800bc26:	bf00      	nop
 800bc28:	080110b4 	.word	0x080110b4
 800bc2c:	080111a8 	.word	0x080111a8

0800bc30 <__mcmp>:
 800bc30:	b530      	push	{r4, r5, lr}
 800bc32:	6902      	ldr	r2, [r0, #16]
 800bc34:	690c      	ldr	r4, [r1, #16]
 800bc36:	1b12      	subs	r2, r2, r4
 800bc38:	d10e      	bne.n	800bc58 <__mcmp+0x28>
 800bc3a:	f100 0314 	add.w	r3, r0, #20
 800bc3e:	3114      	adds	r1, #20
 800bc40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc50:	42a5      	cmp	r5, r4
 800bc52:	d003      	beq.n	800bc5c <__mcmp+0x2c>
 800bc54:	d305      	bcc.n	800bc62 <__mcmp+0x32>
 800bc56:	2201      	movs	r2, #1
 800bc58:	4610      	mov	r0, r2
 800bc5a:	bd30      	pop	{r4, r5, pc}
 800bc5c:	4283      	cmp	r3, r0
 800bc5e:	d3f3      	bcc.n	800bc48 <__mcmp+0x18>
 800bc60:	e7fa      	b.n	800bc58 <__mcmp+0x28>
 800bc62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc66:	e7f7      	b.n	800bc58 <__mcmp+0x28>

0800bc68 <__mdiff>:
 800bc68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	4606      	mov	r6, r0
 800bc70:	4611      	mov	r1, r2
 800bc72:	4620      	mov	r0, r4
 800bc74:	4617      	mov	r7, r2
 800bc76:	f7ff ffdb 	bl	800bc30 <__mcmp>
 800bc7a:	1e05      	subs	r5, r0, #0
 800bc7c:	d110      	bne.n	800bca0 <__mdiff+0x38>
 800bc7e:	4629      	mov	r1, r5
 800bc80:	4630      	mov	r0, r6
 800bc82:	f7ff fd0d 	bl	800b6a0 <_Balloc>
 800bc86:	b930      	cbnz	r0, 800bc96 <__mdiff+0x2e>
 800bc88:	4b39      	ldr	r3, [pc, #228]	; (800bd70 <__mdiff+0x108>)
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	f240 2132 	movw	r1, #562	; 0x232
 800bc90:	4838      	ldr	r0, [pc, #224]	; (800bd74 <__mdiff+0x10c>)
 800bc92:	f000 fd39 	bl	800c708 <__assert_func>
 800bc96:	2301      	movs	r3, #1
 800bc98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca0:	bfa4      	itt	ge
 800bca2:	463b      	movge	r3, r7
 800bca4:	4627      	movge	r7, r4
 800bca6:	4630      	mov	r0, r6
 800bca8:	6879      	ldr	r1, [r7, #4]
 800bcaa:	bfa6      	itte	ge
 800bcac:	461c      	movge	r4, r3
 800bcae:	2500      	movge	r5, #0
 800bcb0:	2501      	movlt	r5, #1
 800bcb2:	f7ff fcf5 	bl	800b6a0 <_Balloc>
 800bcb6:	b920      	cbnz	r0, 800bcc2 <__mdiff+0x5a>
 800bcb8:	4b2d      	ldr	r3, [pc, #180]	; (800bd70 <__mdiff+0x108>)
 800bcba:	4602      	mov	r2, r0
 800bcbc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bcc0:	e7e6      	b.n	800bc90 <__mdiff+0x28>
 800bcc2:	693e      	ldr	r6, [r7, #16]
 800bcc4:	60c5      	str	r5, [r0, #12]
 800bcc6:	6925      	ldr	r5, [r4, #16]
 800bcc8:	f107 0114 	add.w	r1, r7, #20
 800bccc:	f104 0914 	add.w	r9, r4, #20
 800bcd0:	f100 0e14 	add.w	lr, r0, #20
 800bcd4:	f107 0210 	add.w	r2, r7, #16
 800bcd8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bcdc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bce0:	46f2      	mov	sl, lr
 800bce2:	2700      	movs	r7, #0
 800bce4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bce8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bcec:	fa1f f883 	uxth.w	r8, r3
 800bcf0:	fa17 f78b 	uxtah	r7, r7, fp
 800bcf4:	0c1b      	lsrs	r3, r3, #16
 800bcf6:	eba7 0808 	sub.w	r8, r7, r8
 800bcfa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bcfe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd02:	fa1f f888 	uxth.w	r8, r8
 800bd06:	141f      	asrs	r7, r3, #16
 800bd08:	454d      	cmp	r5, r9
 800bd0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd0e:	f84a 3b04 	str.w	r3, [sl], #4
 800bd12:	d8e7      	bhi.n	800bce4 <__mdiff+0x7c>
 800bd14:	1b2b      	subs	r3, r5, r4
 800bd16:	3b15      	subs	r3, #21
 800bd18:	f023 0303 	bic.w	r3, r3, #3
 800bd1c:	3304      	adds	r3, #4
 800bd1e:	3415      	adds	r4, #21
 800bd20:	42a5      	cmp	r5, r4
 800bd22:	bf38      	it	cc
 800bd24:	2304      	movcc	r3, #4
 800bd26:	4419      	add	r1, r3
 800bd28:	4473      	add	r3, lr
 800bd2a:	469e      	mov	lr, r3
 800bd2c:	460d      	mov	r5, r1
 800bd2e:	4565      	cmp	r5, ip
 800bd30:	d30e      	bcc.n	800bd50 <__mdiff+0xe8>
 800bd32:	f10c 0203 	add.w	r2, ip, #3
 800bd36:	1a52      	subs	r2, r2, r1
 800bd38:	f022 0203 	bic.w	r2, r2, #3
 800bd3c:	3903      	subs	r1, #3
 800bd3e:	458c      	cmp	ip, r1
 800bd40:	bf38      	it	cc
 800bd42:	2200      	movcc	r2, #0
 800bd44:	441a      	add	r2, r3
 800bd46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bd4a:	b17b      	cbz	r3, 800bd6c <__mdiff+0x104>
 800bd4c:	6106      	str	r6, [r0, #16]
 800bd4e:	e7a5      	b.n	800bc9c <__mdiff+0x34>
 800bd50:	f855 8b04 	ldr.w	r8, [r5], #4
 800bd54:	fa17 f488 	uxtah	r4, r7, r8
 800bd58:	1422      	asrs	r2, r4, #16
 800bd5a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bd5e:	b2a4      	uxth	r4, r4
 800bd60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bd64:	f84e 4b04 	str.w	r4, [lr], #4
 800bd68:	1417      	asrs	r7, r2, #16
 800bd6a:	e7e0      	b.n	800bd2e <__mdiff+0xc6>
 800bd6c:	3e01      	subs	r6, #1
 800bd6e:	e7ea      	b.n	800bd46 <__mdiff+0xde>
 800bd70:	080110b4 	.word	0x080110b4
 800bd74:	080111a8 	.word	0x080111a8

0800bd78 <__ulp>:
 800bd78:	b082      	sub	sp, #8
 800bd7a:	ed8d 0b00 	vstr	d0, [sp]
 800bd7e:	9b01      	ldr	r3, [sp, #4]
 800bd80:	4912      	ldr	r1, [pc, #72]	; (800bdcc <__ulp+0x54>)
 800bd82:	4019      	ands	r1, r3
 800bd84:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bd88:	2900      	cmp	r1, #0
 800bd8a:	dd05      	ble.n	800bd98 <__ulp+0x20>
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	ec43 2b10 	vmov	d0, r2, r3
 800bd94:	b002      	add	sp, #8
 800bd96:	4770      	bx	lr
 800bd98:	4249      	negs	r1, r1
 800bd9a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bd9e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bda2:	f04f 0200 	mov.w	r2, #0
 800bda6:	f04f 0300 	mov.w	r3, #0
 800bdaa:	da04      	bge.n	800bdb6 <__ulp+0x3e>
 800bdac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bdb0:	fa41 f300 	asr.w	r3, r1, r0
 800bdb4:	e7ec      	b.n	800bd90 <__ulp+0x18>
 800bdb6:	f1a0 0114 	sub.w	r1, r0, #20
 800bdba:	291e      	cmp	r1, #30
 800bdbc:	bfda      	itte	le
 800bdbe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bdc2:	fa20 f101 	lsrle.w	r1, r0, r1
 800bdc6:	2101      	movgt	r1, #1
 800bdc8:	460a      	mov	r2, r1
 800bdca:	e7e1      	b.n	800bd90 <__ulp+0x18>
 800bdcc:	7ff00000 	.word	0x7ff00000

0800bdd0 <__b2d>:
 800bdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd2:	6905      	ldr	r5, [r0, #16]
 800bdd4:	f100 0714 	add.w	r7, r0, #20
 800bdd8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bddc:	1f2e      	subs	r6, r5, #4
 800bdde:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bde2:	4620      	mov	r0, r4
 800bde4:	f7ff fd52 	bl	800b88c <__hi0bits>
 800bde8:	f1c0 0320 	rsb	r3, r0, #32
 800bdec:	280a      	cmp	r0, #10
 800bdee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800be6c <__b2d+0x9c>
 800bdf2:	600b      	str	r3, [r1, #0]
 800bdf4:	dc14      	bgt.n	800be20 <__b2d+0x50>
 800bdf6:	f1c0 0e0b 	rsb	lr, r0, #11
 800bdfa:	fa24 f10e 	lsr.w	r1, r4, lr
 800bdfe:	42b7      	cmp	r7, r6
 800be00:	ea41 030c 	orr.w	r3, r1, ip
 800be04:	bf34      	ite	cc
 800be06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800be0a:	2100      	movcs	r1, #0
 800be0c:	3015      	adds	r0, #21
 800be0e:	fa04 f000 	lsl.w	r0, r4, r0
 800be12:	fa21 f10e 	lsr.w	r1, r1, lr
 800be16:	ea40 0201 	orr.w	r2, r0, r1
 800be1a:	ec43 2b10 	vmov	d0, r2, r3
 800be1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be20:	42b7      	cmp	r7, r6
 800be22:	bf3a      	itte	cc
 800be24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800be28:	f1a5 0608 	subcc.w	r6, r5, #8
 800be2c:	2100      	movcs	r1, #0
 800be2e:	380b      	subs	r0, #11
 800be30:	d017      	beq.n	800be62 <__b2d+0x92>
 800be32:	f1c0 0c20 	rsb	ip, r0, #32
 800be36:	fa04 f500 	lsl.w	r5, r4, r0
 800be3a:	42be      	cmp	r6, r7
 800be3c:	fa21 f40c 	lsr.w	r4, r1, ip
 800be40:	ea45 0504 	orr.w	r5, r5, r4
 800be44:	bf8c      	ite	hi
 800be46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800be4a:	2400      	movls	r4, #0
 800be4c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800be50:	fa01 f000 	lsl.w	r0, r1, r0
 800be54:	fa24 f40c 	lsr.w	r4, r4, ip
 800be58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800be5c:	ea40 0204 	orr.w	r2, r0, r4
 800be60:	e7db      	b.n	800be1a <__b2d+0x4a>
 800be62:	ea44 030c 	orr.w	r3, r4, ip
 800be66:	460a      	mov	r2, r1
 800be68:	e7d7      	b.n	800be1a <__b2d+0x4a>
 800be6a:	bf00      	nop
 800be6c:	3ff00000 	.word	0x3ff00000

0800be70 <__d2b>:
 800be70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be74:	4689      	mov	r9, r1
 800be76:	2101      	movs	r1, #1
 800be78:	ec57 6b10 	vmov	r6, r7, d0
 800be7c:	4690      	mov	r8, r2
 800be7e:	f7ff fc0f 	bl	800b6a0 <_Balloc>
 800be82:	4604      	mov	r4, r0
 800be84:	b930      	cbnz	r0, 800be94 <__d2b+0x24>
 800be86:	4602      	mov	r2, r0
 800be88:	4b25      	ldr	r3, [pc, #148]	; (800bf20 <__d2b+0xb0>)
 800be8a:	4826      	ldr	r0, [pc, #152]	; (800bf24 <__d2b+0xb4>)
 800be8c:	f240 310a 	movw	r1, #778	; 0x30a
 800be90:	f000 fc3a 	bl	800c708 <__assert_func>
 800be94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800be98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be9c:	bb35      	cbnz	r5, 800beec <__d2b+0x7c>
 800be9e:	2e00      	cmp	r6, #0
 800bea0:	9301      	str	r3, [sp, #4]
 800bea2:	d028      	beq.n	800bef6 <__d2b+0x86>
 800bea4:	4668      	mov	r0, sp
 800bea6:	9600      	str	r6, [sp, #0]
 800bea8:	f7ff fd10 	bl	800b8cc <__lo0bits>
 800beac:	9900      	ldr	r1, [sp, #0]
 800beae:	b300      	cbz	r0, 800bef2 <__d2b+0x82>
 800beb0:	9a01      	ldr	r2, [sp, #4]
 800beb2:	f1c0 0320 	rsb	r3, r0, #32
 800beb6:	fa02 f303 	lsl.w	r3, r2, r3
 800beba:	430b      	orrs	r3, r1
 800bebc:	40c2      	lsrs	r2, r0
 800bebe:	6163      	str	r3, [r4, #20]
 800bec0:	9201      	str	r2, [sp, #4]
 800bec2:	9b01      	ldr	r3, [sp, #4]
 800bec4:	61a3      	str	r3, [r4, #24]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	bf14      	ite	ne
 800beca:	2202      	movne	r2, #2
 800becc:	2201      	moveq	r2, #1
 800bece:	6122      	str	r2, [r4, #16]
 800bed0:	b1d5      	cbz	r5, 800bf08 <__d2b+0x98>
 800bed2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bed6:	4405      	add	r5, r0
 800bed8:	f8c9 5000 	str.w	r5, [r9]
 800bedc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bee0:	f8c8 0000 	str.w	r0, [r8]
 800bee4:	4620      	mov	r0, r4
 800bee6:	b003      	add	sp, #12
 800bee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bef0:	e7d5      	b.n	800be9e <__d2b+0x2e>
 800bef2:	6161      	str	r1, [r4, #20]
 800bef4:	e7e5      	b.n	800bec2 <__d2b+0x52>
 800bef6:	a801      	add	r0, sp, #4
 800bef8:	f7ff fce8 	bl	800b8cc <__lo0bits>
 800befc:	9b01      	ldr	r3, [sp, #4]
 800befe:	6163      	str	r3, [r4, #20]
 800bf00:	2201      	movs	r2, #1
 800bf02:	6122      	str	r2, [r4, #16]
 800bf04:	3020      	adds	r0, #32
 800bf06:	e7e3      	b.n	800bed0 <__d2b+0x60>
 800bf08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf10:	f8c9 0000 	str.w	r0, [r9]
 800bf14:	6918      	ldr	r0, [r3, #16]
 800bf16:	f7ff fcb9 	bl	800b88c <__hi0bits>
 800bf1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf1e:	e7df      	b.n	800bee0 <__d2b+0x70>
 800bf20:	080110b4 	.word	0x080110b4
 800bf24:	080111a8 	.word	0x080111a8

0800bf28 <__ratio>:
 800bf28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf2c:	4688      	mov	r8, r1
 800bf2e:	4669      	mov	r1, sp
 800bf30:	4681      	mov	r9, r0
 800bf32:	f7ff ff4d 	bl	800bdd0 <__b2d>
 800bf36:	a901      	add	r1, sp, #4
 800bf38:	4640      	mov	r0, r8
 800bf3a:	ec55 4b10 	vmov	r4, r5, d0
 800bf3e:	f7ff ff47 	bl	800bdd0 <__b2d>
 800bf42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf46:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bf4a:	eba3 0c02 	sub.w	ip, r3, r2
 800bf4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bf52:	1a9b      	subs	r3, r3, r2
 800bf54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bf58:	ec51 0b10 	vmov	r0, r1, d0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	bfd6      	itet	le
 800bf60:	460a      	movle	r2, r1
 800bf62:	462a      	movgt	r2, r5
 800bf64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf68:	468b      	mov	fp, r1
 800bf6a:	462f      	mov	r7, r5
 800bf6c:	bfd4      	ite	le
 800bf6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bf72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bf76:	4620      	mov	r0, r4
 800bf78:	ee10 2a10 	vmov	r2, s0
 800bf7c:	465b      	mov	r3, fp
 800bf7e:	4639      	mov	r1, r7
 800bf80:	f7f4 fc84 	bl	800088c <__aeabi_ddiv>
 800bf84:	ec41 0b10 	vmov	d0, r0, r1
 800bf88:	b003      	add	sp, #12
 800bf8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf8e <__copybits>:
 800bf8e:	3901      	subs	r1, #1
 800bf90:	b570      	push	{r4, r5, r6, lr}
 800bf92:	1149      	asrs	r1, r1, #5
 800bf94:	6914      	ldr	r4, [r2, #16]
 800bf96:	3101      	adds	r1, #1
 800bf98:	f102 0314 	add.w	r3, r2, #20
 800bf9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bfa0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bfa4:	1f05      	subs	r5, r0, #4
 800bfa6:	42a3      	cmp	r3, r4
 800bfa8:	d30c      	bcc.n	800bfc4 <__copybits+0x36>
 800bfaa:	1aa3      	subs	r3, r4, r2
 800bfac:	3b11      	subs	r3, #17
 800bfae:	f023 0303 	bic.w	r3, r3, #3
 800bfb2:	3211      	adds	r2, #17
 800bfb4:	42a2      	cmp	r2, r4
 800bfb6:	bf88      	it	hi
 800bfb8:	2300      	movhi	r3, #0
 800bfba:	4418      	add	r0, r3
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	4288      	cmp	r0, r1
 800bfc0:	d305      	bcc.n	800bfce <__copybits+0x40>
 800bfc2:	bd70      	pop	{r4, r5, r6, pc}
 800bfc4:	f853 6b04 	ldr.w	r6, [r3], #4
 800bfc8:	f845 6f04 	str.w	r6, [r5, #4]!
 800bfcc:	e7eb      	b.n	800bfa6 <__copybits+0x18>
 800bfce:	f840 3b04 	str.w	r3, [r0], #4
 800bfd2:	e7f4      	b.n	800bfbe <__copybits+0x30>

0800bfd4 <__any_on>:
 800bfd4:	f100 0214 	add.w	r2, r0, #20
 800bfd8:	6900      	ldr	r0, [r0, #16]
 800bfda:	114b      	asrs	r3, r1, #5
 800bfdc:	4298      	cmp	r0, r3
 800bfde:	b510      	push	{r4, lr}
 800bfe0:	db11      	blt.n	800c006 <__any_on+0x32>
 800bfe2:	dd0a      	ble.n	800bffa <__any_on+0x26>
 800bfe4:	f011 011f 	ands.w	r1, r1, #31
 800bfe8:	d007      	beq.n	800bffa <__any_on+0x26>
 800bfea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bfee:	fa24 f001 	lsr.w	r0, r4, r1
 800bff2:	fa00 f101 	lsl.w	r1, r0, r1
 800bff6:	428c      	cmp	r4, r1
 800bff8:	d10b      	bne.n	800c012 <__any_on+0x3e>
 800bffa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bffe:	4293      	cmp	r3, r2
 800c000:	d803      	bhi.n	800c00a <__any_on+0x36>
 800c002:	2000      	movs	r0, #0
 800c004:	bd10      	pop	{r4, pc}
 800c006:	4603      	mov	r3, r0
 800c008:	e7f7      	b.n	800bffa <__any_on+0x26>
 800c00a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c00e:	2900      	cmp	r1, #0
 800c010:	d0f5      	beq.n	800bffe <__any_on+0x2a>
 800c012:	2001      	movs	r0, #1
 800c014:	e7f6      	b.n	800c004 <__any_on+0x30>

0800c016 <__ssputs_r>:
 800c016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c01a:	688e      	ldr	r6, [r1, #8]
 800c01c:	429e      	cmp	r6, r3
 800c01e:	4682      	mov	sl, r0
 800c020:	460c      	mov	r4, r1
 800c022:	4690      	mov	r8, r2
 800c024:	461f      	mov	r7, r3
 800c026:	d838      	bhi.n	800c09a <__ssputs_r+0x84>
 800c028:	898a      	ldrh	r2, [r1, #12]
 800c02a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c02e:	d032      	beq.n	800c096 <__ssputs_r+0x80>
 800c030:	6825      	ldr	r5, [r4, #0]
 800c032:	6909      	ldr	r1, [r1, #16]
 800c034:	eba5 0901 	sub.w	r9, r5, r1
 800c038:	6965      	ldr	r5, [r4, #20]
 800c03a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c03e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c042:	3301      	adds	r3, #1
 800c044:	444b      	add	r3, r9
 800c046:	106d      	asrs	r5, r5, #1
 800c048:	429d      	cmp	r5, r3
 800c04a:	bf38      	it	cc
 800c04c:	461d      	movcc	r5, r3
 800c04e:	0553      	lsls	r3, r2, #21
 800c050:	d531      	bpl.n	800c0b6 <__ssputs_r+0xa0>
 800c052:	4629      	mov	r1, r5
 800c054:	f7fb ff14 	bl	8007e80 <_malloc_r>
 800c058:	4606      	mov	r6, r0
 800c05a:	b950      	cbnz	r0, 800c072 <__ssputs_r+0x5c>
 800c05c:	230c      	movs	r3, #12
 800c05e:	f8ca 3000 	str.w	r3, [sl]
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c068:	81a3      	strh	r3, [r4, #12]
 800c06a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c072:	6921      	ldr	r1, [r4, #16]
 800c074:	464a      	mov	r2, r9
 800c076:	f7fb fe8d 	bl	8007d94 <memcpy>
 800c07a:	89a3      	ldrh	r3, [r4, #12]
 800c07c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c084:	81a3      	strh	r3, [r4, #12]
 800c086:	6126      	str	r6, [r4, #16]
 800c088:	6165      	str	r5, [r4, #20]
 800c08a:	444e      	add	r6, r9
 800c08c:	eba5 0509 	sub.w	r5, r5, r9
 800c090:	6026      	str	r6, [r4, #0]
 800c092:	60a5      	str	r5, [r4, #8]
 800c094:	463e      	mov	r6, r7
 800c096:	42be      	cmp	r6, r7
 800c098:	d900      	bls.n	800c09c <__ssputs_r+0x86>
 800c09a:	463e      	mov	r6, r7
 800c09c:	4632      	mov	r2, r6
 800c09e:	6820      	ldr	r0, [r4, #0]
 800c0a0:	4641      	mov	r1, r8
 800c0a2:	f000 fba5 	bl	800c7f0 <memmove>
 800c0a6:	68a3      	ldr	r3, [r4, #8]
 800c0a8:	6822      	ldr	r2, [r4, #0]
 800c0aa:	1b9b      	subs	r3, r3, r6
 800c0ac:	4432      	add	r2, r6
 800c0ae:	60a3      	str	r3, [r4, #8]
 800c0b0:	6022      	str	r2, [r4, #0]
 800c0b2:	2000      	movs	r0, #0
 800c0b4:	e7db      	b.n	800c06e <__ssputs_r+0x58>
 800c0b6:	462a      	mov	r2, r5
 800c0b8:	f000 fbb4 	bl	800c824 <_realloc_r>
 800c0bc:	4606      	mov	r6, r0
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d1e1      	bne.n	800c086 <__ssputs_r+0x70>
 800c0c2:	6921      	ldr	r1, [r4, #16]
 800c0c4:	4650      	mov	r0, sl
 800c0c6:	f7fb fe8b 	bl	8007de0 <_free_r>
 800c0ca:	e7c7      	b.n	800c05c <__ssputs_r+0x46>

0800c0cc <_svfiprintf_r>:
 800c0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	4698      	mov	r8, r3
 800c0d2:	898b      	ldrh	r3, [r1, #12]
 800c0d4:	061b      	lsls	r3, r3, #24
 800c0d6:	b09d      	sub	sp, #116	; 0x74
 800c0d8:	4607      	mov	r7, r0
 800c0da:	460d      	mov	r5, r1
 800c0dc:	4614      	mov	r4, r2
 800c0de:	d50e      	bpl.n	800c0fe <_svfiprintf_r+0x32>
 800c0e0:	690b      	ldr	r3, [r1, #16]
 800c0e2:	b963      	cbnz	r3, 800c0fe <_svfiprintf_r+0x32>
 800c0e4:	2140      	movs	r1, #64	; 0x40
 800c0e6:	f7fb fecb 	bl	8007e80 <_malloc_r>
 800c0ea:	6028      	str	r0, [r5, #0]
 800c0ec:	6128      	str	r0, [r5, #16]
 800c0ee:	b920      	cbnz	r0, 800c0fa <_svfiprintf_r+0x2e>
 800c0f0:	230c      	movs	r3, #12
 800c0f2:	603b      	str	r3, [r7, #0]
 800c0f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0f8:	e0d1      	b.n	800c29e <_svfiprintf_r+0x1d2>
 800c0fa:	2340      	movs	r3, #64	; 0x40
 800c0fc:	616b      	str	r3, [r5, #20]
 800c0fe:	2300      	movs	r3, #0
 800c100:	9309      	str	r3, [sp, #36]	; 0x24
 800c102:	2320      	movs	r3, #32
 800c104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c108:	f8cd 800c 	str.w	r8, [sp, #12]
 800c10c:	2330      	movs	r3, #48	; 0x30
 800c10e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c2b8 <_svfiprintf_r+0x1ec>
 800c112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c116:	f04f 0901 	mov.w	r9, #1
 800c11a:	4623      	mov	r3, r4
 800c11c:	469a      	mov	sl, r3
 800c11e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c122:	b10a      	cbz	r2, 800c128 <_svfiprintf_r+0x5c>
 800c124:	2a25      	cmp	r2, #37	; 0x25
 800c126:	d1f9      	bne.n	800c11c <_svfiprintf_r+0x50>
 800c128:	ebba 0b04 	subs.w	fp, sl, r4
 800c12c:	d00b      	beq.n	800c146 <_svfiprintf_r+0x7a>
 800c12e:	465b      	mov	r3, fp
 800c130:	4622      	mov	r2, r4
 800c132:	4629      	mov	r1, r5
 800c134:	4638      	mov	r0, r7
 800c136:	f7ff ff6e 	bl	800c016 <__ssputs_r>
 800c13a:	3001      	adds	r0, #1
 800c13c:	f000 80aa 	beq.w	800c294 <_svfiprintf_r+0x1c8>
 800c140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c142:	445a      	add	r2, fp
 800c144:	9209      	str	r2, [sp, #36]	; 0x24
 800c146:	f89a 3000 	ldrb.w	r3, [sl]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f000 80a2 	beq.w	800c294 <_svfiprintf_r+0x1c8>
 800c150:	2300      	movs	r3, #0
 800c152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c15a:	f10a 0a01 	add.w	sl, sl, #1
 800c15e:	9304      	str	r3, [sp, #16]
 800c160:	9307      	str	r3, [sp, #28]
 800c162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c166:	931a      	str	r3, [sp, #104]	; 0x68
 800c168:	4654      	mov	r4, sl
 800c16a:	2205      	movs	r2, #5
 800c16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c170:	4851      	ldr	r0, [pc, #324]	; (800c2b8 <_svfiprintf_r+0x1ec>)
 800c172:	f7f4 f855 	bl	8000220 <memchr>
 800c176:	9a04      	ldr	r2, [sp, #16]
 800c178:	b9d8      	cbnz	r0, 800c1b2 <_svfiprintf_r+0xe6>
 800c17a:	06d0      	lsls	r0, r2, #27
 800c17c:	bf44      	itt	mi
 800c17e:	2320      	movmi	r3, #32
 800c180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c184:	0711      	lsls	r1, r2, #28
 800c186:	bf44      	itt	mi
 800c188:	232b      	movmi	r3, #43	; 0x2b
 800c18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c18e:	f89a 3000 	ldrb.w	r3, [sl]
 800c192:	2b2a      	cmp	r3, #42	; 0x2a
 800c194:	d015      	beq.n	800c1c2 <_svfiprintf_r+0xf6>
 800c196:	9a07      	ldr	r2, [sp, #28]
 800c198:	4654      	mov	r4, sl
 800c19a:	2000      	movs	r0, #0
 800c19c:	f04f 0c0a 	mov.w	ip, #10
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1a6:	3b30      	subs	r3, #48	; 0x30
 800c1a8:	2b09      	cmp	r3, #9
 800c1aa:	d94e      	bls.n	800c24a <_svfiprintf_r+0x17e>
 800c1ac:	b1b0      	cbz	r0, 800c1dc <_svfiprintf_r+0x110>
 800c1ae:	9207      	str	r2, [sp, #28]
 800c1b0:	e014      	b.n	800c1dc <_svfiprintf_r+0x110>
 800c1b2:	eba0 0308 	sub.w	r3, r0, r8
 800c1b6:	fa09 f303 	lsl.w	r3, r9, r3
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	9304      	str	r3, [sp, #16]
 800c1be:	46a2      	mov	sl, r4
 800c1c0:	e7d2      	b.n	800c168 <_svfiprintf_r+0x9c>
 800c1c2:	9b03      	ldr	r3, [sp, #12]
 800c1c4:	1d19      	adds	r1, r3, #4
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	9103      	str	r1, [sp, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	bfbb      	ittet	lt
 800c1ce:	425b      	neglt	r3, r3
 800c1d0:	f042 0202 	orrlt.w	r2, r2, #2
 800c1d4:	9307      	strge	r3, [sp, #28]
 800c1d6:	9307      	strlt	r3, [sp, #28]
 800c1d8:	bfb8      	it	lt
 800c1da:	9204      	strlt	r2, [sp, #16]
 800c1dc:	7823      	ldrb	r3, [r4, #0]
 800c1de:	2b2e      	cmp	r3, #46	; 0x2e
 800c1e0:	d10c      	bne.n	800c1fc <_svfiprintf_r+0x130>
 800c1e2:	7863      	ldrb	r3, [r4, #1]
 800c1e4:	2b2a      	cmp	r3, #42	; 0x2a
 800c1e6:	d135      	bne.n	800c254 <_svfiprintf_r+0x188>
 800c1e8:	9b03      	ldr	r3, [sp, #12]
 800c1ea:	1d1a      	adds	r2, r3, #4
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	9203      	str	r2, [sp, #12]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	bfb8      	it	lt
 800c1f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c1f8:	3402      	adds	r4, #2
 800c1fa:	9305      	str	r3, [sp, #20]
 800c1fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c2c8 <_svfiprintf_r+0x1fc>
 800c200:	7821      	ldrb	r1, [r4, #0]
 800c202:	2203      	movs	r2, #3
 800c204:	4650      	mov	r0, sl
 800c206:	f7f4 f80b 	bl	8000220 <memchr>
 800c20a:	b140      	cbz	r0, 800c21e <_svfiprintf_r+0x152>
 800c20c:	2340      	movs	r3, #64	; 0x40
 800c20e:	eba0 000a 	sub.w	r0, r0, sl
 800c212:	fa03 f000 	lsl.w	r0, r3, r0
 800c216:	9b04      	ldr	r3, [sp, #16]
 800c218:	4303      	orrs	r3, r0
 800c21a:	3401      	adds	r4, #1
 800c21c:	9304      	str	r3, [sp, #16]
 800c21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c222:	4826      	ldr	r0, [pc, #152]	; (800c2bc <_svfiprintf_r+0x1f0>)
 800c224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c228:	2206      	movs	r2, #6
 800c22a:	f7f3 fff9 	bl	8000220 <memchr>
 800c22e:	2800      	cmp	r0, #0
 800c230:	d038      	beq.n	800c2a4 <_svfiprintf_r+0x1d8>
 800c232:	4b23      	ldr	r3, [pc, #140]	; (800c2c0 <_svfiprintf_r+0x1f4>)
 800c234:	bb1b      	cbnz	r3, 800c27e <_svfiprintf_r+0x1b2>
 800c236:	9b03      	ldr	r3, [sp, #12]
 800c238:	3307      	adds	r3, #7
 800c23a:	f023 0307 	bic.w	r3, r3, #7
 800c23e:	3308      	adds	r3, #8
 800c240:	9303      	str	r3, [sp, #12]
 800c242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c244:	4433      	add	r3, r6
 800c246:	9309      	str	r3, [sp, #36]	; 0x24
 800c248:	e767      	b.n	800c11a <_svfiprintf_r+0x4e>
 800c24a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c24e:	460c      	mov	r4, r1
 800c250:	2001      	movs	r0, #1
 800c252:	e7a5      	b.n	800c1a0 <_svfiprintf_r+0xd4>
 800c254:	2300      	movs	r3, #0
 800c256:	3401      	adds	r4, #1
 800c258:	9305      	str	r3, [sp, #20]
 800c25a:	4619      	mov	r1, r3
 800c25c:	f04f 0c0a 	mov.w	ip, #10
 800c260:	4620      	mov	r0, r4
 800c262:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c266:	3a30      	subs	r2, #48	; 0x30
 800c268:	2a09      	cmp	r2, #9
 800c26a:	d903      	bls.n	800c274 <_svfiprintf_r+0x1a8>
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d0c5      	beq.n	800c1fc <_svfiprintf_r+0x130>
 800c270:	9105      	str	r1, [sp, #20]
 800c272:	e7c3      	b.n	800c1fc <_svfiprintf_r+0x130>
 800c274:	fb0c 2101 	mla	r1, ip, r1, r2
 800c278:	4604      	mov	r4, r0
 800c27a:	2301      	movs	r3, #1
 800c27c:	e7f0      	b.n	800c260 <_svfiprintf_r+0x194>
 800c27e:	ab03      	add	r3, sp, #12
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	462a      	mov	r2, r5
 800c284:	4b0f      	ldr	r3, [pc, #60]	; (800c2c4 <_svfiprintf_r+0x1f8>)
 800c286:	a904      	add	r1, sp, #16
 800c288:	4638      	mov	r0, r7
 800c28a:	f7fb fef3 	bl	8008074 <_printf_float>
 800c28e:	1c42      	adds	r2, r0, #1
 800c290:	4606      	mov	r6, r0
 800c292:	d1d6      	bne.n	800c242 <_svfiprintf_r+0x176>
 800c294:	89ab      	ldrh	r3, [r5, #12]
 800c296:	065b      	lsls	r3, r3, #25
 800c298:	f53f af2c 	bmi.w	800c0f4 <_svfiprintf_r+0x28>
 800c29c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c29e:	b01d      	add	sp, #116	; 0x74
 800c2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a4:	ab03      	add	r3, sp, #12
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	462a      	mov	r2, r5
 800c2aa:	4b06      	ldr	r3, [pc, #24]	; (800c2c4 <_svfiprintf_r+0x1f8>)
 800c2ac:	a904      	add	r1, sp, #16
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	f7fc f984 	bl	80085bc <_printf_i>
 800c2b4:	e7eb      	b.n	800c28e <_svfiprintf_r+0x1c2>
 800c2b6:	bf00      	nop
 800c2b8:	08011304 	.word	0x08011304
 800c2bc:	0801130e 	.word	0x0801130e
 800c2c0:	08008075 	.word	0x08008075
 800c2c4:	0800c017 	.word	0x0800c017
 800c2c8:	0801130a 	.word	0x0801130a

0800c2cc <__sfputc_r>:
 800c2cc:	6893      	ldr	r3, [r2, #8]
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	b410      	push	{r4}
 800c2d4:	6093      	str	r3, [r2, #8]
 800c2d6:	da08      	bge.n	800c2ea <__sfputc_r+0x1e>
 800c2d8:	6994      	ldr	r4, [r2, #24]
 800c2da:	42a3      	cmp	r3, r4
 800c2dc:	db01      	blt.n	800c2e2 <__sfputc_r+0x16>
 800c2de:	290a      	cmp	r1, #10
 800c2e0:	d103      	bne.n	800c2ea <__sfputc_r+0x1e>
 800c2e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2e6:	f7fd bcf1 	b.w	8009ccc <__swbuf_r>
 800c2ea:	6813      	ldr	r3, [r2, #0]
 800c2ec:	1c58      	adds	r0, r3, #1
 800c2ee:	6010      	str	r0, [r2, #0]
 800c2f0:	7019      	strb	r1, [r3, #0]
 800c2f2:	4608      	mov	r0, r1
 800c2f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2f8:	4770      	bx	lr

0800c2fa <__sfputs_r>:
 800c2fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2fc:	4606      	mov	r6, r0
 800c2fe:	460f      	mov	r7, r1
 800c300:	4614      	mov	r4, r2
 800c302:	18d5      	adds	r5, r2, r3
 800c304:	42ac      	cmp	r4, r5
 800c306:	d101      	bne.n	800c30c <__sfputs_r+0x12>
 800c308:	2000      	movs	r0, #0
 800c30a:	e007      	b.n	800c31c <__sfputs_r+0x22>
 800c30c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c310:	463a      	mov	r2, r7
 800c312:	4630      	mov	r0, r6
 800c314:	f7ff ffda 	bl	800c2cc <__sfputc_r>
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d1f3      	bne.n	800c304 <__sfputs_r+0xa>
 800c31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c320 <_vfiprintf_r>:
 800c320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c324:	460d      	mov	r5, r1
 800c326:	b09d      	sub	sp, #116	; 0x74
 800c328:	4614      	mov	r4, r2
 800c32a:	4698      	mov	r8, r3
 800c32c:	4606      	mov	r6, r0
 800c32e:	b118      	cbz	r0, 800c338 <_vfiprintf_r+0x18>
 800c330:	6983      	ldr	r3, [r0, #24]
 800c332:	b90b      	cbnz	r3, 800c338 <_vfiprintf_r+0x18>
 800c334:	f7fe fd1e 	bl	800ad74 <__sinit>
 800c338:	4b89      	ldr	r3, [pc, #548]	; (800c560 <_vfiprintf_r+0x240>)
 800c33a:	429d      	cmp	r5, r3
 800c33c:	d11b      	bne.n	800c376 <_vfiprintf_r+0x56>
 800c33e:	6875      	ldr	r5, [r6, #4]
 800c340:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c342:	07d9      	lsls	r1, r3, #31
 800c344:	d405      	bmi.n	800c352 <_vfiprintf_r+0x32>
 800c346:	89ab      	ldrh	r3, [r5, #12]
 800c348:	059a      	lsls	r2, r3, #22
 800c34a:	d402      	bmi.n	800c352 <_vfiprintf_r+0x32>
 800c34c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c34e:	f7ff f922 	bl	800b596 <__retarget_lock_acquire_recursive>
 800c352:	89ab      	ldrh	r3, [r5, #12]
 800c354:	071b      	lsls	r3, r3, #28
 800c356:	d501      	bpl.n	800c35c <_vfiprintf_r+0x3c>
 800c358:	692b      	ldr	r3, [r5, #16]
 800c35a:	b9eb      	cbnz	r3, 800c398 <_vfiprintf_r+0x78>
 800c35c:	4629      	mov	r1, r5
 800c35e:	4630      	mov	r0, r6
 800c360:	f7fd fd06 	bl	8009d70 <__swsetup_r>
 800c364:	b1c0      	cbz	r0, 800c398 <_vfiprintf_r+0x78>
 800c366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c368:	07dc      	lsls	r4, r3, #31
 800c36a:	d50e      	bpl.n	800c38a <_vfiprintf_r+0x6a>
 800c36c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c370:	b01d      	add	sp, #116	; 0x74
 800c372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c376:	4b7b      	ldr	r3, [pc, #492]	; (800c564 <_vfiprintf_r+0x244>)
 800c378:	429d      	cmp	r5, r3
 800c37a:	d101      	bne.n	800c380 <_vfiprintf_r+0x60>
 800c37c:	68b5      	ldr	r5, [r6, #8]
 800c37e:	e7df      	b.n	800c340 <_vfiprintf_r+0x20>
 800c380:	4b79      	ldr	r3, [pc, #484]	; (800c568 <_vfiprintf_r+0x248>)
 800c382:	429d      	cmp	r5, r3
 800c384:	bf08      	it	eq
 800c386:	68f5      	ldreq	r5, [r6, #12]
 800c388:	e7da      	b.n	800c340 <_vfiprintf_r+0x20>
 800c38a:	89ab      	ldrh	r3, [r5, #12]
 800c38c:	0598      	lsls	r0, r3, #22
 800c38e:	d4ed      	bmi.n	800c36c <_vfiprintf_r+0x4c>
 800c390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c392:	f7ff f901 	bl	800b598 <__retarget_lock_release_recursive>
 800c396:	e7e9      	b.n	800c36c <_vfiprintf_r+0x4c>
 800c398:	2300      	movs	r3, #0
 800c39a:	9309      	str	r3, [sp, #36]	; 0x24
 800c39c:	2320      	movs	r3, #32
 800c39e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3a6:	2330      	movs	r3, #48	; 0x30
 800c3a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c56c <_vfiprintf_r+0x24c>
 800c3ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3b0:	f04f 0901 	mov.w	r9, #1
 800c3b4:	4623      	mov	r3, r4
 800c3b6:	469a      	mov	sl, r3
 800c3b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3bc:	b10a      	cbz	r2, 800c3c2 <_vfiprintf_r+0xa2>
 800c3be:	2a25      	cmp	r2, #37	; 0x25
 800c3c0:	d1f9      	bne.n	800c3b6 <_vfiprintf_r+0x96>
 800c3c2:	ebba 0b04 	subs.w	fp, sl, r4
 800c3c6:	d00b      	beq.n	800c3e0 <_vfiprintf_r+0xc0>
 800c3c8:	465b      	mov	r3, fp
 800c3ca:	4622      	mov	r2, r4
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	f7ff ff93 	bl	800c2fa <__sfputs_r>
 800c3d4:	3001      	adds	r0, #1
 800c3d6:	f000 80aa 	beq.w	800c52e <_vfiprintf_r+0x20e>
 800c3da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3dc:	445a      	add	r2, fp
 800c3de:	9209      	str	r2, [sp, #36]	; 0x24
 800c3e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f000 80a2 	beq.w	800c52e <_vfiprintf_r+0x20e>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3f4:	f10a 0a01 	add.w	sl, sl, #1
 800c3f8:	9304      	str	r3, [sp, #16]
 800c3fa:	9307      	str	r3, [sp, #28]
 800c3fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c400:	931a      	str	r3, [sp, #104]	; 0x68
 800c402:	4654      	mov	r4, sl
 800c404:	2205      	movs	r2, #5
 800c406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c40a:	4858      	ldr	r0, [pc, #352]	; (800c56c <_vfiprintf_r+0x24c>)
 800c40c:	f7f3 ff08 	bl	8000220 <memchr>
 800c410:	9a04      	ldr	r2, [sp, #16]
 800c412:	b9d8      	cbnz	r0, 800c44c <_vfiprintf_r+0x12c>
 800c414:	06d1      	lsls	r1, r2, #27
 800c416:	bf44      	itt	mi
 800c418:	2320      	movmi	r3, #32
 800c41a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c41e:	0713      	lsls	r3, r2, #28
 800c420:	bf44      	itt	mi
 800c422:	232b      	movmi	r3, #43	; 0x2b
 800c424:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c428:	f89a 3000 	ldrb.w	r3, [sl]
 800c42c:	2b2a      	cmp	r3, #42	; 0x2a
 800c42e:	d015      	beq.n	800c45c <_vfiprintf_r+0x13c>
 800c430:	9a07      	ldr	r2, [sp, #28]
 800c432:	4654      	mov	r4, sl
 800c434:	2000      	movs	r0, #0
 800c436:	f04f 0c0a 	mov.w	ip, #10
 800c43a:	4621      	mov	r1, r4
 800c43c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c440:	3b30      	subs	r3, #48	; 0x30
 800c442:	2b09      	cmp	r3, #9
 800c444:	d94e      	bls.n	800c4e4 <_vfiprintf_r+0x1c4>
 800c446:	b1b0      	cbz	r0, 800c476 <_vfiprintf_r+0x156>
 800c448:	9207      	str	r2, [sp, #28]
 800c44a:	e014      	b.n	800c476 <_vfiprintf_r+0x156>
 800c44c:	eba0 0308 	sub.w	r3, r0, r8
 800c450:	fa09 f303 	lsl.w	r3, r9, r3
 800c454:	4313      	orrs	r3, r2
 800c456:	9304      	str	r3, [sp, #16]
 800c458:	46a2      	mov	sl, r4
 800c45a:	e7d2      	b.n	800c402 <_vfiprintf_r+0xe2>
 800c45c:	9b03      	ldr	r3, [sp, #12]
 800c45e:	1d19      	adds	r1, r3, #4
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	9103      	str	r1, [sp, #12]
 800c464:	2b00      	cmp	r3, #0
 800c466:	bfbb      	ittet	lt
 800c468:	425b      	neglt	r3, r3
 800c46a:	f042 0202 	orrlt.w	r2, r2, #2
 800c46e:	9307      	strge	r3, [sp, #28]
 800c470:	9307      	strlt	r3, [sp, #28]
 800c472:	bfb8      	it	lt
 800c474:	9204      	strlt	r2, [sp, #16]
 800c476:	7823      	ldrb	r3, [r4, #0]
 800c478:	2b2e      	cmp	r3, #46	; 0x2e
 800c47a:	d10c      	bne.n	800c496 <_vfiprintf_r+0x176>
 800c47c:	7863      	ldrb	r3, [r4, #1]
 800c47e:	2b2a      	cmp	r3, #42	; 0x2a
 800c480:	d135      	bne.n	800c4ee <_vfiprintf_r+0x1ce>
 800c482:	9b03      	ldr	r3, [sp, #12]
 800c484:	1d1a      	adds	r2, r3, #4
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	9203      	str	r2, [sp, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	bfb8      	it	lt
 800c48e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c492:	3402      	adds	r4, #2
 800c494:	9305      	str	r3, [sp, #20]
 800c496:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c57c <_vfiprintf_r+0x25c>
 800c49a:	7821      	ldrb	r1, [r4, #0]
 800c49c:	2203      	movs	r2, #3
 800c49e:	4650      	mov	r0, sl
 800c4a0:	f7f3 febe 	bl	8000220 <memchr>
 800c4a4:	b140      	cbz	r0, 800c4b8 <_vfiprintf_r+0x198>
 800c4a6:	2340      	movs	r3, #64	; 0x40
 800c4a8:	eba0 000a 	sub.w	r0, r0, sl
 800c4ac:	fa03 f000 	lsl.w	r0, r3, r0
 800c4b0:	9b04      	ldr	r3, [sp, #16]
 800c4b2:	4303      	orrs	r3, r0
 800c4b4:	3401      	adds	r4, #1
 800c4b6:	9304      	str	r3, [sp, #16]
 800c4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4bc:	482c      	ldr	r0, [pc, #176]	; (800c570 <_vfiprintf_r+0x250>)
 800c4be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4c2:	2206      	movs	r2, #6
 800c4c4:	f7f3 feac 	bl	8000220 <memchr>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	d03f      	beq.n	800c54c <_vfiprintf_r+0x22c>
 800c4cc:	4b29      	ldr	r3, [pc, #164]	; (800c574 <_vfiprintf_r+0x254>)
 800c4ce:	bb1b      	cbnz	r3, 800c518 <_vfiprintf_r+0x1f8>
 800c4d0:	9b03      	ldr	r3, [sp, #12]
 800c4d2:	3307      	adds	r3, #7
 800c4d4:	f023 0307 	bic.w	r3, r3, #7
 800c4d8:	3308      	adds	r3, #8
 800c4da:	9303      	str	r3, [sp, #12]
 800c4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4de:	443b      	add	r3, r7
 800c4e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c4e2:	e767      	b.n	800c3b4 <_vfiprintf_r+0x94>
 800c4e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4e8:	460c      	mov	r4, r1
 800c4ea:	2001      	movs	r0, #1
 800c4ec:	e7a5      	b.n	800c43a <_vfiprintf_r+0x11a>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	3401      	adds	r4, #1
 800c4f2:	9305      	str	r3, [sp, #20]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	f04f 0c0a 	mov.w	ip, #10
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c500:	3a30      	subs	r2, #48	; 0x30
 800c502:	2a09      	cmp	r2, #9
 800c504:	d903      	bls.n	800c50e <_vfiprintf_r+0x1ee>
 800c506:	2b00      	cmp	r3, #0
 800c508:	d0c5      	beq.n	800c496 <_vfiprintf_r+0x176>
 800c50a:	9105      	str	r1, [sp, #20]
 800c50c:	e7c3      	b.n	800c496 <_vfiprintf_r+0x176>
 800c50e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c512:	4604      	mov	r4, r0
 800c514:	2301      	movs	r3, #1
 800c516:	e7f0      	b.n	800c4fa <_vfiprintf_r+0x1da>
 800c518:	ab03      	add	r3, sp, #12
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	462a      	mov	r2, r5
 800c51e:	4b16      	ldr	r3, [pc, #88]	; (800c578 <_vfiprintf_r+0x258>)
 800c520:	a904      	add	r1, sp, #16
 800c522:	4630      	mov	r0, r6
 800c524:	f7fb fda6 	bl	8008074 <_printf_float>
 800c528:	4607      	mov	r7, r0
 800c52a:	1c78      	adds	r0, r7, #1
 800c52c:	d1d6      	bne.n	800c4dc <_vfiprintf_r+0x1bc>
 800c52e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c530:	07d9      	lsls	r1, r3, #31
 800c532:	d405      	bmi.n	800c540 <_vfiprintf_r+0x220>
 800c534:	89ab      	ldrh	r3, [r5, #12]
 800c536:	059a      	lsls	r2, r3, #22
 800c538:	d402      	bmi.n	800c540 <_vfiprintf_r+0x220>
 800c53a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c53c:	f7ff f82c 	bl	800b598 <__retarget_lock_release_recursive>
 800c540:	89ab      	ldrh	r3, [r5, #12]
 800c542:	065b      	lsls	r3, r3, #25
 800c544:	f53f af12 	bmi.w	800c36c <_vfiprintf_r+0x4c>
 800c548:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c54a:	e711      	b.n	800c370 <_vfiprintf_r+0x50>
 800c54c:	ab03      	add	r3, sp, #12
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	462a      	mov	r2, r5
 800c552:	4b09      	ldr	r3, [pc, #36]	; (800c578 <_vfiprintf_r+0x258>)
 800c554:	a904      	add	r1, sp, #16
 800c556:	4630      	mov	r0, r6
 800c558:	f7fc f830 	bl	80085bc <_printf_i>
 800c55c:	e7e4      	b.n	800c528 <_vfiprintf_r+0x208>
 800c55e:	bf00      	nop
 800c560:	080110e8 	.word	0x080110e8
 800c564:	08011108 	.word	0x08011108
 800c568:	080110c8 	.word	0x080110c8
 800c56c:	08011304 	.word	0x08011304
 800c570:	0801130e 	.word	0x0801130e
 800c574:	08008075 	.word	0x08008075
 800c578:	0800c2fb 	.word	0x0800c2fb
 800c57c:	0801130a 	.word	0x0801130a

0800c580 <_putc_r>:
 800c580:	b570      	push	{r4, r5, r6, lr}
 800c582:	460d      	mov	r5, r1
 800c584:	4614      	mov	r4, r2
 800c586:	4606      	mov	r6, r0
 800c588:	b118      	cbz	r0, 800c592 <_putc_r+0x12>
 800c58a:	6983      	ldr	r3, [r0, #24]
 800c58c:	b90b      	cbnz	r3, 800c592 <_putc_r+0x12>
 800c58e:	f7fe fbf1 	bl	800ad74 <__sinit>
 800c592:	4b1c      	ldr	r3, [pc, #112]	; (800c604 <_putc_r+0x84>)
 800c594:	429c      	cmp	r4, r3
 800c596:	d124      	bne.n	800c5e2 <_putc_r+0x62>
 800c598:	6874      	ldr	r4, [r6, #4]
 800c59a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c59c:	07d8      	lsls	r0, r3, #31
 800c59e:	d405      	bmi.n	800c5ac <_putc_r+0x2c>
 800c5a0:	89a3      	ldrh	r3, [r4, #12]
 800c5a2:	0599      	lsls	r1, r3, #22
 800c5a4:	d402      	bmi.n	800c5ac <_putc_r+0x2c>
 800c5a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5a8:	f7fe fff5 	bl	800b596 <__retarget_lock_acquire_recursive>
 800c5ac:	68a3      	ldr	r3, [r4, #8]
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	60a3      	str	r3, [r4, #8]
 800c5b4:	da05      	bge.n	800c5c2 <_putc_r+0x42>
 800c5b6:	69a2      	ldr	r2, [r4, #24]
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	db1c      	blt.n	800c5f6 <_putc_r+0x76>
 800c5bc:	b2eb      	uxtb	r3, r5
 800c5be:	2b0a      	cmp	r3, #10
 800c5c0:	d019      	beq.n	800c5f6 <_putc_r+0x76>
 800c5c2:	6823      	ldr	r3, [r4, #0]
 800c5c4:	1c5a      	adds	r2, r3, #1
 800c5c6:	6022      	str	r2, [r4, #0]
 800c5c8:	701d      	strb	r5, [r3, #0]
 800c5ca:	b2ed      	uxtb	r5, r5
 800c5cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5ce:	07da      	lsls	r2, r3, #31
 800c5d0:	d405      	bmi.n	800c5de <_putc_r+0x5e>
 800c5d2:	89a3      	ldrh	r3, [r4, #12]
 800c5d4:	059b      	lsls	r3, r3, #22
 800c5d6:	d402      	bmi.n	800c5de <_putc_r+0x5e>
 800c5d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5da:	f7fe ffdd 	bl	800b598 <__retarget_lock_release_recursive>
 800c5de:	4628      	mov	r0, r5
 800c5e0:	bd70      	pop	{r4, r5, r6, pc}
 800c5e2:	4b09      	ldr	r3, [pc, #36]	; (800c608 <_putc_r+0x88>)
 800c5e4:	429c      	cmp	r4, r3
 800c5e6:	d101      	bne.n	800c5ec <_putc_r+0x6c>
 800c5e8:	68b4      	ldr	r4, [r6, #8]
 800c5ea:	e7d6      	b.n	800c59a <_putc_r+0x1a>
 800c5ec:	4b07      	ldr	r3, [pc, #28]	; (800c60c <_putc_r+0x8c>)
 800c5ee:	429c      	cmp	r4, r3
 800c5f0:	bf08      	it	eq
 800c5f2:	68f4      	ldreq	r4, [r6, #12]
 800c5f4:	e7d1      	b.n	800c59a <_putc_r+0x1a>
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	4622      	mov	r2, r4
 800c5fa:	4630      	mov	r0, r6
 800c5fc:	f7fd fb66 	bl	8009ccc <__swbuf_r>
 800c600:	4605      	mov	r5, r0
 800c602:	e7e3      	b.n	800c5cc <_putc_r+0x4c>
 800c604:	080110e8 	.word	0x080110e8
 800c608:	08011108 	.word	0x08011108
 800c60c:	080110c8 	.word	0x080110c8

0800c610 <nan>:
 800c610:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c618 <nan+0x8>
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	00000000 	.word	0x00000000
 800c61c:	7ff80000 	.word	0x7ff80000

0800c620 <__sread>:
 800c620:	b510      	push	{r4, lr}
 800c622:	460c      	mov	r4, r1
 800c624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c628:	f000 f922 	bl	800c870 <_read_r>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	bfab      	itete	ge
 800c630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c632:	89a3      	ldrhlt	r3, [r4, #12]
 800c634:	181b      	addge	r3, r3, r0
 800c636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c63a:	bfac      	ite	ge
 800c63c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c63e:	81a3      	strhlt	r3, [r4, #12]
 800c640:	bd10      	pop	{r4, pc}

0800c642 <__swrite>:
 800c642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c646:	461f      	mov	r7, r3
 800c648:	898b      	ldrh	r3, [r1, #12]
 800c64a:	05db      	lsls	r3, r3, #23
 800c64c:	4605      	mov	r5, r0
 800c64e:	460c      	mov	r4, r1
 800c650:	4616      	mov	r6, r2
 800c652:	d505      	bpl.n	800c660 <__swrite+0x1e>
 800c654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c658:	2302      	movs	r3, #2
 800c65a:	2200      	movs	r2, #0
 800c65c:	f000 f8b6 	bl	800c7cc <_lseek_r>
 800c660:	89a3      	ldrh	r3, [r4, #12]
 800c662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c66a:	81a3      	strh	r3, [r4, #12]
 800c66c:	4632      	mov	r2, r6
 800c66e:	463b      	mov	r3, r7
 800c670:	4628      	mov	r0, r5
 800c672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c676:	f000 b835 	b.w	800c6e4 <_write_r>

0800c67a <__sseek>:
 800c67a:	b510      	push	{r4, lr}
 800c67c:	460c      	mov	r4, r1
 800c67e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c682:	f000 f8a3 	bl	800c7cc <_lseek_r>
 800c686:	1c43      	adds	r3, r0, #1
 800c688:	89a3      	ldrh	r3, [r4, #12]
 800c68a:	bf15      	itete	ne
 800c68c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c68e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c696:	81a3      	strheq	r3, [r4, #12]
 800c698:	bf18      	it	ne
 800c69a:	81a3      	strhne	r3, [r4, #12]
 800c69c:	bd10      	pop	{r4, pc}

0800c69e <__sclose>:
 800c69e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a2:	f000 b84f 	b.w	800c744 <_close_r>

0800c6a6 <strncmp>:
 800c6a6:	b510      	push	{r4, lr}
 800c6a8:	b16a      	cbz	r2, 800c6c6 <strncmp+0x20>
 800c6aa:	3901      	subs	r1, #1
 800c6ac:	1884      	adds	r4, r0, r2
 800c6ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c6b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d103      	bne.n	800c6c2 <strncmp+0x1c>
 800c6ba:	42a0      	cmp	r0, r4
 800c6bc:	d001      	beq.n	800c6c2 <strncmp+0x1c>
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d1f5      	bne.n	800c6ae <strncmp+0x8>
 800c6c2:	1a98      	subs	r0, r3, r2
 800c6c4:	bd10      	pop	{r4, pc}
 800c6c6:	4610      	mov	r0, r2
 800c6c8:	e7fc      	b.n	800c6c4 <strncmp+0x1e>

0800c6ca <__ascii_wctomb>:
 800c6ca:	b149      	cbz	r1, 800c6e0 <__ascii_wctomb+0x16>
 800c6cc:	2aff      	cmp	r2, #255	; 0xff
 800c6ce:	bf85      	ittet	hi
 800c6d0:	238a      	movhi	r3, #138	; 0x8a
 800c6d2:	6003      	strhi	r3, [r0, #0]
 800c6d4:	700a      	strbls	r2, [r1, #0]
 800c6d6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c6da:	bf98      	it	ls
 800c6dc:	2001      	movls	r0, #1
 800c6de:	4770      	bx	lr
 800c6e0:	4608      	mov	r0, r1
 800c6e2:	4770      	bx	lr

0800c6e4 <_write_r>:
 800c6e4:	b538      	push	{r3, r4, r5, lr}
 800c6e6:	4d07      	ldr	r5, [pc, #28]	; (800c704 <_write_r+0x20>)
 800c6e8:	4604      	mov	r4, r0
 800c6ea:	4608      	mov	r0, r1
 800c6ec:	4611      	mov	r1, r2
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	602a      	str	r2, [r5, #0]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	f7f5 fc46 	bl	8001f84 <_write>
 800c6f8:	1c43      	adds	r3, r0, #1
 800c6fa:	d102      	bne.n	800c702 <_write_r+0x1e>
 800c6fc:	682b      	ldr	r3, [r5, #0]
 800c6fe:	b103      	cbz	r3, 800c702 <_write_r+0x1e>
 800c700:	6023      	str	r3, [r4, #0]
 800c702:	bd38      	pop	{r3, r4, r5, pc}
 800c704:	20000804 	.word	0x20000804

0800c708 <__assert_func>:
 800c708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c70a:	4614      	mov	r4, r2
 800c70c:	461a      	mov	r2, r3
 800c70e:	4b09      	ldr	r3, [pc, #36]	; (800c734 <__assert_func+0x2c>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4605      	mov	r5, r0
 800c714:	68d8      	ldr	r0, [r3, #12]
 800c716:	b14c      	cbz	r4, 800c72c <__assert_func+0x24>
 800c718:	4b07      	ldr	r3, [pc, #28]	; (800c738 <__assert_func+0x30>)
 800c71a:	9100      	str	r1, [sp, #0]
 800c71c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c720:	4906      	ldr	r1, [pc, #24]	; (800c73c <__assert_func+0x34>)
 800c722:	462b      	mov	r3, r5
 800c724:	f000 f81e 	bl	800c764 <fiprintf>
 800c728:	f000 f8b4 	bl	800c894 <abort>
 800c72c:	4b04      	ldr	r3, [pc, #16]	; (800c740 <__assert_func+0x38>)
 800c72e:	461c      	mov	r4, r3
 800c730:	e7f3      	b.n	800c71a <__assert_func+0x12>
 800c732:	bf00      	nop
 800c734:	2000000c 	.word	0x2000000c
 800c738:	08011315 	.word	0x08011315
 800c73c:	08011322 	.word	0x08011322
 800c740:	08011350 	.word	0x08011350

0800c744 <_close_r>:
 800c744:	b538      	push	{r3, r4, r5, lr}
 800c746:	4d06      	ldr	r5, [pc, #24]	; (800c760 <_close_r+0x1c>)
 800c748:	2300      	movs	r3, #0
 800c74a:	4604      	mov	r4, r0
 800c74c:	4608      	mov	r0, r1
 800c74e:	602b      	str	r3, [r5, #0]
 800c750:	f7f5 fc44 	bl	8001fdc <_close>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d102      	bne.n	800c75e <_close_r+0x1a>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	b103      	cbz	r3, 800c75e <_close_r+0x1a>
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	20000804 	.word	0x20000804

0800c764 <fiprintf>:
 800c764:	b40e      	push	{r1, r2, r3}
 800c766:	b503      	push	{r0, r1, lr}
 800c768:	4601      	mov	r1, r0
 800c76a:	ab03      	add	r3, sp, #12
 800c76c:	4805      	ldr	r0, [pc, #20]	; (800c784 <fiprintf+0x20>)
 800c76e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c772:	6800      	ldr	r0, [r0, #0]
 800c774:	9301      	str	r3, [sp, #4]
 800c776:	f7ff fdd3 	bl	800c320 <_vfiprintf_r>
 800c77a:	b002      	add	sp, #8
 800c77c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c780:	b003      	add	sp, #12
 800c782:	4770      	bx	lr
 800c784:	2000000c 	.word	0x2000000c

0800c788 <_fstat_r>:
 800c788:	b538      	push	{r3, r4, r5, lr}
 800c78a:	4d07      	ldr	r5, [pc, #28]	; (800c7a8 <_fstat_r+0x20>)
 800c78c:	2300      	movs	r3, #0
 800c78e:	4604      	mov	r4, r0
 800c790:	4608      	mov	r0, r1
 800c792:	4611      	mov	r1, r2
 800c794:	602b      	str	r3, [r5, #0]
 800c796:	f7f5 fc71 	bl	800207c <_fstat>
 800c79a:	1c43      	adds	r3, r0, #1
 800c79c:	d102      	bne.n	800c7a4 <_fstat_r+0x1c>
 800c79e:	682b      	ldr	r3, [r5, #0]
 800c7a0:	b103      	cbz	r3, 800c7a4 <_fstat_r+0x1c>
 800c7a2:	6023      	str	r3, [r4, #0]
 800c7a4:	bd38      	pop	{r3, r4, r5, pc}
 800c7a6:	bf00      	nop
 800c7a8:	20000804 	.word	0x20000804

0800c7ac <_isatty_r>:
 800c7ac:	b538      	push	{r3, r4, r5, lr}
 800c7ae:	4d06      	ldr	r5, [pc, #24]	; (800c7c8 <_isatty_r+0x1c>)
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	4608      	mov	r0, r1
 800c7b6:	602b      	str	r3, [r5, #0]
 800c7b8:	f7f5 fbce 	bl	8001f58 <_isatty>
 800c7bc:	1c43      	adds	r3, r0, #1
 800c7be:	d102      	bne.n	800c7c6 <_isatty_r+0x1a>
 800c7c0:	682b      	ldr	r3, [r5, #0]
 800c7c2:	b103      	cbz	r3, 800c7c6 <_isatty_r+0x1a>
 800c7c4:	6023      	str	r3, [r4, #0]
 800c7c6:	bd38      	pop	{r3, r4, r5, pc}
 800c7c8:	20000804 	.word	0x20000804

0800c7cc <_lseek_r>:
 800c7cc:	b538      	push	{r3, r4, r5, lr}
 800c7ce:	4d07      	ldr	r5, [pc, #28]	; (800c7ec <_lseek_r+0x20>)
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	4608      	mov	r0, r1
 800c7d4:	4611      	mov	r1, r2
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	602a      	str	r2, [r5, #0]
 800c7da:	461a      	mov	r2, r3
 800c7dc:	f7f5 fc15 	bl	800200a <_lseek>
 800c7e0:	1c43      	adds	r3, r0, #1
 800c7e2:	d102      	bne.n	800c7ea <_lseek_r+0x1e>
 800c7e4:	682b      	ldr	r3, [r5, #0]
 800c7e6:	b103      	cbz	r3, 800c7ea <_lseek_r+0x1e>
 800c7e8:	6023      	str	r3, [r4, #0]
 800c7ea:	bd38      	pop	{r3, r4, r5, pc}
 800c7ec:	20000804 	.word	0x20000804

0800c7f0 <memmove>:
 800c7f0:	4288      	cmp	r0, r1
 800c7f2:	b510      	push	{r4, lr}
 800c7f4:	eb01 0402 	add.w	r4, r1, r2
 800c7f8:	d902      	bls.n	800c800 <memmove+0x10>
 800c7fa:	4284      	cmp	r4, r0
 800c7fc:	4623      	mov	r3, r4
 800c7fe:	d807      	bhi.n	800c810 <memmove+0x20>
 800c800:	1e43      	subs	r3, r0, #1
 800c802:	42a1      	cmp	r1, r4
 800c804:	d008      	beq.n	800c818 <memmove+0x28>
 800c806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c80a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c80e:	e7f8      	b.n	800c802 <memmove+0x12>
 800c810:	4402      	add	r2, r0
 800c812:	4601      	mov	r1, r0
 800c814:	428a      	cmp	r2, r1
 800c816:	d100      	bne.n	800c81a <memmove+0x2a>
 800c818:	bd10      	pop	{r4, pc}
 800c81a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c81e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c822:	e7f7      	b.n	800c814 <memmove+0x24>

0800c824 <_realloc_r>:
 800c824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c826:	4607      	mov	r7, r0
 800c828:	4614      	mov	r4, r2
 800c82a:	460e      	mov	r6, r1
 800c82c:	b921      	cbnz	r1, 800c838 <_realloc_r+0x14>
 800c82e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c832:	4611      	mov	r1, r2
 800c834:	f7fb bb24 	b.w	8007e80 <_malloc_r>
 800c838:	b922      	cbnz	r2, 800c844 <_realloc_r+0x20>
 800c83a:	f7fb fad1 	bl	8007de0 <_free_r>
 800c83e:	4625      	mov	r5, r4
 800c840:	4628      	mov	r0, r5
 800c842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c844:	f000 f82d 	bl	800c8a2 <_malloc_usable_size_r>
 800c848:	42a0      	cmp	r0, r4
 800c84a:	d20f      	bcs.n	800c86c <_realloc_r+0x48>
 800c84c:	4621      	mov	r1, r4
 800c84e:	4638      	mov	r0, r7
 800c850:	f7fb fb16 	bl	8007e80 <_malloc_r>
 800c854:	4605      	mov	r5, r0
 800c856:	2800      	cmp	r0, #0
 800c858:	d0f2      	beq.n	800c840 <_realloc_r+0x1c>
 800c85a:	4631      	mov	r1, r6
 800c85c:	4622      	mov	r2, r4
 800c85e:	f7fb fa99 	bl	8007d94 <memcpy>
 800c862:	4631      	mov	r1, r6
 800c864:	4638      	mov	r0, r7
 800c866:	f7fb fabb 	bl	8007de0 <_free_r>
 800c86a:	e7e9      	b.n	800c840 <_realloc_r+0x1c>
 800c86c:	4635      	mov	r5, r6
 800c86e:	e7e7      	b.n	800c840 <_realloc_r+0x1c>

0800c870 <_read_r>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4d07      	ldr	r5, [pc, #28]	; (800c890 <_read_r+0x20>)
 800c874:	4604      	mov	r4, r0
 800c876:	4608      	mov	r0, r1
 800c878:	4611      	mov	r1, r2
 800c87a:	2200      	movs	r2, #0
 800c87c:	602a      	str	r2, [r5, #0]
 800c87e:	461a      	mov	r2, r3
 800c880:	f7f5 fbd4 	bl	800202c <_read>
 800c884:	1c43      	adds	r3, r0, #1
 800c886:	d102      	bne.n	800c88e <_read_r+0x1e>
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	b103      	cbz	r3, 800c88e <_read_r+0x1e>
 800c88c:	6023      	str	r3, [r4, #0]
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	20000804 	.word	0x20000804

0800c894 <abort>:
 800c894:	b508      	push	{r3, lr}
 800c896:	2006      	movs	r0, #6
 800c898:	f000 f834 	bl	800c904 <raise>
 800c89c:	2001      	movs	r0, #1
 800c89e:	f001 f8e5 	bl	800da6c <_exit>

0800c8a2 <_malloc_usable_size_r>:
 800c8a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8a6:	1f18      	subs	r0, r3, #4
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	bfbc      	itt	lt
 800c8ac:	580b      	ldrlt	r3, [r1, r0]
 800c8ae:	18c0      	addlt	r0, r0, r3
 800c8b0:	4770      	bx	lr

0800c8b2 <_raise_r>:
 800c8b2:	291f      	cmp	r1, #31
 800c8b4:	b538      	push	{r3, r4, r5, lr}
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	460d      	mov	r5, r1
 800c8ba:	d904      	bls.n	800c8c6 <_raise_r+0x14>
 800c8bc:	2316      	movs	r3, #22
 800c8be:	6003      	str	r3, [r0, #0]
 800c8c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8c4:	bd38      	pop	{r3, r4, r5, pc}
 800c8c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c8c8:	b112      	cbz	r2, 800c8d0 <_raise_r+0x1e>
 800c8ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8ce:	b94b      	cbnz	r3, 800c8e4 <_raise_r+0x32>
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	f000 f831 	bl	800c938 <_getpid_r>
 800c8d6:	462a      	mov	r2, r5
 800c8d8:	4601      	mov	r1, r0
 800c8da:	4620      	mov	r0, r4
 800c8dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8e0:	f000 b818 	b.w	800c914 <_kill_r>
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d00a      	beq.n	800c8fe <_raise_r+0x4c>
 800c8e8:	1c59      	adds	r1, r3, #1
 800c8ea:	d103      	bne.n	800c8f4 <_raise_r+0x42>
 800c8ec:	2316      	movs	r3, #22
 800c8ee:	6003      	str	r3, [r0, #0]
 800c8f0:	2001      	movs	r0, #1
 800c8f2:	e7e7      	b.n	800c8c4 <_raise_r+0x12>
 800c8f4:	2400      	movs	r4, #0
 800c8f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	4798      	blx	r3
 800c8fe:	2000      	movs	r0, #0
 800c900:	e7e0      	b.n	800c8c4 <_raise_r+0x12>
	...

0800c904 <raise>:
 800c904:	4b02      	ldr	r3, [pc, #8]	; (800c910 <raise+0xc>)
 800c906:	4601      	mov	r1, r0
 800c908:	6818      	ldr	r0, [r3, #0]
 800c90a:	f7ff bfd2 	b.w	800c8b2 <_raise_r>
 800c90e:	bf00      	nop
 800c910:	2000000c 	.word	0x2000000c

0800c914 <_kill_r>:
 800c914:	b538      	push	{r3, r4, r5, lr}
 800c916:	4d07      	ldr	r5, [pc, #28]	; (800c934 <_kill_r+0x20>)
 800c918:	2300      	movs	r3, #0
 800c91a:	4604      	mov	r4, r0
 800c91c:	4608      	mov	r0, r1
 800c91e:	4611      	mov	r1, r2
 800c920:	602b      	str	r3, [r5, #0]
 800c922:	f001 f89b 	bl	800da5c <_kill>
 800c926:	1c43      	adds	r3, r0, #1
 800c928:	d102      	bne.n	800c930 <_kill_r+0x1c>
 800c92a:	682b      	ldr	r3, [r5, #0]
 800c92c:	b103      	cbz	r3, 800c930 <_kill_r+0x1c>
 800c92e:	6023      	str	r3, [r4, #0]
 800c930:	bd38      	pop	{r3, r4, r5, pc}
 800c932:	bf00      	nop
 800c934:	20000804 	.word	0x20000804

0800c938 <_getpid_r>:
 800c938:	f001 b888 	b.w	800da4c <_getpid>
 800c93c:	0000      	movs	r0, r0
	...

0800c940 <cos>:
 800c940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c942:	ec53 2b10 	vmov	r2, r3, d0
 800c946:	4824      	ldr	r0, [pc, #144]	; (800c9d8 <cos+0x98>)
 800c948:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c94c:	4281      	cmp	r1, r0
 800c94e:	dc06      	bgt.n	800c95e <cos+0x1e>
 800c950:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800c9d0 <cos+0x90>
 800c954:	f000 faa4 	bl	800cea0 <__kernel_cos>
 800c958:	ec51 0b10 	vmov	r0, r1, d0
 800c95c:	e007      	b.n	800c96e <cos+0x2e>
 800c95e:	481f      	ldr	r0, [pc, #124]	; (800c9dc <cos+0x9c>)
 800c960:	4281      	cmp	r1, r0
 800c962:	dd09      	ble.n	800c978 <cos+0x38>
 800c964:	ee10 0a10 	vmov	r0, s0
 800c968:	4619      	mov	r1, r3
 800c96a:	f7f3 fcad 	bl	80002c8 <__aeabi_dsub>
 800c96e:	ec41 0b10 	vmov	d0, r0, r1
 800c972:	b005      	add	sp, #20
 800c974:	f85d fb04 	ldr.w	pc, [sp], #4
 800c978:	4668      	mov	r0, sp
 800c97a:	f000 f885 	bl	800ca88 <__ieee754_rem_pio2>
 800c97e:	f000 0003 	and.w	r0, r0, #3
 800c982:	2801      	cmp	r0, #1
 800c984:	d007      	beq.n	800c996 <cos+0x56>
 800c986:	2802      	cmp	r0, #2
 800c988:	d012      	beq.n	800c9b0 <cos+0x70>
 800c98a:	b9c0      	cbnz	r0, 800c9be <cos+0x7e>
 800c98c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c990:	ed9d 0b00 	vldr	d0, [sp]
 800c994:	e7de      	b.n	800c954 <cos+0x14>
 800c996:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c99a:	ed9d 0b00 	vldr	d0, [sp]
 800c99e:	f000 fe87 	bl	800d6b0 <__kernel_sin>
 800c9a2:	ec53 2b10 	vmov	r2, r3, d0
 800c9a6:	ee10 0a10 	vmov	r0, s0
 800c9aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c9ae:	e7de      	b.n	800c96e <cos+0x2e>
 800c9b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c9b4:	ed9d 0b00 	vldr	d0, [sp]
 800c9b8:	f000 fa72 	bl	800cea0 <__kernel_cos>
 800c9bc:	e7f1      	b.n	800c9a2 <cos+0x62>
 800c9be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c9c2:	ed9d 0b00 	vldr	d0, [sp]
 800c9c6:	2001      	movs	r0, #1
 800c9c8:	f000 fe72 	bl	800d6b0 <__kernel_sin>
 800c9cc:	e7c4      	b.n	800c958 <cos+0x18>
 800c9ce:	bf00      	nop
	...
 800c9d8:	3fe921fb 	.word	0x3fe921fb
 800c9dc:	7fefffff 	.word	0x7fefffff

0800c9e0 <sin>:
 800c9e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9e2:	ec53 2b10 	vmov	r2, r3, d0
 800c9e6:	4826      	ldr	r0, [pc, #152]	; (800ca80 <sin+0xa0>)
 800c9e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c9ec:	4281      	cmp	r1, r0
 800c9ee:	dc07      	bgt.n	800ca00 <sin+0x20>
 800c9f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ca78 <sin+0x98>
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	f000 fe5b 	bl	800d6b0 <__kernel_sin>
 800c9fa:	ec51 0b10 	vmov	r0, r1, d0
 800c9fe:	e007      	b.n	800ca10 <sin+0x30>
 800ca00:	4820      	ldr	r0, [pc, #128]	; (800ca84 <sin+0xa4>)
 800ca02:	4281      	cmp	r1, r0
 800ca04:	dd09      	ble.n	800ca1a <sin+0x3a>
 800ca06:	ee10 0a10 	vmov	r0, s0
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	f7f3 fc5c 	bl	80002c8 <__aeabi_dsub>
 800ca10:	ec41 0b10 	vmov	d0, r0, r1
 800ca14:	b005      	add	sp, #20
 800ca16:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca1a:	4668      	mov	r0, sp
 800ca1c:	f000 f834 	bl	800ca88 <__ieee754_rem_pio2>
 800ca20:	f000 0003 	and.w	r0, r0, #3
 800ca24:	2801      	cmp	r0, #1
 800ca26:	d008      	beq.n	800ca3a <sin+0x5a>
 800ca28:	2802      	cmp	r0, #2
 800ca2a:	d00d      	beq.n	800ca48 <sin+0x68>
 800ca2c:	b9d0      	cbnz	r0, 800ca64 <sin+0x84>
 800ca2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ca32:	ed9d 0b00 	vldr	d0, [sp]
 800ca36:	2001      	movs	r0, #1
 800ca38:	e7dd      	b.n	800c9f6 <sin+0x16>
 800ca3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ca3e:	ed9d 0b00 	vldr	d0, [sp]
 800ca42:	f000 fa2d 	bl	800cea0 <__kernel_cos>
 800ca46:	e7d8      	b.n	800c9fa <sin+0x1a>
 800ca48:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ca4c:	ed9d 0b00 	vldr	d0, [sp]
 800ca50:	2001      	movs	r0, #1
 800ca52:	f000 fe2d 	bl	800d6b0 <__kernel_sin>
 800ca56:	ec53 2b10 	vmov	r2, r3, d0
 800ca5a:	ee10 0a10 	vmov	r0, s0
 800ca5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ca62:	e7d5      	b.n	800ca10 <sin+0x30>
 800ca64:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ca68:	ed9d 0b00 	vldr	d0, [sp]
 800ca6c:	f000 fa18 	bl	800cea0 <__kernel_cos>
 800ca70:	e7f1      	b.n	800ca56 <sin+0x76>
 800ca72:	bf00      	nop
 800ca74:	f3af 8000 	nop.w
	...
 800ca80:	3fe921fb 	.word	0x3fe921fb
 800ca84:	7fefffff 	.word	0x7fefffff

0800ca88 <__ieee754_rem_pio2>:
 800ca88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca8c:	ed2d 8b02 	vpush	{d8}
 800ca90:	ec55 4b10 	vmov	r4, r5, d0
 800ca94:	4bca      	ldr	r3, [pc, #808]	; (800cdc0 <__ieee754_rem_pio2+0x338>)
 800ca96:	b08b      	sub	sp, #44	; 0x2c
 800ca98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ca9c:	4598      	cmp	r8, r3
 800ca9e:	4682      	mov	sl, r0
 800caa0:	9502      	str	r5, [sp, #8]
 800caa2:	dc08      	bgt.n	800cab6 <__ieee754_rem_pio2+0x2e>
 800caa4:	2200      	movs	r2, #0
 800caa6:	2300      	movs	r3, #0
 800caa8:	ed80 0b00 	vstr	d0, [r0]
 800caac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cab0:	f04f 0b00 	mov.w	fp, #0
 800cab4:	e028      	b.n	800cb08 <__ieee754_rem_pio2+0x80>
 800cab6:	4bc3      	ldr	r3, [pc, #780]	; (800cdc4 <__ieee754_rem_pio2+0x33c>)
 800cab8:	4598      	cmp	r8, r3
 800caba:	dc78      	bgt.n	800cbae <__ieee754_rem_pio2+0x126>
 800cabc:	9b02      	ldr	r3, [sp, #8]
 800cabe:	4ec2      	ldr	r6, [pc, #776]	; (800cdc8 <__ieee754_rem_pio2+0x340>)
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	ee10 0a10 	vmov	r0, s0
 800cac6:	a3b0      	add	r3, pc, #704	; (adr r3, 800cd88 <__ieee754_rem_pio2+0x300>)
 800cac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cacc:	4629      	mov	r1, r5
 800cace:	dd39      	ble.n	800cb44 <__ieee754_rem_pio2+0xbc>
 800cad0:	f7f3 fbfa 	bl	80002c8 <__aeabi_dsub>
 800cad4:	45b0      	cmp	r8, r6
 800cad6:	4604      	mov	r4, r0
 800cad8:	460d      	mov	r5, r1
 800cada:	d01b      	beq.n	800cb14 <__ieee754_rem_pio2+0x8c>
 800cadc:	a3ac      	add	r3, pc, #688	; (adr r3, 800cd90 <__ieee754_rem_pio2+0x308>)
 800cade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae2:	f7f3 fbf1 	bl	80002c8 <__aeabi_dsub>
 800cae6:	4602      	mov	r2, r0
 800cae8:	460b      	mov	r3, r1
 800caea:	e9ca 2300 	strd	r2, r3, [sl]
 800caee:	4620      	mov	r0, r4
 800caf0:	4629      	mov	r1, r5
 800caf2:	f7f3 fbe9 	bl	80002c8 <__aeabi_dsub>
 800caf6:	a3a6      	add	r3, pc, #664	; (adr r3, 800cd90 <__ieee754_rem_pio2+0x308>)
 800caf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafc:	f7f3 fbe4 	bl	80002c8 <__aeabi_dsub>
 800cb00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cb04:	f04f 0b01 	mov.w	fp, #1
 800cb08:	4658      	mov	r0, fp
 800cb0a:	b00b      	add	sp, #44	; 0x2c
 800cb0c:	ecbd 8b02 	vpop	{d8}
 800cb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb14:	a3a0      	add	r3, pc, #640	; (adr r3, 800cd98 <__ieee754_rem_pio2+0x310>)
 800cb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1a:	f7f3 fbd5 	bl	80002c8 <__aeabi_dsub>
 800cb1e:	a3a0      	add	r3, pc, #640	; (adr r3, 800cda0 <__ieee754_rem_pio2+0x318>)
 800cb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb24:	4604      	mov	r4, r0
 800cb26:	460d      	mov	r5, r1
 800cb28:	f7f3 fbce 	bl	80002c8 <__aeabi_dsub>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	460b      	mov	r3, r1
 800cb30:	e9ca 2300 	strd	r2, r3, [sl]
 800cb34:	4620      	mov	r0, r4
 800cb36:	4629      	mov	r1, r5
 800cb38:	f7f3 fbc6 	bl	80002c8 <__aeabi_dsub>
 800cb3c:	a398      	add	r3, pc, #608	; (adr r3, 800cda0 <__ieee754_rem_pio2+0x318>)
 800cb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb42:	e7db      	b.n	800cafc <__ieee754_rem_pio2+0x74>
 800cb44:	f7f3 fbc2 	bl	80002cc <__adddf3>
 800cb48:	45b0      	cmp	r8, r6
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	460d      	mov	r5, r1
 800cb4e:	d016      	beq.n	800cb7e <__ieee754_rem_pio2+0xf6>
 800cb50:	a38f      	add	r3, pc, #572	; (adr r3, 800cd90 <__ieee754_rem_pio2+0x308>)
 800cb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb56:	f7f3 fbb9 	bl	80002cc <__adddf3>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	460b      	mov	r3, r1
 800cb5e:	e9ca 2300 	strd	r2, r3, [sl]
 800cb62:	4620      	mov	r0, r4
 800cb64:	4629      	mov	r1, r5
 800cb66:	f7f3 fbaf 	bl	80002c8 <__aeabi_dsub>
 800cb6a:	a389      	add	r3, pc, #548	; (adr r3, 800cd90 <__ieee754_rem_pio2+0x308>)
 800cb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb70:	f7f3 fbac 	bl	80002cc <__adddf3>
 800cb74:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800cb78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cb7c:	e7c4      	b.n	800cb08 <__ieee754_rem_pio2+0x80>
 800cb7e:	a386      	add	r3, pc, #536	; (adr r3, 800cd98 <__ieee754_rem_pio2+0x310>)
 800cb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb84:	f7f3 fba2 	bl	80002cc <__adddf3>
 800cb88:	a385      	add	r3, pc, #532	; (adr r3, 800cda0 <__ieee754_rem_pio2+0x318>)
 800cb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8e:	4604      	mov	r4, r0
 800cb90:	460d      	mov	r5, r1
 800cb92:	f7f3 fb9b 	bl	80002cc <__adddf3>
 800cb96:	4602      	mov	r2, r0
 800cb98:	460b      	mov	r3, r1
 800cb9a:	e9ca 2300 	strd	r2, r3, [sl]
 800cb9e:	4620      	mov	r0, r4
 800cba0:	4629      	mov	r1, r5
 800cba2:	f7f3 fb91 	bl	80002c8 <__aeabi_dsub>
 800cba6:	a37e      	add	r3, pc, #504	; (adr r3, 800cda0 <__ieee754_rem_pio2+0x318>)
 800cba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbac:	e7e0      	b.n	800cb70 <__ieee754_rem_pio2+0xe8>
 800cbae:	4b87      	ldr	r3, [pc, #540]	; (800cdcc <__ieee754_rem_pio2+0x344>)
 800cbb0:	4598      	cmp	r8, r3
 800cbb2:	f300 80d9 	bgt.w	800cd68 <__ieee754_rem_pio2+0x2e0>
 800cbb6:	f000 fe39 	bl	800d82c <fabs>
 800cbba:	ec55 4b10 	vmov	r4, r5, d0
 800cbbe:	ee10 0a10 	vmov	r0, s0
 800cbc2:	a379      	add	r3, pc, #484	; (adr r3, 800cda8 <__ieee754_rem_pio2+0x320>)
 800cbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc8:	4629      	mov	r1, r5
 800cbca:	f7f3 fd35 	bl	8000638 <__aeabi_dmul>
 800cbce:	4b80      	ldr	r3, [pc, #512]	; (800cdd0 <__ieee754_rem_pio2+0x348>)
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f7f3 fb7b 	bl	80002cc <__adddf3>
 800cbd6:	f7f3 ffdf 	bl	8000b98 <__aeabi_d2iz>
 800cbda:	4683      	mov	fp, r0
 800cbdc:	f7f3 fcc2 	bl	8000564 <__aeabi_i2d>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	ec43 2b18 	vmov	d8, r2, r3
 800cbe8:	a367      	add	r3, pc, #412	; (adr r3, 800cd88 <__ieee754_rem_pio2+0x300>)
 800cbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbee:	f7f3 fd23 	bl	8000638 <__aeabi_dmul>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	4629      	mov	r1, r5
 800cbfa:	f7f3 fb65 	bl	80002c8 <__aeabi_dsub>
 800cbfe:	a364      	add	r3, pc, #400	; (adr r3, 800cd90 <__ieee754_rem_pio2+0x308>)
 800cc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc04:	4606      	mov	r6, r0
 800cc06:	460f      	mov	r7, r1
 800cc08:	ec51 0b18 	vmov	r0, r1, d8
 800cc0c:	f7f3 fd14 	bl	8000638 <__aeabi_dmul>
 800cc10:	f1bb 0f1f 	cmp.w	fp, #31
 800cc14:	4604      	mov	r4, r0
 800cc16:	460d      	mov	r5, r1
 800cc18:	dc0d      	bgt.n	800cc36 <__ieee754_rem_pio2+0x1ae>
 800cc1a:	4b6e      	ldr	r3, [pc, #440]	; (800cdd4 <__ieee754_rem_pio2+0x34c>)
 800cc1c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800cc20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc24:	4543      	cmp	r3, r8
 800cc26:	d006      	beq.n	800cc36 <__ieee754_rem_pio2+0x1ae>
 800cc28:	4622      	mov	r2, r4
 800cc2a:	462b      	mov	r3, r5
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	4639      	mov	r1, r7
 800cc30:	f7f3 fb4a 	bl	80002c8 <__aeabi_dsub>
 800cc34:	e00f      	b.n	800cc56 <__ieee754_rem_pio2+0x1ce>
 800cc36:	462b      	mov	r3, r5
 800cc38:	4622      	mov	r2, r4
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	4639      	mov	r1, r7
 800cc3e:	f7f3 fb43 	bl	80002c8 <__aeabi_dsub>
 800cc42:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cc46:	9303      	str	r3, [sp, #12]
 800cc48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cc4c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800cc50:	f1b8 0f10 	cmp.w	r8, #16
 800cc54:	dc02      	bgt.n	800cc5c <__ieee754_rem_pio2+0x1d4>
 800cc56:	e9ca 0100 	strd	r0, r1, [sl]
 800cc5a:	e039      	b.n	800ccd0 <__ieee754_rem_pio2+0x248>
 800cc5c:	a34e      	add	r3, pc, #312	; (adr r3, 800cd98 <__ieee754_rem_pio2+0x310>)
 800cc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc62:	ec51 0b18 	vmov	r0, r1, d8
 800cc66:	f7f3 fce7 	bl	8000638 <__aeabi_dmul>
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	460d      	mov	r5, r1
 800cc6e:	4602      	mov	r2, r0
 800cc70:	460b      	mov	r3, r1
 800cc72:	4630      	mov	r0, r6
 800cc74:	4639      	mov	r1, r7
 800cc76:	f7f3 fb27 	bl	80002c8 <__aeabi_dsub>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	4680      	mov	r8, r0
 800cc80:	4689      	mov	r9, r1
 800cc82:	4630      	mov	r0, r6
 800cc84:	4639      	mov	r1, r7
 800cc86:	f7f3 fb1f 	bl	80002c8 <__aeabi_dsub>
 800cc8a:	4622      	mov	r2, r4
 800cc8c:	462b      	mov	r3, r5
 800cc8e:	f7f3 fb1b 	bl	80002c8 <__aeabi_dsub>
 800cc92:	a343      	add	r3, pc, #268	; (adr r3, 800cda0 <__ieee754_rem_pio2+0x318>)
 800cc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc98:	4604      	mov	r4, r0
 800cc9a:	460d      	mov	r5, r1
 800cc9c:	ec51 0b18 	vmov	r0, r1, d8
 800cca0:	f7f3 fcca 	bl	8000638 <__aeabi_dmul>
 800cca4:	4622      	mov	r2, r4
 800cca6:	462b      	mov	r3, r5
 800cca8:	f7f3 fb0e 	bl	80002c8 <__aeabi_dsub>
 800ccac:	4602      	mov	r2, r0
 800ccae:	460b      	mov	r3, r1
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	460d      	mov	r5, r1
 800ccb4:	4640      	mov	r0, r8
 800ccb6:	4649      	mov	r1, r9
 800ccb8:	f7f3 fb06 	bl	80002c8 <__aeabi_dsub>
 800ccbc:	9a03      	ldr	r2, [sp, #12]
 800ccbe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ccc2:	1ad3      	subs	r3, r2, r3
 800ccc4:	2b31      	cmp	r3, #49	; 0x31
 800ccc6:	dc24      	bgt.n	800cd12 <__ieee754_rem_pio2+0x28a>
 800ccc8:	e9ca 0100 	strd	r0, r1, [sl]
 800cccc:	4646      	mov	r6, r8
 800ccce:	464f      	mov	r7, r9
 800ccd0:	e9da 8900 	ldrd	r8, r9, [sl]
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	4642      	mov	r2, r8
 800ccd8:	464b      	mov	r3, r9
 800ccda:	4639      	mov	r1, r7
 800ccdc:	f7f3 faf4 	bl	80002c8 <__aeabi_dsub>
 800cce0:	462b      	mov	r3, r5
 800cce2:	4622      	mov	r2, r4
 800cce4:	f7f3 faf0 	bl	80002c8 <__aeabi_dsub>
 800cce8:	9b02      	ldr	r3, [sp, #8]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ccf0:	f6bf af0a 	bge.w	800cb08 <__ieee754_rem_pio2+0x80>
 800ccf4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ccf8:	f8ca 3004 	str.w	r3, [sl, #4]
 800ccfc:	f8ca 8000 	str.w	r8, [sl]
 800cd00:	f8ca 0008 	str.w	r0, [sl, #8]
 800cd04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd08:	f8ca 300c 	str.w	r3, [sl, #12]
 800cd0c:	f1cb 0b00 	rsb	fp, fp, #0
 800cd10:	e6fa      	b.n	800cb08 <__ieee754_rem_pio2+0x80>
 800cd12:	a327      	add	r3, pc, #156	; (adr r3, 800cdb0 <__ieee754_rem_pio2+0x328>)
 800cd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd18:	ec51 0b18 	vmov	r0, r1, d8
 800cd1c:	f7f3 fc8c 	bl	8000638 <__aeabi_dmul>
 800cd20:	4604      	mov	r4, r0
 800cd22:	460d      	mov	r5, r1
 800cd24:	4602      	mov	r2, r0
 800cd26:	460b      	mov	r3, r1
 800cd28:	4640      	mov	r0, r8
 800cd2a:	4649      	mov	r1, r9
 800cd2c:	f7f3 facc 	bl	80002c8 <__aeabi_dsub>
 800cd30:	4602      	mov	r2, r0
 800cd32:	460b      	mov	r3, r1
 800cd34:	4606      	mov	r6, r0
 800cd36:	460f      	mov	r7, r1
 800cd38:	4640      	mov	r0, r8
 800cd3a:	4649      	mov	r1, r9
 800cd3c:	f7f3 fac4 	bl	80002c8 <__aeabi_dsub>
 800cd40:	4622      	mov	r2, r4
 800cd42:	462b      	mov	r3, r5
 800cd44:	f7f3 fac0 	bl	80002c8 <__aeabi_dsub>
 800cd48:	a31b      	add	r3, pc, #108	; (adr r3, 800cdb8 <__ieee754_rem_pio2+0x330>)
 800cd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4e:	4604      	mov	r4, r0
 800cd50:	460d      	mov	r5, r1
 800cd52:	ec51 0b18 	vmov	r0, r1, d8
 800cd56:	f7f3 fc6f 	bl	8000638 <__aeabi_dmul>
 800cd5a:	4622      	mov	r2, r4
 800cd5c:	462b      	mov	r3, r5
 800cd5e:	f7f3 fab3 	bl	80002c8 <__aeabi_dsub>
 800cd62:	4604      	mov	r4, r0
 800cd64:	460d      	mov	r5, r1
 800cd66:	e75f      	b.n	800cc28 <__ieee754_rem_pio2+0x1a0>
 800cd68:	4b1b      	ldr	r3, [pc, #108]	; (800cdd8 <__ieee754_rem_pio2+0x350>)
 800cd6a:	4598      	cmp	r8, r3
 800cd6c:	dd36      	ble.n	800cddc <__ieee754_rem_pio2+0x354>
 800cd6e:	ee10 2a10 	vmov	r2, s0
 800cd72:	462b      	mov	r3, r5
 800cd74:	4620      	mov	r0, r4
 800cd76:	4629      	mov	r1, r5
 800cd78:	f7f3 faa6 	bl	80002c8 <__aeabi_dsub>
 800cd7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cd80:	e9ca 0100 	strd	r0, r1, [sl]
 800cd84:	e694      	b.n	800cab0 <__ieee754_rem_pio2+0x28>
 800cd86:	bf00      	nop
 800cd88:	54400000 	.word	0x54400000
 800cd8c:	3ff921fb 	.word	0x3ff921fb
 800cd90:	1a626331 	.word	0x1a626331
 800cd94:	3dd0b461 	.word	0x3dd0b461
 800cd98:	1a600000 	.word	0x1a600000
 800cd9c:	3dd0b461 	.word	0x3dd0b461
 800cda0:	2e037073 	.word	0x2e037073
 800cda4:	3ba3198a 	.word	0x3ba3198a
 800cda8:	6dc9c883 	.word	0x6dc9c883
 800cdac:	3fe45f30 	.word	0x3fe45f30
 800cdb0:	2e000000 	.word	0x2e000000
 800cdb4:	3ba3198a 	.word	0x3ba3198a
 800cdb8:	252049c1 	.word	0x252049c1
 800cdbc:	397b839a 	.word	0x397b839a
 800cdc0:	3fe921fb 	.word	0x3fe921fb
 800cdc4:	4002d97b 	.word	0x4002d97b
 800cdc8:	3ff921fb 	.word	0x3ff921fb
 800cdcc:	413921fb 	.word	0x413921fb
 800cdd0:	3fe00000 	.word	0x3fe00000
 800cdd4:	08011354 	.word	0x08011354
 800cdd8:	7fefffff 	.word	0x7fefffff
 800cddc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800cde0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800cde4:	ee10 0a10 	vmov	r0, s0
 800cde8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800cdec:	ee10 6a10 	vmov	r6, s0
 800cdf0:	460f      	mov	r7, r1
 800cdf2:	f7f3 fed1 	bl	8000b98 <__aeabi_d2iz>
 800cdf6:	f7f3 fbb5 	bl	8000564 <__aeabi_i2d>
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	4630      	mov	r0, r6
 800ce00:	4639      	mov	r1, r7
 800ce02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce06:	f7f3 fa5f 	bl	80002c8 <__aeabi_dsub>
 800ce0a:	4b22      	ldr	r3, [pc, #136]	; (800ce94 <__ieee754_rem_pio2+0x40c>)
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f7f3 fc13 	bl	8000638 <__aeabi_dmul>
 800ce12:	460f      	mov	r7, r1
 800ce14:	4606      	mov	r6, r0
 800ce16:	f7f3 febf 	bl	8000b98 <__aeabi_d2iz>
 800ce1a:	f7f3 fba3 	bl	8000564 <__aeabi_i2d>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	460b      	mov	r3, r1
 800ce22:	4630      	mov	r0, r6
 800ce24:	4639      	mov	r1, r7
 800ce26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ce2a:	f7f3 fa4d 	bl	80002c8 <__aeabi_dsub>
 800ce2e:	4b19      	ldr	r3, [pc, #100]	; (800ce94 <__ieee754_rem_pio2+0x40c>)
 800ce30:	2200      	movs	r2, #0
 800ce32:	f7f3 fc01 	bl	8000638 <__aeabi_dmul>
 800ce36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ce3a:	ad04      	add	r5, sp, #16
 800ce3c:	f04f 0803 	mov.w	r8, #3
 800ce40:	46a9      	mov	r9, r5
 800ce42:	2600      	movs	r6, #0
 800ce44:	2700      	movs	r7, #0
 800ce46:	4632      	mov	r2, r6
 800ce48:	463b      	mov	r3, r7
 800ce4a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ce4e:	46c3      	mov	fp, r8
 800ce50:	3d08      	subs	r5, #8
 800ce52:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ce56:	f7f3 fe57 	bl	8000b08 <__aeabi_dcmpeq>
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	d1f3      	bne.n	800ce46 <__ieee754_rem_pio2+0x3be>
 800ce5e:	4b0e      	ldr	r3, [pc, #56]	; (800ce98 <__ieee754_rem_pio2+0x410>)
 800ce60:	9301      	str	r3, [sp, #4]
 800ce62:	2302      	movs	r3, #2
 800ce64:	9300      	str	r3, [sp, #0]
 800ce66:	4622      	mov	r2, r4
 800ce68:	465b      	mov	r3, fp
 800ce6a:	4651      	mov	r1, sl
 800ce6c:	4648      	mov	r0, r9
 800ce6e:	f000 f8df 	bl	800d030 <__kernel_rem_pio2>
 800ce72:	9b02      	ldr	r3, [sp, #8]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	4683      	mov	fp, r0
 800ce78:	f6bf ae46 	bge.w	800cb08 <__ieee754_rem_pio2+0x80>
 800ce7c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ce80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ce84:	f8ca 3004 	str.w	r3, [sl, #4]
 800ce88:	f8da 300c 	ldr.w	r3, [sl, #12]
 800ce8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ce90:	e73a      	b.n	800cd08 <__ieee754_rem_pio2+0x280>
 800ce92:	bf00      	nop
 800ce94:	41700000 	.word	0x41700000
 800ce98:	080113d4 	.word	0x080113d4
 800ce9c:	00000000 	.word	0x00000000

0800cea0 <__kernel_cos>:
 800cea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea4:	ec57 6b10 	vmov	r6, r7, d0
 800cea8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ceac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ceb0:	ed8d 1b00 	vstr	d1, [sp]
 800ceb4:	da07      	bge.n	800cec6 <__kernel_cos+0x26>
 800ceb6:	ee10 0a10 	vmov	r0, s0
 800ceba:	4639      	mov	r1, r7
 800cebc:	f7f3 fe6c 	bl	8000b98 <__aeabi_d2iz>
 800cec0:	2800      	cmp	r0, #0
 800cec2:	f000 8088 	beq.w	800cfd6 <__kernel_cos+0x136>
 800cec6:	4632      	mov	r2, r6
 800cec8:	463b      	mov	r3, r7
 800ceca:	4630      	mov	r0, r6
 800cecc:	4639      	mov	r1, r7
 800cece:	f7f3 fbb3 	bl	8000638 <__aeabi_dmul>
 800ced2:	4b51      	ldr	r3, [pc, #324]	; (800d018 <__kernel_cos+0x178>)
 800ced4:	2200      	movs	r2, #0
 800ced6:	4604      	mov	r4, r0
 800ced8:	460d      	mov	r5, r1
 800ceda:	f7f3 fbad 	bl	8000638 <__aeabi_dmul>
 800cede:	a340      	add	r3, pc, #256	; (adr r3, 800cfe0 <__kernel_cos+0x140>)
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	4682      	mov	sl, r0
 800cee6:	468b      	mov	fp, r1
 800cee8:	4620      	mov	r0, r4
 800ceea:	4629      	mov	r1, r5
 800ceec:	f7f3 fba4 	bl	8000638 <__aeabi_dmul>
 800cef0:	a33d      	add	r3, pc, #244	; (adr r3, 800cfe8 <__kernel_cos+0x148>)
 800cef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef6:	f7f3 f9e9 	bl	80002cc <__adddf3>
 800cefa:	4622      	mov	r2, r4
 800cefc:	462b      	mov	r3, r5
 800cefe:	f7f3 fb9b 	bl	8000638 <__aeabi_dmul>
 800cf02:	a33b      	add	r3, pc, #236	; (adr r3, 800cff0 <__kernel_cos+0x150>)
 800cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf08:	f7f3 f9de 	bl	80002c8 <__aeabi_dsub>
 800cf0c:	4622      	mov	r2, r4
 800cf0e:	462b      	mov	r3, r5
 800cf10:	f7f3 fb92 	bl	8000638 <__aeabi_dmul>
 800cf14:	a338      	add	r3, pc, #224	; (adr r3, 800cff8 <__kernel_cos+0x158>)
 800cf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1a:	f7f3 f9d7 	bl	80002cc <__adddf3>
 800cf1e:	4622      	mov	r2, r4
 800cf20:	462b      	mov	r3, r5
 800cf22:	f7f3 fb89 	bl	8000638 <__aeabi_dmul>
 800cf26:	a336      	add	r3, pc, #216	; (adr r3, 800d000 <__kernel_cos+0x160>)
 800cf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2c:	f7f3 f9cc 	bl	80002c8 <__aeabi_dsub>
 800cf30:	4622      	mov	r2, r4
 800cf32:	462b      	mov	r3, r5
 800cf34:	f7f3 fb80 	bl	8000638 <__aeabi_dmul>
 800cf38:	a333      	add	r3, pc, #204	; (adr r3, 800d008 <__kernel_cos+0x168>)
 800cf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3e:	f7f3 f9c5 	bl	80002cc <__adddf3>
 800cf42:	4622      	mov	r2, r4
 800cf44:	462b      	mov	r3, r5
 800cf46:	f7f3 fb77 	bl	8000638 <__aeabi_dmul>
 800cf4a:	4622      	mov	r2, r4
 800cf4c:	462b      	mov	r3, r5
 800cf4e:	f7f3 fb73 	bl	8000638 <__aeabi_dmul>
 800cf52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf56:	4604      	mov	r4, r0
 800cf58:	460d      	mov	r5, r1
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	4639      	mov	r1, r7
 800cf5e:	f7f3 fb6b 	bl	8000638 <__aeabi_dmul>
 800cf62:	460b      	mov	r3, r1
 800cf64:	4602      	mov	r2, r0
 800cf66:	4629      	mov	r1, r5
 800cf68:	4620      	mov	r0, r4
 800cf6a:	f7f3 f9ad 	bl	80002c8 <__aeabi_dsub>
 800cf6e:	4b2b      	ldr	r3, [pc, #172]	; (800d01c <__kernel_cos+0x17c>)
 800cf70:	4598      	cmp	r8, r3
 800cf72:	4606      	mov	r6, r0
 800cf74:	460f      	mov	r7, r1
 800cf76:	dc10      	bgt.n	800cf9a <__kernel_cos+0xfa>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	4650      	mov	r0, sl
 800cf7e:	4659      	mov	r1, fp
 800cf80:	f7f3 f9a2 	bl	80002c8 <__aeabi_dsub>
 800cf84:	460b      	mov	r3, r1
 800cf86:	4926      	ldr	r1, [pc, #152]	; (800d020 <__kernel_cos+0x180>)
 800cf88:	4602      	mov	r2, r0
 800cf8a:	2000      	movs	r0, #0
 800cf8c:	f7f3 f99c 	bl	80002c8 <__aeabi_dsub>
 800cf90:	ec41 0b10 	vmov	d0, r0, r1
 800cf94:	b003      	add	sp, #12
 800cf96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf9a:	4b22      	ldr	r3, [pc, #136]	; (800d024 <__kernel_cos+0x184>)
 800cf9c:	4920      	ldr	r1, [pc, #128]	; (800d020 <__kernel_cos+0x180>)
 800cf9e:	4598      	cmp	r8, r3
 800cfa0:	bfcc      	ite	gt
 800cfa2:	4d21      	ldrgt	r5, [pc, #132]	; (800d028 <__kernel_cos+0x188>)
 800cfa4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800cfa8:	2400      	movs	r4, #0
 800cfaa:	4622      	mov	r2, r4
 800cfac:	462b      	mov	r3, r5
 800cfae:	2000      	movs	r0, #0
 800cfb0:	f7f3 f98a 	bl	80002c8 <__aeabi_dsub>
 800cfb4:	4622      	mov	r2, r4
 800cfb6:	4680      	mov	r8, r0
 800cfb8:	4689      	mov	r9, r1
 800cfba:	462b      	mov	r3, r5
 800cfbc:	4650      	mov	r0, sl
 800cfbe:	4659      	mov	r1, fp
 800cfc0:	f7f3 f982 	bl	80002c8 <__aeabi_dsub>
 800cfc4:	4632      	mov	r2, r6
 800cfc6:	463b      	mov	r3, r7
 800cfc8:	f7f3 f97e 	bl	80002c8 <__aeabi_dsub>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	460b      	mov	r3, r1
 800cfd0:	4640      	mov	r0, r8
 800cfd2:	4649      	mov	r1, r9
 800cfd4:	e7da      	b.n	800cf8c <__kernel_cos+0xec>
 800cfd6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d010 <__kernel_cos+0x170>
 800cfda:	e7db      	b.n	800cf94 <__kernel_cos+0xf4>
 800cfdc:	f3af 8000 	nop.w
 800cfe0:	be8838d4 	.word	0xbe8838d4
 800cfe4:	bda8fae9 	.word	0xbda8fae9
 800cfe8:	bdb4b1c4 	.word	0xbdb4b1c4
 800cfec:	3e21ee9e 	.word	0x3e21ee9e
 800cff0:	809c52ad 	.word	0x809c52ad
 800cff4:	3e927e4f 	.word	0x3e927e4f
 800cff8:	19cb1590 	.word	0x19cb1590
 800cffc:	3efa01a0 	.word	0x3efa01a0
 800d000:	16c15177 	.word	0x16c15177
 800d004:	3f56c16c 	.word	0x3f56c16c
 800d008:	5555554c 	.word	0x5555554c
 800d00c:	3fa55555 	.word	0x3fa55555
 800d010:	00000000 	.word	0x00000000
 800d014:	3ff00000 	.word	0x3ff00000
 800d018:	3fe00000 	.word	0x3fe00000
 800d01c:	3fd33332 	.word	0x3fd33332
 800d020:	3ff00000 	.word	0x3ff00000
 800d024:	3fe90000 	.word	0x3fe90000
 800d028:	3fd20000 	.word	0x3fd20000
 800d02c:	00000000 	.word	0x00000000

0800d030 <__kernel_rem_pio2>:
 800d030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d034:	ed2d 8b02 	vpush	{d8}
 800d038:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d03c:	f112 0f14 	cmn.w	r2, #20
 800d040:	9308      	str	r3, [sp, #32]
 800d042:	9101      	str	r1, [sp, #4]
 800d044:	4bc6      	ldr	r3, [pc, #792]	; (800d360 <__kernel_rem_pio2+0x330>)
 800d046:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d048:	9009      	str	r0, [sp, #36]	; 0x24
 800d04a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d04e:	9304      	str	r3, [sp, #16]
 800d050:	9b08      	ldr	r3, [sp, #32]
 800d052:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d056:	bfa8      	it	ge
 800d058:	1ed4      	subge	r4, r2, #3
 800d05a:	9306      	str	r3, [sp, #24]
 800d05c:	bfb2      	itee	lt
 800d05e:	2400      	movlt	r4, #0
 800d060:	2318      	movge	r3, #24
 800d062:	fb94 f4f3 	sdivge	r4, r4, r3
 800d066:	f06f 0317 	mvn.w	r3, #23
 800d06a:	fb04 3303 	mla	r3, r4, r3, r3
 800d06e:	eb03 0a02 	add.w	sl, r3, r2
 800d072:	9b04      	ldr	r3, [sp, #16]
 800d074:	9a06      	ldr	r2, [sp, #24]
 800d076:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800d350 <__kernel_rem_pio2+0x320>
 800d07a:	eb03 0802 	add.w	r8, r3, r2
 800d07e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d080:	1aa7      	subs	r7, r4, r2
 800d082:	ae20      	add	r6, sp, #128	; 0x80
 800d084:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d088:	2500      	movs	r5, #0
 800d08a:	4545      	cmp	r5, r8
 800d08c:	dd18      	ble.n	800d0c0 <__kernel_rem_pio2+0x90>
 800d08e:	9b08      	ldr	r3, [sp, #32]
 800d090:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d094:	aa20      	add	r2, sp, #128	; 0x80
 800d096:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800d350 <__kernel_rem_pio2+0x320>
 800d09a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d09e:	f1c3 0301 	rsb	r3, r3, #1
 800d0a2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d0a6:	9307      	str	r3, [sp, #28]
 800d0a8:	9b07      	ldr	r3, [sp, #28]
 800d0aa:	9a04      	ldr	r2, [sp, #16]
 800d0ac:	4443      	add	r3, r8
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	db2f      	blt.n	800d112 <__kernel_rem_pio2+0xe2>
 800d0b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d0b6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d0ba:	462f      	mov	r7, r5
 800d0bc:	2600      	movs	r6, #0
 800d0be:	e01b      	b.n	800d0f8 <__kernel_rem_pio2+0xc8>
 800d0c0:	42ef      	cmn	r7, r5
 800d0c2:	d407      	bmi.n	800d0d4 <__kernel_rem_pio2+0xa4>
 800d0c4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d0c8:	f7f3 fa4c 	bl	8000564 <__aeabi_i2d>
 800d0cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d0d0:	3501      	adds	r5, #1
 800d0d2:	e7da      	b.n	800d08a <__kernel_rem_pio2+0x5a>
 800d0d4:	ec51 0b18 	vmov	r0, r1, d8
 800d0d8:	e7f8      	b.n	800d0cc <__kernel_rem_pio2+0x9c>
 800d0da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0de:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d0e2:	f7f3 faa9 	bl	8000638 <__aeabi_dmul>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0ee:	f7f3 f8ed 	bl	80002cc <__adddf3>
 800d0f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0f6:	3601      	adds	r6, #1
 800d0f8:	9b06      	ldr	r3, [sp, #24]
 800d0fa:	429e      	cmp	r6, r3
 800d0fc:	f1a7 0708 	sub.w	r7, r7, #8
 800d100:	ddeb      	ble.n	800d0da <__kernel_rem_pio2+0xaa>
 800d102:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d106:	3508      	adds	r5, #8
 800d108:	ecab 7b02 	vstmia	fp!, {d7}
 800d10c:	f108 0801 	add.w	r8, r8, #1
 800d110:	e7ca      	b.n	800d0a8 <__kernel_rem_pio2+0x78>
 800d112:	9b04      	ldr	r3, [sp, #16]
 800d114:	aa0c      	add	r2, sp, #48	; 0x30
 800d116:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d11a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d11c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d11e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d122:	9c04      	ldr	r4, [sp, #16]
 800d124:	930a      	str	r3, [sp, #40]	; 0x28
 800d126:	ab98      	add	r3, sp, #608	; 0x260
 800d128:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d12c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d130:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800d134:	f8cd b008 	str.w	fp, [sp, #8]
 800d138:	4625      	mov	r5, r4
 800d13a:	2d00      	cmp	r5, #0
 800d13c:	dc78      	bgt.n	800d230 <__kernel_rem_pio2+0x200>
 800d13e:	ec47 6b10 	vmov	d0, r6, r7
 800d142:	4650      	mov	r0, sl
 800d144:	f000 fbfc 	bl	800d940 <scalbn>
 800d148:	ec57 6b10 	vmov	r6, r7, d0
 800d14c:	2200      	movs	r2, #0
 800d14e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d152:	ee10 0a10 	vmov	r0, s0
 800d156:	4639      	mov	r1, r7
 800d158:	f7f3 fa6e 	bl	8000638 <__aeabi_dmul>
 800d15c:	ec41 0b10 	vmov	d0, r0, r1
 800d160:	f000 fb6e 	bl	800d840 <floor>
 800d164:	4b7f      	ldr	r3, [pc, #508]	; (800d364 <__kernel_rem_pio2+0x334>)
 800d166:	ec51 0b10 	vmov	r0, r1, d0
 800d16a:	2200      	movs	r2, #0
 800d16c:	f7f3 fa64 	bl	8000638 <__aeabi_dmul>
 800d170:	4602      	mov	r2, r0
 800d172:	460b      	mov	r3, r1
 800d174:	4630      	mov	r0, r6
 800d176:	4639      	mov	r1, r7
 800d178:	f7f3 f8a6 	bl	80002c8 <__aeabi_dsub>
 800d17c:	460f      	mov	r7, r1
 800d17e:	4606      	mov	r6, r0
 800d180:	f7f3 fd0a 	bl	8000b98 <__aeabi_d2iz>
 800d184:	9007      	str	r0, [sp, #28]
 800d186:	f7f3 f9ed 	bl	8000564 <__aeabi_i2d>
 800d18a:	4602      	mov	r2, r0
 800d18c:	460b      	mov	r3, r1
 800d18e:	4630      	mov	r0, r6
 800d190:	4639      	mov	r1, r7
 800d192:	f7f3 f899 	bl	80002c8 <__aeabi_dsub>
 800d196:	f1ba 0f00 	cmp.w	sl, #0
 800d19a:	4606      	mov	r6, r0
 800d19c:	460f      	mov	r7, r1
 800d19e:	dd70      	ble.n	800d282 <__kernel_rem_pio2+0x252>
 800d1a0:	1e62      	subs	r2, r4, #1
 800d1a2:	ab0c      	add	r3, sp, #48	; 0x30
 800d1a4:	9d07      	ldr	r5, [sp, #28]
 800d1a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d1aa:	f1ca 0118 	rsb	r1, sl, #24
 800d1ae:	fa40 f301 	asr.w	r3, r0, r1
 800d1b2:	441d      	add	r5, r3
 800d1b4:	408b      	lsls	r3, r1
 800d1b6:	1ac0      	subs	r0, r0, r3
 800d1b8:	ab0c      	add	r3, sp, #48	; 0x30
 800d1ba:	9507      	str	r5, [sp, #28]
 800d1bc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d1c0:	f1ca 0317 	rsb	r3, sl, #23
 800d1c4:	fa40 f303 	asr.w	r3, r0, r3
 800d1c8:	9302      	str	r3, [sp, #8]
 800d1ca:	9b02      	ldr	r3, [sp, #8]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	dd66      	ble.n	800d29e <__kernel_rem_pio2+0x26e>
 800d1d0:	9b07      	ldr	r3, [sp, #28]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	9307      	str	r3, [sp, #28]
 800d1d8:	4615      	mov	r5, r2
 800d1da:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d1de:	4294      	cmp	r4, r2
 800d1e0:	f300 8099 	bgt.w	800d316 <__kernel_rem_pio2+0x2e6>
 800d1e4:	f1ba 0f00 	cmp.w	sl, #0
 800d1e8:	dd07      	ble.n	800d1fa <__kernel_rem_pio2+0x1ca>
 800d1ea:	f1ba 0f01 	cmp.w	sl, #1
 800d1ee:	f000 80a5 	beq.w	800d33c <__kernel_rem_pio2+0x30c>
 800d1f2:	f1ba 0f02 	cmp.w	sl, #2
 800d1f6:	f000 80c1 	beq.w	800d37c <__kernel_rem_pio2+0x34c>
 800d1fa:	9b02      	ldr	r3, [sp, #8]
 800d1fc:	2b02      	cmp	r3, #2
 800d1fe:	d14e      	bne.n	800d29e <__kernel_rem_pio2+0x26e>
 800d200:	4632      	mov	r2, r6
 800d202:	463b      	mov	r3, r7
 800d204:	4958      	ldr	r1, [pc, #352]	; (800d368 <__kernel_rem_pio2+0x338>)
 800d206:	2000      	movs	r0, #0
 800d208:	f7f3 f85e 	bl	80002c8 <__aeabi_dsub>
 800d20c:	4606      	mov	r6, r0
 800d20e:	460f      	mov	r7, r1
 800d210:	2d00      	cmp	r5, #0
 800d212:	d044      	beq.n	800d29e <__kernel_rem_pio2+0x26e>
 800d214:	4650      	mov	r0, sl
 800d216:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800d358 <__kernel_rem_pio2+0x328>
 800d21a:	f000 fb91 	bl	800d940 <scalbn>
 800d21e:	4630      	mov	r0, r6
 800d220:	4639      	mov	r1, r7
 800d222:	ec53 2b10 	vmov	r2, r3, d0
 800d226:	f7f3 f84f 	bl	80002c8 <__aeabi_dsub>
 800d22a:	4606      	mov	r6, r0
 800d22c:	460f      	mov	r7, r1
 800d22e:	e036      	b.n	800d29e <__kernel_rem_pio2+0x26e>
 800d230:	4b4e      	ldr	r3, [pc, #312]	; (800d36c <__kernel_rem_pio2+0x33c>)
 800d232:	2200      	movs	r2, #0
 800d234:	4630      	mov	r0, r6
 800d236:	4639      	mov	r1, r7
 800d238:	f7f3 f9fe 	bl	8000638 <__aeabi_dmul>
 800d23c:	f7f3 fcac 	bl	8000b98 <__aeabi_d2iz>
 800d240:	f7f3 f990 	bl	8000564 <__aeabi_i2d>
 800d244:	4b4a      	ldr	r3, [pc, #296]	; (800d370 <__kernel_rem_pio2+0x340>)
 800d246:	2200      	movs	r2, #0
 800d248:	4680      	mov	r8, r0
 800d24a:	4689      	mov	r9, r1
 800d24c:	f7f3 f9f4 	bl	8000638 <__aeabi_dmul>
 800d250:	4602      	mov	r2, r0
 800d252:	460b      	mov	r3, r1
 800d254:	4630      	mov	r0, r6
 800d256:	4639      	mov	r1, r7
 800d258:	f7f3 f836 	bl	80002c8 <__aeabi_dsub>
 800d25c:	f7f3 fc9c 	bl	8000b98 <__aeabi_d2iz>
 800d260:	9b02      	ldr	r3, [sp, #8]
 800d262:	f843 0b04 	str.w	r0, [r3], #4
 800d266:	3d01      	subs	r5, #1
 800d268:	9302      	str	r3, [sp, #8]
 800d26a:	ab70      	add	r3, sp, #448	; 0x1c0
 800d26c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d274:	4640      	mov	r0, r8
 800d276:	4649      	mov	r1, r9
 800d278:	f7f3 f828 	bl	80002cc <__adddf3>
 800d27c:	4606      	mov	r6, r0
 800d27e:	460f      	mov	r7, r1
 800d280:	e75b      	b.n	800d13a <__kernel_rem_pio2+0x10a>
 800d282:	d105      	bne.n	800d290 <__kernel_rem_pio2+0x260>
 800d284:	1e63      	subs	r3, r4, #1
 800d286:	aa0c      	add	r2, sp, #48	; 0x30
 800d288:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d28c:	15c3      	asrs	r3, r0, #23
 800d28e:	e79b      	b.n	800d1c8 <__kernel_rem_pio2+0x198>
 800d290:	4b38      	ldr	r3, [pc, #224]	; (800d374 <__kernel_rem_pio2+0x344>)
 800d292:	2200      	movs	r2, #0
 800d294:	f7f3 fc56 	bl	8000b44 <__aeabi_dcmpge>
 800d298:	2800      	cmp	r0, #0
 800d29a:	d139      	bne.n	800d310 <__kernel_rem_pio2+0x2e0>
 800d29c:	9002      	str	r0, [sp, #8]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	4630      	mov	r0, r6
 800d2a4:	4639      	mov	r1, r7
 800d2a6:	f7f3 fc2f 	bl	8000b08 <__aeabi_dcmpeq>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	f000 80b4 	beq.w	800d418 <__kernel_rem_pio2+0x3e8>
 800d2b0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800d2b4:	465b      	mov	r3, fp
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	9904      	ldr	r1, [sp, #16]
 800d2ba:	428b      	cmp	r3, r1
 800d2bc:	da65      	bge.n	800d38a <__kernel_rem_pio2+0x35a>
 800d2be:	2a00      	cmp	r2, #0
 800d2c0:	d07b      	beq.n	800d3ba <__kernel_rem_pio2+0x38a>
 800d2c2:	ab0c      	add	r3, sp, #48	; 0x30
 800d2c4:	f1aa 0a18 	sub.w	sl, sl, #24
 800d2c8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	f000 80a0 	beq.w	800d412 <__kernel_rem_pio2+0x3e2>
 800d2d2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800d358 <__kernel_rem_pio2+0x328>
 800d2d6:	4650      	mov	r0, sl
 800d2d8:	f000 fb32 	bl	800d940 <scalbn>
 800d2dc:	4f23      	ldr	r7, [pc, #140]	; (800d36c <__kernel_rem_pio2+0x33c>)
 800d2de:	ec55 4b10 	vmov	r4, r5, d0
 800d2e2:	46d8      	mov	r8, fp
 800d2e4:	2600      	movs	r6, #0
 800d2e6:	f1b8 0f00 	cmp.w	r8, #0
 800d2ea:	f280 80cf 	bge.w	800d48c <__kernel_rem_pio2+0x45c>
 800d2ee:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800d350 <__kernel_rem_pio2+0x320>
 800d2f2:	465f      	mov	r7, fp
 800d2f4:	f04f 0800 	mov.w	r8, #0
 800d2f8:	2f00      	cmp	r7, #0
 800d2fa:	f2c0 80fd 	blt.w	800d4f8 <__kernel_rem_pio2+0x4c8>
 800d2fe:	ab70      	add	r3, sp, #448	; 0x1c0
 800d300:	f8df a074 	ldr.w	sl, [pc, #116]	; 800d378 <__kernel_rem_pio2+0x348>
 800d304:	ec55 4b18 	vmov	r4, r5, d8
 800d308:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800d30c:	2600      	movs	r6, #0
 800d30e:	e0e5      	b.n	800d4dc <__kernel_rem_pio2+0x4ac>
 800d310:	2302      	movs	r3, #2
 800d312:	9302      	str	r3, [sp, #8]
 800d314:	e75c      	b.n	800d1d0 <__kernel_rem_pio2+0x1a0>
 800d316:	f8db 3000 	ldr.w	r3, [fp]
 800d31a:	b955      	cbnz	r5, 800d332 <__kernel_rem_pio2+0x302>
 800d31c:	b123      	cbz	r3, 800d328 <__kernel_rem_pio2+0x2f8>
 800d31e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d322:	f8cb 3000 	str.w	r3, [fp]
 800d326:	2301      	movs	r3, #1
 800d328:	3201      	adds	r2, #1
 800d32a:	f10b 0b04 	add.w	fp, fp, #4
 800d32e:	461d      	mov	r5, r3
 800d330:	e755      	b.n	800d1de <__kernel_rem_pio2+0x1ae>
 800d332:	1acb      	subs	r3, r1, r3
 800d334:	f8cb 3000 	str.w	r3, [fp]
 800d338:	462b      	mov	r3, r5
 800d33a:	e7f5      	b.n	800d328 <__kernel_rem_pio2+0x2f8>
 800d33c:	1e62      	subs	r2, r4, #1
 800d33e:	ab0c      	add	r3, sp, #48	; 0x30
 800d340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d344:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d348:	a90c      	add	r1, sp, #48	; 0x30
 800d34a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d34e:	e754      	b.n	800d1fa <__kernel_rem_pio2+0x1ca>
	...
 800d35c:	3ff00000 	.word	0x3ff00000
 800d360:	08011520 	.word	0x08011520
 800d364:	40200000 	.word	0x40200000
 800d368:	3ff00000 	.word	0x3ff00000
 800d36c:	3e700000 	.word	0x3e700000
 800d370:	41700000 	.word	0x41700000
 800d374:	3fe00000 	.word	0x3fe00000
 800d378:	080114e0 	.word	0x080114e0
 800d37c:	1e62      	subs	r2, r4, #1
 800d37e:	ab0c      	add	r3, sp, #48	; 0x30
 800d380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d384:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d388:	e7de      	b.n	800d348 <__kernel_rem_pio2+0x318>
 800d38a:	a90c      	add	r1, sp, #48	; 0x30
 800d38c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d390:	3b01      	subs	r3, #1
 800d392:	430a      	orrs	r2, r1
 800d394:	e790      	b.n	800d2b8 <__kernel_rem_pio2+0x288>
 800d396:	3301      	adds	r3, #1
 800d398:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d39c:	2900      	cmp	r1, #0
 800d39e:	d0fa      	beq.n	800d396 <__kernel_rem_pio2+0x366>
 800d3a0:	9a08      	ldr	r2, [sp, #32]
 800d3a2:	18e3      	adds	r3, r4, r3
 800d3a4:	18a6      	adds	r6, r4, r2
 800d3a6:	aa20      	add	r2, sp, #128	; 0x80
 800d3a8:	1c65      	adds	r5, r4, #1
 800d3aa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d3ae:	9302      	str	r3, [sp, #8]
 800d3b0:	9b02      	ldr	r3, [sp, #8]
 800d3b2:	42ab      	cmp	r3, r5
 800d3b4:	da04      	bge.n	800d3c0 <__kernel_rem_pio2+0x390>
 800d3b6:	461c      	mov	r4, r3
 800d3b8:	e6b5      	b.n	800d126 <__kernel_rem_pio2+0xf6>
 800d3ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3bc:	2301      	movs	r3, #1
 800d3be:	e7eb      	b.n	800d398 <__kernel_rem_pio2+0x368>
 800d3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3c6:	f7f3 f8cd 	bl	8000564 <__aeabi_i2d>
 800d3ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3d0:	46b3      	mov	fp, r6
 800d3d2:	461c      	mov	r4, r3
 800d3d4:	2700      	movs	r7, #0
 800d3d6:	f04f 0800 	mov.w	r8, #0
 800d3da:	f04f 0900 	mov.w	r9, #0
 800d3de:	9b06      	ldr	r3, [sp, #24]
 800d3e0:	429f      	cmp	r7, r3
 800d3e2:	dd06      	ble.n	800d3f2 <__kernel_rem_pio2+0x3c2>
 800d3e4:	ab70      	add	r3, sp, #448	; 0x1c0
 800d3e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d3ea:	e9c3 8900 	strd	r8, r9, [r3]
 800d3ee:	3501      	adds	r5, #1
 800d3f0:	e7de      	b.n	800d3b0 <__kernel_rem_pio2+0x380>
 800d3f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d3f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d3fa:	f7f3 f91d 	bl	8000638 <__aeabi_dmul>
 800d3fe:	4602      	mov	r2, r0
 800d400:	460b      	mov	r3, r1
 800d402:	4640      	mov	r0, r8
 800d404:	4649      	mov	r1, r9
 800d406:	f7f2 ff61 	bl	80002cc <__adddf3>
 800d40a:	3701      	adds	r7, #1
 800d40c:	4680      	mov	r8, r0
 800d40e:	4689      	mov	r9, r1
 800d410:	e7e5      	b.n	800d3de <__kernel_rem_pio2+0x3ae>
 800d412:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d416:	e754      	b.n	800d2c2 <__kernel_rem_pio2+0x292>
 800d418:	ec47 6b10 	vmov	d0, r6, r7
 800d41c:	f1ca 0000 	rsb	r0, sl, #0
 800d420:	f000 fa8e 	bl	800d940 <scalbn>
 800d424:	ec57 6b10 	vmov	r6, r7, d0
 800d428:	4b9f      	ldr	r3, [pc, #636]	; (800d6a8 <__kernel_rem_pio2+0x678>)
 800d42a:	ee10 0a10 	vmov	r0, s0
 800d42e:	2200      	movs	r2, #0
 800d430:	4639      	mov	r1, r7
 800d432:	f7f3 fb87 	bl	8000b44 <__aeabi_dcmpge>
 800d436:	b300      	cbz	r0, 800d47a <__kernel_rem_pio2+0x44a>
 800d438:	4b9c      	ldr	r3, [pc, #624]	; (800d6ac <__kernel_rem_pio2+0x67c>)
 800d43a:	2200      	movs	r2, #0
 800d43c:	4630      	mov	r0, r6
 800d43e:	4639      	mov	r1, r7
 800d440:	f7f3 f8fa 	bl	8000638 <__aeabi_dmul>
 800d444:	f7f3 fba8 	bl	8000b98 <__aeabi_d2iz>
 800d448:	4605      	mov	r5, r0
 800d44a:	f7f3 f88b 	bl	8000564 <__aeabi_i2d>
 800d44e:	4b96      	ldr	r3, [pc, #600]	; (800d6a8 <__kernel_rem_pio2+0x678>)
 800d450:	2200      	movs	r2, #0
 800d452:	f7f3 f8f1 	bl	8000638 <__aeabi_dmul>
 800d456:	460b      	mov	r3, r1
 800d458:	4602      	mov	r2, r0
 800d45a:	4639      	mov	r1, r7
 800d45c:	4630      	mov	r0, r6
 800d45e:	f7f2 ff33 	bl	80002c8 <__aeabi_dsub>
 800d462:	f7f3 fb99 	bl	8000b98 <__aeabi_d2iz>
 800d466:	f104 0b01 	add.w	fp, r4, #1
 800d46a:	ab0c      	add	r3, sp, #48	; 0x30
 800d46c:	f10a 0a18 	add.w	sl, sl, #24
 800d470:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d474:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800d478:	e72b      	b.n	800d2d2 <__kernel_rem_pio2+0x2a2>
 800d47a:	4630      	mov	r0, r6
 800d47c:	4639      	mov	r1, r7
 800d47e:	f7f3 fb8b 	bl	8000b98 <__aeabi_d2iz>
 800d482:	ab0c      	add	r3, sp, #48	; 0x30
 800d484:	46a3      	mov	fp, r4
 800d486:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d48a:	e722      	b.n	800d2d2 <__kernel_rem_pio2+0x2a2>
 800d48c:	ab70      	add	r3, sp, #448	; 0x1c0
 800d48e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800d492:	ab0c      	add	r3, sp, #48	; 0x30
 800d494:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d498:	f7f3 f864 	bl	8000564 <__aeabi_i2d>
 800d49c:	4622      	mov	r2, r4
 800d49e:	462b      	mov	r3, r5
 800d4a0:	f7f3 f8ca 	bl	8000638 <__aeabi_dmul>
 800d4a4:	4632      	mov	r2, r6
 800d4a6:	e9c9 0100 	strd	r0, r1, [r9]
 800d4aa:	463b      	mov	r3, r7
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	4629      	mov	r1, r5
 800d4b0:	f7f3 f8c2 	bl	8000638 <__aeabi_dmul>
 800d4b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d4b8:	4604      	mov	r4, r0
 800d4ba:	460d      	mov	r5, r1
 800d4bc:	e713      	b.n	800d2e6 <__kernel_rem_pio2+0x2b6>
 800d4be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d4c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d4c6:	f7f3 f8b7 	bl	8000638 <__aeabi_dmul>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	4629      	mov	r1, r5
 800d4d2:	f7f2 fefb 	bl	80002cc <__adddf3>
 800d4d6:	3601      	adds	r6, #1
 800d4d8:	4604      	mov	r4, r0
 800d4da:	460d      	mov	r5, r1
 800d4dc:	9b04      	ldr	r3, [sp, #16]
 800d4de:	429e      	cmp	r6, r3
 800d4e0:	dc01      	bgt.n	800d4e6 <__kernel_rem_pio2+0x4b6>
 800d4e2:	45b0      	cmp	r8, r6
 800d4e4:	daeb      	bge.n	800d4be <__kernel_rem_pio2+0x48e>
 800d4e6:	ab48      	add	r3, sp, #288	; 0x120
 800d4e8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d4ec:	e9c3 4500 	strd	r4, r5, [r3]
 800d4f0:	3f01      	subs	r7, #1
 800d4f2:	f108 0801 	add.w	r8, r8, #1
 800d4f6:	e6ff      	b.n	800d2f8 <__kernel_rem_pio2+0x2c8>
 800d4f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d4fa:	2b02      	cmp	r3, #2
 800d4fc:	dc0b      	bgt.n	800d516 <__kernel_rem_pio2+0x4e6>
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	dc6e      	bgt.n	800d5e0 <__kernel_rem_pio2+0x5b0>
 800d502:	d045      	beq.n	800d590 <__kernel_rem_pio2+0x560>
 800d504:	9b07      	ldr	r3, [sp, #28]
 800d506:	f003 0007 	and.w	r0, r3, #7
 800d50a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d50e:	ecbd 8b02 	vpop	{d8}
 800d512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d516:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d518:	2b03      	cmp	r3, #3
 800d51a:	d1f3      	bne.n	800d504 <__kernel_rem_pio2+0x4d4>
 800d51c:	ab48      	add	r3, sp, #288	; 0x120
 800d51e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800d522:	46d0      	mov	r8, sl
 800d524:	46d9      	mov	r9, fp
 800d526:	f1b9 0f00 	cmp.w	r9, #0
 800d52a:	f1a8 0808 	sub.w	r8, r8, #8
 800d52e:	dc64      	bgt.n	800d5fa <__kernel_rem_pio2+0x5ca>
 800d530:	465c      	mov	r4, fp
 800d532:	2c01      	cmp	r4, #1
 800d534:	f1aa 0a08 	sub.w	sl, sl, #8
 800d538:	dc7e      	bgt.n	800d638 <__kernel_rem_pio2+0x608>
 800d53a:	2000      	movs	r0, #0
 800d53c:	2100      	movs	r1, #0
 800d53e:	f1bb 0f01 	cmp.w	fp, #1
 800d542:	f300 8097 	bgt.w	800d674 <__kernel_rem_pio2+0x644>
 800d546:	9b02      	ldr	r3, [sp, #8]
 800d548:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800d54c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d550:	2b00      	cmp	r3, #0
 800d552:	f040 8099 	bne.w	800d688 <__kernel_rem_pio2+0x658>
 800d556:	9b01      	ldr	r3, [sp, #4]
 800d558:	e9c3 5600 	strd	r5, r6, [r3]
 800d55c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d560:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d564:	e7ce      	b.n	800d504 <__kernel_rem_pio2+0x4d4>
 800d566:	ab48      	add	r3, sp, #288	; 0x120
 800d568:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d570:	f7f2 feac 	bl	80002cc <__adddf3>
 800d574:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d578:	f1bb 0f00 	cmp.w	fp, #0
 800d57c:	daf3      	bge.n	800d566 <__kernel_rem_pio2+0x536>
 800d57e:	9b02      	ldr	r3, [sp, #8]
 800d580:	b113      	cbz	r3, 800d588 <__kernel_rem_pio2+0x558>
 800d582:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d586:	4619      	mov	r1, r3
 800d588:	9b01      	ldr	r3, [sp, #4]
 800d58a:	e9c3 0100 	strd	r0, r1, [r3]
 800d58e:	e7b9      	b.n	800d504 <__kernel_rem_pio2+0x4d4>
 800d590:	2000      	movs	r0, #0
 800d592:	2100      	movs	r1, #0
 800d594:	e7f0      	b.n	800d578 <__kernel_rem_pio2+0x548>
 800d596:	ab48      	add	r3, sp, #288	; 0x120
 800d598:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a0:	f7f2 fe94 	bl	80002cc <__adddf3>
 800d5a4:	3c01      	subs	r4, #1
 800d5a6:	2c00      	cmp	r4, #0
 800d5a8:	daf5      	bge.n	800d596 <__kernel_rem_pio2+0x566>
 800d5aa:	9b02      	ldr	r3, [sp, #8]
 800d5ac:	b1e3      	cbz	r3, 800d5e8 <__kernel_rem_pio2+0x5b8>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5b4:	9c01      	ldr	r4, [sp, #4]
 800d5b6:	e9c4 2300 	strd	r2, r3, [r4]
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	460b      	mov	r3, r1
 800d5be:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d5c2:	f7f2 fe81 	bl	80002c8 <__aeabi_dsub>
 800d5c6:	ad4a      	add	r5, sp, #296	; 0x128
 800d5c8:	2401      	movs	r4, #1
 800d5ca:	45a3      	cmp	fp, r4
 800d5cc:	da0f      	bge.n	800d5ee <__kernel_rem_pio2+0x5be>
 800d5ce:	9b02      	ldr	r3, [sp, #8]
 800d5d0:	b113      	cbz	r3, 800d5d8 <__kernel_rem_pio2+0x5a8>
 800d5d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	9b01      	ldr	r3, [sp, #4]
 800d5da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d5de:	e791      	b.n	800d504 <__kernel_rem_pio2+0x4d4>
 800d5e0:	465c      	mov	r4, fp
 800d5e2:	2000      	movs	r0, #0
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	e7de      	b.n	800d5a6 <__kernel_rem_pio2+0x576>
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	e7e2      	b.n	800d5b4 <__kernel_rem_pio2+0x584>
 800d5ee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d5f2:	f7f2 fe6b 	bl	80002cc <__adddf3>
 800d5f6:	3401      	adds	r4, #1
 800d5f8:	e7e7      	b.n	800d5ca <__kernel_rem_pio2+0x59a>
 800d5fa:	e9d8 4500 	ldrd	r4, r5, [r8]
 800d5fe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800d602:	4620      	mov	r0, r4
 800d604:	4632      	mov	r2, r6
 800d606:	463b      	mov	r3, r7
 800d608:	4629      	mov	r1, r5
 800d60a:	f7f2 fe5f 	bl	80002cc <__adddf3>
 800d60e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d612:	4602      	mov	r2, r0
 800d614:	460b      	mov	r3, r1
 800d616:	4620      	mov	r0, r4
 800d618:	4629      	mov	r1, r5
 800d61a:	f7f2 fe55 	bl	80002c8 <__aeabi_dsub>
 800d61e:	4632      	mov	r2, r6
 800d620:	463b      	mov	r3, r7
 800d622:	f7f2 fe53 	bl	80002cc <__adddf3>
 800d626:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d62a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800d62e:	ed88 7b00 	vstr	d7, [r8]
 800d632:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d636:	e776      	b.n	800d526 <__kernel_rem_pio2+0x4f6>
 800d638:	e9da 8900 	ldrd	r8, r9, [sl]
 800d63c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d640:	4640      	mov	r0, r8
 800d642:	4632      	mov	r2, r6
 800d644:	463b      	mov	r3, r7
 800d646:	4649      	mov	r1, r9
 800d648:	f7f2 fe40 	bl	80002cc <__adddf3>
 800d64c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d650:	4602      	mov	r2, r0
 800d652:	460b      	mov	r3, r1
 800d654:	4640      	mov	r0, r8
 800d656:	4649      	mov	r1, r9
 800d658:	f7f2 fe36 	bl	80002c8 <__aeabi_dsub>
 800d65c:	4632      	mov	r2, r6
 800d65e:	463b      	mov	r3, r7
 800d660:	f7f2 fe34 	bl	80002cc <__adddf3>
 800d664:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d668:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d66c:	ed8a 7b00 	vstr	d7, [sl]
 800d670:	3c01      	subs	r4, #1
 800d672:	e75e      	b.n	800d532 <__kernel_rem_pio2+0x502>
 800d674:	ab48      	add	r3, sp, #288	; 0x120
 800d676:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67e:	f7f2 fe25 	bl	80002cc <__adddf3>
 800d682:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d686:	e75a      	b.n	800d53e <__kernel_rem_pio2+0x50e>
 800d688:	9b01      	ldr	r3, [sp, #4]
 800d68a:	9a01      	ldr	r2, [sp, #4]
 800d68c:	601d      	str	r5, [r3, #0]
 800d68e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d692:	605c      	str	r4, [r3, #4]
 800d694:	609f      	str	r7, [r3, #8]
 800d696:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d69a:	60d3      	str	r3, [r2, #12]
 800d69c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6a0:	6110      	str	r0, [r2, #16]
 800d6a2:	6153      	str	r3, [r2, #20]
 800d6a4:	e72e      	b.n	800d504 <__kernel_rem_pio2+0x4d4>
 800d6a6:	bf00      	nop
 800d6a8:	41700000 	.word	0x41700000
 800d6ac:	3e700000 	.word	0x3e700000

0800d6b0 <__kernel_sin>:
 800d6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b4:	ed2d 8b04 	vpush	{d8-d9}
 800d6b8:	eeb0 8a41 	vmov.f32	s16, s2
 800d6bc:	eef0 8a61 	vmov.f32	s17, s3
 800d6c0:	ec55 4b10 	vmov	r4, r5, d0
 800d6c4:	b083      	sub	sp, #12
 800d6c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d6ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d6ce:	9001      	str	r0, [sp, #4]
 800d6d0:	da06      	bge.n	800d6e0 <__kernel_sin+0x30>
 800d6d2:	ee10 0a10 	vmov	r0, s0
 800d6d6:	4629      	mov	r1, r5
 800d6d8:	f7f3 fa5e 	bl	8000b98 <__aeabi_d2iz>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d051      	beq.n	800d784 <__kernel_sin+0xd4>
 800d6e0:	4622      	mov	r2, r4
 800d6e2:	462b      	mov	r3, r5
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	4629      	mov	r1, r5
 800d6e8:	f7f2 ffa6 	bl	8000638 <__aeabi_dmul>
 800d6ec:	4682      	mov	sl, r0
 800d6ee:	468b      	mov	fp, r1
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	4629      	mov	r1, r5
 800d6f8:	f7f2 ff9e 	bl	8000638 <__aeabi_dmul>
 800d6fc:	a341      	add	r3, pc, #260	; (adr r3, 800d804 <__kernel_sin+0x154>)
 800d6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d702:	4680      	mov	r8, r0
 800d704:	4689      	mov	r9, r1
 800d706:	4650      	mov	r0, sl
 800d708:	4659      	mov	r1, fp
 800d70a:	f7f2 ff95 	bl	8000638 <__aeabi_dmul>
 800d70e:	a33f      	add	r3, pc, #252	; (adr r3, 800d80c <__kernel_sin+0x15c>)
 800d710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d714:	f7f2 fdd8 	bl	80002c8 <__aeabi_dsub>
 800d718:	4652      	mov	r2, sl
 800d71a:	465b      	mov	r3, fp
 800d71c:	f7f2 ff8c 	bl	8000638 <__aeabi_dmul>
 800d720:	a33c      	add	r3, pc, #240	; (adr r3, 800d814 <__kernel_sin+0x164>)
 800d722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d726:	f7f2 fdd1 	bl	80002cc <__adddf3>
 800d72a:	4652      	mov	r2, sl
 800d72c:	465b      	mov	r3, fp
 800d72e:	f7f2 ff83 	bl	8000638 <__aeabi_dmul>
 800d732:	a33a      	add	r3, pc, #232	; (adr r3, 800d81c <__kernel_sin+0x16c>)
 800d734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d738:	f7f2 fdc6 	bl	80002c8 <__aeabi_dsub>
 800d73c:	4652      	mov	r2, sl
 800d73e:	465b      	mov	r3, fp
 800d740:	f7f2 ff7a 	bl	8000638 <__aeabi_dmul>
 800d744:	a337      	add	r3, pc, #220	; (adr r3, 800d824 <__kernel_sin+0x174>)
 800d746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74a:	f7f2 fdbf 	bl	80002cc <__adddf3>
 800d74e:	9b01      	ldr	r3, [sp, #4]
 800d750:	4606      	mov	r6, r0
 800d752:	460f      	mov	r7, r1
 800d754:	b9eb      	cbnz	r3, 800d792 <__kernel_sin+0xe2>
 800d756:	4602      	mov	r2, r0
 800d758:	460b      	mov	r3, r1
 800d75a:	4650      	mov	r0, sl
 800d75c:	4659      	mov	r1, fp
 800d75e:	f7f2 ff6b 	bl	8000638 <__aeabi_dmul>
 800d762:	a325      	add	r3, pc, #148	; (adr r3, 800d7f8 <__kernel_sin+0x148>)
 800d764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d768:	f7f2 fdae 	bl	80002c8 <__aeabi_dsub>
 800d76c:	4642      	mov	r2, r8
 800d76e:	464b      	mov	r3, r9
 800d770:	f7f2 ff62 	bl	8000638 <__aeabi_dmul>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	4620      	mov	r0, r4
 800d77a:	4629      	mov	r1, r5
 800d77c:	f7f2 fda6 	bl	80002cc <__adddf3>
 800d780:	4604      	mov	r4, r0
 800d782:	460d      	mov	r5, r1
 800d784:	ec45 4b10 	vmov	d0, r4, r5
 800d788:	b003      	add	sp, #12
 800d78a:	ecbd 8b04 	vpop	{d8-d9}
 800d78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d792:	4b1b      	ldr	r3, [pc, #108]	; (800d800 <__kernel_sin+0x150>)
 800d794:	ec51 0b18 	vmov	r0, r1, d8
 800d798:	2200      	movs	r2, #0
 800d79a:	f7f2 ff4d 	bl	8000638 <__aeabi_dmul>
 800d79e:	4632      	mov	r2, r6
 800d7a0:	ec41 0b19 	vmov	d9, r0, r1
 800d7a4:	463b      	mov	r3, r7
 800d7a6:	4640      	mov	r0, r8
 800d7a8:	4649      	mov	r1, r9
 800d7aa:	f7f2 ff45 	bl	8000638 <__aeabi_dmul>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	ec51 0b19 	vmov	r0, r1, d9
 800d7b6:	f7f2 fd87 	bl	80002c8 <__aeabi_dsub>
 800d7ba:	4652      	mov	r2, sl
 800d7bc:	465b      	mov	r3, fp
 800d7be:	f7f2 ff3b 	bl	8000638 <__aeabi_dmul>
 800d7c2:	ec53 2b18 	vmov	r2, r3, d8
 800d7c6:	f7f2 fd7f 	bl	80002c8 <__aeabi_dsub>
 800d7ca:	a30b      	add	r3, pc, #44	; (adr r3, 800d7f8 <__kernel_sin+0x148>)
 800d7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d0:	4606      	mov	r6, r0
 800d7d2:	460f      	mov	r7, r1
 800d7d4:	4640      	mov	r0, r8
 800d7d6:	4649      	mov	r1, r9
 800d7d8:	f7f2 ff2e 	bl	8000638 <__aeabi_dmul>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	460b      	mov	r3, r1
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	4639      	mov	r1, r7
 800d7e4:	f7f2 fd72 	bl	80002cc <__adddf3>
 800d7e8:	4602      	mov	r2, r0
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	4629      	mov	r1, r5
 800d7f0:	f7f2 fd6a 	bl	80002c8 <__aeabi_dsub>
 800d7f4:	e7c4      	b.n	800d780 <__kernel_sin+0xd0>
 800d7f6:	bf00      	nop
 800d7f8:	55555549 	.word	0x55555549
 800d7fc:	3fc55555 	.word	0x3fc55555
 800d800:	3fe00000 	.word	0x3fe00000
 800d804:	5acfd57c 	.word	0x5acfd57c
 800d808:	3de5d93a 	.word	0x3de5d93a
 800d80c:	8a2b9ceb 	.word	0x8a2b9ceb
 800d810:	3e5ae5e6 	.word	0x3e5ae5e6
 800d814:	57b1fe7d 	.word	0x57b1fe7d
 800d818:	3ec71de3 	.word	0x3ec71de3
 800d81c:	19c161d5 	.word	0x19c161d5
 800d820:	3f2a01a0 	.word	0x3f2a01a0
 800d824:	1110f8a6 	.word	0x1110f8a6
 800d828:	3f811111 	.word	0x3f811111

0800d82c <fabs>:
 800d82c:	ec51 0b10 	vmov	r0, r1, d0
 800d830:	ee10 2a10 	vmov	r2, s0
 800d834:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d838:	ec43 2b10 	vmov	d0, r2, r3
 800d83c:	4770      	bx	lr
	...

0800d840 <floor>:
 800d840:	ec51 0b10 	vmov	r0, r1, d0
 800d844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d848:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d84c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d850:	2e13      	cmp	r6, #19
 800d852:	ee10 5a10 	vmov	r5, s0
 800d856:	ee10 8a10 	vmov	r8, s0
 800d85a:	460c      	mov	r4, r1
 800d85c:	dc32      	bgt.n	800d8c4 <floor+0x84>
 800d85e:	2e00      	cmp	r6, #0
 800d860:	da14      	bge.n	800d88c <floor+0x4c>
 800d862:	a333      	add	r3, pc, #204	; (adr r3, 800d930 <floor+0xf0>)
 800d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d868:	f7f2 fd30 	bl	80002cc <__adddf3>
 800d86c:	2200      	movs	r2, #0
 800d86e:	2300      	movs	r3, #0
 800d870:	f7f3 f972 	bl	8000b58 <__aeabi_dcmpgt>
 800d874:	b138      	cbz	r0, 800d886 <floor+0x46>
 800d876:	2c00      	cmp	r4, #0
 800d878:	da57      	bge.n	800d92a <floor+0xea>
 800d87a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d87e:	431d      	orrs	r5, r3
 800d880:	d001      	beq.n	800d886 <floor+0x46>
 800d882:	4c2d      	ldr	r4, [pc, #180]	; (800d938 <floor+0xf8>)
 800d884:	2500      	movs	r5, #0
 800d886:	4621      	mov	r1, r4
 800d888:	4628      	mov	r0, r5
 800d88a:	e025      	b.n	800d8d8 <floor+0x98>
 800d88c:	4f2b      	ldr	r7, [pc, #172]	; (800d93c <floor+0xfc>)
 800d88e:	4137      	asrs	r7, r6
 800d890:	ea01 0307 	and.w	r3, r1, r7
 800d894:	4303      	orrs	r3, r0
 800d896:	d01f      	beq.n	800d8d8 <floor+0x98>
 800d898:	a325      	add	r3, pc, #148	; (adr r3, 800d930 <floor+0xf0>)
 800d89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89e:	f7f2 fd15 	bl	80002cc <__adddf3>
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	f7f3 f957 	bl	8000b58 <__aeabi_dcmpgt>
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	d0eb      	beq.n	800d886 <floor+0x46>
 800d8ae:	2c00      	cmp	r4, #0
 800d8b0:	bfbe      	ittt	lt
 800d8b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d8b6:	fa43 f606 	asrlt.w	r6, r3, r6
 800d8ba:	19a4      	addlt	r4, r4, r6
 800d8bc:	ea24 0407 	bic.w	r4, r4, r7
 800d8c0:	2500      	movs	r5, #0
 800d8c2:	e7e0      	b.n	800d886 <floor+0x46>
 800d8c4:	2e33      	cmp	r6, #51	; 0x33
 800d8c6:	dd0b      	ble.n	800d8e0 <floor+0xa0>
 800d8c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d8cc:	d104      	bne.n	800d8d8 <floor+0x98>
 800d8ce:	ee10 2a10 	vmov	r2, s0
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	f7f2 fcfa 	bl	80002cc <__adddf3>
 800d8d8:	ec41 0b10 	vmov	d0, r0, r1
 800d8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d8e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8e8:	fa23 f707 	lsr.w	r7, r3, r7
 800d8ec:	4207      	tst	r7, r0
 800d8ee:	d0f3      	beq.n	800d8d8 <floor+0x98>
 800d8f0:	a30f      	add	r3, pc, #60	; (adr r3, 800d930 <floor+0xf0>)
 800d8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f6:	f7f2 fce9 	bl	80002cc <__adddf3>
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	f7f3 f92b 	bl	8000b58 <__aeabi_dcmpgt>
 800d902:	2800      	cmp	r0, #0
 800d904:	d0bf      	beq.n	800d886 <floor+0x46>
 800d906:	2c00      	cmp	r4, #0
 800d908:	da02      	bge.n	800d910 <floor+0xd0>
 800d90a:	2e14      	cmp	r6, #20
 800d90c:	d103      	bne.n	800d916 <floor+0xd6>
 800d90e:	3401      	adds	r4, #1
 800d910:	ea25 0507 	bic.w	r5, r5, r7
 800d914:	e7b7      	b.n	800d886 <floor+0x46>
 800d916:	2301      	movs	r3, #1
 800d918:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d91c:	fa03 f606 	lsl.w	r6, r3, r6
 800d920:	4435      	add	r5, r6
 800d922:	4545      	cmp	r5, r8
 800d924:	bf38      	it	cc
 800d926:	18e4      	addcc	r4, r4, r3
 800d928:	e7f2      	b.n	800d910 <floor+0xd0>
 800d92a:	2500      	movs	r5, #0
 800d92c:	462c      	mov	r4, r5
 800d92e:	e7aa      	b.n	800d886 <floor+0x46>
 800d930:	8800759c 	.word	0x8800759c
 800d934:	7e37e43c 	.word	0x7e37e43c
 800d938:	bff00000 	.word	0xbff00000
 800d93c:	000fffff 	.word	0x000fffff

0800d940 <scalbn>:
 800d940:	b570      	push	{r4, r5, r6, lr}
 800d942:	ec55 4b10 	vmov	r4, r5, d0
 800d946:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d94a:	4606      	mov	r6, r0
 800d94c:	462b      	mov	r3, r5
 800d94e:	b99a      	cbnz	r2, 800d978 <scalbn+0x38>
 800d950:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d954:	4323      	orrs	r3, r4
 800d956:	d036      	beq.n	800d9c6 <scalbn+0x86>
 800d958:	4b39      	ldr	r3, [pc, #228]	; (800da40 <scalbn+0x100>)
 800d95a:	4629      	mov	r1, r5
 800d95c:	ee10 0a10 	vmov	r0, s0
 800d960:	2200      	movs	r2, #0
 800d962:	f7f2 fe69 	bl	8000638 <__aeabi_dmul>
 800d966:	4b37      	ldr	r3, [pc, #220]	; (800da44 <scalbn+0x104>)
 800d968:	429e      	cmp	r6, r3
 800d96a:	4604      	mov	r4, r0
 800d96c:	460d      	mov	r5, r1
 800d96e:	da10      	bge.n	800d992 <scalbn+0x52>
 800d970:	a32b      	add	r3, pc, #172	; (adr r3, 800da20 <scalbn+0xe0>)
 800d972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d976:	e03a      	b.n	800d9ee <scalbn+0xae>
 800d978:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d97c:	428a      	cmp	r2, r1
 800d97e:	d10c      	bne.n	800d99a <scalbn+0x5a>
 800d980:	ee10 2a10 	vmov	r2, s0
 800d984:	4620      	mov	r0, r4
 800d986:	4629      	mov	r1, r5
 800d988:	f7f2 fca0 	bl	80002cc <__adddf3>
 800d98c:	4604      	mov	r4, r0
 800d98e:	460d      	mov	r5, r1
 800d990:	e019      	b.n	800d9c6 <scalbn+0x86>
 800d992:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d996:	460b      	mov	r3, r1
 800d998:	3a36      	subs	r2, #54	; 0x36
 800d99a:	4432      	add	r2, r6
 800d99c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d9a0:	428a      	cmp	r2, r1
 800d9a2:	dd08      	ble.n	800d9b6 <scalbn+0x76>
 800d9a4:	2d00      	cmp	r5, #0
 800d9a6:	a120      	add	r1, pc, #128	; (adr r1, 800da28 <scalbn+0xe8>)
 800d9a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9ac:	da1c      	bge.n	800d9e8 <scalbn+0xa8>
 800d9ae:	a120      	add	r1, pc, #128	; (adr r1, 800da30 <scalbn+0xf0>)
 800d9b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9b4:	e018      	b.n	800d9e8 <scalbn+0xa8>
 800d9b6:	2a00      	cmp	r2, #0
 800d9b8:	dd08      	ble.n	800d9cc <scalbn+0x8c>
 800d9ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d9be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d9c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d9c6:	ec45 4b10 	vmov	d0, r4, r5
 800d9ca:	bd70      	pop	{r4, r5, r6, pc}
 800d9cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d9d0:	da19      	bge.n	800da06 <scalbn+0xc6>
 800d9d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d9d6:	429e      	cmp	r6, r3
 800d9d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d9dc:	dd0a      	ble.n	800d9f4 <scalbn+0xb4>
 800d9de:	a112      	add	r1, pc, #72	; (adr r1, 800da28 <scalbn+0xe8>)
 800d9e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d1e2      	bne.n	800d9ae <scalbn+0x6e>
 800d9e8:	a30f      	add	r3, pc, #60	; (adr r3, 800da28 <scalbn+0xe8>)
 800d9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ee:	f7f2 fe23 	bl	8000638 <__aeabi_dmul>
 800d9f2:	e7cb      	b.n	800d98c <scalbn+0x4c>
 800d9f4:	a10a      	add	r1, pc, #40	; (adr r1, 800da20 <scalbn+0xe0>)
 800d9f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d0b8      	beq.n	800d970 <scalbn+0x30>
 800d9fe:	a10e      	add	r1, pc, #56	; (adr r1, 800da38 <scalbn+0xf8>)
 800da00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da04:	e7b4      	b.n	800d970 <scalbn+0x30>
 800da06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800da0a:	3236      	adds	r2, #54	; 0x36
 800da0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800da10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800da14:	4620      	mov	r0, r4
 800da16:	4b0c      	ldr	r3, [pc, #48]	; (800da48 <scalbn+0x108>)
 800da18:	2200      	movs	r2, #0
 800da1a:	e7e8      	b.n	800d9ee <scalbn+0xae>
 800da1c:	f3af 8000 	nop.w
 800da20:	c2f8f359 	.word	0xc2f8f359
 800da24:	01a56e1f 	.word	0x01a56e1f
 800da28:	8800759c 	.word	0x8800759c
 800da2c:	7e37e43c 	.word	0x7e37e43c
 800da30:	8800759c 	.word	0x8800759c
 800da34:	fe37e43c 	.word	0xfe37e43c
 800da38:	c2f8f359 	.word	0xc2f8f359
 800da3c:	81a56e1f 	.word	0x81a56e1f
 800da40:	43500000 	.word	0x43500000
 800da44:	ffff3cb0 	.word	0xffff3cb0
 800da48:	3c900000 	.word	0x3c900000

0800da4c <_getpid>:
 800da4c:	4b02      	ldr	r3, [pc, #8]	; (800da58 <_getpid+0xc>)
 800da4e:	2258      	movs	r2, #88	; 0x58
 800da50:	601a      	str	r2, [r3, #0]
 800da52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da56:	4770      	bx	lr
 800da58:	20000804 	.word	0x20000804

0800da5c <_kill>:
 800da5c:	4b02      	ldr	r3, [pc, #8]	; (800da68 <_kill+0xc>)
 800da5e:	2258      	movs	r2, #88	; 0x58
 800da60:	601a      	str	r2, [r3, #0]
 800da62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da66:	4770      	bx	lr
 800da68:	20000804 	.word	0x20000804

0800da6c <_exit>:
 800da6c:	e7fe      	b.n	800da6c <_exit>
	...

0800da70 <_init>:
 800da70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da72:	bf00      	nop
 800da74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da76:	bc08      	pop	{r3}
 800da78:	469e      	mov	lr, r3
 800da7a:	4770      	bx	lr

0800da7c <_fini>:
 800da7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7e:	bf00      	nop
 800da80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da82:	bc08      	pop	{r3}
 800da84:	469e      	mov	lr, r3
 800da86:	4770      	bx	lr
