
Identification_and_Trajectory_Tracking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfa4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c80  0800e178  0800e178  0001e178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010df8  08010df8  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08010df8  08010df8  00020df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e00  08010e00  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e00  08010e00  00020e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e04  08010e04  00020e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08010e08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000794  200001e4  08010fec  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000978  08010fec  00030978  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001687a  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2b  00000000  00000000  00046a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  000495c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  0004a508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d49  00000000  00000000  0004b348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012aba  00000000  00000000  0006f091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daebe  00000000  00000000  00081b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015ca09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058cc  00000000  00000000  0015ca5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e15c 	.word	0x0800e15c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800e15c 	.word	0x0800e15c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001030:	f5ad 5d1a 	sub.w	sp, sp, #9856	; 0x2680
 8001034:	b08e      	sub	sp, #56	; 0x38
 8001036:	af24      	add	r7, sp, #144	; 0x90
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f003 fc68 	bl	800490c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 fa3e 	bl	80014bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f000 fc72 	bl	8001928 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001044:	f000 fb50 	bl	80016e8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001048:	f000 faa6 	bl	8001598 <MX_TIM1_Init>
  MX_TIM3_Init();
 800104c:	f000 fba0 	bl	8001790 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001050:	f000 fbec 	bl	800182c <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8001054:	f000 fc3e 	bl	80018d4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  MAIN_DATASTREAM_Init();
 8001058:	f000 fde2 	bl	8001c20 <MAIN_DATASTREAM_Init>
  MAIN_DIFFDRIVE_Init();
 800105c:	f000 fd06 	bl	8001a6c <MAIN_DIFFDRIVE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  // Wait until the blue button is pressed
  while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) )
 8001060:	e000      	b.n	8001064 <main+0x38>
	  __NOP();
 8001062:	bf00      	nop
  while( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) )
 8001064:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001068:	4869      	ldr	r0, [pc, #420]	; (8001210 <main+0x1e4>)
 800106a:	f003 ff8b 	bl	8004f84 <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1f6      	bne.n	8001062 <main+0x36>

  // Enabling motion
  bool motion_flag= true;
 8001074:	2301      	movs	r3, #1
 8001076:	f507 5218 	add.w	r2, r7, #9728	; 0x2600
 800107a:	f102 0227 	add.w	r2, r2, #39	; 0x27
 800107e:	7013      	strb	r3, [r2, #0]

  HAL_Delay(1000);
 8001080:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001084:	f003 fcb4 	bl	80049f0 <HAL_Delay>

  while (1)
  {

	  if( motion_flag ){
 8001088:	f507 5318 	add.w	r3, r7, #9728	; 0x2600
 800108c:	f103 0327 	add.w	r3, r3, #39	; 0x27
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d02f      	beq.n	80010f6 <main+0xca>

#ifdef TRAJECTORY_TRACKING

		  // Start control
		  DIFFDRIVE_TrackingStart();
 8001096:	f003 f92b 	bl	80042f0 <DIFFDRIVE_TrackingStart>
		  // Tracking a target trajectory (Array of N sample)
		  DIFFDRIVE_TrackingArray(N_SAMPLE_REF, V_REF, OM_REF);
 800109a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800109e:	3b34      	subs	r3, #52	; 0x34
 80010a0:	4a5c      	ldr	r2, [pc, #368]	; (8001214 <main+0x1e8>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	4611      	mov	r1, r2
 80010a6:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 80010aa:	461a      	mov	r2, r3
 80010ac:	f006 fc7e 	bl	80079ac <memcpy>
 80010b0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80010b4:	f103 0308 	add.w	r3, r3, #8
 80010b8:	3b14      	subs	r3, #20
 80010ba:	4a57      	ldr	r2, [pc, #348]	; (8001218 <main+0x1ec>)
 80010bc:	4618      	mov	r0, r3
 80010be:	4611      	mov	r1, r2
 80010c0:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 80010c4:	461a      	mov	r2, r3
 80010c6:	f006 fc71 	bl	80079ac <memcpy>
 80010ca:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80010ce:	f102 0208 	add.w	r2, r2, #8
 80010d2:	3a14      	subs	r2, #20
 80010d4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80010d8:	3b34      	subs	r3, #52	; 0x34
 80010da:	4619      	mov	r1, r3
 80010dc:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80010e0:	f003 f958 	bl	8004394 <DIFFDRIVE_TrackingArray>
		  // Stop differential drive
		  DIFFDRIVE_TrackingStop();
 80010e4:	f003 f912 	bl	800430c <DIFFDRIVE_TrackingStop>

#endif /*   IDENTIFICATION  	  */
#endif /* TRAJECTORY_TRACKING */

		// Stop motion
		motion_flag= false;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f507 5218 	add.w	r2, r7, #9728	; 0x2600
 80010ee:	f102 0227 	add.w	r2, r2, #39	; 0x27
 80010f2:	7013      	strb	r3, [r2, #0]
 80010f4:	e7c8      	b.n	8001088 <main+0x5c>

	} // Motion disabled to send data
	else{

		// Start sending values Task if blue button is pressed
		if( !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) ){
 80010f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fa:	4845      	ldr	r0, [pc, #276]	; (8001210 <main+0x1e4>)
 80010fc:	f003 ff42 	bl	8004f84 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1c0      	bne.n	8001088 <main+0x5c>

			// Enable WIFI to send/receive values
			HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2101      	movs	r1, #1
 800110a:	4841      	ldr	r0, [pc, #260]	; (8001210 <main+0x1e4>)
 800110c:	f003 ff52 	bl	8004fb4 <HAL_GPIO_WritePin>

			// Wait for ESP boot
			HAL_Delay(3000);
 8001110:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001114:	f003 fc6c 	bl	80049f0 <HAL_Delay>

			// Rapidly flash led to show MCU ready to send values
			for(int i=0; i<20; i++){
 8001118:	2300      	movs	r3, #0
 800111a:	f507 5218 	add.w	r2, r7, #9728	; 0x2600
 800111e:	f102 0220 	add.w	r2, r2, #32
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	e011      	b.n	800114a <main+0x11e>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001126:	2120      	movs	r1, #32
 8001128:	483c      	ldr	r0, [pc, #240]	; (800121c <main+0x1f0>)
 800112a:	f003 ff5c 	bl	8004fe6 <HAL_GPIO_TogglePin>
				HAL_Delay(50);
 800112e:	2032      	movs	r0, #50	; 0x32
 8001130:	f003 fc5e 	bl	80049f0 <HAL_Delay>
			for(int i=0; i<20; i++){
 8001134:	f507 5318 	add.w	r3, r7, #9728	; 0x2600
 8001138:	f103 0320 	add.w	r3, r3, #32
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	f507 5218 	add.w	r2, r7, #9728	; 0x2600
 8001144:	f102 0220 	add.w	r2, r2, #32
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	f507 5318 	add.w	r3, r7, #9728	; 0x2600
 800114e:	f103 0320 	add.w	r3, r3, #32
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b13      	cmp	r3, #19
 8001156:	dde6      	ble.n	8001126 <main+0xfa>
			}

			// Wait for 10 received chars
			char ch[10];
			HAL_UART_Receive(&huart3, (uint8_t*) ch, sizeof(ch), HAL_MAX_DELAY);
 8001158:	f507 5118 	add.w	r1, r7, #9728	; 0x2600
 800115c:	f101 010c 	add.w	r1, r1, #12
 8001160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001164:	220a      	movs	r2, #10
 8001166:	482e      	ldr	r0, [pc, #184]	; (8001220 <main+0x1f4>)
 8001168:	f006 f87a 	bl	8007260 <HAL_UART_Receive>

			// LED on
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	2120      	movs	r1, #32
 8001170:	482a      	ldr	r0, [pc, #168]	; (800121c <main+0x1f0>)
 8001172:	f003 ff1f 	bl	8004fb4 <HAL_GPIO_WritePin>

			// Wait a bit more
			HAL_Delay(3000);
 8001176:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800117a:	f003 fc39 	bl	80049f0 <HAL_Delay>

			// LED off
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2120      	movs	r1, #32
 8001182:	4826      	ldr	r0, [pc, #152]	; (800121c <main+0x1f0>)
 8001184:	f003 ff16 	bl	8004fb4 <HAL_GPIO_WritePin>

			// History struct
			DIFFDRIVE_HISTORY_TypeDef tmphist= hdiffdrive.history;
 8001188:	4b26      	ldr	r3, [pc, #152]	; (8001224 <main+0x1f8>)
 800118a:	f507 5417 	add.w	r4, r7, #9664	; 0x25c0
 800118e:	f104 0434 	add.w	r4, r4, #52	; 0x34
 8001192:	f503 750f 	add.w	r5, r3, #572	; 0x23c
 8001196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800119e:	e884 0003 	stmia.w	r4, {r0, r1}

			// Number of saved samples
			int N_sample;
			if( tmphist.sample_cnt < tmphist.max_sample )
 80011a2:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 80011a6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 80011b0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d20a      	bcs.n	80011d0 <main+0x1a4>
				N_sample=  tmphist.sample_cnt;
 80011ba:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 80011be:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f507 5218 	add.w	r2, r7, #9728	; 0x2600
 80011c8:	f102 021c 	add.w	r2, r2, #28
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e009      	b.n	80011e4 <main+0x1b8>
			else
				N_sample=  tmphist.max_sample;
 80011d0:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 80011d4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f507 5218 	add.w	r2, r7, #9728	; 0x2600
 80011de:	f102 021c 	add.w	r2, r2, #28
 80011e2:	6013      	str	r3, [r2, #0]

			// First values send is the actual number of samples
			DATASTREAM_Print(&hstream, int_csv, 1, N_sample);
 80011e4:	f507 5318 	add.w	r3, r7, #9728	; 0x2600
 80011e8:	f103 031c 	add.w	r3, r3, #28
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2201      	movs	r2, #1
 80011f0:	2100      	movs	r1, #0
 80011f2:	480d      	ldr	r0, [pc, #52]	; (8001228 <main+0x1fc>)
 80011f4:	f001 f826 	bl	8002244 <DATASTREAM_Print>
			// Bit of transfer delay
			HAL_Delay(8);
 80011f8:	2008      	movs	r0, #8
 80011fa:	f003 fbf9 	bl	80049f0 <HAL_Delay>

			// Init History Get function
			DIFFDRIVE_HISTORY_Get_Init();
 80011fe:	f002 fc4f 	bl	8003aa0 <DIFFDRIVE_HISTORY_Get_Init>

			for(int k= 0; k < N_sample; k++){
 8001202:	2300      	movs	r3, #0
 8001204:	f507 5218 	add.w	r2, r7, #9728	; 0x2600
 8001208:	f102 0218 	add.w	r2, r2, #24
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e135      	b.n	800147c <main+0x450>
 8001210:	40020800 	.word	0x40020800
 8001214:	0800e178 	.word	0x0800e178
 8001218:	0800f438 	.word	0x0800f438
 800121c:	40020000 	.word	0x40020000
 8001220:	20000218 	.word	0x20000218
 8001224:	20000578 	.word	0x20000578
 8001228:	200003f4 	.word	0x200003f4
				// Temporary variables
				DIFFDRIVE_STATE_TypeDef state_measure, state_target;

				// Get one state sample from history
				DIFFDRIVE_HISTORY_Get_Sample(&state_measure, &state_target);
 800122c:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001230:	f102 0208 	add.w	r2, r2, #8
 8001234:	3a14      	subs	r2, #20
 8001236:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800123a:	3b34      	subs	r3, #52	; 0x34
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f002 fc56 	bl	8003af0 <DIFFDRIVE_HISTORY_Get_Sample>

				// Send values to serial connected to ESP WiFi module
				DATASTREAM_Print(
						&hstream, float_csv, 18,
						state_measure.input[left], state_measure.input[right],
 8001244:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001248:	3b34      	subs	r3, #52	; 0x34
 800124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				DATASTREAM_Print(
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f99b 	bl	8000588 <__aeabi_f2d>
 8001252:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
						state_measure.input[left], state_measure.input[right],
 8001256:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800125a:	3b34      	subs	r3, #52	; 0x34
 800125c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				DATASTREAM_Print(
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f992 	bl	8000588 <__aeabi_f2d>
 8001264:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
						state_target .input[left], state_target .input[right],
 8001268:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800126c:	f103 0308 	add.w	r3, r3, #8
 8001270:	3b14      	subs	r3, #20
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				DATASTREAM_Print(
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f987 	bl	8000588 <__aeabi_f2d>
 800127a:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
						state_target .input[left], state_target .input[right],
 800127e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001282:	f103 0308 	add.w	r3, r3, #8
 8001286:	3b14      	subs	r3, #20
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				DATASTREAM_Print(
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f97c 	bl	8000588 <__aeabi_f2d>
 8001290:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
						state_measure.wheel[left], state_measure.wheel[right],
 8001294:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001298:	3b34      	subs	r3, #52	; 0x34
 800129a:	695b      	ldr	r3, [r3, #20]
				DATASTREAM_Print(
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f973 	bl	8000588 <__aeabi_f2d>
 80012a2:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
						state_measure.wheel[left], state_measure.wheel[right],
 80012a6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012aa:	3b34      	subs	r3, #52	; 0x34
 80012ac:	699b      	ldr	r3, [r3, #24]
				DATASTREAM_Print(
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f96a 	bl	8000588 <__aeabi_f2d>
 80012b4:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
						state_target .wheel[left], state_target .wheel[right],
 80012b8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80012bc:	f103 0308 	add.w	r3, r3, #8
 80012c0:	3b14      	subs	r3, #20
 80012c2:	695b      	ldr	r3, [r3, #20]
				DATASTREAM_Print(
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f95f 	bl	8000588 <__aeabi_f2d>
 80012ca:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
						state_target .wheel[left], state_target .wheel[right],
 80012ce:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80012d2:	f103 0308 	add.w	r3, r3, #8
 80012d6:	3b14      	subs	r3, #20
 80012d8:	699b      	ldr	r3, [r3, #24]
				DATASTREAM_Print(
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f954 	bl	8000588 <__aeabi_f2d>
 80012e0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
						state_measure.pose.x_a,    state_measure.pose.y_a,
 80012e4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012e8:	3b34      	subs	r3, #52	; 0x34
 80012ea:	681b      	ldr	r3, [r3, #0]
				DATASTREAM_Print(
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f94b 	bl	8000588 <__aeabi_f2d>
 80012f2:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						state_measure.pose.x_a,    state_measure.pose.y_a,
 80012f6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012fa:	3b34      	subs	r3, #52	; 0x34
 80012fc:	685b      	ldr	r3, [r3, #4]
				DATASTREAM_Print(
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f942 	bl	8000588 <__aeabi_f2d>
 8001304:	e9c7 0108 	strd	r0, r1, [r7, #32]
						state_measure.pose.theta,  state_measure.pose.v,
 8001308:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800130c:	3b34      	subs	r3, #52	; 0x34
 800130e:	689b      	ldr	r3, [r3, #8]
				DATASTREAM_Print(
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f939 	bl	8000588 <__aeabi_f2d>
 8001316:	e9c7 0106 	strd	r0, r1, [r7, #24]
						state_measure.pose.theta,  state_measure.pose.v,
 800131a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800131e:	3b34      	subs	r3, #52	; 0x34
 8001320:	68db      	ldr	r3, [r3, #12]
				DATASTREAM_Print(
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f930 	bl	8000588 <__aeabi_f2d>
 8001328:	e9c7 0104 	strd	r0, r1, [r7, #16]
						state_measure.pose.om,
 800132c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001330:	3b34      	subs	r3, #52	; 0x34
 8001332:	691b      	ldr	r3, [r3, #16]
				DATASTREAM_Print(
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f927 	bl	8000588 <__aeabi_f2d>
 800133a:	e9c7 0102 	strd	r0, r1, [r7, #8]
                        state_target .pose.x_a,    state_target.pose.y_a,
 800133e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001342:	f103 0308 	add.w	r3, r3, #8
 8001346:	3b14      	subs	r3, #20
 8001348:	681b      	ldr	r3, [r3, #0]
				DATASTREAM_Print(
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f91c 	bl	8000588 <__aeabi_f2d>
 8001350:	e9c7 0100 	strd	r0, r1, [r7]
                        state_target .pose.x_a,    state_target.pose.y_a,
 8001354:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001358:	f103 0308 	add.w	r3, r3, #8
 800135c:	3b14      	subs	r3, #20
 800135e:	685b      	ldr	r3, [r3, #4]
				DATASTREAM_Print(
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f911 	bl	8000588 <__aeabi_f2d>
 8001366:	4682      	mov	sl, r0
 8001368:	468b      	mov	fp, r1
						state_target .pose.theta,  state_target.pose.v,
 800136a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800136e:	f103 0308 	add.w	r3, r3, #8
 8001372:	3b14      	subs	r3, #20
 8001374:	689b      	ldr	r3, [r3, #8]
				DATASTREAM_Print(
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f906 	bl	8000588 <__aeabi_f2d>
 800137c:	4680      	mov	r8, r0
 800137e:	4689      	mov	r9, r1
						state_target .pose.theta,  state_target.pose.v,
 8001380:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001384:	f103 0308 	add.w	r3, r3, #8
 8001388:	3b14      	subs	r3, #20
 800138a:	68db      	ldr	r3, [r3, #12]
				DATASTREAM_Print(
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8fb 	bl	8000588 <__aeabi_f2d>
 8001392:	4604      	mov	r4, r0
 8001394:	460d      	mov	r5, r1
						state_target .pose.om
 8001396:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800139a:	f103 0308 	add.w	r3, r3, #8
 800139e:	3b14      	subs	r3, #20
 80013a0:	691b      	ldr	r3, [r3, #16]
				DATASTREAM_Print(
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f8f0 	bl	8000588 <__aeabi_f2d>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 80013b0:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 80013b4:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 80013b8:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
 80013bc:	ed97 7b00 	vldr	d7, [r7]
 80013c0:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 80013c4:	ed97 7b02 	vldr	d7, [r7, #8]
 80013c8:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 80013cc:	ed97 7b04 	vldr	d7, [r7, #16]
 80013d0:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 80013d4:	ed97 7b06 	vldr	d7, [r7, #24]
 80013d8:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80013dc:	ed97 7b08 	vldr	d7, [r7, #32]
 80013e0:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80013e4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80013e8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80013ec:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80013f0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80013f4:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80013f8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80013fc:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001400:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001404:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001408:	ed8d 7b08 	vstr	d7, [sp, #32]
 800140c:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001410:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001414:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8001418:	ed8d 7b04 	vstr	d7, [sp, #16]
 800141c:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8001420:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001424:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8001428:	ed8d 7b00 	vstr	d7, [sp]
 800142c:	2212      	movs	r2, #18
 800142e:	2101      	movs	r1, #1
 8001430:	481e      	ldr	r0, [pc, #120]	; (80014ac <main+0x480>)
 8001432:	f000 ff07 	bl	8002244 <DATASTREAM_Print>
				);
				// Bit of transfer delay
				HAL_Delay(8);
 8001436:	2008      	movs	r0, #8
 8001438:	f003 fada 	bl	80049f0 <HAL_Delay>
				// Toggling led to show data transfer operation
				if( !(k%50) )
 800143c:	f507 5318 	add.w	r3, r7, #9728	; 0x2600
 8001440:	f103 0318 	add.w	r3, r3, #24
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <main+0x484>)
 8001448:	fb83 1302 	smull	r1, r3, r3, r2
 800144c:	1119      	asrs	r1, r3, #4
 800144e:	17d3      	asrs	r3, r2, #31
 8001450:	1acb      	subs	r3, r1, r3
 8001452:	2132      	movs	r1, #50	; 0x32
 8001454:	fb01 f303 	mul.w	r3, r1, r3
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d103      	bne.n	8001466 <main+0x43a>
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800145e:	2120      	movs	r1, #32
 8001460:	4814      	ldr	r0, [pc, #80]	; (80014b4 <main+0x488>)
 8001462:	f003 fdc0 	bl	8004fe6 <HAL_GPIO_TogglePin>
			for(int k= 0; k < N_sample; k++){
 8001466:	f507 5318 	add.w	r3, r7, #9728	; 0x2600
 800146a:	f103 0318 	add.w	r3, r3, #24
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	f507 5218 	add.w	r2, r7, #9728	; 0x2600
 8001476:	f102 0218 	add.w	r2, r2, #24
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	f507 5318 	add.w	r3, r7, #9728	; 0x2600
 8001480:	f103 0318 	add.w	r3, r3, #24
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	f507 5318 	add.w	r3, r7, #9728	; 0x2600
 800148a:	f103 031c 	add.w	r3, r3, #28
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	f6ff aecb 	blt.w	800122c <main+0x200>
			}

			// Turn off LED
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	2120      	movs	r1, #32
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <main+0x488>)
 800149c:	f003 fd8a 	bl	8004fb4 <HAL_GPIO_WritePin>

			// Disable WiFi
			HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2101      	movs	r1, #1
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <main+0x48c>)
 80014a6:	f003 fd85 	bl	8004fb4 <HAL_GPIO_WritePin>
	  if( motion_flag ){
 80014aa:	e5ed      	b.n	8001088 <main+0x5c>
 80014ac:	200003f4 	.word	0x200003f4
 80014b0:	51eb851f 	.word	0x51eb851f
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020800 	.word	0x40020800

080014bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b094      	sub	sp, #80	; 0x50
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	2234      	movs	r2, #52	; 0x34
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f006 fa7c 	bl	80079c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <SystemClock_Config+0xd4>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	4a29      	ldr	r2, [pc, #164]	; (8001590 <SystemClock_Config+0xd4>)
 80014ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ee:	6413      	str	r3, [r2, #64]	; 0x40
 80014f0:	4b27      	ldr	r3, [pc, #156]	; (8001590 <SystemClock_Config+0xd4>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014fc:	2300      	movs	r3, #0
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <SystemClock_Config+0xd8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001508:	4a22      	ldr	r2, [pc, #136]	; (8001594 <SystemClock_Config+0xd8>)
 800150a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b20      	ldr	r3, [pc, #128]	; (8001594 <SystemClock_Config+0xd8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151c:	2302      	movs	r3, #2
 800151e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001520:	2301      	movs	r3, #1
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001524:	2310      	movs	r3, #16
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001528:	2302      	movs	r3, #2
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152c:	2300      	movs	r3, #0
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001530:	2310      	movs	r3, #16
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001534:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001538:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800153a:	2304      	movs	r3, #4
 800153c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800153e:	2302      	movs	r3, #2
 8001540:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001542:	2302      	movs	r3, #2
 8001544:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4618      	mov	r0, r3
 800154c:	f004 f832 	bl	80055b4 <HAL_RCC_OscConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001556:	f000 fb7d 	bl	8001c54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155a:	230f      	movs	r3, #15
 800155c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155e:	2302      	movs	r3, #2
 8001560:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	2102      	movs	r1, #2
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fd50 	bl	800501c <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001582:	f000 fb67 	bl	8001c54 <Error_Handler>
  }
}
 8001586:	bf00      	nop
 8001588:	3750      	adds	r7, #80	; 0x50
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40007000 	.word	0x40007000

08001598 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b092      	sub	sp, #72	; 0x48
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
 80015b8:	615a      	str	r2, [r3, #20]
 80015ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2220      	movs	r2, #32
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f006 fa00 	bl	80079c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015c8:	4b45      	ldr	r3, [pc, #276]	; (80016e0 <MX_TIM1_Init+0x148>)
 80015ca:	4a46      	ldr	r2, [pc, #280]	; (80016e4 <MX_TIM1_Init+0x14c>)
 80015cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 80015ce:	4b44      	ldr	r3, [pc, #272]	; (80016e0 <MX_TIM1_Init+0x148>)
 80015d0:	2208      	movs	r2, #8
 80015d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d4:	4b42      	ldr	r3, [pc, #264]	; (80016e0 <MX_TIM1_Init+0x148>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80015da:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <MX_TIM1_Init+0x148>)
 80015dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80015e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e2:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <MX_TIM1_Init+0x148>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015e8:	4b3d      	ldr	r3, [pc, #244]	; (80016e0 <MX_TIM1_Init+0x148>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ee:	4b3c      	ldr	r3, [pc, #240]	; (80016e0 <MX_TIM1_Init+0x148>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015f4:	483a      	ldr	r0, [pc, #232]	; (80016e0 <MX_TIM1_Init+0x148>)
 80015f6:	f004 fb77 	bl	8005ce8 <HAL_TIM_PWM_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001600:	f000 fb28 	bl	8001c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800160c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001610:	4619      	mov	r1, r3
 8001612:	4833      	ldr	r0, [pc, #204]	; (80016e0 <MX_TIM1_Init+0x148>)
 8001614:	f005 fc4c 	bl	8006eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800161e:	f000 fb19 	bl	8001c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001622:	2360      	movs	r3, #96	; 0x60
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800162e:	2300      	movs	r3, #0
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001642:	2200      	movs	r2, #0
 8001644:	4619      	mov	r1, r3
 8001646:	4826      	ldr	r0, [pc, #152]	; (80016e0 <MX_TIM1_Init+0x148>)
 8001648:	f004 fedc 	bl	8006404 <HAL_TIM_PWM_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001652:	f000 faff 	bl	8001c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165a:	2204      	movs	r2, #4
 800165c:	4619      	mov	r1, r3
 800165e:	4820      	ldr	r0, [pc, #128]	; (80016e0 <MX_TIM1_Init+0x148>)
 8001660:	f004 fed0 	bl	8006404 <HAL_TIM_PWM_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800166a:	f000 faf3 	bl	8001c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800166e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001672:	2208      	movs	r2, #8
 8001674:	4619      	mov	r1, r3
 8001676:	481a      	ldr	r0, [pc, #104]	; (80016e0 <MX_TIM1_Init+0x148>)
 8001678:	f004 fec4 	bl	8006404 <HAL_TIM_PWM_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001682:	f000 fae7 	bl	8001c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	220c      	movs	r2, #12
 800168c:	4619      	mov	r1, r3
 800168e:	4814      	ldr	r0, [pc, #80]	; (80016e0 <MX_TIM1_Init+0x148>)
 8001690:	f004 feb8 	bl	8006404 <HAL_TIM_PWM_ConfigChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800169a:	f000 fadb 	bl	8001c54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	4619      	mov	r1, r3
 80016c0:	4807      	ldr	r0, [pc, #28]	; (80016e0 <MX_TIM1_Init+0x148>)
 80016c2:	f005 fc71 	bl	8006fa8 <HAL_TIMEx_ConfigBreakDeadTime>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80016cc:	f000 fac2 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <MX_TIM1_Init+0x148>)
 80016d2:	f000 fbb3 	bl	8001e3c <HAL_TIM_MspPostInit>

}
 80016d6:	bf00      	nop
 80016d8:	3748      	adds	r7, #72	; 0x48
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000410 	.word	0x20000410
 80016e4:	40010000 	.word	0x40010000

080016e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	; 0x30
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	2224      	movs	r2, #36	; 0x24
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f006 f966 	bl	80079c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001704:	4b21      	ldr	r3, [pc, #132]	; (800178c <MX_TIM2_Init+0xa4>)
 8001706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800170a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800170c:	4b1f      	ldr	r3, [pc, #124]	; (800178c <MX_TIM2_Init+0xa4>)
 800170e:	2200      	movs	r2, #0
 8001710:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <MX_TIM2_Init+0xa4>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001718:	4b1c      	ldr	r3, [pc, #112]	; (800178c <MX_TIM2_Init+0xa4>)
 800171a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800171e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <MX_TIM2_Init+0xa4>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <MX_TIM2_Init+0xa4>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800172c:	2301      	movs	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001734:	2301      	movs	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800173c:	230f      	movs	r3, #15
 800173e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001744:	2301      	movs	r3, #1
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800174c:	230f      	movs	r3, #15
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	4619      	mov	r1, r3
 8001756:	480d      	ldr	r0, [pc, #52]	; (800178c <MX_TIM2_Init+0xa4>)
 8001758:	f004 fbea 	bl	8005f30 <HAL_TIM_Encoder_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001762:	f000 fa77 	bl	8001c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4619      	mov	r1, r3
 8001772:	4806      	ldr	r0, [pc, #24]	; (800178c <MX_TIM2_Init+0xa4>)
 8001774:	f005 fb9c 	bl	8006eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800177e:	f000 fa69 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	3730      	adds	r7, #48	; 0x30
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200004c4 	.word	0x200004c4

08001790 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a4:	463b      	mov	r3, r7
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MX_TIM3_Init+0x94>)
 80017ae:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <MX_TIM3_Init+0x98>)
 80017b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <MX_TIM3_Init+0x94>)
 80017b4:	f240 3247 	movw	r2, #839	; 0x347
 80017b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_TIM3_Init+0x94>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MX_TIM3_Init+0x94>)
 80017c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_TIM3_Init+0x94>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <MX_TIM3_Init+0x94>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <MX_TIM3_Init+0x94>)
 80017d6:	f004 f98b 	bl	8005af0 <HAL_TIM_Base_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80017e0:	f000 fa38 	bl	8001c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	4619      	mov	r1, r3
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <MX_TIM3_Init+0x94>)
 80017f2:	f004 fec9 	bl	8006588 <HAL_TIM_ConfigClockSource>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80017fc:	f000 fa2a 	bl	8001c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001808:	463b      	mov	r3, r7
 800180a:	4619      	mov	r1, r3
 800180c:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_TIM3_Init+0x94>)
 800180e:	f005 fb4f 	bl	8006eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001818:	f000 fa1c 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000340 	.word	0x20000340
 8001828:	40000400 	.word	0x40000400

0800182c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08c      	sub	sp, #48	; 0x30
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	2224      	movs	r2, #36	; 0x24
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f006 f8c4 	bl	80079c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001848:	4b20      	ldr	r3, [pc, #128]	; (80018cc <MX_TIM5_Init+0xa0>)
 800184a:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <MX_TIM5_Init+0xa4>)
 800184c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800184e:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <MX_TIM5_Init+0xa0>)
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_TIM5_Init+0xa0>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <MX_TIM5_Init+0xa0>)
 800185c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001860:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_TIM5_Init+0xa0>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <MX_TIM5_Init+0xa0>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800186e:	2301      	movs	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001876:	2301      	movs	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800187e:	230f      	movs	r3, #15
 8001880:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001886:	2301      	movs	r3, #1
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800188e:	230f      	movs	r3, #15
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	4619      	mov	r1, r3
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <MX_TIM5_Init+0xa0>)
 800189a:	f004 fb49 	bl	8005f30 <HAL_TIM_Encoder_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80018a4:	f000 f9d6 	bl	8001c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_TIM5_Init+0xa0>)
 80018b6:	f005 fafb 	bl	8006eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80018c0:	f000 f9c8 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	3730      	adds	r7, #48	; 0x30
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	2000028c 	.word	0x2000028c
 80018d0:	40000c00 	.word	0x40000c00

080018d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <MX_USART3_UART_Init+0x50>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018e0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80018e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 800190c:	f005 fbbc 	bl	8007088 <HAL_UART_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001916:	f000 f99d 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000218 	.word	0x20000218
 8001924:	40004800 	.word	0x40004800

08001928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <MX_GPIO_Init+0x138>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a46      	ldr	r2, [pc, #280]	; (8001a60 <MX_GPIO_Init+0x138>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b44      	ldr	r3, [pc, #272]	; (8001a60 <MX_GPIO_Init+0x138>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b40      	ldr	r3, [pc, #256]	; (8001a60 <MX_GPIO_Init+0x138>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a3f      	ldr	r2, [pc, #252]	; (8001a60 <MX_GPIO_Init+0x138>)
 8001964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <MX_GPIO_Init+0x138>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <MX_GPIO_Init+0x138>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a38      	ldr	r2, [pc, #224]	; (8001a60 <MX_GPIO_Init+0x138>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <MX_GPIO_Init+0x138>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b32      	ldr	r3, [pc, #200]	; (8001a60 <MX_GPIO_Init+0x138>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a31      	ldr	r2, [pc, #196]	; (8001a60 <MX_GPIO_Init+0x138>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b2f      	ldr	r3, [pc, #188]	; (8001a60 <MX_GPIO_Init+0x138>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2101      	movs	r1, #1
 80019b2:	482c      	ldr	r0, [pc, #176]	; (8001a64 <MX_GPIO_Init+0x13c>)
 80019b4:	f003 fafe 	bl	8004fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SUPPLY_ENABLE_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2130      	movs	r1, #48	; 0x30
 80019bc:	482a      	ldr	r0, [pc, #168]	; (8001a68 <MX_GPIO_Init+0x140>)
 80019be:	f003 faf9 	bl	8004fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	4822      	ldr	r0, [pc, #136]	; (8001a64 <MX_GPIO_Init+0x13c>)
 80019da:	f003 f93f 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_ENABLE_Pin */
  GPIO_InitStruct.Pin = WIFI_ENABLE_Pin;
 80019de:	2301      	movs	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	481b      	ldr	r0, [pc, #108]	; (8001a64 <MX_GPIO_Init+0x13c>)
 80019f6:	f003 f931 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019fa:	230c      	movs	r3, #12
 80019fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4814      	ldr	r0, [pc, #80]	; (8001a68 <MX_GPIO_Init+0x140>)
 8001a16:	f003 f921 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : SUPPLY_ENABLE_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SUPPLY_ENABLE_Pin|LD2_Pin;
 8001a1a:	2330      	movs	r3, #48	; 0x30
 8001a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480d      	ldr	r0, [pc, #52]	; (8001a68 <MX_GPIO_Init+0x140>)
 8001a32:	f003 f913 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a48:	2308      	movs	r3, #8
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4619      	mov	r1, r3
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_GPIO_Init+0x140>)
 8001a54:	f003 f902 	bl	8004c5c <HAL_GPIO_Init>

}
 8001a58:	bf00      	nop
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020000 	.word	0x40020000

08001a6c <MAIN_DIFFDRIVE_Init>:

/* USER CODE BEGIN 4 */

static void MAIN_DIFFDRIVE_Init(void){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0

	uint16_t max_sample= 1200u;
 8001a72:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001a76:	84fb      	strh	r3, [r7, #38]	; 0x26

	hdiffdrive.Init.timing_htim= &htim3;
 8001a78:	4b59      	ldr	r3, [pc, #356]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001a7a:	4a5a      	ldr	r2, [pc, #360]	; (8001be4 <MAIN_DIFFDRIVE_Init+0x178>)
 8001a7c:	64da      	str	r2, [r3, #76]	; 0x4c
	hdiffdrive.Init.timing_time_step= TIME_STEP;
 8001a7e:	4b58      	ldr	r3, [pc, #352]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001a80:	4a59      	ldr	r2, [pc, #356]	; (8001be8 <MAIN_DIFFDRIVE_Init+0x17c>)
 8001a82:	651a      	str	r2, [r3, #80]	; 0x50

	hdiffdrive.Init.encoder_htim[left ]= &htim2;
 8001a84:	4b56      	ldr	r3, [pc, #344]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001a86:	4a59      	ldr	r2, [pc, #356]	; (8001bec <MAIN_DIFFDRIVE_Init+0x180>)
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38
	hdiffdrive.Init.encoder_htim[right]= &htim5;
 8001a8a:	4b55      	ldr	r3, [pc, #340]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001a8c:	4a58      	ldr	r2, [pc, #352]	; (8001bf0 <MAIN_DIFFDRIVE_Init+0x184>)
 8001a8e:	63da      	str	r2, [r3, #60]	; 0x3c
	hdiffdrive.Init.encoder_tim_channel[left ]= TIM_CHANNEL_1;
 8001a90:	4b53      	ldr	r3, [pc, #332]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40
	hdiffdrive.Init.encoder_tim_channel[right]= TIM_CHANNEL_1;
 8001a96:	4b52      	ldr	r3, [pc, #328]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	645a      	str	r2, [r3, #68]	; 0x44
	hdiffdrive.Init.encoder_tim_arr_resolution[left ]= 32;
 8001a9c:	4b50      	ldr	r3, [pc, #320]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	hdiffdrive.Init.encoder_tim_arr_resolution[right]= 32;
 8001aa4:	4b4e      	ldr	r3, [pc, #312]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	hdiffdrive.Init.encoder_resolution[left ]= 1900; //1920; // Number of step each wheel revolution
 8001aac:	4b4c      	ldr	r3, [pc, #304]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001aae:	4a51      	ldr	r2, [pc, #324]	; (8001bf4 <MAIN_DIFFDRIVE_Init+0x188>)
 8001ab0:	661a      	str	r2, [r3, #96]	; 0x60
	hdiffdrive.Init.encoder_resolution[right]= 1900; //1920;
 8001ab2:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001ab4:	4a4f      	ldr	r2, [pc, #316]	; (8001bf4 <MAIN_DIFFDRIVE_Init+0x188>)
 8001ab6:	665a      	str	r2, [r3, #100]	; 0x64

	hdiffdrive.Init.motor_htim[left ][forward ]= &htim1;
 8001ab8:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001aba:	4a4f      	ldr	r2, [pc, #316]	; (8001bf8 <MAIN_DIFFDRIVE_Init+0x18c>)
 8001abc:	601a      	str	r2, [r3, #0]
	hdiffdrive.Init.motor_htim[left ][backward]= &htim1;
 8001abe:	4b48      	ldr	r3, [pc, #288]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001ac0:	4a4d      	ldr	r2, [pc, #308]	; (8001bf8 <MAIN_DIFFDRIVE_Init+0x18c>)
 8001ac2:	605a      	str	r2, [r3, #4]
	hdiffdrive.Init.motor_htim[right][forward ]= &htim1;
 8001ac4:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001ac6:	4a4c      	ldr	r2, [pc, #304]	; (8001bf8 <MAIN_DIFFDRIVE_Init+0x18c>)
 8001ac8:	609a      	str	r2, [r3, #8]
	hdiffdrive.Init.motor_htim[right][backward]= &htim1;
 8001aca:	4b45      	ldr	r3, [pc, #276]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001acc:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <MAIN_DIFFDRIVE_Init+0x18c>)
 8001ace:	60da      	str	r2, [r3, #12]

	hdiffdrive.Init.motor_pwm_channel[left ][forward ]= TIM_CHANNEL_1;
 8001ad0:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
	hdiffdrive.Init.motor_pwm_channel[left ][backward]= TIM_CHANNEL_2;
 8001ad6:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001ad8:	2204      	movs	r2, #4
 8001ada:	615a      	str	r2, [r3, #20]
	hdiffdrive.Init.motor_pwm_channel[right][forward ]= TIM_CHANNEL_3;
 8001adc:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001ade:	2208      	movs	r2, #8
 8001ae0:	619a      	str	r2, [r3, #24]
	hdiffdrive.Init.motor_pwm_channel[right][backward]= TIM_CHANNEL_4;
 8001ae2:	4b3f      	ldr	r3, [pc, #252]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001ae4:	220c      	movs	r2, #12
 8001ae6:	61da      	str	r2, [r3, #28]

	hdiffdrive.Init.motor_max_voltage[left ]= 	 MOTOR_MAX_VOLTAGE;
 8001ae8:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001aea:	4a44      	ldr	r2, [pc, #272]	; (8001bfc <MAIN_DIFFDRIVE_Init+0x190>)
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
	hdiffdrive.Init.motor_max_voltage[right]= 	 MOTOR_MAX_VOLTAGE;
 8001aee:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001af0:	4a42      	ldr	r2, [pc, #264]	; (8001bfc <MAIN_DIFFDRIVE_Init+0x190>)
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
	hdiffdrive.Init.motor_min_voltage[left ]= 	 MOTOR_MIN_VOLTAGE;
 8001af4:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	631a      	str	r2, [r3, #48]	; 0x30
	hdiffdrive.Init.motor_min_voltage[right]= 	 MOTOR_MIN_VOLTAGE;
 8001afc:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	635a      	str	r2, [r3, #52]	; 0x34
	hdiffdrive.Init.motor_supply_voltage[left]=  SUPPLY_VOLTAGE;
 8001b04:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001b06:	4a3d      	ldr	r2, [pc, #244]	; (8001bfc <MAIN_DIFFDRIVE_Init+0x190>)
 8001b08:	621a      	str	r2, [r3, #32]
	hdiffdrive.Init.motor_supply_voltage[right]= SUPPLY_VOLTAGE;
 8001b0a:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001b0c:	4a3b      	ldr	r2, [pc, #236]	; (8001bfc <MAIN_DIFFDRIVE_Init+0x190>)
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24

	hdiffdrive.Init.control_fdfrwrd_arma_AR[left ]= AR_L;
 8001b10:	4a3b      	ldr	r2, [pc, #236]	; (8001c00 <MAIN_DIFFDRIVE_Init+0x194>)
 8001b12:	f107 0318 	add.w	r3, r7, #24
 8001b16:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b1c:	4a30      	ldr	r2, [pc, #192]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001b1e:	f107 0318 	add.w	r3, r7, #24
 8001b22:	6753      	str	r3, [r2, #116]	; 0x74
	hdiffdrive.Init.control_fdfrwrd_arma_AR[right]= AR_R;
 8001b24:	4a37      	ldr	r2, [pc, #220]	; (8001c04 <MAIN_DIFFDRIVE_Init+0x198>)
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b30:	4a2b      	ldr	r2, [pc, #172]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	6793      	str	r3, [r2, #120]	; 0x78
	hdiffdrive.Init.control_fdfrwrd_arma_MA[left ]= MA_L;
 8001b38:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <MAIN_DIFFDRIVE_Init+0x19c>)
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	4a28      	ldr	r2, [pc, #160]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	67d3      	str	r3, [r2, #124]	; 0x7c
	hdiffdrive.Init.control_fdfrwrd_arma_MA[right]= MA_R;
 8001b44:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <MAIN_DIFFDRIVE_Init+0x1a0>)
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	4a25      	ldr	r2, [pc, #148]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[left ]= N_AR_L;
 8001b50:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001b52:	2203      	movs	r2, #3
 8001b54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	hdiffdrive.Init.control_fdfrwrd_arma_n_ar[right]= N_AR_R;
 8001b58:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[left ]= N_MA_L;
 8001b60:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	hdiffdrive.Init.control_fdfrwrd_arma_n_ma[right]= N_MA_R;
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	hdiffdrive.Init.control_fdfrwrd_arma_tau[left ]= TAU_L;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001b72:	2202      	movs	r2, #2
 8001b74:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	hdiffdrive.Init.control_fdfrwrd_arma_tau[right]= TAU_R;
 8001b78:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

	hdiffdrive.Init.control_pid_P[left ]= PID_P_L;
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001b82:	4a23      	ldr	r2, [pc, #140]	; (8001c10 <MAIN_DIFFDRIVE_Init+0x1a4>)
 8001b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	hdiffdrive.Init.control_pid_P[right]= PID_P_R;
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001b8a:	4a21      	ldr	r2, [pc, #132]	; (8001c10 <MAIN_DIFFDRIVE_Init+0x1a4>)
 8001b8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	hdiffdrive.Init.control_pid_I[left ]= PID_I_L;
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001b92:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001b96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	hdiffdrive.Init.control_pid_I[right]= PID_I_R;
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001b9c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001ba0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	hdiffdrive.Init.control_pid_D[left ]= PID_D_L;
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	hdiffdrive.Init.control_pid_D[right]= PID_D_R;
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	hdiffdrive.Init.history_max_sample= max_sample;
 8001bb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bba:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001bbc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

	// --- Mechanical parameters (from real model) --- //
	hdiffdrive.Init.mech_prmtr_l= WHEEL_DISTANCE;
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001bc2:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <MAIN_DIFFDRIVE_Init+0x1a8>)
 8001bc4:	659a      	str	r2, [r3, #88]	; 0x58
	hdiffdrive.Init.mech_prmtr_r= WHEEL_RADIUS;
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001bc8:	4a13      	ldr	r2, [pc, #76]	; (8001c18 <MAIN_DIFFDRIVE_Init+0x1ac>)
 8001bca:	655a      	str	r2, [r3, #84]	; 0x54
	hdiffdrive.Init.mech_prmtr_max_wheel_speed= WHEEL_MAX_SPEED;
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001bce:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <MAIN_DIFFDRIVE_Init+0x1b0>)
 8001bd0:	65da      	str	r2, [r3, #92]	; 0x5c

	// --- Initialize handle --- //
	DIFFDRIVE_Init(&hdiffdrive);
 8001bd2:	4803      	ldr	r0, [pc, #12]	; (8001be0 <MAIN_DIFFDRIVE_Init+0x174>)
 8001bd4:	f000 fd5c 	bl	8002690 <DIFFDRIVE_Init>

}
 8001bd8:	bf00      	nop
 8001bda:	3728      	adds	r7, #40	; 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000578 	.word	0x20000578
 8001be4:	20000340 	.word	0x20000340
 8001be8:	3c23d70a 	.word	0x3c23d70a
 8001bec:	200004c4 	.word	0x200004c4
 8001bf0:	2000028c 	.word	0x2000028c
 8001bf4:	44ed8000 	.word	0x44ed8000
 8001bf8:	20000410 	.word	0x20000410
 8001bfc:	40f00000 	.word	0x40f00000
 8001c00:	080106f8 	.word	0x080106f8
 8001c04:	08010704 	.word	0x08010704
 8001c08:	39c3ec0a 	.word	0x39c3ec0a
 8001c0c:	39eb3e05 	.word	0x39eb3e05
 8001c10:	41c80000 	.word	0x41c80000
 8001c14:	3d9eb852 	.word	0x3d9eb852
 8001c18:	3d0d4fdf 	.word	0x3d0d4fdf
 8001c1c:	41200000 	.word	0x41200000

08001c20 <MAIN_DATASTREAM_Init>:


static void MAIN_DATASTREAM_Init(){
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0

	DATASTREAM_InitTypeDef DATASTREAM_InitStruct;

	DATASTREAM_InitStruct.DMA_Rx_Enable= false;
 8001c26:	2300      	movs	r3, #0
 8001c28:	723b      	strb	r3, [r7, #8]
	DATASTREAM_InitStruct.huart= &huart3;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <MAIN_DATASTREAM_Init+0x2c>)
 8001c2c:	607b      	str	r3, [r7, #4]

	hstream.Init= DATASTREAM_InitStruct;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <MAIN_DATASTREAM_Init+0x30>)
 8001c30:	461c      	mov	r4, r3
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c38:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	DATASTREAM_Init(&hstream);
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <MAIN_DATASTREAM_Init+0x30>)
 8001c3e:	f000 faab 	bl	8002198 <DATASTREAM_Init>

}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000218 	.word	0x20000218
 8001c50:	200003f4 	.word	0x200003f4

08001c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c58:	b672      	cpsid	i
}
 8001c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <Error_Handler+0x8>
	...

08001c60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <HAL_MspInit+0x4c>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a0f      	ldr	r2, [pc, #60]	; (8001cac <HAL_MspInit+0x4c>)
 8001c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_MspInit+0x4c>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_MspInit+0x4c>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <HAL_MspInit+0x4c>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c90:	6413      	str	r3, [r2, #64]	; 0x40
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_MspInit+0x4c>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800

08001cb0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <HAL_TIM_PWM_MspInit+0x3c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10d      	bne.n	8001cde <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_TIM_PWM_MspInit+0x40>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <HAL_TIM_PWM_MspInit+0x40>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <HAL_TIM_PWM_MspInit+0x40>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40010000 	.word	0x40010000
 8001cf0:	40023800 	.word	0x40023800

08001cf4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d14:	d12d      	bne.n	8001d72 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	4b30      	ldr	r3, [pc, #192]	; (8001ddc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a2f      	ldr	r2, [pc, #188]	; (8001ddc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	61bb      	str	r3, [r7, #24]
 8001d30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a28      	ldr	r2, [pc, #160]	; (8001ddc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LEFT_A_Pin|ENCODER_LEFT_B_Pin;
 8001d4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d60:	2301      	movs	r3, #1
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	4619      	mov	r1, r3
 8001d6a:	481d      	ldr	r0, [pc, #116]	; (8001de0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001d6c:	f002 ff76 	bl	8004c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001d70:	e030      	b.n	8001dd4 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM5)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d12b      	bne.n	8001dd4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001d86:	f043 0308 	orr.w	r3, r3, #8
 8001d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6313      	str	r3, [r2, #48]	; 0x30
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_RIGHT_B_Pin|ENCODER_RIGHT_A_Pin;
 8001db4:	2303      	movs	r3, #3
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	; (8001de8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001dd0:	f002 ff44 	bl	8004c5c <HAL_GPIO_Init>
}
 8001dd4:	bf00      	nop
 8001dd6:	3730      	adds	r7, #48	; 0x30
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020400 	.word	0x40020400
 8001de4:	40000c00 	.word	0x40000c00
 8001de8:	40020000 	.word	0x40020000

08001dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <HAL_TIM_Base_MspInit+0x48>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d115      	bne.n	8001e2a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_TIM_Base_MspInit+0x4c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a0c      	ldr	r2, [pc, #48]	; (8001e38 <HAL_TIM_Base_MspInit+0x4c>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_TIM_Base_MspInit+0x4c>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	201d      	movs	r0, #29
 8001e20:	f002 fee5 	bl	8004bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e24:	201d      	movs	r0, #29
 8001e26:	f002 fefe 	bl	8004c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40000400 	.word	0x40000400
 8001e38:	40023800 	.word	0x40023800

08001e3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <HAL_TIM_MspPostInit+0x68>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d11e      	bne.n	8001e9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_TIM_MspPostInit+0x6c>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <HAL_TIM_MspPostInit+0x6c>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_TIM_MspPostInit+0x6c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_FORWARD_Pin|LEFT_MOTOR_BACKWARD_Pin|RIGHT_MOTOR_FORWARD_Pin|RIGHT_MOTOR_BACKWARD_Pin;
 8001e7a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001e7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	4619      	mov	r1, r3
 8001e96:	4805      	ldr	r0, [pc, #20]	; (8001eac <HAL_TIM_MspPostInit+0x70>)
 8001e98:	f002 fee0 	bl	8004c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e9c:	bf00      	nop
 8001e9e:	3720      	adds	r7, #32
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020000 	.word	0x40020000

08001eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a28      	ldr	r2, [pc, #160]	; (8001f70 <HAL_UART_MspInit+0xc0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d14a      	bne.n	8001f68 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <HAL_UART_MspInit+0xc4>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <HAL_UART_MspInit+0xc4>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_UART_MspInit+0xc4>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_UART_MspInit+0xc4>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <HAL_UART_MspInit+0xc4>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <HAL_UART_MspInit+0xc4>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_UART_MspInit+0xc4>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <HAL_UART_MspInit+0xc4>)
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <HAL_UART_MspInit+0xc4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f26:	2320      	movs	r3, #32
 8001f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f36:	2307      	movs	r3, #7
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480d      	ldr	r0, [pc, #52]	; (8001f78 <HAL_UART_MspInit+0xc8>)
 8001f42:	f002 fe8b 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f58:	2307      	movs	r3, #7
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4619      	mov	r1, r3
 8001f62:	4806      	ldr	r0, [pc, #24]	; (8001f7c <HAL_UART_MspInit+0xcc>)
 8001f64:	f002 fe7a 	bl	8004c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f68:	bf00      	nop
 8001f6a:	3728      	adds	r7, #40	; 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40004800 	.word	0x40004800
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	40020400 	.word	0x40020400

08001f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <NMI_Handler+0x4>

08001f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <HardFault_Handler+0x4>

08001f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <MemManage_Handler+0x4>

08001f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <BusFault_Handler+0x4>

08001f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <UsageFault_Handler+0x4>

08001f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fcc:	f002 fcf0 	bl	80049b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <TIM3_IRQHandler+0x10>)
 8001fda:	f004 f8eb 	bl	80061b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000340 	.word	0x20000340

08001fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
	return 1;
 8001fec:	2301      	movs	r3, #1
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_kill>:

int _kill(int pid, int sig)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002002:	f005 fca1 	bl	8007948 <__errno>
 8002006:	4603      	mov	r3, r0
 8002008:	2216      	movs	r2, #22
 800200a:	601a      	str	r2, [r3, #0]
	return -1;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_exit>:

void _exit (int status)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002020:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ffe7 	bl	8001ff8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800202a:	e7fe      	b.n	800202a <_exit+0x12>

0800202c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e00a      	b.n	8002054 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800203e:	f3af 8000 	nop.w
 8002042:	4601      	mov	r1, r0
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	60ba      	str	r2, [r7, #8]
 800204a:	b2ca      	uxtb	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3301      	adds	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	dbf0      	blt.n	800203e <_read+0x12>
	}

return len;
 800205c:	687b      	ldr	r3, [r7, #4]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	e009      	b.n	800208c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	60ba      	str	r2, [r7, #8]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	dbf1      	blt.n	8002078 <_write+0x12>
	}
	return len;
 8002094:	687b      	ldr	r3, [r7, #4]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_close>:

int _close(int file)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
	return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c6:	605a      	str	r2, [r3, #4]
	return 0;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_isatty>:

int _isatty(int file)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
	return 1;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
	return 0;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	; (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002138:	f005 fc06 	bl	8007948 <__errno>
 800213c:	4603      	mov	r3, r0
 800213e:	220c      	movs	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <_sbrk+0x64>)
 8002158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20020000 	.word	0x20020000
 8002168:	00000400 	.word	0x00000400
 800216c:	20000200 	.word	0x20000200
 8002170:	20000978 	.word	0x20000978

08002174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <SystemInit+0x20>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <SystemInit+0x20>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <DATASTREAM_Init>:


/* ----------------- Functions definition --------------------- */

// Setting up streaming
DATASTREAM_StatusTypeDef DATASTREAM_Init(DATASTREAM_HandleTypeDef* hstream){
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

	// Check if it's possible to initialize a new stream
	if( glbl_idx < MAX_STREAMS ){
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <DATASTREAM_Init+0x9c>)
 80021a2:	f993 3000 	ldrsb.w	r3, [r3]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	dc2e      	bgt.n	8002208 <DATASTREAM_Init+0x70>

		// Realloc array of handles pointers
		hdatastream= (DATASTREAM_HandleTypeDef**)realloc(hdatastream, glbl_idx*sizeof(DATASTREAM_HandleTypeDef*));
 80021aa:	4b23      	ldr	r3, [pc, #140]	; (8002238 <DATASTREAM_Init+0xa0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a21      	ldr	r2, [pc, #132]	; (8002234 <DATASTREAM_Init+0x9c>)
 80021b0:	f992 2000 	ldrsb.w	r2, [r2]
 80021b4:	0092      	lsls	r2, r2, #2
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f006 fb41 	bl	8008840 <realloc>
 80021be:	4603      	mov	r3, r0
 80021c0:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <DATASTREAM_Init+0xa0>)
 80021c2:	6013      	str	r3, [r2, #0]

		// Connect current handle with input handle using pointers
		hdatastream[glbl_idx]= hstream;
 80021c4:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <DATASTREAM_Init+0xa0>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <DATASTREAM_Init+0x9c>)
 80021ca:	f993 3000 	ldrsb.w	r3, [r3]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	601a      	str	r2, [r3, #0]
	else
		// Return failure
		return DATASTREAM_ERROR;

	// Assign handle id and increment global index
	hstream->id= glbl_idx++;
 80021d6:	4b17      	ldr	r3, [pc, #92]	; (8002234 <DATASTREAM_Init+0x9c>)
 80021d8:	f993 2000 	ldrsb.w	r2, [r3]
 80021dc:	b2d3      	uxtb	r3, r2
 80021de:	3301      	adds	r3, #1
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	b259      	sxtb	r1, r3
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <DATASTREAM_Init+0x9c>)
 80021e6:	7019      	strb	r1, [r3, #0]
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	765a      	strb	r2, [r3, #25]

	// Local UART handle
	hstream->huart=              hstream->Init.huart;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60da      	str	r2, [r3, #12]
	// DMA Enable
	hstream->DMA_Rx_Enable=      hstream->Init.DMA_Rx_Enable;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	791a      	ldrb	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	741a      	strb	r2, [r3, #16]

	if( hstream->DMA_Rx_Enable ){
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	7c1b      	ldrb	r3, [r3, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00d      	beq.n	8002222 <DATASTREAM_Init+0x8a>
 8002206:	e001      	b.n	800220c <DATASTREAM_Init+0x74>
		return DATASTREAM_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e00f      	b.n	800222c <DATASTREAM_Init+0x94>
		// DMA Interrupt Request "id"
		hstream->DMA_Rx_Stream_IRQn= hstream->Init.DMA_Rx_Stream_IRQn;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	615a      	str	r2, [r3, #20]
		// Assign Rx callback
		hstream->huart->RxCpltCallback= DATASTREAM_RxCpltCallback;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a08      	ldr	r2, [pc, #32]	; (800223c <DATASTREAM_Init+0xa4>)
 800221a:	651a      	str	r2, [r3, #80]	; 0x50
		// Assign default true value to flag
		hstream->RxCpltFlag= true;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	761a      	strb	r2, [r3, #24]
	}

	// Assign Error callback
	hstream->huart->ErrorCallback=  DATASTREAM_ErrorCallback;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	4a06      	ldr	r2, [pc, #24]	; (8002240 <DATASTREAM_Init+0xa8>)
 8002228:	655a      	str	r2, [r3, #84]	; 0x54

	// Return success
	return DATASTREAM_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000204 	.word	0x20000204
 8002238:	200007cc 	.word	0x200007cc
 800223c:	080023c1 	.word	0x080023c1
 8002240:	08002421 	.word	0x08002421

08002244 <DATASTREAM_Print>:
}


// Do send values into serial, using a Variadic function. This version is for freeRTOS that doesn't support
// printf and sprintf
void DATASTREAM_Print(DATASTREAM_HandleTypeDef* hstream, DATASTREAM_PrintMode mode, int vargn, ...){
 8002244:	b40c      	push	{r2, r3}
 8002246:	b580      	push	{r7, lr}
 8002248:	b094      	sub	sp, #80	; 0x50
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	70fb      	strb	r3, [r7, #3]

	// Initializing variadic arguments, using "stdarg.h" macros
	va_list vargp;
	va_start( vargp, vargn );
 8002252:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002256:	63bb      	str	r3, [r7, #56]	; 0x38

	// Timeout of ms
	uint32_t timeout= 1;
 8002258:	2301      	movs	r3, #1
 800225a:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(mode){
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	2b03      	cmp	r3, #3
 8002260:	f200 80a6 	bhi.w	80023b0 <DATASTREAM_Print+0x16c>
 8002264:	a201      	add	r2, pc, #4	; (adr r2, 800226c <DATASTREAM_Print+0x28>)
 8002266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226a:	bf00      	nop
 800226c:	08002323 	.word	0x08002323
 8002270:	0800227d 	.word	0x0800227d
 8002274:	080023b1 	.word	0x080023b1
 8002278:	080023b1 	.word	0x080023b1
		// ------------ Streaming values in csv format --------------------
		// (Using this mode I send N values separated by comma character,
		//  each stream is ended with a newline)
		case float_csv:

			for(int i=0; i<vargn; i++){
 800227c:	2300      	movs	r3, #0
 800227e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002280:	e03e      	b.n	8002300 <DATASTREAM_Print+0xbc>
				char data_buff[15];
				// Init buffer
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 8002282:	2300      	movs	r3, #0
 8002284:	64bb      	str	r3, [r7, #72]	; 0x48
 8002286:	e008      	b.n	800229a <DATASTREAM_Print+0x56>
					data_buff[k]= '\0';
 8002288:	f107 0220 	add.w	r2, r7, #32
 800228c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228e:	4413      	add	r3, r2
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 8002294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002296:	3301      	adds	r3, #1
 8002298:	64bb      	str	r3, [r7, #72]	; 0x48
 800229a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229c:	2b0e      	cmp	r3, #14
 800229e:	d9f3      	bls.n	8002288 <DATASTREAM_Print+0x44>

				// Float to Array!
				ftoa((float)va_arg(vargp, double), data_buff, 7);
 80022a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a2:	3307      	adds	r3, #7
 80022a4:	f023 0307 	bic.w	r3, r3, #7
 80022a8:	f103 0208 	add.w	r2, r3, #8
 80022ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80022ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	f7fe fcb7 	bl	8000c28 <__aeabi_d2f>
 80022ba:	4602      	mov	r2, r0
 80022bc:	f107 0320 	add.w	r3, r7, #32
 80022c0:	2107      	movs	r1, #7
 80022c2:	4618      	mov	r0, r3
 80022c4:	ee00 2a10 	vmov	s0, r2
 80022c8:	f000 f942 	bl	8002550 <ftoa>
				// Polling TX
				HAL_UART_Transmit(hstream->huart, (uint8_t *)data_buff, sizeof(data_buff), timeout);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68d8      	ldr	r0, [r3, #12]
 80022d0:	f107 0120 	add.w	r1, r7, #32
 80022d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d6:	220f      	movs	r2, #15
 80022d8:	f004 ff30 	bl	800713c <HAL_UART_Transmit>
				// Omit last comma
				if( i != vargn-1)
 80022dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022de:	3b01      	subs	r3, #1
 80022e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d009      	beq.n	80022fa <DATASTREAM_Print+0xb6>
					HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){','}), sizeof(uint8_t), timeout);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68d8      	ldr	r0, [r3, #12]
 80022ea:	232c      	movs	r3, #44	; 0x2c
 80022ec:	773b      	strb	r3, [r7, #28]
 80022ee:	f107 011c 	add.w	r1, r7, #28
 80022f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f4:	2201      	movs	r2, #1
 80022f6:	f004 ff21 	bl	800713c <HAL_UART_Transmit>
			for(int i=0; i<vargn; i++){
 80022fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022fc:	3301      	adds	r3, #1
 80022fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002300:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002304:	429a      	cmp	r2, r3
 8002306:	dbbc      	blt.n	8002282 <DATASTREAM_Print+0x3e>
			}
			// Adding a newline
			HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){'\n'}), 1, HAL_MAX_DELAY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68d8      	ldr	r0, [r3, #12]
 800230c:	230a      	movs	r3, #10
 800230e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002312:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800231a:	2201      	movs	r2, #1
 800231c:	f004 ff0e 	bl	800713c <HAL_UART_Transmit>

			break;
 8002320:	e047      	b.n	80023b2 <DATASTREAM_Print+0x16e>

		case int_csv:

			for(int i=0; i<vargn; i++){
 8002322:	2300      	movs	r3, #0
 8002324:	647b      	str	r3, [r7, #68]	; 0x44
 8002326:	e032      	b.n	800238e <DATASTREAM_Print+0x14a>
				char data_buff[15];
				// Init buffer
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 8002328:	2300      	movs	r3, #0
 800232a:	643b      	str	r3, [r7, #64]	; 0x40
 800232c:	e008      	b.n	8002340 <DATASTREAM_Print+0xfc>
					data_buff[k]= '\0';
 800232e:	f107 020c 	add.w	r2, r7, #12
 8002332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002334:	4413      	add	r3, r2
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
				for(int k=0; k < sizeof(data_buff)/sizeof(*data_buff); k++)
 800233a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800233c:	3301      	adds	r3, #1
 800233e:	643b      	str	r3, [r7, #64]	; 0x40
 8002340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002342:	2b0e      	cmp	r3, #14
 8002344:	d9f3      	bls.n	800232e <DATASTREAM_Print+0xea>

				// Float to Array!
				itostr(va_arg(vargp, int), data_buff, 0);
 8002346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002348:	1d1a      	adds	r2, r3, #4
 800234a:	63ba      	str	r2, [r7, #56]	; 0x38
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f107 010c 	add.w	r1, r7, #12
 8002352:	2200      	movs	r2, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f89d 	bl	8002494 <itostr>
				// Polling TX
				HAL_UART_Transmit(hstream->huart, (uint8_t *)data_buff, sizeof(data_buff), timeout);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68d8      	ldr	r0, [r3, #12]
 800235e:	f107 010c 	add.w	r1, r7, #12
 8002362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002364:	220f      	movs	r2, #15
 8002366:	f004 fee9 	bl	800713c <HAL_UART_Transmit>
				// Omit last comma
				if( i != vargn-1)
 800236a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800236c:	3b01      	subs	r3, #1
 800236e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002370:	429a      	cmp	r2, r3
 8002372:	d009      	beq.n	8002388 <DATASTREAM_Print+0x144>
					HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){','}), sizeof(uint8_t), timeout);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68d8      	ldr	r0, [r3, #12]
 8002378:	232c      	movs	r3, #44	; 0x2c
 800237a:	723b      	strb	r3, [r7, #8]
 800237c:	f107 0108 	add.w	r1, r7, #8
 8002380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002382:	2201      	movs	r2, #1
 8002384:	f004 feda 	bl	800713c <HAL_UART_Transmit>
			for(int i=0; i<vargn; i++){
 8002388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238a:	3301      	adds	r3, #1
 800238c:	647b      	str	r3, [r7, #68]	; 0x44
 800238e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002392:	429a      	cmp	r2, r3
 8002394:	dbc8      	blt.n	8002328 <DATASTREAM_Print+0xe4>
			}
			// Adding a newline
			HAL_UART_Transmit(hstream->huart, (uint8_t *)((char[1]){'\n'}), 1, HAL_MAX_DELAY);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68d8      	ldr	r0, [r3, #12]
 800239a:	230a      	movs	r3, #10
 800239c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80023a0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80023a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023a8:	2201      	movs	r2, #1
 80023aa:	f004 fec7 	bl	800713c <HAL_UART_Transmit>

			break;
 80023ae:	e000      	b.n	80023b2 <DATASTREAM_Print+0x16e>

		case int_binary:
			break;

		default:
			break;
 80023b0:	bf00      	nop
	}

	// DeInit variables arguments
	va_end( vargp );

}
 80023b2:	bf00      	nop
 80023b4:	3750      	adds	r7, #80	; 0x50
 80023b6:	46bd      	mov	sp, r7
 80023b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023bc:	b002      	add	sp, #8
 80023be:	4770      	bx	lr

080023c0 <DATASTREAM_RxCpltCallback>:


// --- Rx Callback --- //

void DATASTREAM_RxCpltCallback(UART_HandleTypeDef *huart){
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

	// Checking which stream caused the callback, then assign true value to Rx complete flag
	for(int i=0; i<glbl_idx; i++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e015      	b.n	80023fa <DATASTREAM_RxCpltCallback+0x3a>
		if(hdatastream[i]->huart == huart){
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <DATASTREAM_RxCpltCallback+0x58>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d108      	bne.n	80023f4 <DATASTREAM_RxCpltCallback+0x34>
			hdatastream[i]->RxCpltFlag= true;
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <DATASTREAM_RxCpltCallback+0x58>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2201      	movs	r2, #1
 80023f0:	761a      	strb	r2, [r3, #24]
			break;
 80023f2:	e00a      	b.n	800240a <DATASTREAM_RxCpltCallback+0x4a>
	for(int i=0; i<glbl_idx; i++)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3301      	adds	r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <DATASTREAM_RxCpltCallback+0x5c>)
 80023fc:	f993 3000 	ldrsb.w	r3, [r3]
 8002400:	461a      	mov	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4293      	cmp	r3, r2
 8002406:	dbe2      	blt.n	80023ce <DATASTREAM_RxCpltCallback+0xe>
		}

}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	200007cc 	.word	0x200007cc
 800241c:	20000204 	.word	0x20000204

08002420 <DATASTREAM_ErrorCallback>:


// --- Error callback --- //

void DATASTREAM_ErrorCallback(UART_HandleTypeDef *huart){
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	__NOP();
 8002428:	bf00      	nop
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <reverse>:
 */

#include <my_lib/datastream_utils.h>


void reverse(char* str, int len){
 8002436:	b480      	push	{r7}
 8002438:	b087      	sub	sp, #28
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	3b01      	subs	r3, #1
 8002448:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800244a:	e018      	b.n	800247e <reverse+0x48>
        temp = str[i];
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	441a      	add	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	440b      	add	r3, r1
 8002462:	7812      	ldrb	r2, [r2, #0]
 8002464:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	701a      	strb	r2, [r3, #0]
        i++;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	3301      	adds	r3, #1
 8002476:	617b      	str	r3, [r7, #20]
        j--;
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	3b01      	subs	r3, #1
 800247c:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	429a      	cmp	r2, r3
 8002484:	dbe2      	blt.n	800244c <reverse+0x16>
    }
}
 8002486:	bf00      	nop
 8002488:	bf00      	nop
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <itostr>:

int itostr(int x, char str[], int d){
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
    int i = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
    int neg= 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]

    if( x<0 ){
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da23      	bge.n	80024f6 <itostr+0x62>
    	x= -x;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	425b      	negs	r3, r3
 80024b2:	60fb      	str	r3, [r7, #12]
    	neg= 1;
 80024b4:	2301      	movs	r3, #1
 80024b6:	613b      	str	r3, [r7, #16]
    }

    while (x) {
 80024b8:	e01d      	b.n	80024f6 <itostr+0x62>
        str[i++] = (x % 10) + '0';
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4b22      	ldr	r3, [pc, #136]	; (8002548 <itostr+0xb4>)
 80024be:	fb83 1302 	smull	r1, r3, r3, r2
 80024c2:	1099      	asrs	r1, r3, #2
 80024c4:	17d3      	asrs	r3, r2, #31
 80024c6:	1ac9      	subs	r1, r1, r3
 80024c8:	460b      	mov	r3, r1
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	1ad1      	subs	r1, r2, r3
 80024d2:	b2ca      	uxtb	r2, r1
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	1c59      	adds	r1, r3, #1
 80024d8:	6179      	str	r1, [r7, #20]
 80024da:	4619      	mov	r1, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	440b      	add	r3, r1
 80024e0:	3230      	adds	r2, #48	; 0x30
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a17      	ldr	r2, [pc, #92]	; (8002548 <itostr+0xb4>)
 80024ea:	fb82 1203 	smull	r1, r2, r2, r3
 80024ee:	1092      	asrs	r2, r2, #2
 80024f0:	17db      	asrs	r3, r3, #31
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	60fb      	str	r3, [r7, #12]
    while (x) {
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1de      	bne.n	80024ba <itostr+0x26>
    }

    while (i < d)
 80024fc:	e007      	b.n	800250e <itostr+0x7a>
        str[i++] = '0';
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	617a      	str	r2, [r7, #20]
 8002504:	461a      	mov	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4413      	add	r3, r2
 800250a:	2230      	movs	r2, #48	; 0x30
 800250c:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	429a      	cmp	r2, r3
 8002514:	dbf3      	blt.n	80024fe <itostr+0x6a>

    if(neg)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <itostr+0x98>
    	str[i++]= '-';
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	617a      	str	r2, [r7, #20]
 8002522:	461a      	mov	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4413      	add	r3, r2
 8002528:	222d      	movs	r2, #45	; 0x2d
 800252a:	701a      	strb	r2, [r3, #0]

    reverse(str, i);
 800252c:	6979      	ldr	r1, [r7, #20]
 800252e:	68b8      	ldr	r0, [r7, #8]
 8002530:	f7ff ff81 	bl	8002436 <reverse>

    str[i] = '\0';
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	4413      	add	r3, r2
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]

    return i;
 800253e:	697b      	ldr	r3, [r7, #20]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	66666667 	.word	0x66666667
 800254c:	00000000 	.word	0x00000000

08002550 <ftoa>:

void ftoa(float n, char* res, int afterpoint){
 8002550:	b5b0      	push	{r4, r5, r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	ed87 0a03 	vstr	s0, [r7, #12]
 800255a:	60b8      	str	r0, [r7, #8]
 800255c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 800255e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002566:	ee17 3a90 	vmov	r3, s15
 800256a:	617b      	str	r3, [r7, #20]
    float fpart;

    int i;

    if( n < 0 )
 800256c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002570:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002578:	d50d      	bpl.n	8002596 <ftoa+0x46>
    	// Extract floating part
    	fpart = -(n - (float)ipart);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	ee07 3a90 	vmov	s15, r3
 8002580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002584:	ed97 7a03 	vldr	s14, [r7, #12]
 8002588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258c:	eef1 7a67 	vneg.f32	s15, s15
 8002590:	edc7 7a07 	vstr	s15, [r7, #28]
 8002594:	e00a      	b.n	80025ac <ftoa+0x5c>
    else
    	// Extract floating part
    	fpart = n - (float)ipart;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	ee07 3a90 	vmov	s15, r3
 800259c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80025a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a8:	edc7 7a07 	vstr	s15, [r7, #28]

    // convert integer part to string when ipart is 0
    if( n < 1 && n > 0){
 80025ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80025b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025bc:	d50c      	bpl.n	80025d8 <ftoa+0x88>
 80025be:	edd7 7a03 	vldr	s15, [r7, #12]
 80025c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ca:	dd05      	ble.n	80025d8 <ftoa+0x88>
    	res[0]= '0';
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2230      	movs	r2, #48	; 0x30
 80025d0:	701a      	strb	r2, [r3, #0]
    	i= 1;
 80025d2:	2301      	movs	r3, #1
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	e01f      	b.n	8002618 <ftoa+0xc8>
    }
    else
    if( n < 0 && n > -1){
 80025d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e4:	d512      	bpl.n	800260c <ftoa+0xbc>
 80025e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80025ea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80025ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	dd09      	ble.n	800260c <ftoa+0xbc>
    	res[0]= '-';
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	222d      	movs	r2, #45	; 0x2d
 80025fc:	701a      	strb	r2, [r3, #0]
    	res[1]= '0';
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	3301      	adds	r3, #1
 8002602:	2230      	movs	r2, #48	; 0x30
 8002604:	701a      	strb	r2, [r3, #0]
    	i= 2;
 8002606:	2302      	movs	r3, #2
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	e005      	b.n	8002618 <ftoa+0xc8>
    }
    else
    	// convert integer part to string
    	i = itostr(ipart, res, 0);
 800260c:	2200      	movs	r2, #0
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	6978      	ldr	r0, [r7, #20]
 8002612:	f7ff ff3f 	bl	8002494 <itostr>
 8002616:	61b8      	str	r0, [r7, #24]

    // check for display option after point
    if (afterpoint != 0) {
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d030      	beq.n	8002680 <ftoa+0x130>
        res[i] = '.';
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	4413      	add	r3, r2
 8002624:	222e      	movs	r2, #46	; 0x2e
 8002626:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 8002628:	69f8      	ldr	r0, [r7, #28]
 800262a:	f7fd ffad 	bl	8000588 <__aeabi_f2d>
 800262e:	4604      	mov	r4, r0
 8002630:	460d      	mov	r5, r1
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fd ff96 	bl	8000564 <__aeabi_i2d>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	ec43 2b11 	vmov	d1, r2, r3
 8002640:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8002688 <ftoa+0x138>
 8002644:	f009 fe88 	bl	800c358 <pow>
 8002648:	ec53 2b10 	vmov	r2, r3, d0
 800264c:	4620      	mov	r0, r4
 800264e:	4629      	mov	r1, r5
 8002650:	f7fd fff2 	bl	8000638 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe fae4 	bl	8000c28 <__aeabi_d2f>
 8002660:	4603      	mov	r3, r0
 8002662:	61fb      	str	r3, [r7, #28]
        itostr((int)fpart, res + i + 1, afterpoint);
 8002664:	edd7 7a07 	vldr	s15, [r7, #28]
 8002668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	3301      	adds	r3, #1
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	4413      	add	r3, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4619      	mov	r1, r3
 8002678:	ee17 0a90 	vmov	r0, s15
 800267c:	f7ff ff0a 	bl	8002494 <itostr>
    }
}
 8002680:	bf00      	nop
 8002682:	3720      	adds	r7, #32
 8002684:	46bd      	mov	sp, r7
 8002686:	bdb0      	pop	{r4, r5, r7, pc}
 8002688:	00000000 	.word	0x00000000
 800268c:	40240000 	.word	0x40240000

08002690 <DIFFDRIVE_Init>:
#endif

/* Functions Implementation */

// Initialization
void DIFFDRIVE_Init(DIFFDRIVE_HandleTypeDef* init_hdiffdrv){
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

	// Initializing global handle
	hdiffdrv= init_hdiffdrv;
 8002698:	4a85      	ldr	r2, [pc, #532]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6013      	str	r3, [r2, #0]

	// Assigning control struct
	DIFFDRIVE_CONTROL_TypeDef *hctrl= hdiffdrv->control;
 800269e:	4b84      	ldr	r3, [pc, #528]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80026a6:	623b      	str	r3, [r7, #32]

	// Initializing handle structure values from Init field
	hdiffdrv->timing.htim=       		   hdiffdrv->Init.timing_htim;
 80026a8:	4b81      	ldr	r3, [pc, #516]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b80      	ldr	r3, [pc, #512]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80026b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	hdiffdrv->timing.time_step=   		   hdiffdrv->Init.timing_time_step;
 80026b6:	4b7e      	ldr	r3, [pc, #504]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b7d      	ldr	r3, [pc, #500]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hdiffdrv->mech_prmtr.r=     		   hdiffdrv->Init.mech_prmtr_r;
 80026c4:	4b7a      	ldr	r3, [pc, #488]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b79      	ldr	r3, [pc, #484]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80026ce:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	hdiffdrv->mech_prmtr.l=    			   hdiffdrv->Init.mech_prmtr_l;
 80026d2:	4b77      	ldr	r3, [pc, #476]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80026dc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	hdiffdrv->mech_prmtr.max_wheel_speed=  hdiffdrv->Init.mech_prmtr_max_wheel_speed;
 80026e0:	4b73      	ldr	r3, [pc, #460]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b72      	ldr	r3, [pc, #456]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80026ea:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80026ee:	2300      	movs	r3, #0
 80026f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80026f4:	e279      	b.n	8002bea <DIFFDRIVE_Init+0x55a>

		// Initializing feedforward Control handle structure values from Init field
		hctrl[side].fdfrwrd.Init.arma_n_ar=  hdiffdrv->Init.control_fdfrwrd_arma_n_ar[side];
 80026f6:	4b6e      	ldr	r3, [pc, #440]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80026fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002702:	2068      	movs	r0, #104	; 0x68
 8002704:	fb00 f303 	mul.w	r3, r0, r3
 8002708:	6a38      	ldr	r0, [r7, #32]
 800270a:	4403      	add	r3, r0
 800270c:	3134      	adds	r1, #52	; 0x34
 800270e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002712:	801a      	strh	r2, [r3, #0]
		hctrl[side].fdfrwrd.Init.arma_n_ma=  hdiffdrv->Init.control_fdfrwrd_arma_n_ma[side];
 8002714:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 8002716:	6819      	ldr	r1, [r3, #0]
 8002718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800271c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002720:	2068      	movs	r0, #104	; 0x68
 8002722:	fb00 f202 	mul.w	r2, r0, r2
 8002726:	6a38      	ldr	r0, [r7, #32]
 8002728:	4402      	add	r2, r0
 800272a:	3334      	adds	r3, #52	; 0x34
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	440b      	add	r3, r1
 8002730:	889b      	ldrh	r3, [r3, #4]
 8002732:	8053      	strh	r3, [r2, #2]
		hctrl[side].fdfrwrd.Init.arma_AR=    hdiffdrv->Init.control_fdfrwrd_arma_AR[side];
 8002734:	4b5e      	ldr	r3, [pc, #376]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 8002736:	6819      	ldr	r1, [r3, #0]
 8002738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800273c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002740:	2068      	movs	r0, #104	; 0x68
 8002742:	fb00 f202 	mul.w	r2, r0, r2
 8002746:	6a38      	ldr	r0, [r7, #32]
 8002748:	4402      	add	r2, r0
 800274a:	331c      	adds	r3, #28
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	6093      	str	r3, [r2, #8]
		hctrl[side].fdfrwrd.Init.arma_MA=    hdiffdrv->Init.control_fdfrwrd_arma_MA[side];
 8002754:	4b56      	ldr	r3, [pc, #344]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 8002756:	6819      	ldr	r1, [r3, #0]
 8002758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800275c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002760:	2068      	movs	r0, #104	; 0x68
 8002762:	fb00 f202 	mul.w	r2, r0, r2
 8002766:	6a38      	ldr	r0, [r7, #32]
 8002768:	4402      	add	r2, r0
 800276a:	331e      	adds	r3, #30
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	60d3      	str	r3, [r2, #12]
		hctrl[side].fdfrwrd.Init.arma_tau=   hdiffdrv->Init.control_fdfrwrd_arma_tau[side];
 8002774:	4b4e      	ldr	r3, [pc, #312]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800277c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002780:	2068      	movs	r0, #104	; 0x68
 8002782:	fb00 f303 	mul.w	r3, r0, r3
 8002786:	6a38      	ldr	r0, [r7, #32]
 8002788:	4403      	add	r3, r0
 800278a:	3138      	adds	r1, #56	; 0x38
 800278c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002790:	809a      	strh	r2, [r3, #4]

		// Init feedforward struct
		FEEDFORWARD_Init(&hctrl[side].fdfrwrd);
 8002792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002796:	2268      	movs	r2, #104	; 0x68
 8002798:	fb02 f303 	mul.w	r3, r2, r3
 800279c:	6a3a      	ldr	r2, [r7, #32]
 800279e:	4413      	add	r3, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f001 fe31 	bl	8004408 <FEEDFORWARD_Init>

		// Initializing pid Control handle structure values from Init field
		hctrl[side].pid.Init.P=  hdiffdrv->Init.control_pid_P[side];
 80027a6:	4b42      	ldr	r3, [pc, #264]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 80027a8:	6819      	ldr	r1, [r3, #0]
 80027aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80027ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027b2:	2068      	movs	r0, #104	; 0x68
 80027b4:	fb00 f303 	mul.w	r3, r0, r3
 80027b8:	6a38      	ldr	r0, [r7, #32]
 80027ba:	4403      	add	r3, r0
 80027bc:	3220      	adds	r2, #32
 80027be:	0092      	lsls	r2, r2, #2
 80027c0:	440a      	add	r2, r1
 80027c2:	3204      	adds	r2, #4
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	635a      	str	r2, [r3, #52]	; 0x34
		hctrl[side].pid.Init.I=  hdiffdrv->Init.control_pid_I[side];
 80027c8:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 80027ca:	6819      	ldr	r1, [r3, #0]
 80027cc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80027d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027d4:	2068      	movs	r0, #104	; 0x68
 80027d6:	fb00 f303 	mul.w	r3, r0, r3
 80027da:	6a38      	ldr	r0, [r7, #32]
 80027dc:	4403      	add	r3, r0
 80027de:	3222      	adds	r2, #34	; 0x22
 80027e0:	0092      	lsls	r2, r2, #2
 80027e2:	440a      	add	r2, r1
 80027e4:	3204      	adds	r2, #4
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	639a      	str	r2, [r3, #56]	; 0x38
		hctrl[side].pid.Init.D=  hdiffdrv->Init.control_pid_D[side];
 80027ea:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80027f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027f6:	2068      	movs	r0, #104	; 0x68
 80027f8:	fb00 f303 	mul.w	r3, r0, r3
 80027fc:	6a38      	ldr	r0, [r7, #32]
 80027fe:	4403      	add	r3, r0
 8002800:	3224      	adds	r2, #36	; 0x24
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	440a      	add	r2, r1
 8002806:	3204      	adds	r2, #4
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	63da      	str	r2, [r3, #60]	; 0x3c
		hctrl[side].pid.Init.Ts= hdiffdrv->timing.time_step;
 800280c:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002814:	2168      	movs	r1, #104	; 0x68
 8002816:	fb01 f303 	mul.w	r3, r1, r3
 800281a:	6a39      	ldr	r1, [r7, #32]
 800281c:	440b      	add	r3, r1
 800281e:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8002822:	641a      	str	r2, [r3, #64]	; 0x40

		// Init feedforward struct
		PID_Init(&hctrl[side].pid);
 8002824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002828:	2268      	movs	r2, #104	; 0x68
 800282a:	fb02 f303 	mul.w	r3, r2, r3
 800282e:	6a3a      	ldr	r2, [r7, #32]
 8002830:	4413      	add	r3, r2
 8002832:	3334      	adds	r3, #52	; 0x34
 8002834:	4618      	mov	r0, r3
 8002836:	f001 ff8e 	bl	8004756 <PID_Init>

		// Motors
		hdiffdrv->motor[side].supply_voltage= hdiffdrv->Init.motor_supply_voltage[side];
 800283a:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 8002844:	6819      	ldr	r1, [r3, #0]
 8002846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800284a:	3208      	adds	r2, #8
 800284c:	0092      	lsls	r2, r2, #2
 800284e:	4402      	add	r2, r0
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	202c      	movs	r0, #44	; 0x2c
 8002854:	fb00 f303 	mul.w	r3, r0, r3
 8002858:	440b      	add	r3, r1
 800285a:	33bc      	adds	r3, #188	; 0xbc
 800285c:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].max_voltage=    hdiffdrv->Init.motor_max_voltage[side];
 800285e:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002866:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800286e:	320a      	adds	r2, #10
 8002870:	0092      	lsls	r2, r2, #2
 8002872:	4402      	add	r2, r0
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	202c      	movs	r0, #44	; 0x2c
 8002878:	fb00 f303 	mul.w	r3, r0, r3
 800287c:	440b      	add	r3, r1
 800287e:	33c0      	adds	r3, #192	; 0xc0
 8002880:	601a      	str	r2, [r3, #0]
		hdiffdrv->motor[side].min_voltage=    hdiffdrv->Init.motor_min_voltage[side];
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <DIFFDRIVE_Init+0x220>)
 800288c:	6819      	ldr	r1, [r3, #0]
 800288e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002892:	320c      	adds	r2, #12
 8002894:	0092      	lsls	r2, r2, #2
 8002896:	4402      	add	r2, r0
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	202c      	movs	r0, #44	; 0x2c
 800289c:	fb00 f303 	mul.w	r3, r0, r3
 80028a0:	440b      	add	r3, r1
 80028a2:	33c4      	adds	r3, #196	; 0xc4
 80028a4:	601a      	str	r2, [r3, #0]

		// Starting Motor Timer
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 80028a6:	2300      	movs	r3, #0
 80028a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80028ac:	e060      	b.n	8002970 <DIFFDRIVE_Init+0x2e0>
 80028ae:	bf00      	nop
 80028b0:	20000960 	.word	0x20000960
			hdiffdrv->motor[side].htim[dir]= hdiffdrv->Init.motor_htim[side][dir];
 80028b4:	4bac      	ldr	r3, [pc, #688]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 80028bc:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80028c0:	4aa9      	ldr	r2, [pc, #676]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 80028c2:	6810      	ldr	r0, [r2, #0]
 80028c4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80028c8:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 80028cc:	006d      	lsls	r5, r5, #1
 80028ce:	4429      	add	r1, r5
 80028d0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	4423      	add	r3, r4
 80028e0:	332a      	adds	r3, #42	; 0x2a
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4403      	add	r3, r0
 80028e6:	6059      	str	r1, [r3, #4]

			hdiffdrv->motor[side].pwm_channel[dir]= hdiffdrv->Init.motor_pwm_channel[side][dir];
 80028e8:	4b9f      	ldr	r3, [pc, #636]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 80028f0:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80028f4:	4a9c      	ldr	r2, [pc, #624]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 80028f6:	6810      	ldr	r0, [r2, #0]
 80028f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80028fc:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8002900:	006d      	lsls	r5, r5, #1
 8002902:	4429      	add	r1, r5
 8002904:	3104      	adds	r1, #4
 8002906:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4413      	add	r3, r2
 8002914:	4423      	add	r3, r4
 8002916:	332c      	adds	r3, #44	; 0x2c
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4403      	add	r3, r0
 800291c:	6059      	str	r1, [r3, #4]
			HAL_TIM_PWM_Start(hdiffdrv->motor[side].htim[dir], hdiffdrv->motor[side].pwm_channel[dir]);
 800291e:	4b92      	ldr	r3, [pc, #584]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002920:	6819      	ldr	r1, [r3, #0]
 8002922:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002926:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	4403      	add	r3, r0
 8002936:	332a      	adds	r3, #42	; 0x2a
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	685c      	ldr	r4, [r3, #4]
 800293e:	4b8a      	ldr	r3, [pc, #552]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002946:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	4403      	add	r3, r0
 8002956:	332c      	adds	r3, #44	; 0x2c
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4619      	mov	r1, r3
 8002960:	4620      	mov	r0, r4
 8002962:	f003 fa1d 	bl	8005da0 <HAL_TIM_PWM_Start>
		for(DIFFDRIVE_Direction_Enum dir=forward; dir<=backward; dir++){
 8002966:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800296a:	3301      	adds	r3, #1
 800296c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002970:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002974:	2b01      	cmp	r3, #1
 8002976:	d99d      	bls.n	80028b4 <DIFFDRIVE_Init+0x224>
		}

	    // Computing duty beat ranges
		float supply_volt= hdiffdrv->motor[side].supply_voltage;
 8002978:	4b7b      	ldr	r3, [pc, #492]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	33bc      	adds	r3, #188	; 0xbc
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	617b      	str	r3, [r7, #20]
		float min_volt=	   hdiffdrv->motor[side].min_voltage;
 800298e:	4b76      	ldr	r3, [pc, #472]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002996:	212c      	movs	r1, #44	; 0x2c
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	4413      	add	r3, r2
 800299e:	33c4      	adds	r3, #196	; 0xc4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	613b      	str	r3, [r7, #16]
		float max_volt=    hdiffdrv->motor[side].max_voltage;
 80029a4:	4b70      	ldr	r3, [pc, #448]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	33c0      	adds	r3, #192	; 0xc0
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60fb      	str	r3, [r7, #12]

		// Forward or backward are the same in this case, I use timers with the same parameters
		hdiffdrv->motor[side].duty_beat_min= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*min_volt/supply_volt;
 80029ba:	4b6b      	ldr	r3, [pc, #428]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	33ac      	adds	r3, #172	; 0xac
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	ee07 3a90 	vmov	s15, r3
 80029d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029da:	edd7 7a04 	vldr	s15, [r7, #16]
 80029de:	ee67 6a27 	vmul.f32	s13, s14, s15
 80029e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80029e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ea:	4b5f      	ldr	r3, [pc, #380]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029f6:	ee17 0a90 	vmov	r0, s15
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	33c8      	adds	r3, #200	; 0xc8
 8002a04:	6018      	str	r0, [r3, #0]
		hdiffdrv->motor[side].duty_beat_max= __HAL_TIM_GET_AUTORELOAD(hdiffdrv->motor[side].htim[forward])*max_volt/supply_volt;
 8002a06:	4b58      	ldr	r3, [pc, #352]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a0e:	212c      	movs	r1, #44	; 0x2c
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	33ac      	adds	r3, #172	; 0xac
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a26:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a2a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002a2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a36:	4b4c      	ldr	r3, [pc, #304]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a42:	ee17 0a90 	vmov	r0, s15
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	33cc      	adds	r3, #204	; 0xcc
 8002a50:	6018      	str	r0, [r3, #0]

		// Encoder Sensors
		hdiffdrv->encoder[side].htim=               hdiffdrv->Init.encoder_htim[side];
 8002a52:	4b45      	ldr	r3, [pc, #276]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002a5a:	4a43      	ldr	r2, [pc, #268]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002a5c:	6810      	ldr	r0, [r2, #0]
 8002a5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002a62:	310e      	adds	r1, #14
 8002a64:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4403      	add	r3, r0
 8002a72:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002a76:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].tim_channel=        hdiffdrv->Init.encoder_tim_channel[side];
 8002a78:	4b3b      	ldr	r3, [pc, #236]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002a80:	4a39      	ldr	r2, [pc, #228]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002a82:	6810      	ldr	r0, [r2, #0]
 8002a84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002a88:	3110      	adds	r1, #16
 8002a8a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4403      	add	r3, r0
 8002a98:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002a9c:	6019      	str	r1, [r3, #0]
		hdiffdrv->encoder[side].resolution=         hdiffdrv->Init.encoder_resolution[side];
 8002a9e:	4b32      	ldr	r3, [pc, #200]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002aa0:	6819      	ldr	r1, [r3, #0]
 8002aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aa6:	4a30      	ldr	r2, [pc, #192]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002aa8:	6810      	ldr	r0, [r2, #0]
 8002aaa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002aae:	3318      	adds	r3, #24
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	6819      	ldr	r1, [r3, #0]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4403      	add	r3, r0
 8002ac0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002ac4:	6019      	str	r1, [r3, #0]

		// AutoReloadRegister bit resolution
		hdiffdrv->encoder[side].tim_arr_resolution= hdiffdrv->Init.encoder_tim_arr_resolution[side];
 8002ac6:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ace:	4a26      	ldr	r2, [pc, #152]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002ad0:	6811      	ldr	r1, [r2, #0]
 8002ad2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002ad6:	4403      	add	r3, r0
 8002ad8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002aea:	4602      	mov	r2, r0
 8002aec:	701a      	strb	r2, [r3, #0]

		// Setting up encoders' timers
		__HAL_TIM_SET_PRESCALER(hdiffdrv->encoder[side].htim, 0);
 8002aee:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002af0:	6819      	ldr	r1, [r3, #0]
 8002af2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	440b      	add	r3, r1
 8002b00:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	629a      	str	r2, [r3, #40]	; 0x28

		// Set max autoreload value
		if( hdiffdrv->encoder[side].tim_arr_resolution == 32 )
 8002b0c:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002b0e:	6819      	ldr	r1, [r3, #0]
 8002b10:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d121      	bne.n	8002b6c <DIFFDRIVE_Init+0x4dc>
			// 32 bit case
			__HAL_TIM_SET_AUTORELOAD(hdiffdrv->encoder[side].htim,0xffffffffu);
 8002b28:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002b2a:	6819      	ldr	r1, [r3, #0]
 8002b2c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	440b      	add	r3, r1
 8002b3a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b48:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <DIFFDRIVE_Init+0x4d8>)
 8002b4a:	6819      	ldr	r1, [r3, #0]
 8002b4c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002b50:	4613      	mov	r3, r2
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	440b      	add	r3, r1
 8002b5a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	e020      	b.n	8002baa <DIFFDRIVE_Init+0x51a>
 8002b68:	20000960 	.word	0x20000960
		else
			// Default 16 bit case
			__HAL_TIM_SET_AUTORELOAD(hdiffdrv->encoder[side].htim,0xffffu);
 8002b6c:	4bb6      	ldr	r3, [pc, #728]	; (8002e48 <DIFFDRIVE_Init+0x7b8>)
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b8c:	4bae      	ldr	r3, [pc, #696]	; (8002e48 <DIFFDRIVE_Init+0x7b8>)
 8002b8e:	6819      	ldr	r1, [r3, #0]
 8002b90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ba8:	60da      	str	r2, [r3, #12]

		// Starting Encoder Sensors
		HAL_TIM_Encoder_Start(hdiffdrv->encoder[side].htim, hdiffdrv->encoder[side].tim_channel);
 8002baa:	4ba7      	ldr	r3, [pc, #668]	; (8002e48 <DIFFDRIVE_Init+0x7b8>)
 8002bac:	6819      	ldr	r1, [r3, #0]
 8002bae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	4ba1      	ldr	r3, [pc, #644]	; (8002e48 <DIFFDRIVE_Init+0x7b8>)
 8002bc4:	6819      	ldr	r1, [r3, #0]
 8002bc6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f003 fa5c 	bl	8006098 <HAL_TIM_Encoder_Start>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002be4:	3301      	adds	r3, #1
 8002be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002bea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	f67f ad81 	bls.w	80026f6 <DIFFDRIVE_Init+0x66>

	}

	// Initialize pose
	hdiffdrv->state.pose.x_a   =  0;
 8002bf4:	4b94      	ldr	r3, [pc, #592]	; (8002e48 <DIFFDRIVE_Init+0x7b8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	hdiffdrv->state.pose.y_a   =  0;
 8002c00:	4b91      	ldr	r3, [pc, #580]	; (8002e48 <DIFFDRIVE_Init+0x7b8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	hdiffdrv->state.pose.theta =  0;
 8002c0c:	4b8e      	ldr	r3, [pc, #568]	; (8002e48 <DIFFDRIVE_Init+0x7b8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	// Allocating history' arrays
	hdiffdrv->history.max_sample= hdiffdrv->Init.history_max_sample;
 8002c18:	4b8b      	ldr	r3, [pc, #556]	; (8002e48 <DIFFDRIVE_Init+0x7b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002c20:	4b89      	ldr	r3, [pc, #548]	; (8002e48 <DIFFDRIVE_Init+0x7b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244

	// Allocate all variables with zeros (calloc)
	hdiffdrv->history.state_target=  (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 8002c28:	4b87      	ldr	r3, [pc, #540]	; (8002e48 <DIFFDRIVE_Init+0x7b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002c30:	4a85      	ldr	r2, [pc, #532]	; (8002e48 <DIFFDRIVE_Init+0x7b8>)
 8002c32:	6814      	ldr	r4, [r2, #0]
 8002c34:	212c      	movs	r1, #44	; 0x2c
 8002c36:	4618      	mov	r0, r3
 8002c38:	f004 fe7e 	bl	8007938 <calloc>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f8c4 324c 	str.w	r3, [r4, #588]	; 0x24c
	hdiffdrv->history.state_measure= (DIFFDRIVE_STATE_TypeDef*)calloc(hdiffdrv->history.max_sample,sizeof(DIFFDRIVE_STATE_TypeDef));
 8002c42:	4b81      	ldr	r3, [pc, #516]	; (8002e48 <DIFFDRIVE_Init+0x7b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002c4a:	4a7f      	ldr	r2, [pc, #508]	; (8002e48 <DIFFDRIVE_Init+0x7b8>)
 8002c4c:	6814      	ldr	r4, [r2, #0]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	4618      	mov	r0, r3
 8002c52:	f004 fe71 	bl	8007938 <calloc>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250

	// Initializing time index
	hdiffdrv->history.index= 0;
 8002c5c:	4b7a      	ldr	r3, [pc, #488]	; (8002e48 <DIFFDRIVE_Init+0x7b8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	hdiffdrv->history.sample_cnt= 0;
 8002c66:	4b78      	ldr	r3, [pc, #480]	; (8002e48 <DIFFDRIVE_Init+0x7b8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240


	/* Computing prescaler ad autoreload period to obtain an update event with frequency 1/timing.time_step Hertz */

	DIFFDRIVE_TIMING_TypeDef* timing= &(hdiffdrv->timing);
 8002c70:	4b75      	ldr	r3, [pc, #468]	; (8002e48 <DIFFDRIVE_Init+0x7b8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	33a0      	adds	r3, #160	; 0xa0
 8002c76:	61fb      	str	r3, [r7, #28]

	uint16_t prescaler=  __MYLIB_GET_TIMER_CLK(timing->htim)*10/1e6 - 1;
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a73      	ldr	r2, [pc, #460]	; (8002e4c <DIFFDRIVE_Init+0x7bc>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d017      	beq.n	8002cb4 <DIFFDRIVE_Init+0x624>
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a71      	ldr	r2, [pc, #452]	; (8002e50 <DIFFDRIVE_Init+0x7c0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d011      	beq.n	8002cb4 <DIFFDRIVE_Init+0x624>
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a6f      	ldr	r2, [pc, #444]	; (8002e54 <DIFFDRIVE_Init+0x7c4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00b      	beq.n	8002cb4 <DIFFDRIVE_Init+0x624>
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a6d      	ldr	r2, [pc, #436]	; (8002e58 <DIFFDRIVE_Init+0x7c8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d005      	beq.n	8002cb4 <DIFFDRIVE_Init+0x624>
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a6b      	ldr	r2, [pc, #428]	; (8002e5c <DIFFDRIVE_Init+0x7cc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d11b      	bne.n	8002cec <DIFFDRIVE_Init+0x65c>
 8002cb4:	4b6a      	ldr	r3, [pc, #424]	; (8002e60 <DIFFDRIVE_Init+0x7d0>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <DIFFDRIVE_Init+0x646>
 8002cc0:	f002 fab2 	bl	8005228 <HAL_RCC_GetPCLK2Freq>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fc38 	bl	8000544 <__aeabi_ui2d>
 8002cd4:	e025      	b.n	8002d22 <DIFFDRIVE_Init+0x692>
 8002cd6:	f002 faa7 	bl	8005228 <HAL_RCC_GetPCLK2Freq>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fd fc2d 	bl	8000544 <__aeabi_ui2d>
 8002cea:	e01a      	b.n	8002d22 <DIFFDRIVE_Init+0x692>
 8002cec:	4b5c      	ldr	r3, [pc, #368]	; (8002e60 <DIFFDRIVE_Init+0x7d0>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <DIFFDRIVE_Init+0x67e>
 8002cf8:	f002 fa82 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd fc1c 	bl	8000544 <__aeabi_ui2d>
 8002d0c:	e009      	b.n	8002d22 <DIFFDRIVE_Init+0x692>
 8002d0e:	f002 fa77 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 8002d12:	4602      	mov	r2, r0
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd fc11 	bl	8000544 <__aeabi_ui2d>
 8002d22:	a347      	add	r3, pc, #284	; (adr r3, 8002e40 <DIFFDRIVE_Init+0x7b0>)
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	f7fd fdb0 	bl	800088c <__aeabi_ddiv>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	4b4a      	ldr	r3, [pc, #296]	; (8002e64 <DIFFDRIVE_Init+0x7d4>)
 8002d3a:	f7fd fac5 	bl	80002c8 <__aeabi_dsub>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	f7fd ff4f 	bl	8000be8 <__aeabi_d2uiz>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	837b      	strh	r3, [r7, #26]
	// Guessing is a 16bit autoreload timer to avoid troubles
	uint16_t autoreload= __MYLIB_GET_TIMER_CLK(timing->htim)/( (prescaler+1)*1/timing->time_step ) - 1;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a3d      	ldr	r2, [pc, #244]	; (8002e4c <DIFFDRIVE_Init+0x7bc>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d017      	beq.n	8002d8a <DIFFDRIVE_Init+0x6fa>
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a3b      	ldr	r2, [pc, #236]	; (8002e50 <DIFFDRIVE_Init+0x7c0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d011      	beq.n	8002d8a <DIFFDRIVE_Init+0x6fa>
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a39      	ldr	r2, [pc, #228]	; (8002e54 <DIFFDRIVE_Init+0x7c4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00b      	beq.n	8002d8a <DIFFDRIVE_Init+0x6fa>
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a37      	ldr	r2, [pc, #220]	; (8002e58 <DIFFDRIVE_Init+0x7c8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d005      	beq.n	8002d8a <DIFFDRIVE_Init+0x6fa>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a35      	ldr	r2, [pc, #212]	; (8002e5c <DIFFDRIVE_Init+0x7cc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d115      	bne.n	8002db6 <DIFFDRIVE_Init+0x726>
 8002d8a:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <DIFFDRIVE_Init+0x7d0>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <DIFFDRIVE_Init+0x714>
 8002d96:	f002 fa47 	bl	8005228 <HAL_RCC_GetPCLK2Freq>
 8002d9a:	ee07 0a90 	vmov	s15, r0
 8002d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da2:	e01d      	b.n	8002de0 <DIFFDRIVE_Init+0x750>
 8002da4:	f002 fa40 	bl	8005228 <HAL_RCC_GetPCLK2Freq>
 8002da8:	4603      	mov	r3, r0
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	ee07 3a90 	vmov	s15, r3
 8002db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002db4:	e014      	b.n	8002de0 <DIFFDRIVE_Init+0x750>
 8002db6:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <DIFFDRIVE_Init+0x7d0>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <DIFFDRIVE_Init+0x740>
 8002dc2:	f002 fa1d 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 8002dc6:	ee07 0a90 	vmov	s15, r0
 8002dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dce:	e007      	b.n	8002de0 <DIFFDRIVE_Init+0x750>
 8002dd0:	f002 fa16 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de0:	8b7b      	ldrh	r3, [r7, #26]
 8002de2:	3301      	adds	r3, #1
 8002de4:	ee07 3a10 	vmov	s14, r3
 8002de8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	ed93 7a01 	vldr	s14, [r3, #4]
 8002df2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002df6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002dfa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e06:	ee17 3a90 	vmov	r3, s15
 8002e0a:	833b      	strh	r3, [r7, #24]

	// Set counter with computed prescaler and autoreload period
	__HAL_TIM_SET_PRESCALER(timing->htim, prescaler);
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	8b7a      	ldrh	r2, [r7, #26]
 8002e14:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(timing->htim, autoreload);
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	8b3a      	ldrh	r2, [r7, #24]
 8002e1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	8b3a      	ldrh	r2, [r7, #24]
 8002e26:	60da      	str	r2, [r3, #12]

	// Assigning callback for timing purpose
	timing->htim->PeriodElapsedCallback= DIFFDRIVE_TIMING_PeriodElapsedCallback;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a0e      	ldr	r2, [pc, #56]	; (8002e68 <DIFFDRIVE_Init+0x7d8>)
 8002e2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#ifdef DIFFDRIVE_RTOS_V_
	  /* Creation of diffDrive_semaphore */
	  timing->semaphore_id = osSemaphoreNew(1, 1, &diffDrive_semaphore_attributes);
#else
	// Reset timing flag
	timing->flag= false;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	2200      	movs	r2, #0
 8002e36:	721a      	strb	r2, [r3, #8]
#endif

}
 8002e38:	bf00      	nop
 8002e3a:	3728      	adds	r7, #40	; 0x28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e40:	00000000 	.word	0x00000000
 8002e44:	412e8480 	.word	0x412e8480
 8002e48:	20000960 	.word	0x20000960
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40010400 	.word	0x40010400
 8002e54:	40014000 	.word	0x40014000
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	40014800 	.word	0x40014800
 8002e60:	40023800 	.word	0x40023800
 8002e64:	3ff00000 	.word	0x3ff00000
 8002e68:	080043e5 	.word	0x080043e5

08002e6c <DIFFDRIVE_MOTOR_Stop>:
	osSemaphoreDelete(hdiffdrv->timing.semaphore_id);
#endif
}


void DIFFDRIVE_MOTOR_Stop(){
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0

	// Set motors to 0 volt
	DIFFDRIVE_MOTOR_SetPWMs((float[2]){0,0});
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	607b      	str	r3, [r7, #4]
 8002e7e:	463b      	mov	r3, r7
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 f805 	bl	8002e90 <DIFFDRIVE_MOTOR_SetPWMs>

}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <DIFFDRIVE_MOTOR_SetPWMs>:


void DIFFDRIVE_MOTOR_SetPWMs(float* input){
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	; 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_MOTOR_TypeDef *tmp_mtr= hdiffdrv->motor;
 8002e98:	4bb4      	ldr	r3, [pc, #720]	; (800316c <DIFFDRIVE_MOTOR_SetPWMs+0x2dc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	33ac      	adds	r3, #172	; 0xac
 8002e9e:	61bb      	str	r3, [r7, #24]
	float tmp_input[2];
	float supply_volt;

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	77fb      	strb	r3, [r7, #31]
 8002ea4:	e0c8      	b.n	8003038 <DIFFDRIVE_MOTOR_SetPWMs+0x1a8>

		tmp_input[side]= input[side];
 8002ea6:	7ffb      	ldrb	r3, [r7, #31]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	441a      	add	r2, r3
 8002eae:	7ffb      	ldrb	r3, [r7, #31]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	f107 0120 	add.w	r1, r7, #32
 8002eb8:	440b      	add	r3, r1
 8002eba:	3b14      	subs	r3, #20
 8002ebc:	601a      	str	r2, [r3, #0]

		supply_volt= tmp_mtr[side].supply_voltage;
 8002ebe:	7ffb      	ldrb	r3, [r7, #31]
 8002ec0:	222c      	movs	r2, #44	; 0x2c
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4413      	add	r3, r2
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	617b      	str	r3, [r7, #20]

		if(tmp_input[side] > 0){
 8002ece:	7ffb      	ldrb	r3, [r7, #31]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	f107 0220 	add.w	r2, r7, #32
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3b14      	subs	r3, #20
 8002eda:	edd3 7a00 	vldr	s15, [r3]
 8002ede:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee6:	dd09      	ble.n	8002efc <DIFFDRIVE_MOTOR_SetPWMs+0x6c>
			// Set direction
			tmp_mtr[side].direction= forward;
 8002ee8:	7ffb      	ldrb	r3, [r7, #31]
 8002eea:	222c      	movs	r2, #44	; 0x2c
 8002eec:	fb02 f303 	mul.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002efa:	e027      	b.n	8002f4c <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
		}
		else
		if(tmp_input[side] < 0){
 8002efc:	7ffb      	ldrb	r3, [r7, #31]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	f107 0220 	add.w	r2, r7, #32
 8002f04:	4413      	add	r3, r2
 8002f06:	3b14      	subs	r3, #20
 8002f08:	edd3 7a00 	vldr	s15, [r3]
 8002f0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f14:	d51a      	bpl.n	8002f4c <DIFFDRIVE_MOTOR_SetPWMs+0xbc>
			// Set direction
			tmp_mtr[side].direction= backward;
 8002f16:	7ffb      	ldrb	r3, [r7, #31]
 8002f18:	222c      	movs	r2, #44	; 0x2c
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4413      	add	r3, r2
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			// Abs of input
			tmp_input[side]= -tmp_input[side];
 8002f28:	7ffb      	ldrb	r3, [r7, #31]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	f107 0220 	add.w	r2, r7, #32
 8002f30:	4413      	add	r3, r2
 8002f32:	3b14      	subs	r3, #20
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	7ffb      	ldrb	r3, [r7, #31]
 8002f3a:	eef1 7a67 	vneg.f32	s15, s15
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	f107 0220 	add.w	r2, r7, #32
 8002f44:	4413      	add	r3, r2
 8002f46:	3b14      	subs	r3, #20
 8002f48:	edc3 7a00 	vstr	s15, [r3]
		}

		// Duty beat proportional to input voltage plus a minimum duty beat (so, if input is near zero
		// duty beat is near its minimum. DC motors need to reach a tension threshold before moving)
		// Also: forward or backward are the same in this case, I use timers with the same parameters
		tmp_mtr[side].duty_beat  = __HAL_TIM_GET_AUTORELOAD(tmp_mtr[side].htim[forward])*tmp_input[side]/supply_volt;
 8002f4c:	7ffb      	ldrb	r3, [r7, #31]
 8002f4e:	222c      	movs	r2, #44	; 0x2c
 8002f50:	fb02 f303 	mul.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4413      	add	r3, r2
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	f107 0220 	add.w	r2, r7, #32
 8002f6e:	4413      	add	r3, r2
 8002f70:	3b14      	subs	r3, #20
 8002f72:	edd3 7a00 	vldr	s15, [r3]
 8002f76:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002f7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f82:	7ffb      	ldrb	r3, [r7, #31]
 8002f84:	222c      	movs	r2, #44	; 0x2c
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f92:	ee17 2a90 	vmov	r2, s15
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24
		tmp_mtr[side].duty_beat += tmp_mtr[side].duty_beat_min;
 8002f98:	7ffb      	ldrb	r3, [r7, #31]
 8002f9a:	222c      	movs	r2, #44	; 0x2c
 8002f9c:	fb02 f303 	mul.w	r3, r2, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002fa6:	7ffb      	ldrb	r3, [r7, #31]
 8002fa8:	222c      	movs	r2, #44	; 0x2c
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	7ffb      	ldrb	r3, [r7, #31]
 8002fb6:	202c      	movs	r0, #44	; 0x2c
 8002fb8:	fb00 f303 	mul.w	r3, r0, r3
 8002fbc:	69b8      	ldr	r0, [r7, #24]
 8002fbe:	4403      	add	r3, r0
 8002fc0:	440a      	add	r2, r1
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24

		// Upper Saturation of duty cycle
		if( tmp_mtr[side].duty_beat > tmp_mtr[side].duty_beat_max )
 8002fc4:	7ffb      	ldrb	r3, [r7, #31]
 8002fc6:	222c      	movs	r2, #44	; 0x2c
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4413      	add	r3, r2
 8002fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fd2:	7ffb      	ldrb	r3, [r7, #31]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	69b9      	ldr	r1, [r7, #24]
 8002fdc:	440b      	add	r3, r1
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d90e      	bls.n	8003002 <DIFFDRIVE_MOTOR_SetPWMs+0x172>
			tmp_mtr[side].duty_beat= tmp_mtr[side].duty_beat_max;
 8002fe4:	7ffb      	ldrb	r3, [r7, #31]
 8002fe6:	222c      	movs	r2, #44	; 0x2c
 8002fe8:	fb02 f303 	mul.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	441a      	add	r2, r3
 8002ff0:	7ffb      	ldrb	r3, [r7, #31]
 8002ff2:	212c      	movs	r1, #44	; 0x2c
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	69b9      	ldr	r1, [r7, #24]
 8002ffa:	440b      	add	r3, r1
 8002ffc:	6a12      	ldr	r2, [r2, #32]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24
 8003000:	e017      	b.n	8003032 <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
		else
		// Lower Saturation of duty cycle. If reach lower bound, set to zero to be sure to stop motors
		if( tmp_mtr[side].duty_beat == tmp_mtr[side].duty_beat_min )
 8003002:	7ffb      	ldrb	r3, [r7, #31]
 8003004:	222c      	movs	r2, #44	; 0x2c
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4413      	add	r3, r2
 800300e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003010:	7ffb      	ldrb	r3, [r7, #31]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	69b9      	ldr	r1, [r7, #24]
 800301a:	440b      	add	r3, r1
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	429a      	cmp	r2, r3
 8003020:	d107      	bne.n	8003032 <DIFFDRIVE_MOTOR_SetPWMs+0x1a2>
			tmp_mtr[side].duty_beat= 0;
 8003022:	7ffb      	ldrb	r3, [r7, #31]
 8003024:	222c      	movs	r2, #44	; 0x2c
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4413      	add	r3, r2
 800302e:	2200      	movs	r2, #0
 8003030:	625a      	str	r2, [r3, #36]	; 0x24
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003032:	7ffb      	ldrb	r3, [r7, #31]
 8003034:	3301      	adds	r3, #1
 8003036:	77fb      	strb	r3, [r7, #31]
 8003038:	7ffb      	ldrb	r3, [r7, #31]
 800303a:	2b01      	cmp	r3, #1
 800303c:	f67f af33 	bls.w	8002ea6 <DIFFDRIVE_MOTOR_SetPWMs+0x16>
	}

	// Set PWM signal
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003040:	2300      	movs	r3, #0
 8003042:	77bb      	strb	r3, [r7, #30]
 8003044:	e14f      	b.n	80032e6 <DIFFDRIVE_MOTOR_SetPWMs+0x456>

		// Set opposite direction (!direction) pin to 0
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[!(tmp_mtr[side].direction)],
 8003046:	7fbb      	ldrb	r3, [r7, #30]
 8003048:	222c      	movs	r2, #44	; 0x2c
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4413      	add	r3, r2
 8003052:	7fba      	ldrb	r2, [r7, #30]
 8003054:	212c      	movs	r1, #44	; 0x2c
 8003056:	fb01 f202 	mul.w	r2, r1, r2
 800305a:	69b9      	ldr	r1, [r7, #24]
 800305c:	440a      	add	r2, r1
 800305e:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003062:	2a00      	cmp	r2, #0
 8003064:	bf0c      	ite	eq
 8003066:	2201      	moveq	r2, #1
 8003068:	2200      	movne	r2, #0
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	3202      	adds	r2, #2
 800306e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d118      	bne.n	80030a8 <DIFFDRIVE_MOTOR_SetPWMs+0x218>
 8003076:	7fbb      	ldrb	r3, [r7, #30]
 8003078:	222c      	movs	r2, #44	; 0x2c
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4413      	add	r3, r2
 8003082:	7fba      	ldrb	r2, [r7, #30]
 8003084:	212c      	movs	r1, #44	; 0x2c
 8003086:	fb01 f202 	mul.w	r2, r1, r2
 800308a:	69b9      	ldr	r1, [r7, #24]
 800308c:	440a      	add	r2, r1
 800308e:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003092:	2a00      	cmp	r2, #0
 8003094:	bf0c      	ite	eq
 8003096:	2201      	moveq	r2, #1
 8003098:	2200      	movne	r2, #0
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2200      	movs	r2, #0
 80030a4:	635a      	str	r2, [r3, #52]	; 0x34
 80030a6:	e07b      	b.n	80031a0 <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 80030a8:	7fbb      	ldrb	r3, [r7, #30]
 80030aa:	222c      	movs	r2, #44	; 0x2c
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4413      	add	r3, r2
 80030b4:	7fba      	ldrb	r2, [r7, #30]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f202 	mul.w	r2, r1, r2
 80030bc:	69b9      	ldr	r1, [r7, #24]
 80030be:	440a      	add	r2, r1
 80030c0:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80030c4:	2a00      	cmp	r2, #0
 80030c6:	bf0c      	ite	eq
 80030c8:	2201      	moveq	r2, #1
 80030ca:	2200      	movne	r2, #0
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	3202      	adds	r2, #2
 80030d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d118      	bne.n	800310a <DIFFDRIVE_MOTOR_SetPWMs+0x27a>
 80030d8:	7fbb      	ldrb	r3, [r7, #30]
 80030da:	222c      	movs	r2, #44	; 0x2c
 80030dc:	fb02 f303 	mul.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4413      	add	r3, r2
 80030e4:	7fba      	ldrb	r2, [r7, #30]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f202 	mul.w	r2, r1, r2
 80030ec:	69b9      	ldr	r1, [r7, #24]
 80030ee:	440a      	add	r2, r1
 80030f0:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80030f4:	2a00      	cmp	r2, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2201      	moveq	r2, #1
 80030fa:	2200      	movne	r2, #0
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2300      	movs	r3, #0
 8003106:	6393      	str	r3, [r2, #56]	; 0x38
 8003108:	e04a      	b.n	80031a0 <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 800310a:	7fbb      	ldrb	r3, [r7, #30]
 800310c:	222c      	movs	r2, #44	; 0x2c
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4413      	add	r3, r2
 8003116:	7fba      	ldrb	r2, [r7, #30]
 8003118:	212c      	movs	r1, #44	; 0x2c
 800311a:	fb01 f202 	mul.w	r2, r1, r2
 800311e:	69b9      	ldr	r1, [r7, #24]
 8003120:	440a      	add	r2, r1
 8003122:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003126:	2a00      	cmp	r2, #0
 8003128:	bf0c      	ite	eq
 800312a:	2201      	moveq	r2, #1
 800312c:	2200      	movne	r2, #0
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	3202      	adds	r2, #2
 8003132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003136:	2b08      	cmp	r3, #8
 8003138:	d11a      	bne.n	8003170 <DIFFDRIVE_MOTOR_SetPWMs+0x2e0>
 800313a:	7fbb      	ldrb	r3, [r7, #30]
 800313c:	222c      	movs	r2, #44	; 0x2c
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4413      	add	r3, r2
 8003146:	7fba      	ldrb	r2, [r7, #30]
 8003148:	212c      	movs	r1, #44	; 0x2c
 800314a:	fb01 f202 	mul.w	r2, r1, r2
 800314e:	69b9      	ldr	r1, [r7, #24]
 8003150:	440a      	add	r2, r1
 8003152:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003156:	2a00      	cmp	r2, #0
 8003158:	bf0c      	ite	eq
 800315a:	2201      	moveq	r2, #1
 800315c:	2200      	movne	r2, #0
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	2300      	movs	r3, #0
 8003168:	63d3      	str	r3, [r2, #60]	; 0x3c
 800316a:	e019      	b.n	80031a0 <DIFFDRIVE_MOTOR_SetPWMs+0x310>
 800316c:	20000960 	.word	0x20000960
 8003170:	7fbb      	ldrb	r3, [r7, #30]
 8003172:	222c      	movs	r2, #44	; 0x2c
 8003174:	fb02 f303 	mul.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4413      	add	r3, r2
 800317c:	7fba      	ldrb	r2, [r7, #30]
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	fb01 f202 	mul.w	r2, r1, r2
 8003184:	69b9      	ldr	r1, [r7, #24]
 8003186:	440a      	add	r2, r1
 8003188:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800318c:	2a00      	cmp	r2, #0
 800318e:	bf0c      	ite	eq
 8003190:	2201      	moveq	r2, #1
 8003192:	2200      	movne	r2, #0
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	2300      	movs	r3, #0
 800319e:	6413      	str	r3, [r2, #64]	; 0x40
							  tmp_mtr[side].pwm_channel[!(tmp_mtr[side].direction)],
							  0  );

		// Set direction pin with the current duty cycle on PWM signal
		__HAL_TIM_SET_COMPARE(tmp_mtr[side].htim[(tmp_mtr[side].direction)],
 80031a0:	7fbb      	ldrb	r3, [r7, #30]
 80031a2:	222c      	movs	r2, #44	; 0x2c
 80031a4:	fb02 f303 	mul.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4413      	add	r3, r2
 80031ac:	7fba      	ldrb	r2, [r7, #30]
 80031ae:	212c      	movs	r1, #44	; 0x2c
 80031b0:	fb01 f202 	mul.w	r2, r1, r2
 80031b4:	69b9      	ldr	r1, [r7, #24]
 80031b6:	440a      	add	r2, r1
 80031b8:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80031bc:	3202      	adds	r2, #2
 80031be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d119      	bne.n	80031fa <DIFFDRIVE_MOTOR_SetPWMs+0x36a>
 80031c6:	7fbb      	ldrb	r3, [r7, #30]
 80031c8:	222c      	movs	r2, #44	; 0x2c
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	441a      	add	r2, r3
 80031d2:	7fbb      	ldrb	r3, [r7, #30]
 80031d4:	212c      	movs	r1, #44	; 0x2c
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	69b9      	ldr	r1, [r7, #24]
 80031dc:	440b      	add	r3, r1
 80031de:	7fb9      	ldrb	r1, [r7, #30]
 80031e0:	202c      	movs	r0, #44	; 0x2c
 80031e2:	fb00 f101 	mul.w	r1, r0, r1
 80031e6:	69b8      	ldr	r0, [r7, #24]
 80031e8:	4401      	add	r1, r0
 80031ea:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 80031ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031f6:	635a      	str	r2, [r3, #52]	; 0x34
 80031f8:	e072      	b.n	80032e0 <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 80031fa:	7fbb      	ldrb	r3, [r7, #30]
 80031fc:	222c      	movs	r2, #44	; 0x2c
 80031fe:	fb02 f303 	mul.w	r3, r2, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4413      	add	r3, r2
 8003206:	7fba      	ldrb	r2, [r7, #30]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f202 	mul.w	r2, r1, r2
 800320e:	69b9      	ldr	r1, [r7, #24]
 8003210:	440a      	add	r2, r1
 8003212:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003216:	3202      	adds	r2, #2
 8003218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321c:	2b04      	cmp	r3, #4
 800321e:	d119      	bne.n	8003254 <DIFFDRIVE_MOTOR_SetPWMs+0x3c4>
 8003220:	7fbb      	ldrb	r3, [r7, #30]
 8003222:	222c      	movs	r2, #44	; 0x2c
 8003224:	fb02 f303 	mul.w	r3, r2, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4413      	add	r3, r2
 800322c:	7fba      	ldrb	r2, [r7, #30]
 800322e:	212c      	movs	r1, #44	; 0x2c
 8003230:	fb01 f202 	mul.w	r2, r1, r2
 8003234:	69b9      	ldr	r1, [r7, #24]
 8003236:	440a      	add	r2, r1
 8003238:	7fb9      	ldrb	r1, [r7, #30]
 800323a:	202c      	movs	r0, #44	; 0x2c
 800323c:	fb00 f101 	mul.w	r1, r0, r1
 8003240:	69b8      	ldr	r0, [r7, #24]
 8003242:	4401      	add	r1, r0
 8003244:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8003248:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	6393      	str	r3, [r2, #56]	; 0x38
 8003252:	e045      	b.n	80032e0 <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 8003254:	7fbb      	ldrb	r3, [r7, #30]
 8003256:	222c      	movs	r2, #44	; 0x2c
 8003258:	fb02 f303 	mul.w	r3, r2, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4413      	add	r3, r2
 8003260:	7fba      	ldrb	r2, [r7, #30]
 8003262:	212c      	movs	r1, #44	; 0x2c
 8003264:	fb01 f202 	mul.w	r2, r1, r2
 8003268:	69b9      	ldr	r1, [r7, #24]
 800326a:	440a      	add	r2, r1
 800326c:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003270:	3202      	adds	r2, #2
 8003272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003276:	2b08      	cmp	r3, #8
 8003278:	d119      	bne.n	80032ae <DIFFDRIVE_MOTOR_SetPWMs+0x41e>
 800327a:	7fbb      	ldrb	r3, [r7, #30]
 800327c:	222c      	movs	r2, #44	; 0x2c
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4413      	add	r3, r2
 8003286:	7fba      	ldrb	r2, [r7, #30]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f202 	mul.w	r2, r1, r2
 800328e:	69b9      	ldr	r1, [r7, #24]
 8003290:	440a      	add	r2, r1
 8003292:	7fb9      	ldrb	r1, [r7, #30]
 8003294:	202c      	movs	r0, #44	; 0x2c
 8003296:	fb00 f101 	mul.w	r1, r0, r1
 800329a:	69b8      	ldr	r0, [r7, #24]
 800329c:	4401      	add	r1, r0
 800329e:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 80032a2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80032ac:	e018      	b.n	80032e0 <DIFFDRIVE_MOTOR_SetPWMs+0x450>
 80032ae:	7fbb      	ldrb	r3, [r7, #30]
 80032b0:	222c      	movs	r2, #44	; 0x2c
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4413      	add	r3, r2
 80032ba:	7fba      	ldrb	r2, [r7, #30]
 80032bc:	212c      	movs	r1, #44	; 0x2c
 80032be:	fb01 f202 	mul.w	r2, r1, r2
 80032c2:	69b9      	ldr	r1, [r7, #24]
 80032c4:	440a      	add	r2, r1
 80032c6:	7fb9      	ldrb	r1, [r7, #30]
 80032c8:	202c      	movs	r0, #44	; 0x2c
 80032ca:	fb00 f101 	mul.w	r1, r0, r1
 80032ce:	69b8      	ldr	r0, [r7, #24]
 80032d0:	4401      	add	r1, r0
 80032d2:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 80032d6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	6413      	str	r3, [r2, #64]	; 0x40
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80032e0:	7fbb      	ldrb	r3, [r7, #30]
 80032e2:	3301      	adds	r3, #1
 80032e4:	77bb      	strb	r3, [r7, #30]
 80032e6:	7fbb      	ldrb	r3, [r7, #30]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	f67f aeac 	bls.w	8003046 <DIFFDRIVE_MOTOR_SetPWMs+0x1b6>
							  tmp_mtr[side].pwm_channel[(tmp_mtr[side].direction)],
							  tmp_mtr[side].duty_beat  );

		}

}
 80032ee:	bf00      	nop
 80032f0:	bf00      	nop
 80032f2:	3724      	adds	r7, #36	; 0x24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	0000      	movs	r0, r0
	...

08003300 <DIFFDRIVE_ENCODER_CaptureMeasure>:


DIFFDRIVE_StatusTypeDef DIFFDRIVE_ENCODER_CaptureMeasure(void){
 8003300:	b5b0      	push	{r4, r5, r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens=  hdiffdrv->encoder;
 8003306:	4b84      	ldr	r3, [pc, #528]	; (8003518 <DIFFDRIVE_ENCODER_CaptureMeasure+0x218>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800330e:	613b      	str	r3, [r7, #16]
	int32_t tmp_32, counter_max_32;
	int16_t tmp_16, counter_max_16;

	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003310:	2300      	movs	r3, #0
 8003312:	75fb      	strb	r3, [r7, #23]
 8003314:	e0f3      	b.n	80034fe <DIFFDRIVE_ENCODER_CaptureMeasure+0x1fe>
		// 32 bit timer
		if( tmpsens[side].tim_arr_resolution == 32 ){
 8003316:	7dfa      	ldrb	r2, [r7, #23]
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	461a      	mov	r2, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	7a1b      	ldrb	r3, [r3, #8]
 8003328:	2b20      	cmp	r3, #32
 800332a:	d170      	bne.n	800340e <DIFFDRIVE_ENCODER_CaptureMeasure+0x10e>
			// Counter max int32 bit value, minus a secure threshold of one encoder_resolution, i.e. one full wheel revolution
			counter_max_32= 0x7fffffff-tmpsens[side].resolution;
 800332c:	7dfa      	ldrb	r2, [r7, #23]
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	461a      	mov	r2, r3
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4413      	add	r3, r2
 800333c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003340:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800351c <DIFFDRIVE_ENCODER_CaptureMeasure+0x21c>
 8003344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800334c:	ee17 3a90 	vmov	r3, s15
 8003350:	60bb      	str	r3, [r7, #8]

			// Saving previous value
			tmpsens[side].previous_value= tmpsens[side].current_value;
 8003352:	7dfa      	ldrb	r2, [r7, #23]
 8003354:	4613      	mov	r3, r2
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	4413      	add	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	461a      	mov	r2, r3
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1899      	adds	r1, r3, r2
 8003362:	7dfa      	ldrb	r2, [r7, #23]
 8003364:	4613      	mov	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	4413      	add	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	461a      	mov	r2, r3
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4413      	add	r3, r2
 8003372:	690a      	ldr	r2, [r1, #16]
 8003374:	615a      	str	r2, [r3, #20]

			// Updating value. The counter connected to sensor are 32 bit unsigned integer so I cast in
			// 32 bit integer (signed) to have positive and negative values.
			tmp_32= (int32_t)__HAL_TIM_GET_COUNTER(tmpsens[side].htim);
 8003376:	7dfa      	ldrb	r2, [r7, #23]
 8003378:	4613      	mov	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	461a      	mov	r2, r3
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4413      	add	r3, r2
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	607b      	str	r3, [r7, #4]

			// If counter reached threshold value return an exception
			if( tmp_32 <= -(int32_t)counter_max_32 || tmp_32 >= (int32_t)counter_max_32  )
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	425b      	negs	r3, r3
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	429a      	cmp	r2, r3
 8003396:	dd03      	ble.n	80033a0 <DIFFDRIVE_ENCODER_CaptureMeasure+0xa0>
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	429a      	cmp	r2, r3
 800339e:	db01      	blt.n	80033a4 <DIFFDRIVE_ENCODER_CaptureMeasure+0xa4>
				return DIFFDRIVE_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0b1      	b.n	8003508 <DIFFDRIVE_ENCODER_CaptureMeasure+0x208>

			// Else convert integer in radiant
			tmpsens[side].current_value = (float)tmp_32*(2*M_PI)/tmpsens[side].resolution;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	ee07 3a90 	vmov	s15, r3
 80033aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033ae:	ee17 0a90 	vmov	r0, s15
 80033b2:	f7fd f8e9 	bl	8000588 <__aeabi_f2d>
 80033b6:	a356      	add	r3, pc, #344	; (adr r3, 8003510 <DIFFDRIVE_ENCODER_CaptureMeasure+0x210>)
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	f7fd f93c 	bl	8000638 <__aeabi_dmul>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4614      	mov	r4, r2
 80033c6:	461d      	mov	r5, r3
 80033c8:	7dfa      	ldrb	r2, [r7, #23]
 80033ca:	4613      	mov	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	461a      	mov	r2, r3
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4413      	add	r3, r2
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd f8d4 	bl	8000588 <__aeabi_f2d>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4620      	mov	r0, r4
 80033e6:	4629      	mov	r1, r5
 80033e8:	f7fd fa50 	bl	800088c <__aeabi_ddiv>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	7dfa      	ldrb	r2, [r7, #23]
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	461a      	mov	r2, r3
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	189c      	adds	r4, r3, r2
 8003404:	f7fd fc10 	bl	8000c28 <__aeabi_d2f>
 8003408:	4603      	mov	r3, r0
 800340a:	6123      	str	r3, [r4, #16]
 800340c:	e074      	b.n	80034f8 <DIFFDRIVE_ENCODER_CaptureMeasure+0x1f8>
		}
		// 16 bit timer
		else{
			// Counter max int16 bit value, minus a secure threshold of one encoder_resolution, i.e. one full wheel revolution
			counter_max_16= 0x7fff-tmpsens[side].resolution;
 800340e:	7dfa      	ldrb	r2, [r7, #23]
 8003410:	4613      	mov	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4413      	add	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	461a      	mov	r2, r3
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	4413      	add	r3, r2
 800341e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003422:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003520 <DIFFDRIVE_ENCODER_CaptureMeasure+0x220>
 8003426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800342a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800342e:	ee17 3a90 	vmov	r3, s15
 8003432:	81fb      	strh	r3, [r7, #14]

			// Saving previous value
			tmpsens[side].previous_value= tmpsens[side].current_value;
 8003434:	7dfa      	ldrb	r2, [r7, #23]
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	461a      	mov	r2, r3
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1899      	adds	r1, r3, r2
 8003444:	7dfa      	ldrb	r2, [r7, #23]
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	461a      	mov	r2, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4413      	add	r3, r2
 8003454:	690a      	ldr	r2, [r1, #16]
 8003456:	615a      	str	r2, [r3, #20]

			// Updating value. The counter connected to sensor are 16 bit unsigned integer so I cast in
			// 16 bit integer (signed) to have positive and negative values.
			tmp_16= (int16_t)__HAL_TIM_GET_COUNTER(tmpsens[side].htim);
 8003458:	7dfa      	ldrb	r2, [r7, #23]
 800345a:	4613      	mov	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4413      	add	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	461a      	mov	r2, r3
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4413      	add	r3, r2
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	81bb      	strh	r3, [r7, #12]

			// If counter reached threshold value return an exception
			if( tmp_16 <= -(int16_t)counter_max_16 || tmp_16 >= (int16_t)counter_max_16  )
 8003470:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003474:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003478:	425b      	negs	r3, r3
 800347a:	429a      	cmp	r2, r3
 800347c:	dd05      	ble.n	800348a <DIFFDRIVE_ENCODER_CaptureMeasure+0x18a>
 800347e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003486:	429a      	cmp	r2, r3
 8003488:	db01      	blt.n	800348e <DIFFDRIVE_ENCODER_CaptureMeasure+0x18e>
				return DIFFDRIVE_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e03c      	b.n	8003508 <DIFFDRIVE_ENCODER_CaptureMeasure+0x208>

			// Else convert integer in radiant
			tmpsens[side].current_value = (float)tmp_16*(2*M_PI)/tmpsens[side].resolution;
 800348e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800349a:	ee17 0a90 	vmov	r0, s15
 800349e:	f7fd f873 	bl	8000588 <__aeabi_f2d>
 80034a2:	a31b      	add	r3, pc, #108	; (adr r3, 8003510 <DIFFDRIVE_ENCODER_CaptureMeasure+0x210>)
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	f7fd f8c6 	bl	8000638 <__aeabi_dmul>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4614      	mov	r4, r2
 80034b2:	461d      	mov	r5, r3
 80034b4:	7dfa      	ldrb	r2, [r7, #23]
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	461a      	mov	r2, r3
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4413      	add	r3, r2
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fd f85e 	bl	8000588 <__aeabi_f2d>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4620      	mov	r0, r4
 80034d2:	4629      	mov	r1, r5
 80034d4:	f7fd f9da 	bl	800088c <__aeabi_ddiv>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	7dfa      	ldrb	r2, [r7, #23]
 80034e2:	4613      	mov	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	461a      	mov	r2, r3
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	189c      	adds	r4, r3, r2
 80034f0:	f7fd fb9a 	bl	8000c28 <__aeabi_d2f>
 80034f4:	4603      	mov	r3, r0
 80034f6:	6123      	str	r3, [r4, #16]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	3301      	adds	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
 8003500:	2b01      	cmp	r3, #1
 8003502:	f67f af08 	bls.w	8003316 <DIFFDRIVE_ENCODER_CaptureMeasure+0x16>
		}
	}

	return DIFFDRIVE_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bdb0      	pop	{r4, r5, r7, pc}
 8003510:	54442d18 	.word	0x54442d18
 8003514:	401921fb 	.word	0x401921fb
 8003518:	20000960 	.word	0x20000960
 800351c:	4f000000 	.word	0x4f000000
 8003520:	46fffe00 	.word	0x46fffe00

08003524 <DIFFDRIVE_ENCODER_Reset>:


void DIFFDRIVE_ENCODER_Reset(void){
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0

	DIFFDRIVE_ENCODER_TypeDef* tmpsens= hdiffdrv->encoder;
 800352a:	4b16      	ldr	r3, [pc, #88]	; (8003584 <DIFFDRIVE_ENCODER_Reset+0x60>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003532:	603b      	str	r3, [r7, #0]

	// Reset Wheel encoders
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003534:	2300      	movs	r3, #0
 8003536:	71fb      	strb	r3, [r7, #7]
 8003538:	e019      	b.n	800356e <DIFFDRIVE_ENCODER_Reset+0x4a>
		__HAL_TIM_SET_COUNTER(tmpsens[side].htim,0);
 800353a:	79fa      	ldrb	r2, [r7, #7]
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	461a      	mov	r2, r3
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	4413      	add	r3, r2
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2200      	movs	r2, #0
 8003550:	625a      	str	r2, [r3, #36]	; 0x24
		tmpsens[side].current_value= 0;
 8003552:	79fa      	ldrb	r2, [r7, #7]
 8003554:	4613      	mov	r3, r2
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4413      	add	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	461a      	mov	r2, r3
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	4413      	add	r3, r2
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	611a      	str	r2, [r3, #16]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side ++){
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	3301      	adds	r3, #1
 800356c:	71fb      	strb	r3, [r7, #7]
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d9e2      	bls.n	800353a <DIFFDRIVE_ENCODER_Reset+0x16>
	}

}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000960 	.word	0x20000960

08003588 <DIFFDRIVE_HISTORY_Start>:


void DIFFDRIVE_HISTORY_Start(void){
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0

	// Enable history saving and reset time_index counter
	hdiffdrv->history.sample_cnt= 0;
 800358c:	4b07      	ldr	r3, [pc, #28]	; (80035ac <DIFFDRIVE_HISTORY_Start+0x24>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2200      	movs	r2, #0
 8003592:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	hdiffdrv->history.Enabled= true;
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <DIFFDRIVE_HISTORY_Start+0x24>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c

}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000960 	.word	0x20000960

080035b0 <DIFFDRIVE_HISTORY_Stop>:
	hdiffdrv->history.Enabled= true;

}


void DIFFDRIVE_HISTORY_Stop(void){
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0

	// Disable history saving
	hdiffdrv->history.Enabled= false;
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <DIFFDRIVE_HISTORY_Stop+0x18>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c

}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	20000960 	.word	0x20000960

080035cc <DIFFDRIVE_HISTORY_Suspend>:


void DIFFDRIVE_HISTORY_Suspend(void){
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0

	// Disable history saving
	hdiffdrv->history.Enabled= false;
 80035d0:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <DIFFDRIVE_HISTORY_Suspend+0x18>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c

}
 80035da:	bf00      	nop
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	20000960 	.word	0x20000960

080035e8 <DIFFDRIVE_HISTORY_Update>:


/* ---- Saving only a fixed number of samples in a circular buffer, if history is enabled  ------------------- */
void DIFFDRIVE_HISTORY_Update(float v_target, float om_target){
 80035e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035ec:	b094      	sub	sp, #80	; 0x50
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	ed87 0a01 	vstr	s0, [r7, #4]
 80035f4:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_HISTORY_TypeDef* tmphist  = &(hdiffdrv->history);
 80035f8:	4b62      	ldr	r3, [pc, #392]	; (8003784 <DIFFDRIVE_HISTORY_Update+0x19c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8003600:	647b      	str	r3, [r7, #68]	; 0x44
	DIFFDRIVE_CONTROL_TypeDef* tmpctrl  =   hdiffdrv->control;
 8003602:	4b60      	ldr	r3, [pc, #384]	; (8003784 <DIFFDRIVE_HISTORY_Update+0x19c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800360a:	643b      	str	r3, [r7, #64]	; 0x40
	DIFFDRIVE_STATE_TypeDef    tmpstate =   hdiffdrv->state;
 800360c:	4b5d      	ldr	r3, [pc, #372]	; (8003784 <DIFFDRIVE_HISTORY_Update+0x19c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f107 0408 	add.w	r4, r7, #8
 8003614:	f503 7501 	add.w	r5, r3, #516	; 0x204
 8003618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800361a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800361c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800361e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003624:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	float theta;

	// Sample time
	float Ts= hdiffdrv->timing.time_step;
 8003628:	4b56      	ldr	r3, [pc, #344]	; (8003784 <DIFFDRIVE_HISTORY_Update+0x19c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c


	// Current index (using operator % to enroll k between 0 and max_sample; sample_cnt, instead, is unbounded)
	uint32_t k_curr= tmphist->sample_cnt%tmphist->max_sample;
 8003632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003638:	6892      	ldr	r2, [r2, #8]
 800363a:	fbb3 f1f2 	udiv	r1, r3, r2
 800363e:	fb02 f201 	mul.w	r2, r2, r1
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	63bb      	str	r3, [r7, #56]	; 0x38

	// Update index
	tmphist->index= k_curr;
 8003646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800364a:	60da      	str	r2, [r3, #12]

	// Previous index
	uint32_t k_prev;
	if( tmphist->sample_cnt != 0 )
 800364c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <DIFFDRIVE_HISTORY_Update+0x82>
		k_prev= (tmphist->sample_cnt-1)%tmphist->max_sample;
 8003654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	3b01      	subs	r3, #1
 800365a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800365c:	6892      	ldr	r2, [r2, #8]
 800365e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003662:	fb02 f201 	mul.w	r2, r2, r1
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	64fb      	str	r3, [r7, #76]	; 0x4c

	// Update history if is enabled
	if( tmphist->Enabled ){
 800366a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8210 	beq.w	8003a94 <DIFFDRIVE_HISTORY_Update+0x4ac>

		/* ------ Target history ------ */

		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003674:	2300      	movs	r3, #0
 8003676:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800367a:	e09a      	b.n	80037b2 <DIFFDRIVE_HISTORY_Update+0x1ca>

			// Target input, without PID contribute and saturation limits
			tmphist->state_target[k_curr].input[side]= hdiffdrv->control[side].fdfrwrd.current_input;
 800367c:	4b41      	ldr	r3, [pc, #260]	; (8003784 <DIFFDRIVE_HISTORY_Update+0x19c>)
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8003684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003686:	6919      	ldr	r1, [r3, #16]
 8003688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368a:	242c      	movs	r4, #44	; 0x2c
 800368c:	fb04 f303 	mul.w	r3, r4, r3
 8003690:	4419      	add	r1, r3
 8003692:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003696:	2468      	movs	r4, #104	; 0x68
 8003698:	fb04 f202 	mul.w	r2, r4, r2
 800369c:	4402      	add	r2, r0
 800369e:	f502 72ae 	add.w	r2, r2, #348	; 0x15c
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	3308      	adds	r3, #8
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	3304      	adds	r3, #4
 80036ac:	601a      	str	r2, [r3, #0]

			// Target wheel values
			tmphist->state_target[k_curr].wheel[side]= __FEEDFORWARD_GET_CURRENT_TARGET(&(tmpctrl[side].fdfrwrd));
 80036ae:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80036b2:	2268      	movs	r2, #104	; 0x68
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036ba:	441a      	add	r2, r3
 80036bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036be:	6919      	ldr	r1, [r3, #16]
 80036c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c2:	202c      	movs	r0, #44	; 0x2c
 80036c4:	fb00 f303 	mul.w	r3, r0, r3
 80036c8:	4419      	add	r1, r3
 80036ca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80036ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036d0:	3304      	adds	r3, #4
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	3304      	adds	r3, #4
 80036d8:	601a      	str	r2, [r3, #0]
			if( tmphist->sample_cnt != 0 ){
 80036da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d052      	beq.n	8003788 <DIFFDRIVE_HISTORY_Update+0x1a0>
				// This is the law: wheel(k)= wheel(k-1) + wheel_speed(k-1)*Ts, because is a discrete time Dynamic System
				tmphist->state_target[k_prev].wheel_speed[side]=  ( tmphist->state_target[k_curr].wheel[side]
 80036e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	212c      	movs	r1, #44	; 0x2c
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	441a      	add	r2, r3
 80036f0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80036f4:	3304      	adds	r3, #4
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	3304      	adds	r3, #4
 80036fc:	ed93 7a00 	vldr	s14, [r3]
												                   -tmphist->state_target[k_prev].wheel[side])*Ts;
 8003700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003706:	212c      	movs	r1, #44	; 0x2c
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	441a      	add	r2, r3
 800370e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003712:	3304      	adds	r3, #4
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	3304      	adds	r3, #4
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	ee37 7a67 	vsub.f32	s14, s14, s15
				tmphist->state_target[k_prev].wheel_speed[side]=  ( tmphist->state_target[k_curr].wheel[side]
 8003722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003728:	212c      	movs	r1, #44	; 0x2c
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	441a      	add	r2, r3
 8003730:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
												                   -tmphist->state_target[k_prev].wheel[side])*Ts;
 8003734:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003738:	ee67 7a27 	vmul.f32	s15, s14, s15
				tmphist->state_target[k_prev].wheel_speed[side]=  ( tmphist->state_target[k_curr].wheel[side]
 800373c:	3306      	adds	r3, #6
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	3304      	adds	r3, #4
 8003744:	edc3 7a00 	vstr	s15, [r3]
				// To have continuity I set also the current variable at same value. Next step it will be update
				tmphist->state_target[k_curr].wheel_speed[side]= tmphist->state_target[k_prev].wheel_speed[side];
 8003748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800374e:	212c      	movs	r1, #44	; 0x2c
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	18d0      	adds	r0, r2, r3
 8003756:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800375a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800375c:	6919      	ldr	r1, [r3, #16]
 800375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003760:	242c      	movs	r4, #44	; 0x2c
 8003762:	fb04 f303 	mul.w	r3, r4, r3
 8003766:	4419      	add	r1, r3
 8003768:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800376c:	3206      	adds	r2, #6
 800376e:	0092      	lsls	r2, r2, #2
 8003770:	4402      	add	r2, r0
 8003772:	3204      	adds	r2, #4
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	3306      	adds	r3, #6
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	3304      	adds	r3, #4
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	e012      	b.n	80037a8 <DIFFDRIVE_HISTORY_Update+0x1c0>
 8003782:	bf00      	nop
 8003784:	20000960 	.word	0x20000960
			}
			else
				tmphist->state_target[k_curr].wheel_speed[side]= 0;
 8003788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378e:	212c      	movs	r1, #44	; 0x2c
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	441a      	add	r2, r3
 8003796:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800379a:	3306      	adds	r3, #6
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	3304      	adds	r3, #4
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
		for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80037a8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80037ac:	3301      	adds	r3, #1
 80037ae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80037b2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	f67f af60 	bls.w	800367c <DIFFDRIVE_HISTORY_Update+0x94>
		}

		// Compute current target pose
		if( tmphist->sample_cnt != 0 ){
 80037bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80c2 	beq.w	800394a <DIFFDRIVE_HISTORY_Update+0x362>
			theta= tmphist->state_target[k_prev].pose.theta;
 80037c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037cc:	212c      	movs	r1, #44	; 0x2c
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	637b      	str	r3, [r7, #52]	; 0x34
			tmphist->state_target[k_curr].pose.x_a   =  tmphist->state_target[k_prev].pose.x_a   + v_target*Ts*cos(theta);
 80037d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037de:	212c      	movs	r1, #44	; 0x2c
 80037e0:	fb01 f303 	mul.w	r3, r1, r3
 80037e4:	4413      	add	r3, r2
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fc fecd 	bl	8000588 <__aeabi_f2d>
 80037ee:	4604      	mov	r4, r0
 80037f0:	460d      	mov	r5, r1
 80037f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80037f6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80037fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fe:	ee17 0a90 	vmov	r0, s15
 8003802:	f7fc fec1 	bl	8000588 <__aeabi_f2d>
 8003806:	4680      	mov	r8, r0
 8003808:	4689      	mov	r9, r1
 800380a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800380c:	f7fc febc 	bl	8000588 <__aeabi_f2d>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	ec43 2b10 	vmov	d0, r2, r3
 8003818:	f008 fcfa 	bl	800c210 <cos>
 800381c:	ec53 2b10 	vmov	r2, r3, d0
 8003820:	4640      	mov	r0, r8
 8003822:	4649      	mov	r1, r9
 8003824:	f7fc ff08 	bl	8000638 <__aeabi_dmul>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4620      	mov	r0, r4
 800382e:	4629      	mov	r1, r5
 8003830:	f7fc fd4c 	bl	80002cc <__adddf3>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003842:	242c      	movs	r4, #44	; 0x2c
 8003844:	fb04 f303 	mul.w	r3, r4, r3
 8003848:	18d4      	adds	r4, r2, r3
 800384a:	f7fd f9ed 	bl	8000c28 <__aeabi_d2f>
 800384e:	4603      	mov	r3, r0
 8003850:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k_curr].pose.y_a   =  tmphist->state_target[k_prev].pose.y_a   + v_target*Ts*sin(theta);
 8003852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003858:	212c      	movs	r1, #44	; 0x2c
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	4413      	add	r3, r2
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4618      	mov	r0, r3
 8003864:	f7fc fe90 	bl	8000588 <__aeabi_f2d>
 8003868:	4604      	mov	r4, r0
 800386a:	460d      	mov	r5, r1
 800386c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003870:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003878:	ee17 0a90 	vmov	r0, s15
 800387c:	f7fc fe84 	bl	8000588 <__aeabi_f2d>
 8003880:	4680      	mov	r8, r0
 8003882:	4689      	mov	r9, r1
 8003884:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003886:	f7fc fe7f 	bl	8000588 <__aeabi_f2d>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	ec43 2b10 	vmov	d0, r2, r3
 8003892:	f008 fd0d 	bl	800c2b0 <sin>
 8003896:	ec53 2b10 	vmov	r2, r3, d0
 800389a:	4640      	mov	r0, r8
 800389c:	4649      	mov	r1, r9
 800389e:	f7fc fecb 	bl	8000638 <__aeabi_dmul>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4620      	mov	r0, r4
 80038a8:	4629      	mov	r1, r5
 80038aa:	f7fc fd0f 	bl	80002cc <__adddf3>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4610      	mov	r0, r2
 80038b4:	4619      	mov	r1, r3
 80038b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038bc:	242c      	movs	r4, #44	; 0x2c
 80038be:	fb04 f303 	mul.w	r3, r4, r3
 80038c2:	18d4      	adds	r4, r2, r3
 80038c4:	f7fd f9b0 	bl	8000c28 <__aeabi_d2f>
 80038c8:	4603      	mov	r3, r0
 80038ca:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k_curr].pose.theta =  tmphist->state_target[k_prev].pose.theta + om_target*Ts;
 80038cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d2:	212c      	movs	r1, #44	; 0x2c
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	4413      	add	r3, r2
 80038da:	ed93 7a02 	vldr	s14, [r3, #8]
 80038de:	edd7 6a00 	vldr	s13, [r7]
 80038e2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80038e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f0:	212c      	movs	r1, #44	; 0x2c
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038fc:	edc3 7a02 	vstr	s15, [r3, #8]
			// The law is: pose(k)= pose(k-1) + TrajSpeed(k-1)*Ts, because is a discrete time Dynamic System
			// so here I update previous speed
			tmphist->state_target[k_prev].pose.v= v_target;
 8003900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003906:	212c      	movs	r1, #44	; 0x2c
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	4413      	add	r3, r2
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	60da      	str	r2, [r3, #12]
			tmphist->state_target[k_prev].pose.om= om_target;
 8003912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003918:	212c      	movs	r1, #44	; 0x2c
 800391a:	fb01 f303 	mul.w	r3, r1, r3
 800391e:	4413      	add	r3, r2
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	611a      	str	r2, [r3, #16]
			// To have continuity I set also the current variable at same value. Next step it will be update
			tmphist->state_target[k_curr].pose.v= v_target;
 8003924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392a:	212c      	movs	r1, #44	; 0x2c
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	4413      	add	r3, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	60da      	str	r2, [r3, #12]
			tmphist->state_target[k_curr].pose.om= om_target;
 8003936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003938:	691a      	ldr	r2, [r3, #16]
 800393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393c:	212c      	movs	r1, #44	; 0x2c
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	611a      	str	r2, [r3, #16]
 8003948:	e065      	b.n	8003a16 <DIFFDRIVE_HISTORY_Update+0x42e>
		}else{
			theta= 0;
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	637b      	str	r3, [r7, #52]	; 0x34
			tmphist->state_target[k_curr].pose.x_a   =  v_target*Ts*cos(theta);
 8003950:	ed97 7a01 	vldr	s14, [r7, #4]
 8003954:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395c:	ee17 0a90 	vmov	r0, s15
 8003960:	f7fc fe12 	bl	8000588 <__aeabi_f2d>
 8003964:	4604      	mov	r4, r0
 8003966:	460d      	mov	r5, r1
 8003968:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800396a:	f7fc fe0d 	bl	8000588 <__aeabi_f2d>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	ec43 2b10 	vmov	d0, r2, r3
 8003976:	f008 fc4b 	bl	800c210 <cos>
 800397a:	ec53 2b10 	vmov	r2, r3, d0
 800397e:	4620      	mov	r0, r4
 8003980:	4629      	mov	r1, r5
 8003982:	f7fc fe59 	bl	8000638 <__aeabi_dmul>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4610      	mov	r0, r2
 800398c:	4619      	mov	r1, r3
 800398e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003994:	242c      	movs	r4, #44	; 0x2c
 8003996:	fb04 f303 	mul.w	r3, r4, r3
 800399a:	18d4      	adds	r4, r2, r3
 800399c:	f7fd f944 	bl	8000c28 <__aeabi_d2f>
 80039a0:	4603      	mov	r3, r0
 80039a2:	6023      	str	r3, [r4, #0]
			tmphist->state_target[k_curr].pose.y_a   =  v_target*Ts*sin(theta);
 80039a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80039a8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80039ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b0:	ee17 0a90 	vmov	r0, s15
 80039b4:	f7fc fde8 	bl	8000588 <__aeabi_f2d>
 80039b8:	4604      	mov	r4, r0
 80039ba:	460d      	mov	r5, r1
 80039bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039be:	f7fc fde3 	bl	8000588 <__aeabi_f2d>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	ec43 2b10 	vmov	d0, r2, r3
 80039ca:	f008 fc71 	bl	800c2b0 <sin>
 80039ce:	ec53 2b10 	vmov	r2, r3, d0
 80039d2:	4620      	mov	r0, r4
 80039d4:	4629      	mov	r1, r5
 80039d6:	f7fc fe2f 	bl	8000638 <__aeabi_dmul>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4610      	mov	r0, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e8:	242c      	movs	r4, #44	; 0x2c
 80039ea:	fb04 f303 	mul.w	r3, r4, r3
 80039ee:	18d4      	adds	r4, r2, r3
 80039f0:	f7fd f91a 	bl	8000c28 <__aeabi_d2f>
 80039f4:	4603      	mov	r3, r0
 80039f6:	6063      	str	r3, [r4, #4]
			tmphist->state_target[k_curr].pose.theta =  om_target*Ts;
 80039f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	212c      	movs	r1, #44	; 0x2c
 8003a00:	fb01 f303 	mul.w	r3, r1, r3
 8003a04:	4413      	add	r3, r2
 8003a06:	ed97 7a00 	vldr	s14, [r7]
 8003a0a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a12:	edc3 7a02 	vstr	s15, [r3, #8]
		}

		/* ------ State history ------ */

		// State measure, extracted from state register
		tmphist->state_measure[k_curr]= tmpstate;
 8003a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1c:	212c      	movs	r1, #44	; 0x2c
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	461d      	mov	r5, r3
 8003a26:	f107 0408 	add.w	r4, r7, #8
 8003a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a32:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003a36:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		// Assigning PREVIOUS speed, because the law is:
		// wheel(k)= wheel(k-1) + wheel_speed(k-1)*Ts, because is a discrete time Dynamic System
		if( tmphist->sample_cnt != 0 ){
 8003a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d023      	beq.n	8003a8a <DIFFDRIVE_HISTORY_Update+0x4a2>
			tmphist->state_measure[k_prev].wheel_speed[left ]= tmpstate.wheel_speed[left ];
 8003a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a48:	212c      	movs	r1, #44	; 0x2c
 8003a4a:	fb01 f303 	mul.w	r3, r1, r3
 8003a4e:	4413      	add	r3, r2
 8003a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a52:	61da      	str	r2, [r3, #28]
			tmphist->state_measure[k_prev].wheel_speed[right]= tmpstate.wheel_speed[right];
 8003a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a56:	695a      	ldr	r2, [r3, #20]
 8003a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a5a:	212c      	movs	r1, #44	; 0x2c
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	4413      	add	r3, r2
 8003a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a64:	621a      	str	r2, [r3, #32]
			// Same for trajectory speed
			tmphist->state_measure[k_prev].pose.v=  tmpstate.pose.v;
 8003a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6c:	212c      	movs	r1, #44	; 0x2c
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	4413      	add	r3, r2
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	60da      	str	r2, [r3, #12]
			tmphist->state_measure[k_prev].pose.om= tmpstate.pose.om;
 8003a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7e:	212c      	movs	r1, #44	; 0x2c
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	4413      	add	r3, r2
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	611a      	str	r2, [r3, #16]

		}

		/* Increment sample counter */
		tmphist->sample_cnt++;
 8003a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a92:	605a      	str	r2, [r3, #4]
	}
}
 8003a94:	bf00      	nop
 8003a96:	3750      	adds	r7, #80	; 0x50
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a9e:	bf00      	nop

08003aa0 <DIFFDRIVE_HISTORY_Get_Init>:


/* ---- Init time index to properly read the history circular buffer ----- */
void DIFFDRIVE_HISTORY_Get_Init(void){
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0

	// Disabling history recording
	DIFFDRIVE_HISTORY_Suspend();
 8003aa6:	f7ff fd91 	bl	80035cc <DIFFDRIVE_HISTORY_Suspend>

	DIFFDRIVE_HISTORY_TypeDef* tmphist= &(hdiffdrv->history);
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <DIFFDRIVE_HISTORY_Get_Init+0x4c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8003ab2:	607b      	str	r3, [r7, #4]

	// Initialize current time index to start read from oldest saved values
	if( tmphist->sample_cnt >= tmphist->max_sample )
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d30e      	bcc.n	8003ade <DIFFDRIVE_HISTORY_Get_Init+0x3e>
		tmphist->index= (tmphist->sample_cnt-tmphist->max_sample)%tmphist->max_sample;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6892      	ldr	r2, [r2, #8]
 8003ace:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ad2:	fb02 f201 	mul.w	r2, r2, r1
 8003ad6:	1a9a      	subs	r2, r3, r2
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	60da      	str	r2, [r3, #12]
	else
		tmphist->index= 0;
}
 8003adc:	e002      	b.n	8003ae4 <DIFFDRIVE_HISTORY_Get_Init+0x44>
		tmphist->index= 0;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	60da      	str	r2, [r3, #12]
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20000960 	.word	0x20000960

08003af0 <DIFFDRIVE_HISTORY_Get_Sample>:


/* --- Read state sample from History --- */
void DIFFDRIVE_HISTORY_Get_Sample(DIFFDRIVE_STATE_TypeDef* state_measure, DIFFDRIVE_STATE_TypeDef* state_target){
 8003af0:	b4b0      	push	{r4, r5, r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]

	DIFFDRIVE_HISTORY_TypeDef* tmphist= &(hdiffdrv->history);
 8003afa:	4b2a      	ldr	r3, [pc, #168]	; (8003ba4 <DIFFDRIVE_HISTORY_Get_Sample+0xb4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8003b02:	60fb      	str	r3, [r7, #12]

	if( state_measure != NULL )
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d012      	beq.n	8003b30 <DIFFDRIVE_HISTORY_Get_Sample+0x40>
		*state_measure= tmphist->state_measure[tmphist->index];
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	212c      	movs	r1, #44	; 0x2c
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4614      	mov	r4, r2
 8003b1e:	461d      	mov	r5, r3
 8003b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if( state_target != NULL )
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d012      	beq.n	8003b5c <DIFFDRIVE_HISTORY_Get_Sample+0x6c>
		*state_target = tmphist->state_target[tmphist->index];
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	691a      	ldr	r2, [r3, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	212c      	movs	r1, #44	; 0x2c
 8003b40:	fb01 f303 	mul.w	r3, r1, r3
 8003b44:	4413      	add	r3, r2
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	4614      	mov	r4, r2
 8003b4a:	461d      	mov	r5, r3
 8003b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b58:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// If history is disabled (it means that I read history after the movement happened) update index.
	// Otherwise just read current sample.
	if( !(tmphist->Enabled) ){
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	f083 0301 	eor.w	r3, r3, #1
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d017      	beq.n	8003b9a <DIFFDRIVE_HISTORY_Get_Sample+0xaa>
 		// Update index for next step reading
		if( tmphist->sample_cnt >= tmphist->max_sample )
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d30c      	bcc.n	8003b90 <DIFFDRIVE_HISTORY_Get_Sample+0xa0>
			tmphist->index= (tmphist->index+1)%tmphist->max_sample;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	6892      	ldr	r2, [r2, #8]
 8003b80:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b84:	fb02 f201 	mul.w	r2, r2, r1
 8003b88:	1a9a      	subs	r2, r3, r2
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	60da      	str	r2, [r3, #12]
		else
			tmphist->index++;
	}
}
 8003b8e:	e004      	b.n	8003b9a <DIFFDRIVE_HISTORY_Get_Sample+0xaa>
			tmphist->index++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	60da      	str	r2, [r3, #12]
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bcb0      	pop	{r4, r5, r7}
 8003ba2:	4770      	bx	lr
 8003ba4:	20000960 	.word	0x20000960

08003ba8 <DIFFDRIVE_CONTROL_Start>:


void DIFFDRIVE_CONTROL_Start(void){
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0

	// Reset Encoders
	DIFFDRIVE_ENCODER_Reset();
 8003bac:	f7ff fcba 	bl	8003524 <DIFFDRIVE_ENCODER_Reset>

	// Reset Control
	DIFFDRIVE_CONTROL_Reset();
 8003bb0:	f000 f810 	bl	8003bd4 <DIFFDRIVE_CONTROL_Reset>

	// Starting and enabling history
	DIFFDRIVE_HISTORY_Start();
 8003bb4:	f7ff fce8 	bl	8003588 <DIFFDRIVE_HISTORY_Start>

	// Start control timing
	DIFFDRIVE_TIMING_Start();
 8003bb8:	f000 f8aa 	bl	8003d10 <DIFFDRIVE_TIMING_Start>

}
 8003bbc:	bf00      	nop
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <DIFFDRIVE_CONTROL_Stop>:
	// Restart control timing
	DIFFDRIVE_TIMING_Start();

}

void DIFFDRIVE_CONTROL_Stop(void){
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0

	// Stop and disabling history
	DIFFDRIVE_HISTORY_Stop();
 8003bc4:	f7ff fcf4 	bl	80035b0 <DIFFDRIVE_HISTORY_Stop>

	// Stop timing, control finished
	DIFFDRIVE_TIMING_Stop();
 8003bc8:	f000 f8b0 	bl	8003d2c <DIFFDRIVE_TIMING_Stop>

	// Set motor to 0 volt
	DIFFDRIVE_MOTOR_Stop();
 8003bcc:	f7ff f94e 	bl	8002e6c <DIFFDRIVE_MOTOR_Stop>

}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <DIFFDRIVE_CONTROL_Reset>:
	DIFFDRIVE_MOTOR_Stop();

}


void DIFFDRIVE_CONTROL_Reset(void){
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0

	DIFFDRIVE_CONTROL_TypeDef* hctrl=    hdiffdrv->control;
 8003bda:	4b4c      	ldr	r3, [pc, #304]	; (8003d0c <DIFFDRIVE_CONTROL_Reset+0x138>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8003be2:	613b      	str	r3, [r7, #16]
	DIFFDRIVE_HISTORY_TypeDef* tmphist= &hdiffdrv->history;
 8003be4:	4b49      	ldr	r3, [pc, #292]	; (8003d0c <DIFFDRIVE_CONTROL_Reset+0x138>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8003bec:	60fb      	str	r3, [r7, #12]

	// Capture current wheel measure
	DIFFDRIVE_ENCODER_CaptureMeasure();
 8003bee:	f7ff fb87 	bl	8003300 <DIFFDRIVE_ENCODER_CaptureMeasure>

	// Update diffDrive state (input is {0,0} because at restart i guess input voltage is zero)
	DIFFDRIVE_STATE_Update((float[2]){0,0});
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	607b      	str	r3, [r7, #4]
 8003bfe:	463b      	mov	r3, r7
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 f8d7 	bl	8003db4 <DIFFDRIVE_STATE_Update>

	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]
 8003c0a:	e021      	b.n	8003c50 <DIFFDRIVE_CONTROL_Reset+0x7c>

		// Reset feed-forward buffer with initial values the same with measured ones
		FEEDFORWARD_Reset(&hctrl[side].fdfrwrd, hdiffdrv->state.wheel[side]);
 8003c0c:	7dfb      	ldrb	r3, [r7, #23]
 8003c0e:	2268      	movs	r2, #104	; 0x68
 8003c10:	fb02 f303 	mul.w	r3, r2, r3
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4413      	add	r3, r2
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4b3c      	ldr	r3, [pc, #240]	; (8003d0c <DIFFDRIVE_CONTROL_Reset+0x138>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
 8003c20:	3384      	adds	r3, #132	; 0x84
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	3308      	adds	r3, #8
 8003c28:	edd3 7a00 	vldr	s15, [r3]
 8003c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c30:	4608      	mov	r0, r1
 8003c32:	f000 fc55 	bl	80044e0 <FEEDFORWARD_Reset>
		// Reset PID
		PID_Reset(&hctrl[side].pid);
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
 8003c38:	2268      	movs	r2, #104	; 0x68
 8003c3a:	fb02 f303 	mul.w	r3, r2, r3
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4413      	add	r3, r2
 8003c42:	3334      	adds	r3, #52	; 0x34
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fdb4 	bl	80047b2 <PID_Reset>
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	75fb      	strb	r3, [r7, #23]
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d9da      	bls.n	8003c0c <DIFFDRIVE_CONTROL_Reset+0x38>
	}

	// If a reset occurred let converge pose target and pose measure. Because it's like that control start again
	// from a new initial point.
	uint32_t k_curr= tmphist->index;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	60bb      	str	r3, [r7, #8]
	for(DIFFDRIVE_Wheel_Enum side=left; side <= right; side++)
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	75bb      	strb	r3, [r7, #22]
 8003c60:	e01c      	b.n	8003c9c <DIFFDRIVE_CONTROL_Reset+0xc8>
		tmphist->state_target[k_curr].wheel[side]= tmphist->state_measure[k_curr].wheel[side];
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	695a      	ldr	r2, [r3, #20]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	18d0      	adds	r0, r2, r3
 8003c70:	7dba      	ldrb	r2, [r7, #22]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6919      	ldr	r1, [r3, #16]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	242c      	movs	r4, #44	; 0x2c
 8003c7a:	fb04 f303 	mul.w	r3, r4, r3
 8003c7e:	4419      	add	r1, r3
 8003c80:	7dbb      	ldrb	r3, [r7, #22]
 8003c82:	3204      	adds	r2, #4
 8003c84:	0092      	lsls	r2, r2, #2
 8003c86:	4402      	add	r2, r0
 8003c88:	3204      	adds	r2, #4
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	3304      	adds	r3, #4
 8003c94:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side <= right; side++)
 8003c96:	7dbb      	ldrb	r3, [r7, #22]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	75bb      	strb	r3, [r7, #22]
 8003c9c:	7dbb      	ldrb	r3, [r7, #22]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d9df      	bls.n	8003c62 <DIFFDRIVE_CONTROL_Reset+0x8e>
	tmphist->state_target[k_curr].pose.theta= tmphist->state_measure[k_curr].pose.theta;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	212c      	movs	r1, #44	; 0x2c
 8003caa:	fb01 f303 	mul.w	r3, r1, r3
 8003cae:	441a      	add	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6919      	ldr	r1, [r3, #16]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	202c      	movs	r0, #44	; 0x2c
 8003cb8:	fb00 f303 	mul.w	r3, r0, r3
 8003cbc:	440b      	add	r3, r1
 8003cbe:	6892      	ldr	r2, [r2, #8]
 8003cc0:	609a      	str	r2, [r3, #8]
	tmphist->state_target[k_curr].pose.x_a=   tmphist->state_measure[k_curr].pose.x_a;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	212c      	movs	r1, #44	; 0x2c
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	441a      	add	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6919      	ldr	r1, [r3, #16]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	202c      	movs	r0, #44	; 0x2c
 8003cd8:	fb00 f303 	mul.w	r3, r0, r3
 8003cdc:	440b      	add	r3, r1
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	601a      	str	r2, [r3, #0]
	tmphist->state_target[k_curr].pose.y_a=   tmphist->state_measure[k_curr].pose.y_a;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	212c      	movs	r1, #44	; 0x2c
 8003cea:	fb01 f303 	mul.w	r3, r1, r3
 8003cee:	441a      	add	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6919      	ldr	r1, [r3, #16]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	202c      	movs	r0, #44	; 0x2c
 8003cf8:	fb00 f303 	mul.w	r3, r0, r3
 8003cfc:	440b      	add	r3, r1
 8003cfe:	6852      	ldr	r2, [r2, #4]
 8003d00:	605a      	str	r2, [r3, #4]

}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd90      	pop	{r4, r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000960 	.word	0x20000960

08003d10 <DIFFDRIVE_TIMING_Start>:


void DIFFDRIVE_TIMING_Start(void){
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
	// At starting take the only one available token
	osStatus_t stat= osSemaphoreAcquire(hdiffdrv->timing.semaphore_id, 0);
	(void)stat;
#endif
	// Starting timer in interrupt mode for control law timing
	HAL_TIM_Base_Start_IT(hdiffdrv->timing.htim);
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <DIFFDRIVE_TIMING_Start+0x18>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f001 ff43 	bl	8005ba8 <HAL_TIM_Base_Start_IT>

}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000960 	.word	0x20000960

08003d2c <DIFFDRIVE_TIMING_Stop>:


void DIFFDRIVE_TIMING_Stop(void){
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0

	// Stop timer in interrupt mode
	HAL_TIM_Base_Stop_IT(hdiffdrv->timing.htim);
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <DIFFDRIVE_TIMING_Stop+0x18>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f001 ffa5 	bl	8005c88 <HAL_TIM_Base_Stop_IT>
#ifdef DIFFDRIVE_RTOS_V_
	// Try to release a token when timing is being stopped (if the token was already released, by callback, it doesn't mind)
	osSemaphoreRelease(hdiffdrv->timing.semaphore_id);
#endif

}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000960 	.word	0x20000960

08003d48 <DIFFDRIVE_TIMING_Wait>:
#ifdef DIFFDRIVE_DEBUG_TIMING_
	// Variable used to check system timing
	uint32_t tic=0, toc[100], i_=0;
#endif

void DIFFDRIVE_TIMING_Wait(void){
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0


#else /* ifndef DIFFDRIVE_RTOS_V */

	// Wait until the timing flag is true
	while( !(hdiffdrv->timing.flag) )
 8003d4c:	e000      	b.n	8003d50 <DIFFDRIVE_TIMING_Wait+0x8>
		__NOP();
 8003d4e:	bf00      	nop
	while( !(hdiffdrv->timing.flag) )
 8003d50:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <DIFFDRIVE_TIMING_Wait+0x5c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f083 0301 	eor.w	r3, r3, #1
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f4      	bne.n	8003d4e <DIFFDRIVE_TIMING_Wait+0x6>

	// Reset timing flag
	hdiffdrv->timing.flag= false;
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <DIFFDRIVE_TIMING_Wait+0x5c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

#ifdef DIFFDRIVE_DEBUG_TIMING_

			// Check if control timing is really working
			if( i_ < sizeof(toc)/sizeof(uint32_t) )
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <DIFFDRIVE_TIMING_Wait+0x60>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b63      	cmp	r3, #99	; 0x63
 8003d74:	d80a      	bhi.n	8003d8c <DIFFDRIVE_TIMING_Wait+0x44>
				toc[i_]= HAL_GetTick()-tic;
 8003d76:	f000 fe2f 	bl	80049d8 <HAL_GetTick>
 8003d7a:	4601      	mov	r1, r0
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <DIFFDRIVE_TIMING_Wait+0x64>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <DIFFDRIVE_TIMING_Wait+0x60>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	1a8a      	subs	r2, r1, r2
 8003d86:	490a      	ldr	r1, [pc, #40]	; (8003db0 <DIFFDRIVE_TIMING_Wait+0x68>)
 8003d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			i_++;
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <DIFFDRIVE_TIMING_Wait+0x60>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3301      	adds	r3, #1
 8003d92:	4a05      	ldr	r2, [pc, #20]	; (8003da8 <DIFFDRIVE_TIMING_Wait+0x60>)
 8003d94:	6013      	str	r3, [r2, #0]

			tic=  HAL_GetTick();
 8003d96:	f000 fe1f 	bl	80049d8 <HAL_GetTick>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4a03      	ldr	r2, [pc, #12]	; (8003dac <DIFFDRIVE_TIMING_Wait+0x64>)
 8003d9e:	6013      	str	r3, [r2, #0]

#endif /* DIFFDRIVE_DEBUG_TIMING_ */
#endif /* DIFFDRIVE_RTOS_V */

}
 8003da0:	bf00      	nop
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20000960 	.word	0x20000960
 8003da8:	2000020c 	.word	0x2000020c
 8003dac:	20000208 	.word	0x20000208
 8003db0:	200007d0 	.word	0x200007d0

08003db4 <DIFFDRIVE_STATE_Update>:


void DIFFDRIVE_STATE_Update(float* input){
 8003db4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003db8:	b08a      	sub	sp, #40	; 0x28
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_STATE_TypeDef* tmpstate= &(hdiffdrv->state);
 8003dbe:	4ba4      	ldr	r3, [pc, #656]	; (8004050 <DIFFDRIVE_STATE_Update+0x29c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003dc6:	623b      	str	r3, [r7, #32]

	float min_volt;
	float max_volt;

	// Sample time
	float Ts= hdiffdrv->timing.time_step;
 8003dc8:	4ba1      	ldr	r3, [pc, #644]	; (8004050 <DIFFDRIVE_STATE_Update+0x29c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dd0:	61fb      	str	r3, [r7, #28]

	// Updating state
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003dd8:	e0ad      	b.n	8003f36 <DIFFDRIVE_STATE_Update+0x182>
		tmpstate->wheel[side]=        hdiffdrv->encoder[side].current_value;
 8003dda:	4b9d      	ldr	r3, [pc, #628]	; (8004050 <DIFFDRIVE_STATE_Update+0x29c>)
 8003ddc:	6819      	ldr	r1, [r3, #0]
 8003dde:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003de2:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8003de6:	4613      	mov	r3, r2
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	4413      	add	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	440b      	add	r3, r1
 8003df0:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	6a39      	ldr	r1, [r7, #32]
 8003df8:	1d03      	adds	r3, r0, #4
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	3304      	adds	r3, #4
 8003e00:	601a      	str	r2, [r3, #0]
		tmpstate->wheel_speed[side]= (hdiffdrv->encoder[side].current_value-hdiffdrv->encoder[side].previous_value)/Ts;
 8003e02:	4b93      	ldr	r3, [pc, #588]	; (8004050 <DIFFDRIVE_STATE_Update+0x29c>)
 8003e04:	6819      	ldr	r1, [r3, #0]
 8003e06:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4413      	add	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	440b      	add	r3, r1
 8003e14:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8003e18:	ed93 7a00 	vldr	s14, [r3]
 8003e1c:	4b8c      	ldr	r3, [pc, #560]	; (8004050 <DIFFDRIVE_STATE_Update+0x29c>)
 8003e1e:	6819      	ldr	r1, [r3, #0]
 8003e20:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003e24:	4613      	mov	r3, r2
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4413      	add	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	440b      	add	r3, r1
 8003e2e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003e32:	edd3 7a00 	vldr	s15, [r3]
 8003e36:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e46:	6a3a      	ldr	r2, [r7, #32]
 8003e48:	3306      	adds	r3, #6
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3304      	adds	r3, #4
 8003e50:	edc3 7a00 	vstr	s15, [r3]

		min_volt= hdiffdrv->motor[side].min_voltage;
 8003e54:	4b7e      	ldr	r3, [pc, #504]	; (8004050 <DIFFDRIVE_STATE_Update+0x29c>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e5c:	212c      	movs	r1, #44	; 0x2c
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	33c4      	adds	r3, #196	; 0xc4
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	617b      	str	r3, [r7, #20]
		max_volt= hdiffdrv->motor[side].max_voltage;
 8003e6a:	4b79      	ldr	r3, [pc, #484]	; (8004050 <DIFFDRIVE_STATE_Update+0x29c>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	33c0      	adds	r3, #192	; 0xc0
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	613b      	str	r3, [r7, #16]

		// Input Saturation limits, for "measured" tension-------------------------
		if( input[side] > (max_volt-min_volt))
 8003e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	4413      	add	r3, r2
 8003e8a:	ed93 7a00 	vldr	s14, [r3]
 8003e8e:	edd7 6a04 	vldr	s13, [r7, #16]
 8003e92:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e96:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea2:	dd0f      	ble.n	8003ec4 <DIFFDRIVE_STATE_Update+0x110>
			tmpstate->input[side]= max_volt-min_volt;
 8003ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ea8:	ed97 7a04 	vldr	s14, [r7, #16]
 8003eac:	edd7 7a05 	vldr	s15, [r7, #20]
 8003eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eb4:	6a3a      	ldr	r2, [r7, #32]
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	edc3 7a00 	vstr	s15, [r3]
 8003ec2:	e033      	b.n	8003f2c <DIFFDRIVE_STATE_Update+0x178>
		else
		if( input[side] < -(max_volt-min_volt))
 8003ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	ed93 7a00 	vldr	s14, [r3]
 8003ed2:	edd7 6a04 	vldr	s13, [r7, #16]
 8003ed6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003eda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003ede:	eef1 7a67 	vneg.f32	s15, s15
 8003ee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eea:	d511      	bpl.n	8003f10 <DIFFDRIVE_STATE_Update+0x15c>
			tmpstate->input[side]= -(max_volt-min_volt);
 8003eec:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ef0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003efc:	eef1 7a67 	vneg.f32	s15, s15
 8003f00:	6a3a      	ldr	r2, [r7, #32]
 8003f02:	3308      	adds	r3, #8
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	3304      	adds	r3, #4
 8003f0a:	edc3 7a00 	vstr	s15, [r3]
 8003f0e:	e00d      	b.n	8003f2c <DIFFDRIVE_STATE_Update+0x178>
		else
			tmpstate->input[side]= input[side];
 8003f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	441a      	add	r2, r3
 8003f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	6a39      	ldr	r1, [r7, #32]
 8003f22:	3308      	adds	r3, #8
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	3304      	adds	r3, #4
 8003f2a:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side= left; side<=right; side++){
 8003f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f30:	3301      	adds	r3, #1
 8003f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	f67f af4d 	bls.w	8003dda <DIFFDRIVE_STATE_Update+0x26>
		// ------------------------------------------------------------------------
	}

	// Compute and update current pose an speed
	DIFFDRIVE_WheelSpeed2TrajectorySpeed(&v, &om,  tmpstate->wheel_speed);
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	f103 021c 	add.w	r2, r3, #28
 8003f46:	f107 0108 	add.w	r1, r7, #8
 8003f4a:	f107 030c 	add.w	r3, r7, #12
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 f8e0 	bl	8004114 <DIFFDRIVE_WheelSpeed2TrajectorySpeed>

	theta= tmpstate->pose.theta;
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	61bb      	str	r3, [r7, #24]
	tmpstate->pose.x_a   +=  v*Ts*cos(theta);
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fc fb12 	bl	8000588 <__aeabi_f2d>
 8003f64:	4604      	mov	r4, r0
 8003f66:	460d      	mov	r5, r1
 8003f68:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f74:	ee17 0a90 	vmov	r0, s15
 8003f78:	f7fc fb06 	bl	8000588 <__aeabi_f2d>
 8003f7c:	4680      	mov	r8, r0
 8003f7e:	4689      	mov	r9, r1
 8003f80:	69b8      	ldr	r0, [r7, #24]
 8003f82:	f7fc fb01 	bl	8000588 <__aeabi_f2d>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	ec43 2b10 	vmov	d0, r2, r3
 8003f8e:	f008 f93f 	bl	800c210 <cos>
 8003f92:	ec53 2b10 	vmov	r2, r3, d0
 8003f96:	4640      	mov	r0, r8
 8003f98:	4649      	mov	r1, r9
 8003f9a:	f7fc fb4d 	bl	8000638 <__aeabi_dmul>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	f7fc f991 	bl	80002cc <__adddf3>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4610      	mov	r0, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f7fc fe39 	bl	8000c28 <__aeabi_d2f>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	601a      	str	r2, [r3, #0]
	tmpstate->pose.y_a   +=  v*Ts*sin(theta);
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fc fae1 	bl	8000588 <__aeabi_f2d>
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	460d      	mov	r5, r1
 8003fca:	ed97 7a03 	vldr	s14, [r7, #12]
 8003fce:	edd7 7a07 	vldr	s15, [r7, #28]
 8003fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd6:	ee17 0a90 	vmov	r0, s15
 8003fda:	f7fc fad5 	bl	8000588 <__aeabi_f2d>
 8003fde:	4680      	mov	r8, r0
 8003fe0:	4689      	mov	r9, r1
 8003fe2:	69b8      	ldr	r0, [r7, #24]
 8003fe4:	f7fc fad0 	bl	8000588 <__aeabi_f2d>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	ec43 2b10 	vmov	d0, r2, r3
 8003ff0:	f008 f95e 	bl	800c2b0 <sin>
 8003ff4:	ec53 2b10 	vmov	r2, r3, d0
 8003ff8:	4640      	mov	r0, r8
 8003ffa:	4649      	mov	r1, r9
 8003ffc:	f7fc fb1c 	bl	8000638 <__aeabi_dmul>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4620      	mov	r0, r4
 8004006:	4629      	mov	r1, r5
 8004008:	f7fc f960 	bl	80002cc <__adddf3>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	f7fc fe08 	bl	8000c28 <__aeabi_d2f>
 8004018:	4602      	mov	r2, r0
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	605a      	str	r2, [r3, #4]
	tmpstate->pose.theta +=  om*Ts;
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	ed93 7a02 	vldr	s14, [r3, #8]
 8004024:	edd7 6a02 	vldr	s13, [r7, #8]
 8004028:	edd7 7a07 	vldr	s15, [r7, #28]
 800402c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	edc3 7a02 	vstr	s15, [r3, #8]
	tmpstate->pose.v=  v;
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	60da      	str	r2, [r3, #12]
	tmpstate->pose.om= om;
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	611a      	str	r2, [r3, #16]
}
 8004046:	bf00      	nop
 8004048:	3728      	adds	r7, #40	; 0x28
 800404a:	46bd      	mov	sp, r7
 800404c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004050:	20000960 	.word	0x20000960

08004054 <DIFFDRIVE_TrajectorySpeed2WheelAngle>:


void DIFFDRIVE_TrajectorySpeed2WheelAngle(float* wheel, float v, float om){
 8004054:	b480      	push	{r7}
 8004056:	b089      	sub	sp, #36	; 0x24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004060:	edc7 0a01 	vstr	s1, [r7, #4]

	// Sample time
	float Ts= hdiffdrv->timing.time_step;
 8004064:	4b2a      	ldr	r3, [pc, #168]	; (8004110 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xbc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800406c:	61fb      	str	r3, [r7, #28]

	float r= hdiffdrv->mech_prmtr.r;
 800406e:	4b28      	ldr	r3, [pc, #160]	; (8004110 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xbc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8004076:	61bb      	str	r3, [r7, #24]
	float l= hdiffdrv->mech_prmtr.l;
 8004078:	4b25      	ldr	r3, [pc, #148]	; (8004110 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xbc>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8004080:	617b      	str	r3, [r7, #20]

	// Wheel target computation (it's affect input var "wheel" because is a pointer.
	// Also note the "+=" symbol and not "=")
	if( wheel != NULL){
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d03d      	beq.n	8004104 <DIFFDRIVE_TrajectorySpeed2WheelAngle+0xb0>
		wheel[left ] +=  (v/r - l*om/r)*Ts;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	ed93 7a00 	vldr	s14, [r3]
 800408e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004092:	edd7 7a06 	vldr	s15, [r7, #24]
 8004096:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800409a:	ed97 6a05 	vldr	s12, [r7, #20]
 800409e:	edd7 7a01 	vldr	s15, [r7, #4]
 80040a2:	ee66 5a27 	vmul.f32	s11, s12, s15
 80040a6:	ed97 6a06 	vldr	s12, [r7, #24]
 80040aa:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80040ae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80040b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80040b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	edc3 7a00 	vstr	s15, [r3]
		wheel[right] +=  (v/r + l*om/r)*Ts;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3304      	adds	r3, #4
 80040c8:	ed93 7a00 	vldr	s14, [r3]
 80040cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80040d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80040d4:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80040d8:	ed97 6a05 	vldr	s12, [r7, #20]
 80040dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80040e0:	ee66 5a27 	vmul.f32	s11, s12, s15
 80040e4:	ed97 6a06 	vldr	s12, [r7, #24]
 80040e8:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80040ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80040f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80040f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3304      	adds	r3, #4
 80040fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004100:	edc3 7a00 	vstr	s15, [r3]
	}

}
 8004104:	bf00      	nop
 8004106:	3724      	adds	r7, #36	; 0x24
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	20000960 	.word	0x20000960

08004114 <DIFFDRIVE_WheelSpeed2TrajectorySpeed>:

void DIFFDRIVE_WheelSpeed2TrajectorySpeed(float* v_p, float* om_p, float* wheel_speed){
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]

	float r= hdiffdrv->mech_prmtr.r;
 8004120:	4b1f      	ldr	r3, [pc, #124]	; (80041a0 <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x8c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8004128:	617b      	str	r3, [r7, #20]
	float l= hdiffdrv->mech_prmtr.l;
 800412a:	4b1d      	ldr	r3, [pc, #116]	; (80041a0 <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x8c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8004132:	613b      	str	r3, [r7, #16]

	// Trajectory Variations computation (it's affect input vars v_p and om_p because are pointers)
	if( v_p != NULL)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d013      	beq.n	8004162 <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x4e>
		*v_p= (wheel_speed[right] + wheel_speed[left])*r/2;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3304      	adds	r3, #4
 800413e:	ed93 7a00 	vldr	s14, [r3]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	edd3 7a00 	vldr	s15, [r3]
 8004148:	ee37 7a27 	vadd.f32	s14, s14, s15
 800414c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004150:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004154:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004158:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	edc3 7a00 	vstr	s15, [r3]

	if( om_p != NULL )
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d015      	beq.n	8004194 <DIFFDRIVE_WheelSpeed2TrajectorySpeed+0x80>
		*om_p= (wheel_speed[right] - wheel_speed[left])*r/(2*l);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3304      	adds	r3, #4
 800416c:	ed93 7a00 	vldr	s14, [r3]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	edd3 7a00 	vldr	s15, [r3]
 8004176:	ee37 7a67 	vsub.f32	s14, s14, s15
 800417a:	edd7 7a05 	vldr	s15, [r7, #20]
 800417e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004182:	edd7 7a04 	vldr	s15, [r7, #16]
 8004186:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800418a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	edc3 7a00 	vstr	s15, [r3]

}
 8004194:	bf00      	nop
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	20000960 	.word	0x20000960

080041a4 <DIFFDRIVE_CONTROL_WheelStep>:


void DIFFDRIVE_CONTROL_WheelStep(float* newest_target){
 80041a4:	b590      	push	{r4, r7, lr}
 80041a6:	b08b      	sub	sp, #44	; 0x2c
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]

	DIFFDRIVE_CONTROL_TypeDef* hctrl=  hdiffdrv->control;
 80041ac:	4b4f      	ldr	r3, [pc, #316]	; (80042ec <DIFFDRIVE_CONTROL_WheelStep+0x148>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80041b4:	623b      	str	r3, [r7, #32]
	float curr_target[2], curr_measure, input[2];

	/* Do control wheels */

	// Waiting for step control enabling
	DIFFDRIVE_TIMING_Wait();
 80041b6:	f7ff fdc7 	bl	8003d48 <DIFFDRIVE_TIMING_Wait>

	// Then get wheel step measure If counters are not near overflow (look at CaptureMeasure function)
	if( (status= DIFFDRIVE_ENCODER_CaptureMeasure()) == DIFFDRIVE_ERROR ){
 80041ba:	f7ff f8a1 	bl	8003300 <DIFFDRIVE_ENCODER_CaptureMeasure>
 80041be:	4603      	mov	r3, r0
 80041c0:	77fb      	strb	r3, [r7, #31]
 80041c2:	7ffb      	ldrb	r3, [r7, #31]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d10a      	bne.n	80041de <DIFFDRIVE_CONTROL_WheelStep+0x3a>
		// If exception, reset control
		DIFFDRIVE_CONTROL_Reset();
 80041c8:	f7ff fd04 	bl	8003bd4 <DIFFDRIVE_CONTROL_Reset>
		// Reset target temporary variable
		newest_target[left ]= 0;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
		newest_target[right]= 0;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
	}

	// Compute input
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80041de:	2300      	movs	r3, #0
 80041e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80041e4:	e06f      	b.n	80042c6 <DIFFDRIVE_CONTROL_WheelStep+0x122>

		// Computing input using inversion control
		input[side]  = FEEDFORWARD_InversionControl(&(hctrl[side].fdfrwrd), newest_target[side]);
 80041e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041ea:	2268      	movs	r2, #104	; 0x68
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	6a3a      	ldr	r2, [r7, #32]
 80041f2:	4413      	add	r3, r2
 80041f4:	4619      	mov	r1, r3
 80041f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	4413      	add	r3, r2
 8004200:	edd3 7a00 	vldr	s15, [r3]
 8004204:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8004208:	eeb0 0a67 	vmov.f32	s0, s15
 800420c:	4608      	mov	r0, r1
 800420e:	f000 f9c0 	bl	8004592 <FEEDFORWARD_InversionControl>
 8004212:	eef0 7a40 	vmov.f32	s15, s0
 8004216:	00a3      	lsls	r3, r4, #2
 8004218:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800421c:	4413      	add	r3, r2
 800421e:	3b20      	subs	r3, #32
 8004220:	edc3 7a00 	vstr	s15, [r3]

		// Wheel angle read from sensor
		curr_measure= __DIFFDRIVE_ENCODER_GET_CURRENT_VALUE(hdiffdrv,side);
 8004224:	4b31      	ldr	r3, [pc, #196]	; (80042ec <DIFFDRIVE_CONTROL_WheelStep+0x148>)
 8004226:	6819      	ldr	r1, [r3, #0]
 8004228:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800422c:	4613      	mov	r3, r2
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	4413      	add	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	440b      	add	r3, r1
 8004236:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	61bb      	str	r3, [r7, #24]

		// Current target value saved in the feed-forward controller struct (you must call before the
		// Inversion Control function and then to extract this value. Look at feed-forward library to
		// better understand why)
		curr_target[side]= __FEEDFORWARD_GET_CURRENT_TARGET(&(hctrl[side].fdfrwrd));
 800423e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004242:	2268      	movs	r2, #104	; 0x68
 8004244:	fb02 f303 	mul.w	r3, r2, r3
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	441a      	add	r2, r3
 800424c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004250:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004258:	440b      	add	r3, r1
 800425a:	3b18      	subs	r3, #24
 800425c:	601a      	str	r2, [r3, #0]

		// Computing PID input
		input[side] += PID_Control(&(hctrl[side].pid), curr_target[side], curr_measure);
 800425e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004262:	2268      	movs	r2, #104	; 0x68
 8004264:	fb02 f303 	mul.w	r3, r2, r3
 8004268:	6a3a      	ldr	r2, [r7, #32]
 800426a:	4413      	add	r3, r2
 800426c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800427a:	440b      	add	r3, r1
 800427c:	3b18      	subs	r3, #24
 800427e:	edd3 7a00 	vldr	s15, [r3]
 8004282:	edd7 0a06 	vldr	s1, [r7, #24]
 8004286:	eeb0 0a67 	vmov.f32	s0, s15
 800428a:	4610      	mov	r0, r2
 800428c:	f000 faaf 	bl	80047ee <PID_Control>
 8004290:	eeb0 7a40 	vmov.f32	s14, s0
 8004294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800429e:	4413      	add	r3, r2
 80042a0:	3b20      	subs	r3, #32
 80042a2:	edd3 7a00 	vldr	s15, [r3]
 80042a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80042b4:	4413      	add	r3, r2
 80042b6:	3b20      	subs	r3, #32
 80042b8:	edc3 7a00 	vstr	s15, [r3]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++){
 80042bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042c0:	3301      	adds	r3, #1
 80042c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80042c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d98b      	bls.n	80041e6 <DIFFDRIVE_CONTROL_WheelStep+0x42>

	}

	// Set new PWMs signals
	DIFFDRIVE_MOTOR_SetPWMs(input);
 80042ce:	f107 0308 	add.w	r3, r7, #8
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe fddc 	bl	8002e90 <DIFFDRIVE_MOTOR_SetPWMs>

	// Update differential drive state structure
	DIFFDRIVE_STATE_Update(input);
 80042d8:	f107 0308 	add.w	r3, r7, #8
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff fd69 	bl	8003db4 <DIFFDRIVE_STATE_Update>

}
 80042e2:	bf00      	nop
 80042e4:	372c      	adds	r7, #44	; 0x2c
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd90      	pop	{r4, r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000960 	.word	0x20000960

080042f0 <DIFFDRIVE_TrackingStart>:

void DIFFDRIVE_TrackingStart(void){
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0

	// Start control
	DIFFDRIVE_CONTROL_Start();
 80042f4:	f7ff fc58 	bl	8003ba8 <DIFFDRIVE_CONTROL_Start>

	// First step wheels control (starts with zeros, robot still)
	DIFFDRIVE_TrackingStep(0,0);
 80042f8:	eddf 0a03 	vldr	s1, [pc, #12]	; 8004308 <DIFFDRIVE_TrackingStart+0x18>
 80042fc:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8004308 <DIFFDRIVE_TrackingStart+0x18>
 8004300:	f000 f80a 	bl	8004318 <DIFFDRIVE_TrackingStep>

}
 8004304:	bf00      	nop
 8004306:	bd80      	pop	{r7, pc}
 8004308:	00000000 	.word	0x00000000

0800430c <DIFFDRIVE_TrackingStop>:
	// Resume control
	DIFFDRIVE_CONTROL_Resume();

}

void DIFFDRIVE_TrackingStop(void){
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0

	// Stop control
	DIFFDRIVE_CONTROL_Stop();
 8004310:	f7ff fc56 	bl	8003bc0 <DIFFDRIVE_CONTROL_Stop>

}
 8004314:	bf00      	nop
 8004316:	bd80      	pop	{r7, pc}

08004318 <DIFFDRIVE_TrackingStep>:
	// Suspend control
	DIFFDRIVE_CONTROL_Suspend();

}

void DIFFDRIVE_TrackingStep(float v, float om){
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004322:	edc7 0a00 	vstr	s1, [r7]

	DIFFDRIVE_CONTROL_TypeDef* tmpctrl= hdiffdrv->control;
 8004326:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <DIFFDRIVE_TrackingStep+0x78>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800432e:	613b      	str	r3, [r7, #16]
	float newest_target[2];

	// Extracting previous target
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8004330:	2300      	movs	r3, #0
 8004332:	75fb      	strb	r3, [r7, #23]
 8004334:	e010      	b.n	8004358 <DIFFDRIVE_TrackingStep+0x40>
		newest_target[side]= __FEEDFORWARD_GET_NEWEST_TARGET(&tmpctrl[side].fdfrwrd);
 8004336:	7dfb      	ldrb	r3, [r7, #23]
 8004338:	2268      	movs	r2, #104	; 0x68
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	441a      	add	r2, r3
 8004342:	7dfb      	ldrb	r3, [r7, #23]
 8004344:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	f107 0118 	add.w	r1, r7, #24
 800434c:	440b      	add	r3, r1
 800434e:	3b10      	subs	r3, #16
 8004350:	601a      	str	r2, [r3, #0]
	for(DIFFDRIVE_Wheel_Enum side=left; side<=right; side++)
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	3301      	adds	r3, #1
 8004356:	75fb      	strb	r3, [r7, #23]
 8004358:	7dfb      	ldrb	r3, [r7, #23]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d9eb      	bls.n	8004336 <DIFFDRIVE_TrackingStep+0x1e>

	// Computing newest target
	DIFFDRIVE_TrajectorySpeed2WheelAngle(newest_target, v, om);
 800435e:	f107 0308 	add.w	r3, r7, #8
 8004362:	edd7 0a00 	vldr	s1, [r7]
 8004366:	ed97 0a01 	vldr	s0, [r7, #4]
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff fe72 	bl	8004054 <DIFFDRIVE_TrajectorySpeed2WheelAngle>

	// Make a wheel step motion
	DIFFDRIVE_CONTROL_WheelStep(newest_target);
 8004370:	f107 0308 	add.w	r3, r7, #8
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff ff15 	bl	80041a4 <DIFFDRIVE_CONTROL_WheelStep>

	// Updating History
	DIFFDRIVE_HISTORY_Update(v, om);
 800437a:	edd7 0a00 	vldr	s1, [r7]
 800437e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004382:	f7ff f931 	bl	80035e8 <DIFFDRIVE_HISTORY_Update>

}
 8004386:	bf00      	nop
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000960 	.word	0x20000960

08004394 <DIFFDRIVE_TrackingArray>:

void DIFFDRIVE_TrackingArray(int N, float* delta_a, float* delta_theta){
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]

	// Trajectory tracking
	for(int i= 0; i<N; i++)
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	e014      	b.n	80043d0 <DIFFDRIVE_TrackingArray+0x3c>
		DIFFDRIVE_TrackingStep(delta_a[i], delta_theta[i]);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	4413      	add	r3, r2
 80043ae:	edd3 7a00 	vldr	s15, [r3]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	4413      	add	r3, r2
 80043ba:	ed93 7a00 	vldr	s14, [r3]
 80043be:	eef0 0a47 	vmov.f32	s1, s14
 80043c2:	eeb0 0a67 	vmov.f32	s0, s15
 80043c6:	f7ff ffa7 	bl	8004318 <DIFFDRIVE_TrackingStep>
	for(int i= 0; i<N; i++)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	3301      	adds	r3, #1
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	dbe6      	blt.n	80043a6 <DIFFDRIVE_TrackingArray+0x12>

}
 80043d8:	bf00      	nop
 80043da:	bf00      	nop
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <DIFFDRIVE_TIMING_PeriodElapsedCallback>:
	DIFFDRIVE_MOTOR_Stop();

}


void DIFFDRIVE_TIMING_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
#ifdef DIFFDRIVE_RTOS_V_
	// Release the token
	osSemaphoreRelease(hdiffdrv->timing.semaphore_id);
#else
	// Enabling timing flag
	hdiffdrv->timing.flag= true;
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <DIFFDRIVE_TIMING_PeriodElapsedCallback+0x20>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
#endif

}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000960 	.word	0x20000960

08004408 <FEEDFORWARD_Init>:

#include <stdlib.h>
#include "my_lib/feedforward_controller.h"


void FEEDFORWARD_Init(FEEDFORWARD_HandleTypeDef* hctrl){
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]

	// Initializing handle structure values from Init field
	hctrl->arma.n_ar=  hctrl->Init.arma_n_ar;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	881a      	ldrh	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	821a      	strh	r2, [r3, #16]
	hctrl->arma.n_ma=  hctrl->Init.arma_n_ma;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	885a      	ldrh	r2, [r3, #2]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	825a      	strh	r2, [r3, #18]
	hctrl->arma.tau=   hctrl->Init.arma_tau;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	889a      	ldrh	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	829a      	strh	r2, [r3, #20]

	hctrl->arma.AR= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	8a1b      	ldrh	r3, [r3, #16]
 800442c:	2104      	movs	r1, #4
 800442e:	4618      	mov	r0, r3
 8004430:	f003 fa82 	bl	8007938 <calloc>
 8004434:	4603      	mov	r3, r0
 8004436:	461a      	mov	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	619a      	str	r2, [r3, #24]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	e00e      	b.n	8004460 <FEEDFORWARD_Init+0x58>
		hctrl->arma.AR[i]= hctrl->Init.arma_AR[i];
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	441a      	add	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6999      	ldr	r1, [r3, #24]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ar; i++)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3301      	adds	r3, #1
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8a1b      	ldrh	r3, [r3, #16]
 8004464:	461a      	mov	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4293      	cmp	r3, r2
 800446a:	dbea      	blt.n	8004442 <FEEDFORWARD_Init+0x3a>

	hctrl->arma.MA= (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	8a5b      	ldrh	r3, [r3, #18]
 8004470:	2104      	movs	r1, #4
 8004472:	4618      	mov	r0, r3
 8004474:	f003 fa60 	bl	8007938 <calloc>
 8004478:	4603      	mov	r3, r0
 800447a:	461a      	mov	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	61da      	str	r2, [r3, #28]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 8004480:	2300      	movs	r3, #0
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	e00e      	b.n	80044a4 <FEEDFORWARD_Init+0x9c>
		hctrl->arma.MA[i]= hctrl->Init.arma_MA[i];
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	441a      	add	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69d9      	ldr	r1, [r3, #28]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	601a      	str	r2, [r3, #0]
	for(int i=0; i < hctrl->arma.n_ma; i++)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	3301      	adds	r3, #1
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8a5b      	ldrh	r3, [r3, #18]
 80044a8:	461a      	mov	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4293      	cmp	r3, r2
 80044ae:	dbea      	blt.n	8004486 <FEEDFORWARD_Init+0x7e>

	// Allocating history' arrays
	hctrl->target_buffer= (float*)calloc(hctrl->arma.n_ar,sizeof(float));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8a1b      	ldrh	r3, [r3, #16]
 80044b4:	2104      	movs	r1, #4
 80044b6:	4618      	mov	r0, r3
 80044b8:	f003 fa3e 	bl	8007938 <calloc>
 80044bc:	4603      	mov	r3, r0
 80044be:	461a      	mov	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24
	hctrl->input_buffer=  (float*)calloc(hctrl->arma.n_ma,sizeof(float));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8a5b      	ldrh	r3, [r3, #18]
 80044c8:	2104      	movs	r1, #4
 80044ca:	4618      	mov	r0, r3
 80044cc:	f003 fa34 	bl	8007938 <calloc>
 80044d0:	4603      	mov	r3, r0
 80044d2:	461a      	mov	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	621a      	str	r2, [r3, #32]

}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <FEEDFORWARD_Reset>:
	free(hctrl->target_buffer);
	free(hctrl->input_buffer);

}

void FEEDFORWARD_Reset(FEEDFORWARD_HandleTypeDef* hctrl, float target_init){
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	ed87 0a00 	vstr	s0, [r7]

	// Reset feed-forward target buffer, with all all initial conditon
	FEEDFORWARD_BufferInit(hctrl, target_init);
 80044ec:	ed97 0a00 	vldr	s0, [r7]
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f804 	bl	80044fe <FEEDFORWARD_BufferInit>

}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <FEEDFORWARD_BufferInit>:

void FEEDFORWARD_BufferInit(FEEDFORWARD_HandleTypeDef* hctrl, float target_init){
 80044fe:	b490      	push	{r4, r7}
 8004500:	b08a      	sub	sp, #40	; 0x28
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	ed87 0a00 	vstr	s0, [r7]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f107 040c 	add.w	r4, r7, #12
 8004510:	3310      	adds	r3, #16
 8004512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004514:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint16_t n_ar= arma.n_ar;
 8004518:	89bb      	ldrh	r3, [r7, #12]
 800451a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t n_ma= arma.n_ma;
 800451c:	89fb      	ldrh	r3, [r7, #14]
 800451e:	843b      	strh	r3, [r7, #32]
	uint16_t  tau= arma.tau;
 8004520:	8a3b      	ldrh	r3, [r7, #16]
 8004522:	83fb      	strh	r3, [r7, #30]

	// Complete first values with the same initial value
	for(int i= 0; i < n_ar; i++)
 8004524:	2300      	movs	r3, #0
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
 8004528:	e009      	b.n	800453e <FEEDFORWARD_BufferInit+0x40>
		hctrl->target_buffer[i]= target_init;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	601a      	str	r2, [r3, #0]
	for(int i= 0; i < n_ar; i++)
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	3301      	adds	r3, #1
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
 800453e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004542:	429a      	cmp	r2, r3
 8004544:	dbf1      	blt.n	800452a <FEEDFORWARD_BufferInit+0x2c>

	// Set current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[n_ar-1-tau];
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800454a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800454c:	1e59      	subs	r1, r3, #1
 800454e:	8bfb      	ldrh	r3, [r7, #30]
 8004550:	1acb      	subs	r3, r1, r3
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[n_ma-1];
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1a      	ldr	r2, [r3, #32]
 8004560:	8c3b      	ldrh	r3, [r7, #32]
 8004562:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004566:	3b01      	subs	r3, #1
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004576:	89bb      	ldrh	r3, [r7, #12]
 8004578:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800457c:	3b01      	subs	r3, #1
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004588:	bf00      	nop
 800458a:	3728      	adds	r7, #40	; 0x28
 800458c:	46bd      	mov	sp, r7
 800458e:	bc90      	pop	{r4, r7}
 8004590:	4770      	bx	lr

08004592 <FEEDFORWARD_InversionControl>:


float FEEDFORWARD_InversionControl(FEEDFORWARD_HandleTypeDef* hctrl, float newest_target){
 8004592:	b590      	push	{r4, r7, lr}
 8004594:	b08f      	sub	sp, #60	; 0x3c
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	ed87 0a00 	vstr	s0, [r7]

	float input= 0;
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	637b      	str	r3, [r7, #52]	; 0x34
	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f107 040c 	add.w	r4, r7, #12
 80045aa:	3310      	adds	r3, #16
 80045ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int oldest_ar_sample= 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28
	int newest_ar_sample= arma.n_ar-1;  // Last minus one because
 80045b6:	89bb      	ldrh	r3, [r7, #12]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
								    	//
	int oldest_ma_sample= 0;			//
 80045bc:	2300      	movs	r3, #0
 80045be:	623b      	str	r3, [r7, #32]
	int newest_ma_sample= arma.n_ma-1;  // C arrays start from 0
 80045c0:	89fb      	ldrh	r3, [r7, #14]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	61fb      	str	r3, [r7, #28]

	// Assigning the newest target value
	hctrl->target_buffer[newest_ar_sample]= newest_target;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	601a      	str	r2, [r3, #0]

	// Compute feed-forward input (inversion control)
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 80045d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d6:	633b      	str	r3, [r7, #48]	; 0x30
 80045d8:	e019      	b.n	800460e <FEEDFORWARD_InversionControl+0x7c>
		input += arma.AR[newest_ar_sample-i]*hctrl->target_buffer[i];
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	1acb      	subs	r3, r1, r3
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	ed93 7a00 	vldr	s14, [r3]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	edd3 7a00 	vldr	s15, [r3]
 80045f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004604:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int i= oldest_ar_sample; i <= newest_ar_sample; i++)
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	3301      	adds	r3, #1
 800460c:	633b      	str	r3, [r7, #48]	; 0x30
 800460e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	429a      	cmp	r2, r3
 8004614:	dde1      	ble.n	80045da <FEEDFORWARD_InversionControl+0x48>
	// I know inputs until the newest_ma_sample-1
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800461a:	e01b      	b.n	8004654 <FEEDFORWARD_InversionControl+0xc2>
		input += -arma.MA[newest_ma_sample-j]*hctrl->input_buffer[j];
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	69f9      	ldr	r1, [r7, #28]
 8004620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004622:	1acb      	subs	r3, r1, r3
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	edd3 7a00 	vldr	s15, [r3]
 800462c:	eeb1 7a67 	vneg.f32	s14, s15
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1a      	ldr	r2, [r3, #32]
 8004634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	edd3 7a00 	vldr	s15, [r3]
 800463e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004642:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800464a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(int j= oldest_ma_sample; j <= newest_ma_sample-1; j++)
 800464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004650:	3301      	adds	r3, #1
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004658:	429a      	cmp	r2, r3
 800465a:	dcdf      	bgt.n	800461c <FEEDFORWARD_InversionControl+0x8a>
	// Last input is computed here
	input /= arma.MA[0];
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	ed93 7a00 	vldr	s14, [r3]
 8004662:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8004666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800466a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Saving newest input
	hctrl->input_buffer[newest_ma_sample]= input;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1a      	ldr	r2, [r3, #32]
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800467a:	601a      	str	r2, [r3, #0]

	// Updating Buffer for next step
	FEEDFORWARD_BufferUpdate(hctrl);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f808 	bl	8004692 <FEEDFORWARD_BufferUpdate>

	return input;
 8004682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004684:	ee07 3a90 	vmov	s15, r3
}
 8004688:	eeb0 0a67 	vmov.f32	s0, s15
 800468c:	373c      	adds	r7, #60	; 0x3c
 800468e:	46bd      	mov	sp, r7
 8004690:	bd90      	pop	{r4, r7, pc}

08004692 <FEEDFORWARD_BufferUpdate>:


void FEEDFORWARD_BufferUpdate(FEEDFORWARD_HandleTypeDef* hctrl){
 8004692:	b490      	push	{r4, r7}
 8004694:	b088      	sub	sp, #32
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]

	FEEDFORWARD_ARMA_Parameter arma= hctrl->arma;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f107 0408 	add.w	r4, r7, #8
 80046a0:	3310      	adds	r3, #16
 80046a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Updating current values (see the formula on header file to understand the index below)
	hctrl->current_target= hctrl->target_buffer[arma.n_ar-1-arma.tau];
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ac:	893b      	ldrh	r3, [r7, #8]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	89b9      	ldrh	r1, [r7, #12]
 80046b2:	1a5b      	subs	r3, r3, r1
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	62da      	str	r2, [r3, #44]	; 0x2c
	hctrl->current_input=  hctrl->input_buffer[arma.n_ma-1];
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1a      	ldr	r2, [r3, #32]
 80046c2:	897b      	ldrh	r3, [r7, #10]
 80046c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046c8:	3b01      	subs	r3, #1
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	629a      	str	r2, [r3, #40]	; 0x28

	// Updating newest target (it's an useful information)
	hctrl->newest_target= hctrl->target_buffer[arma.n_ar-1];
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046d8:	893b      	ldrh	r3, [r7, #8]
 80046da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046de:	3b01      	subs	r3, #1
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30

	// Then slide buffers ( look, loops go from idx=0 to idx=n-2 )
	for(int i=0; i < arma.n_ar-1; i++)
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	e00f      	b.n	8004710 <FEEDFORWARD_BufferUpdate+0x7e>
		hctrl->target_buffer[i]= hctrl->target_buffer[i+1];
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	3301      	adds	r3, #1
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	441a      	add	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ar-1; i++)
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3301      	adds	r3, #1
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	893b      	ldrh	r3, [r7, #8]
 8004712:	3b01      	subs	r3, #1
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	429a      	cmp	r2, r3
 8004718:	dbea      	blt.n	80046f0 <FEEDFORWARD_BufferUpdate+0x5e>
	for(int i=0; i < arma.n_ma-1; i++)
 800471a:	2300      	movs	r3, #0
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	e00f      	b.n	8004740 <FEEDFORWARD_BufferUpdate+0xae>
		hctrl->input_buffer[i]= hctrl->input_buffer[i+1];
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1a      	ldr	r2, [r3, #32]
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	3301      	adds	r3, #1
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	441a      	add	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a19      	ldr	r1, [r3, #32]
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	601a      	str	r2, [r3, #0]
	for(int i=0; i < arma.n_ma-1; i++)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	3301      	adds	r3, #1
 800473e:	61bb      	str	r3, [r7, #24]
 8004740:	897b      	ldrh	r3, [r7, #10]
 8004742:	3b01      	subs	r3, #1
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	429a      	cmp	r2, r3
 8004748:	dbea      	blt.n	8004720 <FEEDFORWARD_BufferUpdate+0x8e>

}
 800474a:	bf00      	nop
 800474c:	bf00      	nop
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bc90      	pop	{r4, r7}
 8004754:	4770      	bx	lr

08004756 <PID_Init>:
 */

#include "my_lib/pid_controller.h"


void PID_Init(PID_HandleTypeDef* hpid){
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]

	// Init parameters
	hpid->P=  hpid->Init.P;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	611a      	str	r2, [r3, #16]
	hpid->I=  hpid->Init.I;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	615a      	str	r2, [r3, #20]
	hpid->D=  hpid->Init.D;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	619a      	str	r2, [r3, #24]
	hpid->Ts= hpid->Init.Ts;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	631a      	str	r2, [r3, #48]	; 0x30

	// Init Input contributes variables
	hpid->u_I= 0;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	625a      	str	r2, [r3, #36]	; 0x24
	hpid->u_P= 0;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	61da      	str	r2, [r3, #28]

	// Init Previous variables
	hpid->u_prev= 0;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <PID_Reset>:



// Reset input buffer and the contributes variables
void PID_Reset(PID_HandleTypeDef* hpid){
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]

	hpid->u_I= 0;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	621a      	str	r2, [r3, #32]
	hpid->u_D= 0;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	625a      	str	r2, [r3, #36]	; 0x24
	hpid->u_P= 0;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	61da      	str	r2, [r3, #28]

	hpid->u_prev= 0;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= 0;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	62da      	str	r2, [r3, #44]	; 0x2c



}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <PID_Control>:

float PID_Control(PID_HandleTypeDef* hpid, float target, float measure){
 80047ee:	b480      	push	{r7}
 80047f0:	b089      	sub	sp, #36	; 0x24
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	ed87 0a02 	vstr	s0, [r7, #8]
 80047fa:	edc7 0a01 	vstr	s1, [r7, #4]

	float e_prev,e_curr, Ts, u;

	// Time step
	Ts= hpid->Ts;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	61fb      	str	r3, [r7, #28]

	// Following error
	e_curr= target-measure;
 8004804:	ed97 7a02 	vldr	s14, [r7, #8]
 8004808:	edd7 7a01 	vldr	s15, [r7, #4]
 800480c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004810:	edc7 7a06 	vstr	s15, [r7, #24]
	e_prev= hpid->e_prev;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	617b      	str	r3, [r7, #20]

	// Proportional
	hpid->u_P= hpid->P*e_curr;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	ed93 7a04 	vldr	s14, [r3, #16]
 8004820:	edd7 7a06 	vldr	s15, [r7, #24]
 8004824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	edc3 7a07 	vstr	s15, [r3, #28]

	// Integral
	hpid->u_I += hpid->I*e_prev*Ts;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	ed93 7a08 	vldr	s14, [r3, #32]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	edd3 6a05 	vldr	s13, [r3, #20]
 800483a:	edd7 7a05 	vldr	s15, [r7, #20]
 800483e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004842:	edd7 7a07 	vldr	s15, [r7, #28]
 8004846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800484a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	edc3 7a08 	vstr	s15, [r3, #32]

	// Derivative
	hpid->u_D = hpid->D*(e_curr-e_prev)/Ts;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	ed93 7a06 	vldr	s14, [r3, #24]
 800485a:	edd7 6a06 	vldr	s13, [r7, #24]
 800485e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004862:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004866:	ee67 6a27 	vmul.f32	s13, s14, s15
 800486a:	ed97 7a07 	vldr	s14, [r7, #28]
 800486e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Input
	u= hpid->u_P + hpid->u_I + hpid->u_D;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	ed93 7a07 	vldr	s14, [r3, #28]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	edd3 7a08 	vldr	s15, [r3, #32]
 8004884:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800488e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004892:	edc7 7a04 	vstr	s15, [r7, #16]

	// Updating struct
	hpid->u_prev= u;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28
	hpid->e_prev= e_curr;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	62da      	str	r2, [r3, #44]	; 0x2c

	return u;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	ee07 3a90 	vmov	s15, r3

}
 80048a8:	eeb0 0a67 	vmov.f32	s0, s15
 80048ac:	3724      	adds	r7, #36	; 0x24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80048b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048bc:	480d      	ldr	r0, [pc, #52]	; (80048f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80048be:	490e      	ldr	r1, [pc, #56]	; (80048f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80048c0:	4a0e      	ldr	r2, [pc, #56]	; (80048fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80048c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048c4:	e002      	b.n	80048cc <LoopCopyDataInit>

080048c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048ca:	3304      	adds	r3, #4

080048cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048d0:	d3f9      	bcc.n	80048c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048d2:	4a0b      	ldr	r2, [pc, #44]	; (8004900 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80048d4:	4c0b      	ldr	r4, [pc, #44]	; (8004904 <LoopFillZerobss+0x26>)
  movs r3, #0
 80048d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048d8:	e001      	b.n	80048de <LoopFillZerobss>

080048da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048dc:	3204      	adds	r2, #4

080048de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048e0:	d3fb      	bcc.n	80048da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80048e2:	f7fd fc47 	bl	8002174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048e6:	f003 f835 	bl	8007954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048ea:	f7fc fb9f 	bl	800102c <main>
  bx  lr    
 80048ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80048f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80048f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048f8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80048fc:	08010e08 	.word	0x08010e08
  ldr r2, =_sbss
 8004900:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8004904:	20000978 	.word	0x20000978

08004908 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004908:	e7fe      	b.n	8004908 <ADC_IRQHandler>
	...

0800490c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004910:	4b0e      	ldr	r3, [pc, #56]	; (800494c <HAL_Init+0x40>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a0d      	ldr	r2, [pc, #52]	; (800494c <HAL_Init+0x40>)
 8004916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800491a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800491c:	4b0b      	ldr	r3, [pc, #44]	; (800494c <HAL_Init+0x40>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a0a      	ldr	r2, [pc, #40]	; (800494c <HAL_Init+0x40>)
 8004922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004926:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004928:	4b08      	ldr	r3, [pc, #32]	; (800494c <HAL_Init+0x40>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a07      	ldr	r2, [pc, #28]	; (800494c <HAL_Init+0x40>)
 800492e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004934:	2003      	movs	r0, #3
 8004936:	f000 f94f 	bl	8004bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800493a:	2000      	movs	r0, #0
 800493c:	f000 f808 	bl	8004950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004940:	f7fd f98e 	bl	8001c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40023c00 	.word	0x40023c00

08004950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004958:	4b12      	ldr	r3, [pc, #72]	; (80049a4 <HAL_InitTick+0x54>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	4b12      	ldr	r3, [pc, #72]	; (80049a8 <HAL_InitTick+0x58>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	4619      	mov	r1, r3
 8004962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004966:	fbb3 f3f1 	udiv	r3, r3, r1
 800496a:	fbb2 f3f3 	udiv	r3, r2, r3
 800496e:	4618      	mov	r0, r3
 8004970:	f000 f967 	bl	8004c42 <HAL_SYSTICK_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e00e      	b.n	800499c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b0f      	cmp	r3, #15
 8004982:	d80a      	bhi.n	800499a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004984:	2200      	movs	r2, #0
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800498c:	f000 f92f 	bl	8004bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004990:	4a06      	ldr	r2, [pc, #24]	; (80049ac <HAL_InitTick+0x5c>)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	e000      	b.n	800499c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000000 	.word	0x20000000
 80049a8:	20000008 	.word	0x20000008
 80049ac:	20000004 	.word	0x20000004

080049b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049b4:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <HAL_IncTick+0x20>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_IncTick+0x24>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4413      	add	r3, r2
 80049c0:	4a04      	ldr	r2, [pc, #16]	; (80049d4 <HAL_IncTick+0x24>)
 80049c2:	6013      	str	r3, [r2, #0]
}
 80049c4:	bf00      	nop
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	20000008 	.word	0x20000008
 80049d4:	20000964 	.word	0x20000964

080049d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  return uwTick;
 80049dc:	4b03      	ldr	r3, [pc, #12]	; (80049ec <HAL_GetTick+0x14>)
 80049de:	681b      	ldr	r3, [r3, #0]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	20000964 	.word	0x20000964

080049f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049f8:	f7ff ffee 	bl	80049d8 <HAL_GetTick>
 80049fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a08:	d005      	beq.n	8004a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a0a:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <HAL_Delay+0x44>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a16:	bf00      	nop
 8004a18:	f7ff ffde 	bl	80049d8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d8f7      	bhi.n	8004a18 <HAL_Delay+0x28>
  {
  }
}
 8004a28:	bf00      	nop
 8004a2a:	bf00      	nop
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000008 	.word	0x20000008

08004a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a48:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <__NVIC_SetPriorityGrouping+0x44>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a54:	4013      	ands	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a6a:	4a04      	ldr	r2, [pc, #16]	; (8004a7c <__NVIC_SetPriorityGrouping+0x44>)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	60d3      	str	r3, [r2, #12]
}
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	e000ed00 	.word	0xe000ed00

08004a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a84:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <__NVIC_GetPriorityGrouping+0x18>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	0a1b      	lsrs	r3, r3, #8
 8004a8a:	f003 0307 	and.w	r3, r3, #7
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	e000ed00 	.word	0xe000ed00

08004a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	db0b      	blt.n	8004ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	f003 021f 	and.w	r2, r3, #31
 8004ab4:	4907      	ldr	r1, [pc, #28]	; (8004ad4 <__NVIC_EnableIRQ+0x38>)
 8004ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	2001      	movs	r0, #1
 8004abe:	fa00 f202 	lsl.w	r2, r0, r2
 8004ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	e000e100 	.word	0xe000e100

08004ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	6039      	str	r1, [r7, #0]
 8004ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	db0a      	blt.n	8004b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	490c      	ldr	r1, [pc, #48]	; (8004b24 <__NVIC_SetPriority+0x4c>)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	0112      	lsls	r2, r2, #4
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	440b      	add	r3, r1
 8004afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b00:	e00a      	b.n	8004b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	4908      	ldr	r1, [pc, #32]	; (8004b28 <__NVIC_SetPriority+0x50>)
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	3b04      	subs	r3, #4
 8004b10:	0112      	lsls	r2, r2, #4
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	440b      	add	r3, r1
 8004b16:	761a      	strb	r2, [r3, #24]
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	e000e100 	.word	0xe000e100
 8004b28:	e000ed00 	.word	0xe000ed00

08004b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b089      	sub	sp, #36	; 0x24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f1c3 0307 	rsb	r3, r3, #7
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	bf28      	it	cs
 8004b4a:	2304      	movcs	r3, #4
 8004b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3304      	adds	r3, #4
 8004b52:	2b06      	cmp	r3, #6
 8004b54:	d902      	bls.n	8004b5c <NVIC_EncodePriority+0x30>
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	3b03      	subs	r3, #3
 8004b5a:	e000      	b.n	8004b5e <NVIC_EncodePriority+0x32>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	401a      	ands	r2, r3
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7e:	43d9      	mvns	r1, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b84:	4313      	orrs	r3, r2
         );
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3724      	adds	r7, #36	; 0x24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ba4:	d301      	bcc.n	8004baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e00f      	b.n	8004bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004baa:	4a0a      	ldr	r2, [pc, #40]	; (8004bd4 <SysTick_Config+0x40>)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bb2:	210f      	movs	r1, #15
 8004bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bb8:	f7ff ff8e 	bl	8004ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <SysTick_Config+0x40>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bc2:	4b04      	ldr	r3, [pc, #16]	; (8004bd4 <SysTick_Config+0x40>)
 8004bc4:	2207      	movs	r2, #7
 8004bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	e000e010 	.word	0xe000e010

08004bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff ff29 	bl	8004a38 <__NVIC_SetPriorityGrouping>
}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b086      	sub	sp, #24
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c00:	f7ff ff3e 	bl	8004a80 <__NVIC_GetPriorityGrouping>
 8004c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	6978      	ldr	r0, [r7, #20]
 8004c0c:	f7ff ff8e 	bl	8004b2c <NVIC_EncodePriority>
 8004c10:	4602      	mov	r2, r0
 8004c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c16:	4611      	mov	r1, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff ff5d 	bl	8004ad8 <__NVIC_SetPriority>
}
 8004c1e:	bf00      	nop
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff ff31 	bl	8004a9c <__NVIC_EnableIRQ>
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff ffa2 	bl	8004b94 <SysTick_Config>
 8004c50:	4603      	mov	r3, r0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b089      	sub	sp, #36	; 0x24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
 8004c76:	e165      	b.n	8004f44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c78:	2201      	movs	r2, #1
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	f040 8154 	bne.w	8004f3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d005      	beq.n	8004cae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d130      	bne.n	8004d10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	2203      	movs	r2, #3
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	43db      	mvns	r3, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	f003 0201 	and.w	r2, r3, #1
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d017      	beq.n	8004d4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	2203      	movs	r2, #3
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4013      	ands	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d123      	bne.n	8004da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	08da      	lsrs	r2, r3, #3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3208      	adds	r2, #8
 8004d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	220f      	movs	r2, #15
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	08da      	lsrs	r2, r3, #3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3208      	adds	r2, #8
 8004d9a:	69b9      	ldr	r1, [r7, #24]
 8004d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	2203      	movs	r2, #3
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 0203 	and.w	r2, r3, #3
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80ae 	beq.w	8004f3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	4b5d      	ldr	r3, [pc, #372]	; (8004f5c <HAL_GPIO_Init+0x300>)
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	4a5c      	ldr	r2, [pc, #368]	; (8004f5c <HAL_GPIO_Init+0x300>)
 8004dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004df0:	6453      	str	r3, [r2, #68]	; 0x44
 8004df2:	4b5a      	ldr	r3, [pc, #360]	; (8004f5c <HAL_GPIO_Init+0x300>)
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dfe:	4a58      	ldr	r2, [pc, #352]	; (8004f60 <HAL_GPIO_Init+0x304>)
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	089b      	lsrs	r3, r3, #2
 8004e04:	3302      	adds	r3, #2
 8004e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	220f      	movs	r2, #15
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a4f      	ldr	r2, [pc, #316]	; (8004f64 <HAL_GPIO_Init+0x308>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d025      	beq.n	8004e76 <HAL_GPIO_Init+0x21a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a4e      	ldr	r2, [pc, #312]	; (8004f68 <HAL_GPIO_Init+0x30c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d01f      	beq.n	8004e72 <HAL_GPIO_Init+0x216>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a4d      	ldr	r2, [pc, #308]	; (8004f6c <HAL_GPIO_Init+0x310>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d019      	beq.n	8004e6e <HAL_GPIO_Init+0x212>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a4c      	ldr	r2, [pc, #304]	; (8004f70 <HAL_GPIO_Init+0x314>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <HAL_GPIO_Init+0x20e>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a4b      	ldr	r2, [pc, #300]	; (8004f74 <HAL_GPIO_Init+0x318>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00d      	beq.n	8004e66 <HAL_GPIO_Init+0x20a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a4a      	ldr	r2, [pc, #296]	; (8004f78 <HAL_GPIO_Init+0x31c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d007      	beq.n	8004e62 <HAL_GPIO_Init+0x206>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a49      	ldr	r2, [pc, #292]	; (8004f7c <HAL_GPIO_Init+0x320>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d101      	bne.n	8004e5e <HAL_GPIO_Init+0x202>
 8004e5a:	2306      	movs	r3, #6
 8004e5c:	e00c      	b.n	8004e78 <HAL_GPIO_Init+0x21c>
 8004e5e:	2307      	movs	r3, #7
 8004e60:	e00a      	b.n	8004e78 <HAL_GPIO_Init+0x21c>
 8004e62:	2305      	movs	r3, #5
 8004e64:	e008      	b.n	8004e78 <HAL_GPIO_Init+0x21c>
 8004e66:	2304      	movs	r3, #4
 8004e68:	e006      	b.n	8004e78 <HAL_GPIO_Init+0x21c>
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e004      	b.n	8004e78 <HAL_GPIO_Init+0x21c>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e002      	b.n	8004e78 <HAL_GPIO_Init+0x21c>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <HAL_GPIO_Init+0x21c>
 8004e76:	2300      	movs	r3, #0
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	f002 0203 	and.w	r2, r2, #3
 8004e7e:	0092      	lsls	r2, r2, #2
 8004e80:	4093      	lsls	r3, r2
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e88:	4935      	ldr	r1, [pc, #212]	; (8004f60 <HAL_GPIO_Init+0x304>)
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	089b      	lsrs	r3, r3, #2
 8004e8e:	3302      	adds	r3, #2
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e96:	4b3a      	ldr	r3, [pc, #232]	; (8004f80 <HAL_GPIO_Init+0x324>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004eba:	4a31      	ldr	r2, [pc, #196]	; (8004f80 <HAL_GPIO_Init+0x324>)
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ec0:	4b2f      	ldr	r3, [pc, #188]	; (8004f80 <HAL_GPIO_Init+0x324>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ee4:	4a26      	ldr	r2, [pc, #152]	; (8004f80 <HAL_GPIO_Init+0x324>)
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004eea:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <HAL_GPIO_Init+0x324>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f0e:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <HAL_GPIO_Init+0x324>)
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f14:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <HAL_GPIO_Init+0x324>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	4013      	ands	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f38:	4a11      	ldr	r2, [pc, #68]	; (8004f80 <HAL_GPIO_Init+0x324>)
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	3301      	adds	r3, #1
 8004f42:	61fb      	str	r3, [r7, #28]
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	2b0f      	cmp	r3, #15
 8004f48:	f67f ae96 	bls.w	8004c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f4c:	bf00      	nop
 8004f4e:	bf00      	nop
 8004f50:	3724      	adds	r7, #36	; 0x24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	40013800 	.word	0x40013800
 8004f64:	40020000 	.word	0x40020000
 8004f68:	40020400 	.word	0x40020400
 8004f6c:	40020800 	.word	0x40020800
 8004f70:	40020c00 	.word	0x40020c00
 8004f74:	40021000 	.word	0x40021000
 8004f78:	40021400 	.word	0x40021400
 8004f7c:	40021800 	.word	0x40021800
 8004f80:	40013c00 	.word	0x40013c00

08004f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	887b      	ldrh	r3, [r7, #2]
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	e001      	b.n	8004fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	807b      	strh	r3, [r7, #2]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fc4:	787b      	ldrb	r3, [r7, #1]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fca:	887a      	ldrh	r2, [r7, #2]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fd0:	e003      	b.n	8004fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fd2:	887b      	ldrh	r3, [r7, #2]
 8004fd4:	041a      	lsls	r2, r3, #16
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	619a      	str	r2, [r3, #24]
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ff8:	887a      	ldrh	r2, [r7, #2]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	041a      	lsls	r2, r3, #16
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	43d9      	mvns	r1, r3
 8005004:	887b      	ldrh	r3, [r7, #2]
 8005006:	400b      	ands	r3, r1
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	619a      	str	r2, [r3, #24]
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0cc      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005030:	4b68      	ldr	r3, [pc, #416]	; (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 030f 	and.w	r3, r3, #15
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d90c      	bls.n	8005058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503e:	4b65      	ldr	r3, [pc, #404]	; (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005046:	4b63      	ldr	r3, [pc, #396]	; (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d001      	beq.n	8005058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0b8      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d020      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005070:	4b59      	ldr	r3, [pc, #356]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	4a58      	ldr	r2, [pc, #352]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800507a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005088:	4b53      	ldr	r3, [pc, #332]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	4a52      	ldr	r2, [pc, #328]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005094:	4b50      	ldr	r3, [pc, #320]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	494d      	ldr	r1, [pc, #308]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d044      	beq.n	800513c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ba:	4b47      	ldr	r3, [pc, #284]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d119      	bne.n	80050fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e07f      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d003      	beq.n	80050da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d107      	bne.n	80050ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050da:	4b3f      	ldr	r3, [pc, #252]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e06f      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ea:	4b3b      	ldr	r3, [pc, #236]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e067      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050fa:	4b37      	ldr	r3, [pc, #220]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f023 0203 	bic.w	r2, r3, #3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	4934      	ldr	r1, [pc, #208]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005108:	4313      	orrs	r3, r2
 800510a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800510c:	f7ff fc64 	bl	80049d8 <HAL_GetTick>
 8005110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005112:	e00a      	b.n	800512a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005114:	f7ff fc60 	bl	80049d8 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005122:	4293      	cmp	r3, r2
 8005124:	d901      	bls.n	800512a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e04f      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512a:	4b2b      	ldr	r3, [pc, #172]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 020c 	and.w	r2, r3, #12
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	429a      	cmp	r2, r3
 800513a:	d1eb      	bne.n	8005114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800513c:	4b25      	ldr	r3, [pc, #148]	; (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d20c      	bcs.n	8005164 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514a:	4b22      	ldr	r3, [pc, #136]	; (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005152:	4b20      	ldr	r3, [pc, #128]	; (80051d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d001      	beq.n	8005164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e032      	b.n	80051ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d008      	beq.n	8005182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005170:	4b19      	ldr	r3, [pc, #100]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4916      	ldr	r1, [pc, #88]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d009      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800518e:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	490e      	ldr	r1, [pc, #56]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051a2:	f000 f855 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 80051a6:	4602      	mov	r2, r0
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	490a      	ldr	r1, [pc, #40]	; (80051dc <HAL_RCC_ClockConfig+0x1c0>)
 80051b4:	5ccb      	ldrb	r3, [r1, r3]
 80051b6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ba:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051be:	4b09      	ldr	r3, [pc, #36]	; (80051e4 <HAL_RCC_ClockConfig+0x1c8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7ff fbc4 	bl	8004950 <HAL_InitTick>

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	40023c00 	.word	0x40023c00
 80051d8:	40023800 	.word	0x40023800
 80051dc:	08010710 	.word	0x08010710
 80051e0:	20000000 	.word	0x20000000
 80051e4:	20000004 	.word	0x20000004

080051e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051ec:	4b03      	ldr	r3, [pc, #12]	; (80051fc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ee:	681b      	ldr	r3, [r3, #0]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000000 	.word	0x20000000

08005200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005204:	f7ff fff0 	bl	80051e8 <HAL_RCC_GetHCLKFreq>
 8005208:	4602      	mov	r2, r0
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	0a9b      	lsrs	r3, r3, #10
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	4903      	ldr	r1, [pc, #12]	; (8005224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005216:	5ccb      	ldrb	r3, [r1, r3]
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40023800 	.word	0x40023800
 8005224:	08010720 	.word	0x08010720

08005228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800522c:	f7ff ffdc 	bl	80051e8 <HAL_RCC_GetHCLKFreq>
 8005230:	4602      	mov	r2, r0
 8005232:	4b05      	ldr	r3, [pc, #20]	; (8005248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	0b5b      	lsrs	r3, r3, #13
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	4903      	ldr	r1, [pc, #12]	; (800524c <HAL_RCC_GetPCLK2Freq+0x24>)
 800523e:	5ccb      	ldrb	r3, [r1, r3]
 8005240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005244:	4618      	mov	r0, r3
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40023800 	.word	0x40023800
 800524c:	08010720 	.word	0x08010720

08005250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005254:	b088      	sub	sp, #32
 8005256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800526c:	4bce      	ldr	r3, [pc, #824]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x358>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 030c 	and.w	r3, r3, #12
 8005274:	2b0c      	cmp	r3, #12
 8005276:	f200 818d 	bhi.w	8005594 <HAL_RCC_GetSysClockFreq+0x344>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <HAL_RCC_GetSysClockFreq+0x30>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	080052b5 	.word	0x080052b5
 8005284:	08005595 	.word	0x08005595
 8005288:	08005595 	.word	0x08005595
 800528c:	08005595 	.word	0x08005595
 8005290:	080052bb 	.word	0x080052bb
 8005294:	08005595 	.word	0x08005595
 8005298:	08005595 	.word	0x08005595
 800529c:	08005595 	.word	0x08005595
 80052a0:	080052c1 	.word	0x080052c1
 80052a4:	08005595 	.word	0x08005595
 80052a8:	08005595 	.word	0x08005595
 80052ac:	08005595 	.word	0x08005595
 80052b0:	08005435 	.word	0x08005435
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052b4:	4bbd      	ldr	r3, [pc, #756]	; (80055ac <HAL_RCC_GetSysClockFreq+0x35c>)
 80052b6:	61bb      	str	r3, [r7, #24]
       break;
 80052b8:	e16f      	b.n	800559a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052ba:	4bbd      	ldr	r3, [pc, #756]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x360>)
 80052bc:	61bb      	str	r3, [r7, #24]
      break;
 80052be:	e16c      	b.n	800559a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052c0:	4bb9      	ldr	r3, [pc, #740]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052c8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052ca:	4bb7      	ldr	r3, [pc, #732]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d053      	beq.n	800537e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052d6:	4bb4      	ldr	r3, [pc, #720]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	099b      	lsrs	r3, r3, #6
 80052dc:	461a      	mov	r2, r3
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052e6:	f04f 0100 	mov.w	r1, #0
 80052ea:	ea02 0400 	and.w	r4, r2, r0
 80052ee:	603c      	str	r4, [r7, #0]
 80052f0:	400b      	ands	r3, r1
 80052f2:	607b      	str	r3, [r7, #4]
 80052f4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052f8:	4620      	mov	r0, r4
 80052fa:	4629      	mov	r1, r5
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	014b      	lsls	r3, r1, #5
 8005306:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800530a:	0142      	lsls	r2, r0, #5
 800530c:	4610      	mov	r0, r2
 800530e:	4619      	mov	r1, r3
 8005310:	4623      	mov	r3, r4
 8005312:	1ac0      	subs	r0, r0, r3
 8005314:	462b      	mov	r3, r5
 8005316:	eb61 0103 	sbc.w	r1, r1, r3
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	018b      	lsls	r3, r1, #6
 8005324:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005328:	0182      	lsls	r2, r0, #6
 800532a:	1a12      	subs	r2, r2, r0
 800532c:	eb63 0301 	sbc.w	r3, r3, r1
 8005330:	f04f 0000 	mov.w	r0, #0
 8005334:	f04f 0100 	mov.w	r1, #0
 8005338:	00d9      	lsls	r1, r3, #3
 800533a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800533e:	00d0      	lsls	r0, r2, #3
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4621      	mov	r1, r4
 8005346:	1852      	adds	r2, r2, r1
 8005348:	4629      	mov	r1, r5
 800534a:	eb43 0101 	adc.w	r1, r3, r1
 800534e:	460b      	mov	r3, r1
 8005350:	f04f 0000 	mov.w	r0, #0
 8005354:	f04f 0100 	mov.w	r1, #0
 8005358:	0259      	lsls	r1, r3, #9
 800535a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800535e:	0250      	lsls	r0, r2, #9
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4610      	mov	r0, r2
 8005366:	4619      	mov	r1, r3
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	461a      	mov	r2, r3
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	f7fb fcaa 	bl	8000cc8 <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4613      	mov	r3, r2
 800537a:	61fb      	str	r3, [r7, #28]
 800537c:	e04c      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800537e:	4b8a      	ldr	r3, [pc, #552]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	099b      	lsrs	r3, r3, #6
 8005384:	461a      	mov	r2, r3
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800538e:	f04f 0100 	mov.w	r1, #0
 8005392:	ea02 0a00 	and.w	sl, r2, r0
 8005396:	ea03 0b01 	and.w	fp, r3, r1
 800539a:	4650      	mov	r0, sl
 800539c:	4659      	mov	r1, fp
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	014b      	lsls	r3, r1, #5
 80053a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053ac:	0142      	lsls	r2, r0, #5
 80053ae:	4610      	mov	r0, r2
 80053b0:	4619      	mov	r1, r3
 80053b2:	ebb0 000a 	subs.w	r0, r0, sl
 80053b6:	eb61 010b 	sbc.w	r1, r1, fp
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	018b      	lsls	r3, r1, #6
 80053c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053c8:	0182      	lsls	r2, r0, #6
 80053ca:	1a12      	subs	r2, r2, r0
 80053cc:	eb63 0301 	sbc.w	r3, r3, r1
 80053d0:	f04f 0000 	mov.w	r0, #0
 80053d4:	f04f 0100 	mov.w	r1, #0
 80053d8:	00d9      	lsls	r1, r3, #3
 80053da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053de:	00d0      	lsls	r0, r2, #3
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	eb12 020a 	adds.w	r2, r2, sl
 80053e8:	eb43 030b 	adc.w	r3, r3, fp
 80053ec:	f04f 0000 	mov.w	r0, #0
 80053f0:	f04f 0100 	mov.w	r1, #0
 80053f4:	0299      	lsls	r1, r3, #10
 80053f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80053fa:	0290      	lsls	r0, r2, #10
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4610      	mov	r0, r2
 8005402:	4619      	mov	r1, r3
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	461a      	mov	r2, r3
 8005408:	f04f 0300 	mov.w	r3, #0
 800540c:	f7fb fc5c 	bl	8000cc8 <__aeabi_uldivmod>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4613      	mov	r3, r2
 8005416:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005418:	4b63      	ldr	r3, [pc, #396]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x358>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	3301      	adds	r3, #1
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005430:	61bb      	str	r3, [r7, #24]
      break;
 8005432:	e0b2      	b.n	800559a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005434:	4b5c      	ldr	r3, [pc, #368]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800543c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800543e:	4b5a      	ldr	r3, [pc, #360]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d04d      	beq.n	80054e6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800544a:	4b57      	ldr	r3, [pc, #348]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x358>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	099b      	lsrs	r3, r3, #6
 8005450:	461a      	mov	r2, r3
 8005452:	f04f 0300 	mov.w	r3, #0
 8005456:	f240 10ff 	movw	r0, #511	; 0x1ff
 800545a:	f04f 0100 	mov.w	r1, #0
 800545e:	ea02 0800 	and.w	r8, r2, r0
 8005462:	ea03 0901 	and.w	r9, r3, r1
 8005466:	4640      	mov	r0, r8
 8005468:	4649      	mov	r1, r9
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	014b      	lsls	r3, r1, #5
 8005474:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005478:	0142      	lsls	r2, r0, #5
 800547a:	4610      	mov	r0, r2
 800547c:	4619      	mov	r1, r3
 800547e:	ebb0 0008 	subs.w	r0, r0, r8
 8005482:	eb61 0109 	sbc.w	r1, r1, r9
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	f04f 0300 	mov.w	r3, #0
 800548e:	018b      	lsls	r3, r1, #6
 8005490:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005494:	0182      	lsls	r2, r0, #6
 8005496:	1a12      	subs	r2, r2, r0
 8005498:	eb63 0301 	sbc.w	r3, r3, r1
 800549c:	f04f 0000 	mov.w	r0, #0
 80054a0:	f04f 0100 	mov.w	r1, #0
 80054a4:	00d9      	lsls	r1, r3, #3
 80054a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054aa:	00d0      	lsls	r0, r2, #3
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	eb12 0208 	adds.w	r2, r2, r8
 80054b4:	eb43 0309 	adc.w	r3, r3, r9
 80054b8:	f04f 0000 	mov.w	r0, #0
 80054bc:	f04f 0100 	mov.w	r1, #0
 80054c0:	0259      	lsls	r1, r3, #9
 80054c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80054c6:	0250      	lsls	r0, r2, #9
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4610      	mov	r0, r2
 80054ce:	4619      	mov	r1, r3
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	461a      	mov	r2, r3
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	f7fb fbf6 	bl	8000cc8 <__aeabi_uldivmod>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4613      	mov	r3, r2
 80054e2:	61fb      	str	r3, [r7, #28]
 80054e4:	e04a      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054e6:	4b30      	ldr	r3, [pc, #192]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	099b      	lsrs	r3, r3, #6
 80054ec:	461a      	mov	r2, r3
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054f6:	f04f 0100 	mov.w	r1, #0
 80054fa:	ea02 0400 	and.w	r4, r2, r0
 80054fe:	ea03 0501 	and.w	r5, r3, r1
 8005502:	4620      	mov	r0, r4
 8005504:	4629      	mov	r1, r5
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	f04f 0300 	mov.w	r3, #0
 800550e:	014b      	lsls	r3, r1, #5
 8005510:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005514:	0142      	lsls	r2, r0, #5
 8005516:	4610      	mov	r0, r2
 8005518:	4619      	mov	r1, r3
 800551a:	1b00      	subs	r0, r0, r4
 800551c:	eb61 0105 	sbc.w	r1, r1, r5
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	018b      	lsls	r3, r1, #6
 800552a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800552e:	0182      	lsls	r2, r0, #6
 8005530:	1a12      	subs	r2, r2, r0
 8005532:	eb63 0301 	sbc.w	r3, r3, r1
 8005536:	f04f 0000 	mov.w	r0, #0
 800553a:	f04f 0100 	mov.w	r1, #0
 800553e:	00d9      	lsls	r1, r3, #3
 8005540:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005544:	00d0      	lsls	r0, r2, #3
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	1912      	adds	r2, r2, r4
 800554c:	eb45 0303 	adc.w	r3, r5, r3
 8005550:	f04f 0000 	mov.w	r0, #0
 8005554:	f04f 0100 	mov.w	r1, #0
 8005558:	0299      	lsls	r1, r3, #10
 800555a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800555e:	0290      	lsls	r0, r2, #10
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4610      	mov	r0, r2
 8005566:	4619      	mov	r1, r3
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	461a      	mov	r2, r3
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	f7fb fbaa 	bl	8000cc8 <__aeabi_uldivmod>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4613      	mov	r3, r2
 800557a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800557c:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x358>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	0f1b      	lsrs	r3, r3, #28
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005590:	61bb      	str	r3, [r7, #24]
      break;
 8005592:	e002      	b.n	800559a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <HAL_RCC_GetSysClockFreq+0x35c>)
 8005596:	61bb      	str	r3, [r7, #24]
      break;
 8005598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800559a:	69bb      	ldr	r3, [r7, #24]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3720      	adds	r7, #32
 80055a0:	46bd      	mov	sp, r7
 80055a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055a6:	bf00      	nop
 80055a8:	40023800 	.word	0x40023800
 80055ac:	00f42400 	.word	0x00f42400
 80055b0:	007a1200 	.word	0x007a1200

080055b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e28d      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8083 	beq.w	80056da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80055d4:	4b94      	ldr	r3, [pc, #592]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 030c 	and.w	r3, r3, #12
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d019      	beq.n	8005614 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055e0:	4b91      	ldr	r3, [pc, #580]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d106      	bne.n	80055fa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055ec:	4b8e      	ldr	r3, [pc, #568]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055f8:	d00c      	beq.n	8005614 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055fa:	4b8b      	ldr	r3, [pc, #556]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005602:	2b0c      	cmp	r3, #12
 8005604:	d112      	bne.n	800562c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005606:	4b88      	ldr	r3, [pc, #544]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800560e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005612:	d10b      	bne.n	800562c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005614:	4b84      	ldr	r3, [pc, #528]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d05b      	beq.n	80056d8 <HAL_RCC_OscConfig+0x124>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d157      	bne.n	80056d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e25a      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005634:	d106      	bne.n	8005644 <HAL_RCC_OscConfig+0x90>
 8005636:	4b7c      	ldr	r3, [pc, #496]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a7b      	ldr	r2, [pc, #492]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 800563c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e01d      	b.n	8005680 <HAL_RCC_OscConfig+0xcc>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800564c:	d10c      	bne.n	8005668 <HAL_RCC_OscConfig+0xb4>
 800564e:	4b76      	ldr	r3, [pc, #472]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a75      	ldr	r2, [pc, #468]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 8005654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	4b73      	ldr	r3, [pc, #460]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a72      	ldr	r2, [pc, #456]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 8005660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	e00b      	b.n	8005680 <HAL_RCC_OscConfig+0xcc>
 8005668:	4b6f      	ldr	r3, [pc, #444]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a6e      	ldr	r2, [pc, #440]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 800566e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	4b6c      	ldr	r3, [pc, #432]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a6b      	ldr	r2, [pc, #428]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 800567a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800567e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d013      	beq.n	80056b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7ff f9a6 	bl	80049d8 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005690:	f7ff f9a2 	bl	80049d8 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b64      	cmp	r3, #100	; 0x64
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e21f      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a2:	4b61      	ldr	r3, [pc, #388]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0f0      	beq.n	8005690 <HAL_RCC_OscConfig+0xdc>
 80056ae:	e014      	b.n	80056da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b0:	f7ff f992 	bl	80049d8 <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056b8:	f7ff f98e 	bl	80049d8 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b64      	cmp	r3, #100	; 0x64
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e20b      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ca:	4b57      	ldr	r3, [pc, #348]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0x104>
 80056d6:	e000      	b.n	80056da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d06f      	beq.n	80057c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056e6:	4b50      	ldr	r3, [pc, #320]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 030c 	and.w	r3, r3, #12
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d017      	beq.n	8005722 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056f2:	4b4d      	ldr	r3, [pc, #308]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d105      	bne.n	800570a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056fe:	4b4a      	ldr	r3, [pc, #296]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800570a:	4b47      	ldr	r3, [pc, #284]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005712:	2b0c      	cmp	r3, #12
 8005714:	d11c      	bne.n	8005750 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005716:	4b44      	ldr	r3, [pc, #272]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d116      	bne.n	8005750 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005722:	4b41      	ldr	r3, [pc, #260]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d005      	beq.n	800573a <HAL_RCC_OscConfig+0x186>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d001      	beq.n	800573a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e1d3      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800573a:	4b3b      	ldr	r3, [pc, #236]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	4937      	ldr	r1, [pc, #220]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 800574a:	4313      	orrs	r3, r2
 800574c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800574e:	e03a      	b.n	80057c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d020      	beq.n	800579a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005758:	4b34      	ldr	r3, [pc, #208]	; (800582c <HAL_RCC_OscConfig+0x278>)
 800575a:	2201      	movs	r2, #1
 800575c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575e:	f7ff f93b 	bl	80049d8 <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005766:	f7ff f937 	bl	80049d8 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e1b4      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005778:	4b2b      	ldr	r3, [pc, #172]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0f0      	beq.n	8005766 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005784:	4b28      	ldr	r3, [pc, #160]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	4925      	ldr	r1, [pc, #148]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 8005794:	4313      	orrs	r3, r2
 8005796:	600b      	str	r3, [r1, #0]
 8005798:	e015      	b.n	80057c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800579a:	4b24      	ldr	r3, [pc, #144]	; (800582c <HAL_RCC_OscConfig+0x278>)
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7ff f91a 	bl	80049d8 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057a8:	f7ff f916 	bl	80049d8 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e193      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ba:	4b1b      	ldr	r3, [pc, #108]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d036      	beq.n	8005840 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d016      	beq.n	8005808 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057da:	4b15      	ldr	r3, [pc, #84]	; (8005830 <HAL_RCC_OscConfig+0x27c>)
 80057dc:	2201      	movs	r2, #1
 80057de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e0:	f7ff f8fa 	bl	80049d8 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057e8:	f7ff f8f6 	bl	80049d8 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e173      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057fa:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <HAL_RCC_OscConfig+0x274>)
 80057fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCC_OscConfig+0x234>
 8005806:	e01b      	b.n	8005840 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005808:	4b09      	ldr	r3, [pc, #36]	; (8005830 <HAL_RCC_OscConfig+0x27c>)
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580e:	f7ff f8e3 	bl	80049d8 <HAL_GetTick>
 8005812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005814:	e00e      	b.n	8005834 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005816:	f7ff f8df 	bl	80049d8 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d907      	bls.n	8005834 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e15c      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
 8005828:	40023800 	.word	0x40023800
 800582c:	42470000 	.word	0x42470000
 8005830:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005834:	4b8a      	ldr	r3, [pc, #552]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1ea      	bne.n	8005816 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 8097 	beq.w	800597c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800584e:	2300      	movs	r3, #0
 8005850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005852:	4b83      	ldr	r3, [pc, #524]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10f      	bne.n	800587e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800585e:	2300      	movs	r3, #0
 8005860:	60bb      	str	r3, [r7, #8]
 8005862:	4b7f      	ldr	r3, [pc, #508]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	4a7e      	ldr	r2, [pc, #504]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586c:	6413      	str	r3, [r2, #64]	; 0x40
 800586e:	4b7c      	ldr	r3, [pc, #496]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005876:	60bb      	str	r3, [r7, #8]
 8005878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800587a:	2301      	movs	r3, #1
 800587c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800587e:	4b79      	ldr	r3, [pc, #484]	; (8005a64 <HAL_RCC_OscConfig+0x4b0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005886:	2b00      	cmp	r3, #0
 8005888:	d118      	bne.n	80058bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800588a:	4b76      	ldr	r3, [pc, #472]	; (8005a64 <HAL_RCC_OscConfig+0x4b0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a75      	ldr	r2, [pc, #468]	; (8005a64 <HAL_RCC_OscConfig+0x4b0>)
 8005890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005896:	f7ff f89f 	bl	80049d8 <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800589e:	f7ff f89b 	bl	80049d8 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e118      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b0:	4b6c      	ldr	r3, [pc, #432]	; (8005a64 <HAL_RCC_OscConfig+0x4b0>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0f0      	beq.n	800589e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d106      	bne.n	80058d2 <HAL_RCC_OscConfig+0x31e>
 80058c4:	4b66      	ldr	r3, [pc, #408]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80058c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c8:	4a65      	ldr	r2, [pc, #404]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	6713      	str	r3, [r2, #112]	; 0x70
 80058d0:	e01c      	b.n	800590c <HAL_RCC_OscConfig+0x358>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b05      	cmp	r3, #5
 80058d8:	d10c      	bne.n	80058f4 <HAL_RCC_OscConfig+0x340>
 80058da:	4b61      	ldr	r3, [pc, #388]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80058dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058de:	4a60      	ldr	r2, [pc, #384]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80058e0:	f043 0304 	orr.w	r3, r3, #4
 80058e4:	6713      	str	r3, [r2, #112]	; 0x70
 80058e6:	4b5e      	ldr	r3, [pc, #376]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80058e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ea:	4a5d      	ldr	r2, [pc, #372]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	6713      	str	r3, [r2, #112]	; 0x70
 80058f2:	e00b      	b.n	800590c <HAL_RCC_OscConfig+0x358>
 80058f4:	4b5a      	ldr	r3, [pc, #360]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80058f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f8:	4a59      	ldr	r2, [pc, #356]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80058fa:	f023 0301 	bic.w	r3, r3, #1
 80058fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005900:	4b57      	ldr	r3, [pc, #348]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005904:	4a56      	ldr	r2, [pc, #344]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005906:	f023 0304 	bic.w	r3, r3, #4
 800590a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d015      	beq.n	8005940 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005914:	f7ff f860 	bl	80049d8 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591a:	e00a      	b.n	8005932 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800591c:	f7ff f85c 	bl	80049d8 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	f241 3288 	movw	r2, #5000	; 0x1388
 800592a:	4293      	cmp	r3, r2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e0d7      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005932:	4b4b      	ldr	r3, [pc, #300]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0ee      	beq.n	800591c <HAL_RCC_OscConfig+0x368>
 800593e:	e014      	b.n	800596a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005940:	f7ff f84a 	bl	80049d8 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005946:	e00a      	b.n	800595e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005948:	f7ff f846 	bl	80049d8 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f241 3288 	movw	r2, #5000	; 0x1388
 8005956:	4293      	cmp	r3, r2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e0c1      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800595e:	4b40      	ldr	r3, [pc, #256]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1ee      	bne.n	8005948 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800596a:	7dfb      	ldrb	r3, [r7, #23]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d105      	bne.n	800597c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005970:	4b3b      	ldr	r3, [pc, #236]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	4a3a      	ldr	r2, [pc, #232]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800597a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 80ad 	beq.w	8005ae0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005986:	4b36      	ldr	r3, [pc, #216]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 030c 	and.w	r3, r3, #12
 800598e:	2b08      	cmp	r3, #8
 8005990:	d060      	beq.n	8005a54 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	2b02      	cmp	r3, #2
 8005998:	d145      	bne.n	8005a26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800599a:	4b33      	ldr	r3, [pc, #204]	; (8005a68 <HAL_RCC_OscConfig+0x4b4>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a0:	f7ff f81a 	bl	80049d8 <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059a8:	f7ff f816 	bl	80049d8 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e093      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ba:	4b29      	ldr	r3, [pc, #164]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f0      	bne.n	80059a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69da      	ldr	r2, [r3, #28]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	019b      	lsls	r3, r3, #6
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059dc:	085b      	lsrs	r3, r3, #1
 80059de:	3b01      	subs	r3, #1
 80059e0:	041b      	lsls	r3, r3, #16
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	061b      	lsls	r3, r3, #24
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	071b      	lsls	r3, r3, #28
 80059f2:	491b      	ldr	r1, [pc, #108]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059f8:	4b1b      	ldr	r3, [pc, #108]	; (8005a68 <HAL_RCC_OscConfig+0x4b4>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fe:	f7fe ffeb 	bl	80049d8 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a06:	f7fe ffe7 	bl	80049d8 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e064      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a18:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0f0      	beq.n	8005a06 <HAL_RCC_OscConfig+0x452>
 8005a24:	e05c      	b.n	8005ae0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a26:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <HAL_RCC_OscConfig+0x4b4>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2c:	f7fe ffd4 	bl	80049d8 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a34:	f7fe ffd0 	bl	80049d8 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e04d      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a46:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <HAL_RCC_OscConfig+0x4ac>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCC_OscConfig+0x480>
 8005a52:	e045      	b.n	8005ae0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e040      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
 8005a60:	40023800 	.word	0x40023800
 8005a64:	40007000 	.word	0x40007000
 8005a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a6c:	4b1f      	ldr	r3, [pc, #124]	; (8005aec <HAL_RCC_OscConfig+0x538>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d030      	beq.n	8005adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d129      	bne.n	8005adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d122      	bne.n	8005adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d119      	bne.n	8005adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	085b      	lsrs	r3, r3, #1
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d10f      	bne.n	8005adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d107      	bne.n	8005adc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40023800 	.word	0x40023800

08005af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e04c      	b.n	8005b9c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d111      	bne.n	8005b32 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f001 f972 	bl	8006e00 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d102      	bne.n	8005b2a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a1f      	ldr	r2, [pc, #124]	; (8005ba4 <HAL_TIM_Base_Init+0xb4>)
 8005b28:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2202      	movs	r2, #2
 8005b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3304      	adds	r3, #4
 8005b42:	4619      	mov	r1, r3
 8005b44:	4610      	mov	r0, r2
 8005b46:	f000 fe4b 	bl	80067e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	08001ded 	.word	0x08001ded

08005ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d001      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e04e      	b.n	8005c5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 0201 	orr.w	r2, r2, #1
 8005bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a23      	ldr	r2, [pc, #140]	; (8005c6c <HAL_TIM_Base_Start_IT+0xc4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d022      	beq.n	8005c28 <HAL_TIM_Base_Start_IT+0x80>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bea:	d01d      	beq.n	8005c28 <HAL_TIM_Base_Start_IT+0x80>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1f      	ldr	r2, [pc, #124]	; (8005c70 <HAL_TIM_Base_Start_IT+0xc8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d018      	beq.n	8005c28 <HAL_TIM_Base_Start_IT+0x80>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a1e      	ldr	r2, [pc, #120]	; (8005c74 <HAL_TIM_Base_Start_IT+0xcc>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d013      	beq.n	8005c28 <HAL_TIM_Base_Start_IT+0x80>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d00e      	beq.n	8005c28 <HAL_TIM_Base_Start_IT+0x80>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a1b      	ldr	r2, [pc, #108]	; (8005c7c <HAL_TIM_Base_Start_IT+0xd4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d009      	beq.n	8005c28 <HAL_TIM_Base_Start_IT+0x80>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a19      	ldr	r2, [pc, #100]	; (8005c80 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d004      	beq.n	8005c28 <HAL_TIM_Base_Start_IT+0x80>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d111      	bne.n	8005c4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b06      	cmp	r3, #6
 8005c38:	d010      	beq.n	8005c5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0201 	orr.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4a:	e007      	b.n	8005c5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0201 	orr.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	40010000 	.word	0x40010000
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800
 8005c78:	40000c00 	.word	0x40000c00
 8005c7c:	40010400 	.word	0x40010400
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40001800 	.word	0x40001800

08005c88 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0201 	bic.w	r2, r2, #1
 8005c9e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6a1a      	ldr	r2, [r3, #32]
 8005ca6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005caa:	4013      	ands	r3, r2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10f      	bne.n	8005cd0 <HAL_TIM_Base_Stop_IT+0x48>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6a1a      	ldr	r2, [r3, #32]
 8005cb6:	f240 4344 	movw	r3, #1092	; 0x444
 8005cba:	4013      	ands	r3, r2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d107      	bne.n	8005cd0 <HAL_TIM_Base_Stop_IT+0x48>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
	...

08005ce8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e04c      	b.n	8005d94 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d111      	bne.n	8005d2a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f001 f876 	bl	8006e00 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d102      	bne.n	8005d22 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a1f      	ldr	r2, [pc, #124]	; (8005d9c <HAL_TIM_PWM_Init+0xb4>)
 8005d20:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	f000 fd4f 	bl	80067e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	08001cb1 	.word	0x08001cb1

08005da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d109      	bne.n	8005dc4 <HAL_TIM_PWM_Start+0x24>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	bf14      	ite	ne
 8005dbc:	2301      	movne	r3, #1
 8005dbe:	2300      	moveq	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	e022      	b.n	8005e0a <HAL_TIM_PWM_Start+0x6a>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d109      	bne.n	8005dde <HAL_TIM_PWM_Start+0x3e>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	bf14      	ite	ne
 8005dd6:	2301      	movne	r3, #1
 8005dd8:	2300      	moveq	r3, #0
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	e015      	b.n	8005e0a <HAL_TIM_PWM_Start+0x6a>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d109      	bne.n	8005df8 <HAL_TIM_PWM_Start+0x58>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	bf14      	ite	ne
 8005df0:	2301      	movne	r3, #1
 8005df2:	2300      	moveq	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	e008      	b.n	8005e0a <HAL_TIM_PWM_Start+0x6a>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	bf14      	ite	ne
 8005e04:	2301      	movne	r3, #1
 8005e06:	2300      	moveq	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e07c      	b.n	8005f0c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d104      	bne.n	8005e22 <HAL_TIM_PWM_Start+0x82>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e20:	e013      	b.n	8005e4a <HAL_TIM_PWM_Start+0xaa>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d104      	bne.n	8005e32 <HAL_TIM_PWM_Start+0x92>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e30:	e00b      	b.n	8005e4a <HAL_TIM_PWM_Start+0xaa>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d104      	bne.n	8005e42 <HAL_TIM_PWM_Start+0xa2>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e40:	e003      	b.n	8005e4a <HAL_TIM_PWM_Start+0xaa>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2202      	movs	r2, #2
 8005e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 ffae 	bl	8006db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a2d      	ldr	r2, [pc, #180]	; (8005f14 <HAL_TIM_PWM_Start+0x174>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d004      	beq.n	8005e6c <HAL_TIM_PWM_Start+0xcc>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a2c      	ldr	r2, [pc, #176]	; (8005f18 <HAL_TIM_PWM_Start+0x178>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d101      	bne.n	8005e70 <HAL_TIM_PWM_Start+0xd0>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <HAL_TIM_PWM_Start+0xd2>
 8005e70:	2300      	movs	r3, #0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a22      	ldr	r2, [pc, #136]	; (8005f14 <HAL_TIM_PWM_Start+0x174>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d022      	beq.n	8005ed6 <HAL_TIM_PWM_Start+0x136>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e98:	d01d      	beq.n	8005ed6 <HAL_TIM_PWM_Start+0x136>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1f      	ldr	r2, [pc, #124]	; (8005f1c <HAL_TIM_PWM_Start+0x17c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d018      	beq.n	8005ed6 <HAL_TIM_PWM_Start+0x136>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1d      	ldr	r2, [pc, #116]	; (8005f20 <HAL_TIM_PWM_Start+0x180>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <HAL_TIM_PWM_Start+0x136>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1c      	ldr	r2, [pc, #112]	; (8005f24 <HAL_TIM_PWM_Start+0x184>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00e      	beq.n	8005ed6 <HAL_TIM_PWM_Start+0x136>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a16      	ldr	r2, [pc, #88]	; (8005f18 <HAL_TIM_PWM_Start+0x178>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d009      	beq.n	8005ed6 <HAL_TIM_PWM_Start+0x136>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a18      	ldr	r2, [pc, #96]	; (8005f28 <HAL_TIM_PWM_Start+0x188>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d004      	beq.n	8005ed6 <HAL_TIM_PWM_Start+0x136>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a16      	ldr	r2, [pc, #88]	; (8005f2c <HAL_TIM_PWM_Start+0x18c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d111      	bne.n	8005efa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b06      	cmp	r3, #6
 8005ee6:	d010      	beq.n	8005f0a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef8:	e007      	b.n	8005f0a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f042 0201 	orr.w	r2, r2, #1
 8005f08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40010400 	.word	0x40010400
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40000800 	.word	0x40000800
 8005f24:	40000c00 	.word	0x40000c00
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40001800 	.word	0x40001800

08005f30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e0a2      	b.n	800608a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d111      	bne.n	8005f74 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 ff51 	bl	8006e00 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d102      	bne.n	8005f6c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a4a      	ldr	r2, [pc, #296]	; (8006094 <HAL_TIM_Encoder_Init+0x164>)
 8005f6a:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6812      	ldr	r2, [r2, #0]
 8005f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f8a:	f023 0307 	bic.w	r3, r3, #7
 8005f8e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3304      	adds	r3, #4
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	f000 fc20 	bl	80067e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc8:	f023 0303 	bic.w	r3, r3, #3
 8005fcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	021b      	lsls	r3, r3, #8
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005fe6:	f023 030c 	bic.w	r3, r3, #12
 8005fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ff2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	021b      	lsls	r3, r3, #8
 8006002:	4313      	orrs	r3, r2
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	011a      	lsls	r2, r3, #4
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	031b      	lsls	r3, r3, #12
 8006016:	4313      	orrs	r3, r2
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006024:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800602c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	4313      	orrs	r3, r2
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4313      	orrs	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3718      	adds	r7, #24
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	08001cf5 	.word	0x08001cf5

08006098 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d110      	bne.n	80060ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d102      	bne.n	80060d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80060ce:	7b7b      	ldrb	r3, [r7, #13]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d001      	beq.n	80060d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e069      	b.n	80061ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060e8:	e031      	b.n	800614e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d110      	bne.n	8006112 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060f0:	7bbb      	ldrb	r3, [r7, #14]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d102      	bne.n	80060fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060f6:	7b3b      	ldrb	r3, [r7, #12]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d001      	beq.n	8006100 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e055      	b.n	80061ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006110:	e01d      	b.n	800614e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d108      	bne.n	800612a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006118:	7bbb      	ldrb	r3, [r7, #14]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d105      	bne.n	800612a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800611e:	7b7b      	ldrb	r3, [r7, #13]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d102      	bne.n	800612a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006124:	7b3b      	ldrb	r3, [r7, #12]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d001      	beq.n	800612e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e03e      	b.n	80061ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2202      	movs	r2, #2
 8006132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2202      	movs	r2, #2
 8006142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2202      	movs	r2, #2
 800614a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_TIM_Encoder_Start+0xc4>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b04      	cmp	r3, #4
 8006158:	d008      	beq.n	800616c <HAL_TIM_Encoder_Start+0xd4>
 800615a:	e00f      	b.n	800617c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2201      	movs	r2, #1
 8006162:	2100      	movs	r1, #0
 8006164:	4618      	mov	r0, r3
 8006166:	f000 fe25 	bl	8006db4 <TIM_CCxChannelCmd>
      break;
 800616a:	e016      	b.n	800619a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2201      	movs	r2, #1
 8006172:	2104      	movs	r1, #4
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fe1d 	bl	8006db4 <TIM_CCxChannelCmd>
      break;
 800617a:	e00e      	b.n	800619a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2201      	movs	r2, #1
 8006182:	2100      	movs	r1, #0
 8006184:	4618      	mov	r0, r3
 8006186:	f000 fe15 	bl	8006db4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2201      	movs	r2, #1
 8006190:	2104      	movs	r1, #4
 8006192:	4618      	mov	r0, r3
 8006194:	f000 fe0e 	bl	8006db4 <TIM_CCxChannelCmd>
      break;
 8006198:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0201 	orr.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d128      	bne.n	800621c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d121      	bne.n	800621c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0202 	mvn.w	r2, #2
 80061e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d005      	beq.n	8006202 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	4798      	blx	r3
 8006200:	e009      	b.n	8006216 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b04      	cmp	r3, #4
 8006228:	d128      	bne.n	800627c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b04      	cmp	r3, #4
 8006236:	d121      	bne.n	800627c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f06f 0204 	mvn.w	r2, #4
 8006240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2202      	movs	r2, #2
 8006246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006252:	2b00      	cmp	r3, #0
 8006254:	d005      	beq.n	8006262 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	4798      	blx	r3
 8006260:	e009      	b.n	8006276 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b08      	cmp	r3, #8
 8006288:	d128      	bne.n	80062dc <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f003 0308 	and.w	r3, r3, #8
 8006294:	2b08      	cmp	r3, #8
 8006296:	d121      	bne.n	80062dc <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f06f 0208 	mvn.w	r2, #8
 80062a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2204      	movs	r2, #4
 80062a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d005      	beq.n	80062c2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	4798      	blx	r3
 80062c0:	e009      	b.n	80062d6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f003 0310 	and.w	r3, r3, #16
 80062e6:	2b10      	cmp	r3, #16
 80062e8:	d128      	bne.n	800633c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f003 0310 	and.w	r3, r3, #16
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d121      	bne.n	800633c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f06f 0210 	mvn.w	r2, #16
 8006300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2208      	movs	r2, #8
 8006306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006312:	2b00      	cmp	r3, #0
 8006314:	d005      	beq.n	8006322 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	4798      	blx	r3
 8006320:	e009      	b.n	8006336 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b01      	cmp	r3, #1
 8006348:	d110      	bne.n	800636c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b01      	cmp	r3, #1
 8006356:	d109      	bne.n	800636c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f06f 0201 	mvn.w	r2, #1
 8006360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006376:	2b80      	cmp	r3, #128	; 0x80
 8006378:	d110      	bne.n	800639c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006384:	2b80      	cmp	r3, #128	; 0x80
 8006386:	d109      	bne.n	800639c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a6:	2b40      	cmp	r3, #64	; 0x40
 80063a8:	d110      	bne.n	80063cc <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b4:	2b40      	cmp	r3, #64	; 0x40
 80063b6:	d109      	bne.n	80063cc <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b20      	cmp	r3, #32
 80063d8:	d110      	bne.n	80063fc <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d109      	bne.n	80063fc <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f06f 0220 	mvn.w	r2, #32
 80063f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063fc:	bf00      	nop
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800641a:	2b01      	cmp	r3, #1
 800641c:	d101      	bne.n	8006422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800641e:	2302      	movs	r3, #2
 8006420:	e0ae      	b.n	8006580 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b0c      	cmp	r3, #12
 800642e:	f200 809f 	bhi.w	8006570 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006432:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006438:	0800646d 	.word	0x0800646d
 800643c:	08006571 	.word	0x08006571
 8006440:	08006571 	.word	0x08006571
 8006444:	08006571 	.word	0x08006571
 8006448:	080064ad 	.word	0x080064ad
 800644c:	08006571 	.word	0x08006571
 8006450:	08006571 	.word	0x08006571
 8006454:	08006571 	.word	0x08006571
 8006458:	080064ef 	.word	0x080064ef
 800645c:	08006571 	.word	0x08006571
 8006460:	08006571 	.word	0x08006571
 8006464:	08006571 	.word	0x08006571
 8006468:	0800652f 	.word	0x0800652f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68b9      	ldr	r1, [r7, #8]
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fa54 	bl	8006920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699a      	ldr	r2, [r3, #24]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0208 	orr.w	r2, r2, #8
 8006486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0204 	bic.w	r2, r2, #4
 8006496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6999      	ldr	r1, [r3, #24]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	691a      	ldr	r2, [r3, #16]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	619a      	str	r2, [r3, #24]
      break;
 80064aa:	e064      	b.n	8006576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68b9      	ldr	r1, [r7, #8]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 faa4 	bl	8006a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6999      	ldr	r1, [r3, #24]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	021a      	lsls	r2, r3, #8
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	619a      	str	r2, [r3, #24]
      break;
 80064ec:	e043      	b.n	8006576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68b9      	ldr	r1, [r7, #8]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 faf9 	bl	8006aec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	69da      	ldr	r2, [r3, #28]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f042 0208 	orr.w	r2, r2, #8
 8006508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69da      	ldr	r2, [r3, #28]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0204 	bic.w	r2, r2, #4
 8006518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69d9      	ldr	r1, [r3, #28]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	691a      	ldr	r2, [r3, #16]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	61da      	str	r2, [r3, #28]
      break;
 800652c:	e023      	b.n	8006576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68b9      	ldr	r1, [r7, #8]
 8006534:	4618      	mov	r0, r3
 8006536:	f000 fb4d 	bl	8006bd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69da      	ldr	r2, [r3, #28]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69da      	ldr	r2, [r3, #28]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69d9      	ldr	r1, [r3, #28]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	021a      	lsls	r2, r3, #8
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	61da      	str	r2, [r3, #28]
      break;
 800656e:	e002      	b.n	8006576 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	75fb      	strb	r3, [r7, #23]
      break;
 8006574:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800657e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800659c:	2b01      	cmp	r3, #1
 800659e:	d101      	bne.n	80065a4 <HAL_TIM_ConfigClockSource+0x1c>
 80065a0:	2302      	movs	r3, #2
 80065a2:	e0b4      	b.n	800670e <HAL_TIM_ConfigClockSource+0x186>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065dc:	d03e      	beq.n	800665c <HAL_TIM_ConfigClockSource+0xd4>
 80065de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065e2:	f200 8087 	bhi.w	80066f4 <HAL_TIM_ConfigClockSource+0x16c>
 80065e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ea:	f000 8086 	beq.w	80066fa <HAL_TIM_ConfigClockSource+0x172>
 80065ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f2:	d87f      	bhi.n	80066f4 <HAL_TIM_ConfigClockSource+0x16c>
 80065f4:	2b70      	cmp	r3, #112	; 0x70
 80065f6:	d01a      	beq.n	800662e <HAL_TIM_ConfigClockSource+0xa6>
 80065f8:	2b70      	cmp	r3, #112	; 0x70
 80065fa:	d87b      	bhi.n	80066f4 <HAL_TIM_ConfigClockSource+0x16c>
 80065fc:	2b60      	cmp	r3, #96	; 0x60
 80065fe:	d050      	beq.n	80066a2 <HAL_TIM_ConfigClockSource+0x11a>
 8006600:	2b60      	cmp	r3, #96	; 0x60
 8006602:	d877      	bhi.n	80066f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006604:	2b50      	cmp	r3, #80	; 0x50
 8006606:	d03c      	beq.n	8006682 <HAL_TIM_ConfigClockSource+0xfa>
 8006608:	2b50      	cmp	r3, #80	; 0x50
 800660a:	d873      	bhi.n	80066f4 <HAL_TIM_ConfigClockSource+0x16c>
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	d058      	beq.n	80066c2 <HAL_TIM_ConfigClockSource+0x13a>
 8006610:	2b40      	cmp	r3, #64	; 0x40
 8006612:	d86f      	bhi.n	80066f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006614:	2b30      	cmp	r3, #48	; 0x30
 8006616:	d064      	beq.n	80066e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006618:	2b30      	cmp	r3, #48	; 0x30
 800661a:	d86b      	bhi.n	80066f4 <HAL_TIM_ConfigClockSource+0x16c>
 800661c:	2b20      	cmp	r3, #32
 800661e:	d060      	beq.n	80066e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006620:	2b20      	cmp	r3, #32
 8006622:	d867      	bhi.n	80066f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006624:	2b00      	cmp	r3, #0
 8006626:	d05c      	beq.n	80066e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006628:	2b10      	cmp	r3, #16
 800662a:	d05a      	beq.n	80066e2 <HAL_TIM_ConfigClockSource+0x15a>
 800662c:	e062      	b.n	80066f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	6899      	ldr	r1, [r3, #8]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f000 fb99 	bl	8006d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006650:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	609a      	str	r2, [r3, #8]
      break;
 800665a:	e04f      	b.n	80066fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6818      	ldr	r0, [r3, #0]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	6899      	ldr	r1, [r3, #8]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f000 fb82 	bl	8006d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800667e:	609a      	str	r2, [r3, #8]
      break;
 8006680:	e03c      	b.n	80066fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	6859      	ldr	r1, [r3, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	461a      	mov	r2, r3
 8006690:	f000 faf6 	bl	8006c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2150      	movs	r1, #80	; 0x50
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fb4f 	bl	8006d3e <TIM_ITRx_SetConfig>
      break;
 80066a0:	e02c      	b.n	80066fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6818      	ldr	r0, [r3, #0]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	6859      	ldr	r1, [r3, #4]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	461a      	mov	r2, r3
 80066b0:	f000 fb15 	bl	8006cde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2160      	movs	r1, #96	; 0x60
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 fb3f 	bl	8006d3e <TIM_ITRx_SetConfig>
      break;
 80066c0:	e01c      	b.n	80066fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	6859      	ldr	r1, [r3, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	461a      	mov	r2, r3
 80066d0:	f000 fad6 	bl	8006c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2140      	movs	r1, #64	; 0x40
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 fb2f 	bl	8006d3e <TIM_ITRx_SetConfig>
      break;
 80066e0:	e00c      	b.n	80066fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4619      	mov	r1, r3
 80066ec:	4610      	mov	r0, r2
 80066ee:	f000 fb26 	bl	8006d3e <TIM_ITRx_SetConfig>
      break;
 80066f2:	e003      	b.n	80066fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	73fb      	strb	r3, [r7, #15]
      break;
 80066f8:	e000      	b.n	80066fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
	...

080067e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a40      	ldr	r2, [pc, #256]	; (80068f4 <TIM_Base_SetConfig+0x114>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d013      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fe:	d00f      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a3d      	ldr	r2, [pc, #244]	; (80068f8 <TIM_Base_SetConfig+0x118>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00b      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a3c      	ldr	r2, [pc, #240]	; (80068fc <TIM_Base_SetConfig+0x11c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d007      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a3b      	ldr	r2, [pc, #236]	; (8006900 <TIM_Base_SetConfig+0x120>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a3a      	ldr	r2, [pc, #232]	; (8006904 <TIM_Base_SetConfig+0x124>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d108      	bne.n	8006832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a2f      	ldr	r2, [pc, #188]	; (80068f4 <TIM_Base_SetConfig+0x114>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d02b      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006840:	d027      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a2c      	ldr	r2, [pc, #176]	; (80068f8 <TIM_Base_SetConfig+0x118>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d023      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a2b      	ldr	r2, [pc, #172]	; (80068fc <TIM_Base_SetConfig+0x11c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d01f      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a2a      	ldr	r2, [pc, #168]	; (8006900 <TIM_Base_SetConfig+0x120>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d01b      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a29      	ldr	r2, [pc, #164]	; (8006904 <TIM_Base_SetConfig+0x124>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d017      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a28      	ldr	r2, [pc, #160]	; (8006908 <TIM_Base_SetConfig+0x128>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d013      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a27      	ldr	r2, [pc, #156]	; (800690c <TIM_Base_SetConfig+0x12c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00f      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a26      	ldr	r2, [pc, #152]	; (8006910 <TIM_Base_SetConfig+0x130>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d00b      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a25      	ldr	r2, [pc, #148]	; (8006914 <TIM_Base_SetConfig+0x134>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d007      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a24      	ldr	r2, [pc, #144]	; (8006918 <TIM_Base_SetConfig+0x138>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d003      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a23      	ldr	r2, [pc, #140]	; (800691c <TIM_Base_SetConfig+0x13c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d108      	bne.n	80068a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a0a      	ldr	r2, [pc, #40]	; (80068f4 <TIM_Base_SetConfig+0x114>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_Base_SetConfig+0xf8>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a0c      	ldr	r2, [pc, #48]	; (8006904 <TIM_Base_SetConfig+0x124>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d103      	bne.n	80068e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	615a      	str	r2, [r3, #20]
}
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40010000 	.word	0x40010000
 80068f8:	40000400 	.word	0x40000400
 80068fc:	40000800 	.word	0x40000800
 8006900:	40000c00 	.word	0x40000c00
 8006904:	40010400 	.word	0x40010400
 8006908:	40014000 	.word	0x40014000
 800690c:	40014400 	.word	0x40014400
 8006910:	40014800 	.word	0x40014800
 8006914:	40001800 	.word	0x40001800
 8006918:	40001c00 	.word	0x40001c00
 800691c:	40002000 	.word	0x40002000

08006920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	f023 0201 	bic.w	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0303 	bic.w	r3, r3, #3
 8006956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f023 0302 	bic.w	r3, r3, #2
 8006968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a20      	ldr	r2, [pc, #128]	; (80069f8 <TIM_OC1_SetConfig+0xd8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_OC1_SetConfig+0x64>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a1f      	ldr	r2, [pc, #124]	; (80069fc <TIM_OC1_SetConfig+0xdc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d10c      	bne.n	800699e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f023 0308 	bic.w	r3, r3, #8
 800698a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f023 0304 	bic.w	r3, r3, #4
 800699c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a15      	ldr	r2, [pc, #84]	; (80069f8 <TIM_OC1_SetConfig+0xd8>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d003      	beq.n	80069ae <TIM_OC1_SetConfig+0x8e>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a14      	ldr	r2, [pc, #80]	; (80069fc <TIM_OC1_SetConfig+0xdc>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d111      	bne.n	80069d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	621a      	str	r2, [r3, #32]
}
 80069ec:	bf00      	nop
 80069ee:	371c      	adds	r7, #28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	40010000 	.word	0x40010000
 80069fc:	40010400 	.word	0x40010400

08006a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f023 0210 	bic.w	r2, r3, #16
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f023 0320 	bic.w	r3, r3, #32
 8006a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a22      	ldr	r2, [pc, #136]	; (8006ae4 <TIM_OC2_SetConfig+0xe4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <TIM_OC2_SetConfig+0x68>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a21      	ldr	r2, [pc, #132]	; (8006ae8 <TIM_OC2_SetConfig+0xe8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d10d      	bne.n	8006a84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	011b      	lsls	r3, r3, #4
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a17      	ldr	r2, [pc, #92]	; (8006ae4 <TIM_OC2_SetConfig+0xe4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <TIM_OC2_SetConfig+0x94>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a16      	ldr	r2, [pc, #88]	; (8006ae8 <TIM_OC2_SetConfig+0xe8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d113      	bne.n	8006abc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	621a      	str	r2, [r3, #32]
}
 8006ad6:	bf00      	nop
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40010400 	.word	0x40010400

08006aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0303 	bic.w	r3, r3, #3
 8006b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	021b      	lsls	r3, r3, #8
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a21      	ldr	r2, [pc, #132]	; (8006bcc <TIM_OC3_SetConfig+0xe0>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d003      	beq.n	8006b52 <TIM_OC3_SetConfig+0x66>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a20      	ldr	r2, [pc, #128]	; (8006bd0 <TIM_OC3_SetConfig+0xe4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d10d      	bne.n	8006b6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a16      	ldr	r2, [pc, #88]	; (8006bcc <TIM_OC3_SetConfig+0xe0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d003      	beq.n	8006b7e <TIM_OC3_SetConfig+0x92>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a15      	ldr	r2, [pc, #84]	; (8006bd0 <TIM_OC3_SetConfig+0xe4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d113      	bne.n	8006ba6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	621a      	str	r2, [r3, #32]
}
 8006bc0:	bf00      	nop
 8006bc2:	371c      	adds	r7, #28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	40010000 	.word	0x40010000
 8006bd0:	40010400 	.word	0x40010400

08006bd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	021b      	lsls	r3, r3, #8
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	031b      	lsls	r3, r3, #12
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a12      	ldr	r2, [pc, #72]	; (8006c78 <TIM_OC4_SetConfig+0xa4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d003      	beq.n	8006c3c <TIM_OC4_SetConfig+0x68>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a11      	ldr	r2, [pc, #68]	; (8006c7c <TIM_OC4_SetConfig+0xa8>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d109      	bne.n	8006c50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	019b      	lsls	r3, r3, #6
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40010000 	.word	0x40010000
 8006c7c:	40010400 	.word	0x40010400

08006c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f023 0201 	bic.w	r2, r3, #1
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f023 030a 	bic.w	r3, r3, #10
 8006cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b087      	sub	sp, #28
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	f023 0210 	bic.w	r2, r3, #16
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	031b      	lsls	r3, r3, #12
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	011b      	lsls	r3, r3, #4
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	621a      	str	r2, [r3, #32]
}
 8006d32:	bf00      	nop
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b085      	sub	sp, #20
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f043 0307 	orr.w	r3, r3, #7
 8006d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	609a      	str	r2, [r3, #8]
}
 8006d68:	bf00      	nop
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
 8006d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	021a      	lsls	r2, r3, #8
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	609a      	str	r2, [r3, #8]
}
 8006da8:	bf00      	nop
 8006daa:	371c      	adds	r7, #28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f003 031f 	and.w	r3, r3, #31
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a1a      	ldr	r2, [r3, #32]
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	401a      	ands	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6a1a      	ldr	r2, [r3, #32]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f003 031f 	and.w	r3, r3, #31
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dec:	431a      	orrs	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	621a      	str	r2, [r3, #32]
}
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
	...

08006e00 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a1c      	ldr	r2, [pc, #112]	; (8006e7c <TIM_ResetCallback+0x7c>)
 8006e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a1b      	ldr	r2, [pc, #108]	; (8006e80 <TIM_ResetCallback+0x80>)
 8006e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a1a      	ldr	r2, [pc, #104]	; (8006e84 <TIM_ResetCallback+0x84>)
 8006e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a19      	ldr	r2, [pc, #100]	; (8006e88 <TIM_ResetCallback+0x88>)
 8006e24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a18      	ldr	r2, [pc, #96]	; (8006e8c <TIM_ResetCallback+0x8c>)
 8006e2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a17      	ldr	r2, [pc, #92]	; (8006e90 <TIM_ResetCallback+0x90>)
 8006e34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a16      	ldr	r2, [pc, #88]	; (8006e94 <TIM_ResetCallback+0x94>)
 8006e3c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a15      	ldr	r2, [pc, #84]	; (8006e98 <TIM_ResetCallback+0x98>)
 8006e44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a14      	ldr	r2, [pc, #80]	; (8006e9c <TIM_ResetCallback+0x9c>)
 8006e4c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a13      	ldr	r2, [pc, #76]	; (8006ea0 <TIM_ResetCallback+0xa0>)
 8006e54:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a12      	ldr	r2, [pc, #72]	; (8006ea4 <TIM_ResetCallback+0xa4>)
 8006e5c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a11      	ldr	r2, [pc, #68]	; (8006ea8 <TIM_ResetCallback+0xa8>)
 8006e64:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a10      	ldr	r2, [pc, #64]	; (8006eac <TIM_ResetCallback+0xac>)
 8006e6c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	08006717 	.word	0x08006717
 8006e80:	0800672b 	.word	0x0800672b
 8006e84:	080067a3 	.word	0x080067a3
 8006e88:	080067b7 	.word	0x080067b7
 8006e8c:	08006753 	.word	0x08006753
 8006e90:	08006767 	.word	0x08006767
 8006e94:	0800673f 	.word	0x0800673f
 8006e98:	0800677b 	.word	0x0800677b
 8006e9c:	0800678f 	.word	0x0800678f
 8006ea0:	080067cb 	.word	0x080067cb
 8006ea4:	0800704d 	.word	0x0800704d
 8006ea8:	08007061 	.word	0x08007061
 8006eac:	08007075 	.word	0x08007075

08006eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d101      	bne.n	8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e05a      	b.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a21      	ldr	r2, [pc, #132]	; (8006f8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d022      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f14:	d01d      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1d      	ldr	r2, [pc, #116]	; (8006f90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d018      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a1b      	ldr	r2, [pc, #108]	; (8006f94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d013      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a1a      	ldr	r2, [pc, #104]	; (8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d00e      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a18      	ldr	r2, [pc, #96]	; (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d009      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a17      	ldr	r2, [pc, #92]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d004      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a15      	ldr	r2, [pc, #84]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d10c      	bne.n	8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40010000 	.word	0x40010000
 8006f90:	40000400 	.word	0x40000400
 8006f94:	40000800 	.word	0x40000800
 8006f98:	40000c00 	.word	0x40000c00
 8006f9c:	40010400 	.word	0x40010400
 8006fa0:	40014000 	.word	0x40014000
 8006fa4:	40001800 	.word	0x40001800

08006fa8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d101      	bne.n	8006fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e03d      	b.n	8007040 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	4313      	orrs	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e04a      	b.n	8007130 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d111      	bne.n	80070ca <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f9d4 	bl	800745c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d102      	bne.n	80070c2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a1e      	ldr	r2, [pc, #120]	; (8007138 <HAL_UART_Init+0xb0>)
 80070c0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2224      	movs	r2, #36	; 0x24
 80070ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fa60 	bl	80075a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	691a      	ldr	r2, [r3, #16]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	695a      	ldr	r2, [r3, #20]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007106:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007116:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2220      	movs	r2, #32
 8007122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2220      	movs	r2, #32
 800712a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	08001eb1 	.word	0x08001eb1

0800713c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b08a      	sub	sp, #40	; 0x28
 8007140:	af02      	add	r7, sp, #8
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	603b      	str	r3, [r7, #0]
 8007148:	4613      	mov	r3, r2
 800714a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b20      	cmp	r3, #32
 800715a:	d17c      	bne.n	8007256 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <HAL_UART_Transmit+0x2c>
 8007162:	88fb      	ldrh	r3, [r7, #6]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e075      	b.n	8007258 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007172:	2b01      	cmp	r3, #1
 8007174:	d101      	bne.n	800717a <HAL_UART_Transmit+0x3e>
 8007176:	2302      	movs	r3, #2
 8007178:	e06e      	b.n	8007258 <HAL_UART_Transmit+0x11c>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2221      	movs	r2, #33	; 0x21
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007190:	f7fd fc22 	bl	80049d8 <HAL_GetTick>
 8007194:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	88fa      	ldrh	r2, [r7, #6]
 800719a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	88fa      	ldrh	r2, [r7, #6]
 80071a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071aa:	d108      	bne.n	80071be <HAL_UART_Transmit+0x82>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d104      	bne.n	80071be <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80071b4:	2300      	movs	r3, #0
 80071b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	61bb      	str	r3, [r7, #24]
 80071bc:	e003      	b.n	80071c6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80071ce:	e02a      	b.n	8007226 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	2200      	movs	r2, #0
 80071d8:	2180      	movs	r1, #128	; 0x80
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f976 	bl	80074cc <UART_WaitOnFlagUntilTimeout>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e036      	b.n	8007258 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10b      	bne.n	8007208 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	461a      	mov	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071fe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	3302      	adds	r3, #2
 8007204:	61bb      	str	r3, [r7, #24]
 8007206:	e007      	b.n	8007218 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	781a      	ldrb	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	3301      	adds	r3, #1
 8007216:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800721c:	b29b      	uxth	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	b29a      	uxth	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800722a:	b29b      	uxth	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1cf      	bne.n	80071d0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2200      	movs	r2, #0
 8007238:	2140      	movs	r1, #64	; 0x40
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 f946 	bl	80074cc <UART_WaitOnFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e006      	b.n	8007258 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2220      	movs	r2, #32
 800724e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	e000      	b.n	8007258 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007256:	2302      	movs	r3, #2
  }
}
 8007258:	4618      	mov	r0, r3
 800725a:	3720      	adds	r7, #32
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b08a      	sub	sp, #40	; 0x28
 8007264:	af02      	add	r7, sp, #8
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	603b      	str	r3, [r7, #0]
 800726c:	4613      	mov	r3, r2
 800726e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b20      	cmp	r3, #32
 800727e:	f040 808c 	bne.w	800739a <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <HAL_UART_Receive+0x2e>
 8007288:	88fb      	ldrh	r3, [r7, #6]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e084      	b.n	800739c <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007298:	2b01      	cmp	r3, #1
 800729a:	d101      	bne.n	80072a0 <HAL_UART_Receive+0x40>
 800729c:	2302      	movs	r3, #2
 800729e:	e07d      	b.n	800739c <HAL_UART_Receive+0x13c>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2222      	movs	r2, #34	; 0x22
 80072b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072bc:	f7fd fb8c 	bl	80049d8 <HAL_GetTick>
 80072c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	88fa      	ldrh	r2, [r7, #6]
 80072c6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	88fa      	ldrh	r2, [r7, #6]
 80072cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d6:	d108      	bne.n	80072ea <HAL_UART_Receive+0x8a>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d104      	bne.n	80072ea <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	61bb      	str	r3, [r7, #24]
 80072e8:	e003      	b.n	80072f2 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80072fa:	e043      	b.n	8007384 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2200      	movs	r2, #0
 8007304:	2120      	movs	r1, #32
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 f8e0 	bl	80074cc <UART_WaitOnFlagUntilTimeout>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e042      	b.n	800739c <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10c      	bne.n	8007336 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	b29b      	uxth	r3, r3
 8007324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007328:	b29a      	uxth	r2, r3
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	3302      	adds	r3, #2
 8007332:	61bb      	str	r3, [r7, #24]
 8007334:	e01f      	b.n	8007376 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733e:	d007      	beq.n	8007350 <HAL_UART_Receive+0xf0>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10a      	bne.n	800735e <HAL_UART_Receive+0xfe>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d106      	bne.n	800735e <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	b2da      	uxtb	r2, r3
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	701a      	strb	r2, [r3, #0]
 800735c:	e008      	b.n	8007370 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	b2db      	uxtb	r3, r3
 8007366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800736a:	b2da      	uxtb	r2, r3
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	3301      	adds	r3, #1
 8007374:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1b6      	bne.n	80072fc <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2220      	movs	r2, #32
 8007392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	e000      	b.n	800739c <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800739a:	2302      	movs	r3, #2
  }
}
 800739c:	4618      	mov	r0, r3
 800739e:	3720      	adds	r7, #32
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a10      	ldr	r2, [pc, #64]	; (80074a8 <UART_InitCallbacksToDefault+0x4c>)
 8007468:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a0f      	ldr	r2, [pc, #60]	; (80074ac <UART_InitCallbacksToDefault+0x50>)
 800746e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a0f      	ldr	r2, [pc, #60]	; (80074b0 <UART_InitCallbacksToDefault+0x54>)
 8007474:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a0e      	ldr	r2, [pc, #56]	; (80074b4 <UART_InitCallbacksToDefault+0x58>)
 800747a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a0e      	ldr	r2, [pc, #56]	; (80074b8 <UART_InitCallbacksToDefault+0x5c>)
 8007480:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a0d      	ldr	r2, [pc, #52]	; (80074bc <UART_InitCallbacksToDefault+0x60>)
 8007486:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a0d      	ldr	r2, [pc, #52]	; (80074c0 <UART_InitCallbacksToDefault+0x64>)
 800748c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a0c      	ldr	r2, [pc, #48]	; (80074c4 <UART_InitCallbacksToDefault+0x68>)
 8007492:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a0c      	ldr	r2, [pc, #48]	; (80074c8 <UART_InitCallbacksToDefault+0x6c>)
 8007498:	669a      	str	r2, [r3, #104]	; 0x68

}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	080073b9 	.word	0x080073b9
 80074ac:	080073a5 	.word	0x080073a5
 80074b0:	080073e1 	.word	0x080073e1
 80074b4:	080073cd 	.word	0x080073cd
 80074b8:	080073f5 	.word	0x080073f5
 80074bc:	08007409 	.word	0x08007409
 80074c0:	0800741d 	.word	0x0800741d
 80074c4:	08007431 	.word	0x08007431
 80074c8:	08007445 	.word	0x08007445

080074cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b090      	sub	sp, #64	; 0x40
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	603b      	str	r3, [r7, #0]
 80074d8:	4613      	mov	r3, r2
 80074da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074dc:	e050      	b.n	8007580 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074e4:	d04c      	beq.n	8007580 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80074e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d007      	beq.n	80074fc <UART_WaitOnFlagUntilTimeout+0x30>
 80074ec:	f7fd fa74 	bl	80049d8 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d241      	bcs.n	8007580 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	330c      	adds	r3, #12
 8007502:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	330c      	adds	r3, #12
 800751a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800751c:	637a      	str	r2, [r7, #52]	; 0x34
 800751e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e5      	bne.n	80074fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3314      	adds	r3, #20
 8007536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	e853 3f00 	ldrex	r3, [r3]
 800753e:	613b      	str	r3, [r7, #16]
   return(result);
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f023 0301 	bic.w	r3, r3, #1
 8007546:	63bb      	str	r3, [r7, #56]	; 0x38
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3314      	adds	r3, #20
 800754e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007550:	623a      	str	r2, [r7, #32]
 8007552:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007554:	69f9      	ldr	r1, [r7, #28]
 8007556:	6a3a      	ldr	r2, [r7, #32]
 8007558:	e841 2300 	strex	r3, r2, [r1]
 800755c:	61bb      	str	r3, [r7, #24]
   return(result);
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e5      	bne.n	8007530 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2220      	movs	r2, #32
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2220      	movs	r2, #32
 8007570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e00f      	b.n	80075a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	4013      	ands	r3, r2
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	429a      	cmp	r2, r3
 800758e:	bf0c      	ite	eq
 8007590:	2301      	moveq	r3, #1
 8007592:	2300      	movne	r3, #0
 8007594:	b2db      	uxtb	r3, r3
 8007596:	461a      	mov	r2, r3
 8007598:	79fb      	ldrb	r3, [r7, #7]
 800759a:	429a      	cmp	r2, r3
 800759c:	d09f      	beq.n	80074de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3740      	adds	r7, #64	; 0x40
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	b09f      	sub	sp, #124	; 0x7c
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80075bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075be:	68d9      	ldr	r1, [r3, #12]
 80075c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	ea40 0301 	orr.w	r3, r0, r1
 80075c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075cc:	689a      	ldr	r2, [r3, #8]
 80075ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	431a      	orrs	r2, r3
 80075d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	431a      	orrs	r2, r3
 80075da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	4313      	orrs	r3, r2
 80075e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80075e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80075ec:	f021 010c 	bic.w	r1, r1, #12
 80075f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075f6:	430b      	orrs	r3, r1
 80075f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007606:	6999      	ldr	r1, [r3, #24]
 8007608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	ea40 0301 	orr.w	r3, r0, r1
 8007610:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	4bc5      	ldr	r3, [pc, #788]	; (800792c <UART_SetConfig+0x384>)
 8007618:	429a      	cmp	r2, r3
 800761a:	d004      	beq.n	8007626 <UART_SetConfig+0x7e>
 800761c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	4bc3      	ldr	r3, [pc, #780]	; (8007930 <UART_SetConfig+0x388>)
 8007622:	429a      	cmp	r2, r3
 8007624:	d103      	bne.n	800762e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007626:	f7fd fdff 	bl	8005228 <HAL_RCC_GetPCLK2Freq>
 800762a:	6778      	str	r0, [r7, #116]	; 0x74
 800762c:	e002      	b.n	8007634 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800762e:	f7fd fde7 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 8007632:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800763c:	f040 80b6 	bne.w	80077ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007642:	461c      	mov	r4, r3
 8007644:	f04f 0500 	mov.w	r5, #0
 8007648:	4622      	mov	r2, r4
 800764a:	462b      	mov	r3, r5
 800764c:	1891      	adds	r1, r2, r2
 800764e:	6439      	str	r1, [r7, #64]	; 0x40
 8007650:	415b      	adcs	r3, r3
 8007652:	647b      	str	r3, [r7, #68]	; 0x44
 8007654:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007658:	1912      	adds	r2, r2, r4
 800765a:	eb45 0303 	adc.w	r3, r5, r3
 800765e:	f04f 0000 	mov.w	r0, #0
 8007662:	f04f 0100 	mov.w	r1, #0
 8007666:	00d9      	lsls	r1, r3, #3
 8007668:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800766c:	00d0      	lsls	r0, r2, #3
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	1911      	adds	r1, r2, r4
 8007674:	6639      	str	r1, [r7, #96]	; 0x60
 8007676:	416b      	adcs	r3, r5
 8007678:	667b      	str	r3, [r7, #100]	; 0x64
 800767a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	461a      	mov	r2, r3
 8007680:	f04f 0300 	mov.w	r3, #0
 8007684:	1891      	adds	r1, r2, r2
 8007686:	63b9      	str	r1, [r7, #56]	; 0x38
 8007688:	415b      	adcs	r3, r3
 800768a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800768c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007690:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007694:	f7f9 fb18 	bl	8000cc8 <__aeabi_uldivmod>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	4ba5      	ldr	r3, [pc, #660]	; (8007934 <UART_SetConfig+0x38c>)
 800769e:	fba3 2302 	umull	r2, r3, r3, r2
 80076a2:	095b      	lsrs	r3, r3, #5
 80076a4:	011e      	lsls	r6, r3, #4
 80076a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076a8:	461c      	mov	r4, r3
 80076aa:	f04f 0500 	mov.w	r5, #0
 80076ae:	4622      	mov	r2, r4
 80076b0:	462b      	mov	r3, r5
 80076b2:	1891      	adds	r1, r2, r2
 80076b4:	6339      	str	r1, [r7, #48]	; 0x30
 80076b6:	415b      	adcs	r3, r3
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
 80076ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80076be:	1912      	adds	r2, r2, r4
 80076c0:	eb45 0303 	adc.w	r3, r5, r3
 80076c4:	f04f 0000 	mov.w	r0, #0
 80076c8:	f04f 0100 	mov.w	r1, #0
 80076cc:	00d9      	lsls	r1, r3, #3
 80076ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076d2:	00d0      	lsls	r0, r2, #3
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	1911      	adds	r1, r2, r4
 80076da:	65b9      	str	r1, [r7, #88]	; 0x58
 80076dc:	416b      	adcs	r3, r5
 80076de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	461a      	mov	r2, r3
 80076e6:	f04f 0300 	mov.w	r3, #0
 80076ea:	1891      	adds	r1, r2, r2
 80076ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80076ee:	415b      	adcs	r3, r3
 80076f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80076fa:	f7f9 fae5 	bl	8000cc8 <__aeabi_uldivmod>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	4b8c      	ldr	r3, [pc, #560]	; (8007934 <UART_SetConfig+0x38c>)
 8007704:	fba3 1302 	umull	r1, r3, r3, r2
 8007708:	095b      	lsrs	r3, r3, #5
 800770a:	2164      	movs	r1, #100	; 0x64
 800770c:	fb01 f303 	mul.w	r3, r1, r3
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	3332      	adds	r3, #50	; 0x32
 8007716:	4a87      	ldr	r2, [pc, #540]	; (8007934 <UART_SetConfig+0x38c>)
 8007718:	fba2 2303 	umull	r2, r3, r2, r3
 800771c:	095b      	lsrs	r3, r3, #5
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007724:	441e      	add	r6, r3
 8007726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007728:	4618      	mov	r0, r3
 800772a:	f04f 0100 	mov.w	r1, #0
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	1894      	adds	r4, r2, r2
 8007734:	623c      	str	r4, [r7, #32]
 8007736:	415b      	adcs	r3, r3
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
 800773a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800773e:	1812      	adds	r2, r2, r0
 8007740:	eb41 0303 	adc.w	r3, r1, r3
 8007744:	f04f 0400 	mov.w	r4, #0
 8007748:	f04f 0500 	mov.w	r5, #0
 800774c:	00dd      	lsls	r5, r3, #3
 800774e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007752:	00d4      	lsls	r4, r2, #3
 8007754:	4622      	mov	r2, r4
 8007756:	462b      	mov	r3, r5
 8007758:	1814      	adds	r4, r2, r0
 800775a:	653c      	str	r4, [r7, #80]	; 0x50
 800775c:	414b      	adcs	r3, r1
 800775e:	657b      	str	r3, [r7, #84]	; 0x54
 8007760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	461a      	mov	r2, r3
 8007766:	f04f 0300 	mov.w	r3, #0
 800776a:	1891      	adds	r1, r2, r2
 800776c:	61b9      	str	r1, [r7, #24]
 800776e:	415b      	adcs	r3, r3
 8007770:	61fb      	str	r3, [r7, #28]
 8007772:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007776:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800777a:	f7f9 faa5 	bl	8000cc8 <__aeabi_uldivmod>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	4b6c      	ldr	r3, [pc, #432]	; (8007934 <UART_SetConfig+0x38c>)
 8007784:	fba3 1302 	umull	r1, r3, r3, r2
 8007788:	095b      	lsrs	r3, r3, #5
 800778a:	2164      	movs	r1, #100	; 0x64
 800778c:	fb01 f303 	mul.w	r3, r1, r3
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	00db      	lsls	r3, r3, #3
 8007794:	3332      	adds	r3, #50	; 0x32
 8007796:	4a67      	ldr	r2, [pc, #412]	; (8007934 <UART_SetConfig+0x38c>)
 8007798:	fba2 2303 	umull	r2, r3, r2, r3
 800779c:	095b      	lsrs	r3, r3, #5
 800779e:	f003 0207 	and.w	r2, r3, #7
 80077a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4432      	add	r2, r6
 80077a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077aa:	e0b9      	b.n	8007920 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077ae:	461c      	mov	r4, r3
 80077b0:	f04f 0500 	mov.w	r5, #0
 80077b4:	4622      	mov	r2, r4
 80077b6:	462b      	mov	r3, r5
 80077b8:	1891      	adds	r1, r2, r2
 80077ba:	6139      	str	r1, [r7, #16]
 80077bc:	415b      	adcs	r3, r3
 80077be:	617b      	str	r3, [r7, #20]
 80077c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80077c4:	1912      	adds	r2, r2, r4
 80077c6:	eb45 0303 	adc.w	r3, r5, r3
 80077ca:	f04f 0000 	mov.w	r0, #0
 80077ce:	f04f 0100 	mov.w	r1, #0
 80077d2:	00d9      	lsls	r1, r3, #3
 80077d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077d8:	00d0      	lsls	r0, r2, #3
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	eb12 0804 	adds.w	r8, r2, r4
 80077e2:	eb43 0905 	adc.w	r9, r3, r5
 80077e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f04f 0100 	mov.w	r1, #0
 80077f0:	f04f 0200 	mov.w	r2, #0
 80077f4:	f04f 0300 	mov.w	r3, #0
 80077f8:	008b      	lsls	r3, r1, #2
 80077fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077fe:	0082      	lsls	r2, r0, #2
 8007800:	4640      	mov	r0, r8
 8007802:	4649      	mov	r1, r9
 8007804:	f7f9 fa60 	bl	8000cc8 <__aeabi_uldivmod>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	4b49      	ldr	r3, [pc, #292]	; (8007934 <UART_SetConfig+0x38c>)
 800780e:	fba3 2302 	umull	r2, r3, r3, r2
 8007812:	095b      	lsrs	r3, r3, #5
 8007814:	011e      	lsls	r6, r3, #4
 8007816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007818:	4618      	mov	r0, r3
 800781a:	f04f 0100 	mov.w	r1, #0
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	1894      	adds	r4, r2, r2
 8007824:	60bc      	str	r4, [r7, #8]
 8007826:	415b      	adcs	r3, r3
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800782e:	1812      	adds	r2, r2, r0
 8007830:	eb41 0303 	adc.w	r3, r1, r3
 8007834:	f04f 0400 	mov.w	r4, #0
 8007838:	f04f 0500 	mov.w	r5, #0
 800783c:	00dd      	lsls	r5, r3, #3
 800783e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007842:	00d4      	lsls	r4, r2, #3
 8007844:	4622      	mov	r2, r4
 8007846:	462b      	mov	r3, r5
 8007848:	1814      	adds	r4, r2, r0
 800784a:	64bc      	str	r4, [r7, #72]	; 0x48
 800784c:	414b      	adcs	r3, r1
 800784e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	4618      	mov	r0, r3
 8007856:	f04f 0100 	mov.w	r1, #0
 800785a:	f04f 0200 	mov.w	r2, #0
 800785e:	f04f 0300 	mov.w	r3, #0
 8007862:	008b      	lsls	r3, r1, #2
 8007864:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007868:	0082      	lsls	r2, r0, #2
 800786a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800786e:	f7f9 fa2b 	bl	8000cc8 <__aeabi_uldivmod>
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <UART_SetConfig+0x38c>)
 8007878:	fba3 1302 	umull	r1, r3, r3, r2
 800787c:	095b      	lsrs	r3, r3, #5
 800787e:	2164      	movs	r1, #100	; 0x64
 8007880:	fb01 f303 	mul.w	r3, r1, r3
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	3332      	adds	r3, #50	; 0x32
 800788a:	4a2a      	ldr	r2, [pc, #168]	; (8007934 <UART_SetConfig+0x38c>)
 800788c:	fba2 2303 	umull	r2, r3, r2, r3
 8007890:	095b      	lsrs	r3, r3, #5
 8007892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007896:	441e      	add	r6, r3
 8007898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800789a:	4618      	mov	r0, r3
 800789c:	f04f 0100 	mov.w	r1, #0
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	1894      	adds	r4, r2, r2
 80078a6:	603c      	str	r4, [r7, #0]
 80078a8:	415b      	adcs	r3, r3
 80078aa:	607b      	str	r3, [r7, #4]
 80078ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078b0:	1812      	adds	r2, r2, r0
 80078b2:	eb41 0303 	adc.w	r3, r1, r3
 80078b6:	f04f 0400 	mov.w	r4, #0
 80078ba:	f04f 0500 	mov.w	r5, #0
 80078be:	00dd      	lsls	r5, r3, #3
 80078c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80078c4:	00d4      	lsls	r4, r2, #3
 80078c6:	4622      	mov	r2, r4
 80078c8:	462b      	mov	r3, r5
 80078ca:	eb12 0a00 	adds.w	sl, r2, r0
 80078ce:	eb43 0b01 	adc.w	fp, r3, r1
 80078d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f04f 0100 	mov.w	r1, #0
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	f04f 0300 	mov.w	r3, #0
 80078e4:	008b      	lsls	r3, r1, #2
 80078e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80078ea:	0082      	lsls	r2, r0, #2
 80078ec:	4650      	mov	r0, sl
 80078ee:	4659      	mov	r1, fp
 80078f0:	f7f9 f9ea 	bl	8000cc8 <__aeabi_uldivmod>
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	4b0e      	ldr	r3, [pc, #56]	; (8007934 <UART_SetConfig+0x38c>)
 80078fa:	fba3 1302 	umull	r1, r3, r3, r2
 80078fe:	095b      	lsrs	r3, r3, #5
 8007900:	2164      	movs	r1, #100	; 0x64
 8007902:	fb01 f303 	mul.w	r3, r1, r3
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	011b      	lsls	r3, r3, #4
 800790a:	3332      	adds	r3, #50	; 0x32
 800790c:	4a09      	ldr	r2, [pc, #36]	; (8007934 <UART_SetConfig+0x38c>)
 800790e:	fba2 2303 	umull	r2, r3, r2, r3
 8007912:	095b      	lsrs	r3, r3, #5
 8007914:	f003 020f 	and.w	r2, r3, #15
 8007918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4432      	add	r2, r6
 800791e:	609a      	str	r2, [r3, #8]
}
 8007920:	bf00      	nop
 8007922:	377c      	adds	r7, #124	; 0x7c
 8007924:	46bd      	mov	sp, r7
 8007926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792a:	bf00      	nop
 800792c:	40011000 	.word	0x40011000
 8007930:	40011400 	.word	0x40011400
 8007934:	51eb851f 	.word	0x51eb851f

08007938 <calloc>:
 8007938:	4b02      	ldr	r3, [pc, #8]	; (8007944 <calloc+0xc>)
 800793a:	460a      	mov	r2, r1
 800793c:	4601      	mov	r1, r0
 800793e:	6818      	ldr	r0, [r3, #0]
 8007940:	f000 b84a 	b.w	80079d8 <_calloc_r>
 8007944:	2000000c 	.word	0x2000000c

08007948 <__errno>:
 8007948:	4b01      	ldr	r3, [pc, #4]	; (8007950 <__errno+0x8>)
 800794a:	6818      	ldr	r0, [r3, #0]
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	2000000c 	.word	0x2000000c

08007954 <__libc_init_array>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	4d0d      	ldr	r5, [pc, #52]	; (800798c <__libc_init_array+0x38>)
 8007958:	4c0d      	ldr	r4, [pc, #52]	; (8007990 <__libc_init_array+0x3c>)
 800795a:	1b64      	subs	r4, r4, r5
 800795c:	10a4      	asrs	r4, r4, #2
 800795e:	2600      	movs	r6, #0
 8007960:	42a6      	cmp	r6, r4
 8007962:	d109      	bne.n	8007978 <__libc_init_array+0x24>
 8007964:	4d0b      	ldr	r5, [pc, #44]	; (8007994 <__libc_init_array+0x40>)
 8007966:	4c0c      	ldr	r4, [pc, #48]	; (8007998 <__libc_init_array+0x44>)
 8007968:	f006 fbf8 	bl	800e15c <_init>
 800796c:	1b64      	subs	r4, r4, r5
 800796e:	10a4      	asrs	r4, r4, #2
 8007970:	2600      	movs	r6, #0
 8007972:	42a6      	cmp	r6, r4
 8007974:	d105      	bne.n	8007982 <__libc_init_array+0x2e>
 8007976:	bd70      	pop	{r4, r5, r6, pc}
 8007978:	f855 3b04 	ldr.w	r3, [r5], #4
 800797c:	4798      	blx	r3
 800797e:	3601      	adds	r6, #1
 8007980:	e7ee      	b.n	8007960 <__libc_init_array+0xc>
 8007982:	f855 3b04 	ldr.w	r3, [r5], #4
 8007986:	4798      	blx	r3
 8007988:	3601      	adds	r6, #1
 800798a:	e7f2      	b.n	8007972 <__libc_init_array+0x1e>
 800798c:	08010e00 	.word	0x08010e00
 8007990:	08010e00 	.word	0x08010e00
 8007994:	08010e00 	.word	0x08010e00
 8007998:	08010e04 	.word	0x08010e04

0800799c <malloc>:
 800799c:	4b02      	ldr	r3, [pc, #8]	; (80079a8 <malloc+0xc>)
 800799e:	4601      	mov	r1, r0
 80079a0:	6818      	ldr	r0, [r3, #0]
 80079a2:	f000 b879 	b.w	8007a98 <_malloc_r>
 80079a6:	bf00      	nop
 80079a8:	2000000c 	.word	0x2000000c

080079ac <memcpy>:
 80079ac:	440a      	add	r2, r1
 80079ae:	4291      	cmp	r1, r2
 80079b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80079b4:	d100      	bne.n	80079b8 <memcpy+0xc>
 80079b6:	4770      	bx	lr
 80079b8:	b510      	push	{r4, lr}
 80079ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079c2:	4291      	cmp	r1, r2
 80079c4:	d1f9      	bne.n	80079ba <memcpy+0xe>
 80079c6:	bd10      	pop	{r4, pc}

080079c8 <memset>:
 80079c8:	4402      	add	r2, r0
 80079ca:	4603      	mov	r3, r0
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d100      	bne.n	80079d2 <memset+0xa>
 80079d0:	4770      	bx	lr
 80079d2:	f803 1b01 	strb.w	r1, [r3], #1
 80079d6:	e7f9      	b.n	80079cc <memset+0x4>

080079d8 <_calloc_r>:
 80079d8:	b513      	push	{r0, r1, r4, lr}
 80079da:	434a      	muls	r2, r1
 80079dc:	4611      	mov	r1, r2
 80079de:	9201      	str	r2, [sp, #4]
 80079e0:	f000 f85a 	bl	8007a98 <_malloc_r>
 80079e4:	4604      	mov	r4, r0
 80079e6:	b118      	cbz	r0, 80079f0 <_calloc_r+0x18>
 80079e8:	9a01      	ldr	r2, [sp, #4]
 80079ea:	2100      	movs	r1, #0
 80079ec:	f7ff ffec 	bl	80079c8 <memset>
 80079f0:	4620      	mov	r0, r4
 80079f2:	b002      	add	sp, #8
 80079f4:	bd10      	pop	{r4, pc}
	...

080079f8 <_free_r>:
 80079f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079fa:	2900      	cmp	r1, #0
 80079fc:	d048      	beq.n	8007a90 <_free_r+0x98>
 80079fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a02:	9001      	str	r0, [sp, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f1a1 0404 	sub.w	r4, r1, #4
 8007a0a:	bfb8      	it	lt
 8007a0c:	18e4      	addlt	r4, r4, r3
 8007a0e:	f003 f809 	bl	800aa24 <__malloc_lock>
 8007a12:	4a20      	ldr	r2, [pc, #128]	; (8007a94 <_free_r+0x9c>)
 8007a14:	9801      	ldr	r0, [sp, #4]
 8007a16:	6813      	ldr	r3, [r2, #0]
 8007a18:	4615      	mov	r5, r2
 8007a1a:	b933      	cbnz	r3, 8007a2a <_free_r+0x32>
 8007a1c:	6063      	str	r3, [r4, #4]
 8007a1e:	6014      	str	r4, [r2, #0]
 8007a20:	b003      	add	sp, #12
 8007a22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a26:	f003 b803 	b.w	800aa30 <__malloc_unlock>
 8007a2a:	42a3      	cmp	r3, r4
 8007a2c:	d90b      	bls.n	8007a46 <_free_r+0x4e>
 8007a2e:	6821      	ldr	r1, [r4, #0]
 8007a30:	1862      	adds	r2, r4, r1
 8007a32:	4293      	cmp	r3, r2
 8007a34:	bf04      	itt	eq
 8007a36:	681a      	ldreq	r2, [r3, #0]
 8007a38:	685b      	ldreq	r3, [r3, #4]
 8007a3a:	6063      	str	r3, [r4, #4]
 8007a3c:	bf04      	itt	eq
 8007a3e:	1852      	addeq	r2, r2, r1
 8007a40:	6022      	streq	r2, [r4, #0]
 8007a42:	602c      	str	r4, [r5, #0]
 8007a44:	e7ec      	b.n	8007a20 <_free_r+0x28>
 8007a46:	461a      	mov	r2, r3
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	b10b      	cbz	r3, 8007a50 <_free_r+0x58>
 8007a4c:	42a3      	cmp	r3, r4
 8007a4e:	d9fa      	bls.n	8007a46 <_free_r+0x4e>
 8007a50:	6811      	ldr	r1, [r2, #0]
 8007a52:	1855      	adds	r5, r2, r1
 8007a54:	42a5      	cmp	r5, r4
 8007a56:	d10b      	bne.n	8007a70 <_free_r+0x78>
 8007a58:	6824      	ldr	r4, [r4, #0]
 8007a5a:	4421      	add	r1, r4
 8007a5c:	1854      	adds	r4, r2, r1
 8007a5e:	42a3      	cmp	r3, r4
 8007a60:	6011      	str	r1, [r2, #0]
 8007a62:	d1dd      	bne.n	8007a20 <_free_r+0x28>
 8007a64:	681c      	ldr	r4, [r3, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	6053      	str	r3, [r2, #4]
 8007a6a:	4421      	add	r1, r4
 8007a6c:	6011      	str	r1, [r2, #0]
 8007a6e:	e7d7      	b.n	8007a20 <_free_r+0x28>
 8007a70:	d902      	bls.n	8007a78 <_free_r+0x80>
 8007a72:	230c      	movs	r3, #12
 8007a74:	6003      	str	r3, [r0, #0]
 8007a76:	e7d3      	b.n	8007a20 <_free_r+0x28>
 8007a78:	6825      	ldr	r5, [r4, #0]
 8007a7a:	1961      	adds	r1, r4, r5
 8007a7c:	428b      	cmp	r3, r1
 8007a7e:	bf04      	itt	eq
 8007a80:	6819      	ldreq	r1, [r3, #0]
 8007a82:	685b      	ldreq	r3, [r3, #4]
 8007a84:	6063      	str	r3, [r4, #4]
 8007a86:	bf04      	itt	eq
 8007a88:	1949      	addeq	r1, r1, r5
 8007a8a:	6021      	streq	r1, [r4, #0]
 8007a8c:	6054      	str	r4, [r2, #4]
 8007a8e:	e7c7      	b.n	8007a20 <_free_r+0x28>
 8007a90:	b003      	add	sp, #12
 8007a92:	bd30      	pop	{r4, r5, pc}
 8007a94:	20000210 	.word	0x20000210

08007a98 <_malloc_r>:
 8007a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9a:	1ccd      	adds	r5, r1, #3
 8007a9c:	f025 0503 	bic.w	r5, r5, #3
 8007aa0:	3508      	adds	r5, #8
 8007aa2:	2d0c      	cmp	r5, #12
 8007aa4:	bf38      	it	cc
 8007aa6:	250c      	movcc	r5, #12
 8007aa8:	2d00      	cmp	r5, #0
 8007aaa:	4606      	mov	r6, r0
 8007aac:	db01      	blt.n	8007ab2 <_malloc_r+0x1a>
 8007aae:	42a9      	cmp	r1, r5
 8007ab0:	d903      	bls.n	8007aba <_malloc_r+0x22>
 8007ab2:	230c      	movs	r3, #12
 8007ab4:	6033      	str	r3, [r6, #0]
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aba:	f002 ffb3 	bl	800aa24 <__malloc_lock>
 8007abe:	4921      	ldr	r1, [pc, #132]	; (8007b44 <_malloc_r+0xac>)
 8007ac0:	680a      	ldr	r2, [r1, #0]
 8007ac2:	4614      	mov	r4, r2
 8007ac4:	b99c      	cbnz	r4, 8007aee <_malloc_r+0x56>
 8007ac6:	4f20      	ldr	r7, [pc, #128]	; (8007b48 <_malloc_r+0xb0>)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	b923      	cbnz	r3, 8007ad6 <_malloc_r+0x3e>
 8007acc:	4621      	mov	r1, r4
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f000 febe 	bl	8008850 <_sbrk_r>
 8007ad4:	6038      	str	r0, [r7, #0]
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	4630      	mov	r0, r6
 8007ada:	f000 feb9 	bl	8008850 <_sbrk_r>
 8007ade:	1c43      	adds	r3, r0, #1
 8007ae0:	d123      	bne.n	8007b2a <_malloc_r+0x92>
 8007ae2:	230c      	movs	r3, #12
 8007ae4:	6033      	str	r3, [r6, #0]
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	f002 ffa2 	bl	800aa30 <__malloc_unlock>
 8007aec:	e7e3      	b.n	8007ab6 <_malloc_r+0x1e>
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	1b5b      	subs	r3, r3, r5
 8007af2:	d417      	bmi.n	8007b24 <_malloc_r+0x8c>
 8007af4:	2b0b      	cmp	r3, #11
 8007af6:	d903      	bls.n	8007b00 <_malloc_r+0x68>
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	441c      	add	r4, r3
 8007afc:	6025      	str	r5, [r4, #0]
 8007afe:	e004      	b.n	8007b0a <_malloc_r+0x72>
 8007b00:	6863      	ldr	r3, [r4, #4]
 8007b02:	42a2      	cmp	r2, r4
 8007b04:	bf0c      	ite	eq
 8007b06:	600b      	streq	r3, [r1, #0]
 8007b08:	6053      	strne	r3, [r2, #4]
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f002 ff90 	bl	800aa30 <__malloc_unlock>
 8007b10:	f104 000b 	add.w	r0, r4, #11
 8007b14:	1d23      	adds	r3, r4, #4
 8007b16:	f020 0007 	bic.w	r0, r0, #7
 8007b1a:	1ac2      	subs	r2, r0, r3
 8007b1c:	d0cc      	beq.n	8007ab8 <_malloc_r+0x20>
 8007b1e:	1a1b      	subs	r3, r3, r0
 8007b20:	50a3      	str	r3, [r4, r2]
 8007b22:	e7c9      	b.n	8007ab8 <_malloc_r+0x20>
 8007b24:	4622      	mov	r2, r4
 8007b26:	6864      	ldr	r4, [r4, #4]
 8007b28:	e7cc      	b.n	8007ac4 <_malloc_r+0x2c>
 8007b2a:	1cc4      	adds	r4, r0, #3
 8007b2c:	f024 0403 	bic.w	r4, r4, #3
 8007b30:	42a0      	cmp	r0, r4
 8007b32:	d0e3      	beq.n	8007afc <_malloc_r+0x64>
 8007b34:	1a21      	subs	r1, r4, r0
 8007b36:	4630      	mov	r0, r6
 8007b38:	f000 fe8a 	bl	8008850 <_sbrk_r>
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d1dd      	bne.n	8007afc <_malloc_r+0x64>
 8007b40:	e7cf      	b.n	8007ae2 <_malloc_r+0x4a>
 8007b42:	bf00      	nop
 8007b44:	20000210 	.word	0x20000210
 8007b48:	20000214 	.word	0x20000214

08007b4c <__cvt>:
 8007b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b50:	ec55 4b10 	vmov	r4, r5, d0
 8007b54:	2d00      	cmp	r5, #0
 8007b56:	460e      	mov	r6, r1
 8007b58:	4619      	mov	r1, r3
 8007b5a:	462b      	mov	r3, r5
 8007b5c:	bfbb      	ittet	lt
 8007b5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b62:	461d      	movlt	r5, r3
 8007b64:	2300      	movge	r3, #0
 8007b66:	232d      	movlt	r3, #45	; 0x2d
 8007b68:	700b      	strb	r3, [r1, #0]
 8007b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b70:	4691      	mov	r9, r2
 8007b72:	f023 0820 	bic.w	r8, r3, #32
 8007b76:	bfbc      	itt	lt
 8007b78:	4622      	movlt	r2, r4
 8007b7a:	4614      	movlt	r4, r2
 8007b7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b80:	d005      	beq.n	8007b8e <__cvt+0x42>
 8007b82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b86:	d100      	bne.n	8007b8a <__cvt+0x3e>
 8007b88:	3601      	adds	r6, #1
 8007b8a:	2102      	movs	r1, #2
 8007b8c:	e000      	b.n	8007b90 <__cvt+0x44>
 8007b8e:	2103      	movs	r1, #3
 8007b90:	ab03      	add	r3, sp, #12
 8007b92:	9301      	str	r3, [sp, #4]
 8007b94:	ab02      	add	r3, sp, #8
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	ec45 4b10 	vmov	d0, r4, r5
 8007b9c:	4653      	mov	r3, sl
 8007b9e:	4632      	mov	r2, r6
 8007ba0:	f001 fdce 	bl	8009740 <_dtoa_r>
 8007ba4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ba8:	4607      	mov	r7, r0
 8007baa:	d102      	bne.n	8007bb2 <__cvt+0x66>
 8007bac:	f019 0f01 	tst.w	r9, #1
 8007bb0:	d022      	beq.n	8007bf8 <__cvt+0xac>
 8007bb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bb6:	eb07 0906 	add.w	r9, r7, r6
 8007bba:	d110      	bne.n	8007bde <__cvt+0x92>
 8007bbc:	783b      	ldrb	r3, [r7, #0]
 8007bbe:	2b30      	cmp	r3, #48	; 0x30
 8007bc0:	d10a      	bne.n	8007bd8 <__cvt+0x8c>
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	4629      	mov	r1, r5
 8007bca:	f7f8 ff9d 	bl	8000b08 <__aeabi_dcmpeq>
 8007bce:	b918      	cbnz	r0, 8007bd8 <__cvt+0x8c>
 8007bd0:	f1c6 0601 	rsb	r6, r6, #1
 8007bd4:	f8ca 6000 	str.w	r6, [sl]
 8007bd8:	f8da 3000 	ldr.w	r3, [sl]
 8007bdc:	4499      	add	r9, r3
 8007bde:	2200      	movs	r2, #0
 8007be0:	2300      	movs	r3, #0
 8007be2:	4620      	mov	r0, r4
 8007be4:	4629      	mov	r1, r5
 8007be6:	f7f8 ff8f 	bl	8000b08 <__aeabi_dcmpeq>
 8007bea:	b108      	cbz	r0, 8007bf0 <__cvt+0xa4>
 8007bec:	f8cd 900c 	str.w	r9, [sp, #12]
 8007bf0:	2230      	movs	r2, #48	; 0x30
 8007bf2:	9b03      	ldr	r3, [sp, #12]
 8007bf4:	454b      	cmp	r3, r9
 8007bf6:	d307      	bcc.n	8007c08 <__cvt+0xbc>
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bfc:	1bdb      	subs	r3, r3, r7
 8007bfe:	4638      	mov	r0, r7
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	b004      	add	sp, #16
 8007c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c08:	1c59      	adds	r1, r3, #1
 8007c0a:	9103      	str	r1, [sp, #12]
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	e7f0      	b.n	8007bf2 <__cvt+0xa6>

08007c10 <__exponent>:
 8007c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c12:	4603      	mov	r3, r0
 8007c14:	2900      	cmp	r1, #0
 8007c16:	bfb8      	it	lt
 8007c18:	4249      	neglt	r1, r1
 8007c1a:	f803 2b02 	strb.w	r2, [r3], #2
 8007c1e:	bfb4      	ite	lt
 8007c20:	222d      	movlt	r2, #45	; 0x2d
 8007c22:	222b      	movge	r2, #43	; 0x2b
 8007c24:	2909      	cmp	r1, #9
 8007c26:	7042      	strb	r2, [r0, #1]
 8007c28:	dd2a      	ble.n	8007c80 <__exponent+0x70>
 8007c2a:	f10d 0407 	add.w	r4, sp, #7
 8007c2e:	46a4      	mov	ip, r4
 8007c30:	270a      	movs	r7, #10
 8007c32:	46a6      	mov	lr, r4
 8007c34:	460a      	mov	r2, r1
 8007c36:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c3a:	fb07 1516 	mls	r5, r7, r6, r1
 8007c3e:	3530      	adds	r5, #48	; 0x30
 8007c40:	2a63      	cmp	r2, #99	; 0x63
 8007c42:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007c46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	dcf1      	bgt.n	8007c32 <__exponent+0x22>
 8007c4e:	3130      	adds	r1, #48	; 0x30
 8007c50:	f1ae 0502 	sub.w	r5, lr, #2
 8007c54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c58:	1c44      	adds	r4, r0, #1
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	4561      	cmp	r1, ip
 8007c5e:	d30a      	bcc.n	8007c76 <__exponent+0x66>
 8007c60:	f10d 0209 	add.w	r2, sp, #9
 8007c64:	eba2 020e 	sub.w	r2, r2, lr
 8007c68:	4565      	cmp	r5, ip
 8007c6a:	bf88      	it	hi
 8007c6c:	2200      	movhi	r2, #0
 8007c6e:	4413      	add	r3, r2
 8007c70:	1a18      	subs	r0, r3, r0
 8007c72:	b003      	add	sp, #12
 8007c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c7e:	e7ed      	b.n	8007c5c <__exponent+0x4c>
 8007c80:	2330      	movs	r3, #48	; 0x30
 8007c82:	3130      	adds	r1, #48	; 0x30
 8007c84:	7083      	strb	r3, [r0, #2]
 8007c86:	70c1      	strb	r1, [r0, #3]
 8007c88:	1d03      	adds	r3, r0, #4
 8007c8a:	e7f1      	b.n	8007c70 <__exponent+0x60>

08007c8c <_printf_float>:
 8007c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c90:	ed2d 8b02 	vpush	{d8}
 8007c94:	b08d      	sub	sp, #52	; 0x34
 8007c96:	460c      	mov	r4, r1
 8007c98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c9c:	4616      	mov	r6, r2
 8007c9e:	461f      	mov	r7, r3
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	f002 fea9 	bl	800a9f8 <_localeconv_r>
 8007ca6:	f8d0 a000 	ldr.w	sl, [r0]
 8007caa:	4650      	mov	r0, sl
 8007cac:	f7f8 fab0 	bl	8000210 <strlen>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	9305      	str	r3, [sp, #20]
 8007cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007cbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007cc0:	3307      	adds	r3, #7
 8007cc2:	f023 0307 	bic.w	r3, r3, #7
 8007cc6:	f103 0208 	add.w	r2, r3, #8
 8007cca:	f8c8 2000 	str.w	r2, [r8]
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007cd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007cda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cde:	9307      	str	r3, [sp, #28]
 8007ce0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ce4:	ee08 0a10 	vmov	s16, r0
 8007ce8:	4b9f      	ldr	r3, [pc, #636]	; (8007f68 <_printf_float+0x2dc>)
 8007cea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cf2:	f7f8 ff3b 	bl	8000b6c <__aeabi_dcmpun>
 8007cf6:	bb88      	cbnz	r0, 8007d5c <_printf_float+0xd0>
 8007cf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cfc:	4b9a      	ldr	r3, [pc, #616]	; (8007f68 <_printf_float+0x2dc>)
 8007cfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d02:	f7f8 ff15 	bl	8000b30 <__aeabi_dcmple>
 8007d06:	bb48      	cbnz	r0, 8007d5c <_printf_float+0xd0>
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	4649      	mov	r1, r9
 8007d10:	f7f8 ff04 	bl	8000b1c <__aeabi_dcmplt>
 8007d14:	b110      	cbz	r0, 8007d1c <_printf_float+0x90>
 8007d16:	232d      	movs	r3, #45	; 0x2d
 8007d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d1c:	4b93      	ldr	r3, [pc, #588]	; (8007f6c <_printf_float+0x2e0>)
 8007d1e:	4894      	ldr	r0, [pc, #592]	; (8007f70 <_printf_float+0x2e4>)
 8007d20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d24:	bf94      	ite	ls
 8007d26:	4698      	movls	r8, r3
 8007d28:	4680      	movhi	r8, r0
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	6123      	str	r3, [r4, #16]
 8007d2e:	9b05      	ldr	r3, [sp, #20]
 8007d30:	f023 0204 	bic.w	r2, r3, #4
 8007d34:	6022      	str	r2, [r4, #0]
 8007d36:	f04f 0900 	mov.w	r9, #0
 8007d3a:	9700      	str	r7, [sp, #0]
 8007d3c:	4633      	mov	r3, r6
 8007d3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d40:	4621      	mov	r1, r4
 8007d42:	4628      	mov	r0, r5
 8007d44:	f000 f9d8 	bl	80080f8 <_printf_common>
 8007d48:	3001      	adds	r0, #1
 8007d4a:	f040 8090 	bne.w	8007e6e <_printf_float+0x1e2>
 8007d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d52:	b00d      	add	sp, #52	; 0x34
 8007d54:	ecbd 8b02 	vpop	{d8}
 8007d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5c:	4642      	mov	r2, r8
 8007d5e:	464b      	mov	r3, r9
 8007d60:	4640      	mov	r0, r8
 8007d62:	4649      	mov	r1, r9
 8007d64:	f7f8 ff02 	bl	8000b6c <__aeabi_dcmpun>
 8007d68:	b140      	cbz	r0, 8007d7c <_printf_float+0xf0>
 8007d6a:	464b      	mov	r3, r9
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	bfbc      	itt	lt
 8007d70:	232d      	movlt	r3, #45	; 0x2d
 8007d72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d76:	487f      	ldr	r0, [pc, #508]	; (8007f74 <_printf_float+0x2e8>)
 8007d78:	4b7f      	ldr	r3, [pc, #508]	; (8007f78 <_printf_float+0x2ec>)
 8007d7a:	e7d1      	b.n	8007d20 <_printf_float+0x94>
 8007d7c:	6863      	ldr	r3, [r4, #4]
 8007d7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d82:	9206      	str	r2, [sp, #24]
 8007d84:	1c5a      	adds	r2, r3, #1
 8007d86:	d13f      	bne.n	8007e08 <_printf_float+0x17c>
 8007d88:	2306      	movs	r3, #6
 8007d8a:	6063      	str	r3, [r4, #4]
 8007d8c:	9b05      	ldr	r3, [sp, #20]
 8007d8e:	6861      	ldr	r1, [r4, #4]
 8007d90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d94:	2300      	movs	r3, #0
 8007d96:	9303      	str	r3, [sp, #12]
 8007d98:	ab0a      	add	r3, sp, #40	; 0x28
 8007d9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d9e:	ab09      	add	r3, sp, #36	; 0x24
 8007da0:	ec49 8b10 	vmov	d0, r8, r9
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	6022      	str	r2, [r4, #0]
 8007da8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007dac:	4628      	mov	r0, r5
 8007dae:	f7ff fecd 	bl	8007b4c <__cvt>
 8007db2:	9b06      	ldr	r3, [sp, #24]
 8007db4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007db6:	2b47      	cmp	r3, #71	; 0x47
 8007db8:	4680      	mov	r8, r0
 8007dba:	d108      	bne.n	8007dce <_printf_float+0x142>
 8007dbc:	1cc8      	adds	r0, r1, #3
 8007dbe:	db02      	blt.n	8007dc6 <_printf_float+0x13a>
 8007dc0:	6863      	ldr	r3, [r4, #4]
 8007dc2:	4299      	cmp	r1, r3
 8007dc4:	dd41      	ble.n	8007e4a <_printf_float+0x1be>
 8007dc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007dca:	fa5f fb8b 	uxtb.w	fp, fp
 8007dce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dd2:	d820      	bhi.n	8007e16 <_printf_float+0x18a>
 8007dd4:	3901      	subs	r1, #1
 8007dd6:	465a      	mov	r2, fp
 8007dd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ddc:	9109      	str	r1, [sp, #36]	; 0x24
 8007dde:	f7ff ff17 	bl	8007c10 <__exponent>
 8007de2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007de4:	1813      	adds	r3, r2, r0
 8007de6:	2a01      	cmp	r2, #1
 8007de8:	4681      	mov	r9, r0
 8007dea:	6123      	str	r3, [r4, #16]
 8007dec:	dc02      	bgt.n	8007df4 <_printf_float+0x168>
 8007dee:	6822      	ldr	r2, [r4, #0]
 8007df0:	07d2      	lsls	r2, r2, #31
 8007df2:	d501      	bpl.n	8007df8 <_printf_float+0x16c>
 8007df4:	3301      	adds	r3, #1
 8007df6:	6123      	str	r3, [r4, #16]
 8007df8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d09c      	beq.n	8007d3a <_printf_float+0xae>
 8007e00:	232d      	movs	r3, #45	; 0x2d
 8007e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e06:	e798      	b.n	8007d3a <_printf_float+0xae>
 8007e08:	9a06      	ldr	r2, [sp, #24]
 8007e0a:	2a47      	cmp	r2, #71	; 0x47
 8007e0c:	d1be      	bne.n	8007d8c <_printf_float+0x100>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1bc      	bne.n	8007d8c <_printf_float+0x100>
 8007e12:	2301      	movs	r3, #1
 8007e14:	e7b9      	b.n	8007d8a <_printf_float+0xfe>
 8007e16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e1a:	d118      	bne.n	8007e4e <_printf_float+0x1c2>
 8007e1c:	2900      	cmp	r1, #0
 8007e1e:	6863      	ldr	r3, [r4, #4]
 8007e20:	dd0b      	ble.n	8007e3a <_printf_float+0x1ae>
 8007e22:	6121      	str	r1, [r4, #16]
 8007e24:	b913      	cbnz	r3, 8007e2c <_printf_float+0x1a0>
 8007e26:	6822      	ldr	r2, [r4, #0]
 8007e28:	07d0      	lsls	r0, r2, #31
 8007e2a:	d502      	bpl.n	8007e32 <_printf_float+0x1a6>
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	440b      	add	r3, r1
 8007e30:	6123      	str	r3, [r4, #16]
 8007e32:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e34:	f04f 0900 	mov.w	r9, #0
 8007e38:	e7de      	b.n	8007df8 <_printf_float+0x16c>
 8007e3a:	b913      	cbnz	r3, 8007e42 <_printf_float+0x1b6>
 8007e3c:	6822      	ldr	r2, [r4, #0]
 8007e3e:	07d2      	lsls	r2, r2, #31
 8007e40:	d501      	bpl.n	8007e46 <_printf_float+0x1ba>
 8007e42:	3302      	adds	r3, #2
 8007e44:	e7f4      	b.n	8007e30 <_printf_float+0x1a4>
 8007e46:	2301      	movs	r3, #1
 8007e48:	e7f2      	b.n	8007e30 <_printf_float+0x1a4>
 8007e4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e50:	4299      	cmp	r1, r3
 8007e52:	db05      	blt.n	8007e60 <_printf_float+0x1d4>
 8007e54:	6823      	ldr	r3, [r4, #0]
 8007e56:	6121      	str	r1, [r4, #16]
 8007e58:	07d8      	lsls	r0, r3, #31
 8007e5a:	d5ea      	bpl.n	8007e32 <_printf_float+0x1a6>
 8007e5c:	1c4b      	adds	r3, r1, #1
 8007e5e:	e7e7      	b.n	8007e30 <_printf_float+0x1a4>
 8007e60:	2900      	cmp	r1, #0
 8007e62:	bfd4      	ite	le
 8007e64:	f1c1 0202 	rsble	r2, r1, #2
 8007e68:	2201      	movgt	r2, #1
 8007e6a:	4413      	add	r3, r2
 8007e6c:	e7e0      	b.n	8007e30 <_printf_float+0x1a4>
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	055a      	lsls	r2, r3, #21
 8007e72:	d407      	bmi.n	8007e84 <_printf_float+0x1f8>
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	4642      	mov	r2, r8
 8007e78:	4631      	mov	r1, r6
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	47b8      	blx	r7
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d12c      	bne.n	8007edc <_printf_float+0x250>
 8007e82:	e764      	b.n	8007d4e <_printf_float+0xc2>
 8007e84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e88:	f240 80e0 	bls.w	800804c <_printf_float+0x3c0>
 8007e8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e90:	2200      	movs	r2, #0
 8007e92:	2300      	movs	r3, #0
 8007e94:	f7f8 fe38 	bl	8000b08 <__aeabi_dcmpeq>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d034      	beq.n	8007f06 <_printf_float+0x27a>
 8007e9c:	4a37      	ldr	r2, [pc, #220]	; (8007f7c <_printf_float+0x2f0>)
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	47b8      	blx	r7
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	f43f af51 	beq.w	8007d4e <_printf_float+0xc2>
 8007eac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	db02      	blt.n	8007eba <_printf_float+0x22e>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	07d8      	lsls	r0, r3, #31
 8007eb8:	d510      	bpl.n	8007edc <_printf_float+0x250>
 8007eba:	ee18 3a10 	vmov	r3, s16
 8007ebe:	4652      	mov	r2, sl
 8007ec0:	4631      	mov	r1, r6
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	47b8      	blx	r7
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	f43f af41 	beq.w	8007d4e <_printf_float+0xc2>
 8007ecc:	f04f 0800 	mov.w	r8, #0
 8007ed0:	f104 091a 	add.w	r9, r4, #26
 8007ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	4543      	cmp	r3, r8
 8007eda:	dc09      	bgt.n	8007ef0 <_printf_float+0x264>
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	079b      	lsls	r3, r3, #30
 8007ee0:	f100 8105 	bmi.w	80080ee <_printf_float+0x462>
 8007ee4:	68e0      	ldr	r0, [r4, #12]
 8007ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ee8:	4298      	cmp	r0, r3
 8007eea:	bfb8      	it	lt
 8007eec:	4618      	movlt	r0, r3
 8007eee:	e730      	b.n	8007d52 <_printf_float+0xc6>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	464a      	mov	r2, r9
 8007ef4:	4631      	mov	r1, r6
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	47b8      	blx	r7
 8007efa:	3001      	adds	r0, #1
 8007efc:	f43f af27 	beq.w	8007d4e <_printf_float+0xc2>
 8007f00:	f108 0801 	add.w	r8, r8, #1
 8007f04:	e7e6      	b.n	8007ed4 <_printf_float+0x248>
 8007f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	dc39      	bgt.n	8007f80 <_printf_float+0x2f4>
 8007f0c:	4a1b      	ldr	r2, [pc, #108]	; (8007f7c <_printf_float+0x2f0>)
 8007f0e:	2301      	movs	r3, #1
 8007f10:	4631      	mov	r1, r6
 8007f12:	4628      	mov	r0, r5
 8007f14:	47b8      	blx	r7
 8007f16:	3001      	adds	r0, #1
 8007f18:	f43f af19 	beq.w	8007d4e <_printf_float+0xc2>
 8007f1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f20:	4313      	orrs	r3, r2
 8007f22:	d102      	bne.n	8007f2a <_printf_float+0x29e>
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	07d9      	lsls	r1, r3, #31
 8007f28:	d5d8      	bpl.n	8007edc <_printf_float+0x250>
 8007f2a:	ee18 3a10 	vmov	r3, s16
 8007f2e:	4652      	mov	r2, sl
 8007f30:	4631      	mov	r1, r6
 8007f32:	4628      	mov	r0, r5
 8007f34:	47b8      	blx	r7
 8007f36:	3001      	adds	r0, #1
 8007f38:	f43f af09 	beq.w	8007d4e <_printf_float+0xc2>
 8007f3c:	f04f 0900 	mov.w	r9, #0
 8007f40:	f104 0a1a 	add.w	sl, r4, #26
 8007f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f46:	425b      	negs	r3, r3
 8007f48:	454b      	cmp	r3, r9
 8007f4a:	dc01      	bgt.n	8007f50 <_printf_float+0x2c4>
 8007f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f4e:	e792      	b.n	8007e76 <_printf_float+0x1ea>
 8007f50:	2301      	movs	r3, #1
 8007f52:	4652      	mov	r2, sl
 8007f54:	4631      	mov	r1, r6
 8007f56:	4628      	mov	r0, r5
 8007f58:	47b8      	blx	r7
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	f43f aef7 	beq.w	8007d4e <_printf_float+0xc2>
 8007f60:	f109 0901 	add.w	r9, r9, #1
 8007f64:	e7ee      	b.n	8007f44 <_printf_float+0x2b8>
 8007f66:	bf00      	nop
 8007f68:	7fefffff 	.word	0x7fefffff
 8007f6c:	0801072c 	.word	0x0801072c
 8007f70:	08010730 	.word	0x08010730
 8007f74:	08010738 	.word	0x08010738
 8007f78:	08010734 	.word	0x08010734
 8007f7c:	0801073c 	.word	0x0801073c
 8007f80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f84:	429a      	cmp	r2, r3
 8007f86:	bfa8      	it	ge
 8007f88:	461a      	movge	r2, r3
 8007f8a:	2a00      	cmp	r2, #0
 8007f8c:	4691      	mov	r9, r2
 8007f8e:	dc37      	bgt.n	8008000 <_printf_float+0x374>
 8007f90:	f04f 0b00 	mov.w	fp, #0
 8007f94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f98:	f104 021a 	add.w	r2, r4, #26
 8007f9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f9e:	9305      	str	r3, [sp, #20]
 8007fa0:	eba3 0309 	sub.w	r3, r3, r9
 8007fa4:	455b      	cmp	r3, fp
 8007fa6:	dc33      	bgt.n	8008010 <_printf_float+0x384>
 8007fa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fac:	429a      	cmp	r2, r3
 8007fae:	db3b      	blt.n	8008028 <_printf_float+0x39c>
 8007fb0:	6823      	ldr	r3, [r4, #0]
 8007fb2:	07da      	lsls	r2, r3, #31
 8007fb4:	d438      	bmi.n	8008028 <_printf_float+0x39c>
 8007fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fb8:	9b05      	ldr	r3, [sp, #20]
 8007fba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	eba2 0901 	sub.w	r9, r2, r1
 8007fc2:	4599      	cmp	r9, r3
 8007fc4:	bfa8      	it	ge
 8007fc6:	4699      	movge	r9, r3
 8007fc8:	f1b9 0f00 	cmp.w	r9, #0
 8007fcc:	dc35      	bgt.n	800803a <_printf_float+0x3ae>
 8007fce:	f04f 0800 	mov.w	r8, #0
 8007fd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fd6:	f104 0a1a 	add.w	sl, r4, #26
 8007fda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fde:	1a9b      	subs	r3, r3, r2
 8007fe0:	eba3 0309 	sub.w	r3, r3, r9
 8007fe4:	4543      	cmp	r3, r8
 8007fe6:	f77f af79 	ble.w	8007edc <_printf_float+0x250>
 8007fea:	2301      	movs	r3, #1
 8007fec:	4652      	mov	r2, sl
 8007fee:	4631      	mov	r1, r6
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	47b8      	blx	r7
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	f43f aeaa 	beq.w	8007d4e <_printf_float+0xc2>
 8007ffa:	f108 0801 	add.w	r8, r8, #1
 8007ffe:	e7ec      	b.n	8007fda <_printf_float+0x34e>
 8008000:	4613      	mov	r3, r2
 8008002:	4631      	mov	r1, r6
 8008004:	4642      	mov	r2, r8
 8008006:	4628      	mov	r0, r5
 8008008:	47b8      	blx	r7
 800800a:	3001      	adds	r0, #1
 800800c:	d1c0      	bne.n	8007f90 <_printf_float+0x304>
 800800e:	e69e      	b.n	8007d4e <_printf_float+0xc2>
 8008010:	2301      	movs	r3, #1
 8008012:	4631      	mov	r1, r6
 8008014:	4628      	mov	r0, r5
 8008016:	9205      	str	r2, [sp, #20]
 8008018:	47b8      	blx	r7
 800801a:	3001      	adds	r0, #1
 800801c:	f43f ae97 	beq.w	8007d4e <_printf_float+0xc2>
 8008020:	9a05      	ldr	r2, [sp, #20]
 8008022:	f10b 0b01 	add.w	fp, fp, #1
 8008026:	e7b9      	b.n	8007f9c <_printf_float+0x310>
 8008028:	ee18 3a10 	vmov	r3, s16
 800802c:	4652      	mov	r2, sl
 800802e:	4631      	mov	r1, r6
 8008030:	4628      	mov	r0, r5
 8008032:	47b8      	blx	r7
 8008034:	3001      	adds	r0, #1
 8008036:	d1be      	bne.n	8007fb6 <_printf_float+0x32a>
 8008038:	e689      	b.n	8007d4e <_printf_float+0xc2>
 800803a:	9a05      	ldr	r2, [sp, #20]
 800803c:	464b      	mov	r3, r9
 800803e:	4442      	add	r2, r8
 8008040:	4631      	mov	r1, r6
 8008042:	4628      	mov	r0, r5
 8008044:	47b8      	blx	r7
 8008046:	3001      	adds	r0, #1
 8008048:	d1c1      	bne.n	8007fce <_printf_float+0x342>
 800804a:	e680      	b.n	8007d4e <_printf_float+0xc2>
 800804c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800804e:	2a01      	cmp	r2, #1
 8008050:	dc01      	bgt.n	8008056 <_printf_float+0x3ca>
 8008052:	07db      	lsls	r3, r3, #31
 8008054:	d538      	bpl.n	80080c8 <_printf_float+0x43c>
 8008056:	2301      	movs	r3, #1
 8008058:	4642      	mov	r2, r8
 800805a:	4631      	mov	r1, r6
 800805c:	4628      	mov	r0, r5
 800805e:	47b8      	blx	r7
 8008060:	3001      	adds	r0, #1
 8008062:	f43f ae74 	beq.w	8007d4e <_printf_float+0xc2>
 8008066:	ee18 3a10 	vmov	r3, s16
 800806a:	4652      	mov	r2, sl
 800806c:	4631      	mov	r1, r6
 800806e:	4628      	mov	r0, r5
 8008070:	47b8      	blx	r7
 8008072:	3001      	adds	r0, #1
 8008074:	f43f ae6b 	beq.w	8007d4e <_printf_float+0xc2>
 8008078:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800807c:	2200      	movs	r2, #0
 800807e:	2300      	movs	r3, #0
 8008080:	f7f8 fd42 	bl	8000b08 <__aeabi_dcmpeq>
 8008084:	b9d8      	cbnz	r0, 80080be <_printf_float+0x432>
 8008086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008088:	f108 0201 	add.w	r2, r8, #1
 800808c:	3b01      	subs	r3, #1
 800808e:	4631      	mov	r1, r6
 8008090:	4628      	mov	r0, r5
 8008092:	47b8      	blx	r7
 8008094:	3001      	adds	r0, #1
 8008096:	d10e      	bne.n	80080b6 <_printf_float+0x42a>
 8008098:	e659      	b.n	8007d4e <_printf_float+0xc2>
 800809a:	2301      	movs	r3, #1
 800809c:	4652      	mov	r2, sl
 800809e:	4631      	mov	r1, r6
 80080a0:	4628      	mov	r0, r5
 80080a2:	47b8      	blx	r7
 80080a4:	3001      	adds	r0, #1
 80080a6:	f43f ae52 	beq.w	8007d4e <_printf_float+0xc2>
 80080aa:	f108 0801 	add.w	r8, r8, #1
 80080ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b0:	3b01      	subs	r3, #1
 80080b2:	4543      	cmp	r3, r8
 80080b4:	dcf1      	bgt.n	800809a <_printf_float+0x40e>
 80080b6:	464b      	mov	r3, r9
 80080b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080bc:	e6dc      	b.n	8007e78 <_printf_float+0x1ec>
 80080be:	f04f 0800 	mov.w	r8, #0
 80080c2:	f104 0a1a 	add.w	sl, r4, #26
 80080c6:	e7f2      	b.n	80080ae <_printf_float+0x422>
 80080c8:	2301      	movs	r3, #1
 80080ca:	4642      	mov	r2, r8
 80080cc:	e7df      	b.n	800808e <_printf_float+0x402>
 80080ce:	2301      	movs	r3, #1
 80080d0:	464a      	mov	r2, r9
 80080d2:	4631      	mov	r1, r6
 80080d4:	4628      	mov	r0, r5
 80080d6:	47b8      	blx	r7
 80080d8:	3001      	adds	r0, #1
 80080da:	f43f ae38 	beq.w	8007d4e <_printf_float+0xc2>
 80080de:	f108 0801 	add.w	r8, r8, #1
 80080e2:	68e3      	ldr	r3, [r4, #12]
 80080e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080e6:	1a5b      	subs	r3, r3, r1
 80080e8:	4543      	cmp	r3, r8
 80080ea:	dcf0      	bgt.n	80080ce <_printf_float+0x442>
 80080ec:	e6fa      	b.n	8007ee4 <_printf_float+0x258>
 80080ee:	f04f 0800 	mov.w	r8, #0
 80080f2:	f104 0919 	add.w	r9, r4, #25
 80080f6:	e7f4      	b.n	80080e2 <_printf_float+0x456>

080080f8 <_printf_common>:
 80080f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080fc:	4616      	mov	r6, r2
 80080fe:	4699      	mov	r9, r3
 8008100:	688a      	ldr	r2, [r1, #8]
 8008102:	690b      	ldr	r3, [r1, #16]
 8008104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008108:	4293      	cmp	r3, r2
 800810a:	bfb8      	it	lt
 800810c:	4613      	movlt	r3, r2
 800810e:	6033      	str	r3, [r6, #0]
 8008110:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008114:	4607      	mov	r7, r0
 8008116:	460c      	mov	r4, r1
 8008118:	b10a      	cbz	r2, 800811e <_printf_common+0x26>
 800811a:	3301      	adds	r3, #1
 800811c:	6033      	str	r3, [r6, #0]
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	0699      	lsls	r1, r3, #26
 8008122:	bf42      	ittt	mi
 8008124:	6833      	ldrmi	r3, [r6, #0]
 8008126:	3302      	addmi	r3, #2
 8008128:	6033      	strmi	r3, [r6, #0]
 800812a:	6825      	ldr	r5, [r4, #0]
 800812c:	f015 0506 	ands.w	r5, r5, #6
 8008130:	d106      	bne.n	8008140 <_printf_common+0x48>
 8008132:	f104 0a19 	add.w	sl, r4, #25
 8008136:	68e3      	ldr	r3, [r4, #12]
 8008138:	6832      	ldr	r2, [r6, #0]
 800813a:	1a9b      	subs	r3, r3, r2
 800813c:	42ab      	cmp	r3, r5
 800813e:	dc26      	bgt.n	800818e <_printf_common+0x96>
 8008140:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008144:	1e13      	subs	r3, r2, #0
 8008146:	6822      	ldr	r2, [r4, #0]
 8008148:	bf18      	it	ne
 800814a:	2301      	movne	r3, #1
 800814c:	0692      	lsls	r2, r2, #26
 800814e:	d42b      	bmi.n	80081a8 <_printf_common+0xb0>
 8008150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008154:	4649      	mov	r1, r9
 8008156:	4638      	mov	r0, r7
 8008158:	47c0      	blx	r8
 800815a:	3001      	adds	r0, #1
 800815c:	d01e      	beq.n	800819c <_printf_common+0xa4>
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	68e5      	ldr	r5, [r4, #12]
 8008162:	6832      	ldr	r2, [r6, #0]
 8008164:	f003 0306 	and.w	r3, r3, #6
 8008168:	2b04      	cmp	r3, #4
 800816a:	bf08      	it	eq
 800816c:	1aad      	subeq	r5, r5, r2
 800816e:	68a3      	ldr	r3, [r4, #8]
 8008170:	6922      	ldr	r2, [r4, #16]
 8008172:	bf0c      	ite	eq
 8008174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008178:	2500      	movne	r5, #0
 800817a:	4293      	cmp	r3, r2
 800817c:	bfc4      	itt	gt
 800817e:	1a9b      	subgt	r3, r3, r2
 8008180:	18ed      	addgt	r5, r5, r3
 8008182:	2600      	movs	r6, #0
 8008184:	341a      	adds	r4, #26
 8008186:	42b5      	cmp	r5, r6
 8008188:	d11a      	bne.n	80081c0 <_printf_common+0xc8>
 800818a:	2000      	movs	r0, #0
 800818c:	e008      	b.n	80081a0 <_printf_common+0xa8>
 800818e:	2301      	movs	r3, #1
 8008190:	4652      	mov	r2, sl
 8008192:	4649      	mov	r1, r9
 8008194:	4638      	mov	r0, r7
 8008196:	47c0      	blx	r8
 8008198:	3001      	adds	r0, #1
 800819a:	d103      	bne.n	80081a4 <_printf_common+0xac>
 800819c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a4:	3501      	adds	r5, #1
 80081a6:	e7c6      	b.n	8008136 <_printf_common+0x3e>
 80081a8:	18e1      	adds	r1, r4, r3
 80081aa:	1c5a      	adds	r2, r3, #1
 80081ac:	2030      	movs	r0, #48	; 0x30
 80081ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081b2:	4422      	add	r2, r4
 80081b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081bc:	3302      	adds	r3, #2
 80081be:	e7c7      	b.n	8008150 <_printf_common+0x58>
 80081c0:	2301      	movs	r3, #1
 80081c2:	4622      	mov	r2, r4
 80081c4:	4649      	mov	r1, r9
 80081c6:	4638      	mov	r0, r7
 80081c8:	47c0      	blx	r8
 80081ca:	3001      	adds	r0, #1
 80081cc:	d0e6      	beq.n	800819c <_printf_common+0xa4>
 80081ce:	3601      	adds	r6, #1
 80081d0:	e7d9      	b.n	8008186 <_printf_common+0x8e>
	...

080081d4 <_printf_i>:
 80081d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081d8:	460c      	mov	r4, r1
 80081da:	4691      	mov	r9, r2
 80081dc:	7e27      	ldrb	r7, [r4, #24]
 80081de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081e0:	2f78      	cmp	r7, #120	; 0x78
 80081e2:	4680      	mov	r8, r0
 80081e4:	469a      	mov	sl, r3
 80081e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081ea:	d807      	bhi.n	80081fc <_printf_i+0x28>
 80081ec:	2f62      	cmp	r7, #98	; 0x62
 80081ee:	d80a      	bhi.n	8008206 <_printf_i+0x32>
 80081f0:	2f00      	cmp	r7, #0
 80081f2:	f000 80d8 	beq.w	80083a6 <_printf_i+0x1d2>
 80081f6:	2f58      	cmp	r7, #88	; 0x58
 80081f8:	f000 80a3 	beq.w	8008342 <_printf_i+0x16e>
 80081fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008200:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008204:	e03a      	b.n	800827c <_printf_i+0xa8>
 8008206:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800820a:	2b15      	cmp	r3, #21
 800820c:	d8f6      	bhi.n	80081fc <_printf_i+0x28>
 800820e:	a001      	add	r0, pc, #4	; (adr r0, 8008214 <_printf_i+0x40>)
 8008210:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008214:	0800826d 	.word	0x0800826d
 8008218:	08008281 	.word	0x08008281
 800821c:	080081fd 	.word	0x080081fd
 8008220:	080081fd 	.word	0x080081fd
 8008224:	080081fd 	.word	0x080081fd
 8008228:	080081fd 	.word	0x080081fd
 800822c:	08008281 	.word	0x08008281
 8008230:	080081fd 	.word	0x080081fd
 8008234:	080081fd 	.word	0x080081fd
 8008238:	080081fd 	.word	0x080081fd
 800823c:	080081fd 	.word	0x080081fd
 8008240:	0800838d 	.word	0x0800838d
 8008244:	080082b1 	.word	0x080082b1
 8008248:	0800836f 	.word	0x0800836f
 800824c:	080081fd 	.word	0x080081fd
 8008250:	080081fd 	.word	0x080081fd
 8008254:	080083af 	.word	0x080083af
 8008258:	080081fd 	.word	0x080081fd
 800825c:	080082b1 	.word	0x080082b1
 8008260:	080081fd 	.word	0x080081fd
 8008264:	080081fd 	.word	0x080081fd
 8008268:	08008377 	.word	0x08008377
 800826c:	680b      	ldr	r3, [r1, #0]
 800826e:	1d1a      	adds	r2, r3, #4
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	600a      	str	r2, [r1, #0]
 8008274:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800827c:	2301      	movs	r3, #1
 800827e:	e0a3      	b.n	80083c8 <_printf_i+0x1f4>
 8008280:	6825      	ldr	r5, [r4, #0]
 8008282:	6808      	ldr	r0, [r1, #0]
 8008284:	062e      	lsls	r6, r5, #24
 8008286:	f100 0304 	add.w	r3, r0, #4
 800828a:	d50a      	bpl.n	80082a2 <_printf_i+0xce>
 800828c:	6805      	ldr	r5, [r0, #0]
 800828e:	600b      	str	r3, [r1, #0]
 8008290:	2d00      	cmp	r5, #0
 8008292:	da03      	bge.n	800829c <_printf_i+0xc8>
 8008294:	232d      	movs	r3, #45	; 0x2d
 8008296:	426d      	negs	r5, r5
 8008298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800829c:	485e      	ldr	r0, [pc, #376]	; (8008418 <_printf_i+0x244>)
 800829e:	230a      	movs	r3, #10
 80082a0:	e019      	b.n	80082d6 <_printf_i+0x102>
 80082a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80082a6:	6805      	ldr	r5, [r0, #0]
 80082a8:	600b      	str	r3, [r1, #0]
 80082aa:	bf18      	it	ne
 80082ac:	b22d      	sxthne	r5, r5
 80082ae:	e7ef      	b.n	8008290 <_printf_i+0xbc>
 80082b0:	680b      	ldr	r3, [r1, #0]
 80082b2:	6825      	ldr	r5, [r4, #0]
 80082b4:	1d18      	adds	r0, r3, #4
 80082b6:	6008      	str	r0, [r1, #0]
 80082b8:	0628      	lsls	r0, r5, #24
 80082ba:	d501      	bpl.n	80082c0 <_printf_i+0xec>
 80082bc:	681d      	ldr	r5, [r3, #0]
 80082be:	e002      	b.n	80082c6 <_printf_i+0xf2>
 80082c0:	0669      	lsls	r1, r5, #25
 80082c2:	d5fb      	bpl.n	80082bc <_printf_i+0xe8>
 80082c4:	881d      	ldrh	r5, [r3, #0]
 80082c6:	4854      	ldr	r0, [pc, #336]	; (8008418 <_printf_i+0x244>)
 80082c8:	2f6f      	cmp	r7, #111	; 0x6f
 80082ca:	bf0c      	ite	eq
 80082cc:	2308      	moveq	r3, #8
 80082ce:	230a      	movne	r3, #10
 80082d0:	2100      	movs	r1, #0
 80082d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082d6:	6866      	ldr	r6, [r4, #4]
 80082d8:	60a6      	str	r6, [r4, #8]
 80082da:	2e00      	cmp	r6, #0
 80082dc:	bfa2      	ittt	ge
 80082de:	6821      	ldrge	r1, [r4, #0]
 80082e0:	f021 0104 	bicge.w	r1, r1, #4
 80082e4:	6021      	strge	r1, [r4, #0]
 80082e6:	b90d      	cbnz	r5, 80082ec <_printf_i+0x118>
 80082e8:	2e00      	cmp	r6, #0
 80082ea:	d04d      	beq.n	8008388 <_printf_i+0x1b4>
 80082ec:	4616      	mov	r6, r2
 80082ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80082f2:	fb03 5711 	mls	r7, r3, r1, r5
 80082f6:	5dc7      	ldrb	r7, [r0, r7]
 80082f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082fc:	462f      	mov	r7, r5
 80082fe:	42bb      	cmp	r3, r7
 8008300:	460d      	mov	r5, r1
 8008302:	d9f4      	bls.n	80082ee <_printf_i+0x11a>
 8008304:	2b08      	cmp	r3, #8
 8008306:	d10b      	bne.n	8008320 <_printf_i+0x14c>
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	07df      	lsls	r7, r3, #31
 800830c:	d508      	bpl.n	8008320 <_printf_i+0x14c>
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	6861      	ldr	r1, [r4, #4]
 8008312:	4299      	cmp	r1, r3
 8008314:	bfde      	ittt	le
 8008316:	2330      	movle	r3, #48	; 0x30
 8008318:	f806 3c01 	strble.w	r3, [r6, #-1]
 800831c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008320:	1b92      	subs	r2, r2, r6
 8008322:	6122      	str	r2, [r4, #16]
 8008324:	f8cd a000 	str.w	sl, [sp]
 8008328:	464b      	mov	r3, r9
 800832a:	aa03      	add	r2, sp, #12
 800832c:	4621      	mov	r1, r4
 800832e:	4640      	mov	r0, r8
 8008330:	f7ff fee2 	bl	80080f8 <_printf_common>
 8008334:	3001      	adds	r0, #1
 8008336:	d14c      	bne.n	80083d2 <_printf_i+0x1fe>
 8008338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800833c:	b004      	add	sp, #16
 800833e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008342:	4835      	ldr	r0, [pc, #212]	; (8008418 <_printf_i+0x244>)
 8008344:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	680e      	ldr	r6, [r1, #0]
 800834c:	061f      	lsls	r7, r3, #24
 800834e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008352:	600e      	str	r6, [r1, #0]
 8008354:	d514      	bpl.n	8008380 <_printf_i+0x1ac>
 8008356:	07d9      	lsls	r1, r3, #31
 8008358:	bf44      	itt	mi
 800835a:	f043 0320 	orrmi.w	r3, r3, #32
 800835e:	6023      	strmi	r3, [r4, #0]
 8008360:	b91d      	cbnz	r5, 800836a <_printf_i+0x196>
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	f023 0320 	bic.w	r3, r3, #32
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	2310      	movs	r3, #16
 800836c:	e7b0      	b.n	80082d0 <_printf_i+0xfc>
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	f043 0320 	orr.w	r3, r3, #32
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	2378      	movs	r3, #120	; 0x78
 8008378:	4828      	ldr	r0, [pc, #160]	; (800841c <_printf_i+0x248>)
 800837a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800837e:	e7e3      	b.n	8008348 <_printf_i+0x174>
 8008380:	065e      	lsls	r6, r3, #25
 8008382:	bf48      	it	mi
 8008384:	b2ad      	uxthmi	r5, r5
 8008386:	e7e6      	b.n	8008356 <_printf_i+0x182>
 8008388:	4616      	mov	r6, r2
 800838a:	e7bb      	b.n	8008304 <_printf_i+0x130>
 800838c:	680b      	ldr	r3, [r1, #0]
 800838e:	6826      	ldr	r6, [r4, #0]
 8008390:	6960      	ldr	r0, [r4, #20]
 8008392:	1d1d      	adds	r5, r3, #4
 8008394:	600d      	str	r5, [r1, #0]
 8008396:	0635      	lsls	r5, r6, #24
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	d501      	bpl.n	80083a0 <_printf_i+0x1cc>
 800839c:	6018      	str	r0, [r3, #0]
 800839e:	e002      	b.n	80083a6 <_printf_i+0x1d2>
 80083a0:	0671      	lsls	r1, r6, #25
 80083a2:	d5fb      	bpl.n	800839c <_printf_i+0x1c8>
 80083a4:	8018      	strh	r0, [r3, #0]
 80083a6:	2300      	movs	r3, #0
 80083a8:	6123      	str	r3, [r4, #16]
 80083aa:	4616      	mov	r6, r2
 80083ac:	e7ba      	b.n	8008324 <_printf_i+0x150>
 80083ae:	680b      	ldr	r3, [r1, #0]
 80083b0:	1d1a      	adds	r2, r3, #4
 80083b2:	600a      	str	r2, [r1, #0]
 80083b4:	681e      	ldr	r6, [r3, #0]
 80083b6:	6862      	ldr	r2, [r4, #4]
 80083b8:	2100      	movs	r1, #0
 80083ba:	4630      	mov	r0, r6
 80083bc:	f7f7 ff30 	bl	8000220 <memchr>
 80083c0:	b108      	cbz	r0, 80083c6 <_printf_i+0x1f2>
 80083c2:	1b80      	subs	r0, r0, r6
 80083c4:	6060      	str	r0, [r4, #4]
 80083c6:	6863      	ldr	r3, [r4, #4]
 80083c8:	6123      	str	r3, [r4, #16]
 80083ca:	2300      	movs	r3, #0
 80083cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083d0:	e7a8      	b.n	8008324 <_printf_i+0x150>
 80083d2:	6923      	ldr	r3, [r4, #16]
 80083d4:	4632      	mov	r2, r6
 80083d6:	4649      	mov	r1, r9
 80083d8:	4640      	mov	r0, r8
 80083da:	47d0      	blx	sl
 80083dc:	3001      	adds	r0, #1
 80083de:	d0ab      	beq.n	8008338 <_printf_i+0x164>
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	079b      	lsls	r3, r3, #30
 80083e4:	d413      	bmi.n	800840e <_printf_i+0x23a>
 80083e6:	68e0      	ldr	r0, [r4, #12]
 80083e8:	9b03      	ldr	r3, [sp, #12]
 80083ea:	4298      	cmp	r0, r3
 80083ec:	bfb8      	it	lt
 80083ee:	4618      	movlt	r0, r3
 80083f0:	e7a4      	b.n	800833c <_printf_i+0x168>
 80083f2:	2301      	movs	r3, #1
 80083f4:	4632      	mov	r2, r6
 80083f6:	4649      	mov	r1, r9
 80083f8:	4640      	mov	r0, r8
 80083fa:	47d0      	blx	sl
 80083fc:	3001      	adds	r0, #1
 80083fe:	d09b      	beq.n	8008338 <_printf_i+0x164>
 8008400:	3501      	adds	r5, #1
 8008402:	68e3      	ldr	r3, [r4, #12]
 8008404:	9903      	ldr	r1, [sp, #12]
 8008406:	1a5b      	subs	r3, r3, r1
 8008408:	42ab      	cmp	r3, r5
 800840a:	dcf2      	bgt.n	80083f2 <_printf_i+0x21e>
 800840c:	e7eb      	b.n	80083e6 <_printf_i+0x212>
 800840e:	2500      	movs	r5, #0
 8008410:	f104 0619 	add.w	r6, r4, #25
 8008414:	e7f5      	b.n	8008402 <_printf_i+0x22e>
 8008416:	bf00      	nop
 8008418:	0801073e 	.word	0x0801073e
 800841c:	0801074f 	.word	0x0801074f

08008420 <_scanf_float>:
 8008420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008424:	b087      	sub	sp, #28
 8008426:	4617      	mov	r7, r2
 8008428:	9303      	str	r3, [sp, #12]
 800842a:	688b      	ldr	r3, [r1, #8]
 800842c:	1e5a      	subs	r2, r3, #1
 800842e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008432:	bf83      	ittte	hi
 8008434:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008438:	195b      	addhi	r3, r3, r5
 800843a:	9302      	strhi	r3, [sp, #8]
 800843c:	2300      	movls	r3, #0
 800843e:	bf86      	itte	hi
 8008440:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008444:	608b      	strhi	r3, [r1, #8]
 8008446:	9302      	strls	r3, [sp, #8]
 8008448:	680b      	ldr	r3, [r1, #0]
 800844a:	468b      	mov	fp, r1
 800844c:	2500      	movs	r5, #0
 800844e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008452:	f84b 3b1c 	str.w	r3, [fp], #28
 8008456:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800845a:	4680      	mov	r8, r0
 800845c:	460c      	mov	r4, r1
 800845e:	465e      	mov	r6, fp
 8008460:	46aa      	mov	sl, r5
 8008462:	46a9      	mov	r9, r5
 8008464:	9501      	str	r5, [sp, #4]
 8008466:	68a2      	ldr	r2, [r4, #8]
 8008468:	b152      	cbz	r2, 8008480 <_scanf_float+0x60>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	2b4e      	cmp	r3, #78	; 0x4e
 8008470:	d864      	bhi.n	800853c <_scanf_float+0x11c>
 8008472:	2b40      	cmp	r3, #64	; 0x40
 8008474:	d83c      	bhi.n	80084f0 <_scanf_float+0xd0>
 8008476:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800847a:	b2c8      	uxtb	r0, r1
 800847c:	280e      	cmp	r0, #14
 800847e:	d93a      	bls.n	80084f6 <_scanf_float+0xd6>
 8008480:	f1b9 0f00 	cmp.w	r9, #0
 8008484:	d003      	beq.n	800848e <_scanf_float+0x6e>
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008492:	f1ba 0f01 	cmp.w	sl, #1
 8008496:	f200 8113 	bhi.w	80086c0 <_scanf_float+0x2a0>
 800849a:	455e      	cmp	r6, fp
 800849c:	f200 8105 	bhi.w	80086aa <_scanf_float+0x28a>
 80084a0:	2501      	movs	r5, #1
 80084a2:	4628      	mov	r0, r5
 80084a4:	b007      	add	sp, #28
 80084a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084aa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80084ae:	2a0d      	cmp	r2, #13
 80084b0:	d8e6      	bhi.n	8008480 <_scanf_float+0x60>
 80084b2:	a101      	add	r1, pc, #4	; (adr r1, 80084b8 <_scanf_float+0x98>)
 80084b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084b8:	080085f7 	.word	0x080085f7
 80084bc:	08008481 	.word	0x08008481
 80084c0:	08008481 	.word	0x08008481
 80084c4:	08008481 	.word	0x08008481
 80084c8:	08008657 	.word	0x08008657
 80084cc:	0800862f 	.word	0x0800862f
 80084d0:	08008481 	.word	0x08008481
 80084d4:	08008481 	.word	0x08008481
 80084d8:	08008605 	.word	0x08008605
 80084dc:	08008481 	.word	0x08008481
 80084e0:	08008481 	.word	0x08008481
 80084e4:	08008481 	.word	0x08008481
 80084e8:	08008481 	.word	0x08008481
 80084ec:	080085bd 	.word	0x080085bd
 80084f0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80084f4:	e7db      	b.n	80084ae <_scanf_float+0x8e>
 80084f6:	290e      	cmp	r1, #14
 80084f8:	d8c2      	bhi.n	8008480 <_scanf_float+0x60>
 80084fa:	a001      	add	r0, pc, #4	; (adr r0, 8008500 <_scanf_float+0xe0>)
 80084fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008500:	080085af 	.word	0x080085af
 8008504:	08008481 	.word	0x08008481
 8008508:	080085af 	.word	0x080085af
 800850c:	08008643 	.word	0x08008643
 8008510:	08008481 	.word	0x08008481
 8008514:	0800855d 	.word	0x0800855d
 8008518:	08008599 	.word	0x08008599
 800851c:	08008599 	.word	0x08008599
 8008520:	08008599 	.word	0x08008599
 8008524:	08008599 	.word	0x08008599
 8008528:	08008599 	.word	0x08008599
 800852c:	08008599 	.word	0x08008599
 8008530:	08008599 	.word	0x08008599
 8008534:	08008599 	.word	0x08008599
 8008538:	08008599 	.word	0x08008599
 800853c:	2b6e      	cmp	r3, #110	; 0x6e
 800853e:	d809      	bhi.n	8008554 <_scanf_float+0x134>
 8008540:	2b60      	cmp	r3, #96	; 0x60
 8008542:	d8b2      	bhi.n	80084aa <_scanf_float+0x8a>
 8008544:	2b54      	cmp	r3, #84	; 0x54
 8008546:	d077      	beq.n	8008638 <_scanf_float+0x218>
 8008548:	2b59      	cmp	r3, #89	; 0x59
 800854a:	d199      	bne.n	8008480 <_scanf_float+0x60>
 800854c:	2d07      	cmp	r5, #7
 800854e:	d197      	bne.n	8008480 <_scanf_float+0x60>
 8008550:	2508      	movs	r5, #8
 8008552:	e029      	b.n	80085a8 <_scanf_float+0x188>
 8008554:	2b74      	cmp	r3, #116	; 0x74
 8008556:	d06f      	beq.n	8008638 <_scanf_float+0x218>
 8008558:	2b79      	cmp	r3, #121	; 0x79
 800855a:	e7f6      	b.n	800854a <_scanf_float+0x12a>
 800855c:	6821      	ldr	r1, [r4, #0]
 800855e:	05c8      	lsls	r0, r1, #23
 8008560:	d51a      	bpl.n	8008598 <_scanf_float+0x178>
 8008562:	9b02      	ldr	r3, [sp, #8]
 8008564:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008568:	6021      	str	r1, [r4, #0]
 800856a:	f109 0901 	add.w	r9, r9, #1
 800856e:	b11b      	cbz	r3, 8008578 <_scanf_float+0x158>
 8008570:	3b01      	subs	r3, #1
 8008572:	3201      	adds	r2, #1
 8008574:	9302      	str	r3, [sp, #8]
 8008576:	60a2      	str	r2, [r4, #8]
 8008578:	68a3      	ldr	r3, [r4, #8]
 800857a:	3b01      	subs	r3, #1
 800857c:	60a3      	str	r3, [r4, #8]
 800857e:	6923      	ldr	r3, [r4, #16]
 8008580:	3301      	adds	r3, #1
 8008582:	6123      	str	r3, [r4, #16]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3b01      	subs	r3, #1
 8008588:	2b00      	cmp	r3, #0
 800858a:	607b      	str	r3, [r7, #4]
 800858c:	f340 8084 	ble.w	8008698 <_scanf_float+0x278>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	3301      	adds	r3, #1
 8008594:	603b      	str	r3, [r7, #0]
 8008596:	e766      	b.n	8008466 <_scanf_float+0x46>
 8008598:	eb1a 0f05 	cmn.w	sl, r5
 800859c:	f47f af70 	bne.w	8008480 <_scanf_float+0x60>
 80085a0:	6822      	ldr	r2, [r4, #0]
 80085a2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80085a6:	6022      	str	r2, [r4, #0]
 80085a8:	f806 3b01 	strb.w	r3, [r6], #1
 80085ac:	e7e4      	b.n	8008578 <_scanf_float+0x158>
 80085ae:	6822      	ldr	r2, [r4, #0]
 80085b0:	0610      	lsls	r0, r2, #24
 80085b2:	f57f af65 	bpl.w	8008480 <_scanf_float+0x60>
 80085b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085ba:	e7f4      	b.n	80085a6 <_scanf_float+0x186>
 80085bc:	f1ba 0f00 	cmp.w	sl, #0
 80085c0:	d10e      	bne.n	80085e0 <_scanf_float+0x1c0>
 80085c2:	f1b9 0f00 	cmp.w	r9, #0
 80085c6:	d10e      	bne.n	80085e6 <_scanf_float+0x1c6>
 80085c8:	6822      	ldr	r2, [r4, #0]
 80085ca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085ce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085d2:	d108      	bne.n	80085e6 <_scanf_float+0x1c6>
 80085d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085d8:	6022      	str	r2, [r4, #0]
 80085da:	f04f 0a01 	mov.w	sl, #1
 80085de:	e7e3      	b.n	80085a8 <_scanf_float+0x188>
 80085e0:	f1ba 0f02 	cmp.w	sl, #2
 80085e4:	d055      	beq.n	8008692 <_scanf_float+0x272>
 80085e6:	2d01      	cmp	r5, #1
 80085e8:	d002      	beq.n	80085f0 <_scanf_float+0x1d0>
 80085ea:	2d04      	cmp	r5, #4
 80085ec:	f47f af48 	bne.w	8008480 <_scanf_float+0x60>
 80085f0:	3501      	adds	r5, #1
 80085f2:	b2ed      	uxtb	r5, r5
 80085f4:	e7d8      	b.n	80085a8 <_scanf_float+0x188>
 80085f6:	f1ba 0f01 	cmp.w	sl, #1
 80085fa:	f47f af41 	bne.w	8008480 <_scanf_float+0x60>
 80085fe:	f04f 0a02 	mov.w	sl, #2
 8008602:	e7d1      	b.n	80085a8 <_scanf_float+0x188>
 8008604:	b97d      	cbnz	r5, 8008626 <_scanf_float+0x206>
 8008606:	f1b9 0f00 	cmp.w	r9, #0
 800860a:	f47f af3c 	bne.w	8008486 <_scanf_float+0x66>
 800860e:	6822      	ldr	r2, [r4, #0]
 8008610:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008614:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008618:	f47f af39 	bne.w	800848e <_scanf_float+0x6e>
 800861c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008620:	6022      	str	r2, [r4, #0]
 8008622:	2501      	movs	r5, #1
 8008624:	e7c0      	b.n	80085a8 <_scanf_float+0x188>
 8008626:	2d03      	cmp	r5, #3
 8008628:	d0e2      	beq.n	80085f0 <_scanf_float+0x1d0>
 800862a:	2d05      	cmp	r5, #5
 800862c:	e7de      	b.n	80085ec <_scanf_float+0x1cc>
 800862e:	2d02      	cmp	r5, #2
 8008630:	f47f af26 	bne.w	8008480 <_scanf_float+0x60>
 8008634:	2503      	movs	r5, #3
 8008636:	e7b7      	b.n	80085a8 <_scanf_float+0x188>
 8008638:	2d06      	cmp	r5, #6
 800863a:	f47f af21 	bne.w	8008480 <_scanf_float+0x60>
 800863e:	2507      	movs	r5, #7
 8008640:	e7b2      	b.n	80085a8 <_scanf_float+0x188>
 8008642:	6822      	ldr	r2, [r4, #0]
 8008644:	0591      	lsls	r1, r2, #22
 8008646:	f57f af1b 	bpl.w	8008480 <_scanf_float+0x60>
 800864a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800864e:	6022      	str	r2, [r4, #0]
 8008650:	f8cd 9004 	str.w	r9, [sp, #4]
 8008654:	e7a8      	b.n	80085a8 <_scanf_float+0x188>
 8008656:	6822      	ldr	r2, [r4, #0]
 8008658:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800865c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008660:	d006      	beq.n	8008670 <_scanf_float+0x250>
 8008662:	0550      	lsls	r0, r2, #21
 8008664:	f57f af0c 	bpl.w	8008480 <_scanf_float+0x60>
 8008668:	f1b9 0f00 	cmp.w	r9, #0
 800866c:	f43f af0f 	beq.w	800848e <_scanf_float+0x6e>
 8008670:	0591      	lsls	r1, r2, #22
 8008672:	bf58      	it	pl
 8008674:	9901      	ldrpl	r1, [sp, #4]
 8008676:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800867a:	bf58      	it	pl
 800867c:	eba9 0101 	subpl.w	r1, r9, r1
 8008680:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008684:	bf58      	it	pl
 8008686:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800868a:	6022      	str	r2, [r4, #0]
 800868c:	f04f 0900 	mov.w	r9, #0
 8008690:	e78a      	b.n	80085a8 <_scanf_float+0x188>
 8008692:	f04f 0a03 	mov.w	sl, #3
 8008696:	e787      	b.n	80085a8 <_scanf_float+0x188>
 8008698:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800869c:	4639      	mov	r1, r7
 800869e:	4640      	mov	r0, r8
 80086a0:	4798      	blx	r3
 80086a2:	2800      	cmp	r0, #0
 80086a4:	f43f aedf 	beq.w	8008466 <_scanf_float+0x46>
 80086a8:	e6ea      	b.n	8008480 <_scanf_float+0x60>
 80086aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086b2:	463a      	mov	r2, r7
 80086b4:	4640      	mov	r0, r8
 80086b6:	4798      	blx	r3
 80086b8:	6923      	ldr	r3, [r4, #16]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	6123      	str	r3, [r4, #16]
 80086be:	e6ec      	b.n	800849a <_scanf_float+0x7a>
 80086c0:	1e6b      	subs	r3, r5, #1
 80086c2:	2b06      	cmp	r3, #6
 80086c4:	d825      	bhi.n	8008712 <_scanf_float+0x2f2>
 80086c6:	2d02      	cmp	r5, #2
 80086c8:	d836      	bhi.n	8008738 <_scanf_float+0x318>
 80086ca:	455e      	cmp	r6, fp
 80086cc:	f67f aee8 	bls.w	80084a0 <_scanf_float+0x80>
 80086d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086d4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086d8:	463a      	mov	r2, r7
 80086da:	4640      	mov	r0, r8
 80086dc:	4798      	blx	r3
 80086de:	6923      	ldr	r3, [r4, #16]
 80086e0:	3b01      	subs	r3, #1
 80086e2:	6123      	str	r3, [r4, #16]
 80086e4:	e7f1      	b.n	80086ca <_scanf_float+0x2aa>
 80086e6:	9802      	ldr	r0, [sp, #8]
 80086e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086ec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80086f0:	9002      	str	r0, [sp, #8]
 80086f2:	463a      	mov	r2, r7
 80086f4:	4640      	mov	r0, r8
 80086f6:	4798      	blx	r3
 80086f8:	6923      	ldr	r3, [r4, #16]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	6123      	str	r3, [r4, #16]
 80086fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008702:	fa5f fa8a 	uxtb.w	sl, sl
 8008706:	f1ba 0f02 	cmp.w	sl, #2
 800870a:	d1ec      	bne.n	80086e6 <_scanf_float+0x2c6>
 800870c:	3d03      	subs	r5, #3
 800870e:	b2ed      	uxtb	r5, r5
 8008710:	1b76      	subs	r6, r6, r5
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	05da      	lsls	r2, r3, #23
 8008716:	d52f      	bpl.n	8008778 <_scanf_float+0x358>
 8008718:	055b      	lsls	r3, r3, #21
 800871a:	d510      	bpl.n	800873e <_scanf_float+0x31e>
 800871c:	455e      	cmp	r6, fp
 800871e:	f67f aebf 	bls.w	80084a0 <_scanf_float+0x80>
 8008722:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008726:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800872a:	463a      	mov	r2, r7
 800872c:	4640      	mov	r0, r8
 800872e:	4798      	blx	r3
 8008730:	6923      	ldr	r3, [r4, #16]
 8008732:	3b01      	subs	r3, #1
 8008734:	6123      	str	r3, [r4, #16]
 8008736:	e7f1      	b.n	800871c <_scanf_float+0x2fc>
 8008738:	46aa      	mov	sl, r5
 800873a:	9602      	str	r6, [sp, #8]
 800873c:	e7df      	b.n	80086fe <_scanf_float+0x2de>
 800873e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	2965      	cmp	r1, #101	; 0x65
 8008746:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800874a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800874e:	6123      	str	r3, [r4, #16]
 8008750:	d00c      	beq.n	800876c <_scanf_float+0x34c>
 8008752:	2945      	cmp	r1, #69	; 0x45
 8008754:	d00a      	beq.n	800876c <_scanf_float+0x34c>
 8008756:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800875a:	463a      	mov	r2, r7
 800875c:	4640      	mov	r0, r8
 800875e:	4798      	blx	r3
 8008760:	6923      	ldr	r3, [r4, #16]
 8008762:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008766:	3b01      	subs	r3, #1
 8008768:	1eb5      	subs	r5, r6, #2
 800876a:	6123      	str	r3, [r4, #16]
 800876c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008770:	463a      	mov	r2, r7
 8008772:	4640      	mov	r0, r8
 8008774:	4798      	blx	r3
 8008776:	462e      	mov	r6, r5
 8008778:	6825      	ldr	r5, [r4, #0]
 800877a:	f015 0510 	ands.w	r5, r5, #16
 800877e:	d158      	bne.n	8008832 <_scanf_float+0x412>
 8008780:	7035      	strb	r5, [r6, #0]
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800878c:	d11c      	bne.n	80087c8 <_scanf_float+0x3a8>
 800878e:	9b01      	ldr	r3, [sp, #4]
 8008790:	454b      	cmp	r3, r9
 8008792:	eba3 0209 	sub.w	r2, r3, r9
 8008796:	d124      	bne.n	80087e2 <_scanf_float+0x3c2>
 8008798:	2200      	movs	r2, #0
 800879a:	4659      	mov	r1, fp
 800879c:	4640      	mov	r0, r8
 800879e:	f000 feb5 	bl	800950c <_strtod_r>
 80087a2:	9b03      	ldr	r3, [sp, #12]
 80087a4:	6821      	ldr	r1, [r4, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f011 0f02 	tst.w	r1, #2
 80087ac:	ec57 6b10 	vmov	r6, r7, d0
 80087b0:	f103 0204 	add.w	r2, r3, #4
 80087b4:	d020      	beq.n	80087f8 <_scanf_float+0x3d8>
 80087b6:	9903      	ldr	r1, [sp, #12]
 80087b8:	600a      	str	r2, [r1, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	e9c3 6700 	strd	r6, r7, [r3]
 80087c0:	68e3      	ldr	r3, [r4, #12]
 80087c2:	3301      	adds	r3, #1
 80087c4:	60e3      	str	r3, [r4, #12]
 80087c6:	e66c      	b.n	80084a2 <_scanf_float+0x82>
 80087c8:	9b04      	ldr	r3, [sp, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d0e4      	beq.n	8008798 <_scanf_float+0x378>
 80087ce:	9905      	ldr	r1, [sp, #20]
 80087d0:	230a      	movs	r3, #10
 80087d2:	462a      	mov	r2, r5
 80087d4:	3101      	adds	r1, #1
 80087d6:	4640      	mov	r0, r8
 80087d8:	f000 ff22 	bl	8009620 <_strtol_r>
 80087dc:	9b04      	ldr	r3, [sp, #16]
 80087de:	9e05      	ldr	r6, [sp, #20]
 80087e0:	1ac2      	subs	r2, r0, r3
 80087e2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80087e6:	429e      	cmp	r6, r3
 80087e8:	bf28      	it	cs
 80087ea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80087ee:	4912      	ldr	r1, [pc, #72]	; (8008838 <_scanf_float+0x418>)
 80087f0:	4630      	mov	r0, r6
 80087f2:	f000 f843 	bl	800887c <siprintf>
 80087f6:	e7cf      	b.n	8008798 <_scanf_float+0x378>
 80087f8:	f011 0f04 	tst.w	r1, #4
 80087fc:	9903      	ldr	r1, [sp, #12]
 80087fe:	600a      	str	r2, [r1, #0]
 8008800:	d1db      	bne.n	80087ba <_scanf_float+0x39a>
 8008802:	f8d3 8000 	ldr.w	r8, [r3]
 8008806:	ee10 2a10 	vmov	r2, s0
 800880a:	ee10 0a10 	vmov	r0, s0
 800880e:	463b      	mov	r3, r7
 8008810:	4639      	mov	r1, r7
 8008812:	f7f8 f9ab 	bl	8000b6c <__aeabi_dcmpun>
 8008816:	b128      	cbz	r0, 8008824 <_scanf_float+0x404>
 8008818:	4808      	ldr	r0, [pc, #32]	; (800883c <_scanf_float+0x41c>)
 800881a:	f000 f829 	bl	8008870 <nanf>
 800881e:	ed88 0a00 	vstr	s0, [r8]
 8008822:	e7cd      	b.n	80087c0 <_scanf_float+0x3a0>
 8008824:	4630      	mov	r0, r6
 8008826:	4639      	mov	r1, r7
 8008828:	f7f8 f9fe 	bl	8000c28 <__aeabi_d2f>
 800882c:	f8c8 0000 	str.w	r0, [r8]
 8008830:	e7c6      	b.n	80087c0 <_scanf_float+0x3a0>
 8008832:	2500      	movs	r5, #0
 8008834:	e635      	b.n	80084a2 <_scanf_float+0x82>
 8008836:	bf00      	nop
 8008838:	08010760 	.word	0x08010760
 800883c:	08010b78 	.word	0x08010b78

08008840 <realloc>:
 8008840:	4b02      	ldr	r3, [pc, #8]	; (800884c <realloc+0xc>)
 8008842:	460a      	mov	r2, r1
 8008844:	4601      	mov	r1, r0
 8008846:	6818      	ldr	r0, [r3, #0]
 8008848:	f002 bdb3 	b.w	800b3b2 <_realloc_r>
 800884c:	2000000c 	.word	0x2000000c

08008850 <_sbrk_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4d06      	ldr	r5, [pc, #24]	; (800886c <_sbrk_r+0x1c>)
 8008854:	2300      	movs	r3, #0
 8008856:	4604      	mov	r4, r0
 8008858:	4608      	mov	r0, r1
 800885a:	602b      	str	r3, [r5, #0]
 800885c:	f7f9 fc54 	bl	8002108 <_sbrk>
 8008860:	1c43      	adds	r3, r0, #1
 8008862:	d102      	bne.n	800886a <_sbrk_r+0x1a>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	b103      	cbz	r3, 800886a <_sbrk_r+0x1a>
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	20000968 	.word	0x20000968

08008870 <nanf>:
 8008870:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008878 <nanf+0x8>
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	7fc00000 	.word	0x7fc00000

0800887c <siprintf>:
 800887c:	b40e      	push	{r1, r2, r3}
 800887e:	b500      	push	{lr}
 8008880:	b09c      	sub	sp, #112	; 0x70
 8008882:	ab1d      	add	r3, sp, #116	; 0x74
 8008884:	9002      	str	r0, [sp, #8]
 8008886:	9006      	str	r0, [sp, #24]
 8008888:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800888c:	4809      	ldr	r0, [pc, #36]	; (80088b4 <siprintf+0x38>)
 800888e:	9107      	str	r1, [sp, #28]
 8008890:	9104      	str	r1, [sp, #16]
 8008892:	4909      	ldr	r1, [pc, #36]	; (80088b8 <siprintf+0x3c>)
 8008894:	f853 2b04 	ldr.w	r2, [r3], #4
 8008898:	9105      	str	r1, [sp, #20]
 800889a:	6800      	ldr	r0, [r0, #0]
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	a902      	add	r1, sp, #8
 80088a0:	f002 fe08 	bl	800b4b4 <_svfiprintf_r>
 80088a4:	9b02      	ldr	r3, [sp, #8]
 80088a6:	2200      	movs	r2, #0
 80088a8:	701a      	strb	r2, [r3, #0]
 80088aa:	b01c      	add	sp, #112	; 0x70
 80088ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80088b0:	b003      	add	sp, #12
 80088b2:	4770      	bx	lr
 80088b4:	2000000c 	.word	0x2000000c
 80088b8:	ffff0208 	.word	0xffff0208

080088bc <sulp>:
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	4604      	mov	r4, r0
 80088c0:	460d      	mov	r5, r1
 80088c2:	ec45 4b10 	vmov	d0, r4, r5
 80088c6:	4616      	mov	r6, r2
 80088c8:	f002 fc24 	bl	800b114 <__ulp>
 80088cc:	ec51 0b10 	vmov	r0, r1, d0
 80088d0:	b17e      	cbz	r6, 80088f2 <sulp+0x36>
 80088d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80088d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80088da:	2b00      	cmp	r3, #0
 80088dc:	dd09      	ble.n	80088f2 <sulp+0x36>
 80088de:	051b      	lsls	r3, r3, #20
 80088e0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80088e4:	2400      	movs	r4, #0
 80088e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80088ea:	4622      	mov	r2, r4
 80088ec:	462b      	mov	r3, r5
 80088ee:	f7f7 fea3 	bl	8000638 <__aeabi_dmul>
 80088f2:	bd70      	pop	{r4, r5, r6, pc}
 80088f4:	0000      	movs	r0, r0
	...

080088f8 <_strtod_l>:
 80088f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	b0a3      	sub	sp, #140	; 0x8c
 80088fe:	461f      	mov	r7, r3
 8008900:	2300      	movs	r3, #0
 8008902:	931e      	str	r3, [sp, #120]	; 0x78
 8008904:	4ba4      	ldr	r3, [pc, #656]	; (8008b98 <_strtod_l+0x2a0>)
 8008906:	9219      	str	r2, [sp, #100]	; 0x64
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	9307      	str	r3, [sp, #28]
 800890c:	4604      	mov	r4, r0
 800890e:	4618      	mov	r0, r3
 8008910:	4688      	mov	r8, r1
 8008912:	f7f7 fc7d 	bl	8000210 <strlen>
 8008916:	f04f 0a00 	mov.w	sl, #0
 800891a:	4605      	mov	r5, r0
 800891c:	f04f 0b00 	mov.w	fp, #0
 8008920:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008924:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008926:	781a      	ldrb	r2, [r3, #0]
 8008928:	2a2b      	cmp	r2, #43	; 0x2b
 800892a:	d04c      	beq.n	80089c6 <_strtod_l+0xce>
 800892c:	d839      	bhi.n	80089a2 <_strtod_l+0xaa>
 800892e:	2a0d      	cmp	r2, #13
 8008930:	d832      	bhi.n	8008998 <_strtod_l+0xa0>
 8008932:	2a08      	cmp	r2, #8
 8008934:	d832      	bhi.n	800899c <_strtod_l+0xa4>
 8008936:	2a00      	cmp	r2, #0
 8008938:	d03c      	beq.n	80089b4 <_strtod_l+0xbc>
 800893a:	2300      	movs	r3, #0
 800893c:	930e      	str	r3, [sp, #56]	; 0x38
 800893e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008940:	7833      	ldrb	r3, [r6, #0]
 8008942:	2b30      	cmp	r3, #48	; 0x30
 8008944:	f040 80b4 	bne.w	8008ab0 <_strtod_l+0x1b8>
 8008948:	7873      	ldrb	r3, [r6, #1]
 800894a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800894e:	2b58      	cmp	r3, #88	; 0x58
 8008950:	d16c      	bne.n	8008a2c <_strtod_l+0x134>
 8008952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	ab1e      	add	r3, sp, #120	; 0x78
 8008958:	9702      	str	r7, [sp, #8]
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	4a8f      	ldr	r2, [pc, #572]	; (8008b9c <_strtod_l+0x2a4>)
 800895e:	ab1f      	add	r3, sp, #124	; 0x7c
 8008960:	a91d      	add	r1, sp, #116	; 0x74
 8008962:	4620      	mov	r0, r4
 8008964:	f001 fd40 	bl	800a3e8 <__gethex>
 8008968:	f010 0707 	ands.w	r7, r0, #7
 800896c:	4605      	mov	r5, r0
 800896e:	d005      	beq.n	800897c <_strtod_l+0x84>
 8008970:	2f06      	cmp	r7, #6
 8008972:	d12a      	bne.n	80089ca <_strtod_l+0xd2>
 8008974:	3601      	adds	r6, #1
 8008976:	2300      	movs	r3, #0
 8008978:	961d      	str	r6, [sp, #116]	; 0x74
 800897a:	930e      	str	r3, [sp, #56]	; 0x38
 800897c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800897e:	2b00      	cmp	r3, #0
 8008980:	f040 8596 	bne.w	80094b0 <_strtod_l+0xbb8>
 8008984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008986:	b1db      	cbz	r3, 80089c0 <_strtod_l+0xc8>
 8008988:	4652      	mov	r2, sl
 800898a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800898e:	ec43 2b10 	vmov	d0, r2, r3
 8008992:	b023      	add	sp, #140	; 0x8c
 8008994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008998:	2a20      	cmp	r2, #32
 800899a:	d1ce      	bne.n	800893a <_strtod_l+0x42>
 800899c:	3301      	adds	r3, #1
 800899e:	931d      	str	r3, [sp, #116]	; 0x74
 80089a0:	e7c0      	b.n	8008924 <_strtod_l+0x2c>
 80089a2:	2a2d      	cmp	r2, #45	; 0x2d
 80089a4:	d1c9      	bne.n	800893a <_strtod_l+0x42>
 80089a6:	2201      	movs	r2, #1
 80089a8:	920e      	str	r2, [sp, #56]	; 0x38
 80089aa:	1c5a      	adds	r2, r3, #1
 80089ac:	921d      	str	r2, [sp, #116]	; 0x74
 80089ae:	785b      	ldrb	r3, [r3, #1]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1c4      	bne.n	800893e <_strtod_l+0x46>
 80089b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089b6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f040 8576 	bne.w	80094ac <_strtod_l+0xbb4>
 80089c0:	4652      	mov	r2, sl
 80089c2:	465b      	mov	r3, fp
 80089c4:	e7e3      	b.n	800898e <_strtod_l+0x96>
 80089c6:	2200      	movs	r2, #0
 80089c8:	e7ee      	b.n	80089a8 <_strtod_l+0xb0>
 80089ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80089cc:	b13a      	cbz	r2, 80089de <_strtod_l+0xe6>
 80089ce:	2135      	movs	r1, #53	; 0x35
 80089d0:	a820      	add	r0, sp, #128	; 0x80
 80089d2:	f002 fcaa 	bl	800b32a <__copybits>
 80089d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80089d8:	4620      	mov	r0, r4
 80089da:	f002 f86f 	bl	800aabc <_Bfree>
 80089de:	3f01      	subs	r7, #1
 80089e0:	2f05      	cmp	r7, #5
 80089e2:	d807      	bhi.n	80089f4 <_strtod_l+0xfc>
 80089e4:	e8df f007 	tbb	[pc, r7]
 80089e8:	1d180b0e 	.word	0x1d180b0e
 80089ec:	030e      	.short	0x030e
 80089ee:	f04f 0b00 	mov.w	fp, #0
 80089f2:	46da      	mov	sl, fp
 80089f4:	0728      	lsls	r0, r5, #28
 80089f6:	d5c1      	bpl.n	800897c <_strtod_l+0x84>
 80089f8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80089fc:	e7be      	b.n	800897c <_strtod_l+0x84>
 80089fe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008a02:	e7f7      	b.n	80089f4 <_strtod_l+0xfc>
 8008a04:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008a08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008a0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a16:	e7ed      	b.n	80089f4 <_strtod_l+0xfc>
 8008a18:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008ba0 <_strtod_l+0x2a8>
 8008a1c:	f04f 0a00 	mov.w	sl, #0
 8008a20:	e7e8      	b.n	80089f4 <_strtod_l+0xfc>
 8008a22:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008a26:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008a2a:	e7e3      	b.n	80089f4 <_strtod_l+0xfc>
 8008a2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	921d      	str	r2, [sp, #116]	; 0x74
 8008a32:	785b      	ldrb	r3, [r3, #1]
 8008a34:	2b30      	cmp	r3, #48	; 0x30
 8008a36:	d0f9      	beq.n	8008a2c <_strtod_l+0x134>
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d09f      	beq.n	800897c <_strtod_l+0x84>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	f04f 0900 	mov.w	r9, #0
 8008a42:	9304      	str	r3, [sp, #16]
 8008a44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a46:	930a      	str	r3, [sp, #40]	; 0x28
 8008a48:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008a4c:	464f      	mov	r7, r9
 8008a4e:	220a      	movs	r2, #10
 8008a50:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008a52:	7806      	ldrb	r6, [r0, #0]
 8008a54:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008a58:	b2d9      	uxtb	r1, r3
 8008a5a:	2909      	cmp	r1, #9
 8008a5c:	d92a      	bls.n	8008ab4 <_strtod_l+0x1bc>
 8008a5e:	9907      	ldr	r1, [sp, #28]
 8008a60:	462a      	mov	r2, r5
 8008a62:	f002 fe31 	bl	800b6c8 <strncmp>
 8008a66:	b398      	cbz	r0, 8008ad0 <_strtod_l+0x1d8>
 8008a68:	2000      	movs	r0, #0
 8008a6a:	4633      	mov	r3, r6
 8008a6c:	463d      	mov	r5, r7
 8008a6e:	9007      	str	r0, [sp, #28]
 8008a70:	4602      	mov	r2, r0
 8008a72:	2b65      	cmp	r3, #101	; 0x65
 8008a74:	d001      	beq.n	8008a7a <_strtod_l+0x182>
 8008a76:	2b45      	cmp	r3, #69	; 0x45
 8008a78:	d118      	bne.n	8008aac <_strtod_l+0x1b4>
 8008a7a:	b91d      	cbnz	r5, 8008a84 <_strtod_l+0x18c>
 8008a7c:	9b04      	ldr	r3, [sp, #16]
 8008a7e:	4303      	orrs	r3, r0
 8008a80:	d098      	beq.n	80089b4 <_strtod_l+0xbc>
 8008a82:	2500      	movs	r5, #0
 8008a84:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008a88:	f108 0301 	add.w	r3, r8, #1
 8008a8c:	931d      	str	r3, [sp, #116]	; 0x74
 8008a8e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008a92:	2b2b      	cmp	r3, #43	; 0x2b
 8008a94:	d075      	beq.n	8008b82 <_strtod_l+0x28a>
 8008a96:	2b2d      	cmp	r3, #45	; 0x2d
 8008a98:	d07b      	beq.n	8008b92 <_strtod_l+0x29a>
 8008a9a:	f04f 0c00 	mov.w	ip, #0
 8008a9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008aa2:	2909      	cmp	r1, #9
 8008aa4:	f240 8082 	bls.w	8008bac <_strtod_l+0x2b4>
 8008aa8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008aac:	2600      	movs	r6, #0
 8008aae:	e09d      	b.n	8008bec <_strtod_l+0x2f4>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e7c4      	b.n	8008a3e <_strtod_l+0x146>
 8008ab4:	2f08      	cmp	r7, #8
 8008ab6:	bfd8      	it	le
 8008ab8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008aba:	f100 0001 	add.w	r0, r0, #1
 8008abe:	bfda      	itte	le
 8008ac0:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ac4:	9309      	strle	r3, [sp, #36]	; 0x24
 8008ac6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008aca:	3701      	adds	r7, #1
 8008acc:	901d      	str	r0, [sp, #116]	; 0x74
 8008ace:	e7bf      	b.n	8008a50 <_strtod_l+0x158>
 8008ad0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ad2:	195a      	adds	r2, r3, r5
 8008ad4:	921d      	str	r2, [sp, #116]	; 0x74
 8008ad6:	5d5b      	ldrb	r3, [r3, r5]
 8008ad8:	2f00      	cmp	r7, #0
 8008ada:	d037      	beq.n	8008b4c <_strtod_l+0x254>
 8008adc:	9007      	str	r0, [sp, #28]
 8008ade:	463d      	mov	r5, r7
 8008ae0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008ae4:	2a09      	cmp	r2, #9
 8008ae6:	d912      	bls.n	8008b0e <_strtod_l+0x216>
 8008ae8:	2201      	movs	r2, #1
 8008aea:	e7c2      	b.n	8008a72 <_strtod_l+0x17a>
 8008aec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	921d      	str	r2, [sp, #116]	; 0x74
 8008af2:	785b      	ldrb	r3, [r3, #1]
 8008af4:	3001      	adds	r0, #1
 8008af6:	2b30      	cmp	r3, #48	; 0x30
 8008af8:	d0f8      	beq.n	8008aec <_strtod_l+0x1f4>
 8008afa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008afe:	2a08      	cmp	r2, #8
 8008b00:	f200 84db 	bhi.w	80094ba <_strtod_l+0xbc2>
 8008b04:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008b06:	9007      	str	r0, [sp, #28]
 8008b08:	2000      	movs	r0, #0
 8008b0a:	920a      	str	r2, [sp, #40]	; 0x28
 8008b0c:	4605      	mov	r5, r0
 8008b0e:	3b30      	subs	r3, #48	; 0x30
 8008b10:	f100 0201 	add.w	r2, r0, #1
 8008b14:	d014      	beq.n	8008b40 <_strtod_l+0x248>
 8008b16:	9907      	ldr	r1, [sp, #28]
 8008b18:	4411      	add	r1, r2
 8008b1a:	9107      	str	r1, [sp, #28]
 8008b1c:	462a      	mov	r2, r5
 8008b1e:	eb00 0e05 	add.w	lr, r0, r5
 8008b22:	210a      	movs	r1, #10
 8008b24:	4572      	cmp	r2, lr
 8008b26:	d113      	bne.n	8008b50 <_strtod_l+0x258>
 8008b28:	182a      	adds	r2, r5, r0
 8008b2a:	2a08      	cmp	r2, #8
 8008b2c:	f105 0501 	add.w	r5, r5, #1
 8008b30:	4405      	add	r5, r0
 8008b32:	dc1c      	bgt.n	8008b6e <_strtod_l+0x276>
 8008b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b36:	220a      	movs	r2, #10
 8008b38:	fb02 3301 	mla	r3, r2, r1, r3
 8008b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b3e:	2200      	movs	r2, #0
 8008b40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b42:	1c59      	adds	r1, r3, #1
 8008b44:	911d      	str	r1, [sp, #116]	; 0x74
 8008b46:	785b      	ldrb	r3, [r3, #1]
 8008b48:	4610      	mov	r0, r2
 8008b4a:	e7c9      	b.n	8008ae0 <_strtod_l+0x1e8>
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	e7d2      	b.n	8008af6 <_strtod_l+0x1fe>
 8008b50:	2a08      	cmp	r2, #8
 8008b52:	dc04      	bgt.n	8008b5e <_strtod_l+0x266>
 8008b54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008b56:	434e      	muls	r6, r1
 8008b58:	9609      	str	r6, [sp, #36]	; 0x24
 8008b5a:	3201      	adds	r2, #1
 8008b5c:	e7e2      	b.n	8008b24 <_strtod_l+0x22c>
 8008b5e:	f102 0c01 	add.w	ip, r2, #1
 8008b62:	f1bc 0f10 	cmp.w	ip, #16
 8008b66:	bfd8      	it	le
 8008b68:	fb01 f909 	mulle.w	r9, r1, r9
 8008b6c:	e7f5      	b.n	8008b5a <_strtod_l+0x262>
 8008b6e:	2d10      	cmp	r5, #16
 8008b70:	bfdc      	itt	le
 8008b72:	220a      	movle	r2, #10
 8008b74:	fb02 3909 	mlale	r9, r2, r9, r3
 8008b78:	e7e1      	b.n	8008b3e <_strtod_l+0x246>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	9307      	str	r3, [sp, #28]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	e77c      	b.n	8008a7c <_strtod_l+0x184>
 8008b82:	f04f 0c00 	mov.w	ip, #0
 8008b86:	f108 0302 	add.w	r3, r8, #2
 8008b8a:	931d      	str	r3, [sp, #116]	; 0x74
 8008b8c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008b90:	e785      	b.n	8008a9e <_strtod_l+0x1a6>
 8008b92:	f04f 0c01 	mov.w	ip, #1
 8008b96:	e7f6      	b.n	8008b86 <_strtod_l+0x28e>
 8008b98:	080109b8 	.word	0x080109b8
 8008b9c:	08010768 	.word	0x08010768
 8008ba0:	7ff00000 	.word	0x7ff00000
 8008ba4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ba6:	1c59      	adds	r1, r3, #1
 8008ba8:	911d      	str	r1, [sp, #116]	; 0x74
 8008baa:	785b      	ldrb	r3, [r3, #1]
 8008bac:	2b30      	cmp	r3, #48	; 0x30
 8008bae:	d0f9      	beq.n	8008ba4 <_strtod_l+0x2ac>
 8008bb0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008bb4:	2908      	cmp	r1, #8
 8008bb6:	f63f af79 	bhi.w	8008aac <_strtod_l+0x1b4>
 8008bba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008bbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bc0:	9308      	str	r3, [sp, #32]
 8008bc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bc4:	1c59      	adds	r1, r3, #1
 8008bc6:	911d      	str	r1, [sp, #116]	; 0x74
 8008bc8:	785b      	ldrb	r3, [r3, #1]
 8008bca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008bce:	2e09      	cmp	r6, #9
 8008bd0:	d937      	bls.n	8008c42 <_strtod_l+0x34a>
 8008bd2:	9e08      	ldr	r6, [sp, #32]
 8008bd4:	1b89      	subs	r1, r1, r6
 8008bd6:	2908      	cmp	r1, #8
 8008bd8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008bdc:	dc02      	bgt.n	8008be4 <_strtod_l+0x2ec>
 8008bde:	4576      	cmp	r6, lr
 8008be0:	bfa8      	it	ge
 8008be2:	4676      	movge	r6, lr
 8008be4:	f1bc 0f00 	cmp.w	ip, #0
 8008be8:	d000      	beq.n	8008bec <_strtod_l+0x2f4>
 8008bea:	4276      	negs	r6, r6
 8008bec:	2d00      	cmp	r5, #0
 8008bee:	d14f      	bne.n	8008c90 <_strtod_l+0x398>
 8008bf0:	9904      	ldr	r1, [sp, #16]
 8008bf2:	4301      	orrs	r1, r0
 8008bf4:	f47f aec2 	bne.w	800897c <_strtod_l+0x84>
 8008bf8:	2a00      	cmp	r2, #0
 8008bfa:	f47f aedb 	bne.w	80089b4 <_strtod_l+0xbc>
 8008bfe:	2b69      	cmp	r3, #105	; 0x69
 8008c00:	d027      	beq.n	8008c52 <_strtod_l+0x35a>
 8008c02:	dc24      	bgt.n	8008c4e <_strtod_l+0x356>
 8008c04:	2b49      	cmp	r3, #73	; 0x49
 8008c06:	d024      	beq.n	8008c52 <_strtod_l+0x35a>
 8008c08:	2b4e      	cmp	r3, #78	; 0x4e
 8008c0a:	f47f aed3 	bne.w	80089b4 <_strtod_l+0xbc>
 8008c0e:	499e      	ldr	r1, [pc, #632]	; (8008e88 <_strtod_l+0x590>)
 8008c10:	a81d      	add	r0, sp, #116	; 0x74
 8008c12:	f001 fe41 	bl	800a898 <__match>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	f43f aecc 	beq.w	80089b4 <_strtod_l+0xbc>
 8008c1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	2b28      	cmp	r3, #40	; 0x28
 8008c22:	d12d      	bne.n	8008c80 <_strtod_l+0x388>
 8008c24:	4999      	ldr	r1, [pc, #612]	; (8008e8c <_strtod_l+0x594>)
 8008c26:	aa20      	add	r2, sp, #128	; 0x80
 8008c28:	a81d      	add	r0, sp, #116	; 0x74
 8008c2a:	f001 fe49 	bl	800a8c0 <__hexnan>
 8008c2e:	2805      	cmp	r0, #5
 8008c30:	d126      	bne.n	8008c80 <_strtod_l+0x388>
 8008c32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c34:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008c38:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008c3c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008c40:	e69c      	b.n	800897c <_strtod_l+0x84>
 8008c42:	210a      	movs	r1, #10
 8008c44:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008c48:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008c4c:	e7b9      	b.n	8008bc2 <_strtod_l+0x2ca>
 8008c4e:	2b6e      	cmp	r3, #110	; 0x6e
 8008c50:	e7db      	b.n	8008c0a <_strtod_l+0x312>
 8008c52:	498f      	ldr	r1, [pc, #572]	; (8008e90 <_strtod_l+0x598>)
 8008c54:	a81d      	add	r0, sp, #116	; 0x74
 8008c56:	f001 fe1f 	bl	800a898 <__match>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	f43f aeaa 	beq.w	80089b4 <_strtod_l+0xbc>
 8008c60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c62:	498c      	ldr	r1, [pc, #560]	; (8008e94 <_strtod_l+0x59c>)
 8008c64:	3b01      	subs	r3, #1
 8008c66:	a81d      	add	r0, sp, #116	; 0x74
 8008c68:	931d      	str	r3, [sp, #116]	; 0x74
 8008c6a:	f001 fe15 	bl	800a898 <__match>
 8008c6e:	b910      	cbnz	r0, 8008c76 <_strtod_l+0x37e>
 8008c70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c72:	3301      	adds	r3, #1
 8008c74:	931d      	str	r3, [sp, #116]	; 0x74
 8008c76:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008ea4 <_strtod_l+0x5ac>
 8008c7a:	f04f 0a00 	mov.w	sl, #0
 8008c7e:	e67d      	b.n	800897c <_strtod_l+0x84>
 8008c80:	4885      	ldr	r0, [pc, #532]	; (8008e98 <_strtod_l+0x5a0>)
 8008c82:	f002 fd19 	bl	800b6b8 <nan>
 8008c86:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008c8a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008c8e:	e675      	b.n	800897c <_strtod_l+0x84>
 8008c90:	9b07      	ldr	r3, [sp, #28]
 8008c92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c94:	1af3      	subs	r3, r6, r3
 8008c96:	2f00      	cmp	r7, #0
 8008c98:	bf08      	it	eq
 8008c9a:	462f      	moveq	r7, r5
 8008c9c:	2d10      	cmp	r5, #16
 8008c9e:	9308      	str	r3, [sp, #32]
 8008ca0:	46a8      	mov	r8, r5
 8008ca2:	bfa8      	it	ge
 8008ca4:	f04f 0810 	movge.w	r8, #16
 8008ca8:	f7f7 fc4c 	bl	8000544 <__aeabi_ui2d>
 8008cac:	2d09      	cmp	r5, #9
 8008cae:	4682      	mov	sl, r0
 8008cb0:	468b      	mov	fp, r1
 8008cb2:	dd13      	ble.n	8008cdc <_strtod_l+0x3e4>
 8008cb4:	4b79      	ldr	r3, [pc, #484]	; (8008e9c <_strtod_l+0x5a4>)
 8008cb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008cba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008cbe:	f7f7 fcbb 	bl	8000638 <__aeabi_dmul>
 8008cc2:	4682      	mov	sl, r0
 8008cc4:	4648      	mov	r0, r9
 8008cc6:	468b      	mov	fp, r1
 8008cc8:	f7f7 fc3c 	bl	8000544 <__aeabi_ui2d>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	4650      	mov	r0, sl
 8008cd2:	4659      	mov	r1, fp
 8008cd4:	f7f7 fafa 	bl	80002cc <__adddf3>
 8008cd8:	4682      	mov	sl, r0
 8008cda:	468b      	mov	fp, r1
 8008cdc:	2d0f      	cmp	r5, #15
 8008cde:	dc38      	bgt.n	8008d52 <_strtod_l+0x45a>
 8008ce0:	9b08      	ldr	r3, [sp, #32]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f43f ae4a 	beq.w	800897c <_strtod_l+0x84>
 8008ce8:	dd24      	ble.n	8008d34 <_strtod_l+0x43c>
 8008cea:	2b16      	cmp	r3, #22
 8008cec:	dc0b      	bgt.n	8008d06 <_strtod_l+0x40e>
 8008cee:	4d6b      	ldr	r5, [pc, #428]	; (8008e9c <_strtod_l+0x5a4>)
 8008cf0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008cf4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008cf8:	4652      	mov	r2, sl
 8008cfa:	465b      	mov	r3, fp
 8008cfc:	f7f7 fc9c 	bl	8000638 <__aeabi_dmul>
 8008d00:	4682      	mov	sl, r0
 8008d02:	468b      	mov	fp, r1
 8008d04:	e63a      	b.n	800897c <_strtod_l+0x84>
 8008d06:	9a08      	ldr	r2, [sp, #32]
 8008d08:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	db20      	blt.n	8008d52 <_strtod_l+0x45a>
 8008d10:	4c62      	ldr	r4, [pc, #392]	; (8008e9c <_strtod_l+0x5a4>)
 8008d12:	f1c5 050f 	rsb	r5, r5, #15
 8008d16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008d1a:	4652      	mov	r2, sl
 8008d1c:	465b      	mov	r3, fp
 8008d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d22:	f7f7 fc89 	bl	8000638 <__aeabi_dmul>
 8008d26:	9b08      	ldr	r3, [sp, #32]
 8008d28:	1b5d      	subs	r5, r3, r5
 8008d2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008d2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008d32:	e7e3      	b.n	8008cfc <_strtod_l+0x404>
 8008d34:	9b08      	ldr	r3, [sp, #32]
 8008d36:	3316      	adds	r3, #22
 8008d38:	db0b      	blt.n	8008d52 <_strtod_l+0x45a>
 8008d3a:	9b07      	ldr	r3, [sp, #28]
 8008d3c:	4a57      	ldr	r2, [pc, #348]	; (8008e9c <_strtod_l+0x5a4>)
 8008d3e:	1b9e      	subs	r6, r3, r6
 8008d40:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008d44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d48:	4650      	mov	r0, sl
 8008d4a:	4659      	mov	r1, fp
 8008d4c:	f7f7 fd9e 	bl	800088c <__aeabi_ddiv>
 8008d50:	e7d6      	b.n	8008d00 <_strtod_l+0x408>
 8008d52:	9b08      	ldr	r3, [sp, #32]
 8008d54:	eba5 0808 	sub.w	r8, r5, r8
 8008d58:	4498      	add	r8, r3
 8008d5a:	f1b8 0f00 	cmp.w	r8, #0
 8008d5e:	dd71      	ble.n	8008e44 <_strtod_l+0x54c>
 8008d60:	f018 030f 	ands.w	r3, r8, #15
 8008d64:	d00a      	beq.n	8008d7c <_strtod_l+0x484>
 8008d66:	494d      	ldr	r1, [pc, #308]	; (8008e9c <_strtod_l+0x5a4>)
 8008d68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d6c:	4652      	mov	r2, sl
 8008d6e:	465b      	mov	r3, fp
 8008d70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d74:	f7f7 fc60 	bl	8000638 <__aeabi_dmul>
 8008d78:	4682      	mov	sl, r0
 8008d7a:	468b      	mov	fp, r1
 8008d7c:	f038 080f 	bics.w	r8, r8, #15
 8008d80:	d04d      	beq.n	8008e1e <_strtod_l+0x526>
 8008d82:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008d86:	dd22      	ble.n	8008dce <_strtod_l+0x4d6>
 8008d88:	2500      	movs	r5, #0
 8008d8a:	462e      	mov	r6, r5
 8008d8c:	9509      	str	r5, [sp, #36]	; 0x24
 8008d8e:	9507      	str	r5, [sp, #28]
 8008d90:	2322      	movs	r3, #34	; 0x22
 8008d92:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008ea4 <_strtod_l+0x5ac>
 8008d96:	6023      	str	r3, [r4, #0]
 8008d98:	f04f 0a00 	mov.w	sl, #0
 8008d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f43f adec 	beq.w	800897c <_strtod_l+0x84>
 8008da4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008da6:	4620      	mov	r0, r4
 8008da8:	f001 fe88 	bl	800aabc <_Bfree>
 8008dac:	9907      	ldr	r1, [sp, #28]
 8008dae:	4620      	mov	r0, r4
 8008db0:	f001 fe84 	bl	800aabc <_Bfree>
 8008db4:	4631      	mov	r1, r6
 8008db6:	4620      	mov	r0, r4
 8008db8:	f001 fe80 	bl	800aabc <_Bfree>
 8008dbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f001 fe7c 	bl	800aabc <_Bfree>
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f001 fe78 	bl	800aabc <_Bfree>
 8008dcc:	e5d6      	b.n	800897c <_strtod_l+0x84>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008dd4:	4650      	mov	r0, sl
 8008dd6:	4659      	mov	r1, fp
 8008dd8:	4699      	mov	r9, r3
 8008dda:	f1b8 0f01 	cmp.w	r8, #1
 8008dde:	dc21      	bgt.n	8008e24 <_strtod_l+0x52c>
 8008de0:	b10b      	cbz	r3, 8008de6 <_strtod_l+0x4ee>
 8008de2:	4682      	mov	sl, r0
 8008de4:	468b      	mov	fp, r1
 8008de6:	4b2e      	ldr	r3, [pc, #184]	; (8008ea0 <_strtod_l+0x5a8>)
 8008de8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008dec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008df0:	4652      	mov	r2, sl
 8008df2:	465b      	mov	r3, fp
 8008df4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008df8:	f7f7 fc1e 	bl	8000638 <__aeabi_dmul>
 8008dfc:	4b29      	ldr	r3, [pc, #164]	; (8008ea4 <_strtod_l+0x5ac>)
 8008dfe:	460a      	mov	r2, r1
 8008e00:	400b      	ands	r3, r1
 8008e02:	4929      	ldr	r1, [pc, #164]	; (8008ea8 <_strtod_l+0x5b0>)
 8008e04:	428b      	cmp	r3, r1
 8008e06:	4682      	mov	sl, r0
 8008e08:	d8be      	bhi.n	8008d88 <_strtod_l+0x490>
 8008e0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e0e:	428b      	cmp	r3, r1
 8008e10:	bf86      	itte	hi
 8008e12:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008eac <_strtod_l+0x5b4>
 8008e16:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8008e1a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008e1e:	2300      	movs	r3, #0
 8008e20:	9304      	str	r3, [sp, #16]
 8008e22:	e081      	b.n	8008f28 <_strtod_l+0x630>
 8008e24:	f018 0f01 	tst.w	r8, #1
 8008e28:	d007      	beq.n	8008e3a <_strtod_l+0x542>
 8008e2a:	4b1d      	ldr	r3, [pc, #116]	; (8008ea0 <_strtod_l+0x5a8>)
 8008e2c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	f7f7 fc00 	bl	8000638 <__aeabi_dmul>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	f109 0901 	add.w	r9, r9, #1
 8008e3e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e42:	e7ca      	b.n	8008dda <_strtod_l+0x4e2>
 8008e44:	d0eb      	beq.n	8008e1e <_strtod_l+0x526>
 8008e46:	f1c8 0800 	rsb	r8, r8, #0
 8008e4a:	f018 020f 	ands.w	r2, r8, #15
 8008e4e:	d00a      	beq.n	8008e66 <_strtod_l+0x56e>
 8008e50:	4b12      	ldr	r3, [pc, #72]	; (8008e9c <_strtod_l+0x5a4>)
 8008e52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e56:	4650      	mov	r0, sl
 8008e58:	4659      	mov	r1, fp
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	f7f7 fd15 	bl	800088c <__aeabi_ddiv>
 8008e62:	4682      	mov	sl, r0
 8008e64:	468b      	mov	fp, r1
 8008e66:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008e6a:	d0d8      	beq.n	8008e1e <_strtod_l+0x526>
 8008e6c:	f1b8 0f1f 	cmp.w	r8, #31
 8008e70:	dd1e      	ble.n	8008eb0 <_strtod_l+0x5b8>
 8008e72:	2500      	movs	r5, #0
 8008e74:	462e      	mov	r6, r5
 8008e76:	9509      	str	r5, [sp, #36]	; 0x24
 8008e78:	9507      	str	r5, [sp, #28]
 8008e7a:	2322      	movs	r3, #34	; 0x22
 8008e7c:	f04f 0a00 	mov.w	sl, #0
 8008e80:	f04f 0b00 	mov.w	fp, #0
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	e789      	b.n	8008d9c <_strtod_l+0x4a4>
 8008e88:	08010739 	.word	0x08010739
 8008e8c:	0801077c 	.word	0x0801077c
 8008e90:	08010731 	.word	0x08010731
 8008e94:	080108bc 	.word	0x080108bc
 8008e98:	08010b78 	.word	0x08010b78
 8008e9c:	08010a58 	.word	0x08010a58
 8008ea0:	08010a30 	.word	0x08010a30
 8008ea4:	7ff00000 	.word	0x7ff00000
 8008ea8:	7ca00000 	.word	0x7ca00000
 8008eac:	7fefffff 	.word	0x7fefffff
 8008eb0:	f018 0310 	ands.w	r3, r8, #16
 8008eb4:	bf18      	it	ne
 8008eb6:	236a      	movne	r3, #106	; 0x6a
 8008eb8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009270 <_strtod_l+0x978>
 8008ebc:	9304      	str	r3, [sp, #16]
 8008ebe:	4650      	mov	r0, sl
 8008ec0:	4659      	mov	r1, fp
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	f018 0f01 	tst.w	r8, #1
 8008ec8:	d004      	beq.n	8008ed4 <_strtod_l+0x5dc>
 8008eca:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008ece:	f7f7 fbb3 	bl	8000638 <__aeabi_dmul>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008ed8:	f109 0908 	add.w	r9, r9, #8
 8008edc:	d1f2      	bne.n	8008ec4 <_strtod_l+0x5cc>
 8008ede:	b10b      	cbz	r3, 8008ee4 <_strtod_l+0x5ec>
 8008ee0:	4682      	mov	sl, r0
 8008ee2:	468b      	mov	fp, r1
 8008ee4:	9b04      	ldr	r3, [sp, #16]
 8008ee6:	b1bb      	cbz	r3, 8008f18 <_strtod_l+0x620>
 8008ee8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008eec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	4659      	mov	r1, fp
 8008ef4:	dd10      	ble.n	8008f18 <_strtod_l+0x620>
 8008ef6:	2b1f      	cmp	r3, #31
 8008ef8:	f340 8128 	ble.w	800914c <_strtod_l+0x854>
 8008efc:	2b34      	cmp	r3, #52	; 0x34
 8008efe:	bfde      	ittt	le
 8008f00:	3b20      	suble	r3, #32
 8008f02:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8008f06:	fa02 f303 	lslle.w	r3, r2, r3
 8008f0a:	f04f 0a00 	mov.w	sl, #0
 8008f0e:	bfcc      	ite	gt
 8008f10:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008f14:	ea03 0b01 	andle.w	fp, r3, r1
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	4650      	mov	r0, sl
 8008f1e:	4659      	mov	r1, fp
 8008f20:	f7f7 fdf2 	bl	8000b08 <__aeabi_dcmpeq>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d1a4      	bne.n	8008e72 <_strtod_l+0x57a>
 8008f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f2e:	462b      	mov	r3, r5
 8008f30:	463a      	mov	r2, r7
 8008f32:	4620      	mov	r0, r4
 8008f34:	f001 fe2e 	bl	800ab94 <__s2b>
 8008f38:	9009      	str	r0, [sp, #36]	; 0x24
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	f43f af24 	beq.w	8008d88 <_strtod_l+0x490>
 8008f40:	9b07      	ldr	r3, [sp, #28]
 8008f42:	1b9e      	subs	r6, r3, r6
 8008f44:	9b08      	ldr	r3, [sp, #32]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	bfb4      	ite	lt
 8008f4a:	4633      	movlt	r3, r6
 8008f4c:	2300      	movge	r3, #0
 8008f4e:	9310      	str	r3, [sp, #64]	; 0x40
 8008f50:	9b08      	ldr	r3, [sp, #32]
 8008f52:	2500      	movs	r5, #0
 8008f54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008f58:	9318      	str	r3, [sp, #96]	; 0x60
 8008f5a:	462e      	mov	r6, r5
 8008f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5e:	4620      	mov	r0, r4
 8008f60:	6859      	ldr	r1, [r3, #4]
 8008f62:	f001 fd6b 	bl	800aa3c <_Balloc>
 8008f66:	9007      	str	r0, [sp, #28]
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	f43f af11 	beq.w	8008d90 <_strtod_l+0x498>
 8008f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f70:	691a      	ldr	r2, [r3, #16]
 8008f72:	3202      	adds	r2, #2
 8008f74:	f103 010c 	add.w	r1, r3, #12
 8008f78:	0092      	lsls	r2, r2, #2
 8008f7a:	300c      	adds	r0, #12
 8008f7c:	f7fe fd16 	bl	80079ac <memcpy>
 8008f80:	ec4b ab10 	vmov	d0, sl, fp
 8008f84:	aa20      	add	r2, sp, #128	; 0x80
 8008f86:	a91f      	add	r1, sp, #124	; 0x7c
 8008f88:	4620      	mov	r0, r4
 8008f8a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008f8e:	f002 f93d 	bl	800b20c <__d2b>
 8008f92:	901e      	str	r0, [sp, #120]	; 0x78
 8008f94:	2800      	cmp	r0, #0
 8008f96:	f43f aefb 	beq.w	8008d90 <_strtod_l+0x498>
 8008f9a:	2101      	movs	r1, #1
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f001 fe93 	bl	800acc8 <__i2b>
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	f43f aef3 	beq.w	8008d90 <_strtod_l+0x498>
 8008faa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008fac:	9904      	ldr	r1, [sp, #16]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	bfab      	itete	ge
 8008fb2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008fb4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008fb6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008fb8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008fbc:	bfac      	ite	ge
 8008fbe:	eb03 0902 	addge.w	r9, r3, r2
 8008fc2:	1ad7      	sublt	r7, r2, r3
 8008fc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008fc6:	eba3 0801 	sub.w	r8, r3, r1
 8008fca:	4490      	add	r8, r2
 8008fcc:	4ba3      	ldr	r3, [pc, #652]	; (800925c <_strtod_l+0x964>)
 8008fce:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008fd2:	4598      	cmp	r8, r3
 8008fd4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008fd8:	f280 80cc 	bge.w	8009174 <_strtod_l+0x87c>
 8008fdc:	eba3 0308 	sub.w	r3, r3, r8
 8008fe0:	2b1f      	cmp	r3, #31
 8008fe2:	eba2 0203 	sub.w	r2, r2, r3
 8008fe6:	f04f 0101 	mov.w	r1, #1
 8008fea:	f300 80b6 	bgt.w	800915a <_strtod_l+0x862>
 8008fee:	fa01 f303 	lsl.w	r3, r1, r3
 8008ff2:	9311      	str	r3, [sp, #68]	; 0x44
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	930c      	str	r3, [sp, #48]	; 0x30
 8008ff8:	eb09 0802 	add.w	r8, r9, r2
 8008ffc:	9b04      	ldr	r3, [sp, #16]
 8008ffe:	45c1      	cmp	r9, r8
 8009000:	4417      	add	r7, r2
 8009002:	441f      	add	r7, r3
 8009004:	464b      	mov	r3, r9
 8009006:	bfa8      	it	ge
 8009008:	4643      	movge	r3, r8
 800900a:	42bb      	cmp	r3, r7
 800900c:	bfa8      	it	ge
 800900e:	463b      	movge	r3, r7
 8009010:	2b00      	cmp	r3, #0
 8009012:	bfc2      	ittt	gt
 8009014:	eba8 0803 	subgt.w	r8, r8, r3
 8009018:	1aff      	subgt	r7, r7, r3
 800901a:	eba9 0903 	subgt.w	r9, r9, r3
 800901e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009020:	2b00      	cmp	r3, #0
 8009022:	dd17      	ble.n	8009054 <_strtod_l+0x75c>
 8009024:	4631      	mov	r1, r6
 8009026:	461a      	mov	r2, r3
 8009028:	4620      	mov	r0, r4
 800902a:	f001 ff09 	bl	800ae40 <__pow5mult>
 800902e:	4606      	mov	r6, r0
 8009030:	2800      	cmp	r0, #0
 8009032:	f43f aead 	beq.w	8008d90 <_strtod_l+0x498>
 8009036:	4601      	mov	r1, r0
 8009038:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800903a:	4620      	mov	r0, r4
 800903c:	f001 fe5a 	bl	800acf4 <__multiply>
 8009040:	900f      	str	r0, [sp, #60]	; 0x3c
 8009042:	2800      	cmp	r0, #0
 8009044:	f43f aea4 	beq.w	8008d90 <_strtod_l+0x498>
 8009048:	991e      	ldr	r1, [sp, #120]	; 0x78
 800904a:	4620      	mov	r0, r4
 800904c:	f001 fd36 	bl	800aabc <_Bfree>
 8009050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009052:	931e      	str	r3, [sp, #120]	; 0x78
 8009054:	f1b8 0f00 	cmp.w	r8, #0
 8009058:	f300 8091 	bgt.w	800917e <_strtod_l+0x886>
 800905c:	9b08      	ldr	r3, [sp, #32]
 800905e:	2b00      	cmp	r3, #0
 8009060:	dd08      	ble.n	8009074 <_strtod_l+0x77c>
 8009062:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009064:	9907      	ldr	r1, [sp, #28]
 8009066:	4620      	mov	r0, r4
 8009068:	f001 feea 	bl	800ae40 <__pow5mult>
 800906c:	9007      	str	r0, [sp, #28]
 800906e:	2800      	cmp	r0, #0
 8009070:	f43f ae8e 	beq.w	8008d90 <_strtod_l+0x498>
 8009074:	2f00      	cmp	r7, #0
 8009076:	dd08      	ble.n	800908a <_strtod_l+0x792>
 8009078:	9907      	ldr	r1, [sp, #28]
 800907a:	463a      	mov	r2, r7
 800907c:	4620      	mov	r0, r4
 800907e:	f001 ff39 	bl	800aef4 <__lshift>
 8009082:	9007      	str	r0, [sp, #28]
 8009084:	2800      	cmp	r0, #0
 8009086:	f43f ae83 	beq.w	8008d90 <_strtod_l+0x498>
 800908a:	f1b9 0f00 	cmp.w	r9, #0
 800908e:	dd08      	ble.n	80090a2 <_strtod_l+0x7aa>
 8009090:	4631      	mov	r1, r6
 8009092:	464a      	mov	r2, r9
 8009094:	4620      	mov	r0, r4
 8009096:	f001 ff2d 	bl	800aef4 <__lshift>
 800909a:	4606      	mov	r6, r0
 800909c:	2800      	cmp	r0, #0
 800909e:	f43f ae77 	beq.w	8008d90 <_strtod_l+0x498>
 80090a2:	9a07      	ldr	r2, [sp, #28]
 80090a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80090a6:	4620      	mov	r0, r4
 80090a8:	f001 ffac 	bl	800b004 <__mdiff>
 80090ac:	4605      	mov	r5, r0
 80090ae:	2800      	cmp	r0, #0
 80090b0:	f43f ae6e 	beq.w	8008d90 <_strtod_l+0x498>
 80090b4:	68c3      	ldr	r3, [r0, #12]
 80090b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80090b8:	2300      	movs	r3, #0
 80090ba:	60c3      	str	r3, [r0, #12]
 80090bc:	4631      	mov	r1, r6
 80090be:	f001 ff85 	bl	800afcc <__mcmp>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	da65      	bge.n	8009192 <_strtod_l+0x89a>
 80090c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090c8:	ea53 030a 	orrs.w	r3, r3, sl
 80090cc:	f040 8087 	bne.w	80091de <_strtod_l+0x8e6>
 80090d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f040 8082 	bne.w	80091de <_strtod_l+0x8e6>
 80090da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80090de:	0d1b      	lsrs	r3, r3, #20
 80090e0:	051b      	lsls	r3, r3, #20
 80090e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80090e6:	d97a      	bls.n	80091de <_strtod_l+0x8e6>
 80090e8:	696b      	ldr	r3, [r5, #20]
 80090ea:	b913      	cbnz	r3, 80090f2 <_strtod_l+0x7fa>
 80090ec:	692b      	ldr	r3, [r5, #16]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	dd75      	ble.n	80091de <_strtod_l+0x8e6>
 80090f2:	4629      	mov	r1, r5
 80090f4:	2201      	movs	r2, #1
 80090f6:	4620      	mov	r0, r4
 80090f8:	f001 fefc 	bl	800aef4 <__lshift>
 80090fc:	4631      	mov	r1, r6
 80090fe:	4605      	mov	r5, r0
 8009100:	f001 ff64 	bl	800afcc <__mcmp>
 8009104:	2800      	cmp	r0, #0
 8009106:	dd6a      	ble.n	80091de <_strtod_l+0x8e6>
 8009108:	9904      	ldr	r1, [sp, #16]
 800910a:	4a55      	ldr	r2, [pc, #340]	; (8009260 <_strtod_l+0x968>)
 800910c:	465b      	mov	r3, fp
 800910e:	2900      	cmp	r1, #0
 8009110:	f000 8085 	beq.w	800921e <_strtod_l+0x926>
 8009114:	ea02 010b 	and.w	r1, r2, fp
 8009118:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800911c:	dc7f      	bgt.n	800921e <_strtod_l+0x926>
 800911e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009122:	f77f aeaa 	ble.w	8008e7a <_strtod_l+0x582>
 8009126:	4a4f      	ldr	r2, [pc, #316]	; (8009264 <_strtod_l+0x96c>)
 8009128:	2300      	movs	r3, #0
 800912a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800912e:	4650      	mov	r0, sl
 8009130:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009134:	4659      	mov	r1, fp
 8009136:	f7f7 fa7f 	bl	8000638 <__aeabi_dmul>
 800913a:	460b      	mov	r3, r1
 800913c:	4303      	orrs	r3, r0
 800913e:	bf08      	it	eq
 8009140:	2322      	moveq	r3, #34	; 0x22
 8009142:	4682      	mov	sl, r0
 8009144:	468b      	mov	fp, r1
 8009146:	bf08      	it	eq
 8009148:	6023      	streq	r3, [r4, #0]
 800914a:	e62b      	b.n	8008da4 <_strtod_l+0x4ac>
 800914c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009150:	fa02 f303 	lsl.w	r3, r2, r3
 8009154:	ea03 0a0a 	and.w	sl, r3, sl
 8009158:	e6de      	b.n	8008f18 <_strtod_l+0x620>
 800915a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800915e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009162:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009166:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800916a:	fa01 f308 	lsl.w	r3, r1, r8
 800916e:	930c      	str	r3, [sp, #48]	; 0x30
 8009170:	9111      	str	r1, [sp, #68]	; 0x44
 8009172:	e741      	b.n	8008ff8 <_strtod_l+0x700>
 8009174:	2300      	movs	r3, #0
 8009176:	930c      	str	r3, [sp, #48]	; 0x30
 8009178:	2301      	movs	r3, #1
 800917a:	9311      	str	r3, [sp, #68]	; 0x44
 800917c:	e73c      	b.n	8008ff8 <_strtod_l+0x700>
 800917e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009180:	4642      	mov	r2, r8
 8009182:	4620      	mov	r0, r4
 8009184:	f001 feb6 	bl	800aef4 <__lshift>
 8009188:	901e      	str	r0, [sp, #120]	; 0x78
 800918a:	2800      	cmp	r0, #0
 800918c:	f47f af66 	bne.w	800905c <_strtod_l+0x764>
 8009190:	e5fe      	b.n	8008d90 <_strtod_l+0x498>
 8009192:	465f      	mov	r7, fp
 8009194:	d16e      	bne.n	8009274 <_strtod_l+0x97c>
 8009196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009198:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800919c:	b342      	cbz	r2, 80091f0 <_strtod_l+0x8f8>
 800919e:	4a32      	ldr	r2, [pc, #200]	; (8009268 <_strtod_l+0x970>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d128      	bne.n	80091f6 <_strtod_l+0x8fe>
 80091a4:	9b04      	ldr	r3, [sp, #16]
 80091a6:	4650      	mov	r0, sl
 80091a8:	b1eb      	cbz	r3, 80091e6 <_strtod_l+0x8ee>
 80091aa:	4a2d      	ldr	r2, [pc, #180]	; (8009260 <_strtod_l+0x968>)
 80091ac:	403a      	ands	r2, r7
 80091ae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80091b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80091b6:	d819      	bhi.n	80091ec <_strtod_l+0x8f4>
 80091b8:	0d12      	lsrs	r2, r2, #20
 80091ba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80091be:	fa01 f303 	lsl.w	r3, r1, r3
 80091c2:	4298      	cmp	r0, r3
 80091c4:	d117      	bne.n	80091f6 <_strtod_l+0x8fe>
 80091c6:	4b29      	ldr	r3, [pc, #164]	; (800926c <_strtod_l+0x974>)
 80091c8:	429f      	cmp	r7, r3
 80091ca:	d102      	bne.n	80091d2 <_strtod_l+0x8da>
 80091cc:	3001      	adds	r0, #1
 80091ce:	f43f addf 	beq.w	8008d90 <_strtod_l+0x498>
 80091d2:	4b23      	ldr	r3, [pc, #140]	; (8009260 <_strtod_l+0x968>)
 80091d4:	403b      	ands	r3, r7
 80091d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80091da:	f04f 0a00 	mov.w	sl, #0
 80091de:	9b04      	ldr	r3, [sp, #16]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1a0      	bne.n	8009126 <_strtod_l+0x82e>
 80091e4:	e5de      	b.n	8008da4 <_strtod_l+0x4ac>
 80091e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091ea:	e7ea      	b.n	80091c2 <_strtod_l+0x8ca>
 80091ec:	460b      	mov	r3, r1
 80091ee:	e7e8      	b.n	80091c2 <_strtod_l+0x8ca>
 80091f0:	ea53 030a 	orrs.w	r3, r3, sl
 80091f4:	d088      	beq.n	8009108 <_strtod_l+0x810>
 80091f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091f8:	b1db      	cbz	r3, 8009232 <_strtod_l+0x93a>
 80091fa:	423b      	tst	r3, r7
 80091fc:	d0ef      	beq.n	80091de <_strtod_l+0x8e6>
 80091fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009200:	9a04      	ldr	r2, [sp, #16]
 8009202:	4650      	mov	r0, sl
 8009204:	4659      	mov	r1, fp
 8009206:	b1c3      	cbz	r3, 800923a <_strtod_l+0x942>
 8009208:	f7ff fb58 	bl	80088bc <sulp>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009214:	f7f7 f85a 	bl	80002cc <__adddf3>
 8009218:	4682      	mov	sl, r0
 800921a:	468b      	mov	fp, r1
 800921c:	e7df      	b.n	80091de <_strtod_l+0x8e6>
 800921e:	4013      	ands	r3, r2
 8009220:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009224:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009228:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800922c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009230:	e7d5      	b.n	80091de <_strtod_l+0x8e6>
 8009232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009234:	ea13 0f0a 	tst.w	r3, sl
 8009238:	e7e0      	b.n	80091fc <_strtod_l+0x904>
 800923a:	f7ff fb3f 	bl	80088bc <sulp>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009246:	f7f7 f83f 	bl	80002c8 <__aeabi_dsub>
 800924a:	2200      	movs	r2, #0
 800924c:	2300      	movs	r3, #0
 800924e:	4682      	mov	sl, r0
 8009250:	468b      	mov	fp, r1
 8009252:	f7f7 fc59 	bl	8000b08 <__aeabi_dcmpeq>
 8009256:	2800      	cmp	r0, #0
 8009258:	d0c1      	beq.n	80091de <_strtod_l+0x8e6>
 800925a:	e60e      	b.n	8008e7a <_strtod_l+0x582>
 800925c:	fffffc02 	.word	0xfffffc02
 8009260:	7ff00000 	.word	0x7ff00000
 8009264:	39500000 	.word	0x39500000
 8009268:	000fffff 	.word	0x000fffff
 800926c:	7fefffff 	.word	0x7fefffff
 8009270:	08010790 	.word	0x08010790
 8009274:	4631      	mov	r1, r6
 8009276:	4628      	mov	r0, r5
 8009278:	f002 f824 	bl	800b2c4 <__ratio>
 800927c:	ec59 8b10 	vmov	r8, r9, d0
 8009280:	ee10 0a10 	vmov	r0, s0
 8009284:	2200      	movs	r2, #0
 8009286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800928a:	4649      	mov	r1, r9
 800928c:	f7f7 fc50 	bl	8000b30 <__aeabi_dcmple>
 8009290:	2800      	cmp	r0, #0
 8009292:	d07c      	beq.n	800938e <_strtod_l+0xa96>
 8009294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009296:	2b00      	cmp	r3, #0
 8009298:	d04c      	beq.n	8009334 <_strtod_l+0xa3c>
 800929a:	4b95      	ldr	r3, [pc, #596]	; (80094f0 <_strtod_l+0xbf8>)
 800929c:	2200      	movs	r2, #0
 800929e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80092a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80094f0 <_strtod_l+0xbf8>
 80092a6:	f04f 0800 	mov.w	r8, #0
 80092aa:	4b92      	ldr	r3, [pc, #584]	; (80094f4 <_strtod_l+0xbfc>)
 80092ac:	403b      	ands	r3, r7
 80092ae:	9311      	str	r3, [sp, #68]	; 0x44
 80092b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80092b2:	4b91      	ldr	r3, [pc, #580]	; (80094f8 <_strtod_l+0xc00>)
 80092b4:	429a      	cmp	r2, r3
 80092b6:	f040 80b2 	bne.w	800941e <_strtod_l+0xb26>
 80092ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80092be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092c2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80092c6:	ec4b ab10 	vmov	d0, sl, fp
 80092ca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80092ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80092d2:	f001 ff1f 	bl	800b114 <__ulp>
 80092d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092da:	ec53 2b10 	vmov	r2, r3, d0
 80092de:	f7f7 f9ab 	bl	8000638 <__aeabi_dmul>
 80092e2:	4652      	mov	r2, sl
 80092e4:	465b      	mov	r3, fp
 80092e6:	f7f6 fff1 	bl	80002cc <__adddf3>
 80092ea:	460b      	mov	r3, r1
 80092ec:	4981      	ldr	r1, [pc, #516]	; (80094f4 <_strtod_l+0xbfc>)
 80092ee:	4a83      	ldr	r2, [pc, #524]	; (80094fc <_strtod_l+0xc04>)
 80092f0:	4019      	ands	r1, r3
 80092f2:	4291      	cmp	r1, r2
 80092f4:	4682      	mov	sl, r0
 80092f6:	d95e      	bls.n	80093b6 <_strtod_l+0xabe>
 80092f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092fa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80092fe:	4293      	cmp	r3, r2
 8009300:	d103      	bne.n	800930a <_strtod_l+0xa12>
 8009302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009304:	3301      	adds	r3, #1
 8009306:	f43f ad43 	beq.w	8008d90 <_strtod_l+0x498>
 800930a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009508 <_strtod_l+0xc10>
 800930e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009312:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009314:	4620      	mov	r0, r4
 8009316:	f001 fbd1 	bl	800aabc <_Bfree>
 800931a:	9907      	ldr	r1, [sp, #28]
 800931c:	4620      	mov	r0, r4
 800931e:	f001 fbcd 	bl	800aabc <_Bfree>
 8009322:	4631      	mov	r1, r6
 8009324:	4620      	mov	r0, r4
 8009326:	f001 fbc9 	bl	800aabc <_Bfree>
 800932a:	4629      	mov	r1, r5
 800932c:	4620      	mov	r0, r4
 800932e:	f001 fbc5 	bl	800aabc <_Bfree>
 8009332:	e613      	b.n	8008f5c <_strtod_l+0x664>
 8009334:	f1ba 0f00 	cmp.w	sl, #0
 8009338:	d11b      	bne.n	8009372 <_strtod_l+0xa7a>
 800933a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800933e:	b9f3      	cbnz	r3, 800937e <_strtod_l+0xa86>
 8009340:	4b6b      	ldr	r3, [pc, #428]	; (80094f0 <_strtod_l+0xbf8>)
 8009342:	2200      	movs	r2, #0
 8009344:	4640      	mov	r0, r8
 8009346:	4649      	mov	r1, r9
 8009348:	f7f7 fbe8 	bl	8000b1c <__aeabi_dcmplt>
 800934c:	b9d0      	cbnz	r0, 8009384 <_strtod_l+0xa8c>
 800934e:	4640      	mov	r0, r8
 8009350:	4649      	mov	r1, r9
 8009352:	4b6b      	ldr	r3, [pc, #428]	; (8009500 <_strtod_l+0xc08>)
 8009354:	2200      	movs	r2, #0
 8009356:	f7f7 f96f 	bl	8000638 <__aeabi_dmul>
 800935a:	4680      	mov	r8, r0
 800935c:	4689      	mov	r9, r1
 800935e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009362:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009366:	931b      	str	r3, [sp, #108]	; 0x6c
 8009368:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800936c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009370:	e79b      	b.n	80092aa <_strtod_l+0x9b2>
 8009372:	f1ba 0f01 	cmp.w	sl, #1
 8009376:	d102      	bne.n	800937e <_strtod_l+0xa86>
 8009378:	2f00      	cmp	r7, #0
 800937a:	f43f ad7e 	beq.w	8008e7a <_strtod_l+0x582>
 800937e:	4b61      	ldr	r3, [pc, #388]	; (8009504 <_strtod_l+0xc0c>)
 8009380:	2200      	movs	r2, #0
 8009382:	e78c      	b.n	800929e <_strtod_l+0x9a6>
 8009384:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009500 <_strtod_l+0xc08>
 8009388:	f04f 0800 	mov.w	r8, #0
 800938c:	e7e7      	b.n	800935e <_strtod_l+0xa66>
 800938e:	4b5c      	ldr	r3, [pc, #368]	; (8009500 <_strtod_l+0xc08>)
 8009390:	4640      	mov	r0, r8
 8009392:	4649      	mov	r1, r9
 8009394:	2200      	movs	r2, #0
 8009396:	f7f7 f94f 	bl	8000638 <__aeabi_dmul>
 800939a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800939c:	4680      	mov	r8, r0
 800939e:	4689      	mov	r9, r1
 80093a0:	b933      	cbnz	r3, 80093b0 <_strtod_l+0xab8>
 80093a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093a6:	9012      	str	r0, [sp, #72]	; 0x48
 80093a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80093aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80093ae:	e7dd      	b.n	800936c <_strtod_l+0xa74>
 80093b0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80093b4:	e7f9      	b.n	80093aa <_strtod_l+0xab2>
 80093b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80093ba:	9b04      	ldr	r3, [sp, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1a8      	bne.n	8009312 <_strtod_l+0xa1a>
 80093c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80093c6:	0d1b      	lsrs	r3, r3, #20
 80093c8:	051b      	lsls	r3, r3, #20
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d1a1      	bne.n	8009312 <_strtod_l+0xa1a>
 80093ce:	4640      	mov	r0, r8
 80093d0:	4649      	mov	r1, r9
 80093d2:	f7f7 fc91 	bl	8000cf8 <__aeabi_d2lz>
 80093d6:	f7f7 f901 	bl	80005dc <__aeabi_l2d>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4640      	mov	r0, r8
 80093e0:	4649      	mov	r1, r9
 80093e2:	f7f6 ff71 	bl	80002c8 <__aeabi_dsub>
 80093e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093ec:	ea43 030a 	orr.w	r3, r3, sl
 80093f0:	4313      	orrs	r3, r2
 80093f2:	4680      	mov	r8, r0
 80093f4:	4689      	mov	r9, r1
 80093f6:	d053      	beq.n	80094a0 <_strtod_l+0xba8>
 80093f8:	a335      	add	r3, pc, #212	; (adr r3, 80094d0 <_strtod_l+0xbd8>)
 80093fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fe:	f7f7 fb8d 	bl	8000b1c <__aeabi_dcmplt>
 8009402:	2800      	cmp	r0, #0
 8009404:	f47f acce 	bne.w	8008da4 <_strtod_l+0x4ac>
 8009408:	a333      	add	r3, pc, #204	; (adr r3, 80094d8 <_strtod_l+0xbe0>)
 800940a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940e:	4640      	mov	r0, r8
 8009410:	4649      	mov	r1, r9
 8009412:	f7f7 fba1 	bl	8000b58 <__aeabi_dcmpgt>
 8009416:	2800      	cmp	r0, #0
 8009418:	f43f af7b 	beq.w	8009312 <_strtod_l+0xa1a>
 800941c:	e4c2      	b.n	8008da4 <_strtod_l+0x4ac>
 800941e:	9b04      	ldr	r3, [sp, #16]
 8009420:	b333      	cbz	r3, 8009470 <_strtod_l+0xb78>
 8009422:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009424:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009428:	d822      	bhi.n	8009470 <_strtod_l+0xb78>
 800942a:	a32d      	add	r3, pc, #180	; (adr r3, 80094e0 <_strtod_l+0xbe8>)
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	4640      	mov	r0, r8
 8009432:	4649      	mov	r1, r9
 8009434:	f7f7 fb7c 	bl	8000b30 <__aeabi_dcmple>
 8009438:	b1a0      	cbz	r0, 8009464 <_strtod_l+0xb6c>
 800943a:	4649      	mov	r1, r9
 800943c:	4640      	mov	r0, r8
 800943e:	f7f7 fbd3 	bl	8000be8 <__aeabi_d2uiz>
 8009442:	2801      	cmp	r0, #1
 8009444:	bf38      	it	cc
 8009446:	2001      	movcc	r0, #1
 8009448:	f7f7 f87c 	bl	8000544 <__aeabi_ui2d>
 800944c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800944e:	4680      	mov	r8, r0
 8009450:	4689      	mov	r9, r1
 8009452:	bb13      	cbnz	r3, 800949a <_strtod_l+0xba2>
 8009454:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009458:	9014      	str	r0, [sp, #80]	; 0x50
 800945a:	9315      	str	r3, [sp, #84]	; 0x54
 800945c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009460:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009466:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009468:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800946c:	1a9b      	subs	r3, r3, r2
 800946e:	930d      	str	r3, [sp, #52]	; 0x34
 8009470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009474:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009478:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800947c:	f001 fe4a 	bl	800b114 <__ulp>
 8009480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009484:	ec53 2b10 	vmov	r2, r3, d0
 8009488:	f7f7 f8d6 	bl	8000638 <__aeabi_dmul>
 800948c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009490:	f7f6 ff1c 	bl	80002cc <__adddf3>
 8009494:	4682      	mov	sl, r0
 8009496:	468b      	mov	fp, r1
 8009498:	e78f      	b.n	80093ba <_strtod_l+0xac2>
 800949a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800949e:	e7dd      	b.n	800945c <_strtod_l+0xb64>
 80094a0:	a311      	add	r3, pc, #68	; (adr r3, 80094e8 <_strtod_l+0xbf0>)
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	f7f7 fb39 	bl	8000b1c <__aeabi_dcmplt>
 80094aa:	e7b4      	b.n	8009416 <_strtod_l+0xb1e>
 80094ac:	2300      	movs	r3, #0
 80094ae:	930e      	str	r3, [sp, #56]	; 0x38
 80094b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80094b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094b4:	6013      	str	r3, [r2, #0]
 80094b6:	f7ff ba65 	b.w	8008984 <_strtod_l+0x8c>
 80094ba:	2b65      	cmp	r3, #101	; 0x65
 80094bc:	f43f ab5d 	beq.w	8008b7a <_strtod_l+0x282>
 80094c0:	2b45      	cmp	r3, #69	; 0x45
 80094c2:	f43f ab5a 	beq.w	8008b7a <_strtod_l+0x282>
 80094c6:	2201      	movs	r2, #1
 80094c8:	f7ff bb92 	b.w	8008bf0 <_strtod_l+0x2f8>
 80094cc:	f3af 8000 	nop.w
 80094d0:	94a03595 	.word	0x94a03595
 80094d4:	3fdfffff 	.word	0x3fdfffff
 80094d8:	35afe535 	.word	0x35afe535
 80094dc:	3fe00000 	.word	0x3fe00000
 80094e0:	ffc00000 	.word	0xffc00000
 80094e4:	41dfffff 	.word	0x41dfffff
 80094e8:	94a03595 	.word	0x94a03595
 80094ec:	3fcfffff 	.word	0x3fcfffff
 80094f0:	3ff00000 	.word	0x3ff00000
 80094f4:	7ff00000 	.word	0x7ff00000
 80094f8:	7fe00000 	.word	0x7fe00000
 80094fc:	7c9fffff 	.word	0x7c9fffff
 8009500:	3fe00000 	.word	0x3fe00000
 8009504:	bff00000 	.word	0xbff00000
 8009508:	7fefffff 	.word	0x7fefffff

0800950c <_strtod_r>:
 800950c:	4b01      	ldr	r3, [pc, #4]	; (8009514 <_strtod_r+0x8>)
 800950e:	f7ff b9f3 	b.w	80088f8 <_strtod_l>
 8009512:	bf00      	nop
 8009514:	20000074 	.word	0x20000074

08009518 <_strtol_l.isra.0>:
 8009518:	2b01      	cmp	r3, #1
 800951a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800951e:	d001      	beq.n	8009524 <_strtol_l.isra.0+0xc>
 8009520:	2b24      	cmp	r3, #36	; 0x24
 8009522:	d906      	bls.n	8009532 <_strtol_l.isra.0+0x1a>
 8009524:	f7fe fa10 	bl	8007948 <__errno>
 8009528:	2316      	movs	r3, #22
 800952a:	6003      	str	r3, [r0, #0]
 800952c:	2000      	movs	r0, #0
 800952e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009532:	4f3a      	ldr	r7, [pc, #232]	; (800961c <_strtol_l.isra.0+0x104>)
 8009534:	468e      	mov	lr, r1
 8009536:	4676      	mov	r6, lr
 8009538:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800953c:	5de5      	ldrb	r5, [r4, r7]
 800953e:	f015 0508 	ands.w	r5, r5, #8
 8009542:	d1f8      	bne.n	8009536 <_strtol_l.isra.0+0x1e>
 8009544:	2c2d      	cmp	r4, #45	; 0x2d
 8009546:	d134      	bne.n	80095b2 <_strtol_l.isra.0+0x9a>
 8009548:	f89e 4000 	ldrb.w	r4, [lr]
 800954c:	f04f 0801 	mov.w	r8, #1
 8009550:	f106 0e02 	add.w	lr, r6, #2
 8009554:	2b00      	cmp	r3, #0
 8009556:	d05c      	beq.n	8009612 <_strtol_l.isra.0+0xfa>
 8009558:	2b10      	cmp	r3, #16
 800955a:	d10c      	bne.n	8009576 <_strtol_l.isra.0+0x5e>
 800955c:	2c30      	cmp	r4, #48	; 0x30
 800955e:	d10a      	bne.n	8009576 <_strtol_l.isra.0+0x5e>
 8009560:	f89e 4000 	ldrb.w	r4, [lr]
 8009564:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009568:	2c58      	cmp	r4, #88	; 0x58
 800956a:	d14d      	bne.n	8009608 <_strtol_l.isra.0+0xf0>
 800956c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009570:	2310      	movs	r3, #16
 8009572:	f10e 0e02 	add.w	lr, lr, #2
 8009576:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800957a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800957e:	2600      	movs	r6, #0
 8009580:	fbbc f9f3 	udiv	r9, ip, r3
 8009584:	4635      	mov	r5, r6
 8009586:	fb03 ca19 	mls	sl, r3, r9, ip
 800958a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800958e:	2f09      	cmp	r7, #9
 8009590:	d818      	bhi.n	80095c4 <_strtol_l.isra.0+0xac>
 8009592:	463c      	mov	r4, r7
 8009594:	42a3      	cmp	r3, r4
 8009596:	dd24      	ble.n	80095e2 <_strtol_l.isra.0+0xca>
 8009598:	2e00      	cmp	r6, #0
 800959a:	db1f      	blt.n	80095dc <_strtol_l.isra.0+0xc4>
 800959c:	45a9      	cmp	r9, r5
 800959e:	d31d      	bcc.n	80095dc <_strtol_l.isra.0+0xc4>
 80095a0:	d101      	bne.n	80095a6 <_strtol_l.isra.0+0x8e>
 80095a2:	45a2      	cmp	sl, r4
 80095a4:	db1a      	blt.n	80095dc <_strtol_l.isra.0+0xc4>
 80095a6:	fb05 4503 	mla	r5, r5, r3, r4
 80095aa:	2601      	movs	r6, #1
 80095ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80095b0:	e7eb      	b.n	800958a <_strtol_l.isra.0+0x72>
 80095b2:	2c2b      	cmp	r4, #43	; 0x2b
 80095b4:	bf08      	it	eq
 80095b6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80095ba:	46a8      	mov	r8, r5
 80095bc:	bf08      	it	eq
 80095be:	f106 0e02 	addeq.w	lr, r6, #2
 80095c2:	e7c7      	b.n	8009554 <_strtol_l.isra.0+0x3c>
 80095c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80095c8:	2f19      	cmp	r7, #25
 80095ca:	d801      	bhi.n	80095d0 <_strtol_l.isra.0+0xb8>
 80095cc:	3c37      	subs	r4, #55	; 0x37
 80095ce:	e7e1      	b.n	8009594 <_strtol_l.isra.0+0x7c>
 80095d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80095d4:	2f19      	cmp	r7, #25
 80095d6:	d804      	bhi.n	80095e2 <_strtol_l.isra.0+0xca>
 80095d8:	3c57      	subs	r4, #87	; 0x57
 80095da:	e7db      	b.n	8009594 <_strtol_l.isra.0+0x7c>
 80095dc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80095e0:	e7e4      	b.n	80095ac <_strtol_l.isra.0+0x94>
 80095e2:	2e00      	cmp	r6, #0
 80095e4:	da05      	bge.n	80095f2 <_strtol_l.isra.0+0xda>
 80095e6:	2322      	movs	r3, #34	; 0x22
 80095e8:	6003      	str	r3, [r0, #0]
 80095ea:	4665      	mov	r5, ip
 80095ec:	b942      	cbnz	r2, 8009600 <_strtol_l.isra.0+0xe8>
 80095ee:	4628      	mov	r0, r5
 80095f0:	e79d      	b.n	800952e <_strtol_l.isra.0+0x16>
 80095f2:	f1b8 0f00 	cmp.w	r8, #0
 80095f6:	d000      	beq.n	80095fa <_strtol_l.isra.0+0xe2>
 80095f8:	426d      	negs	r5, r5
 80095fa:	2a00      	cmp	r2, #0
 80095fc:	d0f7      	beq.n	80095ee <_strtol_l.isra.0+0xd6>
 80095fe:	b10e      	cbz	r6, 8009604 <_strtol_l.isra.0+0xec>
 8009600:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8009604:	6011      	str	r1, [r2, #0]
 8009606:	e7f2      	b.n	80095ee <_strtol_l.isra.0+0xd6>
 8009608:	2430      	movs	r4, #48	; 0x30
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1b3      	bne.n	8009576 <_strtol_l.isra.0+0x5e>
 800960e:	2308      	movs	r3, #8
 8009610:	e7b1      	b.n	8009576 <_strtol_l.isra.0+0x5e>
 8009612:	2c30      	cmp	r4, #48	; 0x30
 8009614:	d0a4      	beq.n	8009560 <_strtol_l.isra.0+0x48>
 8009616:	230a      	movs	r3, #10
 8009618:	e7ad      	b.n	8009576 <_strtol_l.isra.0+0x5e>
 800961a:	bf00      	nop
 800961c:	080107b9 	.word	0x080107b9

08009620 <_strtol_r>:
 8009620:	f7ff bf7a 	b.w	8009518 <_strtol_l.isra.0>

08009624 <quorem>:
 8009624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009628:	6903      	ldr	r3, [r0, #16]
 800962a:	690c      	ldr	r4, [r1, #16]
 800962c:	42a3      	cmp	r3, r4
 800962e:	4607      	mov	r7, r0
 8009630:	f2c0 8081 	blt.w	8009736 <quorem+0x112>
 8009634:	3c01      	subs	r4, #1
 8009636:	f101 0814 	add.w	r8, r1, #20
 800963a:	f100 0514 	add.w	r5, r0, #20
 800963e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009648:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800964c:	3301      	adds	r3, #1
 800964e:	429a      	cmp	r2, r3
 8009650:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009654:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009658:	fbb2 f6f3 	udiv	r6, r2, r3
 800965c:	d331      	bcc.n	80096c2 <quorem+0x9e>
 800965e:	f04f 0e00 	mov.w	lr, #0
 8009662:	4640      	mov	r0, r8
 8009664:	46ac      	mov	ip, r5
 8009666:	46f2      	mov	sl, lr
 8009668:	f850 2b04 	ldr.w	r2, [r0], #4
 800966c:	b293      	uxth	r3, r2
 800966e:	fb06 e303 	mla	r3, r6, r3, lr
 8009672:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009676:	b29b      	uxth	r3, r3
 8009678:	ebaa 0303 	sub.w	r3, sl, r3
 800967c:	0c12      	lsrs	r2, r2, #16
 800967e:	f8dc a000 	ldr.w	sl, [ip]
 8009682:	fb06 e202 	mla	r2, r6, r2, lr
 8009686:	fa13 f38a 	uxtah	r3, r3, sl
 800968a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800968e:	fa1f fa82 	uxth.w	sl, r2
 8009692:	f8dc 2000 	ldr.w	r2, [ip]
 8009696:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800969a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800969e:	b29b      	uxth	r3, r3
 80096a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096a4:	4581      	cmp	r9, r0
 80096a6:	f84c 3b04 	str.w	r3, [ip], #4
 80096aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80096ae:	d2db      	bcs.n	8009668 <quorem+0x44>
 80096b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80096b4:	b92b      	cbnz	r3, 80096c2 <quorem+0x9e>
 80096b6:	9b01      	ldr	r3, [sp, #4]
 80096b8:	3b04      	subs	r3, #4
 80096ba:	429d      	cmp	r5, r3
 80096bc:	461a      	mov	r2, r3
 80096be:	d32e      	bcc.n	800971e <quorem+0xfa>
 80096c0:	613c      	str	r4, [r7, #16]
 80096c2:	4638      	mov	r0, r7
 80096c4:	f001 fc82 	bl	800afcc <__mcmp>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	db24      	blt.n	8009716 <quorem+0xf2>
 80096cc:	3601      	adds	r6, #1
 80096ce:	4628      	mov	r0, r5
 80096d0:	f04f 0c00 	mov.w	ip, #0
 80096d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80096d8:	f8d0 e000 	ldr.w	lr, [r0]
 80096dc:	b293      	uxth	r3, r2
 80096de:	ebac 0303 	sub.w	r3, ip, r3
 80096e2:	0c12      	lsrs	r2, r2, #16
 80096e4:	fa13 f38e 	uxtah	r3, r3, lr
 80096e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80096ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096f6:	45c1      	cmp	r9, r8
 80096f8:	f840 3b04 	str.w	r3, [r0], #4
 80096fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009700:	d2e8      	bcs.n	80096d4 <quorem+0xb0>
 8009702:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800970a:	b922      	cbnz	r2, 8009716 <quorem+0xf2>
 800970c:	3b04      	subs	r3, #4
 800970e:	429d      	cmp	r5, r3
 8009710:	461a      	mov	r2, r3
 8009712:	d30a      	bcc.n	800972a <quorem+0x106>
 8009714:	613c      	str	r4, [r7, #16]
 8009716:	4630      	mov	r0, r6
 8009718:	b003      	add	sp, #12
 800971a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971e:	6812      	ldr	r2, [r2, #0]
 8009720:	3b04      	subs	r3, #4
 8009722:	2a00      	cmp	r2, #0
 8009724:	d1cc      	bne.n	80096c0 <quorem+0x9c>
 8009726:	3c01      	subs	r4, #1
 8009728:	e7c7      	b.n	80096ba <quorem+0x96>
 800972a:	6812      	ldr	r2, [r2, #0]
 800972c:	3b04      	subs	r3, #4
 800972e:	2a00      	cmp	r2, #0
 8009730:	d1f0      	bne.n	8009714 <quorem+0xf0>
 8009732:	3c01      	subs	r4, #1
 8009734:	e7eb      	b.n	800970e <quorem+0xea>
 8009736:	2000      	movs	r0, #0
 8009738:	e7ee      	b.n	8009718 <quorem+0xf4>
 800973a:	0000      	movs	r0, r0
 800973c:	0000      	movs	r0, r0
	...

08009740 <_dtoa_r>:
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	ed2d 8b02 	vpush	{d8}
 8009748:	ec57 6b10 	vmov	r6, r7, d0
 800974c:	b095      	sub	sp, #84	; 0x54
 800974e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009750:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009754:	9105      	str	r1, [sp, #20]
 8009756:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800975a:	4604      	mov	r4, r0
 800975c:	9209      	str	r2, [sp, #36]	; 0x24
 800975e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009760:	b975      	cbnz	r5, 8009780 <_dtoa_r+0x40>
 8009762:	2010      	movs	r0, #16
 8009764:	f7fe f91a 	bl	800799c <malloc>
 8009768:	4602      	mov	r2, r0
 800976a:	6260      	str	r0, [r4, #36]	; 0x24
 800976c:	b920      	cbnz	r0, 8009778 <_dtoa_r+0x38>
 800976e:	4bb2      	ldr	r3, [pc, #712]	; (8009a38 <_dtoa_r+0x2f8>)
 8009770:	21ea      	movs	r1, #234	; 0xea
 8009772:	48b2      	ldr	r0, [pc, #712]	; (8009a3c <_dtoa_r+0x2fc>)
 8009774:	f001 ffc8 	bl	800b708 <__assert_func>
 8009778:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800977c:	6005      	str	r5, [r0, #0]
 800977e:	60c5      	str	r5, [r0, #12]
 8009780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009782:	6819      	ldr	r1, [r3, #0]
 8009784:	b151      	cbz	r1, 800979c <_dtoa_r+0x5c>
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	604a      	str	r2, [r1, #4]
 800978a:	2301      	movs	r3, #1
 800978c:	4093      	lsls	r3, r2
 800978e:	608b      	str	r3, [r1, #8]
 8009790:	4620      	mov	r0, r4
 8009792:	f001 f993 	bl	800aabc <_Bfree>
 8009796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009798:	2200      	movs	r2, #0
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	1e3b      	subs	r3, r7, #0
 800979e:	bfb9      	ittee	lt
 80097a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80097a4:	9303      	strlt	r3, [sp, #12]
 80097a6:	2300      	movge	r3, #0
 80097a8:	f8c8 3000 	strge.w	r3, [r8]
 80097ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80097b0:	4ba3      	ldr	r3, [pc, #652]	; (8009a40 <_dtoa_r+0x300>)
 80097b2:	bfbc      	itt	lt
 80097b4:	2201      	movlt	r2, #1
 80097b6:	f8c8 2000 	strlt.w	r2, [r8]
 80097ba:	ea33 0309 	bics.w	r3, r3, r9
 80097be:	d11b      	bne.n	80097f8 <_dtoa_r+0xb8>
 80097c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80097c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80097c6:	6013      	str	r3, [r2, #0]
 80097c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097cc:	4333      	orrs	r3, r6
 80097ce:	f000 857a 	beq.w	800a2c6 <_dtoa_r+0xb86>
 80097d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097d4:	b963      	cbnz	r3, 80097f0 <_dtoa_r+0xb0>
 80097d6:	4b9b      	ldr	r3, [pc, #620]	; (8009a44 <_dtoa_r+0x304>)
 80097d8:	e024      	b.n	8009824 <_dtoa_r+0xe4>
 80097da:	4b9b      	ldr	r3, [pc, #620]	; (8009a48 <_dtoa_r+0x308>)
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	3308      	adds	r3, #8
 80097e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80097e2:	6013      	str	r3, [r2, #0]
 80097e4:	9800      	ldr	r0, [sp, #0]
 80097e6:	b015      	add	sp, #84	; 0x54
 80097e8:	ecbd 8b02 	vpop	{d8}
 80097ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f0:	4b94      	ldr	r3, [pc, #592]	; (8009a44 <_dtoa_r+0x304>)
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	3303      	adds	r3, #3
 80097f6:	e7f3      	b.n	80097e0 <_dtoa_r+0xa0>
 80097f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097fc:	2200      	movs	r2, #0
 80097fe:	ec51 0b17 	vmov	r0, r1, d7
 8009802:	2300      	movs	r3, #0
 8009804:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009808:	f7f7 f97e 	bl	8000b08 <__aeabi_dcmpeq>
 800980c:	4680      	mov	r8, r0
 800980e:	b158      	cbz	r0, 8009828 <_dtoa_r+0xe8>
 8009810:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009812:	2301      	movs	r3, #1
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 8551 	beq.w	800a2c0 <_dtoa_r+0xb80>
 800981e:	488b      	ldr	r0, [pc, #556]	; (8009a4c <_dtoa_r+0x30c>)
 8009820:	6018      	str	r0, [r3, #0]
 8009822:	1e43      	subs	r3, r0, #1
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	e7dd      	b.n	80097e4 <_dtoa_r+0xa4>
 8009828:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800982c:	aa12      	add	r2, sp, #72	; 0x48
 800982e:	a913      	add	r1, sp, #76	; 0x4c
 8009830:	4620      	mov	r0, r4
 8009832:	f001 fceb 	bl	800b20c <__d2b>
 8009836:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800983a:	4683      	mov	fp, r0
 800983c:	2d00      	cmp	r5, #0
 800983e:	d07c      	beq.n	800993a <_dtoa_r+0x1fa>
 8009840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009842:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800984a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800984e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009852:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009856:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800985a:	4b7d      	ldr	r3, [pc, #500]	; (8009a50 <_dtoa_r+0x310>)
 800985c:	2200      	movs	r2, #0
 800985e:	4630      	mov	r0, r6
 8009860:	4639      	mov	r1, r7
 8009862:	f7f6 fd31 	bl	80002c8 <__aeabi_dsub>
 8009866:	a36e      	add	r3, pc, #440	; (adr r3, 8009a20 <_dtoa_r+0x2e0>)
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f7f6 fee4 	bl	8000638 <__aeabi_dmul>
 8009870:	a36d      	add	r3, pc, #436	; (adr r3, 8009a28 <_dtoa_r+0x2e8>)
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	f7f6 fd29 	bl	80002cc <__adddf3>
 800987a:	4606      	mov	r6, r0
 800987c:	4628      	mov	r0, r5
 800987e:	460f      	mov	r7, r1
 8009880:	f7f6 fe70 	bl	8000564 <__aeabi_i2d>
 8009884:	a36a      	add	r3, pc, #424	; (adr r3, 8009a30 <_dtoa_r+0x2f0>)
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	f7f6 fed5 	bl	8000638 <__aeabi_dmul>
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	4630      	mov	r0, r6
 8009894:	4639      	mov	r1, r7
 8009896:	f7f6 fd19 	bl	80002cc <__adddf3>
 800989a:	4606      	mov	r6, r0
 800989c:	460f      	mov	r7, r1
 800989e:	f7f7 f97b 	bl	8000b98 <__aeabi_d2iz>
 80098a2:	2200      	movs	r2, #0
 80098a4:	4682      	mov	sl, r0
 80098a6:	2300      	movs	r3, #0
 80098a8:	4630      	mov	r0, r6
 80098aa:	4639      	mov	r1, r7
 80098ac:	f7f7 f936 	bl	8000b1c <__aeabi_dcmplt>
 80098b0:	b148      	cbz	r0, 80098c6 <_dtoa_r+0x186>
 80098b2:	4650      	mov	r0, sl
 80098b4:	f7f6 fe56 	bl	8000564 <__aeabi_i2d>
 80098b8:	4632      	mov	r2, r6
 80098ba:	463b      	mov	r3, r7
 80098bc:	f7f7 f924 	bl	8000b08 <__aeabi_dcmpeq>
 80098c0:	b908      	cbnz	r0, 80098c6 <_dtoa_r+0x186>
 80098c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80098c6:	f1ba 0f16 	cmp.w	sl, #22
 80098ca:	d854      	bhi.n	8009976 <_dtoa_r+0x236>
 80098cc:	4b61      	ldr	r3, [pc, #388]	; (8009a54 <_dtoa_r+0x314>)
 80098ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098da:	f7f7 f91f 	bl	8000b1c <__aeabi_dcmplt>
 80098de:	2800      	cmp	r0, #0
 80098e0:	d04b      	beq.n	800997a <_dtoa_r+0x23a>
 80098e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80098e6:	2300      	movs	r3, #0
 80098e8:	930e      	str	r3, [sp, #56]	; 0x38
 80098ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098ec:	1b5d      	subs	r5, r3, r5
 80098ee:	1e6b      	subs	r3, r5, #1
 80098f0:	9304      	str	r3, [sp, #16]
 80098f2:	bf43      	ittte	mi
 80098f4:	2300      	movmi	r3, #0
 80098f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80098fa:	9304      	strmi	r3, [sp, #16]
 80098fc:	f04f 0800 	movpl.w	r8, #0
 8009900:	f1ba 0f00 	cmp.w	sl, #0
 8009904:	db3b      	blt.n	800997e <_dtoa_r+0x23e>
 8009906:	9b04      	ldr	r3, [sp, #16]
 8009908:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800990c:	4453      	add	r3, sl
 800990e:	9304      	str	r3, [sp, #16]
 8009910:	2300      	movs	r3, #0
 8009912:	9306      	str	r3, [sp, #24]
 8009914:	9b05      	ldr	r3, [sp, #20]
 8009916:	2b09      	cmp	r3, #9
 8009918:	d869      	bhi.n	80099ee <_dtoa_r+0x2ae>
 800991a:	2b05      	cmp	r3, #5
 800991c:	bfc4      	itt	gt
 800991e:	3b04      	subgt	r3, #4
 8009920:	9305      	strgt	r3, [sp, #20]
 8009922:	9b05      	ldr	r3, [sp, #20]
 8009924:	f1a3 0302 	sub.w	r3, r3, #2
 8009928:	bfcc      	ite	gt
 800992a:	2500      	movgt	r5, #0
 800992c:	2501      	movle	r5, #1
 800992e:	2b03      	cmp	r3, #3
 8009930:	d869      	bhi.n	8009a06 <_dtoa_r+0x2c6>
 8009932:	e8df f003 	tbb	[pc, r3]
 8009936:	4e2c      	.short	0x4e2c
 8009938:	5a4c      	.short	0x5a4c
 800993a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800993e:	441d      	add	r5, r3
 8009940:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009944:	2b20      	cmp	r3, #32
 8009946:	bfc1      	itttt	gt
 8009948:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800994c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009950:	fa09 f303 	lslgt.w	r3, r9, r3
 8009954:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009958:	bfda      	itte	le
 800995a:	f1c3 0320 	rsble	r3, r3, #32
 800995e:	fa06 f003 	lslle.w	r0, r6, r3
 8009962:	4318      	orrgt	r0, r3
 8009964:	f7f6 fdee 	bl	8000544 <__aeabi_ui2d>
 8009968:	2301      	movs	r3, #1
 800996a:	4606      	mov	r6, r0
 800996c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009970:	3d01      	subs	r5, #1
 8009972:	9310      	str	r3, [sp, #64]	; 0x40
 8009974:	e771      	b.n	800985a <_dtoa_r+0x11a>
 8009976:	2301      	movs	r3, #1
 8009978:	e7b6      	b.n	80098e8 <_dtoa_r+0x1a8>
 800997a:	900e      	str	r0, [sp, #56]	; 0x38
 800997c:	e7b5      	b.n	80098ea <_dtoa_r+0x1aa>
 800997e:	f1ca 0300 	rsb	r3, sl, #0
 8009982:	9306      	str	r3, [sp, #24]
 8009984:	2300      	movs	r3, #0
 8009986:	eba8 080a 	sub.w	r8, r8, sl
 800998a:	930d      	str	r3, [sp, #52]	; 0x34
 800998c:	e7c2      	b.n	8009914 <_dtoa_r+0x1d4>
 800998e:	2300      	movs	r3, #0
 8009990:	9308      	str	r3, [sp, #32]
 8009992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009994:	2b00      	cmp	r3, #0
 8009996:	dc39      	bgt.n	8009a0c <_dtoa_r+0x2cc>
 8009998:	f04f 0901 	mov.w	r9, #1
 800999c:	f8cd 9004 	str.w	r9, [sp, #4]
 80099a0:	464b      	mov	r3, r9
 80099a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80099a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80099a8:	2200      	movs	r2, #0
 80099aa:	6042      	str	r2, [r0, #4]
 80099ac:	2204      	movs	r2, #4
 80099ae:	f102 0614 	add.w	r6, r2, #20
 80099b2:	429e      	cmp	r6, r3
 80099b4:	6841      	ldr	r1, [r0, #4]
 80099b6:	d92f      	bls.n	8009a18 <_dtoa_r+0x2d8>
 80099b8:	4620      	mov	r0, r4
 80099ba:	f001 f83f 	bl	800aa3c <_Balloc>
 80099be:	9000      	str	r0, [sp, #0]
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d14b      	bne.n	8009a5c <_dtoa_r+0x31c>
 80099c4:	4b24      	ldr	r3, [pc, #144]	; (8009a58 <_dtoa_r+0x318>)
 80099c6:	4602      	mov	r2, r0
 80099c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80099cc:	e6d1      	b.n	8009772 <_dtoa_r+0x32>
 80099ce:	2301      	movs	r3, #1
 80099d0:	e7de      	b.n	8009990 <_dtoa_r+0x250>
 80099d2:	2300      	movs	r3, #0
 80099d4:	9308      	str	r3, [sp, #32]
 80099d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d8:	eb0a 0903 	add.w	r9, sl, r3
 80099dc:	f109 0301 	add.w	r3, r9, #1
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	9301      	str	r3, [sp, #4]
 80099e4:	bfb8      	it	lt
 80099e6:	2301      	movlt	r3, #1
 80099e8:	e7dd      	b.n	80099a6 <_dtoa_r+0x266>
 80099ea:	2301      	movs	r3, #1
 80099ec:	e7f2      	b.n	80099d4 <_dtoa_r+0x294>
 80099ee:	2501      	movs	r5, #1
 80099f0:	2300      	movs	r3, #0
 80099f2:	9305      	str	r3, [sp, #20]
 80099f4:	9508      	str	r5, [sp, #32]
 80099f6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80099fa:	2200      	movs	r2, #0
 80099fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a00:	2312      	movs	r3, #18
 8009a02:	9209      	str	r2, [sp, #36]	; 0x24
 8009a04:	e7cf      	b.n	80099a6 <_dtoa_r+0x266>
 8009a06:	2301      	movs	r3, #1
 8009a08:	9308      	str	r3, [sp, #32]
 8009a0a:	e7f4      	b.n	80099f6 <_dtoa_r+0x2b6>
 8009a0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009a10:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a14:	464b      	mov	r3, r9
 8009a16:	e7c6      	b.n	80099a6 <_dtoa_r+0x266>
 8009a18:	3101      	adds	r1, #1
 8009a1a:	6041      	str	r1, [r0, #4]
 8009a1c:	0052      	lsls	r2, r2, #1
 8009a1e:	e7c6      	b.n	80099ae <_dtoa_r+0x26e>
 8009a20:	636f4361 	.word	0x636f4361
 8009a24:	3fd287a7 	.word	0x3fd287a7
 8009a28:	8b60c8b3 	.word	0x8b60c8b3
 8009a2c:	3fc68a28 	.word	0x3fc68a28
 8009a30:	509f79fb 	.word	0x509f79fb
 8009a34:	3fd34413 	.word	0x3fd34413
 8009a38:	080108c6 	.word	0x080108c6
 8009a3c:	080108dd 	.word	0x080108dd
 8009a40:	7ff00000 	.word	0x7ff00000
 8009a44:	080108c2 	.word	0x080108c2
 8009a48:	080108b9 	.word	0x080108b9
 8009a4c:	0801073d 	.word	0x0801073d
 8009a50:	3ff80000 	.word	0x3ff80000
 8009a54:	08010a58 	.word	0x08010a58
 8009a58:	0801093c 	.word	0x0801093c
 8009a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a5e:	9a00      	ldr	r2, [sp, #0]
 8009a60:	601a      	str	r2, [r3, #0]
 8009a62:	9b01      	ldr	r3, [sp, #4]
 8009a64:	2b0e      	cmp	r3, #14
 8009a66:	f200 80ad 	bhi.w	8009bc4 <_dtoa_r+0x484>
 8009a6a:	2d00      	cmp	r5, #0
 8009a6c:	f000 80aa 	beq.w	8009bc4 <_dtoa_r+0x484>
 8009a70:	f1ba 0f00 	cmp.w	sl, #0
 8009a74:	dd36      	ble.n	8009ae4 <_dtoa_r+0x3a4>
 8009a76:	4ac3      	ldr	r2, [pc, #780]	; (8009d84 <_dtoa_r+0x644>)
 8009a78:	f00a 030f 	and.w	r3, sl, #15
 8009a7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a80:	ed93 7b00 	vldr	d7, [r3]
 8009a84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009a88:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009a8c:	eeb0 8a47 	vmov.f32	s16, s14
 8009a90:	eef0 8a67 	vmov.f32	s17, s15
 8009a94:	d016      	beq.n	8009ac4 <_dtoa_r+0x384>
 8009a96:	4bbc      	ldr	r3, [pc, #752]	; (8009d88 <_dtoa_r+0x648>)
 8009a98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009aa0:	f7f6 fef4 	bl	800088c <__aeabi_ddiv>
 8009aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009aa8:	f007 070f 	and.w	r7, r7, #15
 8009aac:	2503      	movs	r5, #3
 8009aae:	4eb6      	ldr	r6, [pc, #728]	; (8009d88 <_dtoa_r+0x648>)
 8009ab0:	b957      	cbnz	r7, 8009ac8 <_dtoa_r+0x388>
 8009ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ab6:	ec53 2b18 	vmov	r2, r3, d8
 8009aba:	f7f6 fee7 	bl	800088c <__aeabi_ddiv>
 8009abe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ac2:	e029      	b.n	8009b18 <_dtoa_r+0x3d8>
 8009ac4:	2502      	movs	r5, #2
 8009ac6:	e7f2      	b.n	8009aae <_dtoa_r+0x36e>
 8009ac8:	07f9      	lsls	r1, r7, #31
 8009aca:	d508      	bpl.n	8009ade <_dtoa_r+0x39e>
 8009acc:	ec51 0b18 	vmov	r0, r1, d8
 8009ad0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ad4:	f7f6 fdb0 	bl	8000638 <__aeabi_dmul>
 8009ad8:	ec41 0b18 	vmov	d8, r0, r1
 8009adc:	3501      	adds	r5, #1
 8009ade:	107f      	asrs	r7, r7, #1
 8009ae0:	3608      	adds	r6, #8
 8009ae2:	e7e5      	b.n	8009ab0 <_dtoa_r+0x370>
 8009ae4:	f000 80a6 	beq.w	8009c34 <_dtoa_r+0x4f4>
 8009ae8:	f1ca 0600 	rsb	r6, sl, #0
 8009aec:	4ba5      	ldr	r3, [pc, #660]	; (8009d84 <_dtoa_r+0x644>)
 8009aee:	4fa6      	ldr	r7, [pc, #664]	; (8009d88 <_dtoa_r+0x648>)
 8009af0:	f006 020f 	and.w	r2, r6, #15
 8009af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b00:	f7f6 fd9a 	bl	8000638 <__aeabi_dmul>
 8009b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b08:	1136      	asrs	r6, r6, #4
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	2502      	movs	r5, #2
 8009b0e:	2e00      	cmp	r6, #0
 8009b10:	f040 8085 	bne.w	8009c1e <_dtoa_r+0x4de>
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1d2      	bne.n	8009abe <_dtoa_r+0x37e>
 8009b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f000 808c 	beq.w	8009c38 <_dtoa_r+0x4f8>
 8009b20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b24:	4b99      	ldr	r3, [pc, #612]	; (8009d8c <_dtoa_r+0x64c>)
 8009b26:	2200      	movs	r2, #0
 8009b28:	4630      	mov	r0, r6
 8009b2a:	4639      	mov	r1, r7
 8009b2c:	f7f6 fff6 	bl	8000b1c <__aeabi_dcmplt>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	f000 8081 	beq.w	8009c38 <_dtoa_r+0x4f8>
 8009b36:	9b01      	ldr	r3, [sp, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d07d      	beq.n	8009c38 <_dtoa_r+0x4f8>
 8009b3c:	f1b9 0f00 	cmp.w	r9, #0
 8009b40:	dd3c      	ble.n	8009bbc <_dtoa_r+0x47c>
 8009b42:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009b46:	9307      	str	r3, [sp, #28]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	4b91      	ldr	r3, [pc, #580]	; (8009d90 <_dtoa_r+0x650>)
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	4639      	mov	r1, r7
 8009b50:	f7f6 fd72 	bl	8000638 <__aeabi_dmul>
 8009b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b58:	3501      	adds	r5, #1
 8009b5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009b5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b62:	4628      	mov	r0, r5
 8009b64:	f7f6 fcfe 	bl	8000564 <__aeabi_i2d>
 8009b68:	4632      	mov	r2, r6
 8009b6a:	463b      	mov	r3, r7
 8009b6c:	f7f6 fd64 	bl	8000638 <__aeabi_dmul>
 8009b70:	4b88      	ldr	r3, [pc, #544]	; (8009d94 <_dtoa_r+0x654>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	f7f6 fbaa 	bl	80002cc <__adddf3>
 8009b78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b80:	9303      	str	r3, [sp, #12]
 8009b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d15c      	bne.n	8009c42 <_dtoa_r+0x502>
 8009b88:	4b83      	ldr	r3, [pc, #524]	; (8009d98 <_dtoa_r+0x658>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	4639      	mov	r1, r7
 8009b90:	f7f6 fb9a 	bl	80002c8 <__aeabi_dsub>
 8009b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b98:	4606      	mov	r6, r0
 8009b9a:	460f      	mov	r7, r1
 8009b9c:	f7f6 ffdc 	bl	8000b58 <__aeabi_dcmpgt>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	f040 8296 	bne.w	800a0d2 <_dtoa_r+0x992>
 8009ba6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009baa:	4630      	mov	r0, r6
 8009bac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bb0:	4639      	mov	r1, r7
 8009bb2:	f7f6 ffb3 	bl	8000b1c <__aeabi_dcmplt>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	f040 8288 	bne.w	800a0cc <_dtoa_r+0x98c>
 8009bbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009bc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009bc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f2c0 8158 	blt.w	8009e7c <_dtoa_r+0x73c>
 8009bcc:	f1ba 0f0e 	cmp.w	sl, #14
 8009bd0:	f300 8154 	bgt.w	8009e7c <_dtoa_r+0x73c>
 8009bd4:	4b6b      	ldr	r3, [pc, #428]	; (8009d84 <_dtoa_r+0x644>)
 8009bd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009bda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f280 80e3 	bge.w	8009dac <_dtoa_r+0x66c>
 8009be6:	9b01      	ldr	r3, [sp, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f300 80df 	bgt.w	8009dac <_dtoa_r+0x66c>
 8009bee:	f040 826d 	bne.w	800a0cc <_dtoa_r+0x98c>
 8009bf2:	4b69      	ldr	r3, [pc, #420]	; (8009d98 <_dtoa_r+0x658>)
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	4640      	mov	r0, r8
 8009bf8:	4649      	mov	r1, r9
 8009bfa:	f7f6 fd1d 	bl	8000638 <__aeabi_dmul>
 8009bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c02:	f7f6 ff9f 	bl	8000b44 <__aeabi_dcmpge>
 8009c06:	9e01      	ldr	r6, [sp, #4]
 8009c08:	4637      	mov	r7, r6
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	f040 8243 	bne.w	800a096 <_dtoa_r+0x956>
 8009c10:	9d00      	ldr	r5, [sp, #0]
 8009c12:	2331      	movs	r3, #49	; 0x31
 8009c14:	f805 3b01 	strb.w	r3, [r5], #1
 8009c18:	f10a 0a01 	add.w	sl, sl, #1
 8009c1c:	e23f      	b.n	800a09e <_dtoa_r+0x95e>
 8009c1e:	07f2      	lsls	r2, r6, #31
 8009c20:	d505      	bpl.n	8009c2e <_dtoa_r+0x4ee>
 8009c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c26:	f7f6 fd07 	bl	8000638 <__aeabi_dmul>
 8009c2a:	3501      	adds	r5, #1
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	1076      	asrs	r6, r6, #1
 8009c30:	3708      	adds	r7, #8
 8009c32:	e76c      	b.n	8009b0e <_dtoa_r+0x3ce>
 8009c34:	2502      	movs	r5, #2
 8009c36:	e76f      	b.n	8009b18 <_dtoa_r+0x3d8>
 8009c38:	9b01      	ldr	r3, [sp, #4]
 8009c3a:	f8cd a01c 	str.w	sl, [sp, #28]
 8009c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8009c40:	e78d      	b.n	8009b5e <_dtoa_r+0x41e>
 8009c42:	9900      	ldr	r1, [sp, #0]
 8009c44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009c46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c48:	4b4e      	ldr	r3, [pc, #312]	; (8009d84 <_dtoa_r+0x644>)
 8009c4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c4e:	4401      	add	r1, r0
 8009c50:	9102      	str	r1, [sp, #8]
 8009c52:	9908      	ldr	r1, [sp, #32]
 8009c54:	eeb0 8a47 	vmov.f32	s16, s14
 8009c58:	eef0 8a67 	vmov.f32	s17, s15
 8009c5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c64:	2900      	cmp	r1, #0
 8009c66:	d045      	beq.n	8009cf4 <_dtoa_r+0x5b4>
 8009c68:	494c      	ldr	r1, [pc, #304]	; (8009d9c <_dtoa_r+0x65c>)
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	f7f6 fe0e 	bl	800088c <__aeabi_ddiv>
 8009c70:	ec53 2b18 	vmov	r2, r3, d8
 8009c74:	f7f6 fb28 	bl	80002c8 <__aeabi_dsub>
 8009c78:	9d00      	ldr	r5, [sp, #0]
 8009c7a:	ec41 0b18 	vmov	d8, r0, r1
 8009c7e:	4639      	mov	r1, r7
 8009c80:	4630      	mov	r0, r6
 8009c82:	f7f6 ff89 	bl	8000b98 <__aeabi_d2iz>
 8009c86:	900c      	str	r0, [sp, #48]	; 0x30
 8009c88:	f7f6 fc6c 	bl	8000564 <__aeabi_i2d>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4630      	mov	r0, r6
 8009c92:	4639      	mov	r1, r7
 8009c94:	f7f6 fb18 	bl	80002c8 <__aeabi_dsub>
 8009c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c9a:	3330      	adds	r3, #48	; 0x30
 8009c9c:	f805 3b01 	strb.w	r3, [r5], #1
 8009ca0:	ec53 2b18 	vmov	r2, r3, d8
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	460f      	mov	r7, r1
 8009ca8:	f7f6 ff38 	bl	8000b1c <__aeabi_dcmplt>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d165      	bne.n	8009d7c <_dtoa_r+0x63c>
 8009cb0:	4632      	mov	r2, r6
 8009cb2:	463b      	mov	r3, r7
 8009cb4:	4935      	ldr	r1, [pc, #212]	; (8009d8c <_dtoa_r+0x64c>)
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	f7f6 fb06 	bl	80002c8 <__aeabi_dsub>
 8009cbc:	ec53 2b18 	vmov	r2, r3, d8
 8009cc0:	f7f6 ff2c 	bl	8000b1c <__aeabi_dcmplt>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	f040 80b9 	bne.w	8009e3c <_dtoa_r+0x6fc>
 8009cca:	9b02      	ldr	r3, [sp, #8]
 8009ccc:	429d      	cmp	r5, r3
 8009cce:	f43f af75 	beq.w	8009bbc <_dtoa_r+0x47c>
 8009cd2:	4b2f      	ldr	r3, [pc, #188]	; (8009d90 <_dtoa_r+0x650>)
 8009cd4:	ec51 0b18 	vmov	r0, r1, d8
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f7f6 fcad 	bl	8000638 <__aeabi_dmul>
 8009cde:	4b2c      	ldr	r3, [pc, #176]	; (8009d90 <_dtoa_r+0x650>)
 8009ce0:	ec41 0b18 	vmov	d8, r0, r1
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	4639      	mov	r1, r7
 8009cea:	f7f6 fca5 	bl	8000638 <__aeabi_dmul>
 8009cee:	4606      	mov	r6, r0
 8009cf0:	460f      	mov	r7, r1
 8009cf2:	e7c4      	b.n	8009c7e <_dtoa_r+0x53e>
 8009cf4:	ec51 0b17 	vmov	r0, r1, d7
 8009cf8:	f7f6 fc9e 	bl	8000638 <__aeabi_dmul>
 8009cfc:	9b02      	ldr	r3, [sp, #8]
 8009cfe:	9d00      	ldr	r5, [sp, #0]
 8009d00:	930c      	str	r3, [sp, #48]	; 0x30
 8009d02:	ec41 0b18 	vmov	d8, r0, r1
 8009d06:	4639      	mov	r1, r7
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f7f6 ff45 	bl	8000b98 <__aeabi_d2iz>
 8009d0e:	9011      	str	r0, [sp, #68]	; 0x44
 8009d10:	f7f6 fc28 	bl	8000564 <__aeabi_i2d>
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	4630      	mov	r0, r6
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	f7f6 fad4 	bl	80002c8 <__aeabi_dsub>
 8009d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d22:	3330      	adds	r3, #48	; 0x30
 8009d24:	f805 3b01 	strb.w	r3, [r5], #1
 8009d28:	9b02      	ldr	r3, [sp, #8]
 8009d2a:	429d      	cmp	r5, r3
 8009d2c:	4606      	mov	r6, r0
 8009d2e:	460f      	mov	r7, r1
 8009d30:	f04f 0200 	mov.w	r2, #0
 8009d34:	d134      	bne.n	8009da0 <_dtoa_r+0x660>
 8009d36:	4b19      	ldr	r3, [pc, #100]	; (8009d9c <_dtoa_r+0x65c>)
 8009d38:	ec51 0b18 	vmov	r0, r1, d8
 8009d3c:	f7f6 fac6 	bl	80002cc <__adddf3>
 8009d40:	4602      	mov	r2, r0
 8009d42:	460b      	mov	r3, r1
 8009d44:	4630      	mov	r0, r6
 8009d46:	4639      	mov	r1, r7
 8009d48:	f7f6 ff06 	bl	8000b58 <__aeabi_dcmpgt>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d175      	bne.n	8009e3c <_dtoa_r+0x6fc>
 8009d50:	ec53 2b18 	vmov	r2, r3, d8
 8009d54:	4911      	ldr	r1, [pc, #68]	; (8009d9c <_dtoa_r+0x65c>)
 8009d56:	2000      	movs	r0, #0
 8009d58:	f7f6 fab6 	bl	80002c8 <__aeabi_dsub>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4630      	mov	r0, r6
 8009d62:	4639      	mov	r1, r7
 8009d64:	f7f6 feda 	bl	8000b1c <__aeabi_dcmplt>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	f43f af27 	beq.w	8009bbc <_dtoa_r+0x47c>
 8009d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d70:	1e6b      	subs	r3, r5, #1
 8009d72:	930c      	str	r3, [sp, #48]	; 0x30
 8009d74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d78:	2b30      	cmp	r3, #48	; 0x30
 8009d7a:	d0f8      	beq.n	8009d6e <_dtoa_r+0x62e>
 8009d7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009d80:	e04a      	b.n	8009e18 <_dtoa_r+0x6d8>
 8009d82:	bf00      	nop
 8009d84:	08010a58 	.word	0x08010a58
 8009d88:	08010a30 	.word	0x08010a30
 8009d8c:	3ff00000 	.word	0x3ff00000
 8009d90:	40240000 	.word	0x40240000
 8009d94:	401c0000 	.word	0x401c0000
 8009d98:	40140000 	.word	0x40140000
 8009d9c:	3fe00000 	.word	0x3fe00000
 8009da0:	4baf      	ldr	r3, [pc, #700]	; (800a060 <_dtoa_r+0x920>)
 8009da2:	f7f6 fc49 	bl	8000638 <__aeabi_dmul>
 8009da6:	4606      	mov	r6, r0
 8009da8:	460f      	mov	r7, r1
 8009daa:	e7ac      	b.n	8009d06 <_dtoa_r+0x5c6>
 8009dac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009db0:	9d00      	ldr	r5, [sp, #0]
 8009db2:	4642      	mov	r2, r8
 8009db4:	464b      	mov	r3, r9
 8009db6:	4630      	mov	r0, r6
 8009db8:	4639      	mov	r1, r7
 8009dba:	f7f6 fd67 	bl	800088c <__aeabi_ddiv>
 8009dbe:	f7f6 feeb 	bl	8000b98 <__aeabi_d2iz>
 8009dc2:	9002      	str	r0, [sp, #8]
 8009dc4:	f7f6 fbce 	bl	8000564 <__aeabi_i2d>
 8009dc8:	4642      	mov	r2, r8
 8009dca:	464b      	mov	r3, r9
 8009dcc:	f7f6 fc34 	bl	8000638 <__aeabi_dmul>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	4639      	mov	r1, r7
 8009dd8:	f7f6 fa76 	bl	80002c8 <__aeabi_dsub>
 8009ddc:	9e02      	ldr	r6, [sp, #8]
 8009dde:	9f01      	ldr	r7, [sp, #4]
 8009de0:	3630      	adds	r6, #48	; 0x30
 8009de2:	f805 6b01 	strb.w	r6, [r5], #1
 8009de6:	9e00      	ldr	r6, [sp, #0]
 8009de8:	1bae      	subs	r6, r5, r6
 8009dea:	42b7      	cmp	r7, r6
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	d137      	bne.n	8009e62 <_dtoa_r+0x722>
 8009df2:	f7f6 fa6b 	bl	80002cc <__adddf3>
 8009df6:	4642      	mov	r2, r8
 8009df8:	464b      	mov	r3, r9
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	460f      	mov	r7, r1
 8009dfe:	f7f6 feab 	bl	8000b58 <__aeabi_dcmpgt>
 8009e02:	b9c8      	cbnz	r0, 8009e38 <_dtoa_r+0x6f8>
 8009e04:	4642      	mov	r2, r8
 8009e06:	464b      	mov	r3, r9
 8009e08:	4630      	mov	r0, r6
 8009e0a:	4639      	mov	r1, r7
 8009e0c:	f7f6 fe7c 	bl	8000b08 <__aeabi_dcmpeq>
 8009e10:	b110      	cbz	r0, 8009e18 <_dtoa_r+0x6d8>
 8009e12:	9b02      	ldr	r3, [sp, #8]
 8009e14:	07d9      	lsls	r1, r3, #31
 8009e16:	d40f      	bmi.n	8009e38 <_dtoa_r+0x6f8>
 8009e18:	4620      	mov	r0, r4
 8009e1a:	4659      	mov	r1, fp
 8009e1c:	f000 fe4e 	bl	800aabc <_Bfree>
 8009e20:	2300      	movs	r3, #0
 8009e22:	702b      	strb	r3, [r5, #0]
 8009e24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e26:	f10a 0001 	add.w	r0, sl, #1
 8009e2a:	6018      	str	r0, [r3, #0]
 8009e2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f43f acd8 	beq.w	80097e4 <_dtoa_r+0xa4>
 8009e34:	601d      	str	r5, [r3, #0]
 8009e36:	e4d5      	b.n	80097e4 <_dtoa_r+0xa4>
 8009e38:	f8cd a01c 	str.w	sl, [sp, #28]
 8009e3c:	462b      	mov	r3, r5
 8009e3e:	461d      	mov	r5, r3
 8009e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e44:	2a39      	cmp	r2, #57	; 0x39
 8009e46:	d108      	bne.n	8009e5a <_dtoa_r+0x71a>
 8009e48:	9a00      	ldr	r2, [sp, #0]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d1f7      	bne.n	8009e3e <_dtoa_r+0x6fe>
 8009e4e:	9a07      	ldr	r2, [sp, #28]
 8009e50:	9900      	ldr	r1, [sp, #0]
 8009e52:	3201      	adds	r2, #1
 8009e54:	9207      	str	r2, [sp, #28]
 8009e56:	2230      	movs	r2, #48	; 0x30
 8009e58:	700a      	strb	r2, [r1, #0]
 8009e5a:	781a      	ldrb	r2, [r3, #0]
 8009e5c:	3201      	adds	r2, #1
 8009e5e:	701a      	strb	r2, [r3, #0]
 8009e60:	e78c      	b.n	8009d7c <_dtoa_r+0x63c>
 8009e62:	4b7f      	ldr	r3, [pc, #508]	; (800a060 <_dtoa_r+0x920>)
 8009e64:	2200      	movs	r2, #0
 8009e66:	f7f6 fbe7 	bl	8000638 <__aeabi_dmul>
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	4606      	mov	r6, r0
 8009e70:	460f      	mov	r7, r1
 8009e72:	f7f6 fe49 	bl	8000b08 <__aeabi_dcmpeq>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d09b      	beq.n	8009db2 <_dtoa_r+0x672>
 8009e7a:	e7cd      	b.n	8009e18 <_dtoa_r+0x6d8>
 8009e7c:	9a08      	ldr	r2, [sp, #32]
 8009e7e:	2a00      	cmp	r2, #0
 8009e80:	f000 80c4 	beq.w	800a00c <_dtoa_r+0x8cc>
 8009e84:	9a05      	ldr	r2, [sp, #20]
 8009e86:	2a01      	cmp	r2, #1
 8009e88:	f300 80a8 	bgt.w	8009fdc <_dtoa_r+0x89c>
 8009e8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e8e:	2a00      	cmp	r2, #0
 8009e90:	f000 80a0 	beq.w	8009fd4 <_dtoa_r+0x894>
 8009e94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009e98:	9e06      	ldr	r6, [sp, #24]
 8009e9a:	4645      	mov	r5, r8
 8009e9c:	9a04      	ldr	r2, [sp, #16]
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	441a      	add	r2, r3
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	4498      	add	r8, r3
 8009ea6:	9204      	str	r2, [sp, #16]
 8009ea8:	f000 ff0e 	bl	800acc8 <__i2b>
 8009eac:	4607      	mov	r7, r0
 8009eae:	2d00      	cmp	r5, #0
 8009eb0:	dd0b      	ble.n	8009eca <_dtoa_r+0x78a>
 8009eb2:	9b04      	ldr	r3, [sp, #16]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	dd08      	ble.n	8009eca <_dtoa_r+0x78a>
 8009eb8:	42ab      	cmp	r3, r5
 8009eba:	9a04      	ldr	r2, [sp, #16]
 8009ebc:	bfa8      	it	ge
 8009ebe:	462b      	movge	r3, r5
 8009ec0:	eba8 0803 	sub.w	r8, r8, r3
 8009ec4:	1aed      	subs	r5, r5, r3
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	9304      	str	r3, [sp, #16]
 8009eca:	9b06      	ldr	r3, [sp, #24]
 8009ecc:	b1fb      	cbz	r3, 8009f0e <_dtoa_r+0x7ce>
 8009ece:	9b08      	ldr	r3, [sp, #32]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 809f 	beq.w	800a014 <_dtoa_r+0x8d4>
 8009ed6:	2e00      	cmp	r6, #0
 8009ed8:	dd11      	ble.n	8009efe <_dtoa_r+0x7be>
 8009eda:	4639      	mov	r1, r7
 8009edc:	4632      	mov	r2, r6
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f000 ffae 	bl	800ae40 <__pow5mult>
 8009ee4:	465a      	mov	r2, fp
 8009ee6:	4601      	mov	r1, r0
 8009ee8:	4607      	mov	r7, r0
 8009eea:	4620      	mov	r0, r4
 8009eec:	f000 ff02 	bl	800acf4 <__multiply>
 8009ef0:	4659      	mov	r1, fp
 8009ef2:	9007      	str	r0, [sp, #28]
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f000 fde1 	bl	800aabc <_Bfree>
 8009efa:	9b07      	ldr	r3, [sp, #28]
 8009efc:	469b      	mov	fp, r3
 8009efe:	9b06      	ldr	r3, [sp, #24]
 8009f00:	1b9a      	subs	r2, r3, r6
 8009f02:	d004      	beq.n	8009f0e <_dtoa_r+0x7ce>
 8009f04:	4659      	mov	r1, fp
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 ff9a 	bl	800ae40 <__pow5mult>
 8009f0c:	4683      	mov	fp, r0
 8009f0e:	2101      	movs	r1, #1
 8009f10:	4620      	mov	r0, r4
 8009f12:	f000 fed9 	bl	800acc8 <__i2b>
 8009f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	4606      	mov	r6, r0
 8009f1c:	dd7c      	ble.n	800a018 <_dtoa_r+0x8d8>
 8009f1e:	461a      	mov	r2, r3
 8009f20:	4601      	mov	r1, r0
 8009f22:	4620      	mov	r0, r4
 8009f24:	f000 ff8c 	bl	800ae40 <__pow5mult>
 8009f28:	9b05      	ldr	r3, [sp, #20]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	4606      	mov	r6, r0
 8009f2e:	dd76      	ble.n	800a01e <_dtoa_r+0x8de>
 8009f30:	2300      	movs	r3, #0
 8009f32:	9306      	str	r3, [sp, #24]
 8009f34:	6933      	ldr	r3, [r6, #16]
 8009f36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009f3a:	6918      	ldr	r0, [r3, #16]
 8009f3c:	f000 fe74 	bl	800ac28 <__hi0bits>
 8009f40:	f1c0 0020 	rsb	r0, r0, #32
 8009f44:	9b04      	ldr	r3, [sp, #16]
 8009f46:	4418      	add	r0, r3
 8009f48:	f010 001f 	ands.w	r0, r0, #31
 8009f4c:	f000 8086 	beq.w	800a05c <_dtoa_r+0x91c>
 8009f50:	f1c0 0320 	rsb	r3, r0, #32
 8009f54:	2b04      	cmp	r3, #4
 8009f56:	dd7f      	ble.n	800a058 <_dtoa_r+0x918>
 8009f58:	f1c0 001c 	rsb	r0, r0, #28
 8009f5c:	9b04      	ldr	r3, [sp, #16]
 8009f5e:	4403      	add	r3, r0
 8009f60:	4480      	add	r8, r0
 8009f62:	4405      	add	r5, r0
 8009f64:	9304      	str	r3, [sp, #16]
 8009f66:	f1b8 0f00 	cmp.w	r8, #0
 8009f6a:	dd05      	ble.n	8009f78 <_dtoa_r+0x838>
 8009f6c:	4659      	mov	r1, fp
 8009f6e:	4642      	mov	r2, r8
 8009f70:	4620      	mov	r0, r4
 8009f72:	f000 ffbf 	bl	800aef4 <__lshift>
 8009f76:	4683      	mov	fp, r0
 8009f78:	9b04      	ldr	r3, [sp, #16]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	dd05      	ble.n	8009f8a <_dtoa_r+0x84a>
 8009f7e:	4631      	mov	r1, r6
 8009f80:	461a      	mov	r2, r3
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 ffb6 	bl	800aef4 <__lshift>
 8009f88:	4606      	mov	r6, r0
 8009f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d069      	beq.n	800a064 <_dtoa_r+0x924>
 8009f90:	4631      	mov	r1, r6
 8009f92:	4658      	mov	r0, fp
 8009f94:	f001 f81a 	bl	800afcc <__mcmp>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	da63      	bge.n	800a064 <_dtoa_r+0x924>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	4659      	mov	r1, fp
 8009fa0:	220a      	movs	r2, #10
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f000 fdac 	bl	800ab00 <__multadd>
 8009fa8:	9b08      	ldr	r3, [sp, #32]
 8009faa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009fae:	4683      	mov	fp, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 818f 	beq.w	800a2d4 <_dtoa_r+0xb94>
 8009fb6:	4639      	mov	r1, r7
 8009fb8:	2300      	movs	r3, #0
 8009fba:	220a      	movs	r2, #10
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f000 fd9f 	bl	800ab00 <__multadd>
 8009fc2:	f1b9 0f00 	cmp.w	r9, #0
 8009fc6:	4607      	mov	r7, r0
 8009fc8:	f300 808e 	bgt.w	800a0e8 <_dtoa_r+0x9a8>
 8009fcc:	9b05      	ldr	r3, [sp, #20]
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	dc50      	bgt.n	800a074 <_dtoa_r+0x934>
 8009fd2:	e089      	b.n	800a0e8 <_dtoa_r+0x9a8>
 8009fd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009fda:	e75d      	b.n	8009e98 <_dtoa_r+0x758>
 8009fdc:	9b01      	ldr	r3, [sp, #4]
 8009fde:	1e5e      	subs	r6, r3, #1
 8009fe0:	9b06      	ldr	r3, [sp, #24]
 8009fe2:	42b3      	cmp	r3, r6
 8009fe4:	bfbf      	itttt	lt
 8009fe6:	9b06      	ldrlt	r3, [sp, #24]
 8009fe8:	9606      	strlt	r6, [sp, #24]
 8009fea:	1af2      	sublt	r2, r6, r3
 8009fec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009fee:	bfb6      	itet	lt
 8009ff0:	189b      	addlt	r3, r3, r2
 8009ff2:	1b9e      	subge	r6, r3, r6
 8009ff4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009ff6:	9b01      	ldr	r3, [sp, #4]
 8009ff8:	bfb8      	it	lt
 8009ffa:	2600      	movlt	r6, #0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	bfb5      	itete	lt
 800a000:	eba8 0503 	sublt.w	r5, r8, r3
 800a004:	9b01      	ldrge	r3, [sp, #4]
 800a006:	2300      	movlt	r3, #0
 800a008:	4645      	movge	r5, r8
 800a00a:	e747      	b.n	8009e9c <_dtoa_r+0x75c>
 800a00c:	9e06      	ldr	r6, [sp, #24]
 800a00e:	9f08      	ldr	r7, [sp, #32]
 800a010:	4645      	mov	r5, r8
 800a012:	e74c      	b.n	8009eae <_dtoa_r+0x76e>
 800a014:	9a06      	ldr	r2, [sp, #24]
 800a016:	e775      	b.n	8009f04 <_dtoa_r+0x7c4>
 800a018:	9b05      	ldr	r3, [sp, #20]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	dc18      	bgt.n	800a050 <_dtoa_r+0x910>
 800a01e:	9b02      	ldr	r3, [sp, #8]
 800a020:	b9b3      	cbnz	r3, 800a050 <_dtoa_r+0x910>
 800a022:	9b03      	ldr	r3, [sp, #12]
 800a024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a028:	b9a3      	cbnz	r3, 800a054 <_dtoa_r+0x914>
 800a02a:	9b03      	ldr	r3, [sp, #12]
 800a02c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a030:	0d1b      	lsrs	r3, r3, #20
 800a032:	051b      	lsls	r3, r3, #20
 800a034:	b12b      	cbz	r3, 800a042 <_dtoa_r+0x902>
 800a036:	9b04      	ldr	r3, [sp, #16]
 800a038:	3301      	adds	r3, #1
 800a03a:	9304      	str	r3, [sp, #16]
 800a03c:	f108 0801 	add.w	r8, r8, #1
 800a040:	2301      	movs	r3, #1
 800a042:	9306      	str	r3, [sp, #24]
 800a044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a046:	2b00      	cmp	r3, #0
 800a048:	f47f af74 	bne.w	8009f34 <_dtoa_r+0x7f4>
 800a04c:	2001      	movs	r0, #1
 800a04e:	e779      	b.n	8009f44 <_dtoa_r+0x804>
 800a050:	2300      	movs	r3, #0
 800a052:	e7f6      	b.n	800a042 <_dtoa_r+0x902>
 800a054:	9b02      	ldr	r3, [sp, #8]
 800a056:	e7f4      	b.n	800a042 <_dtoa_r+0x902>
 800a058:	d085      	beq.n	8009f66 <_dtoa_r+0x826>
 800a05a:	4618      	mov	r0, r3
 800a05c:	301c      	adds	r0, #28
 800a05e:	e77d      	b.n	8009f5c <_dtoa_r+0x81c>
 800a060:	40240000 	.word	0x40240000
 800a064:	9b01      	ldr	r3, [sp, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	dc38      	bgt.n	800a0dc <_dtoa_r+0x99c>
 800a06a:	9b05      	ldr	r3, [sp, #20]
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	dd35      	ble.n	800a0dc <_dtoa_r+0x99c>
 800a070:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a074:	f1b9 0f00 	cmp.w	r9, #0
 800a078:	d10d      	bne.n	800a096 <_dtoa_r+0x956>
 800a07a:	4631      	mov	r1, r6
 800a07c:	464b      	mov	r3, r9
 800a07e:	2205      	movs	r2, #5
 800a080:	4620      	mov	r0, r4
 800a082:	f000 fd3d 	bl	800ab00 <__multadd>
 800a086:	4601      	mov	r1, r0
 800a088:	4606      	mov	r6, r0
 800a08a:	4658      	mov	r0, fp
 800a08c:	f000 ff9e 	bl	800afcc <__mcmp>
 800a090:	2800      	cmp	r0, #0
 800a092:	f73f adbd 	bgt.w	8009c10 <_dtoa_r+0x4d0>
 800a096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a098:	9d00      	ldr	r5, [sp, #0]
 800a09a:	ea6f 0a03 	mvn.w	sl, r3
 800a09e:	f04f 0800 	mov.w	r8, #0
 800a0a2:	4631      	mov	r1, r6
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f000 fd09 	bl	800aabc <_Bfree>
 800a0aa:	2f00      	cmp	r7, #0
 800a0ac:	f43f aeb4 	beq.w	8009e18 <_dtoa_r+0x6d8>
 800a0b0:	f1b8 0f00 	cmp.w	r8, #0
 800a0b4:	d005      	beq.n	800a0c2 <_dtoa_r+0x982>
 800a0b6:	45b8      	cmp	r8, r7
 800a0b8:	d003      	beq.n	800a0c2 <_dtoa_r+0x982>
 800a0ba:	4641      	mov	r1, r8
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f000 fcfd 	bl	800aabc <_Bfree>
 800a0c2:	4639      	mov	r1, r7
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f000 fcf9 	bl	800aabc <_Bfree>
 800a0ca:	e6a5      	b.n	8009e18 <_dtoa_r+0x6d8>
 800a0cc:	2600      	movs	r6, #0
 800a0ce:	4637      	mov	r7, r6
 800a0d0:	e7e1      	b.n	800a096 <_dtoa_r+0x956>
 800a0d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a0d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a0d8:	4637      	mov	r7, r6
 800a0da:	e599      	b.n	8009c10 <_dtoa_r+0x4d0>
 800a0dc:	9b08      	ldr	r3, [sp, #32]
 800a0de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f000 80fd 	beq.w	800a2e2 <_dtoa_r+0xba2>
 800a0e8:	2d00      	cmp	r5, #0
 800a0ea:	dd05      	ble.n	800a0f8 <_dtoa_r+0x9b8>
 800a0ec:	4639      	mov	r1, r7
 800a0ee:	462a      	mov	r2, r5
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f000 feff 	bl	800aef4 <__lshift>
 800a0f6:	4607      	mov	r7, r0
 800a0f8:	9b06      	ldr	r3, [sp, #24]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d05c      	beq.n	800a1b8 <_dtoa_r+0xa78>
 800a0fe:	6879      	ldr	r1, [r7, #4]
 800a100:	4620      	mov	r0, r4
 800a102:	f000 fc9b 	bl	800aa3c <_Balloc>
 800a106:	4605      	mov	r5, r0
 800a108:	b928      	cbnz	r0, 800a116 <_dtoa_r+0x9d6>
 800a10a:	4b80      	ldr	r3, [pc, #512]	; (800a30c <_dtoa_r+0xbcc>)
 800a10c:	4602      	mov	r2, r0
 800a10e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a112:	f7ff bb2e 	b.w	8009772 <_dtoa_r+0x32>
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	3202      	adds	r2, #2
 800a11a:	0092      	lsls	r2, r2, #2
 800a11c:	f107 010c 	add.w	r1, r7, #12
 800a120:	300c      	adds	r0, #12
 800a122:	f7fd fc43 	bl	80079ac <memcpy>
 800a126:	2201      	movs	r2, #1
 800a128:	4629      	mov	r1, r5
 800a12a:	4620      	mov	r0, r4
 800a12c:	f000 fee2 	bl	800aef4 <__lshift>
 800a130:	9b00      	ldr	r3, [sp, #0]
 800a132:	3301      	adds	r3, #1
 800a134:	9301      	str	r3, [sp, #4]
 800a136:	9b00      	ldr	r3, [sp, #0]
 800a138:	444b      	add	r3, r9
 800a13a:	9307      	str	r3, [sp, #28]
 800a13c:	9b02      	ldr	r3, [sp, #8]
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	46b8      	mov	r8, r7
 800a144:	9306      	str	r3, [sp, #24]
 800a146:	4607      	mov	r7, r0
 800a148:	9b01      	ldr	r3, [sp, #4]
 800a14a:	4631      	mov	r1, r6
 800a14c:	3b01      	subs	r3, #1
 800a14e:	4658      	mov	r0, fp
 800a150:	9302      	str	r3, [sp, #8]
 800a152:	f7ff fa67 	bl	8009624 <quorem>
 800a156:	4603      	mov	r3, r0
 800a158:	3330      	adds	r3, #48	; 0x30
 800a15a:	9004      	str	r0, [sp, #16]
 800a15c:	4641      	mov	r1, r8
 800a15e:	4658      	mov	r0, fp
 800a160:	9308      	str	r3, [sp, #32]
 800a162:	f000 ff33 	bl	800afcc <__mcmp>
 800a166:	463a      	mov	r2, r7
 800a168:	4681      	mov	r9, r0
 800a16a:	4631      	mov	r1, r6
 800a16c:	4620      	mov	r0, r4
 800a16e:	f000 ff49 	bl	800b004 <__mdiff>
 800a172:	68c2      	ldr	r2, [r0, #12]
 800a174:	9b08      	ldr	r3, [sp, #32]
 800a176:	4605      	mov	r5, r0
 800a178:	bb02      	cbnz	r2, 800a1bc <_dtoa_r+0xa7c>
 800a17a:	4601      	mov	r1, r0
 800a17c:	4658      	mov	r0, fp
 800a17e:	f000 ff25 	bl	800afcc <__mcmp>
 800a182:	9b08      	ldr	r3, [sp, #32]
 800a184:	4602      	mov	r2, r0
 800a186:	4629      	mov	r1, r5
 800a188:	4620      	mov	r0, r4
 800a18a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a18e:	f000 fc95 	bl	800aabc <_Bfree>
 800a192:	9b05      	ldr	r3, [sp, #20]
 800a194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a196:	9d01      	ldr	r5, [sp, #4]
 800a198:	ea43 0102 	orr.w	r1, r3, r2
 800a19c:	9b06      	ldr	r3, [sp, #24]
 800a19e:	430b      	orrs	r3, r1
 800a1a0:	9b08      	ldr	r3, [sp, #32]
 800a1a2:	d10d      	bne.n	800a1c0 <_dtoa_r+0xa80>
 800a1a4:	2b39      	cmp	r3, #57	; 0x39
 800a1a6:	d029      	beq.n	800a1fc <_dtoa_r+0xabc>
 800a1a8:	f1b9 0f00 	cmp.w	r9, #0
 800a1ac:	dd01      	ble.n	800a1b2 <_dtoa_r+0xa72>
 800a1ae:	9b04      	ldr	r3, [sp, #16]
 800a1b0:	3331      	adds	r3, #49	; 0x31
 800a1b2:	9a02      	ldr	r2, [sp, #8]
 800a1b4:	7013      	strb	r3, [r2, #0]
 800a1b6:	e774      	b.n	800a0a2 <_dtoa_r+0x962>
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	e7b9      	b.n	800a130 <_dtoa_r+0x9f0>
 800a1bc:	2201      	movs	r2, #1
 800a1be:	e7e2      	b.n	800a186 <_dtoa_r+0xa46>
 800a1c0:	f1b9 0f00 	cmp.w	r9, #0
 800a1c4:	db06      	blt.n	800a1d4 <_dtoa_r+0xa94>
 800a1c6:	9905      	ldr	r1, [sp, #20]
 800a1c8:	ea41 0909 	orr.w	r9, r1, r9
 800a1cc:	9906      	ldr	r1, [sp, #24]
 800a1ce:	ea59 0101 	orrs.w	r1, r9, r1
 800a1d2:	d120      	bne.n	800a216 <_dtoa_r+0xad6>
 800a1d4:	2a00      	cmp	r2, #0
 800a1d6:	ddec      	ble.n	800a1b2 <_dtoa_r+0xa72>
 800a1d8:	4659      	mov	r1, fp
 800a1da:	2201      	movs	r2, #1
 800a1dc:	4620      	mov	r0, r4
 800a1de:	9301      	str	r3, [sp, #4]
 800a1e0:	f000 fe88 	bl	800aef4 <__lshift>
 800a1e4:	4631      	mov	r1, r6
 800a1e6:	4683      	mov	fp, r0
 800a1e8:	f000 fef0 	bl	800afcc <__mcmp>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	9b01      	ldr	r3, [sp, #4]
 800a1f0:	dc02      	bgt.n	800a1f8 <_dtoa_r+0xab8>
 800a1f2:	d1de      	bne.n	800a1b2 <_dtoa_r+0xa72>
 800a1f4:	07da      	lsls	r2, r3, #31
 800a1f6:	d5dc      	bpl.n	800a1b2 <_dtoa_r+0xa72>
 800a1f8:	2b39      	cmp	r3, #57	; 0x39
 800a1fa:	d1d8      	bne.n	800a1ae <_dtoa_r+0xa6e>
 800a1fc:	9a02      	ldr	r2, [sp, #8]
 800a1fe:	2339      	movs	r3, #57	; 0x39
 800a200:	7013      	strb	r3, [r2, #0]
 800a202:	462b      	mov	r3, r5
 800a204:	461d      	mov	r5, r3
 800a206:	3b01      	subs	r3, #1
 800a208:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a20c:	2a39      	cmp	r2, #57	; 0x39
 800a20e:	d050      	beq.n	800a2b2 <_dtoa_r+0xb72>
 800a210:	3201      	adds	r2, #1
 800a212:	701a      	strb	r2, [r3, #0]
 800a214:	e745      	b.n	800a0a2 <_dtoa_r+0x962>
 800a216:	2a00      	cmp	r2, #0
 800a218:	dd03      	ble.n	800a222 <_dtoa_r+0xae2>
 800a21a:	2b39      	cmp	r3, #57	; 0x39
 800a21c:	d0ee      	beq.n	800a1fc <_dtoa_r+0xabc>
 800a21e:	3301      	adds	r3, #1
 800a220:	e7c7      	b.n	800a1b2 <_dtoa_r+0xa72>
 800a222:	9a01      	ldr	r2, [sp, #4]
 800a224:	9907      	ldr	r1, [sp, #28]
 800a226:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a22a:	428a      	cmp	r2, r1
 800a22c:	d02a      	beq.n	800a284 <_dtoa_r+0xb44>
 800a22e:	4659      	mov	r1, fp
 800a230:	2300      	movs	r3, #0
 800a232:	220a      	movs	r2, #10
 800a234:	4620      	mov	r0, r4
 800a236:	f000 fc63 	bl	800ab00 <__multadd>
 800a23a:	45b8      	cmp	r8, r7
 800a23c:	4683      	mov	fp, r0
 800a23e:	f04f 0300 	mov.w	r3, #0
 800a242:	f04f 020a 	mov.w	r2, #10
 800a246:	4641      	mov	r1, r8
 800a248:	4620      	mov	r0, r4
 800a24a:	d107      	bne.n	800a25c <_dtoa_r+0xb1c>
 800a24c:	f000 fc58 	bl	800ab00 <__multadd>
 800a250:	4680      	mov	r8, r0
 800a252:	4607      	mov	r7, r0
 800a254:	9b01      	ldr	r3, [sp, #4]
 800a256:	3301      	adds	r3, #1
 800a258:	9301      	str	r3, [sp, #4]
 800a25a:	e775      	b.n	800a148 <_dtoa_r+0xa08>
 800a25c:	f000 fc50 	bl	800ab00 <__multadd>
 800a260:	4639      	mov	r1, r7
 800a262:	4680      	mov	r8, r0
 800a264:	2300      	movs	r3, #0
 800a266:	220a      	movs	r2, #10
 800a268:	4620      	mov	r0, r4
 800a26a:	f000 fc49 	bl	800ab00 <__multadd>
 800a26e:	4607      	mov	r7, r0
 800a270:	e7f0      	b.n	800a254 <_dtoa_r+0xb14>
 800a272:	f1b9 0f00 	cmp.w	r9, #0
 800a276:	9a00      	ldr	r2, [sp, #0]
 800a278:	bfcc      	ite	gt
 800a27a:	464d      	movgt	r5, r9
 800a27c:	2501      	movle	r5, #1
 800a27e:	4415      	add	r5, r2
 800a280:	f04f 0800 	mov.w	r8, #0
 800a284:	4659      	mov	r1, fp
 800a286:	2201      	movs	r2, #1
 800a288:	4620      	mov	r0, r4
 800a28a:	9301      	str	r3, [sp, #4]
 800a28c:	f000 fe32 	bl	800aef4 <__lshift>
 800a290:	4631      	mov	r1, r6
 800a292:	4683      	mov	fp, r0
 800a294:	f000 fe9a 	bl	800afcc <__mcmp>
 800a298:	2800      	cmp	r0, #0
 800a29a:	dcb2      	bgt.n	800a202 <_dtoa_r+0xac2>
 800a29c:	d102      	bne.n	800a2a4 <_dtoa_r+0xb64>
 800a29e:	9b01      	ldr	r3, [sp, #4]
 800a2a0:	07db      	lsls	r3, r3, #31
 800a2a2:	d4ae      	bmi.n	800a202 <_dtoa_r+0xac2>
 800a2a4:	462b      	mov	r3, r5
 800a2a6:	461d      	mov	r5, r3
 800a2a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2ac:	2a30      	cmp	r2, #48	; 0x30
 800a2ae:	d0fa      	beq.n	800a2a6 <_dtoa_r+0xb66>
 800a2b0:	e6f7      	b.n	800a0a2 <_dtoa_r+0x962>
 800a2b2:	9a00      	ldr	r2, [sp, #0]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d1a5      	bne.n	800a204 <_dtoa_r+0xac4>
 800a2b8:	f10a 0a01 	add.w	sl, sl, #1
 800a2bc:	2331      	movs	r3, #49	; 0x31
 800a2be:	e779      	b.n	800a1b4 <_dtoa_r+0xa74>
 800a2c0:	4b13      	ldr	r3, [pc, #76]	; (800a310 <_dtoa_r+0xbd0>)
 800a2c2:	f7ff baaf 	b.w	8009824 <_dtoa_r+0xe4>
 800a2c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f47f aa86 	bne.w	80097da <_dtoa_r+0x9a>
 800a2ce:	4b11      	ldr	r3, [pc, #68]	; (800a314 <_dtoa_r+0xbd4>)
 800a2d0:	f7ff baa8 	b.w	8009824 <_dtoa_r+0xe4>
 800a2d4:	f1b9 0f00 	cmp.w	r9, #0
 800a2d8:	dc03      	bgt.n	800a2e2 <_dtoa_r+0xba2>
 800a2da:	9b05      	ldr	r3, [sp, #20]
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	f73f aec9 	bgt.w	800a074 <_dtoa_r+0x934>
 800a2e2:	9d00      	ldr	r5, [sp, #0]
 800a2e4:	4631      	mov	r1, r6
 800a2e6:	4658      	mov	r0, fp
 800a2e8:	f7ff f99c 	bl	8009624 <quorem>
 800a2ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a2f0:	f805 3b01 	strb.w	r3, [r5], #1
 800a2f4:	9a00      	ldr	r2, [sp, #0]
 800a2f6:	1aaa      	subs	r2, r5, r2
 800a2f8:	4591      	cmp	r9, r2
 800a2fa:	ddba      	ble.n	800a272 <_dtoa_r+0xb32>
 800a2fc:	4659      	mov	r1, fp
 800a2fe:	2300      	movs	r3, #0
 800a300:	220a      	movs	r2, #10
 800a302:	4620      	mov	r0, r4
 800a304:	f000 fbfc 	bl	800ab00 <__multadd>
 800a308:	4683      	mov	fp, r0
 800a30a:	e7eb      	b.n	800a2e4 <_dtoa_r+0xba4>
 800a30c:	0801093c 	.word	0x0801093c
 800a310:	0801073c 	.word	0x0801073c
 800a314:	080108b9 	.word	0x080108b9

0800a318 <rshift>:
 800a318:	6903      	ldr	r3, [r0, #16]
 800a31a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a31e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a322:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a326:	f100 0414 	add.w	r4, r0, #20
 800a32a:	dd45      	ble.n	800a3b8 <rshift+0xa0>
 800a32c:	f011 011f 	ands.w	r1, r1, #31
 800a330:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a334:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a338:	d10c      	bne.n	800a354 <rshift+0x3c>
 800a33a:	f100 0710 	add.w	r7, r0, #16
 800a33e:	4629      	mov	r1, r5
 800a340:	42b1      	cmp	r1, r6
 800a342:	d334      	bcc.n	800a3ae <rshift+0x96>
 800a344:	1a9b      	subs	r3, r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	1eea      	subs	r2, r5, #3
 800a34a:	4296      	cmp	r6, r2
 800a34c:	bf38      	it	cc
 800a34e:	2300      	movcc	r3, #0
 800a350:	4423      	add	r3, r4
 800a352:	e015      	b.n	800a380 <rshift+0x68>
 800a354:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a358:	f1c1 0820 	rsb	r8, r1, #32
 800a35c:	40cf      	lsrs	r7, r1
 800a35e:	f105 0e04 	add.w	lr, r5, #4
 800a362:	46a1      	mov	r9, r4
 800a364:	4576      	cmp	r6, lr
 800a366:	46f4      	mov	ip, lr
 800a368:	d815      	bhi.n	800a396 <rshift+0x7e>
 800a36a:	1a9b      	subs	r3, r3, r2
 800a36c:	009a      	lsls	r2, r3, #2
 800a36e:	3a04      	subs	r2, #4
 800a370:	3501      	adds	r5, #1
 800a372:	42ae      	cmp	r6, r5
 800a374:	bf38      	it	cc
 800a376:	2200      	movcc	r2, #0
 800a378:	18a3      	adds	r3, r4, r2
 800a37a:	50a7      	str	r7, [r4, r2]
 800a37c:	b107      	cbz	r7, 800a380 <rshift+0x68>
 800a37e:	3304      	adds	r3, #4
 800a380:	1b1a      	subs	r2, r3, r4
 800a382:	42a3      	cmp	r3, r4
 800a384:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a388:	bf08      	it	eq
 800a38a:	2300      	moveq	r3, #0
 800a38c:	6102      	str	r2, [r0, #16]
 800a38e:	bf08      	it	eq
 800a390:	6143      	streq	r3, [r0, #20]
 800a392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a396:	f8dc c000 	ldr.w	ip, [ip]
 800a39a:	fa0c fc08 	lsl.w	ip, ip, r8
 800a39e:	ea4c 0707 	orr.w	r7, ip, r7
 800a3a2:	f849 7b04 	str.w	r7, [r9], #4
 800a3a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3aa:	40cf      	lsrs	r7, r1
 800a3ac:	e7da      	b.n	800a364 <rshift+0x4c>
 800a3ae:	f851 cb04 	ldr.w	ip, [r1], #4
 800a3b2:	f847 cf04 	str.w	ip, [r7, #4]!
 800a3b6:	e7c3      	b.n	800a340 <rshift+0x28>
 800a3b8:	4623      	mov	r3, r4
 800a3ba:	e7e1      	b.n	800a380 <rshift+0x68>

0800a3bc <__hexdig_fun>:
 800a3bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a3c0:	2b09      	cmp	r3, #9
 800a3c2:	d802      	bhi.n	800a3ca <__hexdig_fun+0xe>
 800a3c4:	3820      	subs	r0, #32
 800a3c6:	b2c0      	uxtb	r0, r0
 800a3c8:	4770      	bx	lr
 800a3ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a3ce:	2b05      	cmp	r3, #5
 800a3d0:	d801      	bhi.n	800a3d6 <__hexdig_fun+0x1a>
 800a3d2:	3847      	subs	r0, #71	; 0x47
 800a3d4:	e7f7      	b.n	800a3c6 <__hexdig_fun+0xa>
 800a3d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a3da:	2b05      	cmp	r3, #5
 800a3dc:	d801      	bhi.n	800a3e2 <__hexdig_fun+0x26>
 800a3de:	3827      	subs	r0, #39	; 0x27
 800a3e0:	e7f1      	b.n	800a3c6 <__hexdig_fun+0xa>
 800a3e2:	2000      	movs	r0, #0
 800a3e4:	4770      	bx	lr
	...

0800a3e8 <__gethex>:
 800a3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ec:	ed2d 8b02 	vpush	{d8}
 800a3f0:	b089      	sub	sp, #36	; 0x24
 800a3f2:	ee08 0a10 	vmov	s16, r0
 800a3f6:	9304      	str	r3, [sp, #16]
 800a3f8:	4bbc      	ldr	r3, [pc, #752]	; (800a6ec <__gethex+0x304>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	9301      	str	r3, [sp, #4]
 800a3fe:	4618      	mov	r0, r3
 800a400:	468b      	mov	fp, r1
 800a402:	4690      	mov	r8, r2
 800a404:	f7f5 ff04 	bl	8000210 <strlen>
 800a408:	9b01      	ldr	r3, [sp, #4]
 800a40a:	f8db 2000 	ldr.w	r2, [fp]
 800a40e:	4403      	add	r3, r0
 800a410:	4682      	mov	sl, r0
 800a412:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a416:	9305      	str	r3, [sp, #20]
 800a418:	1c93      	adds	r3, r2, #2
 800a41a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a41e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a422:	32fe      	adds	r2, #254	; 0xfe
 800a424:	18d1      	adds	r1, r2, r3
 800a426:	461f      	mov	r7, r3
 800a428:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a42c:	9100      	str	r1, [sp, #0]
 800a42e:	2830      	cmp	r0, #48	; 0x30
 800a430:	d0f8      	beq.n	800a424 <__gethex+0x3c>
 800a432:	f7ff ffc3 	bl	800a3bc <__hexdig_fun>
 800a436:	4604      	mov	r4, r0
 800a438:	2800      	cmp	r0, #0
 800a43a:	d13a      	bne.n	800a4b2 <__gethex+0xca>
 800a43c:	9901      	ldr	r1, [sp, #4]
 800a43e:	4652      	mov	r2, sl
 800a440:	4638      	mov	r0, r7
 800a442:	f001 f941 	bl	800b6c8 <strncmp>
 800a446:	4605      	mov	r5, r0
 800a448:	2800      	cmp	r0, #0
 800a44a:	d168      	bne.n	800a51e <__gethex+0x136>
 800a44c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a450:	eb07 060a 	add.w	r6, r7, sl
 800a454:	f7ff ffb2 	bl	800a3bc <__hexdig_fun>
 800a458:	2800      	cmp	r0, #0
 800a45a:	d062      	beq.n	800a522 <__gethex+0x13a>
 800a45c:	4633      	mov	r3, r6
 800a45e:	7818      	ldrb	r0, [r3, #0]
 800a460:	2830      	cmp	r0, #48	; 0x30
 800a462:	461f      	mov	r7, r3
 800a464:	f103 0301 	add.w	r3, r3, #1
 800a468:	d0f9      	beq.n	800a45e <__gethex+0x76>
 800a46a:	f7ff ffa7 	bl	800a3bc <__hexdig_fun>
 800a46e:	2301      	movs	r3, #1
 800a470:	fab0 f480 	clz	r4, r0
 800a474:	0964      	lsrs	r4, r4, #5
 800a476:	4635      	mov	r5, r6
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	463a      	mov	r2, r7
 800a47c:	4616      	mov	r6, r2
 800a47e:	3201      	adds	r2, #1
 800a480:	7830      	ldrb	r0, [r6, #0]
 800a482:	f7ff ff9b 	bl	800a3bc <__hexdig_fun>
 800a486:	2800      	cmp	r0, #0
 800a488:	d1f8      	bne.n	800a47c <__gethex+0x94>
 800a48a:	9901      	ldr	r1, [sp, #4]
 800a48c:	4652      	mov	r2, sl
 800a48e:	4630      	mov	r0, r6
 800a490:	f001 f91a 	bl	800b6c8 <strncmp>
 800a494:	b980      	cbnz	r0, 800a4b8 <__gethex+0xd0>
 800a496:	b94d      	cbnz	r5, 800a4ac <__gethex+0xc4>
 800a498:	eb06 050a 	add.w	r5, r6, sl
 800a49c:	462a      	mov	r2, r5
 800a49e:	4616      	mov	r6, r2
 800a4a0:	3201      	adds	r2, #1
 800a4a2:	7830      	ldrb	r0, [r6, #0]
 800a4a4:	f7ff ff8a 	bl	800a3bc <__hexdig_fun>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d1f8      	bne.n	800a49e <__gethex+0xb6>
 800a4ac:	1bad      	subs	r5, r5, r6
 800a4ae:	00ad      	lsls	r5, r5, #2
 800a4b0:	e004      	b.n	800a4bc <__gethex+0xd4>
 800a4b2:	2400      	movs	r4, #0
 800a4b4:	4625      	mov	r5, r4
 800a4b6:	e7e0      	b.n	800a47a <__gethex+0x92>
 800a4b8:	2d00      	cmp	r5, #0
 800a4ba:	d1f7      	bne.n	800a4ac <__gethex+0xc4>
 800a4bc:	7833      	ldrb	r3, [r6, #0]
 800a4be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a4c2:	2b50      	cmp	r3, #80	; 0x50
 800a4c4:	d13b      	bne.n	800a53e <__gethex+0x156>
 800a4c6:	7873      	ldrb	r3, [r6, #1]
 800a4c8:	2b2b      	cmp	r3, #43	; 0x2b
 800a4ca:	d02c      	beq.n	800a526 <__gethex+0x13e>
 800a4cc:	2b2d      	cmp	r3, #45	; 0x2d
 800a4ce:	d02e      	beq.n	800a52e <__gethex+0x146>
 800a4d0:	1c71      	adds	r1, r6, #1
 800a4d2:	f04f 0900 	mov.w	r9, #0
 800a4d6:	7808      	ldrb	r0, [r1, #0]
 800a4d8:	f7ff ff70 	bl	800a3bc <__hexdig_fun>
 800a4dc:	1e43      	subs	r3, r0, #1
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	2b18      	cmp	r3, #24
 800a4e2:	d82c      	bhi.n	800a53e <__gethex+0x156>
 800a4e4:	f1a0 0210 	sub.w	r2, r0, #16
 800a4e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a4ec:	f7ff ff66 	bl	800a3bc <__hexdig_fun>
 800a4f0:	1e43      	subs	r3, r0, #1
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b18      	cmp	r3, #24
 800a4f6:	d91d      	bls.n	800a534 <__gethex+0x14c>
 800a4f8:	f1b9 0f00 	cmp.w	r9, #0
 800a4fc:	d000      	beq.n	800a500 <__gethex+0x118>
 800a4fe:	4252      	negs	r2, r2
 800a500:	4415      	add	r5, r2
 800a502:	f8cb 1000 	str.w	r1, [fp]
 800a506:	b1e4      	cbz	r4, 800a542 <__gethex+0x15a>
 800a508:	9b00      	ldr	r3, [sp, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	bf14      	ite	ne
 800a50e:	2700      	movne	r7, #0
 800a510:	2706      	moveq	r7, #6
 800a512:	4638      	mov	r0, r7
 800a514:	b009      	add	sp, #36	; 0x24
 800a516:	ecbd 8b02 	vpop	{d8}
 800a51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51e:	463e      	mov	r6, r7
 800a520:	4625      	mov	r5, r4
 800a522:	2401      	movs	r4, #1
 800a524:	e7ca      	b.n	800a4bc <__gethex+0xd4>
 800a526:	f04f 0900 	mov.w	r9, #0
 800a52a:	1cb1      	adds	r1, r6, #2
 800a52c:	e7d3      	b.n	800a4d6 <__gethex+0xee>
 800a52e:	f04f 0901 	mov.w	r9, #1
 800a532:	e7fa      	b.n	800a52a <__gethex+0x142>
 800a534:	230a      	movs	r3, #10
 800a536:	fb03 0202 	mla	r2, r3, r2, r0
 800a53a:	3a10      	subs	r2, #16
 800a53c:	e7d4      	b.n	800a4e8 <__gethex+0x100>
 800a53e:	4631      	mov	r1, r6
 800a540:	e7df      	b.n	800a502 <__gethex+0x11a>
 800a542:	1bf3      	subs	r3, r6, r7
 800a544:	3b01      	subs	r3, #1
 800a546:	4621      	mov	r1, r4
 800a548:	2b07      	cmp	r3, #7
 800a54a:	dc0b      	bgt.n	800a564 <__gethex+0x17c>
 800a54c:	ee18 0a10 	vmov	r0, s16
 800a550:	f000 fa74 	bl	800aa3c <_Balloc>
 800a554:	4604      	mov	r4, r0
 800a556:	b940      	cbnz	r0, 800a56a <__gethex+0x182>
 800a558:	4b65      	ldr	r3, [pc, #404]	; (800a6f0 <__gethex+0x308>)
 800a55a:	4602      	mov	r2, r0
 800a55c:	21de      	movs	r1, #222	; 0xde
 800a55e:	4865      	ldr	r0, [pc, #404]	; (800a6f4 <__gethex+0x30c>)
 800a560:	f001 f8d2 	bl	800b708 <__assert_func>
 800a564:	3101      	adds	r1, #1
 800a566:	105b      	asrs	r3, r3, #1
 800a568:	e7ee      	b.n	800a548 <__gethex+0x160>
 800a56a:	f100 0914 	add.w	r9, r0, #20
 800a56e:	f04f 0b00 	mov.w	fp, #0
 800a572:	f1ca 0301 	rsb	r3, sl, #1
 800a576:	f8cd 9008 	str.w	r9, [sp, #8]
 800a57a:	f8cd b000 	str.w	fp, [sp]
 800a57e:	9306      	str	r3, [sp, #24]
 800a580:	42b7      	cmp	r7, r6
 800a582:	d340      	bcc.n	800a606 <__gethex+0x21e>
 800a584:	9802      	ldr	r0, [sp, #8]
 800a586:	9b00      	ldr	r3, [sp, #0]
 800a588:	f840 3b04 	str.w	r3, [r0], #4
 800a58c:	eba0 0009 	sub.w	r0, r0, r9
 800a590:	1080      	asrs	r0, r0, #2
 800a592:	0146      	lsls	r6, r0, #5
 800a594:	6120      	str	r0, [r4, #16]
 800a596:	4618      	mov	r0, r3
 800a598:	f000 fb46 	bl	800ac28 <__hi0bits>
 800a59c:	1a30      	subs	r0, r6, r0
 800a59e:	f8d8 6000 	ldr.w	r6, [r8]
 800a5a2:	42b0      	cmp	r0, r6
 800a5a4:	dd63      	ble.n	800a66e <__gethex+0x286>
 800a5a6:	1b87      	subs	r7, r0, r6
 800a5a8:	4639      	mov	r1, r7
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f000 fee0 	bl	800b370 <__any_on>
 800a5b0:	4682      	mov	sl, r0
 800a5b2:	b1a8      	cbz	r0, 800a5e0 <__gethex+0x1f8>
 800a5b4:	1e7b      	subs	r3, r7, #1
 800a5b6:	1159      	asrs	r1, r3, #5
 800a5b8:	f003 021f 	and.w	r2, r3, #31
 800a5bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a5c0:	f04f 0a01 	mov.w	sl, #1
 800a5c4:	fa0a f202 	lsl.w	r2, sl, r2
 800a5c8:	420a      	tst	r2, r1
 800a5ca:	d009      	beq.n	800a5e0 <__gethex+0x1f8>
 800a5cc:	4553      	cmp	r3, sl
 800a5ce:	dd05      	ble.n	800a5dc <__gethex+0x1f4>
 800a5d0:	1eb9      	subs	r1, r7, #2
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f000 fecc 	bl	800b370 <__any_on>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	d145      	bne.n	800a668 <__gethex+0x280>
 800a5dc:	f04f 0a02 	mov.w	sl, #2
 800a5e0:	4639      	mov	r1, r7
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f7ff fe98 	bl	800a318 <rshift>
 800a5e8:	443d      	add	r5, r7
 800a5ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5ee:	42ab      	cmp	r3, r5
 800a5f0:	da4c      	bge.n	800a68c <__gethex+0x2a4>
 800a5f2:	ee18 0a10 	vmov	r0, s16
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	f000 fa60 	bl	800aabc <_Bfree>
 800a5fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a5fe:	2300      	movs	r3, #0
 800a600:	6013      	str	r3, [r2, #0]
 800a602:	27a3      	movs	r7, #163	; 0xa3
 800a604:	e785      	b.n	800a512 <__gethex+0x12a>
 800a606:	1e73      	subs	r3, r6, #1
 800a608:	9a05      	ldr	r2, [sp, #20]
 800a60a:	9303      	str	r3, [sp, #12]
 800a60c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a610:	4293      	cmp	r3, r2
 800a612:	d019      	beq.n	800a648 <__gethex+0x260>
 800a614:	f1bb 0f20 	cmp.w	fp, #32
 800a618:	d107      	bne.n	800a62a <__gethex+0x242>
 800a61a:	9b02      	ldr	r3, [sp, #8]
 800a61c:	9a00      	ldr	r2, [sp, #0]
 800a61e:	f843 2b04 	str.w	r2, [r3], #4
 800a622:	9302      	str	r3, [sp, #8]
 800a624:	2300      	movs	r3, #0
 800a626:	9300      	str	r3, [sp, #0]
 800a628:	469b      	mov	fp, r3
 800a62a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a62e:	f7ff fec5 	bl	800a3bc <__hexdig_fun>
 800a632:	9b00      	ldr	r3, [sp, #0]
 800a634:	f000 000f 	and.w	r0, r0, #15
 800a638:	fa00 f00b 	lsl.w	r0, r0, fp
 800a63c:	4303      	orrs	r3, r0
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	f10b 0b04 	add.w	fp, fp, #4
 800a644:	9b03      	ldr	r3, [sp, #12]
 800a646:	e00d      	b.n	800a664 <__gethex+0x27c>
 800a648:	9b03      	ldr	r3, [sp, #12]
 800a64a:	9a06      	ldr	r2, [sp, #24]
 800a64c:	4413      	add	r3, r2
 800a64e:	42bb      	cmp	r3, r7
 800a650:	d3e0      	bcc.n	800a614 <__gethex+0x22c>
 800a652:	4618      	mov	r0, r3
 800a654:	9901      	ldr	r1, [sp, #4]
 800a656:	9307      	str	r3, [sp, #28]
 800a658:	4652      	mov	r2, sl
 800a65a:	f001 f835 	bl	800b6c8 <strncmp>
 800a65e:	9b07      	ldr	r3, [sp, #28]
 800a660:	2800      	cmp	r0, #0
 800a662:	d1d7      	bne.n	800a614 <__gethex+0x22c>
 800a664:	461e      	mov	r6, r3
 800a666:	e78b      	b.n	800a580 <__gethex+0x198>
 800a668:	f04f 0a03 	mov.w	sl, #3
 800a66c:	e7b8      	b.n	800a5e0 <__gethex+0x1f8>
 800a66e:	da0a      	bge.n	800a686 <__gethex+0x29e>
 800a670:	1a37      	subs	r7, r6, r0
 800a672:	4621      	mov	r1, r4
 800a674:	ee18 0a10 	vmov	r0, s16
 800a678:	463a      	mov	r2, r7
 800a67a:	f000 fc3b 	bl	800aef4 <__lshift>
 800a67e:	1bed      	subs	r5, r5, r7
 800a680:	4604      	mov	r4, r0
 800a682:	f100 0914 	add.w	r9, r0, #20
 800a686:	f04f 0a00 	mov.w	sl, #0
 800a68a:	e7ae      	b.n	800a5ea <__gethex+0x202>
 800a68c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a690:	42a8      	cmp	r0, r5
 800a692:	dd72      	ble.n	800a77a <__gethex+0x392>
 800a694:	1b45      	subs	r5, r0, r5
 800a696:	42ae      	cmp	r6, r5
 800a698:	dc36      	bgt.n	800a708 <__gethex+0x320>
 800a69a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d02a      	beq.n	800a6f8 <__gethex+0x310>
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d02c      	beq.n	800a700 <__gethex+0x318>
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d115      	bne.n	800a6d6 <__gethex+0x2ee>
 800a6aa:	42ae      	cmp	r6, r5
 800a6ac:	d113      	bne.n	800a6d6 <__gethex+0x2ee>
 800a6ae:	2e01      	cmp	r6, #1
 800a6b0:	d10b      	bne.n	800a6ca <__gethex+0x2e2>
 800a6b2:	9a04      	ldr	r2, [sp, #16]
 800a6b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6b8:	6013      	str	r3, [r2, #0]
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	6123      	str	r3, [r4, #16]
 800a6be:	f8c9 3000 	str.w	r3, [r9]
 800a6c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6c4:	2762      	movs	r7, #98	; 0x62
 800a6c6:	601c      	str	r4, [r3, #0]
 800a6c8:	e723      	b.n	800a512 <__gethex+0x12a>
 800a6ca:	1e71      	subs	r1, r6, #1
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f000 fe4f 	bl	800b370 <__any_on>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	d1ed      	bne.n	800a6b2 <__gethex+0x2ca>
 800a6d6:	ee18 0a10 	vmov	r0, s16
 800a6da:	4621      	mov	r1, r4
 800a6dc:	f000 f9ee 	bl	800aabc <_Bfree>
 800a6e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	6013      	str	r3, [r2, #0]
 800a6e6:	2750      	movs	r7, #80	; 0x50
 800a6e8:	e713      	b.n	800a512 <__gethex+0x12a>
 800a6ea:	bf00      	nop
 800a6ec:	080109b8 	.word	0x080109b8
 800a6f0:	0801093c 	.word	0x0801093c
 800a6f4:	0801094d 	.word	0x0801094d
 800a6f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1eb      	bne.n	800a6d6 <__gethex+0x2ee>
 800a6fe:	e7d8      	b.n	800a6b2 <__gethex+0x2ca>
 800a700:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1d5      	bne.n	800a6b2 <__gethex+0x2ca>
 800a706:	e7e6      	b.n	800a6d6 <__gethex+0x2ee>
 800a708:	1e6f      	subs	r7, r5, #1
 800a70a:	f1ba 0f00 	cmp.w	sl, #0
 800a70e:	d131      	bne.n	800a774 <__gethex+0x38c>
 800a710:	b127      	cbz	r7, 800a71c <__gethex+0x334>
 800a712:	4639      	mov	r1, r7
 800a714:	4620      	mov	r0, r4
 800a716:	f000 fe2b 	bl	800b370 <__any_on>
 800a71a:	4682      	mov	sl, r0
 800a71c:	117b      	asrs	r3, r7, #5
 800a71e:	2101      	movs	r1, #1
 800a720:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a724:	f007 071f 	and.w	r7, r7, #31
 800a728:	fa01 f707 	lsl.w	r7, r1, r7
 800a72c:	421f      	tst	r7, r3
 800a72e:	4629      	mov	r1, r5
 800a730:	4620      	mov	r0, r4
 800a732:	bf18      	it	ne
 800a734:	f04a 0a02 	orrne.w	sl, sl, #2
 800a738:	1b76      	subs	r6, r6, r5
 800a73a:	f7ff fded 	bl	800a318 <rshift>
 800a73e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a742:	2702      	movs	r7, #2
 800a744:	f1ba 0f00 	cmp.w	sl, #0
 800a748:	d048      	beq.n	800a7dc <__gethex+0x3f4>
 800a74a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d015      	beq.n	800a77e <__gethex+0x396>
 800a752:	2b03      	cmp	r3, #3
 800a754:	d017      	beq.n	800a786 <__gethex+0x39e>
 800a756:	2b01      	cmp	r3, #1
 800a758:	d109      	bne.n	800a76e <__gethex+0x386>
 800a75a:	f01a 0f02 	tst.w	sl, #2
 800a75e:	d006      	beq.n	800a76e <__gethex+0x386>
 800a760:	f8d9 0000 	ldr.w	r0, [r9]
 800a764:	ea4a 0a00 	orr.w	sl, sl, r0
 800a768:	f01a 0f01 	tst.w	sl, #1
 800a76c:	d10e      	bne.n	800a78c <__gethex+0x3a4>
 800a76e:	f047 0710 	orr.w	r7, r7, #16
 800a772:	e033      	b.n	800a7dc <__gethex+0x3f4>
 800a774:	f04f 0a01 	mov.w	sl, #1
 800a778:	e7d0      	b.n	800a71c <__gethex+0x334>
 800a77a:	2701      	movs	r7, #1
 800a77c:	e7e2      	b.n	800a744 <__gethex+0x35c>
 800a77e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a780:	f1c3 0301 	rsb	r3, r3, #1
 800a784:	9315      	str	r3, [sp, #84]	; 0x54
 800a786:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d0f0      	beq.n	800a76e <__gethex+0x386>
 800a78c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a790:	f104 0314 	add.w	r3, r4, #20
 800a794:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a798:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a79c:	f04f 0c00 	mov.w	ip, #0
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7a6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a7aa:	d01c      	beq.n	800a7e6 <__gethex+0x3fe>
 800a7ac:	3201      	adds	r2, #1
 800a7ae:	6002      	str	r2, [r0, #0]
 800a7b0:	2f02      	cmp	r7, #2
 800a7b2:	f104 0314 	add.w	r3, r4, #20
 800a7b6:	d13f      	bne.n	800a838 <__gethex+0x450>
 800a7b8:	f8d8 2000 	ldr.w	r2, [r8]
 800a7bc:	3a01      	subs	r2, #1
 800a7be:	42b2      	cmp	r2, r6
 800a7c0:	d10a      	bne.n	800a7d8 <__gethex+0x3f0>
 800a7c2:	1171      	asrs	r1, r6, #5
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7ca:	f006 061f 	and.w	r6, r6, #31
 800a7ce:	fa02 f606 	lsl.w	r6, r2, r6
 800a7d2:	421e      	tst	r6, r3
 800a7d4:	bf18      	it	ne
 800a7d6:	4617      	movne	r7, r2
 800a7d8:	f047 0720 	orr.w	r7, r7, #32
 800a7dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7de:	601c      	str	r4, [r3, #0]
 800a7e0:	9b04      	ldr	r3, [sp, #16]
 800a7e2:	601d      	str	r5, [r3, #0]
 800a7e4:	e695      	b.n	800a512 <__gethex+0x12a>
 800a7e6:	4299      	cmp	r1, r3
 800a7e8:	f843 cc04 	str.w	ip, [r3, #-4]
 800a7ec:	d8d8      	bhi.n	800a7a0 <__gethex+0x3b8>
 800a7ee:	68a3      	ldr	r3, [r4, #8]
 800a7f0:	459b      	cmp	fp, r3
 800a7f2:	db19      	blt.n	800a828 <__gethex+0x440>
 800a7f4:	6861      	ldr	r1, [r4, #4]
 800a7f6:	ee18 0a10 	vmov	r0, s16
 800a7fa:	3101      	adds	r1, #1
 800a7fc:	f000 f91e 	bl	800aa3c <_Balloc>
 800a800:	4681      	mov	r9, r0
 800a802:	b918      	cbnz	r0, 800a80c <__gethex+0x424>
 800a804:	4b1a      	ldr	r3, [pc, #104]	; (800a870 <__gethex+0x488>)
 800a806:	4602      	mov	r2, r0
 800a808:	2184      	movs	r1, #132	; 0x84
 800a80a:	e6a8      	b.n	800a55e <__gethex+0x176>
 800a80c:	6922      	ldr	r2, [r4, #16]
 800a80e:	3202      	adds	r2, #2
 800a810:	f104 010c 	add.w	r1, r4, #12
 800a814:	0092      	lsls	r2, r2, #2
 800a816:	300c      	adds	r0, #12
 800a818:	f7fd f8c8 	bl	80079ac <memcpy>
 800a81c:	4621      	mov	r1, r4
 800a81e:	ee18 0a10 	vmov	r0, s16
 800a822:	f000 f94b 	bl	800aabc <_Bfree>
 800a826:	464c      	mov	r4, r9
 800a828:	6923      	ldr	r3, [r4, #16]
 800a82a:	1c5a      	adds	r2, r3, #1
 800a82c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a830:	6122      	str	r2, [r4, #16]
 800a832:	2201      	movs	r2, #1
 800a834:	615a      	str	r2, [r3, #20]
 800a836:	e7bb      	b.n	800a7b0 <__gethex+0x3c8>
 800a838:	6922      	ldr	r2, [r4, #16]
 800a83a:	455a      	cmp	r2, fp
 800a83c:	dd0b      	ble.n	800a856 <__gethex+0x46e>
 800a83e:	2101      	movs	r1, #1
 800a840:	4620      	mov	r0, r4
 800a842:	f7ff fd69 	bl	800a318 <rshift>
 800a846:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a84a:	3501      	adds	r5, #1
 800a84c:	42ab      	cmp	r3, r5
 800a84e:	f6ff aed0 	blt.w	800a5f2 <__gethex+0x20a>
 800a852:	2701      	movs	r7, #1
 800a854:	e7c0      	b.n	800a7d8 <__gethex+0x3f0>
 800a856:	f016 061f 	ands.w	r6, r6, #31
 800a85a:	d0fa      	beq.n	800a852 <__gethex+0x46a>
 800a85c:	449a      	add	sl, r3
 800a85e:	f1c6 0620 	rsb	r6, r6, #32
 800a862:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a866:	f000 f9df 	bl	800ac28 <__hi0bits>
 800a86a:	42b0      	cmp	r0, r6
 800a86c:	dbe7      	blt.n	800a83e <__gethex+0x456>
 800a86e:	e7f0      	b.n	800a852 <__gethex+0x46a>
 800a870:	0801093c 	.word	0x0801093c

0800a874 <L_shift>:
 800a874:	f1c2 0208 	rsb	r2, r2, #8
 800a878:	0092      	lsls	r2, r2, #2
 800a87a:	b570      	push	{r4, r5, r6, lr}
 800a87c:	f1c2 0620 	rsb	r6, r2, #32
 800a880:	6843      	ldr	r3, [r0, #4]
 800a882:	6804      	ldr	r4, [r0, #0]
 800a884:	fa03 f506 	lsl.w	r5, r3, r6
 800a888:	432c      	orrs	r4, r5
 800a88a:	40d3      	lsrs	r3, r2
 800a88c:	6004      	str	r4, [r0, #0]
 800a88e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a892:	4288      	cmp	r0, r1
 800a894:	d3f4      	bcc.n	800a880 <L_shift+0xc>
 800a896:	bd70      	pop	{r4, r5, r6, pc}

0800a898 <__match>:
 800a898:	b530      	push	{r4, r5, lr}
 800a89a:	6803      	ldr	r3, [r0, #0]
 800a89c:	3301      	adds	r3, #1
 800a89e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8a2:	b914      	cbnz	r4, 800a8aa <__match+0x12>
 800a8a4:	6003      	str	r3, [r0, #0]
 800a8a6:	2001      	movs	r0, #1
 800a8a8:	bd30      	pop	{r4, r5, pc}
 800a8aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a8b2:	2d19      	cmp	r5, #25
 800a8b4:	bf98      	it	ls
 800a8b6:	3220      	addls	r2, #32
 800a8b8:	42a2      	cmp	r2, r4
 800a8ba:	d0f0      	beq.n	800a89e <__match+0x6>
 800a8bc:	2000      	movs	r0, #0
 800a8be:	e7f3      	b.n	800a8a8 <__match+0x10>

0800a8c0 <__hexnan>:
 800a8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	680b      	ldr	r3, [r1, #0]
 800a8c6:	6801      	ldr	r1, [r0, #0]
 800a8c8:	115e      	asrs	r6, r3, #5
 800a8ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8ce:	f013 031f 	ands.w	r3, r3, #31
 800a8d2:	b087      	sub	sp, #28
 800a8d4:	bf18      	it	ne
 800a8d6:	3604      	addne	r6, #4
 800a8d8:	2500      	movs	r5, #0
 800a8da:	1f37      	subs	r7, r6, #4
 800a8dc:	4682      	mov	sl, r0
 800a8de:	4690      	mov	r8, r2
 800a8e0:	9301      	str	r3, [sp, #4]
 800a8e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8e6:	46b9      	mov	r9, r7
 800a8e8:	463c      	mov	r4, r7
 800a8ea:	9502      	str	r5, [sp, #8]
 800a8ec:	46ab      	mov	fp, r5
 800a8ee:	784a      	ldrb	r2, [r1, #1]
 800a8f0:	1c4b      	adds	r3, r1, #1
 800a8f2:	9303      	str	r3, [sp, #12]
 800a8f4:	b342      	cbz	r2, 800a948 <__hexnan+0x88>
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	9105      	str	r1, [sp, #20]
 800a8fa:	9204      	str	r2, [sp, #16]
 800a8fc:	f7ff fd5e 	bl	800a3bc <__hexdig_fun>
 800a900:	2800      	cmp	r0, #0
 800a902:	d14f      	bne.n	800a9a4 <__hexnan+0xe4>
 800a904:	9a04      	ldr	r2, [sp, #16]
 800a906:	9905      	ldr	r1, [sp, #20]
 800a908:	2a20      	cmp	r2, #32
 800a90a:	d818      	bhi.n	800a93e <__hexnan+0x7e>
 800a90c:	9b02      	ldr	r3, [sp, #8]
 800a90e:	459b      	cmp	fp, r3
 800a910:	dd13      	ble.n	800a93a <__hexnan+0x7a>
 800a912:	454c      	cmp	r4, r9
 800a914:	d206      	bcs.n	800a924 <__hexnan+0x64>
 800a916:	2d07      	cmp	r5, #7
 800a918:	dc04      	bgt.n	800a924 <__hexnan+0x64>
 800a91a:	462a      	mov	r2, r5
 800a91c:	4649      	mov	r1, r9
 800a91e:	4620      	mov	r0, r4
 800a920:	f7ff ffa8 	bl	800a874 <L_shift>
 800a924:	4544      	cmp	r4, r8
 800a926:	d950      	bls.n	800a9ca <__hexnan+0x10a>
 800a928:	2300      	movs	r3, #0
 800a92a:	f1a4 0904 	sub.w	r9, r4, #4
 800a92e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a932:	f8cd b008 	str.w	fp, [sp, #8]
 800a936:	464c      	mov	r4, r9
 800a938:	461d      	mov	r5, r3
 800a93a:	9903      	ldr	r1, [sp, #12]
 800a93c:	e7d7      	b.n	800a8ee <__hexnan+0x2e>
 800a93e:	2a29      	cmp	r2, #41	; 0x29
 800a940:	d156      	bne.n	800a9f0 <__hexnan+0x130>
 800a942:	3102      	adds	r1, #2
 800a944:	f8ca 1000 	str.w	r1, [sl]
 800a948:	f1bb 0f00 	cmp.w	fp, #0
 800a94c:	d050      	beq.n	800a9f0 <__hexnan+0x130>
 800a94e:	454c      	cmp	r4, r9
 800a950:	d206      	bcs.n	800a960 <__hexnan+0xa0>
 800a952:	2d07      	cmp	r5, #7
 800a954:	dc04      	bgt.n	800a960 <__hexnan+0xa0>
 800a956:	462a      	mov	r2, r5
 800a958:	4649      	mov	r1, r9
 800a95a:	4620      	mov	r0, r4
 800a95c:	f7ff ff8a 	bl	800a874 <L_shift>
 800a960:	4544      	cmp	r4, r8
 800a962:	d934      	bls.n	800a9ce <__hexnan+0x10e>
 800a964:	f1a8 0204 	sub.w	r2, r8, #4
 800a968:	4623      	mov	r3, r4
 800a96a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a96e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a972:	429f      	cmp	r7, r3
 800a974:	d2f9      	bcs.n	800a96a <__hexnan+0xaa>
 800a976:	1b3b      	subs	r3, r7, r4
 800a978:	f023 0303 	bic.w	r3, r3, #3
 800a97c:	3304      	adds	r3, #4
 800a97e:	3401      	adds	r4, #1
 800a980:	3e03      	subs	r6, #3
 800a982:	42b4      	cmp	r4, r6
 800a984:	bf88      	it	hi
 800a986:	2304      	movhi	r3, #4
 800a988:	4443      	add	r3, r8
 800a98a:	2200      	movs	r2, #0
 800a98c:	f843 2b04 	str.w	r2, [r3], #4
 800a990:	429f      	cmp	r7, r3
 800a992:	d2fb      	bcs.n	800a98c <__hexnan+0xcc>
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	b91b      	cbnz	r3, 800a9a0 <__hexnan+0xe0>
 800a998:	4547      	cmp	r7, r8
 800a99a:	d127      	bne.n	800a9ec <__hexnan+0x12c>
 800a99c:	2301      	movs	r3, #1
 800a99e:	603b      	str	r3, [r7, #0]
 800a9a0:	2005      	movs	r0, #5
 800a9a2:	e026      	b.n	800a9f2 <__hexnan+0x132>
 800a9a4:	3501      	adds	r5, #1
 800a9a6:	2d08      	cmp	r5, #8
 800a9a8:	f10b 0b01 	add.w	fp, fp, #1
 800a9ac:	dd06      	ble.n	800a9bc <__hexnan+0xfc>
 800a9ae:	4544      	cmp	r4, r8
 800a9b0:	d9c3      	bls.n	800a93a <__hexnan+0x7a>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9b8:	2501      	movs	r5, #1
 800a9ba:	3c04      	subs	r4, #4
 800a9bc:	6822      	ldr	r2, [r4, #0]
 800a9be:	f000 000f 	and.w	r0, r0, #15
 800a9c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a9c6:	6022      	str	r2, [r4, #0]
 800a9c8:	e7b7      	b.n	800a93a <__hexnan+0x7a>
 800a9ca:	2508      	movs	r5, #8
 800a9cc:	e7b5      	b.n	800a93a <__hexnan+0x7a>
 800a9ce:	9b01      	ldr	r3, [sp, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d0df      	beq.n	800a994 <__hexnan+0xd4>
 800a9d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9d8:	f1c3 0320 	rsb	r3, r3, #32
 800a9dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a9e4:	401a      	ands	r2, r3
 800a9e6:	f846 2c04 	str.w	r2, [r6, #-4]
 800a9ea:	e7d3      	b.n	800a994 <__hexnan+0xd4>
 800a9ec:	3f04      	subs	r7, #4
 800a9ee:	e7d1      	b.n	800a994 <__hexnan+0xd4>
 800a9f0:	2004      	movs	r0, #4
 800a9f2:	b007      	add	sp, #28
 800a9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9f8 <_localeconv_r>:
 800a9f8:	4800      	ldr	r0, [pc, #0]	; (800a9fc <_localeconv_r+0x4>)
 800a9fa:	4770      	bx	lr
 800a9fc:	20000164 	.word	0x20000164

0800aa00 <__ascii_mbtowc>:
 800aa00:	b082      	sub	sp, #8
 800aa02:	b901      	cbnz	r1, 800aa06 <__ascii_mbtowc+0x6>
 800aa04:	a901      	add	r1, sp, #4
 800aa06:	b142      	cbz	r2, 800aa1a <__ascii_mbtowc+0x1a>
 800aa08:	b14b      	cbz	r3, 800aa1e <__ascii_mbtowc+0x1e>
 800aa0a:	7813      	ldrb	r3, [r2, #0]
 800aa0c:	600b      	str	r3, [r1, #0]
 800aa0e:	7812      	ldrb	r2, [r2, #0]
 800aa10:	1e10      	subs	r0, r2, #0
 800aa12:	bf18      	it	ne
 800aa14:	2001      	movne	r0, #1
 800aa16:	b002      	add	sp, #8
 800aa18:	4770      	bx	lr
 800aa1a:	4610      	mov	r0, r2
 800aa1c:	e7fb      	b.n	800aa16 <__ascii_mbtowc+0x16>
 800aa1e:	f06f 0001 	mvn.w	r0, #1
 800aa22:	e7f8      	b.n	800aa16 <__ascii_mbtowc+0x16>

0800aa24 <__malloc_lock>:
 800aa24:	4801      	ldr	r0, [pc, #4]	; (800aa2c <__malloc_lock+0x8>)
 800aa26:	f000 bea0 	b.w	800b76a <__retarget_lock_acquire_recursive>
 800aa2a:	bf00      	nop
 800aa2c:	20000970 	.word	0x20000970

0800aa30 <__malloc_unlock>:
 800aa30:	4801      	ldr	r0, [pc, #4]	; (800aa38 <__malloc_unlock+0x8>)
 800aa32:	f000 be9b 	b.w	800b76c <__retarget_lock_release_recursive>
 800aa36:	bf00      	nop
 800aa38:	20000970 	.word	0x20000970

0800aa3c <_Balloc>:
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa40:	4604      	mov	r4, r0
 800aa42:	460d      	mov	r5, r1
 800aa44:	b976      	cbnz	r6, 800aa64 <_Balloc+0x28>
 800aa46:	2010      	movs	r0, #16
 800aa48:	f7fc ffa8 	bl	800799c <malloc>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	6260      	str	r0, [r4, #36]	; 0x24
 800aa50:	b920      	cbnz	r0, 800aa5c <_Balloc+0x20>
 800aa52:	4b18      	ldr	r3, [pc, #96]	; (800aab4 <_Balloc+0x78>)
 800aa54:	4818      	ldr	r0, [pc, #96]	; (800aab8 <_Balloc+0x7c>)
 800aa56:	2166      	movs	r1, #102	; 0x66
 800aa58:	f000 fe56 	bl	800b708 <__assert_func>
 800aa5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa60:	6006      	str	r6, [r0, #0]
 800aa62:	60c6      	str	r6, [r0, #12]
 800aa64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa66:	68f3      	ldr	r3, [r6, #12]
 800aa68:	b183      	cbz	r3, 800aa8c <_Balloc+0x50>
 800aa6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa72:	b9b8      	cbnz	r0, 800aaa4 <_Balloc+0x68>
 800aa74:	2101      	movs	r1, #1
 800aa76:	fa01 f605 	lsl.w	r6, r1, r5
 800aa7a:	1d72      	adds	r2, r6, #5
 800aa7c:	0092      	lsls	r2, r2, #2
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f7fc ffaa 	bl	80079d8 <_calloc_r>
 800aa84:	b160      	cbz	r0, 800aaa0 <_Balloc+0x64>
 800aa86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa8a:	e00e      	b.n	800aaaa <_Balloc+0x6e>
 800aa8c:	2221      	movs	r2, #33	; 0x21
 800aa8e:	2104      	movs	r1, #4
 800aa90:	4620      	mov	r0, r4
 800aa92:	f7fc ffa1 	bl	80079d8 <_calloc_r>
 800aa96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa98:	60f0      	str	r0, [r6, #12]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d1e4      	bne.n	800aa6a <_Balloc+0x2e>
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	bd70      	pop	{r4, r5, r6, pc}
 800aaa4:	6802      	ldr	r2, [r0, #0]
 800aaa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aaaa:	2300      	movs	r3, #0
 800aaac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aab0:	e7f7      	b.n	800aaa2 <_Balloc+0x66>
 800aab2:	bf00      	nop
 800aab4:	080108c6 	.word	0x080108c6
 800aab8:	080109cc 	.word	0x080109cc

0800aabc <_Bfree>:
 800aabc:	b570      	push	{r4, r5, r6, lr}
 800aabe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aac0:	4605      	mov	r5, r0
 800aac2:	460c      	mov	r4, r1
 800aac4:	b976      	cbnz	r6, 800aae4 <_Bfree+0x28>
 800aac6:	2010      	movs	r0, #16
 800aac8:	f7fc ff68 	bl	800799c <malloc>
 800aacc:	4602      	mov	r2, r0
 800aace:	6268      	str	r0, [r5, #36]	; 0x24
 800aad0:	b920      	cbnz	r0, 800aadc <_Bfree+0x20>
 800aad2:	4b09      	ldr	r3, [pc, #36]	; (800aaf8 <_Bfree+0x3c>)
 800aad4:	4809      	ldr	r0, [pc, #36]	; (800aafc <_Bfree+0x40>)
 800aad6:	218a      	movs	r1, #138	; 0x8a
 800aad8:	f000 fe16 	bl	800b708 <__assert_func>
 800aadc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aae0:	6006      	str	r6, [r0, #0]
 800aae2:	60c6      	str	r6, [r0, #12]
 800aae4:	b13c      	cbz	r4, 800aaf6 <_Bfree+0x3a>
 800aae6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aae8:	6862      	ldr	r2, [r4, #4]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aaf0:	6021      	str	r1, [r4, #0]
 800aaf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aaf6:	bd70      	pop	{r4, r5, r6, pc}
 800aaf8:	080108c6 	.word	0x080108c6
 800aafc:	080109cc 	.word	0x080109cc

0800ab00 <__multadd>:
 800ab00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab04:	690e      	ldr	r6, [r1, #16]
 800ab06:	4607      	mov	r7, r0
 800ab08:	4698      	mov	r8, r3
 800ab0a:	460c      	mov	r4, r1
 800ab0c:	f101 0014 	add.w	r0, r1, #20
 800ab10:	2300      	movs	r3, #0
 800ab12:	6805      	ldr	r5, [r0, #0]
 800ab14:	b2a9      	uxth	r1, r5
 800ab16:	fb02 8101 	mla	r1, r2, r1, r8
 800ab1a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ab1e:	0c2d      	lsrs	r5, r5, #16
 800ab20:	fb02 c505 	mla	r5, r2, r5, ip
 800ab24:	b289      	uxth	r1, r1
 800ab26:	3301      	adds	r3, #1
 800ab28:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ab2c:	429e      	cmp	r6, r3
 800ab2e:	f840 1b04 	str.w	r1, [r0], #4
 800ab32:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ab36:	dcec      	bgt.n	800ab12 <__multadd+0x12>
 800ab38:	f1b8 0f00 	cmp.w	r8, #0
 800ab3c:	d022      	beq.n	800ab84 <__multadd+0x84>
 800ab3e:	68a3      	ldr	r3, [r4, #8]
 800ab40:	42b3      	cmp	r3, r6
 800ab42:	dc19      	bgt.n	800ab78 <__multadd+0x78>
 800ab44:	6861      	ldr	r1, [r4, #4]
 800ab46:	4638      	mov	r0, r7
 800ab48:	3101      	adds	r1, #1
 800ab4a:	f7ff ff77 	bl	800aa3c <_Balloc>
 800ab4e:	4605      	mov	r5, r0
 800ab50:	b928      	cbnz	r0, 800ab5e <__multadd+0x5e>
 800ab52:	4602      	mov	r2, r0
 800ab54:	4b0d      	ldr	r3, [pc, #52]	; (800ab8c <__multadd+0x8c>)
 800ab56:	480e      	ldr	r0, [pc, #56]	; (800ab90 <__multadd+0x90>)
 800ab58:	21b5      	movs	r1, #181	; 0xb5
 800ab5a:	f000 fdd5 	bl	800b708 <__assert_func>
 800ab5e:	6922      	ldr	r2, [r4, #16]
 800ab60:	3202      	adds	r2, #2
 800ab62:	f104 010c 	add.w	r1, r4, #12
 800ab66:	0092      	lsls	r2, r2, #2
 800ab68:	300c      	adds	r0, #12
 800ab6a:	f7fc ff1f 	bl	80079ac <memcpy>
 800ab6e:	4621      	mov	r1, r4
 800ab70:	4638      	mov	r0, r7
 800ab72:	f7ff ffa3 	bl	800aabc <_Bfree>
 800ab76:	462c      	mov	r4, r5
 800ab78:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ab7c:	3601      	adds	r6, #1
 800ab7e:	f8c3 8014 	str.w	r8, [r3, #20]
 800ab82:	6126      	str	r6, [r4, #16]
 800ab84:	4620      	mov	r0, r4
 800ab86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab8a:	bf00      	nop
 800ab8c:	0801093c 	.word	0x0801093c
 800ab90:	080109cc 	.word	0x080109cc

0800ab94 <__s2b>:
 800ab94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab98:	460c      	mov	r4, r1
 800ab9a:	4615      	mov	r5, r2
 800ab9c:	461f      	mov	r7, r3
 800ab9e:	2209      	movs	r2, #9
 800aba0:	3308      	adds	r3, #8
 800aba2:	4606      	mov	r6, r0
 800aba4:	fb93 f3f2 	sdiv	r3, r3, r2
 800aba8:	2100      	movs	r1, #0
 800abaa:	2201      	movs	r2, #1
 800abac:	429a      	cmp	r2, r3
 800abae:	db09      	blt.n	800abc4 <__s2b+0x30>
 800abb0:	4630      	mov	r0, r6
 800abb2:	f7ff ff43 	bl	800aa3c <_Balloc>
 800abb6:	b940      	cbnz	r0, 800abca <__s2b+0x36>
 800abb8:	4602      	mov	r2, r0
 800abba:	4b19      	ldr	r3, [pc, #100]	; (800ac20 <__s2b+0x8c>)
 800abbc:	4819      	ldr	r0, [pc, #100]	; (800ac24 <__s2b+0x90>)
 800abbe:	21ce      	movs	r1, #206	; 0xce
 800abc0:	f000 fda2 	bl	800b708 <__assert_func>
 800abc4:	0052      	lsls	r2, r2, #1
 800abc6:	3101      	adds	r1, #1
 800abc8:	e7f0      	b.n	800abac <__s2b+0x18>
 800abca:	9b08      	ldr	r3, [sp, #32]
 800abcc:	6143      	str	r3, [r0, #20]
 800abce:	2d09      	cmp	r5, #9
 800abd0:	f04f 0301 	mov.w	r3, #1
 800abd4:	6103      	str	r3, [r0, #16]
 800abd6:	dd16      	ble.n	800ac06 <__s2b+0x72>
 800abd8:	f104 0909 	add.w	r9, r4, #9
 800abdc:	46c8      	mov	r8, r9
 800abde:	442c      	add	r4, r5
 800abe0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800abe4:	4601      	mov	r1, r0
 800abe6:	3b30      	subs	r3, #48	; 0x30
 800abe8:	220a      	movs	r2, #10
 800abea:	4630      	mov	r0, r6
 800abec:	f7ff ff88 	bl	800ab00 <__multadd>
 800abf0:	45a0      	cmp	r8, r4
 800abf2:	d1f5      	bne.n	800abe0 <__s2b+0x4c>
 800abf4:	f1a5 0408 	sub.w	r4, r5, #8
 800abf8:	444c      	add	r4, r9
 800abfa:	1b2d      	subs	r5, r5, r4
 800abfc:	1963      	adds	r3, r4, r5
 800abfe:	42bb      	cmp	r3, r7
 800ac00:	db04      	blt.n	800ac0c <__s2b+0x78>
 800ac02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac06:	340a      	adds	r4, #10
 800ac08:	2509      	movs	r5, #9
 800ac0a:	e7f6      	b.n	800abfa <__s2b+0x66>
 800ac0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac10:	4601      	mov	r1, r0
 800ac12:	3b30      	subs	r3, #48	; 0x30
 800ac14:	220a      	movs	r2, #10
 800ac16:	4630      	mov	r0, r6
 800ac18:	f7ff ff72 	bl	800ab00 <__multadd>
 800ac1c:	e7ee      	b.n	800abfc <__s2b+0x68>
 800ac1e:	bf00      	nop
 800ac20:	0801093c 	.word	0x0801093c
 800ac24:	080109cc 	.word	0x080109cc

0800ac28 <__hi0bits>:
 800ac28:	0c03      	lsrs	r3, r0, #16
 800ac2a:	041b      	lsls	r3, r3, #16
 800ac2c:	b9d3      	cbnz	r3, 800ac64 <__hi0bits+0x3c>
 800ac2e:	0400      	lsls	r0, r0, #16
 800ac30:	2310      	movs	r3, #16
 800ac32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ac36:	bf04      	itt	eq
 800ac38:	0200      	lsleq	r0, r0, #8
 800ac3a:	3308      	addeq	r3, #8
 800ac3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ac40:	bf04      	itt	eq
 800ac42:	0100      	lsleq	r0, r0, #4
 800ac44:	3304      	addeq	r3, #4
 800ac46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ac4a:	bf04      	itt	eq
 800ac4c:	0080      	lsleq	r0, r0, #2
 800ac4e:	3302      	addeq	r3, #2
 800ac50:	2800      	cmp	r0, #0
 800ac52:	db05      	blt.n	800ac60 <__hi0bits+0x38>
 800ac54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac58:	f103 0301 	add.w	r3, r3, #1
 800ac5c:	bf08      	it	eq
 800ac5e:	2320      	moveq	r3, #32
 800ac60:	4618      	mov	r0, r3
 800ac62:	4770      	bx	lr
 800ac64:	2300      	movs	r3, #0
 800ac66:	e7e4      	b.n	800ac32 <__hi0bits+0xa>

0800ac68 <__lo0bits>:
 800ac68:	6803      	ldr	r3, [r0, #0]
 800ac6a:	f013 0207 	ands.w	r2, r3, #7
 800ac6e:	4601      	mov	r1, r0
 800ac70:	d00b      	beq.n	800ac8a <__lo0bits+0x22>
 800ac72:	07da      	lsls	r2, r3, #31
 800ac74:	d424      	bmi.n	800acc0 <__lo0bits+0x58>
 800ac76:	0798      	lsls	r0, r3, #30
 800ac78:	bf49      	itett	mi
 800ac7a:	085b      	lsrmi	r3, r3, #1
 800ac7c:	089b      	lsrpl	r3, r3, #2
 800ac7e:	2001      	movmi	r0, #1
 800ac80:	600b      	strmi	r3, [r1, #0]
 800ac82:	bf5c      	itt	pl
 800ac84:	600b      	strpl	r3, [r1, #0]
 800ac86:	2002      	movpl	r0, #2
 800ac88:	4770      	bx	lr
 800ac8a:	b298      	uxth	r0, r3
 800ac8c:	b9b0      	cbnz	r0, 800acbc <__lo0bits+0x54>
 800ac8e:	0c1b      	lsrs	r3, r3, #16
 800ac90:	2010      	movs	r0, #16
 800ac92:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ac96:	bf04      	itt	eq
 800ac98:	0a1b      	lsreq	r3, r3, #8
 800ac9a:	3008      	addeq	r0, #8
 800ac9c:	071a      	lsls	r2, r3, #28
 800ac9e:	bf04      	itt	eq
 800aca0:	091b      	lsreq	r3, r3, #4
 800aca2:	3004      	addeq	r0, #4
 800aca4:	079a      	lsls	r2, r3, #30
 800aca6:	bf04      	itt	eq
 800aca8:	089b      	lsreq	r3, r3, #2
 800acaa:	3002      	addeq	r0, #2
 800acac:	07da      	lsls	r2, r3, #31
 800acae:	d403      	bmi.n	800acb8 <__lo0bits+0x50>
 800acb0:	085b      	lsrs	r3, r3, #1
 800acb2:	f100 0001 	add.w	r0, r0, #1
 800acb6:	d005      	beq.n	800acc4 <__lo0bits+0x5c>
 800acb8:	600b      	str	r3, [r1, #0]
 800acba:	4770      	bx	lr
 800acbc:	4610      	mov	r0, r2
 800acbe:	e7e8      	b.n	800ac92 <__lo0bits+0x2a>
 800acc0:	2000      	movs	r0, #0
 800acc2:	4770      	bx	lr
 800acc4:	2020      	movs	r0, #32
 800acc6:	4770      	bx	lr

0800acc8 <__i2b>:
 800acc8:	b510      	push	{r4, lr}
 800acca:	460c      	mov	r4, r1
 800accc:	2101      	movs	r1, #1
 800acce:	f7ff feb5 	bl	800aa3c <_Balloc>
 800acd2:	4602      	mov	r2, r0
 800acd4:	b928      	cbnz	r0, 800ace2 <__i2b+0x1a>
 800acd6:	4b05      	ldr	r3, [pc, #20]	; (800acec <__i2b+0x24>)
 800acd8:	4805      	ldr	r0, [pc, #20]	; (800acf0 <__i2b+0x28>)
 800acda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800acde:	f000 fd13 	bl	800b708 <__assert_func>
 800ace2:	2301      	movs	r3, #1
 800ace4:	6144      	str	r4, [r0, #20]
 800ace6:	6103      	str	r3, [r0, #16]
 800ace8:	bd10      	pop	{r4, pc}
 800acea:	bf00      	nop
 800acec:	0801093c 	.word	0x0801093c
 800acf0:	080109cc 	.word	0x080109cc

0800acf4 <__multiply>:
 800acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	4614      	mov	r4, r2
 800acfa:	690a      	ldr	r2, [r1, #16]
 800acfc:	6923      	ldr	r3, [r4, #16]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	bfb8      	it	lt
 800ad02:	460b      	movlt	r3, r1
 800ad04:	460d      	mov	r5, r1
 800ad06:	bfbc      	itt	lt
 800ad08:	4625      	movlt	r5, r4
 800ad0a:	461c      	movlt	r4, r3
 800ad0c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ad10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ad14:	68ab      	ldr	r3, [r5, #8]
 800ad16:	6869      	ldr	r1, [r5, #4]
 800ad18:	eb0a 0709 	add.w	r7, sl, r9
 800ad1c:	42bb      	cmp	r3, r7
 800ad1e:	b085      	sub	sp, #20
 800ad20:	bfb8      	it	lt
 800ad22:	3101      	addlt	r1, #1
 800ad24:	f7ff fe8a 	bl	800aa3c <_Balloc>
 800ad28:	b930      	cbnz	r0, 800ad38 <__multiply+0x44>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	4b42      	ldr	r3, [pc, #264]	; (800ae38 <__multiply+0x144>)
 800ad2e:	4843      	ldr	r0, [pc, #268]	; (800ae3c <__multiply+0x148>)
 800ad30:	f240 115d 	movw	r1, #349	; 0x15d
 800ad34:	f000 fce8 	bl	800b708 <__assert_func>
 800ad38:	f100 0614 	add.w	r6, r0, #20
 800ad3c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ad40:	4633      	mov	r3, r6
 800ad42:	2200      	movs	r2, #0
 800ad44:	4543      	cmp	r3, r8
 800ad46:	d31e      	bcc.n	800ad86 <__multiply+0x92>
 800ad48:	f105 0c14 	add.w	ip, r5, #20
 800ad4c:	f104 0314 	add.w	r3, r4, #20
 800ad50:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ad54:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ad58:	9202      	str	r2, [sp, #8]
 800ad5a:	ebac 0205 	sub.w	r2, ip, r5
 800ad5e:	3a15      	subs	r2, #21
 800ad60:	f022 0203 	bic.w	r2, r2, #3
 800ad64:	3204      	adds	r2, #4
 800ad66:	f105 0115 	add.w	r1, r5, #21
 800ad6a:	458c      	cmp	ip, r1
 800ad6c:	bf38      	it	cc
 800ad6e:	2204      	movcc	r2, #4
 800ad70:	9201      	str	r2, [sp, #4]
 800ad72:	9a02      	ldr	r2, [sp, #8]
 800ad74:	9303      	str	r3, [sp, #12]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d808      	bhi.n	800ad8c <__multiply+0x98>
 800ad7a:	2f00      	cmp	r7, #0
 800ad7c:	dc55      	bgt.n	800ae2a <__multiply+0x136>
 800ad7e:	6107      	str	r7, [r0, #16]
 800ad80:	b005      	add	sp, #20
 800ad82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad86:	f843 2b04 	str.w	r2, [r3], #4
 800ad8a:	e7db      	b.n	800ad44 <__multiply+0x50>
 800ad8c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ad90:	f1ba 0f00 	cmp.w	sl, #0
 800ad94:	d020      	beq.n	800add8 <__multiply+0xe4>
 800ad96:	f105 0e14 	add.w	lr, r5, #20
 800ad9a:	46b1      	mov	r9, r6
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ada2:	f8d9 b000 	ldr.w	fp, [r9]
 800ada6:	b2a1      	uxth	r1, r4
 800ada8:	fa1f fb8b 	uxth.w	fp, fp
 800adac:	fb0a b101 	mla	r1, sl, r1, fp
 800adb0:	4411      	add	r1, r2
 800adb2:	f8d9 2000 	ldr.w	r2, [r9]
 800adb6:	0c24      	lsrs	r4, r4, #16
 800adb8:	0c12      	lsrs	r2, r2, #16
 800adba:	fb0a 2404 	mla	r4, sl, r4, r2
 800adbe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800adc2:	b289      	uxth	r1, r1
 800adc4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800adc8:	45f4      	cmp	ip, lr
 800adca:	f849 1b04 	str.w	r1, [r9], #4
 800adce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800add2:	d8e4      	bhi.n	800ad9e <__multiply+0xaa>
 800add4:	9901      	ldr	r1, [sp, #4]
 800add6:	5072      	str	r2, [r6, r1]
 800add8:	9a03      	ldr	r2, [sp, #12]
 800adda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800adde:	3304      	adds	r3, #4
 800ade0:	f1b9 0f00 	cmp.w	r9, #0
 800ade4:	d01f      	beq.n	800ae26 <__multiply+0x132>
 800ade6:	6834      	ldr	r4, [r6, #0]
 800ade8:	f105 0114 	add.w	r1, r5, #20
 800adec:	46b6      	mov	lr, r6
 800adee:	f04f 0a00 	mov.w	sl, #0
 800adf2:	880a      	ldrh	r2, [r1, #0]
 800adf4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800adf8:	fb09 b202 	mla	r2, r9, r2, fp
 800adfc:	4492      	add	sl, r2
 800adfe:	b2a4      	uxth	r4, r4
 800ae00:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ae04:	f84e 4b04 	str.w	r4, [lr], #4
 800ae08:	f851 4b04 	ldr.w	r4, [r1], #4
 800ae0c:	f8be 2000 	ldrh.w	r2, [lr]
 800ae10:	0c24      	lsrs	r4, r4, #16
 800ae12:	fb09 2404 	mla	r4, r9, r4, r2
 800ae16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ae1a:	458c      	cmp	ip, r1
 800ae1c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ae20:	d8e7      	bhi.n	800adf2 <__multiply+0xfe>
 800ae22:	9a01      	ldr	r2, [sp, #4]
 800ae24:	50b4      	str	r4, [r6, r2]
 800ae26:	3604      	adds	r6, #4
 800ae28:	e7a3      	b.n	800ad72 <__multiply+0x7e>
 800ae2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1a5      	bne.n	800ad7e <__multiply+0x8a>
 800ae32:	3f01      	subs	r7, #1
 800ae34:	e7a1      	b.n	800ad7a <__multiply+0x86>
 800ae36:	bf00      	nop
 800ae38:	0801093c 	.word	0x0801093c
 800ae3c:	080109cc 	.word	0x080109cc

0800ae40 <__pow5mult>:
 800ae40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae44:	4615      	mov	r5, r2
 800ae46:	f012 0203 	ands.w	r2, r2, #3
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	460f      	mov	r7, r1
 800ae4e:	d007      	beq.n	800ae60 <__pow5mult+0x20>
 800ae50:	4c25      	ldr	r4, [pc, #148]	; (800aee8 <__pow5mult+0xa8>)
 800ae52:	3a01      	subs	r2, #1
 800ae54:	2300      	movs	r3, #0
 800ae56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae5a:	f7ff fe51 	bl	800ab00 <__multadd>
 800ae5e:	4607      	mov	r7, r0
 800ae60:	10ad      	asrs	r5, r5, #2
 800ae62:	d03d      	beq.n	800aee0 <__pow5mult+0xa0>
 800ae64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae66:	b97c      	cbnz	r4, 800ae88 <__pow5mult+0x48>
 800ae68:	2010      	movs	r0, #16
 800ae6a:	f7fc fd97 	bl	800799c <malloc>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	6270      	str	r0, [r6, #36]	; 0x24
 800ae72:	b928      	cbnz	r0, 800ae80 <__pow5mult+0x40>
 800ae74:	4b1d      	ldr	r3, [pc, #116]	; (800aeec <__pow5mult+0xac>)
 800ae76:	481e      	ldr	r0, [pc, #120]	; (800aef0 <__pow5mult+0xb0>)
 800ae78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ae7c:	f000 fc44 	bl	800b708 <__assert_func>
 800ae80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae84:	6004      	str	r4, [r0, #0]
 800ae86:	60c4      	str	r4, [r0, #12]
 800ae88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ae8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae90:	b94c      	cbnz	r4, 800aea6 <__pow5mult+0x66>
 800ae92:	f240 2171 	movw	r1, #625	; 0x271
 800ae96:	4630      	mov	r0, r6
 800ae98:	f7ff ff16 	bl	800acc8 <__i2b>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800aea2:	4604      	mov	r4, r0
 800aea4:	6003      	str	r3, [r0, #0]
 800aea6:	f04f 0900 	mov.w	r9, #0
 800aeaa:	07eb      	lsls	r3, r5, #31
 800aeac:	d50a      	bpl.n	800aec4 <__pow5mult+0x84>
 800aeae:	4639      	mov	r1, r7
 800aeb0:	4622      	mov	r2, r4
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f7ff ff1e 	bl	800acf4 <__multiply>
 800aeb8:	4639      	mov	r1, r7
 800aeba:	4680      	mov	r8, r0
 800aebc:	4630      	mov	r0, r6
 800aebe:	f7ff fdfd 	bl	800aabc <_Bfree>
 800aec2:	4647      	mov	r7, r8
 800aec4:	106d      	asrs	r5, r5, #1
 800aec6:	d00b      	beq.n	800aee0 <__pow5mult+0xa0>
 800aec8:	6820      	ldr	r0, [r4, #0]
 800aeca:	b938      	cbnz	r0, 800aedc <__pow5mult+0x9c>
 800aecc:	4622      	mov	r2, r4
 800aece:	4621      	mov	r1, r4
 800aed0:	4630      	mov	r0, r6
 800aed2:	f7ff ff0f 	bl	800acf4 <__multiply>
 800aed6:	6020      	str	r0, [r4, #0]
 800aed8:	f8c0 9000 	str.w	r9, [r0]
 800aedc:	4604      	mov	r4, r0
 800aede:	e7e4      	b.n	800aeaa <__pow5mult+0x6a>
 800aee0:	4638      	mov	r0, r7
 800aee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aee6:	bf00      	nop
 800aee8:	08010b20 	.word	0x08010b20
 800aeec:	080108c6 	.word	0x080108c6
 800aef0:	080109cc 	.word	0x080109cc

0800aef4 <__lshift>:
 800aef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef8:	460c      	mov	r4, r1
 800aefa:	6849      	ldr	r1, [r1, #4]
 800aefc:	6923      	ldr	r3, [r4, #16]
 800aefe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af02:	68a3      	ldr	r3, [r4, #8]
 800af04:	4607      	mov	r7, r0
 800af06:	4691      	mov	r9, r2
 800af08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af0c:	f108 0601 	add.w	r6, r8, #1
 800af10:	42b3      	cmp	r3, r6
 800af12:	db0b      	blt.n	800af2c <__lshift+0x38>
 800af14:	4638      	mov	r0, r7
 800af16:	f7ff fd91 	bl	800aa3c <_Balloc>
 800af1a:	4605      	mov	r5, r0
 800af1c:	b948      	cbnz	r0, 800af32 <__lshift+0x3e>
 800af1e:	4602      	mov	r2, r0
 800af20:	4b28      	ldr	r3, [pc, #160]	; (800afc4 <__lshift+0xd0>)
 800af22:	4829      	ldr	r0, [pc, #164]	; (800afc8 <__lshift+0xd4>)
 800af24:	f240 11d9 	movw	r1, #473	; 0x1d9
 800af28:	f000 fbee 	bl	800b708 <__assert_func>
 800af2c:	3101      	adds	r1, #1
 800af2e:	005b      	lsls	r3, r3, #1
 800af30:	e7ee      	b.n	800af10 <__lshift+0x1c>
 800af32:	2300      	movs	r3, #0
 800af34:	f100 0114 	add.w	r1, r0, #20
 800af38:	f100 0210 	add.w	r2, r0, #16
 800af3c:	4618      	mov	r0, r3
 800af3e:	4553      	cmp	r3, sl
 800af40:	db33      	blt.n	800afaa <__lshift+0xb6>
 800af42:	6920      	ldr	r0, [r4, #16]
 800af44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af48:	f104 0314 	add.w	r3, r4, #20
 800af4c:	f019 091f 	ands.w	r9, r9, #31
 800af50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af58:	d02b      	beq.n	800afb2 <__lshift+0xbe>
 800af5a:	f1c9 0e20 	rsb	lr, r9, #32
 800af5e:	468a      	mov	sl, r1
 800af60:	2200      	movs	r2, #0
 800af62:	6818      	ldr	r0, [r3, #0]
 800af64:	fa00 f009 	lsl.w	r0, r0, r9
 800af68:	4302      	orrs	r2, r0
 800af6a:	f84a 2b04 	str.w	r2, [sl], #4
 800af6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af72:	459c      	cmp	ip, r3
 800af74:	fa22 f20e 	lsr.w	r2, r2, lr
 800af78:	d8f3      	bhi.n	800af62 <__lshift+0x6e>
 800af7a:	ebac 0304 	sub.w	r3, ip, r4
 800af7e:	3b15      	subs	r3, #21
 800af80:	f023 0303 	bic.w	r3, r3, #3
 800af84:	3304      	adds	r3, #4
 800af86:	f104 0015 	add.w	r0, r4, #21
 800af8a:	4584      	cmp	ip, r0
 800af8c:	bf38      	it	cc
 800af8e:	2304      	movcc	r3, #4
 800af90:	50ca      	str	r2, [r1, r3]
 800af92:	b10a      	cbz	r2, 800af98 <__lshift+0xa4>
 800af94:	f108 0602 	add.w	r6, r8, #2
 800af98:	3e01      	subs	r6, #1
 800af9a:	4638      	mov	r0, r7
 800af9c:	612e      	str	r6, [r5, #16]
 800af9e:	4621      	mov	r1, r4
 800afa0:	f7ff fd8c 	bl	800aabc <_Bfree>
 800afa4:	4628      	mov	r0, r5
 800afa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800afae:	3301      	adds	r3, #1
 800afb0:	e7c5      	b.n	800af3e <__lshift+0x4a>
 800afb2:	3904      	subs	r1, #4
 800afb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800afb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800afbc:	459c      	cmp	ip, r3
 800afbe:	d8f9      	bhi.n	800afb4 <__lshift+0xc0>
 800afc0:	e7ea      	b.n	800af98 <__lshift+0xa4>
 800afc2:	bf00      	nop
 800afc4:	0801093c 	.word	0x0801093c
 800afc8:	080109cc 	.word	0x080109cc

0800afcc <__mcmp>:
 800afcc:	b530      	push	{r4, r5, lr}
 800afce:	6902      	ldr	r2, [r0, #16]
 800afd0:	690c      	ldr	r4, [r1, #16]
 800afd2:	1b12      	subs	r2, r2, r4
 800afd4:	d10e      	bne.n	800aff4 <__mcmp+0x28>
 800afd6:	f100 0314 	add.w	r3, r0, #20
 800afda:	3114      	adds	r1, #20
 800afdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800afe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800afe4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800afe8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800afec:	42a5      	cmp	r5, r4
 800afee:	d003      	beq.n	800aff8 <__mcmp+0x2c>
 800aff0:	d305      	bcc.n	800affe <__mcmp+0x32>
 800aff2:	2201      	movs	r2, #1
 800aff4:	4610      	mov	r0, r2
 800aff6:	bd30      	pop	{r4, r5, pc}
 800aff8:	4283      	cmp	r3, r0
 800affa:	d3f3      	bcc.n	800afe4 <__mcmp+0x18>
 800affc:	e7fa      	b.n	800aff4 <__mcmp+0x28>
 800affe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b002:	e7f7      	b.n	800aff4 <__mcmp+0x28>

0800b004 <__mdiff>:
 800b004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b008:	460c      	mov	r4, r1
 800b00a:	4606      	mov	r6, r0
 800b00c:	4611      	mov	r1, r2
 800b00e:	4620      	mov	r0, r4
 800b010:	4617      	mov	r7, r2
 800b012:	f7ff ffdb 	bl	800afcc <__mcmp>
 800b016:	1e05      	subs	r5, r0, #0
 800b018:	d110      	bne.n	800b03c <__mdiff+0x38>
 800b01a:	4629      	mov	r1, r5
 800b01c:	4630      	mov	r0, r6
 800b01e:	f7ff fd0d 	bl	800aa3c <_Balloc>
 800b022:	b930      	cbnz	r0, 800b032 <__mdiff+0x2e>
 800b024:	4b39      	ldr	r3, [pc, #228]	; (800b10c <__mdiff+0x108>)
 800b026:	4602      	mov	r2, r0
 800b028:	f240 2132 	movw	r1, #562	; 0x232
 800b02c:	4838      	ldr	r0, [pc, #224]	; (800b110 <__mdiff+0x10c>)
 800b02e:	f000 fb6b 	bl	800b708 <__assert_func>
 800b032:	2301      	movs	r3, #1
 800b034:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b03c:	bfa4      	itt	ge
 800b03e:	463b      	movge	r3, r7
 800b040:	4627      	movge	r7, r4
 800b042:	4630      	mov	r0, r6
 800b044:	6879      	ldr	r1, [r7, #4]
 800b046:	bfa6      	itte	ge
 800b048:	461c      	movge	r4, r3
 800b04a:	2500      	movge	r5, #0
 800b04c:	2501      	movlt	r5, #1
 800b04e:	f7ff fcf5 	bl	800aa3c <_Balloc>
 800b052:	b920      	cbnz	r0, 800b05e <__mdiff+0x5a>
 800b054:	4b2d      	ldr	r3, [pc, #180]	; (800b10c <__mdiff+0x108>)
 800b056:	4602      	mov	r2, r0
 800b058:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b05c:	e7e6      	b.n	800b02c <__mdiff+0x28>
 800b05e:	693e      	ldr	r6, [r7, #16]
 800b060:	60c5      	str	r5, [r0, #12]
 800b062:	6925      	ldr	r5, [r4, #16]
 800b064:	f107 0114 	add.w	r1, r7, #20
 800b068:	f104 0914 	add.w	r9, r4, #20
 800b06c:	f100 0e14 	add.w	lr, r0, #20
 800b070:	f107 0210 	add.w	r2, r7, #16
 800b074:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b078:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b07c:	46f2      	mov	sl, lr
 800b07e:	2700      	movs	r7, #0
 800b080:	f859 3b04 	ldr.w	r3, [r9], #4
 800b084:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b088:	fa1f f883 	uxth.w	r8, r3
 800b08c:	fa17 f78b 	uxtah	r7, r7, fp
 800b090:	0c1b      	lsrs	r3, r3, #16
 800b092:	eba7 0808 	sub.w	r8, r7, r8
 800b096:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b09a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b09e:	fa1f f888 	uxth.w	r8, r8
 800b0a2:	141f      	asrs	r7, r3, #16
 800b0a4:	454d      	cmp	r5, r9
 800b0a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b0aa:	f84a 3b04 	str.w	r3, [sl], #4
 800b0ae:	d8e7      	bhi.n	800b080 <__mdiff+0x7c>
 800b0b0:	1b2b      	subs	r3, r5, r4
 800b0b2:	3b15      	subs	r3, #21
 800b0b4:	f023 0303 	bic.w	r3, r3, #3
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	3415      	adds	r4, #21
 800b0bc:	42a5      	cmp	r5, r4
 800b0be:	bf38      	it	cc
 800b0c0:	2304      	movcc	r3, #4
 800b0c2:	4419      	add	r1, r3
 800b0c4:	4473      	add	r3, lr
 800b0c6:	469e      	mov	lr, r3
 800b0c8:	460d      	mov	r5, r1
 800b0ca:	4565      	cmp	r5, ip
 800b0cc:	d30e      	bcc.n	800b0ec <__mdiff+0xe8>
 800b0ce:	f10c 0203 	add.w	r2, ip, #3
 800b0d2:	1a52      	subs	r2, r2, r1
 800b0d4:	f022 0203 	bic.w	r2, r2, #3
 800b0d8:	3903      	subs	r1, #3
 800b0da:	458c      	cmp	ip, r1
 800b0dc:	bf38      	it	cc
 800b0de:	2200      	movcc	r2, #0
 800b0e0:	441a      	add	r2, r3
 800b0e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b0e6:	b17b      	cbz	r3, 800b108 <__mdiff+0x104>
 800b0e8:	6106      	str	r6, [r0, #16]
 800b0ea:	e7a5      	b.n	800b038 <__mdiff+0x34>
 800b0ec:	f855 8b04 	ldr.w	r8, [r5], #4
 800b0f0:	fa17 f488 	uxtah	r4, r7, r8
 800b0f4:	1422      	asrs	r2, r4, #16
 800b0f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b0fa:	b2a4      	uxth	r4, r4
 800b0fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b100:	f84e 4b04 	str.w	r4, [lr], #4
 800b104:	1417      	asrs	r7, r2, #16
 800b106:	e7e0      	b.n	800b0ca <__mdiff+0xc6>
 800b108:	3e01      	subs	r6, #1
 800b10a:	e7ea      	b.n	800b0e2 <__mdiff+0xde>
 800b10c:	0801093c 	.word	0x0801093c
 800b110:	080109cc 	.word	0x080109cc

0800b114 <__ulp>:
 800b114:	b082      	sub	sp, #8
 800b116:	ed8d 0b00 	vstr	d0, [sp]
 800b11a:	9b01      	ldr	r3, [sp, #4]
 800b11c:	4912      	ldr	r1, [pc, #72]	; (800b168 <__ulp+0x54>)
 800b11e:	4019      	ands	r1, r3
 800b120:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b124:	2900      	cmp	r1, #0
 800b126:	dd05      	ble.n	800b134 <__ulp+0x20>
 800b128:	2200      	movs	r2, #0
 800b12a:	460b      	mov	r3, r1
 800b12c:	ec43 2b10 	vmov	d0, r2, r3
 800b130:	b002      	add	sp, #8
 800b132:	4770      	bx	lr
 800b134:	4249      	negs	r1, r1
 800b136:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b13a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b13e:	f04f 0200 	mov.w	r2, #0
 800b142:	f04f 0300 	mov.w	r3, #0
 800b146:	da04      	bge.n	800b152 <__ulp+0x3e>
 800b148:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b14c:	fa41 f300 	asr.w	r3, r1, r0
 800b150:	e7ec      	b.n	800b12c <__ulp+0x18>
 800b152:	f1a0 0114 	sub.w	r1, r0, #20
 800b156:	291e      	cmp	r1, #30
 800b158:	bfda      	itte	le
 800b15a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b15e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b162:	2101      	movgt	r1, #1
 800b164:	460a      	mov	r2, r1
 800b166:	e7e1      	b.n	800b12c <__ulp+0x18>
 800b168:	7ff00000 	.word	0x7ff00000

0800b16c <__b2d>:
 800b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16e:	6905      	ldr	r5, [r0, #16]
 800b170:	f100 0714 	add.w	r7, r0, #20
 800b174:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b178:	1f2e      	subs	r6, r5, #4
 800b17a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b17e:	4620      	mov	r0, r4
 800b180:	f7ff fd52 	bl	800ac28 <__hi0bits>
 800b184:	f1c0 0320 	rsb	r3, r0, #32
 800b188:	280a      	cmp	r0, #10
 800b18a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b208 <__b2d+0x9c>
 800b18e:	600b      	str	r3, [r1, #0]
 800b190:	dc14      	bgt.n	800b1bc <__b2d+0x50>
 800b192:	f1c0 0e0b 	rsb	lr, r0, #11
 800b196:	fa24 f10e 	lsr.w	r1, r4, lr
 800b19a:	42b7      	cmp	r7, r6
 800b19c:	ea41 030c 	orr.w	r3, r1, ip
 800b1a0:	bf34      	ite	cc
 800b1a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b1a6:	2100      	movcs	r1, #0
 800b1a8:	3015      	adds	r0, #21
 800b1aa:	fa04 f000 	lsl.w	r0, r4, r0
 800b1ae:	fa21 f10e 	lsr.w	r1, r1, lr
 800b1b2:	ea40 0201 	orr.w	r2, r0, r1
 800b1b6:	ec43 2b10 	vmov	d0, r2, r3
 800b1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1bc:	42b7      	cmp	r7, r6
 800b1be:	bf3a      	itte	cc
 800b1c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b1c4:	f1a5 0608 	subcc.w	r6, r5, #8
 800b1c8:	2100      	movcs	r1, #0
 800b1ca:	380b      	subs	r0, #11
 800b1cc:	d017      	beq.n	800b1fe <__b2d+0x92>
 800b1ce:	f1c0 0c20 	rsb	ip, r0, #32
 800b1d2:	fa04 f500 	lsl.w	r5, r4, r0
 800b1d6:	42be      	cmp	r6, r7
 800b1d8:	fa21 f40c 	lsr.w	r4, r1, ip
 800b1dc:	ea45 0504 	orr.w	r5, r5, r4
 800b1e0:	bf8c      	ite	hi
 800b1e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b1e6:	2400      	movls	r4, #0
 800b1e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b1ec:	fa01 f000 	lsl.w	r0, r1, r0
 800b1f0:	fa24 f40c 	lsr.w	r4, r4, ip
 800b1f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b1f8:	ea40 0204 	orr.w	r2, r0, r4
 800b1fc:	e7db      	b.n	800b1b6 <__b2d+0x4a>
 800b1fe:	ea44 030c 	orr.w	r3, r4, ip
 800b202:	460a      	mov	r2, r1
 800b204:	e7d7      	b.n	800b1b6 <__b2d+0x4a>
 800b206:	bf00      	nop
 800b208:	3ff00000 	.word	0x3ff00000

0800b20c <__d2b>:
 800b20c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b210:	4689      	mov	r9, r1
 800b212:	2101      	movs	r1, #1
 800b214:	ec57 6b10 	vmov	r6, r7, d0
 800b218:	4690      	mov	r8, r2
 800b21a:	f7ff fc0f 	bl	800aa3c <_Balloc>
 800b21e:	4604      	mov	r4, r0
 800b220:	b930      	cbnz	r0, 800b230 <__d2b+0x24>
 800b222:	4602      	mov	r2, r0
 800b224:	4b25      	ldr	r3, [pc, #148]	; (800b2bc <__d2b+0xb0>)
 800b226:	4826      	ldr	r0, [pc, #152]	; (800b2c0 <__d2b+0xb4>)
 800b228:	f240 310a 	movw	r1, #778	; 0x30a
 800b22c:	f000 fa6c 	bl	800b708 <__assert_func>
 800b230:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b234:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b238:	bb35      	cbnz	r5, 800b288 <__d2b+0x7c>
 800b23a:	2e00      	cmp	r6, #0
 800b23c:	9301      	str	r3, [sp, #4]
 800b23e:	d028      	beq.n	800b292 <__d2b+0x86>
 800b240:	4668      	mov	r0, sp
 800b242:	9600      	str	r6, [sp, #0]
 800b244:	f7ff fd10 	bl	800ac68 <__lo0bits>
 800b248:	9900      	ldr	r1, [sp, #0]
 800b24a:	b300      	cbz	r0, 800b28e <__d2b+0x82>
 800b24c:	9a01      	ldr	r2, [sp, #4]
 800b24e:	f1c0 0320 	rsb	r3, r0, #32
 800b252:	fa02 f303 	lsl.w	r3, r2, r3
 800b256:	430b      	orrs	r3, r1
 800b258:	40c2      	lsrs	r2, r0
 800b25a:	6163      	str	r3, [r4, #20]
 800b25c:	9201      	str	r2, [sp, #4]
 800b25e:	9b01      	ldr	r3, [sp, #4]
 800b260:	61a3      	str	r3, [r4, #24]
 800b262:	2b00      	cmp	r3, #0
 800b264:	bf14      	ite	ne
 800b266:	2202      	movne	r2, #2
 800b268:	2201      	moveq	r2, #1
 800b26a:	6122      	str	r2, [r4, #16]
 800b26c:	b1d5      	cbz	r5, 800b2a4 <__d2b+0x98>
 800b26e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b272:	4405      	add	r5, r0
 800b274:	f8c9 5000 	str.w	r5, [r9]
 800b278:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b27c:	f8c8 0000 	str.w	r0, [r8]
 800b280:	4620      	mov	r0, r4
 800b282:	b003      	add	sp, #12
 800b284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b28c:	e7d5      	b.n	800b23a <__d2b+0x2e>
 800b28e:	6161      	str	r1, [r4, #20]
 800b290:	e7e5      	b.n	800b25e <__d2b+0x52>
 800b292:	a801      	add	r0, sp, #4
 800b294:	f7ff fce8 	bl	800ac68 <__lo0bits>
 800b298:	9b01      	ldr	r3, [sp, #4]
 800b29a:	6163      	str	r3, [r4, #20]
 800b29c:	2201      	movs	r2, #1
 800b29e:	6122      	str	r2, [r4, #16]
 800b2a0:	3020      	adds	r0, #32
 800b2a2:	e7e3      	b.n	800b26c <__d2b+0x60>
 800b2a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2ac:	f8c9 0000 	str.w	r0, [r9]
 800b2b0:	6918      	ldr	r0, [r3, #16]
 800b2b2:	f7ff fcb9 	bl	800ac28 <__hi0bits>
 800b2b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2ba:	e7df      	b.n	800b27c <__d2b+0x70>
 800b2bc:	0801093c 	.word	0x0801093c
 800b2c0:	080109cc 	.word	0x080109cc

0800b2c4 <__ratio>:
 800b2c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c8:	4688      	mov	r8, r1
 800b2ca:	4669      	mov	r1, sp
 800b2cc:	4681      	mov	r9, r0
 800b2ce:	f7ff ff4d 	bl	800b16c <__b2d>
 800b2d2:	a901      	add	r1, sp, #4
 800b2d4:	4640      	mov	r0, r8
 800b2d6:	ec55 4b10 	vmov	r4, r5, d0
 800b2da:	f7ff ff47 	bl	800b16c <__b2d>
 800b2de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b2e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b2e6:	eba3 0c02 	sub.w	ip, r3, r2
 800b2ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b2ee:	1a9b      	subs	r3, r3, r2
 800b2f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b2f4:	ec51 0b10 	vmov	r0, r1, d0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	bfd6      	itet	le
 800b2fc:	460a      	movle	r2, r1
 800b2fe:	462a      	movgt	r2, r5
 800b300:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b304:	468b      	mov	fp, r1
 800b306:	462f      	mov	r7, r5
 800b308:	bfd4      	ite	le
 800b30a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b30e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b312:	4620      	mov	r0, r4
 800b314:	ee10 2a10 	vmov	r2, s0
 800b318:	465b      	mov	r3, fp
 800b31a:	4639      	mov	r1, r7
 800b31c:	f7f5 fab6 	bl	800088c <__aeabi_ddiv>
 800b320:	ec41 0b10 	vmov	d0, r0, r1
 800b324:	b003      	add	sp, #12
 800b326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b32a <__copybits>:
 800b32a:	3901      	subs	r1, #1
 800b32c:	b570      	push	{r4, r5, r6, lr}
 800b32e:	1149      	asrs	r1, r1, #5
 800b330:	6914      	ldr	r4, [r2, #16]
 800b332:	3101      	adds	r1, #1
 800b334:	f102 0314 	add.w	r3, r2, #20
 800b338:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b33c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b340:	1f05      	subs	r5, r0, #4
 800b342:	42a3      	cmp	r3, r4
 800b344:	d30c      	bcc.n	800b360 <__copybits+0x36>
 800b346:	1aa3      	subs	r3, r4, r2
 800b348:	3b11      	subs	r3, #17
 800b34a:	f023 0303 	bic.w	r3, r3, #3
 800b34e:	3211      	adds	r2, #17
 800b350:	42a2      	cmp	r2, r4
 800b352:	bf88      	it	hi
 800b354:	2300      	movhi	r3, #0
 800b356:	4418      	add	r0, r3
 800b358:	2300      	movs	r3, #0
 800b35a:	4288      	cmp	r0, r1
 800b35c:	d305      	bcc.n	800b36a <__copybits+0x40>
 800b35e:	bd70      	pop	{r4, r5, r6, pc}
 800b360:	f853 6b04 	ldr.w	r6, [r3], #4
 800b364:	f845 6f04 	str.w	r6, [r5, #4]!
 800b368:	e7eb      	b.n	800b342 <__copybits+0x18>
 800b36a:	f840 3b04 	str.w	r3, [r0], #4
 800b36e:	e7f4      	b.n	800b35a <__copybits+0x30>

0800b370 <__any_on>:
 800b370:	f100 0214 	add.w	r2, r0, #20
 800b374:	6900      	ldr	r0, [r0, #16]
 800b376:	114b      	asrs	r3, r1, #5
 800b378:	4298      	cmp	r0, r3
 800b37a:	b510      	push	{r4, lr}
 800b37c:	db11      	blt.n	800b3a2 <__any_on+0x32>
 800b37e:	dd0a      	ble.n	800b396 <__any_on+0x26>
 800b380:	f011 011f 	ands.w	r1, r1, #31
 800b384:	d007      	beq.n	800b396 <__any_on+0x26>
 800b386:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b38a:	fa24 f001 	lsr.w	r0, r4, r1
 800b38e:	fa00 f101 	lsl.w	r1, r0, r1
 800b392:	428c      	cmp	r4, r1
 800b394:	d10b      	bne.n	800b3ae <__any_on+0x3e>
 800b396:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d803      	bhi.n	800b3a6 <__any_on+0x36>
 800b39e:	2000      	movs	r0, #0
 800b3a0:	bd10      	pop	{r4, pc}
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	e7f7      	b.n	800b396 <__any_on+0x26>
 800b3a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b3aa:	2900      	cmp	r1, #0
 800b3ac:	d0f5      	beq.n	800b39a <__any_on+0x2a>
 800b3ae:	2001      	movs	r0, #1
 800b3b0:	e7f6      	b.n	800b3a0 <__any_on+0x30>

0800b3b2 <_realloc_r>:
 800b3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b4:	4607      	mov	r7, r0
 800b3b6:	4614      	mov	r4, r2
 800b3b8:	460e      	mov	r6, r1
 800b3ba:	b921      	cbnz	r1, 800b3c6 <_realloc_r+0x14>
 800b3bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	f7fc bb69 	b.w	8007a98 <_malloc_r>
 800b3c6:	b922      	cbnz	r2, 800b3d2 <_realloc_r+0x20>
 800b3c8:	f7fc fb16 	bl	80079f8 <_free_r>
 800b3cc:	4625      	mov	r5, r4
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3d2:	f000 f9e6 	bl	800b7a2 <_malloc_usable_size_r>
 800b3d6:	42a0      	cmp	r0, r4
 800b3d8:	d20f      	bcs.n	800b3fa <_realloc_r+0x48>
 800b3da:	4621      	mov	r1, r4
 800b3dc:	4638      	mov	r0, r7
 800b3de:	f7fc fb5b 	bl	8007a98 <_malloc_r>
 800b3e2:	4605      	mov	r5, r0
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	d0f2      	beq.n	800b3ce <_realloc_r+0x1c>
 800b3e8:	4631      	mov	r1, r6
 800b3ea:	4622      	mov	r2, r4
 800b3ec:	f7fc fade 	bl	80079ac <memcpy>
 800b3f0:	4631      	mov	r1, r6
 800b3f2:	4638      	mov	r0, r7
 800b3f4:	f7fc fb00 	bl	80079f8 <_free_r>
 800b3f8:	e7e9      	b.n	800b3ce <_realloc_r+0x1c>
 800b3fa:	4635      	mov	r5, r6
 800b3fc:	e7e7      	b.n	800b3ce <_realloc_r+0x1c>

0800b3fe <__ssputs_r>:
 800b3fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b402:	688e      	ldr	r6, [r1, #8]
 800b404:	429e      	cmp	r6, r3
 800b406:	4682      	mov	sl, r0
 800b408:	460c      	mov	r4, r1
 800b40a:	4690      	mov	r8, r2
 800b40c:	461f      	mov	r7, r3
 800b40e:	d838      	bhi.n	800b482 <__ssputs_r+0x84>
 800b410:	898a      	ldrh	r2, [r1, #12]
 800b412:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b416:	d032      	beq.n	800b47e <__ssputs_r+0x80>
 800b418:	6825      	ldr	r5, [r4, #0]
 800b41a:	6909      	ldr	r1, [r1, #16]
 800b41c:	eba5 0901 	sub.w	r9, r5, r1
 800b420:	6965      	ldr	r5, [r4, #20]
 800b422:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b426:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b42a:	3301      	adds	r3, #1
 800b42c:	444b      	add	r3, r9
 800b42e:	106d      	asrs	r5, r5, #1
 800b430:	429d      	cmp	r5, r3
 800b432:	bf38      	it	cc
 800b434:	461d      	movcc	r5, r3
 800b436:	0553      	lsls	r3, r2, #21
 800b438:	d531      	bpl.n	800b49e <__ssputs_r+0xa0>
 800b43a:	4629      	mov	r1, r5
 800b43c:	f7fc fb2c 	bl	8007a98 <_malloc_r>
 800b440:	4606      	mov	r6, r0
 800b442:	b950      	cbnz	r0, 800b45a <__ssputs_r+0x5c>
 800b444:	230c      	movs	r3, #12
 800b446:	f8ca 3000 	str.w	r3, [sl]
 800b44a:	89a3      	ldrh	r3, [r4, #12]
 800b44c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b450:	81a3      	strh	r3, [r4, #12]
 800b452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b45a:	6921      	ldr	r1, [r4, #16]
 800b45c:	464a      	mov	r2, r9
 800b45e:	f7fc faa5 	bl	80079ac <memcpy>
 800b462:	89a3      	ldrh	r3, [r4, #12]
 800b464:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b46c:	81a3      	strh	r3, [r4, #12]
 800b46e:	6126      	str	r6, [r4, #16]
 800b470:	6165      	str	r5, [r4, #20]
 800b472:	444e      	add	r6, r9
 800b474:	eba5 0509 	sub.w	r5, r5, r9
 800b478:	6026      	str	r6, [r4, #0]
 800b47a:	60a5      	str	r5, [r4, #8]
 800b47c:	463e      	mov	r6, r7
 800b47e:	42be      	cmp	r6, r7
 800b480:	d900      	bls.n	800b484 <__ssputs_r+0x86>
 800b482:	463e      	mov	r6, r7
 800b484:	4632      	mov	r2, r6
 800b486:	6820      	ldr	r0, [r4, #0]
 800b488:	4641      	mov	r1, r8
 800b48a:	f000 f970 	bl	800b76e <memmove>
 800b48e:	68a3      	ldr	r3, [r4, #8]
 800b490:	6822      	ldr	r2, [r4, #0]
 800b492:	1b9b      	subs	r3, r3, r6
 800b494:	4432      	add	r2, r6
 800b496:	60a3      	str	r3, [r4, #8]
 800b498:	6022      	str	r2, [r4, #0]
 800b49a:	2000      	movs	r0, #0
 800b49c:	e7db      	b.n	800b456 <__ssputs_r+0x58>
 800b49e:	462a      	mov	r2, r5
 800b4a0:	f7ff ff87 	bl	800b3b2 <_realloc_r>
 800b4a4:	4606      	mov	r6, r0
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d1e1      	bne.n	800b46e <__ssputs_r+0x70>
 800b4aa:	6921      	ldr	r1, [r4, #16]
 800b4ac:	4650      	mov	r0, sl
 800b4ae:	f7fc faa3 	bl	80079f8 <_free_r>
 800b4b2:	e7c7      	b.n	800b444 <__ssputs_r+0x46>

0800b4b4 <_svfiprintf_r>:
 800b4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b8:	4698      	mov	r8, r3
 800b4ba:	898b      	ldrh	r3, [r1, #12]
 800b4bc:	061b      	lsls	r3, r3, #24
 800b4be:	b09d      	sub	sp, #116	; 0x74
 800b4c0:	4607      	mov	r7, r0
 800b4c2:	460d      	mov	r5, r1
 800b4c4:	4614      	mov	r4, r2
 800b4c6:	d50e      	bpl.n	800b4e6 <_svfiprintf_r+0x32>
 800b4c8:	690b      	ldr	r3, [r1, #16]
 800b4ca:	b963      	cbnz	r3, 800b4e6 <_svfiprintf_r+0x32>
 800b4cc:	2140      	movs	r1, #64	; 0x40
 800b4ce:	f7fc fae3 	bl	8007a98 <_malloc_r>
 800b4d2:	6028      	str	r0, [r5, #0]
 800b4d4:	6128      	str	r0, [r5, #16]
 800b4d6:	b920      	cbnz	r0, 800b4e2 <_svfiprintf_r+0x2e>
 800b4d8:	230c      	movs	r3, #12
 800b4da:	603b      	str	r3, [r7, #0]
 800b4dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4e0:	e0d1      	b.n	800b686 <_svfiprintf_r+0x1d2>
 800b4e2:	2340      	movs	r3, #64	; 0x40
 800b4e4:	616b      	str	r3, [r5, #20]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ea:	2320      	movs	r3, #32
 800b4ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4f4:	2330      	movs	r3, #48	; 0x30
 800b4f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b6a0 <_svfiprintf_r+0x1ec>
 800b4fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4fe:	f04f 0901 	mov.w	r9, #1
 800b502:	4623      	mov	r3, r4
 800b504:	469a      	mov	sl, r3
 800b506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b50a:	b10a      	cbz	r2, 800b510 <_svfiprintf_r+0x5c>
 800b50c:	2a25      	cmp	r2, #37	; 0x25
 800b50e:	d1f9      	bne.n	800b504 <_svfiprintf_r+0x50>
 800b510:	ebba 0b04 	subs.w	fp, sl, r4
 800b514:	d00b      	beq.n	800b52e <_svfiprintf_r+0x7a>
 800b516:	465b      	mov	r3, fp
 800b518:	4622      	mov	r2, r4
 800b51a:	4629      	mov	r1, r5
 800b51c:	4638      	mov	r0, r7
 800b51e:	f7ff ff6e 	bl	800b3fe <__ssputs_r>
 800b522:	3001      	adds	r0, #1
 800b524:	f000 80aa 	beq.w	800b67c <_svfiprintf_r+0x1c8>
 800b528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b52a:	445a      	add	r2, fp
 800b52c:	9209      	str	r2, [sp, #36]	; 0x24
 800b52e:	f89a 3000 	ldrb.w	r3, [sl]
 800b532:	2b00      	cmp	r3, #0
 800b534:	f000 80a2 	beq.w	800b67c <_svfiprintf_r+0x1c8>
 800b538:	2300      	movs	r3, #0
 800b53a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b53e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b542:	f10a 0a01 	add.w	sl, sl, #1
 800b546:	9304      	str	r3, [sp, #16]
 800b548:	9307      	str	r3, [sp, #28]
 800b54a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b54e:	931a      	str	r3, [sp, #104]	; 0x68
 800b550:	4654      	mov	r4, sl
 800b552:	2205      	movs	r2, #5
 800b554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b558:	4851      	ldr	r0, [pc, #324]	; (800b6a0 <_svfiprintf_r+0x1ec>)
 800b55a:	f7f4 fe61 	bl	8000220 <memchr>
 800b55e:	9a04      	ldr	r2, [sp, #16]
 800b560:	b9d8      	cbnz	r0, 800b59a <_svfiprintf_r+0xe6>
 800b562:	06d0      	lsls	r0, r2, #27
 800b564:	bf44      	itt	mi
 800b566:	2320      	movmi	r3, #32
 800b568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b56c:	0711      	lsls	r1, r2, #28
 800b56e:	bf44      	itt	mi
 800b570:	232b      	movmi	r3, #43	; 0x2b
 800b572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b576:	f89a 3000 	ldrb.w	r3, [sl]
 800b57a:	2b2a      	cmp	r3, #42	; 0x2a
 800b57c:	d015      	beq.n	800b5aa <_svfiprintf_r+0xf6>
 800b57e:	9a07      	ldr	r2, [sp, #28]
 800b580:	4654      	mov	r4, sl
 800b582:	2000      	movs	r0, #0
 800b584:	f04f 0c0a 	mov.w	ip, #10
 800b588:	4621      	mov	r1, r4
 800b58a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b58e:	3b30      	subs	r3, #48	; 0x30
 800b590:	2b09      	cmp	r3, #9
 800b592:	d94e      	bls.n	800b632 <_svfiprintf_r+0x17e>
 800b594:	b1b0      	cbz	r0, 800b5c4 <_svfiprintf_r+0x110>
 800b596:	9207      	str	r2, [sp, #28]
 800b598:	e014      	b.n	800b5c4 <_svfiprintf_r+0x110>
 800b59a:	eba0 0308 	sub.w	r3, r0, r8
 800b59e:	fa09 f303 	lsl.w	r3, r9, r3
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	9304      	str	r3, [sp, #16]
 800b5a6:	46a2      	mov	sl, r4
 800b5a8:	e7d2      	b.n	800b550 <_svfiprintf_r+0x9c>
 800b5aa:	9b03      	ldr	r3, [sp, #12]
 800b5ac:	1d19      	adds	r1, r3, #4
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	9103      	str	r1, [sp, #12]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	bfbb      	ittet	lt
 800b5b6:	425b      	neglt	r3, r3
 800b5b8:	f042 0202 	orrlt.w	r2, r2, #2
 800b5bc:	9307      	strge	r3, [sp, #28]
 800b5be:	9307      	strlt	r3, [sp, #28]
 800b5c0:	bfb8      	it	lt
 800b5c2:	9204      	strlt	r2, [sp, #16]
 800b5c4:	7823      	ldrb	r3, [r4, #0]
 800b5c6:	2b2e      	cmp	r3, #46	; 0x2e
 800b5c8:	d10c      	bne.n	800b5e4 <_svfiprintf_r+0x130>
 800b5ca:	7863      	ldrb	r3, [r4, #1]
 800b5cc:	2b2a      	cmp	r3, #42	; 0x2a
 800b5ce:	d135      	bne.n	800b63c <_svfiprintf_r+0x188>
 800b5d0:	9b03      	ldr	r3, [sp, #12]
 800b5d2:	1d1a      	adds	r2, r3, #4
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	9203      	str	r2, [sp, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	bfb8      	it	lt
 800b5dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b5e0:	3402      	adds	r4, #2
 800b5e2:	9305      	str	r3, [sp, #20]
 800b5e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b6b0 <_svfiprintf_r+0x1fc>
 800b5e8:	7821      	ldrb	r1, [r4, #0]
 800b5ea:	2203      	movs	r2, #3
 800b5ec:	4650      	mov	r0, sl
 800b5ee:	f7f4 fe17 	bl	8000220 <memchr>
 800b5f2:	b140      	cbz	r0, 800b606 <_svfiprintf_r+0x152>
 800b5f4:	2340      	movs	r3, #64	; 0x40
 800b5f6:	eba0 000a 	sub.w	r0, r0, sl
 800b5fa:	fa03 f000 	lsl.w	r0, r3, r0
 800b5fe:	9b04      	ldr	r3, [sp, #16]
 800b600:	4303      	orrs	r3, r0
 800b602:	3401      	adds	r4, #1
 800b604:	9304      	str	r3, [sp, #16]
 800b606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b60a:	4826      	ldr	r0, [pc, #152]	; (800b6a4 <_svfiprintf_r+0x1f0>)
 800b60c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b610:	2206      	movs	r2, #6
 800b612:	f7f4 fe05 	bl	8000220 <memchr>
 800b616:	2800      	cmp	r0, #0
 800b618:	d038      	beq.n	800b68c <_svfiprintf_r+0x1d8>
 800b61a:	4b23      	ldr	r3, [pc, #140]	; (800b6a8 <_svfiprintf_r+0x1f4>)
 800b61c:	bb1b      	cbnz	r3, 800b666 <_svfiprintf_r+0x1b2>
 800b61e:	9b03      	ldr	r3, [sp, #12]
 800b620:	3307      	adds	r3, #7
 800b622:	f023 0307 	bic.w	r3, r3, #7
 800b626:	3308      	adds	r3, #8
 800b628:	9303      	str	r3, [sp, #12]
 800b62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62c:	4433      	add	r3, r6
 800b62e:	9309      	str	r3, [sp, #36]	; 0x24
 800b630:	e767      	b.n	800b502 <_svfiprintf_r+0x4e>
 800b632:	fb0c 3202 	mla	r2, ip, r2, r3
 800b636:	460c      	mov	r4, r1
 800b638:	2001      	movs	r0, #1
 800b63a:	e7a5      	b.n	800b588 <_svfiprintf_r+0xd4>
 800b63c:	2300      	movs	r3, #0
 800b63e:	3401      	adds	r4, #1
 800b640:	9305      	str	r3, [sp, #20]
 800b642:	4619      	mov	r1, r3
 800b644:	f04f 0c0a 	mov.w	ip, #10
 800b648:	4620      	mov	r0, r4
 800b64a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b64e:	3a30      	subs	r2, #48	; 0x30
 800b650:	2a09      	cmp	r2, #9
 800b652:	d903      	bls.n	800b65c <_svfiprintf_r+0x1a8>
 800b654:	2b00      	cmp	r3, #0
 800b656:	d0c5      	beq.n	800b5e4 <_svfiprintf_r+0x130>
 800b658:	9105      	str	r1, [sp, #20]
 800b65a:	e7c3      	b.n	800b5e4 <_svfiprintf_r+0x130>
 800b65c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b660:	4604      	mov	r4, r0
 800b662:	2301      	movs	r3, #1
 800b664:	e7f0      	b.n	800b648 <_svfiprintf_r+0x194>
 800b666:	ab03      	add	r3, sp, #12
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	462a      	mov	r2, r5
 800b66c:	4b0f      	ldr	r3, [pc, #60]	; (800b6ac <_svfiprintf_r+0x1f8>)
 800b66e:	a904      	add	r1, sp, #16
 800b670:	4638      	mov	r0, r7
 800b672:	f7fc fb0b 	bl	8007c8c <_printf_float>
 800b676:	1c42      	adds	r2, r0, #1
 800b678:	4606      	mov	r6, r0
 800b67a:	d1d6      	bne.n	800b62a <_svfiprintf_r+0x176>
 800b67c:	89ab      	ldrh	r3, [r5, #12]
 800b67e:	065b      	lsls	r3, r3, #25
 800b680:	f53f af2c 	bmi.w	800b4dc <_svfiprintf_r+0x28>
 800b684:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b686:	b01d      	add	sp, #116	; 0x74
 800b688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68c:	ab03      	add	r3, sp, #12
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	462a      	mov	r2, r5
 800b692:	4b06      	ldr	r3, [pc, #24]	; (800b6ac <_svfiprintf_r+0x1f8>)
 800b694:	a904      	add	r1, sp, #16
 800b696:	4638      	mov	r0, r7
 800b698:	f7fc fd9c 	bl	80081d4 <_printf_i>
 800b69c:	e7eb      	b.n	800b676 <_svfiprintf_r+0x1c2>
 800b69e:	bf00      	nop
 800b6a0:	08010b2c 	.word	0x08010b2c
 800b6a4:	08010b36 	.word	0x08010b36
 800b6a8:	08007c8d 	.word	0x08007c8d
 800b6ac:	0800b3ff 	.word	0x0800b3ff
 800b6b0:	08010b32 	.word	0x08010b32
 800b6b4:	00000000 	.word	0x00000000

0800b6b8 <nan>:
 800b6b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b6c0 <nan+0x8>
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	00000000 	.word	0x00000000
 800b6c4:	7ff80000 	.word	0x7ff80000

0800b6c8 <strncmp>:
 800b6c8:	b510      	push	{r4, lr}
 800b6ca:	b16a      	cbz	r2, 800b6e8 <strncmp+0x20>
 800b6cc:	3901      	subs	r1, #1
 800b6ce:	1884      	adds	r4, r0, r2
 800b6d0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b6d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d103      	bne.n	800b6e4 <strncmp+0x1c>
 800b6dc:	42a0      	cmp	r0, r4
 800b6de:	d001      	beq.n	800b6e4 <strncmp+0x1c>
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1f5      	bne.n	800b6d0 <strncmp+0x8>
 800b6e4:	1a98      	subs	r0, r3, r2
 800b6e6:	bd10      	pop	{r4, pc}
 800b6e8:	4610      	mov	r0, r2
 800b6ea:	e7fc      	b.n	800b6e6 <strncmp+0x1e>

0800b6ec <__ascii_wctomb>:
 800b6ec:	b149      	cbz	r1, 800b702 <__ascii_wctomb+0x16>
 800b6ee:	2aff      	cmp	r2, #255	; 0xff
 800b6f0:	bf85      	ittet	hi
 800b6f2:	238a      	movhi	r3, #138	; 0x8a
 800b6f4:	6003      	strhi	r3, [r0, #0]
 800b6f6:	700a      	strbls	r2, [r1, #0]
 800b6f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b6fc:	bf98      	it	ls
 800b6fe:	2001      	movls	r0, #1
 800b700:	4770      	bx	lr
 800b702:	4608      	mov	r0, r1
 800b704:	4770      	bx	lr
	...

0800b708 <__assert_func>:
 800b708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b70a:	4614      	mov	r4, r2
 800b70c:	461a      	mov	r2, r3
 800b70e:	4b09      	ldr	r3, [pc, #36]	; (800b734 <__assert_func+0x2c>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4605      	mov	r5, r0
 800b714:	68d8      	ldr	r0, [r3, #12]
 800b716:	b14c      	cbz	r4, 800b72c <__assert_func+0x24>
 800b718:	4b07      	ldr	r3, [pc, #28]	; (800b738 <__assert_func+0x30>)
 800b71a:	9100      	str	r1, [sp, #0]
 800b71c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b720:	4906      	ldr	r1, [pc, #24]	; (800b73c <__assert_func+0x34>)
 800b722:	462b      	mov	r3, r5
 800b724:	f000 f80e 	bl	800b744 <fiprintf>
 800b728:	f000 fa5c 	bl	800bbe4 <abort>
 800b72c:	4b04      	ldr	r3, [pc, #16]	; (800b740 <__assert_func+0x38>)
 800b72e:	461c      	mov	r4, r3
 800b730:	e7f3      	b.n	800b71a <__assert_func+0x12>
 800b732:	bf00      	nop
 800b734:	2000000c 	.word	0x2000000c
 800b738:	08010b3d 	.word	0x08010b3d
 800b73c:	08010b4a 	.word	0x08010b4a
 800b740:	08010b78 	.word	0x08010b78

0800b744 <fiprintf>:
 800b744:	b40e      	push	{r1, r2, r3}
 800b746:	b503      	push	{r0, r1, lr}
 800b748:	4601      	mov	r1, r0
 800b74a:	ab03      	add	r3, sp, #12
 800b74c:	4805      	ldr	r0, [pc, #20]	; (800b764 <fiprintf+0x20>)
 800b74e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b752:	6800      	ldr	r0, [r0, #0]
 800b754:	9301      	str	r3, [sp, #4]
 800b756:	f000 f855 	bl	800b804 <_vfiprintf_r>
 800b75a:	b002      	add	sp, #8
 800b75c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b760:	b003      	add	sp, #12
 800b762:	4770      	bx	lr
 800b764:	2000000c 	.word	0x2000000c

0800b768 <__retarget_lock_init_recursive>:
 800b768:	4770      	bx	lr

0800b76a <__retarget_lock_acquire_recursive>:
 800b76a:	4770      	bx	lr

0800b76c <__retarget_lock_release_recursive>:
 800b76c:	4770      	bx	lr

0800b76e <memmove>:
 800b76e:	4288      	cmp	r0, r1
 800b770:	b510      	push	{r4, lr}
 800b772:	eb01 0402 	add.w	r4, r1, r2
 800b776:	d902      	bls.n	800b77e <memmove+0x10>
 800b778:	4284      	cmp	r4, r0
 800b77a:	4623      	mov	r3, r4
 800b77c:	d807      	bhi.n	800b78e <memmove+0x20>
 800b77e:	1e43      	subs	r3, r0, #1
 800b780:	42a1      	cmp	r1, r4
 800b782:	d008      	beq.n	800b796 <memmove+0x28>
 800b784:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b788:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b78c:	e7f8      	b.n	800b780 <memmove+0x12>
 800b78e:	4402      	add	r2, r0
 800b790:	4601      	mov	r1, r0
 800b792:	428a      	cmp	r2, r1
 800b794:	d100      	bne.n	800b798 <memmove+0x2a>
 800b796:	bd10      	pop	{r4, pc}
 800b798:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b79c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7a0:	e7f7      	b.n	800b792 <memmove+0x24>

0800b7a2 <_malloc_usable_size_r>:
 800b7a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7a6:	1f18      	subs	r0, r3, #4
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	bfbc      	itt	lt
 800b7ac:	580b      	ldrlt	r3, [r1, r0]
 800b7ae:	18c0      	addlt	r0, r0, r3
 800b7b0:	4770      	bx	lr

0800b7b2 <__sfputc_r>:
 800b7b2:	6893      	ldr	r3, [r2, #8]
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	b410      	push	{r4}
 800b7ba:	6093      	str	r3, [r2, #8]
 800b7bc:	da08      	bge.n	800b7d0 <__sfputc_r+0x1e>
 800b7be:	6994      	ldr	r4, [r2, #24]
 800b7c0:	42a3      	cmp	r3, r4
 800b7c2:	db01      	blt.n	800b7c8 <__sfputc_r+0x16>
 800b7c4:	290a      	cmp	r1, #10
 800b7c6:	d103      	bne.n	800b7d0 <__sfputc_r+0x1e>
 800b7c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7cc:	f000 b94a 	b.w	800ba64 <__swbuf_r>
 800b7d0:	6813      	ldr	r3, [r2, #0]
 800b7d2:	1c58      	adds	r0, r3, #1
 800b7d4:	6010      	str	r0, [r2, #0]
 800b7d6:	7019      	strb	r1, [r3, #0]
 800b7d8:	4608      	mov	r0, r1
 800b7da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <__sfputs_r>:
 800b7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	460f      	mov	r7, r1
 800b7e6:	4614      	mov	r4, r2
 800b7e8:	18d5      	adds	r5, r2, r3
 800b7ea:	42ac      	cmp	r4, r5
 800b7ec:	d101      	bne.n	800b7f2 <__sfputs_r+0x12>
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	e007      	b.n	800b802 <__sfputs_r+0x22>
 800b7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7f6:	463a      	mov	r2, r7
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f7ff ffda 	bl	800b7b2 <__sfputc_r>
 800b7fe:	1c43      	adds	r3, r0, #1
 800b800:	d1f3      	bne.n	800b7ea <__sfputs_r+0xa>
 800b802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b804 <_vfiprintf_r>:
 800b804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b808:	460d      	mov	r5, r1
 800b80a:	b09d      	sub	sp, #116	; 0x74
 800b80c:	4614      	mov	r4, r2
 800b80e:	4698      	mov	r8, r3
 800b810:	4606      	mov	r6, r0
 800b812:	b118      	cbz	r0, 800b81c <_vfiprintf_r+0x18>
 800b814:	6983      	ldr	r3, [r0, #24]
 800b816:	b90b      	cbnz	r3, 800b81c <_vfiprintf_r+0x18>
 800b818:	f000 fb06 	bl	800be28 <__sinit>
 800b81c:	4b89      	ldr	r3, [pc, #548]	; (800ba44 <_vfiprintf_r+0x240>)
 800b81e:	429d      	cmp	r5, r3
 800b820:	d11b      	bne.n	800b85a <_vfiprintf_r+0x56>
 800b822:	6875      	ldr	r5, [r6, #4]
 800b824:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b826:	07d9      	lsls	r1, r3, #31
 800b828:	d405      	bmi.n	800b836 <_vfiprintf_r+0x32>
 800b82a:	89ab      	ldrh	r3, [r5, #12]
 800b82c:	059a      	lsls	r2, r3, #22
 800b82e:	d402      	bmi.n	800b836 <_vfiprintf_r+0x32>
 800b830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b832:	f7ff ff9a 	bl	800b76a <__retarget_lock_acquire_recursive>
 800b836:	89ab      	ldrh	r3, [r5, #12]
 800b838:	071b      	lsls	r3, r3, #28
 800b83a:	d501      	bpl.n	800b840 <_vfiprintf_r+0x3c>
 800b83c:	692b      	ldr	r3, [r5, #16]
 800b83e:	b9eb      	cbnz	r3, 800b87c <_vfiprintf_r+0x78>
 800b840:	4629      	mov	r1, r5
 800b842:	4630      	mov	r0, r6
 800b844:	f000 f960 	bl	800bb08 <__swsetup_r>
 800b848:	b1c0      	cbz	r0, 800b87c <_vfiprintf_r+0x78>
 800b84a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b84c:	07dc      	lsls	r4, r3, #31
 800b84e:	d50e      	bpl.n	800b86e <_vfiprintf_r+0x6a>
 800b850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b854:	b01d      	add	sp, #116	; 0x74
 800b856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85a:	4b7b      	ldr	r3, [pc, #492]	; (800ba48 <_vfiprintf_r+0x244>)
 800b85c:	429d      	cmp	r5, r3
 800b85e:	d101      	bne.n	800b864 <_vfiprintf_r+0x60>
 800b860:	68b5      	ldr	r5, [r6, #8]
 800b862:	e7df      	b.n	800b824 <_vfiprintf_r+0x20>
 800b864:	4b79      	ldr	r3, [pc, #484]	; (800ba4c <_vfiprintf_r+0x248>)
 800b866:	429d      	cmp	r5, r3
 800b868:	bf08      	it	eq
 800b86a:	68f5      	ldreq	r5, [r6, #12]
 800b86c:	e7da      	b.n	800b824 <_vfiprintf_r+0x20>
 800b86e:	89ab      	ldrh	r3, [r5, #12]
 800b870:	0598      	lsls	r0, r3, #22
 800b872:	d4ed      	bmi.n	800b850 <_vfiprintf_r+0x4c>
 800b874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b876:	f7ff ff79 	bl	800b76c <__retarget_lock_release_recursive>
 800b87a:	e7e9      	b.n	800b850 <_vfiprintf_r+0x4c>
 800b87c:	2300      	movs	r3, #0
 800b87e:	9309      	str	r3, [sp, #36]	; 0x24
 800b880:	2320      	movs	r3, #32
 800b882:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b886:	f8cd 800c 	str.w	r8, [sp, #12]
 800b88a:	2330      	movs	r3, #48	; 0x30
 800b88c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba50 <_vfiprintf_r+0x24c>
 800b890:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b894:	f04f 0901 	mov.w	r9, #1
 800b898:	4623      	mov	r3, r4
 800b89a:	469a      	mov	sl, r3
 800b89c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8a0:	b10a      	cbz	r2, 800b8a6 <_vfiprintf_r+0xa2>
 800b8a2:	2a25      	cmp	r2, #37	; 0x25
 800b8a4:	d1f9      	bne.n	800b89a <_vfiprintf_r+0x96>
 800b8a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b8aa:	d00b      	beq.n	800b8c4 <_vfiprintf_r+0xc0>
 800b8ac:	465b      	mov	r3, fp
 800b8ae:	4622      	mov	r2, r4
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f7ff ff94 	bl	800b7e0 <__sfputs_r>
 800b8b8:	3001      	adds	r0, #1
 800b8ba:	f000 80aa 	beq.w	800ba12 <_vfiprintf_r+0x20e>
 800b8be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8c0:	445a      	add	r2, fp
 800b8c2:	9209      	str	r2, [sp, #36]	; 0x24
 800b8c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f000 80a2 	beq.w	800ba12 <_vfiprintf_r+0x20e>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8d8:	f10a 0a01 	add.w	sl, sl, #1
 800b8dc:	9304      	str	r3, [sp, #16]
 800b8de:	9307      	str	r3, [sp, #28]
 800b8e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8e4:	931a      	str	r3, [sp, #104]	; 0x68
 800b8e6:	4654      	mov	r4, sl
 800b8e8:	2205      	movs	r2, #5
 800b8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ee:	4858      	ldr	r0, [pc, #352]	; (800ba50 <_vfiprintf_r+0x24c>)
 800b8f0:	f7f4 fc96 	bl	8000220 <memchr>
 800b8f4:	9a04      	ldr	r2, [sp, #16]
 800b8f6:	b9d8      	cbnz	r0, 800b930 <_vfiprintf_r+0x12c>
 800b8f8:	06d1      	lsls	r1, r2, #27
 800b8fa:	bf44      	itt	mi
 800b8fc:	2320      	movmi	r3, #32
 800b8fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b902:	0713      	lsls	r3, r2, #28
 800b904:	bf44      	itt	mi
 800b906:	232b      	movmi	r3, #43	; 0x2b
 800b908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b90c:	f89a 3000 	ldrb.w	r3, [sl]
 800b910:	2b2a      	cmp	r3, #42	; 0x2a
 800b912:	d015      	beq.n	800b940 <_vfiprintf_r+0x13c>
 800b914:	9a07      	ldr	r2, [sp, #28]
 800b916:	4654      	mov	r4, sl
 800b918:	2000      	movs	r0, #0
 800b91a:	f04f 0c0a 	mov.w	ip, #10
 800b91e:	4621      	mov	r1, r4
 800b920:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b924:	3b30      	subs	r3, #48	; 0x30
 800b926:	2b09      	cmp	r3, #9
 800b928:	d94e      	bls.n	800b9c8 <_vfiprintf_r+0x1c4>
 800b92a:	b1b0      	cbz	r0, 800b95a <_vfiprintf_r+0x156>
 800b92c:	9207      	str	r2, [sp, #28]
 800b92e:	e014      	b.n	800b95a <_vfiprintf_r+0x156>
 800b930:	eba0 0308 	sub.w	r3, r0, r8
 800b934:	fa09 f303 	lsl.w	r3, r9, r3
 800b938:	4313      	orrs	r3, r2
 800b93a:	9304      	str	r3, [sp, #16]
 800b93c:	46a2      	mov	sl, r4
 800b93e:	e7d2      	b.n	800b8e6 <_vfiprintf_r+0xe2>
 800b940:	9b03      	ldr	r3, [sp, #12]
 800b942:	1d19      	adds	r1, r3, #4
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	9103      	str	r1, [sp, #12]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	bfbb      	ittet	lt
 800b94c:	425b      	neglt	r3, r3
 800b94e:	f042 0202 	orrlt.w	r2, r2, #2
 800b952:	9307      	strge	r3, [sp, #28]
 800b954:	9307      	strlt	r3, [sp, #28]
 800b956:	bfb8      	it	lt
 800b958:	9204      	strlt	r2, [sp, #16]
 800b95a:	7823      	ldrb	r3, [r4, #0]
 800b95c:	2b2e      	cmp	r3, #46	; 0x2e
 800b95e:	d10c      	bne.n	800b97a <_vfiprintf_r+0x176>
 800b960:	7863      	ldrb	r3, [r4, #1]
 800b962:	2b2a      	cmp	r3, #42	; 0x2a
 800b964:	d135      	bne.n	800b9d2 <_vfiprintf_r+0x1ce>
 800b966:	9b03      	ldr	r3, [sp, #12]
 800b968:	1d1a      	adds	r2, r3, #4
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	9203      	str	r2, [sp, #12]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	bfb8      	it	lt
 800b972:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b976:	3402      	adds	r4, #2
 800b978:	9305      	str	r3, [sp, #20]
 800b97a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba60 <_vfiprintf_r+0x25c>
 800b97e:	7821      	ldrb	r1, [r4, #0]
 800b980:	2203      	movs	r2, #3
 800b982:	4650      	mov	r0, sl
 800b984:	f7f4 fc4c 	bl	8000220 <memchr>
 800b988:	b140      	cbz	r0, 800b99c <_vfiprintf_r+0x198>
 800b98a:	2340      	movs	r3, #64	; 0x40
 800b98c:	eba0 000a 	sub.w	r0, r0, sl
 800b990:	fa03 f000 	lsl.w	r0, r3, r0
 800b994:	9b04      	ldr	r3, [sp, #16]
 800b996:	4303      	orrs	r3, r0
 800b998:	3401      	adds	r4, #1
 800b99a:	9304      	str	r3, [sp, #16]
 800b99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9a0:	482c      	ldr	r0, [pc, #176]	; (800ba54 <_vfiprintf_r+0x250>)
 800b9a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9a6:	2206      	movs	r2, #6
 800b9a8:	f7f4 fc3a 	bl	8000220 <memchr>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d03f      	beq.n	800ba30 <_vfiprintf_r+0x22c>
 800b9b0:	4b29      	ldr	r3, [pc, #164]	; (800ba58 <_vfiprintf_r+0x254>)
 800b9b2:	bb1b      	cbnz	r3, 800b9fc <_vfiprintf_r+0x1f8>
 800b9b4:	9b03      	ldr	r3, [sp, #12]
 800b9b6:	3307      	adds	r3, #7
 800b9b8:	f023 0307 	bic.w	r3, r3, #7
 800b9bc:	3308      	adds	r3, #8
 800b9be:	9303      	str	r3, [sp, #12]
 800b9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c2:	443b      	add	r3, r7
 800b9c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b9c6:	e767      	b.n	800b898 <_vfiprintf_r+0x94>
 800b9c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	2001      	movs	r0, #1
 800b9d0:	e7a5      	b.n	800b91e <_vfiprintf_r+0x11a>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	3401      	adds	r4, #1
 800b9d6:	9305      	str	r3, [sp, #20]
 800b9d8:	4619      	mov	r1, r3
 800b9da:	f04f 0c0a 	mov.w	ip, #10
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9e4:	3a30      	subs	r2, #48	; 0x30
 800b9e6:	2a09      	cmp	r2, #9
 800b9e8:	d903      	bls.n	800b9f2 <_vfiprintf_r+0x1ee>
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d0c5      	beq.n	800b97a <_vfiprintf_r+0x176>
 800b9ee:	9105      	str	r1, [sp, #20]
 800b9f0:	e7c3      	b.n	800b97a <_vfiprintf_r+0x176>
 800b9f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e7f0      	b.n	800b9de <_vfiprintf_r+0x1da>
 800b9fc:	ab03      	add	r3, sp, #12
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	462a      	mov	r2, r5
 800ba02:	4b16      	ldr	r3, [pc, #88]	; (800ba5c <_vfiprintf_r+0x258>)
 800ba04:	a904      	add	r1, sp, #16
 800ba06:	4630      	mov	r0, r6
 800ba08:	f7fc f940 	bl	8007c8c <_printf_float>
 800ba0c:	4607      	mov	r7, r0
 800ba0e:	1c78      	adds	r0, r7, #1
 800ba10:	d1d6      	bne.n	800b9c0 <_vfiprintf_r+0x1bc>
 800ba12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba14:	07d9      	lsls	r1, r3, #31
 800ba16:	d405      	bmi.n	800ba24 <_vfiprintf_r+0x220>
 800ba18:	89ab      	ldrh	r3, [r5, #12]
 800ba1a:	059a      	lsls	r2, r3, #22
 800ba1c:	d402      	bmi.n	800ba24 <_vfiprintf_r+0x220>
 800ba1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba20:	f7ff fea4 	bl	800b76c <__retarget_lock_release_recursive>
 800ba24:	89ab      	ldrh	r3, [r5, #12]
 800ba26:	065b      	lsls	r3, r3, #25
 800ba28:	f53f af12 	bmi.w	800b850 <_vfiprintf_r+0x4c>
 800ba2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba2e:	e711      	b.n	800b854 <_vfiprintf_r+0x50>
 800ba30:	ab03      	add	r3, sp, #12
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	462a      	mov	r2, r5
 800ba36:	4b09      	ldr	r3, [pc, #36]	; (800ba5c <_vfiprintf_r+0x258>)
 800ba38:	a904      	add	r1, sp, #16
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7fc fbca 	bl	80081d4 <_printf_i>
 800ba40:	e7e4      	b.n	800ba0c <_vfiprintf_r+0x208>
 800ba42:	bf00      	nop
 800ba44:	08010b9c 	.word	0x08010b9c
 800ba48:	08010bbc 	.word	0x08010bbc
 800ba4c:	08010b7c 	.word	0x08010b7c
 800ba50:	08010b2c 	.word	0x08010b2c
 800ba54:	08010b36 	.word	0x08010b36
 800ba58:	08007c8d 	.word	0x08007c8d
 800ba5c:	0800b7e1 	.word	0x0800b7e1
 800ba60:	08010b32 	.word	0x08010b32

0800ba64 <__swbuf_r>:
 800ba64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba66:	460e      	mov	r6, r1
 800ba68:	4614      	mov	r4, r2
 800ba6a:	4605      	mov	r5, r0
 800ba6c:	b118      	cbz	r0, 800ba76 <__swbuf_r+0x12>
 800ba6e:	6983      	ldr	r3, [r0, #24]
 800ba70:	b90b      	cbnz	r3, 800ba76 <__swbuf_r+0x12>
 800ba72:	f000 f9d9 	bl	800be28 <__sinit>
 800ba76:	4b21      	ldr	r3, [pc, #132]	; (800bafc <__swbuf_r+0x98>)
 800ba78:	429c      	cmp	r4, r3
 800ba7a:	d12b      	bne.n	800bad4 <__swbuf_r+0x70>
 800ba7c:	686c      	ldr	r4, [r5, #4]
 800ba7e:	69a3      	ldr	r3, [r4, #24]
 800ba80:	60a3      	str	r3, [r4, #8]
 800ba82:	89a3      	ldrh	r3, [r4, #12]
 800ba84:	071a      	lsls	r2, r3, #28
 800ba86:	d52f      	bpl.n	800bae8 <__swbuf_r+0x84>
 800ba88:	6923      	ldr	r3, [r4, #16]
 800ba8a:	b36b      	cbz	r3, 800bae8 <__swbuf_r+0x84>
 800ba8c:	6923      	ldr	r3, [r4, #16]
 800ba8e:	6820      	ldr	r0, [r4, #0]
 800ba90:	1ac0      	subs	r0, r0, r3
 800ba92:	6963      	ldr	r3, [r4, #20]
 800ba94:	b2f6      	uxtb	r6, r6
 800ba96:	4283      	cmp	r3, r0
 800ba98:	4637      	mov	r7, r6
 800ba9a:	dc04      	bgt.n	800baa6 <__swbuf_r+0x42>
 800ba9c:	4621      	mov	r1, r4
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f000 f92e 	bl	800bd00 <_fflush_r>
 800baa4:	bb30      	cbnz	r0, 800baf4 <__swbuf_r+0x90>
 800baa6:	68a3      	ldr	r3, [r4, #8]
 800baa8:	3b01      	subs	r3, #1
 800baaa:	60a3      	str	r3, [r4, #8]
 800baac:	6823      	ldr	r3, [r4, #0]
 800baae:	1c5a      	adds	r2, r3, #1
 800bab0:	6022      	str	r2, [r4, #0]
 800bab2:	701e      	strb	r6, [r3, #0]
 800bab4:	6963      	ldr	r3, [r4, #20]
 800bab6:	3001      	adds	r0, #1
 800bab8:	4283      	cmp	r3, r0
 800baba:	d004      	beq.n	800bac6 <__swbuf_r+0x62>
 800babc:	89a3      	ldrh	r3, [r4, #12]
 800babe:	07db      	lsls	r3, r3, #31
 800bac0:	d506      	bpl.n	800bad0 <__swbuf_r+0x6c>
 800bac2:	2e0a      	cmp	r6, #10
 800bac4:	d104      	bne.n	800bad0 <__swbuf_r+0x6c>
 800bac6:	4621      	mov	r1, r4
 800bac8:	4628      	mov	r0, r5
 800baca:	f000 f919 	bl	800bd00 <_fflush_r>
 800bace:	b988      	cbnz	r0, 800baf4 <__swbuf_r+0x90>
 800bad0:	4638      	mov	r0, r7
 800bad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bad4:	4b0a      	ldr	r3, [pc, #40]	; (800bb00 <__swbuf_r+0x9c>)
 800bad6:	429c      	cmp	r4, r3
 800bad8:	d101      	bne.n	800bade <__swbuf_r+0x7a>
 800bada:	68ac      	ldr	r4, [r5, #8]
 800badc:	e7cf      	b.n	800ba7e <__swbuf_r+0x1a>
 800bade:	4b09      	ldr	r3, [pc, #36]	; (800bb04 <__swbuf_r+0xa0>)
 800bae0:	429c      	cmp	r4, r3
 800bae2:	bf08      	it	eq
 800bae4:	68ec      	ldreq	r4, [r5, #12]
 800bae6:	e7ca      	b.n	800ba7e <__swbuf_r+0x1a>
 800bae8:	4621      	mov	r1, r4
 800baea:	4628      	mov	r0, r5
 800baec:	f000 f80c 	bl	800bb08 <__swsetup_r>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d0cb      	beq.n	800ba8c <__swbuf_r+0x28>
 800baf4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800baf8:	e7ea      	b.n	800bad0 <__swbuf_r+0x6c>
 800bafa:	bf00      	nop
 800bafc:	08010b9c 	.word	0x08010b9c
 800bb00:	08010bbc 	.word	0x08010bbc
 800bb04:	08010b7c 	.word	0x08010b7c

0800bb08 <__swsetup_r>:
 800bb08:	4b32      	ldr	r3, [pc, #200]	; (800bbd4 <__swsetup_r+0xcc>)
 800bb0a:	b570      	push	{r4, r5, r6, lr}
 800bb0c:	681d      	ldr	r5, [r3, #0]
 800bb0e:	4606      	mov	r6, r0
 800bb10:	460c      	mov	r4, r1
 800bb12:	b125      	cbz	r5, 800bb1e <__swsetup_r+0x16>
 800bb14:	69ab      	ldr	r3, [r5, #24]
 800bb16:	b913      	cbnz	r3, 800bb1e <__swsetup_r+0x16>
 800bb18:	4628      	mov	r0, r5
 800bb1a:	f000 f985 	bl	800be28 <__sinit>
 800bb1e:	4b2e      	ldr	r3, [pc, #184]	; (800bbd8 <__swsetup_r+0xd0>)
 800bb20:	429c      	cmp	r4, r3
 800bb22:	d10f      	bne.n	800bb44 <__swsetup_r+0x3c>
 800bb24:	686c      	ldr	r4, [r5, #4]
 800bb26:	89a3      	ldrh	r3, [r4, #12]
 800bb28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb2c:	0719      	lsls	r1, r3, #28
 800bb2e:	d42c      	bmi.n	800bb8a <__swsetup_r+0x82>
 800bb30:	06dd      	lsls	r5, r3, #27
 800bb32:	d411      	bmi.n	800bb58 <__swsetup_r+0x50>
 800bb34:	2309      	movs	r3, #9
 800bb36:	6033      	str	r3, [r6, #0]
 800bb38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb3c:	81a3      	strh	r3, [r4, #12]
 800bb3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb42:	e03e      	b.n	800bbc2 <__swsetup_r+0xba>
 800bb44:	4b25      	ldr	r3, [pc, #148]	; (800bbdc <__swsetup_r+0xd4>)
 800bb46:	429c      	cmp	r4, r3
 800bb48:	d101      	bne.n	800bb4e <__swsetup_r+0x46>
 800bb4a:	68ac      	ldr	r4, [r5, #8]
 800bb4c:	e7eb      	b.n	800bb26 <__swsetup_r+0x1e>
 800bb4e:	4b24      	ldr	r3, [pc, #144]	; (800bbe0 <__swsetup_r+0xd8>)
 800bb50:	429c      	cmp	r4, r3
 800bb52:	bf08      	it	eq
 800bb54:	68ec      	ldreq	r4, [r5, #12]
 800bb56:	e7e6      	b.n	800bb26 <__swsetup_r+0x1e>
 800bb58:	0758      	lsls	r0, r3, #29
 800bb5a:	d512      	bpl.n	800bb82 <__swsetup_r+0x7a>
 800bb5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb5e:	b141      	cbz	r1, 800bb72 <__swsetup_r+0x6a>
 800bb60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb64:	4299      	cmp	r1, r3
 800bb66:	d002      	beq.n	800bb6e <__swsetup_r+0x66>
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f7fb ff45 	bl	80079f8 <_free_r>
 800bb6e:	2300      	movs	r3, #0
 800bb70:	6363      	str	r3, [r4, #52]	; 0x34
 800bb72:	89a3      	ldrh	r3, [r4, #12]
 800bb74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb78:	81a3      	strh	r3, [r4, #12]
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	6063      	str	r3, [r4, #4]
 800bb7e:	6923      	ldr	r3, [r4, #16]
 800bb80:	6023      	str	r3, [r4, #0]
 800bb82:	89a3      	ldrh	r3, [r4, #12]
 800bb84:	f043 0308 	orr.w	r3, r3, #8
 800bb88:	81a3      	strh	r3, [r4, #12]
 800bb8a:	6923      	ldr	r3, [r4, #16]
 800bb8c:	b94b      	cbnz	r3, 800bba2 <__swsetup_r+0x9a>
 800bb8e:	89a3      	ldrh	r3, [r4, #12]
 800bb90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb98:	d003      	beq.n	800bba2 <__swsetup_r+0x9a>
 800bb9a:	4621      	mov	r1, r4
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	f000 fa05 	bl	800bfac <__smakebuf_r>
 800bba2:	89a0      	ldrh	r0, [r4, #12]
 800bba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bba8:	f010 0301 	ands.w	r3, r0, #1
 800bbac:	d00a      	beq.n	800bbc4 <__swsetup_r+0xbc>
 800bbae:	2300      	movs	r3, #0
 800bbb0:	60a3      	str	r3, [r4, #8]
 800bbb2:	6963      	ldr	r3, [r4, #20]
 800bbb4:	425b      	negs	r3, r3
 800bbb6:	61a3      	str	r3, [r4, #24]
 800bbb8:	6923      	ldr	r3, [r4, #16]
 800bbba:	b943      	cbnz	r3, 800bbce <__swsetup_r+0xc6>
 800bbbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bbc0:	d1ba      	bne.n	800bb38 <__swsetup_r+0x30>
 800bbc2:	bd70      	pop	{r4, r5, r6, pc}
 800bbc4:	0781      	lsls	r1, r0, #30
 800bbc6:	bf58      	it	pl
 800bbc8:	6963      	ldrpl	r3, [r4, #20]
 800bbca:	60a3      	str	r3, [r4, #8]
 800bbcc:	e7f4      	b.n	800bbb8 <__swsetup_r+0xb0>
 800bbce:	2000      	movs	r0, #0
 800bbd0:	e7f7      	b.n	800bbc2 <__swsetup_r+0xba>
 800bbd2:	bf00      	nop
 800bbd4:	2000000c 	.word	0x2000000c
 800bbd8:	08010b9c 	.word	0x08010b9c
 800bbdc:	08010bbc 	.word	0x08010bbc
 800bbe0:	08010b7c 	.word	0x08010b7c

0800bbe4 <abort>:
 800bbe4:	b508      	push	{r3, lr}
 800bbe6:	2006      	movs	r0, #6
 800bbe8:	f000 fa48 	bl	800c07c <raise>
 800bbec:	2001      	movs	r0, #1
 800bbee:	f7f6 fa13 	bl	8002018 <_exit>
	...

0800bbf4 <__sflush_r>:
 800bbf4:	898a      	ldrh	r2, [r1, #12]
 800bbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbfa:	4605      	mov	r5, r0
 800bbfc:	0710      	lsls	r0, r2, #28
 800bbfe:	460c      	mov	r4, r1
 800bc00:	d458      	bmi.n	800bcb4 <__sflush_r+0xc0>
 800bc02:	684b      	ldr	r3, [r1, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	dc05      	bgt.n	800bc14 <__sflush_r+0x20>
 800bc08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	dc02      	bgt.n	800bc14 <__sflush_r+0x20>
 800bc0e:	2000      	movs	r0, #0
 800bc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc16:	2e00      	cmp	r6, #0
 800bc18:	d0f9      	beq.n	800bc0e <__sflush_r+0x1a>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc20:	682f      	ldr	r7, [r5, #0]
 800bc22:	602b      	str	r3, [r5, #0]
 800bc24:	d032      	beq.n	800bc8c <__sflush_r+0x98>
 800bc26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc28:	89a3      	ldrh	r3, [r4, #12]
 800bc2a:	075a      	lsls	r2, r3, #29
 800bc2c:	d505      	bpl.n	800bc3a <__sflush_r+0x46>
 800bc2e:	6863      	ldr	r3, [r4, #4]
 800bc30:	1ac0      	subs	r0, r0, r3
 800bc32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc34:	b10b      	cbz	r3, 800bc3a <__sflush_r+0x46>
 800bc36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc38:	1ac0      	subs	r0, r0, r3
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc40:	6a21      	ldr	r1, [r4, #32]
 800bc42:	4628      	mov	r0, r5
 800bc44:	47b0      	blx	r6
 800bc46:	1c43      	adds	r3, r0, #1
 800bc48:	89a3      	ldrh	r3, [r4, #12]
 800bc4a:	d106      	bne.n	800bc5a <__sflush_r+0x66>
 800bc4c:	6829      	ldr	r1, [r5, #0]
 800bc4e:	291d      	cmp	r1, #29
 800bc50:	d82c      	bhi.n	800bcac <__sflush_r+0xb8>
 800bc52:	4a2a      	ldr	r2, [pc, #168]	; (800bcfc <__sflush_r+0x108>)
 800bc54:	40ca      	lsrs	r2, r1
 800bc56:	07d6      	lsls	r6, r2, #31
 800bc58:	d528      	bpl.n	800bcac <__sflush_r+0xb8>
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	6062      	str	r2, [r4, #4]
 800bc5e:	04d9      	lsls	r1, r3, #19
 800bc60:	6922      	ldr	r2, [r4, #16]
 800bc62:	6022      	str	r2, [r4, #0]
 800bc64:	d504      	bpl.n	800bc70 <__sflush_r+0x7c>
 800bc66:	1c42      	adds	r2, r0, #1
 800bc68:	d101      	bne.n	800bc6e <__sflush_r+0x7a>
 800bc6a:	682b      	ldr	r3, [r5, #0]
 800bc6c:	b903      	cbnz	r3, 800bc70 <__sflush_r+0x7c>
 800bc6e:	6560      	str	r0, [r4, #84]	; 0x54
 800bc70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc72:	602f      	str	r7, [r5, #0]
 800bc74:	2900      	cmp	r1, #0
 800bc76:	d0ca      	beq.n	800bc0e <__sflush_r+0x1a>
 800bc78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc7c:	4299      	cmp	r1, r3
 800bc7e:	d002      	beq.n	800bc86 <__sflush_r+0x92>
 800bc80:	4628      	mov	r0, r5
 800bc82:	f7fb feb9 	bl	80079f8 <_free_r>
 800bc86:	2000      	movs	r0, #0
 800bc88:	6360      	str	r0, [r4, #52]	; 0x34
 800bc8a:	e7c1      	b.n	800bc10 <__sflush_r+0x1c>
 800bc8c:	6a21      	ldr	r1, [r4, #32]
 800bc8e:	2301      	movs	r3, #1
 800bc90:	4628      	mov	r0, r5
 800bc92:	47b0      	blx	r6
 800bc94:	1c41      	adds	r1, r0, #1
 800bc96:	d1c7      	bne.n	800bc28 <__sflush_r+0x34>
 800bc98:	682b      	ldr	r3, [r5, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d0c4      	beq.n	800bc28 <__sflush_r+0x34>
 800bc9e:	2b1d      	cmp	r3, #29
 800bca0:	d001      	beq.n	800bca6 <__sflush_r+0xb2>
 800bca2:	2b16      	cmp	r3, #22
 800bca4:	d101      	bne.n	800bcaa <__sflush_r+0xb6>
 800bca6:	602f      	str	r7, [r5, #0]
 800bca8:	e7b1      	b.n	800bc0e <__sflush_r+0x1a>
 800bcaa:	89a3      	ldrh	r3, [r4, #12]
 800bcac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcb0:	81a3      	strh	r3, [r4, #12]
 800bcb2:	e7ad      	b.n	800bc10 <__sflush_r+0x1c>
 800bcb4:	690f      	ldr	r7, [r1, #16]
 800bcb6:	2f00      	cmp	r7, #0
 800bcb8:	d0a9      	beq.n	800bc0e <__sflush_r+0x1a>
 800bcba:	0793      	lsls	r3, r2, #30
 800bcbc:	680e      	ldr	r6, [r1, #0]
 800bcbe:	bf08      	it	eq
 800bcc0:	694b      	ldreq	r3, [r1, #20]
 800bcc2:	600f      	str	r7, [r1, #0]
 800bcc4:	bf18      	it	ne
 800bcc6:	2300      	movne	r3, #0
 800bcc8:	eba6 0807 	sub.w	r8, r6, r7
 800bccc:	608b      	str	r3, [r1, #8]
 800bcce:	f1b8 0f00 	cmp.w	r8, #0
 800bcd2:	dd9c      	ble.n	800bc0e <__sflush_r+0x1a>
 800bcd4:	6a21      	ldr	r1, [r4, #32]
 800bcd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bcd8:	4643      	mov	r3, r8
 800bcda:	463a      	mov	r2, r7
 800bcdc:	4628      	mov	r0, r5
 800bcde:	47b0      	blx	r6
 800bce0:	2800      	cmp	r0, #0
 800bce2:	dc06      	bgt.n	800bcf2 <__sflush_r+0xfe>
 800bce4:	89a3      	ldrh	r3, [r4, #12]
 800bce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcea:	81a3      	strh	r3, [r4, #12]
 800bcec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcf0:	e78e      	b.n	800bc10 <__sflush_r+0x1c>
 800bcf2:	4407      	add	r7, r0
 800bcf4:	eba8 0800 	sub.w	r8, r8, r0
 800bcf8:	e7e9      	b.n	800bcce <__sflush_r+0xda>
 800bcfa:	bf00      	nop
 800bcfc:	20400001 	.word	0x20400001

0800bd00 <_fflush_r>:
 800bd00:	b538      	push	{r3, r4, r5, lr}
 800bd02:	690b      	ldr	r3, [r1, #16]
 800bd04:	4605      	mov	r5, r0
 800bd06:	460c      	mov	r4, r1
 800bd08:	b913      	cbnz	r3, 800bd10 <_fflush_r+0x10>
 800bd0a:	2500      	movs	r5, #0
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	bd38      	pop	{r3, r4, r5, pc}
 800bd10:	b118      	cbz	r0, 800bd1a <_fflush_r+0x1a>
 800bd12:	6983      	ldr	r3, [r0, #24]
 800bd14:	b90b      	cbnz	r3, 800bd1a <_fflush_r+0x1a>
 800bd16:	f000 f887 	bl	800be28 <__sinit>
 800bd1a:	4b14      	ldr	r3, [pc, #80]	; (800bd6c <_fflush_r+0x6c>)
 800bd1c:	429c      	cmp	r4, r3
 800bd1e:	d11b      	bne.n	800bd58 <_fflush_r+0x58>
 800bd20:	686c      	ldr	r4, [r5, #4]
 800bd22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d0ef      	beq.n	800bd0a <_fflush_r+0xa>
 800bd2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd2c:	07d0      	lsls	r0, r2, #31
 800bd2e:	d404      	bmi.n	800bd3a <_fflush_r+0x3a>
 800bd30:	0599      	lsls	r1, r3, #22
 800bd32:	d402      	bmi.n	800bd3a <_fflush_r+0x3a>
 800bd34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd36:	f7ff fd18 	bl	800b76a <__retarget_lock_acquire_recursive>
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	f7ff ff59 	bl	800bbf4 <__sflush_r>
 800bd42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd44:	07da      	lsls	r2, r3, #31
 800bd46:	4605      	mov	r5, r0
 800bd48:	d4e0      	bmi.n	800bd0c <_fflush_r+0xc>
 800bd4a:	89a3      	ldrh	r3, [r4, #12]
 800bd4c:	059b      	lsls	r3, r3, #22
 800bd4e:	d4dd      	bmi.n	800bd0c <_fflush_r+0xc>
 800bd50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd52:	f7ff fd0b 	bl	800b76c <__retarget_lock_release_recursive>
 800bd56:	e7d9      	b.n	800bd0c <_fflush_r+0xc>
 800bd58:	4b05      	ldr	r3, [pc, #20]	; (800bd70 <_fflush_r+0x70>)
 800bd5a:	429c      	cmp	r4, r3
 800bd5c:	d101      	bne.n	800bd62 <_fflush_r+0x62>
 800bd5e:	68ac      	ldr	r4, [r5, #8]
 800bd60:	e7df      	b.n	800bd22 <_fflush_r+0x22>
 800bd62:	4b04      	ldr	r3, [pc, #16]	; (800bd74 <_fflush_r+0x74>)
 800bd64:	429c      	cmp	r4, r3
 800bd66:	bf08      	it	eq
 800bd68:	68ec      	ldreq	r4, [r5, #12]
 800bd6a:	e7da      	b.n	800bd22 <_fflush_r+0x22>
 800bd6c:	08010b9c 	.word	0x08010b9c
 800bd70:	08010bbc 	.word	0x08010bbc
 800bd74:	08010b7c 	.word	0x08010b7c

0800bd78 <std>:
 800bd78:	2300      	movs	r3, #0
 800bd7a:	b510      	push	{r4, lr}
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	e9c0 3300 	strd	r3, r3, [r0]
 800bd82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd86:	6083      	str	r3, [r0, #8]
 800bd88:	8181      	strh	r1, [r0, #12]
 800bd8a:	6643      	str	r3, [r0, #100]	; 0x64
 800bd8c:	81c2      	strh	r2, [r0, #14]
 800bd8e:	6183      	str	r3, [r0, #24]
 800bd90:	4619      	mov	r1, r3
 800bd92:	2208      	movs	r2, #8
 800bd94:	305c      	adds	r0, #92	; 0x5c
 800bd96:	f7fb fe17 	bl	80079c8 <memset>
 800bd9a:	4b05      	ldr	r3, [pc, #20]	; (800bdb0 <std+0x38>)
 800bd9c:	6263      	str	r3, [r4, #36]	; 0x24
 800bd9e:	4b05      	ldr	r3, [pc, #20]	; (800bdb4 <std+0x3c>)
 800bda0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bda2:	4b05      	ldr	r3, [pc, #20]	; (800bdb8 <std+0x40>)
 800bda4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bda6:	4b05      	ldr	r3, [pc, #20]	; (800bdbc <std+0x44>)
 800bda8:	6224      	str	r4, [r4, #32]
 800bdaa:	6323      	str	r3, [r4, #48]	; 0x30
 800bdac:	bd10      	pop	{r4, pc}
 800bdae:	bf00      	nop
 800bdb0:	0800c0b5 	.word	0x0800c0b5
 800bdb4:	0800c0d7 	.word	0x0800c0d7
 800bdb8:	0800c10f 	.word	0x0800c10f
 800bdbc:	0800c133 	.word	0x0800c133

0800bdc0 <_cleanup_r>:
 800bdc0:	4901      	ldr	r1, [pc, #4]	; (800bdc8 <_cleanup_r+0x8>)
 800bdc2:	f000 b8af 	b.w	800bf24 <_fwalk_reent>
 800bdc6:	bf00      	nop
 800bdc8:	0800bd01 	.word	0x0800bd01

0800bdcc <__sfmoreglue>:
 800bdcc:	b570      	push	{r4, r5, r6, lr}
 800bdce:	1e4a      	subs	r2, r1, #1
 800bdd0:	2568      	movs	r5, #104	; 0x68
 800bdd2:	4355      	muls	r5, r2
 800bdd4:	460e      	mov	r6, r1
 800bdd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bdda:	f7fb fe5d 	bl	8007a98 <_malloc_r>
 800bdde:	4604      	mov	r4, r0
 800bde0:	b140      	cbz	r0, 800bdf4 <__sfmoreglue+0x28>
 800bde2:	2100      	movs	r1, #0
 800bde4:	e9c0 1600 	strd	r1, r6, [r0]
 800bde8:	300c      	adds	r0, #12
 800bdea:	60a0      	str	r0, [r4, #8]
 800bdec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bdf0:	f7fb fdea 	bl	80079c8 <memset>
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	bd70      	pop	{r4, r5, r6, pc}

0800bdf8 <__sfp_lock_acquire>:
 800bdf8:	4801      	ldr	r0, [pc, #4]	; (800be00 <__sfp_lock_acquire+0x8>)
 800bdfa:	f7ff bcb6 	b.w	800b76a <__retarget_lock_acquire_recursive>
 800bdfe:	bf00      	nop
 800be00:	20000974 	.word	0x20000974

0800be04 <__sfp_lock_release>:
 800be04:	4801      	ldr	r0, [pc, #4]	; (800be0c <__sfp_lock_release+0x8>)
 800be06:	f7ff bcb1 	b.w	800b76c <__retarget_lock_release_recursive>
 800be0a:	bf00      	nop
 800be0c:	20000974 	.word	0x20000974

0800be10 <__sinit_lock_acquire>:
 800be10:	4801      	ldr	r0, [pc, #4]	; (800be18 <__sinit_lock_acquire+0x8>)
 800be12:	f7ff bcaa 	b.w	800b76a <__retarget_lock_acquire_recursive>
 800be16:	bf00      	nop
 800be18:	2000096f 	.word	0x2000096f

0800be1c <__sinit_lock_release>:
 800be1c:	4801      	ldr	r0, [pc, #4]	; (800be24 <__sinit_lock_release+0x8>)
 800be1e:	f7ff bca5 	b.w	800b76c <__retarget_lock_release_recursive>
 800be22:	bf00      	nop
 800be24:	2000096f 	.word	0x2000096f

0800be28 <__sinit>:
 800be28:	b510      	push	{r4, lr}
 800be2a:	4604      	mov	r4, r0
 800be2c:	f7ff fff0 	bl	800be10 <__sinit_lock_acquire>
 800be30:	69a3      	ldr	r3, [r4, #24]
 800be32:	b11b      	cbz	r3, 800be3c <__sinit+0x14>
 800be34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be38:	f7ff bff0 	b.w	800be1c <__sinit_lock_release>
 800be3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be40:	6523      	str	r3, [r4, #80]	; 0x50
 800be42:	4b13      	ldr	r3, [pc, #76]	; (800be90 <__sinit+0x68>)
 800be44:	4a13      	ldr	r2, [pc, #76]	; (800be94 <__sinit+0x6c>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	62a2      	str	r2, [r4, #40]	; 0x28
 800be4a:	42a3      	cmp	r3, r4
 800be4c:	bf04      	itt	eq
 800be4e:	2301      	moveq	r3, #1
 800be50:	61a3      	streq	r3, [r4, #24]
 800be52:	4620      	mov	r0, r4
 800be54:	f000 f820 	bl	800be98 <__sfp>
 800be58:	6060      	str	r0, [r4, #4]
 800be5a:	4620      	mov	r0, r4
 800be5c:	f000 f81c 	bl	800be98 <__sfp>
 800be60:	60a0      	str	r0, [r4, #8]
 800be62:	4620      	mov	r0, r4
 800be64:	f000 f818 	bl	800be98 <__sfp>
 800be68:	2200      	movs	r2, #0
 800be6a:	60e0      	str	r0, [r4, #12]
 800be6c:	2104      	movs	r1, #4
 800be6e:	6860      	ldr	r0, [r4, #4]
 800be70:	f7ff ff82 	bl	800bd78 <std>
 800be74:	68a0      	ldr	r0, [r4, #8]
 800be76:	2201      	movs	r2, #1
 800be78:	2109      	movs	r1, #9
 800be7a:	f7ff ff7d 	bl	800bd78 <std>
 800be7e:	68e0      	ldr	r0, [r4, #12]
 800be80:	2202      	movs	r2, #2
 800be82:	2112      	movs	r1, #18
 800be84:	f7ff ff78 	bl	800bd78 <std>
 800be88:	2301      	movs	r3, #1
 800be8a:	61a3      	str	r3, [r4, #24]
 800be8c:	e7d2      	b.n	800be34 <__sinit+0xc>
 800be8e:	bf00      	nop
 800be90:	08010728 	.word	0x08010728
 800be94:	0800bdc1 	.word	0x0800bdc1

0800be98 <__sfp>:
 800be98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9a:	4607      	mov	r7, r0
 800be9c:	f7ff ffac 	bl	800bdf8 <__sfp_lock_acquire>
 800bea0:	4b1e      	ldr	r3, [pc, #120]	; (800bf1c <__sfp+0x84>)
 800bea2:	681e      	ldr	r6, [r3, #0]
 800bea4:	69b3      	ldr	r3, [r6, #24]
 800bea6:	b913      	cbnz	r3, 800beae <__sfp+0x16>
 800bea8:	4630      	mov	r0, r6
 800beaa:	f7ff ffbd 	bl	800be28 <__sinit>
 800beae:	3648      	adds	r6, #72	; 0x48
 800beb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800beb4:	3b01      	subs	r3, #1
 800beb6:	d503      	bpl.n	800bec0 <__sfp+0x28>
 800beb8:	6833      	ldr	r3, [r6, #0]
 800beba:	b30b      	cbz	r3, 800bf00 <__sfp+0x68>
 800bebc:	6836      	ldr	r6, [r6, #0]
 800bebe:	e7f7      	b.n	800beb0 <__sfp+0x18>
 800bec0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bec4:	b9d5      	cbnz	r5, 800befc <__sfp+0x64>
 800bec6:	4b16      	ldr	r3, [pc, #88]	; (800bf20 <__sfp+0x88>)
 800bec8:	60e3      	str	r3, [r4, #12]
 800beca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bece:	6665      	str	r5, [r4, #100]	; 0x64
 800bed0:	f7ff fc4a 	bl	800b768 <__retarget_lock_init_recursive>
 800bed4:	f7ff ff96 	bl	800be04 <__sfp_lock_release>
 800bed8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bedc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bee0:	6025      	str	r5, [r4, #0]
 800bee2:	61a5      	str	r5, [r4, #24]
 800bee4:	2208      	movs	r2, #8
 800bee6:	4629      	mov	r1, r5
 800bee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800beec:	f7fb fd6c 	bl	80079c8 <memset>
 800bef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bef8:	4620      	mov	r0, r4
 800befa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800befc:	3468      	adds	r4, #104	; 0x68
 800befe:	e7d9      	b.n	800beb4 <__sfp+0x1c>
 800bf00:	2104      	movs	r1, #4
 800bf02:	4638      	mov	r0, r7
 800bf04:	f7ff ff62 	bl	800bdcc <__sfmoreglue>
 800bf08:	4604      	mov	r4, r0
 800bf0a:	6030      	str	r0, [r6, #0]
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	d1d5      	bne.n	800bebc <__sfp+0x24>
 800bf10:	f7ff ff78 	bl	800be04 <__sfp_lock_release>
 800bf14:	230c      	movs	r3, #12
 800bf16:	603b      	str	r3, [r7, #0]
 800bf18:	e7ee      	b.n	800bef8 <__sfp+0x60>
 800bf1a:	bf00      	nop
 800bf1c:	08010728 	.word	0x08010728
 800bf20:	ffff0001 	.word	0xffff0001

0800bf24 <_fwalk_reent>:
 800bf24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf28:	4606      	mov	r6, r0
 800bf2a:	4688      	mov	r8, r1
 800bf2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf30:	2700      	movs	r7, #0
 800bf32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf36:	f1b9 0901 	subs.w	r9, r9, #1
 800bf3a:	d505      	bpl.n	800bf48 <_fwalk_reent+0x24>
 800bf3c:	6824      	ldr	r4, [r4, #0]
 800bf3e:	2c00      	cmp	r4, #0
 800bf40:	d1f7      	bne.n	800bf32 <_fwalk_reent+0xe>
 800bf42:	4638      	mov	r0, r7
 800bf44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf48:	89ab      	ldrh	r3, [r5, #12]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d907      	bls.n	800bf5e <_fwalk_reent+0x3a>
 800bf4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf52:	3301      	adds	r3, #1
 800bf54:	d003      	beq.n	800bf5e <_fwalk_reent+0x3a>
 800bf56:	4629      	mov	r1, r5
 800bf58:	4630      	mov	r0, r6
 800bf5a:	47c0      	blx	r8
 800bf5c:	4307      	orrs	r7, r0
 800bf5e:	3568      	adds	r5, #104	; 0x68
 800bf60:	e7e9      	b.n	800bf36 <_fwalk_reent+0x12>

0800bf62 <__swhatbuf_r>:
 800bf62:	b570      	push	{r4, r5, r6, lr}
 800bf64:	460e      	mov	r6, r1
 800bf66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf6a:	2900      	cmp	r1, #0
 800bf6c:	b096      	sub	sp, #88	; 0x58
 800bf6e:	4614      	mov	r4, r2
 800bf70:	461d      	mov	r5, r3
 800bf72:	da07      	bge.n	800bf84 <__swhatbuf_r+0x22>
 800bf74:	2300      	movs	r3, #0
 800bf76:	602b      	str	r3, [r5, #0]
 800bf78:	89b3      	ldrh	r3, [r6, #12]
 800bf7a:	061a      	lsls	r2, r3, #24
 800bf7c:	d410      	bmi.n	800bfa0 <__swhatbuf_r+0x3e>
 800bf7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf82:	e00e      	b.n	800bfa2 <__swhatbuf_r+0x40>
 800bf84:	466a      	mov	r2, sp
 800bf86:	f000 f8fb 	bl	800c180 <_fstat_r>
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	dbf2      	blt.n	800bf74 <__swhatbuf_r+0x12>
 800bf8e:	9a01      	ldr	r2, [sp, #4]
 800bf90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf98:	425a      	negs	r2, r3
 800bf9a:	415a      	adcs	r2, r3
 800bf9c:	602a      	str	r2, [r5, #0]
 800bf9e:	e7ee      	b.n	800bf7e <__swhatbuf_r+0x1c>
 800bfa0:	2340      	movs	r3, #64	; 0x40
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	6023      	str	r3, [r4, #0]
 800bfa6:	b016      	add	sp, #88	; 0x58
 800bfa8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bfac <__smakebuf_r>:
 800bfac:	898b      	ldrh	r3, [r1, #12]
 800bfae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bfb0:	079d      	lsls	r5, r3, #30
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	460c      	mov	r4, r1
 800bfb6:	d507      	bpl.n	800bfc8 <__smakebuf_r+0x1c>
 800bfb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bfbc:	6023      	str	r3, [r4, #0]
 800bfbe:	6123      	str	r3, [r4, #16]
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	6163      	str	r3, [r4, #20]
 800bfc4:	b002      	add	sp, #8
 800bfc6:	bd70      	pop	{r4, r5, r6, pc}
 800bfc8:	ab01      	add	r3, sp, #4
 800bfca:	466a      	mov	r2, sp
 800bfcc:	f7ff ffc9 	bl	800bf62 <__swhatbuf_r>
 800bfd0:	9900      	ldr	r1, [sp, #0]
 800bfd2:	4605      	mov	r5, r0
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	f7fb fd5f 	bl	8007a98 <_malloc_r>
 800bfda:	b948      	cbnz	r0, 800bff0 <__smakebuf_r+0x44>
 800bfdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfe0:	059a      	lsls	r2, r3, #22
 800bfe2:	d4ef      	bmi.n	800bfc4 <__smakebuf_r+0x18>
 800bfe4:	f023 0303 	bic.w	r3, r3, #3
 800bfe8:	f043 0302 	orr.w	r3, r3, #2
 800bfec:	81a3      	strh	r3, [r4, #12]
 800bfee:	e7e3      	b.n	800bfb8 <__smakebuf_r+0xc>
 800bff0:	4b0d      	ldr	r3, [pc, #52]	; (800c028 <__smakebuf_r+0x7c>)
 800bff2:	62b3      	str	r3, [r6, #40]	; 0x28
 800bff4:	89a3      	ldrh	r3, [r4, #12]
 800bff6:	6020      	str	r0, [r4, #0]
 800bff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bffc:	81a3      	strh	r3, [r4, #12]
 800bffe:	9b00      	ldr	r3, [sp, #0]
 800c000:	6163      	str	r3, [r4, #20]
 800c002:	9b01      	ldr	r3, [sp, #4]
 800c004:	6120      	str	r0, [r4, #16]
 800c006:	b15b      	cbz	r3, 800c020 <__smakebuf_r+0x74>
 800c008:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c00c:	4630      	mov	r0, r6
 800c00e:	f000 f8c9 	bl	800c1a4 <_isatty_r>
 800c012:	b128      	cbz	r0, 800c020 <__smakebuf_r+0x74>
 800c014:	89a3      	ldrh	r3, [r4, #12]
 800c016:	f023 0303 	bic.w	r3, r3, #3
 800c01a:	f043 0301 	orr.w	r3, r3, #1
 800c01e:	81a3      	strh	r3, [r4, #12]
 800c020:	89a0      	ldrh	r0, [r4, #12]
 800c022:	4305      	orrs	r5, r0
 800c024:	81a5      	strh	r5, [r4, #12]
 800c026:	e7cd      	b.n	800bfc4 <__smakebuf_r+0x18>
 800c028:	0800bdc1 	.word	0x0800bdc1

0800c02c <_raise_r>:
 800c02c:	291f      	cmp	r1, #31
 800c02e:	b538      	push	{r3, r4, r5, lr}
 800c030:	4604      	mov	r4, r0
 800c032:	460d      	mov	r5, r1
 800c034:	d904      	bls.n	800c040 <_raise_r+0x14>
 800c036:	2316      	movs	r3, #22
 800c038:	6003      	str	r3, [r0, #0]
 800c03a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c03e:	bd38      	pop	{r3, r4, r5, pc}
 800c040:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c042:	b112      	cbz	r2, 800c04a <_raise_r+0x1e>
 800c044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c048:	b94b      	cbnz	r3, 800c05e <_raise_r+0x32>
 800c04a:	4620      	mov	r0, r4
 800c04c:	f000 f830 	bl	800c0b0 <_getpid_r>
 800c050:	462a      	mov	r2, r5
 800c052:	4601      	mov	r1, r0
 800c054:	4620      	mov	r0, r4
 800c056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c05a:	f000 b817 	b.w	800c08c <_kill_r>
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d00a      	beq.n	800c078 <_raise_r+0x4c>
 800c062:	1c59      	adds	r1, r3, #1
 800c064:	d103      	bne.n	800c06e <_raise_r+0x42>
 800c066:	2316      	movs	r3, #22
 800c068:	6003      	str	r3, [r0, #0]
 800c06a:	2001      	movs	r0, #1
 800c06c:	e7e7      	b.n	800c03e <_raise_r+0x12>
 800c06e:	2400      	movs	r4, #0
 800c070:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c074:	4628      	mov	r0, r5
 800c076:	4798      	blx	r3
 800c078:	2000      	movs	r0, #0
 800c07a:	e7e0      	b.n	800c03e <_raise_r+0x12>

0800c07c <raise>:
 800c07c:	4b02      	ldr	r3, [pc, #8]	; (800c088 <raise+0xc>)
 800c07e:	4601      	mov	r1, r0
 800c080:	6818      	ldr	r0, [r3, #0]
 800c082:	f7ff bfd3 	b.w	800c02c <_raise_r>
 800c086:	bf00      	nop
 800c088:	2000000c 	.word	0x2000000c

0800c08c <_kill_r>:
 800c08c:	b538      	push	{r3, r4, r5, lr}
 800c08e:	4d07      	ldr	r5, [pc, #28]	; (800c0ac <_kill_r+0x20>)
 800c090:	2300      	movs	r3, #0
 800c092:	4604      	mov	r4, r0
 800c094:	4608      	mov	r0, r1
 800c096:	4611      	mov	r1, r2
 800c098:	602b      	str	r3, [r5, #0]
 800c09a:	f7f5 ffad 	bl	8001ff8 <_kill>
 800c09e:	1c43      	adds	r3, r0, #1
 800c0a0:	d102      	bne.n	800c0a8 <_kill_r+0x1c>
 800c0a2:	682b      	ldr	r3, [r5, #0]
 800c0a4:	b103      	cbz	r3, 800c0a8 <_kill_r+0x1c>
 800c0a6:	6023      	str	r3, [r4, #0]
 800c0a8:	bd38      	pop	{r3, r4, r5, pc}
 800c0aa:	bf00      	nop
 800c0ac:	20000968 	.word	0x20000968

0800c0b0 <_getpid_r>:
 800c0b0:	f7f5 bf9a 	b.w	8001fe8 <_getpid>

0800c0b4 <__sread>:
 800c0b4:	b510      	push	{r4, lr}
 800c0b6:	460c      	mov	r4, r1
 800c0b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0bc:	f000 f894 	bl	800c1e8 <_read_r>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	bfab      	itete	ge
 800c0c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0c6:	89a3      	ldrhlt	r3, [r4, #12]
 800c0c8:	181b      	addge	r3, r3, r0
 800c0ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0ce:	bfac      	ite	ge
 800c0d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0d2:	81a3      	strhlt	r3, [r4, #12]
 800c0d4:	bd10      	pop	{r4, pc}

0800c0d6 <__swrite>:
 800c0d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0da:	461f      	mov	r7, r3
 800c0dc:	898b      	ldrh	r3, [r1, #12]
 800c0de:	05db      	lsls	r3, r3, #23
 800c0e0:	4605      	mov	r5, r0
 800c0e2:	460c      	mov	r4, r1
 800c0e4:	4616      	mov	r6, r2
 800c0e6:	d505      	bpl.n	800c0f4 <__swrite+0x1e>
 800c0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ec:	2302      	movs	r3, #2
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	f000 f868 	bl	800c1c4 <_lseek_r>
 800c0f4:	89a3      	ldrh	r3, [r4, #12]
 800c0f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0fe:	81a3      	strh	r3, [r4, #12]
 800c100:	4632      	mov	r2, r6
 800c102:	463b      	mov	r3, r7
 800c104:	4628      	mov	r0, r5
 800c106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c10a:	f000 b817 	b.w	800c13c <_write_r>

0800c10e <__sseek>:
 800c10e:	b510      	push	{r4, lr}
 800c110:	460c      	mov	r4, r1
 800c112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c116:	f000 f855 	bl	800c1c4 <_lseek_r>
 800c11a:	1c43      	adds	r3, r0, #1
 800c11c:	89a3      	ldrh	r3, [r4, #12]
 800c11e:	bf15      	itete	ne
 800c120:	6560      	strne	r0, [r4, #84]	; 0x54
 800c122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c12a:	81a3      	strheq	r3, [r4, #12]
 800c12c:	bf18      	it	ne
 800c12e:	81a3      	strhne	r3, [r4, #12]
 800c130:	bd10      	pop	{r4, pc}

0800c132 <__sclose>:
 800c132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c136:	f000 b813 	b.w	800c160 <_close_r>
	...

0800c13c <_write_r>:
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	4d07      	ldr	r5, [pc, #28]	; (800c15c <_write_r+0x20>)
 800c140:	4604      	mov	r4, r0
 800c142:	4608      	mov	r0, r1
 800c144:	4611      	mov	r1, r2
 800c146:	2200      	movs	r2, #0
 800c148:	602a      	str	r2, [r5, #0]
 800c14a:	461a      	mov	r2, r3
 800c14c:	f7f5 ff8b 	bl	8002066 <_write>
 800c150:	1c43      	adds	r3, r0, #1
 800c152:	d102      	bne.n	800c15a <_write_r+0x1e>
 800c154:	682b      	ldr	r3, [r5, #0]
 800c156:	b103      	cbz	r3, 800c15a <_write_r+0x1e>
 800c158:	6023      	str	r3, [r4, #0]
 800c15a:	bd38      	pop	{r3, r4, r5, pc}
 800c15c:	20000968 	.word	0x20000968

0800c160 <_close_r>:
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	4d06      	ldr	r5, [pc, #24]	; (800c17c <_close_r+0x1c>)
 800c164:	2300      	movs	r3, #0
 800c166:	4604      	mov	r4, r0
 800c168:	4608      	mov	r0, r1
 800c16a:	602b      	str	r3, [r5, #0]
 800c16c:	f7f5 ff97 	bl	800209e <_close>
 800c170:	1c43      	adds	r3, r0, #1
 800c172:	d102      	bne.n	800c17a <_close_r+0x1a>
 800c174:	682b      	ldr	r3, [r5, #0]
 800c176:	b103      	cbz	r3, 800c17a <_close_r+0x1a>
 800c178:	6023      	str	r3, [r4, #0]
 800c17a:	bd38      	pop	{r3, r4, r5, pc}
 800c17c:	20000968 	.word	0x20000968

0800c180 <_fstat_r>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	4d07      	ldr	r5, [pc, #28]	; (800c1a0 <_fstat_r+0x20>)
 800c184:	2300      	movs	r3, #0
 800c186:	4604      	mov	r4, r0
 800c188:	4608      	mov	r0, r1
 800c18a:	4611      	mov	r1, r2
 800c18c:	602b      	str	r3, [r5, #0]
 800c18e:	f7f5 ff92 	bl	80020b6 <_fstat>
 800c192:	1c43      	adds	r3, r0, #1
 800c194:	d102      	bne.n	800c19c <_fstat_r+0x1c>
 800c196:	682b      	ldr	r3, [r5, #0]
 800c198:	b103      	cbz	r3, 800c19c <_fstat_r+0x1c>
 800c19a:	6023      	str	r3, [r4, #0]
 800c19c:	bd38      	pop	{r3, r4, r5, pc}
 800c19e:	bf00      	nop
 800c1a0:	20000968 	.word	0x20000968

0800c1a4 <_isatty_r>:
 800c1a4:	b538      	push	{r3, r4, r5, lr}
 800c1a6:	4d06      	ldr	r5, [pc, #24]	; (800c1c0 <_isatty_r+0x1c>)
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	4608      	mov	r0, r1
 800c1ae:	602b      	str	r3, [r5, #0]
 800c1b0:	f7f5 ff91 	bl	80020d6 <_isatty>
 800c1b4:	1c43      	adds	r3, r0, #1
 800c1b6:	d102      	bne.n	800c1be <_isatty_r+0x1a>
 800c1b8:	682b      	ldr	r3, [r5, #0]
 800c1ba:	b103      	cbz	r3, 800c1be <_isatty_r+0x1a>
 800c1bc:	6023      	str	r3, [r4, #0]
 800c1be:	bd38      	pop	{r3, r4, r5, pc}
 800c1c0:	20000968 	.word	0x20000968

0800c1c4 <_lseek_r>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4d07      	ldr	r5, [pc, #28]	; (800c1e4 <_lseek_r+0x20>)
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	4608      	mov	r0, r1
 800c1cc:	4611      	mov	r1, r2
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	602a      	str	r2, [r5, #0]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	f7f5 ff8a 	bl	80020ec <_lseek>
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	d102      	bne.n	800c1e2 <_lseek_r+0x1e>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	b103      	cbz	r3, 800c1e2 <_lseek_r+0x1e>
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	20000968 	.word	0x20000968

0800c1e8 <_read_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4d07      	ldr	r5, [pc, #28]	; (800c208 <_read_r+0x20>)
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	4608      	mov	r0, r1
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	602a      	str	r2, [r5, #0]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	f7f5 ff18 	bl	800202c <_read>
 800c1fc:	1c43      	adds	r3, r0, #1
 800c1fe:	d102      	bne.n	800c206 <_read_r+0x1e>
 800c200:	682b      	ldr	r3, [r5, #0]
 800c202:	b103      	cbz	r3, 800c206 <_read_r+0x1e>
 800c204:	6023      	str	r3, [r4, #0]
 800c206:	bd38      	pop	{r3, r4, r5, pc}
 800c208:	20000968 	.word	0x20000968
 800c20c:	00000000 	.word	0x00000000

0800c210 <cos>:
 800c210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c212:	ec53 2b10 	vmov	r2, r3, d0
 800c216:	4824      	ldr	r0, [pc, #144]	; (800c2a8 <cos+0x98>)
 800c218:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c21c:	4281      	cmp	r1, r0
 800c21e:	dc06      	bgt.n	800c22e <cos+0x1e>
 800c220:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800c2a0 <cos+0x90>
 800c224:	f001 f92c 	bl	800d480 <__kernel_cos>
 800c228:	ec51 0b10 	vmov	r0, r1, d0
 800c22c:	e007      	b.n	800c23e <cos+0x2e>
 800c22e:	481f      	ldr	r0, [pc, #124]	; (800c2ac <cos+0x9c>)
 800c230:	4281      	cmp	r1, r0
 800c232:	dd09      	ble.n	800c248 <cos+0x38>
 800c234:	ee10 0a10 	vmov	r0, s0
 800c238:	4619      	mov	r1, r3
 800c23a:	f7f4 f845 	bl	80002c8 <__aeabi_dsub>
 800c23e:	ec41 0b10 	vmov	d0, r0, r1
 800c242:	b005      	add	sp, #20
 800c244:	f85d fb04 	ldr.w	pc, [sp], #4
 800c248:	4668      	mov	r0, sp
 800c24a:	f000 fe59 	bl	800cf00 <__ieee754_rem_pio2>
 800c24e:	f000 0003 	and.w	r0, r0, #3
 800c252:	2801      	cmp	r0, #1
 800c254:	d007      	beq.n	800c266 <cos+0x56>
 800c256:	2802      	cmp	r0, #2
 800c258:	d012      	beq.n	800c280 <cos+0x70>
 800c25a:	b9c0      	cbnz	r0, 800c28e <cos+0x7e>
 800c25c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c260:	ed9d 0b00 	vldr	d0, [sp]
 800c264:	e7de      	b.n	800c224 <cos+0x14>
 800c266:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c26a:	ed9d 0b00 	vldr	d0, [sp]
 800c26e:	f001 fd0f 	bl	800dc90 <__kernel_sin>
 800c272:	ec53 2b10 	vmov	r2, r3, d0
 800c276:	ee10 0a10 	vmov	r0, s0
 800c27a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c27e:	e7de      	b.n	800c23e <cos+0x2e>
 800c280:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c284:	ed9d 0b00 	vldr	d0, [sp]
 800c288:	f001 f8fa 	bl	800d480 <__kernel_cos>
 800c28c:	e7f1      	b.n	800c272 <cos+0x62>
 800c28e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c292:	ed9d 0b00 	vldr	d0, [sp]
 800c296:	2001      	movs	r0, #1
 800c298:	f001 fcfa 	bl	800dc90 <__kernel_sin>
 800c29c:	e7c4      	b.n	800c228 <cos+0x18>
 800c29e:	bf00      	nop
	...
 800c2a8:	3fe921fb 	.word	0x3fe921fb
 800c2ac:	7fefffff 	.word	0x7fefffff

0800c2b0 <sin>:
 800c2b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2b2:	ec53 2b10 	vmov	r2, r3, d0
 800c2b6:	4826      	ldr	r0, [pc, #152]	; (800c350 <sin+0xa0>)
 800c2b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c2bc:	4281      	cmp	r1, r0
 800c2be:	dc07      	bgt.n	800c2d0 <sin+0x20>
 800c2c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c348 <sin+0x98>
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	f001 fce3 	bl	800dc90 <__kernel_sin>
 800c2ca:	ec51 0b10 	vmov	r0, r1, d0
 800c2ce:	e007      	b.n	800c2e0 <sin+0x30>
 800c2d0:	4820      	ldr	r0, [pc, #128]	; (800c354 <sin+0xa4>)
 800c2d2:	4281      	cmp	r1, r0
 800c2d4:	dd09      	ble.n	800c2ea <sin+0x3a>
 800c2d6:	ee10 0a10 	vmov	r0, s0
 800c2da:	4619      	mov	r1, r3
 800c2dc:	f7f3 fff4 	bl	80002c8 <__aeabi_dsub>
 800c2e0:	ec41 0b10 	vmov	d0, r0, r1
 800c2e4:	b005      	add	sp, #20
 800c2e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2ea:	4668      	mov	r0, sp
 800c2ec:	f000 fe08 	bl	800cf00 <__ieee754_rem_pio2>
 800c2f0:	f000 0003 	and.w	r0, r0, #3
 800c2f4:	2801      	cmp	r0, #1
 800c2f6:	d008      	beq.n	800c30a <sin+0x5a>
 800c2f8:	2802      	cmp	r0, #2
 800c2fa:	d00d      	beq.n	800c318 <sin+0x68>
 800c2fc:	b9d0      	cbnz	r0, 800c334 <sin+0x84>
 800c2fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c302:	ed9d 0b00 	vldr	d0, [sp]
 800c306:	2001      	movs	r0, #1
 800c308:	e7dd      	b.n	800c2c6 <sin+0x16>
 800c30a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c30e:	ed9d 0b00 	vldr	d0, [sp]
 800c312:	f001 f8b5 	bl	800d480 <__kernel_cos>
 800c316:	e7d8      	b.n	800c2ca <sin+0x1a>
 800c318:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c31c:	ed9d 0b00 	vldr	d0, [sp]
 800c320:	2001      	movs	r0, #1
 800c322:	f001 fcb5 	bl	800dc90 <__kernel_sin>
 800c326:	ec53 2b10 	vmov	r2, r3, d0
 800c32a:	ee10 0a10 	vmov	r0, s0
 800c32e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c332:	e7d5      	b.n	800c2e0 <sin+0x30>
 800c334:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c338:	ed9d 0b00 	vldr	d0, [sp]
 800c33c:	f001 f8a0 	bl	800d480 <__kernel_cos>
 800c340:	e7f1      	b.n	800c326 <sin+0x76>
 800c342:	bf00      	nop
 800c344:	f3af 8000 	nop.w
	...
 800c350:	3fe921fb 	.word	0x3fe921fb
 800c354:	7fefffff 	.word	0x7fefffff

0800c358 <pow>:
 800c358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c35c:	ec59 8b10 	vmov	r8, r9, d0
 800c360:	ec57 6b11 	vmov	r6, r7, d1
 800c364:	f000 f8a8 	bl	800c4b8 <__ieee754_pow>
 800c368:	4b4e      	ldr	r3, [pc, #312]	; (800c4a4 <pow+0x14c>)
 800c36a:	f993 3000 	ldrsb.w	r3, [r3]
 800c36e:	3301      	adds	r3, #1
 800c370:	ec55 4b10 	vmov	r4, r5, d0
 800c374:	d015      	beq.n	800c3a2 <pow+0x4a>
 800c376:	4632      	mov	r2, r6
 800c378:	463b      	mov	r3, r7
 800c37a:	4630      	mov	r0, r6
 800c37c:	4639      	mov	r1, r7
 800c37e:	f7f4 fbf5 	bl	8000b6c <__aeabi_dcmpun>
 800c382:	b970      	cbnz	r0, 800c3a2 <pow+0x4a>
 800c384:	4642      	mov	r2, r8
 800c386:	464b      	mov	r3, r9
 800c388:	4640      	mov	r0, r8
 800c38a:	4649      	mov	r1, r9
 800c38c:	f7f4 fbee 	bl	8000b6c <__aeabi_dcmpun>
 800c390:	2200      	movs	r2, #0
 800c392:	2300      	movs	r3, #0
 800c394:	b148      	cbz	r0, 800c3aa <pow+0x52>
 800c396:	4630      	mov	r0, r6
 800c398:	4639      	mov	r1, r7
 800c39a:	f7f4 fbb5 	bl	8000b08 <__aeabi_dcmpeq>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d17d      	bne.n	800c49e <pow+0x146>
 800c3a2:	ec45 4b10 	vmov	d0, r4, r5
 800c3a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	f7f4 fbab 	bl	8000b08 <__aeabi_dcmpeq>
 800c3b2:	b1e0      	cbz	r0, 800c3ee <pow+0x96>
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	4639      	mov	r1, r7
 800c3bc:	f7f4 fba4 	bl	8000b08 <__aeabi_dcmpeq>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d16c      	bne.n	800c49e <pow+0x146>
 800c3c4:	ec47 6b10 	vmov	d0, r6, r7
 800c3c8:	f001 fd29 	bl	800de1e <finite>
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d0e8      	beq.n	800c3a2 <pow+0x4a>
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	4639      	mov	r1, r7
 800c3d8:	f7f4 fba0 	bl	8000b1c <__aeabi_dcmplt>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	d0e0      	beq.n	800c3a2 <pow+0x4a>
 800c3e0:	f7fb fab2 	bl	8007948 <__errno>
 800c3e4:	2321      	movs	r3, #33	; 0x21
 800c3e6:	6003      	str	r3, [r0, #0]
 800c3e8:	2400      	movs	r4, #0
 800c3ea:	4d2f      	ldr	r5, [pc, #188]	; (800c4a8 <pow+0x150>)
 800c3ec:	e7d9      	b.n	800c3a2 <pow+0x4a>
 800c3ee:	ec45 4b10 	vmov	d0, r4, r5
 800c3f2:	f001 fd14 	bl	800de1e <finite>
 800c3f6:	bbb8      	cbnz	r0, 800c468 <pow+0x110>
 800c3f8:	ec49 8b10 	vmov	d0, r8, r9
 800c3fc:	f001 fd0f 	bl	800de1e <finite>
 800c400:	b390      	cbz	r0, 800c468 <pow+0x110>
 800c402:	ec47 6b10 	vmov	d0, r6, r7
 800c406:	f001 fd0a 	bl	800de1e <finite>
 800c40a:	b368      	cbz	r0, 800c468 <pow+0x110>
 800c40c:	4622      	mov	r2, r4
 800c40e:	462b      	mov	r3, r5
 800c410:	4620      	mov	r0, r4
 800c412:	4629      	mov	r1, r5
 800c414:	f7f4 fbaa 	bl	8000b6c <__aeabi_dcmpun>
 800c418:	b160      	cbz	r0, 800c434 <pow+0xdc>
 800c41a:	f7fb fa95 	bl	8007948 <__errno>
 800c41e:	2321      	movs	r3, #33	; 0x21
 800c420:	6003      	str	r3, [r0, #0]
 800c422:	2200      	movs	r2, #0
 800c424:	2300      	movs	r3, #0
 800c426:	4610      	mov	r0, r2
 800c428:	4619      	mov	r1, r3
 800c42a:	f7f4 fa2f 	bl	800088c <__aeabi_ddiv>
 800c42e:	4604      	mov	r4, r0
 800c430:	460d      	mov	r5, r1
 800c432:	e7b6      	b.n	800c3a2 <pow+0x4a>
 800c434:	f7fb fa88 	bl	8007948 <__errno>
 800c438:	2322      	movs	r3, #34	; 0x22
 800c43a:	6003      	str	r3, [r0, #0]
 800c43c:	2200      	movs	r2, #0
 800c43e:	2300      	movs	r3, #0
 800c440:	4640      	mov	r0, r8
 800c442:	4649      	mov	r1, r9
 800c444:	f7f4 fb6a 	bl	8000b1c <__aeabi_dcmplt>
 800c448:	2400      	movs	r4, #0
 800c44a:	b158      	cbz	r0, 800c464 <pow+0x10c>
 800c44c:	ec47 6b10 	vmov	d0, r6, r7
 800c450:	f001 fd72 	bl	800df38 <rint>
 800c454:	4632      	mov	r2, r6
 800c456:	ec51 0b10 	vmov	r0, r1, d0
 800c45a:	463b      	mov	r3, r7
 800c45c:	f7f4 fb54 	bl	8000b08 <__aeabi_dcmpeq>
 800c460:	2800      	cmp	r0, #0
 800c462:	d0c2      	beq.n	800c3ea <pow+0x92>
 800c464:	4d11      	ldr	r5, [pc, #68]	; (800c4ac <pow+0x154>)
 800c466:	e79c      	b.n	800c3a2 <pow+0x4a>
 800c468:	2200      	movs	r2, #0
 800c46a:	2300      	movs	r3, #0
 800c46c:	4620      	mov	r0, r4
 800c46e:	4629      	mov	r1, r5
 800c470:	f7f4 fb4a 	bl	8000b08 <__aeabi_dcmpeq>
 800c474:	2800      	cmp	r0, #0
 800c476:	d094      	beq.n	800c3a2 <pow+0x4a>
 800c478:	ec49 8b10 	vmov	d0, r8, r9
 800c47c:	f001 fccf 	bl	800de1e <finite>
 800c480:	2800      	cmp	r0, #0
 800c482:	d08e      	beq.n	800c3a2 <pow+0x4a>
 800c484:	ec47 6b10 	vmov	d0, r6, r7
 800c488:	f001 fcc9 	bl	800de1e <finite>
 800c48c:	2800      	cmp	r0, #0
 800c48e:	d088      	beq.n	800c3a2 <pow+0x4a>
 800c490:	f7fb fa5a 	bl	8007948 <__errno>
 800c494:	2322      	movs	r3, #34	; 0x22
 800c496:	6003      	str	r3, [r0, #0]
 800c498:	2400      	movs	r4, #0
 800c49a:	2500      	movs	r5, #0
 800c49c:	e781      	b.n	800c3a2 <pow+0x4a>
 800c49e:	4d04      	ldr	r5, [pc, #16]	; (800c4b0 <pow+0x158>)
 800c4a0:	2400      	movs	r4, #0
 800c4a2:	e77e      	b.n	800c3a2 <pow+0x4a>
 800c4a4:	200001e0 	.word	0x200001e0
 800c4a8:	fff00000 	.word	0xfff00000
 800c4ac:	7ff00000 	.word	0x7ff00000
 800c4b0:	3ff00000 	.word	0x3ff00000
 800c4b4:	00000000 	.word	0x00000000

0800c4b8 <__ieee754_pow>:
 800c4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4bc:	ed2d 8b06 	vpush	{d8-d10}
 800c4c0:	b08d      	sub	sp, #52	; 0x34
 800c4c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c4c6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800c4ca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c4ce:	ea56 0100 	orrs.w	r1, r6, r0
 800c4d2:	ec53 2b10 	vmov	r2, r3, d0
 800c4d6:	f000 84d1 	beq.w	800ce7c <__ieee754_pow+0x9c4>
 800c4da:	497f      	ldr	r1, [pc, #508]	; (800c6d8 <__ieee754_pow+0x220>)
 800c4dc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c4e0:	428c      	cmp	r4, r1
 800c4e2:	ee10 8a10 	vmov	r8, s0
 800c4e6:	4699      	mov	r9, r3
 800c4e8:	dc09      	bgt.n	800c4fe <__ieee754_pow+0x46>
 800c4ea:	d103      	bne.n	800c4f4 <__ieee754_pow+0x3c>
 800c4ec:	b97a      	cbnz	r2, 800c50e <__ieee754_pow+0x56>
 800c4ee:	42a6      	cmp	r6, r4
 800c4f0:	dd02      	ble.n	800c4f8 <__ieee754_pow+0x40>
 800c4f2:	e00c      	b.n	800c50e <__ieee754_pow+0x56>
 800c4f4:	428e      	cmp	r6, r1
 800c4f6:	dc02      	bgt.n	800c4fe <__ieee754_pow+0x46>
 800c4f8:	428e      	cmp	r6, r1
 800c4fa:	d110      	bne.n	800c51e <__ieee754_pow+0x66>
 800c4fc:	b178      	cbz	r0, 800c51e <__ieee754_pow+0x66>
 800c4fe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c502:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c506:	ea54 0308 	orrs.w	r3, r4, r8
 800c50a:	f000 84b7 	beq.w	800ce7c <__ieee754_pow+0x9c4>
 800c50e:	4873      	ldr	r0, [pc, #460]	; (800c6dc <__ieee754_pow+0x224>)
 800c510:	b00d      	add	sp, #52	; 0x34
 800c512:	ecbd 8b06 	vpop	{d8-d10}
 800c516:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51a:	f7ff b8cd 	b.w	800b6b8 <nan>
 800c51e:	f1b9 0f00 	cmp.w	r9, #0
 800c522:	da36      	bge.n	800c592 <__ieee754_pow+0xda>
 800c524:	496e      	ldr	r1, [pc, #440]	; (800c6e0 <__ieee754_pow+0x228>)
 800c526:	428e      	cmp	r6, r1
 800c528:	dc51      	bgt.n	800c5ce <__ieee754_pow+0x116>
 800c52a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800c52e:	428e      	cmp	r6, r1
 800c530:	f340 84af 	ble.w	800ce92 <__ieee754_pow+0x9da>
 800c534:	1531      	asrs	r1, r6, #20
 800c536:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c53a:	2914      	cmp	r1, #20
 800c53c:	dd0f      	ble.n	800c55e <__ieee754_pow+0xa6>
 800c53e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800c542:	fa20 fc01 	lsr.w	ip, r0, r1
 800c546:	fa0c f101 	lsl.w	r1, ip, r1
 800c54a:	4281      	cmp	r1, r0
 800c54c:	f040 84a1 	bne.w	800ce92 <__ieee754_pow+0x9da>
 800c550:	f00c 0c01 	and.w	ip, ip, #1
 800c554:	f1cc 0102 	rsb	r1, ip, #2
 800c558:	9100      	str	r1, [sp, #0]
 800c55a:	b180      	cbz	r0, 800c57e <__ieee754_pow+0xc6>
 800c55c:	e059      	b.n	800c612 <__ieee754_pow+0x15a>
 800c55e:	2800      	cmp	r0, #0
 800c560:	d155      	bne.n	800c60e <__ieee754_pow+0x156>
 800c562:	f1c1 0114 	rsb	r1, r1, #20
 800c566:	fa46 fc01 	asr.w	ip, r6, r1
 800c56a:	fa0c f101 	lsl.w	r1, ip, r1
 800c56e:	42b1      	cmp	r1, r6
 800c570:	f040 848c 	bne.w	800ce8c <__ieee754_pow+0x9d4>
 800c574:	f00c 0c01 	and.w	ip, ip, #1
 800c578:	f1cc 0102 	rsb	r1, ip, #2
 800c57c:	9100      	str	r1, [sp, #0]
 800c57e:	4959      	ldr	r1, [pc, #356]	; (800c6e4 <__ieee754_pow+0x22c>)
 800c580:	428e      	cmp	r6, r1
 800c582:	d12d      	bne.n	800c5e0 <__ieee754_pow+0x128>
 800c584:	2f00      	cmp	r7, #0
 800c586:	da79      	bge.n	800c67c <__ieee754_pow+0x1c4>
 800c588:	4956      	ldr	r1, [pc, #344]	; (800c6e4 <__ieee754_pow+0x22c>)
 800c58a:	2000      	movs	r0, #0
 800c58c:	f7f4 f97e 	bl	800088c <__aeabi_ddiv>
 800c590:	e016      	b.n	800c5c0 <__ieee754_pow+0x108>
 800c592:	2100      	movs	r1, #0
 800c594:	9100      	str	r1, [sp, #0]
 800c596:	2800      	cmp	r0, #0
 800c598:	d13b      	bne.n	800c612 <__ieee754_pow+0x15a>
 800c59a:	494f      	ldr	r1, [pc, #316]	; (800c6d8 <__ieee754_pow+0x220>)
 800c59c:	428e      	cmp	r6, r1
 800c59e:	d1ee      	bne.n	800c57e <__ieee754_pow+0xc6>
 800c5a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c5a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c5a8:	ea53 0308 	orrs.w	r3, r3, r8
 800c5ac:	f000 8466 	beq.w	800ce7c <__ieee754_pow+0x9c4>
 800c5b0:	4b4d      	ldr	r3, [pc, #308]	; (800c6e8 <__ieee754_pow+0x230>)
 800c5b2:	429c      	cmp	r4, r3
 800c5b4:	dd0d      	ble.n	800c5d2 <__ieee754_pow+0x11a>
 800c5b6:	2f00      	cmp	r7, #0
 800c5b8:	f280 8464 	bge.w	800ce84 <__ieee754_pow+0x9cc>
 800c5bc:	2000      	movs	r0, #0
 800c5be:	2100      	movs	r1, #0
 800c5c0:	ec41 0b10 	vmov	d0, r0, r1
 800c5c4:	b00d      	add	sp, #52	; 0x34
 800c5c6:	ecbd 8b06 	vpop	{d8-d10}
 800c5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ce:	2102      	movs	r1, #2
 800c5d0:	e7e0      	b.n	800c594 <__ieee754_pow+0xdc>
 800c5d2:	2f00      	cmp	r7, #0
 800c5d4:	daf2      	bge.n	800c5bc <__ieee754_pow+0x104>
 800c5d6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800c5da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c5de:	e7ef      	b.n	800c5c0 <__ieee754_pow+0x108>
 800c5e0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c5e4:	d104      	bne.n	800c5f0 <__ieee754_pow+0x138>
 800c5e6:	4610      	mov	r0, r2
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	f7f4 f825 	bl	8000638 <__aeabi_dmul>
 800c5ee:	e7e7      	b.n	800c5c0 <__ieee754_pow+0x108>
 800c5f0:	493e      	ldr	r1, [pc, #248]	; (800c6ec <__ieee754_pow+0x234>)
 800c5f2:	428f      	cmp	r7, r1
 800c5f4:	d10d      	bne.n	800c612 <__ieee754_pow+0x15a>
 800c5f6:	f1b9 0f00 	cmp.w	r9, #0
 800c5fa:	db0a      	blt.n	800c612 <__ieee754_pow+0x15a>
 800c5fc:	ec43 2b10 	vmov	d0, r2, r3
 800c600:	b00d      	add	sp, #52	; 0x34
 800c602:	ecbd 8b06 	vpop	{d8-d10}
 800c606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60a:	f000 be83 	b.w	800d314 <__ieee754_sqrt>
 800c60e:	2100      	movs	r1, #0
 800c610:	9100      	str	r1, [sp, #0]
 800c612:	ec43 2b10 	vmov	d0, r2, r3
 800c616:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c61a:	f001 fbf7 	bl	800de0c <fabs>
 800c61e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c622:	ec51 0b10 	vmov	r0, r1, d0
 800c626:	f1b8 0f00 	cmp.w	r8, #0
 800c62a:	d12a      	bne.n	800c682 <__ieee754_pow+0x1ca>
 800c62c:	b12c      	cbz	r4, 800c63a <__ieee754_pow+0x182>
 800c62e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c6e4 <__ieee754_pow+0x22c>
 800c632:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800c636:	45e6      	cmp	lr, ip
 800c638:	d123      	bne.n	800c682 <__ieee754_pow+0x1ca>
 800c63a:	2f00      	cmp	r7, #0
 800c63c:	da05      	bge.n	800c64a <__ieee754_pow+0x192>
 800c63e:	4602      	mov	r2, r0
 800c640:	460b      	mov	r3, r1
 800c642:	2000      	movs	r0, #0
 800c644:	4927      	ldr	r1, [pc, #156]	; (800c6e4 <__ieee754_pow+0x22c>)
 800c646:	f7f4 f921 	bl	800088c <__aeabi_ddiv>
 800c64a:	f1b9 0f00 	cmp.w	r9, #0
 800c64e:	dab7      	bge.n	800c5c0 <__ieee754_pow+0x108>
 800c650:	9b00      	ldr	r3, [sp, #0]
 800c652:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c656:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c65a:	4323      	orrs	r3, r4
 800c65c:	d108      	bne.n	800c670 <__ieee754_pow+0x1b8>
 800c65e:	4602      	mov	r2, r0
 800c660:	460b      	mov	r3, r1
 800c662:	4610      	mov	r0, r2
 800c664:	4619      	mov	r1, r3
 800c666:	f7f3 fe2f 	bl	80002c8 <__aeabi_dsub>
 800c66a:	4602      	mov	r2, r0
 800c66c:	460b      	mov	r3, r1
 800c66e:	e78d      	b.n	800c58c <__ieee754_pow+0xd4>
 800c670:	9b00      	ldr	r3, [sp, #0]
 800c672:	2b01      	cmp	r3, #1
 800c674:	d1a4      	bne.n	800c5c0 <__ieee754_pow+0x108>
 800c676:	4602      	mov	r2, r0
 800c678:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c67c:	4610      	mov	r0, r2
 800c67e:	4619      	mov	r1, r3
 800c680:	e79e      	b.n	800c5c0 <__ieee754_pow+0x108>
 800c682:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800c686:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800c68a:	950a      	str	r5, [sp, #40]	; 0x28
 800c68c:	9d00      	ldr	r5, [sp, #0]
 800c68e:	46ac      	mov	ip, r5
 800c690:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c692:	ea5c 0505 	orrs.w	r5, ip, r5
 800c696:	d0e4      	beq.n	800c662 <__ieee754_pow+0x1aa>
 800c698:	4b15      	ldr	r3, [pc, #84]	; (800c6f0 <__ieee754_pow+0x238>)
 800c69a:	429e      	cmp	r6, r3
 800c69c:	f340 80fc 	ble.w	800c898 <__ieee754_pow+0x3e0>
 800c6a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c6a4:	429e      	cmp	r6, r3
 800c6a6:	4b10      	ldr	r3, [pc, #64]	; (800c6e8 <__ieee754_pow+0x230>)
 800c6a8:	dd07      	ble.n	800c6ba <__ieee754_pow+0x202>
 800c6aa:	429c      	cmp	r4, r3
 800c6ac:	dc0a      	bgt.n	800c6c4 <__ieee754_pow+0x20c>
 800c6ae:	2f00      	cmp	r7, #0
 800c6b0:	da84      	bge.n	800c5bc <__ieee754_pow+0x104>
 800c6b2:	a307      	add	r3, pc, #28	; (adr r3, 800c6d0 <__ieee754_pow+0x218>)
 800c6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b8:	e795      	b.n	800c5e6 <__ieee754_pow+0x12e>
 800c6ba:	429c      	cmp	r4, r3
 800c6bc:	dbf7      	blt.n	800c6ae <__ieee754_pow+0x1f6>
 800c6be:	4b09      	ldr	r3, [pc, #36]	; (800c6e4 <__ieee754_pow+0x22c>)
 800c6c0:	429c      	cmp	r4, r3
 800c6c2:	dd17      	ble.n	800c6f4 <__ieee754_pow+0x23c>
 800c6c4:	2f00      	cmp	r7, #0
 800c6c6:	dcf4      	bgt.n	800c6b2 <__ieee754_pow+0x1fa>
 800c6c8:	e778      	b.n	800c5bc <__ieee754_pow+0x104>
 800c6ca:	bf00      	nop
 800c6cc:	f3af 8000 	nop.w
 800c6d0:	8800759c 	.word	0x8800759c
 800c6d4:	7e37e43c 	.word	0x7e37e43c
 800c6d8:	7ff00000 	.word	0x7ff00000
 800c6dc:	08010b78 	.word	0x08010b78
 800c6e0:	433fffff 	.word	0x433fffff
 800c6e4:	3ff00000 	.word	0x3ff00000
 800c6e8:	3fefffff 	.word	0x3fefffff
 800c6ec:	3fe00000 	.word	0x3fe00000
 800c6f0:	41e00000 	.word	0x41e00000
 800c6f4:	4b64      	ldr	r3, [pc, #400]	; (800c888 <__ieee754_pow+0x3d0>)
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f7f3 fde6 	bl	80002c8 <__aeabi_dsub>
 800c6fc:	a356      	add	r3, pc, #344	; (adr r3, 800c858 <__ieee754_pow+0x3a0>)
 800c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c702:	4604      	mov	r4, r0
 800c704:	460d      	mov	r5, r1
 800c706:	f7f3 ff97 	bl	8000638 <__aeabi_dmul>
 800c70a:	a355      	add	r3, pc, #340	; (adr r3, 800c860 <__ieee754_pow+0x3a8>)
 800c70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c710:	4606      	mov	r6, r0
 800c712:	460f      	mov	r7, r1
 800c714:	4620      	mov	r0, r4
 800c716:	4629      	mov	r1, r5
 800c718:	f7f3 ff8e 	bl	8000638 <__aeabi_dmul>
 800c71c:	4b5b      	ldr	r3, [pc, #364]	; (800c88c <__ieee754_pow+0x3d4>)
 800c71e:	4682      	mov	sl, r0
 800c720:	468b      	mov	fp, r1
 800c722:	2200      	movs	r2, #0
 800c724:	4620      	mov	r0, r4
 800c726:	4629      	mov	r1, r5
 800c728:	f7f3 ff86 	bl	8000638 <__aeabi_dmul>
 800c72c:	4602      	mov	r2, r0
 800c72e:	460b      	mov	r3, r1
 800c730:	a14d      	add	r1, pc, #308	; (adr r1, 800c868 <__ieee754_pow+0x3b0>)
 800c732:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c736:	f7f3 fdc7 	bl	80002c8 <__aeabi_dsub>
 800c73a:	4622      	mov	r2, r4
 800c73c:	462b      	mov	r3, r5
 800c73e:	f7f3 ff7b 	bl	8000638 <__aeabi_dmul>
 800c742:	4602      	mov	r2, r0
 800c744:	460b      	mov	r3, r1
 800c746:	2000      	movs	r0, #0
 800c748:	4951      	ldr	r1, [pc, #324]	; (800c890 <__ieee754_pow+0x3d8>)
 800c74a:	f7f3 fdbd 	bl	80002c8 <__aeabi_dsub>
 800c74e:	4622      	mov	r2, r4
 800c750:	4680      	mov	r8, r0
 800c752:	4689      	mov	r9, r1
 800c754:	462b      	mov	r3, r5
 800c756:	4620      	mov	r0, r4
 800c758:	4629      	mov	r1, r5
 800c75a:	f7f3 ff6d 	bl	8000638 <__aeabi_dmul>
 800c75e:	4602      	mov	r2, r0
 800c760:	460b      	mov	r3, r1
 800c762:	4640      	mov	r0, r8
 800c764:	4649      	mov	r1, r9
 800c766:	f7f3 ff67 	bl	8000638 <__aeabi_dmul>
 800c76a:	a341      	add	r3, pc, #260	; (adr r3, 800c870 <__ieee754_pow+0x3b8>)
 800c76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c770:	f7f3 ff62 	bl	8000638 <__aeabi_dmul>
 800c774:	4602      	mov	r2, r0
 800c776:	460b      	mov	r3, r1
 800c778:	4650      	mov	r0, sl
 800c77a:	4659      	mov	r1, fp
 800c77c:	f7f3 fda4 	bl	80002c8 <__aeabi_dsub>
 800c780:	4602      	mov	r2, r0
 800c782:	460b      	mov	r3, r1
 800c784:	4680      	mov	r8, r0
 800c786:	4689      	mov	r9, r1
 800c788:	4630      	mov	r0, r6
 800c78a:	4639      	mov	r1, r7
 800c78c:	f7f3 fd9e 	bl	80002cc <__adddf3>
 800c790:	2400      	movs	r4, #0
 800c792:	4632      	mov	r2, r6
 800c794:	463b      	mov	r3, r7
 800c796:	4620      	mov	r0, r4
 800c798:	460d      	mov	r5, r1
 800c79a:	f7f3 fd95 	bl	80002c8 <__aeabi_dsub>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	4640      	mov	r0, r8
 800c7a4:	4649      	mov	r1, r9
 800c7a6:	f7f3 fd8f 	bl	80002c8 <__aeabi_dsub>
 800c7aa:	9b00      	ldr	r3, [sp, #0]
 800c7ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	4682      	mov	sl, r0
 800c7b4:	468b      	mov	fp, r1
 800c7b6:	f040 81f1 	bne.w	800cb9c <__ieee754_pow+0x6e4>
 800c7ba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c878 <__ieee754_pow+0x3c0>
 800c7be:	eeb0 8a47 	vmov.f32	s16, s14
 800c7c2:	eef0 8a67 	vmov.f32	s17, s15
 800c7c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c7ca:	2600      	movs	r6, #0
 800c7cc:	4632      	mov	r2, r6
 800c7ce:	463b      	mov	r3, r7
 800c7d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7d4:	f7f3 fd78 	bl	80002c8 <__aeabi_dsub>
 800c7d8:	4622      	mov	r2, r4
 800c7da:	462b      	mov	r3, r5
 800c7dc:	f7f3 ff2c 	bl	8000638 <__aeabi_dmul>
 800c7e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7e4:	4680      	mov	r8, r0
 800c7e6:	4689      	mov	r9, r1
 800c7e8:	4650      	mov	r0, sl
 800c7ea:	4659      	mov	r1, fp
 800c7ec:	f7f3 ff24 	bl	8000638 <__aeabi_dmul>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	4640      	mov	r0, r8
 800c7f6:	4649      	mov	r1, r9
 800c7f8:	f7f3 fd68 	bl	80002cc <__adddf3>
 800c7fc:	4632      	mov	r2, r6
 800c7fe:	463b      	mov	r3, r7
 800c800:	4680      	mov	r8, r0
 800c802:	4689      	mov	r9, r1
 800c804:	4620      	mov	r0, r4
 800c806:	4629      	mov	r1, r5
 800c808:	f7f3 ff16 	bl	8000638 <__aeabi_dmul>
 800c80c:	460b      	mov	r3, r1
 800c80e:	4604      	mov	r4, r0
 800c810:	460d      	mov	r5, r1
 800c812:	4602      	mov	r2, r0
 800c814:	4649      	mov	r1, r9
 800c816:	4640      	mov	r0, r8
 800c818:	f7f3 fd58 	bl	80002cc <__adddf3>
 800c81c:	4b1d      	ldr	r3, [pc, #116]	; (800c894 <__ieee754_pow+0x3dc>)
 800c81e:	4299      	cmp	r1, r3
 800c820:	ec45 4b19 	vmov	d9, r4, r5
 800c824:	4606      	mov	r6, r0
 800c826:	460f      	mov	r7, r1
 800c828:	468b      	mov	fp, r1
 800c82a:	f340 82fe 	ble.w	800ce2a <__ieee754_pow+0x972>
 800c82e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c832:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c836:	4303      	orrs	r3, r0
 800c838:	f000 81f0 	beq.w	800cc1c <__ieee754_pow+0x764>
 800c83c:	a310      	add	r3, pc, #64	; (adr r3, 800c880 <__ieee754_pow+0x3c8>)
 800c83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c842:	ec51 0b18 	vmov	r0, r1, d8
 800c846:	f7f3 fef7 	bl	8000638 <__aeabi_dmul>
 800c84a:	a30d      	add	r3, pc, #52	; (adr r3, 800c880 <__ieee754_pow+0x3c8>)
 800c84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c850:	e6cb      	b.n	800c5ea <__ieee754_pow+0x132>
 800c852:	bf00      	nop
 800c854:	f3af 8000 	nop.w
 800c858:	60000000 	.word	0x60000000
 800c85c:	3ff71547 	.word	0x3ff71547
 800c860:	f85ddf44 	.word	0xf85ddf44
 800c864:	3e54ae0b 	.word	0x3e54ae0b
 800c868:	55555555 	.word	0x55555555
 800c86c:	3fd55555 	.word	0x3fd55555
 800c870:	652b82fe 	.word	0x652b82fe
 800c874:	3ff71547 	.word	0x3ff71547
 800c878:	00000000 	.word	0x00000000
 800c87c:	bff00000 	.word	0xbff00000
 800c880:	8800759c 	.word	0x8800759c
 800c884:	7e37e43c 	.word	0x7e37e43c
 800c888:	3ff00000 	.word	0x3ff00000
 800c88c:	3fd00000 	.word	0x3fd00000
 800c890:	3fe00000 	.word	0x3fe00000
 800c894:	408fffff 	.word	0x408fffff
 800c898:	4bd7      	ldr	r3, [pc, #860]	; (800cbf8 <__ieee754_pow+0x740>)
 800c89a:	ea03 0309 	and.w	r3, r3, r9
 800c89e:	2200      	movs	r2, #0
 800c8a0:	b92b      	cbnz	r3, 800c8ae <__ieee754_pow+0x3f6>
 800c8a2:	4bd6      	ldr	r3, [pc, #856]	; (800cbfc <__ieee754_pow+0x744>)
 800c8a4:	f7f3 fec8 	bl	8000638 <__aeabi_dmul>
 800c8a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c8ac:	460c      	mov	r4, r1
 800c8ae:	1523      	asrs	r3, r4, #20
 800c8b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c8b4:	4413      	add	r3, r2
 800c8b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c8b8:	4bd1      	ldr	r3, [pc, #836]	; (800cc00 <__ieee754_pow+0x748>)
 800c8ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c8be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c8c2:	429c      	cmp	r4, r3
 800c8c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c8c8:	dd08      	ble.n	800c8dc <__ieee754_pow+0x424>
 800c8ca:	4bce      	ldr	r3, [pc, #824]	; (800cc04 <__ieee754_pow+0x74c>)
 800c8cc:	429c      	cmp	r4, r3
 800c8ce:	f340 8163 	ble.w	800cb98 <__ieee754_pow+0x6e0>
 800c8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c8d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c8dc:	2400      	movs	r4, #0
 800c8de:	00e3      	lsls	r3, r4, #3
 800c8e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8e2:	4bc9      	ldr	r3, [pc, #804]	; (800cc08 <__ieee754_pow+0x750>)
 800c8e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c8e8:	ed93 7b00 	vldr	d7, [r3]
 800c8ec:	4629      	mov	r1, r5
 800c8ee:	ec53 2b17 	vmov	r2, r3, d7
 800c8f2:	eeb0 8a47 	vmov.f32	s16, s14
 800c8f6:	eef0 8a67 	vmov.f32	s17, s15
 800c8fa:	4682      	mov	sl, r0
 800c8fc:	f7f3 fce4 	bl	80002c8 <__aeabi_dsub>
 800c900:	4652      	mov	r2, sl
 800c902:	4606      	mov	r6, r0
 800c904:	460f      	mov	r7, r1
 800c906:	462b      	mov	r3, r5
 800c908:	ec51 0b18 	vmov	r0, r1, d8
 800c90c:	f7f3 fcde 	bl	80002cc <__adddf3>
 800c910:	4602      	mov	r2, r0
 800c912:	460b      	mov	r3, r1
 800c914:	2000      	movs	r0, #0
 800c916:	49bd      	ldr	r1, [pc, #756]	; (800cc0c <__ieee754_pow+0x754>)
 800c918:	f7f3 ffb8 	bl	800088c <__aeabi_ddiv>
 800c91c:	ec41 0b19 	vmov	d9, r0, r1
 800c920:	4602      	mov	r2, r0
 800c922:	460b      	mov	r3, r1
 800c924:	4630      	mov	r0, r6
 800c926:	4639      	mov	r1, r7
 800c928:	f7f3 fe86 	bl	8000638 <__aeabi_dmul>
 800c92c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c930:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c934:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c938:	2300      	movs	r3, #0
 800c93a:	9304      	str	r3, [sp, #16]
 800c93c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c940:	46ab      	mov	fp, r5
 800c942:	106d      	asrs	r5, r5, #1
 800c944:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c948:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c94c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c950:	2200      	movs	r2, #0
 800c952:	4640      	mov	r0, r8
 800c954:	4649      	mov	r1, r9
 800c956:	4614      	mov	r4, r2
 800c958:	461d      	mov	r5, r3
 800c95a:	f7f3 fe6d 	bl	8000638 <__aeabi_dmul>
 800c95e:	4602      	mov	r2, r0
 800c960:	460b      	mov	r3, r1
 800c962:	4630      	mov	r0, r6
 800c964:	4639      	mov	r1, r7
 800c966:	f7f3 fcaf 	bl	80002c8 <__aeabi_dsub>
 800c96a:	ec53 2b18 	vmov	r2, r3, d8
 800c96e:	4606      	mov	r6, r0
 800c970:	460f      	mov	r7, r1
 800c972:	4620      	mov	r0, r4
 800c974:	4629      	mov	r1, r5
 800c976:	f7f3 fca7 	bl	80002c8 <__aeabi_dsub>
 800c97a:	4602      	mov	r2, r0
 800c97c:	460b      	mov	r3, r1
 800c97e:	4650      	mov	r0, sl
 800c980:	4659      	mov	r1, fp
 800c982:	f7f3 fca1 	bl	80002c8 <__aeabi_dsub>
 800c986:	4642      	mov	r2, r8
 800c988:	464b      	mov	r3, r9
 800c98a:	f7f3 fe55 	bl	8000638 <__aeabi_dmul>
 800c98e:	4602      	mov	r2, r0
 800c990:	460b      	mov	r3, r1
 800c992:	4630      	mov	r0, r6
 800c994:	4639      	mov	r1, r7
 800c996:	f7f3 fc97 	bl	80002c8 <__aeabi_dsub>
 800c99a:	ec53 2b19 	vmov	r2, r3, d9
 800c99e:	f7f3 fe4b 	bl	8000638 <__aeabi_dmul>
 800c9a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c9a6:	ec41 0b18 	vmov	d8, r0, r1
 800c9aa:	4610      	mov	r0, r2
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	f7f3 fe43 	bl	8000638 <__aeabi_dmul>
 800c9b2:	a37d      	add	r3, pc, #500	; (adr r3, 800cba8 <__ieee754_pow+0x6f0>)
 800c9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b8:	4604      	mov	r4, r0
 800c9ba:	460d      	mov	r5, r1
 800c9bc:	f7f3 fe3c 	bl	8000638 <__aeabi_dmul>
 800c9c0:	a37b      	add	r3, pc, #492	; (adr r3, 800cbb0 <__ieee754_pow+0x6f8>)
 800c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c6:	f7f3 fc81 	bl	80002cc <__adddf3>
 800c9ca:	4622      	mov	r2, r4
 800c9cc:	462b      	mov	r3, r5
 800c9ce:	f7f3 fe33 	bl	8000638 <__aeabi_dmul>
 800c9d2:	a379      	add	r3, pc, #484	; (adr r3, 800cbb8 <__ieee754_pow+0x700>)
 800c9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d8:	f7f3 fc78 	bl	80002cc <__adddf3>
 800c9dc:	4622      	mov	r2, r4
 800c9de:	462b      	mov	r3, r5
 800c9e0:	f7f3 fe2a 	bl	8000638 <__aeabi_dmul>
 800c9e4:	a376      	add	r3, pc, #472	; (adr r3, 800cbc0 <__ieee754_pow+0x708>)
 800c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ea:	f7f3 fc6f 	bl	80002cc <__adddf3>
 800c9ee:	4622      	mov	r2, r4
 800c9f0:	462b      	mov	r3, r5
 800c9f2:	f7f3 fe21 	bl	8000638 <__aeabi_dmul>
 800c9f6:	a374      	add	r3, pc, #464	; (adr r3, 800cbc8 <__ieee754_pow+0x710>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	f7f3 fc66 	bl	80002cc <__adddf3>
 800ca00:	4622      	mov	r2, r4
 800ca02:	462b      	mov	r3, r5
 800ca04:	f7f3 fe18 	bl	8000638 <__aeabi_dmul>
 800ca08:	a371      	add	r3, pc, #452	; (adr r3, 800cbd0 <__ieee754_pow+0x718>)
 800ca0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0e:	f7f3 fc5d 	bl	80002cc <__adddf3>
 800ca12:	4622      	mov	r2, r4
 800ca14:	4606      	mov	r6, r0
 800ca16:	460f      	mov	r7, r1
 800ca18:	462b      	mov	r3, r5
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	4629      	mov	r1, r5
 800ca1e:	f7f3 fe0b 	bl	8000638 <__aeabi_dmul>
 800ca22:	4602      	mov	r2, r0
 800ca24:	460b      	mov	r3, r1
 800ca26:	4630      	mov	r0, r6
 800ca28:	4639      	mov	r1, r7
 800ca2a:	f7f3 fe05 	bl	8000638 <__aeabi_dmul>
 800ca2e:	4642      	mov	r2, r8
 800ca30:	4604      	mov	r4, r0
 800ca32:	460d      	mov	r5, r1
 800ca34:	464b      	mov	r3, r9
 800ca36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca3a:	f7f3 fc47 	bl	80002cc <__adddf3>
 800ca3e:	ec53 2b18 	vmov	r2, r3, d8
 800ca42:	f7f3 fdf9 	bl	8000638 <__aeabi_dmul>
 800ca46:	4622      	mov	r2, r4
 800ca48:	462b      	mov	r3, r5
 800ca4a:	f7f3 fc3f 	bl	80002cc <__adddf3>
 800ca4e:	4642      	mov	r2, r8
 800ca50:	4682      	mov	sl, r0
 800ca52:	468b      	mov	fp, r1
 800ca54:	464b      	mov	r3, r9
 800ca56:	4640      	mov	r0, r8
 800ca58:	4649      	mov	r1, r9
 800ca5a:	f7f3 fded 	bl	8000638 <__aeabi_dmul>
 800ca5e:	4b6c      	ldr	r3, [pc, #432]	; (800cc10 <__ieee754_pow+0x758>)
 800ca60:	2200      	movs	r2, #0
 800ca62:	4606      	mov	r6, r0
 800ca64:	460f      	mov	r7, r1
 800ca66:	f7f3 fc31 	bl	80002cc <__adddf3>
 800ca6a:	4652      	mov	r2, sl
 800ca6c:	465b      	mov	r3, fp
 800ca6e:	f7f3 fc2d 	bl	80002cc <__adddf3>
 800ca72:	9c04      	ldr	r4, [sp, #16]
 800ca74:	460d      	mov	r5, r1
 800ca76:	4622      	mov	r2, r4
 800ca78:	460b      	mov	r3, r1
 800ca7a:	4640      	mov	r0, r8
 800ca7c:	4649      	mov	r1, r9
 800ca7e:	f7f3 fddb 	bl	8000638 <__aeabi_dmul>
 800ca82:	4b63      	ldr	r3, [pc, #396]	; (800cc10 <__ieee754_pow+0x758>)
 800ca84:	4680      	mov	r8, r0
 800ca86:	4689      	mov	r9, r1
 800ca88:	2200      	movs	r2, #0
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	4629      	mov	r1, r5
 800ca8e:	f7f3 fc1b 	bl	80002c8 <__aeabi_dsub>
 800ca92:	4632      	mov	r2, r6
 800ca94:	463b      	mov	r3, r7
 800ca96:	f7f3 fc17 	bl	80002c8 <__aeabi_dsub>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	4650      	mov	r0, sl
 800caa0:	4659      	mov	r1, fp
 800caa2:	f7f3 fc11 	bl	80002c8 <__aeabi_dsub>
 800caa6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800caaa:	f7f3 fdc5 	bl	8000638 <__aeabi_dmul>
 800caae:	4622      	mov	r2, r4
 800cab0:	4606      	mov	r6, r0
 800cab2:	460f      	mov	r7, r1
 800cab4:	462b      	mov	r3, r5
 800cab6:	ec51 0b18 	vmov	r0, r1, d8
 800caba:	f7f3 fdbd 	bl	8000638 <__aeabi_dmul>
 800cabe:	4602      	mov	r2, r0
 800cac0:	460b      	mov	r3, r1
 800cac2:	4630      	mov	r0, r6
 800cac4:	4639      	mov	r1, r7
 800cac6:	f7f3 fc01 	bl	80002cc <__adddf3>
 800caca:	4606      	mov	r6, r0
 800cacc:	460f      	mov	r7, r1
 800cace:	4602      	mov	r2, r0
 800cad0:	460b      	mov	r3, r1
 800cad2:	4640      	mov	r0, r8
 800cad4:	4649      	mov	r1, r9
 800cad6:	f7f3 fbf9 	bl	80002cc <__adddf3>
 800cada:	9c04      	ldr	r4, [sp, #16]
 800cadc:	a33e      	add	r3, pc, #248	; (adr r3, 800cbd8 <__ieee754_pow+0x720>)
 800cade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae2:	4620      	mov	r0, r4
 800cae4:	460d      	mov	r5, r1
 800cae6:	f7f3 fda7 	bl	8000638 <__aeabi_dmul>
 800caea:	4642      	mov	r2, r8
 800caec:	ec41 0b18 	vmov	d8, r0, r1
 800caf0:	464b      	mov	r3, r9
 800caf2:	4620      	mov	r0, r4
 800caf4:	4629      	mov	r1, r5
 800caf6:	f7f3 fbe7 	bl	80002c8 <__aeabi_dsub>
 800cafa:	4602      	mov	r2, r0
 800cafc:	460b      	mov	r3, r1
 800cafe:	4630      	mov	r0, r6
 800cb00:	4639      	mov	r1, r7
 800cb02:	f7f3 fbe1 	bl	80002c8 <__aeabi_dsub>
 800cb06:	a336      	add	r3, pc, #216	; (adr r3, 800cbe0 <__ieee754_pow+0x728>)
 800cb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0c:	f7f3 fd94 	bl	8000638 <__aeabi_dmul>
 800cb10:	a335      	add	r3, pc, #212	; (adr r3, 800cbe8 <__ieee754_pow+0x730>)
 800cb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb16:	4606      	mov	r6, r0
 800cb18:	460f      	mov	r7, r1
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	f7f3 fd8b 	bl	8000638 <__aeabi_dmul>
 800cb22:	4602      	mov	r2, r0
 800cb24:	460b      	mov	r3, r1
 800cb26:	4630      	mov	r0, r6
 800cb28:	4639      	mov	r1, r7
 800cb2a:	f7f3 fbcf 	bl	80002cc <__adddf3>
 800cb2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb30:	4b38      	ldr	r3, [pc, #224]	; (800cc14 <__ieee754_pow+0x75c>)
 800cb32:	4413      	add	r3, r2
 800cb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb38:	f7f3 fbc8 	bl	80002cc <__adddf3>
 800cb3c:	4682      	mov	sl, r0
 800cb3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb40:	468b      	mov	fp, r1
 800cb42:	f7f3 fd0f 	bl	8000564 <__aeabi_i2d>
 800cb46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb48:	4b33      	ldr	r3, [pc, #204]	; (800cc18 <__ieee754_pow+0x760>)
 800cb4a:	4413      	add	r3, r2
 800cb4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb50:	4606      	mov	r6, r0
 800cb52:	460f      	mov	r7, r1
 800cb54:	4652      	mov	r2, sl
 800cb56:	465b      	mov	r3, fp
 800cb58:	ec51 0b18 	vmov	r0, r1, d8
 800cb5c:	f7f3 fbb6 	bl	80002cc <__adddf3>
 800cb60:	4642      	mov	r2, r8
 800cb62:	464b      	mov	r3, r9
 800cb64:	f7f3 fbb2 	bl	80002cc <__adddf3>
 800cb68:	4632      	mov	r2, r6
 800cb6a:	463b      	mov	r3, r7
 800cb6c:	f7f3 fbae 	bl	80002cc <__adddf3>
 800cb70:	9c04      	ldr	r4, [sp, #16]
 800cb72:	4632      	mov	r2, r6
 800cb74:	463b      	mov	r3, r7
 800cb76:	4620      	mov	r0, r4
 800cb78:	460d      	mov	r5, r1
 800cb7a:	f7f3 fba5 	bl	80002c8 <__aeabi_dsub>
 800cb7e:	4642      	mov	r2, r8
 800cb80:	464b      	mov	r3, r9
 800cb82:	f7f3 fba1 	bl	80002c8 <__aeabi_dsub>
 800cb86:	ec53 2b18 	vmov	r2, r3, d8
 800cb8a:	f7f3 fb9d 	bl	80002c8 <__aeabi_dsub>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	460b      	mov	r3, r1
 800cb92:	4650      	mov	r0, sl
 800cb94:	4659      	mov	r1, fp
 800cb96:	e606      	b.n	800c7a6 <__ieee754_pow+0x2ee>
 800cb98:	2401      	movs	r4, #1
 800cb9a:	e6a0      	b.n	800c8de <__ieee754_pow+0x426>
 800cb9c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800cbf0 <__ieee754_pow+0x738>
 800cba0:	e60d      	b.n	800c7be <__ieee754_pow+0x306>
 800cba2:	bf00      	nop
 800cba4:	f3af 8000 	nop.w
 800cba8:	4a454eef 	.word	0x4a454eef
 800cbac:	3fca7e28 	.word	0x3fca7e28
 800cbb0:	93c9db65 	.word	0x93c9db65
 800cbb4:	3fcd864a 	.word	0x3fcd864a
 800cbb8:	a91d4101 	.word	0xa91d4101
 800cbbc:	3fd17460 	.word	0x3fd17460
 800cbc0:	518f264d 	.word	0x518f264d
 800cbc4:	3fd55555 	.word	0x3fd55555
 800cbc8:	db6fabff 	.word	0xdb6fabff
 800cbcc:	3fdb6db6 	.word	0x3fdb6db6
 800cbd0:	33333303 	.word	0x33333303
 800cbd4:	3fe33333 	.word	0x3fe33333
 800cbd8:	e0000000 	.word	0xe0000000
 800cbdc:	3feec709 	.word	0x3feec709
 800cbe0:	dc3a03fd 	.word	0xdc3a03fd
 800cbe4:	3feec709 	.word	0x3feec709
 800cbe8:	145b01f5 	.word	0x145b01f5
 800cbec:	be3e2fe0 	.word	0xbe3e2fe0
 800cbf0:	00000000 	.word	0x00000000
 800cbf4:	3ff00000 	.word	0x3ff00000
 800cbf8:	7ff00000 	.word	0x7ff00000
 800cbfc:	43400000 	.word	0x43400000
 800cc00:	0003988e 	.word	0x0003988e
 800cc04:	000bb679 	.word	0x000bb679
 800cc08:	08010be0 	.word	0x08010be0
 800cc0c:	3ff00000 	.word	0x3ff00000
 800cc10:	40080000 	.word	0x40080000
 800cc14:	08010c00 	.word	0x08010c00
 800cc18:	08010bf0 	.word	0x08010bf0
 800cc1c:	a3b5      	add	r3, pc, #724	; (adr r3, 800cef4 <__ieee754_pow+0xa3c>)
 800cc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc22:	4640      	mov	r0, r8
 800cc24:	4649      	mov	r1, r9
 800cc26:	f7f3 fb51 	bl	80002cc <__adddf3>
 800cc2a:	4622      	mov	r2, r4
 800cc2c:	ec41 0b1a 	vmov	d10, r0, r1
 800cc30:	462b      	mov	r3, r5
 800cc32:	4630      	mov	r0, r6
 800cc34:	4639      	mov	r1, r7
 800cc36:	f7f3 fb47 	bl	80002c8 <__aeabi_dsub>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	ec51 0b1a 	vmov	r0, r1, d10
 800cc42:	f7f3 ff89 	bl	8000b58 <__aeabi_dcmpgt>
 800cc46:	2800      	cmp	r0, #0
 800cc48:	f47f adf8 	bne.w	800c83c <__ieee754_pow+0x384>
 800cc4c:	4aa4      	ldr	r2, [pc, #656]	; (800cee0 <__ieee754_pow+0xa28>)
 800cc4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cc52:	4293      	cmp	r3, r2
 800cc54:	f340 810b 	ble.w	800ce6e <__ieee754_pow+0x9b6>
 800cc58:	151b      	asrs	r3, r3, #20
 800cc5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cc5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cc62:	fa4a f303 	asr.w	r3, sl, r3
 800cc66:	445b      	add	r3, fp
 800cc68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cc6c:	4e9d      	ldr	r6, [pc, #628]	; (800cee4 <__ieee754_pow+0xa2c>)
 800cc6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cc72:	4116      	asrs	r6, r2
 800cc74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800cc78:	2000      	movs	r0, #0
 800cc7a:	ea23 0106 	bic.w	r1, r3, r6
 800cc7e:	f1c2 0214 	rsb	r2, r2, #20
 800cc82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cc86:	fa4a fa02 	asr.w	sl, sl, r2
 800cc8a:	f1bb 0f00 	cmp.w	fp, #0
 800cc8e:	4602      	mov	r2, r0
 800cc90:	460b      	mov	r3, r1
 800cc92:	4620      	mov	r0, r4
 800cc94:	4629      	mov	r1, r5
 800cc96:	bfb8      	it	lt
 800cc98:	f1ca 0a00 	rsblt	sl, sl, #0
 800cc9c:	f7f3 fb14 	bl	80002c8 <__aeabi_dsub>
 800cca0:	ec41 0b19 	vmov	d9, r0, r1
 800cca4:	4642      	mov	r2, r8
 800cca6:	464b      	mov	r3, r9
 800cca8:	ec51 0b19 	vmov	r0, r1, d9
 800ccac:	f7f3 fb0e 	bl	80002cc <__adddf3>
 800ccb0:	2400      	movs	r4, #0
 800ccb2:	a379      	add	r3, pc, #484	; (adr r3, 800ce98 <__ieee754_pow+0x9e0>)
 800ccb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb8:	4620      	mov	r0, r4
 800ccba:	460d      	mov	r5, r1
 800ccbc:	f7f3 fcbc 	bl	8000638 <__aeabi_dmul>
 800ccc0:	ec53 2b19 	vmov	r2, r3, d9
 800ccc4:	4606      	mov	r6, r0
 800ccc6:	460f      	mov	r7, r1
 800ccc8:	4620      	mov	r0, r4
 800ccca:	4629      	mov	r1, r5
 800cccc:	f7f3 fafc 	bl	80002c8 <__aeabi_dsub>
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	4640      	mov	r0, r8
 800ccd6:	4649      	mov	r1, r9
 800ccd8:	f7f3 faf6 	bl	80002c8 <__aeabi_dsub>
 800ccdc:	a370      	add	r3, pc, #448	; (adr r3, 800cea0 <__ieee754_pow+0x9e8>)
 800ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce2:	f7f3 fca9 	bl	8000638 <__aeabi_dmul>
 800cce6:	a370      	add	r3, pc, #448	; (adr r3, 800cea8 <__ieee754_pow+0x9f0>)
 800cce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccec:	4680      	mov	r8, r0
 800ccee:	4689      	mov	r9, r1
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	f7f3 fca0 	bl	8000638 <__aeabi_dmul>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	4640      	mov	r0, r8
 800ccfe:	4649      	mov	r1, r9
 800cd00:	f7f3 fae4 	bl	80002cc <__adddf3>
 800cd04:	4604      	mov	r4, r0
 800cd06:	460d      	mov	r5, r1
 800cd08:	4602      	mov	r2, r0
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	4639      	mov	r1, r7
 800cd10:	f7f3 fadc 	bl	80002cc <__adddf3>
 800cd14:	4632      	mov	r2, r6
 800cd16:	463b      	mov	r3, r7
 800cd18:	4680      	mov	r8, r0
 800cd1a:	4689      	mov	r9, r1
 800cd1c:	f7f3 fad4 	bl	80002c8 <__aeabi_dsub>
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	4620      	mov	r0, r4
 800cd26:	4629      	mov	r1, r5
 800cd28:	f7f3 face 	bl	80002c8 <__aeabi_dsub>
 800cd2c:	4642      	mov	r2, r8
 800cd2e:	4606      	mov	r6, r0
 800cd30:	460f      	mov	r7, r1
 800cd32:	464b      	mov	r3, r9
 800cd34:	4640      	mov	r0, r8
 800cd36:	4649      	mov	r1, r9
 800cd38:	f7f3 fc7e 	bl	8000638 <__aeabi_dmul>
 800cd3c:	a35c      	add	r3, pc, #368	; (adr r3, 800ceb0 <__ieee754_pow+0x9f8>)
 800cd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd42:	4604      	mov	r4, r0
 800cd44:	460d      	mov	r5, r1
 800cd46:	f7f3 fc77 	bl	8000638 <__aeabi_dmul>
 800cd4a:	a35b      	add	r3, pc, #364	; (adr r3, 800ceb8 <__ieee754_pow+0xa00>)
 800cd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd50:	f7f3 faba 	bl	80002c8 <__aeabi_dsub>
 800cd54:	4622      	mov	r2, r4
 800cd56:	462b      	mov	r3, r5
 800cd58:	f7f3 fc6e 	bl	8000638 <__aeabi_dmul>
 800cd5c:	a358      	add	r3, pc, #352	; (adr r3, 800cec0 <__ieee754_pow+0xa08>)
 800cd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd62:	f7f3 fab3 	bl	80002cc <__adddf3>
 800cd66:	4622      	mov	r2, r4
 800cd68:	462b      	mov	r3, r5
 800cd6a:	f7f3 fc65 	bl	8000638 <__aeabi_dmul>
 800cd6e:	a356      	add	r3, pc, #344	; (adr r3, 800cec8 <__ieee754_pow+0xa10>)
 800cd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd74:	f7f3 faa8 	bl	80002c8 <__aeabi_dsub>
 800cd78:	4622      	mov	r2, r4
 800cd7a:	462b      	mov	r3, r5
 800cd7c:	f7f3 fc5c 	bl	8000638 <__aeabi_dmul>
 800cd80:	a353      	add	r3, pc, #332	; (adr r3, 800ced0 <__ieee754_pow+0xa18>)
 800cd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd86:	f7f3 faa1 	bl	80002cc <__adddf3>
 800cd8a:	4622      	mov	r2, r4
 800cd8c:	462b      	mov	r3, r5
 800cd8e:	f7f3 fc53 	bl	8000638 <__aeabi_dmul>
 800cd92:	4602      	mov	r2, r0
 800cd94:	460b      	mov	r3, r1
 800cd96:	4640      	mov	r0, r8
 800cd98:	4649      	mov	r1, r9
 800cd9a:	f7f3 fa95 	bl	80002c8 <__aeabi_dsub>
 800cd9e:	4604      	mov	r4, r0
 800cda0:	460d      	mov	r5, r1
 800cda2:	4602      	mov	r2, r0
 800cda4:	460b      	mov	r3, r1
 800cda6:	4640      	mov	r0, r8
 800cda8:	4649      	mov	r1, r9
 800cdaa:	f7f3 fc45 	bl	8000638 <__aeabi_dmul>
 800cdae:	2200      	movs	r2, #0
 800cdb0:	ec41 0b19 	vmov	d9, r0, r1
 800cdb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cdb8:	4620      	mov	r0, r4
 800cdba:	4629      	mov	r1, r5
 800cdbc:	f7f3 fa84 	bl	80002c8 <__aeabi_dsub>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	ec51 0b19 	vmov	r0, r1, d9
 800cdc8:	f7f3 fd60 	bl	800088c <__aeabi_ddiv>
 800cdcc:	4632      	mov	r2, r6
 800cdce:	4604      	mov	r4, r0
 800cdd0:	460d      	mov	r5, r1
 800cdd2:	463b      	mov	r3, r7
 800cdd4:	4640      	mov	r0, r8
 800cdd6:	4649      	mov	r1, r9
 800cdd8:	f7f3 fc2e 	bl	8000638 <__aeabi_dmul>
 800cddc:	4632      	mov	r2, r6
 800cdde:	463b      	mov	r3, r7
 800cde0:	f7f3 fa74 	bl	80002cc <__adddf3>
 800cde4:	4602      	mov	r2, r0
 800cde6:	460b      	mov	r3, r1
 800cde8:	4620      	mov	r0, r4
 800cdea:	4629      	mov	r1, r5
 800cdec:	f7f3 fa6c 	bl	80002c8 <__aeabi_dsub>
 800cdf0:	4642      	mov	r2, r8
 800cdf2:	464b      	mov	r3, r9
 800cdf4:	f7f3 fa68 	bl	80002c8 <__aeabi_dsub>
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	493a      	ldr	r1, [pc, #232]	; (800cee8 <__ieee754_pow+0xa30>)
 800cdfe:	2000      	movs	r0, #0
 800ce00:	f7f3 fa62 	bl	80002c8 <__aeabi_dsub>
 800ce04:	e9cd 0100 	strd	r0, r1, [sp]
 800ce08:	9b01      	ldr	r3, [sp, #4]
 800ce0a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ce0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce12:	da2f      	bge.n	800ce74 <__ieee754_pow+0x9bc>
 800ce14:	4650      	mov	r0, sl
 800ce16:	ed9d 0b00 	vldr	d0, [sp]
 800ce1a:	f001 f919 	bl	800e050 <scalbn>
 800ce1e:	ec51 0b10 	vmov	r0, r1, d0
 800ce22:	ec53 2b18 	vmov	r2, r3, d8
 800ce26:	f7ff bbe0 	b.w	800c5ea <__ieee754_pow+0x132>
 800ce2a:	4b30      	ldr	r3, [pc, #192]	; (800ceec <__ieee754_pow+0xa34>)
 800ce2c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ce30:	429e      	cmp	r6, r3
 800ce32:	f77f af0b 	ble.w	800cc4c <__ieee754_pow+0x794>
 800ce36:	4b2e      	ldr	r3, [pc, #184]	; (800cef0 <__ieee754_pow+0xa38>)
 800ce38:	440b      	add	r3, r1
 800ce3a:	4303      	orrs	r3, r0
 800ce3c:	d00b      	beq.n	800ce56 <__ieee754_pow+0x99e>
 800ce3e:	a326      	add	r3, pc, #152	; (adr r3, 800ced8 <__ieee754_pow+0xa20>)
 800ce40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce44:	ec51 0b18 	vmov	r0, r1, d8
 800ce48:	f7f3 fbf6 	bl	8000638 <__aeabi_dmul>
 800ce4c:	a322      	add	r3, pc, #136	; (adr r3, 800ced8 <__ieee754_pow+0xa20>)
 800ce4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce52:	f7ff bbca 	b.w	800c5ea <__ieee754_pow+0x132>
 800ce56:	4622      	mov	r2, r4
 800ce58:	462b      	mov	r3, r5
 800ce5a:	f7f3 fa35 	bl	80002c8 <__aeabi_dsub>
 800ce5e:	4642      	mov	r2, r8
 800ce60:	464b      	mov	r3, r9
 800ce62:	f7f3 fe6f 	bl	8000b44 <__aeabi_dcmpge>
 800ce66:	2800      	cmp	r0, #0
 800ce68:	f43f aef0 	beq.w	800cc4c <__ieee754_pow+0x794>
 800ce6c:	e7e7      	b.n	800ce3e <__ieee754_pow+0x986>
 800ce6e:	f04f 0a00 	mov.w	sl, #0
 800ce72:	e717      	b.n	800cca4 <__ieee754_pow+0x7ec>
 800ce74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce78:	4619      	mov	r1, r3
 800ce7a:	e7d2      	b.n	800ce22 <__ieee754_pow+0x96a>
 800ce7c:	491a      	ldr	r1, [pc, #104]	; (800cee8 <__ieee754_pow+0xa30>)
 800ce7e:	2000      	movs	r0, #0
 800ce80:	f7ff bb9e 	b.w	800c5c0 <__ieee754_pow+0x108>
 800ce84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce88:	f7ff bb9a 	b.w	800c5c0 <__ieee754_pow+0x108>
 800ce8c:	9000      	str	r0, [sp, #0]
 800ce8e:	f7ff bb76 	b.w	800c57e <__ieee754_pow+0xc6>
 800ce92:	2100      	movs	r1, #0
 800ce94:	f7ff bb60 	b.w	800c558 <__ieee754_pow+0xa0>
 800ce98:	00000000 	.word	0x00000000
 800ce9c:	3fe62e43 	.word	0x3fe62e43
 800cea0:	fefa39ef 	.word	0xfefa39ef
 800cea4:	3fe62e42 	.word	0x3fe62e42
 800cea8:	0ca86c39 	.word	0x0ca86c39
 800ceac:	be205c61 	.word	0xbe205c61
 800ceb0:	72bea4d0 	.word	0x72bea4d0
 800ceb4:	3e663769 	.word	0x3e663769
 800ceb8:	c5d26bf1 	.word	0xc5d26bf1
 800cebc:	3ebbbd41 	.word	0x3ebbbd41
 800cec0:	af25de2c 	.word	0xaf25de2c
 800cec4:	3f11566a 	.word	0x3f11566a
 800cec8:	16bebd93 	.word	0x16bebd93
 800cecc:	3f66c16c 	.word	0x3f66c16c
 800ced0:	5555553e 	.word	0x5555553e
 800ced4:	3fc55555 	.word	0x3fc55555
 800ced8:	c2f8f359 	.word	0xc2f8f359
 800cedc:	01a56e1f 	.word	0x01a56e1f
 800cee0:	3fe00000 	.word	0x3fe00000
 800cee4:	000fffff 	.word	0x000fffff
 800cee8:	3ff00000 	.word	0x3ff00000
 800ceec:	4090cbff 	.word	0x4090cbff
 800cef0:	3f6f3400 	.word	0x3f6f3400
 800cef4:	652b82fe 	.word	0x652b82fe
 800cef8:	3c971547 	.word	0x3c971547
 800cefc:	00000000 	.word	0x00000000

0800cf00 <__ieee754_rem_pio2>:
 800cf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf04:	ed2d 8b02 	vpush	{d8}
 800cf08:	ec55 4b10 	vmov	r4, r5, d0
 800cf0c:	4bca      	ldr	r3, [pc, #808]	; (800d238 <__ieee754_rem_pio2+0x338>)
 800cf0e:	b08b      	sub	sp, #44	; 0x2c
 800cf10:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cf14:	4598      	cmp	r8, r3
 800cf16:	4682      	mov	sl, r0
 800cf18:	9502      	str	r5, [sp, #8]
 800cf1a:	dc08      	bgt.n	800cf2e <__ieee754_rem_pio2+0x2e>
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	2300      	movs	r3, #0
 800cf20:	ed80 0b00 	vstr	d0, [r0]
 800cf24:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cf28:	f04f 0b00 	mov.w	fp, #0
 800cf2c:	e028      	b.n	800cf80 <__ieee754_rem_pio2+0x80>
 800cf2e:	4bc3      	ldr	r3, [pc, #780]	; (800d23c <__ieee754_rem_pio2+0x33c>)
 800cf30:	4598      	cmp	r8, r3
 800cf32:	dc78      	bgt.n	800d026 <__ieee754_rem_pio2+0x126>
 800cf34:	9b02      	ldr	r3, [sp, #8]
 800cf36:	4ec2      	ldr	r6, [pc, #776]	; (800d240 <__ieee754_rem_pio2+0x340>)
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	ee10 0a10 	vmov	r0, s0
 800cf3e:	a3b0      	add	r3, pc, #704	; (adr r3, 800d200 <__ieee754_rem_pio2+0x300>)
 800cf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf44:	4629      	mov	r1, r5
 800cf46:	dd39      	ble.n	800cfbc <__ieee754_rem_pio2+0xbc>
 800cf48:	f7f3 f9be 	bl	80002c8 <__aeabi_dsub>
 800cf4c:	45b0      	cmp	r8, r6
 800cf4e:	4604      	mov	r4, r0
 800cf50:	460d      	mov	r5, r1
 800cf52:	d01b      	beq.n	800cf8c <__ieee754_rem_pio2+0x8c>
 800cf54:	a3ac      	add	r3, pc, #688	; (adr r3, 800d208 <__ieee754_rem_pio2+0x308>)
 800cf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5a:	f7f3 f9b5 	bl	80002c8 <__aeabi_dsub>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	460b      	mov	r3, r1
 800cf62:	e9ca 2300 	strd	r2, r3, [sl]
 800cf66:	4620      	mov	r0, r4
 800cf68:	4629      	mov	r1, r5
 800cf6a:	f7f3 f9ad 	bl	80002c8 <__aeabi_dsub>
 800cf6e:	a3a6      	add	r3, pc, #664	; (adr r3, 800d208 <__ieee754_rem_pio2+0x308>)
 800cf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf74:	f7f3 f9a8 	bl	80002c8 <__aeabi_dsub>
 800cf78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cf7c:	f04f 0b01 	mov.w	fp, #1
 800cf80:	4658      	mov	r0, fp
 800cf82:	b00b      	add	sp, #44	; 0x2c
 800cf84:	ecbd 8b02 	vpop	{d8}
 800cf88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf8c:	a3a0      	add	r3, pc, #640	; (adr r3, 800d210 <__ieee754_rem_pio2+0x310>)
 800cf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf92:	f7f3 f999 	bl	80002c8 <__aeabi_dsub>
 800cf96:	a3a0      	add	r3, pc, #640	; (adr r3, 800d218 <__ieee754_rem_pio2+0x318>)
 800cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	460d      	mov	r5, r1
 800cfa0:	f7f3 f992 	bl	80002c8 <__aeabi_dsub>
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	460b      	mov	r3, r1
 800cfa8:	e9ca 2300 	strd	r2, r3, [sl]
 800cfac:	4620      	mov	r0, r4
 800cfae:	4629      	mov	r1, r5
 800cfb0:	f7f3 f98a 	bl	80002c8 <__aeabi_dsub>
 800cfb4:	a398      	add	r3, pc, #608	; (adr r3, 800d218 <__ieee754_rem_pio2+0x318>)
 800cfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfba:	e7db      	b.n	800cf74 <__ieee754_rem_pio2+0x74>
 800cfbc:	f7f3 f986 	bl	80002cc <__adddf3>
 800cfc0:	45b0      	cmp	r8, r6
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	460d      	mov	r5, r1
 800cfc6:	d016      	beq.n	800cff6 <__ieee754_rem_pio2+0xf6>
 800cfc8:	a38f      	add	r3, pc, #572	; (adr r3, 800d208 <__ieee754_rem_pio2+0x308>)
 800cfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfce:	f7f3 f97d 	bl	80002cc <__adddf3>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	e9ca 2300 	strd	r2, r3, [sl]
 800cfda:	4620      	mov	r0, r4
 800cfdc:	4629      	mov	r1, r5
 800cfde:	f7f3 f973 	bl	80002c8 <__aeabi_dsub>
 800cfe2:	a389      	add	r3, pc, #548	; (adr r3, 800d208 <__ieee754_rem_pio2+0x308>)
 800cfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe8:	f7f3 f970 	bl	80002cc <__adddf3>
 800cfec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800cff0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cff4:	e7c4      	b.n	800cf80 <__ieee754_rem_pio2+0x80>
 800cff6:	a386      	add	r3, pc, #536	; (adr r3, 800d210 <__ieee754_rem_pio2+0x310>)
 800cff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffc:	f7f3 f966 	bl	80002cc <__adddf3>
 800d000:	a385      	add	r3, pc, #532	; (adr r3, 800d218 <__ieee754_rem_pio2+0x318>)
 800d002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d006:	4604      	mov	r4, r0
 800d008:	460d      	mov	r5, r1
 800d00a:	f7f3 f95f 	bl	80002cc <__adddf3>
 800d00e:	4602      	mov	r2, r0
 800d010:	460b      	mov	r3, r1
 800d012:	e9ca 2300 	strd	r2, r3, [sl]
 800d016:	4620      	mov	r0, r4
 800d018:	4629      	mov	r1, r5
 800d01a:	f7f3 f955 	bl	80002c8 <__aeabi_dsub>
 800d01e:	a37e      	add	r3, pc, #504	; (adr r3, 800d218 <__ieee754_rem_pio2+0x318>)
 800d020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d024:	e7e0      	b.n	800cfe8 <__ieee754_rem_pio2+0xe8>
 800d026:	4b87      	ldr	r3, [pc, #540]	; (800d244 <__ieee754_rem_pio2+0x344>)
 800d028:	4598      	cmp	r8, r3
 800d02a:	f300 80d9 	bgt.w	800d1e0 <__ieee754_rem_pio2+0x2e0>
 800d02e:	f000 feed 	bl	800de0c <fabs>
 800d032:	ec55 4b10 	vmov	r4, r5, d0
 800d036:	ee10 0a10 	vmov	r0, s0
 800d03a:	a379      	add	r3, pc, #484	; (adr r3, 800d220 <__ieee754_rem_pio2+0x320>)
 800d03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d040:	4629      	mov	r1, r5
 800d042:	f7f3 faf9 	bl	8000638 <__aeabi_dmul>
 800d046:	4b80      	ldr	r3, [pc, #512]	; (800d248 <__ieee754_rem_pio2+0x348>)
 800d048:	2200      	movs	r2, #0
 800d04a:	f7f3 f93f 	bl	80002cc <__adddf3>
 800d04e:	f7f3 fda3 	bl	8000b98 <__aeabi_d2iz>
 800d052:	4683      	mov	fp, r0
 800d054:	f7f3 fa86 	bl	8000564 <__aeabi_i2d>
 800d058:	4602      	mov	r2, r0
 800d05a:	460b      	mov	r3, r1
 800d05c:	ec43 2b18 	vmov	d8, r2, r3
 800d060:	a367      	add	r3, pc, #412	; (adr r3, 800d200 <__ieee754_rem_pio2+0x300>)
 800d062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d066:	f7f3 fae7 	bl	8000638 <__aeabi_dmul>
 800d06a:	4602      	mov	r2, r0
 800d06c:	460b      	mov	r3, r1
 800d06e:	4620      	mov	r0, r4
 800d070:	4629      	mov	r1, r5
 800d072:	f7f3 f929 	bl	80002c8 <__aeabi_dsub>
 800d076:	a364      	add	r3, pc, #400	; (adr r3, 800d208 <__ieee754_rem_pio2+0x308>)
 800d078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07c:	4606      	mov	r6, r0
 800d07e:	460f      	mov	r7, r1
 800d080:	ec51 0b18 	vmov	r0, r1, d8
 800d084:	f7f3 fad8 	bl	8000638 <__aeabi_dmul>
 800d088:	f1bb 0f1f 	cmp.w	fp, #31
 800d08c:	4604      	mov	r4, r0
 800d08e:	460d      	mov	r5, r1
 800d090:	dc0d      	bgt.n	800d0ae <__ieee754_rem_pio2+0x1ae>
 800d092:	4b6e      	ldr	r3, [pc, #440]	; (800d24c <__ieee754_rem_pio2+0x34c>)
 800d094:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800d098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d09c:	4543      	cmp	r3, r8
 800d09e:	d006      	beq.n	800d0ae <__ieee754_rem_pio2+0x1ae>
 800d0a0:	4622      	mov	r2, r4
 800d0a2:	462b      	mov	r3, r5
 800d0a4:	4630      	mov	r0, r6
 800d0a6:	4639      	mov	r1, r7
 800d0a8:	f7f3 f90e 	bl	80002c8 <__aeabi_dsub>
 800d0ac:	e00f      	b.n	800d0ce <__ieee754_rem_pio2+0x1ce>
 800d0ae:	462b      	mov	r3, r5
 800d0b0:	4622      	mov	r2, r4
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	4639      	mov	r1, r7
 800d0b6:	f7f3 f907 	bl	80002c8 <__aeabi_dsub>
 800d0ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d0be:	9303      	str	r3, [sp, #12]
 800d0c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d0c4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d0c8:	f1b8 0f10 	cmp.w	r8, #16
 800d0cc:	dc02      	bgt.n	800d0d4 <__ieee754_rem_pio2+0x1d4>
 800d0ce:	e9ca 0100 	strd	r0, r1, [sl]
 800d0d2:	e039      	b.n	800d148 <__ieee754_rem_pio2+0x248>
 800d0d4:	a34e      	add	r3, pc, #312	; (adr r3, 800d210 <__ieee754_rem_pio2+0x310>)
 800d0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0da:	ec51 0b18 	vmov	r0, r1, d8
 800d0de:	f7f3 faab 	bl	8000638 <__aeabi_dmul>
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	460d      	mov	r5, r1
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	4639      	mov	r1, r7
 800d0ee:	f7f3 f8eb 	bl	80002c8 <__aeabi_dsub>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	4680      	mov	r8, r0
 800d0f8:	4689      	mov	r9, r1
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	4639      	mov	r1, r7
 800d0fe:	f7f3 f8e3 	bl	80002c8 <__aeabi_dsub>
 800d102:	4622      	mov	r2, r4
 800d104:	462b      	mov	r3, r5
 800d106:	f7f3 f8df 	bl	80002c8 <__aeabi_dsub>
 800d10a:	a343      	add	r3, pc, #268	; (adr r3, 800d218 <__ieee754_rem_pio2+0x318>)
 800d10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d110:	4604      	mov	r4, r0
 800d112:	460d      	mov	r5, r1
 800d114:	ec51 0b18 	vmov	r0, r1, d8
 800d118:	f7f3 fa8e 	bl	8000638 <__aeabi_dmul>
 800d11c:	4622      	mov	r2, r4
 800d11e:	462b      	mov	r3, r5
 800d120:	f7f3 f8d2 	bl	80002c8 <__aeabi_dsub>
 800d124:	4602      	mov	r2, r0
 800d126:	460b      	mov	r3, r1
 800d128:	4604      	mov	r4, r0
 800d12a:	460d      	mov	r5, r1
 800d12c:	4640      	mov	r0, r8
 800d12e:	4649      	mov	r1, r9
 800d130:	f7f3 f8ca 	bl	80002c8 <__aeabi_dsub>
 800d134:	9a03      	ldr	r2, [sp, #12]
 800d136:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d13a:	1ad3      	subs	r3, r2, r3
 800d13c:	2b31      	cmp	r3, #49	; 0x31
 800d13e:	dc24      	bgt.n	800d18a <__ieee754_rem_pio2+0x28a>
 800d140:	e9ca 0100 	strd	r0, r1, [sl]
 800d144:	4646      	mov	r6, r8
 800d146:	464f      	mov	r7, r9
 800d148:	e9da 8900 	ldrd	r8, r9, [sl]
 800d14c:	4630      	mov	r0, r6
 800d14e:	4642      	mov	r2, r8
 800d150:	464b      	mov	r3, r9
 800d152:	4639      	mov	r1, r7
 800d154:	f7f3 f8b8 	bl	80002c8 <__aeabi_dsub>
 800d158:	462b      	mov	r3, r5
 800d15a:	4622      	mov	r2, r4
 800d15c:	f7f3 f8b4 	bl	80002c8 <__aeabi_dsub>
 800d160:	9b02      	ldr	r3, [sp, #8]
 800d162:	2b00      	cmp	r3, #0
 800d164:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d168:	f6bf af0a 	bge.w	800cf80 <__ieee754_rem_pio2+0x80>
 800d16c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d170:	f8ca 3004 	str.w	r3, [sl, #4]
 800d174:	f8ca 8000 	str.w	r8, [sl]
 800d178:	f8ca 0008 	str.w	r0, [sl, #8]
 800d17c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d180:	f8ca 300c 	str.w	r3, [sl, #12]
 800d184:	f1cb 0b00 	rsb	fp, fp, #0
 800d188:	e6fa      	b.n	800cf80 <__ieee754_rem_pio2+0x80>
 800d18a:	a327      	add	r3, pc, #156	; (adr r3, 800d228 <__ieee754_rem_pio2+0x328>)
 800d18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d190:	ec51 0b18 	vmov	r0, r1, d8
 800d194:	f7f3 fa50 	bl	8000638 <__aeabi_dmul>
 800d198:	4604      	mov	r4, r0
 800d19a:	460d      	mov	r5, r1
 800d19c:	4602      	mov	r2, r0
 800d19e:	460b      	mov	r3, r1
 800d1a0:	4640      	mov	r0, r8
 800d1a2:	4649      	mov	r1, r9
 800d1a4:	f7f3 f890 	bl	80002c8 <__aeabi_dsub>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	4606      	mov	r6, r0
 800d1ae:	460f      	mov	r7, r1
 800d1b0:	4640      	mov	r0, r8
 800d1b2:	4649      	mov	r1, r9
 800d1b4:	f7f3 f888 	bl	80002c8 <__aeabi_dsub>
 800d1b8:	4622      	mov	r2, r4
 800d1ba:	462b      	mov	r3, r5
 800d1bc:	f7f3 f884 	bl	80002c8 <__aeabi_dsub>
 800d1c0:	a31b      	add	r3, pc, #108	; (adr r3, 800d230 <__ieee754_rem_pio2+0x330>)
 800d1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c6:	4604      	mov	r4, r0
 800d1c8:	460d      	mov	r5, r1
 800d1ca:	ec51 0b18 	vmov	r0, r1, d8
 800d1ce:	f7f3 fa33 	bl	8000638 <__aeabi_dmul>
 800d1d2:	4622      	mov	r2, r4
 800d1d4:	462b      	mov	r3, r5
 800d1d6:	f7f3 f877 	bl	80002c8 <__aeabi_dsub>
 800d1da:	4604      	mov	r4, r0
 800d1dc:	460d      	mov	r5, r1
 800d1de:	e75f      	b.n	800d0a0 <__ieee754_rem_pio2+0x1a0>
 800d1e0:	4b1b      	ldr	r3, [pc, #108]	; (800d250 <__ieee754_rem_pio2+0x350>)
 800d1e2:	4598      	cmp	r8, r3
 800d1e4:	dd36      	ble.n	800d254 <__ieee754_rem_pio2+0x354>
 800d1e6:	ee10 2a10 	vmov	r2, s0
 800d1ea:	462b      	mov	r3, r5
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	f7f3 f86a 	bl	80002c8 <__aeabi_dsub>
 800d1f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d1f8:	e9ca 0100 	strd	r0, r1, [sl]
 800d1fc:	e694      	b.n	800cf28 <__ieee754_rem_pio2+0x28>
 800d1fe:	bf00      	nop
 800d200:	54400000 	.word	0x54400000
 800d204:	3ff921fb 	.word	0x3ff921fb
 800d208:	1a626331 	.word	0x1a626331
 800d20c:	3dd0b461 	.word	0x3dd0b461
 800d210:	1a600000 	.word	0x1a600000
 800d214:	3dd0b461 	.word	0x3dd0b461
 800d218:	2e037073 	.word	0x2e037073
 800d21c:	3ba3198a 	.word	0x3ba3198a
 800d220:	6dc9c883 	.word	0x6dc9c883
 800d224:	3fe45f30 	.word	0x3fe45f30
 800d228:	2e000000 	.word	0x2e000000
 800d22c:	3ba3198a 	.word	0x3ba3198a
 800d230:	252049c1 	.word	0x252049c1
 800d234:	397b839a 	.word	0x397b839a
 800d238:	3fe921fb 	.word	0x3fe921fb
 800d23c:	4002d97b 	.word	0x4002d97b
 800d240:	3ff921fb 	.word	0x3ff921fb
 800d244:	413921fb 	.word	0x413921fb
 800d248:	3fe00000 	.word	0x3fe00000
 800d24c:	08010c10 	.word	0x08010c10
 800d250:	7fefffff 	.word	0x7fefffff
 800d254:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d258:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d25c:	ee10 0a10 	vmov	r0, s0
 800d260:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d264:	ee10 6a10 	vmov	r6, s0
 800d268:	460f      	mov	r7, r1
 800d26a:	f7f3 fc95 	bl	8000b98 <__aeabi_d2iz>
 800d26e:	f7f3 f979 	bl	8000564 <__aeabi_i2d>
 800d272:	4602      	mov	r2, r0
 800d274:	460b      	mov	r3, r1
 800d276:	4630      	mov	r0, r6
 800d278:	4639      	mov	r1, r7
 800d27a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d27e:	f7f3 f823 	bl	80002c8 <__aeabi_dsub>
 800d282:	4b22      	ldr	r3, [pc, #136]	; (800d30c <__ieee754_rem_pio2+0x40c>)
 800d284:	2200      	movs	r2, #0
 800d286:	f7f3 f9d7 	bl	8000638 <__aeabi_dmul>
 800d28a:	460f      	mov	r7, r1
 800d28c:	4606      	mov	r6, r0
 800d28e:	f7f3 fc83 	bl	8000b98 <__aeabi_d2iz>
 800d292:	f7f3 f967 	bl	8000564 <__aeabi_i2d>
 800d296:	4602      	mov	r2, r0
 800d298:	460b      	mov	r3, r1
 800d29a:	4630      	mov	r0, r6
 800d29c:	4639      	mov	r1, r7
 800d29e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d2a2:	f7f3 f811 	bl	80002c8 <__aeabi_dsub>
 800d2a6:	4b19      	ldr	r3, [pc, #100]	; (800d30c <__ieee754_rem_pio2+0x40c>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	f7f3 f9c5 	bl	8000638 <__aeabi_dmul>
 800d2ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d2b2:	ad04      	add	r5, sp, #16
 800d2b4:	f04f 0803 	mov.w	r8, #3
 800d2b8:	46a9      	mov	r9, r5
 800d2ba:	2600      	movs	r6, #0
 800d2bc:	2700      	movs	r7, #0
 800d2be:	4632      	mov	r2, r6
 800d2c0:	463b      	mov	r3, r7
 800d2c2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d2c6:	46c3      	mov	fp, r8
 800d2c8:	3d08      	subs	r5, #8
 800d2ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d2ce:	f7f3 fc1b 	bl	8000b08 <__aeabi_dcmpeq>
 800d2d2:	2800      	cmp	r0, #0
 800d2d4:	d1f3      	bne.n	800d2be <__ieee754_rem_pio2+0x3be>
 800d2d6:	4b0e      	ldr	r3, [pc, #56]	; (800d310 <__ieee754_rem_pio2+0x410>)
 800d2d8:	9301      	str	r3, [sp, #4]
 800d2da:	2302      	movs	r3, #2
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	4622      	mov	r2, r4
 800d2e0:	465b      	mov	r3, fp
 800d2e2:	4651      	mov	r1, sl
 800d2e4:	4648      	mov	r0, r9
 800d2e6:	f000 f993 	bl	800d610 <__kernel_rem_pio2>
 800d2ea:	9b02      	ldr	r3, [sp, #8]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	4683      	mov	fp, r0
 800d2f0:	f6bf ae46 	bge.w	800cf80 <__ieee754_rem_pio2+0x80>
 800d2f4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d2f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d2fc:	f8ca 3004 	str.w	r3, [sl, #4]
 800d300:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d304:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d308:	e73a      	b.n	800d180 <__ieee754_rem_pio2+0x280>
 800d30a:	bf00      	nop
 800d30c:	41700000 	.word	0x41700000
 800d310:	08010c90 	.word	0x08010c90

0800d314 <__ieee754_sqrt>:
 800d314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d318:	ec55 4b10 	vmov	r4, r5, d0
 800d31c:	4e56      	ldr	r6, [pc, #344]	; (800d478 <__ieee754_sqrt+0x164>)
 800d31e:	43ae      	bics	r6, r5
 800d320:	ee10 0a10 	vmov	r0, s0
 800d324:	ee10 3a10 	vmov	r3, s0
 800d328:	4629      	mov	r1, r5
 800d32a:	462a      	mov	r2, r5
 800d32c:	d110      	bne.n	800d350 <__ieee754_sqrt+0x3c>
 800d32e:	ee10 2a10 	vmov	r2, s0
 800d332:	462b      	mov	r3, r5
 800d334:	f7f3 f980 	bl	8000638 <__aeabi_dmul>
 800d338:	4602      	mov	r2, r0
 800d33a:	460b      	mov	r3, r1
 800d33c:	4620      	mov	r0, r4
 800d33e:	4629      	mov	r1, r5
 800d340:	f7f2 ffc4 	bl	80002cc <__adddf3>
 800d344:	4604      	mov	r4, r0
 800d346:	460d      	mov	r5, r1
 800d348:	ec45 4b10 	vmov	d0, r4, r5
 800d34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d350:	2d00      	cmp	r5, #0
 800d352:	dc10      	bgt.n	800d376 <__ieee754_sqrt+0x62>
 800d354:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d358:	4330      	orrs	r0, r6
 800d35a:	d0f5      	beq.n	800d348 <__ieee754_sqrt+0x34>
 800d35c:	b15d      	cbz	r5, 800d376 <__ieee754_sqrt+0x62>
 800d35e:	ee10 2a10 	vmov	r2, s0
 800d362:	462b      	mov	r3, r5
 800d364:	ee10 0a10 	vmov	r0, s0
 800d368:	f7f2 ffae 	bl	80002c8 <__aeabi_dsub>
 800d36c:	4602      	mov	r2, r0
 800d36e:	460b      	mov	r3, r1
 800d370:	f7f3 fa8c 	bl	800088c <__aeabi_ddiv>
 800d374:	e7e6      	b.n	800d344 <__ieee754_sqrt+0x30>
 800d376:	1509      	asrs	r1, r1, #20
 800d378:	d076      	beq.n	800d468 <__ieee754_sqrt+0x154>
 800d37a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d37e:	07ce      	lsls	r6, r1, #31
 800d380:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800d384:	bf5e      	ittt	pl
 800d386:	0fda      	lsrpl	r2, r3, #31
 800d388:	005b      	lslpl	r3, r3, #1
 800d38a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800d38e:	0fda      	lsrs	r2, r3, #31
 800d390:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800d394:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800d398:	2000      	movs	r0, #0
 800d39a:	106d      	asrs	r5, r5, #1
 800d39c:	005b      	lsls	r3, r3, #1
 800d39e:	f04f 0e16 	mov.w	lr, #22
 800d3a2:	4684      	mov	ip, r0
 800d3a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d3a8:	eb0c 0401 	add.w	r4, ip, r1
 800d3ac:	4294      	cmp	r4, r2
 800d3ae:	bfde      	ittt	le
 800d3b0:	1b12      	suble	r2, r2, r4
 800d3b2:	eb04 0c01 	addle.w	ip, r4, r1
 800d3b6:	1840      	addle	r0, r0, r1
 800d3b8:	0052      	lsls	r2, r2, #1
 800d3ba:	f1be 0e01 	subs.w	lr, lr, #1
 800d3be:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d3c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d3c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d3ca:	d1ed      	bne.n	800d3a8 <__ieee754_sqrt+0x94>
 800d3cc:	4671      	mov	r1, lr
 800d3ce:	2720      	movs	r7, #32
 800d3d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d3d4:	4562      	cmp	r2, ip
 800d3d6:	eb04 060e 	add.w	r6, r4, lr
 800d3da:	dc02      	bgt.n	800d3e2 <__ieee754_sqrt+0xce>
 800d3dc:	d113      	bne.n	800d406 <__ieee754_sqrt+0xf2>
 800d3de:	429e      	cmp	r6, r3
 800d3e0:	d811      	bhi.n	800d406 <__ieee754_sqrt+0xf2>
 800d3e2:	2e00      	cmp	r6, #0
 800d3e4:	eb06 0e04 	add.w	lr, r6, r4
 800d3e8:	da43      	bge.n	800d472 <__ieee754_sqrt+0x15e>
 800d3ea:	f1be 0f00 	cmp.w	lr, #0
 800d3ee:	db40      	blt.n	800d472 <__ieee754_sqrt+0x15e>
 800d3f0:	f10c 0801 	add.w	r8, ip, #1
 800d3f4:	eba2 020c 	sub.w	r2, r2, ip
 800d3f8:	429e      	cmp	r6, r3
 800d3fa:	bf88      	it	hi
 800d3fc:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800d400:	1b9b      	subs	r3, r3, r6
 800d402:	4421      	add	r1, r4
 800d404:	46c4      	mov	ip, r8
 800d406:	0052      	lsls	r2, r2, #1
 800d408:	3f01      	subs	r7, #1
 800d40a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d40e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d412:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d416:	d1dd      	bne.n	800d3d4 <__ieee754_sqrt+0xc0>
 800d418:	4313      	orrs	r3, r2
 800d41a:	d006      	beq.n	800d42a <__ieee754_sqrt+0x116>
 800d41c:	1c4c      	adds	r4, r1, #1
 800d41e:	bf13      	iteet	ne
 800d420:	3101      	addne	r1, #1
 800d422:	3001      	addeq	r0, #1
 800d424:	4639      	moveq	r1, r7
 800d426:	f021 0101 	bicne.w	r1, r1, #1
 800d42a:	1043      	asrs	r3, r0, #1
 800d42c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d430:	0849      	lsrs	r1, r1, #1
 800d432:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d436:	07c2      	lsls	r2, r0, #31
 800d438:	bf48      	it	mi
 800d43a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d43e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800d442:	460c      	mov	r4, r1
 800d444:	463d      	mov	r5, r7
 800d446:	e77f      	b.n	800d348 <__ieee754_sqrt+0x34>
 800d448:	0ada      	lsrs	r2, r3, #11
 800d44a:	3815      	subs	r0, #21
 800d44c:	055b      	lsls	r3, r3, #21
 800d44e:	2a00      	cmp	r2, #0
 800d450:	d0fa      	beq.n	800d448 <__ieee754_sqrt+0x134>
 800d452:	02d7      	lsls	r7, r2, #11
 800d454:	d50a      	bpl.n	800d46c <__ieee754_sqrt+0x158>
 800d456:	f1c1 0420 	rsb	r4, r1, #32
 800d45a:	fa23 f404 	lsr.w	r4, r3, r4
 800d45e:	1e4d      	subs	r5, r1, #1
 800d460:	408b      	lsls	r3, r1
 800d462:	4322      	orrs	r2, r4
 800d464:	1b41      	subs	r1, r0, r5
 800d466:	e788      	b.n	800d37a <__ieee754_sqrt+0x66>
 800d468:	4608      	mov	r0, r1
 800d46a:	e7f0      	b.n	800d44e <__ieee754_sqrt+0x13a>
 800d46c:	0052      	lsls	r2, r2, #1
 800d46e:	3101      	adds	r1, #1
 800d470:	e7ef      	b.n	800d452 <__ieee754_sqrt+0x13e>
 800d472:	46e0      	mov	r8, ip
 800d474:	e7be      	b.n	800d3f4 <__ieee754_sqrt+0xe0>
 800d476:	bf00      	nop
 800d478:	7ff00000 	.word	0x7ff00000
 800d47c:	00000000 	.word	0x00000000

0800d480 <__kernel_cos>:
 800d480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d484:	ec57 6b10 	vmov	r6, r7, d0
 800d488:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d48c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d490:	ed8d 1b00 	vstr	d1, [sp]
 800d494:	da07      	bge.n	800d4a6 <__kernel_cos+0x26>
 800d496:	ee10 0a10 	vmov	r0, s0
 800d49a:	4639      	mov	r1, r7
 800d49c:	f7f3 fb7c 	bl	8000b98 <__aeabi_d2iz>
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	f000 8088 	beq.w	800d5b6 <__kernel_cos+0x136>
 800d4a6:	4632      	mov	r2, r6
 800d4a8:	463b      	mov	r3, r7
 800d4aa:	4630      	mov	r0, r6
 800d4ac:	4639      	mov	r1, r7
 800d4ae:	f7f3 f8c3 	bl	8000638 <__aeabi_dmul>
 800d4b2:	4b51      	ldr	r3, [pc, #324]	; (800d5f8 <__kernel_cos+0x178>)
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	4604      	mov	r4, r0
 800d4b8:	460d      	mov	r5, r1
 800d4ba:	f7f3 f8bd 	bl	8000638 <__aeabi_dmul>
 800d4be:	a340      	add	r3, pc, #256	; (adr r3, 800d5c0 <__kernel_cos+0x140>)
 800d4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c4:	4682      	mov	sl, r0
 800d4c6:	468b      	mov	fp, r1
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	4629      	mov	r1, r5
 800d4cc:	f7f3 f8b4 	bl	8000638 <__aeabi_dmul>
 800d4d0:	a33d      	add	r3, pc, #244	; (adr r3, 800d5c8 <__kernel_cos+0x148>)
 800d4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d6:	f7f2 fef9 	bl	80002cc <__adddf3>
 800d4da:	4622      	mov	r2, r4
 800d4dc:	462b      	mov	r3, r5
 800d4de:	f7f3 f8ab 	bl	8000638 <__aeabi_dmul>
 800d4e2:	a33b      	add	r3, pc, #236	; (adr r3, 800d5d0 <__kernel_cos+0x150>)
 800d4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e8:	f7f2 feee 	bl	80002c8 <__aeabi_dsub>
 800d4ec:	4622      	mov	r2, r4
 800d4ee:	462b      	mov	r3, r5
 800d4f0:	f7f3 f8a2 	bl	8000638 <__aeabi_dmul>
 800d4f4:	a338      	add	r3, pc, #224	; (adr r3, 800d5d8 <__kernel_cos+0x158>)
 800d4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fa:	f7f2 fee7 	bl	80002cc <__adddf3>
 800d4fe:	4622      	mov	r2, r4
 800d500:	462b      	mov	r3, r5
 800d502:	f7f3 f899 	bl	8000638 <__aeabi_dmul>
 800d506:	a336      	add	r3, pc, #216	; (adr r3, 800d5e0 <__kernel_cos+0x160>)
 800d508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50c:	f7f2 fedc 	bl	80002c8 <__aeabi_dsub>
 800d510:	4622      	mov	r2, r4
 800d512:	462b      	mov	r3, r5
 800d514:	f7f3 f890 	bl	8000638 <__aeabi_dmul>
 800d518:	a333      	add	r3, pc, #204	; (adr r3, 800d5e8 <__kernel_cos+0x168>)
 800d51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51e:	f7f2 fed5 	bl	80002cc <__adddf3>
 800d522:	4622      	mov	r2, r4
 800d524:	462b      	mov	r3, r5
 800d526:	f7f3 f887 	bl	8000638 <__aeabi_dmul>
 800d52a:	4622      	mov	r2, r4
 800d52c:	462b      	mov	r3, r5
 800d52e:	f7f3 f883 	bl	8000638 <__aeabi_dmul>
 800d532:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d536:	4604      	mov	r4, r0
 800d538:	460d      	mov	r5, r1
 800d53a:	4630      	mov	r0, r6
 800d53c:	4639      	mov	r1, r7
 800d53e:	f7f3 f87b 	bl	8000638 <__aeabi_dmul>
 800d542:	460b      	mov	r3, r1
 800d544:	4602      	mov	r2, r0
 800d546:	4629      	mov	r1, r5
 800d548:	4620      	mov	r0, r4
 800d54a:	f7f2 febd 	bl	80002c8 <__aeabi_dsub>
 800d54e:	4b2b      	ldr	r3, [pc, #172]	; (800d5fc <__kernel_cos+0x17c>)
 800d550:	4598      	cmp	r8, r3
 800d552:	4606      	mov	r6, r0
 800d554:	460f      	mov	r7, r1
 800d556:	dc10      	bgt.n	800d57a <__kernel_cos+0xfa>
 800d558:	4602      	mov	r2, r0
 800d55a:	460b      	mov	r3, r1
 800d55c:	4650      	mov	r0, sl
 800d55e:	4659      	mov	r1, fp
 800d560:	f7f2 feb2 	bl	80002c8 <__aeabi_dsub>
 800d564:	460b      	mov	r3, r1
 800d566:	4926      	ldr	r1, [pc, #152]	; (800d600 <__kernel_cos+0x180>)
 800d568:	4602      	mov	r2, r0
 800d56a:	2000      	movs	r0, #0
 800d56c:	f7f2 feac 	bl	80002c8 <__aeabi_dsub>
 800d570:	ec41 0b10 	vmov	d0, r0, r1
 800d574:	b003      	add	sp, #12
 800d576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d57a:	4b22      	ldr	r3, [pc, #136]	; (800d604 <__kernel_cos+0x184>)
 800d57c:	4920      	ldr	r1, [pc, #128]	; (800d600 <__kernel_cos+0x180>)
 800d57e:	4598      	cmp	r8, r3
 800d580:	bfcc      	ite	gt
 800d582:	4d21      	ldrgt	r5, [pc, #132]	; (800d608 <__kernel_cos+0x188>)
 800d584:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d588:	2400      	movs	r4, #0
 800d58a:	4622      	mov	r2, r4
 800d58c:	462b      	mov	r3, r5
 800d58e:	2000      	movs	r0, #0
 800d590:	f7f2 fe9a 	bl	80002c8 <__aeabi_dsub>
 800d594:	4622      	mov	r2, r4
 800d596:	4680      	mov	r8, r0
 800d598:	4689      	mov	r9, r1
 800d59a:	462b      	mov	r3, r5
 800d59c:	4650      	mov	r0, sl
 800d59e:	4659      	mov	r1, fp
 800d5a0:	f7f2 fe92 	bl	80002c8 <__aeabi_dsub>
 800d5a4:	4632      	mov	r2, r6
 800d5a6:	463b      	mov	r3, r7
 800d5a8:	f7f2 fe8e 	bl	80002c8 <__aeabi_dsub>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	4640      	mov	r0, r8
 800d5b2:	4649      	mov	r1, r9
 800d5b4:	e7da      	b.n	800d56c <__kernel_cos+0xec>
 800d5b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d5f0 <__kernel_cos+0x170>
 800d5ba:	e7db      	b.n	800d574 <__kernel_cos+0xf4>
 800d5bc:	f3af 8000 	nop.w
 800d5c0:	be8838d4 	.word	0xbe8838d4
 800d5c4:	bda8fae9 	.word	0xbda8fae9
 800d5c8:	bdb4b1c4 	.word	0xbdb4b1c4
 800d5cc:	3e21ee9e 	.word	0x3e21ee9e
 800d5d0:	809c52ad 	.word	0x809c52ad
 800d5d4:	3e927e4f 	.word	0x3e927e4f
 800d5d8:	19cb1590 	.word	0x19cb1590
 800d5dc:	3efa01a0 	.word	0x3efa01a0
 800d5e0:	16c15177 	.word	0x16c15177
 800d5e4:	3f56c16c 	.word	0x3f56c16c
 800d5e8:	5555554c 	.word	0x5555554c
 800d5ec:	3fa55555 	.word	0x3fa55555
 800d5f0:	00000000 	.word	0x00000000
 800d5f4:	3ff00000 	.word	0x3ff00000
 800d5f8:	3fe00000 	.word	0x3fe00000
 800d5fc:	3fd33332 	.word	0x3fd33332
 800d600:	3ff00000 	.word	0x3ff00000
 800d604:	3fe90000 	.word	0x3fe90000
 800d608:	3fd20000 	.word	0x3fd20000
 800d60c:	00000000 	.word	0x00000000

0800d610 <__kernel_rem_pio2>:
 800d610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d614:	ed2d 8b02 	vpush	{d8}
 800d618:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d61c:	f112 0f14 	cmn.w	r2, #20
 800d620:	9308      	str	r3, [sp, #32]
 800d622:	9101      	str	r1, [sp, #4]
 800d624:	4bc6      	ldr	r3, [pc, #792]	; (800d940 <__kernel_rem_pio2+0x330>)
 800d626:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d628:	9009      	str	r0, [sp, #36]	; 0x24
 800d62a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d62e:	9304      	str	r3, [sp, #16]
 800d630:	9b08      	ldr	r3, [sp, #32]
 800d632:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d636:	bfa8      	it	ge
 800d638:	1ed4      	subge	r4, r2, #3
 800d63a:	9306      	str	r3, [sp, #24]
 800d63c:	bfb2      	itee	lt
 800d63e:	2400      	movlt	r4, #0
 800d640:	2318      	movge	r3, #24
 800d642:	fb94 f4f3 	sdivge	r4, r4, r3
 800d646:	f06f 0317 	mvn.w	r3, #23
 800d64a:	fb04 3303 	mla	r3, r4, r3, r3
 800d64e:	eb03 0a02 	add.w	sl, r3, r2
 800d652:	9b04      	ldr	r3, [sp, #16]
 800d654:	9a06      	ldr	r2, [sp, #24]
 800d656:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800d930 <__kernel_rem_pio2+0x320>
 800d65a:	eb03 0802 	add.w	r8, r3, r2
 800d65e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d660:	1aa7      	subs	r7, r4, r2
 800d662:	ae20      	add	r6, sp, #128	; 0x80
 800d664:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d668:	2500      	movs	r5, #0
 800d66a:	4545      	cmp	r5, r8
 800d66c:	dd18      	ble.n	800d6a0 <__kernel_rem_pio2+0x90>
 800d66e:	9b08      	ldr	r3, [sp, #32]
 800d670:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d674:	aa20      	add	r2, sp, #128	; 0x80
 800d676:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800d930 <__kernel_rem_pio2+0x320>
 800d67a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d67e:	f1c3 0301 	rsb	r3, r3, #1
 800d682:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d686:	9307      	str	r3, [sp, #28]
 800d688:	9b07      	ldr	r3, [sp, #28]
 800d68a:	9a04      	ldr	r2, [sp, #16]
 800d68c:	4443      	add	r3, r8
 800d68e:	429a      	cmp	r2, r3
 800d690:	db2f      	blt.n	800d6f2 <__kernel_rem_pio2+0xe2>
 800d692:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d696:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d69a:	462f      	mov	r7, r5
 800d69c:	2600      	movs	r6, #0
 800d69e:	e01b      	b.n	800d6d8 <__kernel_rem_pio2+0xc8>
 800d6a0:	42ef      	cmn	r7, r5
 800d6a2:	d407      	bmi.n	800d6b4 <__kernel_rem_pio2+0xa4>
 800d6a4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d6a8:	f7f2 ff5c 	bl	8000564 <__aeabi_i2d>
 800d6ac:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d6b0:	3501      	adds	r5, #1
 800d6b2:	e7da      	b.n	800d66a <__kernel_rem_pio2+0x5a>
 800d6b4:	ec51 0b18 	vmov	r0, r1, d8
 800d6b8:	e7f8      	b.n	800d6ac <__kernel_rem_pio2+0x9c>
 800d6ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6be:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d6c2:	f7f2 ffb9 	bl	8000638 <__aeabi_dmul>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6ce:	f7f2 fdfd 	bl	80002cc <__adddf3>
 800d6d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6d6:	3601      	adds	r6, #1
 800d6d8:	9b06      	ldr	r3, [sp, #24]
 800d6da:	429e      	cmp	r6, r3
 800d6dc:	f1a7 0708 	sub.w	r7, r7, #8
 800d6e0:	ddeb      	ble.n	800d6ba <__kernel_rem_pio2+0xaa>
 800d6e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6e6:	3508      	adds	r5, #8
 800d6e8:	ecab 7b02 	vstmia	fp!, {d7}
 800d6ec:	f108 0801 	add.w	r8, r8, #1
 800d6f0:	e7ca      	b.n	800d688 <__kernel_rem_pio2+0x78>
 800d6f2:	9b04      	ldr	r3, [sp, #16]
 800d6f4:	aa0c      	add	r2, sp, #48	; 0x30
 800d6f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d6fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6fc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d6fe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d702:	9c04      	ldr	r4, [sp, #16]
 800d704:	930a      	str	r3, [sp, #40]	; 0x28
 800d706:	ab98      	add	r3, sp, #608	; 0x260
 800d708:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d70c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d710:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800d714:	f8cd b008 	str.w	fp, [sp, #8]
 800d718:	4625      	mov	r5, r4
 800d71a:	2d00      	cmp	r5, #0
 800d71c:	dc78      	bgt.n	800d810 <__kernel_rem_pio2+0x200>
 800d71e:	ec47 6b10 	vmov	d0, r6, r7
 800d722:	4650      	mov	r0, sl
 800d724:	f000 fc94 	bl	800e050 <scalbn>
 800d728:	ec57 6b10 	vmov	r6, r7, d0
 800d72c:	2200      	movs	r2, #0
 800d72e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d732:	ee10 0a10 	vmov	r0, s0
 800d736:	4639      	mov	r1, r7
 800d738:	f7f2 ff7e 	bl	8000638 <__aeabi_dmul>
 800d73c:	ec41 0b10 	vmov	d0, r0, r1
 800d740:	f000 fb7a 	bl	800de38 <floor>
 800d744:	4b7f      	ldr	r3, [pc, #508]	; (800d944 <__kernel_rem_pio2+0x334>)
 800d746:	ec51 0b10 	vmov	r0, r1, d0
 800d74a:	2200      	movs	r2, #0
 800d74c:	f7f2 ff74 	bl	8000638 <__aeabi_dmul>
 800d750:	4602      	mov	r2, r0
 800d752:	460b      	mov	r3, r1
 800d754:	4630      	mov	r0, r6
 800d756:	4639      	mov	r1, r7
 800d758:	f7f2 fdb6 	bl	80002c8 <__aeabi_dsub>
 800d75c:	460f      	mov	r7, r1
 800d75e:	4606      	mov	r6, r0
 800d760:	f7f3 fa1a 	bl	8000b98 <__aeabi_d2iz>
 800d764:	9007      	str	r0, [sp, #28]
 800d766:	f7f2 fefd 	bl	8000564 <__aeabi_i2d>
 800d76a:	4602      	mov	r2, r0
 800d76c:	460b      	mov	r3, r1
 800d76e:	4630      	mov	r0, r6
 800d770:	4639      	mov	r1, r7
 800d772:	f7f2 fda9 	bl	80002c8 <__aeabi_dsub>
 800d776:	f1ba 0f00 	cmp.w	sl, #0
 800d77a:	4606      	mov	r6, r0
 800d77c:	460f      	mov	r7, r1
 800d77e:	dd70      	ble.n	800d862 <__kernel_rem_pio2+0x252>
 800d780:	1e62      	subs	r2, r4, #1
 800d782:	ab0c      	add	r3, sp, #48	; 0x30
 800d784:	9d07      	ldr	r5, [sp, #28]
 800d786:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d78a:	f1ca 0118 	rsb	r1, sl, #24
 800d78e:	fa40 f301 	asr.w	r3, r0, r1
 800d792:	441d      	add	r5, r3
 800d794:	408b      	lsls	r3, r1
 800d796:	1ac0      	subs	r0, r0, r3
 800d798:	ab0c      	add	r3, sp, #48	; 0x30
 800d79a:	9507      	str	r5, [sp, #28]
 800d79c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d7a0:	f1ca 0317 	rsb	r3, sl, #23
 800d7a4:	fa40 f303 	asr.w	r3, r0, r3
 800d7a8:	9302      	str	r3, [sp, #8]
 800d7aa:	9b02      	ldr	r3, [sp, #8]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	dd66      	ble.n	800d87e <__kernel_rem_pio2+0x26e>
 800d7b0:	9b07      	ldr	r3, [sp, #28]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	9307      	str	r3, [sp, #28]
 800d7b8:	4615      	mov	r5, r2
 800d7ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d7be:	4294      	cmp	r4, r2
 800d7c0:	f300 8099 	bgt.w	800d8f6 <__kernel_rem_pio2+0x2e6>
 800d7c4:	f1ba 0f00 	cmp.w	sl, #0
 800d7c8:	dd07      	ble.n	800d7da <__kernel_rem_pio2+0x1ca>
 800d7ca:	f1ba 0f01 	cmp.w	sl, #1
 800d7ce:	f000 80a5 	beq.w	800d91c <__kernel_rem_pio2+0x30c>
 800d7d2:	f1ba 0f02 	cmp.w	sl, #2
 800d7d6:	f000 80c1 	beq.w	800d95c <__kernel_rem_pio2+0x34c>
 800d7da:	9b02      	ldr	r3, [sp, #8]
 800d7dc:	2b02      	cmp	r3, #2
 800d7de:	d14e      	bne.n	800d87e <__kernel_rem_pio2+0x26e>
 800d7e0:	4632      	mov	r2, r6
 800d7e2:	463b      	mov	r3, r7
 800d7e4:	4958      	ldr	r1, [pc, #352]	; (800d948 <__kernel_rem_pio2+0x338>)
 800d7e6:	2000      	movs	r0, #0
 800d7e8:	f7f2 fd6e 	bl	80002c8 <__aeabi_dsub>
 800d7ec:	4606      	mov	r6, r0
 800d7ee:	460f      	mov	r7, r1
 800d7f0:	2d00      	cmp	r5, #0
 800d7f2:	d044      	beq.n	800d87e <__kernel_rem_pio2+0x26e>
 800d7f4:	4650      	mov	r0, sl
 800d7f6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800d938 <__kernel_rem_pio2+0x328>
 800d7fa:	f000 fc29 	bl	800e050 <scalbn>
 800d7fe:	4630      	mov	r0, r6
 800d800:	4639      	mov	r1, r7
 800d802:	ec53 2b10 	vmov	r2, r3, d0
 800d806:	f7f2 fd5f 	bl	80002c8 <__aeabi_dsub>
 800d80a:	4606      	mov	r6, r0
 800d80c:	460f      	mov	r7, r1
 800d80e:	e036      	b.n	800d87e <__kernel_rem_pio2+0x26e>
 800d810:	4b4e      	ldr	r3, [pc, #312]	; (800d94c <__kernel_rem_pio2+0x33c>)
 800d812:	2200      	movs	r2, #0
 800d814:	4630      	mov	r0, r6
 800d816:	4639      	mov	r1, r7
 800d818:	f7f2 ff0e 	bl	8000638 <__aeabi_dmul>
 800d81c:	f7f3 f9bc 	bl	8000b98 <__aeabi_d2iz>
 800d820:	f7f2 fea0 	bl	8000564 <__aeabi_i2d>
 800d824:	4b4a      	ldr	r3, [pc, #296]	; (800d950 <__kernel_rem_pio2+0x340>)
 800d826:	2200      	movs	r2, #0
 800d828:	4680      	mov	r8, r0
 800d82a:	4689      	mov	r9, r1
 800d82c:	f7f2 ff04 	bl	8000638 <__aeabi_dmul>
 800d830:	4602      	mov	r2, r0
 800d832:	460b      	mov	r3, r1
 800d834:	4630      	mov	r0, r6
 800d836:	4639      	mov	r1, r7
 800d838:	f7f2 fd46 	bl	80002c8 <__aeabi_dsub>
 800d83c:	f7f3 f9ac 	bl	8000b98 <__aeabi_d2iz>
 800d840:	9b02      	ldr	r3, [sp, #8]
 800d842:	f843 0b04 	str.w	r0, [r3], #4
 800d846:	3d01      	subs	r5, #1
 800d848:	9302      	str	r3, [sp, #8]
 800d84a:	ab70      	add	r3, sp, #448	; 0x1c0
 800d84c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d854:	4640      	mov	r0, r8
 800d856:	4649      	mov	r1, r9
 800d858:	f7f2 fd38 	bl	80002cc <__adddf3>
 800d85c:	4606      	mov	r6, r0
 800d85e:	460f      	mov	r7, r1
 800d860:	e75b      	b.n	800d71a <__kernel_rem_pio2+0x10a>
 800d862:	d105      	bne.n	800d870 <__kernel_rem_pio2+0x260>
 800d864:	1e63      	subs	r3, r4, #1
 800d866:	aa0c      	add	r2, sp, #48	; 0x30
 800d868:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d86c:	15c3      	asrs	r3, r0, #23
 800d86e:	e79b      	b.n	800d7a8 <__kernel_rem_pio2+0x198>
 800d870:	4b38      	ldr	r3, [pc, #224]	; (800d954 <__kernel_rem_pio2+0x344>)
 800d872:	2200      	movs	r2, #0
 800d874:	f7f3 f966 	bl	8000b44 <__aeabi_dcmpge>
 800d878:	2800      	cmp	r0, #0
 800d87a:	d139      	bne.n	800d8f0 <__kernel_rem_pio2+0x2e0>
 800d87c:	9002      	str	r0, [sp, #8]
 800d87e:	2200      	movs	r2, #0
 800d880:	2300      	movs	r3, #0
 800d882:	4630      	mov	r0, r6
 800d884:	4639      	mov	r1, r7
 800d886:	f7f3 f93f 	bl	8000b08 <__aeabi_dcmpeq>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	f000 80b4 	beq.w	800d9f8 <__kernel_rem_pio2+0x3e8>
 800d890:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800d894:	465b      	mov	r3, fp
 800d896:	2200      	movs	r2, #0
 800d898:	9904      	ldr	r1, [sp, #16]
 800d89a:	428b      	cmp	r3, r1
 800d89c:	da65      	bge.n	800d96a <__kernel_rem_pio2+0x35a>
 800d89e:	2a00      	cmp	r2, #0
 800d8a0:	d07b      	beq.n	800d99a <__kernel_rem_pio2+0x38a>
 800d8a2:	ab0c      	add	r3, sp, #48	; 0x30
 800d8a4:	f1aa 0a18 	sub.w	sl, sl, #24
 800d8a8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	f000 80a0 	beq.w	800d9f2 <__kernel_rem_pio2+0x3e2>
 800d8b2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800d938 <__kernel_rem_pio2+0x328>
 800d8b6:	4650      	mov	r0, sl
 800d8b8:	f000 fbca 	bl	800e050 <scalbn>
 800d8bc:	4f23      	ldr	r7, [pc, #140]	; (800d94c <__kernel_rem_pio2+0x33c>)
 800d8be:	ec55 4b10 	vmov	r4, r5, d0
 800d8c2:	46d8      	mov	r8, fp
 800d8c4:	2600      	movs	r6, #0
 800d8c6:	f1b8 0f00 	cmp.w	r8, #0
 800d8ca:	f280 80cf 	bge.w	800da6c <__kernel_rem_pio2+0x45c>
 800d8ce:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800d930 <__kernel_rem_pio2+0x320>
 800d8d2:	465f      	mov	r7, fp
 800d8d4:	f04f 0800 	mov.w	r8, #0
 800d8d8:	2f00      	cmp	r7, #0
 800d8da:	f2c0 80fd 	blt.w	800dad8 <__kernel_rem_pio2+0x4c8>
 800d8de:	ab70      	add	r3, sp, #448	; 0x1c0
 800d8e0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800d958 <__kernel_rem_pio2+0x348>
 800d8e4:	ec55 4b18 	vmov	r4, r5, d8
 800d8e8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800d8ec:	2600      	movs	r6, #0
 800d8ee:	e0e5      	b.n	800dabc <__kernel_rem_pio2+0x4ac>
 800d8f0:	2302      	movs	r3, #2
 800d8f2:	9302      	str	r3, [sp, #8]
 800d8f4:	e75c      	b.n	800d7b0 <__kernel_rem_pio2+0x1a0>
 800d8f6:	f8db 3000 	ldr.w	r3, [fp]
 800d8fa:	b955      	cbnz	r5, 800d912 <__kernel_rem_pio2+0x302>
 800d8fc:	b123      	cbz	r3, 800d908 <__kernel_rem_pio2+0x2f8>
 800d8fe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d902:	f8cb 3000 	str.w	r3, [fp]
 800d906:	2301      	movs	r3, #1
 800d908:	3201      	adds	r2, #1
 800d90a:	f10b 0b04 	add.w	fp, fp, #4
 800d90e:	461d      	mov	r5, r3
 800d910:	e755      	b.n	800d7be <__kernel_rem_pio2+0x1ae>
 800d912:	1acb      	subs	r3, r1, r3
 800d914:	f8cb 3000 	str.w	r3, [fp]
 800d918:	462b      	mov	r3, r5
 800d91a:	e7f5      	b.n	800d908 <__kernel_rem_pio2+0x2f8>
 800d91c:	1e62      	subs	r2, r4, #1
 800d91e:	ab0c      	add	r3, sp, #48	; 0x30
 800d920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d924:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d928:	a90c      	add	r1, sp, #48	; 0x30
 800d92a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d92e:	e754      	b.n	800d7da <__kernel_rem_pio2+0x1ca>
	...
 800d93c:	3ff00000 	.word	0x3ff00000
 800d940:	08010dd8 	.word	0x08010dd8
 800d944:	40200000 	.word	0x40200000
 800d948:	3ff00000 	.word	0x3ff00000
 800d94c:	3e700000 	.word	0x3e700000
 800d950:	41700000 	.word	0x41700000
 800d954:	3fe00000 	.word	0x3fe00000
 800d958:	08010d98 	.word	0x08010d98
 800d95c:	1e62      	subs	r2, r4, #1
 800d95e:	ab0c      	add	r3, sp, #48	; 0x30
 800d960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d964:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d968:	e7de      	b.n	800d928 <__kernel_rem_pio2+0x318>
 800d96a:	a90c      	add	r1, sp, #48	; 0x30
 800d96c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d970:	3b01      	subs	r3, #1
 800d972:	430a      	orrs	r2, r1
 800d974:	e790      	b.n	800d898 <__kernel_rem_pio2+0x288>
 800d976:	3301      	adds	r3, #1
 800d978:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d97c:	2900      	cmp	r1, #0
 800d97e:	d0fa      	beq.n	800d976 <__kernel_rem_pio2+0x366>
 800d980:	9a08      	ldr	r2, [sp, #32]
 800d982:	18e3      	adds	r3, r4, r3
 800d984:	18a6      	adds	r6, r4, r2
 800d986:	aa20      	add	r2, sp, #128	; 0x80
 800d988:	1c65      	adds	r5, r4, #1
 800d98a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d98e:	9302      	str	r3, [sp, #8]
 800d990:	9b02      	ldr	r3, [sp, #8]
 800d992:	42ab      	cmp	r3, r5
 800d994:	da04      	bge.n	800d9a0 <__kernel_rem_pio2+0x390>
 800d996:	461c      	mov	r4, r3
 800d998:	e6b5      	b.n	800d706 <__kernel_rem_pio2+0xf6>
 800d99a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d99c:	2301      	movs	r3, #1
 800d99e:	e7eb      	b.n	800d978 <__kernel_rem_pio2+0x368>
 800d9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9a6:	f7f2 fddd 	bl	8000564 <__aeabi_i2d>
 800d9aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9b0:	46b3      	mov	fp, r6
 800d9b2:	461c      	mov	r4, r3
 800d9b4:	2700      	movs	r7, #0
 800d9b6:	f04f 0800 	mov.w	r8, #0
 800d9ba:	f04f 0900 	mov.w	r9, #0
 800d9be:	9b06      	ldr	r3, [sp, #24]
 800d9c0:	429f      	cmp	r7, r3
 800d9c2:	dd06      	ble.n	800d9d2 <__kernel_rem_pio2+0x3c2>
 800d9c4:	ab70      	add	r3, sp, #448	; 0x1c0
 800d9c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d9ca:	e9c3 8900 	strd	r8, r9, [r3]
 800d9ce:	3501      	adds	r5, #1
 800d9d0:	e7de      	b.n	800d990 <__kernel_rem_pio2+0x380>
 800d9d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d9d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d9da:	f7f2 fe2d 	bl	8000638 <__aeabi_dmul>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	4640      	mov	r0, r8
 800d9e4:	4649      	mov	r1, r9
 800d9e6:	f7f2 fc71 	bl	80002cc <__adddf3>
 800d9ea:	3701      	adds	r7, #1
 800d9ec:	4680      	mov	r8, r0
 800d9ee:	4689      	mov	r9, r1
 800d9f0:	e7e5      	b.n	800d9be <__kernel_rem_pio2+0x3ae>
 800d9f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d9f6:	e754      	b.n	800d8a2 <__kernel_rem_pio2+0x292>
 800d9f8:	ec47 6b10 	vmov	d0, r6, r7
 800d9fc:	f1ca 0000 	rsb	r0, sl, #0
 800da00:	f000 fb26 	bl	800e050 <scalbn>
 800da04:	ec57 6b10 	vmov	r6, r7, d0
 800da08:	4b9f      	ldr	r3, [pc, #636]	; (800dc88 <__kernel_rem_pio2+0x678>)
 800da0a:	ee10 0a10 	vmov	r0, s0
 800da0e:	2200      	movs	r2, #0
 800da10:	4639      	mov	r1, r7
 800da12:	f7f3 f897 	bl	8000b44 <__aeabi_dcmpge>
 800da16:	b300      	cbz	r0, 800da5a <__kernel_rem_pio2+0x44a>
 800da18:	4b9c      	ldr	r3, [pc, #624]	; (800dc8c <__kernel_rem_pio2+0x67c>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	4630      	mov	r0, r6
 800da1e:	4639      	mov	r1, r7
 800da20:	f7f2 fe0a 	bl	8000638 <__aeabi_dmul>
 800da24:	f7f3 f8b8 	bl	8000b98 <__aeabi_d2iz>
 800da28:	4605      	mov	r5, r0
 800da2a:	f7f2 fd9b 	bl	8000564 <__aeabi_i2d>
 800da2e:	4b96      	ldr	r3, [pc, #600]	; (800dc88 <__kernel_rem_pio2+0x678>)
 800da30:	2200      	movs	r2, #0
 800da32:	f7f2 fe01 	bl	8000638 <__aeabi_dmul>
 800da36:	460b      	mov	r3, r1
 800da38:	4602      	mov	r2, r0
 800da3a:	4639      	mov	r1, r7
 800da3c:	4630      	mov	r0, r6
 800da3e:	f7f2 fc43 	bl	80002c8 <__aeabi_dsub>
 800da42:	f7f3 f8a9 	bl	8000b98 <__aeabi_d2iz>
 800da46:	f104 0b01 	add.w	fp, r4, #1
 800da4a:	ab0c      	add	r3, sp, #48	; 0x30
 800da4c:	f10a 0a18 	add.w	sl, sl, #24
 800da50:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800da54:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800da58:	e72b      	b.n	800d8b2 <__kernel_rem_pio2+0x2a2>
 800da5a:	4630      	mov	r0, r6
 800da5c:	4639      	mov	r1, r7
 800da5e:	f7f3 f89b 	bl	8000b98 <__aeabi_d2iz>
 800da62:	ab0c      	add	r3, sp, #48	; 0x30
 800da64:	46a3      	mov	fp, r4
 800da66:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800da6a:	e722      	b.n	800d8b2 <__kernel_rem_pio2+0x2a2>
 800da6c:	ab70      	add	r3, sp, #448	; 0x1c0
 800da6e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800da72:	ab0c      	add	r3, sp, #48	; 0x30
 800da74:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800da78:	f7f2 fd74 	bl	8000564 <__aeabi_i2d>
 800da7c:	4622      	mov	r2, r4
 800da7e:	462b      	mov	r3, r5
 800da80:	f7f2 fdda 	bl	8000638 <__aeabi_dmul>
 800da84:	4632      	mov	r2, r6
 800da86:	e9c9 0100 	strd	r0, r1, [r9]
 800da8a:	463b      	mov	r3, r7
 800da8c:	4620      	mov	r0, r4
 800da8e:	4629      	mov	r1, r5
 800da90:	f7f2 fdd2 	bl	8000638 <__aeabi_dmul>
 800da94:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800da98:	4604      	mov	r4, r0
 800da9a:	460d      	mov	r5, r1
 800da9c:	e713      	b.n	800d8c6 <__kernel_rem_pio2+0x2b6>
 800da9e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800daa2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800daa6:	f7f2 fdc7 	bl	8000638 <__aeabi_dmul>
 800daaa:	4602      	mov	r2, r0
 800daac:	460b      	mov	r3, r1
 800daae:	4620      	mov	r0, r4
 800dab0:	4629      	mov	r1, r5
 800dab2:	f7f2 fc0b 	bl	80002cc <__adddf3>
 800dab6:	3601      	adds	r6, #1
 800dab8:	4604      	mov	r4, r0
 800daba:	460d      	mov	r5, r1
 800dabc:	9b04      	ldr	r3, [sp, #16]
 800dabe:	429e      	cmp	r6, r3
 800dac0:	dc01      	bgt.n	800dac6 <__kernel_rem_pio2+0x4b6>
 800dac2:	45b0      	cmp	r8, r6
 800dac4:	daeb      	bge.n	800da9e <__kernel_rem_pio2+0x48e>
 800dac6:	ab48      	add	r3, sp, #288	; 0x120
 800dac8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dacc:	e9c3 4500 	strd	r4, r5, [r3]
 800dad0:	3f01      	subs	r7, #1
 800dad2:	f108 0801 	add.w	r8, r8, #1
 800dad6:	e6ff      	b.n	800d8d8 <__kernel_rem_pio2+0x2c8>
 800dad8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800dada:	2b02      	cmp	r3, #2
 800dadc:	dc0b      	bgt.n	800daf6 <__kernel_rem_pio2+0x4e6>
 800dade:	2b00      	cmp	r3, #0
 800dae0:	dc6e      	bgt.n	800dbc0 <__kernel_rem_pio2+0x5b0>
 800dae2:	d045      	beq.n	800db70 <__kernel_rem_pio2+0x560>
 800dae4:	9b07      	ldr	r3, [sp, #28]
 800dae6:	f003 0007 	and.w	r0, r3, #7
 800daea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800daee:	ecbd 8b02 	vpop	{d8}
 800daf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800daf8:	2b03      	cmp	r3, #3
 800dafa:	d1f3      	bne.n	800dae4 <__kernel_rem_pio2+0x4d4>
 800dafc:	ab48      	add	r3, sp, #288	; 0x120
 800dafe:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800db02:	46d0      	mov	r8, sl
 800db04:	46d9      	mov	r9, fp
 800db06:	f1b9 0f00 	cmp.w	r9, #0
 800db0a:	f1a8 0808 	sub.w	r8, r8, #8
 800db0e:	dc64      	bgt.n	800dbda <__kernel_rem_pio2+0x5ca>
 800db10:	465c      	mov	r4, fp
 800db12:	2c01      	cmp	r4, #1
 800db14:	f1aa 0a08 	sub.w	sl, sl, #8
 800db18:	dc7e      	bgt.n	800dc18 <__kernel_rem_pio2+0x608>
 800db1a:	2000      	movs	r0, #0
 800db1c:	2100      	movs	r1, #0
 800db1e:	f1bb 0f01 	cmp.w	fp, #1
 800db22:	f300 8097 	bgt.w	800dc54 <__kernel_rem_pio2+0x644>
 800db26:	9b02      	ldr	r3, [sp, #8]
 800db28:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800db2c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800db30:	2b00      	cmp	r3, #0
 800db32:	f040 8099 	bne.w	800dc68 <__kernel_rem_pio2+0x658>
 800db36:	9b01      	ldr	r3, [sp, #4]
 800db38:	e9c3 5600 	strd	r5, r6, [r3]
 800db3c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800db40:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800db44:	e7ce      	b.n	800dae4 <__kernel_rem_pio2+0x4d4>
 800db46:	ab48      	add	r3, sp, #288	; 0x120
 800db48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800db4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db50:	f7f2 fbbc 	bl	80002cc <__adddf3>
 800db54:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800db58:	f1bb 0f00 	cmp.w	fp, #0
 800db5c:	daf3      	bge.n	800db46 <__kernel_rem_pio2+0x536>
 800db5e:	9b02      	ldr	r3, [sp, #8]
 800db60:	b113      	cbz	r3, 800db68 <__kernel_rem_pio2+0x558>
 800db62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db66:	4619      	mov	r1, r3
 800db68:	9b01      	ldr	r3, [sp, #4]
 800db6a:	e9c3 0100 	strd	r0, r1, [r3]
 800db6e:	e7b9      	b.n	800dae4 <__kernel_rem_pio2+0x4d4>
 800db70:	2000      	movs	r0, #0
 800db72:	2100      	movs	r1, #0
 800db74:	e7f0      	b.n	800db58 <__kernel_rem_pio2+0x548>
 800db76:	ab48      	add	r3, sp, #288	; 0x120
 800db78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db80:	f7f2 fba4 	bl	80002cc <__adddf3>
 800db84:	3c01      	subs	r4, #1
 800db86:	2c00      	cmp	r4, #0
 800db88:	daf5      	bge.n	800db76 <__kernel_rem_pio2+0x566>
 800db8a:	9b02      	ldr	r3, [sp, #8]
 800db8c:	b1e3      	cbz	r3, 800dbc8 <__kernel_rem_pio2+0x5b8>
 800db8e:	4602      	mov	r2, r0
 800db90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db94:	9c01      	ldr	r4, [sp, #4]
 800db96:	e9c4 2300 	strd	r2, r3, [r4]
 800db9a:	4602      	mov	r2, r0
 800db9c:	460b      	mov	r3, r1
 800db9e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800dba2:	f7f2 fb91 	bl	80002c8 <__aeabi_dsub>
 800dba6:	ad4a      	add	r5, sp, #296	; 0x128
 800dba8:	2401      	movs	r4, #1
 800dbaa:	45a3      	cmp	fp, r4
 800dbac:	da0f      	bge.n	800dbce <__kernel_rem_pio2+0x5be>
 800dbae:	9b02      	ldr	r3, [sp, #8]
 800dbb0:	b113      	cbz	r3, 800dbb8 <__kernel_rem_pio2+0x5a8>
 800dbb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	9b01      	ldr	r3, [sp, #4]
 800dbba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dbbe:	e791      	b.n	800dae4 <__kernel_rem_pio2+0x4d4>
 800dbc0:	465c      	mov	r4, fp
 800dbc2:	2000      	movs	r0, #0
 800dbc4:	2100      	movs	r1, #0
 800dbc6:	e7de      	b.n	800db86 <__kernel_rem_pio2+0x576>
 800dbc8:	4602      	mov	r2, r0
 800dbca:	460b      	mov	r3, r1
 800dbcc:	e7e2      	b.n	800db94 <__kernel_rem_pio2+0x584>
 800dbce:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800dbd2:	f7f2 fb7b 	bl	80002cc <__adddf3>
 800dbd6:	3401      	adds	r4, #1
 800dbd8:	e7e7      	b.n	800dbaa <__kernel_rem_pio2+0x59a>
 800dbda:	e9d8 4500 	ldrd	r4, r5, [r8]
 800dbde:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	4632      	mov	r2, r6
 800dbe6:	463b      	mov	r3, r7
 800dbe8:	4629      	mov	r1, r5
 800dbea:	f7f2 fb6f 	bl	80002cc <__adddf3>
 800dbee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	4629      	mov	r1, r5
 800dbfa:	f7f2 fb65 	bl	80002c8 <__aeabi_dsub>
 800dbfe:	4632      	mov	r2, r6
 800dc00:	463b      	mov	r3, r7
 800dc02:	f7f2 fb63 	bl	80002cc <__adddf3>
 800dc06:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dc0a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800dc0e:	ed88 7b00 	vstr	d7, [r8]
 800dc12:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800dc16:	e776      	b.n	800db06 <__kernel_rem_pio2+0x4f6>
 800dc18:	e9da 8900 	ldrd	r8, r9, [sl]
 800dc1c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800dc20:	4640      	mov	r0, r8
 800dc22:	4632      	mov	r2, r6
 800dc24:	463b      	mov	r3, r7
 800dc26:	4649      	mov	r1, r9
 800dc28:	f7f2 fb50 	bl	80002cc <__adddf3>
 800dc2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc30:	4602      	mov	r2, r0
 800dc32:	460b      	mov	r3, r1
 800dc34:	4640      	mov	r0, r8
 800dc36:	4649      	mov	r1, r9
 800dc38:	f7f2 fb46 	bl	80002c8 <__aeabi_dsub>
 800dc3c:	4632      	mov	r2, r6
 800dc3e:	463b      	mov	r3, r7
 800dc40:	f7f2 fb44 	bl	80002cc <__adddf3>
 800dc44:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dc48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dc4c:	ed8a 7b00 	vstr	d7, [sl]
 800dc50:	3c01      	subs	r4, #1
 800dc52:	e75e      	b.n	800db12 <__kernel_rem_pio2+0x502>
 800dc54:	ab48      	add	r3, sp, #288	; 0x120
 800dc56:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5e:	f7f2 fb35 	bl	80002cc <__adddf3>
 800dc62:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dc66:	e75a      	b.n	800db1e <__kernel_rem_pio2+0x50e>
 800dc68:	9b01      	ldr	r3, [sp, #4]
 800dc6a:	9a01      	ldr	r2, [sp, #4]
 800dc6c:	601d      	str	r5, [r3, #0]
 800dc6e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800dc72:	605c      	str	r4, [r3, #4]
 800dc74:	609f      	str	r7, [r3, #8]
 800dc76:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800dc7a:	60d3      	str	r3, [r2, #12]
 800dc7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc80:	6110      	str	r0, [r2, #16]
 800dc82:	6153      	str	r3, [r2, #20]
 800dc84:	e72e      	b.n	800dae4 <__kernel_rem_pio2+0x4d4>
 800dc86:	bf00      	nop
 800dc88:	41700000 	.word	0x41700000
 800dc8c:	3e700000 	.word	0x3e700000

0800dc90 <__kernel_sin>:
 800dc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc94:	ed2d 8b04 	vpush	{d8-d9}
 800dc98:	eeb0 8a41 	vmov.f32	s16, s2
 800dc9c:	eef0 8a61 	vmov.f32	s17, s3
 800dca0:	ec55 4b10 	vmov	r4, r5, d0
 800dca4:	b083      	sub	sp, #12
 800dca6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dcaa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dcae:	9001      	str	r0, [sp, #4]
 800dcb0:	da06      	bge.n	800dcc0 <__kernel_sin+0x30>
 800dcb2:	ee10 0a10 	vmov	r0, s0
 800dcb6:	4629      	mov	r1, r5
 800dcb8:	f7f2 ff6e 	bl	8000b98 <__aeabi_d2iz>
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	d051      	beq.n	800dd64 <__kernel_sin+0xd4>
 800dcc0:	4622      	mov	r2, r4
 800dcc2:	462b      	mov	r3, r5
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	4629      	mov	r1, r5
 800dcc8:	f7f2 fcb6 	bl	8000638 <__aeabi_dmul>
 800dccc:	4682      	mov	sl, r0
 800dcce:	468b      	mov	fp, r1
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	4629      	mov	r1, r5
 800dcd8:	f7f2 fcae 	bl	8000638 <__aeabi_dmul>
 800dcdc:	a341      	add	r3, pc, #260	; (adr r3, 800dde4 <__kernel_sin+0x154>)
 800dcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce2:	4680      	mov	r8, r0
 800dce4:	4689      	mov	r9, r1
 800dce6:	4650      	mov	r0, sl
 800dce8:	4659      	mov	r1, fp
 800dcea:	f7f2 fca5 	bl	8000638 <__aeabi_dmul>
 800dcee:	a33f      	add	r3, pc, #252	; (adr r3, 800ddec <__kernel_sin+0x15c>)
 800dcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf4:	f7f2 fae8 	bl	80002c8 <__aeabi_dsub>
 800dcf8:	4652      	mov	r2, sl
 800dcfa:	465b      	mov	r3, fp
 800dcfc:	f7f2 fc9c 	bl	8000638 <__aeabi_dmul>
 800dd00:	a33c      	add	r3, pc, #240	; (adr r3, 800ddf4 <__kernel_sin+0x164>)
 800dd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd06:	f7f2 fae1 	bl	80002cc <__adddf3>
 800dd0a:	4652      	mov	r2, sl
 800dd0c:	465b      	mov	r3, fp
 800dd0e:	f7f2 fc93 	bl	8000638 <__aeabi_dmul>
 800dd12:	a33a      	add	r3, pc, #232	; (adr r3, 800ddfc <__kernel_sin+0x16c>)
 800dd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd18:	f7f2 fad6 	bl	80002c8 <__aeabi_dsub>
 800dd1c:	4652      	mov	r2, sl
 800dd1e:	465b      	mov	r3, fp
 800dd20:	f7f2 fc8a 	bl	8000638 <__aeabi_dmul>
 800dd24:	a337      	add	r3, pc, #220	; (adr r3, 800de04 <__kernel_sin+0x174>)
 800dd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2a:	f7f2 facf 	bl	80002cc <__adddf3>
 800dd2e:	9b01      	ldr	r3, [sp, #4]
 800dd30:	4606      	mov	r6, r0
 800dd32:	460f      	mov	r7, r1
 800dd34:	b9eb      	cbnz	r3, 800dd72 <__kernel_sin+0xe2>
 800dd36:	4602      	mov	r2, r0
 800dd38:	460b      	mov	r3, r1
 800dd3a:	4650      	mov	r0, sl
 800dd3c:	4659      	mov	r1, fp
 800dd3e:	f7f2 fc7b 	bl	8000638 <__aeabi_dmul>
 800dd42:	a325      	add	r3, pc, #148	; (adr r3, 800ddd8 <__kernel_sin+0x148>)
 800dd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd48:	f7f2 fabe 	bl	80002c8 <__aeabi_dsub>
 800dd4c:	4642      	mov	r2, r8
 800dd4e:	464b      	mov	r3, r9
 800dd50:	f7f2 fc72 	bl	8000638 <__aeabi_dmul>
 800dd54:	4602      	mov	r2, r0
 800dd56:	460b      	mov	r3, r1
 800dd58:	4620      	mov	r0, r4
 800dd5a:	4629      	mov	r1, r5
 800dd5c:	f7f2 fab6 	bl	80002cc <__adddf3>
 800dd60:	4604      	mov	r4, r0
 800dd62:	460d      	mov	r5, r1
 800dd64:	ec45 4b10 	vmov	d0, r4, r5
 800dd68:	b003      	add	sp, #12
 800dd6a:	ecbd 8b04 	vpop	{d8-d9}
 800dd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd72:	4b1b      	ldr	r3, [pc, #108]	; (800dde0 <__kernel_sin+0x150>)
 800dd74:	ec51 0b18 	vmov	r0, r1, d8
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f7f2 fc5d 	bl	8000638 <__aeabi_dmul>
 800dd7e:	4632      	mov	r2, r6
 800dd80:	ec41 0b19 	vmov	d9, r0, r1
 800dd84:	463b      	mov	r3, r7
 800dd86:	4640      	mov	r0, r8
 800dd88:	4649      	mov	r1, r9
 800dd8a:	f7f2 fc55 	bl	8000638 <__aeabi_dmul>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	460b      	mov	r3, r1
 800dd92:	ec51 0b19 	vmov	r0, r1, d9
 800dd96:	f7f2 fa97 	bl	80002c8 <__aeabi_dsub>
 800dd9a:	4652      	mov	r2, sl
 800dd9c:	465b      	mov	r3, fp
 800dd9e:	f7f2 fc4b 	bl	8000638 <__aeabi_dmul>
 800dda2:	ec53 2b18 	vmov	r2, r3, d8
 800dda6:	f7f2 fa8f 	bl	80002c8 <__aeabi_dsub>
 800ddaa:	a30b      	add	r3, pc, #44	; (adr r3, 800ddd8 <__kernel_sin+0x148>)
 800ddac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb0:	4606      	mov	r6, r0
 800ddb2:	460f      	mov	r7, r1
 800ddb4:	4640      	mov	r0, r8
 800ddb6:	4649      	mov	r1, r9
 800ddb8:	f7f2 fc3e 	bl	8000638 <__aeabi_dmul>
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	4639      	mov	r1, r7
 800ddc4:	f7f2 fa82 	bl	80002cc <__adddf3>
 800ddc8:	4602      	mov	r2, r0
 800ddca:	460b      	mov	r3, r1
 800ddcc:	4620      	mov	r0, r4
 800ddce:	4629      	mov	r1, r5
 800ddd0:	f7f2 fa7a 	bl	80002c8 <__aeabi_dsub>
 800ddd4:	e7c4      	b.n	800dd60 <__kernel_sin+0xd0>
 800ddd6:	bf00      	nop
 800ddd8:	55555549 	.word	0x55555549
 800dddc:	3fc55555 	.word	0x3fc55555
 800dde0:	3fe00000 	.word	0x3fe00000
 800dde4:	5acfd57c 	.word	0x5acfd57c
 800dde8:	3de5d93a 	.word	0x3de5d93a
 800ddec:	8a2b9ceb 	.word	0x8a2b9ceb
 800ddf0:	3e5ae5e6 	.word	0x3e5ae5e6
 800ddf4:	57b1fe7d 	.word	0x57b1fe7d
 800ddf8:	3ec71de3 	.word	0x3ec71de3
 800ddfc:	19c161d5 	.word	0x19c161d5
 800de00:	3f2a01a0 	.word	0x3f2a01a0
 800de04:	1110f8a6 	.word	0x1110f8a6
 800de08:	3f811111 	.word	0x3f811111

0800de0c <fabs>:
 800de0c:	ec51 0b10 	vmov	r0, r1, d0
 800de10:	ee10 2a10 	vmov	r2, s0
 800de14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800de18:	ec43 2b10 	vmov	d0, r2, r3
 800de1c:	4770      	bx	lr

0800de1e <finite>:
 800de1e:	b082      	sub	sp, #8
 800de20:	ed8d 0b00 	vstr	d0, [sp]
 800de24:	9801      	ldr	r0, [sp, #4]
 800de26:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800de2a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800de2e:	0fc0      	lsrs	r0, r0, #31
 800de30:	b002      	add	sp, #8
 800de32:	4770      	bx	lr
 800de34:	0000      	movs	r0, r0
	...

0800de38 <floor>:
 800de38:	ec51 0b10 	vmov	r0, r1, d0
 800de3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800de44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800de48:	2e13      	cmp	r6, #19
 800de4a:	ee10 5a10 	vmov	r5, s0
 800de4e:	ee10 8a10 	vmov	r8, s0
 800de52:	460c      	mov	r4, r1
 800de54:	dc32      	bgt.n	800debc <floor+0x84>
 800de56:	2e00      	cmp	r6, #0
 800de58:	da14      	bge.n	800de84 <floor+0x4c>
 800de5a:	a333      	add	r3, pc, #204	; (adr r3, 800df28 <floor+0xf0>)
 800de5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de60:	f7f2 fa34 	bl	80002cc <__adddf3>
 800de64:	2200      	movs	r2, #0
 800de66:	2300      	movs	r3, #0
 800de68:	f7f2 fe76 	bl	8000b58 <__aeabi_dcmpgt>
 800de6c:	b138      	cbz	r0, 800de7e <floor+0x46>
 800de6e:	2c00      	cmp	r4, #0
 800de70:	da57      	bge.n	800df22 <floor+0xea>
 800de72:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800de76:	431d      	orrs	r5, r3
 800de78:	d001      	beq.n	800de7e <floor+0x46>
 800de7a:	4c2d      	ldr	r4, [pc, #180]	; (800df30 <floor+0xf8>)
 800de7c:	2500      	movs	r5, #0
 800de7e:	4621      	mov	r1, r4
 800de80:	4628      	mov	r0, r5
 800de82:	e025      	b.n	800ded0 <floor+0x98>
 800de84:	4f2b      	ldr	r7, [pc, #172]	; (800df34 <floor+0xfc>)
 800de86:	4137      	asrs	r7, r6
 800de88:	ea01 0307 	and.w	r3, r1, r7
 800de8c:	4303      	orrs	r3, r0
 800de8e:	d01f      	beq.n	800ded0 <floor+0x98>
 800de90:	a325      	add	r3, pc, #148	; (adr r3, 800df28 <floor+0xf0>)
 800de92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de96:	f7f2 fa19 	bl	80002cc <__adddf3>
 800de9a:	2200      	movs	r2, #0
 800de9c:	2300      	movs	r3, #0
 800de9e:	f7f2 fe5b 	bl	8000b58 <__aeabi_dcmpgt>
 800dea2:	2800      	cmp	r0, #0
 800dea4:	d0eb      	beq.n	800de7e <floor+0x46>
 800dea6:	2c00      	cmp	r4, #0
 800dea8:	bfbe      	ittt	lt
 800deaa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800deae:	fa43 f606 	asrlt.w	r6, r3, r6
 800deb2:	19a4      	addlt	r4, r4, r6
 800deb4:	ea24 0407 	bic.w	r4, r4, r7
 800deb8:	2500      	movs	r5, #0
 800deba:	e7e0      	b.n	800de7e <floor+0x46>
 800debc:	2e33      	cmp	r6, #51	; 0x33
 800debe:	dd0b      	ble.n	800ded8 <floor+0xa0>
 800dec0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dec4:	d104      	bne.n	800ded0 <floor+0x98>
 800dec6:	ee10 2a10 	vmov	r2, s0
 800deca:	460b      	mov	r3, r1
 800decc:	f7f2 f9fe 	bl	80002cc <__adddf3>
 800ded0:	ec41 0b10 	vmov	d0, r0, r1
 800ded4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ded8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800dedc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dee0:	fa23 f707 	lsr.w	r7, r3, r7
 800dee4:	4207      	tst	r7, r0
 800dee6:	d0f3      	beq.n	800ded0 <floor+0x98>
 800dee8:	a30f      	add	r3, pc, #60	; (adr r3, 800df28 <floor+0xf0>)
 800deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deee:	f7f2 f9ed 	bl	80002cc <__adddf3>
 800def2:	2200      	movs	r2, #0
 800def4:	2300      	movs	r3, #0
 800def6:	f7f2 fe2f 	bl	8000b58 <__aeabi_dcmpgt>
 800defa:	2800      	cmp	r0, #0
 800defc:	d0bf      	beq.n	800de7e <floor+0x46>
 800defe:	2c00      	cmp	r4, #0
 800df00:	da02      	bge.n	800df08 <floor+0xd0>
 800df02:	2e14      	cmp	r6, #20
 800df04:	d103      	bne.n	800df0e <floor+0xd6>
 800df06:	3401      	adds	r4, #1
 800df08:	ea25 0507 	bic.w	r5, r5, r7
 800df0c:	e7b7      	b.n	800de7e <floor+0x46>
 800df0e:	2301      	movs	r3, #1
 800df10:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800df14:	fa03 f606 	lsl.w	r6, r3, r6
 800df18:	4435      	add	r5, r6
 800df1a:	4545      	cmp	r5, r8
 800df1c:	bf38      	it	cc
 800df1e:	18e4      	addcc	r4, r4, r3
 800df20:	e7f2      	b.n	800df08 <floor+0xd0>
 800df22:	2500      	movs	r5, #0
 800df24:	462c      	mov	r4, r5
 800df26:	e7aa      	b.n	800de7e <floor+0x46>
 800df28:	8800759c 	.word	0x8800759c
 800df2c:	7e37e43c 	.word	0x7e37e43c
 800df30:	bff00000 	.word	0xbff00000
 800df34:	000fffff 	.word	0x000fffff

0800df38 <rint>:
 800df38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df3a:	ec51 0b10 	vmov	r0, r1, d0
 800df3e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800df42:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800df46:	2e13      	cmp	r6, #19
 800df48:	ee10 4a10 	vmov	r4, s0
 800df4c:	460b      	mov	r3, r1
 800df4e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800df52:	dc58      	bgt.n	800e006 <rint+0xce>
 800df54:	2e00      	cmp	r6, #0
 800df56:	da2b      	bge.n	800dfb0 <rint+0x78>
 800df58:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800df5c:	4302      	orrs	r2, r0
 800df5e:	d023      	beq.n	800dfa8 <rint+0x70>
 800df60:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800df64:	4302      	orrs	r2, r0
 800df66:	4254      	negs	r4, r2
 800df68:	4314      	orrs	r4, r2
 800df6a:	0c4b      	lsrs	r3, r1, #17
 800df6c:	0b24      	lsrs	r4, r4, #12
 800df6e:	045b      	lsls	r3, r3, #17
 800df70:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800df74:	ea44 0103 	orr.w	r1, r4, r3
 800df78:	4b32      	ldr	r3, [pc, #200]	; (800e044 <rint+0x10c>)
 800df7a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800df7e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800df82:	4602      	mov	r2, r0
 800df84:	460b      	mov	r3, r1
 800df86:	4630      	mov	r0, r6
 800df88:	4639      	mov	r1, r7
 800df8a:	f7f2 f99f 	bl	80002cc <__adddf3>
 800df8e:	e9cd 0100 	strd	r0, r1, [sp]
 800df92:	463b      	mov	r3, r7
 800df94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df98:	4632      	mov	r2, r6
 800df9a:	f7f2 f995 	bl	80002c8 <__aeabi_dsub>
 800df9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dfa2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800dfa6:	4639      	mov	r1, r7
 800dfa8:	ec41 0b10 	vmov	d0, r0, r1
 800dfac:	b003      	add	sp, #12
 800dfae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfb0:	4a25      	ldr	r2, [pc, #148]	; (800e048 <rint+0x110>)
 800dfb2:	4132      	asrs	r2, r6
 800dfb4:	ea01 0702 	and.w	r7, r1, r2
 800dfb8:	4307      	orrs	r7, r0
 800dfba:	d0f5      	beq.n	800dfa8 <rint+0x70>
 800dfbc:	0851      	lsrs	r1, r2, #1
 800dfbe:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800dfc2:	4314      	orrs	r4, r2
 800dfc4:	d00c      	beq.n	800dfe0 <rint+0xa8>
 800dfc6:	ea23 0201 	bic.w	r2, r3, r1
 800dfca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dfce:	2e13      	cmp	r6, #19
 800dfd0:	fa43 f606 	asr.w	r6, r3, r6
 800dfd4:	bf0c      	ite	eq
 800dfd6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800dfda:	2400      	movne	r4, #0
 800dfdc:	ea42 0306 	orr.w	r3, r2, r6
 800dfe0:	4918      	ldr	r1, [pc, #96]	; (800e044 <rint+0x10c>)
 800dfe2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800dfe6:	4622      	mov	r2, r4
 800dfe8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dfec:	4620      	mov	r0, r4
 800dfee:	4629      	mov	r1, r5
 800dff0:	f7f2 f96c 	bl	80002cc <__adddf3>
 800dff4:	e9cd 0100 	strd	r0, r1, [sp]
 800dff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dffc:	4622      	mov	r2, r4
 800dffe:	462b      	mov	r3, r5
 800e000:	f7f2 f962 	bl	80002c8 <__aeabi_dsub>
 800e004:	e7d0      	b.n	800dfa8 <rint+0x70>
 800e006:	2e33      	cmp	r6, #51	; 0x33
 800e008:	dd07      	ble.n	800e01a <rint+0xe2>
 800e00a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e00e:	d1cb      	bne.n	800dfa8 <rint+0x70>
 800e010:	ee10 2a10 	vmov	r2, s0
 800e014:	f7f2 f95a 	bl	80002cc <__adddf3>
 800e018:	e7c6      	b.n	800dfa8 <rint+0x70>
 800e01a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e01e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e022:	40d6      	lsrs	r6, r2
 800e024:	4230      	tst	r0, r6
 800e026:	d0bf      	beq.n	800dfa8 <rint+0x70>
 800e028:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800e02c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800e030:	bf1f      	itttt	ne
 800e032:	ea24 0101 	bicne.w	r1, r4, r1
 800e036:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e03a:	fa44 f202 	asrne.w	r2, r4, r2
 800e03e:	ea41 0402 	orrne.w	r4, r1, r2
 800e042:	e7cd      	b.n	800dfe0 <rint+0xa8>
 800e044:	08010de8 	.word	0x08010de8
 800e048:	000fffff 	.word	0x000fffff
 800e04c:	00000000 	.word	0x00000000

0800e050 <scalbn>:
 800e050:	b570      	push	{r4, r5, r6, lr}
 800e052:	ec55 4b10 	vmov	r4, r5, d0
 800e056:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e05a:	4606      	mov	r6, r0
 800e05c:	462b      	mov	r3, r5
 800e05e:	b99a      	cbnz	r2, 800e088 <scalbn+0x38>
 800e060:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e064:	4323      	orrs	r3, r4
 800e066:	d036      	beq.n	800e0d6 <scalbn+0x86>
 800e068:	4b39      	ldr	r3, [pc, #228]	; (800e150 <scalbn+0x100>)
 800e06a:	4629      	mov	r1, r5
 800e06c:	ee10 0a10 	vmov	r0, s0
 800e070:	2200      	movs	r2, #0
 800e072:	f7f2 fae1 	bl	8000638 <__aeabi_dmul>
 800e076:	4b37      	ldr	r3, [pc, #220]	; (800e154 <scalbn+0x104>)
 800e078:	429e      	cmp	r6, r3
 800e07a:	4604      	mov	r4, r0
 800e07c:	460d      	mov	r5, r1
 800e07e:	da10      	bge.n	800e0a2 <scalbn+0x52>
 800e080:	a32b      	add	r3, pc, #172	; (adr r3, 800e130 <scalbn+0xe0>)
 800e082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e086:	e03a      	b.n	800e0fe <scalbn+0xae>
 800e088:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e08c:	428a      	cmp	r2, r1
 800e08e:	d10c      	bne.n	800e0aa <scalbn+0x5a>
 800e090:	ee10 2a10 	vmov	r2, s0
 800e094:	4620      	mov	r0, r4
 800e096:	4629      	mov	r1, r5
 800e098:	f7f2 f918 	bl	80002cc <__adddf3>
 800e09c:	4604      	mov	r4, r0
 800e09e:	460d      	mov	r5, r1
 800e0a0:	e019      	b.n	800e0d6 <scalbn+0x86>
 800e0a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	3a36      	subs	r2, #54	; 0x36
 800e0aa:	4432      	add	r2, r6
 800e0ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e0b0:	428a      	cmp	r2, r1
 800e0b2:	dd08      	ble.n	800e0c6 <scalbn+0x76>
 800e0b4:	2d00      	cmp	r5, #0
 800e0b6:	a120      	add	r1, pc, #128	; (adr r1, 800e138 <scalbn+0xe8>)
 800e0b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0bc:	da1c      	bge.n	800e0f8 <scalbn+0xa8>
 800e0be:	a120      	add	r1, pc, #128	; (adr r1, 800e140 <scalbn+0xf0>)
 800e0c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0c4:	e018      	b.n	800e0f8 <scalbn+0xa8>
 800e0c6:	2a00      	cmp	r2, #0
 800e0c8:	dd08      	ble.n	800e0dc <scalbn+0x8c>
 800e0ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e0ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e0d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e0d6:	ec45 4b10 	vmov	d0, r4, r5
 800e0da:	bd70      	pop	{r4, r5, r6, pc}
 800e0dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e0e0:	da19      	bge.n	800e116 <scalbn+0xc6>
 800e0e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e0e6:	429e      	cmp	r6, r3
 800e0e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e0ec:	dd0a      	ble.n	800e104 <scalbn+0xb4>
 800e0ee:	a112      	add	r1, pc, #72	; (adr r1, 800e138 <scalbn+0xe8>)
 800e0f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d1e2      	bne.n	800e0be <scalbn+0x6e>
 800e0f8:	a30f      	add	r3, pc, #60	; (adr r3, 800e138 <scalbn+0xe8>)
 800e0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fe:	f7f2 fa9b 	bl	8000638 <__aeabi_dmul>
 800e102:	e7cb      	b.n	800e09c <scalbn+0x4c>
 800e104:	a10a      	add	r1, pc, #40	; (adr r1, 800e130 <scalbn+0xe0>)
 800e106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d0b8      	beq.n	800e080 <scalbn+0x30>
 800e10e:	a10e      	add	r1, pc, #56	; (adr r1, 800e148 <scalbn+0xf8>)
 800e110:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e114:	e7b4      	b.n	800e080 <scalbn+0x30>
 800e116:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e11a:	3236      	adds	r2, #54	; 0x36
 800e11c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e120:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e124:	4620      	mov	r0, r4
 800e126:	4b0c      	ldr	r3, [pc, #48]	; (800e158 <scalbn+0x108>)
 800e128:	2200      	movs	r2, #0
 800e12a:	e7e8      	b.n	800e0fe <scalbn+0xae>
 800e12c:	f3af 8000 	nop.w
 800e130:	c2f8f359 	.word	0xc2f8f359
 800e134:	01a56e1f 	.word	0x01a56e1f
 800e138:	8800759c 	.word	0x8800759c
 800e13c:	7e37e43c 	.word	0x7e37e43c
 800e140:	8800759c 	.word	0x8800759c
 800e144:	fe37e43c 	.word	0xfe37e43c
 800e148:	c2f8f359 	.word	0xc2f8f359
 800e14c:	81a56e1f 	.word	0x81a56e1f
 800e150:	43500000 	.word	0x43500000
 800e154:	ffff3cb0 	.word	0xffff3cb0
 800e158:	3c900000 	.word	0x3c900000

0800e15c <_init>:
 800e15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e15e:	bf00      	nop
 800e160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e162:	bc08      	pop	{r3}
 800e164:	469e      	mov	lr, r3
 800e166:	4770      	bx	lr

0800e168 <_fini>:
 800e168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e16a:	bf00      	nop
 800e16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e16e:	bc08      	pop	{r3}
 800e170:	469e      	mov	lr, r3
 800e172:	4770      	bx	lr
